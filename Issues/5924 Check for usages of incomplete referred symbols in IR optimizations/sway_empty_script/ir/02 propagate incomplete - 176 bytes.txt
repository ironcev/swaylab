// IR: Initial
script {
    pub entry fn __entry() -> slice, !1 {
        local () result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr (), result, !3
        store v0 to v1, !3
        v2 = get_local ptr (), result, !4
        v3 = load v2
        v4 = call encode_1(v3), !5
        ret slice v4
    }

    fn main_0() -> (), !7 {
        entry():
        v0 = const unit ()
        ret () v0
    }

    pub fn encode_1(item !9: ()) -> slice, !10 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_3(), !11
        v1 = call abi_encode_2(item, v0), !12
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !13
        store v1 to v2, !13
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !14
        v4 = load v3
        v5 = call as_raw_slice_4(v4), !15
        ret slice v5
    }

    pub fn abi_encode_2(self !16: (), buffer !17: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !18 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn new_3() -> { { u64, u64, u64 } }, !19 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !20
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !20
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_4(self !21: { { u64, u64, u64 } }) -> slice, !22 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !23
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

// IR: [mem2reg] Promotion of local memory to SSA registers
script {
    pub entry fn __entry() -> slice, !1 {
        local () result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr (), result, !3
        v2 = get_local ptr (), result, !4
        v3 = call encode_1(v0), !5
        ret slice v3
    }

    fn main_0() -> (), !7 {
        entry():
        v0 = const unit ()
        ret () v0
    }

    pub fn encode_1(item !9: ()) -> slice, !10 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_3(), !11
        v1 = call abi_encode_2(item, v0), !12
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !13
        store v1 to v2, !13
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !14
        v4 = load v3
        v5 = call as_raw_slice_4(v4), !15
        ret slice v5
    }

    pub fn abi_encode_2(self !16: (), buffer !17: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !18 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn new_3() -> { { u64, u64, u64 } }, !19 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !20
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !20
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_4(self !21: { { u64, u64, u64 } }) -> slice, !22 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !23
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

// IR: [inline] Function inlining
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { { u64, u64, u64 } } buffer
        local () result

        entry():
        v0 = const unit ()
        br block0(v0), !2

        block0(v1: ()):
        v2 = get_local ptr (), result, !3
        v3 = get_local ptr (), result, !4
        v4 = const u64 1024
        v5 = asm(cap: v4) -> u64 hp, !8 {
            aloc   cap
        }
        v6 = int_to_ptr v5 to ptr u8, !9
        v7 = ptr_to_int v6 to u64, !10
        v8 = get_local ptr { u64, u64, u64 }, __anon_0, !11
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !12
        store v7 to v10, !13
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !14
        store v4 to v12, !15
        v13 = const u64 2
        v14 = get_elem_ptr v8, ptr u64, v13, !16
        v15 = const u64 0
        store v15 to v14, !17
        v16 = asm(buffer: v8) -> { u64, u64, u64 } buffer, !18 {
        }
        v17 = get_local ptr { { u64, u64, u64 } }, __anon_1, !20
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr { u64, u64, u64 }, v18, !21
        store v16 to v19, !22
        v20 = load v17, !23
        br encode_1_block0(v20), !24

        encode_1_block0(v21: { { u64, u64, u64 } }):
        br encode_1_block1(v21), !26

        encode_1_block1(v22: { { u64, u64, u64 } }):
        v23 = get_local ptr { { u64, u64, u64 } }, buffer, !28
        store v22 to v23, !29
        v24 = get_local ptr { { u64, u64, u64 } }, buffer, !31
        v25 = load v24, !5
        v26 = ptr_to_int v25 to u64, !33
        v27 = int_to_ptr v26 to ptr { { u64, u64, u64 } }, !34
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { u64, u64, u64 }, v28, !36
        v30 = load v29, !37
        v31 = asm(buffer: v30) -> { u64, u64, u64 } buffer, !38 {
        }
        v32 = get_local ptr { u64, u64, u64 }, __anon_00, !39
        store v31 to v32, !40
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !41
        v35 = load v34, !42
        v36 = int_to_ptr v35 to ptr u8, !43
        v37 = const u64 1
        v38 = get_elem_ptr v32, ptr u64, v37, !44
        v39 = load v38, !45
        v40 = const u64 2
        v41 = get_elem_ptr v32, ptr u64, v40, !46
        v42 = load v41, !47
        v43 = ptr_to_int v36 to u64, !48
        v44 = get_local ptr { u64, u64 }, __anon_10, !49
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45, !50
        store v43 to v46, !51
        v47 = const u64 1
        v48 = get_elem_ptr v44, ptr u64, v47, !52
        store v42 to v48, !53
        v49 = asm(s: v44) -> slice s, !54 {
        }
        br encode_1_block2(v49), !55

        encode_1_block2(v50: slice):
        br block1(v50), !5

        block1(v51: slice):
        ret slice v51
    }

    fn main_0() -> (), !57 {
        entry():
        v0 = const unit ()
        ret () v0
    }

    pub fn encode_1(item !58: ()) -> slice, !59 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp, !7 {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8, !7
        v3 = ptr_to_int v2 to u64, !7
        v4 = get_local ptr { u64, u64, u64 }, __anon_0, !7
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !7
        store v3 to v6, !7
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !7
        store v0 to v8, !7
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9, !7
        v11 = const u64 0
        store v11 to v10, !7
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer, !7 {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !60
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14, !7
        store v12 to v15, !61
        v16 = load v13, !7
        br block0(v16), !7

        block0(v17: { { u64, u64, u64 } }):
        br block1(v17), !25

        block1(v18: { { u64, u64, u64 } }):
        v19 = get_local ptr { { u64, u64, u64 } }, buffer, !27
        store v18 to v19, !27
        v20 = get_local ptr { { u64, u64, u64 } }, buffer, !30
        v21 = load v20
        v22 = ptr_to_int v21 to u64, !32
        v23 = int_to_ptr v22 to ptr { { u64, u64, u64 } }, !32
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { u64, u64, u64 }, v24, !62
        v26 = load v25, !32
        v27 = asm(buffer: v26) -> { u64, u64, u64 } buffer, !32 {
        }
        v28 = get_local ptr { u64, u64, u64 }, __anon_00, !32
        store v27 to v28, !32
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !32
        v31 = load v30, !32
        v32 = int_to_ptr v31 to ptr u8, !32
        v33 = const u64 1
        v34 = get_elem_ptr v28, ptr u64, v33, !32
        v35 = load v34, !32
        v36 = const u64 2
        v37 = get_elem_ptr v28, ptr u64, v36, !32
        v38 = load v37, !32
        v39 = ptr_to_int v32 to u64, !32
        v40 = get_local ptr { u64, u64 }, __anon_10, !32
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !32
        store v39 to v42, !32
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !32
        store v38 to v44, !32
        v45 = asm(s: v40) -> slice s, !32 {
        }
        br block2(v45), !32

        block2(v46: slice):
        ret slice v46
    }

    pub fn abi_encode_2(self !63: (), buffer !64: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !65 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn new_3() -> { { u64, u64, u64 } }, !66 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !19
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !19
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_4(self !67: { { u64, u64, u64 } }) -> slice, !68 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !35
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { { u64, u64, u64 } } buffer
        local () result

        entry():
        v0 = get_local ptr (), result, !2
        v1 = get_local ptr (), result, !3
        v2 = const u64 1024
        v3 = asm(cap: v2) -> u64 hp, !7 {
            aloc   cap
        }
        v4 = int_to_ptr v3 to ptr u8, !8
        v5 = ptr_to_int v4 to u64, !9
        v6 = get_local ptr { u64, u64, u64 }, __anon_0, !10
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !11
        store v5 to v8, !12
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !13
        store v2 to v10, !14
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11, !15
        v13 = const u64 0
        store v13 to v12, !16
        v14 = asm(buffer: v6) -> { u64, u64, u64 } buffer, !17 {
        }
        v15 = get_local ptr { { u64, u64, u64 } }, __anon_1, !19
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64, u64, u64 }, v16, !20
        store v14 to v17, !21
        v18 = load v15, !22
        v19 = get_local ptr { { u64, u64, u64 } }, buffer, !24
        store v18 to v19, !25
        v20 = get_local ptr { { u64, u64, u64 } }, buffer, !27
        v21 = load v20, !4
        v22 = ptr_to_int v21 to u64, !29
        v23 = int_to_ptr v22 to ptr { { u64, u64, u64 } }, !30
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { u64, u64, u64 }, v24, !32
        v26 = load v25, !33
        v27 = asm(buffer: v26) -> { u64, u64, u64 } buffer, !34 {
        }
        v28 = get_local ptr { u64, u64, u64 }, __anon_00, !35
        store v27 to v28, !36
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !37
        v31 = load v30, !38
        v32 = int_to_ptr v31 to ptr u8, !39
        v33 = const u64 1
        v34 = get_elem_ptr v28, ptr u64, v33, !40
        v35 = load v34, !41
        v36 = const u64 2
        v37 = get_elem_ptr v28, ptr u64, v36, !42
        v38 = load v37, !43
        v39 = ptr_to_int v32 to u64, !44
        v40 = get_local ptr { u64, u64 }, __anon_10, !45
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !46
        store v39 to v42, !47
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !48
        store v38 to v44, !49
        v45 = asm(s: v40) -> slice s, !50 {
        }
        ret slice v45
    }

    fn main_0() -> (), !52 {
        entry():
        v0 = const unit ()
        ret () v0
    }

    pub fn encode_1(item !53: ()) -> slice, !54 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp, !6 {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8, !6
        v3 = ptr_to_int v2 to u64, !6
        v4 = get_local ptr { u64, u64, u64 }, __anon_0, !6
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !6
        store v3 to v6, !6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !6
        store v0 to v8, !6
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9, !6
        v11 = const u64 0
        store v11 to v10, !6
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer, !6 {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !55
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14, !6
        store v12 to v15, !56
        v16 = load v13, !6
        v17 = get_local ptr { { u64, u64, u64 } }, buffer, !23
        store v16 to v17, !23
        v18 = get_local ptr { { u64, u64, u64 } }, buffer, !26
        v19 = load v18
        v20 = ptr_to_int v19 to u64, !28
        v21 = int_to_ptr v20 to ptr { { u64, u64, u64 } }, !28
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64, u64, u64 }, v22, !57
        v24 = load v23, !28
        v25 = asm(buffer: v24) -> { u64, u64, u64 } buffer, !28 {
        }
        v26 = get_local ptr { u64, u64, u64 }, __anon_00, !28
        store v25 to v26, !28
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !28
        v29 = load v28, !28
        v30 = int_to_ptr v29 to ptr u8, !28
        v31 = const u64 1
        v32 = get_elem_ptr v26, ptr u64, v31, !28
        v33 = load v32, !28
        v34 = const u64 2
        v35 = get_elem_ptr v26, ptr u64, v34, !28
        v36 = load v35, !28
        v37 = ptr_to_int v30 to u64, !28
        v38 = get_local ptr { u64, u64 }, __anon_10, !28
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !28
        store v37 to v40, !28
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr u64, v41, !28
        store v36 to v42, !28
        v43 = asm(s: v38) -> slice s, !28 {
        }
        ret slice v43
    }

    pub fn abi_encode_2(self !58: (), buffer !59: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !60 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn new_3() -> { { u64, u64, u64 } }, !61 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !18
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !18
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_4(self !62: { { u64, u64, u64 } }) -> slice, !63 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !31
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

// IR: [fn-dce] Dead function elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { { u64, u64, u64 } } buffer
        local () result

        entry():
        v0 = get_local ptr (), result, !2
        v1 = get_local ptr (), result, !3
        v2 = const u64 1024
        v3 = asm(cap: v2) -> u64 hp, !7 {
            aloc   cap
        }
        v4 = int_to_ptr v3 to ptr u8, !8
        v5 = ptr_to_int v4 to u64, !9
        v6 = get_local ptr { u64, u64, u64 }, __anon_0, !10
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !11
        store v5 to v8, !12
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !13
        store v2 to v10, !14
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11, !15
        v13 = const u64 0
        store v13 to v12, !16
        v14 = asm(buffer: v6) -> { u64, u64, u64 } buffer, !17 {
        }
        v15 = get_local ptr { { u64, u64, u64 } }, __anon_1, !19
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64, u64, u64 }, v16, !20
        store v14 to v17, !21
        v18 = load v15, !22
        v19 = get_local ptr { { u64, u64, u64 } }, buffer, !24
        store v18 to v19, !25
        v20 = get_local ptr { { u64, u64, u64 } }, buffer, !27
        v21 = load v20, !4
        v22 = ptr_to_int v21 to u64, !29
        v23 = int_to_ptr v22 to ptr { { u64, u64, u64 } }, !30
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { u64, u64, u64 }, v24, !32
        v26 = load v25, !33
        v27 = asm(buffer: v26) -> { u64, u64, u64 } buffer, !34 {
        }
        v28 = get_local ptr { u64, u64, u64 }, __anon_00, !35
        store v27 to v28, !36
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !37
        v31 = load v30, !38
        v32 = int_to_ptr v31 to ptr u8, !39
        v33 = const u64 1
        v34 = get_elem_ptr v28, ptr u64, v33, !40
        v35 = load v34, !41
        v36 = const u64 2
        v37 = get_elem_ptr v28, ptr u64, v36, !42
        v38 = load v37, !43
        v39 = ptr_to_int v32 to u64, !44
        v40 = get_local ptr { u64, u64 }, __anon_10, !45
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !46
        store v39 to v42, !47
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !48
        store v38 to v44, !49
        v45 = asm(s: v40) -> slice s, !50 {
        }
        ret slice v45
    }
}

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp, !5 {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8, !6
        v3 = ptr_to_int v2 to u64, !7
        v4 = get_local ptr { u64, u64, u64 }, __anon_0, !8
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !9
        store v3 to v6, !10
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !11
        store v0 to v8, !12
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9, !13
        v11 = const u64 0
        store v11 to v10, !14
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer, !15 {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !17
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14, !18
        store v12 to v15, !19
        v16 = load v13, !20
        v17 = get_local ptr { { u64, u64, u64 } }, buffer, !22
        store v16 to v17, !23
        v18 = get_local ptr { { u64, u64, u64 } }, buffer, !25
        v19 = load v18, !2
        v20 = ptr_to_int v19 to u64, !27
        v21 = int_to_ptr v20 to ptr { { u64, u64, u64 } }, !28
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64, u64, u64 }, v22, !30
        v24 = load v23, !31
        v25 = asm(buffer: v24) -> { u64, u64, u64 } buffer, !32 {
        }
        v26 = get_local ptr { u64, u64, u64 }, __anon_00, !33
        store v25 to v26, !34
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !35
        v29 = load v28, !36
        v30 = int_to_ptr v29 to ptr u8, !37
        v31 = const u64 2
        v32 = get_elem_ptr v26, ptr u64, v31, !38
        v33 = load v32, !39
        v34 = ptr_to_int v30 to u64, !40
        v35 = get_local ptr { u64, u64 }, __anon_10, !41
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !42
        store v34 to v37, !43
        v38 = const u64 1
        v39 = get_elem_ptr v35, ptr u64, v38, !44
        store v33 to v39, !45
        v40 = asm(s: v35) -> slice s, !46 {
        }
        ret slice v40
    }
}

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local slice __ret_value
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const u64 1024
        v2 = asm(cap: v1) -> u64 hp, !5 {
            aloc   cap
        }
        v3 = int_to_ptr v2 to ptr u8, !6
        v4 = ptr_to_int v3 to u64, !7
        v5 = get_local ptr { u64, u64, u64 }, __anon_0, !8
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !9
        store v4 to v7, !10
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8, !11
        store v1 to v9, !12
        v10 = const u64 2
        v11 = get_elem_ptr v5, ptr u64, v10, !13
        v12 = const u64 0
        store v12 to v11, !14
        v13 = asm(buffer: v5) -> { u64, u64, u64 } buffer, !15 {
        }
        v14 = get_local ptr { { u64, u64, u64 } }, __anon_1, !17
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64, u64 }, v15, !18
        store v13 to v16, !19
        v17 = load v14, !20
        v18 = get_local ptr { { u64, u64, u64 } }, buffer, !22
        store v17 to v18, !23
        v19 = get_local ptr { { u64, u64, u64 } }, buffer, !25
        v20 = load v19, !2
        v21 = ptr_to_int v20 to u64, !27
        v22 = int_to_ptr v21 to ptr { { u64, u64, u64 } }, !28
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr { u64, u64, u64 }, v23, !30
        v25 = load v24, !31
        v26 = asm(buffer: v25) -> { u64, u64, u64 } buffer, !32 {
        }
        v27 = get_local ptr { u64, u64, u64 }, __anon_00, !33
        store v26 to v27, !34
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !35
        v30 = load v29, !36
        v31 = int_to_ptr v30 to ptr u8, !37
        v32 = const u64 2
        v33 = get_elem_ptr v27, ptr u64, v32, !38
        v34 = load v33, !39
        v35 = ptr_to_int v31 to u64, !40
        v36 = get_local ptr { u64, u64 }, __anon_10, !41
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !42
        store v35 to v38, !43
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr u64, v39, !44
        store v34 to v40, !45
        v41 = asm(s: v36) -> slice s, !46 {
        }
        store v41 to v0
        ret ptr slice v0
    }
}

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { u64, u64, u64 } __asm_arg
        local slice __ret_value
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const u64 1024
        v2 = asm(cap: v1) -> u64 hp, !5 {
            aloc   cap
        }
        v3 = int_to_ptr v2 to ptr u8, !6
        v4 = ptr_to_int v3 to u64, !7
        v5 = get_local ptr { u64, u64, u64 }, __anon_0, !8
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !9
        store v4 to v7, !10
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8, !11
        store v1 to v9, !12
        v10 = const u64 2
        v11 = get_elem_ptr v5, ptr u64, v10, !13
        v12 = const u64 0
        store v12 to v11, !14
        v13 = asm(buffer: v5) -> ptr { u64, u64, u64 } buffer {
        }
        v14 = load v13
        v15 = get_local ptr { { u64, u64, u64 } }, __anon_1, !16
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64, u64, u64 }, v16, !17
        store v14 to v17, !18
        v18 = load v15, !19
        v19 = get_local ptr { { u64, u64, u64 } }, buffer, !21
        store v18 to v19, !22
        v20 = get_local ptr { { u64, u64, u64 } }, buffer, !24
        v21 = load v20, !2
        v22 = ptr_to_int v20 to u64, !26
        v23 = int_to_ptr v22 to ptr { { u64, u64, u64 } }, !27
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { u64, u64, u64 }, v24, !29
        v26 = load v25, !30
        v27 = get_local ptr { u64, u64, u64 }, __asm_arg
        store v26 to v27
        v28 = asm(buffer: v27) -> ptr { u64, u64, u64 } buffer {
        }
        v29 = load v28
        v30 = get_local ptr { u64, u64, u64 }, __anon_00, !31
        store v29 to v30, !32
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !33
        v33 = load v32, !34
        v34 = int_to_ptr v33 to ptr u8, !35
        v35 = const u64 2
        v36 = get_elem_ptr v30, ptr u64, v35, !36
        v37 = load v36, !37
        v38 = ptr_to_int v34 to u64, !38
        v39 = get_local ptr { u64, u64 }, __anon_10, !39
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !40
        store v38 to v41, !41
        v42 = const u64 1
        v43 = get_elem_ptr v39, ptr u64, v42, !42
        store v37 to v43, !43
        v44 = asm(s: v39) -> ptr slice s {
        }
        v45 = load v44
        store v45 to v0
        ret ptr slice v0
    }
}

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { u64, u64, u64 } __asm_arg
        local slice __ret_value
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const u64 1024
        v2 = asm(cap: v1) -> u64 hp, !5 {
            aloc   cap
        }
        v3 = int_to_ptr v2 to ptr u8, !6
        v4 = ptr_to_int v3 to u64, !7
        v5 = get_local ptr { u64, u64, u64 }, __anon_0, !8
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !9
        store v4 to v7, !10
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8, !11
        store v1 to v9, !12
        v10 = const u64 2
        v11 = get_elem_ptr v5, ptr u64, v10, !13
        v12 = const u64 0
        store v12 to v11, !14
        v13 = asm(buffer: v5) -> ptr { u64, u64, u64 } buffer {
        }
        v14 = load v13
        v15 = get_local ptr { { u64, u64, u64 } }, __anon_1, !16
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64, u64, u64 }, v16, !17
        mem_copy_val v17, v13
        v18 = load v15, !18
        v19 = get_local ptr { { u64, u64, u64 } }, buffer, !20
        mem_copy_val v19, v15
        v20 = get_local ptr { { u64, u64, u64 } }, buffer, !22
        v21 = load v20, !2
        v22 = ptr_to_int v20 to u64, !24
        v23 = int_to_ptr v22 to ptr { { u64, u64, u64 } }, !25
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { u64, u64, u64 }, v24, !27
        v26 = load v25, !28
        v27 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v27, v25
        v28 = asm(buffer: v27) -> ptr { u64, u64, u64 } buffer {
        }
        v29 = load v28
        v30 = get_local ptr { u64, u64, u64 }, __anon_00, !29
        mem_copy_val v30, v28
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !30
        v33 = load v32, !31
        v34 = int_to_ptr v33 to ptr u8, !32
        v35 = const u64 2
        v36 = get_elem_ptr v30, ptr u64, v35, !33
        v37 = load v36, !34
        v38 = ptr_to_int v34 to u64, !35
        v39 = get_local ptr { u64, u64 }, __anon_10, !36
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !37
        store v38 to v41, !38
        v42 = const u64 1
        v43 = get_elem_ptr v39, ptr u64, v42, !39
        mem_copy_val v43, v36
        v44 = asm(s: v39) -> ptr slice s {
        }
        v45 = load v44
        mem_copy_val v0, v44
        ret ptr slice v0
    }
}

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { u64, u64, u64 } __asm_arg
        local slice __ret_value
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const u64 1024
        v2 = asm(cap: v1) -> u64 hp, !5 {
            aloc   cap
        }
        v3 = int_to_ptr v2 to ptr u8, !6
        v4 = ptr_to_int v3 to u64, !7
        v5 = get_local ptr { u64, u64, u64 }, __anon_0, !8
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !9
        store v4 to v7, !10
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8, !11
        store v1 to v9, !12
        v10 = const u64 2
        v11 = get_elem_ptr v5, ptr u64, v10, !13
        v12 = const u64 0
        store v12 to v11, !14
        v13 = asm(buffer: v5) -> ptr { u64, u64, u64 } buffer {
        }
        v14 = get_local ptr { { u64, u64, u64 } }, __anon_1, !16
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64, u64 }, v15, !17
        mem_copy_val v16, v13
        v17 = get_local ptr { { u64, u64, u64 } }, buffer, !19
        mem_copy_val v17, v14
        v18 = get_local ptr { { u64, u64, u64 } }, buffer, !21
        v19 = ptr_to_int v18 to u64, !23
        v20 = int_to_ptr v19 to ptr { { u64, u64, u64 } }, !24
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, u64, u64 }, v21, !26
        v23 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v23, v22
        v24 = asm(buffer: v23) -> ptr { u64, u64, u64 } buffer {
        }
        v25 = get_local ptr { u64, u64, u64 }, __anon_00, !27
        mem_copy_val v25, v24
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !28
        v28 = load v27, !29
        v29 = int_to_ptr v28 to ptr u8, !30
        v30 = const u64 2
        v31 = get_elem_ptr v25, ptr u64, v30, !31
        v32 = ptr_to_int v29 to u64, !32
        v33 = get_local ptr { u64, u64 }, __anon_10, !33
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !34
        store v32 to v35, !35
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36, !36
        mem_copy_val v37, v31
        v38 = asm(s: v33) -> ptr slice s {
        }
        mem_copy_val v0, v38
        ret ptr slice v0
    }
}

// IR: Final
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64 } __anon_10
        local { u64, u64, u64 } __asm_arg
        local slice __ret_value
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const u64 1024
        v2 = asm(cap: v1) -> u64 hp, !5 {
            aloc   cap
        }
        v3 = int_to_ptr v2 to ptr u8, !6
        v4 = ptr_to_int v3 to u64, !7
        v5 = get_local ptr { u64, u64, u64 }, __anon_0, !8
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !9
        store v4 to v7, !10
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8, !11
        store v1 to v9, !12
        v10 = const u64 2
        v11 = get_elem_ptr v5, ptr u64, v10, !13
        v12 = const u64 0
        store v12 to v11, !14
        v13 = asm(buffer: v5) -> ptr { u64, u64, u64 } buffer {
        }
        v14 = get_local ptr { { u64, u64, u64 } }, __anon_1, !16
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64, u64 }, v15, !17
        mem_copy_val v16, v13
        v17 = get_local ptr { { u64, u64, u64 } }, buffer, !19
        mem_copy_val v17, v14
        v18 = get_local ptr { { u64, u64, u64 } }, buffer, !21
        v19 = ptr_to_int v18 to u64, !23
        v20 = int_to_ptr v19 to ptr { { u64, u64, u64 } }, !24
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, u64, u64 }, v21, !26
        v23 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v23, v22
        v24 = asm(buffer: v23) -> ptr { u64, u64, u64 } buffer {
        }
        v25 = get_local ptr { u64, u64, u64 }, __anon_00, !27
        mem_copy_val v25, v24
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !28
        v28 = load v27, !29
        v29 = int_to_ptr v28 to ptr u8, !30
        v30 = const u64 2
        v31 = get_elem_ptr v25, ptr u64, v30, !31
        v32 = ptr_to_int v29 to u64, !32
        v33 = get_local ptr { u64, u64 }, __anon_10, !33
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !34
        store v32 to v35, !35
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36, !36
        mem_copy_val v37, v31
        v38 = asm(s: v33) -> ptr slice s {
        }
        mem_copy_val v0, v38
        ret ptr slice v0
    }
}
