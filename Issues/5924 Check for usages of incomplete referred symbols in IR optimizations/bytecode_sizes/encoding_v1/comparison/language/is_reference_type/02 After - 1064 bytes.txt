// IR: Initial
library {
}

// IR: Final
library {
}

// IR: Initial
script {
    pub entry fn __entry() -> slice, !1 {
        local bool result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr bool, result, !3
        store v0 to v1, !3
        v2 = get_local ptr bool, result, !4
        v3 = load v2
        v4 = call encode_14(v3), !5
        ret slice v4
    }

    fn main_0() -> bool, !7 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5

        entry():
        v0 = const bool false
        v1 = call not_2(v0), !8
        v2 = call assert_1(v1), !9
        v3 = const bool false
        v4 = call not_2(v3), !10
        v5 = call assert_1(v4), !11
        v6 = const bool false
        v7 = call not_2(v6), !12
        v8 = call assert_1(v7), !13
        v9 = const bool true
        v10 = call assert_1(v9), !14
        v11 = const bool true
        v12 = call assert_1(v11), !15
        v13 = const bool true
        v14 = call assert_1(v13), !16
        v15 = const bool true
        v16 = call assert_1(v15), !17
        v17 = const bool true
        v18 = call assert_1(v17), !18
        v19 = const bool true
        v20 = call assert_1(v19), !19
        v21 = const unit (), !20
        v22 = call arg_is_reference_4(v21), !21
        v23 = call not_2(v22), !22
        v24 = call assert_1(v23), !23
        v25 = const bool false, !24
        v26 = call arg_is_reference_5(v25), !25
        v27 = call not_2(v26), !26
        v28 = call assert_1(v27), !27
        v29 = const u64 43, !28
        v30 = call arg_is_reference_6(v29), !29
        v31 = call not_2(v30), !30
        v32 = call assert_1(v31), !31
        v33 = const u64 0, !32
        v34 = call arg_is_reference_7(v33), !33
        v35 = call not_2(v34), !34
        v36 = call assert_1(v35), !35
        v37 = const string<9> "breakfast"
        v38 = ptr_to_int v37 to u64, !36
        v39 = get_local ptr { u64, u64 }, __anon_0, !36
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40
        store v38 to v41, !36
        v42 = const u64 1
        v43 = get_elem_ptr v39, ptr u64, v42
        v44 = const u64 9
        store v44 to v43, !36
        v45 = get_local ptr slice, __anon_1, !36
        mem_copy_bytes v45, v39, 16
        v46 = load v45
        v47 = call arg_is_reference_8(v46), !37
        v48 = call assert_1(v47), !38
        v49 = const b256 0xfefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, !39
        v50 = call arg_is_reference_9(v49), !40
        v51 = call assert_1(v50), !41
        v52 = get_local ptr { u64 }, __anon_2, !42
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53
        v55 = const u64 42, !43
        store v55 to v54, !42
        v56 = load v52
        v57 = call arg_is_reference_10(v56), !44
        v58 = call assert_1(v57), !45
        v59 = get_local ptr { u64 }, __anon_3, !46
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !46
        v62 = const u64 0, !46
        store v62 to v61, !46
        v63 = load v59
        v64 = call arg_is_reference_11(v63), !47
        v65 = call assert_1(v64), !48
        v66 = get_local ptr { bool, bool }, __anon_4, !49
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr bool, v67, !49
        v69 = const bool true, !50
        store v69 to v68, !49
        v70 = const u64 1
        v71 = get_elem_ptr v66, ptr bool, v70, !49
        v72 = const bool true, !51
        store v72 to v71, !49
        v73 = load v66
        v74 = call arg_is_reference_12(v73), !52
        v75 = call assert_1(v74), !53
        v76 = get_local ptr [u64; 5], __anon_5, !54
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77
        v79 = const u64 5, !55
        store v79 to v78, !54
        v80 = const u64 1
        v81 = get_elem_ptr v76, ptr u64, v80
        v82 = const u64 4, !56
        store v82 to v81, !54
        v83 = const u64 2
        v84 = get_elem_ptr v76, ptr u64, v83
        v85 = const u64 3, !57
        store v85 to v84, !54
        v86 = const u64 3
        v87 = get_elem_ptr v76, ptr u64, v86
        v88 = const u64 2, !58
        store v88 to v87, !54
        v89 = const u64 4
        v90 = get_elem_ptr v76, ptr u64, v89
        v91 = const u64 1, !59
        store v91 to v90, !54
        v92 = load v76
        v93 = call arg_is_reference_13(v92), !60
        v94 = call assert_1(v93), !61
        v95 = const bool true, !62
        ret bool v95
    }

    pub fn assert_1(condition !64: bool) -> (), !65 {
        entry(condition: bool):
        v0 = call not_2(condition), !66
        cbr v0, block0(), block1(), !66

        block0():
        v1 = const u64 18446744073709486084, !68
        v2 = call revert_3(v1), !69
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn not_2(self !71: bool) -> bool, !72 {
        entry(self: bool):
        v0 = const bool false, !73
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_3(code !75: u64) -> never, !76 {
        entry(code: u64):
        revert code, !77
    }

    fn arg_is_reference_4(_a !78: ()) -> bool, !79 {
        entry(_a: ()):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_5(_a !78: bool) -> bool, !79 {
        entry(_a: bool):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_6(_a !78: u64) -> bool, !79 {
        entry(_a: u64):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_7(_a !78: u64) -> bool, !79 {
        entry(_a: u64):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_8(_a !78: slice) -> bool, !79 {
        entry(_a: slice):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_9(_a !78: b256) -> bool, !79 {
        entry(_a: b256):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_10(_a !78: { u64 }) -> bool, !79 {
        entry(_a: { u64 }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_11(_a !78: { u64 }) -> bool, !79 {
        entry(_a: { u64 }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_12(_a !78: { bool, bool }) -> bool, !79 {
        entry(_a: { bool, bool }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_13(_a !78: [u64; 5]) -> bool, !79 {
        entry(_a: [u64; 5]):
        v0 = const bool true
        ret bool v0
    }

    pub fn encode_14(item !81: bool) -> slice, !82 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_16(), !83
        v1 = call abi_encode_15(item, v0), !84
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !85
        store v1 to v2, !85
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !86
        v4 = load v3
        v5 = call as_raw_slice_17(v4), !87
        ret slice v5
    }

    pub fn abi_encode_15(self !88: bool, buffer !89: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !90 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !91
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !92
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !92
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_16() -> { { u64, u64, u64 } }, !93 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !94
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !94
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_17(self !95: { { u64, u64, u64 } }) -> slice, !96 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !91
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = span !0 48 74
!4 = span !0 107 113
!5 = span !0 92 114
!6 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!7 = span !6 138 1058
!8 = span !6 169 197
!9 = span !6 162 198
!10 = span !6 241 271
!11 = span !6 234 272
!12 = span !6 285 314
!13 = span !6 278 315
!14 = span !6 322 361
!15 = span !6 367 404
!16 = span !6 410 444
!17 = span !6 450 484
!18 = span !6 490 535
!19 = span !6 541 582
!20 = span !6 614 616
!21 = span !6 597 617
!22 = span !6 596 617
!23 = span !6 589 618
!24 = span !6 649 654
!25 = span !6 632 655
!26 = span !6 631 655
!27 = span !6 624 656
!28 = span !6 687 691
!29 = span !6 670 692
!30 = span !6 669 692
!31 = span !6 662 693
!32 = span !6 724 725
!33 = span !6 707 726
!34 = span !6 706 726
!35 = span !6 699 727
!36 = span !6 758 769
!37 = span !6 741 770
!38 = span !6 734 771
!39 = span !6 801 867
!40 = span !6 784 868
!41 = span !6 777 869
!42 = span !6 899 910
!43 = span !6 906 908
!44 = span !6 882 911
!45 = span !6 875 912
!46 = span !6 35 62
!47 = span !6 925 953
!48 = span !6 918 954
!49 = span !6 984 996
!50 = span !6 985 989
!51 = span !6 991 995
!52 = span !6 967 997
!53 = span !6 960 998
!54 = span !6 1028 1043
!55 = span !6 1029 1030
!56 = span !6 1032 1033
!57 = span !6 1035 1036
!58 = span !6 1038 1039
!59 = span !6 1041 1042
!60 = span !6 1011 1044
!61 = span !6 1004 1045
!62 = span !6 1052 1056
!63 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!64 = span !63 935 944
!65 = span !63 921 1019
!66 = span !63 961 971
!67 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!68 = span !67 1038 1059
!69 = span !63 982 1010
!70 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!71 = span !70 9956 9960
!72 = span !70 9949 10003
!73 = span !70 9991 9996
!74 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!75 = span !74 669 673
!76 = span !74 655 707
!77 = span !74 691 705
!78 = span !6 87 89
!79 = span !6 64 136
!80 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!81 = span !80 64156 64160
!82 = span !80 64139 64280
!83 = span !80 64237 64250
!84 = span !80 64221 64251
!85 = span !80 64208 64252
!86 = span !80 64257 64263
!87 = span !80 64257 64278
!88 = span !80 3794 3798
!89 = span !80 3800 3806
!90 = span !80 3780 3925
!91 = span !80 55 82
!92 = span !80 3836 3919
!93 = span !80 128 228
!94 = span !80 159 222
!95 = span !80 281 285
!96 = span !80 265 357

// IR: [fn-dedup-debug] Function deduplication with metadata considered
script {
    pub entry fn __entry() -> slice, !1 {
        local bool result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr bool, result, !3
        store v0 to v1, !3
        v2 = get_local ptr bool, result, !4
        v3 = load v2
        v4 = call encode_14(v3), !5
        ret slice v4
    }

    fn main_0() -> bool, !7 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5

        entry():
        v0 = const bool false
        v1 = call not_2(v0), !8
        v2 = call assert_1(v1), !9
        v3 = const bool false
        v4 = call not_2(v3), !10
        v5 = call assert_1(v4), !11
        v6 = const bool false
        v7 = call not_2(v6), !12
        v8 = call assert_1(v7), !13
        v9 = const bool true
        v10 = call assert_1(v9), !14
        v11 = const bool true
        v12 = call assert_1(v11), !15
        v13 = const bool true
        v14 = call assert_1(v13), !16
        v15 = const bool true
        v16 = call assert_1(v15), !17
        v17 = const bool true
        v18 = call assert_1(v17), !18
        v19 = const bool true
        v20 = call assert_1(v19), !19
        v21 = const unit (), !20
        v22 = call arg_is_reference_4(v21), !21
        v23 = call not_2(v22), !22
        v24 = call assert_1(v23), !23
        v25 = const bool false, !24
        v26 = call arg_is_reference_5(v25), !25
        v27 = call not_2(v26), !26
        v28 = call assert_1(v27), !27
        v29 = const u64 43, !28
        v30 = call arg_is_reference_6(v29), !29
        v31 = call not_2(v30), !30
        v32 = call assert_1(v31), !31
        v33 = const u64 0, !32
        v34 = call arg_is_reference_6(v33), !33
        v35 = call not_2(v34), !34
        v36 = call assert_1(v35), !35
        v37 = const string<9> "breakfast"
        v38 = ptr_to_int v37 to u64, !36
        v39 = get_local ptr { u64, u64 }, __anon_0, !36
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40
        store v38 to v41, !36
        v42 = const u64 1
        v43 = get_elem_ptr v39, ptr u64, v42
        v44 = const u64 9
        store v44 to v43, !36
        v45 = get_local ptr slice, __anon_1, !36
        mem_copy_bytes v45, v39, 16
        v46 = load v45
        v47 = call arg_is_reference_8(v46), !37
        v48 = call assert_1(v47), !38
        v49 = const b256 0xfefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, !39
        v50 = call arg_is_reference_9(v49), !40
        v51 = call assert_1(v50), !41
        v52 = get_local ptr { u64 }, __anon_2, !42
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53
        v55 = const u64 42, !43
        store v55 to v54, !42
        v56 = load v52
        v57 = call arg_is_reference_10(v56), !44
        v58 = call assert_1(v57), !45
        v59 = get_local ptr { u64 }, __anon_3, !46
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !46
        v62 = const u64 0, !46
        store v62 to v61, !46
        v63 = load v59
        v64 = call arg_is_reference_10(v63), !47
        v65 = call assert_1(v64), !48
        v66 = get_local ptr { bool, bool }, __anon_4, !49
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr bool, v67, !49
        v69 = const bool true, !50
        store v69 to v68, !49
        v70 = const u64 1
        v71 = get_elem_ptr v66, ptr bool, v70, !49
        v72 = const bool true, !51
        store v72 to v71, !49
        v73 = load v66
        v74 = call arg_is_reference_12(v73), !52
        v75 = call assert_1(v74), !53
        v76 = get_local ptr [u64; 5], __anon_5, !54
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77
        v79 = const u64 5, !55
        store v79 to v78, !54
        v80 = const u64 1
        v81 = get_elem_ptr v76, ptr u64, v80
        v82 = const u64 4, !56
        store v82 to v81, !54
        v83 = const u64 2
        v84 = get_elem_ptr v76, ptr u64, v83
        v85 = const u64 3, !57
        store v85 to v84, !54
        v86 = const u64 3
        v87 = get_elem_ptr v76, ptr u64, v86
        v88 = const u64 2, !58
        store v88 to v87, !54
        v89 = const u64 4
        v90 = get_elem_ptr v76, ptr u64, v89
        v91 = const u64 1, !59
        store v91 to v90, !54
        v92 = load v76
        v93 = call arg_is_reference_13(v92), !60
        v94 = call assert_1(v93), !61
        v95 = const bool true, !62
        ret bool v95
    }

    pub fn assert_1(condition !64: bool) -> (), !65 {
        entry(condition: bool):
        v0 = call not_2(condition), !66
        cbr v0, block0(), block1(), !66

        block0():
        v1 = const u64 18446744073709486084, !68
        v2 = call revert_3(v1), !69
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn not_2(self !71: bool) -> bool, !72 {
        entry(self: bool):
        v0 = const bool false, !73
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_3(code !75: u64) -> never, !76 {
        entry(code: u64):
        revert code, !77
    }

    fn arg_is_reference_4(_a !78: ()) -> bool, !79 {
        entry(_a: ()):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_5(_a !78: bool) -> bool, !79 {
        entry(_a: bool):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_6(_a !78: u64) -> bool, !79 {
        entry(_a: u64):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_7(_a !78: u64) -> bool, !79 {
        entry(_a: u64):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_8(_a !78: slice) -> bool, !79 {
        entry(_a: slice):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_9(_a !78: b256) -> bool, !79 {
        entry(_a: b256):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_10(_a !78: { u64 }) -> bool, !79 {
        entry(_a: { u64 }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_11(_a !78: { u64 }) -> bool, !79 {
        entry(_a: { u64 }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_12(_a !78: { bool, bool }) -> bool, !79 {
        entry(_a: { bool, bool }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_13(_a !78: [u64; 5]) -> bool, !79 {
        entry(_a: [u64; 5]):
        v0 = const bool true
        ret bool v0
    }

    pub fn encode_14(item !81: bool) -> slice, !82 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_16(), !83
        v1 = call abi_encode_15(item, v0), !84
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !85
        store v1 to v2, !85
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !86
        v4 = load v3
        v5 = call as_raw_slice_17(v4), !87
        ret slice v5
    }

    pub fn abi_encode_15(self !88: bool, buffer !89: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !90 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !91
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !92
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !92
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_16() -> { { u64, u64, u64 } }, !93 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !94
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !94
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_17(self !95: { { u64, u64, u64 } }) -> slice, !96 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !91
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = span !0 48 74
!4 = span !0 107 113
!5 = span !0 92 114
!6 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!7 = span !6 138 1058
!8 = span !6 169 197
!9 = span !6 162 198
!10 = span !6 241 271
!11 = span !6 234 272
!12 = span !6 285 314
!13 = span !6 278 315
!14 = span !6 322 361
!15 = span !6 367 404
!16 = span !6 410 444
!17 = span !6 450 484
!18 = span !6 490 535
!19 = span !6 541 582
!20 = span !6 614 616
!21 = span !6 597 617
!22 = span !6 596 617
!23 = span !6 589 618
!24 = span !6 649 654
!25 = span !6 632 655
!26 = span !6 631 655
!27 = span !6 624 656
!28 = span !6 687 691
!29 = span !6 670 692
!30 = span !6 669 692
!31 = span !6 662 693
!32 = span !6 724 725
!33 = span !6 707 726
!34 = span !6 706 726
!35 = span !6 699 727
!36 = span !6 758 769
!37 = span !6 741 770
!38 = span !6 734 771
!39 = span !6 801 867
!40 = span !6 784 868
!41 = span !6 777 869
!42 = span !6 899 910
!43 = span !6 906 908
!44 = span !6 882 911
!45 = span !6 875 912
!46 = span !6 35 62
!47 = span !6 925 953
!48 = span !6 918 954
!49 = span !6 984 996
!50 = span !6 985 989
!51 = span !6 991 995
!52 = span !6 967 997
!53 = span !6 960 998
!54 = span !6 1028 1043
!55 = span !6 1029 1030
!56 = span !6 1032 1033
!57 = span !6 1035 1036
!58 = span !6 1038 1039
!59 = span !6 1041 1042
!60 = span !6 1011 1044
!61 = span !6 1004 1045
!62 = span !6 1052 1056
!63 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!64 = span !63 935 944
!65 = span !63 921 1019
!66 = span !63 961 971
!67 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!68 = span !67 1038 1059
!69 = span !63 982 1010
!70 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!71 = span !70 9956 9960
!72 = span !70 9949 10003
!73 = span !70 9991 9996
!74 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!75 = span !74 669 673
!76 = span !74 655 707
!77 = span !74 691 705
!78 = span !6 87 89
!79 = span !6 64 136
!80 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!81 = span !80 64156 64160
!82 = span !80 64139 64280
!83 = span !80 64237 64250
!84 = span !80 64221 64251
!85 = span !80 64208 64252
!86 = span !80 64257 64263
!87 = span !80 64257 64278
!88 = span !80 3794 3798
!89 = span !80 3800 3806
!90 = span !80 3780 3925
!91 = span !80 55 82
!92 = span !80 3836 3919
!93 = span !80 128 228
!94 = span !80 159 222
!95 = span !80 281 285
!96 = span !80 265 357

// IR: [inline] Function inlining
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = const bool false
        v1 = const bool false, !3
        v2 = cmp eq v0 v1, !7
        br main_0_block0(v2), !8

        main_0_block0(v3: bool):
        v4 = call assert_1(v3), !10
        v5 = const bool false
        v6 = cmp eq v5 v1, !12
        br main_0_block1(v6), !13

        main_0_block1(v7: bool):
        v8 = call assert_1(v7), !15
        v9 = const bool false
        v10 = cmp eq v9 v1, !17
        br main_0_block2(v10), !18

        main_0_block2(v11: bool):
        v12 = call assert_1(v11), !20
        v13 = const bool true
        v14 = call assert_1(v13), !22
        v15 = const bool true
        v16 = call assert_1(v15), !24
        v17 = const bool true
        v18 = call assert_1(v17), !26
        v19 = const bool true
        v20 = call assert_1(v19), !28
        v21 = const bool true
        v22 = call assert_1(v21), !30
        v23 = const bool true
        v24 = call assert_1(v23), !32
        v25 = const bool false
        br main_0_block3(v25), !34

        main_0_block3(v26: bool):
        v27 = cmp eq v26 v1, !36
        br main_0_block4(v27), !37

        main_0_block4(v28: bool):
        v29 = call assert_1(v28), !39
        v30 = const bool false
        br main_0_block5(v30), !41

        main_0_block5(v31: bool):
        v32 = cmp eq v31 v1, !43
        br main_0_block6(v32), !44

        main_0_block6(v33: bool):
        v34 = call assert_1(v33), !46
        v35 = const bool false
        br main_0_block7(v35), !48

        main_0_block7(v36: bool):
        v37 = cmp eq v36 v1, !50
        br main_0_block8(v37), !51

        main_0_block8(v38: bool):
        v39 = call assert_1(v38), !53
        br main_0_block9(v35), !55

        main_0_block9(v40: bool):
        v41 = cmp eq v40 v1, !57
        br main_0_block10(v41), !58

        main_0_block10(v42: bool):
        v43 = call assert_1(v42), !60
        v44 = const string<9> "breakfast"
        v45 = ptr_to_int v44 to u64, !62
        v46 = get_local ptr { u64, u64 }, __anon_0, !63
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr u64, v47, !4
        store v45 to v48, !64
        v49 = const u64 1
        v50 = get_elem_ptr v46, ptr u64, v49, !4
        v51 = const u64 9
        store v51 to v50, !65
        v52 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v52, v46, 16, !4
        v53 = load v52, !4
        v54 = const bool true
        br main_0_block11(v54), !68

        main_0_block11(v55: bool):
        v56 = call assert_1(v55), !70
        v57 = const bool true
        br main_0_block12(v57), !72

        main_0_block12(v58: bool):
        v59 = call assert_1(v58), !74
        v60 = get_local ptr { u64 }, __anon_2, !76
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61, !4
        v63 = const u64 42, !77
        store v63 to v62, !78
        v64 = load v60, !4
        v65 = const bool true
        br main_0_block13(v65), !80

        main_0_block13(v66: bool):
        v67 = call assert_1(v66), !82
        v68 = get_local ptr { u64 }, __anon_3, !84
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !85
        v71 = const u64 0, !83
        store v71 to v70, !86
        v72 = load v68, !4
        br main_0_block14(v65), !88

        main_0_block14(v73: bool):
        v74 = call assert_1(v73), !90
        v75 = get_local ptr { bool, bool }, __anon_4, !92
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr bool, v76, !93
        v78 = const bool true, !94
        store v78 to v77, !95
        v79 = const u64 1
        v80 = get_elem_ptr v75, ptr bool, v79, !96
        v81 = const bool true, !97
        store v81 to v80, !98
        v82 = load v75, !4
        v83 = const bool true
        br main_0_block15(v83), !100

        main_0_block15(v84: bool):
        v85 = call assert_1(v84), !102
        v86 = get_local ptr [u64; 5], __anon_5, !104
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !4
        v89 = const u64 5, !105
        store v89 to v88, !106
        v90 = const u64 1
        v91 = get_elem_ptr v86, ptr u64, v90, !4
        v92 = const u64 4, !107
        store v92 to v91, !108
        v93 = const u64 2
        v94 = get_elem_ptr v86, ptr u64, v93, !4
        v95 = const u64 3, !109
        store v95 to v94, !110
        v96 = const u64 3
        v97 = get_elem_ptr v86, ptr u64, v96, !4
        v98 = const u64 2, !111
        store v98 to v97, !112
        v99 = const u64 4
        v100 = get_elem_ptr v86, ptr u64, v99, !4
        v101 = const u64 1, !113
        store v101 to v100, !114
        v102 = load v86, !4
        v103 = const bool true
        br main_0_block16(v103), !116

        main_0_block16(v104: bool):
        v105 = call assert_1(v104), !118
        v106 = const bool true, !119
        br block0(v106), !4

        block0(v107: bool):
        v108 = get_local ptr bool, result, !120
        store v107 to v108, !120
        v109 = get_local ptr bool, result, !121
        v110 = load v109
        v111 = const u64 1024
        v112 = asm(cap: v111) -> u64 hp, !125 {
            aloc   cap
        }
        v113 = int_to_ptr v112 to ptr u8, !126
        v114 = ptr_to_int v113 to u64, !127
        v115 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr u64, v116, !129
        store v114 to v117, !130
        v118 = const u64 1
        v119 = get_elem_ptr v115, ptr u64, v118, !131
        store v111 to v119, !132
        v120 = const u64 2
        v121 = get_elem_ptr v115, ptr u64, v120, !133
        v122 = const u64 0
        store v122 to v121, !134
        v123 = asm(buffer: v115) -> { u64, u64, u64 } buffer, !135 {
        }
        v124 = get_local ptr { { u64, u64, u64 } }, __anon_10, !137
        v125 = const u64 0
        v126 = get_elem_ptr v124, ptr { u64, u64, u64 }, v125, !138
        store v123 to v126, !139
        v127 = load v124, !140
        br encode_14_block0(v127), !141

        encode_14_block0(v128: { { u64, u64, u64 } }):
        v129 = ptr_to_int v128 to u64, !143
        v130 = int_to_ptr v129 to ptr { { u64, u64, u64 } }, !144
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !146
        v133 = load v132, !147
        v134 = asm(buffer: v133) -> { u64, u64, u64 } buffer, !148 {
        }
        v135 = get_local ptr { u64, u64, u64 }, __anon_000, !149
        store v134 to v135, !150
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !151
        v138 = load v137, !152
        v139 = int_to_ptr v138 to ptr u8, !153
        v140 = const u64 1
        v141 = get_elem_ptr v135, ptr u64, v140, !154
        v142 = load v141, !155
        v143 = const u64 2
        v144 = get_elem_ptr v135, ptr u64, v143, !156
        v145 = load v144, !157
        v146 = ptr_to_int v139 to u64, !158
        v147 = add v146, v145, !159
        v148 = int_to_ptr v147 to ptr bool, !160
        store v110 to v148, !161
        v149 = const u64 1
        v150 = add v145, v149, !162
        v151 = ptr_to_int v139 to u64, !163
        v152 = get_local ptr { u64, u64, u64 }, __anon_100, !164
        v153 = const u64 0
        v154 = get_elem_ptr v152, ptr u64, v153, !165
        store v151 to v154, !166
        v155 = const u64 1
        v156 = get_elem_ptr v152, ptr u64, v155, !167
        store v142 to v156, !168
        v157 = const u64 2
        v158 = get_elem_ptr v152, ptr u64, v157, !169
        store v150 to v158, !170
        v159 = asm(buffer: v152) -> { u64, u64, u64 } buffer, !171 {
        }
        v160 = get_local ptr { { u64, u64, u64 } }, __anon_20, !173
        v161 = const u64 0
        v162 = get_elem_ptr v160, ptr { u64, u64, u64 }, v161, !174
        store v159 to v162, !175
        v163 = load v160, !176
        br encode_14_block1(v163), !177

        encode_14_block1(v164: { { u64, u64, u64 } }):
        v165 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        store v164 to v165, !180
        v166 = get_local ptr { { u64, u64, u64 } }, buffer, !182
        v167 = load v166, !122
        v168 = ptr_to_int v167 to u64, !184
        v169 = int_to_ptr v168 to ptr { { u64, u64, u64 } }, !185
        v170 = const u64 0
        v171 = get_elem_ptr v169, ptr { u64, u64, u64 }, v170, !186
        v172 = load v171, !187
        v173 = asm(buffer: v172) -> { u64, u64, u64 } buffer, !188 {
        }
        v174 = get_local ptr { u64, u64, u64 }, __anon_01, !189
        store v173 to v174, !190
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr u64, v175, !191
        v177 = load v176, !192
        v178 = int_to_ptr v177 to ptr u8, !193
        v179 = const u64 1
        v180 = get_elem_ptr v174, ptr u64, v179, !194
        v181 = load v180, !195
        v182 = const u64 2
        v183 = get_elem_ptr v174, ptr u64, v182, !196
        v184 = load v183, !197
        v185 = ptr_to_int v178 to u64, !198
        v186 = get_local ptr { u64, u64 }, __anon_11, !199
        v187 = const u64 0
        v188 = get_elem_ptr v186, ptr u64, v187, !200
        store v185 to v188, !201
        v189 = const u64 1
        v190 = get_elem_ptr v186, ptr u64, v189, !202
        store v184 to v190, !203
        v191 = asm(s: v186) -> slice s, !204 {
        }
        br encode_14_block2(v191), !205

        encode_14_block2(v192: slice):
        br block1(v192), !122

        block1(v193: slice):
        ret slice v193
    }

    fn main_0() -> bool, !206 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5

        entry():
        v0 = const bool false
        v1 = const bool false, !3
        v2 = cmp eq v0 v1, !6
        br block0(v2), !6

        block0(v3: bool):
        v4 = call assert_1(v3), !9
        v5 = const bool false
        v6 = cmp eq v5 v1, !11
        br block1(v6), !11

        block1(v7: bool):
        v8 = call assert_1(v7), !14
        v9 = const bool false
        v10 = cmp eq v9 v1, !16
        br block2(v10), !16

        block2(v11: bool):
        v12 = call assert_1(v11), !19
        v13 = const bool true
        v14 = call assert_1(v13), !21
        v15 = const bool true
        v16 = call assert_1(v15), !23
        v17 = const bool true
        v18 = call assert_1(v17), !25
        v19 = const bool true
        v20 = call assert_1(v19), !27
        v21 = const bool true
        v22 = call assert_1(v21), !29
        v23 = const bool true
        v24 = call assert_1(v23), !31
        v25 = const bool false
        br block3(v25), !33

        block3(v26: bool):
        v27 = cmp eq v26 v1, !35
        br block4(v27), !35

        block4(v28: bool):
        v29 = call assert_1(v28), !38
        v30 = const bool false
        br block5(v30), !40

        block5(v31: bool):
        v32 = cmp eq v31 v1, !42
        br block6(v32), !42

        block6(v33: bool):
        v34 = call assert_1(v33), !45
        v35 = const bool false
        br block7(v35), !47

        block7(v36: bool):
        v37 = cmp eq v36 v1, !49
        br block8(v37), !49

        block8(v38: bool):
        v39 = call assert_1(v38), !52
        br block9(v35), !54

        block9(v40: bool):
        v41 = cmp eq v40 v1, !56
        br block10(v41), !56

        block10(v42: bool):
        v43 = call assert_1(v42), !59
        v44 = const string<9> "breakfast"
        v45 = ptr_to_int v44 to u64, !61
        v46 = get_local ptr { u64, u64 }, __anon_0, !61
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr u64, v47
        store v45 to v48, !61
        v49 = const u64 1
        v50 = get_elem_ptr v46, ptr u64, v49
        v51 = const u64 9
        store v51 to v50, !61
        v52 = get_local ptr slice, __anon_1, !61
        mem_copy_bytes v52, v46, 16
        v53 = load v52
        v54 = const bool true
        br block11(v54), !67

        block11(v55: bool):
        v56 = call assert_1(v55), !69
        v57 = const bool true
        br block12(v57), !71

        block12(v58: bool):
        v59 = call assert_1(v58), !73
        v60 = get_local ptr { u64 }, __anon_2, !75
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61
        v63 = const u64 42, !77
        store v63 to v62, !75
        v64 = load v60
        v65 = const bool true
        br block13(v65), !79

        block13(v66: bool):
        v67 = call assert_1(v66), !81
        v68 = get_local ptr { u64 }, __anon_3, !83
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !83
        v71 = const u64 0, !83
        store v71 to v70, !83
        v72 = load v68
        br block14(v65), !87

        block14(v73: bool):
        v74 = call assert_1(v73), !89
        v75 = get_local ptr { bool, bool }, __anon_4, !91
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr bool, v76, !91
        v78 = const bool true, !94
        store v78 to v77, !91
        v79 = const u64 1
        v80 = get_elem_ptr v75, ptr bool, v79, !91
        v81 = const bool true, !97
        store v81 to v80, !91
        v82 = load v75
        v83 = const bool true
        br block15(v83), !99

        block15(v84: bool):
        v85 = call assert_1(v84), !101
        v86 = get_local ptr [u64; 5], __anon_5, !103
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87
        v89 = const u64 5, !105
        store v89 to v88, !103
        v90 = const u64 1
        v91 = get_elem_ptr v86, ptr u64, v90
        v92 = const u64 4, !107
        store v92 to v91, !103
        v93 = const u64 2
        v94 = get_elem_ptr v86, ptr u64, v93
        v95 = const u64 3, !109
        store v95 to v94, !103
        v96 = const u64 3
        v97 = get_elem_ptr v86, ptr u64, v96
        v98 = const u64 2, !111
        store v98 to v97, !103
        v99 = const u64 4
        v100 = get_elem_ptr v86, ptr u64, v99
        v101 = const u64 1, !113
        store v101 to v100, !103
        v102 = load v86
        v103 = const bool true
        br block16(v103), !115

        block16(v104: bool):
        v105 = call assert_1(v104), !117
        v106 = const bool true, !119
        ret bool v106
    }

    pub fn assert_1(condition !208: bool) -> (), !209 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !210
        br block3(v1), !210

        block3(v2: bool):
        cbr v2, block0(), block1(), !210

        block0():
        v3 = const u64 18446744073709486084, !212
        revert v3, !216

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }

    pub fn not_2(self !217: bool) -> bool, !218 {
        entry(self: bool):
        v0 = const bool false, !3
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_3(code !219: u64) -> never, !220 {
        entry(code: u64):
        revert code, !215
    }

    fn arg_is_reference_4(_a !221: ()) -> bool, !222 {
        entry(_a: ()):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_5(_a !221: bool) -> bool, !222 {
        entry(_a: bool):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_6(_a !221: u64) -> bool, !222 {
        entry(_a: u64):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_7(_a !221: u64) -> bool, !222 {
        entry(_a: u64):
        v0 = const bool false
        ret bool v0
    }

    fn arg_is_reference_8(_a !221: slice) -> bool, !222 {
        entry(_a: slice):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_9(_a !221: b256) -> bool, !222 {
        entry(_a: b256):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_10(_a !221: { u64 }) -> bool, !222 {
        entry(_a: { u64 }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_11(_a !221: { u64 }) -> bool, !222 {
        entry(_a: { u64 }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_12(_a !221: { bool, bool }) -> bool, !222 {
        entry(_a: { bool, bool }):
        v0 = const bool true
        ret bool v0
    }

    fn arg_is_reference_13(_a !221: [u64; 5]) -> bool, !222 {
        entry(_a: [u64; 5]):
        v0 = const bool true
        ret bool v0
    }

    pub fn encode_14(item !223: bool) -> slice, !224 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64, u64 } __anon_10
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_2
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp, !124 {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8, !124
        v3 = ptr_to_int v2 to u64, !124
        v4 = get_local ptr { u64, u64, u64 }, __anon_0, !124
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !124
        store v3 to v6, !124
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !124
        store v0 to v8, !124
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9, !124
        v11 = const u64 0
        store v11 to v10, !124
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer, !124 {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !225
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14, !124
        store v12 to v15, !226
        v16 = load v13, !124
        br block0(v16), !124

        block0(v17: { { u64, u64, u64 } }):
        v18 = ptr_to_int v17 to u64, !142
        v19 = int_to_ptr v18 to ptr { { u64, u64, u64 } }, !142
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { u64, u64, u64 }, v20, !227
        v22 = load v21, !142
        v23 = asm(buffer: v22) -> { u64, u64, u64 } buffer, !142 {
        }
        v24 = get_local ptr { u64, u64, u64 }, __anon_00, !142
        store v23 to v24, !142
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !142
        v27 = load v26, !142
        v28 = int_to_ptr v27 to ptr u8, !142
        v29 = const u64 1
        v30 = get_elem_ptr v24, ptr u64, v29, !142
        v31 = load v30, !142
        v32 = const u64 2
        v33 = get_elem_ptr v24, ptr u64, v32, !142
        v34 = load v33, !142
        v35 = ptr_to_int v28 to u64, !142
        v36 = add v35, v34, !142
        v37 = int_to_ptr v36 to ptr bool, !142
        store item to v37, !142
        v38 = const u64 1
        v39 = add v34, v38, !142
        v40 = ptr_to_int v28 to u64, !142
        v41 = get_local ptr { u64, u64, u64 }, __anon_10, !142
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !142
        store v40 to v43, !142
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr u64, v44, !142
        store v31 to v45, !142
        v46 = const u64 2
        v47 = get_elem_ptr v41, ptr u64, v46, !142
        store v39 to v47, !142
        v48 = asm(buffer: v41) -> { u64, u64, u64 } buffer, !142 {
        }
        v49 = get_local ptr { { u64, u64, u64 } }, __anon_2, !228
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { u64, u64, u64 }, v50, !142
        store v48 to v51, !229
        v52 = load v49, !142
        br block1(v52), !142

        block1(v53: { { u64, u64, u64 } }):
        v54 = get_local ptr { { u64, u64, u64 } }, buffer, !178
        store v53 to v54, !178
        v55 = get_local ptr { { u64, u64, u64 } }, buffer, !181
        v56 = load v55
        v57 = ptr_to_int v56 to u64, !183
        v58 = int_to_ptr v57 to ptr { { u64, u64, u64 } }, !183
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64, u64 }, v59, !230
        v61 = load v60, !183
        v62 = asm(buffer: v61) -> { u64, u64, u64 } buffer, !183 {
        }
        v63 = get_local ptr { u64, u64, u64 }, __anon_01, !183
        store v62 to v63, !183
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !183
        v66 = load v65, !183
        v67 = int_to_ptr v66 to ptr u8, !183
        v68 = const u64 1
        v69 = get_elem_ptr v63, ptr u64, v68, !183
        v70 = load v69, !183
        v71 = const u64 2
        v72 = get_elem_ptr v63, ptr u64, v71, !183
        v73 = load v72, !183
        v74 = ptr_to_int v67 to u64, !183
        v75 = get_local ptr { u64, u64 }, __anon_11, !183
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr u64, v76, !183
        store v74 to v77, !183
        v78 = const u64 1
        v79 = get_elem_ptr v75, ptr u64, v78, !183
        store v73 to v79, !183
        v80 = asm(s: v75) -> slice s, !183 {
        }
        br block2(v80), !183

        block2(v81: slice):
        ret slice v81
    }

    pub fn abi_encode_15(self !231: bool, buffer !232: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !233 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !145
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !172
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !172
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_16() -> { { u64, u64, u64 } }, !234 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !136
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !136
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_17(self !235: { { u64, u64, u64 } }) -> slice, !236 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !145
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = (!122 !124)
!136 = span !123 159 222
!137 = (!122 !124 !136)
!138 = (!122 !124)
!139 = (!122 !124 !136)
!140 = (!122 !124)
!141 = (!122 !124)
!142 = span !123 64221 64251
!143 = (!122 !142)
!144 = (!122 !142)
!145 = span !123 55 82
!146 = (!122 !142 !145)
!147 = (!122 !142)
!148 = (!122 !142)
!149 = (!122 !142)
!150 = (!122 !142)
!151 = (!122 !142)
!152 = (!122 !142)
!153 = (!122 !142)
!154 = (!122 !142)
!155 = (!122 !142)
!156 = (!122 !142)
!157 = (!122 !142)
!158 = (!122 !142)
!159 = (!122 !142)
!160 = (!122 !142)
!161 = (!122 !142)
!162 = (!122 !142)
!163 = (!122 !142)
!164 = (!122 !142)
!165 = (!122 !142)
!166 = (!122 !142)
!167 = (!122 !142)
!168 = (!122 !142)
!169 = (!122 !142)
!170 = (!122 !142)
!171 = (!122 !142)
!172 = span !123 3836 3919
!173 = (!122 !142 !172)
!174 = (!122 !142)
!175 = (!122 !142 !172)
!176 = (!122 !142)
!177 = (!122 !142)
!178 = span !123 64208 64252
!179 = (!122 !178)
!180 = (!122 !178)
!181 = span !123 64257 64263
!182 = (!122 !181)
!183 = span !123 64257 64278
!184 = (!122 !183)
!185 = (!122 !183)
!186 = (!122 !183 !145)
!187 = (!122 !183)
!188 = (!122 !183)
!189 = (!122 !183)
!190 = (!122 !183)
!191 = (!122 !183)
!192 = (!122 !183)
!193 = (!122 !183)
!194 = (!122 !183)
!195 = (!122 !183)
!196 = (!122 !183)
!197 = (!122 !183)
!198 = (!122 !183)
!199 = (!122 !183)
!200 = (!122 !183)
!201 = (!122 !183)
!202 = (!122 !183)
!203 = (!122 !183)
!204 = (!122 !183)
!205 = (!122 !183)
!206 = span !5 138 1058
!207 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!208 = span !207 935 944
!209 = span !207 921 1019
!210 = span !207 961 971
!211 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!212 = span !211 1038 1059
!213 = span !207 982 1010
!214 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!215 = span !214 691 705
!216 = (!213 !215)
!217 = span !2 9956 9960
!218 = span !2 9949 10003
!219 = span !214 669 673
!220 = span !214 655 707
!221 = span !5 87 89
!222 = span !5 64 136
!223 = span !123 64156 64160
!224 = span !123 64139 64280
!225 = (!124 !136)
!226 = (!124 !136)
!227 = (!142 !145)
!228 = (!142 !172)
!229 = (!142 !172)
!230 = (!183 !145)
!231 = span !123 3794 3798
!232 = span !123 3800 3806
!233 = span !123 3780 3925
!234 = span !123 128 228
!235 = span !123 281 285
!236 = span !123 265 357

// IR: [fn-dce] Dead function elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = const bool false
        v1 = const bool false, !3
        v2 = cmp eq v0 v1, !7
        br main_0_block0(v2), !8

        main_0_block0(v3: bool):
        v4 = call assert_1(v3), !10
        v5 = const bool false
        v6 = cmp eq v5 v1, !12
        br main_0_block1(v6), !13

        main_0_block1(v7: bool):
        v8 = call assert_1(v7), !15
        v9 = const bool false
        v10 = cmp eq v9 v1, !17
        br main_0_block2(v10), !18

        main_0_block2(v11: bool):
        v12 = call assert_1(v11), !20
        v13 = const bool true
        v14 = call assert_1(v13), !22
        v15 = const bool true
        v16 = call assert_1(v15), !24
        v17 = const bool true
        v18 = call assert_1(v17), !26
        v19 = const bool true
        v20 = call assert_1(v19), !28
        v21 = const bool true
        v22 = call assert_1(v21), !30
        v23 = const bool true
        v24 = call assert_1(v23), !32
        v25 = const bool false
        br main_0_block3(v25), !34

        main_0_block3(v26: bool):
        v27 = cmp eq v26 v1, !36
        br main_0_block4(v27), !37

        main_0_block4(v28: bool):
        v29 = call assert_1(v28), !39
        v30 = const bool false
        br main_0_block5(v30), !41

        main_0_block5(v31: bool):
        v32 = cmp eq v31 v1, !43
        br main_0_block6(v32), !44

        main_0_block6(v33: bool):
        v34 = call assert_1(v33), !46
        v35 = const bool false
        br main_0_block7(v35), !48

        main_0_block7(v36: bool):
        v37 = cmp eq v36 v1, !50
        br main_0_block8(v37), !51

        main_0_block8(v38: bool):
        v39 = call assert_1(v38), !53
        br main_0_block9(v35), !55

        main_0_block9(v40: bool):
        v41 = cmp eq v40 v1, !57
        br main_0_block10(v41), !58

        main_0_block10(v42: bool):
        v43 = call assert_1(v42), !60
        v44 = const string<9> "breakfast"
        v45 = ptr_to_int v44 to u64, !62
        v46 = get_local ptr { u64, u64 }, __anon_0, !63
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr u64, v47, !4
        store v45 to v48, !64
        v49 = const u64 1
        v50 = get_elem_ptr v46, ptr u64, v49, !4
        v51 = const u64 9
        store v51 to v50, !65
        v52 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v52, v46, 16, !4
        v53 = load v52, !4
        v54 = const bool true
        br main_0_block11(v54), !68

        main_0_block11(v55: bool):
        v56 = call assert_1(v55), !70
        v57 = const bool true
        br main_0_block12(v57), !72

        main_0_block12(v58: bool):
        v59 = call assert_1(v58), !74
        v60 = get_local ptr { u64 }, __anon_2, !76
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61, !4
        v63 = const u64 42, !77
        store v63 to v62, !78
        v64 = load v60, !4
        v65 = const bool true
        br main_0_block13(v65), !80

        main_0_block13(v66: bool):
        v67 = call assert_1(v66), !82
        v68 = get_local ptr { u64 }, __anon_3, !84
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !85
        v71 = const u64 0, !83
        store v71 to v70, !86
        v72 = load v68, !4
        br main_0_block14(v65), !88

        main_0_block14(v73: bool):
        v74 = call assert_1(v73), !90
        v75 = get_local ptr { bool, bool }, __anon_4, !92
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr bool, v76, !93
        v78 = const bool true, !94
        store v78 to v77, !95
        v79 = const u64 1
        v80 = get_elem_ptr v75, ptr bool, v79, !96
        v81 = const bool true, !97
        store v81 to v80, !98
        v82 = load v75, !4
        v83 = const bool true
        br main_0_block15(v83), !100

        main_0_block15(v84: bool):
        v85 = call assert_1(v84), !102
        v86 = get_local ptr [u64; 5], __anon_5, !104
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !4
        v89 = const u64 5, !105
        store v89 to v88, !106
        v90 = const u64 1
        v91 = get_elem_ptr v86, ptr u64, v90, !4
        v92 = const u64 4, !107
        store v92 to v91, !108
        v93 = const u64 2
        v94 = get_elem_ptr v86, ptr u64, v93, !4
        v95 = const u64 3, !109
        store v95 to v94, !110
        v96 = const u64 3
        v97 = get_elem_ptr v86, ptr u64, v96, !4
        v98 = const u64 2, !111
        store v98 to v97, !112
        v99 = const u64 4
        v100 = get_elem_ptr v86, ptr u64, v99, !4
        v101 = const u64 1, !113
        store v101 to v100, !114
        v102 = load v86, !4
        v103 = const bool true
        br main_0_block16(v103), !116

        main_0_block16(v104: bool):
        v105 = call assert_1(v104), !118
        v106 = const bool true, !119
        br block0(v106), !4

        block0(v107: bool):
        v108 = get_local ptr bool, result, !120
        store v107 to v108, !120
        v109 = get_local ptr bool, result, !121
        v110 = load v109
        v111 = const u64 1024
        v112 = asm(cap: v111) -> u64 hp, !125 {
            aloc   cap
        }
        v113 = int_to_ptr v112 to ptr u8, !126
        v114 = ptr_to_int v113 to u64, !127
        v115 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr u64, v116, !129
        store v114 to v117, !130
        v118 = const u64 1
        v119 = get_elem_ptr v115, ptr u64, v118, !131
        store v111 to v119, !132
        v120 = const u64 2
        v121 = get_elem_ptr v115, ptr u64, v120, !133
        v122 = const u64 0
        store v122 to v121, !134
        v123 = asm(buffer: v115) -> { u64, u64, u64 } buffer, !135 {
        }
        v124 = get_local ptr { { u64, u64, u64 } }, __anon_10, !137
        v125 = const u64 0
        v126 = get_elem_ptr v124, ptr { u64, u64, u64 }, v125, !138
        store v123 to v126, !139
        v127 = load v124, !140
        br encode_14_block0(v127), !141

        encode_14_block0(v128: { { u64, u64, u64 } }):
        v129 = ptr_to_int v128 to u64, !143
        v130 = int_to_ptr v129 to ptr { { u64, u64, u64 } }, !144
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !146
        v133 = load v132, !147
        v134 = asm(buffer: v133) -> { u64, u64, u64 } buffer, !148 {
        }
        v135 = get_local ptr { u64, u64, u64 }, __anon_000, !149
        store v134 to v135, !150
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !151
        v138 = load v137, !152
        v139 = int_to_ptr v138 to ptr u8, !153
        v140 = const u64 1
        v141 = get_elem_ptr v135, ptr u64, v140, !154
        v142 = load v141, !155
        v143 = const u64 2
        v144 = get_elem_ptr v135, ptr u64, v143, !156
        v145 = load v144, !157
        v146 = ptr_to_int v139 to u64, !158
        v147 = add v146, v145, !159
        v148 = int_to_ptr v147 to ptr bool, !160
        store v110 to v148, !161
        v149 = const u64 1
        v150 = add v145, v149, !162
        v151 = ptr_to_int v139 to u64, !163
        v152 = get_local ptr { u64, u64, u64 }, __anon_100, !164
        v153 = const u64 0
        v154 = get_elem_ptr v152, ptr u64, v153, !165
        store v151 to v154, !166
        v155 = const u64 1
        v156 = get_elem_ptr v152, ptr u64, v155, !167
        store v142 to v156, !168
        v157 = const u64 2
        v158 = get_elem_ptr v152, ptr u64, v157, !169
        store v150 to v158, !170
        v159 = asm(buffer: v152) -> { u64, u64, u64 } buffer, !171 {
        }
        v160 = get_local ptr { { u64, u64, u64 } }, __anon_20, !173
        v161 = const u64 0
        v162 = get_elem_ptr v160, ptr { u64, u64, u64 }, v161, !174
        store v159 to v162, !175
        v163 = load v160, !176
        br encode_14_block1(v163), !177

        encode_14_block1(v164: { { u64, u64, u64 } }):
        v165 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        store v164 to v165, !180
        v166 = get_local ptr { { u64, u64, u64 } }, buffer, !182
        v167 = load v166, !122
        v168 = ptr_to_int v167 to u64, !184
        v169 = int_to_ptr v168 to ptr { { u64, u64, u64 } }, !185
        v170 = const u64 0
        v171 = get_elem_ptr v169, ptr { u64, u64, u64 }, v170, !186
        v172 = load v171, !187
        v173 = asm(buffer: v172) -> { u64, u64, u64 } buffer, !188 {
        }
        v174 = get_local ptr { u64, u64, u64 }, __anon_01, !189
        store v173 to v174, !190
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr u64, v175, !191
        v177 = load v176, !192
        v178 = int_to_ptr v177 to ptr u8, !193
        v179 = const u64 1
        v180 = get_elem_ptr v174, ptr u64, v179, !194
        v181 = load v180, !195
        v182 = const u64 2
        v183 = get_elem_ptr v174, ptr u64, v182, !196
        v184 = load v183, !197
        v185 = ptr_to_int v178 to u64, !198
        v186 = get_local ptr { u64, u64 }, __anon_11, !199
        v187 = const u64 0
        v188 = get_elem_ptr v186, ptr u64, v187, !200
        store v185 to v188, !201
        v189 = const u64 1
        v190 = get_elem_ptr v186, ptr u64, v189, !202
        store v184 to v190, !203
        v191 = asm(s: v186) -> slice s, !204 {
        }
        br encode_14_block2(v191), !205

        encode_14_block2(v192: slice):
        br block1(v192), !122

        block1(v193: slice):
        ret slice v193
    }

    pub fn assert_1(condition !207: bool) -> (), !208 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !209
        br block3(v1), !209

        block3(v2: bool):
        cbr v2, block0(), block1(), !209

        block0():
        v3 = const u64 18446744073709486084, !211
        revert v3, !215

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = (!122 !124)
!136 = span !123 159 222
!137 = (!122 !124 !136)
!138 = (!122 !124)
!139 = (!122 !124 !136)
!140 = (!122 !124)
!141 = (!122 !124)
!142 = span !123 64221 64251
!143 = (!122 !142)
!144 = (!122 !142)
!145 = span !123 55 82
!146 = (!122 !142 !145)
!147 = (!122 !142)
!148 = (!122 !142)
!149 = (!122 !142)
!150 = (!122 !142)
!151 = (!122 !142)
!152 = (!122 !142)
!153 = (!122 !142)
!154 = (!122 !142)
!155 = (!122 !142)
!156 = (!122 !142)
!157 = (!122 !142)
!158 = (!122 !142)
!159 = (!122 !142)
!160 = (!122 !142)
!161 = (!122 !142)
!162 = (!122 !142)
!163 = (!122 !142)
!164 = (!122 !142)
!165 = (!122 !142)
!166 = (!122 !142)
!167 = (!122 !142)
!168 = (!122 !142)
!169 = (!122 !142)
!170 = (!122 !142)
!171 = (!122 !142)
!172 = span !123 3836 3919
!173 = (!122 !142 !172)
!174 = (!122 !142)
!175 = (!122 !142 !172)
!176 = (!122 !142)
!177 = (!122 !142)
!178 = span !123 64208 64252
!179 = (!122 !178)
!180 = (!122 !178)
!181 = span !123 64257 64263
!182 = (!122 !181)
!183 = span !123 64257 64278
!184 = (!122 !183)
!185 = (!122 !183)
!186 = (!122 !183 !145)
!187 = (!122 !183)
!188 = (!122 !183)
!189 = (!122 !183)
!190 = (!122 !183)
!191 = (!122 !183)
!192 = (!122 !183)
!193 = (!122 !183)
!194 = (!122 !183)
!195 = (!122 !183)
!196 = (!122 !183)
!197 = (!122 !183)
!198 = (!122 !183)
!199 = (!122 !183)
!200 = (!122 !183)
!201 = (!122 !183)
!202 = (!122 !183)
!203 = (!122 !183)
!204 = (!122 !183)
!205 = (!122 !183)
!206 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!207 = span !206 935 944
!208 = span !206 921 1019
!209 = span !206 961 971
!210 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!211 = span !210 1038 1059
!212 = span !206 982 1010
!213 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!214 = span !213 691 705
!215 = (!212 !214)

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = const bool false
        v1 = const bool false, !3
        v2 = cmp eq v0 v1, !7
        br main_0_block0(v2), !8

        main_0_block0(v3: bool):
        v4 = call assert_1(v3), !10
        v5 = const bool false
        v6 = cmp eq v5 v1, !12
        br main_0_block1(v6), !13

        main_0_block1(v7: bool):
        v8 = call assert_1(v7), !15
        v9 = const bool false
        v10 = cmp eq v9 v1, !17
        br main_0_block2(v10), !18

        main_0_block2(v11: bool):
        v12 = call assert_1(v11), !20
        v13 = const bool true
        v14 = call assert_1(v13), !22
        v15 = const bool true
        v16 = call assert_1(v15), !24
        v17 = const bool true
        v18 = call assert_1(v17), !26
        v19 = const bool true
        v20 = call assert_1(v19), !28
        v21 = const bool true
        v22 = call assert_1(v21), !30
        v23 = const bool true
        v24 = call assert_1(v23), !32
        v25 = const bool false
        br main_0_block3(v25), !34

        main_0_block3(v26: bool):
        v27 = cmp eq v26 v1, !36
        br main_0_block4(v27), !37

        main_0_block4(v28: bool):
        v29 = call assert_1(v28), !39
        v30 = const bool false
        br main_0_block5(v30), !41

        main_0_block5(v31: bool):
        v32 = cmp eq v31 v1, !43
        br main_0_block6(v32), !44

        main_0_block6(v33: bool):
        v34 = call assert_1(v33), !46
        v35 = const bool false
        br main_0_block7(v35), !48

        main_0_block7(v36: bool):
        v37 = cmp eq v36 v1, !50
        br main_0_block8(v37), !51

        main_0_block8(v38: bool):
        v39 = call assert_1(v38), !53
        br main_0_block9(v35), !55

        main_0_block9(v40: bool):
        v41 = cmp eq v40 v1, !57
        br main_0_block10(v41), !58

        main_0_block10(v42: bool):
        v43 = call assert_1(v42), !60
        v44 = const string<9> "breakfast"
        v45 = ptr_to_int v44 to u64, !62
        v46 = get_local ptr { u64, u64 }, __anon_0, !63
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr u64, v47, !4
        store v45 to v48, !64
        v49 = const u64 1
        v50 = get_elem_ptr v46, ptr u64, v49, !4
        v51 = const u64 9
        store v51 to v50, !65
        v52 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v52, v46, 16, !4
        v53 = const bool true
        br main_0_block11(v53), !68

        main_0_block11(v54: bool):
        v55 = call assert_1(v54), !70
        v56 = const bool true
        br main_0_block12(v56), !72

        main_0_block12(v57: bool):
        v58 = call assert_1(v57), !74
        v59 = get_local ptr { u64 }, __anon_2, !76
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !4
        v62 = const u64 42, !77
        store v62 to v61, !78
        v63 = const bool true
        br main_0_block13(v63), !80

        main_0_block13(v64: bool):
        v65 = call assert_1(v64), !82
        v66 = get_local ptr { u64 }, __anon_3, !84
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67, !85
        v69 = const u64 0, !83
        store v69 to v68, !86
        br main_0_block14(v63), !88

        main_0_block14(v70: bool):
        v71 = call assert_1(v70), !90
        v72 = get_local ptr { bool, bool }, __anon_4, !92
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !93
        v75 = const bool true, !94
        store v75 to v74, !95
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr bool, v76, !96
        v78 = const bool true, !97
        store v78 to v77, !98
        v79 = const bool true
        br main_0_block15(v79), !100

        main_0_block15(v80: bool):
        v81 = call assert_1(v80), !102
        v82 = get_local ptr [u64; 5], __anon_5, !104
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u64, v83, !4
        v85 = const u64 5, !105
        store v85 to v84, !106
        v86 = const u64 1
        v87 = get_elem_ptr v82, ptr u64, v86, !4
        v88 = const u64 4, !107
        store v88 to v87, !108
        v89 = const u64 2
        v90 = get_elem_ptr v82, ptr u64, v89, !4
        v91 = const u64 3, !109
        store v91 to v90, !110
        v92 = const u64 3
        v93 = get_elem_ptr v82, ptr u64, v92, !4
        v94 = const u64 2, !111
        store v94 to v93, !112
        v95 = const u64 4
        v96 = get_elem_ptr v82, ptr u64, v95, !4
        v97 = const u64 1, !113
        store v97 to v96, !114
        v98 = const bool true
        br main_0_block16(v98), !116

        main_0_block16(v99: bool):
        v100 = call assert_1(v99), !118
        v101 = const bool true, !119
        br block0(v101), !4

        block0(v102: bool):
        v103 = get_local ptr bool, result, !120
        store v102 to v103, !120
        v104 = get_local ptr bool, result, !121
        v105 = load v104
        v106 = const u64 1024
        v107 = asm(cap: v106) -> u64 hp, !125 {
            aloc   cap
        }
        v108 = int_to_ptr v107 to ptr u8, !126
        v109 = ptr_to_int v108 to u64, !127
        v110 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr u64, v111, !129
        store v109 to v112, !130
        v113 = const u64 1
        v114 = get_elem_ptr v110, ptr u64, v113, !131
        store v106 to v114, !132
        v115 = const u64 2
        v116 = get_elem_ptr v110, ptr u64, v115, !133
        v117 = const u64 0
        store v117 to v116, !134
        v118 = asm(buffer: v110) -> { u64, u64, u64 } buffer, !135 {
        }
        v119 = get_local ptr { { u64, u64, u64 } }, __anon_10, !137
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr { u64, u64, u64 }, v120, !138
        store v118 to v121, !139
        v122 = load v119, !140
        br encode_14_block0(v122), !141

        encode_14_block0(v123: { { u64, u64, u64 } }):
        v124 = ptr_to_int v123 to u64, !143
        v125 = int_to_ptr v124 to ptr { { u64, u64, u64 } }, !144
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr { u64, u64, u64 }, v126, !146
        v128 = load v127, !147
        v129 = asm(buffer: v128) -> { u64, u64, u64 } buffer, !148 {
        }
        v130 = get_local ptr { u64, u64, u64 }, __anon_000, !149
        store v129 to v130, !150
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !151
        v133 = load v132, !152
        v134 = int_to_ptr v133 to ptr u8, !153
        v135 = const u64 1
        v136 = get_elem_ptr v130, ptr u64, v135, !154
        v137 = load v136, !155
        v138 = const u64 2
        v139 = get_elem_ptr v130, ptr u64, v138, !156
        v140 = load v139, !157
        v141 = ptr_to_int v134 to u64, !158
        v142 = add v141, v140, !159
        v143 = int_to_ptr v142 to ptr bool, !160
        store v105 to v143, !161
        v144 = const u64 1
        v145 = add v140, v144, !162
        v146 = ptr_to_int v134 to u64, !163
        v147 = get_local ptr { u64, u64, u64 }, __anon_100, !164
        v148 = const u64 0
        v149 = get_elem_ptr v147, ptr u64, v148, !165
        store v146 to v149, !166
        v150 = const u64 1
        v151 = get_elem_ptr v147, ptr u64, v150, !167
        store v137 to v151, !168
        v152 = const u64 2
        v153 = get_elem_ptr v147, ptr u64, v152, !169
        store v145 to v153, !170
        v154 = asm(buffer: v147) -> { u64, u64, u64 } buffer, !171 {
        }
        v155 = get_local ptr { { u64, u64, u64 } }, __anon_20, !173
        v156 = const u64 0
        v157 = get_elem_ptr v155, ptr { u64, u64, u64 }, v156, !174
        store v154 to v157, !175
        v158 = load v155, !176
        br encode_14_block1(v158), !177

        encode_14_block1(v159: { { u64, u64, u64 } }):
        v160 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        store v159 to v160, !180
        v161 = get_local ptr { { u64, u64, u64 } }, buffer, !182
        v162 = load v161, !122
        v163 = ptr_to_int v162 to u64, !184
        v164 = int_to_ptr v163 to ptr { { u64, u64, u64 } }, !185
        v165 = const u64 0
        v166 = get_elem_ptr v164, ptr { u64, u64, u64 }, v165, !186
        v167 = load v166, !187
        v168 = asm(buffer: v167) -> { u64, u64, u64 } buffer, !188 {
        }
        v169 = get_local ptr { u64, u64, u64 }, __anon_01, !189
        store v168 to v169, !190
        v170 = const u64 0
        v171 = get_elem_ptr v169, ptr u64, v170, !191
        v172 = load v171, !192
        v173 = int_to_ptr v172 to ptr u8, !193
        v174 = const u64 2
        v175 = get_elem_ptr v169, ptr u64, v174, !194
        v176 = load v175, !195
        v177 = ptr_to_int v173 to u64, !196
        v178 = get_local ptr { u64, u64 }, __anon_11, !197
        v179 = const u64 0
        v180 = get_elem_ptr v178, ptr u64, v179, !198
        store v177 to v180, !199
        v181 = const u64 1
        v182 = get_elem_ptr v178, ptr u64, v181, !200
        store v176 to v182, !201
        v183 = asm(s: v178) -> slice s, !202 {
        }
        br encode_14_block2(v183), !203

        encode_14_block2(v184: slice):
        br block1(v184), !122

        block1(v185: slice):
        ret slice v185
    }

    pub fn assert_1(condition !205: bool) -> (), !206 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !207
        br block3(v1), !207

        block3(v2: bool):
        cbr v2, block0(), block1(), !207

        block0():
        v3 = const u64 18446744073709486084, !209
        revert v3, !213

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = (!122 !124)
!136 = span !123 159 222
!137 = (!122 !124 !136)
!138 = (!122 !124)
!139 = (!122 !124 !136)
!140 = (!122 !124)
!141 = (!122 !124)
!142 = span !123 64221 64251
!143 = (!122 !142)
!144 = (!122 !142)
!145 = span !123 55 82
!146 = (!122 !142 !145)
!147 = (!122 !142)
!148 = (!122 !142)
!149 = (!122 !142)
!150 = (!122 !142)
!151 = (!122 !142)
!152 = (!122 !142)
!153 = (!122 !142)
!154 = (!122 !142)
!155 = (!122 !142)
!156 = (!122 !142)
!157 = (!122 !142)
!158 = (!122 !142)
!159 = (!122 !142)
!160 = (!122 !142)
!161 = (!122 !142)
!162 = (!122 !142)
!163 = (!122 !142)
!164 = (!122 !142)
!165 = (!122 !142)
!166 = (!122 !142)
!167 = (!122 !142)
!168 = (!122 !142)
!169 = (!122 !142)
!170 = (!122 !142)
!171 = (!122 !142)
!172 = span !123 3836 3919
!173 = (!122 !142 !172)
!174 = (!122 !142)
!175 = (!122 !142 !172)
!176 = (!122 !142)
!177 = (!122 !142)
!178 = span !123 64208 64252
!179 = (!122 !178)
!180 = (!122 !178)
!181 = span !123 64257 64263
!182 = (!122 !181)
!183 = span !123 64257 64278
!184 = (!122 !183)
!185 = (!122 !183)
!186 = (!122 !183 !145)
!187 = (!122 !183)
!188 = (!122 !183)
!189 = (!122 !183)
!190 = (!122 !183)
!191 = (!122 !183)
!192 = (!122 !183)
!193 = (!122 !183)
!194 = (!122 !183)
!195 = (!122 !183)
!196 = (!122 !183)
!197 = (!122 !183)
!198 = (!122 !183)
!199 = (!122 !183)
!200 = (!122 !183)
!201 = (!122 !183)
!202 = (!122 !183)
!203 = (!122 !183)
!204 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!205 = span !204 935 944
!206 = span !204 921 1019
!207 = span !204 961 971
!208 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!209 = span !208 1038 1059
!210 = span !204 982 1010
!211 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!212 = span !211 691 705
!213 = (!210 !212)

// IR: [const-demotion] Demotion of by-value constants to by-reference
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local string<9> __const = const string<9> "breakfast"
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = const bool false
        v1 = const bool false, !3
        v2 = cmp eq v0 v1, !7
        br main_0_block0(v2), !8

        main_0_block0(v3: bool):
        v4 = call assert_1(v3), !10
        v5 = const bool false
        v6 = cmp eq v5 v1, !12
        br main_0_block1(v6), !13

        main_0_block1(v7: bool):
        v8 = call assert_1(v7), !15
        v9 = const bool false
        v10 = cmp eq v9 v1, !17
        br main_0_block2(v10), !18

        main_0_block2(v11: bool):
        v12 = call assert_1(v11), !20
        v13 = const bool true
        v14 = call assert_1(v13), !22
        v15 = const bool true
        v16 = call assert_1(v15), !24
        v17 = const bool true
        v18 = call assert_1(v17), !26
        v19 = const bool true
        v20 = call assert_1(v19), !28
        v21 = const bool true
        v22 = call assert_1(v21), !30
        v23 = const bool true
        v24 = call assert_1(v23), !32
        v25 = const bool false
        br main_0_block3(v25), !34

        main_0_block3(v26: bool):
        v27 = cmp eq v26 v1, !36
        br main_0_block4(v27), !37

        main_0_block4(v28: bool):
        v29 = call assert_1(v28), !39
        v30 = const bool false
        br main_0_block5(v30), !41

        main_0_block5(v31: bool):
        v32 = cmp eq v31 v1, !43
        br main_0_block6(v32), !44

        main_0_block6(v33: bool):
        v34 = call assert_1(v33), !46
        v35 = const bool false
        br main_0_block7(v35), !48

        main_0_block7(v36: bool):
        v37 = cmp eq v36 v1, !50
        br main_0_block8(v37), !51

        main_0_block8(v38: bool):
        v39 = call assert_1(v38), !53
        br main_0_block9(v35), !55

        main_0_block9(v40: bool):
        v41 = cmp eq v40 v1, !57
        br main_0_block10(v41), !58

        main_0_block10(v42: bool):
        v43 = get_local ptr string<9>, __const
        v44 = load v43
        v45 = call assert_1(v42), !60
        v46 = ptr_to_int v44 to u64, !62
        v47 = get_local ptr { u64, u64 }, __anon_0, !63
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !4
        store v46 to v49, !64
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !4
        v52 = const u64 9
        store v52 to v51, !65
        v53 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v53, v47, 16, !4
        v54 = const bool true
        br main_0_block11(v54), !68

        main_0_block11(v55: bool):
        v56 = call assert_1(v55), !70
        v57 = const bool true
        br main_0_block12(v57), !72

        main_0_block12(v58: bool):
        v59 = call assert_1(v58), !74
        v60 = get_local ptr { u64 }, __anon_2, !76
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61, !4
        v63 = const u64 42, !77
        store v63 to v62, !78
        v64 = const bool true
        br main_0_block13(v64), !80

        main_0_block13(v65: bool):
        v66 = call assert_1(v65), !82
        v67 = get_local ptr { u64 }, __anon_3, !84
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !85
        v70 = const u64 0, !83
        store v70 to v69, !86
        br main_0_block14(v64), !88

        main_0_block14(v71: bool):
        v72 = call assert_1(v71), !90
        v73 = get_local ptr { bool, bool }, __anon_4, !92
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr bool, v74, !93
        v76 = const bool true, !94
        store v76 to v75, !95
        v77 = const u64 1
        v78 = get_elem_ptr v73, ptr bool, v77, !96
        v79 = const bool true, !97
        store v79 to v78, !98
        v80 = const bool true
        br main_0_block15(v80), !100

        main_0_block15(v81: bool):
        v82 = call assert_1(v81), !102
        v83 = get_local ptr [u64; 5], __anon_5, !104
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !4
        v86 = const u64 5, !105
        store v86 to v85, !106
        v87 = const u64 1
        v88 = get_elem_ptr v83, ptr u64, v87, !4
        v89 = const u64 4, !107
        store v89 to v88, !108
        v90 = const u64 2
        v91 = get_elem_ptr v83, ptr u64, v90, !4
        v92 = const u64 3, !109
        store v92 to v91, !110
        v93 = const u64 3
        v94 = get_elem_ptr v83, ptr u64, v93, !4
        v95 = const u64 2, !111
        store v95 to v94, !112
        v96 = const u64 4
        v97 = get_elem_ptr v83, ptr u64, v96, !4
        v98 = const u64 1, !113
        store v98 to v97, !114
        v99 = const bool true
        br main_0_block16(v99), !116

        main_0_block16(v100: bool):
        v101 = call assert_1(v100), !118
        v102 = const bool true, !119
        br block0(v102), !4

        block0(v103: bool):
        v104 = get_local ptr bool, result, !120
        store v103 to v104, !120
        v105 = get_local ptr bool, result, !121
        v106 = load v105
        v107 = const u64 1024
        v108 = asm(cap: v107) -> u64 hp, !125 {
            aloc   cap
        }
        v109 = int_to_ptr v108 to ptr u8, !126
        v110 = ptr_to_int v109 to u64, !127
        v111 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !129
        store v110 to v113, !130
        v114 = const u64 1
        v115 = get_elem_ptr v111, ptr u64, v114, !131
        store v107 to v115, !132
        v116 = const u64 2
        v117 = get_elem_ptr v111, ptr u64, v116, !133
        v118 = const u64 0
        store v118 to v117, !134
        v119 = asm(buffer: v111) -> { u64, u64, u64 } buffer, !135 {
        }
        v120 = get_local ptr { { u64, u64, u64 } }, __anon_10, !137
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr { u64, u64, u64 }, v121, !138
        store v119 to v122, !139
        v123 = load v120, !140
        br encode_14_block0(v123), !141

        encode_14_block0(v124: { { u64, u64, u64 } }):
        v125 = ptr_to_int v124 to u64, !143
        v126 = int_to_ptr v125 to ptr { { u64, u64, u64 } }, !144
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr { u64, u64, u64 }, v127, !146
        v129 = load v128, !147
        v130 = asm(buffer: v129) -> { u64, u64, u64 } buffer, !148 {
        }
        v131 = get_local ptr { u64, u64, u64 }, __anon_000, !149
        store v130 to v131, !150
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !151
        v134 = load v133, !152
        v135 = int_to_ptr v134 to ptr u8, !153
        v136 = const u64 1
        v137 = get_elem_ptr v131, ptr u64, v136, !154
        v138 = load v137, !155
        v139 = const u64 2
        v140 = get_elem_ptr v131, ptr u64, v139, !156
        v141 = load v140, !157
        v142 = ptr_to_int v135 to u64, !158
        v143 = add v142, v141, !159
        v144 = int_to_ptr v143 to ptr bool, !160
        store v106 to v144, !161
        v145 = const u64 1
        v146 = add v141, v145, !162
        v147 = ptr_to_int v135 to u64, !163
        v148 = get_local ptr { u64, u64, u64 }, __anon_100, !164
        v149 = const u64 0
        v150 = get_elem_ptr v148, ptr u64, v149, !165
        store v147 to v150, !166
        v151 = const u64 1
        v152 = get_elem_ptr v148, ptr u64, v151, !167
        store v138 to v152, !168
        v153 = const u64 2
        v154 = get_elem_ptr v148, ptr u64, v153, !169
        store v146 to v154, !170
        v155 = asm(buffer: v148) -> { u64, u64, u64 } buffer, !171 {
        }
        v156 = get_local ptr { { u64, u64, u64 } }, __anon_20, !173
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr { u64, u64, u64 }, v157, !174
        store v155 to v158, !175
        v159 = load v156, !176
        br encode_14_block1(v159), !177

        encode_14_block1(v160: { { u64, u64, u64 } }):
        v161 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        store v160 to v161, !180
        v162 = get_local ptr { { u64, u64, u64 } }, buffer, !182
        v163 = load v162, !122
        v164 = ptr_to_int v163 to u64, !184
        v165 = int_to_ptr v164 to ptr { { u64, u64, u64 } }, !185
        v166 = const u64 0
        v167 = get_elem_ptr v165, ptr { u64, u64, u64 }, v166, !186
        v168 = load v167, !187
        v169 = asm(buffer: v168) -> { u64, u64, u64 } buffer, !188 {
        }
        v170 = get_local ptr { u64, u64, u64 }, __anon_01, !189
        store v169 to v170, !190
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !191
        v173 = load v172, !192
        v174 = int_to_ptr v173 to ptr u8, !193
        v175 = const u64 2
        v176 = get_elem_ptr v170, ptr u64, v175, !194
        v177 = load v176, !195
        v178 = ptr_to_int v174 to u64, !196
        v179 = get_local ptr { u64, u64 }, __anon_11, !197
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr u64, v180, !198
        store v178 to v181, !199
        v182 = const u64 1
        v183 = get_elem_ptr v179, ptr u64, v182, !200
        store v177 to v183, !201
        v184 = asm(s: v179) -> slice s, !202 {
        }
        br encode_14_block2(v184), !203

        encode_14_block2(v185: slice):
        br block1(v185), !122

        block1(v186: slice):
        ret slice v186
    }

    pub fn assert_1(condition !205: bool) -> (), !206 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !207
        br block3(v1), !207

        block3(v2: bool):
        cbr v2, block0(), block1(), !207

        block0():
        v3 = const u64 18446744073709486084, !209
        revert v3, !213

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = (!122 !124)
!136 = span !123 159 222
!137 = (!122 !124 !136)
!138 = (!122 !124)
!139 = (!122 !124 !136)
!140 = (!122 !124)
!141 = (!122 !124)
!142 = span !123 64221 64251
!143 = (!122 !142)
!144 = (!122 !142)
!145 = span !123 55 82
!146 = (!122 !142 !145)
!147 = (!122 !142)
!148 = (!122 !142)
!149 = (!122 !142)
!150 = (!122 !142)
!151 = (!122 !142)
!152 = (!122 !142)
!153 = (!122 !142)
!154 = (!122 !142)
!155 = (!122 !142)
!156 = (!122 !142)
!157 = (!122 !142)
!158 = (!122 !142)
!159 = (!122 !142)
!160 = (!122 !142)
!161 = (!122 !142)
!162 = (!122 !142)
!163 = (!122 !142)
!164 = (!122 !142)
!165 = (!122 !142)
!166 = (!122 !142)
!167 = (!122 !142)
!168 = (!122 !142)
!169 = (!122 !142)
!170 = (!122 !142)
!171 = (!122 !142)
!172 = span !123 3836 3919
!173 = (!122 !142 !172)
!174 = (!122 !142)
!175 = (!122 !142 !172)
!176 = (!122 !142)
!177 = (!122 !142)
!178 = span !123 64208 64252
!179 = (!122 !178)
!180 = (!122 !178)
!181 = span !123 64257 64263
!182 = (!122 !181)
!183 = span !123 64257 64278
!184 = (!122 !183)
!185 = (!122 !183)
!186 = (!122 !183 !145)
!187 = (!122 !183)
!188 = (!122 !183)
!189 = (!122 !183)
!190 = (!122 !183)
!191 = (!122 !183)
!192 = (!122 !183)
!193 = (!122 !183)
!194 = (!122 !183)
!195 = (!122 !183)
!196 = (!122 !183)
!197 = (!122 !183)
!198 = (!122 !183)
!199 = (!122 !183)
!200 = (!122 !183)
!201 = (!122 !183)
!202 = (!122 !183)
!203 = (!122 !183)
!204 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!205 = span !204 935 944
!206 = span !204 921 1019
!207 = span !204 961 971
!208 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!209 = span !208 1038 1059
!210 = span !204 982 1010
!211 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!212 = span !211 691 705
!213 = (!210 !212)

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local string<9> __const = const string<9> "breakfast"
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = const bool false
        v1 = const bool false, !3
        v2 = cmp eq v0 v1, !7
        br main_0_block0(v2), !8

        main_0_block0(v3: bool):
        v4 = call assert_1(v3), !10
        v5 = const bool false
        v6 = cmp eq v5 v1, !12
        br main_0_block1(v6), !13

        main_0_block1(v7: bool):
        v8 = call assert_1(v7), !15
        v9 = const bool false
        v10 = cmp eq v9 v1, !17
        br main_0_block2(v10), !18

        main_0_block2(v11: bool):
        v12 = call assert_1(v11), !20
        v13 = const bool true
        v14 = call assert_1(v13), !22
        v15 = const bool true
        v16 = call assert_1(v15), !24
        v17 = const bool true
        v18 = call assert_1(v17), !26
        v19 = const bool true
        v20 = call assert_1(v19), !28
        v21 = const bool true
        v22 = call assert_1(v21), !30
        v23 = const bool true
        v24 = call assert_1(v23), !32
        v25 = const bool false
        br main_0_block3(v25), !34

        main_0_block3(v26: bool):
        v27 = cmp eq v26 v1, !36
        br main_0_block4(v27), !37

        main_0_block4(v28: bool):
        v29 = call assert_1(v28), !39
        v30 = const bool false
        br main_0_block5(v30), !41

        main_0_block5(v31: bool):
        v32 = cmp eq v31 v1, !43
        br main_0_block6(v32), !44

        main_0_block6(v33: bool):
        v34 = call assert_1(v33), !46
        v35 = const bool false
        br main_0_block7(v35), !48

        main_0_block7(v36: bool):
        v37 = cmp eq v36 v1, !50
        br main_0_block8(v37), !51

        main_0_block8(v38: bool):
        v39 = call assert_1(v38), !53
        br main_0_block9(v35), !55

        main_0_block9(v40: bool):
        v41 = cmp eq v40 v1, !57
        br main_0_block10(v41), !58

        main_0_block10(v42: bool):
        v43 = get_local ptr string<9>, __const
        v44 = load v43
        v45 = call assert_1(v42), !60
        v46 = ptr_to_int v44 to u64, !62
        v47 = get_local ptr { u64, u64 }, __anon_0, !63
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !4
        store v46 to v49, !64
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !4
        v52 = const u64 9
        store v52 to v51, !65
        v53 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v53, v47, 16, !4
        v54 = const bool true
        br main_0_block11(v54), !68

        main_0_block11(v55: bool):
        v56 = call assert_1(v55), !70
        v57 = const bool true
        br main_0_block12(v57), !72

        main_0_block12(v58: bool):
        v59 = call assert_1(v58), !74
        v60 = get_local ptr { u64 }, __anon_2, !76
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61, !4
        v63 = const u64 42, !77
        store v63 to v62, !78
        v64 = const bool true
        br main_0_block13(v64), !80

        main_0_block13(v65: bool):
        v66 = call assert_1(v65), !82
        v67 = get_local ptr { u64 }, __anon_3, !84
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !85
        v70 = const u64 0, !83
        store v70 to v69, !86
        br main_0_block14(v64), !88

        main_0_block14(v71: bool):
        v72 = call assert_1(v71), !90
        v73 = get_local ptr { bool, bool }, __anon_4, !92
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr bool, v74, !93
        v76 = const bool true, !94
        store v76 to v75, !95
        v77 = const u64 1
        v78 = get_elem_ptr v73, ptr bool, v77, !96
        v79 = const bool true, !97
        store v79 to v78, !98
        v80 = const bool true
        br main_0_block15(v80), !100

        main_0_block15(v81: bool):
        v82 = call assert_1(v81), !102
        v83 = get_local ptr [u64; 5], __anon_5, !104
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !4
        v86 = const u64 5, !105
        store v86 to v85, !106
        v87 = const u64 1
        v88 = get_elem_ptr v83, ptr u64, v87, !4
        v89 = const u64 4, !107
        store v89 to v88, !108
        v90 = const u64 2
        v91 = get_elem_ptr v83, ptr u64, v90, !4
        v92 = const u64 3, !109
        store v92 to v91, !110
        v93 = const u64 3
        v94 = get_elem_ptr v83, ptr u64, v93, !4
        v95 = const u64 2, !111
        store v95 to v94, !112
        v96 = const u64 4
        v97 = get_elem_ptr v83, ptr u64, v96, !4
        v98 = const u64 1, !113
        store v98 to v97, !114
        v99 = const bool true
        br main_0_block16(v99), !116

        main_0_block16(v100: bool):
        v101 = call assert_1(v100), !118
        v102 = const bool true, !119
        br block0(v102), !4

        block0(v103: bool):
        v104 = get_local ptr bool, result, !120
        store v103 to v104, !120
        v105 = get_local ptr bool, result, !121
        v106 = load v105
        v107 = const u64 1024
        v108 = asm(cap: v107) -> u64 hp, !125 {
            aloc   cap
        }
        v109 = int_to_ptr v108 to ptr u8, !126
        v110 = ptr_to_int v109 to u64, !127
        v111 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !129
        store v110 to v113, !130
        v114 = const u64 1
        v115 = get_elem_ptr v111, ptr u64, v114, !131
        store v107 to v115, !132
        v116 = const u64 2
        v117 = get_elem_ptr v111, ptr u64, v116, !133
        v118 = const u64 0
        store v118 to v117, !134
        v119 = asm(buffer: v111) -> { u64, u64, u64 } buffer, !135 {
        }
        v120 = get_local ptr { { u64, u64, u64 } }, __anon_10, !137
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr { u64, u64, u64 }, v121, !138
        store v119 to v122, !139
        v123 = load v120, !140
        v124 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        store v123 to v124
        br encode_14_block0(v124), !141

        encode_14_block0(v125: ptr { { u64, u64, u64 } }):
        v126 = load v125
        v127 = ptr_to_int v126 to u64, !143
        v128 = int_to_ptr v127 to ptr { { u64, u64, u64 } }, !144
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr { u64, u64, u64 }, v129, !146
        v131 = load v130, !147
        v132 = asm(buffer: v131) -> { u64, u64, u64 } buffer, !148 {
        }
        v133 = get_local ptr { u64, u64, u64 }, __anon_000, !149
        store v132 to v133, !150
        v134 = const u64 0
        v135 = get_elem_ptr v133, ptr u64, v134, !151
        v136 = load v135, !152
        v137 = int_to_ptr v136 to ptr u8, !153
        v138 = const u64 1
        v139 = get_elem_ptr v133, ptr u64, v138, !154
        v140 = load v139, !155
        v141 = const u64 2
        v142 = get_elem_ptr v133, ptr u64, v141, !156
        v143 = load v142, !157
        v144 = ptr_to_int v137 to u64, !158
        v145 = add v144, v143, !159
        v146 = int_to_ptr v145 to ptr bool, !160
        store v106 to v146, !161
        v147 = const u64 1
        v148 = add v143, v147, !162
        v149 = ptr_to_int v137 to u64, !163
        v150 = get_local ptr { u64, u64, u64 }, __anon_100, !164
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr u64, v151, !165
        store v149 to v152, !166
        v153 = const u64 1
        v154 = get_elem_ptr v150, ptr u64, v153, !167
        store v140 to v154, !168
        v155 = const u64 2
        v156 = get_elem_ptr v150, ptr u64, v155, !169
        store v148 to v156, !170
        v157 = asm(buffer: v150) -> { u64, u64, u64 } buffer, !171 {
        }
        v158 = get_local ptr { { u64, u64, u64 } }, __anon_20, !173
        v159 = const u64 0
        v160 = get_elem_ptr v158, ptr { u64, u64, u64 }, v159, !174
        store v157 to v160, !175
        v161 = load v158, !176
        v162 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v161 to v162
        br encode_14_block1(v162), !177

        encode_14_block1(v163: ptr { { u64, u64, u64 } }):
        v164 = load v163
        v165 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        store v164 to v165, !180
        v166 = get_local ptr { { u64, u64, u64 } }, buffer, !182
        v167 = load v166, !122
        v168 = ptr_to_int v167 to u64, !184
        v169 = int_to_ptr v168 to ptr { { u64, u64, u64 } }, !185
        v170 = const u64 0
        v171 = get_elem_ptr v169, ptr { u64, u64, u64 }, v170, !186
        v172 = load v171, !187
        v173 = asm(buffer: v172) -> { u64, u64, u64 } buffer, !188 {
        }
        v174 = get_local ptr { u64, u64, u64 }, __anon_01, !189
        store v173 to v174, !190
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr u64, v175, !191
        v177 = load v176, !192
        v178 = int_to_ptr v177 to ptr u8, !193
        v179 = const u64 2
        v180 = get_elem_ptr v174, ptr u64, v179, !194
        v181 = load v180, !195
        v182 = ptr_to_int v178 to u64, !196
        v183 = get_local ptr { u64, u64 }, __anon_11, !197
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr u64, v184, !198
        store v182 to v185, !199
        v186 = const u64 1
        v187 = get_elem_ptr v183, ptr u64, v186, !200
        store v181 to v187, !201
        v188 = asm(s: v183) -> slice s, !202 {
        }
        v189 = get_local ptr slice, __tmp_block_arg1
        store v188 to v189
        br encode_14_block2(v189), !203

        encode_14_block2(v190: ptr slice):
        v191 = load v190
        v192 = get_local ptr slice, __tmp_block_arg2
        store v191 to v192
        br block1(v192), !122

        block1(v193: ptr slice):
        v194 = load v193
        ret slice v194
    }

    pub fn assert_1(condition !205: bool) -> (), !206 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !207
        br block3(v1), !207

        block3(v2: bool):
        cbr v2, block0(), block1(), !207

        block0():
        v3 = const u64 18446744073709486084, !209
        revert v3, !213

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = (!122 !124)
!136 = span !123 159 222
!137 = (!122 !124 !136)
!138 = (!122 !124)
!139 = (!122 !124 !136)
!140 = (!122 !124)
!141 = (!122 !124)
!142 = span !123 64221 64251
!143 = (!122 !142)
!144 = (!122 !142)
!145 = span !123 55 82
!146 = (!122 !142 !145)
!147 = (!122 !142)
!148 = (!122 !142)
!149 = (!122 !142)
!150 = (!122 !142)
!151 = (!122 !142)
!152 = (!122 !142)
!153 = (!122 !142)
!154 = (!122 !142)
!155 = (!122 !142)
!156 = (!122 !142)
!157 = (!122 !142)
!158 = (!122 !142)
!159 = (!122 !142)
!160 = (!122 !142)
!161 = (!122 !142)
!162 = (!122 !142)
!163 = (!122 !142)
!164 = (!122 !142)
!165 = (!122 !142)
!166 = (!122 !142)
!167 = (!122 !142)
!168 = (!122 !142)
!169 = (!122 !142)
!170 = (!122 !142)
!171 = (!122 !142)
!172 = span !123 3836 3919
!173 = (!122 !142 !172)
!174 = (!122 !142)
!175 = (!122 !142 !172)
!176 = (!122 !142)
!177 = (!122 !142)
!178 = span !123 64208 64252
!179 = (!122 !178)
!180 = (!122 !178)
!181 = span !123 64257 64263
!182 = (!122 !181)
!183 = span !123 64257 64278
!184 = (!122 !183)
!185 = (!122 !183)
!186 = (!122 !183 !145)
!187 = (!122 !183)
!188 = (!122 !183)
!189 = (!122 !183)
!190 = (!122 !183)
!191 = (!122 !183)
!192 = (!122 !183)
!193 = (!122 !183)
!194 = (!122 !183)
!195 = (!122 !183)
!196 = (!122 !183)
!197 = (!122 !183)
!198 = (!122 !183)
!199 = (!122 !183)
!200 = (!122 !183)
!201 = (!122 !183)
!202 = (!122 !183)
!203 = (!122 !183)
!204 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!205 = span !204 935 944
!206 = span !204 921 1019
!207 = span !204 961 971
!208 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!209 = span !208 1038 1059
!210 = span !204 982 1010
!211 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!212 = span !211 691 705
!213 = (!210 !212)

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local string<9> __const = const string<9> "breakfast"
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const bool false
        v2 = const bool false, !3
        v3 = cmp eq v1 v2, !7
        br main_0_block0(v3), !8

        main_0_block0(v4: bool):
        v5 = call assert_1(v4), !10
        v6 = const bool false
        v7 = cmp eq v6 v2, !12
        br main_0_block1(v7), !13

        main_0_block1(v8: bool):
        v9 = call assert_1(v8), !15
        v10 = const bool false
        v11 = cmp eq v10 v2, !17
        br main_0_block2(v11), !18

        main_0_block2(v12: bool):
        v13 = call assert_1(v12), !20
        v14 = const bool true
        v15 = call assert_1(v14), !22
        v16 = const bool true
        v17 = call assert_1(v16), !24
        v18 = const bool true
        v19 = call assert_1(v18), !26
        v20 = const bool true
        v21 = call assert_1(v20), !28
        v22 = const bool true
        v23 = call assert_1(v22), !30
        v24 = const bool true
        v25 = call assert_1(v24), !32
        v26 = const bool false
        br main_0_block3(v26), !34

        main_0_block3(v27: bool):
        v28 = cmp eq v27 v2, !36
        br main_0_block4(v28), !37

        main_0_block4(v29: bool):
        v30 = call assert_1(v29), !39
        v31 = const bool false
        br main_0_block5(v31), !41

        main_0_block5(v32: bool):
        v33 = cmp eq v32 v2, !43
        br main_0_block6(v33), !44

        main_0_block6(v34: bool):
        v35 = call assert_1(v34), !46
        v36 = const bool false
        br main_0_block7(v36), !48

        main_0_block7(v37: bool):
        v38 = cmp eq v37 v2, !50
        br main_0_block8(v38), !51

        main_0_block8(v39: bool):
        v40 = call assert_1(v39), !53
        br main_0_block9(v36), !55

        main_0_block9(v41: bool):
        v42 = cmp eq v41 v2, !57
        br main_0_block10(v42), !58

        main_0_block10(v43: bool):
        v44 = get_local ptr string<9>, __const
        v45 = load v44
        v46 = call assert_1(v43), !60
        v47 = ptr_to_int v45 to u64, !62
        v48 = get_local ptr { u64, u64 }, __anon_0, !63
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !4
        store v47 to v50, !64
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !4
        v53 = const u64 9
        store v53 to v52, !65
        v54 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v54, v48, 16, !4
        v55 = const bool true
        br main_0_block11(v55), !68

        main_0_block11(v56: bool):
        v57 = call assert_1(v56), !70
        v58 = const bool true
        br main_0_block12(v58), !72

        main_0_block12(v59: bool):
        v60 = call assert_1(v59), !74
        v61 = get_local ptr { u64 }, __anon_2, !76
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr u64, v62, !4
        v64 = const u64 42, !77
        store v64 to v63, !78
        v65 = const bool true
        br main_0_block13(v65), !80

        main_0_block13(v66: bool):
        v67 = call assert_1(v66), !82
        v68 = get_local ptr { u64 }, __anon_3, !84
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !85
        v71 = const u64 0, !83
        store v71 to v70, !86
        br main_0_block14(v65), !88

        main_0_block14(v72: bool):
        v73 = call assert_1(v72), !90
        v74 = get_local ptr { bool, bool }, __anon_4, !92
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr bool, v75, !93
        v77 = const bool true, !94
        store v77 to v76, !95
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr bool, v78, !96
        v80 = const bool true, !97
        store v80 to v79, !98
        v81 = const bool true
        br main_0_block15(v81), !100

        main_0_block15(v82: bool):
        v83 = call assert_1(v82), !102
        v84 = get_local ptr [u64; 5], __anon_5, !104
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !4
        v87 = const u64 5, !105
        store v87 to v86, !106
        v88 = const u64 1
        v89 = get_elem_ptr v84, ptr u64, v88, !4
        v90 = const u64 4, !107
        store v90 to v89, !108
        v91 = const u64 2
        v92 = get_elem_ptr v84, ptr u64, v91, !4
        v93 = const u64 3, !109
        store v93 to v92, !110
        v94 = const u64 3
        v95 = get_elem_ptr v84, ptr u64, v94, !4
        v96 = const u64 2, !111
        store v96 to v95, !112
        v97 = const u64 4
        v98 = get_elem_ptr v84, ptr u64, v97, !4
        v99 = const u64 1, !113
        store v99 to v98, !114
        v100 = const bool true
        br main_0_block16(v100), !116

        main_0_block16(v101: bool):
        v102 = call assert_1(v101), !118
        v103 = const bool true, !119
        br block0(v103), !4

        block0(v104: bool):
        v105 = get_local ptr bool, result, !120
        store v104 to v105, !120
        v106 = get_local ptr bool, result, !121
        v107 = load v106
        v108 = const u64 1024
        v109 = asm(cap: v108) -> u64 hp, !125 {
            aloc   cap
        }
        v110 = int_to_ptr v109 to ptr u8, !126
        v111 = ptr_to_int v110 to u64, !127
        v112 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr u64, v113, !129
        store v111 to v114, !130
        v115 = const u64 1
        v116 = get_elem_ptr v112, ptr u64, v115, !131
        store v108 to v116, !132
        v117 = const u64 2
        v118 = get_elem_ptr v112, ptr u64, v117, !133
        v119 = const u64 0
        store v119 to v118, !134
        v120 = asm(buffer: v112) -> { u64, u64, u64 } buffer, !135 {
        }
        v121 = get_local ptr { { u64, u64, u64 } }, __anon_10, !137
        v122 = const u64 0
        v123 = get_elem_ptr v121, ptr { u64, u64, u64 }, v122, !138
        store v120 to v123, !139
        v124 = load v121, !140
        v125 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        store v124 to v125
        br encode_14_block0(v125), !141

        encode_14_block0(v126: ptr { { u64, u64, u64 } }):
        v127 = load v126
        v128 = ptr_to_int v127 to u64, !143
        v129 = int_to_ptr v128 to ptr { { u64, u64, u64 } }, !144
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr { u64, u64, u64 }, v130, !146
        v132 = load v131, !147
        v133 = asm(buffer: v132) -> { u64, u64, u64 } buffer, !148 {
        }
        v134 = get_local ptr { u64, u64, u64 }, __anon_000, !149
        store v133 to v134, !150
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr u64, v135, !151
        v137 = load v136, !152
        v138 = int_to_ptr v137 to ptr u8, !153
        v139 = const u64 1
        v140 = get_elem_ptr v134, ptr u64, v139, !154
        v141 = load v140, !155
        v142 = const u64 2
        v143 = get_elem_ptr v134, ptr u64, v142, !156
        v144 = load v143, !157
        v145 = ptr_to_int v138 to u64, !158
        v146 = add v145, v144, !159
        v147 = int_to_ptr v146 to ptr bool, !160
        store v107 to v147, !161
        v148 = const u64 1
        v149 = add v144, v148, !162
        v150 = ptr_to_int v138 to u64, !163
        v151 = get_local ptr { u64, u64, u64 }, __anon_100, !164
        v152 = const u64 0
        v153 = get_elem_ptr v151, ptr u64, v152, !165
        store v150 to v153, !166
        v154 = const u64 1
        v155 = get_elem_ptr v151, ptr u64, v154, !167
        store v141 to v155, !168
        v156 = const u64 2
        v157 = get_elem_ptr v151, ptr u64, v156, !169
        store v149 to v157, !170
        v158 = asm(buffer: v151) -> { u64, u64, u64 } buffer, !171 {
        }
        v159 = get_local ptr { { u64, u64, u64 } }, __anon_20, !173
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr { u64, u64, u64 }, v160, !174
        store v158 to v161, !175
        v162 = load v159, !176
        v163 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v162 to v163
        br encode_14_block1(v163), !177

        encode_14_block1(v164: ptr { { u64, u64, u64 } }):
        v165 = load v164
        v166 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        store v165 to v166, !180
        v167 = get_local ptr { { u64, u64, u64 } }, buffer, !182
        v168 = load v167, !122
        v169 = ptr_to_int v168 to u64, !184
        v170 = int_to_ptr v169 to ptr { { u64, u64, u64 } }, !185
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr { u64, u64, u64 }, v171, !186
        v173 = load v172, !187
        v174 = asm(buffer: v173) -> { u64, u64, u64 } buffer, !188 {
        }
        v175 = get_local ptr { u64, u64, u64 }, __anon_01, !189
        store v174 to v175, !190
        v176 = const u64 0
        v177 = get_elem_ptr v175, ptr u64, v176, !191
        v178 = load v177, !192
        v179 = int_to_ptr v178 to ptr u8, !193
        v180 = const u64 2
        v181 = get_elem_ptr v175, ptr u64, v180, !194
        v182 = load v181, !195
        v183 = ptr_to_int v179 to u64, !196
        v184 = get_local ptr { u64, u64 }, __anon_11, !197
        v185 = const u64 0
        v186 = get_elem_ptr v184, ptr u64, v185, !198
        store v183 to v186, !199
        v187 = const u64 1
        v188 = get_elem_ptr v184, ptr u64, v187, !200
        store v182 to v188, !201
        v189 = asm(s: v184) -> slice s, !202 {
        }
        v190 = get_local ptr slice, __tmp_block_arg1
        store v189 to v190
        br encode_14_block2(v190), !203

        encode_14_block2(v191: ptr slice):
        v192 = load v191
        v193 = get_local ptr slice, __tmp_block_arg2
        store v192 to v193
        br block1(v193), !122

        block1(v194: ptr slice):
        v195 = load v194
        store v195 to v0
        ret ptr slice v0
    }

    pub fn assert_1(condition !205: bool) -> (), !206 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !207
        br block3(v1), !207

        block3(v2: bool):
        cbr v2, block0(), block1(), !207

        block0():
        v3 = const u64 18446744073709486084, !209
        revert v3, !213

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = (!122 !124)
!136 = span !123 159 222
!137 = (!122 !124 !136)
!138 = (!122 !124)
!139 = (!122 !124 !136)
!140 = (!122 !124)
!141 = (!122 !124)
!142 = span !123 64221 64251
!143 = (!122 !142)
!144 = (!122 !142)
!145 = span !123 55 82
!146 = (!122 !142 !145)
!147 = (!122 !142)
!148 = (!122 !142)
!149 = (!122 !142)
!150 = (!122 !142)
!151 = (!122 !142)
!152 = (!122 !142)
!153 = (!122 !142)
!154 = (!122 !142)
!155 = (!122 !142)
!156 = (!122 !142)
!157 = (!122 !142)
!158 = (!122 !142)
!159 = (!122 !142)
!160 = (!122 !142)
!161 = (!122 !142)
!162 = (!122 !142)
!163 = (!122 !142)
!164 = (!122 !142)
!165 = (!122 !142)
!166 = (!122 !142)
!167 = (!122 !142)
!168 = (!122 !142)
!169 = (!122 !142)
!170 = (!122 !142)
!171 = (!122 !142)
!172 = span !123 3836 3919
!173 = (!122 !142 !172)
!174 = (!122 !142)
!175 = (!122 !142 !172)
!176 = (!122 !142)
!177 = (!122 !142)
!178 = span !123 64208 64252
!179 = (!122 !178)
!180 = (!122 !178)
!181 = span !123 64257 64263
!182 = (!122 !181)
!183 = span !123 64257 64278
!184 = (!122 !183)
!185 = (!122 !183)
!186 = (!122 !183 !145)
!187 = (!122 !183)
!188 = (!122 !183)
!189 = (!122 !183)
!190 = (!122 !183)
!191 = (!122 !183)
!192 = (!122 !183)
!193 = (!122 !183)
!194 = (!122 !183)
!195 = (!122 !183)
!196 = (!122 !183)
!197 = (!122 !183)
!198 = (!122 !183)
!199 = (!122 !183)
!200 = (!122 !183)
!201 = (!122 !183)
!202 = (!122 !183)
!203 = (!122 !183)
!204 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!205 = span !204 935 944
!206 = span !204 921 1019
!207 = span !204 961 971
!208 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!209 = span !208 1038 1059
!210 = span !204 982 1010
!211 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!212 = span !211 691 705
!213 = (!210 !212)

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<9> __const = const string<9> "breakfast"
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const bool false
        v2 = const bool false, !3
        v3 = cmp eq v1 v2, !7
        br main_0_block0(v3), !8

        main_0_block0(v4: bool):
        v5 = call assert_1(v4), !10
        v6 = const bool false
        v7 = cmp eq v6 v2, !12
        br main_0_block1(v7), !13

        main_0_block1(v8: bool):
        v9 = call assert_1(v8), !15
        v10 = const bool false
        v11 = cmp eq v10 v2, !17
        br main_0_block2(v11), !18

        main_0_block2(v12: bool):
        v13 = call assert_1(v12), !20
        v14 = const bool true
        v15 = call assert_1(v14), !22
        v16 = const bool true
        v17 = call assert_1(v16), !24
        v18 = const bool true
        v19 = call assert_1(v18), !26
        v20 = const bool true
        v21 = call assert_1(v20), !28
        v22 = const bool true
        v23 = call assert_1(v22), !30
        v24 = const bool true
        v25 = call assert_1(v24), !32
        v26 = const bool false
        br main_0_block3(v26), !34

        main_0_block3(v27: bool):
        v28 = cmp eq v27 v2, !36
        br main_0_block4(v28), !37

        main_0_block4(v29: bool):
        v30 = call assert_1(v29), !39
        v31 = const bool false
        br main_0_block5(v31), !41

        main_0_block5(v32: bool):
        v33 = cmp eq v32 v2, !43
        br main_0_block6(v33), !44

        main_0_block6(v34: bool):
        v35 = call assert_1(v34), !46
        v36 = const bool false
        br main_0_block7(v36), !48

        main_0_block7(v37: bool):
        v38 = cmp eq v37 v2, !50
        br main_0_block8(v38), !51

        main_0_block8(v39: bool):
        v40 = call assert_1(v39), !53
        br main_0_block9(v36), !55

        main_0_block9(v41: bool):
        v42 = cmp eq v41 v2, !57
        br main_0_block10(v42), !58

        main_0_block10(v43: bool):
        v44 = get_local ptr string<9>, __const
        v45 = load v44
        v46 = call assert_1(v43), !60
        v47 = ptr_to_int v44 to u64, !62
        v48 = get_local ptr { u64, u64 }, __anon_0, !63
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !4
        store v47 to v50, !64
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !4
        v53 = const u64 9
        store v53 to v52, !65
        v54 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v54, v48, 16, !4
        v55 = const bool true
        br main_0_block11(v55), !68

        main_0_block11(v56: bool):
        v57 = call assert_1(v56), !70
        v58 = const bool true
        br main_0_block12(v58), !72

        main_0_block12(v59: bool):
        v60 = call assert_1(v59), !74
        v61 = get_local ptr { u64 }, __anon_2, !76
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr u64, v62, !4
        v64 = const u64 42, !77
        store v64 to v63, !78
        v65 = const bool true
        br main_0_block13(v65), !80

        main_0_block13(v66: bool):
        v67 = call assert_1(v66), !82
        v68 = get_local ptr { u64 }, __anon_3, !84
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !85
        v71 = const u64 0, !83
        store v71 to v70, !86
        br main_0_block14(v65), !88

        main_0_block14(v72: bool):
        v73 = call assert_1(v72), !90
        v74 = get_local ptr { bool, bool }, __anon_4, !92
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr bool, v75, !93
        v77 = const bool true, !94
        store v77 to v76, !95
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr bool, v78, !96
        v80 = const bool true, !97
        store v80 to v79, !98
        v81 = const bool true
        br main_0_block15(v81), !100

        main_0_block15(v82: bool):
        v83 = call assert_1(v82), !102
        v84 = get_local ptr [u64; 5], __anon_5, !104
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !4
        v87 = const u64 5, !105
        store v87 to v86, !106
        v88 = const u64 1
        v89 = get_elem_ptr v84, ptr u64, v88, !4
        v90 = const u64 4, !107
        store v90 to v89, !108
        v91 = const u64 2
        v92 = get_elem_ptr v84, ptr u64, v91, !4
        v93 = const u64 3, !109
        store v93 to v92, !110
        v94 = const u64 3
        v95 = get_elem_ptr v84, ptr u64, v94, !4
        v96 = const u64 2, !111
        store v96 to v95, !112
        v97 = const u64 4
        v98 = get_elem_ptr v84, ptr u64, v97, !4
        v99 = const u64 1, !113
        store v99 to v98, !114
        v100 = const bool true
        br main_0_block16(v100), !116

        main_0_block16(v101: bool):
        v102 = call assert_1(v101), !118
        v103 = const bool true, !119
        br block0(v103), !4

        block0(v104: bool):
        v105 = get_local ptr bool, result, !120
        store v104 to v105, !120
        v106 = get_local ptr bool, result, !121
        v107 = load v106
        v108 = const u64 1024
        v109 = asm(cap: v108) -> u64 hp, !125 {
            aloc   cap
        }
        v110 = int_to_ptr v109 to ptr u8, !126
        v111 = ptr_to_int v110 to u64, !127
        v112 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr u64, v113, !129
        store v111 to v114, !130
        v115 = const u64 1
        v116 = get_elem_ptr v112, ptr u64, v115, !131
        store v108 to v116, !132
        v117 = const u64 2
        v118 = get_elem_ptr v112, ptr u64, v117, !133
        v119 = const u64 0
        store v119 to v118, !134
        v120 = asm(buffer: v112) -> ptr { u64, u64, u64 } buffer {
        }
        v121 = load v120
        v122 = get_local ptr { { u64, u64, u64 } }, __anon_10, !136
        v123 = const u64 0
        v124 = get_elem_ptr v122, ptr { u64, u64, u64 }, v123, !137
        store v121 to v124, !138
        v125 = load v122, !139
        v126 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        store v125 to v126
        br encode_14_block0(v126), !140

        encode_14_block0(v127: ptr { { u64, u64, u64 } }):
        v128 = load v127
        v129 = ptr_to_int v127 to u64, !142
        v130 = int_to_ptr v129 to ptr { { u64, u64, u64 } }, !143
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !145
        v133 = load v132, !146
        v134 = get_local ptr { u64, u64, u64 }, __asm_arg
        store v133 to v134
        v135 = asm(buffer: v134) -> ptr { u64, u64, u64 } buffer {
        }
        v136 = load v135
        v137 = get_local ptr { u64, u64, u64 }, __anon_000, !147
        store v136 to v137, !148
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !149
        v140 = load v139, !150
        v141 = int_to_ptr v140 to ptr u8, !151
        v142 = const u64 1
        v143 = get_elem_ptr v137, ptr u64, v142, !152
        v144 = load v143, !153
        v145 = const u64 2
        v146 = get_elem_ptr v137, ptr u64, v145, !154
        v147 = load v146, !155
        v148 = ptr_to_int v141 to u64, !156
        v149 = add v148, v147, !157
        v150 = int_to_ptr v149 to ptr bool, !158
        store v107 to v150, !159
        v151 = const u64 1
        v152 = add v147, v151, !160
        v153 = ptr_to_int v141 to u64, !161
        v154 = get_local ptr { u64, u64, u64 }, __anon_100, !162
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr u64, v155, !163
        store v153 to v156, !164
        v157 = const u64 1
        v158 = get_elem_ptr v154, ptr u64, v157, !165
        store v144 to v158, !166
        v159 = const u64 2
        v160 = get_elem_ptr v154, ptr u64, v159, !167
        store v152 to v160, !168
        v161 = asm(buffer: v154) -> ptr { u64, u64, u64 } buffer {
        }
        v162 = load v161
        v163 = get_local ptr { { u64, u64, u64 } }, __anon_20, !170
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr { u64, u64, u64 }, v164, !171
        store v162 to v165, !172
        v166 = load v163, !173
        v167 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v166 to v167
        br encode_14_block1(v167), !174

        encode_14_block1(v168: ptr { { u64, u64, u64 } }):
        v169 = load v168
        v170 = get_local ptr { { u64, u64, u64 } }, buffer, !176
        store v169 to v170, !177
        v171 = get_local ptr { { u64, u64, u64 } }, buffer, !179
        v172 = load v171, !122
        v173 = ptr_to_int v171 to u64, !181
        v174 = int_to_ptr v173 to ptr { { u64, u64, u64 } }, !182
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr { u64, u64, u64 }, v175, !183
        v177 = load v176, !184
        v178 = get_local ptr { u64, u64, u64 }, __asm_arg0
        store v177 to v178
        v179 = asm(buffer: v178) -> ptr { u64, u64, u64 } buffer {
        }
        v180 = load v179
        v181 = get_local ptr { u64, u64, u64 }, __anon_01, !185
        store v180 to v181, !186
        v182 = const u64 0
        v183 = get_elem_ptr v181, ptr u64, v182, !187
        v184 = load v183, !188
        v185 = int_to_ptr v184 to ptr u8, !189
        v186 = const u64 2
        v187 = get_elem_ptr v181, ptr u64, v186, !190
        v188 = load v187, !191
        v189 = ptr_to_int v185 to u64, !192
        v190 = get_local ptr { u64, u64 }, __anon_11, !193
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr u64, v191, !194
        store v189 to v192, !195
        v193 = const u64 1
        v194 = get_elem_ptr v190, ptr u64, v193, !196
        store v188 to v194, !197
        v195 = asm(s: v190) -> ptr slice s {
        }
        v196 = load v195
        v197 = get_local ptr slice, __tmp_block_arg1
        store v196 to v197
        br encode_14_block2(v197), !198

        encode_14_block2(v198: ptr slice):
        v199 = load v198
        v200 = get_local ptr slice, __tmp_block_arg2
        store v199 to v200
        br block1(v200), !122

        block1(v201: ptr slice):
        v202 = load v201
        store v202 to v0
        ret ptr slice v0
    }

    pub fn assert_1(condition !200: bool) -> (), !201 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !202
        br block3(v1), !202

        block3(v2: bool):
        cbr v2, block0(), block1(), !202

        block0():
        v3 = const u64 18446744073709486084, !204
        revert v3, !208

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = span !123 159 222
!136 = (!122 !124 !135)
!137 = (!122 !124)
!138 = (!122 !124 !135)
!139 = (!122 !124)
!140 = (!122 !124)
!141 = span !123 64221 64251
!142 = (!122 !141)
!143 = (!122 !141)
!144 = span !123 55 82
!145 = (!122 !141 !144)
!146 = (!122 !141)
!147 = (!122 !141)
!148 = (!122 !141)
!149 = (!122 !141)
!150 = (!122 !141)
!151 = (!122 !141)
!152 = (!122 !141)
!153 = (!122 !141)
!154 = (!122 !141)
!155 = (!122 !141)
!156 = (!122 !141)
!157 = (!122 !141)
!158 = (!122 !141)
!159 = (!122 !141)
!160 = (!122 !141)
!161 = (!122 !141)
!162 = (!122 !141)
!163 = (!122 !141)
!164 = (!122 !141)
!165 = (!122 !141)
!166 = (!122 !141)
!167 = (!122 !141)
!168 = (!122 !141)
!169 = span !123 3836 3919
!170 = (!122 !141 !169)
!171 = (!122 !141)
!172 = (!122 !141 !169)
!173 = (!122 !141)
!174 = (!122 !141)
!175 = span !123 64208 64252
!176 = (!122 !175)
!177 = (!122 !175)
!178 = span !123 64257 64263
!179 = (!122 !178)
!180 = span !123 64257 64278
!181 = (!122 !180)
!182 = (!122 !180)
!183 = (!122 !180 !144)
!184 = (!122 !180)
!185 = (!122 !180)
!186 = (!122 !180)
!187 = (!122 !180)
!188 = (!122 !180)
!189 = (!122 !180)
!190 = (!122 !180)
!191 = (!122 !180)
!192 = (!122 !180)
!193 = (!122 !180)
!194 = (!122 !180)
!195 = (!122 !180)
!196 = (!122 !180)
!197 = (!122 !180)
!198 = (!122 !180)
!199 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!200 = span !199 935 944
!201 = span !199 921 1019
!202 = span !199 961 971
!203 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!204 = span !203 1038 1059
!205 = span !199 982 1010
!206 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!207 = span !206 691 705
!208 = (!205 !207)

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<9> __const = const string<9> "breakfast"
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const bool false
        v2 = const bool false, !3
        v3 = cmp eq v1 v2, !7
        br main_0_block0(v3), !8

        main_0_block0(v4: bool):
        v5 = call assert_1(v4), !10
        v6 = const bool false
        v7 = cmp eq v6 v2, !12
        br main_0_block1(v7), !13

        main_0_block1(v8: bool):
        v9 = call assert_1(v8), !15
        v10 = const bool false
        v11 = cmp eq v10 v2, !17
        br main_0_block2(v11), !18

        main_0_block2(v12: bool):
        v13 = call assert_1(v12), !20
        v14 = const bool true
        v15 = call assert_1(v14), !22
        v16 = const bool true
        v17 = call assert_1(v16), !24
        v18 = const bool true
        v19 = call assert_1(v18), !26
        v20 = const bool true
        v21 = call assert_1(v20), !28
        v22 = const bool true
        v23 = call assert_1(v22), !30
        v24 = const bool true
        v25 = call assert_1(v24), !32
        v26 = const bool false
        br main_0_block3(v26), !34

        main_0_block3(v27: bool):
        v28 = cmp eq v27 v2, !36
        br main_0_block4(v28), !37

        main_0_block4(v29: bool):
        v30 = call assert_1(v29), !39
        v31 = const bool false
        br main_0_block5(v31), !41

        main_0_block5(v32: bool):
        v33 = cmp eq v32 v2, !43
        br main_0_block6(v33), !44

        main_0_block6(v34: bool):
        v35 = call assert_1(v34), !46
        v36 = const bool false
        br main_0_block7(v36), !48

        main_0_block7(v37: bool):
        v38 = cmp eq v37 v2, !50
        br main_0_block8(v38), !51

        main_0_block8(v39: bool):
        v40 = call assert_1(v39), !53
        br main_0_block9(v36), !55

        main_0_block9(v41: bool):
        v42 = cmp eq v41 v2, !57
        br main_0_block10(v42), !58

        main_0_block10(v43: bool):
        v44 = get_local ptr string<9>, __const
        v45 = load v44
        v46 = call assert_1(v43), !60
        v47 = ptr_to_int v44 to u64, !62
        v48 = get_local ptr { u64, u64 }, __anon_0, !63
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !4
        store v47 to v50, !64
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !4
        v53 = const u64 9
        store v53 to v52, !65
        v54 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v54, v48, 16, !4
        v55 = const bool true
        br main_0_block11(v55), !68

        main_0_block11(v56: bool):
        v57 = call assert_1(v56), !70
        v58 = const bool true
        br main_0_block12(v58), !72

        main_0_block12(v59: bool):
        v60 = call assert_1(v59), !74
        v61 = get_local ptr { u64 }, __anon_2, !76
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr u64, v62, !4
        v64 = const u64 42, !77
        store v64 to v63, !78
        v65 = const bool true
        br main_0_block13(v65), !80

        main_0_block13(v66: bool):
        v67 = call assert_1(v66), !82
        v68 = get_local ptr { u64 }, __anon_3, !84
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !85
        v71 = const u64 0, !83
        store v71 to v70, !86
        br main_0_block14(v65), !88

        main_0_block14(v72: bool):
        v73 = call assert_1(v72), !90
        v74 = get_local ptr { bool, bool }, __anon_4, !92
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr bool, v75, !93
        v77 = const bool true, !94
        store v77 to v76, !95
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr bool, v78, !96
        v80 = const bool true, !97
        store v80 to v79, !98
        v81 = const bool true
        br main_0_block15(v81), !100

        main_0_block15(v82: bool):
        v83 = call assert_1(v82), !102
        v84 = get_local ptr [u64; 5], __anon_5, !104
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !4
        v87 = const u64 5, !105
        store v87 to v86, !106
        v88 = const u64 1
        v89 = get_elem_ptr v84, ptr u64, v88, !4
        v90 = const u64 4, !107
        store v90 to v89, !108
        v91 = const u64 2
        v92 = get_elem_ptr v84, ptr u64, v91, !4
        v93 = const u64 3, !109
        store v93 to v92, !110
        v94 = const u64 3
        v95 = get_elem_ptr v84, ptr u64, v94, !4
        v96 = const u64 2, !111
        store v96 to v95, !112
        v97 = const u64 4
        v98 = get_elem_ptr v84, ptr u64, v97, !4
        v99 = const u64 1, !113
        store v99 to v98, !114
        v100 = const bool true
        br main_0_block16(v100), !116

        main_0_block16(v101: bool):
        v102 = call assert_1(v101), !118
        v103 = const bool true, !119
        br block0(v103), !4

        block0(v104: bool):
        v105 = get_local ptr bool, result, !120
        store v104 to v105, !120
        v106 = get_local ptr bool, result, !121
        v107 = load v106
        v108 = const u64 1024
        v109 = asm(cap: v108) -> u64 hp, !125 {
            aloc   cap
        }
        v110 = int_to_ptr v109 to ptr u8, !126
        v111 = ptr_to_int v110 to u64, !127
        v112 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr u64, v113, !129
        store v111 to v114, !130
        v115 = const u64 1
        v116 = get_elem_ptr v112, ptr u64, v115, !131
        store v108 to v116, !132
        v117 = const u64 2
        v118 = get_elem_ptr v112, ptr u64, v117, !133
        v119 = const u64 0
        store v119 to v118, !134
        v120 = asm(buffer: v112) -> ptr { u64, u64, u64 } buffer {
        }
        v121 = load v120
        v122 = get_local ptr { { u64, u64, u64 } }, __anon_10, !136
        v123 = const u64 0
        v124 = get_elem_ptr v122, ptr { u64, u64, u64 }, v123, !137
        mem_copy_val v124, v120
        v125 = load v122, !138
        v126 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        mem_copy_val v126, v122
        br encode_14_block0(v126), !139

        encode_14_block0(v127: ptr { { u64, u64, u64 } }):
        v128 = load v127
        v129 = ptr_to_int v127 to u64, !141
        v130 = int_to_ptr v129 to ptr { { u64, u64, u64 } }, !142
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !144
        v133 = load v132, !145
        v134 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v134, v132
        v135 = asm(buffer: v134) -> ptr { u64, u64, u64 } buffer {
        }
        v136 = load v135
        v137 = get_local ptr { u64, u64, u64 }, __anon_000, !146
        mem_copy_val v137, v135
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !147
        v140 = load v139, !148
        v141 = int_to_ptr v140 to ptr u8, !149
        v142 = const u64 1
        v143 = get_elem_ptr v137, ptr u64, v142, !150
        v144 = load v143, !151
        v145 = const u64 2
        v146 = get_elem_ptr v137, ptr u64, v145, !152
        v147 = load v146, !153
        v148 = ptr_to_int v141 to u64, !154
        v149 = add v148, v147, !155
        v150 = int_to_ptr v149 to ptr bool, !156
        mem_copy_val v150, v106
        v151 = const u64 1
        v152 = add v147, v151, !157
        v153 = ptr_to_int v141 to u64, !158
        v154 = get_local ptr { u64, u64, u64 }, __anon_100, !159
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr u64, v155, !160
        store v153 to v156, !161
        v157 = const u64 1
        v158 = get_elem_ptr v154, ptr u64, v157, !162
        mem_copy_val v158, v143
        v159 = const u64 2
        v160 = get_elem_ptr v154, ptr u64, v159, !163
        store v152 to v160, !164
        v161 = asm(buffer: v154) -> ptr { u64, u64, u64 } buffer {
        }
        v162 = load v161
        v163 = get_local ptr { { u64, u64, u64 } }, __anon_20, !166
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr { u64, u64, u64 }, v164, !167
        mem_copy_val v165, v161
        v166 = load v163, !168
        v167 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v167, v163
        br encode_14_block1(v167), !169

        encode_14_block1(v168: ptr { { u64, u64, u64 } }):
        v169 = load v168
        v170 = get_local ptr { { u64, u64, u64 } }, buffer, !171
        mem_copy_val v170, v168
        v171 = get_local ptr { { u64, u64, u64 } }, buffer, !173
        v172 = load v171, !122
        v173 = ptr_to_int v171 to u64, !175
        v174 = int_to_ptr v173 to ptr { { u64, u64, u64 } }, !176
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr { u64, u64, u64 }, v175, !177
        v177 = load v176, !178
        v178 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v178, v176
        v179 = asm(buffer: v178) -> ptr { u64, u64, u64 } buffer {
        }
        v180 = load v179
        v181 = get_local ptr { u64, u64, u64 }, __anon_01, !179
        mem_copy_val v181, v179
        v182 = const u64 0
        v183 = get_elem_ptr v181, ptr u64, v182, !180
        v184 = load v183, !181
        v185 = int_to_ptr v184 to ptr u8, !182
        v186 = const u64 2
        v187 = get_elem_ptr v181, ptr u64, v186, !183
        v188 = load v187, !184
        v189 = ptr_to_int v185 to u64, !185
        v190 = get_local ptr { u64, u64 }, __anon_11, !186
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr u64, v191, !187
        store v189 to v192, !188
        v193 = const u64 1
        v194 = get_elem_ptr v190, ptr u64, v193, !189
        mem_copy_val v194, v187
        v195 = asm(s: v190) -> ptr slice s {
        }
        v196 = load v195
        v197 = get_local ptr slice, __tmp_block_arg1
        mem_copy_val v197, v195
        br encode_14_block2(v197), !190

        encode_14_block2(v198: ptr slice):
        v199 = load v198
        v200 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v200, v198
        br block1(v200), !122

        block1(v201: ptr slice):
        v202 = load v201
        mem_copy_val v0, v201
        ret ptr slice v0
    }

    pub fn assert_1(condition !192: bool) -> (), !193 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !194
        br block3(v1), !194

        block3(v2: bool):
        cbr v2, block0(), block1(), !194

        block0():
        v3 = const u64 18446744073709486084, !196
        revert v3, !200

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = span !123 159 222
!136 = (!122 !124 !135)
!137 = (!122 !124)
!138 = (!122 !124)
!139 = (!122 !124)
!140 = span !123 64221 64251
!141 = (!122 !140)
!142 = (!122 !140)
!143 = span !123 55 82
!144 = (!122 !140 !143)
!145 = (!122 !140)
!146 = (!122 !140)
!147 = (!122 !140)
!148 = (!122 !140)
!149 = (!122 !140)
!150 = (!122 !140)
!151 = (!122 !140)
!152 = (!122 !140)
!153 = (!122 !140)
!154 = (!122 !140)
!155 = (!122 !140)
!156 = (!122 !140)
!157 = (!122 !140)
!158 = (!122 !140)
!159 = (!122 !140)
!160 = (!122 !140)
!161 = (!122 !140)
!162 = (!122 !140)
!163 = (!122 !140)
!164 = (!122 !140)
!165 = span !123 3836 3919
!166 = (!122 !140 !165)
!167 = (!122 !140)
!168 = (!122 !140)
!169 = (!122 !140)
!170 = span !123 64208 64252
!171 = (!122 !170)
!172 = span !123 64257 64263
!173 = (!122 !172)
!174 = span !123 64257 64278
!175 = (!122 !174)
!176 = (!122 !174)
!177 = (!122 !174 !143)
!178 = (!122 !174)
!179 = (!122 !174)
!180 = (!122 !174)
!181 = (!122 !174)
!182 = (!122 !174)
!183 = (!122 !174)
!184 = (!122 !174)
!185 = (!122 !174)
!186 = (!122 !174)
!187 = (!122 !174)
!188 = (!122 !174)
!189 = (!122 !174)
!190 = (!122 !174)
!191 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!192 = span !191 935 944
!193 = span !191 921 1019
!194 = span !191 961 971
!195 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!196 = span !195 1038 1059
!197 = span !191 982 1010
!198 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!199 = span !198 691 705
!200 = (!197 !199)

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<9> __const = const string<9> "breakfast"
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const bool false
        v2 = const bool false, !3
        v3 = cmp eq v1 v2, !7
        br main_0_block0(v3), !8

        main_0_block0(v4: bool):
        v5 = call assert_1(v4), !10
        v6 = const bool false
        v7 = cmp eq v6 v2, !12
        br main_0_block1(v7), !13

        main_0_block1(v8: bool):
        v9 = call assert_1(v8), !15
        v10 = const bool false
        v11 = cmp eq v10 v2, !17
        br main_0_block2(v11), !18

        main_0_block2(v12: bool):
        v13 = call assert_1(v12), !20
        v14 = const bool true
        v15 = call assert_1(v14), !22
        v16 = const bool true
        v17 = call assert_1(v16), !24
        v18 = const bool true
        v19 = call assert_1(v18), !26
        v20 = const bool true
        v21 = call assert_1(v20), !28
        v22 = const bool true
        v23 = call assert_1(v22), !30
        v24 = const bool true
        v25 = call assert_1(v24), !32
        v26 = const bool false
        br main_0_block3(v26), !34

        main_0_block3(v27: bool):
        v28 = cmp eq v27 v2, !36
        br main_0_block4(v28), !37

        main_0_block4(v29: bool):
        v30 = call assert_1(v29), !39
        v31 = const bool false
        br main_0_block5(v31), !41

        main_0_block5(v32: bool):
        v33 = cmp eq v32 v2, !43
        br main_0_block6(v33), !44

        main_0_block6(v34: bool):
        v35 = call assert_1(v34), !46
        v36 = const bool false
        br main_0_block7(v36), !48

        main_0_block7(v37: bool):
        v38 = cmp eq v37 v2, !50
        br main_0_block8(v38), !51

        main_0_block8(v39: bool):
        v40 = call assert_1(v39), !53
        br main_0_block9(v36), !55

        main_0_block9(v41: bool):
        v42 = cmp eq v41 v2, !57
        br main_0_block10(v42), !58

        main_0_block10(v43: bool):
        v44 = get_local ptr string<9>, __const
        v45 = call assert_1(v43), !60
        v46 = ptr_to_int v44 to u64, !62
        v47 = get_local ptr { u64, u64 }, __anon_0, !63
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !4
        store v46 to v49, !64
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !4
        v52 = const u64 9
        store v52 to v51, !65
        v53 = get_local ptr slice, __anon_1, !66
        mem_copy_bytes v53, v47, 16, !4
        v54 = const bool true
        br main_0_block11(v54), !68

        main_0_block11(v55: bool):
        v56 = call assert_1(v55), !70
        v57 = const bool true
        br main_0_block12(v57), !72

        main_0_block12(v58: bool):
        v59 = call assert_1(v58), !74
        v60 = get_local ptr { u64 }, __anon_2, !76
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61, !4
        v63 = const u64 42, !77
        store v63 to v62, !78
        v64 = const bool true
        br main_0_block13(v64), !80

        main_0_block13(v65: bool):
        v66 = call assert_1(v65), !82
        v67 = get_local ptr { u64 }, __anon_3, !84
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !85
        v70 = const u64 0, !83
        store v70 to v69, !86
        br main_0_block14(v64), !88

        main_0_block14(v71: bool):
        v72 = call assert_1(v71), !90
        v73 = get_local ptr { bool, bool }, __anon_4, !92
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr bool, v74, !93
        v76 = const bool true, !94
        store v76 to v75, !95
        v77 = const u64 1
        v78 = get_elem_ptr v73, ptr bool, v77, !96
        v79 = const bool true, !97
        store v79 to v78, !98
        v80 = const bool true
        br main_0_block15(v80), !100

        main_0_block15(v81: bool):
        v82 = call assert_1(v81), !102
        v83 = get_local ptr [u64; 5], __anon_5, !104
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !4
        v86 = const u64 5, !105
        store v86 to v85, !106
        v87 = const u64 1
        v88 = get_elem_ptr v83, ptr u64, v87, !4
        v89 = const u64 4, !107
        store v89 to v88, !108
        v90 = const u64 2
        v91 = get_elem_ptr v83, ptr u64, v90, !4
        v92 = const u64 3, !109
        store v92 to v91, !110
        v93 = const u64 3
        v94 = get_elem_ptr v83, ptr u64, v93, !4
        v95 = const u64 2, !111
        store v95 to v94, !112
        v96 = const u64 4
        v97 = get_elem_ptr v83, ptr u64, v96, !4
        v98 = const u64 1, !113
        store v98 to v97, !114
        v99 = const bool true
        br main_0_block16(v99), !116

        main_0_block16(v100: bool):
        v101 = call assert_1(v100), !118
        v102 = const bool true, !119
        br block0(v102), !4

        block0(v103: bool):
        v104 = get_local ptr bool, result, !120
        store v103 to v104, !120
        v105 = get_local ptr bool, result, !121
        v106 = const u64 1024
        v107 = asm(cap: v106) -> u64 hp, !125 {
            aloc   cap
        }
        v108 = int_to_ptr v107 to ptr u8, !126
        v109 = ptr_to_int v108 to u64, !127
        v110 = get_local ptr { u64, u64, u64 }, __anon_00, !128
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr u64, v111, !129
        store v109 to v112, !130
        v113 = const u64 1
        v114 = get_elem_ptr v110, ptr u64, v113, !131
        store v106 to v114, !132
        v115 = const u64 2
        v116 = get_elem_ptr v110, ptr u64, v115, !133
        v117 = const u64 0
        store v117 to v116, !134
        v118 = asm(buffer: v110) -> ptr { u64, u64, u64 } buffer {
        }
        v119 = get_local ptr { { u64, u64, u64 } }, __anon_10, !136
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr { u64, u64, u64 }, v120, !137
        mem_copy_val v121, v118
        v122 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        mem_copy_val v122, v119
        br encode_14_block0(v122), !138

        encode_14_block0(v123: ptr { { u64, u64, u64 } }):
        v124 = ptr_to_int v123 to u64, !140
        v125 = int_to_ptr v124 to ptr { { u64, u64, u64 } }, !141
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr { u64, u64, u64 }, v126, !143
        v128 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v128, v127
        v129 = asm(buffer: v128) -> ptr { u64, u64, u64 } buffer {
        }
        v130 = get_local ptr { u64, u64, u64 }, __anon_000, !144
        mem_copy_val v130, v129
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !145
        v133 = load v132, !146
        v134 = int_to_ptr v133 to ptr u8, !147
        v135 = const u64 1
        v136 = get_elem_ptr v130, ptr u64, v135, !148
        v137 = const u64 2
        v138 = get_elem_ptr v130, ptr u64, v137, !149
        v139 = load v138, !150
        v140 = ptr_to_int v134 to u64, !151
        v141 = add v140, v139, !152
        v142 = int_to_ptr v141 to ptr bool, !153
        mem_copy_val v142, v105
        v143 = const u64 1
        v144 = add v139, v143, !154
        v145 = ptr_to_int v134 to u64, !155
        v146 = get_local ptr { u64, u64, u64 }, __anon_100, !156
        v147 = const u64 0
        v148 = get_elem_ptr v146, ptr u64, v147, !157
        store v145 to v148, !158
        v149 = const u64 1
        v150 = get_elem_ptr v146, ptr u64, v149, !159
        mem_copy_val v150, v136
        v151 = const u64 2
        v152 = get_elem_ptr v146, ptr u64, v151, !160
        store v144 to v152, !161
        v153 = asm(buffer: v146) -> ptr { u64, u64, u64 } buffer {
        }
        v154 = get_local ptr { { u64, u64, u64 } }, __anon_20, !163
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr { u64, u64, u64 }, v155, !164
        mem_copy_val v156, v153
        v157 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v157, v154
        br encode_14_block1(v157), !165

        encode_14_block1(v158: ptr { { u64, u64, u64 } }):
        v159 = get_local ptr { { u64, u64, u64 } }, buffer, !167
        mem_copy_val v159, v158
        v160 = get_local ptr { { u64, u64, u64 } }, buffer, !169
        v161 = ptr_to_int v160 to u64, !171
        v162 = int_to_ptr v161 to ptr { { u64, u64, u64 } }, !172
        v163 = const u64 0
        v164 = get_elem_ptr v162, ptr { u64, u64, u64 }, v163, !173
        v165 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v165, v164
        v166 = asm(buffer: v165) -> ptr { u64, u64, u64 } buffer {
        }
        v167 = get_local ptr { u64, u64, u64 }, __anon_01, !174
        mem_copy_val v167, v166
        v168 = const u64 0
        v169 = get_elem_ptr v167, ptr u64, v168, !175
        v170 = load v169, !176
        v171 = int_to_ptr v170 to ptr u8, !177
        v172 = const u64 2
        v173 = get_elem_ptr v167, ptr u64, v172, !178
        v174 = ptr_to_int v171 to u64, !179
        v175 = get_local ptr { u64, u64 }, __anon_11, !180
        v176 = const u64 0
        v177 = get_elem_ptr v175, ptr u64, v176, !181
        store v174 to v177, !182
        v178 = const u64 1
        v179 = get_elem_ptr v175, ptr u64, v178, !183
        mem_copy_val v179, v173
        v180 = asm(s: v175) -> ptr slice s {
        }
        v181 = get_local ptr slice, __tmp_block_arg1
        mem_copy_val v181, v180
        br encode_14_block2(v181), !184

        encode_14_block2(v182: ptr slice):
        v183 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v183, v182
        br block1(v183), !122

        block1(v184: ptr slice):
        mem_copy_val v0, v184
        ret ptr slice v0
    }

    pub fn assert_1(condition !186: bool) -> (), !187 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !188
        br block3(v1), !188

        block3(v2: bool):
        cbr v2, block0(), block1(), !188

        block0():
        v3 = const u64 18446744073709486084, !190
        revert v3, !194

        block4(v4: ptr never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = (!4 !6)
!9 = span !5 162 198
!10 = (!4 !9)
!11 = span !5 241 271
!12 = (!4 !11)
!13 = (!4 !11)
!14 = span !5 234 272
!15 = (!4 !14)
!16 = span !5 285 314
!17 = (!4 !16)
!18 = (!4 !16)
!19 = span !5 278 315
!20 = (!4 !19)
!21 = span !5 322 361
!22 = (!4 !21)
!23 = span !5 367 404
!24 = (!4 !23)
!25 = span !5 410 444
!26 = (!4 !25)
!27 = span !5 450 484
!28 = (!4 !27)
!29 = span !5 490 535
!30 = (!4 !29)
!31 = span !5 541 582
!32 = (!4 !31)
!33 = span !5 597 617
!34 = (!4 !33)
!35 = span !5 596 617
!36 = (!4 !35)
!37 = (!4 !35)
!38 = span !5 589 618
!39 = (!4 !38)
!40 = span !5 632 655
!41 = (!4 !40)
!42 = span !5 631 655
!43 = (!4 !42)
!44 = (!4 !42)
!45 = span !5 624 656
!46 = (!4 !45)
!47 = span !5 670 692
!48 = (!4 !47)
!49 = span !5 669 692
!50 = (!4 !49)
!51 = (!4 !49)
!52 = span !5 662 693
!53 = (!4 !52)
!54 = span !5 707 726
!55 = (!4 !54)
!56 = span !5 706 726
!57 = (!4 !56)
!58 = (!4 !56)
!59 = span !5 699 727
!60 = (!4 !59)
!61 = span !5 758 769
!62 = (!4 !61)
!63 = (!4 !61)
!64 = (!4 !61)
!65 = (!4 !61)
!66 = (!4 !61)
!67 = span !5 741 770
!68 = (!4 !67)
!69 = span !5 734 771
!70 = (!4 !69)
!71 = span !5 784 868
!72 = (!4 !71)
!73 = span !5 777 869
!74 = (!4 !73)
!75 = span !5 899 910
!76 = (!4 !75)
!77 = span !5 906 908
!78 = (!4 !75)
!79 = span !5 882 911
!80 = (!4 !79)
!81 = span !5 875 912
!82 = (!4 !81)
!83 = span !5 35 62
!84 = (!4 !83)
!85 = (!4 !83)
!86 = (!4 !83)
!87 = span !5 925 953
!88 = (!4 !87)
!89 = span !5 918 954
!90 = (!4 !89)
!91 = span !5 984 996
!92 = (!4 !91)
!93 = (!4 !91)
!94 = span !5 985 989
!95 = (!4 !91)
!96 = (!4 !91)
!97 = span !5 991 995
!98 = (!4 !91)
!99 = span !5 967 997
!100 = (!4 !99)
!101 = span !5 960 998
!102 = (!4 !101)
!103 = span !5 1028 1043
!104 = (!4 !103)
!105 = span !5 1029 1030
!106 = (!4 !103)
!107 = span !5 1032 1033
!108 = (!4 !103)
!109 = span !5 1035 1036
!110 = (!4 !103)
!111 = span !5 1038 1039
!112 = (!4 !103)
!113 = span !5 1041 1042
!114 = (!4 !103)
!115 = span !5 1011 1044
!116 = (!4 !115)
!117 = span !5 1004 1045
!118 = (!4 !117)
!119 = span !5 1052 1056
!120 = span !0 48 74
!121 = span !0 107 113
!122 = span !0 92 114
!123 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!124 = span !123 64237 64250
!125 = (!122 !124)
!126 = (!122 !124)
!127 = (!122 !124)
!128 = (!122 !124)
!129 = (!122 !124)
!130 = (!122 !124)
!131 = (!122 !124)
!132 = (!122 !124)
!133 = (!122 !124)
!134 = (!122 !124)
!135 = span !123 159 222
!136 = (!122 !124 !135)
!137 = (!122 !124)
!138 = (!122 !124)
!139 = span !123 64221 64251
!140 = (!122 !139)
!141 = (!122 !139)
!142 = span !123 55 82
!143 = (!122 !139 !142)
!144 = (!122 !139)
!145 = (!122 !139)
!146 = (!122 !139)
!147 = (!122 !139)
!148 = (!122 !139)
!149 = (!122 !139)
!150 = (!122 !139)
!151 = (!122 !139)
!152 = (!122 !139)
!153 = (!122 !139)
!154 = (!122 !139)
!155 = (!122 !139)
!156 = (!122 !139)
!157 = (!122 !139)
!158 = (!122 !139)
!159 = (!122 !139)
!160 = (!122 !139)
!161 = (!122 !139)
!162 = span !123 3836 3919
!163 = (!122 !139 !162)
!164 = (!122 !139)
!165 = (!122 !139)
!166 = span !123 64208 64252
!167 = (!122 !166)
!168 = span !123 64257 64263
!169 = (!122 !168)
!170 = span !123 64257 64278
!171 = (!122 !170)
!172 = (!122 !170)
!173 = (!122 !170 !142)
!174 = (!122 !170)
!175 = (!122 !170)
!176 = (!122 !170)
!177 = (!122 !170)
!178 = (!122 !170)
!179 = (!122 !170)
!180 = (!122 !170)
!181 = (!122 !170)
!182 = (!122 !170)
!183 = (!122 !170)
!184 = (!122 !170)
!185 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!186 = span !185 935 944
!187 = span !185 921 1019
!188 = span !185 961 971
!189 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!190 = span !189 1038 1059
!191 = span !185 982 1010
!192 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!193 = span !192 691 705
!194 = (!191 !193)

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<9> __const = const string<9> "breakfast"
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const bool false
        v2 = const bool false, !3
        v3 = cmp eq v1 v2, !7
        v4 = call assert_1(v3), !9
        v5 = const bool false
        v6 = cmp eq v5 v2, !11
        v7 = call assert_1(v6), !13
        v8 = const bool false
        v9 = cmp eq v8 v2, !15
        v10 = call assert_1(v9), !17
        v11 = const bool true
        v12 = call assert_1(v11), !19
        v13 = const bool true
        v14 = call assert_1(v13), !21
        v15 = const bool true
        v16 = call assert_1(v15), !23
        v17 = const bool true
        v18 = call assert_1(v17), !25
        v19 = const bool true
        v20 = call assert_1(v19), !27
        v21 = const bool true
        v22 = call assert_1(v21), !29
        v23 = const bool false
        v24 = cmp eq v23 v2, !31
        v25 = call assert_1(v24), !33
        v26 = const bool false
        v27 = cmp eq v26 v2, !35
        v28 = call assert_1(v27), !37
        v29 = const bool false
        v30 = cmp eq v29 v2, !39
        v31 = call assert_1(v30), !41
        v32 = cmp eq v29 v2, !43
        v33 = get_local ptr string<9>, __const
        v34 = call assert_1(v32), !45
        v35 = ptr_to_int v33 to u64, !47
        v36 = get_local ptr { u64, u64 }, __anon_0, !48
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !4
        store v35 to v38, !49
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr u64, v39, !4
        v41 = const u64 9
        store v41 to v40, !50
        v42 = get_local ptr slice, __anon_1, !51
        mem_copy_bytes v42, v36, 16, !4
        v43 = const bool true
        v44 = call assert_1(v43), !53
        v45 = const bool true
        v46 = call assert_1(v45), !55
        v47 = get_local ptr { u64 }, __anon_2, !57
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !4
        v50 = const u64 42, !58
        store v50 to v49, !59
        v51 = const bool true
        v52 = call assert_1(v51), !61
        v53 = get_local ptr { u64 }, __anon_3, !63
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54, !64
        v56 = const u64 0, !62
        store v56 to v55, !65
        v57 = call assert_1(v51), !67
        v58 = get_local ptr { bool, bool }, __anon_4, !69
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr bool, v59, !70
        v61 = const bool true, !71
        store v61 to v60, !72
        v62 = const u64 1
        v63 = get_elem_ptr v58, ptr bool, v62, !73
        v64 = const bool true, !74
        store v64 to v63, !75
        v65 = const bool true
        v66 = call assert_1(v65), !77
        v67 = get_local ptr [u64; 5], __anon_5, !79
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !4
        v70 = const u64 5, !80
        store v70 to v69, !81
        v71 = const u64 1
        v72 = get_elem_ptr v67, ptr u64, v71, !4
        v73 = const u64 4, !82
        store v73 to v72, !83
        v74 = const u64 2
        v75 = get_elem_ptr v67, ptr u64, v74, !4
        v76 = const u64 3, !84
        store v76 to v75, !85
        v77 = const u64 3
        v78 = get_elem_ptr v67, ptr u64, v77, !4
        v79 = const u64 2, !86
        store v79 to v78, !87
        v80 = const u64 4
        v81 = get_elem_ptr v67, ptr u64, v80, !4
        v82 = const u64 1, !88
        store v82 to v81, !89
        v83 = const bool true
        v84 = call assert_1(v83), !91
        v85 = get_local ptr bool, result, !92
        v86 = const bool true, !93
        store v86 to v85, !92
        v87 = get_local ptr bool, result, !94
        v88 = const u64 1024
        v89 = asm(cap: v88) -> u64 hp, !98 {
            aloc   cap
        }
        v90 = int_to_ptr v89 to ptr u8, !99
        v91 = ptr_to_int v90 to u64, !100
        v92 = get_local ptr { u64, u64, u64 }, __anon_00, !101
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !102
        store v91 to v94, !103
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr u64, v95, !104
        store v88 to v96, !105
        v97 = const u64 2
        v98 = get_elem_ptr v92, ptr u64, v97, !106
        v99 = const u64 0
        store v99 to v98, !107
        v100 = asm(buffer: v92) -> ptr { u64, u64, u64 } buffer {
        }
        v101 = get_local ptr { { u64, u64, u64 } }, __anon_10, !109
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr { u64, u64, u64 }, v102, !110
        mem_copy_val v103, v100
        v104 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        mem_copy_val v104, v101
        v105 = ptr_to_int v104 to u64, !112
        v106 = int_to_ptr v105 to ptr { { u64, u64, u64 } }, !113
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { u64, u64, u64 }, v107, !115
        v109 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v109, v108
        v110 = asm(buffer: v109) -> ptr { u64, u64, u64 } buffer {
        }
        v111 = get_local ptr { u64, u64, u64 }, __anon_000, !116
        mem_copy_val v111, v110
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !117
        v114 = load v113, !118
        v115 = int_to_ptr v114 to ptr u8, !119
        v116 = const u64 1
        v117 = get_elem_ptr v111, ptr u64, v116, !120
        v118 = const u64 2
        v119 = get_elem_ptr v111, ptr u64, v118, !121
        v120 = load v119, !122
        v121 = ptr_to_int v115 to u64, !123
        v122 = add v121, v120, !124
        v123 = int_to_ptr v122 to ptr bool, !125
        mem_copy_val v123, v87
        v124 = const u64 1
        v125 = add v120, v124, !126
        v126 = ptr_to_int v115 to u64, !127
        v127 = get_local ptr { u64, u64, u64 }, __anon_100, !128
        v128 = const u64 0
        v129 = get_elem_ptr v127, ptr u64, v128, !129
        store v126 to v129, !130
        v130 = const u64 1
        v131 = get_elem_ptr v127, ptr u64, v130, !131
        mem_copy_val v131, v117
        v132 = const u64 2
        v133 = get_elem_ptr v127, ptr u64, v132, !132
        store v125 to v133, !133
        v134 = asm(buffer: v127) -> ptr { u64, u64, u64 } buffer {
        }
        v135 = get_local ptr { { u64, u64, u64 } }, __anon_20, !135
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr { u64, u64, u64 }, v136, !136
        mem_copy_val v137, v134
        v138 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v138, v135
        v139 = get_local ptr { { u64, u64, u64 } }, buffer, !138
        mem_copy_val v139, v138
        v140 = get_local ptr { { u64, u64, u64 } }, buffer, !140
        v141 = ptr_to_int v140 to u64, !142
        v142 = int_to_ptr v141 to ptr { { u64, u64, u64 } }, !143
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr { u64, u64, u64 }, v143, !144
        v145 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v145, v144
        v146 = asm(buffer: v145) -> ptr { u64, u64, u64 } buffer {
        }
        v147 = get_local ptr { u64, u64, u64 }, __anon_01, !145
        mem_copy_val v147, v146
        v148 = const u64 0
        v149 = get_elem_ptr v147, ptr u64, v148, !146
        v150 = load v149, !147
        v151 = int_to_ptr v150 to ptr u8, !148
        v152 = const u64 2
        v153 = get_elem_ptr v147, ptr u64, v152, !149
        v154 = ptr_to_int v151 to u64, !150
        v155 = get_local ptr { u64, u64 }, __anon_11, !151
        v156 = const u64 0
        v157 = get_elem_ptr v155, ptr u64, v156, !152
        store v154 to v157, !153
        v158 = const u64 1
        v159 = get_elem_ptr v155, ptr u64, v158, !154
        mem_copy_val v159, v153
        v160 = asm(s: v155) -> ptr slice s {
        }
        v161 = get_local ptr slice, __tmp_block_arg1
        mem_copy_val v161, v160
        v162 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v162, v161
        mem_copy_val v0, v162
        ret ptr slice v0
    }

    pub fn assert_1(condition !156: bool) -> (), !157 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !158
        cbr v1, block0(), block1(), !158

        block0():
        v2 = const u64 18446744073709486084, !160
        revert v2, !164

        block1():
        v3 = const unit ()
        ret () v3
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = span !5 162 198
!9 = (!4 !8)
!10 = span !5 241 271
!11 = (!4 !10)
!12 = span !5 234 272
!13 = (!4 !12)
!14 = span !5 285 314
!15 = (!4 !14)
!16 = span !5 278 315
!17 = (!4 !16)
!18 = span !5 322 361
!19 = (!4 !18)
!20 = span !5 367 404
!21 = (!4 !20)
!22 = span !5 410 444
!23 = (!4 !22)
!24 = span !5 450 484
!25 = (!4 !24)
!26 = span !5 490 535
!27 = (!4 !26)
!28 = span !5 541 582
!29 = (!4 !28)
!30 = span !5 596 617
!31 = (!4 !30)
!32 = span !5 589 618
!33 = (!4 !32)
!34 = span !5 631 655
!35 = (!4 !34)
!36 = span !5 624 656
!37 = (!4 !36)
!38 = span !5 669 692
!39 = (!4 !38)
!40 = span !5 662 693
!41 = (!4 !40)
!42 = span !5 706 726
!43 = (!4 !42)
!44 = span !5 699 727
!45 = (!4 !44)
!46 = span !5 758 769
!47 = (!4 !46)
!48 = (!4 !46)
!49 = (!4 !46)
!50 = (!4 !46)
!51 = (!4 !46)
!52 = span !5 734 771
!53 = (!4 !52)
!54 = span !5 777 869
!55 = (!4 !54)
!56 = span !5 899 910
!57 = (!4 !56)
!58 = span !5 906 908
!59 = (!4 !56)
!60 = span !5 875 912
!61 = (!4 !60)
!62 = span !5 35 62
!63 = (!4 !62)
!64 = (!4 !62)
!65 = (!4 !62)
!66 = span !5 918 954
!67 = (!4 !66)
!68 = span !5 984 996
!69 = (!4 !68)
!70 = (!4 !68)
!71 = span !5 985 989
!72 = (!4 !68)
!73 = (!4 !68)
!74 = span !5 991 995
!75 = (!4 !68)
!76 = span !5 960 998
!77 = (!4 !76)
!78 = span !5 1028 1043
!79 = (!4 !78)
!80 = span !5 1029 1030
!81 = (!4 !78)
!82 = span !5 1032 1033
!83 = (!4 !78)
!84 = span !5 1035 1036
!85 = (!4 !78)
!86 = span !5 1038 1039
!87 = (!4 !78)
!88 = span !5 1041 1042
!89 = (!4 !78)
!90 = span !5 1004 1045
!91 = (!4 !90)
!92 = span !0 48 74
!93 = span !5 1052 1056
!94 = span !0 107 113
!95 = span !0 92 114
!96 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!97 = span !96 64237 64250
!98 = (!95 !97)
!99 = (!95 !97)
!100 = (!95 !97)
!101 = (!95 !97)
!102 = (!95 !97)
!103 = (!95 !97)
!104 = (!95 !97)
!105 = (!95 !97)
!106 = (!95 !97)
!107 = (!95 !97)
!108 = span !96 159 222
!109 = (!95 !97 !108)
!110 = (!95 !97)
!111 = span !96 64221 64251
!112 = (!95 !111)
!113 = (!95 !111)
!114 = span !96 55 82
!115 = (!95 !111 !114)
!116 = (!95 !111)
!117 = (!95 !111)
!118 = (!95 !111)
!119 = (!95 !111)
!120 = (!95 !111)
!121 = (!95 !111)
!122 = (!95 !111)
!123 = (!95 !111)
!124 = (!95 !111)
!125 = (!95 !111)
!126 = (!95 !111)
!127 = (!95 !111)
!128 = (!95 !111)
!129 = (!95 !111)
!130 = (!95 !111)
!131 = (!95 !111)
!132 = (!95 !111)
!133 = (!95 !111)
!134 = span !96 3836 3919
!135 = (!95 !111 !134)
!136 = (!95 !111)
!137 = span !96 64208 64252
!138 = (!95 !137)
!139 = span !96 64257 64263
!140 = (!95 !139)
!141 = span !96 64257 64278
!142 = (!95 !141)
!143 = (!95 !141)
!144 = (!95 !141 !114)
!145 = (!95 !141)
!146 = (!95 !141)
!147 = (!95 !141)
!148 = (!95 !141)
!149 = (!95 !141)
!150 = (!95 !141)
!151 = (!95 !141)
!152 = (!95 !141)
!153 = (!95 !141)
!154 = (!95 !141)
!155 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!156 = span !155 935 944
!157 = span !155 921 1019
!158 = span !155 961 971
!159 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!160 = span !159 1038 1059
!161 = span !155 982 1010
!162 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!163 = span !162 691 705
!164 = (!161 !163)

// IR: Final
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local slice __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { u64 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64 } __anon_3
        local { bool, bool } __anon_4
        local [u64; 5] __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<9> __const = const string<9> "breakfast"
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = const bool false
        v2 = const bool false, !3
        v3 = cmp eq v1 v2, !7
        v4 = call assert_1(v3), !9
        v5 = const bool false
        v6 = cmp eq v5 v2, !11
        v7 = call assert_1(v6), !13
        v8 = const bool false
        v9 = cmp eq v8 v2, !15
        v10 = call assert_1(v9), !17
        v11 = const bool true
        v12 = call assert_1(v11), !19
        v13 = const bool true
        v14 = call assert_1(v13), !21
        v15 = const bool true
        v16 = call assert_1(v15), !23
        v17 = const bool true
        v18 = call assert_1(v17), !25
        v19 = const bool true
        v20 = call assert_1(v19), !27
        v21 = const bool true
        v22 = call assert_1(v21), !29
        v23 = const bool false
        v24 = cmp eq v23 v2, !31
        v25 = call assert_1(v24), !33
        v26 = const bool false
        v27 = cmp eq v26 v2, !35
        v28 = call assert_1(v27), !37
        v29 = const bool false
        v30 = cmp eq v29 v2, !39
        v31 = call assert_1(v30), !41
        v32 = cmp eq v29 v2, !43
        v33 = get_local ptr string<9>, __const
        v34 = call assert_1(v32), !45
        v35 = ptr_to_int v33 to u64, !47
        v36 = get_local ptr { u64, u64 }, __anon_0, !48
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !4
        store v35 to v38, !49
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr u64, v39, !4
        v41 = const u64 9
        store v41 to v40, !50
        v42 = get_local ptr slice, __anon_1, !51
        mem_copy_bytes v42, v36, 16, !4
        v43 = const bool true
        v44 = call assert_1(v43), !53
        v45 = const bool true
        v46 = call assert_1(v45), !55
        v47 = get_local ptr { u64 }, __anon_2, !57
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !4
        v50 = const u64 42, !58
        store v50 to v49, !59
        v51 = const bool true
        v52 = call assert_1(v51), !61
        v53 = get_local ptr { u64 }, __anon_3, !63
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54, !64
        v56 = const u64 0, !62
        store v56 to v55, !65
        v57 = call assert_1(v51), !67
        v58 = get_local ptr { bool, bool }, __anon_4, !69
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr bool, v59, !70
        v61 = const bool true, !71
        store v61 to v60, !72
        v62 = const u64 1
        v63 = get_elem_ptr v58, ptr bool, v62, !73
        v64 = const bool true, !74
        store v64 to v63, !75
        v65 = const bool true
        v66 = call assert_1(v65), !77
        v67 = get_local ptr [u64; 5], __anon_5, !79
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !4
        v70 = const u64 5, !80
        store v70 to v69, !81
        v71 = const u64 1
        v72 = get_elem_ptr v67, ptr u64, v71, !4
        v73 = const u64 4, !82
        store v73 to v72, !83
        v74 = const u64 2
        v75 = get_elem_ptr v67, ptr u64, v74, !4
        v76 = const u64 3, !84
        store v76 to v75, !85
        v77 = const u64 3
        v78 = get_elem_ptr v67, ptr u64, v77, !4
        v79 = const u64 2, !86
        store v79 to v78, !87
        v80 = const u64 4
        v81 = get_elem_ptr v67, ptr u64, v80, !4
        v82 = const u64 1, !88
        store v82 to v81, !89
        v83 = const bool true
        v84 = call assert_1(v83), !91
        v85 = get_local ptr bool, result, !92
        v86 = const bool true, !93
        store v86 to v85, !92
        v87 = get_local ptr bool, result, !94
        v88 = const u64 1024
        v89 = asm(cap: v88) -> u64 hp, !98 {
            aloc   cap
        }
        v90 = int_to_ptr v89 to ptr u8, !99
        v91 = ptr_to_int v90 to u64, !100
        v92 = get_local ptr { u64, u64, u64 }, __anon_00, !101
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !102
        store v91 to v94, !103
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr u64, v95, !104
        store v88 to v96, !105
        v97 = const u64 2
        v98 = get_elem_ptr v92, ptr u64, v97, !106
        v99 = const u64 0
        store v99 to v98, !107
        v100 = asm(buffer: v92) -> ptr { u64, u64, u64 } buffer {
        }
        v101 = get_local ptr { { u64, u64, u64 } }, __anon_10, !109
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr { u64, u64, u64 }, v102, !110
        mem_copy_val v103, v100
        v104 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        mem_copy_val v104, v101
        v105 = ptr_to_int v104 to u64, !112
        v106 = int_to_ptr v105 to ptr { { u64, u64, u64 } }, !113
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { u64, u64, u64 }, v107, !115
        v109 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v109, v108
        v110 = asm(buffer: v109) -> ptr { u64, u64, u64 } buffer {
        }
        v111 = get_local ptr { u64, u64, u64 }, __anon_000, !116
        mem_copy_val v111, v110
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !117
        v114 = load v113, !118
        v115 = int_to_ptr v114 to ptr u8, !119
        v116 = const u64 1
        v117 = get_elem_ptr v111, ptr u64, v116, !120
        v118 = const u64 2
        v119 = get_elem_ptr v111, ptr u64, v118, !121
        v120 = load v119, !122
        v121 = ptr_to_int v115 to u64, !123
        v122 = add v121, v120, !124
        v123 = int_to_ptr v122 to ptr bool, !125
        mem_copy_val v123, v87
        v124 = const u64 1
        v125 = add v120, v124, !126
        v126 = ptr_to_int v115 to u64, !127
        v127 = get_local ptr { u64, u64, u64 }, __anon_100, !128
        v128 = const u64 0
        v129 = get_elem_ptr v127, ptr u64, v128, !129
        store v126 to v129, !130
        v130 = const u64 1
        v131 = get_elem_ptr v127, ptr u64, v130, !131
        mem_copy_val v131, v117
        v132 = const u64 2
        v133 = get_elem_ptr v127, ptr u64, v132, !132
        store v125 to v133, !133
        v134 = asm(buffer: v127) -> ptr { u64, u64, u64 } buffer {
        }
        v135 = get_local ptr { { u64, u64, u64 } }, __anon_20, !135
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr { u64, u64, u64 }, v136, !136
        mem_copy_val v137, v134
        v138 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v138, v135
        v139 = get_local ptr { { u64, u64, u64 } }, buffer, !138
        mem_copy_val v139, v138
        v140 = get_local ptr { { u64, u64, u64 } }, buffer, !140
        v141 = ptr_to_int v140 to u64, !142
        v142 = int_to_ptr v141 to ptr { { u64, u64, u64 } }, !143
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr { u64, u64, u64 }, v143, !144
        v145 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v145, v144
        v146 = asm(buffer: v145) -> ptr { u64, u64, u64 } buffer {
        }
        v147 = get_local ptr { u64, u64, u64 }, __anon_01, !145
        mem_copy_val v147, v146
        v148 = const u64 0
        v149 = get_elem_ptr v147, ptr u64, v148, !146
        v150 = load v149, !147
        v151 = int_to_ptr v150 to ptr u8, !148
        v152 = const u64 2
        v153 = get_elem_ptr v147, ptr u64, v152, !149
        v154 = ptr_to_int v151 to u64, !150
        v155 = get_local ptr { u64, u64 }, __anon_11, !151
        v156 = const u64 0
        v157 = get_elem_ptr v155, ptr u64, v156, !152
        store v154 to v157, !153
        v158 = const u64 1
        v159 = get_elem_ptr v155, ptr u64, v158, !154
        mem_copy_val v159, v153
        v160 = asm(s: v155) -> ptr slice s {
        }
        v161 = get_local ptr slice, __tmp_block_arg1
        mem_copy_val v161, v160
        v162 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v162, v161
        mem_copy_val v0, v162
        ret ptr slice v0
    }

    pub fn assert_1(condition !156: bool) -> (), !157 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !158
        cbr v1, block0(), block1(), !158

        block0():
        v2 = const u64 18446744073709486084, !160
        revert v2, !164

        block1():
        v3 = const unit ()
        ret () v3
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/is_reference_type/src/main.sw"
!6 = span !5 169 197
!7 = (!4 !6)
!8 = span !5 162 198
!9 = (!4 !8)
!10 = span !5 241 271
!11 = (!4 !10)
!12 = span !5 234 272
!13 = (!4 !12)
!14 = span !5 285 314
!15 = (!4 !14)
!16 = span !5 278 315
!17 = (!4 !16)
!18 = span !5 322 361
!19 = (!4 !18)
!20 = span !5 367 404
!21 = (!4 !20)
!22 = span !5 410 444
!23 = (!4 !22)
!24 = span !5 450 484
!25 = (!4 !24)
!26 = span !5 490 535
!27 = (!4 !26)
!28 = span !5 541 582
!29 = (!4 !28)
!30 = span !5 596 617
!31 = (!4 !30)
!32 = span !5 589 618
!33 = (!4 !32)
!34 = span !5 631 655
!35 = (!4 !34)
!36 = span !5 624 656
!37 = (!4 !36)
!38 = span !5 669 692
!39 = (!4 !38)
!40 = span !5 662 693
!41 = (!4 !40)
!42 = span !5 706 726
!43 = (!4 !42)
!44 = span !5 699 727
!45 = (!4 !44)
!46 = span !5 758 769
!47 = (!4 !46)
!48 = (!4 !46)
!49 = (!4 !46)
!50 = (!4 !46)
!51 = (!4 !46)
!52 = span !5 734 771
!53 = (!4 !52)
!54 = span !5 777 869
!55 = (!4 !54)
!56 = span !5 899 910
!57 = (!4 !56)
!58 = span !5 906 908
!59 = (!4 !56)
!60 = span !5 875 912
!61 = (!4 !60)
!62 = span !5 35 62
!63 = (!4 !62)
!64 = (!4 !62)
!65 = (!4 !62)
!66 = span !5 918 954
!67 = (!4 !66)
!68 = span !5 984 996
!69 = (!4 !68)
!70 = (!4 !68)
!71 = span !5 985 989
!72 = (!4 !68)
!73 = (!4 !68)
!74 = span !5 991 995
!75 = (!4 !68)
!76 = span !5 960 998
!77 = (!4 !76)
!78 = span !5 1028 1043
!79 = (!4 !78)
!80 = span !5 1029 1030
!81 = (!4 !78)
!82 = span !5 1032 1033
!83 = (!4 !78)
!84 = span !5 1035 1036
!85 = (!4 !78)
!86 = span !5 1038 1039
!87 = (!4 !78)
!88 = span !5 1041 1042
!89 = (!4 !78)
!90 = span !5 1004 1045
!91 = (!4 !90)
!92 = span !0 48 74
!93 = span !5 1052 1056
!94 = span !0 107 113
!95 = span !0 92 114
!96 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!97 = span !96 64237 64250
!98 = (!95 !97)
!99 = (!95 !97)
!100 = (!95 !97)
!101 = (!95 !97)
!102 = (!95 !97)
!103 = (!95 !97)
!104 = (!95 !97)
!105 = (!95 !97)
!106 = (!95 !97)
!107 = (!95 !97)
!108 = span !96 159 222
!109 = (!95 !97 !108)
!110 = (!95 !97)
!111 = span !96 64221 64251
!112 = (!95 !111)
!113 = (!95 !111)
!114 = span !96 55 82
!115 = (!95 !111 !114)
!116 = (!95 !111)
!117 = (!95 !111)
!118 = (!95 !111)
!119 = (!95 !111)
!120 = (!95 !111)
!121 = (!95 !111)
!122 = (!95 !111)
!123 = (!95 !111)
!124 = (!95 !111)
!125 = (!95 !111)
!126 = (!95 !111)
!127 = (!95 !111)
!128 = (!95 !111)
!129 = (!95 !111)
!130 = (!95 !111)
!131 = (!95 !111)
!132 = (!95 !111)
!133 = (!95 !111)
!134 = span !96 3836 3919
!135 = (!95 !111 !134)
!136 = (!95 !111)
!137 = span !96 64208 64252
!138 = (!95 !137)
!139 = span !96 64257 64263
!140 = (!95 !139)
!141 = span !96 64257 64278
!142 = (!95 !141)
!143 = (!95 !141)
!144 = (!95 !141 !114)
!145 = (!95 !141)
!146 = (!95 !141)
!147 = (!95 !141)
!148 = (!95 !141)
!149 = (!95 !141)
!150 = (!95 !141)
!151 = (!95 !141)
!152 = (!95 !141)
!153 = (!95 !141)
!154 = (!95 !141)
!155 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!156 = span !155 935 944
!157 = span !155 921 1019
!158 = span !155 961 971
!159 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/error_signals.sw"
!160 = span !159 1038 1059
!161 = span !155 982 1010
!162 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!163 = span !162 691 705
!164 = (!161 !163)

  [1;32mFinished[0m debug [unoptimized + fuel] target(s) in 2.41s
      Bytecode size: 1064 bytes
      Bytecode hash: 0x5660f32633248000216766215c163e59b8b111e79f3958dc6a6fd8d3031d068a
