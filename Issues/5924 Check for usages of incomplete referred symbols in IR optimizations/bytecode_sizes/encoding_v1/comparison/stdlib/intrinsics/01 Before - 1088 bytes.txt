// IR: Initial
library {
}

// IR: Final
library {
}

// IR: Initial
script {
    pub entry fn __entry() -> slice, !1 {
        local bool result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr bool, result, !3
        store v0 to v1, !3
        v2 = get_local ptr bool, result, !4
        v3 = load v2
        v4 = call encode_38(v3), !5
        ret slice v4
    }

    fn main_0() -> bool, !7 {
        local [u64; 3] __anon_0
        local { bool, u64 } __anon_1
        local { bool, u64, b256, u8 } __anon_2
        local u64 a
        local u64 b
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = call min_1(), !8
        v1 = get_local ptr b256, zero, !9
        store v0 to v1, !9
        v2 = get_local ptr u64, a, !10
        v3 = const u64 1, !11
        store v3 to v2, !10
        v4 = get_local ptr u64, b, !12
        v5 = const u64 1, !13
        store v5 to v4, !12
        v6 = get_local ptr u64, c, !14
        v7 = const u64 1, !15
        store v7 to v6, !14
        v8 = get_local ptr u8, d, !16
        v9 = const u8 1, !17
        store v9 to v8, !16
        v10 = get_local ptr b256, zero, !18
        v11 = load v10
        v12 = get_local ptr b256, e, !19
        store v11 to v12, !19
        v13 = get_local ptr string<11>, f, !20
        v14 = const string<11> "Fuel rocks!"
        store v14 to v13, !20
        v15 = get_local ptr [u64; 3], __anon_0, !21
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        v18 = const u64 42, !22
        store v18 to v17, !21
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr u64, v19
        v21 = const u64 42, !22
        store v21 to v20, !21
        v22 = const u64 2
        v23 = get_elem_ptr v15, ptr u64, v22
        v24 = const u64 42, !22
        store v24 to v23, !21
        v25 = load v15
        v26 = get_local ptr [u64; 3], test_array, !23
        store v25 to v26, !23
        v27 = get_local ptr { bool, u64 }, __anon_1, !24
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr bool, v28
        v30 = const bool false, !25
        store v30 to v29, !24
        v31 = const u64 1
        v32 = get_elem_ptr v27, ptr u64, v31
        v33 = const u64 11, !26
        store v33 to v32, !24
        v34 = load v27
        v35 = get_local ptr { bool, u64 }, test_struct, !27
        store v34 to v35, !27
        v36 = const u64 42, !28
        v37 = call is_ref_type_5(v36), !29
        v38 = call not_3(v37), !30
        v39 = call assert_2(v38), !31
        v40 = const u64 42, !32
        v41 = call is_ref_type_7(v40), !33
        v42 = call not_3(v41), !34
        v43 = call assert_2(v42), !35
        v44 = const u64 42, !36
        v45 = call is_ref_type_9(v44), !37
        v46 = call not_3(v45), !38
        v47 = call assert_2(v46), !39
        v48 = const u8 11, !40
        v49 = call is_ref_type_11(v48), !41
        v50 = call not_3(v49), !42
        v51 = call assert_2(v50), !43
        v52 = get_local ptr [u64; 3], test_array, !44
        v53 = load v52
        v54 = call is_ref_type_13(v53), !45
        v55 = call assert_2(v54), !46
        v56 = get_local ptr { bool, u64 }, test_struct, !47
        v57 = load v56
        v58 = call is_ref_type_15(v57), !48
        v59 = call assert_2(v58), !49
        v60 = get_local ptr b256, zero, !50
        v61 = load v60
        v62 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !51
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr bool, v63, !51
        v65 = const bool true, !52
        store v65 to v64, !51
        v66 = const u64 1
        v67 = get_elem_ptr v62, ptr u64, v66, !51
        v68 = const u64 11, !53
        store v68 to v67, !51
        v69 = const u64 2
        v70 = get_elem_ptr v62, ptr b256, v69, !51
        store v61 to v70, !51
        v71 = const u64 3
        v72 = get_elem_ptr v62, ptr u8, v71, !51
        v73 = const u8 255, !54
        store v73 to v72, !51
        v74 = load v62
        v75 = call is_ref_type_17(v74), !55
        v76 = call assert_2(v75), !56
        v77 = get_local ptr b256, e, !57
        v78 = load v77
        v79 = call is_ref_type_19(v78), !58
        v80 = call assert_2(v79), !59
        v81 = get_local ptr string<11>, f, !60
        v82 = load v81
        v83 = call is_ref_type_21(v82), !61
        v84 = call assert_2(v83), !62
        v85 = call size_of_24(), !63
        v86 = const u64 8, !64
        v87 = call eq_23(v85, v86), !65
        v88 = call assert_2(v87), !66
        v89 = call size_of_25(), !67
        v90 = const u64 8, !68
        v91 = call eq_23(v89, v90), !69
        v92 = call assert_2(v91), !70
        v93 = call size_of_26(), !71
        v94 = const u64 8, !72
        v95 = call eq_23(v93, v94), !73
        v96 = call assert_2(v95), !74
        v97 = call size_of_27(), !75
        v98 = const u64 1, !76
        v99 = call eq_23(v97, v98), !77
        v100 = call assert_2(v99), !78
        v101 = call size_of_28(), !79
        v102 = const u64 32, !80
        v103 = call eq_23(v101, v102), !81
        v104 = call assert_2(v103), !82
        v105 = call size_of_29(), !83
        v106 = const u64 16, !84
        v107 = call eq_23(v105, v106), !85
        v108 = call assert_2(v107), !86
        v109 = call size_of_30(), !87
        v110 = const u64 24, !88
        v111 = call eq_23(v109, v110), !89
        v112 = call assert_2(v111), !90
        v113 = call size_of_31(), !91
        v114 = const u64 16, !92
        v115 = call eq_23(v113, v114), !93
        v116 = call assert_2(v115), !94
        v117 = get_local ptr u64, a, !95
        v118 = load v117
        v119 = call size_of_val_32(v118), !96
        v120 = const u64 8, !97
        v121 = call eq_23(v119, v120), !98
        v122 = call assert_2(v121), !99
        v123 = get_local ptr u64, b, !100
        v124 = load v123
        v125 = call size_of_val_33(v124), !101
        v126 = const u64 8, !102
        v127 = call eq_23(v125, v126), !103
        v128 = call assert_2(v127), !104
        v129 = get_local ptr u64, c, !105
        v130 = load v129
        v131 = call size_of_val_34(v130), !106
        v132 = const u64 8, !107
        v133 = call eq_23(v131, v132), !108
        v134 = call assert_2(v133), !109
        v135 = get_local ptr u8, d, !110
        v136 = load v135
        v137 = call size_of_val_35(v136), !111
        v138 = const u64 1, !112
        v139 = call eq_23(v137, v138), !113
        v140 = call assert_2(v139), !114
        v141 = get_local ptr b256, e, !115
        v142 = load v141
        v143 = call size_of_val_36(v142), !116
        v144 = const u64 32, !117
        v145 = call eq_23(v143, v144), !118
        v146 = call assert_2(v145), !119
        v147 = get_local ptr string<11>, f, !120
        v148 = load v147
        v149 = call size_of_val_37(v148), !121
        v150 = const u64 16, !122
        v151 = call eq_23(v149, v150), !123
        v152 = call assert_2(v151), !124
        v153 = const bool true, !125
        ret bool v153
    }

    pub fn min_1() -> b256, !127 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !128
        ret b256 v0
    }

    pub fn assert_2(condition !130: bool) -> (), !131 {
        entry(condition: bool):
        v0 = call not_3(condition), !132
        cbr v0, block0(), block1(), !132

        block0():
        v1 = const u64 18446744073709486084, !134
        v2 = call revert_4(v1), !135
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn not_3(self !137: bool) -> bool, !138 {
        entry(self: bool):
        v0 = const bool false, !139
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_4(code !141: u64) -> never, !142 {
        entry(code: u64):
        revert code, !143
    }

    fn is_ref_type_5(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_6() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_7(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_8(), !146
        ret bool v0
    }

    pub fn is_reference_type_8() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_9(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_10(), !146
        ret bool v0
    }

    pub fn is_reference_type_10() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_11(_param !144: u8) -> bool, !145 {
        entry(_param: u8):
        v0 = call is_reference_type_12(), !146
        ret bool v0
    }

    pub fn is_reference_type_12() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_13(_param !144: [u64; 3]) -> bool, !145 {
        entry(_param: [u64; 3]):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_14() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_15(_param !144: { bool, u64 }) -> bool, !145 {
        entry(_param: { bool, u64 }):
        v0 = call is_reference_type_16(), !146
        ret bool v0
    }

    pub fn is_reference_type_16() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_17(_param !144: { bool, u64, b256, u8 }) -> bool, !145 {
        entry(_param: { bool, u64, b256, u8 }):
        v0 = call is_reference_type_18(), !146
        ret bool v0
    }

    pub fn is_reference_type_18() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_19(_param !144: b256) -> bool, !145 {
        entry(_param: b256):
        v0 = call is_reference_type_20(), !146
        ret bool v0
    }

    pub fn is_reference_type_20() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_21(_param !144: string<11>) -> bool, !145 {
        entry(_param: string<11>):
        v0 = call is_reference_type_22(), !146
        ret bool v0
    }

    pub fn is_reference_type_22() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    pub fn eq_23(self !149: u64, other !150: u64) -> bool, !151 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn size_of_24() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_25() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_26() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_27() -> u64, !152 {
        entry():
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_28() -> u64, !152 {
        entry():
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_29() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_30() -> u64, !152 {
        entry():
        v0 = const u64 24
        ret u64 v0
    }

    pub fn size_of_31() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_val_32(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_33(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_34(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_35(val !153: u8) -> u64, !154 {
        entry(val: u8):
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_val_36(val !153: b256) -> u64, !154 {
        entry(val: b256):
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_val_37(val !153: string<11>) -> u64, !154 {
        entry(val: string<11>):
        v0 = const u64 16
        ret u64 v0
    }

    pub fn encode_38(item !156: bool) -> slice, !157 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_40(), !158
        v1 = call abi_encode_39(item, v0), !159
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !160
        store v1 to v2, !160
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !161
        v4 = load v3
        v5 = call as_raw_slice_41(v4), !162
        ret slice v5
    }

    pub fn abi_encode_39(self !163: bool, buffer !164: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !165 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !167
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !167
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_40() -> { { u64, u64, u64 } }, !168 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !169
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !169
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_41(self !170: { { u64, u64, u64 } }) -> slice, !171 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = span !0 48 74
!4 = span !0 107 113
!5 = span !0 92 114
!6 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!7 = span !6 164 1315
!8 = span !6 199 210
!9 = span !6 188 211
!10 = span !6 216 231
!11 = span !6 229 230
!12 = span !6 236 251
!13 = span !6 249 250
!14 = span !6 256 271
!15 = span !6 269 270
!16 = span !6 276 290
!17 = span !6 288 289
!18 = span !6 309 313
!19 = span !6 295 314
!20 = span !6 319 366
!21 = span !6 389 399
!22 = span !6 390 395
!23 = span !6 372 400
!24 = span !6 424 487
!25 = span !6 454 459
!26 = span !6 478 480
!27 = span !6 406 488
!28 = span !6 514 519
!29 = span !6 502 520
!30 = span !6 501 520
!31 = span !6 494 521
!32 = span !6 547 552
!33 = span !6 535 553
!34 = span !6 534 553
!35 = span !6 527 554
!36 = span !6 580 585
!37 = span !6 568 586
!38 = span !6 567 586
!39 = span !6 560 587
!40 = span !6 613 617
!41 = span !6 601 618
!42 = span !6 600 618
!43 = span !6 593 619
!44 = span !6 644 654
!45 = span !6 632 655
!46 = span !6 625 656
!47 = span !6 681 692
!48 = span !6 669 693
!49 = span !6 662 694
!50 = span !6 730 734
!51 = span !6 719 742
!52 = span !6 720 724
!53 = span !6 726 728
!54 = span !6 736 741
!55 = span !6 707 743
!56 = span !6 700 744
!57 = span !6 769 770
!58 = span !6 757 771
!59 = span !6 750 772
!60 = span !6 797 798
!61 = span !6 785 799
!62 = span !6 778 800
!63 = span !6 814 830
!64 = span !6 834 835
!65 = span !6 814 835
!66 = span !6 807 836
!67 = span !6 849 865
!68 = span !6 869 870
!69 = span !6 849 870
!70 = span !6 842 871
!71 = span !6 884 900
!72 = span !6 904 905
!73 = span !6 884 905
!74 = span !6 877 906
!75 = span !6 919 934
!76 = span !6 938 939
!77 = span !6 919 939
!78 = span !6 912 940
!79 = span !6 953 970
!80 = span !6 974 976
!81 = span !6 953 976
!82 = span !6 946 977
!83 = span !6 990 1010
!84 = span !6 1014 1016
!85 = span !6 990 1016
!86 = span !6 983 1017
!87 = span !6 1030 1051
!88 = span !6 1055 1057
!89 = span !6 1030 1057
!90 = span !6 1023 1058
!91 = span !6 1071 1094
!92 = span !6 1098 1100
!93 = span !6 1071 1100
!94 = span !6 1064 1101
!95 = span !6 1127 1128
!96 = span !6 1115 1129
!97 = span !6 1133 1134
!98 = span !6 1115 1134
!99 = span !6 1108 1135
!100 = span !6 1160 1161
!101 = span !6 1148 1162
!102 = span !6 1166 1167
!103 = span !6 1148 1167
!104 = span !6 1141 1168
!105 = span !6 1193 1194
!106 = span !6 1181 1195
!107 = span !6 1199 1200
!108 = span !6 1181 1200
!109 = span !6 1174 1201
!110 = span !6 1226 1227
!111 = span !6 1214 1228
!112 = span !6 1232 1233
!113 = span !6 1214 1233
!114 = span !6 1207 1234
!115 = span !6 1259 1260
!116 = span !6 1247 1261
!117 = span !6 1265 1267
!118 = span !6 1247 1267
!119 = span !6 1240 1268
!120 = span !6 1293 1294
!121 = span !6 1281 1295
!122 = span !6 1299 1301
!123 = span !6 1281 1301
!124 = span !6 1274 1302
!125 = span !6 1309 1313
!126 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!127 = span !126 7873 7976
!128 = span !126 7904 7970
!129 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!130 = span !129 935 944
!131 = span !129 921 1019
!132 = span !129 961 971
!133 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!134 = span !133 1038 1059
!135 = span !129 982 1010
!136 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!137 = span !136 9956 9960
!138 = span !136 9949 10003
!139 = span !136 9991 9996
!140 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!141 = span !140 669 673
!142 = span !140 655 707
!143 = span !140 691 705
!144 = span !6 111 117
!145 = span !6 93 162
!146 = span !6 136 160
!147 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/intrinsics.sw"
!148 = span !147 397 469
!149 = span !136 12645 12649
!150 = span !136 12651 12656
!151 = span !136 12639 12705
!152 = span !147 913 964
!153 = span !147 1572 1575
!154 = span !147 1550 1618
!155 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!156 = span !155 64156 64160
!157 = span !155 64139 64280
!158 = span !155 64237 64250
!159 = span !155 64221 64251
!160 = span !155 64208 64252
!161 = span !155 64257 64263
!162 = span !155 64257 64278
!163 = span !155 3794 3798
!164 = span !155 3800 3806
!165 = span !155 3780 3925
!166 = span !155 55 82
!167 = span !155 3836 3919
!168 = span !155 128 228
!169 = span !155 159 222
!170 = span !155 281 285
!171 = span !155 265 357

// IR: [fn-dedup-debug] Function deduplication with metadata considered
script {
    pub entry fn __entry() -> slice, !1 {
        local bool result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr bool, result, !3
        store v0 to v1, !3
        v2 = get_local ptr bool, result, !4
        v3 = load v2
        v4 = call encode_38(v3), !5
        ret slice v4
    }

    fn main_0() -> bool, !7 {
        local [u64; 3] __anon_0
        local { bool, u64 } __anon_1
        local { bool, u64, b256, u8 } __anon_2
        local u64 a
        local u64 b
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = call min_1(), !8
        v1 = get_local ptr b256, zero, !9
        store v0 to v1, !9
        v2 = get_local ptr u64, a, !10
        v3 = const u64 1, !11
        store v3 to v2, !10
        v4 = get_local ptr u64, b, !12
        v5 = const u64 1, !13
        store v5 to v4, !12
        v6 = get_local ptr u64, c, !14
        v7 = const u64 1, !15
        store v7 to v6, !14
        v8 = get_local ptr u8, d, !16
        v9 = const u8 1, !17
        store v9 to v8, !16
        v10 = get_local ptr b256, zero, !18
        v11 = load v10
        v12 = get_local ptr b256, e, !19
        store v11 to v12, !19
        v13 = get_local ptr string<11>, f, !20
        v14 = const string<11> "Fuel rocks!"
        store v14 to v13, !20
        v15 = get_local ptr [u64; 3], __anon_0, !21
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        v18 = const u64 42, !22
        store v18 to v17, !21
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr u64, v19
        v21 = const u64 42, !22
        store v21 to v20, !21
        v22 = const u64 2
        v23 = get_elem_ptr v15, ptr u64, v22
        v24 = const u64 42, !22
        store v24 to v23, !21
        v25 = load v15
        v26 = get_local ptr [u64; 3], test_array, !23
        store v25 to v26, !23
        v27 = get_local ptr { bool, u64 }, __anon_1, !24
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr bool, v28
        v30 = const bool false, !25
        store v30 to v29, !24
        v31 = const u64 1
        v32 = get_elem_ptr v27, ptr u64, v31
        v33 = const u64 11, !26
        store v33 to v32, !24
        v34 = load v27
        v35 = get_local ptr { bool, u64 }, test_struct, !27
        store v34 to v35, !27
        v36 = const u64 42, !28
        v37 = call is_ref_type_9(v36), !29
        v38 = call not_3(v37), !30
        v39 = call assert_2(v38), !31
        v40 = const u64 42, !32
        v41 = call is_ref_type_9(v40), !33
        v42 = call not_3(v41), !34
        v43 = call assert_2(v42), !35
        v44 = const u64 42, !36
        v45 = call is_ref_type_9(v44), !37
        v46 = call not_3(v45), !38
        v47 = call assert_2(v46), !39
        v48 = const u8 11, !40
        v49 = call is_ref_type_11(v48), !41
        v50 = call not_3(v49), !42
        v51 = call assert_2(v50), !43
        v52 = get_local ptr [u64; 3], test_array, !44
        v53 = load v52
        v54 = call is_ref_type_13(v53), !45
        v55 = call assert_2(v54), !46
        v56 = get_local ptr { bool, u64 }, test_struct, !47
        v57 = load v56
        v58 = call is_ref_type_15(v57), !48
        v59 = call assert_2(v58), !49
        v60 = get_local ptr b256, zero, !50
        v61 = load v60
        v62 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !51
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr bool, v63, !51
        v65 = const bool true, !52
        store v65 to v64, !51
        v66 = const u64 1
        v67 = get_elem_ptr v62, ptr u64, v66, !51
        v68 = const u64 11, !53
        store v68 to v67, !51
        v69 = const u64 2
        v70 = get_elem_ptr v62, ptr b256, v69, !51
        store v61 to v70, !51
        v71 = const u64 3
        v72 = get_elem_ptr v62, ptr u8, v71, !51
        v73 = const u8 255, !54
        store v73 to v72, !51
        v74 = load v62
        v75 = call is_ref_type_17(v74), !55
        v76 = call assert_2(v75), !56
        v77 = get_local ptr b256, e, !57
        v78 = load v77
        v79 = call is_ref_type_19(v78), !58
        v80 = call assert_2(v79), !59
        v81 = get_local ptr string<11>, f, !60
        v82 = load v81
        v83 = call is_ref_type_21(v82), !61
        v84 = call assert_2(v83), !62
        v85 = call size_of_26(), !63
        v86 = const u64 8, !64
        v87 = call eq_23(v85, v86), !65
        v88 = call assert_2(v87), !66
        v89 = call size_of_26(), !67
        v90 = const u64 8, !68
        v91 = call eq_23(v89, v90), !69
        v92 = call assert_2(v91), !70
        v93 = call size_of_26(), !71
        v94 = const u64 8, !72
        v95 = call eq_23(v93, v94), !73
        v96 = call assert_2(v95), !74
        v97 = call size_of_27(), !75
        v98 = const u64 1, !76
        v99 = call eq_23(v97, v98), !77
        v100 = call assert_2(v99), !78
        v101 = call size_of_28(), !79
        v102 = const u64 32, !80
        v103 = call eq_23(v101, v102), !81
        v104 = call assert_2(v103), !82
        v105 = call size_of_31(), !83
        v106 = const u64 16, !84
        v107 = call eq_23(v105, v106), !85
        v108 = call assert_2(v107), !86
        v109 = call size_of_30(), !87
        v110 = const u64 24, !88
        v111 = call eq_23(v109, v110), !89
        v112 = call assert_2(v111), !90
        v113 = call size_of_31(), !91
        v114 = const u64 16, !92
        v115 = call eq_23(v113, v114), !93
        v116 = call assert_2(v115), !94
        v117 = get_local ptr u64, a, !95
        v118 = load v117
        v119 = call size_of_val_34(v118), !96
        v120 = const u64 8, !97
        v121 = call eq_23(v119, v120), !98
        v122 = call assert_2(v121), !99
        v123 = get_local ptr u64, b, !100
        v124 = load v123
        v125 = call size_of_val_34(v124), !101
        v126 = const u64 8, !102
        v127 = call eq_23(v125, v126), !103
        v128 = call assert_2(v127), !104
        v129 = get_local ptr u64, c, !105
        v130 = load v129
        v131 = call size_of_val_34(v130), !106
        v132 = const u64 8, !107
        v133 = call eq_23(v131, v132), !108
        v134 = call assert_2(v133), !109
        v135 = get_local ptr u8, d, !110
        v136 = load v135
        v137 = call size_of_val_35(v136), !111
        v138 = const u64 1, !112
        v139 = call eq_23(v137, v138), !113
        v140 = call assert_2(v139), !114
        v141 = get_local ptr b256, e, !115
        v142 = load v141
        v143 = call size_of_val_36(v142), !116
        v144 = const u64 32, !117
        v145 = call eq_23(v143, v144), !118
        v146 = call assert_2(v145), !119
        v147 = get_local ptr string<11>, f, !120
        v148 = load v147
        v149 = call size_of_val_37(v148), !121
        v150 = const u64 16, !122
        v151 = call eq_23(v149, v150), !123
        v152 = call assert_2(v151), !124
        v153 = const bool true, !125
        ret bool v153
    }

    pub fn min_1() -> b256, !127 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !128
        ret b256 v0
    }

    pub fn assert_2(condition !130: bool) -> (), !131 {
        entry(condition: bool):
        v0 = call not_3(condition), !132
        cbr v0, block0(), block1(), !132

        block0():
        v1 = const u64 18446744073709486084, !134
        v2 = call revert_4(v1), !135
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn not_3(self !137: bool) -> bool, !138 {
        entry(self: bool):
        v0 = const bool false, !139
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_4(code !141: u64) -> never, !142 {
        entry(code: u64):
        revert code, !143
    }

    fn is_ref_type_5(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_6() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_7(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_8() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_9(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_10() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_11(_param !144: u8) -> bool, !145 {
        entry(_param: u8):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_12() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_13(_param !144: [u64; 3]) -> bool, !145 {
        entry(_param: [u64; 3]):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_14() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_15(_param !144: { bool, u64 }) -> bool, !145 {
        entry(_param: { bool, u64 }):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_16() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_17(_param !144: { bool, u64, b256, u8 }) -> bool, !145 {
        entry(_param: { bool, u64, b256, u8 }):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_18() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_19(_param !144: b256) -> bool, !145 {
        entry(_param: b256):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_20() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_21(_param !144: string<11>) -> bool, !145 {
        entry(_param: string<11>):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_22() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    pub fn eq_23(self !149: u64, other !150: u64) -> bool, !151 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn size_of_24() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_25() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_26() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_27() -> u64, !152 {
        entry():
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_28() -> u64, !152 {
        entry():
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_29() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_30() -> u64, !152 {
        entry():
        v0 = const u64 24
        ret u64 v0
    }

    pub fn size_of_31() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_val_32(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_33(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_34(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_35(val !153: u8) -> u64, !154 {
        entry(val: u8):
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_val_36(val !153: b256) -> u64, !154 {
        entry(val: b256):
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_val_37(val !153: string<11>) -> u64, !154 {
        entry(val: string<11>):
        v0 = const u64 16
        ret u64 v0
    }

    pub fn encode_38(item !156: bool) -> slice, !157 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_40(), !158
        v1 = call abi_encode_39(item, v0), !159
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !160
        store v1 to v2, !160
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !161
        v4 = load v3
        v5 = call as_raw_slice_41(v4), !162
        ret slice v5
    }

    pub fn abi_encode_39(self !163: bool, buffer !164: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !165 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !167
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !167
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_40() -> { { u64, u64, u64 } }, !168 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !169
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !169
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_41(self !170: { { u64, u64, u64 } }) -> slice, !171 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = span !0 48 74
!4 = span !0 107 113
!5 = span !0 92 114
!6 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!7 = span !6 164 1315
!8 = span !6 199 210
!9 = span !6 188 211
!10 = span !6 216 231
!11 = span !6 229 230
!12 = span !6 236 251
!13 = span !6 249 250
!14 = span !6 256 271
!15 = span !6 269 270
!16 = span !6 276 290
!17 = span !6 288 289
!18 = span !6 309 313
!19 = span !6 295 314
!20 = span !6 319 366
!21 = span !6 389 399
!22 = span !6 390 395
!23 = span !6 372 400
!24 = span !6 424 487
!25 = span !6 454 459
!26 = span !6 478 480
!27 = span !6 406 488
!28 = span !6 514 519
!29 = span !6 502 520
!30 = span !6 501 520
!31 = span !6 494 521
!32 = span !6 547 552
!33 = span !6 535 553
!34 = span !6 534 553
!35 = span !6 527 554
!36 = span !6 580 585
!37 = span !6 568 586
!38 = span !6 567 586
!39 = span !6 560 587
!40 = span !6 613 617
!41 = span !6 601 618
!42 = span !6 600 618
!43 = span !6 593 619
!44 = span !6 644 654
!45 = span !6 632 655
!46 = span !6 625 656
!47 = span !6 681 692
!48 = span !6 669 693
!49 = span !6 662 694
!50 = span !6 730 734
!51 = span !6 719 742
!52 = span !6 720 724
!53 = span !6 726 728
!54 = span !6 736 741
!55 = span !6 707 743
!56 = span !6 700 744
!57 = span !6 769 770
!58 = span !6 757 771
!59 = span !6 750 772
!60 = span !6 797 798
!61 = span !6 785 799
!62 = span !6 778 800
!63 = span !6 814 830
!64 = span !6 834 835
!65 = span !6 814 835
!66 = span !6 807 836
!67 = span !6 849 865
!68 = span !6 869 870
!69 = span !6 849 870
!70 = span !6 842 871
!71 = span !6 884 900
!72 = span !6 904 905
!73 = span !6 884 905
!74 = span !6 877 906
!75 = span !6 919 934
!76 = span !6 938 939
!77 = span !6 919 939
!78 = span !6 912 940
!79 = span !6 953 970
!80 = span !6 974 976
!81 = span !6 953 976
!82 = span !6 946 977
!83 = span !6 990 1010
!84 = span !6 1014 1016
!85 = span !6 990 1016
!86 = span !6 983 1017
!87 = span !6 1030 1051
!88 = span !6 1055 1057
!89 = span !6 1030 1057
!90 = span !6 1023 1058
!91 = span !6 1071 1094
!92 = span !6 1098 1100
!93 = span !6 1071 1100
!94 = span !6 1064 1101
!95 = span !6 1127 1128
!96 = span !6 1115 1129
!97 = span !6 1133 1134
!98 = span !6 1115 1134
!99 = span !6 1108 1135
!100 = span !6 1160 1161
!101 = span !6 1148 1162
!102 = span !6 1166 1167
!103 = span !6 1148 1167
!104 = span !6 1141 1168
!105 = span !6 1193 1194
!106 = span !6 1181 1195
!107 = span !6 1199 1200
!108 = span !6 1181 1200
!109 = span !6 1174 1201
!110 = span !6 1226 1227
!111 = span !6 1214 1228
!112 = span !6 1232 1233
!113 = span !6 1214 1233
!114 = span !6 1207 1234
!115 = span !6 1259 1260
!116 = span !6 1247 1261
!117 = span !6 1265 1267
!118 = span !6 1247 1267
!119 = span !6 1240 1268
!120 = span !6 1293 1294
!121 = span !6 1281 1295
!122 = span !6 1299 1301
!123 = span !6 1281 1301
!124 = span !6 1274 1302
!125 = span !6 1309 1313
!126 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!127 = span !126 7873 7976
!128 = span !126 7904 7970
!129 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!130 = span !129 935 944
!131 = span !129 921 1019
!132 = span !129 961 971
!133 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!134 = span !133 1038 1059
!135 = span !129 982 1010
!136 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!137 = span !136 9956 9960
!138 = span !136 9949 10003
!139 = span !136 9991 9996
!140 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!141 = span !140 669 673
!142 = span !140 655 707
!143 = span !140 691 705
!144 = span !6 111 117
!145 = span !6 93 162
!146 = span !6 136 160
!147 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/intrinsics.sw"
!148 = span !147 397 469
!149 = span !136 12645 12649
!150 = span !136 12651 12656
!151 = span !136 12639 12705
!152 = span !147 913 964
!153 = span !147 1572 1575
!154 = span !147 1550 1618
!155 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!156 = span !155 64156 64160
!157 = span !155 64139 64280
!158 = span !155 64237 64250
!159 = span !155 64221 64251
!160 = span !155 64208 64252
!161 = span !155 64257 64263
!162 = span !155 64257 64278
!163 = span !155 3794 3798
!164 = span !155 3800 3806
!165 = span !155 3780 3925
!166 = span !155 55 82
!167 = span !155 3836 3919
!168 = span !155 128 228
!169 = span !155 159 222
!170 = span !155 281 285
!171 = span !155 265 357

// IR: [inline] Function inlining
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br main_0_block0(v0), !7

        main_0_block0(v1: b256):
        v2 = get_local ptr b256, zero, !9
        store v1 to v2, !10
        v3 = get_local ptr u64, a, !12
        v4 = const u64 1, !13
        store v4 to v3, !14
        v5 = get_local ptr u64, b, !16
        v6 = const u64 1, !17
        store v6 to v5, !18
        v7 = get_local ptr u64, c, !20
        v8 = const u64 1, !21
        store v8 to v7, !22
        v9 = get_local ptr u8, d, !24
        v10 = const u8 1, !25
        store v10 to v9, !26
        v11 = get_local ptr b256, zero, !28
        v12 = load v11, !4
        v13 = get_local ptr b256, e, !30
        store v12 to v13, !31
        v14 = get_local ptr string<11>, f, !33
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !34
        v16 = get_local ptr [u64; 3], __anon_0, !36
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !4
        v19 = const u64 42, !37
        store v19 to v18, !38
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20, !4
        v22 = const u64 42, !37
        store v22 to v21, !39
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23, !4
        v25 = const u64 42, !37
        store v25 to v24, !40
        v26 = load v16, !4
        v27 = get_local ptr [u64; 3], test_array, !42
        store v26 to v27, !43
        v28 = get_local ptr { bool, u64 }, __anon_1, !45
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29, !4
        v31 = const bool false, !46
        store v31 to v30, !47
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32, !4
        v34 = const u64 11, !48
        store v34 to v33, !49
        v35 = load v28, !4
        v36 = get_local ptr { bool, u64 }, test_struct, !51
        store v35 to v36, !52
        v37 = const bool false
        br main_0_is_ref_type_9_block0(v37), !55

        main_0_is_ref_type_9_block0(v38: bool):
        br main_0_block1(v38), !56

        main_0_block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !60
        br main_0_block2(v41), !61

        main_0_block2(v42: bool):
        v43 = call assert_2(v42), !63
        br main_0_is_ref_type_9_block04(v37), !65

        main_0_is_ref_type_9_block04(v44: bool):
        br main_0_block3(v44), !66

        main_0_block3(v45: bool):
        v46 = cmp eq v45 v40, !68
        br main_0_block5(v46), !69

        main_0_block5(v47: bool):
        v48 = call assert_2(v47), !71
        br main_0_is_ref_type_9_block07(v37), !73

        main_0_is_ref_type_9_block07(v49: bool):
        br main_0_block6(v49), !74

        main_0_block6(v50: bool):
        v51 = cmp eq v50 v40, !76
        br main_0_block8(v51), !77

        main_0_block8(v52: bool):
        v53 = call assert_2(v52), !79
        br main_0_is_ref_type_11_block0(v37), !81

        main_0_is_ref_type_11_block0(v54: bool):
        br main_0_block9(v54), !82

        main_0_block9(v55: bool):
        v56 = cmp eq v55 v40, !84
        br main_0_block10(v56), !85

        main_0_block10(v57: bool):
        v58 = call assert_2(v57), !87
        v59 = get_local ptr [u64; 3], test_array, !89
        v60 = load v59, !4
        v61 = const bool true
        br main_0_is_ref_type_13_block0(v61), !91

        main_0_is_ref_type_13_block0(v62: bool):
        br main_0_block11(v62), !92

        main_0_block11(v63: bool):
        v64 = call assert_2(v63), !94
        v65 = get_local ptr { bool, u64 }, test_struct, !96
        v66 = load v65, !4
        br main_0_is_ref_type_15_block0(v61), !98

        main_0_is_ref_type_15_block0(v67: bool):
        br main_0_block12(v67), !99

        main_0_block12(v68: bool):
        v69 = call assert_2(v68), !101
        v70 = get_local ptr b256, zero, !103
        v71 = load v70, !4
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !105
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !106
        v75 = const bool true, !107
        store v75 to v74, !108
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !109
        v78 = const u64 11, !110
        store v78 to v77, !111
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !112
        store v71 to v80, !113
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !114
        v83 = const u8 255, !115
        store v83 to v82, !116
        v84 = load v72, !4
        br main_0_is_ref_type_17_block0(v61), !118

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !119

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !121
        v88 = get_local ptr b256, e, !123
        v89 = load v88, !4
        br main_0_is_ref_type_19_block0(v61), !125

        main_0_is_ref_type_19_block0(v90: bool):
        br main_0_block14(v90), !126

        main_0_block14(v91: bool):
        v92 = call assert_2(v91), !128
        v93 = get_local ptr string<11>, f, !130
        v94 = load v93, !4
        br main_0_is_ref_type_21_block0(v61), !132

        main_0_is_ref_type_21_block0(v95: bool):
        br main_0_block15(v95), !133

        main_0_block15(v96: bool):
        v97 = call assert_2(v96), !135
        v98 = const u64 8
        br main_0_block16(v98), !137

        main_0_block16(v99: u64):
        v100 = const u64 8, !138
        v101 = cmp eq v99 v100, !140
        br main_0_block17(v101), !141

        main_0_block17(v102: bool):
        v103 = call assert_2(v102), !143
        br main_0_block18(v98), !145

        main_0_block18(v104: u64):
        v105 = const u64 8, !146
        v106 = cmp eq v104 v105, !148
        br main_0_block19(v106), !149

        main_0_block19(v107: bool):
        v108 = call assert_2(v107), !151
        br main_0_block20(v98), !153

        main_0_block20(v109: u64):
        v110 = const u64 8, !154
        v111 = cmp eq v109 v110, !156
        br main_0_block21(v111), !157

        main_0_block21(v112: bool):
        v113 = call assert_2(v112), !159
        v114 = const u64 1
        br main_0_block22(v114), !161

        main_0_block22(v115: u64):
        v116 = const u64 1, !162
        v117 = cmp eq v115 v116, !164
        br main_0_block23(v117), !165

        main_0_block23(v118: bool):
        v119 = call assert_2(v118), !167
        v120 = const u64 32
        br main_0_block24(v120), !169

        main_0_block24(v121: u64):
        v122 = const u64 32, !170
        v123 = cmp eq v121 v122, !172
        br main_0_block25(v123), !173

        main_0_block25(v124: bool):
        v125 = call assert_2(v124), !175
        v126 = const u64 16
        br main_0_block26(v126), !177

        main_0_block26(v127: u64):
        v128 = const u64 16, !178
        v129 = cmp eq v127 v128, !180
        br main_0_block27(v129), !181

        main_0_block27(v130: bool):
        v131 = call assert_2(v130), !183
        v132 = const u64 24
        br main_0_block28(v132), !185

        main_0_block28(v133: u64):
        v134 = const u64 24, !186
        v135 = cmp eq v133 v134, !188
        br main_0_block29(v135), !189

        main_0_block29(v136: bool):
        v137 = call assert_2(v136), !191
        br main_0_block30(v126), !193

        main_0_block30(v138: u64):
        v139 = const u64 16, !194
        v140 = cmp eq v138 v139, !196
        br main_0_block31(v140), !197

        main_0_block31(v141: bool):
        v142 = call assert_2(v141), !199
        v143 = get_local ptr u64, a, !201
        v144 = load v143, !4
        v145 = const u64 8
        br main_0_block32(v145), !203

        main_0_block32(v146: u64):
        v147 = const u64 8, !204
        v148 = cmp eq v146 v147, !206
        br main_0_block33(v148), !207

        main_0_block33(v149: bool):
        v150 = call assert_2(v149), !209
        v151 = get_local ptr u64, b, !211
        v152 = load v151, !4
        br main_0_block34(v145), !213

        main_0_block34(v153: u64):
        v154 = const u64 8, !214
        v155 = cmp eq v153 v154, !216
        br main_0_block35(v155), !217

        main_0_block35(v156: bool):
        v157 = call assert_2(v156), !219
        v158 = get_local ptr u64, c, !221
        v159 = load v158, !4
        br main_0_block36(v145), !223

        main_0_block36(v160: u64):
        v161 = const u64 8, !224
        v162 = cmp eq v160 v161, !226
        br main_0_block37(v162), !227

        main_0_block37(v163: bool):
        v164 = call assert_2(v163), !229
        v165 = get_local ptr u8, d, !231
        v166 = load v165, !4
        v167 = const u64 1
        br main_0_block38(v167), !233

        main_0_block38(v168: u64):
        v169 = const u64 1, !234
        v170 = cmp eq v168 v169, !236
        br main_0_block39(v170), !237

        main_0_block39(v171: bool):
        v172 = call assert_2(v171), !239
        v173 = get_local ptr b256, e, !241
        v174 = load v173, !4
        v175 = const u64 32
        br main_0_block40(v175), !243

        main_0_block40(v176: u64):
        v177 = const u64 32, !244
        v178 = cmp eq v176 v177, !246
        br main_0_block41(v178), !247

        main_0_block41(v179: bool):
        v180 = call assert_2(v179), !249
        v181 = get_local ptr string<11>, f, !251
        v182 = load v181, !4
        v183 = const u64 16
        br main_0_block42(v183), !253

        main_0_block42(v184: u64):
        v185 = const u64 16, !254
        v186 = cmp eq v184 v185, !256
        br main_0_block43(v186), !257

        main_0_block43(v187: bool):
        v188 = call assert_2(v187), !259
        v189 = const bool true, !260
        br block0(v189), !4

        block0(v190: bool):
        v191 = get_local ptr bool, result, !261
        store v190 to v191, !261
        v192 = get_local ptr bool, result, !262
        v193 = load v192
        v194 = const u64 1024
        v195 = asm(cap: v194) -> u64 hp, !266 {
            aloc   cap
        }
        v196 = int_to_ptr v195 to ptr u8, !267
        v197 = ptr_to_int v196 to u64, !268
        v198 = get_local ptr { u64, u64, u64 }, __anon_00, !269
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr u64, v199, !270
        store v197 to v200, !271
        v201 = const u64 1
        v202 = get_elem_ptr v198, ptr u64, v201, !272
        store v194 to v202, !273
        v203 = const u64 2
        v204 = get_elem_ptr v198, ptr u64, v203, !274
        v205 = const u64 0
        store v205 to v204, !275
        v206 = asm(buffer: v198) -> { u64, u64, u64 } buffer, !276 {
        }
        v207 = get_local ptr { { u64, u64, u64 } }, __anon_10, !278
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr { u64, u64, u64 }, v208, !279
        store v206 to v209, !280
        v210 = load v207, !281
        br encode_38_block0(v210), !282

        encode_38_block0(v211: { { u64, u64, u64 } }):
        v212 = ptr_to_int v211 to u64, !284
        v213 = int_to_ptr v212 to ptr { { u64, u64, u64 } }, !285
        v214 = const u64 0
        v215 = get_elem_ptr v213, ptr { u64, u64, u64 }, v214, !287
        v216 = load v215, !288
        v217 = asm(buffer: v216) -> { u64, u64, u64 } buffer, !289 {
        }
        v218 = get_local ptr { u64, u64, u64 }, __anon_000, !290
        store v217 to v218, !291
        v219 = const u64 0
        v220 = get_elem_ptr v218, ptr u64, v219, !292
        v221 = load v220, !293
        v222 = int_to_ptr v221 to ptr u8, !294
        v223 = const u64 1
        v224 = get_elem_ptr v218, ptr u64, v223, !295
        v225 = load v224, !296
        v226 = const u64 2
        v227 = get_elem_ptr v218, ptr u64, v226, !297
        v228 = load v227, !298
        v229 = ptr_to_int v222 to u64, !299
        v230 = add v229, v228, !300
        v231 = int_to_ptr v230 to ptr bool, !301
        store v193 to v231, !302
        v232 = const u64 1
        v233 = add v228, v232, !303
        v234 = ptr_to_int v222 to u64, !304
        v235 = get_local ptr { u64, u64, u64 }, __anon_100, !305
        v236 = const u64 0
        v237 = get_elem_ptr v235, ptr u64, v236, !306
        store v234 to v237, !307
        v238 = const u64 1
        v239 = get_elem_ptr v235, ptr u64, v238, !308
        store v225 to v239, !309
        v240 = const u64 2
        v241 = get_elem_ptr v235, ptr u64, v240, !310
        store v233 to v241, !311
        v242 = asm(buffer: v235) -> { u64, u64, u64 } buffer, !312 {
        }
        v243 = get_local ptr { { u64, u64, u64 } }, __anon_20, !314
        v244 = const u64 0
        v245 = get_elem_ptr v243, ptr { u64, u64, u64 }, v244, !315
        store v242 to v245, !316
        v246 = load v243, !317
        br encode_38_block1(v246), !318

        encode_38_block1(v247: { { u64, u64, u64 } }):
        v248 = get_local ptr { { u64, u64, u64 } }, buffer, !320
        store v247 to v248, !321
        v249 = get_local ptr { { u64, u64, u64 } }, buffer, !323
        v250 = load v249, !263
        v251 = ptr_to_int v250 to u64, !325
        v252 = int_to_ptr v251 to ptr { { u64, u64, u64 } }, !326
        v253 = const u64 0
        v254 = get_elem_ptr v252, ptr { u64, u64, u64 }, v253, !327
        v255 = load v254, !328
        v256 = asm(buffer: v255) -> { u64, u64, u64 } buffer, !329 {
        }
        v257 = get_local ptr { u64, u64, u64 }, __anon_01, !330
        store v256 to v257, !331
        v258 = const u64 0
        v259 = get_elem_ptr v257, ptr u64, v258, !332
        v260 = load v259, !333
        v261 = int_to_ptr v260 to ptr u8, !334
        v262 = const u64 1
        v263 = get_elem_ptr v257, ptr u64, v262, !335
        v264 = load v263, !336
        v265 = const u64 2
        v266 = get_elem_ptr v257, ptr u64, v265, !337
        v267 = load v266, !338
        v268 = ptr_to_int v261 to u64, !339
        v269 = get_local ptr { u64, u64 }, __anon_11, !340
        v270 = const u64 0
        v271 = get_elem_ptr v269, ptr u64, v270, !341
        store v268 to v271, !342
        v272 = const u64 1
        v273 = get_elem_ptr v269, ptr u64, v272, !343
        store v267 to v273, !344
        v274 = asm(s: v269) -> slice s, !345 {
        }
        br encode_38_block2(v274), !346

        encode_38_block2(v275: slice):
        br block1(v275), !263

        block1(v276: slice):
        ret slice v276
    }

    fn main_0() -> bool, !347 {
        local [u64; 3] __anon_0
        local { bool, u64 } __anon_1
        local { bool, u64, b256, u8 } __anon_2
        local u64 a
        local u64 b
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br block0(v0), !6

        block0(v1: b256):
        v2 = get_local ptr b256, zero, !8
        store v1 to v2, !8
        v3 = get_local ptr u64, a, !11
        v4 = const u64 1, !13
        store v4 to v3, !11
        v5 = get_local ptr u64, b, !15
        v6 = const u64 1, !17
        store v6 to v5, !15
        v7 = get_local ptr u64, c, !19
        v8 = const u64 1, !21
        store v8 to v7, !19
        v9 = get_local ptr u8, d, !23
        v10 = const u8 1, !25
        store v10 to v9, !23
        v11 = get_local ptr b256, zero, !27
        v12 = load v11
        v13 = get_local ptr b256, e, !29
        store v12 to v13, !29
        v14 = get_local ptr string<11>, f, !32
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !32
        v16 = get_local ptr [u64; 3], __anon_0, !35
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        v19 = const u64 42, !37
        store v19 to v18, !35
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20
        v22 = const u64 42, !37
        store v22 to v21, !35
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23
        v25 = const u64 42, !37
        store v25 to v24, !35
        v26 = load v16
        v27 = get_local ptr [u64; 3], test_array, !41
        store v26 to v27, !41
        v28 = get_local ptr { bool, u64 }, __anon_1, !44
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29
        v31 = const bool false, !46
        store v31 to v30, !44
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32
        v34 = const u64 11, !48
        store v34 to v33, !44
        v35 = load v28
        v36 = get_local ptr { bool, u64 }, test_struct, !50
        store v35 to v36, !50
        v37 = const bool false
        br is_ref_type_9_block0(v37), !348

        is_ref_type_9_block0(v38: bool):
        br block1(v38), !53

        block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !59
        br block2(v41), !59

        block2(v42: bool):
        v43 = call assert_2(v42), !62
        br is_ref_type_9_block04(v37), !349

        is_ref_type_9_block04(v44: bool):
        br block3(v44), !64

        block3(v45: bool):
        v46 = cmp eq v45 v40, !67
        br block5(v46), !67

        block5(v47: bool):
        v48 = call assert_2(v47), !70
        br is_ref_type_9_block07(v37), !350

        is_ref_type_9_block07(v49: bool):
        br block6(v49), !72

        block6(v50: bool):
        v51 = cmp eq v50 v40, !75
        br block8(v51), !75

        block8(v52: bool):
        v53 = call assert_2(v52), !78
        br is_ref_type_11_block0(v37), !351

        is_ref_type_11_block0(v54: bool):
        br block9(v54), !80

        block9(v55: bool):
        v56 = cmp eq v55 v40, !83
        br block10(v56), !83

        block10(v57: bool):
        v58 = call assert_2(v57), !86
        v59 = get_local ptr [u64; 3], test_array, !88
        v60 = load v59
        v61 = const bool true
        br is_ref_type_13_block0(v61), !352

        is_ref_type_13_block0(v62: bool):
        br block11(v62), !90

        block11(v63: bool):
        v64 = call assert_2(v63), !93
        v65 = get_local ptr { bool, u64 }, test_struct, !95
        v66 = load v65
        br is_ref_type_15_block0(v61), !353

        is_ref_type_15_block0(v67: bool):
        br block12(v67), !97

        block12(v68: bool):
        v69 = call assert_2(v68), !100
        v70 = get_local ptr b256, zero, !102
        v71 = load v70
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !104
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !104
        v75 = const bool true, !107
        store v75 to v74, !104
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !104
        v78 = const u64 11, !110
        store v78 to v77, !104
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !104
        store v71 to v80, !104
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !104
        v83 = const u8 255, !115
        store v83 to v82, !104
        v84 = load v72
        br is_ref_type_17_block0(v61), !354

        is_ref_type_17_block0(v85: bool):
        br block13(v85), !117

        block13(v86: bool):
        v87 = call assert_2(v86), !120
        v88 = get_local ptr b256, e, !122
        v89 = load v88
        br is_ref_type_19_block0(v61), !355

        is_ref_type_19_block0(v90: bool):
        br block14(v90), !124

        block14(v91: bool):
        v92 = call assert_2(v91), !127
        v93 = get_local ptr string<11>, f, !129
        v94 = load v93
        br is_ref_type_21_block0(v61), !356

        is_ref_type_21_block0(v95: bool):
        br block15(v95), !131

        block15(v96: bool):
        v97 = call assert_2(v96), !134
        v98 = const u64 8
        br block16(v98), !136

        block16(v99: u64):
        v100 = const u64 8, !138
        v101 = cmp eq v99 v100, !139
        br block17(v101), !139

        block17(v102: bool):
        v103 = call assert_2(v102), !142
        br block18(v98), !144

        block18(v104: u64):
        v105 = const u64 8, !146
        v106 = cmp eq v104 v105, !147
        br block19(v106), !147

        block19(v107: bool):
        v108 = call assert_2(v107), !150
        br block20(v98), !152

        block20(v109: u64):
        v110 = const u64 8, !154
        v111 = cmp eq v109 v110, !155
        br block21(v111), !155

        block21(v112: bool):
        v113 = call assert_2(v112), !158
        v114 = const u64 1
        br block22(v114), !160

        block22(v115: u64):
        v116 = const u64 1, !162
        v117 = cmp eq v115 v116, !163
        br block23(v117), !163

        block23(v118: bool):
        v119 = call assert_2(v118), !166
        v120 = const u64 32
        br block24(v120), !168

        block24(v121: u64):
        v122 = const u64 32, !170
        v123 = cmp eq v121 v122, !171
        br block25(v123), !171

        block25(v124: bool):
        v125 = call assert_2(v124), !174
        v126 = const u64 16
        br block26(v126), !176

        block26(v127: u64):
        v128 = const u64 16, !178
        v129 = cmp eq v127 v128, !179
        br block27(v129), !179

        block27(v130: bool):
        v131 = call assert_2(v130), !182
        v132 = const u64 24
        br block28(v132), !184

        block28(v133: u64):
        v134 = const u64 24, !186
        v135 = cmp eq v133 v134, !187
        br block29(v135), !187

        block29(v136: bool):
        v137 = call assert_2(v136), !190
        br block30(v126), !192

        block30(v138: u64):
        v139 = const u64 16, !194
        v140 = cmp eq v138 v139, !195
        br block31(v140), !195

        block31(v141: bool):
        v142 = call assert_2(v141), !198
        v143 = get_local ptr u64, a, !200
        v144 = load v143
        v145 = const u64 8
        br block32(v145), !202

        block32(v146: u64):
        v147 = const u64 8, !204
        v148 = cmp eq v146 v147, !205
        br block33(v148), !205

        block33(v149: bool):
        v150 = call assert_2(v149), !208
        v151 = get_local ptr u64, b, !210
        v152 = load v151
        br block34(v145), !212

        block34(v153: u64):
        v154 = const u64 8, !214
        v155 = cmp eq v153 v154, !215
        br block35(v155), !215

        block35(v156: bool):
        v157 = call assert_2(v156), !218
        v158 = get_local ptr u64, c, !220
        v159 = load v158
        br block36(v145), !222

        block36(v160: u64):
        v161 = const u64 8, !224
        v162 = cmp eq v160 v161, !225
        br block37(v162), !225

        block37(v163: bool):
        v164 = call assert_2(v163), !228
        v165 = get_local ptr u8, d, !230
        v166 = load v165
        v167 = const u64 1
        br block38(v167), !232

        block38(v168: u64):
        v169 = const u64 1, !234
        v170 = cmp eq v168 v169, !235
        br block39(v170), !235

        block39(v171: bool):
        v172 = call assert_2(v171), !238
        v173 = get_local ptr b256, e, !240
        v174 = load v173
        v175 = const u64 32
        br block40(v175), !242

        block40(v176: u64):
        v177 = const u64 32, !244
        v178 = cmp eq v176 v177, !245
        br block41(v178), !245

        block41(v179: bool):
        v180 = call assert_2(v179), !248
        v181 = get_local ptr string<11>, f, !250
        v182 = load v181
        v183 = const u64 16
        br block42(v183), !252

        block42(v184: u64):
        v185 = const u64 16, !254
        v186 = cmp eq v184 v185, !255
        br block43(v186), !255

        block43(v187: bool):
        v188 = call assert_2(v187), !258
        v189 = const bool true, !260
        ret bool v189
    }

    pub fn min_1() -> b256, !357 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        ret b256 v0
    }

    pub fn assert_2(condition !359: bool) -> (), !360 {
        entry(condition: bool):
        v0 = const bool false, !58
        v1 = cmp eq condition v0, !361
        br block3(v1), !361

        block3(v2: bool):
        cbr v2, block0(), block1(), !361

        block0():
        v3 = const u64 18446744073709486084, !363
        revert v3, !367

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }

    pub fn not_3(self !368: bool) -> bool, !369 {
        entry(self: bool):
        v0 = const bool false, !58
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_4(code !370: u64) -> never, !371 {
        entry(code: u64):
        revert code, !366
    }

    fn is_ref_type_5(_param !372: u64) -> bool, !373 {
        entry(_param: u64):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_6() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_7(_param !372: u64) -> bool, !373 {
        entry(_param: u64):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_8() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_9(_param !372: u64) -> bool, !373 {
        entry(_param: u64):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_10() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_11(_param !372: u8) -> bool, !373 {
        entry(_param: u8):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_12() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_13(_param !372: [u64; 3]) -> bool, !373 {
        entry(_param: [u64; 3]):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_14() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_15(_param !372: { bool, u64 }) -> bool, !373 {
        entry(_param: { bool, u64 }):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_16() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_17(_param !372: { bool, u64, b256, u8 }) -> bool, !373 {
        entry(_param: { bool, u64, b256, u8 }):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_18() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_19(_param !372: b256) -> bool, !373 {
        entry(_param: b256):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_20() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_21(_param !372: string<11>) -> bool, !373 {
        entry(_param: string<11>):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_22() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    pub fn eq_23(self !376: u64, other !377: u64) -> bool, !378 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn size_of_24() -> u64, !379 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_25() -> u64, !379 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_26() -> u64, !379 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_27() -> u64, !379 {
        entry():
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_28() -> u64, !379 {
        entry():
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_29() -> u64, !379 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_30() -> u64, !379 {
        entry():
        v0 = const u64 24
        ret u64 v0
    }

    pub fn size_of_31() -> u64, !379 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_val_32(val !380: u64) -> u64, !381 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_33(val !380: u64) -> u64, !381 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_34(val !380: u64) -> u64, !381 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_35(val !380: u8) -> u64, !381 {
        entry(val: u8):
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_val_36(val !380: b256) -> u64, !381 {
        entry(val: b256):
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_val_37(val !380: string<11>) -> u64, !381 {
        entry(val: string<11>):
        v0 = const u64 16
        ret u64 v0
    }

    pub fn encode_38(item !382: bool) -> slice, !383 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64, u64 } __anon_10
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_2
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp, !265 {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8, !265
        v3 = ptr_to_int v2 to u64, !265
        v4 = get_local ptr { u64, u64, u64 }, __anon_0, !265
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !265
        store v3 to v6, !265
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !265
        store v0 to v8, !265
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9, !265
        v11 = const u64 0
        store v11 to v10, !265
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer, !265 {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !384
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14, !265
        store v12 to v15, !385
        v16 = load v13, !265
        br block0(v16), !265

        block0(v17: { { u64, u64, u64 } }):
        v18 = ptr_to_int v17 to u64, !283
        v19 = int_to_ptr v18 to ptr { { u64, u64, u64 } }, !283
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { u64, u64, u64 }, v20, !386
        v22 = load v21, !283
        v23 = asm(buffer: v22) -> { u64, u64, u64 } buffer, !283 {
        }
        v24 = get_local ptr { u64, u64, u64 }, __anon_00, !283
        store v23 to v24, !283
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !283
        v27 = load v26, !283
        v28 = int_to_ptr v27 to ptr u8, !283
        v29 = const u64 1
        v30 = get_elem_ptr v24, ptr u64, v29, !283
        v31 = load v30, !283
        v32 = const u64 2
        v33 = get_elem_ptr v24, ptr u64, v32, !283
        v34 = load v33, !283
        v35 = ptr_to_int v28 to u64, !283
        v36 = add v35, v34, !283
        v37 = int_to_ptr v36 to ptr bool, !283
        store item to v37, !283
        v38 = const u64 1
        v39 = add v34, v38, !283
        v40 = ptr_to_int v28 to u64, !283
        v41 = get_local ptr { u64, u64, u64 }, __anon_10, !283
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !283
        store v40 to v43, !283
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr u64, v44, !283
        store v31 to v45, !283
        v46 = const u64 2
        v47 = get_elem_ptr v41, ptr u64, v46, !283
        store v39 to v47, !283
        v48 = asm(buffer: v41) -> { u64, u64, u64 } buffer, !283 {
        }
        v49 = get_local ptr { { u64, u64, u64 } }, __anon_2, !387
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { u64, u64, u64 }, v50, !283
        store v48 to v51, !388
        v52 = load v49, !283
        br block1(v52), !283

        block1(v53: { { u64, u64, u64 } }):
        v54 = get_local ptr { { u64, u64, u64 } }, buffer, !319
        store v53 to v54, !319
        v55 = get_local ptr { { u64, u64, u64 } }, buffer, !322
        v56 = load v55
        v57 = ptr_to_int v56 to u64, !324
        v58 = int_to_ptr v57 to ptr { { u64, u64, u64 } }, !324
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64, u64 }, v59, !389
        v61 = load v60, !324
        v62 = asm(buffer: v61) -> { u64, u64, u64 } buffer, !324 {
        }
        v63 = get_local ptr { u64, u64, u64 }, __anon_01, !324
        store v62 to v63, !324
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !324
        v66 = load v65, !324
        v67 = int_to_ptr v66 to ptr u8, !324
        v68 = const u64 1
        v69 = get_elem_ptr v63, ptr u64, v68, !324
        v70 = load v69, !324
        v71 = const u64 2
        v72 = get_elem_ptr v63, ptr u64, v71, !324
        v73 = load v72, !324
        v74 = ptr_to_int v67 to u64, !324
        v75 = get_local ptr { u64, u64 }, __anon_11, !324
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr u64, v76, !324
        store v74 to v77, !324
        v78 = const u64 1
        v79 = get_elem_ptr v75, ptr u64, v78, !324
        store v73 to v79, !324
        v80 = asm(s: v75) -> slice s, !324 {
        }
        br block2(v80), !324

        block2(v81: slice):
        ret slice v81
    }

    pub fn abi_encode_39(self !390: bool, buffer !391: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !392 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !286
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !313
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !313
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_40() -> { { u64, u64, u64 } }, !393 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !277
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !277
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_41(self !394: { { u64, u64, u64 } }) -> slice, !395 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !286
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!3 = span !2 7904 7970
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 199 210
!7 = (!4 !6)
!8 = span !5 188 211
!9 = (!4 !8)
!10 = (!4 !8)
!11 = span !5 216 231
!12 = (!4 !11)
!13 = span !5 229 230
!14 = (!4 !11)
!15 = span !5 236 251
!16 = (!4 !15)
!17 = span !5 249 250
!18 = (!4 !15)
!19 = span !5 256 271
!20 = (!4 !19)
!21 = span !5 269 270
!22 = (!4 !19)
!23 = span !5 276 290
!24 = (!4 !23)
!25 = span !5 288 289
!26 = (!4 !23)
!27 = span !5 309 313
!28 = (!4 !27)
!29 = span !5 295 314
!30 = (!4 !29)
!31 = (!4 !29)
!32 = span !5 319 366
!33 = (!4 !32)
!34 = (!4 !32)
!35 = span !5 389 399
!36 = (!4 !35)
!37 = span !5 390 395
!38 = (!4 !35)
!39 = (!4 !35)
!40 = (!4 !35)
!41 = span !5 372 400
!42 = (!4 !41)
!43 = (!4 !41)
!44 = span !5 424 487
!45 = (!4 !44)
!46 = span !5 454 459
!47 = (!4 !44)
!48 = span !5 478 480
!49 = (!4 !44)
!50 = span !5 406 488
!51 = (!4 !50)
!52 = (!4 !50)
!53 = span !5 502 520
!54 = span !5 136 160
!55 = (!4 !53 !54)
!56 = (!4 !53)
!57 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!58 = span !57 9991 9996
!59 = span !5 501 520
!60 = (!4 !59)
!61 = (!4 !59)
!62 = span !5 494 521
!63 = (!4 !62)
!64 = span !5 535 553
!65 = (!4 !64 !54)
!66 = (!4 !64)
!67 = span !5 534 553
!68 = (!4 !67)
!69 = (!4 !67)
!70 = span !5 527 554
!71 = (!4 !70)
!72 = span !5 568 586
!73 = (!4 !72 !54)
!74 = (!4 !72)
!75 = span !5 567 586
!76 = (!4 !75)
!77 = (!4 !75)
!78 = span !5 560 587
!79 = (!4 !78)
!80 = span !5 601 618
!81 = (!4 !80 !54)
!82 = (!4 !80)
!83 = span !5 600 618
!84 = (!4 !83)
!85 = (!4 !83)
!86 = span !5 593 619
!87 = (!4 !86)
!88 = span !5 644 654
!89 = (!4 !88)
!90 = span !5 632 655
!91 = (!4 !90 !54)
!92 = (!4 !90)
!93 = span !5 625 656
!94 = (!4 !93)
!95 = span !5 681 692
!96 = (!4 !95)
!97 = span !5 669 693
!98 = (!4 !97 !54)
!99 = (!4 !97)
!100 = span !5 662 694
!101 = (!4 !100)
!102 = span !5 730 734
!103 = (!4 !102)
!104 = span !5 719 742
!105 = (!4 !104)
!106 = (!4 !104)
!107 = span !5 720 724
!108 = (!4 !104)
!109 = (!4 !104)
!110 = span !5 726 728
!111 = (!4 !104)
!112 = (!4 !104)
!113 = (!4 !104)
!114 = (!4 !104)
!115 = span !5 736 741
!116 = (!4 !104)
!117 = span !5 707 743
!118 = (!4 !117 !54)
!119 = (!4 !117)
!120 = span !5 700 744
!121 = (!4 !120)
!122 = span !5 769 770
!123 = (!4 !122)
!124 = span !5 757 771
!125 = (!4 !124 !54)
!126 = (!4 !124)
!127 = span !5 750 772
!128 = (!4 !127)
!129 = span !5 797 798
!130 = (!4 !129)
!131 = span !5 785 799
!132 = (!4 !131 !54)
!133 = (!4 !131)
!134 = span !5 778 800
!135 = (!4 !134)
!136 = span !5 814 830
!137 = (!4 !136)
!138 = span !5 834 835
!139 = span !5 814 835
!140 = (!4 !139)
!141 = (!4 !139)
!142 = span !5 807 836
!143 = (!4 !142)
!144 = span !5 849 865
!145 = (!4 !144)
!146 = span !5 869 870
!147 = span !5 849 870
!148 = (!4 !147)
!149 = (!4 !147)
!150 = span !5 842 871
!151 = (!4 !150)
!152 = span !5 884 900
!153 = (!4 !152)
!154 = span !5 904 905
!155 = span !5 884 905
!156 = (!4 !155)
!157 = (!4 !155)
!158 = span !5 877 906
!159 = (!4 !158)
!160 = span !5 919 934
!161 = (!4 !160)
!162 = span !5 938 939
!163 = span !5 919 939
!164 = (!4 !163)
!165 = (!4 !163)
!166 = span !5 912 940
!167 = (!4 !166)
!168 = span !5 953 970
!169 = (!4 !168)
!170 = span !5 974 976
!171 = span !5 953 976
!172 = (!4 !171)
!173 = (!4 !171)
!174 = span !5 946 977
!175 = (!4 !174)
!176 = span !5 990 1010
!177 = (!4 !176)
!178 = span !5 1014 1016
!179 = span !5 990 1016
!180 = (!4 !179)
!181 = (!4 !179)
!182 = span !5 983 1017
!183 = (!4 !182)
!184 = span !5 1030 1051
!185 = (!4 !184)
!186 = span !5 1055 1057
!187 = span !5 1030 1057
!188 = (!4 !187)
!189 = (!4 !187)
!190 = span !5 1023 1058
!191 = (!4 !190)
!192 = span !5 1071 1094
!193 = (!4 !192)
!194 = span !5 1098 1100
!195 = span !5 1071 1100
!196 = (!4 !195)
!197 = (!4 !195)
!198 = span !5 1064 1101
!199 = (!4 !198)
!200 = span !5 1127 1128
!201 = (!4 !200)
!202 = span !5 1115 1129
!203 = (!4 !202)
!204 = span !5 1133 1134
!205 = span !5 1115 1134
!206 = (!4 !205)
!207 = (!4 !205)
!208 = span !5 1108 1135
!209 = (!4 !208)
!210 = span !5 1160 1161
!211 = (!4 !210)
!212 = span !5 1148 1162
!213 = (!4 !212)
!214 = span !5 1166 1167
!215 = span !5 1148 1167
!216 = (!4 !215)
!217 = (!4 !215)
!218 = span !5 1141 1168
!219 = (!4 !218)
!220 = span !5 1193 1194
!221 = (!4 !220)
!222 = span !5 1181 1195
!223 = (!4 !222)
!224 = span !5 1199 1200
!225 = span !5 1181 1200
!226 = (!4 !225)
!227 = (!4 !225)
!228 = span !5 1174 1201
!229 = (!4 !228)
!230 = span !5 1226 1227
!231 = (!4 !230)
!232 = span !5 1214 1228
!233 = (!4 !232)
!234 = span !5 1232 1233
!235 = span !5 1214 1233
!236 = (!4 !235)
!237 = (!4 !235)
!238 = span !5 1207 1234
!239 = (!4 !238)
!240 = span !5 1259 1260
!241 = (!4 !240)
!242 = span !5 1247 1261
!243 = (!4 !242)
!244 = span !5 1265 1267
!245 = span !5 1247 1267
!246 = (!4 !245)
!247 = (!4 !245)
!248 = span !5 1240 1268
!249 = (!4 !248)
!250 = span !5 1293 1294
!251 = (!4 !250)
!252 = span !5 1281 1295
!253 = (!4 !252)
!254 = span !5 1299 1301
!255 = span !5 1281 1301
!256 = (!4 !255)
!257 = (!4 !255)
!258 = span !5 1274 1302
!259 = (!4 !258)
!260 = span !5 1309 1313
!261 = span !0 48 74
!262 = span !0 107 113
!263 = span !0 92 114
!264 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!265 = span !264 64237 64250
!266 = (!263 !265)
!267 = (!263 !265)
!268 = (!263 !265)
!269 = (!263 !265)
!270 = (!263 !265)
!271 = (!263 !265)
!272 = (!263 !265)
!273 = (!263 !265)
!274 = (!263 !265)
!275 = (!263 !265)
!276 = (!263 !265)
!277 = span !264 159 222
!278 = (!263 !265 !277)
!279 = (!263 !265)
!280 = (!263 !265 !277)
!281 = (!263 !265)
!282 = (!263 !265)
!283 = span !264 64221 64251
!284 = (!263 !283)
!285 = (!263 !283)
!286 = span !264 55 82
!287 = (!263 !283 !286)
!288 = (!263 !283)
!289 = (!263 !283)
!290 = (!263 !283)
!291 = (!263 !283)
!292 = (!263 !283)
!293 = (!263 !283)
!294 = (!263 !283)
!295 = (!263 !283)
!296 = (!263 !283)
!297 = (!263 !283)
!298 = (!263 !283)
!299 = (!263 !283)
!300 = (!263 !283)
!301 = (!263 !283)
!302 = (!263 !283)
!303 = (!263 !283)
!304 = (!263 !283)
!305 = (!263 !283)
!306 = (!263 !283)
!307 = (!263 !283)
!308 = (!263 !283)
!309 = (!263 !283)
!310 = (!263 !283)
!311 = (!263 !283)
!312 = (!263 !283)
!313 = span !264 3836 3919
!314 = (!263 !283 !313)
!315 = (!263 !283)
!316 = (!263 !283 !313)
!317 = (!263 !283)
!318 = (!263 !283)
!319 = span !264 64208 64252
!320 = (!263 !319)
!321 = (!263 !319)
!322 = span !264 64257 64263
!323 = (!263 !322)
!324 = span !264 64257 64278
!325 = (!263 !324)
!326 = (!263 !324)
!327 = (!263 !324 !286)
!328 = (!263 !324)
!329 = (!263 !324)
!330 = (!263 !324)
!331 = (!263 !324)
!332 = (!263 !324)
!333 = (!263 !324)
!334 = (!263 !324)
!335 = (!263 !324)
!336 = (!263 !324)
!337 = (!263 !324)
!338 = (!263 !324)
!339 = (!263 !324)
!340 = (!263 !324)
!341 = (!263 !324)
!342 = (!263 !324)
!343 = (!263 !324)
!344 = (!263 !324)
!345 = (!263 !324)
!346 = (!263 !324)
!347 = span !5 164 1315
!348 = (!53 !54)
!349 = (!64 !54)
!350 = (!72 !54)
!351 = (!80 !54)
!352 = (!90 !54)
!353 = (!97 !54)
!354 = (!117 !54)
!355 = (!124 !54)
!356 = (!131 !54)
!357 = span !2 7873 7976
!358 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!359 = span !358 935 944
!360 = span !358 921 1019
!361 = span !358 961 971
!362 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!363 = span !362 1038 1059
!364 = span !358 982 1010
!365 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!366 = span !365 691 705
!367 = (!364 !366)
!368 = span !57 9956 9960
!369 = span !57 9949 10003
!370 = span !365 669 673
!371 = span !365 655 707
!372 = span !5 111 117
!373 = span !5 93 162
!374 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/intrinsics.sw"
!375 = span !374 397 469
!376 = span !57 12645 12649
!377 = span !57 12651 12656
!378 = span !57 12639 12705
!379 = span !374 913 964
!380 = span !374 1572 1575
!381 = span !374 1550 1618
!382 = span !264 64156 64160
!383 = span !264 64139 64280
!384 = (!265 !277)
!385 = (!265 !277)
!386 = (!283 !286)
!387 = (!283 !313)
!388 = (!283 !313)
!389 = (!324 !286)
!390 = span !264 3794 3798
!391 = span !264 3800 3806
!392 = span !264 3780 3925
!393 = span !264 128 228
!394 = span !264 281 285
!395 = span !264 265 357

// IR: [fn-dce] Dead function elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br main_0_block0(v0), !7

        main_0_block0(v1: b256):
        v2 = get_local ptr b256, zero, !9
        store v1 to v2, !10
        v3 = get_local ptr u64, a, !12
        v4 = const u64 1, !13
        store v4 to v3, !14
        v5 = get_local ptr u64, b, !16
        v6 = const u64 1, !17
        store v6 to v5, !18
        v7 = get_local ptr u64, c, !20
        v8 = const u64 1, !21
        store v8 to v7, !22
        v9 = get_local ptr u8, d, !24
        v10 = const u8 1, !25
        store v10 to v9, !26
        v11 = get_local ptr b256, zero, !28
        v12 = load v11, !4
        v13 = get_local ptr b256, e, !30
        store v12 to v13, !31
        v14 = get_local ptr string<11>, f, !33
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !34
        v16 = get_local ptr [u64; 3], __anon_0, !36
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !4
        v19 = const u64 42, !37
        store v19 to v18, !38
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20, !4
        v22 = const u64 42, !37
        store v22 to v21, !39
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23, !4
        v25 = const u64 42, !37
        store v25 to v24, !40
        v26 = load v16, !4
        v27 = get_local ptr [u64; 3], test_array, !42
        store v26 to v27, !43
        v28 = get_local ptr { bool, u64 }, __anon_1, !45
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29, !4
        v31 = const bool false, !46
        store v31 to v30, !47
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32, !4
        v34 = const u64 11, !48
        store v34 to v33, !49
        v35 = load v28, !4
        v36 = get_local ptr { bool, u64 }, test_struct, !51
        store v35 to v36, !52
        v37 = const bool false
        br main_0_is_ref_type_9_block0(v37), !55

        main_0_is_ref_type_9_block0(v38: bool):
        br main_0_block1(v38), !56

        main_0_block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !60
        br main_0_block2(v41), !61

        main_0_block2(v42: bool):
        v43 = call assert_2(v42), !63
        br main_0_is_ref_type_9_block04(v37), !65

        main_0_is_ref_type_9_block04(v44: bool):
        br main_0_block3(v44), !66

        main_0_block3(v45: bool):
        v46 = cmp eq v45 v40, !68
        br main_0_block5(v46), !69

        main_0_block5(v47: bool):
        v48 = call assert_2(v47), !71
        br main_0_is_ref_type_9_block07(v37), !73

        main_0_is_ref_type_9_block07(v49: bool):
        br main_0_block6(v49), !74

        main_0_block6(v50: bool):
        v51 = cmp eq v50 v40, !76
        br main_0_block8(v51), !77

        main_0_block8(v52: bool):
        v53 = call assert_2(v52), !79
        br main_0_is_ref_type_11_block0(v37), !81

        main_0_is_ref_type_11_block0(v54: bool):
        br main_0_block9(v54), !82

        main_0_block9(v55: bool):
        v56 = cmp eq v55 v40, !84
        br main_0_block10(v56), !85

        main_0_block10(v57: bool):
        v58 = call assert_2(v57), !87
        v59 = get_local ptr [u64; 3], test_array, !89
        v60 = load v59, !4
        v61 = const bool true
        br main_0_is_ref_type_13_block0(v61), !91

        main_0_is_ref_type_13_block0(v62: bool):
        br main_0_block11(v62), !92

        main_0_block11(v63: bool):
        v64 = call assert_2(v63), !94
        v65 = get_local ptr { bool, u64 }, test_struct, !96
        v66 = load v65, !4
        br main_0_is_ref_type_15_block0(v61), !98

        main_0_is_ref_type_15_block0(v67: bool):
        br main_0_block12(v67), !99

        main_0_block12(v68: bool):
        v69 = call assert_2(v68), !101
        v70 = get_local ptr b256, zero, !103
        v71 = load v70, !4
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !105
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !106
        v75 = const bool true, !107
        store v75 to v74, !108
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !109
        v78 = const u64 11, !110
        store v78 to v77, !111
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !112
        store v71 to v80, !113
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !114
        v83 = const u8 255, !115
        store v83 to v82, !116
        v84 = load v72, !4
        br main_0_is_ref_type_17_block0(v61), !118

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !119

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !121
        v88 = get_local ptr b256, e, !123
        v89 = load v88, !4
        br main_0_is_ref_type_19_block0(v61), !125

        main_0_is_ref_type_19_block0(v90: bool):
        br main_0_block14(v90), !126

        main_0_block14(v91: bool):
        v92 = call assert_2(v91), !128
        v93 = get_local ptr string<11>, f, !130
        v94 = load v93, !4
        br main_0_is_ref_type_21_block0(v61), !132

        main_0_is_ref_type_21_block0(v95: bool):
        br main_0_block15(v95), !133

        main_0_block15(v96: bool):
        v97 = call assert_2(v96), !135
        v98 = const u64 8
        br main_0_block16(v98), !137

        main_0_block16(v99: u64):
        v100 = const u64 8, !138
        v101 = cmp eq v99 v100, !140
        br main_0_block17(v101), !141

        main_0_block17(v102: bool):
        v103 = call assert_2(v102), !143
        br main_0_block18(v98), !145

        main_0_block18(v104: u64):
        v105 = const u64 8, !146
        v106 = cmp eq v104 v105, !148
        br main_0_block19(v106), !149

        main_0_block19(v107: bool):
        v108 = call assert_2(v107), !151
        br main_0_block20(v98), !153

        main_0_block20(v109: u64):
        v110 = const u64 8, !154
        v111 = cmp eq v109 v110, !156
        br main_0_block21(v111), !157

        main_0_block21(v112: bool):
        v113 = call assert_2(v112), !159
        v114 = const u64 1
        br main_0_block22(v114), !161

        main_0_block22(v115: u64):
        v116 = const u64 1, !162
        v117 = cmp eq v115 v116, !164
        br main_0_block23(v117), !165

        main_0_block23(v118: bool):
        v119 = call assert_2(v118), !167
        v120 = const u64 32
        br main_0_block24(v120), !169

        main_0_block24(v121: u64):
        v122 = const u64 32, !170
        v123 = cmp eq v121 v122, !172
        br main_0_block25(v123), !173

        main_0_block25(v124: bool):
        v125 = call assert_2(v124), !175
        v126 = const u64 16
        br main_0_block26(v126), !177

        main_0_block26(v127: u64):
        v128 = const u64 16, !178
        v129 = cmp eq v127 v128, !180
        br main_0_block27(v129), !181

        main_0_block27(v130: bool):
        v131 = call assert_2(v130), !183
        v132 = const u64 24
        br main_0_block28(v132), !185

        main_0_block28(v133: u64):
        v134 = const u64 24, !186
        v135 = cmp eq v133 v134, !188
        br main_0_block29(v135), !189

        main_0_block29(v136: bool):
        v137 = call assert_2(v136), !191
        br main_0_block30(v126), !193

        main_0_block30(v138: u64):
        v139 = const u64 16, !194
        v140 = cmp eq v138 v139, !196
        br main_0_block31(v140), !197

        main_0_block31(v141: bool):
        v142 = call assert_2(v141), !199
        v143 = get_local ptr u64, a, !201
        v144 = load v143, !4
        v145 = const u64 8
        br main_0_block32(v145), !203

        main_0_block32(v146: u64):
        v147 = const u64 8, !204
        v148 = cmp eq v146 v147, !206
        br main_0_block33(v148), !207

        main_0_block33(v149: bool):
        v150 = call assert_2(v149), !209
        v151 = get_local ptr u64, b, !211
        v152 = load v151, !4
        br main_0_block34(v145), !213

        main_0_block34(v153: u64):
        v154 = const u64 8, !214
        v155 = cmp eq v153 v154, !216
        br main_0_block35(v155), !217

        main_0_block35(v156: bool):
        v157 = call assert_2(v156), !219
        v158 = get_local ptr u64, c, !221
        v159 = load v158, !4
        br main_0_block36(v145), !223

        main_0_block36(v160: u64):
        v161 = const u64 8, !224
        v162 = cmp eq v160 v161, !226
        br main_0_block37(v162), !227

        main_0_block37(v163: bool):
        v164 = call assert_2(v163), !229
        v165 = get_local ptr u8, d, !231
        v166 = load v165, !4
        v167 = const u64 1
        br main_0_block38(v167), !233

        main_0_block38(v168: u64):
        v169 = const u64 1, !234
        v170 = cmp eq v168 v169, !236
        br main_0_block39(v170), !237

        main_0_block39(v171: bool):
        v172 = call assert_2(v171), !239
        v173 = get_local ptr b256, e, !241
        v174 = load v173, !4
        v175 = const u64 32
        br main_0_block40(v175), !243

        main_0_block40(v176: u64):
        v177 = const u64 32, !244
        v178 = cmp eq v176 v177, !246
        br main_0_block41(v178), !247

        main_0_block41(v179: bool):
        v180 = call assert_2(v179), !249
        v181 = get_local ptr string<11>, f, !251
        v182 = load v181, !4
        v183 = const u64 16
        br main_0_block42(v183), !253

        main_0_block42(v184: u64):
        v185 = const u64 16, !254
        v186 = cmp eq v184 v185, !256
        br main_0_block43(v186), !257

        main_0_block43(v187: bool):
        v188 = call assert_2(v187), !259
        v189 = const bool true, !260
        br block0(v189), !4

        block0(v190: bool):
        v191 = get_local ptr bool, result, !261
        store v190 to v191, !261
        v192 = get_local ptr bool, result, !262
        v193 = load v192
        v194 = const u64 1024
        v195 = asm(cap: v194) -> u64 hp, !266 {
            aloc   cap
        }
        v196 = int_to_ptr v195 to ptr u8, !267
        v197 = ptr_to_int v196 to u64, !268
        v198 = get_local ptr { u64, u64, u64 }, __anon_00, !269
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr u64, v199, !270
        store v197 to v200, !271
        v201 = const u64 1
        v202 = get_elem_ptr v198, ptr u64, v201, !272
        store v194 to v202, !273
        v203 = const u64 2
        v204 = get_elem_ptr v198, ptr u64, v203, !274
        v205 = const u64 0
        store v205 to v204, !275
        v206 = asm(buffer: v198) -> { u64, u64, u64 } buffer, !276 {
        }
        v207 = get_local ptr { { u64, u64, u64 } }, __anon_10, !278
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr { u64, u64, u64 }, v208, !279
        store v206 to v209, !280
        v210 = load v207, !281
        br encode_38_block0(v210), !282

        encode_38_block0(v211: { { u64, u64, u64 } }):
        v212 = ptr_to_int v211 to u64, !284
        v213 = int_to_ptr v212 to ptr { { u64, u64, u64 } }, !285
        v214 = const u64 0
        v215 = get_elem_ptr v213, ptr { u64, u64, u64 }, v214, !287
        v216 = load v215, !288
        v217 = asm(buffer: v216) -> { u64, u64, u64 } buffer, !289 {
        }
        v218 = get_local ptr { u64, u64, u64 }, __anon_000, !290
        store v217 to v218, !291
        v219 = const u64 0
        v220 = get_elem_ptr v218, ptr u64, v219, !292
        v221 = load v220, !293
        v222 = int_to_ptr v221 to ptr u8, !294
        v223 = const u64 1
        v224 = get_elem_ptr v218, ptr u64, v223, !295
        v225 = load v224, !296
        v226 = const u64 2
        v227 = get_elem_ptr v218, ptr u64, v226, !297
        v228 = load v227, !298
        v229 = ptr_to_int v222 to u64, !299
        v230 = add v229, v228, !300
        v231 = int_to_ptr v230 to ptr bool, !301
        store v193 to v231, !302
        v232 = const u64 1
        v233 = add v228, v232, !303
        v234 = ptr_to_int v222 to u64, !304
        v235 = get_local ptr { u64, u64, u64 }, __anon_100, !305
        v236 = const u64 0
        v237 = get_elem_ptr v235, ptr u64, v236, !306
        store v234 to v237, !307
        v238 = const u64 1
        v239 = get_elem_ptr v235, ptr u64, v238, !308
        store v225 to v239, !309
        v240 = const u64 2
        v241 = get_elem_ptr v235, ptr u64, v240, !310
        store v233 to v241, !311
        v242 = asm(buffer: v235) -> { u64, u64, u64 } buffer, !312 {
        }
        v243 = get_local ptr { { u64, u64, u64 } }, __anon_20, !314
        v244 = const u64 0
        v245 = get_elem_ptr v243, ptr { u64, u64, u64 }, v244, !315
        store v242 to v245, !316
        v246 = load v243, !317
        br encode_38_block1(v246), !318

        encode_38_block1(v247: { { u64, u64, u64 } }):
        v248 = get_local ptr { { u64, u64, u64 } }, buffer, !320
        store v247 to v248, !321
        v249 = get_local ptr { { u64, u64, u64 } }, buffer, !323
        v250 = load v249, !263
        v251 = ptr_to_int v250 to u64, !325
        v252 = int_to_ptr v251 to ptr { { u64, u64, u64 } }, !326
        v253 = const u64 0
        v254 = get_elem_ptr v252, ptr { u64, u64, u64 }, v253, !327
        v255 = load v254, !328
        v256 = asm(buffer: v255) -> { u64, u64, u64 } buffer, !329 {
        }
        v257 = get_local ptr { u64, u64, u64 }, __anon_01, !330
        store v256 to v257, !331
        v258 = const u64 0
        v259 = get_elem_ptr v257, ptr u64, v258, !332
        v260 = load v259, !333
        v261 = int_to_ptr v260 to ptr u8, !334
        v262 = const u64 1
        v263 = get_elem_ptr v257, ptr u64, v262, !335
        v264 = load v263, !336
        v265 = const u64 2
        v266 = get_elem_ptr v257, ptr u64, v265, !337
        v267 = load v266, !338
        v268 = ptr_to_int v261 to u64, !339
        v269 = get_local ptr { u64, u64 }, __anon_11, !340
        v270 = const u64 0
        v271 = get_elem_ptr v269, ptr u64, v270, !341
        store v268 to v271, !342
        v272 = const u64 1
        v273 = get_elem_ptr v269, ptr u64, v272, !343
        store v267 to v273, !344
        v274 = asm(s: v269) -> slice s, !345 {
        }
        br encode_38_block2(v274), !346

        encode_38_block2(v275: slice):
        br block1(v275), !263

        block1(v276: slice):
        ret slice v276
    }

    pub fn assert_2(condition !348: bool) -> (), !349 {
        entry(condition: bool):
        v0 = const bool false, !58
        v1 = cmp eq condition v0, !350
        br block3(v1), !350

        block3(v2: bool):
        cbr v2, block0(), block1(), !350

        block0():
        v3 = const u64 18446744073709486084, !352
        revert v3, !356

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!3 = span !2 7904 7970
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 199 210
!7 = (!4 !6)
!8 = span !5 188 211
!9 = (!4 !8)
!10 = (!4 !8)
!11 = span !5 216 231
!12 = (!4 !11)
!13 = span !5 229 230
!14 = (!4 !11)
!15 = span !5 236 251
!16 = (!4 !15)
!17 = span !5 249 250
!18 = (!4 !15)
!19 = span !5 256 271
!20 = (!4 !19)
!21 = span !5 269 270
!22 = (!4 !19)
!23 = span !5 276 290
!24 = (!4 !23)
!25 = span !5 288 289
!26 = (!4 !23)
!27 = span !5 309 313
!28 = (!4 !27)
!29 = span !5 295 314
!30 = (!4 !29)
!31 = (!4 !29)
!32 = span !5 319 366
!33 = (!4 !32)
!34 = (!4 !32)
!35 = span !5 389 399
!36 = (!4 !35)
!37 = span !5 390 395
!38 = (!4 !35)
!39 = (!4 !35)
!40 = (!4 !35)
!41 = span !5 372 400
!42 = (!4 !41)
!43 = (!4 !41)
!44 = span !5 424 487
!45 = (!4 !44)
!46 = span !5 454 459
!47 = (!4 !44)
!48 = span !5 478 480
!49 = (!4 !44)
!50 = span !5 406 488
!51 = (!4 !50)
!52 = (!4 !50)
!53 = span !5 502 520
!54 = span !5 136 160
!55 = (!4 !53 !54)
!56 = (!4 !53)
!57 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!58 = span !57 9991 9996
!59 = span !5 501 520
!60 = (!4 !59)
!61 = (!4 !59)
!62 = span !5 494 521
!63 = (!4 !62)
!64 = span !5 535 553
!65 = (!4 !64 !54)
!66 = (!4 !64)
!67 = span !5 534 553
!68 = (!4 !67)
!69 = (!4 !67)
!70 = span !5 527 554
!71 = (!4 !70)
!72 = span !5 568 586
!73 = (!4 !72 !54)
!74 = (!4 !72)
!75 = span !5 567 586
!76 = (!4 !75)
!77 = (!4 !75)
!78 = span !5 560 587
!79 = (!4 !78)
!80 = span !5 601 618
!81 = (!4 !80 !54)
!82 = (!4 !80)
!83 = span !5 600 618
!84 = (!4 !83)
!85 = (!4 !83)
!86 = span !5 593 619
!87 = (!4 !86)
!88 = span !5 644 654
!89 = (!4 !88)
!90 = span !5 632 655
!91 = (!4 !90 !54)
!92 = (!4 !90)
!93 = span !5 625 656
!94 = (!4 !93)
!95 = span !5 681 692
!96 = (!4 !95)
!97 = span !5 669 693
!98 = (!4 !97 !54)
!99 = (!4 !97)
!100 = span !5 662 694
!101 = (!4 !100)
!102 = span !5 730 734
!103 = (!4 !102)
!104 = span !5 719 742
!105 = (!4 !104)
!106 = (!4 !104)
!107 = span !5 720 724
!108 = (!4 !104)
!109 = (!4 !104)
!110 = span !5 726 728
!111 = (!4 !104)
!112 = (!4 !104)
!113 = (!4 !104)
!114 = (!4 !104)
!115 = span !5 736 741
!116 = (!4 !104)
!117 = span !5 707 743
!118 = (!4 !117 !54)
!119 = (!4 !117)
!120 = span !5 700 744
!121 = (!4 !120)
!122 = span !5 769 770
!123 = (!4 !122)
!124 = span !5 757 771
!125 = (!4 !124 !54)
!126 = (!4 !124)
!127 = span !5 750 772
!128 = (!4 !127)
!129 = span !5 797 798
!130 = (!4 !129)
!131 = span !5 785 799
!132 = (!4 !131 !54)
!133 = (!4 !131)
!134 = span !5 778 800
!135 = (!4 !134)
!136 = span !5 814 830
!137 = (!4 !136)
!138 = span !5 834 835
!139 = span !5 814 835
!140 = (!4 !139)
!141 = (!4 !139)
!142 = span !5 807 836
!143 = (!4 !142)
!144 = span !5 849 865
!145 = (!4 !144)
!146 = span !5 869 870
!147 = span !5 849 870
!148 = (!4 !147)
!149 = (!4 !147)
!150 = span !5 842 871
!151 = (!4 !150)
!152 = span !5 884 900
!153 = (!4 !152)
!154 = span !5 904 905
!155 = span !5 884 905
!156 = (!4 !155)
!157 = (!4 !155)
!158 = span !5 877 906
!159 = (!4 !158)
!160 = span !5 919 934
!161 = (!4 !160)
!162 = span !5 938 939
!163 = span !5 919 939
!164 = (!4 !163)
!165 = (!4 !163)
!166 = span !5 912 940
!167 = (!4 !166)
!168 = span !5 953 970
!169 = (!4 !168)
!170 = span !5 974 976
!171 = span !5 953 976
!172 = (!4 !171)
!173 = (!4 !171)
!174 = span !5 946 977
!175 = (!4 !174)
!176 = span !5 990 1010
!177 = (!4 !176)
!178 = span !5 1014 1016
!179 = span !5 990 1016
!180 = (!4 !179)
!181 = (!4 !179)
!182 = span !5 983 1017
!183 = (!4 !182)
!184 = span !5 1030 1051
!185 = (!4 !184)
!186 = span !5 1055 1057
!187 = span !5 1030 1057
!188 = (!4 !187)
!189 = (!4 !187)
!190 = span !5 1023 1058
!191 = (!4 !190)
!192 = span !5 1071 1094
!193 = (!4 !192)
!194 = span !5 1098 1100
!195 = span !5 1071 1100
!196 = (!4 !195)
!197 = (!4 !195)
!198 = span !5 1064 1101
!199 = (!4 !198)
!200 = span !5 1127 1128
!201 = (!4 !200)
!202 = span !5 1115 1129
!203 = (!4 !202)
!204 = span !5 1133 1134
!205 = span !5 1115 1134
!206 = (!4 !205)
!207 = (!4 !205)
!208 = span !5 1108 1135
!209 = (!4 !208)
!210 = span !5 1160 1161
!211 = (!4 !210)
!212 = span !5 1148 1162
!213 = (!4 !212)
!214 = span !5 1166 1167
!215 = span !5 1148 1167
!216 = (!4 !215)
!217 = (!4 !215)
!218 = span !5 1141 1168
!219 = (!4 !218)
!220 = span !5 1193 1194
!221 = (!4 !220)
!222 = span !5 1181 1195
!223 = (!4 !222)
!224 = span !5 1199 1200
!225 = span !5 1181 1200
!226 = (!4 !225)
!227 = (!4 !225)
!228 = span !5 1174 1201
!229 = (!4 !228)
!230 = span !5 1226 1227
!231 = (!4 !230)
!232 = span !5 1214 1228
!233 = (!4 !232)
!234 = span !5 1232 1233
!235 = span !5 1214 1233
!236 = (!4 !235)
!237 = (!4 !235)
!238 = span !5 1207 1234
!239 = (!4 !238)
!240 = span !5 1259 1260
!241 = (!4 !240)
!242 = span !5 1247 1261
!243 = (!4 !242)
!244 = span !5 1265 1267
!245 = span !5 1247 1267
!246 = (!4 !245)
!247 = (!4 !245)
!248 = span !5 1240 1268
!249 = (!4 !248)
!250 = span !5 1293 1294
!251 = (!4 !250)
!252 = span !5 1281 1295
!253 = (!4 !252)
!254 = span !5 1299 1301
!255 = span !5 1281 1301
!256 = (!4 !255)
!257 = (!4 !255)
!258 = span !5 1274 1302
!259 = (!4 !258)
!260 = span !5 1309 1313
!261 = span !0 48 74
!262 = span !0 107 113
!263 = span !0 92 114
!264 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!265 = span !264 64237 64250
!266 = (!263 !265)
!267 = (!263 !265)
!268 = (!263 !265)
!269 = (!263 !265)
!270 = (!263 !265)
!271 = (!263 !265)
!272 = (!263 !265)
!273 = (!263 !265)
!274 = (!263 !265)
!275 = (!263 !265)
!276 = (!263 !265)
!277 = span !264 159 222
!278 = (!263 !265 !277)
!279 = (!263 !265)
!280 = (!263 !265 !277)
!281 = (!263 !265)
!282 = (!263 !265)
!283 = span !264 64221 64251
!284 = (!263 !283)
!285 = (!263 !283)
!286 = span !264 55 82
!287 = (!263 !283 !286)
!288 = (!263 !283)
!289 = (!263 !283)
!290 = (!263 !283)
!291 = (!263 !283)
!292 = (!263 !283)
!293 = (!263 !283)
!294 = (!263 !283)
!295 = (!263 !283)
!296 = (!263 !283)
!297 = (!263 !283)
!298 = (!263 !283)
!299 = (!263 !283)
!300 = (!263 !283)
!301 = (!263 !283)
!302 = (!263 !283)
!303 = (!263 !283)
!304 = (!263 !283)
!305 = (!263 !283)
!306 = (!263 !283)
!307 = (!263 !283)
!308 = (!263 !283)
!309 = (!263 !283)
!310 = (!263 !283)
!311 = (!263 !283)
!312 = (!263 !283)
!313 = span !264 3836 3919
!314 = (!263 !283 !313)
!315 = (!263 !283)
!316 = (!263 !283 !313)
!317 = (!263 !283)
!318 = (!263 !283)
!319 = span !264 64208 64252
!320 = (!263 !319)
!321 = (!263 !319)
!322 = span !264 64257 64263
!323 = (!263 !322)
!324 = span !264 64257 64278
!325 = (!263 !324)
!326 = (!263 !324)
!327 = (!263 !324 !286)
!328 = (!263 !324)
!329 = (!263 !324)
!330 = (!263 !324)
!331 = (!263 !324)
!332 = (!263 !324)
!333 = (!263 !324)
!334 = (!263 !324)
!335 = (!263 !324)
!336 = (!263 !324)
!337 = (!263 !324)
!338 = (!263 !324)
!339 = (!263 !324)
!340 = (!263 !324)
!341 = (!263 !324)
!342 = (!263 !324)
!343 = (!263 !324)
!344 = (!263 !324)
!345 = (!263 !324)
!346 = (!263 !324)
!347 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!348 = span !347 935 944
!349 = span !347 921 1019
!350 = span !347 961 971
!351 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!352 = span !351 1038 1059
!353 = span !347 982 1010
!354 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!355 = span !354 691 705
!356 = (!353 !355)

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br main_0_block0(v0), !7

        main_0_block0(v1: b256):
        v2 = const bool false
        br main_0_is_ref_type_9_block0(v2), !10

        main_0_is_ref_type_9_block0(v3: bool):
        br main_0_block1(v3), !11

        main_0_block1(v4: bool):
        v5 = const bool false, !13
        v6 = cmp eq v4 v5, !15
        br main_0_block2(v6), !16

        main_0_block2(v7: bool):
        v8 = call assert_2(v7), !18
        br main_0_is_ref_type_9_block04(v2), !20

        main_0_is_ref_type_9_block04(v9: bool):
        br main_0_block3(v9), !21

        main_0_block3(v10: bool):
        v11 = cmp eq v10 v5, !23
        br main_0_block5(v11), !24

        main_0_block5(v12: bool):
        v13 = call assert_2(v12), !26
        br main_0_is_ref_type_9_block07(v2), !28

        main_0_is_ref_type_9_block07(v14: bool):
        br main_0_block6(v14), !29

        main_0_block6(v15: bool):
        v16 = cmp eq v15 v5, !31
        br main_0_block8(v16), !32

        main_0_block8(v17: bool):
        v18 = call assert_2(v17), !34
        br main_0_is_ref_type_11_block0(v2), !36

        main_0_is_ref_type_11_block0(v19: bool):
        br main_0_block9(v19), !37

        main_0_block9(v20: bool):
        v21 = cmp eq v20 v5, !39
        br main_0_block10(v21), !40

        main_0_block10(v22: bool):
        v23 = call assert_2(v22), !42
        v24 = const bool true
        br main_0_is_ref_type_13_block0(v24), !44

        main_0_is_ref_type_13_block0(v25: bool):
        br main_0_block11(v25), !45

        main_0_block11(v26: bool):
        v27 = call assert_2(v26), !47
        br main_0_is_ref_type_15_block0(v24), !49

        main_0_is_ref_type_15_block0(v28: bool):
        br main_0_block12(v28), !50

        main_0_block12(v29: bool):
        v30 = call assert_2(v29), !52
        br main_0_is_ref_type_17_block0(v24), !54

        main_0_is_ref_type_17_block0(v31: bool):
        br main_0_block13(v31), !55

        main_0_block13(v32: bool):
        v33 = call assert_2(v32), !57
        br main_0_is_ref_type_19_block0(v24), !59

        main_0_is_ref_type_19_block0(v34: bool):
        br main_0_block14(v34), !60

        main_0_block14(v35: bool):
        v36 = call assert_2(v35), !62
        br main_0_is_ref_type_21_block0(v24), !64

        main_0_is_ref_type_21_block0(v37: bool):
        br main_0_block15(v37), !65

        main_0_block15(v38: bool):
        v39 = call assert_2(v38), !67
        v40 = const u64 8
        br main_0_block16(v40), !69

        main_0_block16(v41: u64):
        v42 = const u64 8, !70
        v43 = cmp eq v41 v42, !72
        br main_0_block17(v43), !73

        main_0_block17(v44: bool):
        v45 = call assert_2(v44), !75
        br main_0_block18(v40), !77

        main_0_block18(v46: u64):
        v47 = const u64 8, !78
        v48 = cmp eq v46 v47, !80
        br main_0_block19(v48), !81

        main_0_block19(v49: bool):
        v50 = call assert_2(v49), !83
        br main_0_block20(v40), !85

        main_0_block20(v51: u64):
        v52 = const u64 8, !86
        v53 = cmp eq v51 v52, !88
        br main_0_block21(v53), !89

        main_0_block21(v54: bool):
        v55 = call assert_2(v54), !91
        v56 = const u64 1
        br main_0_block22(v56), !93

        main_0_block22(v57: u64):
        v58 = const u64 1, !94
        v59 = cmp eq v57 v58, !96
        br main_0_block23(v59), !97

        main_0_block23(v60: bool):
        v61 = call assert_2(v60), !99
        v62 = const u64 32
        br main_0_block24(v62), !101

        main_0_block24(v63: u64):
        v64 = const u64 32, !102
        v65 = cmp eq v63 v64, !104
        br main_0_block25(v65), !105

        main_0_block25(v66: bool):
        v67 = call assert_2(v66), !107
        v68 = const u64 16
        br main_0_block26(v68), !109

        main_0_block26(v69: u64):
        v70 = const u64 16, !110
        v71 = cmp eq v69 v70, !112
        br main_0_block27(v71), !113

        main_0_block27(v72: bool):
        v73 = call assert_2(v72), !115
        v74 = const u64 24
        br main_0_block28(v74), !117

        main_0_block28(v75: u64):
        v76 = const u64 24, !118
        v77 = cmp eq v75 v76, !120
        br main_0_block29(v77), !121

        main_0_block29(v78: bool):
        v79 = call assert_2(v78), !123
        br main_0_block30(v68), !125

        main_0_block30(v80: u64):
        v81 = const u64 16, !126
        v82 = cmp eq v80 v81, !128
        br main_0_block31(v82), !129

        main_0_block31(v83: bool):
        v84 = call assert_2(v83), !131
        v85 = const u64 8
        br main_0_block32(v85), !133

        main_0_block32(v86: u64):
        v87 = const u64 8, !134
        v88 = cmp eq v86 v87, !136
        br main_0_block33(v88), !137

        main_0_block33(v89: bool):
        v90 = call assert_2(v89), !139
        br main_0_block34(v85), !141

        main_0_block34(v91: u64):
        v92 = const u64 8, !142
        v93 = cmp eq v91 v92, !144
        br main_0_block35(v93), !145

        main_0_block35(v94: bool):
        v95 = call assert_2(v94), !147
        br main_0_block36(v85), !149

        main_0_block36(v96: u64):
        v97 = const u64 8, !150
        v98 = cmp eq v96 v97, !152
        br main_0_block37(v98), !153

        main_0_block37(v99: bool):
        v100 = call assert_2(v99), !155
        v101 = const u64 1
        br main_0_block38(v101), !157

        main_0_block38(v102: u64):
        v103 = const u64 1, !158
        v104 = cmp eq v102 v103, !160
        br main_0_block39(v104), !161

        main_0_block39(v105: bool):
        v106 = call assert_2(v105), !163
        v107 = const u64 32
        br main_0_block40(v107), !165

        main_0_block40(v108: u64):
        v109 = const u64 32, !166
        v110 = cmp eq v108 v109, !168
        br main_0_block41(v110), !169

        main_0_block41(v111: bool):
        v112 = call assert_2(v111), !171
        v113 = const u64 16
        br main_0_block42(v113), !173

        main_0_block42(v114: u64):
        v115 = const u64 16, !174
        v116 = cmp eq v114 v115, !176
        br main_0_block43(v116), !177

        main_0_block43(v117: bool):
        v118 = call assert_2(v117), !179
        v119 = const bool true, !180
        br block0(v119), !4

        block0(v120: bool):
        v121 = get_local ptr bool, result, !181
        store v120 to v121, !181
        v122 = get_local ptr bool, result, !182
        v123 = load v122
        v124 = const u64 1024
        v125 = asm(cap: v124) -> u64 hp, !186 {
            aloc   cap
        }
        v126 = int_to_ptr v125 to ptr u8, !187
        v127 = ptr_to_int v126 to u64, !188
        v128 = get_local ptr { u64, u64, u64 }, __anon_00, !189
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr u64, v129, !190
        store v127 to v130, !191
        v131 = const u64 1
        v132 = get_elem_ptr v128, ptr u64, v131, !192
        store v124 to v132, !193
        v133 = const u64 2
        v134 = get_elem_ptr v128, ptr u64, v133, !194
        v135 = const u64 0
        store v135 to v134, !195
        v136 = asm(buffer: v128) -> { u64, u64, u64 } buffer, !196 {
        }
        v137 = get_local ptr { { u64, u64, u64 } }, __anon_10, !198
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr { u64, u64, u64 }, v138, !199
        store v136 to v139, !200
        v140 = load v137, !201
        br encode_38_block0(v140), !202

        encode_38_block0(v141: { { u64, u64, u64 } }):
        v142 = ptr_to_int v141 to u64, !204
        v143 = int_to_ptr v142 to ptr { { u64, u64, u64 } }, !205
        v144 = const u64 0
        v145 = get_elem_ptr v143, ptr { u64, u64, u64 }, v144, !207
        v146 = load v145, !208
        v147 = asm(buffer: v146) -> { u64, u64, u64 } buffer, !209 {
        }
        v148 = get_local ptr { u64, u64, u64 }, __anon_000, !210
        store v147 to v148, !211
        v149 = const u64 0
        v150 = get_elem_ptr v148, ptr u64, v149, !212
        v151 = load v150, !213
        v152 = int_to_ptr v151 to ptr u8, !214
        v153 = const u64 1
        v154 = get_elem_ptr v148, ptr u64, v153, !215
        v155 = load v154, !216
        v156 = const u64 2
        v157 = get_elem_ptr v148, ptr u64, v156, !217
        v158 = load v157, !218
        v159 = ptr_to_int v152 to u64, !219
        v160 = add v159, v158, !220
        v161 = int_to_ptr v160 to ptr bool, !221
        store v123 to v161, !222
        v162 = const u64 1
        v163 = add v158, v162, !223
        v164 = ptr_to_int v152 to u64, !224
        v165 = get_local ptr { u64, u64, u64 }, __anon_100, !225
        v166 = const u64 0
        v167 = get_elem_ptr v165, ptr u64, v166, !226
        store v164 to v167, !227
        v168 = const u64 1
        v169 = get_elem_ptr v165, ptr u64, v168, !228
        store v155 to v169, !229
        v170 = const u64 2
        v171 = get_elem_ptr v165, ptr u64, v170, !230
        store v163 to v171, !231
        v172 = asm(buffer: v165) -> { u64, u64, u64 } buffer, !232 {
        }
        v173 = get_local ptr { { u64, u64, u64 } }, __anon_20, !234
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr { u64, u64, u64 }, v174, !235
        store v172 to v175, !236
        v176 = load v173, !237
        br encode_38_block1(v176), !238

        encode_38_block1(v177: { { u64, u64, u64 } }):
        v178 = get_local ptr { { u64, u64, u64 } }, buffer, !240
        store v177 to v178, !241
        v179 = get_local ptr { { u64, u64, u64 } }, buffer, !243
        v180 = load v179, !183
        v181 = ptr_to_int v180 to u64, !245
        v182 = int_to_ptr v181 to ptr { { u64, u64, u64 } }, !246
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr { u64, u64, u64 }, v183, !247
        v185 = load v184, !248
        v186 = asm(buffer: v185) -> { u64, u64, u64 } buffer, !249 {
        }
        v187 = get_local ptr { u64, u64, u64 }, __anon_01, !250
        store v186 to v187, !251
        v188 = const u64 0
        v189 = get_elem_ptr v187, ptr u64, v188, !252
        v190 = load v189, !253
        v191 = int_to_ptr v190 to ptr u8, !254
        v192 = const u64 2
        v193 = get_elem_ptr v187, ptr u64, v192, !255
        v194 = load v193, !256
        v195 = ptr_to_int v191 to u64, !257
        v196 = get_local ptr { u64, u64 }, __anon_11, !258
        v197 = const u64 0
        v198 = get_elem_ptr v196, ptr u64, v197, !259
        store v195 to v198, !260
        v199 = const u64 1
        v200 = get_elem_ptr v196, ptr u64, v199, !261
        store v194 to v200, !262
        v201 = asm(s: v196) -> slice s, !263 {
        }
        br encode_38_block2(v201), !264

        encode_38_block2(v202: slice):
        br block1(v202), !183

        block1(v203: slice):
        ret slice v203
    }

    pub fn assert_2(condition !266: bool) -> (), !267 {
        entry(condition: bool):
        v0 = const bool false, !13
        v1 = cmp eq condition v0, !268
        br block3(v1), !268

        block3(v2: bool):
        cbr v2, block0(), block1(), !268

        block0():
        v3 = const u64 18446744073709486084, !270
        revert v3, !274

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!3 = span !2 7904 7970
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 199 210
!7 = (!4 !6)
!8 = span !5 502 520
!9 = span !5 136 160
!10 = (!4 !8 !9)
!11 = (!4 !8)
!12 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!13 = span !12 9991 9996
!14 = span !5 501 520
!15 = (!4 !14)
!16 = (!4 !14)
!17 = span !5 494 521
!18 = (!4 !17)
!19 = span !5 535 553
!20 = (!4 !19 !9)
!21 = (!4 !19)
!22 = span !5 534 553
!23 = (!4 !22)
!24 = (!4 !22)
!25 = span !5 527 554
!26 = (!4 !25)
!27 = span !5 568 586
!28 = (!4 !27 !9)
!29 = (!4 !27)
!30 = span !5 567 586
!31 = (!4 !30)
!32 = (!4 !30)
!33 = span !5 560 587
!34 = (!4 !33)
!35 = span !5 601 618
!36 = (!4 !35 !9)
!37 = (!4 !35)
!38 = span !5 600 618
!39 = (!4 !38)
!40 = (!4 !38)
!41 = span !5 593 619
!42 = (!4 !41)
!43 = span !5 632 655
!44 = (!4 !43 !9)
!45 = (!4 !43)
!46 = span !5 625 656
!47 = (!4 !46)
!48 = span !5 669 693
!49 = (!4 !48 !9)
!50 = (!4 !48)
!51 = span !5 662 694
!52 = (!4 !51)
!53 = span !5 707 743
!54 = (!4 !53 !9)
!55 = (!4 !53)
!56 = span !5 700 744
!57 = (!4 !56)
!58 = span !5 757 771
!59 = (!4 !58 !9)
!60 = (!4 !58)
!61 = span !5 750 772
!62 = (!4 !61)
!63 = span !5 785 799
!64 = (!4 !63 !9)
!65 = (!4 !63)
!66 = span !5 778 800
!67 = (!4 !66)
!68 = span !5 814 830
!69 = (!4 !68)
!70 = span !5 834 835
!71 = span !5 814 835
!72 = (!4 !71)
!73 = (!4 !71)
!74 = span !5 807 836
!75 = (!4 !74)
!76 = span !5 849 865
!77 = (!4 !76)
!78 = span !5 869 870
!79 = span !5 849 870
!80 = (!4 !79)
!81 = (!4 !79)
!82 = span !5 842 871
!83 = (!4 !82)
!84 = span !5 884 900
!85 = (!4 !84)
!86 = span !5 904 905
!87 = span !5 884 905
!88 = (!4 !87)
!89 = (!4 !87)
!90 = span !5 877 906
!91 = (!4 !90)
!92 = span !5 919 934
!93 = (!4 !92)
!94 = span !5 938 939
!95 = span !5 919 939
!96 = (!4 !95)
!97 = (!4 !95)
!98 = span !5 912 940
!99 = (!4 !98)
!100 = span !5 953 970
!101 = (!4 !100)
!102 = span !5 974 976
!103 = span !5 953 976
!104 = (!4 !103)
!105 = (!4 !103)
!106 = span !5 946 977
!107 = (!4 !106)
!108 = span !5 990 1010
!109 = (!4 !108)
!110 = span !5 1014 1016
!111 = span !5 990 1016
!112 = (!4 !111)
!113 = (!4 !111)
!114 = span !5 983 1017
!115 = (!4 !114)
!116 = span !5 1030 1051
!117 = (!4 !116)
!118 = span !5 1055 1057
!119 = span !5 1030 1057
!120 = (!4 !119)
!121 = (!4 !119)
!122 = span !5 1023 1058
!123 = (!4 !122)
!124 = span !5 1071 1094
!125 = (!4 !124)
!126 = span !5 1098 1100
!127 = span !5 1071 1100
!128 = (!4 !127)
!129 = (!4 !127)
!130 = span !5 1064 1101
!131 = (!4 !130)
!132 = span !5 1115 1129
!133 = (!4 !132)
!134 = span !5 1133 1134
!135 = span !5 1115 1134
!136 = (!4 !135)
!137 = (!4 !135)
!138 = span !5 1108 1135
!139 = (!4 !138)
!140 = span !5 1148 1162
!141 = (!4 !140)
!142 = span !5 1166 1167
!143 = span !5 1148 1167
!144 = (!4 !143)
!145 = (!4 !143)
!146 = span !5 1141 1168
!147 = (!4 !146)
!148 = span !5 1181 1195
!149 = (!4 !148)
!150 = span !5 1199 1200
!151 = span !5 1181 1200
!152 = (!4 !151)
!153 = (!4 !151)
!154 = span !5 1174 1201
!155 = (!4 !154)
!156 = span !5 1214 1228
!157 = (!4 !156)
!158 = span !5 1232 1233
!159 = span !5 1214 1233
!160 = (!4 !159)
!161 = (!4 !159)
!162 = span !5 1207 1234
!163 = (!4 !162)
!164 = span !5 1247 1261
!165 = (!4 !164)
!166 = span !5 1265 1267
!167 = span !5 1247 1267
!168 = (!4 !167)
!169 = (!4 !167)
!170 = span !5 1240 1268
!171 = (!4 !170)
!172 = span !5 1281 1295
!173 = (!4 !172)
!174 = span !5 1299 1301
!175 = span !5 1281 1301
!176 = (!4 !175)
!177 = (!4 !175)
!178 = span !5 1274 1302
!179 = (!4 !178)
!180 = span !5 1309 1313
!181 = span !0 48 74
!182 = span !0 107 113
!183 = span !0 92 114
!184 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!185 = span !184 64237 64250
!186 = (!183 !185)
!187 = (!183 !185)
!188 = (!183 !185)
!189 = (!183 !185)
!190 = (!183 !185)
!191 = (!183 !185)
!192 = (!183 !185)
!193 = (!183 !185)
!194 = (!183 !185)
!195 = (!183 !185)
!196 = (!183 !185)
!197 = span !184 159 222
!198 = (!183 !185 !197)
!199 = (!183 !185)
!200 = (!183 !185 !197)
!201 = (!183 !185)
!202 = (!183 !185)
!203 = span !184 64221 64251
!204 = (!183 !203)
!205 = (!183 !203)
!206 = span !184 55 82
!207 = (!183 !203 !206)
!208 = (!183 !203)
!209 = (!183 !203)
!210 = (!183 !203)
!211 = (!183 !203)
!212 = (!183 !203)
!213 = (!183 !203)
!214 = (!183 !203)
!215 = (!183 !203)
!216 = (!183 !203)
!217 = (!183 !203)
!218 = (!183 !203)
!219 = (!183 !203)
!220 = (!183 !203)
!221 = (!183 !203)
!222 = (!183 !203)
!223 = (!183 !203)
!224 = (!183 !203)
!225 = (!183 !203)
!226 = (!183 !203)
!227 = (!183 !203)
!228 = (!183 !203)
!229 = (!183 !203)
!230 = (!183 !203)
!231 = (!183 !203)
!232 = (!183 !203)
!233 = span !184 3836 3919
!234 = (!183 !203 !233)
!235 = (!183 !203)
!236 = (!183 !203 !233)
!237 = (!183 !203)
!238 = (!183 !203)
!239 = span !184 64208 64252
!240 = (!183 !239)
!241 = (!183 !239)
!242 = span !184 64257 64263
!243 = (!183 !242)
!244 = span !184 64257 64278
!245 = (!183 !244)
!246 = (!183 !244)
!247 = (!183 !244 !206)
!248 = (!183 !244)
!249 = (!183 !244)
!250 = (!183 !244)
!251 = (!183 !244)
!252 = (!183 !244)
!253 = (!183 !244)
!254 = (!183 !244)
!255 = (!183 !244)
!256 = (!183 !244)
!257 = (!183 !244)
!258 = (!183 !244)
!259 = (!183 !244)
!260 = (!183 !244)
!261 = (!183 !244)
!262 = (!183 !244)
!263 = (!183 !244)
!264 = (!183 !244)
!265 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!266 = span !265 935 944
!267 = span !265 921 1019
!268 = span !265 961 971
!269 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!270 = span !269 1038 1059
!271 = span !265 982 1010
!272 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!273 = span !272 691 705
!274 = (!271 !273)

// IR: [const-demotion] Demotion of by-value constants to by-reference
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr b256, __const
        v1 = load v0
        br main_0_block0(v1), !5

        main_0_block0(v2: b256):
        v3 = const bool false
        br main_0_is_ref_type_9_block0(v3), !8

        main_0_is_ref_type_9_block0(v4: bool):
        br main_0_block1(v4), !9

        main_0_block1(v5: bool):
        v6 = const bool false, !11
        v7 = cmp eq v5 v6, !13
        br main_0_block2(v7), !14

        main_0_block2(v8: bool):
        v9 = call assert_2(v8), !16
        br main_0_is_ref_type_9_block04(v3), !18

        main_0_is_ref_type_9_block04(v10: bool):
        br main_0_block3(v10), !19

        main_0_block3(v11: bool):
        v12 = cmp eq v11 v6, !21
        br main_0_block5(v12), !22

        main_0_block5(v13: bool):
        v14 = call assert_2(v13), !24
        br main_0_is_ref_type_9_block07(v3), !26

        main_0_is_ref_type_9_block07(v15: bool):
        br main_0_block6(v15), !27

        main_0_block6(v16: bool):
        v17 = cmp eq v16 v6, !29
        br main_0_block8(v17), !30

        main_0_block8(v18: bool):
        v19 = call assert_2(v18), !32
        br main_0_is_ref_type_11_block0(v3), !34

        main_0_is_ref_type_11_block0(v20: bool):
        br main_0_block9(v20), !35

        main_0_block9(v21: bool):
        v22 = cmp eq v21 v6, !37
        br main_0_block10(v22), !38

        main_0_block10(v23: bool):
        v24 = call assert_2(v23), !40
        v25 = const bool true
        br main_0_is_ref_type_13_block0(v25), !42

        main_0_is_ref_type_13_block0(v26: bool):
        br main_0_block11(v26), !43

        main_0_block11(v27: bool):
        v28 = call assert_2(v27), !45
        br main_0_is_ref_type_15_block0(v25), !47

        main_0_is_ref_type_15_block0(v29: bool):
        br main_0_block12(v29), !48

        main_0_block12(v30: bool):
        v31 = call assert_2(v30), !50
        br main_0_is_ref_type_17_block0(v25), !52

        main_0_is_ref_type_17_block0(v32: bool):
        br main_0_block13(v32), !53

        main_0_block13(v33: bool):
        v34 = call assert_2(v33), !55
        br main_0_is_ref_type_19_block0(v25), !57

        main_0_is_ref_type_19_block0(v35: bool):
        br main_0_block14(v35), !58

        main_0_block14(v36: bool):
        v37 = call assert_2(v36), !60
        br main_0_is_ref_type_21_block0(v25), !62

        main_0_is_ref_type_21_block0(v38: bool):
        br main_0_block15(v38), !63

        main_0_block15(v39: bool):
        v40 = call assert_2(v39), !65
        v41 = const u64 8
        br main_0_block16(v41), !67

        main_0_block16(v42: u64):
        v43 = const u64 8, !68
        v44 = cmp eq v42 v43, !70
        br main_0_block17(v44), !71

        main_0_block17(v45: bool):
        v46 = call assert_2(v45), !73
        br main_0_block18(v41), !75

        main_0_block18(v47: u64):
        v48 = const u64 8, !76
        v49 = cmp eq v47 v48, !78
        br main_0_block19(v49), !79

        main_0_block19(v50: bool):
        v51 = call assert_2(v50), !81
        br main_0_block20(v41), !83

        main_0_block20(v52: u64):
        v53 = const u64 8, !84
        v54 = cmp eq v52 v53, !86
        br main_0_block21(v54), !87

        main_0_block21(v55: bool):
        v56 = call assert_2(v55), !89
        v57 = const u64 1
        br main_0_block22(v57), !91

        main_0_block22(v58: u64):
        v59 = const u64 1, !92
        v60 = cmp eq v58 v59, !94
        br main_0_block23(v60), !95

        main_0_block23(v61: bool):
        v62 = call assert_2(v61), !97
        v63 = const u64 32
        br main_0_block24(v63), !99

        main_0_block24(v64: u64):
        v65 = const u64 32, !100
        v66 = cmp eq v64 v65, !102
        br main_0_block25(v66), !103

        main_0_block25(v67: bool):
        v68 = call assert_2(v67), !105
        v69 = const u64 16
        br main_0_block26(v69), !107

        main_0_block26(v70: u64):
        v71 = const u64 16, !108
        v72 = cmp eq v70 v71, !110
        br main_0_block27(v72), !111

        main_0_block27(v73: bool):
        v74 = call assert_2(v73), !113
        v75 = const u64 24
        br main_0_block28(v75), !115

        main_0_block28(v76: u64):
        v77 = const u64 24, !116
        v78 = cmp eq v76 v77, !118
        br main_0_block29(v78), !119

        main_0_block29(v79: bool):
        v80 = call assert_2(v79), !121
        br main_0_block30(v69), !123

        main_0_block30(v81: u64):
        v82 = const u64 16, !124
        v83 = cmp eq v81 v82, !126
        br main_0_block31(v83), !127

        main_0_block31(v84: bool):
        v85 = call assert_2(v84), !129
        v86 = const u64 8
        br main_0_block32(v86), !131

        main_0_block32(v87: u64):
        v88 = const u64 8, !132
        v89 = cmp eq v87 v88, !134
        br main_0_block33(v89), !135

        main_0_block33(v90: bool):
        v91 = call assert_2(v90), !137
        br main_0_block34(v86), !139

        main_0_block34(v92: u64):
        v93 = const u64 8, !140
        v94 = cmp eq v92 v93, !142
        br main_0_block35(v94), !143

        main_0_block35(v95: bool):
        v96 = call assert_2(v95), !145
        br main_0_block36(v86), !147

        main_0_block36(v97: u64):
        v98 = const u64 8, !148
        v99 = cmp eq v97 v98, !150
        br main_0_block37(v99), !151

        main_0_block37(v100: bool):
        v101 = call assert_2(v100), !153
        v102 = const u64 1
        br main_0_block38(v102), !155

        main_0_block38(v103: u64):
        v104 = const u64 1, !156
        v105 = cmp eq v103 v104, !158
        br main_0_block39(v105), !159

        main_0_block39(v106: bool):
        v107 = call assert_2(v106), !161
        v108 = const u64 32
        br main_0_block40(v108), !163

        main_0_block40(v109: u64):
        v110 = const u64 32, !164
        v111 = cmp eq v109 v110, !166
        br main_0_block41(v111), !167

        main_0_block41(v112: bool):
        v113 = call assert_2(v112), !169
        v114 = const u64 16
        br main_0_block42(v114), !171

        main_0_block42(v115: u64):
        v116 = const u64 16, !172
        v117 = cmp eq v115 v116, !174
        br main_0_block43(v117), !175

        main_0_block43(v118: bool):
        v119 = call assert_2(v118), !177
        v120 = const bool true, !178
        br block0(v120), !2

        block0(v121: bool):
        v122 = get_local ptr bool, result, !179
        store v121 to v122, !179
        v123 = get_local ptr bool, result, !180
        v124 = load v123
        v125 = const u64 1024
        v126 = asm(cap: v125) -> u64 hp, !184 {
            aloc   cap
        }
        v127 = int_to_ptr v126 to ptr u8, !185
        v128 = ptr_to_int v127 to u64, !186
        v129 = get_local ptr { u64, u64, u64 }, __anon_00, !187
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr u64, v130, !188
        store v128 to v131, !189
        v132 = const u64 1
        v133 = get_elem_ptr v129, ptr u64, v132, !190
        store v125 to v133, !191
        v134 = const u64 2
        v135 = get_elem_ptr v129, ptr u64, v134, !192
        v136 = const u64 0
        store v136 to v135, !193
        v137 = asm(buffer: v129) -> { u64, u64, u64 } buffer, !194 {
        }
        v138 = get_local ptr { { u64, u64, u64 } }, __anon_10, !196
        v139 = const u64 0
        v140 = get_elem_ptr v138, ptr { u64, u64, u64 }, v139, !197
        store v137 to v140, !198
        v141 = load v138, !199
        br encode_38_block0(v141), !200

        encode_38_block0(v142: { { u64, u64, u64 } }):
        v143 = ptr_to_int v142 to u64, !202
        v144 = int_to_ptr v143 to ptr { { u64, u64, u64 } }, !203
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr { u64, u64, u64 }, v145, !205
        v147 = load v146, !206
        v148 = asm(buffer: v147) -> { u64, u64, u64 } buffer, !207 {
        }
        v149 = get_local ptr { u64, u64, u64 }, __anon_000, !208
        store v148 to v149, !209
        v150 = const u64 0
        v151 = get_elem_ptr v149, ptr u64, v150, !210
        v152 = load v151, !211
        v153 = int_to_ptr v152 to ptr u8, !212
        v154 = const u64 1
        v155 = get_elem_ptr v149, ptr u64, v154, !213
        v156 = load v155, !214
        v157 = const u64 2
        v158 = get_elem_ptr v149, ptr u64, v157, !215
        v159 = load v158, !216
        v160 = ptr_to_int v153 to u64, !217
        v161 = add v160, v159, !218
        v162 = int_to_ptr v161 to ptr bool, !219
        store v124 to v162, !220
        v163 = const u64 1
        v164 = add v159, v163, !221
        v165 = ptr_to_int v153 to u64, !222
        v166 = get_local ptr { u64, u64, u64 }, __anon_100, !223
        v167 = const u64 0
        v168 = get_elem_ptr v166, ptr u64, v167, !224
        store v165 to v168, !225
        v169 = const u64 1
        v170 = get_elem_ptr v166, ptr u64, v169, !226
        store v156 to v170, !227
        v171 = const u64 2
        v172 = get_elem_ptr v166, ptr u64, v171, !228
        store v164 to v172, !229
        v173 = asm(buffer: v166) -> { u64, u64, u64 } buffer, !230 {
        }
        v174 = get_local ptr { { u64, u64, u64 } }, __anon_20, !232
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr { u64, u64, u64 }, v175, !233
        store v173 to v176, !234
        v177 = load v174, !235
        br encode_38_block1(v177), !236

        encode_38_block1(v178: { { u64, u64, u64 } }):
        v179 = get_local ptr { { u64, u64, u64 } }, buffer, !238
        store v178 to v179, !239
        v180 = get_local ptr { { u64, u64, u64 } }, buffer, !241
        v181 = load v180, !181
        v182 = ptr_to_int v181 to u64, !243
        v183 = int_to_ptr v182 to ptr { { u64, u64, u64 } }, !244
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr { u64, u64, u64 }, v184, !245
        v186 = load v185, !246
        v187 = asm(buffer: v186) -> { u64, u64, u64 } buffer, !247 {
        }
        v188 = get_local ptr { u64, u64, u64 }, __anon_01, !248
        store v187 to v188, !249
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !250
        v191 = load v190, !251
        v192 = int_to_ptr v191 to ptr u8, !252
        v193 = const u64 2
        v194 = get_elem_ptr v188, ptr u64, v193, !253
        v195 = load v194, !254
        v196 = ptr_to_int v192 to u64, !255
        v197 = get_local ptr { u64, u64 }, __anon_11, !256
        v198 = const u64 0
        v199 = get_elem_ptr v197, ptr u64, v198, !257
        store v196 to v199, !258
        v200 = const u64 1
        v201 = get_elem_ptr v197, ptr u64, v200, !259
        store v195 to v201, !260
        v202 = asm(s: v197) -> slice s, !261 {
        }
        br encode_38_block2(v202), !262

        encode_38_block2(v203: slice):
        br block1(v203), !181

        block1(v204: slice):
        ret slice v204
    }

    pub fn assert_2(condition !264: bool) -> (), !265 {
        entry(condition: bool):
        v0 = const bool false, !11
        v1 = cmp eq condition v0, !266
        br block3(v1), !266

        block3(v2: bool):
        cbr v2, block0(), block1(), !266

        block0():
        v3 = const u64 18446744073709486084, !268
        revert v3, !272

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 502 520
!7 = span !3 136 160
!8 = (!2 !6 !7)
!9 = (!2 !6)
!10 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!11 = span !10 9991 9996
!12 = span !3 501 520
!13 = (!2 !12)
!14 = (!2 !12)
!15 = span !3 494 521
!16 = (!2 !15)
!17 = span !3 535 553
!18 = (!2 !17 !7)
!19 = (!2 !17)
!20 = span !3 534 553
!21 = (!2 !20)
!22 = (!2 !20)
!23 = span !3 527 554
!24 = (!2 !23)
!25 = span !3 568 586
!26 = (!2 !25 !7)
!27 = (!2 !25)
!28 = span !3 567 586
!29 = (!2 !28)
!30 = (!2 !28)
!31 = span !3 560 587
!32 = (!2 !31)
!33 = span !3 601 618
!34 = (!2 !33 !7)
!35 = (!2 !33)
!36 = span !3 600 618
!37 = (!2 !36)
!38 = (!2 !36)
!39 = span !3 593 619
!40 = (!2 !39)
!41 = span !3 632 655
!42 = (!2 !41 !7)
!43 = (!2 !41)
!44 = span !3 625 656
!45 = (!2 !44)
!46 = span !3 669 693
!47 = (!2 !46 !7)
!48 = (!2 !46)
!49 = span !3 662 694
!50 = (!2 !49)
!51 = span !3 707 743
!52 = (!2 !51 !7)
!53 = (!2 !51)
!54 = span !3 700 744
!55 = (!2 !54)
!56 = span !3 757 771
!57 = (!2 !56 !7)
!58 = (!2 !56)
!59 = span !3 750 772
!60 = (!2 !59)
!61 = span !3 785 799
!62 = (!2 !61 !7)
!63 = (!2 !61)
!64 = span !3 778 800
!65 = (!2 !64)
!66 = span !3 814 830
!67 = (!2 !66)
!68 = span !3 834 835
!69 = span !3 814 835
!70 = (!2 !69)
!71 = (!2 !69)
!72 = span !3 807 836
!73 = (!2 !72)
!74 = span !3 849 865
!75 = (!2 !74)
!76 = span !3 869 870
!77 = span !3 849 870
!78 = (!2 !77)
!79 = (!2 !77)
!80 = span !3 842 871
!81 = (!2 !80)
!82 = span !3 884 900
!83 = (!2 !82)
!84 = span !3 904 905
!85 = span !3 884 905
!86 = (!2 !85)
!87 = (!2 !85)
!88 = span !3 877 906
!89 = (!2 !88)
!90 = span !3 919 934
!91 = (!2 !90)
!92 = span !3 938 939
!93 = span !3 919 939
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 912 940
!97 = (!2 !96)
!98 = span !3 953 970
!99 = (!2 !98)
!100 = span !3 974 976
!101 = span !3 953 976
!102 = (!2 !101)
!103 = (!2 !101)
!104 = span !3 946 977
!105 = (!2 !104)
!106 = span !3 990 1010
!107 = (!2 !106)
!108 = span !3 1014 1016
!109 = span !3 990 1016
!110 = (!2 !109)
!111 = (!2 !109)
!112 = span !3 983 1017
!113 = (!2 !112)
!114 = span !3 1030 1051
!115 = (!2 !114)
!116 = span !3 1055 1057
!117 = span !3 1030 1057
!118 = (!2 !117)
!119 = (!2 !117)
!120 = span !3 1023 1058
!121 = (!2 !120)
!122 = span !3 1071 1094
!123 = (!2 !122)
!124 = span !3 1098 1100
!125 = span !3 1071 1100
!126 = (!2 !125)
!127 = (!2 !125)
!128 = span !3 1064 1101
!129 = (!2 !128)
!130 = span !3 1115 1129
!131 = (!2 !130)
!132 = span !3 1133 1134
!133 = span !3 1115 1134
!134 = (!2 !133)
!135 = (!2 !133)
!136 = span !3 1108 1135
!137 = (!2 !136)
!138 = span !3 1148 1162
!139 = (!2 !138)
!140 = span !3 1166 1167
!141 = span !3 1148 1167
!142 = (!2 !141)
!143 = (!2 !141)
!144 = span !3 1141 1168
!145 = (!2 !144)
!146 = span !3 1181 1195
!147 = (!2 !146)
!148 = span !3 1199 1200
!149 = span !3 1181 1200
!150 = (!2 !149)
!151 = (!2 !149)
!152 = span !3 1174 1201
!153 = (!2 !152)
!154 = span !3 1214 1228
!155 = (!2 !154)
!156 = span !3 1232 1233
!157 = span !3 1214 1233
!158 = (!2 !157)
!159 = (!2 !157)
!160 = span !3 1207 1234
!161 = (!2 !160)
!162 = span !3 1247 1261
!163 = (!2 !162)
!164 = span !3 1265 1267
!165 = span !3 1247 1267
!166 = (!2 !165)
!167 = (!2 !165)
!168 = span !3 1240 1268
!169 = (!2 !168)
!170 = span !3 1281 1295
!171 = (!2 !170)
!172 = span !3 1299 1301
!173 = span !3 1281 1301
!174 = (!2 !173)
!175 = (!2 !173)
!176 = span !3 1274 1302
!177 = (!2 !176)
!178 = span !3 1309 1313
!179 = span !0 48 74
!180 = span !0 107 113
!181 = span !0 92 114
!182 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!183 = span !182 64237 64250
!184 = (!181 !183)
!185 = (!181 !183)
!186 = (!181 !183)
!187 = (!181 !183)
!188 = (!181 !183)
!189 = (!181 !183)
!190 = (!181 !183)
!191 = (!181 !183)
!192 = (!181 !183)
!193 = (!181 !183)
!194 = (!181 !183)
!195 = span !182 159 222
!196 = (!181 !183 !195)
!197 = (!181 !183)
!198 = (!181 !183 !195)
!199 = (!181 !183)
!200 = (!181 !183)
!201 = span !182 64221 64251
!202 = (!181 !201)
!203 = (!181 !201)
!204 = span !182 55 82
!205 = (!181 !201 !204)
!206 = (!181 !201)
!207 = (!181 !201)
!208 = (!181 !201)
!209 = (!181 !201)
!210 = (!181 !201)
!211 = (!181 !201)
!212 = (!181 !201)
!213 = (!181 !201)
!214 = (!181 !201)
!215 = (!181 !201)
!216 = (!181 !201)
!217 = (!181 !201)
!218 = (!181 !201)
!219 = (!181 !201)
!220 = (!181 !201)
!221 = (!181 !201)
!222 = (!181 !201)
!223 = (!181 !201)
!224 = (!181 !201)
!225 = (!181 !201)
!226 = (!181 !201)
!227 = (!181 !201)
!228 = (!181 !201)
!229 = (!181 !201)
!230 = (!181 !201)
!231 = span !182 3836 3919
!232 = (!181 !201 !231)
!233 = (!181 !201)
!234 = (!181 !201 !231)
!235 = (!181 !201)
!236 = (!181 !201)
!237 = span !182 64208 64252
!238 = (!181 !237)
!239 = (!181 !237)
!240 = span !182 64257 64263
!241 = (!181 !240)
!242 = span !182 64257 64278
!243 = (!181 !242)
!244 = (!181 !242)
!245 = (!181 !242 !204)
!246 = (!181 !242)
!247 = (!181 !242)
!248 = (!181 !242)
!249 = (!181 !242)
!250 = (!181 !242)
!251 = (!181 !242)
!252 = (!181 !242)
!253 = (!181 !242)
!254 = (!181 !242)
!255 = (!181 !242)
!256 = (!181 !242)
!257 = (!181 !242)
!258 = (!181 !242)
!259 = (!181 !242)
!260 = (!181 !242)
!261 = (!181 !242)
!262 = (!181 !242)
!263 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!264 = span !263 935 944
!265 = span !263 921 1019
!266 = span !263 961 971
!267 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!268 = span !267 1038 1059
!269 = span !263 982 1010
!270 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!271 = span !270 691 705
!272 = (!269 !271)

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
script {
    pub entry fn __entry() -> slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr b256, __const
        v1 = load v0
        v2 = get_local ptr b256, __tmp_block_arg
        store v1 to v2
        br main_0_block0(v2), !5

        main_0_block0(v3: ptr b256):
        v4 = load v3
        v5 = const bool false
        br main_0_is_ref_type_9_block0(v5), !8

        main_0_is_ref_type_9_block0(v6: bool):
        br main_0_block1(v6), !9

        main_0_block1(v7: bool):
        v8 = const bool false, !11
        v9 = cmp eq v7 v8, !13
        br main_0_block2(v9), !14

        main_0_block2(v10: bool):
        v11 = call assert_2(v10), !16
        br main_0_is_ref_type_9_block04(v5), !18

        main_0_is_ref_type_9_block04(v12: bool):
        br main_0_block3(v12), !19

        main_0_block3(v13: bool):
        v14 = cmp eq v13 v8, !21
        br main_0_block5(v14), !22

        main_0_block5(v15: bool):
        v16 = call assert_2(v15), !24
        br main_0_is_ref_type_9_block07(v5), !26

        main_0_is_ref_type_9_block07(v17: bool):
        br main_0_block6(v17), !27

        main_0_block6(v18: bool):
        v19 = cmp eq v18 v8, !29
        br main_0_block8(v19), !30

        main_0_block8(v20: bool):
        v21 = call assert_2(v20), !32
        br main_0_is_ref_type_11_block0(v5), !34

        main_0_is_ref_type_11_block0(v22: bool):
        br main_0_block9(v22), !35

        main_0_block9(v23: bool):
        v24 = cmp eq v23 v8, !37
        br main_0_block10(v24), !38

        main_0_block10(v25: bool):
        v26 = call assert_2(v25), !40
        v27 = const bool true
        br main_0_is_ref_type_13_block0(v27), !42

        main_0_is_ref_type_13_block0(v28: bool):
        br main_0_block11(v28), !43

        main_0_block11(v29: bool):
        v30 = call assert_2(v29), !45
        br main_0_is_ref_type_15_block0(v27), !47

        main_0_is_ref_type_15_block0(v31: bool):
        br main_0_block12(v31), !48

        main_0_block12(v32: bool):
        v33 = call assert_2(v32), !50
        br main_0_is_ref_type_17_block0(v27), !52

        main_0_is_ref_type_17_block0(v34: bool):
        br main_0_block13(v34), !53

        main_0_block13(v35: bool):
        v36 = call assert_2(v35), !55
        br main_0_is_ref_type_19_block0(v27), !57

        main_0_is_ref_type_19_block0(v37: bool):
        br main_0_block14(v37), !58

        main_0_block14(v38: bool):
        v39 = call assert_2(v38), !60
        br main_0_is_ref_type_21_block0(v27), !62

        main_0_is_ref_type_21_block0(v40: bool):
        br main_0_block15(v40), !63

        main_0_block15(v41: bool):
        v42 = call assert_2(v41), !65
        v43 = const u64 8
        br main_0_block16(v43), !67

        main_0_block16(v44: u64):
        v45 = const u64 8, !68
        v46 = cmp eq v44 v45, !70
        br main_0_block17(v46), !71

        main_0_block17(v47: bool):
        v48 = call assert_2(v47), !73
        br main_0_block18(v43), !75

        main_0_block18(v49: u64):
        v50 = const u64 8, !76
        v51 = cmp eq v49 v50, !78
        br main_0_block19(v51), !79

        main_0_block19(v52: bool):
        v53 = call assert_2(v52), !81
        br main_0_block20(v43), !83

        main_0_block20(v54: u64):
        v55 = const u64 8, !84
        v56 = cmp eq v54 v55, !86
        br main_0_block21(v56), !87

        main_0_block21(v57: bool):
        v58 = call assert_2(v57), !89
        v59 = const u64 1
        br main_0_block22(v59), !91

        main_0_block22(v60: u64):
        v61 = const u64 1, !92
        v62 = cmp eq v60 v61, !94
        br main_0_block23(v62), !95

        main_0_block23(v63: bool):
        v64 = call assert_2(v63), !97
        v65 = const u64 32
        br main_0_block24(v65), !99

        main_0_block24(v66: u64):
        v67 = const u64 32, !100
        v68 = cmp eq v66 v67, !102
        br main_0_block25(v68), !103

        main_0_block25(v69: bool):
        v70 = call assert_2(v69), !105
        v71 = const u64 16
        br main_0_block26(v71), !107

        main_0_block26(v72: u64):
        v73 = const u64 16, !108
        v74 = cmp eq v72 v73, !110
        br main_0_block27(v74), !111

        main_0_block27(v75: bool):
        v76 = call assert_2(v75), !113
        v77 = const u64 24
        br main_0_block28(v77), !115

        main_0_block28(v78: u64):
        v79 = const u64 24, !116
        v80 = cmp eq v78 v79, !118
        br main_0_block29(v80), !119

        main_0_block29(v81: bool):
        v82 = call assert_2(v81), !121
        br main_0_block30(v71), !123

        main_0_block30(v83: u64):
        v84 = const u64 16, !124
        v85 = cmp eq v83 v84, !126
        br main_0_block31(v85), !127

        main_0_block31(v86: bool):
        v87 = call assert_2(v86), !129
        v88 = const u64 8
        br main_0_block32(v88), !131

        main_0_block32(v89: u64):
        v90 = const u64 8, !132
        v91 = cmp eq v89 v90, !134
        br main_0_block33(v91), !135

        main_0_block33(v92: bool):
        v93 = call assert_2(v92), !137
        br main_0_block34(v88), !139

        main_0_block34(v94: u64):
        v95 = const u64 8, !140
        v96 = cmp eq v94 v95, !142
        br main_0_block35(v96), !143

        main_0_block35(v97: bool):
        v98 = call assert_2(v97), !145
        br main_0_block36(v88), !147

        main_0_block36(v99: u64):
        v100 = const u64 8, !148
        v101 = cmp eq v99 v100, !150
        br main_0_block37(v101), !151

        main_0_block37(v102: bool):
        v103 = call assert_2(v102), !153
        v104 = const u64 1
        br main_0_block38(v104), !155

        main_0_block38(v105: u64):
        v106 = const u64 1, !156
        v107 = cmp eq v105 v106, !158
        br main_0_block39(v107), !159

        main_0_block39(v108: bool):
        v109 = call assert_2(v108), !161
        v110 = const u64 32
        br main_0_block40(v110), !163

        main_0_block40(v111: u64):
        v112 = const u64 32, !164
        v113 = cmp eq v111 v112, !166
        br main_0_block41(v113), !167

        main_0_block41(v114: bool):
        v115 = call assert_2(v114), !169
        v116 = const u64 16
        br main_0_block42(v116), !171

        main_0_block42(v117: u64):
        v118 = const u64 16, !172
        v119 = cmp eq v117 v118, !174
        br main_0_block43(v119), !175

        main_0_block43(v120: bool):
        v121 = call assert_2(v120), !177
        v122 = const bool true, !178
        br block0(v122), !2

        block0(v123: bool):
        v124 = get_local ptr bool, result, !179
        store v123 to v124, !179
        v125 = get_local ptr bool, result, !180
        v126 = load v125
        v127 = const u64 1024
        v128 = asm(cap: v127) -> u64 hp, !184 {
            aloc   cap
        }
        v129 = int_to_ptr v128 to ptr u8, !185
        v130 = ptr_to_int v129 to u64, !186
        v131 = get_local ptr { u64, u64, u64 }, __anon_00, !187
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !188
        store v130 to v133, !189
        v134 = const u64 1
        v135 = get_elem_ptr v131, ptr u64, v134, !190
        store v127 to v135, !191
        v136 = const u64 2
        v137 = get_elem_ptr v131, ptr u64, v136, !192
        v138 = const u64 0
        store v138 to v137, !193
        v139 = asm(buffer: v131) -> { u64, u64, u64 } buffer, !194 {
        }
        v140 = get_local ptr { { u64, u64, u64 } }, __anon_10, !196
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr { u64, u64, u64 }, v141, !197
        store v139 to v142, !198
        v143 = load v140, !199
        v144 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v143 to v144
        br encode_38_block0(v144), !200

        encode_38_block0(v145: ptr { { u64, u64, u64 } }):
        v146 = load v145
        v147 = ptr_to_int v146 to u64, !202
        v148 = int_to_ptr v147 to ptr { { u64, u64, u64 } }, !203
        v149 = const u64 0
        v150 = get_elem_ptr v148, ptr { u64, u64, u64 }, v149, !205
        v151 = load v150, !206
        v152 = asm(buffer: v151) -> { u64, u64, u64 } buffer, !207 {
        }
        v153 = get_local ptr { u64, u64, u64 }, __anon_000, !208
        store v152 to v153, !209
        v154 = const u64 0
        v155 = get_elem_ptr v153, ptr u64, v154, !210
        v156 = load v155, !211
        v157 = int_to_ptr v156 to ptr u8, !212
        v158 = const u64 1
        v159 = get_elem_ptr v153, ptr u64, v158, !213
        v160 = load v159, !214
        v161 = const u64 2
        v162 = get_elem_ptr v153, ptr u64, v161, !215
        v163 = load v162, !216
        v164 = ptr_to_int v157 to u64, !217
        v165 = add v164, v163, !218
        v166 = int_to_ptr v165 to ptr bool, !219
        store v126 to v166, !220
        v167 = const u64 1
        v168 = add v163, v167, !221
        v169 = ptr_to_int v157 to u64, !222
        v170 = get_local ptr { u64, u64, u64 }, __anon_100, !223
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !224
        store v169 to v172, !225
        v173 = const u64 1
        v174 = get_elem_ptr v170, ptr u64, v173, !226
        store v160 to v174, !227
        v175 = const u64 2
        v176 = get_elem_ptr v170, ptr u64, v175, !228
        store v168 to v176, !229
        v177 = asm(buffer: v170) -> { u64, u64, u64 } buffer, !230 {
        }
        v178 = get_local ptr { { u64, u64, u64 } }, __anon_20, !232
        v179 = const u64 0
        v180 = get_elem_ptr v178, ptr { u64, u64, u64 }, v179, !233
        store v177 to v180, !234
        v181 = load v178, !235
        v182 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        store v181 to v182
        br encode_38_block1(v182), !236

        encode_38_block1(v183: ptr { { u64, u64, u64 } }):
        v184 = load v183
        v185 = get_local ptr { { u64, u64, u64 } }, buffer, !238
        store v184 to v185, !239
        v186 = get_local ptr { { u64, u64, u64 } }, buffer, !241
        v187 = load v186, !181
        v188 = ptr_to_int v187 to u64, !243
        v189 = int_to_ptr v188 to ptr { { u64, u64, u64 } }, !244
        v190 = const u64 0
        v191 = get_elem_ptr v189, ptr { u64, u64, u64 }, v190, !245
        v192 = load v191, !246
        v193 = asm(buffer: v192) -> { u64, u64, u64 } buffer, !247 {
        }
        v194 = get_local ptr { u64, u64, u64 }, __anon_01, !248
        store v193 to v194, !249
        v195 = const u64 0
        v196 = get_elem_ptr v194, ptr u64, v195, !250
        v197 = load v196, !251
        v198 = int_to_ptr v197 to ptr u8, !252
        v199 = const u64 2
        v200 = get_elem_ptr v194, ptr u64, v199, !253
        v201 = load v200, !254
        v202 = ptr_to_int v198 to u64, !255
        v203 = get_local ptr { u64, u64 }, __anon_11, !256
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr u64, v204, !257
        store v202 to v205, !258
        v206 = const u64 1
        v207 = get_elem_ptr v203, ptr u64, v206, !259
        store v201 to v207, !260
        v208 = asm(s: v203) -> slice s, !261 {
        }
        v209 = get_local ptr slice, __tmp_block_arg2
        store v208 to v209
        br encode_38_block2(v209), !262

        encode_38_block2(v210: ptr slice):
        v211 = load v210
        v212 = get_local ptr slice, __tmp_block_arg3
        store v211 to v212
        br block1(v212), !181

        block1(v213: ptr slice):
        v214 = load v213
        ret slice v214
    }

    pub fn assert_2(condition !264: bool) -> (), !265 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !11
        v1 = cmp eq condition v0, !266
        br block3(v1), !266

        block3(v2: bool):
        cbr v2, block0(), block1(), !266

        block0():
        v3 = const u64 18446744073709486084, !268
        revert v3, !272

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 502 520
!7 = span !3 136 160
!8 = (!2 !6 !7)
!9 = (!2 !6)
!10 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!11 = span !10 9991 9996
!12 = span !3 501 520
!13 = (!2 !12)
!14 = (!2 !12)
!15 = span !3 494 521
!16 = (!2 !15)
!17 = span !3 535 553
!18 = (!2 !17 !7)
!19 = (!2 !17)
!20 = span !3 534 553
!21 = (!2 !20)
!22 = (!2 !20)
!23 = span !3 527 554
!24 = (!2 !23)
!25 = span !3 568 586
!26 = (!2 !25 !7)
!27 = (!2 !25)
!28 = span !3 567 586
!29 = (!2 !28)
!30 = (!2 !28)
!31 = span !3 560 587
!32 = (!2 !31)
!33 = span !3 601 618
!34 = (!2 !33 !7)
!35 = (!2 !33)
!36 = span !3 600 618
!37 = (!2 !36)
!38 = (!2 !36)
!39 = span !3 593 619
!40 = (!2 !39)
!41 = span !3 632 655
!42 = (!2 !41 !7)
!43 = (!2 !41)
!44 = span !3 625 656
!45 = (!2 !44)
!46 = span !3 669 693
!47 = (!2 !46 !7)
!48 = (!2 !46)
!49 = span !3 662 694
!50 = (!2 !49)
!51 = span !3 707 743
!52 = (!2 !51 !7)
!53 = (!2 !51)
!54 = span !3 700 744
!55 = (!2 !54)
!56 = span !3 757 771
!57 = (!2 !56 !7)
!58 = (!2 !56)
!59 = span !3 750 772
!60 = (!2 !59)
!61 = span !3 785 799
!62 = (!2 !61 !7)
!63 = (!2 !61)
!64 = span !3 778 800
!65 = (!2 !64)
!66 = span !3 814 830
!67 = (!2 !66)
!68 = span !3 834 835
!69 = span !3 814 835
!70 = (!2 !69)
!71 = (!2 !69)
!72 = span !3 807 836
!73 = (!2 !72)
!74 = span !3 849 865
!75 = (!2 !74)
!76 = span !3 869 870
!77 = span !3 849 870
!78 = (!2 !77)
!79 = (!2 !77)
!80 = span !3 842 871
!81 = (!2 !80)
!82 = span !3 884 900
!83 = (!2 !82)
!84 = span !3 904 905
!85 = span !3 884 905
!86 = (!2 !85)
!87 = (!2 !85)
!88 = span !3 877 906
!89 = (!2 !88)
!90 = span !3 919 934
!91 = (!2 !90)
!92 = span !3 938 939
!93 = span !3 919 939
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 912 940
!97 = (!2 !96)
!98 = span !3 953 970
!99 = (!2 !98)
!100 = span !3 974 976
!101 = span !3 953 976
!102 = (!2 !101)
!103 = (!2 !101)
!104 = span !3 946 977
!105 = (!2 !104)
!106 = span !3 990 1010
!107 = (!2 !106)
!108 = span !3 1014 1016
!109 = span !3 990 1016
!110 = (!2 !109)
!111 = (!2 !109)
!112 = span !3 983 1017
!113 = (!2 !112)
!114 = span !3 1030 1051
!115 = (!2 !114)
!116 = span !3 1055 1057
!117 = span !3 1030 1057
!118 = (!2 !117)
!119 = (!2 !117)
!120 = span !3 1023 1058
!121 = (!2 !120)
!122 = span !3 1071 1094
!123 = (!2 !122)
!124 = span !3 1098 1100
!125 = span !3 1071 1100
!126 = (!2 !125)
!127 = (!2 !125)
!128 = span !3 1064 1101
!129 = (!2 !128)
!130 = span !3 1115 1129
!131 = (!2 !130)
!132 = span !3 1133 1134
!133 = span !3 1115 1134
!134 = (!2 !133)
!135 = (!2 !133)
!136 = span !3 1108 1135
!137 = (!2 !136)
!138 = span !3 1148 1162
!139 = (!2 !138)
!140 = span !3 1166 1167
!141 = span !3 1148 1167
!142 = (!2 !141)
!143 = (!2 !141)
!144 = span !3 1141 1168
!145 = (!2 !144)
!146 = span !3 1181 1195
!147 = (!2 !146)
!148 = span !3 1199 1200
!149 = span !3 1181 1200
!150 = (!2 !149)
!151 = (!2 !149)
!152 = span !3 1174 1201
!153 = (!2 !152)
!154 = span !3 1214 1228
!155 = (!2 !154)
!156 = span !3 1232 1233
!157 = span !3 1214 1233
!158 = (!2 !157)
!159 = (!2 !157)
!160 = span !3 1207 1234
!161 = (!2 !160)
!162 = span !3 1247 1261
!163 = (!2 !162)
!164 = span !3 1265 1267
!165 = span !3 1247 1267
!166 = (!2 !165)
!167 = (!2 !165)
!168 = span !3 1240 1268
!169 = (!2 !168)
!170 = span !3 1281 1295
!171 = (!2 !170)
!172 = span !3 1299 1301
!173 = span !3 1281 1301
!174 = (!2 !173)
!175 = (!2 !173)
!176 = span !3 1274 1302
!177 = (!2 !176)
!178 = span !3 1309 1313
!179 = span !0 48 74
!180 = span !0 107 113
!181 = span !0 92 114
!182 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!183 = span !182 64237 64250
!184 = (!181 !183)
!185 = (!181 !183)
!186 = (!181 !183)
!187 = (!181 !183)
!188 = (!181 !183)
!189 = (!181 !183)
!190 = (!181 !183)
!191 = (!181 !183)
!192 = (!181 !183)
!193 = (!181 !183)
!194 = (!181 !183)
!195 = span !182 159 222
!196 = (!181 !183 !195)
!197 = (!181 !183)
!198 = (!181 !183 !195)
!199 = (!181 !183)
!200 = (!181 !183)
!201 = span !182 64221 64251
!202 = (!181 !201)
!203 = (!181 !201)
!204 = span !182 55 82
!205 = (!181 !201 !204)
!206 = (!181 !201)
!207 = (!181 !201)
!208 = (!181 !201)
!209 = (!181 !201)
!210 = (!181 !201)
!211 = (!181 !201)
!212 = (!181 !201)
!213 = (!181 !201)
!214 = (!181 !201)
!215 = (!181 !201)
!216 = (!181 !201)
!217 = (!181 !201)
!218 = (!181 !201)
!219 = (!181 !201)
!220 = (!181 !201)
!221 = (!181 !201)
!222 = (!181 !201)
!223 = (!181 !201)
!224 = (!181 !201)
!225 = (!181 !201)
!226 = (!181 !201)
!227 = (!181 !201)
!228 = (!181 !201)
!229 = (!181 !201)
!230 = (!181 !201)
!231 = span !182 3836 3919
!232 = (!181 !201 !231)
!233 = (!181 !201)
!234 = (!181 !201 !231)
!235 = (!181 !201)
!236 = (!181 !201)
!237 = span !182 64208 64252
!238 = (!181 !237)
!239 = (!181 !237)
!240 = span !182 64257 64263
!241 = (!181 !240)
!242 = span !182 64257 64278
!243 = (!181 !242)
!244 = (!181 !242)
!245 = (!181 !242 !204)
!246 = (!181 !242)
!247 = (!181 !242)
!248 = (!181 !242)
!249 = (!181 !242)
!250 = (!181 !242)
!251 = (!181 !242)
!252 = (!181 !242)
!253 = (!181 !242)
!254 = (!181 !242)
!255 = (!181 !242)
!256 = (!181 !242)
!257 = (!181 !242)
!258 = (!181 !242)
!259 = (!181 !242)
!260 = (!181 !242)
!261 = (!181 !242)
!262 = (!181 !242)
!263 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!264 = span !263 935 944
!265 = span !263 921 1019
!266 = span !263 961 971
!267 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!268 = span !267 1038 1059
!269 = span !263 982 1010
!270 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!271 = span !270 691 705
!272 = (!269 !271)

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __tmp_block_arg
        store v2 to v3
        br main_0_block0(v3), !5

        main_0_block0(v4: ptr b256):
        v5 = load v4
        v6 = const bool false
        br main_0_is_ref_type_9_block0(v6), !8

        main_0_is_ref_type_9_block0(v7: bool):
        br main_0_block1(v7), !9

        main_0_block1(v8: bool):
        v9 = const bool false, !11
        v10 = cmp eq v8 v9, !13
        br main_0_block2(v10), !14

        main_0_block2(v11: bool):
        v12 = call assert_2(v11), !16
        br main_0_is_ref_type_9_block04(v6), !18

        main_0_is_ref_type_9_block04(v13: bool):
        br main_0_block3(v13), !19

        main_0_block3(v14: bool):
        v15 = cmp eq v14 v9, !21
        br main_0_block5(v15), !22

        main_0_block5(v16: bool):
        v17 = call assert_2(v16), !24
        br main_0_is_ref_type_9_block07(v6), !26

        main_0_is_ref_type_9_block07(v18: bool):
        br main_0_block6(v18), !27

        main_0_block6(v19: bool):
        v20 = cmp eq v19 v9, !29
        br main_0_block8(v20), !30

        main_0_block8(v21: bool):
        v22 = call assert_2(v21), !32
        br main_0_is_ref_type_11_block0(v6), !34

        main_0_is_ref_type_11_block0(v23: bool):
        br main_0_block9(v23), !35

        main_0_block9(v24: bool):
        v25 = cmp eq v24 v9, !37
        br main_0_block10(v25), !38

        main_0_block10(v26: bool):
        v27 = call assert_2(v26), !40
        v28 = const bool true
        br main_0_is_ref_type_13_block0(v28), !42

        main_0_is_ref_type_13_block0(v29: bool):
        br main_0_block11(v29), !43

        main_0_block11(v30: bool):
        v31 = call assert_2(v30), !45
        br main_0_is_ref_type_15_block0(v28), !47

        main_0_is_ref_type_15_block0(v32: bool):
        br main_0_block12(v32), !48

        main_0_block12(v33: bool):
        v34 = call assert_2(v33), !50
        br main_0_is_ref_type_17_block0(v28), !52

        main_0_is_ref_type_17_block0(v35: bool):
        br main_0_block13(v35), !53

        main_0_block13(v36: bool):
        v37 = call assert_2(v36), !55
        br main_0_is_ref_type_19_block0(v28), !57

        main_0_is_ref_type_19_block0(v38: bool):
        br main_0_block14(v38), !58

        main_0_block14(v39: bool):
        v40 = call assert_2(v39), !60
        br main_0_is_ref_type_21_block0(v28), !62

        main_0_is_ref_type_21_block0(v41: bool):
        br main_0_block15(v41), !63

        main_0_block15(v42: bool):
        v43 = call assert_2(v42), !65
        v44 = const u64 8
        br main_0_block16(v44), !67

        main_0_block16(v45: u64):
        v46 = const u64 8, !68
        v47 = cmp eq v45 v46, !70
        br main_0_block17(v47), !71

        main_0_block17(v48: bool):
        v49 = call assert_2(v48), !73
        br main_0_block18(v44), !75

        main_0_block18(v50: u64):
        v51 = const u64 8, !76
        v52 = cmp eq v50 v51, !78
        br main_0_block19(v52), !79

        main_0_block19(v53: bool):
        v54 = call assert_2(v53), !81
        br main_0_block20(v44), !83

        main_0_block20(v55: u64):
        v56 = const u64 8, !84
        v57 = cmp eq v55 v56, !86
        br main_0_block21(v57), !87

        main_0_block21(v58: bool):
        v59 = call assert_2(v58), !89
        v60 = const u64 1
        br main_0_block22(v60), !91

        main_0_block22(v61: u64):
        v62 = const u64 1, !92
        v63 = cmp eq v61 v62, !94
        br main_0_block23(v63), !95

        main_0_block23(v64: bool):
        v65 = call assert_2(v64), !97
        v66 = const u64 32
        br main_0_block24(v66), !99

        main_0_block24(v67: u64):
        v68 = const u64 32, !100
        v69 = cmp eq v67 v68, !102
        br main_0_block25(v69), !103

        main_0_block25(v70: bool):
        v71 = call assert_2(v70), !105
        v72 = const u64 16
        br main_0_block26(v72), !107

        main_0_block26(v73: u64):
        v74 = const u64 16, !108
        v75 = cmp eq v73 v74, !110
        br main_0_block27(v75), !111

        main_0_block27(v76: bool):
        v77 = call assert_2(v76), !113
        v78 = const u64 24
        br main_0_block28(v78), !115

        main_0_block28(v79: u64):
        v80 = const u64 24, !116
        v81 = cmp eq v79 v80, !118
        br main_0_block29(v81), !119

        main_0_block29(v82: bool):
        v83 = call assert_2(v82), !121
        br main_0_block30(v72), !123

        main_0_block30(v84: u64):
        v85 = const u64 16, !124
        v86 = cmp eq v84 v85, !126
        br main_0_block31(v86), !127

        main_0_block31(v87: bool):
        v88 = call assert_2(v87), !129
        v89 = const u64 8
        br main_0_block32(v89), !131

        main_0_block32(v90: u64):
        v91 = const u64 8, !132
        v92 = cmp eq v90 v91, !134
        br main_0_block33(v92), !135

        main_0_block33(v93: bool):
        v94 = call assert_2(v93), !137
        br main_0_block34(v89), !139

        main_0_block34(v95: u64):
        v96 = const u64 8, !140
        v97 = cmp eq v95 v96, !142
        br main_0_block35(v97), !143

        main_0_block35(v98: bool):
        v99 = call assert_2(v98), !145
        br main_0_block36(v89), !147

        main_0_block36(v100: u64):
        v101 = const u64 8, !148
        v102 = cmp eq v100 v101, !150
        br main_0_block37(v102), !151

        main_0_block37(v103: bool):
        v104 = call assert_2(v103), !153
        v105 = const u64 1
        br main_0_block38(v105), !155

        main_0_block38(v106: u64):
        v107 = const u64 1, !156
        v108 = cmp eq v106 v107, !158
        br main_0_block39(v108), !159

        main_0_block39(v109: bool):
        v110 = call assert_2(v109), !161
        v111 = const u64 32
        br main_0_block40(v111), !163

        main_0_block40(v112: u64):
        v113 = const u64 32, !164
        v114 = cmp eq v112 v113, !166
        br main_0_block41(v114), !167

        main_0_block41(v115: bool):
        v116 = call assert_2(v115), !169
        v117 = const u64 16
        br main_0_block42(v117), !171

        main_0_block42(v118: u64):
        v119 = const u64 16, !172
        v120 = cmp eq v118 v119, !174
        br main_0_block43(v120), !175

        main_0_block43(v121: bool):
        v122 = call assert_2(v121), !177
        v123 = const bool true, !178
        br block0(v123), !2

        block0(v124: bool):
        v125 = get_local ptr bool, result, !179
        store v124 to v125, !179
        v126 = get_local ptr bool, result, !180
        v127 = load v126
        v128 = const u64 1024
        v129 = asm(cap: v128) -> u64 hp, !184 {
            aloc   cap
        }
        v130 = int_to_ptr v129 to ptr u8, !185
        v131 = ptr_to_int v130 to u64, !186
        v132 = get_local ptr { u64, u64, u64 }, __anon_00, !187
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133, !188
        store v131 to v134, !189
        v135 = const u64 1
        v136 = get_elem_ptr v132, ptr u64, v135, !190
        store v128 to v136, !191
        v137 = const u64 2
        v138 = get_elem_ptr v132, ptr u64, v137, !192
        v139 = const u64 0
        store v139 to v138, !193
        v140 = asm(buffer: v132) -> { u64, u64, u64 } buffer, !194 {
        }
        v141 = get_local ptr { { u64, u64, u64 } }, __anon_10, !196
        v142 = const u64 0
        v143 = get_elem_ptr v141, ptr { u64, u64, u64 }, v142, !197
        store v140 to v143, !198
        v144 = load v141, !199
        v145 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v144 to v145
        br encode_38_block0(v145), !200

        encode_38_block0(v146: ptr { { u64, u64, u64 } }):
        v147 = load v146
        v148 = ptr_to_int v147 to u64, !202
        v149 = int_to_ptr v148 to ptr { { u64, u64, u64 } }, !203
        v150 = const u64 0
        v151 = get_elem_ptr v149, ptr { u64, u64, u64 }, v150, !205
        v152 = load v151, !206
        v153 = asm(buffer: v152) -> { u64, u64, u64 } buffer, !207 {
        }
        v154 = get_local ptr { u64, u64, u64 }, __anon_000, !208
        store v153 to v154, !209
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr u64, v155, !210
        v157 = load v156, !211
        v158 = int_to_ptr v157 to ptr u8, !212
        v159 = const u64 1
        v160 = get_elem_ptr v154, ptr u64, v159, !213
        v161 = load v160, !214
        v162 = const u64 2
        v163 = get_elem_ptr v154, ptr u64, v162, !215
        v164 = load v163, !216
        v165 = ptr_to_int v158 to u64, !217
        v166 = add v165, v164, !218
        v167 = int_to_ptr v166 to ptr bool, !219
        store v127 to v167, !220
        v168 = const u64 1
        v169 = add v164, v168, !221
        v170 = ptr_to_int v158 to u64, !222
        v171 = get_local ptr { u64, u64, u64 }, __anon_100, !223
        v172 = const u64 0
        v173 = get_elem_ptr v171, ptr u64, v172, !224
        store v170 to v173, !225
        v174 = const u64 1
        v175 = get_elem_ptr v171, ptr u64, v174, !226
        store v161 to v175, !227
        v176 = const u64 2
        v177 = get_elem_ptr v171, ptr u64, v176, !228
        store v169 to v177, !229
        v178 = asm(buffer: v171) -> { u64, u64, u64 } buffer, !230 {
        }
        v179 = get_local ptr { { u64, u64, u64 } }, __anon_20, !232
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr { u64, u64, u64 }, v180, !233
        store v178 to v181, !234
        v182 = load v179, !235
        v183 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        store v182 to v183
        br encode_38_block1(v183), !236

        encode_38_block1(v184: ptr { { u64, u64, u64 } }):
        v185 = load v184
        v186 = get_local ptr { { u64, u64, u64 } }, buffer, !238
        store v185 to v186, !239
        v187 = get_local ptr { { u64, u64, u64 } }, buffer, !241
        v188 = load v187, !181
        v189 = ptr_to_int v188 to u64, !243
        v190 = int_to_ptr v189 to ptr { { u64, u64, u64 } }, !244
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr { u64, u64, u64 }, v191, !245
        v193 = load v192, !246
        v194 = asm(buffer: v193) -> { u64, u64, u64 } buffer, !247 {
        }
        v195 = get_local ptr { u64, u64, u64 }, __anon_01, !248
        store v194 to v195, !249
        v196 = const u64 0
        v197 = get_elem_ptr v195, ptr u64, v196, !250
        v198 = load v197, !251
        v199 = int_to_ptr v198 to ptr u8, !252
        v200 = const u64 2
        v201 = get_elem_ptr v195, ptr u64, v200, !253
        v202 = load v201, !254
        v203 = ptr_to_int v199 to u64, !255
        v204 = get_local ptr { u64, u64 }, __anon_11, !256
        v205 = const u64 0
        v206 = get_elem_ptr v204, ptr u64, v205, !257
        store v203 to v206, !258
        v207 = const u64 1
        v208 = get_elem_ptr v204, ptr u64, v207, !259
        store v202 to v208, !260
        v209 = asm(s: v204) -> slice s, !261 {
        }
        v210 = get_local ptr slice, __tmp_block_arg2
        store v209 to v210
        br encode_38_block2(v210), !262

        encode_38_block2(v211: ptr slice):
        v212 = load v211
        v213 = get_local ptr slice, __tmp_block_arg3
        store v212 to v213
        br block1(v213), !181

        block1(v214: ptr slice):
        v215 = load v214
        store v215 to v0
        ret ptr slice v0
    }

    pub fn assert_2(condition !264: bool) -> (), !265 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !11
        v1 = cmp eq condition v0, !266
        br block3(v1), !266

        block3(v2: bool):
        cbr v2, block0(), block1(), !266

        block0():
        v3 = const u64 18446744073709486084, !268
        revert v3, !272

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 502 520
!7 = span !3 136 160
!8 = (!2 !6 !7)
!9 = (!2 !6)
!10 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!11 = span !10 9991 9996
!12 = span !3 501 520
!13 = (!2 !12)
!14 = (!2 !12)
!15 = span !3 494 521
!16 = (!2 !15)
!17 = span !3 535 553
!18 = (!2 !17 !7)
!19 = (!2 !17)
!20 = span !3 534 553
!21 = (!2 !20)
!22 = (!2 !20)
!23 = span !3 527 554
!24 = (!2 !23)
!25 = span !3 568 586
!26 = (!2 !25 !7)
!27 = (!2 !25)
!28 = span !3 567 586
!29 = (!2 !28)
!30 = (!2 !28)
!31 = span !3 560 587
!32 = (!2 !31)
!33 = span !3 601 618
!34 = (!2 !33 !7)
!35 = (!2 !33)
!36 = span !3 600 618
!37 = (!2 !36)
!38 = (!2 !36)
!39 = span !3 593 619
!40 = (!2 !39)
!41 = span !3 632 655
!42 = (!2 !41 !7)
!43 = (!2 !41)
!44 = span !3 625 656
!45 = (!2 !44)
!46 = span !3 669 693
!47 = (!2 !46 !7)
!48 = (!2 !46)
!49 = span !3 662 694
!50 = (!2 !49)
!51 = span !3 707 743
!52 = (!2 !51 !7)
!53 = (!2 !51)
!54 = span !3 700 744
!55 = (!2 !54)
!56 = span !3 757 771
!57 = (!2 !56 !7)
!58 = (!2 !56)
!59 = span !3 750 772
!60 = (!2 !59)
!61 = span !3 785 799
!62 = (!2 !61 !7)
!63 = (!2 !61)
!64 = span !3 778 800
!65 = (!2 !64)
!66 = span !3 814 830
!67 = (!2 !66)
!68 = span !3 834 835
!69 = span !3 814 835
!70 = (!2 !69)
!71 = (!2 !69)
!72 = span !3 807 836
!73 = (!2 !72)
!74 = span !3 849 865
!75 = (!2 !74)
!76 = span !3 869 870
!77 = span !3 849 870
!78 = (!2 !77)
!79 = (!2 !77)
!80 = span !3 842 871
!81 = (!2 !80)
!82 = span !3 884 900
!83 = (!2 !82)
!84 = span !3 904 905
!85 = span !3 884 905
!86 = (!2 !85)
!87 = (!2 !85)
!88 = span !3 877 906
!89 = (!2 !88)
!90 = span !3 919 934
!91 = (!2 !90)
!92 = span !3 938 939
!93 = span !3 919 939
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 912 940
!97 = (!2 !96)
!98 = span !3 953 970
!99 = (!2 !98)
!100 = span !3 974 976
!101 = span !3 953 976
!102 = (!2 !101)
!103 = (!2 !101)
!104 = span !3 946 977
!105 = (!2 !104)
!106 = span !3 990 1010
!107 = (!2 !106)
!108 = span !3 1014 1016
!109 = span !3 990 1016
!110 = (!2 !109)
!111 = (!2 !109)
!112 = span !3 983 1017
!113 = (!2 !112)
!114 = span !3 1030 1051
!115 = (!2 !114)
!116 = span !3 1055 1057
!117 = span !3 1030 1057
!118 = (!2 !117)
!119 = (!2 !117)
!120 = span !3 1023 1058
!121 = (!2 !120)
!122 = span !3 1071 1094
!123 = (!2 !122)
!124 = span !3 1098 1100
!125 = span !3 1071 1100
!126 = (!2 !125)
!127 = (!2 !125)
!128 = span !3 1064 1101
!129 = (!2 !128)
!130 = span !3 1115 1129
!131 = (!2 !130)
!132 = span !3 1133 1134
!133 = span !3 1115 1134
!134 = (!2 !133)
!135 = (!2 !133)
!136 = span !3 1108 1135
!137 = (!2 !136)
!138 = span !3 1148 1162
!139 = (!2 !138)
!140 = span !3 1166 1167
!141 = span !3 1148 1167
!142 = (!2 !141)
!143 = (!2 !141)
!144 = span !3 1141 1168
!145 = (!2 !144)
!146 = span !3 1181 1195
!147 = (!2 !146)
!148 = span !3 1199 1200
!149 = span !3 1181 1200
!150 = (!2 !149)
!151 = (!2 !149)
!152 = span !3 1174 1201
!153 = (!2 !152)
!154 = span !3 1214 1228
!155 = (!2 !154)
!156 = span !3 1232 1233
!157 = span !3 1214 1233
!158 = (!2 !157)
!159 = (!2 !157)
!160 = span !3 1207 1234
!161 = (!2 !160)
!162 = span !3 1247 1261
!163 = (!2 !162)
!164 = span !3 1265 1267
!165 = span !3 1247 1267
!166 = (!2 !165)
!167 = (!2 !165)
!168 = span !3 1240 1268
!169 = (!2 !168)
!170 = span !3 1281 1295
!171 = (!2 !170)
!172 = span !3 1299 1301
!173 = span !3 1281 1301
!174 = (!2 !173)
!175 = (!2 !173)
!176 = span !3 1274 1302
!177 = (!2 !176)
!178 = span !3 1309 1313
!179 = span !0 48 74
!180 = span !0 107 113
!181 = span !0 92 114
!182 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!183 = span !182 64237 64250
!184 = (!181 !183)
!185 = (!181 !183)
!186 = (!181 !183)
!187 = (!181 !183)
!188 = (!181 !183)
!189 = (!181 !183)
!190 = (!181 !183)
!191 = (!181 !183)
!192 = (!181 !183)
!193 = (!181 !183)
!194 = (!181 !183)
!195 = span !182 159 222
!196 = (!181 !183 !195)
!197 = (!181 !183)
!198 = (!181 !183 !195)
!199 = (!181 !183)
!200 = (!181 !183)
!201 = span !182 64221 64251
!202 = (!181 !201)
!203 = (!181 !201)
!204 = span !182 55 82
!205 = (!181 !201 !204)
!206 = (!181 !201)
!207 = (!181 !201)
!208 = (!181 !201)
!209 = (!181 !201)
!210 = (!181 !201)
!211 = (!181 !201)
!212 = (!181 !201)
!213 = (!181 !201)
!214 = (!181 !201)
!215 = (!181 !201)
!216 = (!181 !201)
!217 = (!181 !201)
!218 = (!181 !201)
!219 = (!181 !201)
!220 = (!181 !201)
!221 = (!181 !201)
!222 = (!181 !201)
!223 = (!181 !201)
!224 = (!181 !201)
!225 = (!181 !201)
!226 = (!181 !201)
!227 = (!181 !201)
!228 = (!181 !201)
!229 = (!181 !201)
!230 = (!181 !201)
!231 = span !182 3836 3919
!232 = (!181 !201 !231)
!233 = (!181 !201)
!234 = (!181 !201 !231)
!235 = (!181 !201)
!236 = (!181 !201)
!237 = span !182 64208 64252
!238 = (!181 !237)
!239 = (!181 !237)
!240 = span !182 64257 64263
!241 = (!181 !240)
!242 = span !182 64257 64278
!243 = (!181 !242)
!244 = (!181 !242)
!245 = (!181 !242 !204)
!246 = (!181 !242)
!247 = (!181 !242)
!248 = (!181 !242)
!249 = (!181 !242)
!250 = (!181 !242)
!251 = (!181 !242)
!252 = (!181 !242)
!253 = (!181 !242)
!254 = (!181 !242)
!255 = (!181 !242)
!256 = (!181 !242)
!257 = (!181 !242)
!258 = (!181 !242)
!259 = (!181 !242)
!260 = (!181 !242)
!261 = (!181 !242)
!262 = (!181 !242)
!263 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!264 = span !263 935 944
!265 = span !263 921 1019
!266 = span !263 961 971
!267 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!268 = span !267 1038 1059
!269 = span !263 982 1010
!270 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!271 = span !270 691 705
!272 = (!269 !271)

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __tmp_block_arg
        store v2 to v3
        br main_0_block0(v3), !5

        main_0_block0(v4: ptr b256):
        v5 = load v4
        v6 = const bool false
        br main_0_is_ref_type_9_block0(v6), !8

        main_0_is_ref_type_9_block0(v7: bool):
        br main_0_block1(v7), !9

        main_0_block1(v8: bool):
        v9 = const bool false, !11
        v10 = cmp eq v8 v9, !13
        br main_0_block2(v10), !14

        main_0_block2(v11: bool):
        v12 = call assert_2(v11), !16
        br main_0_is_ref_type_9_block04(v6), !18

        main_0_is_ref_type_9_block04(v13: bool):
        br main_0_block3(v13), !19

        main_0_block3(v14: bool):
        v15 = cmp eq v14 v9, !21
        br main_0_block5(v15), !22

        main_0_block5(v16: bool):
        v17 = call assert_2(v16), !24
        br main_0_is_ref_type_9_block07(v6), !26

        main_0_is_ref_type_9_block07(v18: bool):
        br main_0_block6(v18), !27

        main_0_block6(v19: bool):
        v20 = cmp eq v19 v9, !29
        br main_0_block8(v20), !30

        main_0_block8(v21: bool):
        v22 = call assert_2(v21), !32
        br main_0_is_ref_type_11_block0(v6), !34

        main_0_is_ref_type_11_block0(v23: bool):
        br main_0_block9(v23), !35

        main_0_block9(v24: bool):
        v25 = cmp eq v24 v9, !37
        br main_0_block10(v25), !38

        main_0_block10(v26: bool):
        v27 = call assert_2(v26), !40
        v28 = const bool true
        br main_0_is_ref_type_13_block0(v28), !42

        main_0_is_ref_type_13_block0(v29: bool):
        br main_0_block11(v29), !43

        main_0_block11(v30: bool):
        v31 = call assert_2(v30), !45
        br main_0_is_ref_type_15_block0(v28), !47

        main_0_is_ref_type_15_block0(v32: bool):
        br main_0_block12(v32), !48

        main_0_block12(v33: bool):
        v34 = call assert_2(v33), !50
        br main_0_is_ref_type_17_block0(v28), !52

        main_0_is_ref_type_17_block0(v35: bool):
        br main_0_block13(v35), !53

        main_0_block13(v36: bool):
        v37 = call assert_2(v36), !55
        br main_0_is_ref_type_19_block0(v28), !57

        main_0_is_ref_type_19_block0(v38: bool):
        br main_0_block14(v38), !58

        main_0_block14(v39: bool):
        v40 = call assert_2(v39), !60
        br main_0_is_ref_type_21_block0(v28), !62

        main_0_is_ref_type_21_block0(v41: bool):
        br main_0_block15(v41), !63

        main_0_block15(v42: bool):
        v43 = call assert_2(v42), !65
        v44 = const u64 8
        br main_0_block16(v44), !67

        main_0_block16(v45: u64):
        v46 = const u64 8, !68
        v47 = cmp eq v45 v46, !70
        br main_0_block17(v47), !71

        main_0_block17(v48: bool):
        v49 = call assert_2(v48), !73
        br main_0_block18(v44), !75

        main_0_block18(v50: u64):
        v51 = const u64 8, !76
        v52 = cmp eq v50 v51, !78
        br main_0_block19(v52), !79

        main_0_block19(v53: bool):
        v54 = call assert_2(v53), !81
        br main_0_block20(v44), !83

        main_0_block20(v55: u64):
        v56 = const u64 8, !84
        v57 = cmp eq v55 v56, !86
        br main_0_block21(v57), !87

        main_0_block21(v58: bool):
        v59 = call assert_2(v58), !89
        v60 = const u64 1
        br main_0_block22(v60), !91

        main_0_block22(v61: u64):
        v62 = const u64 1, !92
        v63 = cmp eq v61 v62, !94
        br main_0_block23(v63), !95

        main_0_block23(v64: bool):
        v65 = call assert_2(v64), !97
        v66 = const u64 32
        br main_0_block24(v66), !99

        main_0_block24(v67: u64):
        v68 = const u64 32, !100
        v69 = cmp eq v67 v68, !102
        br main_0_block25(v69), !103

        main_0_block25(v70: bool):
        v71 = call assert_2(v70), !105
        v72 = const u64 16
        br main_0_block26(v72), !107

        main_0_block26(v73: u64):
        v74 = const u64 16, !108
        v75 = cmp eq v73 v74, !110
        br main_0_block27(v75), !111

        main_0_block27(v76: bool):
        v77 = call assert_2(v76), !113
        v78 = const u64 24
        br main_0_block28(v78), !115

        main_0_block28(v79: u64):
        v80 = const u64 24, !116
        v81 = cmp eq v79 v80, !118
        br main_0_block29(v81), !119

        main_0_block29(v82: bool):
        v83 = call assert_2(v82), !121
        br main_0_block30(v72), !123

        main_0_block30(v84: u64):
        v85 = const u64 16, !124
        v86 = cmp eq v84 v85, !126
        br main_0_block31(v86), !127

        main_0_block31(v87: bool):
        v88 = call assert_2(v87), !129
        v89 = const u64 8
        br main_0_block32(v89), !131

        main_0_block32(v90: u64):
        v91 = const u64 8, !132
        v92 = cmp eq v90 v91, !134
        br main_0_block33(v92), !135

        main_0_block33(v93: bool):
        v94 = call assert_2(v93), !137
        br main_0_block34(v89), !139

        main_0_block34(v95: u64):
        v96 = const u64 8, !140
        v97 = cmp eq v95 v96, !142
        br main_0_block35(v97), !143

        main_0_block35(v98: bool):
        v99 = call assert_2(v98), !145
        br main_0_block36(v89), !147

        main_0_block36(v100: u64):
        v101 = const u64 8, !148
        v102 = cmp eq v100 v101, !150
        br main_0_block37(v102), !151

        main_0_block37(v103: bool):
        v104 = call assert_2(v103), !153
        v105 = const u64 1
        br main_0_block38(v105), !155

        main_0_block38(v106: u64):
        v107 = const u64 1, !156
        v108 = cmp eq v106 v107, !158
        br main_0_block39(v108), !159

        main_0_block39(v109: bool):
        v110 = call assert_2(v109), !161
        v111 = const u64 32
        br main_0_block40(v111), !163

        main_0_block40(v112: u64):
        v113 = const u64 32, !164
        v114 = cmp eq v112 v113, !166
        br main_0_block41(v114), !167

        main_0_block41(v115: bool):
        v116 = call assert_2(v115), !169
        v117 = const u64 16
        br main_0_block42(v117), !171

        main_0_block42(v118: u64):
        v119 = const u64 16, !172
        v120 = cmp eq v118 v119, !174
        br main_0_block43(v120), !175

        main_0_block43(v121: bool):
        v122 = call assert_2(v121), !177
        v123 = const bool true, !178
        br block0(v123), !2

        block0(v124: bool):
        v125 = get_local ptr bool, result, !179
        store v124 to v125, !179
        v126 = get_local ptr bool, result, !180
        v127 = load v126
        v128 = const u64 1024
        v129 = asm(cap: v128) -> u64 hp, !184 {
            aloc   cap
        }
        v130 = int_to_ptr v129 to ptr u8, !185
        v131 = ptr_to_int v130 to u64, !186
        v132 = get_local ptr { u64, u64, u64 }, __anon_00, !187
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133, !188
        store v131 to v134, !189
        v135 = const u64 1
        v136 = get_elem_ptr v132, ptr u64, v135, !190
        store v128 to v136, !191
        v137 = const u64 2
        v138 = get_elem_ptr v132, ptr u64, v137, !192
        v139 = const u64 0
        store v139 to v138, !193
        v140 = asm(buffer: v132) -> ptr { u64, u64, u64 } buffer {
        }
        v141 = load v140
        v142 = get_local ptr { { u64, u64, u64 } }, __anon_10, !195
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr { u64, u64, u64 }, v143, !196
        store v141 to v144, !197
        v145 = load v142, !198
        v146 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v145 to v146
        br encode_38_block0(v146), !199

        encode_38_block0(v147: ptr { { u64, u64, u64 } }):
        v148 = load v147
        v149 = ptr_to_int v147 to u64, !201
        v150 = int_to_ptr v149 to ptr { { u64, u64, u64 } }, !202
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr { u64, u64, u64 }, v151, !204
        v153 = load v152, !205
        v154 = get_local ptr { u64, u64, u64 }, __asm_arg
        store v153 to v154
        v155 = asm(buffer: v154) -> ptr { u64, u64, u64 } buffer {
        }
        v156 = load v155
        v157 = get_local ptr { u64, u64, u64 }, __anon_000, !206
        store v156 to v157, !207
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr u64, v158, !208
        v160 = load v159, !209
        v161 = int_to_ptr v160 to ptr u8, !210
        v162 = const u64 1
        v163 = get_elem_ptr v157, ptr u64, v162, !211
        v164 = load v163, !212
        v165 = const u64 2
        v166 = get_elem_ptr v157, ptr u64, v165, !213
        v167 = load v166, !214
        v168 = ptr_to_int v161 to u64, !215
        v169 = add v168, v167, !216
        v170 = int_to_ptr v169 to ptr bool, !217
        store v127 to v170, !218
        v171 = const u64 1
        v172 = add v167, v171, !219
        v173 = ptr_to_int v161 to u64, !220
        v174 = get_local ptr { u64, u64, u64 }, __anon_100, !221
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr u64, v175, !222
        store v173 to v176, !223
        v177 = const u64 1
        v178 = get_elem_ptr v174, ptr u64, v177, !224
        store v164 to v178, !225
        v179 = const u64 2
        v180 = get_elem_ptr v174, ptr u64, v179, !226
        store v172 to v180, !227
        v181 = asm(buffer: v174) -> ptr { u64, u64, u64 } buffer {
        }
        v182 = load v181
        v183 = get_local ptr { { u64, u64, u64 } }, __anon_20, !229
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr { u64, u64, u64 }, v184, !230
        store v182 to v185, !231
        v186 = load v183, !232
        v187 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        store v186 to v187
        br encode_38_block1(v187), !233

        encode_38_block1(v188: ptr { { u64, u64, u64 } }):
        v189 = load v188
        v190 = get_local ptr { { u64, u64, u64 } }, buffer, !235
        store v189 to v190, !236
        v191 = get_local ptr { { u64, u64, u64 } }, buffer, !238
        v192 = load v191, !181
        v193 = ptr_to_int v191 to u64, !240
        v194 = int_to_ptr v193 to ptr { { u64, u64, u64 } }, !241
        v195 = const u64 0
        v196 = get_elem_ptr v194, ptr { u64, u64, u64 }, v195, !242
        v197 = load v196, !243
        v198 = get_local ptr { u64, u64, u64 }, __asm_arg0
        store v197 to v198
        v199 = asm(buffer: v198) -> ptr { u64, u64, u64 } buffer {
        }
        v200 = load v199
        v201 = get_local ptr { u64, u64, u64 }, __anon_01, !244
        store v200 to v201, !245
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !246
        v204 = load v203, !247
        v205 = int_to_ptr v204 to ptr u8, !248
        v206 = const u64 2
        v207 = get_elem_ptr v201, ptr u64, v206, !249
        v208 = load v207, !250
        v209 = ptr_to_int v205 to u64, !251
        v210 = get_local ptr { u64, u64 }, __anon_11, !252
        v211 = const u64 0
        v212 = get_elem_ptr v210, ptr u64, v211, !253
        store v209 to v212, !254
        v213 = const u64 1
        v214 = get_elem_ptr v210, ptr u64, v213, !255
        store v208 to v214, !256
        v215 = asm(s: v210) -> ptr slice s {
        }
        v216 = load v215
        v217 = get_local ptr slice, __tmp_block_arg2
        store v216 to v217
        br encode_38_block2(v217), !257

        encode_38_block2(v218: ptr slice):
        v219 = load v218
        v220 = get_local ptr slice, __tmp_block_arg3
        store v219 to v220
        br block1(v220), !181

        block1(v221: ptr slice):
        v222 = load v221
        store v222 to v0
        ret ptr slice v0
    }

    pub fn assert_2(condition !259: bool) -> (), !260 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !11
        v1 = cmp eq condition v0, !261
        br block3(v1), !261

        block3(v2: bool):
        cbr v2, block0(), block1(), !261

        block0():
        v3 = const u64 18446744073709486084, !263
        revert v3, !267

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 502 520
!7 = span !3 136 160
!8 = (!2 !6 !7)
!9 = (!2 !6)
!10 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!11 = span !10 9991 9996
!12 = span !3 501 520
!13 = (!2 !12)
!14 = (!2 !12)
!15 = span !3 494 521
!16 = (!2 !15)
!17 = span !3 535 553
!18 = (!2 !17 !7)
!19 = (!2 !17)
!20 = span !3 534 553
!21 = (!2 !20)
!22 = (!2 !20)
!23 = span !3 527 554
!24 = (!2 !23)
!25 = span !3 568 586
!26 = (!2 !25 !7)
!27 = (!2 !25)
!28 = span !3 567 586
!29 = (!2 !28)
!30 = (!2 !28)
!31 = span !3 560 587
!32 = (!2 !31)
!33 = span !3 601 618
!34 = (!2 !33 !7)
!35 = (!2 !33)
!36 = span !3 600 618
!37 = (!2 !36)
!38 = (!2 !36)
!39 = span !3 593 619
!40 = (!2 !39)
!41 = span !3 632 655
!42 = (!2 !41 !7)
!43 = (!2 !41)
!44 = span !3 625 656
!45 = (!2 !44)
!46 = span !3 669 693
!47 = (!2 !46 !7)
!48 = (!2 !46)
!49 = span !3 662 694
!50 = (!2 !49)
!51 = span !3 707 743
!52 = (!2 !51 !7)
!53 = (!2 !51)
!54 = span !3 700 744
!55 = (!2 !54)
!56 = span !3 757 771
!57 = (!2 !56 !7)
!58 = (!2 !56)
!59 = span !3 750 772
!60 = (!2 !59)
!61 = span !3 785 799
!62 = (!2 !61 !7)
!63 = (!2 !61)
!64 = span !3 778 800
!65 = (!2 !64)
!66 = span !3 814 830
!67 = (!2 !66)
!68 = span !3 834 835
!69 = span !3 814 835
!70 = (!2 !69)
!71 = (!2 !69)
!72 = span !3 807 836
!73 = (!2 !72)
!74 = span !3 849 865
!75 = (!2 !74)
!76 = span !3 869 870
!77 = span !3 849 870
!78 = (!2 !77)
!79 = (!2 !77)
!80 = span !3 842 871
!81 = (!2 !80)
!82 = span !3 884 900
!83 = (!2 !82)
!84 = span !3 904 905
!85 = span !3 884 905
!86 = (!2 !85)
!87 = (!2 !85)
!88 = span !3 877 906
!89 = (!2 !88)
!90 = span !3 919 934
!91 = (!2 !90)
!92 = span !3 938 939
!93 = span !3 919 939
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 912 940
!97 = (!2 !96)
!98 = span !3 953 970
!99 = (!2 !98)
!100 = span !3 974 976
!101 = span !3 953 976
!102 = (!2 !101)
!103 = (!2 !101)
!104 = span !3 946 977
!105 = (!2 !104)
!106 = span !3 990 1010
!107 = (!2 !106)
!108 = span !3 1014 1016
!109 = span !3 990 1016
!110 = (!2 !109)
!111 = (!2 !109)
!112 = span !3 983 1017
!113 = (!2 !112)
!114 = span !3 1030 1051
!115 = (!2 !114)
!116 = span !3 1055 1057
!117 = span !3 1030 1057
!118 = (!2 !117)
!119 = (!2 !117)
!120 = span !3 1023 1058
!121 = (!2 !120)
!122 = span !3 1071 1094
!123 = (!2 !122)
!124 = span !3 1098 1100
!125 = span !3 1071 1100
!126 = (!2 !125)
!127 = (!2 !125)
!128 = span !3 1064 1101
!129 = (!2 !128)
!130 = span !3 1115 1129
!131 = (!2 !130)
!132 = span !3 1133 1134
!133 = span !3 1115 1134
!134 = (!2 !133)
!135 = (!2 !133)
!136 = span !3 1108 1135
!137 = (!2 !136)
!138 = span !3 1148 1162
!139 = (!2 !138)
!140 = span !3 1166 1167
!141 = span !3 1148 1167
!142 = (!2 !141)
!143 = (!2 !141)
!144 = span !3 1141 1168
!145 = (!2 !144)
!146 = span !3 1181 1195
!147 = (!2 !146)
!148 = span !3 1199 1200
!149 = span !3 1181 1200
!150 = (!2 !149)
!151 = (!2 !149)
!152 = span !3 1174 1201
!153 = (!2 !152)
!154 = span !3 1214 1228
!155 = (!2 !154)
!156 = span !3 1232 1233
!157 = span !3 1214 1233
!158 = (!2 !157)
!159 = (!2 !157)
!160 = span !3 1207 1234
!161 = (!2 !160)
!162 = span !3 1247 1261
!163 = (!2 !162)
!164 = span !3 1265 1267
!165 = span !3 1247 1267
!166 = (!2 !165)
!167 = (!2 !165)
!168 = span !3 1240 1268
!169 = (!2 !168)
!170 = span !3 1281 1295
!171 = (!2 !170)
!172 = span !3 1299 1301
!173 = span !3 1281 1301
!174 = (!2 !173)
!175 = (!2 !173)
!176 = span !3 1274 1302
!177 = (!2 !176)
!178 = span !3 1309 1313
!179 = span !0 48 74
!180 = span !0 107 113
!181 = span !0 92 114
!182 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!183 = span !182 64237 64250
!184 = (!181 !183)
!185 = (!181 !183)
!186 = (!181 !183)
!187 = (!181 !183)
!188 = (!181 !183)
!189 = (!181 !183)
!190 = (!181 !183)
!191 = (!181 !183)
!192 = (!181 !183)
!193 = (!181 !183)
!194 = span !182 159 222
!195 = (!181 !183 !194)
!196 = (!181 !183)
!197 = (!181 !183 !194)
!198 = (!181 !183)
!199 = (!181 !183)
!200 = span !182 64221 64251
!201 = (!181 !200)
!202 = (!181 !200)
!203 = span !182 55 82
!204 = (!181 !200 !203)
!205 = (!181 !200)
!206 = (!181 !200)
!207 = (!181 !200)
!208 = (!181 !200)
!209 = (!181 !200)
!210 = (!181 !200)
!211 = (!181 !200)
!212 = (!181 !200)
!213 = (!181 !200)
!214 = (!181 !200)
!215 = (!181 !200)
!216 = (!181 !200)
!217 = (!181 !200)
!218 = (!181 !200)
!219 = (!181 !200)
!220 = (!181 !200)
!221 = (!181 !200)
!222 = (!181 !200)
!223 = (!181 !200)
!224 = (!181 !200)
!225 = (!181 !200)
!226 = (!181 !200)
!227 = (!181 !200)
!228 = span !182 3836 3919
!229 = (!181 !200 !228)
!230 = (!181 !200)
!231 = (!181 !200 !228)
!232 = (!181 !200)
!233 = (!181 !200)
!234 = span !182 64208 64252
!235 = (!181 !234)
!236 = (!181 !234)
!237 = span !182 64257 64263
!238 = (!181 !237)
!239 = span !182 64257 64278
!240 = (!181 !239)
!241 = (!181 !239)
!242 = (!181 !239 !203)
!243 = (!181 !239)
!244 = (!181 !239)
!245 = (!181 !239)
!246 = (!181 !239)
!247 = (!181 !239)
!248 = (!181 !239)
!249 = (!181 !239)
!250 = (!181 !239)
!251 = (!181 !239)
!252 = (!181 !239)
!253 = (!181 !239)
!254 = (!181 !239)
!255 = (!181 !239)
!256 = (!181 !239)
!257 = (!181 !239)
!258 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!259 = span !258 935 944
!260 = span !258 921 1019
!261 = span !258 961 971
!262 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!263 = span !262 1038 1059
!264 = span !258 982 1010
!265 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!266 = span !265 691 705
!267 = (!264 !266)

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __tmp_block_arg
        mem_copy_val v3, v1
        br main_0_block0(v3), !5

        main_0_block0(v4: ptr b256):
        v5 = load v4
        v6 = const bool false
        br main_0_is_ref_type_9_block0(v6), !8

        main_0_is_ref_type_9_block0(v7: bool):
        br main_0_block1(v7), !9

        main_0_block1(v8: bool):
        v9 = const bool false, !11
        v10 = cmp eq v8 v9, !13
        br main_0_block2(v10), !14

        main_0_block2(v11: bool):
        v12 = call assert_2(v11), !16
        br main_0_is_ref_type_9_block04(v6), !18

        main_0_is_ref_type_9_block04(v13: bool):
        br main_0_block3(v13), !19

        main_0_block3(v14: bool):
        v15 = cmp eq v14 v9, !21
        br main_0_block5(v15), !22

        main_0_block5(v16: bool):
        v17 = call assert_2(v16), !24
        br main_0_is_ref_type_9_block07(v6), !26

        main_0_is_ref_type_9_block07(v18: bool):
        br main_0_block6(v18), !27

        main_0_block6(v19: bool):
        v20 = cmp eq v19 v9, !29
        br main_0_block8(v20), !30

        main_0_block8(v21: bool):
        v22 = call assert_2(v21), !32
        br main_0_is_ref_type_11_block0(v6), !34

        main_0_is_ref_type_11_block0(v23: bool):
        br main_0_block9(v23), !35

        main_0_block9(v24: bool):
        v25 = cmp eq v24 v9, !37
        br main_0_block10(v25), !38

        main_0_block10(v26: bool):
        v27 = call assert_2(v26), !40
        v28 = const bool true
        br main_0_is_ref_type_13_block0(v28), !42

        main_0_is_ref_type_13_block0(v29: bool):
        br main_0_block11(v29), !43

        main_0_block11(v30: bool):
        v31 = call assert_2(v30), !45
        br main_0_is_ref_type_15_block0(v28), !47

        main_0_is_ref_type_15_block0(v32: bool):
        br main_0_block12(v32), !48

        main_0_block12(v33: bool):
        v34 = call assert_2(v33), !50
        br main_0_is_ref_type_17_block0(v28), !52

        main_0_is_ref_type_17_block0(v35: bool):
        br main_0_block13(v35), !53

        main_0_block13(v36: bool):
        v37 = call assert_2(v36), !55
        br main_0_is_ref_type_19_block0(v28), !57

        main_0_is_ref_type_19_block0(v38: bool):
        br main_0_block14(v38), !58

        main_0_block14(v39: bool):
        v40 = call assert_2(v39), !60
        br main_0_is_ref_type_21_block0(v28), !62

        main_0_is_ref_type_21_block0(v41: bool):
        br main_0_block15(v41), !63

        main_0_block15(v42: bool):
        v43 = call assert_2(v42), !65
        v44 = const u64 8
        br main_0_block16(v44), !67

        main_0_block16(v45: u64):
        v46 = const u64 8, !68
        v47 = cmp eq v45 v46, !70
        br main_0_block17(v47), !71

        main_0_block17(v48: bool):
        v49 = call assert_2(v48), !73
        br main_0_block18(v44), !75

        main_0_block18(v50: u64):
        v51 = const u64 8, !76
        v52 = cmp eq v50 v51, !78
        br main_0_block19(v52), !79

        main_0_block19(v53: bool):
        v54 = call assert_2(v53), !81
        br main_0_block20(v44), !83

        main_0_block20(v55: u64):
        v56 = const u64 8, !84
        v57 = cmp eq v55 v56, !86
        br main_0_block21(v57), !87

        main_0_block21(v58: bool):
        v59 = call assert_2(v58), !89
        v60 = const u64 1
        br main_0_block22(v60), !91

        main_0_block22(v61: u64):
        v62 = const u64 1, !92
        v63 = cmp eq v61 v62, !94
        br main_0_block23(v63), !95

        main_0_block23(v64: bool):
        v65 = call assert_2(v64), !97
        v66 = const u64 32
        br main_0_block24(v66), !99

        main_0_block24(v67: u64):
        v68 = const u64 32, !100
        v69 = cmp eq v67 v68, !102
        br main_0_block25(v69), !103

        main_0_block25(v70: bool):
        v71 = call assert_2(v70), !105
        v72 = const u64 16
        br main_0_block26(v72), !107

        main_0_block26(v73: u64):
        v74 = const u64 16, !108
        v75 = cmp eq v73 v74, !110
        br main_0_block27(v75), !111

        main_0_block27(v76: bool):
        v77 = call assert_2(v76), !113
        v78 = const u64 24
        br main_0_block28(v78), !115

        main_0_block28(v79: u64):
        v80 = const u64 24, !116
        v81 = cmp eq v79 v80, !118
        br main_0_block29(v81), !119

        main_0_block29(v82: bool):
        v83 = call assert_2(v82), !121
        br main_0_block30(v72), !123

        main_0_block30(v84: u64):
        v85 = const u64 16, !124
        v86 = cmp eq v84 v85, !126
        br main_0_block31(v86), !127

        main_0_block31(v87: bool):
        v88 = call assert_2(v87), !129
        v89 = const u64 8
        br main_0_block32(v89), !131

        main_0_block32(v90: u64):
        v91 = const u64 8, !132
        v92 = cmp eq v90 v91, !134
        br main_0_block33(v92), !135

        main_0_block33(v93: bool):
        v94 = call assert_2(v93), !137
        br main_0_block34(v89), !139

        main_0_block34(v95: u64):
        v96 = const u64 8, !140
        v97 = cmp eq v95 v96, !142
        br main_0_block35(v97), !143

        main_0_block35(v98: bool):
        v99 = call assert_2(v98), !145
        br main_0_block36(v89), !147

        main_0_block36(v100: u64):
        v101 = const u64 8, !148
        v102 = cmp eq v100 v101, !150
        br main_0_block37(v102), !151

        main_0_block37(v103: bool):
        v104 = call assert_2(v103), !153
        v105 = const u64 1
        br main_0_block38(v105), !155

        main_0_block38(v106: u64):
        v107 = const u64 1, !156
        v108 = cmp eq v106 v107, !158
        br main_0_block39(v108), !159

        main_0_block39(v109: bool):
        v110 = call assert_2(v109), !161
        v111 = const u64 32
        br main_0_block40(v111), !163

        main_0_block40(v112: u64):
        v113 = const u64 32, !164
        v114 = cmp eq v112 v113, !166
        br main_0_block41(v114), !167

        main_0_block41(v115: bool):
        v116 = call assert_2(v115), !169
        v117 = const u64 16
        br main_0_block42(v117), !171

        main_0_block42(v118: u64):
        v119 = const u64 16, !172
        v120 = cmp eq v118 v119, !174
        br main_0_block43(v120), !175

        main_0_block43(v121: bool):
        v122 = call assert_2(v121), !177
        v123 = const bool true, !178
        br block0(v123), !2

        block0(v124: bool):
        v125 = get_local ptr bool, result, !179
        store v124 to v125, !179
        v126 = get_local ptr bool, result, !180
        v127 = load v126
        v128 = const u64 1024
        v129 = asm(cap: v128) -> u64 hp, !184 {
            aloc   cap
        }
        v130 = int_to_ptr v129 to ptr u8, !185
        v131 = ptr_to_int v130 to u64, !186
        v132 = get_local ptr { u64, u64, u64 }, __anon_00, !187
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133, !188
        store v131 to v134, !189
        v135 = const u64 1
        v136 = get_elem_ptr v132, ptr u64, v135, !190
        store v128 to v136, !191
        v137 = const u64 2
        v138 = get_elem_ptr v132, ptr u64, v137, !192
        v139 = const u64 0
        store v139 to v138, !193
        v140 = asm(buffer: v132) -> ptr { u64, u64, u64 } buffer {
        }
        v141 = load v140
        v142 = get_local ptr { { u64, u64, u64 } }, __anon_10, !195
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr { u64, u64, u64 }, v143, !196
        mem_copy_val v144, v140
        v145 = load v142, !197
        v146 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v146, v142
        br encode_38_block0(v146), !198

        encode_38_block0(v147: ptr { { u64, u64, u64 } }):
        v148 = load v147
        v149 = ptr_to_int v147 to u64, !200
        v150 = int_to_ptr v149 to ptr { { u64, u64, u64 } }, !201
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr { u64, u64, u64 }, v151, !203
        v153 = load v152, !204
        v154 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v154, v152
        v155 = asm(buffer: v154) -> ptr { u64, u64, u64 } buffer {
        }
        v156 = load v155
        v157 = get_local ptr { u64, u64, u64 }, __anon_000, !205
        mem_copy_val v157, v155
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr u64, v158, !206
        v160 = load v159, !207
        v161 = int_to_ptr v160 to ptr u8, !208
        v162 = const u64 1
        v163 = get_elem_ptr v157, ptr u64, v162, !209
        v164 = load v163, !210
        v165 = const u64 2
        v166 = get_elem_ptr v157, ptr u64, v165, !211
        v167 = load v166, !212
        v168 = ptr_to_int v161 to u64, !213
        v169 = add v168, v167, !214
        v170 = int_to_ptr v169 to ptr bool, !215
        mem_copy_val v170, v126
        v171 = const u64 1
        v172 = add v167, v171, !216
        v173 = ptr_to_int v161 to u64, !217
        v174 = get_local ptr { u64, u64, u64 }, __anon_100, !218
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr u64, v175, !219
        store v173 to v176, !220
        v177 = const u64 1
        v178 = get_elem_ptr v174, ptr u64, v177, !221
        mem_copy_val v178, v163
        v179 = const u64 2
        v180 = get_elem_ptr v174, ptr u64, v179, !222
        store v172 to v180, !223
        v181 = asm(buffer: v174) -> ptr { u64, u64, u64 } buffer {
        }
        v182 = load v181
        v183 = get_local ptr { { u64, u64, u64 } }, __anon_20, !225
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr { u64, u64, u64 }, v184, !226
        mem_copy_val v185, v181
        v186 = load v183, !227
        v187 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v187, v183
        br encode_38_block1(v187), !228

        encode_38_block1(v188: ptr { { u64, u64, u64 } }):
        v189 = load v188
        v190 = get_local ptr { { u64, u64, u64 } }, buffer, !230
        mem_copy_val v190, v188
        v191 = get_local ptr { { u64, u64, u64 } }, buffer, !232
        v192 = load v191, !181
        v193 = ptr_to_int v191 to u64, !234
        v194 = int_to_ptr v193 to ptr { { u64, u64, u64 } }, !235
        v195 = const u64 0
        v196 = get_elem_ptr v194, ptr { u64, u64, u64 }, v195, !236
        v197 = load v196, !237
        v198 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v198, v196
        v199 = asm(buffer: v198) -> ptr { u64, u64, u64 } buffer {
        }
        v200 = load v199
        v201 = get_local ptr { u64, u64, u64 }, __anon_01, !238
        mem_copy_val v201, v199
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !239
        v204 = load v203, !240
        v205 = int_to_ptr v204 to ptr u8, !241
        v206 = const u64 2
        v207 = get_elem_ptr v201, ptr u64, v206, !242
        v208 = load v207, !243
        v209 = ptr_to_int v205 to u64, !244
        v210 = get_local ptr { u64, u64 }, __anon_11, !245
        v211 = const u64 0
        v212 = get_elem_ptr v210, ptr u64, v211, !246
        store v209 to v212, !247
        v213 = const u64 1
        v214 = get_elem_ptr v210, ptr u64, v213, !248
        mem_copy_val v214, v207
        v215 = asm(s: v210) -> ptr slice s {
        }
        v216 = load v215
        v217 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v217, v215
        br encode_38_block2(v217), !249

        encode_38_block2(v218: ptr slice):
        v219 = load v218
        v220 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v220, v218
        br block1(v220), !181

        block1(v221: ptr slice):
        v222 = load v221
        mem_copy_val v0, v221
        ret ptr slice v0
    }

    pub fn assert_2(condition !251: bool) -> (), !252 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !11
        v1 = cmp eq condition v0, !253
        br block3(v1), !253

        block3(v2: bool):
        cbr v2, block0(), block1(), !253

        block0():
        v3 = const u64 18446744073709486084, !255
        revert v3, !259

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 502 520
!7 = span !3 136 160
!8 = (!2 !6 !7)
!9 = (!2 !6)
!10 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!11 = span !10 9991 9996
!12 = span !3 501 520
!13 = (!2 !12)
!14 = (!2 !12)
!15 = span !3 494 521
!16 = (!2 !15)
!17 = span !3 535 553
!18 = (!2 !17 !7)
!19 = (!2 !17)
!20 = span !3 534 553
!21 = (!2 !20)
!22 = (!2 !20)
!23 = span !3 527 554
!24 = (!2 !23)
!25 = span !3 568 586
!26 = (!2 !25 !7)
!27 = (!2 !25)
!28 = span !3 567 586
!29 = (!2 !28)
!30 = (!2 !28)
!31 = span !3 560 587
!32 = (!2 !31)
!33 = span !3 601 618
!34 = (!2 !33 !7)
!35 = (!2 !33)
!36 = span !3 600 618
!37 = (!2 !36)
!38 = (!2 !36)
!39 = span !3 593 619
!40 = (!2 !39)
!41 = span !3 632 655
!42 = (!2 !41 !7)
!43 = (!2 !41)
!44 = span !3 625 656
!45 = (!2 !44)
!46 = span !3 669 693
!47 = (!2 !46 !7)
!48 = (!2 !46)
!49 = span !3 662 694
!50 = (!2 !49)
!51 = span !3 707 743
!52 = (!2 !51 !7)
!53 = (!2 !51)
!54 = span !3 700 744
!55 = (!2 !54)
!56 = span !3 757 771
!57 = (!2 !56 !7)
!58 = (!2 !56)
!59 = span !3 750 772
!60 = (!2 !59)
!61 = span !3 785 799
!62 = (!2 !61 !7)
!63 = (!2 !61)
!64 = span !3 778 800
!65 = (!2 !64)
!66 = span !3 814 830
!67 = (!2 !66)
!68 = span !3 834 835
!69 = span !3 814 835
!70 = (!2 !69)
!71 = (!2 !69)
!72 = span !3 807 836
!73 = (!2 !72)
!74 = span !3 849 865
!75 = (!2 !74)
!76 = span !3 869 870
!77 = span !3 849 870
!78 = (!2 !77)
!79 = (!2 !77)
!80 = span !3 842 871
!81 = (!2 !80)
!82 = span !3 884 900
!83 = (!2 !82)
!84 = span !3 904 905
!85 = span !3 884 905
!86 = (!2 !85)
!87 = (!2 !85)
!88 = span !3 877 906
!89 = (!2 !88)
!90 = span !3 919 934
!91 = (!2 !90)
!92 = span !3 938 939
!93 = span !3 919 939
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 912 940
!97 = (!2 !96)
!98 = span !3 953 970
!99 = (!2 !98)
!100 = span !3 974 976
!101 = span !3 953 976
!102 = (!2 !101)
!103 = (!2 !101)
!104 = span !3 946 977
!105 = (!2 !104)
!106 = span !3 990 1010
!107 = (!2 !106)
!108 = span !3 1014 1016
!109 = span !3 990 1016
!110 = (!2 !109)
!111 = (!2 !109)
!112 = span !3 983 1017
!113 = (!2 !112)
!114 = span !3 1030 1051
!115 = (!2 !114)
!116 = span !3 1055 1057
!117 = span !3 1030 1057
!118 = (!2 !117)
!119 = (!2 !117)
!120 = span !3 1023 1058
!121 = (!2 !120)
!122 = span !3 1071 1094
!123 = (!2 !122)
!124 = span !3 1098 1100
!125 = span !3 1071 1100
!126 = (!2 !125)
!127 = (!2 !125)
!128 = span !3 1064 1101
!129 = (!2 !128)
!130 = span !3 1115 1129
!131 = (!2 !130)
!132 = span !3 1133 1134
!133 = span !3 1115 1134
!134 = (!2 !133)
!135 = (!2 !133)
!136 = span !3 1108 1135
!137 = (!2 !136)
!138 = span !3 1148 1162
!139 = (!2 !138)
!140 = span !3 1166 1167
!141 = span !3 1148 1167
!142 = (!2 !141)
!143 = (!2 !141)
!144 = span !3 1141 1168
!145 = (!2 !144)
!146 = span !3 1181 1195
!147 = (!2 !146)
!148 = span !3 1199 1200
!149 = span !3 1181 1200
!150 = (!2 !149)
!151 = (!2 !149)
!152 = span !3 1174 1201
!153 = (!2 !152)
!154 = span !3 1214 1228
!155 = (!2 !154)
!156 = span !3 1232 1233
!157 = span !3 1214 1233
!158 = (!2 !157)
!159 = (!2 !157)
!160 = span !3 1207 1234
!161 = (!2 !160)
!162 = span !3 1247 1261
!163 = (!2 !162)
!164 = span !3 1265 1267
!165 = span !3 1247 1267
!166 = (!2 !165)
!167 = (!2 !165)
!168 = span !3 1240 1268
!169 = (!2 !168)
!170 = span !3 1281 1295
!171 = (!2 !170)
!172 = span !3 1299 1301
!173 = span !3 1281 1301
!174 = (!2 !173)
!175 = (!2 !173)
!176 = span !3 1274 1302
!177 = (!2 !176)
!178 = span !3 1309 1313
!179 = span !0 48 74
!180 = span !0 107 113
!181 = span !0 92 114
!182 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!183 = span !182 64237 64250
!184 = (!181 !183)
!185 = (!181 !183)
!186 = (!181 !183)
!187 = (!181 !183)
!188 = (!181 !183)
!189 = (!181 !183)
!190 = (!181 !183)
!191 = (!181 !183)
!192 = (!181 !183)
!193 = (!181 !183)
!194 = span !182 159 222
!195 = (!181 !183 !194)
!196 = (!181 !183)
!197 = (!181 !183)
!198 = (!181 !183)
!199 = span !182 64221 64251
!200 = (!181 !199)
!201 = (!181 !199)
!202 = span !182 55 82
!203 = (!181 !199 !202)
!204 = (!181 !199)
!205 = (!181 !199)
!206 = (!181 !199)
!207 = (!181 !199)
!208 = (!181 !199)
!209 = (!181 !199)
!210 = (!181 !199)
!211 = (!181 !199)
!212 = (!181 !199)
!213 = (!181 !199)
!214 = (!181 !199)
!215 = (!181 !199)
!216 = (!181 !199)
!217 = (!181 !199)
!218 = (!181 !199)
!219 = (!181 !199)
!220 = (!181 !199)
!221 = (!181 !199)
!222 = (!181 !199)
!223 = (!181 !199)
!224 = span !182 3836 3919
!225 = (!181 !199 !224)
!226 = (!181 !199)
!227 = (!181 !199)
!228 = (!181 !199)
!229 = span !182 64208 64252
!230 = (!181 !229)
!231 = span !182 64257 64263
!232 = (!181 !231)
!233 = span !182 64257 64278
!234 = (!181 !233)
!235 = (!181 !233)
!236 = (!181 !233 !202)
!237 = (!181 !233)
!238 = (!181 !233)
!239 = (!181 !233)
!240 = (!181 !233)
!241 = (!181 !233)
!242 = (!181 !233)
!243 = (!181 !233)
!244 = (!181 !233)
!245 = (!181 !233)
!246 = (!181 !233)
!247 = (!181 !233)
!248 = (!181 !233)
!249 = (!181 !233)
!250 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!251 = span !250 935 944
!252 = span !250 921 1019
!253 = span !250 961 971
!254 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!255 = span !254 1038 1059
!256 = span !250 982 1010
!257 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!258 = span !257 691 705
!259 = (!256 !258)

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __tmp_block_arg
        br main_0_block0(v1), !5

        main_0_block0(v2: ptr b256):
        v3 = const bool false
        br main_0_is_ref_type_9_block0(v3), !8

        main_0_is_ref_type_9_block0(v4: bool):
        br main_0_block1(v4), !9

        main_0_block1(v5: bool):
        v6 = const bool false, !11
        v7 = cmp eq v5 v6, !13
        br main_0_block2(v7), !14

        main_0_block2(v8: bool):
        v9 = call assert_2(v8), !16
        br main_0_is_ref_type_9_block04(v3), !18

        main_0_is_ref_type_9_block04(v10: bool):
        br main_0_block3(v10), !19

        main_0_block3(v11: bool):
        v12 = cmp eq v11 v6, !21
        br main_0_block5(v12), !22

        main_0_block5(v13: bool):
        v14 = call assert_2(v13), !24
        br main_0_is_ref_type_9_block07(v3), !26

        main_0_is_ref_type_9_block07(v15: bool):
        br main_0_block6(v15), !27

        main_0_block6(v16: bool):
        v17 = cmp eq v16 v6, !29
        br main_0_block8(v17), !30

        main_0_block8(v18: bool):
        v19 = call assert_2(v18), !32
        br main_0_is_ref_type_11_block0(v3), !34

        main_0_is_ref_type_11_block0(v20: bool):
        br main_0_block9(v20), !35

        main_0_block9(v21: bool):
        v22 = cmp eq v21 v6, !37
        br main_0_block10(v22), !38

        main_0_block10(v23: bool):
        v24 = call assert_2(v23), !40
        v25 = const bool true
        br main_0_is_ref_type_13_block0(v25), !42

        main_0_is_ref_type_13_block0(v26: bool):
        br main_0_block11(v26), !43

        main_0_block11(v27: bool):
        v28 = call assert_2(v27), !45
        br main_0_is_ref_type_15_block0(v25), !47

        main_0_is_ref_type_15_block0(v29: bool):
        br main_0_block12(v29), !48

        main_0_block12(v30: bool):
        v31 = call assert_2(v30), !50
        br main_0_is_ref_type_17_block0(v25), !52

        main_0_is_ref_type_17_block0(v32: bool):
        br main_0_block13(v32), !53

        main_0_block13(v33: bool):
        v34 = call assert_2(v33), !55
        br main_0_is_ref_type_19_block0(v25), !57

        main_0_is_ref_type_19_block0(v35: bool):
        br main_0_block14(v35), !58

        main_0_block14(v36: bool):
        v37 = call assert_2(v36), !60
        br main_0_is_ref_type_21_block0(v25), !62

        main_0_is_ref_type_21_block0(v38: bool):
        br main_0_block15(v38), !63

        main_0_block15(v39: bool):
        v40 = call assert_2(v39), !65
        v41 = const u64 8
        br main_0_block16(v41), !67

        main_0_block16(v42: u64):
        v43 = const u64 8, !68
        v44 = cmp eq v42 v43, !70
        br main_0_block17(v44), !71

        main_0_block17(v45: bool):
        v46 = call assert_2(v45), !73
        br main_0_block18(v41), !75

        main_0_block18(v47: u64):
        v48 = const u64 8, !76
        v49 = cmp eq v47 v48, !78
        br main_0_block19(v49), !79

        main_0_block19(v50: bool):
        v51 = call assert_2(v50), !81
        br main_0_block20(v41), !83

        main_0_block20(v52: u64):
        v53 = const u64 8, !84
        v54 = cmp eq v52 v53, !86
        br main_0_block21(v54), !87

        main_0_block21(v55: bool):
        v56 = call assert_2(v55), !89
        v57 = const u64 1
        br main_0_block22(v57), !91

        main_0_block22(v58: u64):
        v59 = const u64 1, !92
        v60 = cmp eq v58 v59, !94
        br main_0_block23(v60), !95

        main_0_block23(v61: bool):
        v62 = call assert_2(v61), !97
        v63 = const u64 32
        br main_0_block24(v63), !99

        main_0_block24(v64: u64):
        v65 = const u64 32, !100
        v66 = cmp eq v64 v65, !102
        br main_0_block25(v66), !103

        main_0_block25(v67: bool):
        v68 = call assert_2(v67), !105
        v69 = const u64 16
        br main_0_block26(v69), !107

        main_0_block26(v70: u64):
        v71 = const u64 16, !108
        v72 = cmp eq v70 v71, !110
        br main_0_block27(v72), !111

        main_0_block27(v73: bool):
        v74 = call assert_2(v73), !113
        v75 = const u64 24
        br main_0_block28(v75), !115

        main_0_block28(v76: u64):
        v77 = const u64 24, !116
        v78 = cmp eq v76 v77, !118
        br main_0_block29(v78), !119

        main_0_block29(v79: bool):
        v80 = call assert_2(v79), !121
        br main_0_block30(v69), !123

        main_0_block30(v81: u64):
        v82 = const u64 16, !124
        v83 = cmp eq v81 v82, !126
        br main_0_block31(v83), !127

        main_0_block31(v84: bool):
        v85 = call assert_2(v84), !129
        v86 = const u64 8
        br main_0_block32(v86), !131

        main_0_block32(v87: u64):
        v88 = const u64 8, !132
        v89 = cmp eq v87 v88, !134
        br main_0_block33(v89), !135

        main_0_block33(v90: bool):
        v91 = call assert_2(v90), !137
        br main_0_block34(v86), !139

        main_0_block34(v92: u64):
        v93 = const u64 8, !140
        v94 = cmp eq v92 v93, !142
        br main_0_block35(v94), !143

        main_0_block35(v95: bool):
        v96 = call assert_2(v95), !145
        br main_0_block36(v86), !147

        main_0_block36(v97: u64):
        v98 = const u64 8, !148
        v99 = cmp eq v97 v98, !150
        br main_0_block37(v99), !151

        main_0_block37(v100: bool):
        v101 = call assert_2(v100), !153
        v102 = const u64 1
        br main_0_block38(v102), !155

        main_0_block38(v103: u64):
        v104 = const u64 1, !156
        v105 = cmp eq v103 v104, !158
        br main_0_block39(v105), !159

        main_0_block39(v106: bool):
        v107 = call assert_2(v106), !161
        v108 = const u64 32
        br main_0_block40(v108), !163

        main_0_block40(v109: u64):
        v110 = const u64 32, !164
        v111 = cmp eq v109 v110, !166
        br main_0_block41(v111), !167

        main_0_block41(v112: bool):
        v113 = call assert_2(v112), !169
        v114 = const u64 16
        br main_0_block42(v114), !171

        main_0_block42(v115: u64):
        v116 = const u64 16, !172
        v117 = cmp eq v115 v116, !174
        br main_0_block43(v117), !175

        main_0_block43(v118: bool):
        v119 = call assert_2(v118), !177
        v120 = const bool true, !178
        br block0(v120), !2

        block0(v121: bool):
        v122 = get_local ptr bool, result, !179
        store v121 to v122, !179
        v123 = get_local ptr bool, result, !180
        v124 = const u64 1024
        v125 = asm(cap: v124) -> u64 hp, !184 {
            aloc   cap
        }
        v126 = int_to_ptr v125 to ptr u8, !185
        v127 = ptr_to_int v126 to u64, !186
        v128 = get_local ptr { u64, u64, u64 }, __anon_00, !187
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr u64, v129, !188
        store v127 to v130, !189
        v131 = const u64 1
        v132 = get_elem_ptr v128, ptr u64, v131, !190
        store v124 to v132, !191
        v133 = const u64 2
        v134 = get_elem_ptr v128, ptr u64, v133, !192
        v135 = const u64 0
        store v135 to v134, !193
        v136 = asm(buffer: v128) -> ptr { u64, u64, u64 } buffer {
        }
        v137 = get_local ptr { { u64, u64, u64 } }, __anon_10, !195
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr { u64, u64, u64 }, v138, !196
        mem_copy_val v139, v136
        v140 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v140, v137
        br encode_38_block0(v140), !197

        encode_38_block0(v141: ptr { { u64, u64, u64 } }):
        v142 = ptr_to_int v141 to u64, !199
        v143 = int_to_ptr v142 to ptr { { u64, u64, u64 } }, !200
        v144 = const u64 0
        v145 = get_elem_ptr v143, ptr { u64, u64, u64 }, v144, !202
        v146 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v146, v145
        v147 = asm(buffer: v146) -> ptr { u64, u64, u64 } buffer {
        }
        v148 = get_local ptr { u64, u64, u64 }, __anon_000, !203
        mem_copy_val v148, v147
        v149 = const u64 0
        v150 = get_elem_ptr v148, ptr u64, v149, !204
        v151 = load v150, !205
        v152 = int_to_ptr v151 to ptr u8, !206
        v153 = const u64 1
        v154 = get_elem_ptr v148, ptr u64, v153, !207
        v155 = const u64 2
        v156 = get_elem_ptr v148, ptr u64, v155, !208
        v157 = load v156, !209
        v158 = ptr_to_int v152 to u64, !210
        v159 = add v158, v157, !211
        v160 = int_to_ptr v159 to ptr bool, !212
        mem_copy_val v160, v123
        v161 = const u64 1
        v162 = add v157, v161, !213
        v163 = ptr_to_int v152 to u64, !214
        v164 = get_local ptr { u64, u64, u64 }, __anon_100, !215
        v165 = const u64 0
        v166 = get_elem_ptr v164, ptr u64, v165, !216
        store v163 to v166, !217
        v167 = const u64 1
        v168 = get_elem_ptr v164, ptr u64, v167, !218
        mem_copy_val v168, v154
        v169 = const u64 2
        v170 = get_elem_ptr v164, ptr u64, v169, !219
        store v162 to v170, !220
        v171 = asm(buffer: v164) -> ptr { u64, u64, u64 } buffer {
        }
        v172 = get_local ptr { { u64, u64, u64 } }, __anon_20, !222
        v173 = const u64 0
        v174 = get_elem_ptr v172, ptr { u64, u64, u64 }, v173, !223
        mem_copy_val v174, v171
        v175 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v175, v172
        br encode_38_block1(v175), !224

        encode_38_block1(v176: ptr { { u64, u64, u64 } }):
        v177 = get_local ptr { { u64, u64, u64 } }, buffer, !226
        mem_copy_val v177, v176
        v178 = get_local ptr { { u64, u64, u64 } }, buffer, !228
        v179 = ptr_to_int v178 to u64, !230
        v180 = int_to_ptr v179 to ptr { { u64, u64, u64 } }, !231
        v181 = const u64 0
        v182 = get_elem_ptr v180, ptr { u64, u64, u64 }, v181, !232
        v183 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v183, v182
        v184 = asm(buffer: v183) -> ptr { u64, u64, u64 } buffer {
        }
        v185 = get_local ptr { u64, u64, u64 }, __anon_01, !233
        mem_copy_val v185, v184
        v186 = const u64 0
        v187 = get_elem_ptr v185, ptr u64, v186, !234
        v188 = load v187, !235
        v189 = int_to_ptr v188 to ptr u8, !236
        v190 = const u64 2
        v191 = get_elem_ptr v185, ptr u64, v190, !237
        v192 = ptr_to_int v189 to u64, !238
        v193 = get_local ptr { u64, u64 }, __anon_11, !239
        v194 = const u64 0
        v195 = get_elem_ptr v193, ptr u64, v194, !240
        store v192 to v195, !241
        v196 = const u64 1
        v197 = get_elem_ptr v193, ptr u64, v196, !242
        mem_copy_val v197, v191
        v198 = asm(s: v193) -> ptr slice s {
        }
        v199 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v199, v198
        br encode_38_block2(v199), !243

        encode_38_block2(v200: ptr slice):
        v201 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v201, v200
        br block1(v201), !181

        block1(v202: ptr slice):
        mem_copy_val v0, v202
        ret ptr slice v0
    }

    pub fn assert_2(condition !245: bool) -> (), !246 {
        entry(condition: bool):
        v0 = const bool false, !11
        v1 = cmp eq condition v0, !247
        br block3(v1), !247

        block3(v2: bool):
        cbr v2, block0(), block1(), !247

        block0():
        v3 = const u64 18446744073709486084, !249
        revert v3, !253

        block4(v4: ptr never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 502 520
!7 = span !3 136 160
!8 = (!2 !6 !7)
!9 = (!2 !6)
!10 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!11 = span !10 9991 9996
!12 = span !3 501 520
!13 = (!2 !12)
!14 = (!2 !12)
!15 = span !3 494 521
!16 = (!2 !15)
!17 = span !3 535 553
!18 = (!2 !17 !7)
!19 = (!2 !17)
!20 = span !3 534 553
!21 = (!2 !20)
!22 = (!2 !20)
!23 = span !3 527 554
!24 = (!2 !23)
!25 = span !3 568 586
!26 = (!2 !25 !7)
!27 = (!2 !25)
!28 = span !3 567 586
!29 = (!2 !28)
!30 = (!2 !28)
!31 = span !3 560 587
!32 = (!2 !31)
!33 = span !3 601 618
!34 = (!2 !33 !7)
!35 = (!2 !33)
!36 = span !3 600 618
!37 = (!2 !36)
!38 = (!2 !36)
!39 = span !3 593 619
!40 = (!2 !39)
!41 = span !3 632 655
!42 = (!2 !41 !7)
!43 = (!2 !41)
!44 = span !3 625 656
!45 = (!2 !44)
!46 = span !3 669 693
!47 = (!2 !46 !7)
!48 = (!2 !46)
!49 = span !3 662 694
!50 = (!2 !49)
!51 = span !3 707 743
!52 = (!2 !51 !7)
!53 = (!2 !51)
!54 = span !3 700 744
!55 = (!2 !54)
!56 = span !3 757 771
!57 = (!2 !56 !7)
!58 = (!2 !56)
!59 = span !3 750 772
!60 = (!2 !59)
!61 = span !3 785 799
!62 = (!2 !61 !7)
!63 = (!2 !61)
!64 = span !3 778 800
!65 = (!2 !64)
!66 = span !3 814 830
!67 = (!2 !66)
!68 = span !3 834 835
!69 = span !3 814 835
!70 = (!2 !69)
!71 = (!2 !69)
!72 = span !3 807 836
!73 = (!2 !72)
!74 = span !3 849 865
!75 = (!2 !74)
!76 = span !3 869 870
!77 = span !3 849 870
!78 = (!2 !77)
!79 = (!2 !77)
!80 = span !3 842 871
!81 = (!2 !80)
!82 = span !3 884 900
!83 = (!2 !82)
!84 = span !3 904 905
!85 = span !3 884 905
!86 = (!2 !85)
!87 = (!2 !85)
!88 = span !3 877 906
!89 = (!2 !88)
!90 = span !3 919 934
!91 = (!2 !90)
!92 = span !3 938 939
!93 = span !3 919 939
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 912 940
!97 = (!2 !96)
!98 = span !3 953 970
!99 = (!2 !98)
!100 = span !3 974 976
!101 = span !3 953 976
!102 = (!2 !101)
!103 = (!2 !101)
!104 = span !3 946 977
!105 = (!2 !104)
!106 = span !3 990 1010
!107 = (!2 !106)
!108 = span !3 1014 1016
!109 = span !3 990 1016
!110 = (!2 !109)
!111 = (!2 !109)
!112 = span !3 983 1017
!113 = (!2 !112)
!114 = span !3 1030 1051
!115 = (!2 !114)
!116 = span !3 1055 1057
!117 = span !3 1030 1057
!118 = (!2 !117)
!119 = (!2 !117)
!120 = span !3 1023 1058
!121 = (!2 !120)
!122 = span !3 1071 1094
!123 = (!2 !122)
!124 = span !3 1098 1100
!125 = span !3 1071 1100
!126 = (!2 !125)
!127 = (!2 !125)
!128 = span !3 1064 1101
!129 = (!2 !128)
!130 = span !3 1115 1129
!131 = (!2 !130)
!132 = span !3 1133 1134
!133 = span !3 1115 1134
!134 = (!2 !133)
!135 = (!2 !133)
!136 = span !3 1108 1135
!137 = (!2 !136)
!138 = span !3 1148 1162
!139 = (!2 !138)
!140 = span !3 1166 1167
!141 = span !3 1148 1167
!142 = (!2 !141)
!143 = (!2 !141)
!144 = span !3 1141 1168
!145 = (!2 !144)
!146 = span !3 1181 1195
!147 = (!2 !146)
!148 = span !3 1199 1200
!149 = span !3 1181 1200
!150 = (!2 !149)
!151 = (!2 !149)
!152 = span !3 1174 1201
!153 = (!2 !152)
!154 = span !3 1214 1228
!155 = (!2 !154)
!156 = span !3 1232 1233
!157 = span !3 1214 1233
!158 = (!2 !157)
!159 = (!2 !157)
!160 = span !3 1207 1234
!161 = (!2 !160)
!162 = span !3 1247 1261
!163 = (!2 !162)
!164 = span !3 1265 1267
!165 = span !3 1247 1267
!166 = (!2 !165)
!167 = (!2 !165)
!168 = span !3 1240 1268
!169 = (!2 !168)
!170 = span !3 1281 1295
!171 = (!2 !170)
!172 = span !3 1299 1301
!173 = span !3 1281 1301
!174 = (!2 !173)
!175 = (!2 !173)
!176 = span !3 1274 1302
!177 = (!2 !176)
!178 = span !3 1309 1313
!179 = span !0 48 74
!180 = span !0 107 113
!181 = span !0 92 114
!182 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!183 = span !182 64237 64250
!184 = (!181 !183)
!185 = (!181 !183)
!186 = (!181 !183)
!187 = (!181 !183)
!188 = (!181 !183)
!189 = (!181 !183)
!190 = (!181 !183)
!191 = (!181 !183)
!192 = (!181 !183)
!193 = (!181 !183)
!194 = span !182 159 222
!195 = (!181 !183 !194)
!196 = (!181 !183)
!197 = (!181 !183)
!198 = span !182 64221 64251
!199 = (!181 !198)
!200 = (!181 !198)
!201 = span !182 55 82
!202 = (!181 !198 !201)
!203 = (!181 !198)
!204 = (!181 !198)
!205 = (!181 !198)
!206 = (!181 !198)
!207 = (!181 !198)
!208 = (!181 !198)
!209 = (!181 !198)
!210 = (!181 !198)
!211 = (!181 !198)
!212 = (!181 !198)
!213 = (!181 !198)
!214 = (!181 !198)
!215 = (!181 !198)
!216 = (!181 !198)
!217 = (!181 !198)
!218 = (!181 !198)
!219 = (!181 !198)
!220 = (!181 !198)
!221 = span !182 3836 3919
!222 = (!181 !198 !221)
!223 = (!181 !198)
!224 = (!181 !198)
!225 = span !182 64208 64252
!226 = (!181 !225)
!227 = span !182 64257 64263
!228 = (!181 !227)
!229 = span !182 64257 64278
!230 = (!181 !229)
!231 = (!181 !229)
!232 = (!181 !229 !201)
!233 = (!181 !229)
!234 = (!181 !229)
!235 = (!181 !229)
!236 = (!181 !229)
!237 = (!181 !229)
!238 = (!181 !229)
!239 = (!181 !229)
!240 = (!181 !229)
!241 = (!181 !229)
!242 = (!181 !229)
!243 = (!181 !229)
!244 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!245 = span !244 935 944
!246 = span !244 921 1019
!247 = span !244 961 971
!248 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!249 = span !248 1038 1059
!250 = span !244 982 1010
!251 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!252 = span !251 691 705
!253 = (!250 !252)

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __tmp_block_arg
        v2 = const bool false
        v3 = const bool false, !3
        v4 = cmp eq v2 v3, !7
        v5 = call assert_2(v4), !9
        v6 = cmp eq v2 v3, !11
        v7 = call assert_2(v6), !13
        v8 = cmp eq v2 v3, !15
        v9 = call assert_2(v8), !17
        v10 = cmp eq v2 v3, !19
        v11 = call assert_2(v10), !21
        v12 = const bool true
        v13 = call assert_2(v12), !23
        v14 = call assert_2(v12), !25
        v15 = call assert_2(v12), !27
        v16 = call assert_2(v12), !29
        v17 = call assert_2(v12), !31
        v18 = const u64 8
        v19 = const u64 8, !32
        v20 = cmp eq v18 v19, !34
        v21 = call assert_2(v20), !36
        v22 = const u64 8, !37
        v23 = cmp eq v18 v22, !39
        v24 = call assert_2(v23), !41
        v25 = const u64 8, !42
        v26 = cmp eq v18 v25, !44
        v27 = call assert_2(v26), !46
        v28 = const u64 1
        v29 = const u64 1, !47
        v30 = cmp eq v28 v29, !49
        v31 = call assert_2(v30), !51
        v32 = const u64 32
        v33 = const u64 32, !52
        v34 = cmp eq v32 v33, !54
        v35 = call assert_2(v34), !56
        v36 = const u64 16
        v37 = const u64 16, !57
        v38 = cmp eq v36 v37, !59
        v39 = call assert_2(v38), !61
        v40 = const u64 24
        v41 = const u64 24, !62
        v42 = cmp eq v40 v41, !64
        v43 = call assert_2(v42), !66
        v44 = const u64 16, !67
        v45 = cmp eq v36 v44, !69
        v46 = call assert_2(v45), !71
        v47 = const u64 8
        v48 = const u64 8, !72
        v49 = cmp eq v47 v48, !74
        v50 = call assert_2(v49), !76
        v51 = const u64 8, !77
        v52 = cmp eq v47 v51, !79
        v53 = call assert_2(v52), !81
        v54 = const u64 8, !82
        v55 = cmp eq v47 v54, !84
        v56 = call assert_2(v55), !86
        v57 = const u64 1
        v58 = const u64 1, !87
        v59 = cmp eq v57 v58, !89
        v60 = call assert_2(v59), !91
        v61 = const u64 32
        v62 = const u64 32, !92
        v63 = cmp eq v61 v62, !94
        v64 = call assert_2(v63), !96
        v65 = const u64 16
        v66 = const u64 16, !97
        v67 = cmp eq v65 v66, !99
        v68 = call assert_2(v67), !101
        v69 = get_local ptr bool, result, !102
        v70 = const bool true, !103
        store v70 to v69, !102
        v71 = get_local ptr bool, result, !104
        v72 = const u64 1024
        v73 = asm(cap: v72) -> u64 hp, !108 {
            aloc   cap
        }
        v74 = int_to_ptr v73 to ptr u8, !109
        v75 = ptr_to_int v74 to u64, !110
        v76 = get_local ptr { u64, u64, u64 }, __anon_00, !111
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !112
        store v75 to v78, !113
        v79 = const u64 1
        v80 = get_elem_ptr v76, ptr u64, v79, !114
        store v72 to v80, !115
        v81 = const u64 2
        v82 = get_elem_ptr v76, ptr u64, v81, !116
        v83 = const u64 0
        store v83 to v82, !117
        v84 = asm(buffer: v76) -> ptr { u64, u64, u64 } buffer {
        }
        v85 = get_local ptr { { u64, u64, u64 } }, __anon_10, !119
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { u64, u64, u64 }, v86, !120
        mem_copy_val v87, v84
        v88 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v88, v85
        v89 = ptr_to_int v88 to u64, !122
        v90 = int_to_ptr v89 to ptr { { u64, u64, u64 } }, !123
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr { u64, u64, u64 }, v91, !125
        v93 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v93, v92
        v94 = asm(buffer: v93) -> ptr { u64, u64, u64 } buffer {
        }
        v95 = get_local ptr { u64, u64, u64 }, __anon_000, !126
        mem_copy_val v95, v94
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !127
        v98 = load v97, !128
        v99 = int_to_ptr v98 to ptr u8, !129
        v100 = const u64 1
        v101 = get_elem_ptr v95, ptr u64, v100, !130
        v102 = const u64 2
        v103 = get_elem_ptr v95, ptr u64, v102, !131
        v104 = load v103, !132
        v105 = ptr_to_int v99 to u64, !133
        v106 = add v105, v104, !134
        v107 = int_to_ptr v106 to ptr bool, !135
        mem_copy_val v107, v71
        v108 = const u64 1
        v109 = add v104, v108, !136
        v110 = ptr_to_int v99 to u64, !137
        v111 = get_local ptr { u64, u64, u64 }, __anon_100, !138
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !139
        store v110 to v113, !140
        v114 = const u64 1
        v115 = get_elem_ptr v111, ptr u64, v114, !141
        mem_copy_val v115, v101
        v116 = const u64 2
        v117 = get_elem_ptr v111, ptr u64, v116, !142
        store v109 to v117, !143
        v118 = asm(buffer: v111) -> ptr { u64, u64, u64 } buffer {
        }
        v119 = get_local ptr { { u64, u64, u64 } }, __anon_20, !145
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr { u64, u64, u64 }, v120, !146
        mem_copy_val v121, v118
        v122 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v122, v119
        v123 = get_local ptr { { u64, u64, u64 } }, buffer, !148
        mem_copy_val v123, v122
        v124 = get_local ptr { { u64, u64, u64 } }, buffer, !150
        v125 = ptr_to_int v124 to u64, !152
        v126 = int_to_ptr v125 to ptr { { u64, u64, u64 } }, !153
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr { u64, u64, u64 }, v127, !154
        v129 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v129, v128
        v130 = asm(buffer: v129) -> ptr { u64, u64, u64 } buffer {
        }
        v131 = get_local ptr { u64, u64, u64 }, __anon_01, !155
        mem_copy_val v131, v130
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !156
        v134 = load v133, !157
        v135 = int_to_ptr v134 to ptr u8, !158
        v136 = const u64 2
        v137 = get_elem_ptr v131, ptr u64, v136, !159
        v138 = ptr_to_int v135 to u64, !160
        v139 = get_local ptr { u64, u64 }, __anon_11, !161
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr u64, v140, !162
        store v138 to v141, !163
        v142 = const u64 1
        v143 = get_elem_ptr v139, ptr u64, v142, !164
        mem_copy_val v143, v137
        v144 = asm(s: v139) -> ptr slice s {
        }
        v145 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v145, v144
        v146 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v146, v145
        mem_copy_val v0, v146
        ret ptr slice v0
    }

    pub fn assert_2(condition !166: bool) -> (), !167 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !168
        cbr v1, block0(), block1(), !168

        block0():
        v2 = const u64 18446744073709486084, !170
        revert v2, !174

        block1():
        v3 = const unit ()
        ret () v3
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 501 520
!7 = (!4 !6)
!8 = span !5 494 521
!9 = (!4 !8)
!10 = span !5 534 553
!11 = (!4 !10)
!12 = span !5 527 554
!13 = (!4 !12)
!14 = span !5 567 586
!15 = (!4 !14)
!16 = span !5 560 587
!17 = (!4 !16)
!18 = span !5 600 618
!19 = (!4 !18)
!20 = span !5 593 619
!21 = (!4 !20)
!22 = span !5 625 656
!23 = (!4 !22)
!24 = span !5 662 694
!25 = (!4 !24)
!26 = span !5 700 744
!27 = (!4 !26)
!28 = span !5 750 772
!29 = (!4 !28)
!30 = span !5 778 800
!31 = (!4 !30)
!32 = span !5 834 835
!33 = span !5 814 835
!34 = (!4 !33)
!35 = span !5 807 836
!36 = (!4 !35)
!37 = span !5 869 870
!38 = span !5 849 870
!39 = (!4 !38)
!40 = span !5 842 871
!41 = (!4 !40)
!42 = span !5 904 905
!43 = span !5 884 905
!44 = (!4 !43)
!45 = span !5 877 906
!46 = (!4 !45)
!47 = span !5 938 939
!48 = span !5 919 939
!49 = (!4 !48)
!50 = span !5 912 940
!51 = (!4 !50)
!52 = span !5 974 976
!53 = span !5 953 976
!54 = (!4 !53)
!55 = span !5 946 977
!56 = (!4 !55)
!57 = span !5 1014 1016
!58 = span !5 990 1016
!59 = (!4 !58)
!60 = span !5 983 1017
!61 = (!4 !60)
!62 = span !5 1055 1057
!63 = span !5 1030 1057
!64 = (!4 !63)
!65 = span !5 1023 1058
!66 = (!4 !65)
!67 = span !5 1098 1100
!68 = span !5 1071 1100
!69 = (!4 !68)
!70 = span !5 1064 1101
!71 = (!4 !70)
!72 = span !5 1133 1134
!73 = span !5 1115 1134
!74 = (!4 !73)
!75 = span !5 1108 1135
!76 = (!4 !75)
!77 = span !5 1166 1167
!78 = span !5 1148 1167
!79 = (!4 !78)
!80 = span !5 1141 1168
!81 = (!4 !80)
!82 = span !5 1199 1200
!83 = span !5 1181 1200
!84 = (!4 !83)
!85 = span !5 1174 1201
!86 = (!4 !85)
!87 = span !5 1232 1233
!88 = span !5 1214 1233
!89 = (!4 !88)
!90 = span !5 1207 1234
!91 = (!4 !90)
!92 = span !5 1265 1267
!93 = span !5 1247 1267
!94 = (!4 !93)
!95 = span !5 1240 1268
!96 = (!4 !95)
!97 = span !5 1299 1301
!98 = span !5 1281 1301
!99 = (!4 !98)
!100 = span !5 1274 1302
!101 = (!4 !100)
!102 = span !0 48 74
!103 = span !5 1309 1313
!104 = span !0 107 113
!105 = span !0 92 114
!106 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!107 = span !106 64237 64250
!108 = (!105 !107)
!109 = (!105 !107)
!110 = (!105 !107)
!111 = (!105 !107)
!112 = (!105 !107)
!113 = (!105 !107)
!114 = (!105 !107)
!115 = (!105 !107)
!116 = (!105 !107)
!117 = (!105 !107)
!118 = span !106 159 222
!119 = (!105 !107 !118)
!120 = (!105 !107)
!121 = span !106 64221 64251
!122 = (!105 !121)
!123 = (!105 !121)
!124 = span !106 55 82
!125 = (!105 !121 !124)
!126 = (!105 !121)
!127 = (!105 !121)
!128 = (!105 !121)
!129 = (!105 !121)
!130 = (!105 !121)
!131 = (!105 !121)
!132 = (!105 !121)
!133 = (!105 !121)
!134 = (!105 !121)
!135 = (!105 !121)
!136 = (!105 !121)
!137 = (!105 !121)
!138 = (!105 !121)
!139 = (!105 !121)
!140 = (!105 !121)
!141 = (!105 !121)
!142 = (!105 !121)
!143 = (!105 !121)
!144 = span !106 3836 3919
!145 = (!105 !121 !144)
!146 = (!105 !121)
!147 = span !106 64208 64252
!148 = (!105 !147)
!149 = span !106 64257 64263
!150 = (!105 !149)
!151 = span !106 64257 64278
!152 = (!105 !151)
!153 = (!105 !151)
!154 = (!105 !151 !124)
!155 = (!105 !151)
!156 = (!105 !151)
!157 = (!105 !151)
!158 = (!105 !151)
!159 = (!105 !151)
!160 = (!105 !151)
!161 = (!105 !151)
!162 = (!105 !151)
!163 = (!105 !151)
!164 = (!105 !151)
!165 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!166 = span !165 935 944
!167 = span !165 921 1019
!168 = span !165 961 971
!169 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!170 = span !169 1038 1059
!171 = span !165 982 1010
!172 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!173 = span !172 691 705
!174 = (!171 !173)

// IR: Final
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local { { u64, u64, u64 } } buffer
        local bool result

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __tmp_block_arg
        v2 = const bool false
        v3 = const bool false, !3
        v4 = cmp eq v2 v3, !7
        v5 = call assert_2(v4), !9
        v6 = cmp eq v2 v3, !11
        v7 = call assert_2(v6), !13
        v8 = cmp eq v2 v3, !15
        v9 = call assert_2(v8), !17
        v10 = cmp eq v2 v3, !19
        v11 = call assert_2(v10), !21
        v12 = const bool true
        v13 = call assert_2(v12), !23
        v14 = call assert_2(v12), !25
        v15 = call assert_2(v12), !27
        v16 = call assert_2(v12), !29
        v17 = call assert_2(v12), !31
        v18 = const u64 8
        v19 = const u64 8, !32
        v20 = cmp eq v18 v19, !34
        v21 = call assert_2(v20), !36
        v22 = const u64 8, !37
        v23 = cmp eq v18 v22, !39
        v24 = call assert_2(v23), !41
        v25 = const u64 8, !42
        v26 = cmp eq v18 v25, !44
        v27 = call assert_2(v26), !46
        v28 = const u64 1
        v29 = const u64 1, !47
        v30 = cmp eq v28 v29, !49
        v31 = call assert_2(v30), !51
        v32 = const u64 32
        v33 = const u64 32, !52
        v34 = cmp eq v32 v33, !54
        v35 = call assert_2(v34), !56
        v36 = const u64 16
        v37 = const u64 16, !57
        v38 = cmp eq v36 v37, !59
        v39 = call assert_2(v38), !61
        v40 = const u64 24
        v41 = const u64 24, !62
        v42 = cmp eq v40 v41, !64
        v43 = call assert_2(v42), !66
        v44 = const u64 16, !67
        v45 = cmp eq v36 v44, !69
        v46 = call assert_2(v45), !71
        v47 = const u64 8
        v48 = const u64 8, !72
        v49 = cmp eq v47 v48, !74
        v50 = call assert_2(v49), !76
        v51 = const u64 8, !77
        v52 = cmp eq v47 v51, !79
        v53 = call assert_2(v52), !81
        v54 = const u64 8, !82
        v55 = cmp eq v47 v54, !84
        v56 = call assert_2(v55), !86
        v57 = const u64 1
        v58 = const u64 1, !87
        v59 = cmp eq v57 v58, !89
        v60 = call assert_2(v59), !91
        v61 = const u64 32
        v62 = const u64 32, !92
        v63 = cmp eq v61 v62, !94
        v64 = call assert_2(v63), !96
        v65 = const u64 16
        v66 = const u64 16, !97
        v67 = cmp eq v65 v66, !99
        v68 = call assert_2(v67), !101
        v69 = get_local ptr bool, result, !102
        v70 = const bool true, !103
        store v70 to v69, !102
        v71 = get_local ptr bool, result, !104
        v72 = const u64 1024
        v73 = asm(cap: v72) -> u64 hp, !108 {
            aloc   cap
        }
        v74 = int_to_ptr v73 to ptr u8, !109
        v75 = ptr_to_int v74 to u64, !110
        v76 = get_local ptr { u64, u64, u64 }, __anon_00, !111
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !112
        store v75 to v78, !113
        v79 = const u64 1
        v80 = get_elem_ptr v76, ptr u64, v79, !114
        store v72 to v80, !115
        v81 = const u64 2
        v82 = get_elem_ptr v76, ptr u64, v81, !116
        v83 = const u64 0
        store v83 to v82, !117
        v84 = asm(buffer: v76) -> ptr { u64, u64, u64 } buffer {
        }
        v85 = get_local ptr { { u64, u64, u64 } }, __anon_10, !119
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { u64, u64, u64 }, v86, !120
        mem_copy_val v87, v84
        v88 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v88, v85
        v89 = ptr_to_int v88 to u64, !122
        v90 = int_to_ptr v89 to ptr { { u64, u64, u64 } }, !123
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr { u64, u64, u64 }, v91, !125
        v93 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v93, v92
        v94 = asm(buffer: v93) -> ptr { u64, u64, u64 } buffer {
        }
        v95 = get_local ptr { u64, u64, u64 }, __anon_000, !126
        mem_copy_val v95, v94
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !127
        v98 = load v97, !128
        v99 = int_to_ptr v98 to ptr u8, !129
        v100 = const u64 1
        v101 = get_elem_ptr v95, ptr u64, v100, !130
        v102 = const u64 2
        v103 = get_elem_ptr v95, ptr u64, v102, !131
        v104 = load v103, !132
        v105 = ptr_to_int v99 to u64, !133
        v106 = add v105, v104, !134
        v107 = int_to_ptr v106 to ptr bool, !135
        mem_copy_val v107, v71
        v108 = const u64 1
        v109 = add v104, v108, !136
        v110 = ptr_to_int v99 to u64, !137
        v111 = get_local ptr { u64, u64, u64 }, __anon_100, !138
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !139
        store v110 to v113, !140
        v114 = const u64 1
        v115 = get_elem_ptr v111, ptr u64, v114, !141
        mem_copy_val v115, v101
        v116 = const u64 2
        v117 = get_elem_ptr v111, ptr u64, v116, !142
        store v109 to v117, !143
        v118 = asm(buffer: v111) -> ptr { u64, u64, u64 } buffer {
        }
        v119 = get_local ptr { { u64, u64, u64 } }, __anon_20, !145
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr { u64, u64, u64 }, v120, !146
        mem_copy_val v121, v118
        v122 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v122, v119
        v123 = get_local ptr { { u64, u64, u64 } }, buffer, !148
        mem_copy_val v123, v122
        v124 = get_local ptr { { u64, u64, u64 } }, buffer, !150
        v125 = ptr_to_int v124 to u64, !152
        v126 = int_to_ptr v125 to ptr { { u64, u64, u64 } }, !153
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr { u64, u64, u64 }, v127, !154
        v129 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v129, v128
        v130 = asm(buffer: v129) -> ptr { u64, u64, u64 } buffer {
        }
        v131 = get_local ptr { u64, u64, u64 }, __anon_01, !155
        mem_copy_val v131, v130
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !156
        v134 = load v133, !157
        v135 = int_to_ptr v134 to ptr u8, !158
        v136 = const u64 2
        v137 = get_elem_ptr v131, ptr u64, v136, !159
        v138 = ptr_to_int v135 to u64, !160
        v139 = get_local ptr { u64, u64 }, __anon_11, !161
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr u64, v140, !162
        store v138 to v141, !163
        v142 = const u64 1
        v143 = get_elem_ptr v139, ptr u64, v142, !164
        mem_copy_val v143, v137
        v144 = asm(s: v139) -> ptr slice s {
        }
        v145 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v145, v144
        v146 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v146, v145
        mem_copy_val v0, v146
        ret ptr slice v0
    }

    pub fn assert_2(condition !166: bool) -> (), !167 {
        entry(condition: bool):
        v0 = const bool false, !3
        v1 = cmp eq condition v0, !168
        cbr v1, block0(), block1(), !168

        block0():
        v2 = const u64 18446744073709486084, !170
        revert v2, !174

        block1():
        v3 = const unit ()
        ret () v3
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!3 = span !2 9991 9996
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 501 520
!7 = (!4 !6)
!8 = span !5 494 521
!9 = (!4 !8)
!10 = span !5 534 553
!11 = (!4 !10)
!12 = span !5 527 554
!13 = (!4 !12)
!14 = span !5 567 586
!15 = (!4 !14)
!16 = span !5 560 587
!17 = (!4 !16)
!18 = span !5 600 618
!19 = (!4 !18)
!20 = span !5 593 619
!21 = (!4 !20)
!22 = span !5 625 656
!23 = (!4 !22)
!24 = span !5 662 694
!25 = (!4 !24)
!26 = span !5 700 744
!27 = (!4 !26)
!28 = span !5 750 772
!29 = (!4 !28)
!30 = span !5 778 800
!31 = (!4 !30)
!32 = span !5 834 835
!33 = span !5 814 835
!34 = (!4 !33)
!35 = span !5 807 836
!36 = (!4 !35)
!37 = span !5 869 870
!38 = span !5 849 870
!39 = (!4 !38)
!40 = span !5 842 871
!41 = (!4 !40)
!42 = span !5 904 905
!43 = span !5 884 905
!44 = (!4 !43)
!45 = span !5 877 906
!46 = (!4 !45)
!47 = span !5 938 939
!48 = span !5 919 939
!49 = (!4 !48)
!50 = span !5 912 940
!51 = (!4 !50)
!52 = span !5 974 976
!53 = span !5 953 976
!54 = (!4 !53)
!55 = span !5 946 977
!56 = (!4 !55)
!57 = span !5 1014 1016
!58 = span !5 990 1016
!59 = (!4 !58)
!60 = span !5 983 1017
!61 = (!4 !60)
!62 = span !5 1055 1057
!63 = span !5 1030 1057
!64 = (!4 !63)
!65 = span !5 1023 1058
!66 = (!4 !65)
!67 = span !5 1098 1100
!68 = span !5 1071 1100
!69 = (!4 !68)
!70 = span !5 1064 1101
!71 = (!4 !70)
!72 = span !5 1133 1134
!73 = span !5 1115 1134
!74 = (!4 !73)
!75 = span !5 1108 1135
!76 = (!4 !75)
!77 = span !5 1166 1167
!78 = span !5 1148 1167
!79 = (!4 !78)
!80 = span !5 1141 1168
!81 = (!4 !80)
!82 = span !5 1199 1200
!83 = span !5 1181 1200
!84 = (!4 !83)
!85 = span !5 1174 1201
!86 = (!4 !85)
!87 = span !5 1232 1233
!88 = span !5 1214 1233
!89 = (!4 !88)
!90 = span !5 1207 1234
!91 = (!4 !90)
!92 = span !5 1265 1267
!93 = span !5 1247 1267
!94 = (!4 !93)
!95 = span !5 1240 1268
!96 = (!4 !95)
!97 = span !5 1299 1301
!98 = span !5 1281 1301
!99 = (!4 !98)
!100 = span !5 1274 1302
!101 = (!4 !100)
!102 = span !0 48 74
!103 = span !5 1309 1313
!104 = span !0 107 113
!105 = span !0 92 114
!106 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!107 = span !106 64237 64250
!108 = (!105 !107)
!109 = (!105 !107)
!110 = (!105 !107)
!111 = (!105 !107)
!112 = (!105 !107)
!113 = (!105 !107)
!114 = (!105 !107)
!115 = (!105 !107)
!116 = (!105 !107)
!117 = (!105 !107)
!118 = span !106 159 222
!119 = (!105 !107 !118)
!120 = (!105 !107)
!121 = span !106 64221 64251
!122 = (!105 !121)
!123 = (!105 !121)
!124 = span !106 55 82
!125 = (!105 !121 !124)
!126 = (!105 !121)
!127 = (!105 !121)
!128 = (!105 !121)
!129 = (!105 !121)
!130 = (!105 !121)
!131 = (!105 !121)
!132 = (!105 !121)
!133 = (!105 !121)
!134 = (!105 !121)
!135 = (!105 !121)
!136 = (!105 !121)
!137 = (!105 !121)
!138 = (!105 !121)
!139 = (!105 !121)
!140 = (!105 !121)
!141 = (!105 !121)
!142 = (!105 !121)
!143 = (!105 !121)
!144 = span !106 3836 3919
!145 = (!105 !121 !144)
!146 = (!105 !121)
!147 = span !106 64208 64252
!148 = (!105 !147)
!149 = span !106 64257 64263
!150 = (!105 !149)
!151 = span !106 64257 64278
!152 = (!105 !151)
!153 = (!105 !151)
!154 = (!105 !151 !124)
!155 = (!105 !151)
!156 = (!105 !151)
!157 = (!105 !151)
!158 = (!105 !151)
!159 = (!105 !151)
!160 = (!105 !151)
!161 = (!105 !151)
!162 = (!105 !151)
!163 = (!105 !151)
!164 = (!105 !151)
!165 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!166 = span !165 935 944
!167 = span !165 921 1019
!168 = span !165 961 971
!169 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!170 = span !169 1038 1059
!171 = span !165 982 1010
!172 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!173 = span !172 691 705
!174 = (!171 !173)

  [1;32mFinished[0m debug [unoptimized + fuel] target(s) in 5.37s
      Bytecode size: 1088 bytes
      Bytecode hash: 0xaf212b0d5264bae8ab1a07811a381250d4778562fa08fd69d05eebea75fadf4a
