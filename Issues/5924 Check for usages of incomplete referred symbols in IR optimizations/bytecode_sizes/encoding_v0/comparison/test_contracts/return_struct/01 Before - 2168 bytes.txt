// IR: Initial
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = const u64 1, !5
        v12 = call get_19(v10, v11), !6
        v13 = call try_read_0(v12), !7
        ret { u64, ( () | {  } ) } v13
    }

    pub fn try_read_0(self !9: { b256, u64, b256 }) -> { u64, ( () | {  } ) }, !11 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_17(self), !12
        v1 = call offset_18(self), !13
        v2 = call read_1(v0, v1), !14
        ret { u64, ( () | {  } ) } v2
    }

    pub fn read_1(slot !16: b256, offset !17: u64) -> { u64, ( () | {  } ) }, !19 {
        local { u64, ( () | {  } ) } __anon_0
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 0
        v1 = const u64 0, !20
        v2 = call eq_2(v0, v1), !21
        cbr v2, block0(), block1(), !21

        block0():
        v3 = get_local ptr { u64, ( () | {  } ) }, __anon_0, !23
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !23
        v6 = const u64 0, !23
        store v6 to v5, !23
        v7 = load v3
        ret { u64, ( () | {  } ) } v7, !24

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_3(slot, offset), !25
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !26
        store v10 to v11, !26
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !26
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        store v13 to v14, !26
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !26
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !26
        store v18 to v19, !26
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !26
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !26
        store v23 to v24, !26
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !26
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !26
        store v28 to v29, !26
        v30 = get_local ptr u64, number_of_slots, !27
        v31 = load v30
        v32 = const u64 32, !28
        v33 = call multiply_6(v31, v32), !29
        v34 = call alloc_14(v33), !30
        v35 = get_local ptr u64, result_ptr, !31
        store v34 to v35, !31
        v36 = get_local ptr b256, offset_slot, !32
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !33
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !34
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !35
        store v37 to v42, !35
        v43 = int_to_ptr v39 to ptr b256, !35
        v44 = state_load_quad_word v43, key v42, v41, !35
        cbr v44, block3(), block4(), !35

        block3():
        v45 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !23
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !23
        v48 = const u64 1, !23
        store v48 to v47, !23
        v49 = get_local ptr u64, result_ptr, !36
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !37
        v52 = load v51
        v53 = call add_16(v50, v52), !38
        v54 = call read_15(v53), !39
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr {  }, v55, v56, !23
        store v54 to v57, !23
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !23
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !23
        v62 = const u64 0, !23
        store v62 to v61, !23
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v64
    }

    pub fn eq_2(self !41: u64, other !42: u64) -> bool, !43 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    fn slot_calculator_3(slot !44: b256, offset !45: u64) -> { b256, u64, u64 }, !46 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !47
        v1 = const u64 0
        store v1 to v0, !47
        v2 = const u64 8, !48
        v3 = call multiply_6(offset, v2), !49
        v4 = get_local ptr u64, size_of_t, !50
        v5 = load v4
        v6 = call add_5(v3, v5), !51
        v7 = const u64 31, !52
        v8 = call add_5(v6, v7), !53
        v9 = const u64 5, !54
        v10 = call rsh_4(v8, v9), !55
        v11 = get_local ptr u64, last_slot, !56
        store v10 to v11, !56
        v12 = const u64 4, !57
        v13 = call modulo_7(offset, v12), !58
        v14 = get_local ptr u64, place_in_slot, !59
        store v13 to v14, !59
        v15 = get_local ptr bool, __matched_value_1, !60
        v16 = const bool true
        store v16 to v15, !60
        v17 = get_local ptr bool, __matched_value_1, !61
        v18 = load v17
        v19 = const bool true, !62
        v20 = call eq_8(v18, v19), !63
        cbr v20, block0(), block1(), !63

        block0():
        v21 = get_local ptr u64, place_in_slot, !64
        v22 = load v21
        v23 = const u64 8, !65
        v24 = call multiply_6(v22, v23), !66
        v25 = get_local ptr u64, size_of_t, !67
        v26 = load v25
        v27 = call add_5(v24, v26), !68
        v28 = const u64 31, !69
        v29 = call add_5(v27, v28), !70
        v30 = const u64 5, !71
        v31 = call rsh_4(v29, v30), !72
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !61
        v33 = load v32
        v34 = const bool false, !73
        v35 = call eq_8(v33, v34), !74
        cbr v35, block2(), block3(), !74

        block2():
        v36 = const u64 1, !75
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !60
        revert v37, !60

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !76
        store v39 to v40, !76
        v41 = call as_u256_9(slot), !77
        v42 = get_local ptr u256, offset_slot, !78
        store v41 to v42, !78
        v43 = get_local ptr u256, offset_slot, !79
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !80
        v46 = load v45
        v47 = call as_u256_12(v46), !81
        v48 = get_local ptr u64, number_of_slots, !82
        v49 = load v48
        v50 = call as_u256_12(v49), !83
        v51 = call subtract_11(v47, v50), !84
        v52 = call add_10(v44, v51), !85
        v53 = get_local ptr u256, offset_slot, !85
        store v52 to v53, !85
        v54 = get_local ptr u256, offset_slot, !86
        v55 = load v54
        v56 = call as_b256_13(v55), !87
        v57 = get_local ptr u64, number_of_slots, !88
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !89
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !90
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !90
        store v56 to v63, !90
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !90
        store v58 to v65, !90
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !90
        store v60 to v67, !90
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn rsh_4(self !91: u64, other !92: u64) -> u64, !93 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn add_5(self !94: u64, other !95: u64) -> u64, !96 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn multiply_6(self !97: u64, other !98: u64) -> u64, !99 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn modulo_7(self !100: u64, other !101: u64) -> u64, !102 {
        entry(self: u64, other: u64):
        v0 = mod self, other
        ret u64 v0
    }

    pub fn eq_8(self !103: bool, other !104: bool) -> bool, !105 {
        entry(self: bool, other: bool):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn as_u256_9(self !107: b256) -> u256, !108 {
        entry(self: b256):
        v0 = asm(input: self) -> u256 input, !109 {
        }
        ret u256 v0
    }

    pub fn add_10(self !110: u256, other !111: u256) -> u256, !112 {
        entry(self: u256, other: u256):
        v0 = add self, other
        ret u256 v0
    }

    pub fn subtract_11(self !113: u256, other !114: u256) -> u256, !115 {
        entry(self: u256, other: u256):
        v0 = sub self, other
        ret u256 v0
    }

    pub fn as_u256_12(self !116: u64) -> u256, !117 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !118
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !118
        v3 = const u64 0, !119
        store v3 to v2, !118
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !118
        v6 = const u64 0, !120
        store v6 to v5, !118
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !118
        v9 = const u64 0, !121
        store v9 to v8, !118
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !118
        store self to v11, !118
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !122
        store v12 to v13, !122
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !123
        v15 = asm(input: v14) -> u256 input, !124 {
        }
        ret u256 v15
    }

    pub fn as_b256_13(self !125: u256) -> b256, !126 {
        entry(self: u256):
        v0 = asm(input: self) -> b256 input, !127 {
        }
        ret b256 v0
    }

    pub fn alloc_14(count !129: u64) -> u64, !130 {
        entry(count: u64):
        v0 = const u64 8
        v1 = call multiply_6(v0, count), !131
        v2 = asm(size: v1, ptr) -> u64 ptr, !132 {
            aloc   size, !133
            move   ptr hp, !134
        }
        ret u64 v2
    }

    pub fn read_15(self !136: u64) -> {  }, !137 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !138

        block0():
        v1 = asm(ptr: self) -> {  } ptr, !139 {
        }
        br block5(v1)

        block1():
        v2 = const u64 0
        v3 = const u64 1, !140
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !141

        block2():
        v5 = asm(ptr: self, val) -> {  } val, !142 {
            lb     val ptr i0, !143
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> {  } val, !144 {
            lw     val ptr i0, !145
        }
        br block4(v6)

        block4(v7: {  }):
        br block5(v7)

        block5(v8: {  }):
        ret {  } v8
    }

    pub fn add_16(self !146: u64, count !147: u64) -> u64, !148 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn slot_17(self !150: { b256, u64, b256 }) -> b256, !151 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !152
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_18(self !153: { b256, u64, b256 }) -> u64, !154 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !155
        v4 = load v3
        ret u64 v4
    }

    pub fn get_19(self !157: { b256, u64, b256 }, key !158: u64) -> { b256, u64, b256 }, !159 {
        local { u64, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: u64):
        v0 = call field_id_49(self), !160
        v1 = get_local ptr { u64, b256 }, __anon_0, !161
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !161
        store key to v3, !161
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !161
        store v0 to v5, !161
        v6 = load v1
        v7 = call sha256_20(v6), !162
        v8 = get_local ptr b256, key_, !163
        store v7 to v8, !163
        v9 = get_local ptr b256, key_, !164
        v10 = load v9
        v11 = get_local ptr b256, key_, !165
        v12 = load v11
        v13 = const u64 0, !166
        v14 = call new_50(v10, v13, v12), !167
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_20(s !169: { u64, b256 }) -> b256, !172 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { u64, b256 }):
        v0 = call new_21(), !173
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !174
        store v0 to v1, !174
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !175
        v3 = call hash_25(s, v2), !176
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !177
        v5 = load v4
        v6 = call sha256_47(v5), !178
        ret b256 v6
    }

    pub fn new_21() -> { { { u64, u64 }, u64 } }, !179 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_22(), !180
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !181
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !181
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_22() -> { { u64, u64 }, u64 }, !183 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_23(), !184
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !185
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !185
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !186
        store v6 to v5, !185
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_23() -> { u64, u64 }, !187 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !188
        v1 = call alloc_bytes_24(v0), !189
        v2 = get_local ptr { u64, u64 }, __anon_0, !190
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !190
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !191
        store v7 to v6, !190
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_24(count !192: u64) -> u64, !193 {
        entry(count: u64):
        v0 = asm(size: count, ptr) -> u64 ptr, !194 {
            aloc   size, !195
            move   ptr hp, !196
        }
        ret u64 v0
    }

    pub fn hash_25(self !197: { u64, b256 }, state !198: ptr { { { u64, u64 }, u64 } }) -> (), !200 {
        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !201
        v4 = load v3
        v5 = call hash_26(v4, state), !202
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { u64, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !203
        v10 = load v9
        v11 = call hash_46(v10, state), !204
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_26(self !205: u64, state !206: ptr { { { u64, u64 }, u64 } }) -> (), !207 {
        local u64 ptr

        entry(self: u64, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 8, !208
        v1 = call alloc_bytes_24(v0), !209
        v2 = get_local ptr u64, ptr, !210
        store v1 to v2, !210
        v3 = get_local ptr u64, ptr, !211
        v4 = load v3
        v5 = asm(ptr: v4, val: self) {
            sw     ptr val i0, !212
        }
        v6 = get_local ptr u64, ptr, !213
        v7 = load v6
        v8 = const u64 8, !214
        v9 = call from_parts_33(v7, v8), !215
        v10 = call from_45(v9), !216
        v11 = call write_27(state, v10), !217
        v12 = const unit ()
        ret () v12
    }

    pub fn write_27(self !218: ptr { { { u64, u64 }, u64 } }, bytes !219: { { u64, u64 }, u64 }) -> (), !220 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !221
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !222
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !223: ptr { { u64, u64 }, u64 }, other !224: ptr { { u64, u64 }, u64 }) -> (), !225 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_29(v0), !226
        v2 = get_local ptr u64, other_len, !227
        store v1 to v2, !227
        v3 = get_local ptr u64, other_len, !228
        v4 = load v3
        v5 = const u64 0, !229
        v6 = call eq_2(v4, v5), !230
        cbr v6, block0(), block1(), !230

        block0():
        v7 = const unit (), !231
        ret () v7, !231

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !232
        v12 = load v11
        v13 = const u64 0, !233
        v14 = call eq_2(v12, v13), !234
        cbr v14, block3(), block4(), !234

        block3():
        v15 = load other
        store v15 to self, !235
        v16 = call clear_30(other), !236
        v17 = const unit (), !237
        ret () v17, !237

        block4():
        v18 = const unit ()
        br block5(v18)

        block5(v19: ()):
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !232
        v22 = load v21
        v23 = get_local ptr u64, other_len, !238
        v24 = load v23
        v25 = call add_5(v22, v24), !239
        v26 = get_local ptr u64, both_len, !240
        store v25 to v26, !240
        v27 = const u64 1
        v28 = get_elem_ptr self, ptr u64, v27, !232
        v29 = load v28
        v30 = get_local ptr u64, other_start, !241
        store v29 to v30, !241
        v31 = const u64 0
        v32 = get_elem_ptr self, ptr { u64, u64 }, v31, !242
        v33 = load v32
        v34 = call capacity_32(v33), !243
        v35 = get_local ptr u64, both_len, !244
        v36 = load v35
        v37 = call lt_31(v34, v36), !245
        cbr v37, block6(), block7(), !245

        block6():
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !242
        v40 = load v39
        v41 = call ptr_38(v40), !246
        v42 = const u64 0
        v43 = get_elem_ptr self, ptr { u64, u64 }, v42, !242
        v44 = load v43
        v45 = call capacity_32(v44), !247
        v46 = get_local ptr u64, both_len, !248
        v47 = load v46
        v48 = call realloc_bytes_35(v41, v45, v47), !249
        v49 = get_local ptr u64, both_len, !250
        v50 = load v49
        v51 = call from_parts_33(v48, v50), !251
        v52 = get_local ptr slice, new_slice, !252
        store v51 to v52, !252
        v53 = get_local ptr slice, new_slice, !253
        v54 = load v53
        v55 = call from_39(v54), !254
        v56 = const u64 0
        v57 = get_elem_ptr self, ptr { u64, u64 }, v56, !255
        store v55 to v57, !255
        v58 = const unit ()
        br block8(v58)

        block7():
        v59 = const unit ()
        br block8(v59)

        block8(v60: ()):
        v61 = const u64 0
        v62 = get_elem_ptr self, ptr { u64, u64 }, v61, !242
        v63 = load v62
        v64 = call ptr_38(v63), !256
        v65 = get_local ptr u64, other_start, !257
        v66 = load v65
        v67 = call add_uint_offset_43(v64, v66), !258
        v68 = get_local ptr u64, new_ptr, !259
        store v67 to v68, !259
        v69 = load other
        v70 = call ptr_44(v69), !260
        v71 = get_local ptr u64, new_ptr, !261
        v72 = load v71
        v73 = get_local ptr u64, other_len, !262
        v74 = load v73
        v75 = call copy_bytes_to_37(v70, v72, v74), !263
        v76 = get_local ptr u64, both_len, !264
        v77 = load v76
        v78 = const u64 1
        v79 = get_elem_ptr self, ptr u64, v78, !265
        store v77 to v79, !265
        v80 = call clear_30(other), !266
        v81 = const unit ()
        ret () v81
    }

    pub fn len_29(self !267: { { u64, u64 }, u64 }) -> u64, !268 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !232
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !269: ptr { { u64, u64 }, u64 }) -> (), !270 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !271
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !272
        store v0 to v2, !272
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !273
        v5 = const u64 0, !274
        store v5 to v4, !273
        v6 = const unit ()
        ret () v6
    }

    pub fn lt_31(self !275: u64, other !276: u64) -> bool, !277 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_32(self !278: { u64, u64 }) -> u64, !279 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !280
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !282: u64, count !283: u64) -> slice, !284 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !285
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !285
        store ptr to v4, !285
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !285
        store v1 to v6, !285
        v7 = load v2
        v8 = call from_parts_34(v7), !286
        ret slice v8
    }

    fn from_parts_34(parts !287: { u64, u64 }) -> slice, !288 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !289 {
        }
        ret slice v0
    }

    pub fn realloc_bytes_35(ptr !290: u64, count !291: u64, new_count !292: u64) -> u64, !293 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !294
        cbr v0, block0(), block4(), !294

        block0():
        v1 = call alloc_bytes_24(new_count), !295
        v2 = get_local ptr u64, new_ptr, !296
        store v1 to v2, !296
        v3 = const u64 0, !297
        v4 = call gt_36(count, v3), !298
        cbr v4, block1(), block2(), !298

        block1():
        v5 = get_local ptr u64, new_ptr, !299
        v6 = load v5
        v7 = call copy_bytes_to_37(ptr, v6, count), !300
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !301
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn gt_36(self !302: u64, other !303: u64) -> bool, !304 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn copy_bytes_to_37(self !305: u64, dst !306: u64, count !307: u64) -> (), !308 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) {
            mcp    dst src len, !309
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn ptr_38(self !310: { u64, u64 }) -> u64, !311 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !312
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !313: slice) -> { u64, u64 }, !314 {
        local { u64, u64 } __anon_0

        entry(slice: slice):
        v0 = call ptr_40(slice), !315
        v1 = call number_of_bytes_42(slice), !316
        v2 = get_local ptr { u64, u64 }, __anon_0, !317
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v0 to v4, !317
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !317
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub fn ptr_40(self !318: slice) -> u64, !319 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_41(self), !320
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !321
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_41(slice !322: slice) -> { u64, u64 }, !323 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !324 {
        }
        ret { u64, u64 } v0
    }

    pub fn number_of_bytes_42(self !325: slice) -> u64, !326 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_41(self), !327
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !328
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_43(self !329: u64, offset !330: u64) -> u64, !331 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !332 {
            add    new ptr offset, !333
        }
        ret u64 v0
    }

    pub fn ptr_44(self !334: { { u64, u64 }, u64 }) -> u64, !335 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !242
        v4 = load v3
        v5 = call ptr_38(v4), !336
        ret u64 v5
    }

    pub fn from_45(slice !337: slice) -> { { u64, u64 }, u64 }, !338 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !339
        v1 = call number_of_bytes_42(slice), !340
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !341
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !341
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !341
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn hash_46(self !342: b256, state !343: ptr { { { u64, u64 }, u64 } }) -> (), !344 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: b256, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 32, !345
        v1 = call alloc_bytes_24(v0), !346
        v2 = get_local ptr u64, ptr, !347
        store v1 to v2, !347
        v3 = asm(r1: self) -> { u64, u64, u64, u64 } r1, !348 {
        }
        v4 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !349
        store v3 to v4, !349
        v5 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !349
        v6 = load v5
        v7 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        store v6 to v7, !349
        v8 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !349
        v11 = load v10
        v12 = get_local ptr u64, word_1, !349
        store v11 to v12, !349
        v13 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr u64, v14, !349
        v16 = load v15
        v17 = get_local ptr u64, word_2, !349
        store v16 to v17, !349
        v18 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v19 = const u64 2
        v20 = get_elem_ptr v18, ptr u64, v19, !349
        v21 = load v20
        v22 = get_local ptr u64, word_3, !349
        store v21 to v22, !349
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v24 = const u64 3
        v25 = get_elem_ptr v23, ptr u64, v24, !349
        v26 = load v25
        v27 = get_local ptr u64, word_4, !349
        store v26 to v27, !349
        v28 = get_local ptr u64, ptr, !350
        v29 = load v28
        v30 = get_local ptr u64, word_1, !351
        v31 = load v30
        v32 = get_local ptr u64, word_2, !352
        v33 = load v32
        v34 = get_local ptr u64, word_3, !353
        v35 = load v34
        v36 = get_local ptr u64, word_4, !354
        v37 = load v36
        v38 = asm(ptr: v29, val_1: v31, val_2: v33, val_3: v35, val_4: v37) {
            sw     ptr val_1 i0, !355
            sw     ptr val_2 i1, !356
            sw     ptr val_3 i2, !357
            sw     ptr val_4 i3, !358
        }
        v39 = get_local ptr u64, ptr, !359
        v40 = load v39
        v41 = const u64 32, !360
        v42 = call from_parts_33(v40, v41), !361
        v43 = call from_45(v42), !362
        v44 = call write_27(state, v43), !363
        v45 = const unit ()
        ret () v45
    }

    pub fn sha256_47(self !364: { { { u64, u64 }, u64 } }) -> b256, !365 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_48(), !366
        v1 = get_local ptr b256, result_buffer, !367
        store v0 to v1, !367
        v2 = get_local ptr b256, result_buffer, !368
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !221
        v7 = load v6
        v8 = call ptr_44(v7), !369
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !221
        v13 = load v12
        v14 = call len_29(v13), !370
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !371 {
            s256   hash ptr bytes, !372
        }
        ret b256 v15
    }

    pub fn min_48() -> b256, !374 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !375
        ret b256 v0
    }

    pub fn field_id_49(self !376: { b256, u64, b256 }) -> b256, !377 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !378
        v4 = load v3
        ret b256 v4
    }

    pub fn new_50(slot !379: b256, offset !380: u64, field_id !381: b256) -> { b256, u64, b256 }, !382 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !383
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !383
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !383
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !383
        v7 = load v0
        ret { b256, u64, b256 } v7
    }
}

// IR: [mem2reg] Promotion of local memory to SSA registers
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = const u64 1, !5
        v12 = call get_19(v10, v11), !6
        v13 = call try_read_0(v12), !7
        ret { u64, ( () | {  } ) } v13
    }

    pub fn try_read_0(self !9: { b256, u64, b256 }) -> { u64, ( () | {  } ) }, !11 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_17(self), !12
        v1 = call offset_18(self), !13
        v2 = call read_1(v0, v1), !14
        ret { u64, ( () | {  } ) } v2
    }

    pub fn read_1(slot !16: b256, offset !17: u64) -> { u64, ( () | {  } ) }, !19 {
        local { u64, ( () | {  } ) } __anon_0
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 0
        v1 = const u64 0, !20
        v2 = call eq_2(v0, v1), !21
        cbr v2, block0(), block1(), !21

        block0():
        v3 = get_local ptr { u64, ( () | {  } ) }, __anon_0, !23
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !23
        v6 = const u64 0, !23
        store v6 to v5, !23
        v7 = load v3
        ret { u64, ( () | {  } ) } v7, !24

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_3(slot, offset), !25
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !26
        store v10 to v11, !26
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !26
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        store v13 to v14, !26
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !26
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !26
        store v18 to v19, !26
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !26
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !26
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !26
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !26
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !26
        v30 = get_local ptr u64, number_of_slots, !27
        v31 = const u64 32, !28
        v32 = call multiply_6(v23, v31), !29
        v33 = call alloc_14(v32), !30
        v34 = get_local ptr u64, result_ptr, !31
        v35 = get_local ptr b256, offset_slot, !32
        v36 = load v35
        v37 = get_local ptr u64, result_ptr, !33
        v38 = get_local ptr u64, number_of_slots, !34
        v39 = get_local ptr b256, key_for_storage, !35
        store v36 to v39, !35
        v40 = int_to_ptr v33 to ptr b256, !35
        v41 = state_load_quad_word v40, key v39, v23, !35
        cbr v41, block3(), block4(), !35

        block3():
        v42 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !23
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr u64, v43, !23
        v45 = const u64 1, !23
        store v45 to v44, !23
        v46 = get_local ptr u64, result_ptr, !36
        v47 = get_local ptr u64, place_in_slot, !37
        v48 = call add_16(v33, v28), !38
        v49 = call read_15(v48), !39
        v50 = const u64 1
        v51 = const u64 1
        v52 = get_elem_ptr v42, ptr {  }, v50, v51, !23
        store v49 to v52, !23
        v53 = load v42
        br block5(v53)

        block4():
        v54 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !23
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr u64, v55, !23
        v57 = const u64 0, !23
        store v57 to v56, !23
        v58 = load v54
        br block5(v58)

        block5(v59: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v59
    }

    pub fn eq_2(self !41: u64, other !42: u64) -> bool, !43 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    fn slot_calculator_3(slot !44: b256, offset !45: u64) -> { b256, u64, u64 }, !46 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !47
        v1 = const u64 8, !48
        v2 = call multiply_6(offset, v1), !49
        v3 = get_local ptr u64, size_of_t, !50
        v4 = const u64 0
        v5 = call add_5(v2, v4), !51
        v6 = const u64 31, !52
        v7 = call add_5(v5, v6), !53
        v8 = const u64 5, !54
        v9 = call rsh_4(v7, v8), !55
        v10 = get_local ptr u64, last_slot, !56
        v11 = const u64 4, !57
        v12 = call modulo_7(offset, v11), !58
        v13 = get_local ptr u64, place_in_slot, !59
        v14 = get_local ptr bool, __matched_value_1, !60
        v15 = get_local ptr bool, __matched_value_1, !61
        v16 = const bool true
        v17 = const bool true, !62
        v18 = call eq_8(v16, v17), !63
        cbr v18, block0(), block1(), !63

        block0():
        v19 = get_local ptr u64, place_in_slot, !64
        v20 = const u64 8, !65
        v21 = call multiply_6(v12, v20), !66
        v22 = get_local ptr u64, size_of_t, !67
        v23 = call add_5(v21, v4), !68
        v24 = const u64 31, !69
        v25 = call add_5(v23, v24), !70
        v26 = const u64 5, !71
        v27 = call rsh_4(v25, v26), !72
        br block5(v27)

        block1():
        v28 = get_local ptr bool, __matched_value_1, !61
        v29 = const bool false, !73
        v30 = call eq_8(v16, v29), !74
        cbr v30, block2(), block3(), !74

        block2():
        v31 = const u64 1, !75
        br block4(v31)

        block3():
        v32 = const u64 14757395258967588866, !60
        revert v32, !60

        block4(v33: u64):
        br block5(v33)

        block5(v34: u64):
        v35 = get_local ptr u64, number_of_slots, !76
        v36 = call as_u256_9(slot), !77
        v37 = get_local ptr u256, offset_slot, !78
        store v36 to v37, !78
        v38 = get_local ptr u256, offset_slot, !79
        v39 = load v38
        v40 = get_local ptr u64, last_slot, !80
        v41 = call as_u256_12(v9), !81
        v42 = get_local ptr u64, number_of_slots, !82
        v43 = call as_u256_12(v34), !83
        v44 = call subtract_11(v41, v43), !84
        v45 = call add_10(v39, v44), !85
        v46 = get_local ptr u256, offset_slot, !85
        store v45 to v46, !85
        v47 = get_local ptr u256, offset_slot, !86
        v48 = load v47
        v49 = call as_b256_13(v48), !87
        v50 = get_local ptr u64, number_of_slots, !88
        v51 = get_local ptr u64, place_in_slot, !89
        v52 = get_local ptr { b256, u64, u64 }, __anon_0, !90
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr b256, v53, !90
        store v49 to v54, !90
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !90
        store v34 to v56, !90
        v57 = const u64 2
        v58 = get_elem_ptr v52, ptr u64, v57, !90
        store v12 to v58, !90
        v59 = load v52
        ret { b256, u64, u64 } v59
    }

    pub fn rsh_4(self !91: u64, other !92: u64) -> u64, !93 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn add_5(self !94: u64, other !95: u64) -> u64, !96 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn multiply_6(self !97: u64, other !98: u64) -> u64, !99 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn modulo_7(self !100: u64, other !101: u64) -> u64, !102 {
        entry(self: u64, other: u64):
        v0 = mod self, other
        ret u64 v0
    }

    pub fn eq_8(self !103: bool, other !104: bool) -> bool, !105 {
        entry(self: bool, other: bool):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn as_u256_9(self !107: b256) -> u256, !108 {
        entry(self: b256):
        v0 = asm(input: self) -> u256 input, !109 {
        }
        ret u256 v0
    }

    pub fn add_10(self !110: u256, other !111: u256) -> u256, !112 {
        entry(self: u256, other: u256):
        v0 = add self, other
        ret u256 v0
    }

    pub fn subtract_11(self !113: u256, other !114: u256) -> u256, !115 {
        entry(self: u256, other: u256):
        v0 = sub self, other
        ret u256 v0
    }

    pub fn as_u256_12(self !116: u64) -> u256, !117 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !118
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !118
        v3 = const u64 0, !119
        store v3 to v2, !118
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !118
        v6 = const u64 0, !120
        store v6 to v5, !118
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !118
        v9 = const u64 0, !121
        store v9 to v8, !118
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !118
        store self to v11, !118
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !122
        store v12 to v13, !122
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !123
        v15 = asm(input: v14) -> u256 input, !124 {
        }
        ret u256 v15
    }

    pub fn as_b256_13(self !125: u256) -> b256, !126 {
        entry(self: u256):
        v0 = asm(input: self) -> b256 input, !127 {
        }
        ret b256 v0
    }

    pub fn alloc_14(count !129: u64) -> u64, !130 {
        entry(count: u64):
        v0 = const u64 8
        v1 = call multiply_6(v0, count), !131
        v2 = asm(size: v1, ptr) -> u64 ptr, !132 {
            aloc   size, !133
            move   ptr hp, !134
        }
        ret u64 v2
    }

    pub fn read_15(self !136: u64) -> {  }, !137 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !138

        block0():
        v1 = asm(ptr: self) -> {  } ptr, !139 {
        }
        br block5(v1)

        block1():
        v2 = const u64 0
        v3 = const u64 1, !140
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !141

        block2():
        v5 = asm(ptr: self, val) -> {  } val, !142 {
            lb     val ptr i0, !143
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> {  } val, !144 {
            lw     val ptr i0, !145
        }
        br block4(v6)

        block4(v7: {  }):
        br block5(v7)

        block5(v8: {  }):
        ret {  } v8
    }

    pub fn add_16(self !146: u64, count !147: u64) -> u64, !148 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn slot_17(self !150: { b256, u64, b256 }) -> b256, !151 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !152
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_18(self !153: { b256, u64, b256 }) -> u64, !154 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !155
        v4 = load v3
        ret u64 v4
    }

    pub fn get_19(self !157: { b256, u64, b256 }, key !158: u64) -> { b256, u64, b256 }, !159 {
        local { u64, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: u64):
        v0 = call field_id_49(self), !160
        v1 = get_local ptr { u64, b256 }, __anon_0, !161
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !161
        store key to v3, !161
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !161
        store v0 to v5, !161
        v6 = load v1
        v7 = call sha256_20(v6), !162
        v8 = get_local ptr b256, key_, !163
        store v7 to v8, !163
        v9 = get_local ptr b256, key_, !164
        v10 = load v9
        v11 = get_local ptr b256, key_, !165
        v12 = load v11
        v13 = const u64 0, !166
        v14 = call new_50(v10, v13, v12), !167
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_20(s !169: { u64, b256 }) -> b256, !172 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { u64, b256 }):
        v0 = call new_21(), !173
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !174
        store v0 to v1, !174
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !175
        v3 = call hash_25(s, v2), !176
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !177
        v5 = load v4
        v6 = call sha256_47(v5), !178
        ret b256 v6
    }

    pub fn new_21() -> { { { u64, u64 }, u64 } }, !179 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_22(), !180
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !181
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !181
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_22() -> { { u64, u64 }, u64 }, !183 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_23(), !184
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !185
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !185
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !186
        store v6 to v5, !185
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_23() -> { u64, u64 }, !187 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !188
        v1 = call alloc_bytes_24(v0), !189
        v2 = get_local ptr { u64, u64 }, __anon_0, !190
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !190
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !191
        store v7 to v6, !190
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_24(count !192: u64) -> u64, !193 {
        entry(count: u64):
        v0 = asm(size: count, ptr) -> u64 ptr, !194 {
            aloc   size, !195
            move   ptr hp, !196
        }
        ret u64 v0
    }

    pub fn hash_25(self !197: { u64, b256 }, state !198: ptr { { { u64, u64 }, u64 } }) -> (), !200 {
        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !201
        v4 = load v3
        v5 = call hash_26(v4, state), !202
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { u64, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !203
        v10 = load v9
        v11 = call hash_46(v10, state), !204
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_26(self !205: u64, state !206: ptr { { { u64, u64 }, u64 } }) -> (), !207 {
        local u64 ptr

        entry(self: u64, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 8, !208
        v1 = call alloc_bytes_24(v0), !209
        v2 = get_local ptr u64, ptr, !210
        v3 = get_local ptr u64, ptr, !211
        v4 = asm(ptr: v1, val: self) {
            sw     ptr val i0, !212
        }
        v5 = get_local ptr u64, ptr, !213
        v6 = const u64 8, !214
        v7 = call from_parts_33(v1, v6), !215
        v8 = call from_45(v7), !216
        v9 = call write_27(state, v8), !217
        v10 = const unit ()
        ret () v10
    }

    pub fn write_27(self !218: ptr { { { u64, u64 }, u64 } }, bytes !219: { { u64, u64 }, u64 }) -> (), !220 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !221
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !222
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !223: ptr { { u64, u64 }, u64 }, other !224: ptr { { u64, u64 }, u64 }) -> (), !225 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_29(v0), !226
        v2 = get_local ptr u64, other_len, !227
        v3 = get_local ptr u64, other_len, !228
        v4 = const u64 0, !229
        v5 = call eq_2(v1, v4), !230
        cbr v5, block0(), block1(), !230

        block0():
        v6 = const unit (), !231
        ret () v6, !231

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !232
        v11 = load v10
        v12 = const u64 0, !233
        v13 = call eq_2(v11, v12), !234
        cbr v13, block3(), block4(), !234

        block3():
        v14 = load other
        store v14 to self, !235
        v15 = call clear_30(other), !236
        v16 = const unit (), !237
        ret () v16, !237

        block4():
        v17 = const unit ()
        br block5(v17)

        block5(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr self, ptr u64, v19, !232
        v21 = load v20
        v22 = get_local ptr u64, other_len, !238
        v23 = call add_5(v21, v1), !239
        v24 = get_local ptr u64, both_len, !240
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !232
        v27 = load v26
        v28 = get_local ptr u64, other_start, !241
        v29 = const u64 0
        v30 = get_elem_ptr self, ptr { u64, u64 }, v29, !242
        v31 = load v30
        v32 = call capacity_32(v31), !243
        v33 = get_local ptr u64, both_len, !244
        v34 = call lt_31(v32, v23), !245
        cbr v34, block6(), block7(), !245

        block6():
        v35 = const u64 0
        v36 = get_elem_ptr self, ptr { u64, u64 }, v35, !242
        v37 = load v36
        v38 = call ptr_38(v37), !246
        v39 = const u64 0
        v40 = get_elem_ptr self, ptr { u64, u64 }, v39, !242
        v41 = load v40
        v42 = call capacity_32(v41), !247
        v43 = get_local ptr u64, both_len, !248
        v44 = call realloc_bytes_35(v38, v42, v23), !249
        v45 = get_local ptr u64, both_len, !250
        v46 = call from_parts_33(v44, v23), !251
        v47 = get_local ptr slice, new_slice, !252
        store v46 to v47, !252
        v48 = get_local ptr slice, new_slice, !253
        v49 = load v48
        v50 = call from_39(v49), !254
        v51 = const u64 0
        v52 = get_elem_ptr self, ptr { u64, u64 }, v51, !255
        store v50 to v52, !255
        v53 = const unit ()
        br block8(v53)

        block7():
        v54 = const unit ()
        br block8(v54)

        block8(v55: ()):
        v56 = const u64 0
        v57 = get_elem_ptr self, ptr { u64, u64 }, v56, !242
        v58 = load v57
        v59 = call ptr_38(v58), !256
        v60 = get_local ptr u64, other_start, !257
        v61 = call add_uint_offset_43(v59, v27), !258
        v62 = get_local ptr u64, new_ptr, !259
        v63 = load other
        v64 = call ptr_44(v63), !260
        v65 = get_local ptr u64, new_ptr, !261
        v66 = get_local ptr u64, other_len, !262
        v67 = call copy_bytes_to_37(v64, v61, v1), !263
        v68 = get_local ptr u64, both_len, !264
        v69 = const u64 1
        v70 = get_elem_ptr self, ptr u64, v69, !265
        store v23 to v70, !265
        v71 = call clear_30(other), !266
        v72 = const unit ()
        ret () v72
    }

    pub fn len_29(self !267: { { u64, u64 }, u64 }) -> u64, !268 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !232
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !269: ptr { { u64, u64 }, u64 }) -> (), !270 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !271
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !272
        store v0 to v2, !272
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !273
        v5 = const u64 0, !274
        store v5 to v4, !273
        v6 = const unit ()
        ret () v6
    }

    pub fn lt_31(self !275: u64, other !276: u64) -> bool, !277 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_32(self !278: { u64, u64 }) -> u64, !279 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !280
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !282: u64, count !283: u64) -> slice, !284 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !285
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !285
        store ptr to v4, !285
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !285
        store v1 to v6, !285
        v7 = load v2
        v8 = call from_parts_34(v7), !286
        ret slice v8
    }

    fn from_parts_34(parts !287: { u64, u64 }) -> slice, !288 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !289 {
        }
        ret slice v0
    }

    pub fn realloc_bytes_35(ptr !290: u64, count !291: u64, new_count !292: u64) -> u64, !293 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !294
        cbr v0, block0(), block4(), !294

        block0():
        v1 = call alloc_bytes_24(new_count), !295
        v2 = get_local ptr u64, new_ptr, !296
        v3 = const u64 0, !297
        v4 = call gt_36(count, v3), !298
        cbr v4, block1(), block2(), !298

        block1():
        v5 = get_local ptr u64, new_ptr, !299
        v6 = call copy_bytes_to_37(ptr, v1, count), !300
        v7 = const unit ()
        br block3(v7)

        block2():
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !301
        br block5(v1)

        block4():
        br block5(ptr)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !302: u64, other !303: u64) -> bool, !304 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn copy_bytes_to_37(self !305: u64, dst !306: u64, count !307: u64) -> (), !308 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) {
            mcp    dst src len, !309
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn ptr_38(self !310: { u64, u64 }) -> u64, !311 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !312
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !313: slice) -> { u64, u64 }, !314 {
        local { u64, u64 } __anon_0

        entry(slice: slice):
        v0 = call ptr_40(slice), !315
        v1 = call number_of_bytes_42(slice), !316
        v2 = get_local ptr { u64, u64 }, __anon_0, !317
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v0 to v4, !317
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !317
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub fn ptr_40(self !318: slice) -> u64, !319 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_41(self), !320
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !321
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_41(slice !322: slice) -> { u64, u64 }, !323 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !324 {
        }
        ret { u64, u64 } v0
    }

    pub fn number_of_bytes_42(self !325: slice) -> u64, !326 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_41(self), !327
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !328
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_43(self !329: u64, offset !330: u64) -> u64, !331 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !332 {
            add    new ptr offset, !333
        }
        ret u64 v0
    }

    pub fn ptr_44(self !334: { { u64, u64 }, u64 }) -> u64, !335 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !242
        v4 = load v3
        v5 = call ptr_38(v4), !336
        ret u64 v5
    }

    pub fn from_45(slice !337: slice) -> { { u64, u64 }, u64 }, !338 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !339
        v1 = call number_of_bytes_42(slice), !340
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !341
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !341
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !341
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn hash_46(self !342: b256, state !343: ptr { { { u64, u64 }, u64 } }) -> (), !344 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: b256, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 32, !345
        v1 = call alloc_bytes_24(v0), !346
        v2 = get_local ptr u64, ptr, !347
        v3 = asm(r1: self) -> { u64, u64, u64, u64 } r1, !348 {
        }
        v4 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !349
        store v3 to v4, !349
        v5 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !349
        v6 = load v5
        v7 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        store v6 to v7, !349
        v8 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !349
        v11 = load v10
        v12 = get_local ptr u64, word_1, !349
        v13 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr u64, v14, !349
        v16 = load v15
        v17 = get_local ptr u64, word_2, !349
        v18 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v19 = const u64 2
        v20 = get_elem_ptr v18, ptr u64, v19, !349
        v21 = load v20
        v22 = get_local ptr u64, word_3, !349
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !349
        v24 = const u64 3
        v25 = get_elem_ptr v23, ptr u64, v24, !349
        v26 = load v25
        v27 = get_local ptr u64, word_4, !349
        v28 = get_local ptr u64, ptr, !350
        v29 = get_local ptr u64, word_1, !351
        v30 = get_local ptr u64, word_2, !352
        v31 = get_local ptr u64, word_3, !353
        v32 = get_local ptr u64, word_4, !354
        v33 = asm(ptr: v1, val_1: v11, val_2: v16, val_3: v21, val_4: v26) {
            sw     ptr val_1 i0, !355
            sw     ptr val_2 i1, !356
            sw     ptr val_3 i2, !357
            sw     ptr val_4 i3, !358
        }
        v34 = get_local ptr u64, ptr, !359
        v35 = const u64 32, !360
        v36 = call from_parts_33(v1, v35), !361
        v37 = call from_45(v36), !362
        v38 = call write_27(state, v37), !363
        v39 = const unit ()
        ret () v39
    }

    pub fn sha256_47(self !364: { { { u64, u64 }, u64 } }) -> b256, !365 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_48(), !366
        v1 = get_local ptr b256, result_buffer, !367
        store v0 to v1, !367
        v2 = get_local ptr b256, result_buffer, !368
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !221
        v7 = load v6
        v8 = call ptr_44(v7), !369
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !221
        v13 = load v12
        v14 = call len_29(v13), !370
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !371 {
            s256   hash ptr bytes, !372
        }
        ret b256 v15
    }

    pub fn min_48() -> b256, !374 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !375
        ret b256 v0
    }

    pub fn field_id_49(self !376: { b256, u64, b256 }) -> b256, !377 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !378
        v4 = load v3
        ret b256 v4
    }

    pub fn new_50(slot !379: b256, offset !380: u64, field_id !381: b256) -> { b256, u64, b256 }, !382 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !383
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !383
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !383
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !383
        v7 = load v0
        ret { b256, u64, b256 } v7
    }
}

// IR: [inline] Function inlining
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { b256, u64, b256 } __anon_000
        local { b256, u64, u64 } __anon_001
        local { u64, ( () | {  } ) } __anon_01
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        br get_19_block0(v15), !14

        get_19_block0(v16: b256):
        v17 = get_local ptr { u64, b256 }, __anon_00, !16
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !17
        v20 = const u64 1, !18
        store v20 to v19, !19
        v21 = const u64 1
        v22 = get_elem_ptr v17, ptr b256, v21, !20
        store v16 to v22, !21
        v23 = load v17, !5
        v24 = call sha256_20(v23), !23
        v25 = get_local ptr b256, key_, !25
        store v24 to v25, !26
        v26 = get_local ptr b256, key_, !28
        v27 = load v26, !5
        v28 = get_local ptr b256, key_, !30
        v29 = load v28, !5
        v30 = get_local ptr { b256, u64, b256 }, __anon_000, !33
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr b256, v31, !34
        store v27 to v32, !35
        v33 = const u64 1
        v34 = get_elem_ptr v30, ptr u64, v33, !36
        v35 = const u64 0, !37
        store v35 to v34, !38
        v36 = const u64 2
        v37 = get_elem_ptr v30, ptr b256, v36, !39
        store v29 to v37, !40
        v38 = load v30, !41
        br get_19_block1(v38), !42

        get_19_block1(v39: { b256, u64, b256 }):
        br block0(v39), !5

        block0(v40: { b256, u64, b256 }):
        v41 = ptr_to_int v40 to u64, !46
        v42 = int_to_ptr v41 to ptr { b256, u64, b256 }, !47
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr b256, v43, !49
        v45 = load v44, !50
        br try_read_0_block0(v45), !51

        try_read_0_block0(v46: b256):
        v47 = ptr_to_int v40 to u64, !53
        v48 = int_to_ptr v47 to ptr { b256, u64, b256 }, !54
        v49 = const u64 1
        v50 = get_elem_ptr v48, ptr u64, v49, !56
        v51 = load v50, !57
        br try_read_0_block1(v51), !58

        try_read_0_block1(v52: u64):
        v53 = const u64 0
        v54 = const u64 0, !60
        v55 = cmp eq v53 v54, !63
        br try_read_0_read_1_block6(v55), !64

        try_read_0_read_1_block6(v56: bool):
        cbr v56, try_read_0_read_1_block0(), try_read_0_read_1_block1(), !65

        try_read_0_read_1_block0():
        v57 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !68
        v58 = const u64 0
        v59 = get_elem_ptr v57, ptr u64, v58, !69
        v60 = const u64 0, !67
        store v60 to v59, !70
        v61 = load v57, !71
        br try_read_0_block2(v61), !73

        try_read_0_read_1_block1():
        v62 = const unit ()
        br try_read_0_read_1_block2(v62), !74

        try_read_0_read_1_block2(v63: ()):
        v64 = get_local ptr u64, size_of_t, !77
        v65 = const u64 8, !78
        v66 = mul v52, v65, !80
        br try_read_0_read_1_slot_calculator_3_block6(v66), !81

        try_read_0_read_1_slot_calculator_3_block6(v67: u64):
        v68 = get_local ptr u64, size_of_t, !83
        v69 = const u64 0
        v70 = add v67, v69, !85
        br try_read_0_read_1_slot_calculator_3_block7(v70), !86

        try_read_0_read_1_slot_calculator_3_block7(v71: u64):
        v72 = const u64 31, !87
        v73 = add v71, v72, !89
        br try_read_0_read_1_slot_calculator_3_block8(v73), !90

        try_read_0_read_1_slot_calculator_3_block8(v74: u64):
        v75 = const u64 5, !91
        v76 = rsh v74, v75, !93
        br try_read_0_read_1_slot_calculator_3_block9(v76), !94

        try_read_0_read_1_slot_calculator_3_block9(v77: u64):
        v78 = get_local ptr u64, last_slot, !96
        v79 = const u64 4, !97
        v80 = mod v52, v79, !99
        br try_read_0_read_1_slot_calculator_3_block10(v80), !100

        try_read_0_read_1_slot_calculator_3_block10(v81: u64):
        v82 = get_local ptr u64, place_in_slot0, !102
        v83 = get_local ptr bool, __matched_value_1, !104
        v84 = get_local ptr bool, __matched_value_1, !106
        v85 = const bool true
        v86 = const bool true, !107
        v87 = cmp eq v85 v86, !109
        br try_read_0_read_1_slot_calculator_3_block11(v87), !110

        try_read_0_read_1_slot_calculator_3_block11(v88: bool):
        cbr v88, try_read_0_read_1_slot_calculator_3_block0(), try_read_0_read_1_slot_calculator_3_block1(), !111

        try_read_0_read_1_slot_calculator_3_block0():
        v89 = get_local ptr u64, place_in_slot0, !113
        v90 = const u64 8, !114
        v91 = mul v81, v90, !116
        br try_read_0_read_1_slot_calculator_3_block12(v91), !117

        try_read_0_read_1_slot_calculator_3_block12(v92: u64):
        v93 = get_local ptr u64, size_of_t, !119
        v94 = add v92, v69, !121
        br try_read_0_read_1_slot_calculator_3_block13(v94), !122

        try_read_0_read_1_slot_calculator_3_block13(v95: u64):
        v96 = const u64 31, !123
        v97 = add v95, v96, !125
        br try_read_0_read_1_slot_calculator_3_block14(v97), !126

        try_read_0_read_1_slot_calculator_3_block14(v98: u64):
        v99 = const u64 5, !127
        v100 = rsh v98, v99, !129
        br try_read_0_read_1_slot_calculator_3_block15(v100), !130

        try_read_0_read_1_slot_calculator_3_block15(v101: u64):
        br try_read_0_read_1_slot_calculator_3_block5(v101), !131

        try_read_0_read_1_slot_calculator_3_block1():
        v102 = get_local ptr bool, __matched_value_1, !132
        v103 = const bool false, !133
        v104 = cmp eq v85 v103, !135
        br try_read_0_read_1_slot_calculator_3_block16(v104), !136

        try_read_0_read_1_slot_calculator_3_block16(v105: bool):
        cbr v105, try_read_0_read_1_slot_calculator_3_block2(), try_read_0_read_1_slot_calculator_3_block3(), !137

        try_read_0_read_1_slot_calculator_3_block2():
        v106 = const u64 1, !138
        br try_read_0_read_1_slot_calculator_3_block4(v106), !139

        try_read_0_read_1_slot_calculator_3_block3():
        v107 = const u64 14757395258967588866, !103
        revert v107, !140

        try_read_0_read_1_slot_calculator_3_block4(v108: u64):
        br try_read_0_read_1_slot_calculator_3_block5(v108), !141

        try_read_0_read_1_slot_calculator_3_block5(v109: u64):
        v110 = get_local ptr u64, number_of_slots0, !143
        v111 = asm(input: v46) -> u256 input, !147 {
        }
        br try_read_0_read_1_slot_calculator_3_block17(v111), !148

        try_read_0_read_1_slot_calculator_3_block17(v112: u256):
        v113 = get_local ptr u256, offset_slot0, !150
        store v112 to v113, !151
        v114 = get_local ptr u256, offset_slot0, !153
        v115 = load v114, !154
        v116 = get_local ptr u64, last_slot, !156
        v117 = call as_u256_12(v77), !158
        v118 = get_local ptr u64, number_of_slots0, !160
        v119 = call as_u256_12(v109), !162
        v120 = sub v117, v119, !164
        br try_read_0_read_1_slot_calculator_3_block18(v120), !165

        try_read_0_read_1_slot_calculator_3_block18(v121: u256):
        v122 = add v115, v121, !167
        br try_read_0_read_1_slot_calculator_3_block19(v122), !168

        try_read_0_read_1_slot_calculator_3_block19(v123: u256):
        v124 = get_local ptr u256, offset_slot0, !169
        store v123 to v124, !170
        v125 = get_local ptr u256, offset_slot0, !172
        v126 = load v125, !173
        v127 = asm(input: v126) -> b256 input, !176 {
        }
        br try_read_0_read_1_slot_calculator_3_block20(v127), !177

        try_read_0_read_1_slot_calculator_3_block20(v128: b256):
        v129 = get_local ptr u64, number_of_slots0, !179
        v130 = get_local ptr u64, place_in_slot0, !181
        v131 = get_local ptr { b256, u64, u64 }, __anon_001, !183
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr b256, v132, !184
        store v128 to v133, !185
        v134 = const u64 1
        v135 = get_elem_ptr v131, ptr u64, v134, !186
        store v109 to v135, !187
        v136 = const u64 2
        v137 = get_elem_ptr v131, ptr u64, v136, !188
        store v81 to v137, !189
        v138 = load v131, !190
        br try_read_0_read_1_block7(v138), !191

        try_read_0_read_1_block7(v139: { b256, u64, u64 }):
        v140 = get_local ptr { b256, u64, u64 }, __tuple_2, !193
        store v139 to v140, !194
        v141 = get_local ptr { b256, u64, u64 }, __tuple_2, !195
        v142 = load v141, !196
        v143 = get_local ptr { b256, u64, u64 }, __tuple_2_, !197
        store v142 to v143, !198
        v144 = get_local ptr { b256, u64, u64 }, __tuple_2_, !199
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr b256, v145, !200
        v147 = load v146, !201
        v148 = get_local ptr b256, offset_slot, !202
        store v147 to v148, !203
        v149 = get_local ptr { b256, u64, u64 }, __tuple_2_, !204
        v150 = const u64 1
        v151 = get_elem_ptr v149, ptr u64, v150, !205
        v152 = load v151, !206
        v153 = get_local ptr u64, number_of_slots, !207
        v154 = get_local ptr { b256, u64, u64 }, __tuple_2_, !208
        v155 = const u64 2
        v156 = get_elem_ptr v154, ptr u64, v155, !209
        v157 = load v156, !210
        v158 = get_local ptr u64, place_in_slot, !211
        v159 = get_local ptr u64, number_of_slots, !213
        v160 = const u64 32, !214
        v161 = mul v152, v160, !216
        br try_read_0_read_1_block8(v161), !217

        try_read_0_read_1_block8(v162: u64):
        v163 = const u64 8
        v164 = mul v163, v162, !221
        br try_read_0_read_1_alloc_14_block0(v164), !222

        try_read_0_read_1_alloc_14_block0(v165: u64):
        v166 = asm(size: v165, ptr) -> u64 ptr, !224 {
            aloc   size, !225
            move   ptr hp, !226
        }
        br try_read_0_read_1_block9(v166), !227

        try_read_0_read_1_block9(v167: u64):
        v168 = get_local ptr u64, result_ptr, !229
        v169 = get_local ptr b256, offset_slot, !231
        v170 = load v169, !232
        v171 = get_local ptr u64, result_ptr, !234
        v172 = get_local ptr u64, number_of_slots, !236
        v173 = get_local ptr b256, key_for_storage, !238
        store v170 to v173, !239
        v174 = int_to_ptr v167 to ptr b256, !240
        v175 = state_load_quad_word v174, key v173, v152, !241
        cbr v175, try_read_0_read_1_block3(), try_read_0_read_1_block4(), !242

        try_read_0_read_1_block3():
        v176 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !243
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr u64, v177, !244
        v179 = const u64 1, !67
        store v179 to v178, !245
        v180 = get_local ptr u64, result_ptr, !247
        v181 = get_local ptr u64, place_in_slot, !249
        v182 = const u64 8
        v183 = mul v182, v157, !251
        v184 = add v167, v183, !252
        br try_read_0_read_1_block10(v184), !253

        try_read_0_read_1_block10(v185: u64):
        v186 = const bool true
        cbr v186, try_read_0_read_1_read_15_block0(), try_read_0_read_1_read_15_block1(), !257

        try_read_0_read_1_read_15_block0():
        v187 = asm(ptr: v185) -> {  } ptr, !259 {
        }
        br try_read_0_read_1_read_15_block5(v187), !260

        try_read_0_read_1_read_15_block1():
        v188 = const u64 0
        v189 = const u64 1, !261
        v190 = cmp eq v188 v189, !262
        cbr v190, try_read_0_read_1_read_15_block2(), try_read_0_read_1_read_15_block3(), !264

        try_read_0_read_1_read_15_block2():
        v191 = asm(ptr: v185, val) -> {  } val, !266 {
            lb     val ptr i0, !267
        }
        br try_read_0_read_1_read_15_block4(v191), !268

        try_read_0_read_1_read_15_block3():
        v192 = asm(ptr: v185, val) -> {  } val, !270 {
            lw     val ptr i0, !271
        }
        br try_read_0_read_1_read_15_block4(v192), !272

        try_read_0_read_1_read_15_block4(v193: {  }):
        br try_read_0_read_1_read_15_block5(v193), !273

        try_read_0_read_1_read_15_block5(v194: {  }):
        br try_read_0_read_1_block11(v194), !274

        try_read_0_read_1_block11(v195: {  }):
        v196 = const u64 1
        v197 = const u64 1
        v198 = get_elem_ptr v176, ptr {  }, v196, v197, !275
        store v195 to v198, !276
        v199 = load v176, !277
        br try_read_0_read_1_block5(v199), !278

        try_read_0_read_1_block4():
        v200 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !279
        v201 = const u64 0
        v202 = get_elem_ptr v200, ptr u64, v201, !280
        v203 = const u64 0, !67
        store v203 to v202, !281
        v204 = load v200, !282
        br try_read_0_read_1_block5(v204), !283

        try_read_0_read_1_block5(v205: { u64, ( () | {  } ) }):
        br try_read_0_block2(v205), !284

        try_read_0_block2(v206: { u64, ( () | {  } ) }):
        br block1(v206), !43

        block1(v207: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v207
    }

    pub fn try_read_0(self !285: { b256, u64, b256 }) -> { u64, ( () | {  } ) }, !287 {
        local { u64, ( () | {  } ) } __anon_0
        local { b256, u64, u64 } __anon_00
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64, !45
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }, !45
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !288
        v4 = load v3, !45
        br block0(v4), !45

        block0(v5: b256):
        v6 = ptr_to_int self to u64, !52
        v7 = int_to_ptr v6 to ptr { b256, u64, b256 }, !52
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr u64, v8, !289
        v10 = load v9, !52
        br block1(v10), !52

        block1(v11: u64):
        v12 = const u64 0
        v13 = const u64 0, !60
        v14 = cmp eq v12 v13, !290
        br read_1_block6(v14), !291

        read_1_block6(v15: bool):
        cbr v15, read_1_block0(), read_1_block1(), !292

        read_1_block0():
        v16 = get_local ptr { u64, ( () | {  } ) }, __anon_0, !293
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !294
        v19 = const u64 0, !67
        store v19 to v18, !295
        v20 = load v16, !61
        br block2(v20), !296

        read_1_block1():
        v21 = const unit ()
        br read_1_block2(v21), !61

        read_1_block2(v22: ()):
        v23 = get_local ptr u64, size_of_t, !297
        v24 = const u64 8, !78
        v25 = mul v11, v24, !298
        br read_1_slot_calculator_3_block6(v25), !299

        read_1_slot_calculator_3_block6(v26: u64):
        v27 = get_local ptr u64, size_of_t, !300
        v28 = const u64 0
        v29 = add v26, v28, !301
        br read_1_slot_calculator_3_block7(v29), !302

        read_1_slot_calculator_3_block7(v30: u64):
        v31 = const u64 31, !87
        v32 = add v30, v31, !303
        br read_1_slot_calculator_3_block8(v32), !304

        read_1_slot_calculator_3_block8(v33: u64):
        v34 = const u64 5, !91
        v35 = rsh v33, v34, !305
        br read_1_slot_calculator_3_block9(v35), !306

        read_1_slot_calculator_3_block9(v36: u64):
        v37 = get_local ptr u64, last_slot, !307
        v38 = const u64 4, !97
        v39 = mod v11, v38, !308
        br read_1_slot_calculator_3_block10(v39), !309

        read_1_slot_calculator_3_block10(v40: u64):
        v41 = get_local ptr u64, place_in_slot0, !310
        v42 = get_local ptr bool, __matched_value_1, !311
        v43 = get_local ptr bool, __matched_value_1, !312
        v44 = const bool true
        v45 = const bool true, !107
        v46 = cmp eq v44 v45, !313
        br read_1_slot_calculator_3_block11(v46), !314

        read_1_slot_calculator_3_block11(v47: bool):
        cbr v47, read_1_slot_calculator_3_block0(), read_1_slot_calculator_3_block1(), !315

        read_1_slot_calculator_3_block0():
        v48 = get_local ptr u64, place_in_slot0, !316
        v49 = const u64 8, !114
        v50 = mul v40, v49, !317
        br read_1_slot_calculator_3_block12(v50), !318

        read_1_slot_calculator_3_block12(v51: u64):
        v52 = get_local ptr u64, size_of_t, !319
        v53 = add v51, v28, !320
        br read_1_slot_calculator_3_block13(v53), !321

        read_1_slot_calculator_3_block13(v54: u64):
        v55 = const u64 31, !123
        v56 = add v54, v55, !322
        br read_1_slot_calculator_3_block14(v56), !323

        read_1_slot_calculator_3_block14(v57: u64):
        v58 = const u64 5, !127
        v59 = rsh v57, v58, !324
        br read_1_slot_calculator_3_block15(v59), !325

        read_1_slot_calculator_3_block15(v60: u64):
        br read_1_slot_calculator_3_block5(v60), !326

        read_1_slot_calculator_3_block1():
        v61 = get_local ptr bool, __matched_value_1, !327
        v62 = const bool false, !133
        v63 = cmp eq v44 v62, !328
        br read_1_slot_calculator_3_block16(v63), !329

        read_1_slot_calculator_3_block16(v64: bool):
        cbr v64, read_1_slot_calculator_3_block2(), read_1_slot_calculator_3_block3(), !330

        read_1_slot_calculator_3_block2():
        v65 = const u64 1, !138
        br read_1_slot_calculator_3_block4(v65), !331

        read_1_slot_calculator_3_block3():
        v66 = const u64 14757395258967588866, !103
        revert v66, !332

        read_1_slot_calculator_3_block4(v67: u64):
        br read_1_slot_calculator_3_block5(v67), !333

        read_1_slot_calculator_3_block5(v68: u64):
        v69 = get_local ptr u64, number_of_slots0, !334
        v70 = asm(input: v5) -> u256 input, !335 {
        }
        br read_1_slot_calculator_3_block17(v70), !336

        read_1_slot_calculator_3_block17(v71: u256):
        v72 = get_local ptr u256, offset_slot0, !337
        store v71 to v72, !338
        v73 = get_local ptr u256, offset_slot0, !339
        v74 = load v73, !340
        v75 = get_local ptr u64, last_slot, !341
        v76 = call as_u256_12(v36), !342
        v77 = get_local ptr u64, number_of_slots0, !343
        v78 = call as_u256_12(v68), !344
        v79 = sub v76, v78, !345
        br read_1_slot_calculator_3_block18(v79), !346

        read_1_slot_calculator_3_block18(v80: u256):
        v81 = add v74, v80, !347
        br read_1_slot_calculator_3_block19(v81), !348

        read_1_slot_calculator_3_block19(v82: u256):
        v83 = get_local ptr u256, offset_slot0, !349
        store v82 to v83, !350
        v84 = get_local ptr u256, offset_slot0, !351
        v85 = load v84, !352
        v86 = asm(input: v85) -> b256 input, !353 {
        }
        br read_1_slot_calculator_3_block20(v86), !354

        read_1_slot_calculator_3_block20(v87: b256):
        v88 = get_local ptr u64, number_of_slots0, !355
        v89 = get_local ptr u64, place_in_slot0, !356
        v90 = get_local ptr { b256, u64, u64 }, __anon_00, !357
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr b256, v91, !358
        store v87 to v92, !359
        v93 = const u64 1
        v94 = get_elem_ptr v90, ptr u64, v93, !360
        store v68 to v94, !361
        v95 = const u64 2
        v96 = get_elem_ptr v90, ptr u64, v95, !362
        store v40 to v96, !363
        v97 = load v90, !364
        br read_1_block7(v97), !365

        read_1_block7(v98: { b256, u64, u64 }):
        v99 = get_local ptr { b256, u64, u64 }, __tuple_2, !366
        store v98 to v99, !367
        v100 = get_local ptr { b256, u64, u64 }, __tuple_2, !368
        v101 = load v100, !61
        v102 = get_local ptr { b256, u64, u64 }, __tuple_2_, !369
        store v101 to v102, !370
        v103 = get_local ptr { b256, u64, u64 }, __tuple_2_, !371
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr b256, v104, !372
        v106 = load v105, !61
        v107 = get_local ptr b256, offset_slot, !373
        store v106 to v107, !374
        v108 = get_local ptr { b256, u64, u64 }, __tuple_2_, !375
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u64, v109, !376
        v111 = load v110, !61
        v112 = get_local ptr u64, number_of_slots, !377
        v113 = get_local ptr { b256, u64, u64 }, __tuple_2_, !378
        v114 = const u64 2
        v115 = get_elem_ptr v113, ptr u64, v114, !379
        v116 = load v115, !61
        v117 = get_local ptr u64, place_in_slot, !380
        v118 = get_local ptr u64, number_of_slots, !381
        v119 = const u64 32, !214
        v120 = mul v111, v119, !382
        br read_1_block8(v120), !383

        read_1_block8(v121: u64):
        v122 = const u64 8
        v123 = mul v122, v121, !384
        br read_1_alloc_14_block0(v123), !385

        read_1_alloc_14_block0(v124: u64):
        v125 = asm(size: v124, ptr) -> u64 ptr, !386 {
            aloc   size, !225
            move   ptr hp, !226
        }
        br read_1_block9(v125), !387

        read_1_block9(v126: u64):
        v127 = get_local ptr u64, result_ptr, !388
        v128 = get_local ptr b256, offset_slot, !389
        v129 = load v128, !61
        v130 = get_local ptr u64, result_ptr, !390
        v131 = get_local ptr u64, number_of_slots, !391
        v132 = get_local ptr b256, key_for_storage, !392
        store v129 to v132, !393
        v133 = int_to_ptr v126 to ptr b256, !394
        v134 = state_load_quad_word v133, key v132, v111, !395
        cbr v134, read_1_block3(), read_1_block4(), !396

        read_1_block3():
        v135 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !397
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !398
        v138 = const u64 1, !67
        store v138 to v137, !399
        v139 = get_local ptr u64, result_ptr, !400
        v140 = get_local ptr u64, place_in_slot, !401
        v141 = const u64 8
        v142 = mul v141, v116, !402
        v143 = add v126, v142, !403
        br read_1_block10(v143), !404

        read_1_block10(v144: u64):
        v145 = const bool true
        cbr v145, read_1_read_15_block0(), read_1_read_15_block1(), !405

        read_1_read_15_block0():
        v146 = asm(ptr: v144) -> {  } ptr, !406 {
        }
        br read_1_read_15_block5(v146), !407

        read_1_read_15_block1():
        v147 = const u64 0
        v148 = const u64 1, !261
        v149 = cmp eq v147 v148, !408
        cbr v149, read_1_read_15_block2(), read_1_read_15_block3(), !409

        read_1_read_15_block2():
        v150 = asm(ptr: v144, val) -> {  } val, !410 {
            lb     val ptr i0, !267
        }
        br read_1_read_15_block4(v150), !411

        read_1_read_15_block3():
        v151 = asm(ptr: v144, val) -> {  } val, !412 {
            lw     val ptr i0, !271
        }
        br read_1_read_15_block4(v151), !413

        read_1_read_15_block4(v152: {  }):
        br read_1_read_15_block5(v152), !414

        read_1_read_15_block5(v153: {  }):
        br read_1_block11(v153), !415

        read_1_block11(v154: {  }):
        v155 = const u64 1
        v156 = const u64 1
        v157 = get_elem_ptr v135, ptr {  }, v155, v156, !416
        store v154 to v157, !417
        v158 = load v135, !61
        br read_1_block5(v158), !61

        read_1_block4():
        v159 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !418
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr u64, v160, !419
        v162 = const u64 0, !67
        store v162 to v161, !420
        v163 = load v159, !61
        br read_1_block5(v163), !61

        read_1_block5(v164: { u64, ( () | {  } ) }):
        br block2(v164), !61

        block2(v165: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v165
    }

    pub fn read_1(slot !421: b256, offset !422: u64) -> { u64, ( () | {  } ) }, !424 {
        local { u64, ( () | {  } ) } __anon_0
        local { b256, u64, u64 } __anon_00
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = const u64 0
        v1 = const u64 0, !60
        v2 = cmp eq v0 v1, !62
        br block6(v2), !62

        block6(v3: bool):
        cbr v3, block0(), block1(), !62

        block0():
        v4 = get_local ptr { u64, ( () | {  } ) }, __anon_0, !67
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !67
        v7 = const u64 0, !67
        store v7 to v6, !67
        v8 = load v4
        ret { u64, ( () | {  } ) } v8, !72

        block1():
        v9 = const unit ()
        br block2(v9)

        block2(v10: ()):
        v11 = get_local ptr u64, size_of_t, !425
        v12 = const u64 8, !78
        v13 = mul offset, v12, !426
        br slot_calculator_3_block6(v13), !427

        slot_calculator_3_block6(v14: u64):
        v15 = get_local ptr u64, size_of_t, !428
        v16 = const u64 0
        v17 = add v14, v16, !429
        br slot_calculator_3_block7(v17), !430

        slot_calculator_3_block7(v18: u64):
        v19 = const u64 31, !87
        v20 = add v18, v19, !431
        br slot_calculator_3_block8(v20), !432

        slot_calculator_3_block8(v21: u64):
        v22 = const u64 5, !91
        v23 = rsh v21, v22, !433
        br slot_calculator_3_block9(v23), !434

        slot_calculator_3_block9(v24: u64):
        v25 = get_local ptr u64, last_slot, !435
        v26 = const u64 4, !97
        v27 = mod offset, v26, !436
        br slot_calculator_3_block10(v27), !437

        slot_calculator_3_block10(v28: u64):
        v29 = get_local ptr u64, place_in_slot0, !438
        v30 = get_local ptr bool, __matched_value_1, !439
        v31 = get_local ptr bool, __matched_value_1, !440
        v32 = const bool true
        v33 = const bool true, !107
        v34 = cmp eq v32 v33, !441
        br slot_calculator_3_block11(v34), !442

        slot_calculator_3_block11(v35: bool):
        cbr v35, slot_calculator_3_block0(), slot_calculator_3_block1(), !443

        slot_calculator_3_block0():
        v36 = get_local ptr u64, place_in_slot0, !444
        v37 = const u64 8, !114
        v38 = mul v28, v37, !445
        br slot_calculator_3_block12(v38), !446

        slot_calculator_3_block12(v39: u64):
        v40 = get_local ptr u64, size_of_t, !447
        v41 = add v39, v16, !448
        br slot_calculator_3_block13(v41), !449

        slot_calculator_3_block13(v42: u64):
        v43 = const u64 31, !123
        v44 = add v42, v43, !450
        br slot_calculator_3_block14(v44), !451

        slot_calculator_3_block14(v45: u64):
        v46 = const u64 5, !127
        v47 = rsh v45, v46, !452
        br slot_calculator_3_block15(v47), !453

        slot_calculator_3_block15(v48: u64):
        br slot_calculator_3_block5(v48), !75

        slot_calculator_3_block1():
        v49 = get_local ptr bool, __matched_value_1, !454
        v50 = const bool false, !133
        v51 = cmp eq v32 v50, !455
        br slot_calculator_3_block16(v51), !456

        slot_calculator_3_block16(v52: bool):
        cbr v52, slot_calculator_3_block2(), slot_calculator_3_block3(), !457

        slot_calculator_3_block2():
        v53 = const u64 1, !138
        br slot_calculator_3_block4(v53), !75

        slot_calculator_3_block3():
        v54 = const u64 14757395258967588866, !103
        revert v54, !458

        slot_calculator_3_block4(v55: u64):
        br slot_calculator_3_block5(v55), !75

        slot_calculator_3_block5(v56: u64):
        v57 = get_local ptr u64, number_of_slots0, !459
        v58 = asm(input: slot) -> u256 input, !460 {
        }
        br slot_calculator_3_block17(v58), !461

        slot_calculator_3_block17(v59: u256):
        v60 = get_local ptr u256, offset_slot0, !462
        store v59 to v60, !463
        v61 = get_local ptr u256, offset_slot0, !464
        v62 = load v61, !75
        v63 = get_local ptr u64, last_slot, !465
        v64 = call as_u256_12(v24), !466
        v65 = get_local ptr u64, number_of_slots0, !467
        v66 = call as_u256_12(v56), !468
        v67 = sub v64, v66, !469
        br slot_calculator_3_block18(v67), !470

        slot_calculator_3_block18(v68: u256):
        v69 = add v62, v68, !471
        br slot_calculator_3_block19(v69), !472

        slot_calculator_3_block19(v70: u256):
        v71 = get_local ptr u256, offset_slot0, !473
        store v70 to v71, !474
        v72 = get_local ptr u256, offset_slot0, !475
        v73 = load v72, !75
        v74 = asm(input: v73) -> b256 input, !476 {
        }
        br slot_calculator_3_block20(v74), !477

        slot_calculator_3_block20(v75: b256):
        v76 = get_local ptr u64, number_of_slots0, !478
        v77 = get_local ptr u64, place_in_slot0, !479
        v78 = get_local ptr { b256, u64, u64 }, __anon_00, !480
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr b256, v79, !481
        store v75 to v80, !482
        v81 = const u64 1
        v82 = get_elem_ptr v78, ptr u64, v81, !483
        store v56 to v82, !484
        v83 = const u64 2
        v84 = get_elem_ptr v78, ptr u64, v83, !485
        store v28 to v84, !486
        v85 = load v78, !75
        br block7(v85), !75

        block7(v86: { b256, u64, u64 }):
        v87 = get_local ptr { b256, u64, u64 }, __tuple_2, !192
        store v86 to v87, !192
        v88 = get_local ptr { b256, u64, u64 }, __tuple_2, !192
        v89 = load v88
        v90 = get_local ptr { b256, u64, u64 }, __tuple_2_, !192
        store v89 to v90, !192
        v91 = get_local ptr { b256, u64, u64 }, __tuple_2_, !192
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr b256, v92, !192
        v94 = load v93
        v95 = get_local ptr b256, offset_slot, !192
        store v94 to v95, !192
        v96 = get_local ptr { b256, u64, u64 }, __tuple_2_, !192
        v97 = const u64 1
        v98 = get_elem_ptr v96, ptr u64, v97, !192
        v99 = load v98
        v100 = get_local ptr u64, number_of_slots, !192
        v101 = get_local ptr { b256, u64, u64 }, __tuple_2_, !192
        v102 = const u64 2
        v103 = get_elem_ptr v101, ptr u64, v102, !192
        v104 = load v103
        v105 = get_local ptr u64, place_in_slot, !192
        v106 = get_local ptr u64, number_of_slots, !212
        v107 = const u64 32, !214
        v108 = mul v99, v107, !215
        br block8(v108), !215

        block8(v109: u64):
        v110 = const u64 8
        v111 = mul v110, v109, !487
        br alloc_14_block0(v111), !488

        alloc_14_block0(v112: u64):
        v113 = asm(size: v112, ptr) -> u64 ptr, !489 {
            aloc   size, !225
            move   ptr hp, !226
        }
        br block9(v113), !218

        block9(v114: u64):
        v115 = get_local ptr u64, result_ptr, !228
        v116 = get_local ptr b256, offset_slot, !230
        v117 = load v116
        v118 = get_local ptr u64, result_ptr, !233
        v119 = get_local ptr u64, number_of_slots, !235
        v120 = get_local ptr b256, key_for_storage, !237
        store v117 to v120, !237
        v121 = int_to_ptr v114 to ptr b256, !237
        v122 = state_load_quad_word v121, key v120, v99, !237
        cbr v122, block3(), block4(), !237

        block3():
        v123 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !67
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr u64, v124, !67
        v126 = const u64 1, !67
        store v126 to v125, !67
        v127 = get_local ptr u64, result_ptr, !246
        v128 = get_local ptr u64, place_in_slot, !248
        v129 = const u64 8
        v130 = mul v129, v104, !250
        v131 = add v114, v130, !250
        br block10(v131), !250

        block10(v132: u64):
        v133 = const bool true
        cbr v133, read_15_block0(), read_15_block1(), !490

        read_15_block0():
        v134 = asm(ptr: v132) -> {  } ptr, !491 {
        }
        br read_15_block5(v134), !254

        read_15_block1():
        v135 = const u64 0
        v136 = const u64 1, !261
        v137 = cmp eq v135 v136, !254
        cbr v137, read_15_block2(), read_15_block3(), !492

        read_15_block2():
        v138 = asm(ptr: v132, val) -> {  } val, !493 {
            lb     val ptr i0, !267
        }
        br read_15_block4(v138), !254

        read_15_block3():
        v139 = asm(ptr: v132, val) -> {  } val, !494 {
            lw     val ptr i0, !271
        }
        br read_15_block4(v139), !254

        read_15_block4(v140: {  }):
        br read_15_block5(v140), !254

        read_15_block5(v141: {  }):
        br block11(v141), !254

        block11(v142: {  }):
        v143 = const u64 1
        v144 = const u64 1
        v145 = get_elem_ptr v123, ptr {  }, v143, v144, !67
        store v142 to v145, !67
        v146 = load v123
        br block5(v146)

        block4():
        v147 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !67
        v148 = const u64 0
        v149 = get_elem_ptr v147, ptr u64, v148, !67
        v150 = const u64 0, !67
        store v150 to v149, !67
        v151 = load v147
        br block5(v151)

        block5(v152: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v152
    }

    pub fn eq_2(self !496: u64, other !497: u64) -> bool, !498 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    fn slot_calculator_3(slot !499: b256, offset !500: u64) -> { b256, u64, u64 }, !501 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !76
        v1 = const u64 8, !78
        v2 = mul offset, v1, !79
        br block6(v2), !79

        block6(v3: u64):
        v4 = get_local ptr u64, size_of_t, !82
        v5 = const u64 0
        v6 = add v3, v5, !84
        br block7(v6), !84

        block7(v7: u64):
        v8 = const u64 31, !87
        v9 = add v7, v8, !88
        br block8(v9), !88

        block8(v10: u64):
        v11 = const u64 5, !91
        v12 = rsh v10, v11, !92
        br block9(v12), !92

        block9(v13: u64):
        v14 = get_local ptr u64, last_slot, !95
        v15 = const u64 4, !97
        v16 = mod offset, v15, !98
        br block10(v16), !98

        block10(v17: u64):
        v18 = get_local ptr u64, place_in_slot, !101
        v19 = get_local ptr bool, __matched_value_1, !103
        v20 = get_local ptr bool, __matched_value_1, !105
        v21 = const bool true
        v22 = const bool true, !107
        v23 = cmp eq v21 v22, !108
        br block11(v23), !108

        block11(v24: bool):
        cbr v24, block0(), block1(), !108

        block0():
        v25 = get_local ptr u64, place_in_slot, !112
        v26 = const u64 8, !114
        v27 = mul v17, v26, !115
        br block12(v27), !115

        block12(v28: u64):
        v29 = get_local ptr u64, size_of_t, !118
        v30 = add v28, v5, !120
        br block13(v30), !120

        block13(v31: u64):
        v32 = const u64 31, !123
        v33 = add v31, v32, !124
        br block14(v33), !124

        block14(v34: u64):
        v35 = const u64 5, !127
        v36 = rsh v34, v35, !128
        br block15(v36), !128

        block15(v37: u64):
        br block5(v37)

        block1():
        v38 = get_local ptr bool, __matched_value_1, !105
        v39 = const bool false, !133
        v40 = cmp eq v21 v39, !134
        br block16(v40), !134

        block16(v41: bool):
        cbr v41, block2(), block3(), !134

        block2():
        v42 = const u64 1, !138
        br block4(v42)

        block3():
        v43 = const u64 14757395258967588866, !103
        revert v43, !103

        block4(v44: u64):
        br block5(v44)

        block5(v45: u64):
        v46 = get_local ptr u64, number_of_slots, !142
        v47 = asm(input: slot) -> u256 input, !502 {
        }
        br block17(v47), !144

        block17(v48: u256):
        v49 = get_local ptr u256, offset_slot, !149
        store v48 to v49, !149
        v50 = get_local ptr u256, offset_slot, !152
        v51 = load v50
        v52 = get_local ptr u64, last_slot, !155
        v53 = call as_u256_12(v13), !157
        v54 = get_local ptr u64, number_of_slots, !159
        v55 = call as_u256_12(v45), !161
        v56 = sub v53, v55, !163
        br block18(v56), !163

        block18(v57: u256):
        v58 = add v51, v57, !166
        br block19(v58), !166

        block19(v59: u256):
        v60 = get_local ptr u256, offset_slot, !166
        store v59 to v60, !166
        v61 = get_local ptr u256, offset_slot, !171
        v62 = load v61
        v63 = asm(input: v62) -> b256 input, !503 {
        }
        br block20(v63), !174

        block20(v64: b256):
        v65 = get_local ptr u64, number_of_slots, !178
        v66 = get_local ptr u64, place_in_slot, !180
        v67 = get_local ptr { b256, u64, u64 }, __anon_0, !182
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr b256, v68, !182
        store v64 to v69, !182
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr u64, v70, !182
        store v45 to v71, !182
        v72 = const u64 2
        v73 = get_elem_ptr v67, ptr u64, v72, !182
        store v17 to v73, !182
        v74 = load v67
        ret { b256, u64, u64 } v74
    }

    pub fn rsh_4(self !504: u64, other !505: u64) -> u64, !506 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn add_5(self !507: u64, other !508: u64) -> u64, !509 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn multiply_6(self !510: u64, other !511: u64) -> u64, !512 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn modulo_7(self !513: u64, other !514: u64) -> u64, !515 {
        entry(self: u64, other: u64):
        v0 = mod self, other
        ret u64 v0
    }

    pub fn eq_8(self !516: bool, other !517: bool) -> bool, !518 {
        entry(self: bool, other: bool):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn as_u256_9(self !519: b256) -> u256, !520 {
        entry(self: b256):
        v0 = asm(input: self) -> u256 input, !146 {
        }
        ret u256 v0
    }

    pub fn add_10(self !521: u256, other !522: u256) -> u256, !523 {
        entry(self: u256, other: u256):
        v0 = add self, other
        ret u256 v0
    }

    pub fn subtract_11(self !524: u256, other !525: u256) -> u256, !526 {
        entry(self: u256, other: u256):
        v0 = sub self, other
        ret u256 v0
    }

    pub fn as_u256_12(self !527: u64) -> u256, !528 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !529
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !529
        v3 = const u64 0, !530
        store v3 to v2, !529
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !529
        v6 = const u64 0, !531
        store v6 to v5, !529
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !529
        v9 = const u64 0, !532
        store v9 to v8, !529
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !529
        store self to v11, !529
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !533
        store v12 to v13, !533
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !534
        v15 = asm(input: v14) -> u256 input, !535 {
        }
        ret u256 v15
    }

    pub fn as_b256_13(self !536: u256) -> b256, !537 {
        entry(self: u256):
        v0 = asm(input: self) -> b256 input, !175 {
        }
        ret b256 v0
    }

    pub fn alloc_14(count !538: u64) -> u64, !539 {
        entry(count: u64):
        v0 = const u64 8
        v1 = mul v0, count, !220
        br block0(v1), !220

        block0(v2: u64):
        v3 = asm(size: v2, ptr) -> u64 ptr, !223 {
            aloc   size, !225
            move   ptr hp, !226
        }
        ret u64 v3
    }

    pub fn read_15(self !540: u64) -> {  }, !541 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !256

        block0():
        v1 = asm(ptr: self) -> {  } ptr, !258 {
        }
        br block5(v1)

        block1():
        v2 = const u64 0
        v3 = const u64 1, !261
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !263

        block2():
        v5 = asm(ptr: self, val) -> {  } val, !265 {
            lb     val ptr i0, !267
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> {  } val, !269 {
            lw     val ptr i0, !271
        }
        br block4(v6)

        block4(v7: {  }):
        br block5(v7)

        block5(v8: {  }):
        ret {  } v8
    }

    pub fn add_16(self !542: u64, count !543: u64) -> u64, !544 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn slot_17(self !545: { b256, u64, b256 }) -> b256, !546 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !48
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_18(self !547: { b256, u64, b256 }) -> u64, !548 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !55
        v4 = load v3
        ret u64 v4
    }

    pub fn get_19(self !549: { b256, u64, b256 }, key !550: u64) -> { b256, u64, b256 }, !551 {
        local { u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_00
        local b256 key_

        entry(self: { b256, u64, b256 }, key: u64):
        v0 = ptr_to_int self to u64, !7
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }, !7
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !552
        v4 = load v3, !7
        br block0(v4), !7

        block0(v5: b256):
        v6 = get_local ptr { u64, b256 }, __anon_0, !15
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !15
        store key to v8, !15
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr b256, v9, !15
        store v5 to v10, !15
        v11 = load v6
        v12 = call sha256_20(v11), !22
        v13 = get_local ptr b256, key_, !24
        store v12 to v13, !24
        v14 = get_local ptr b256, key_, !27
        v15 = load v14
        v16 = get_local ptr b256, key_, !29
        v17 = load v16
        v18 = get_local ptr { b256, u64, b256 }, __anon_00, !553
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr b256, v19, !31
        store v15 to v20, !554
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21, !31
        v23 = const u64 0, !37
        store v23 to v22, !555
        v24 = const u64 2
        v25 = get_elem_ptr v18, ptr b256, v24, !31
        store v17 to v25, !556
        v26 = load v18, !31
        br block1(v26), !31

        block1(v27: { b256, u64, b256 }):
        ret { b256, u64, b256 } v27
    }

    pub fn sha256_20(s !558: { u64, b256 }) -> b256, !561 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !566
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !568
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !569
        store v0 to v3, !570
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !571
        v6 = const u64 0, !572
        store v6 to v5, !573
        v7 = load v1, !574
        br new_21_block0(v7), !575

        new_21_block0(v8: { { u64, u64 }, u64 }):
        v9 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !577
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { { u64, u64 }, u64 }, v10, !562
        store v8 to v11, !578
        v12 = load v9, !562
        br block0(v12), !562

        block0(v13: { { { u64, u64 }, u64 } }):
        v14 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !579
        store v13 to v14, !579
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !580
        v16 = call hash_25(s, v15), !581
        v17 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !582
        v18 = load v17
        v19 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !584
        br sha256_47_block0(v19), !587

        sha256_47_block0(v20: b256):
        v21 = get_local ptr b256, result_buffer, !589
        store v20 to v21, !590
        v22 = get_local ptr b256, result_buffer, !592
        v23 = ptr_to_int v18 to u64, !585
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !585
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !594
        v27 = load v26, !585
        v28 = call ptr_44(v27), !596
        v29 = ptr_to_int v18 to u64, !585
        v30 = int_to_ptr v29 to ptr { { { u64, u64 }, u64 } }, !585
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr { { u64, u64 }, u64 }, v31, !597
        v33 = load v32, !585
        v34 = call len_29(v33), !599
        v35 = asm(hash: v22, ptr: v28, bytes: v34) -> b256 hash, !601 {
            s256   hash ptr bytes, !602
        }
        br block1(v35), !585

        block1(v36: b256):
        ret b256 v36
    }

    pub fn new_21() -> { { { u64, u64 }, u64 } }, !603 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00

        entry():
        v0 = call new_23(), !604
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !605
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !563
        store v0 to v3, !606
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !563
        v6 = const u64 0, !572
        store v6 to v5, !607
        v7 = load v1, !563
        br block0(v7), !563

        block0(v8: { { u64, u64 }, u64 }):
        v9 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !576
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { { u64, u64 }, u64 }, v10
        store v8 to v11, !576
        v12 = load v9
        ret { { { u64, u64 }, u64 } } v12
    }

    pub fn new_22() -> { { u64, u64 }, u64 }, !608 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_23(), !565
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !567
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !567
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !572
        store v6 to v5, !567
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_23() -> { u64, u64 }, !609 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !610
        v1 = asm(size: v0, ptr) -> u64 ptr, !613 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br block0(v1), !611

        block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_0, !616
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4
        store v2 to v5, !616
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0, !617
        store v8 to v7, !616
        v9 = load v3
        ret { u64, u64 } v9
    }

    pub fn alloc_bytes_24(count !618: u64) -> u64, !619 {
        entry(count: u64):
        v0 = asm(size: count, ptr) -> u64 ptr, !612 {
            aloc   size, !614
            move   ptr hp, !615
        }
        ret u64 v0
    }

    pub fn hash_25(self !620: { u64, b256 }, state !621: ptr { { { u64, u64 }, u64 } }) -> (), !623 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 ptr0
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !624
        v4 = load v3
        v5 = const u64 8, !625
        v6 = asm(size: v5, ptr) -> u64 ptr, !628 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br hash_26_block0(v6), !629

        hash_26_block0(v7: u64):
        v8 = get_local ptr u64, ptr, !631
        v9 = get_local ptr u64, ptr, !633
        v10 = asm(ptr: v7, val: v4) {
            sw     ptr val i0, !634
        }
        v11 = get_local ptr u64, ptr, !636
        v12 = const u64 8, !637
        v13 = call from_parts_33(v7, v12), !639
        v14 = call from_45(v13), !641
        v15 = call write_27(state, v14), !643
        v16 = const unit ()
        br block0(v16), !626

        block0(v17: ()):
        v18 = ptr_to_int self to u64
        v19 = int_to_ptr v18 to ptr { u64, b256 }
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr b256, v20, !644
        v22 = load v21
        v23 = const u64 32, !645
        v24 = asm(size: v23, ptr) -> u64 ptr, !648 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br hash_46_block0(v24), !649

        hash_46_block0(v25: u64):
        v26 = get_local ptr u64, ptr0, !651
        v27 = asm(r1: v22) -> { u64, u64, u64, u64 } r1, !653 {
        }
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !655
        store v27 to v28, !656
        v29 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !657
        v30 = load v29, !646
        v31 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !658
        store v30 to v31, !659
        v32 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !660
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !661
        v35 = load v34, !646
        v36 = get_local ptr u64, word_1, !662
        v37 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !663
        v38 = const u64 1
        v39 = get_elem_ptr v37, ptr u64, v38, !664
        v40 = load v39, !646
        v41 = get_local ptr u64, word_2, !665
        v42 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !666
        v43 = const u64 2
        v44 = get_elem_ptr v42, ptr u64, v43, !667
        v45 = load v44, !646
        v46 = get_local ptr u64, word_3, !668
        v47 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !669
        v48 = const u64 3
        v49 = get_elem_ptr v47, ptr u64, v48, !670
        v50 = load v49, !646
        v51 = get_local ptr u64, word_4, !671
        v52 = get_local ptr u64, ptr0, !673
        v53 = get_local ptr u64, word_1, !675
        v54 = get_local ptr u64, word_2, !677
        v55 = get_local ptr u64, word_3, !679
        v56 = get_local ptr u64, word_4, !681
        v57 = asm(ptr: v25, val_1: v35, val_2: v40, val_3: v45, val_4: v50) {
            sw     ptr val_1 i0, !682
            sw     ptr val_2 i1, !683
            sw     ptr val_3 i2, !684
            sw     ptr val_4 i3, !685
        }
        v58 = get_local ptr u64, ptr0, !687
        v59 = const u64 32, !688
        v60 = call from_parts_33(v25, v59), !690
        v61 = call from_45(v60), !692
        v62 = call write_27(state, v61), !694
        v63 = const unit ()
        br block1(v63), !646

        block1(v64: ()):
        v65 = const unit ()
        ret () v65
    }

    pub fn hash_26(self !695: u64, state !696: ptr { { { u64, u64 }, u64 } }) -> (), !697 {
        local u64 ptr

        entry(self: u64, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 8, !625
        v1 = asm(size: v0, ptr) -> u64 ptr, !698 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br block0(v1), !627

        block0(v2: u64):
        v3 = get_local ptr u64, ptr, !630
        v4 = get_local ptr u64, ptr, !632
        v5 = asm(ptr: v2, val: self) {
            sw     ptr val i0, !634
        }
        v6 = get_local ptr u64, ptr, !635
        v7 = const u64 8, !637
        v8 = call from_parts_33(v2, v7), !638
        v9 = call from_45(v8), !640
        v10 = call write_27(state, v9), !642
        v11 = const unit ()
        ret () v11
    }

    pub fn write_27(self !699: ptr { { { u64, u64 }, u64 } }, bytes !700: { { u64, u64 }, u64 }) -> (), !701 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !593
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !702
        v5 = call len_29(v4), !704
        v6 = get_local ptr u64, other_len, !706
        v7 = get_local ptr u64, other_len, !708
        v8 = const u64 0, !709
        v9 = cmp eq v5 v8, !711
        br append_28_block9(v9), !712

        append_28_block9(v10: bool):
        cbr v10, append_28_block0(), append_28_block1(), !713

        append_28_block0():
        v11 = const unit (), !714
        br block0(v11), !715

        append_28_block1():
        v12 = const unit ()
        br append_28_block2(v12), !702

        append_28_block2(v13: ()):
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v14, !717
        v16 = load v15, !702
        v17 = const u64 0, !718
        v18 = cmp eq v16 v17, !720
        br append_28_block10(v18), !721

        append_28_block10(v19: bool):
        cbr v19, append_28_block3(), append_28_block4(), !722

        append_28_block3():
        v20 = load v3, !702
        store v20 to v1, !724
        v21 = call clear_30(v3), !726
        v22 = const unit (), !727
        br block0(v22), !728

        append_28_block4():
        v23 = const unit ()
        br append_28_block5(v23), !702

        append_28_block5(v24: ()):
        v25 = const u64 1
        v26 = get_elem_ptr v1, ptr u64, v25, !729
        v27 = load v26, !702
        v28 = get_local ptr u64, other_len, !731
        v29 = add v27, v5, !733
        br append_28_block11(v29), !734

        append_28_block11(v30: u64):
        v31 = get_local ptr u64, both_len, !736
        v32 = const u64 1
        v33 = get_elem_ptr v1, ptr u64, v32, !737
        v34 = load v33, !702
        v35 = get_local ptr u64, other_start, !739
        v36 = const u64 0
        v37 = get_elem_ptr v1, ptr { u64, u64 }, v36, !741
        v38 = load v37, !702
        v39 = call capacity_32(v38), !743
        v40 = get_local ptr u64, both_len, !745
        v41 = cmp lt v39 v30, !747
        br append_28_block12(v41), !748

        append_28_block12(v42: bool):
        cbr v42, append_28_block6(), append_28_block7(), !749

        append_28_block6():
        v43 = const u64 0
        v44 = get_elem_ptr v1, ptr { u64, u64 }, v43, !750
        v45 = load v44, !702
        v46 = call ptr_38(v45), !752
        v47 = const u64 0
        v48 = get_elem_ptr v1, ptr { u64, u64 }, v47, !753
        v49 = load v48, !702
        v50 = call capacity_32(v49), !755
        v51 = get_local ptr u64, both_len, !757
        v52 = cmp gt v30 v50, !760
        br append_28_realloc_bytes_35_block6(v52), !761

        append_28_realloc_bytes_35_block6(v53: bool):
        cbr v53, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block4(), !762

        append_28_realloc_bytes_35_block0():
        v54 = asm(size: v30, ptr) -> u64 ptr, !764 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br append_28_realloc_bytes_35_block7(v54), !765

        append_28_realloc_bytes_35_block7(v55: u64):
        v56 = get_local ptr u64, new_ptr0, !767
        v57 = const u64 0, !768
        v58 = cmp gt v50 v57, !770
        br append_28_realloc_bytes_35_block8(v58), !771

        append_28_realloc_bytes_35_block8(v59: bool):
        cbr v59, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block2(), !772

        append_28_realloc_bytes_35_block1():
        v60 = get_local ptr u64, new_ptr0, !774
        v61 = asm(dst: v55, src: v46, len: v50) {
            mcp    dst src len, !775
        }
        v62 = const unit ()
        br append_28_realloc_bytes_35_block9(v62), !777

        append_28_realloc_bytes_35_block9(v63: ()):
        v64 = const unit ()
        br append_28_realloc_bytes_35_block3(v64), !778

        append_28_realloc_bytes_35_block2():
        v65 = const unit ()
        br append_28_realloc_bytes_35_block3(v65), !779

        append_28_realloc_bytes_35_block3(v66: ()):
        v67 = get_local ptr u64, new_ptr0, !781
        br append_28_realloc_bytes_35_block5(v55), !782

        append_28_realloc_bytes_35_block4():
        br append_28_realloc_bytes_35_block5(v46), !783

        append_28_realloc_bytes_35_block5(v68: u64):
        br append_28_block13(v68), !784

        append_28_block13(v69: u64):
        v70 = get_local ptr u64, both_len, !786
        v71 = call from_parts_33(v69, v30), !788
        v72 = get_local ptr slice, new_slice, !790
        store v71 to v72, !791
        v73 = get_local ptr slice, new_slice, !793
        v74 = load v73, !702
        v75 = call from_39(v74), !795
        v76 = const u64 0
        v77 = get_elem_ptr v1, ptr { u64, u64 }, v76, !797
        store v75 to v77, !798
        v78 = const unit ()
        br append_28_block8(v78), !702

        append_28_block7():
        v79 = const unit ()
        br append_28_block8(v79), !702

        append_28_block8(v80: ()):
        v81 = const u64 0
        v82 = get_elem_ptr v1, ptr { u64, u64 }, v81, !799
        v83 = load v82, !702
        v84 = call ptr_38(v83), !801
        v85 = get_local ptr u64, other_start, !803
        v86 = asm(ptr: v84, offset: v34, new) -> u64 new, !806 {
            add    new ptr offset, !807
        }
        br append_28_block14(v86), !808

        append_28_block14(v87: u64):
        v88 = get_local ptr u64, new_ptr, !810
        v89 = load v3, !702
        v90 = call ptr_44(v89), !812
        v91 = get_local ptr u64, new_ptr, !814
        v92 = get_local ptr u64, other_len, !816
        v93 = asm(dst: v87, src: v90, len: v5) {
            mcp    dst src len, !775
        }
        br append_28_block15(v62), !818

        append_28_block15(v94: ()):
        v95 = get_local ptr u64, both_len, !820
        v96 = const u64 1
        v97 = get_elem_ptr v1, ptr u64, v96, !822
        store v30 to v97, !823
        v98 = call clear_30(v3), !825
        v99 = const unit ()
        br block0(v99), !702

        block0(v100: ()):
        v101 = const unit ()
        ret () v101
    }

    pub fn append_28(self !826: ptr { { u64, u64 }, u64 }, other !827: ptr { { u64, u64 }, u64 }) -> (), !828 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_29(v0), !703
        v2 = get_local ptr u64, other_len, !705
        v3 = get_local ptr u64, other_len, !707
        v4 = const u64 0, !709
        v5 = cmp eq v1 v4, !710
        br block9(v5), !710

        block9(v6: bool):
        cbr v6, block0(), block1(), !710

        block0():
        v7 = const unit (), !714
        ret () v7, !714

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !716
        v12 = load v11
        v13 = const u64 0, !718
        v14 = cmp eq v12 v13, !719
        br block10(v14), !719

        block10(v15: bool):
        cbr v15, block3(), block4(), !719

        block3():
        v16 = load other
        store v16 to self, !723
        v17 = call clear_30(other), !725
        v18 = const unit (), !727
        ret () v18, !727

        block4():
        v19 = const unit ()
        br block5(v19)

        block5(v20: ()):
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !716
        v23 = load v22
        v24 = get_local ptr u64, other_len, !730
        v25 = add v23, v1, !732
        br block11(v25), !732

        block11(v26: u64):
        v27 = get_local ptr u64, both_len, !735
        v28 = const u64 1
        v29 = get_elem_ptr self, ptr u64, v28, !716
        v30 = load v29
        v31 = get_local ptr u64, other_start, !738
        v32 = const u64 0
        v33 = get_elem_ptr self, ptr { u64, u64 }, v32, !740
        v34 = load v33
        v35 = call capacity_32(v34), !742
        v36 = get_local ptr u64, both_len, !744
        v37 = cmp lt v35 v26, !746
        br block12(v37), !746

        block12(v38: bool):
        cbr v38, block6(), block7(), !746

        block6():
        v39 = const u64 0
        v40 = get_elem_ptr self, ptr { u64, u64 }, v39, !740
        v41 = load v40
        v42 = call ptr_38(v41), !751
        v43 = const u64 0
        v44 = get_elem_ptr self, ptr { u64, u64 }, v43, !740
        v45 = load v44
        v46 = call capacity_32(v45), !754
        v47 = get_local ptr u64, both_len, !756
        v48 = cmp gt v26 v46, !829
        br realloc_bytes_35_block6(v48), !830

        realloc_bytes_35_block6(v49: bool):
        cbr v49, realloc_bytes_35_block0(), realloc_bytes_35_block4(), !831

        realloc_bytes_35_block0():
        v50 = asm(size: v26, ptr) -> u64 ptr, !832 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br realloc_bytes_35_block7(v50), !833

        realloc_bytes_35_block7(v51: u64):
        v52 = get_local ptr u64, new_ptr0, !834
        v53 = const u64 0, !768
        v54 = cmp gt v46 v53, !835
        br realloc_bytes_35_block8(v54), !836

        realloc_bytes_35_block8(v55: bool):
        cbr v55, realloc_bytes_35_block1(), realloc_bytes_35_block2(), !837

        realloc_bytes_35_block1():
        v56 = get_local ptr u64, new_ptr0, !838
        v57 = asm(dst: v51, src: v42, len: v46) {
            mcp    dst src len, !775
        }
        v58 = const unit ()
        br realloc_bytes_35_block9(v58), !839

        realloc_bytes_35_block9(v59: ()):
        v60 = const unit ()
        br realloc_bytes_35_block3(v60), !758

        realloc_bytes_35_block2():
        v61 = const unit ()
        br realloc_bytes_35_block3(v61), !758

        realloc_bytes_35_block3(v62: ()):
        v63 = get_local ptr u64, new_ptr0, !840
        br realloc_bytes_35_block5(v51), !758

        realloc_bytes_35_block4():
        br realloc_bytes_35_block5(v42), !758

        realloc_bytes_35_block5(v64: u64):
        br block13(v64), !758

        block13(v65: u64):
        v66 = get_local ptr u64, both_len, !785
        v67 = call from_parts_33(v65, v26), !787
        v68 = get_local ptr slice, new_slice, !789
        store v67 to v68, !789
        v69 = get_local ptr slice, new_slice, !792
        v70 = load v69
        v71 = call from_39(v70), !794
        v72 = const u64 0
        v73 = get_elem_ptr self, ptr { u64, u64 }, v72, !796
        store v71 to v73, !796
        v74 = const unit ()
        br block8(v74)

        block7():
        v75 = const unit ()
        br block8(v75)

        block8(v76: ()):
        v77 = const u64 0
        v78 = get_elem_ptr self, ptr { u64, u64 }, v77, !740
        v79 = load v78
        v80 = call ptr_38(v79), !800
        v81 = get_local ptr u64, other_start, !802
        v82 = asm(ptr: v80, offset: v30, new) -> u64 new, !841 {
            add    new ptr offset, !807
        }
        br block14(v82), !804

        block14(v83: u64):
        v84 = get_local ptr u64, new_ptr, !809
        v85 = load other
        v86 = call ptr_44(v85), !811
        v87 = get_local ptr u64, new_ptr, !813
        v88 = get_local ptr u64, other_len, !815
        v89 = asm(dst: v83, src: v86, len: v1) {
            mcp    dst src len, !775
        }
        br block15(v58), !817

        block15(v90: ()):
        v91 = get_local ptr u64, both_len, !819
        v92 = const u64 1
        v93 = get_elem_ptr self, ptr u64, v92, !821
        store v26 to v93, !821
        v94 = call clear_30(other), !824
        v95 = const unit ()
        ret () v95
    }

    pub fn len_29(self !842: { { u64, u64 }, u64 }) -> u64, !843 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !716
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !844: ptr { { u64, u64 }, u64 }) -> (), !845 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !846
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !847
        store v0 to v2, !847
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !848
        v5 = const u64 0, !849
        store v5 to v4, !848
        v6 = const unit ()
        ret () v6
    }

    pub fn lt_31(self !850: u64, other !851: u64) -> bool, !852 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_32(self !853: { u64, u64 }) -> u64, !854 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !855
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !857: u64, count !858: u64) -> slice, !859 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !860
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !860
        store ptr to v4, !860
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !860
        store v1 to v6, !860
        v7 = load v2
        v8 = asm(ptr: v7) -> slice ptr, !863 {
        }
        br block0(v8), !861

        block0(v9: slice):
        ret slice v9
    }

    fn from_parts_34(parts !864: { u64, u64 }) -> slice, !865 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !862 {
        }
        ret slice v0
    }

    pub fn realloc_bytes_35(ptr !866: u64, count !867: u64, new_count !868: u64) -> u64, !869 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = cmp gt new_count count, !759
        br block6(v0), !759

        block6(v1: bool):
        cbr v1, block0(), block4(), !759

        block0():
        v2 = asm(size: new_count, ptr) -> u64 ptr, !870 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br block7(v2), !763

        block7(v3: u64):
        v4 = get_local ptr u64, new_ptr, !766
        v5 = const u64 0, !768
        v6 = cmp gt count v5, !769
        br block8(v6), !769

        block8(v7: bool):
        cbr v7, block1(), block2(), !769

        block1():
        v8 = get_local ptr u64, new_ptr, !773
        v9 = asm(dst: v3, src: ptr, len: count) {
            mcp    dst src len, !775
        }
        v10 = const unit ()
        br block9(v10), !776

        block9(v11: ()):
        v12 = const unit ()
        br block3(v12)

        block2():
        v13 = const unit ()
        br block3(v13)

        block3(v14: ()):
        v15 = get_local ptr u64, new_ptr, !780
        br block5(v3)

        block4():
        br block5(ptr)

        block5(v16: u64):
        ret u64 v16
    }

    pub fn gt_36(self !871: u64, other !872: u64) -> bool, !873 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn copy_bytes_to_37(self !874: u64, dst !875: u64, count !876: u64) -> (), !877 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) {
            mcp    dst src len, !775
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn ptr_38(self !878: { u64, u64 }) -> u64, !879 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !880
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !881: slice) -> { u64, u64 }, !882 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !886 {
        }
        br ptr_40_block0(v0), !887

        ptr_40_block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_00, !883
        store v1 to v2, !883
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !889
        v5 = load v4, !883
        br block0(v5), !883

        block0(v6: u64):
        v7 = call number_of_bytes_42(slice), !890
        v8 = get_local ptr { u64, u64 }, __anon_0, !891
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v6 to v10, !891
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        store v7 to v12, !891
        v13 = load v8
        ret { u64, u64 } v13
    }

    pub fn ptr_40(self !892: slice) -> u64, !893 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !894 {
        }
        br block0(v0), !884

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !888
        v5 = load v4
        ret u64 v5
    }

    fn into_parts_41(slice !895: slice) -> { u64, u64 }, !896 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !885 {
        }
        ret { u64, u64 } v0
    }

    pub fn number_of_bytes_42(self !897: slice) -> u64, !898 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !900 {
        }
        br block0(v0), !899

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !901
        v5 = load v4
        ret u64 v5
    }

    pub fn add_uint_offset_43(self !902: u64, offset !903: u64) -> u64, !904 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !805 {
            add    new ptr offset, !807
        }
        ret u64 v0
    }

    pub fn ptr_44(self !905: { { u64, u64 }, u64 }) -> u64, !906 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !740
        v4 = load v3
        v5 = call ptr_38(v4), !907
        ret u64 v5
    }

    pub fn from_45(slice !908: slice) -> { { u64, u64 }, u64 }, !909 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !910
        v1 = call number_of_bytes_42(slice), !911
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !912
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !912
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !912
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn hash_46(self !913: b256, state !914: ptr { { { u64, u64 }, u64 } }) -> (), !915 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: b256, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 32, !645
        v1 = asm(size: v0, ptr) -> u64 ptr, !916 {
            aloc   size, !614
            move   ptr hp, !615
        }
        br block0(v1), !647

        block0(v2: u64):
        v3 = get_local ptr u64, ptr, !650
        v4 = asm(r1: self) -> { u64, u64, u64, u64 } r1, !652 {
        }
        v5 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !654
        store v4 to v5, !654
        v6 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !654
        v7 = load v6
        v8 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !654
        store v7 to v8, !654
        v9 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !654
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !654
        v12 = load v11
        v13 = get_local ptr u64, word_1, !654
        v14 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !654
        v15 = const u64 1
        v16 = get_elem_ptr v14, ptr u64, v15, !654
        v17 = load v16
        v18 = get_local ptr u64, word_2, !654
        v19 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !654
        v20 = const u64 2
        v21 = get_elem_ptr v19, ptr u64, v20, !654
        v22 = load v21
        v23 = get_local ptr u64, word_3, !654
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !654
        v25 = const u64 3
        v26 = get_elem_ptr v24, ptr u64, v25, !654
        v27 = load v26
        v28 = get_local ptr u64, word_4, !654
        v29 = get_local ptr u64, ptr, !672
        v30 = get_local ptr u64, word_1, !674
        v31 = get_local ptr u64, word_2, !676
        v32 = get_local ptr u64, word_3, !678
        v33 = get_local ptr u64, word_4, !680
        v34 = asm(ptr: v2, val_1: v12, val_2: v17, val_3: v22, val_4: v27) {
            sw     ptr val_1 i0, !682
            sw     ptr val_2 i1, !683
            sw     ptr val_3 i2, !684
            sw     ptr val_4 i3, !685
        }
        v35 = get_local ptr u64, ptr, !686
        v36 = const u64 32, !688
        v37 = call from_parts_33(v2, v36), !689
        v38 = call from_45(v37), !691
        v39 = call write_27(state, v38), !693
        v40 = const unit ()
        ret () v40
    }

    pub fn sha256_47(self !917: { { { u64, u64 }, u64 } }) -> b256, !918 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !584
        br block0(v0), !586

        block0(v1: b256):
        v2 = get_local ptr b256, result_buffer, !588
        store v1 to v2, !588
        v3 = get_local ptr b256, result_buffer, !591
        v4 = ptr_to_int self to u64
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !593
        v8 = load v7
        v9 = call ptr_44(v8), !595
        v10 = ptr_to_int self to u64
        v11 = int_to_ptr v10 to ptr { { { u64, u64 }, u64 } }
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { { u64, u64 }, u64 }, v12, !593
        v14 = load v13
        v15 = call len_29(v14), !598
        v16 = asm(hash: v3, ptr: v9, bytes: v15) -> b256 hash, !600 {
            s256   hash ptr bytes, !602
        }
        ret b256 v16
    }

    pub fn min_48() -> b256, !919 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !584
        ret b256 v0
    }

    pub fn field_id_49(self !920: { b256, u64, b256 }) -> b256, !921 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !11
        v4 = load v3
        ret b256 v4
    }

    pub fn new_50(slot !922: b256, offset !923: u64, field_id !924: b256) -> { b256, u64, b256 }, !925 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !32
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !32
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !32
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !32
        v7 = load v0
        ret { b256, u64, b256 } v7
    }
}

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { b256, u64, b256 } __anon_000
        local { b256, u64, u64 } __anon_001
        local { u64, ( () | {  } ) } __anon_01
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        v16 = get_local ptr { u64, b256 }, __anon_00, !15
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !16
        v19 = const u64 1, !17
        store v19 to v18, !18
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr b256, v20, !19
        store v15 to v21, !20
        v22 = load v16, !5
        v23 = call sha256_20(v22), !22
        v24 = get_local ptr b256, key_, !24
        store v23 to v24, !25
        v25 = get_local ptr b256, key_, !27
        v26 = load v25, !5
        v27 = get_local ptr b256, key_, !29
        v28 = load v27, !5
        v29 = get_local ptr { b256, u64, b256 }, __anon_000, !32
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30, !33
        store v26 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32, !35
        v34 = const u64 0, !36
        store v34 to v33, !37
        v35 = const u64 2
        v36 = get_elem_ptr v29, ptr b256, v35, !38
        store v28 to v36, !39
        v37 = load v29, !40
        v38 = ptr_to_int v37 to u64, !44
        v39 = int_to_ptr v38 to ptr { b256, u64, b256 }, !45
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr b256, v40, !47
        v42 = load v41, !48
        v43 = ptr_to_int v37 to u64, !50
        v44 = int_to_ptr v43 to ptr { b256, u64, b256 }, !51
        v45 = const u64 1
        v46 = get_elem_ptr v44, ptr u64, v45, !53
        v47 = load v46, !54
        v48 = const u64 0
        v49 = const u64 0, !56
        v50 = cmp eq v48 v49, !59
        cbr v50, try_read_0_read_1_block0(), try_read_0_read_1_block1(), !60

        try_read_0_read_1_block0():
        v51 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !63
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !64
        v54 = const u64 0, !62
        store v54 to v53, !65
        v55 = load v51, !66
        br try_read_0_block2(v55), !68

        try_read_0_read_1_block1():
        v56 = get_local ptr u64, size_of_t, !71
        v57 = const u64 8, !72
        v58 = mul v47, v57, !74
        v59 = get_local ptr u64, size_of_t, !76
        v60 = const u64 0
        v61 = add v58, v60, !78
        v62 = const u64 31, !79
        v63 = add v61, v62, !81
        v64 = const u64 5, !82
        v65 = rsh v63, v64, !84
        v66 = get_local ptr u64, last_slot, !86
        v67 = const u64 4, !87
        v68 = mod v47, v67, !89
        v69 = get_local ptr u64, place_in_slot0, !91
        v70 = get_local ptr bool, __matched_value_1, !93
        v71 = get_local ptr bool, __matched_value_1, !95
        v72 = const bool true
        v73 = const bool true, !96
        v74 = cmp eq v72 v73, !98
        cbr v74, try_read_0_read_1_slot_calculator_3_block0(), try_read_0_read_1_slot_calculator_3_block1(), !99

        try_read_0_read_1_slot_calculator_3_block0():
        v75 = get_local ptr u64, place_in_slot0, !101
        v76 = const u64 8, !102
        v77 = mul v68, v76, !104
        v78 = get_local ptr u64, size_of_t, !106
        v79 = add v77, v60, !108
        v80 = const u64 31, !109
        v81 = add v79, v80, !111
        v82 = const u64 5, !112
        v83 = rsh v81, v82, !114
        br try_read_0_read_1_slot_calculator_3_block5(v83), !115

        try_read_0_read_1_slot_calculator_3_block1():
        v84 = get_local ptr bool, __matched_value_1, !116
        v85 = const bool false, !117
        v86 = cmp eq v72 v85, !119
        v87 = const u64 1, !120
        cbr v86, try_read_0_read_1_slot_calculator_3_block5(v87), try_read_0_read_1_slot_calculator_3_block3(), !121

        try_read_0_read_1_slot_calculator_3_block3():
        v88 = const u64 14757395258967588866, !92
        revert v88, !122

        try_read_0_read_1_slot_calculator_3_block5(v89: u64):
        v90 = get_local ptr u64, number_of_slots0, !124
        v91 = asm(input: v42) -> u256 input, !128 {
        }
        v92 = get_local ptr u256, offset_slot0, !130
        store v91 to v92, !131
        v93 = get_local ptr u256, offset_slot0, !133
        v94 = load v93, !134
        v95 = get_local ptr u64, last_slot, !136
        v96 = call as_u256_12(v65), !138
        v97 = get_local ptr u64, number_of_slots0, !140
        v98 = call as_u256_12(v89), !142
        v99 = sub v96, v98, !144
        v100 = add v94, v99, !146
        v101 = get_local ptr u256, offset_slot0, !147
        store v100 to v101, !148
        v102 = get_local ptr u256, offset_slot0, !150
        v103 = load v102, !151
        v104 = asm(input: v103) -> b256 input, !154 {
        }
        v105 = get_local ptr u64, number_of_slots0, !156
        v106 = get_local ptr u64, place_in_slot0, !158
        v107 = get_local ptr { b256, u64, u64 }, __anon_001, !160
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr b256, v108, !161
        store v104 to v109, !162
        v110 = const u64 1
        v111 = get_elem_ptr v107, ptr u64, v110, !163
        store v89 to v111, !164
        v112 = const u64 2
        v113 = get_elem_ptr v107, ptr u64, v112, !165
        store v68 to v113, !166
        v114 = load v107, !167
        v115 = get_local ptr { b256, u64, u64 }, __tuple_2, !169
        store v114 to v115, !170
        v116 = get_local ptr { b256, u64, u64 }, __tuple_2, !171
        v117 = load v116, !172
        v118 = get_local ptr { b256, u64, u64 }, __tuple_2_, !173
        store v117 to v118, !174
        v119 = get_local ptr { b256, u64, u64 }, __tuple_2_, !175
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr b256, v120, !176
        v122 = load v121, !177
        v123 = get_local ptr b256, offset_slot, !178
        store v122 to v123, !179
        v124 = get_local ptr { b256, u64, u64 }, __tuple_2_, !180
        v125 = const u64 1
        v126 = get_elem_ptr v124, ptr u64, v125, !181
        v127 = load v126, !182
        v128 = get_local ptr u64, number_of_slots, !183
        v129 = get_local ptr { b256, u64, u64 }, __tuple_2_, !184
        v130 = const u64 2
        v131 = get_elem_ptr v129, ptr u64, v130, !185
        v132 = load v131, !186
        v133 = get_local ptr u64, place_in_slot, !187
        v134 = get_local ptr u64, number_of_slots, !189
        v135 = const u64 32, !190
        v136 = mul v127, v135, !192
        v137 = const u64 8
        v138 = mul v137, v136, !196
        v139 = asm(size: v138, ptr) -> u64 ptr, !198 {
            aloc   size, !199
            move   ptr hp, !200
        }
        v140 = get_local ptr u64, result_ptr, !202
        v141 = get_local ptr b256, offset_slot, !204
        v142 = load v141, !205
        v143 = get_local ptr u64, result_ptr, !207
        v144 = get_local ptr u64, number_of_slots, !209
        v145 = get_local ptr b256, key_for_storage, !211
        store v142 to v145, !212
        v146 = int_to_ptr v139 to ptr b256, !213
        v147 = state_load_quad_word v146, key v145, v127, !214
        cbr v147, try_read_0_read_1_block3(), try_read_0_read_1_block4(), !215

        try_read_0_read_1_block3():
        v148 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !216
        v149 = const u64 0
        v150 = get_elem_ptr v148, ptr u64, v149, !217
        v151 = const u64 1, !62
        store v151 to v150, !218
        v152 = get_local ptr u64, result_ptr, !220
        v153 = get_local ptr u64, place_in_slot, !222
        v154 = const u64 8
        v155 = mul v154, v132, !224
        v156 = add v139, v155, !225
        v157 = const bool true
        cbr v157, try_read_0_read_1_read_15_block0(), try_read_0_read_1_read_15_block1(), !229

        try_read_0_read_1_read_15_block0():
        v158 = asm(ptr: v156) -> {  } ptr, !231 {
        }
        br try_read_0_read_1_read_15_block5(v158), !232

        try_read_0_read_1_read_15_block1():
        v159 = const u64 0
        v160 = const u64 1, !233
        v161 = cmp eq v159 v160, !234
        cbr v161, try_read_0_read_1_read_15_block2(), try_read_0_read_1_read_15_block3(), !236

        try_read_0_read_1_read_15_block2():
        v162 = asm(ptr: v156, val) -> {  } val, !238 {
            lb     val ptr i0, !239
        }
        br try_read_0_read_1_read_15_block4(v162), !240

        try_read_0_read_1_read_15_block3():
        v163 = asm(ptr: v156, val) -> {  } val, !242 {
            lw     val ptr i0, !243
        }
        br try_read_0_read_1_read_15_block4(v163), !244

        try_read_0_read_1_read_15_block4(v164: {  }):
        br try_read_0_read_1_read_15_block5(v164), !245

        try_read_0_read_1_read_15_block5(v165: {  }):
        v166 = const u64 1
        v167 = const u64 1
        v168 = get_elem_ptr v148, ptr {  }, v166, v167, !246
        store v165 to v168, !247
        v169 = load v148, !248
        br try_read_0_read_1_block5(v169), !249

        try_read_0_read_1_block4():
        v170 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !250
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !251
        v173 = const u64 0, !62
        store v173 to v172, !252
        v174 = load v170, !253
        br try_read_0_read_1_block5(v174), !254

        try_read_0_read_1_block5(v175: { u64, ( () | {  } ) }):
        br try_read_0_block2(v175), !255

        try_read_0_block2(v176: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v176
    }

    pub fn try_read_0(self !256: { b256, u64, b256 }) -> { u64, ( () | {  } ) }, !258 {
        local { u64, ( () | {  } ) } __anon_0
        local { b256, u64, u64 } __anon_00
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64, !43
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }, !43
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !259
        v4 = load v3, !43
        v5 = ptr_to_int self to u64, !49
        v6 = int_to_ptr v5 to ptr { b256, u64, b256 }, !49
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7, !260
        v9 = load v8, !49
        v10 = const u64 0
        v11 = const u64 0, !56
        v12 = cmp eq v10 v11, !261
        cbr v12, read_1_block0(), read_1_block1(), !262

        read_1_block0():
        v13 = get_local ptr { u64, ( () | {  } ) }, __anon_0, !263
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !264
        v16 = const u64 0, !62
        store v16 to v15, !265
        v17 = load v13, !57
        br block2(v17), !266

        read_1_block1():
        v18 = get_local ptr u64, size_of_t, !267
        v19 = const u64 8, !72
        v20 = mul v9, v19, !268
        v21 = get_local ptr u64, size_of_t, !269
        v22 = const u64 0
        v23 = add v20, v22, !270
        v24 = const u64 31, !79
        v25 = add v23, v24, !271
        v26 = const u64 5, !82
        v27 = rsh v25, v26, !272
        v28 = get_local ptr u64, last_slot, !273
        v29 = const u64 4, !87
        v30 = mod v9, v29, !274
        v31 = get_local ptr u64, place_in_slot0, !275
        v32 = get_local ptr bool, __matched_value_1, !276
        v33 = get_local ptr bool, __matched_value_1, !277
        v34 = const bool true
        v35 = const bool true, !96
        v36 = cmp eq v34 v35, !278
        cbr v36, read_1_slot_calculator_3_block0(), read_1_slot_calculator_3_block1(), !279

        read_1_slot_calculator_3_block0():
        v37 = get_local ptr u64, place_in_slot0, !280
        v38 = const u64 8, !102
        v39 = mul v30, v38, !281
        v40 = get_local ptr u64, size_of_t, !282
        v41 = add v39, v22, !283
        v42 = const u64 31, !109
        v43 = add v41, v42, !284
        v44 = const u64 5, !112
        v45 = rsh v43, v44, !285
        br read_1_slot_calculator_3_block5(v45), !286

        read_1_slot_calculator_3_block1():
        v46 = get_local ptr bool, __matched_value_1, !287
        v47 = const bool false, !117
        v48 = cmp eq v34 v47, !288
        v49 = const u64 1, !120
        cbr v48, read_1_slot_calculator_3_block5(v49), read_1_slot_calculator_3_block3(), !289

        read_1_slot_calculator_3_block3():
        v50 = const u64 14757395258967588866, !92
        revert v50, !290

        read_1_slot_calculator_3_block5(v51: u64):
        v52 = get_local ptr u64, number_of_slots0, !291
        v53 = asm(input: v4) -> u256 input, !292 {
        }
        v54 = get_local ptr u256, offset_slot0, !293
        store v53 to v54, !294
        v55 = get_local ptr u256, offset_slot0, !295
        v56 = load v55, !296
        v57 = get_local ptr u64, last_slot, !297
        v58 = call as_u256_12(v27), !298
        v59 = get_local ptr u64, number_of_slots0, !299
        v60 = call as_u256_12(v51), !300
        v61 = sub v58, v60, !301
        v62 = add v56, v61, !302
        v63 = get_local ptr u256, offset_slot0, !303
        store v62 to v63, !304
        v64 = get_local ptr u256, offset_slot0, !305
        v65 = load v64, !306
        v66 = asm(input: v65) -> b256 input, !307 {
        }
        v67 = get_local ptr u64, number_of_slots0, !308
        v68 = get_local ptr u64, place_in_slot0, !309
        v69 = get_local ptr { b256, u64, u64 }, __anon_00, !310
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr b256, v70, !311
        store v66 to v71, !312
        v72 = const u64 1
        v73 = get_elem_ptr v69, ptr u64, v72, !313
        store v51 to v73, !314
        v74 = const u64 2
        v75 = get_elem_ptr v69, ptr u64, v74, !315
        store v30 to v75, !316
        v76 = load v69, !317
        v77 = get_local ptr { b256, u64, u64 }, __tuple_2, !318
        store v76 to v77, !319
        v78 = get_local ptr { b256, u64, u64 }, __tuple_2, !320
        v79 = load v78, !57
        v80 = get_local ptr { b256, u64, u64 }, __tuple_2_, !321
        store v79 to v80, !322
        v81 = get_local ptr { b256, u64, u64 }, __tuple_2_, !323
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr b256, v82, !324
        v84 = load v83, !57
        v85 = get_local ptr b256, offset_slot, !325
        store v84 to v85, !326
        v86 = get_local ptr { b256, u64, u64 }, __tuple_2_, !327
        v87 = const u64 1
        v88 = get_elem_ptr v86, ptr u64, v87, !328
        v89 = load v88, !57
        v90 = get_local ptr u64, number_of_slots, !329
        v91 = get_local ptr { b256, u64, u64 }, __tuple_2_, !330
        v92 = const u64 2
        v93 = get_elem_ptr v91, ptr u64, v92, !331
        v94 = load v93, !57
        v95 = get_local ptr u64, place_in_slot, !332
        v96 = get_local ptr u64, number_of_slots, !333
        v97 = const u64 32, !190
        v98 = mul v89, v97, !334
        v99 = const u64 8
        v100 = mul v99, v98, !335
        v101 = asm(size: v100, ptr) -> u64 ptr, !336 {
            aloc   size, !199
            move   ptr hp, !200
        }
        v102 = get_local ptr u64, result_ptr, !337
        v103 = get_local ptr b256, offset_slot, !338
        v104 = load v103, !57
        v105 = get_local ptr u64, result_ptr, !339
        v106 = get_local ptr u64, number_of_slots, !340
        v107 = get_local ptr b256, key_for_storage, !341
        store v104 to v107, !342
        v108 = int_to_ptr v101 to ptr b256, !343
        v109 = state_load_quad_word v108, key v107, v89, !344
        cbr v109, read_1_block3(), read_1_block4(), !345

        read_1_block3():
        v110 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !346
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr u64, v111, !347
        v113 = const u64 1, !62
        store v113 to v112, !348
        v114 = get_local ptr u64, result_ptr, !349
        v115 = get_local ptr u64, place_in_slot, !350
        v116 = const u64 8
        v117 = mul v116, v94, !351
        v118 = add v101, v117, !352
        v119 = const bool true
        cbr v119, read_1_read_15_block0(), read_1_read_15_block1(), !353

        read_1_read_15_block0():
        v120 = asm(ptr: v118) -> {  } ptr, !354 {
        }
        br read_1_read_15_block5(v120), !355

        read_1_read_15_block1():
        v121 = const u64 0
        v122 = const u64 1, !233
        v123 = cmp eq v121 v122, !356
        cbr v123, read_1_read_15_block2(), read_1_read_15_block3(), !357

        read_1_read_15_block2():
        v124 = asm(ptr: v118, val) -> {  } val, !358 {
            lb     val ptr i0, !239
        }
        br read_1_read_15_block4(v124), !359

        read_1_read_15_block3():
        v125 = asm(ptr: v118, val) -> {  } val, !360 {
            lw     val ptr i0, !243
        }
        br read_1_read_15_block4(v125), !361

        read_1_read_15_block4(v126: {  }):
        br read_1_read_15_block5(v126), !362

        read_1_read_15_block5(v127: {  }):
        v128 = const u64 1
        v129 = const u64 1
        v130 = get_elem_ptr v110, ptr {  }, v128, v129, !363
        store v127 to v130, !364
        v131 = load v110, !57
        br read_1_block5(v131), !57

        read_1_block4():
        v132 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !365
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133, !366
        v135 = const u64 0, !62
        store v135 to v134, !367
        v136 = load v132, !57
        br read_1_block5(v136), !57

        read_1_block5(v137: { u64, ( () | {  } ) }):
        br block2(v137), !57

        block2(v138: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v138
    }

    pub fn read_1(slot !368: b256, offset !369: u64) -> { u64, ( () | {  } ) }, !371 {
        local { u64, ( () | {  } ) } __anon_0
        local { b256, u64, u64 } __anon_00
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = const u64 0
        v1 = const u64 0, !56
        v2 = cmp eq v0 v1, !58
        cbr v2, block0(), block1(), !58

        block0():
        v3 = get_local ptr { u64, ( () | {  } ) }, __anon_0, !62
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !62
        v6 = const u64 0, !62
        store v6 to v5, !62
        v7 = load v3
        ret { u64, ( () | {  } ) } v7, !67

        block1():
        v8 = get_local ptr u64, size_of_t, !372
        v9 = const u64 8, !72
        v10 = mul offset, v9, !373
        v11 = get_local ptr u64, size_of_t, !374
        v12 = const u64 0
        v13 = add v10, v12, !375
        v14 = const u64 31, !79
        v15 = add v13, v14, !376
        v16 = const u64 5, !82
        v17 = rsh v15, v16, !377
        v18 = get_local ptr u64, last_slot, !378
        v19 = const u64 4, !87
        v20 = mod offset, v19, !379
        v21 = get_local ptr u64, place_in_slot0, !380
        v22 = get_local ptr bool, __matched_value_1, !381
        v23 = get_local ptr bool, __matched_value_1, !382
        v24 = const bool true
        v25 = const bool true, !96
        v26 = cmp eq v24 v25, !383
        cbr v26, slot_calculator_3_block0(), slot_calculator_3_block1(), !384

        slot_calculator_3_block0():
        v27 = get_local ptr u64, place_in_slot0, !385
        v28 = const u64 8, !102
        v29 = mul v20, v28, !386
        v30 = get_local ptr u64, size_of_t, !387
        v31 = add v29, v12, !388
        v32 = const u64 31, !109
        v33 = add v31, v32, !389
        v34 = const u64 5, !112
        v35 = rsh v33, v34, !390
        br slot_calculator_3_block5(v35), !69

        slot_calculator_3_block1():
        v36 = get_local ptr bool, __matched_value_1, !391
        v37 = const bool false, !117
        v38 = cmp eq v24 v37, !392
        v39 = const u64 1, !120
        cbr v38, slot_calculator_3_block5(v39), slot_calculator_3_block3(), !393

        slot_calculator_3_block3():
        v40 = const u64 14757395258967588866, !92
        revert v40, !394

        slot_calculator_3_block5(v41: u64):
        v42 = get_local ptr u64, number_of_slots0, !395
        v43 = asm(input: slot) -> u256 input, !396 {
        }
        v44 = get_local ptr u256, offset_slot0, !397
        store v43 to v44, !398
        v45 = get_local ptr u256, offset_slot0, !399
        v46 = load v45, !69
        v47 = get_local ptr u64, last_slot, !400
        v48 = call as_u256_12(v17), !401
        v49 = get_local ptr u64, number_of_slots0, !402
        v50 = call as_u256_12(v41), !403
        v51 = sub v48, v50, !404
        v52 = add v46, v51, !405
        v53 = get_local ptr u256, offset_slot0, !406
        store v52 to v53, !407
        v54 = get_local ptr u256, offset_slot0, !408
        v55 = load v54, !69
        v56 = asm(input: v55) -> b256 input, !409 {
        }
        v57 = get_local ptr u64, number_of_slots0, !410
        v58 = get_local ptr u64, place_in_slot0, !411
        v59 = get_local ptr { b256, u64, u64 }, __anon_00, !412
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr b256, v60, !413
        store v56 to v61, !414
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !415
        store v41 to v63, !416
        v64 = const u64 2
        v65 = get_elem_ptr v59, ptr u64, v64, !417
        store v20 to v65, !418
        v66 = load v59, !69
        v67 = get_local ptr { b256, u64, u64 }, __tuple_2, !168
        store v66 to v67, !168
        v68 = get_local ptr { b256, u64, u64 }, __tuple_2, !168
        v69 = load v68
        v70 = get_local ptr { b256, u64, u64 }, __tuple_2_, !168
        store v69 to v70, !168
        v71 = get_local ptr { b256, u64, u64 }, __tuple_2_, !168
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr b256, v72, !168
        v74 = load v73
        v75 = get_local ptr b256, offset_slot, !168
        store v74 to v75, !168
        v76 = get_local ptr { b256, u64, u64 }, __tuple_2_, !168
        v77 = const u64 1
        v78 = get_elem_ptr v76, ptr u64, v77, !168
        v79 = load v78
        v80 = get_local ptr u64, number_of_slots, !168
        v81 = get_local ptr { b256, u64, u64 }, __tuple_2_, !168
        v82 = const u64 2
        v83 = get_elem_ptr v81, ptr u64, v82, !168
        v84 = load v83
        v85 = get_local ptr u64, place_in_slot, !168
        v86 = get_local ptr u64, number_of_slots, !188
        v87 = const u64 32, !190
        v88 = mul v79, v87, !191
        v89 = const u64 8
        v90 = mul v89, v88, !419
        v91 = asm(size: v90, ptr) -> u64 ptr, !420 {
            aloc   size, !199
            move   ptr hp, !200
        }
        v92 = get_local ptr u64, result_ptr, !201
        v93 = get_local ptr b256, offset_slot, !203
        v94 = load v93
        v95 = get_local ptr u64, result_ptr, !206
        v96 = get_local ptr u64, number_of_slots, !208
        v97 = get_local ptr b256, key_for_storage, !210
        store v94 to v97, !210
        v98 = int_to_ptr v91 to ptr b256, !210
        v99 = state_load_quad_word v98, key v97, v79, !210
        cbr v99, block3(), block4(), !210

        block3():
        v100 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !62
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr u64, v101, !62
        v103 = const u64 1, !62
        store v103 to v102, !62
        v104 = get_local ptr u64, result_ptr, !219
        v105 = get_local ptr u64, place_in_slot, !221
        v106 = const u64 8
        v107 = mul v106, v84, !223
        v108 = add v91, v107, !223
        v109 = const bool true
        cbr v109, read_15_block0(), read_15_block1(), !421

        read_15_block0():
        v110 = asm(ptr: v108) -> {  } ptr, !422 {
        }
        br read_15_block5(v110), !226

        read_15_block1():
        v111 = const u64 0
        v112 = const u64 1, !233
        v113 = cmp eq v111 v112, !226
        cbr v113, read_15_block2(), read_15_block3(), !423

        read_15_block2():
        v114 = asm(ptr: v108, val) -> {  } val, !424 {
            lb     val ptr i0, !239
        }
        br read_15_block4(v114), !226

        read_15_block3():
        v115 = asm(ptr: v108, val) -> {  } val, !425 {
            lw     val ptr i0, !243
        }
        br read_15_block4(v115), !226

        read_15_block4(v116: {  }):
        br read_15_block5(v116), !226

        read_15_block5(v117: {  }):
        v118 = const u64 1
        v119 = const u64 1
        v120 = get_elem_ptr v100, ptr {  }, v118, v119, !62
        store v117 to v120, !62
        v121 = load v100
        br block5(v121)

        block4():
        v122 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !62
        v123 = const u64 0
        v124 = get_elem_ptr v122, ptr u64, v123, !62
        v125 = const u64 0, !62
        store v125 to v124, !62
        v126 = load v122
        br block5(v126)

        block5(v127: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v127
    }

    pub fn eq_2(self !427: u64, other !428: u64) -> bool, !429 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    fn slot_calculator_3(slot !430: b256, offset !431: u64) -> { b256, u64, u64 }, !432 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !70
        v1 = const u64 8, !72
        v2 = mul offset, v1, !73
        v3 = get_local ptr u64, size_of_t, !75
        v4 = const u64 0
        v5 = add v2, v4, !77
        v6 = const u64 31, !79
        v7 = add v5, v6, !80
        v8 = const u64 5, !82
        v9 = rsh v7, v8, !83
        v10 = get_local ptr u64, last_slot, !85
        v11 = const u64 4, !87
        v12 = mod offset, v11, !88
        v13 = get_local ptr u64, place_in_slot, !90
        v14 = get_local ptr bool, __matched_value_1, !92
        v15 = get_local ptr bool, __matched_value_1, !94
        v16 = const bool true
        v17 = const bool true, !96
        v18 = cmp eq v16 v17, !97
        cbr v18, block0(), block1(), !97

        block0():
        v19 = get_local ptr u64, place_in_slot, !100
        v20 = const u64 8, !102
        v21 = mul v12, v20, !103
        v22 = get_local ptr u64, size_of_t, !105
        v23 = add v21, v4, !107
        v24 = const u64 31, !109
        v25 = add v23, v24, !110
        v26 = const u64 5, !112
        v27 = rsh v25, v26, !113
        br block5(v27)

        block1():
        v28 = get_local ptr bool, __matched_value_1, !94
        v29 = const bool false, !117
        v30 = cmp eq v16 v29, !118
        v31 = const u64 1, !120
        cbr v30, block5(v31), block3(), !118

        block3():
        v32 = const u64 14757395258967588866, !92
        revert v32, !92

        block5(v33: u64):
        v34 = get_local ptr u64, number_of_slots, !123
        v35 = asm(input: slot) -> u256 input, !433 {
        }
        v36 = get_local ptr u256, offset_slot, !129
        store v35 to v36, !129
        v37 = get_local ptr u256, offset_slot, !132
        v38 = load v37
        v39 = get_local ptr u64, last_slot, !135
        v40 = call as_u256_12(v9), !137
        v41 = get_local ptr u64, number_of_slots, !139
        v42 = call as_u256_12(v33), !141
        v43 = sub v40, v42, !143
        v44 = add v38, v43, !145
        v45 = get_local ptr u256, offset_slot, !145
        store v44 to v45, !145
        v46 = get_local ptr u256, offset_slot, !149
        v47 = load v46
        v48 = asm(input: v47) -> b256 input, !434 {
        }
        v49 = get_local ptr u64, number_of_slots, !155
        v50 = get_local ptr u64, place_in_slot, !157
        v51 = get_local ptr { b256, u64, u64 }, __anon_0, !159
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr b256, v52, !159
        store v48 to v53, !159
        v54 = const u64 1
        v55 = get_elem_ptr v51, ptr u64, v54, !159
        store v33 to v55, !159
        v56 = const u64 2
        v57 = get_elem_ptr v51, ptr u64, v56, !159
        store v12 to v57, !159
        v58 = load v51
        ret { b256, u64, u64 } v58
    }

    pub fn rsh_4(self !435: u64, other !436: u64) -> u64, !437 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn add_5(self !438: u64, other !439: u64) -> u64, !440 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn multiply_6(self !441: u64, other !442: u64) -> u64, !443 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn modulo_7(self !444: u64, other !445: u64) -> u64, !446 {
        entry(self: u64, other: u64):
        v0 = mod self, other
        ret u64 v0
    }

    pub fn eq_8(self !447: bool, other !448: bool) -> bool, !449 {
        entry(self: bool, other: bool):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn as_u256_9(self !450: b256) -> u256, !451 {
        entry(self: b256):
        v0 = asm(input: self) -> u256 input, !127 {
        }
        ret u256 v0
    }

    pub fn add_10(self !452: u256, other !453: u256) -> u256, !454 {
        entry(self: u256, other: u256):
        v0 = add self, other
        ret u256 v0
    }

    pub fn subtract_11(self !455: u256, other !456: u256) -> u256, !457 {
        entry(self: u256, other: u256):
        v0 = sub self, other
        ret u256 v0
    }

    pub fn as_u256_12(self !458: u64) -> u256, !459 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !460
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !460
        v3 = const u64 0, !461
        store v3 to v2, !460
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !460
        v6 = const u64 0, !462
        store v6 to v5, !460
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !460
        v9 = const u64 0, !463
        store v9 to v8, !460
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !460
        store self to v11, !460
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !464
        store v12 to v13, !464
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !465
        v15 = asm(input: v14) -> u256 input, !466 {
        }
        ret u256 v15
    }

    pub fn as_b256_13(self !467: u256) -> b256, !468 {
        entry(self: u256):
        v0 = asm(input: self) -> b256 input, !153 {
        }
        ret b256 v0
    }

    pub fn alloc_14(count !469: u64) -> u64, !470 {
        entry(count: u64):
        v0 = const u64 8
        v1 = mul v0, count, !195
        v2 = asm(size: v1, ptr) -> u64 ptr, !197 {
            aloc   size, !199
            move   ptr hp, !200
        }
        ret u64 v2
    }

    pub fn read_15(self !471: u64) -> {  }, !472 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !228

        block0():
        v1 = asm(ptr: self) -> {  } ptr, !230 {
        }
        br block5(v1)

        block1():
        v2 = const u64 0
        v3 = const u64 1, !233
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !235

        block2():
        v5 = asm(ptr: self, val) -> {  } val, !237 {
            lb     val ptr i0, !239
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> {  } val, !241 {
            lw     val ptr i0, !243
        }
        br block4(v6)

        block4(v7: {  }):
        br block5(v7)

        block5(v8: {  }):
        ret {  } v8
    }

    pub fn add_16(self !473: u64, count !474: u64) -> u64, !475 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn slot_17(self !476: { b256, u64, b256 }) -> b256, !477 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !46
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_18(self !478: { b256, u64, b256 }) -> u64, !479 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !52
        v4 = load v3
        ret u64 v4
    }

    pub fn get_19(self !480: { b256, u64, b256 }, key !481: u64) -> { b256, u64, b256 }, !482 {
        local { u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_00
        local b256 key_

        entry(self: { b256, u64, b256 }, key: u64):
        v0 = ptr_to_int self to u64, !7
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }, !7
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !483
        v4 = load v3, !7
        v5 = get_local ptr { u64, b256 }, __anon_0, !14
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !14
        store key to v7, !14
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr b256, v8, !14
        store v4 to v9, !14
        v10 = load v5
        v11 = call sha256_20(v10), !21
        v12 = get_local ptr b256, key_, !23
        store v11 to v12, !23
        v13 = get_local ptr b256, key_, !26
        v14 = load v13
        v15 = get_local ptr b256, key_, !28
        v16 = load v15
        v17 = get_local ptr { b256, u64, b256 }, __anon_00, !484
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr b256, v18, !30
        store v14 to v19, !485
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20, !30
        v22 = const u64 0, !36
        store v22 to v21, !486
        v23 = const u64 2
        v24 = get_elem_ptr v17, ptr b256, v23, !30
        store v16 to v24, !487
        v25 = load v17, !30
        ret { b256, u64, b256 } v25
    }

    pub fn sha256_20(s !489: { u64, b256 }) -> b256, !492 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !497
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !499
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !500
        store v0 to v3, !501
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !502
        v6 = const u64 0, !503
        store v6 to v5, !504
        v7 = load v1, !505
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !507
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !493
        store v7 to v10, !508
        v11 = load v8, !493
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !509
        store v11 to v12, !509
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !510
        v14 = call hash_25(s, v13), !511
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !512
        v16 = load v15
        v17 = get_local ptr b256, result_buffer, !515
        v18 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !517
        store v18 to v17, !518
        v19 = get_local ptr b256, result_buffer, !520
        v20 = ptr_to_int v16 to u64, !513
        v21 = int_to_ptr v20 to ptr { { { u64, u64 }, u64 } }, !513
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v22, !522
        v24 = load v23, !513
        v25 = call ptr_44(v24), !524
        v26 = ptr_to_int v16 to u64, !513
        v27 = int_to_ptr v26 to ptr { { { u64, u64 }, u64 } }, !513
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { { u64, u64 }, u64 }, v28, !525
        v30 = load v29, !513
        v31 = call len_29(v30), !527
        v32 = asm(hash: v19, ptr: v25, bytes: v31) -> b256 hash, !529 {
            s256   hash ptr bytes, !530
        }
        ret b256 v32
    }

    pub fn new_21() -> { { { u64, u64 }, u64 } }, !531 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00

        entry():
        v0 = call new_23(), !532
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !533
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !494
        store v0 to v3, !534
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !494
        v6 = const u64 0, !503
        store v6 to v5, !535
        v7 = load v1, !494
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !506
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9
        store v7 to v10, !506
        v11 = load v8
        ret { { { u64, u64 }, u64 } } v11
    }

    pub fn new_22() -> { { u64, u64 }, u64 }, !536 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_23(), !496
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !498
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !498
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !503
        store v6 to v5, !498
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_23() -> { u64, u64 }, !537 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !538
        v1 = asm(size: v0, ptr) -> u64 ptr, !541 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !544
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !544
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !545
        store v7 to v6, !544
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_24(count !546: u64) -> u64, !547 {
        entry(count: u64):
        v0 = asm(size: count, ptr) -> u64 ptr, !540 {
            aloc   size, !542
            move   ptr hp, !543
        }
        ret u64 v0
    }

    pub fn hash_25(self !548: { u64, b256 }, state !549: ptr { { { u64, u64 }, u64 } }) -> (), !551 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 ptr0
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !552
        v4 = load v3
        v5 = const u64 8, !553
        v6 = asm(size: v5, ptr) -> u64 ptr, !556 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v7 = get_local ptr u64, ptr, !558
        v8 = get_local ptr u64, ptr, !560
        v9 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !561
        }
        v10 = get_local ptr u64, ptr, !563
        v11 = const u64 8, !564
        v12 = call from_parts_33(v6, v11), !566
        v13 = call from_45(v12), !568
        v14 = call write_27(state, v13), !570
        v15 = ptr_to_int self to u64
        v16 = int_to_ptr v15 to ptr { u64, b256 }
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr b256, v17, !571
        v19 = load v18
        v20 = const u64 32, !572
        v21 = asm(size: v20, ptr) -> u64 ptr, !575 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v22 = get_local ptr u64, ptr0, !577
        v23 = asm(r1: v19) -> { u64, u64, u64, u64 } r1, !579 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !581
        store v23 to v24, !582
        v25 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !583
        v26 = load v25, !573
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !584
        store v26 to v27, !585
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !586
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !587
        v31 = load v30, !573
        v32 = get_local ptr u64, word_1, !588
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !589
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr u64, v34, !590
        v36 = load v35, !573
        v37 = get_local ptr u64, word_2, !591
        v38 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !592
        v39 = const u64 2
        v40 = get_elem_ptr v38, ptr u64, v39, !593
        v41 = load v40, !573
        v42 = get_local ptr u64, word_3, !594
        v43 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !595
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44, !596
        v46 = load v45, !573
        v47 = get_local ptr u64, word_4, !597
        v48 = get_local ptr u64, ptr0, !599
        v49 = get_local ptr u64, word_1, !601
        v50 = get_local ptr u64, word_2, !603
        v51 = get_local ptr u64, word_3, !605
        v52 = get_local ptr u64, word_4, !607
        v53 = asm(ptr: v21, val_1: v31, val_2: v36, val_3: v41, val_4: v46) {
            sw     ptr val_1 i0, !608
            sw     ptr val_2 i1, !609
            sw     ptr val_3 i2, !610
            sw     ptr val_4 i3, !611
        }
        v54 = get_local ptr u64, ptr0, !613
        v55 = const u64 32, !614
        v56 = call from_parts_33(v21, v55), !616
        v57 = call from_45(v56), !618
        v58 = call write_27(state, v57), !620
        v59 = const unit ()
        ret () v59
    }

    pub fn hash_26(self !621: u64, state !622: ptr { { { u64, u64 }, u64 } }) -> (), !623 {
        local u64 ptr

        entry(self: u64, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 8, !553
        v1 = asm(size: v0, ptr) -> u64 ptr, !624 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v2 = get_local ptr u64, ptr, !557
        v3 = get_local ptr u64, ptr, !559
        v4 = asm(ptr: v1, val: self) {
            sw     ptr val i0, !561
        }
        v5 = get_local ptr u64, ptr, !562
        v6 = const u64 8, !564
        v7 = call from_parts_33(v1, v6), !565
        v8 = call from_45(v7), !567
        v9 = call write_27(state, v8), !569
        v10 = const unit ()
        ret () v10
    }

    pub fn write_27(self !625: ptr { { { u64, u64 }, u64 } }, bytes !626: { { u64, u64 }, u64 }) -> (), !627 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !521
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !628
        v5 = call len_29(v4), !630
        v6 = get_local ptr u64, other_len, !632
        v7 = get_local ptr u64, other_len, !634
        v8 = const u64 0, !635
        v9 = cmp eq v5 v8, !637
        v10 = const unit (), !638
        cbr v9, block0(v10), append_28_block1(), !639

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !641
        v13 = load v12, !628
        v14 = const u64 0, !642
        v15 = cmp eq v13 v14, !644
        cbr v15, append_28_block3(), append_28_block4(), !645

        append_28_block3():
        v16 = load v3, !628
        store v16 to v1, !647
        v17 = call clear_30(v3), !649
        v18 = const unit (), !650
        br block0(v18), !651

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v1, ptr u64, v19, !652
        v21 = load v20, !628
        v22 = get_local ptr u64, other_len, !654
        v23 = add v21, v5, !656
        v24 = get_local ptr u64, both_len, !658
        v25 = const u64 1
        v26 = get_elem_ptr v1, ptr u64, v25, !659
        v27 = load v26, !628
        v28 = get_local ptr u64, other_start, !661
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !663
        v31 = load v30, !628
        v32 = call capacity_32(v31), !665
        v33 = get_local ptr u64, both_len, !667
        v34 = cmp lt v32 v23, !669
        v35 = const unit ()
        cbr v34, append_28_block6(), append_28_block8(v35), !670

        append_28_block6():
        v36 = const u64 0
        v37 = get_elem_ptr v1, ptr { u64, u64 }, v36, !671
        v38 = load v37, !628
        v39 = call ptr_38(v38), !673
        v40 = const u64 0
        v41 = get_elem_ptr v1, ptr { u64, u64 }, v40, !674
        v42 = load v41, !628
        v43 = call capacity_32(v42), !676
        v44 = get_local ptr u64, both_len, !678
        v45 = cmp gt v23 v43, !681
        cbr v45, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v39), !682

        append_28_realloc_bytes_35_block0():
        v46 = asm(size: v23, ptr) -> u64 ptr, !684 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v47 = get_local ptr u64, new_ptr0, !686
        v48 = const u64 0, !687
        v49 = cmp gt v43 v48, !689
        v50 = const unit ()
        cbr v49, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v50), !690

        append_28_realloc_bytes_35_block1():
        v51 = get_local ptr u64, new_ptr0, !692
        v52 = asm(dst: v46, src: v39, len: v43) {
            mcp    dst src len, !693
        }
        v53 = const unit ()
        br append_28_realloc_bytes_35_block3(v53), !694

        append_28_realloc_bytes_35_block3(v54: ()):
        v55 = get_local ptr u64, new_ptr0, !696
        br append_28_realloc_bytes_35_block5(v46), !697

        append_28_realloc_bytes_35_block5(v56: u64):
        v57 = get_local ptr u64, both_len, !699
        v58 = call from_parts_33(v56, v23), !701
        v59 = get_local ptr slice, new_slice, !703
        store v58 to v59, !704
        v60 = get_local ptr slice, new_slice, !706
        v61 = load v60, !628
        v62 = call from_39(v61), !708
        v63 = const u64 0
        v64 = get_elem_ptr v1, ptr { u64, u64 }, v63, !710
        store v62 to v64, !711
        v65 = const unit ()
        br append_28_block8(v65), !628

        append_28_block8(v66: ()):
        v67 = const u64 0
        v68 = get_elem_ptr v1, ptr { u64, u64 }, v67, !712
        v69 = load v68, !628
        v70 = call ptr_38(v69), !714
        v71 = get_local ptr u64, other_start, !716
        v72 = asm(ptr: v70, offset: v27, new) -> u64 new, !719 {
            add    new ptr offset, !720
        }
        v73 = get_local ptr u64, new_ptr, !722
        v74 = load v3, !628
        v75 = call ptr_44(v74), !724
        v76 = get_local ptr u64, new_ptr, !726
        v77 = get_local ptr u64, other_len, !728
        v78 = asm(dst: v72, src: v75, len: v5) {
            mcp    dst src len, !693
        }
        v79 = get_local ptr u64, both_len, !730
        v80 = const u64 1
        v81 = get_elem_ptr v1, ptr u64, v80, !732
        store v23 to v81, !733
        v82 = call clear_30(v3), !735
        v83 = const unit ()
        br block0(v83), !628

        block0(v84: ()):
        v85 = const unit ()
        ret () v85
    }

    pub fn append_28(self !736: ptr { { u64, u64 }, u64 }, other !737: ptr { { u64, u64 }, u64 }) -> (), !738 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_29(v0), !629
        v2 = get_local ptr u64, other_len, !631
        v3 = get_local ptr u64, other_len, !633
        v4 = const u64 0, !635
        v5 = cmp eq v1 v4, !636
        cbr v5, block0(), block1(), !636

        block0():
        v6 = const unit (), !638
        ret () v6, !638

        block1():
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !640
        v9 = load v8
        v10 = const u64 0, !642
        v11 = cmp eq v9 v10, !643
        cbr v11, block3(), block4(), !643

        block3():
        v12 = load other
        store v12 to self, !646
        v13 = call clear_30(other), !648
        v14 = const unit (), !650
        ret () v14, !650

        block4():
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !640
        v17 = load v16
        v18 = get_local ptr u64, other_len, !653
        v19 = add v17, v1, !655
        v20 = get_local ptr u64, both_len, !657
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !640
        v23 = load v22
        v24 = get_local ptr u64, other_start, !660
        v25 = const u64 0
        v26 = get_elem_ptr self, ptr { u64, u64 }, v25, !662
        v27 = load v26
        v28 = call capacity_32(v27), !664
        v29 = get_local ptr u64, both_len, !666
        v30 = cmp lt v28 v19, !668
        v31 = const unit ()
        cbr v30, block6(), block8(v31), !668

        block6():
        v32 = const u64 0
        v33 = get_elem_ptr self, ptr { u64, u64 }, v32, !662
        v34 = load v33
        v35 = call ptr_38(v34), !672
        v36 = const u64 0
        v37 = get_elem_ptr self, ptr { u64, u64 }, v36, !662
        v38 = load v37
        v39 = call capacity_32(v38), !675
        v40 = get_local ptr u64, both_len, !677
        v41 = cmp gt v19 v39, !739
        cbr v41, realloc_bytes_35_block0(), realloc_bytes_35_block5(v35), !740

        realloc_bytes_35_block0():
        v42 = asm(size: v19, ptr) -> u64 ptr, !741 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v43 = get_local ptr u64, new_ptr0, !742
        v44 = const u64 0, !687
        v45 = cmp gt v39 v44, !743
        v46 = const unit ()
        cbr v45, realloc_bytes_35_block1(), realloc_bytes_35_block3(v46), !744

        realloc_bytes_35_block1():
        v47 = get_local ptr u64, new_ptr0, !745
        v48 = asm(dst: v42, src: v35, len: v39) {
            mcp    dst src len, !693
        }
        v49 = const unit ()
        br realloc_bytes_35_block3(v49), !679

        realloc_bytes_35_block3(v50: ()):
        v51 = get_local ptr u64, new_ptr0, !746
        br realloc_bytes_35_block5(v42), !679

        realloc_bytes_35_block5(v52: u64):
        v53 = get_local ptr u64, both_len, !698
        v54 = call from_parts_33(v52, v19), !700
        v55 = get_local ptr slice, new_slice, !702
        store v54 to v55, !702
        v56 = get_local ptr slice, new_slice, !705
        v57 = load v56
        v58 = call from_39(v57), !707
        v59 = const u64 0
        v60 = get_elem_ptr self, ptr { u64, u64 }, v59, !709
        store v58 to v60, !709
        v61 = const unit ()
        br block8(v61)

        block8(v62: ()):
        v63 = const u64 0
        v64 = get_elem_ptr self, ptr { u64, u64 }, v63, !662
        v65 = load v64
        v66 = call ptr_38(v65), !713
        v67 = get_local ptr u64, other_start, !715
        v68 = asm(ptr: v66, offset: v23, new) -> u64 new, !747 {
            add    new ptr offset, !720
        }
        v69 = get_local ptr u64, new_ptr, !721
        v70 = load other
        v71 = call ptr_44(v70), !723
        v72 = get_local ptr u64, new_ptr, !725
        v73 = get_local ptr u64, other_len, !727
        v74 = asm(dst: v68, src: v71, len: v1) {
            mcp    dst src len, !693
        }
        v75 = get_local ptr u64, both_len, !729
        v76 = const u64 1
        v77 = get_elem_ptr self, ptr u64, v76, !731
        store v19 to v77, !731
        v78 = call clear_30(other), !734
        v79 = const unit ()
        ret () v79
    }

    pub fn len_29(self !748: { { u64, u64 }, u64 }) -> u64, !749 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !640
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !750: ptr { { u64, u64 }, u64 }) -> (), !751 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !752
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !753
        store v0 to v2, !753
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !754
        v5 = const u64 0, !755
        store v5 to v4, !754
        v6 = const unit ()
        ret () v6
    }

    pub fn lt_31(self !756: u64, other !757: u64) -> bool, !758 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_32(self !759: { u64, u64 }) -> u64, !760 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !761
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !763: u64, count !764: u64) -> slice, !765 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !766
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !766
        store ptr to v4, !766
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !766
        store v1 to v6, !766
        v7 = load v2
        v8 = asm(ptr: v7) -> slice ptr, !769 {
        }
        ret slice v8
    }

    fn from_parts_34(parts !770: { u64, u64 }) -> slice, !771 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !768 {
        }
        ret slice v0
    }

    pub fn realloc_bytes_35(ptr !772: u64, count !773: u64, new_count !774: u64) -> u64, !775 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = cmp gt new_count count, !680
        cbr v0, block0(), block5(ptr), !680

        block0():
        v1 = asm(size: new_count, ptr) -> u64 ptr, !776 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v2 = get_local ptr u64, new_ptr, !685
        v3 = const u64 0, !687
        v4 = cmp gt count v3, !688
        v5 = const unit ()
        cbr v4, block1(), block3(v5), !688

        block1():
        v6 = get_local ptr u64, new_ptr, !691
        v7 = asm(dst: v1, src: ptr, len: count) {
            mcp    dst src len, !693
        }
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !695
        br block5(v1)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !777: u64, other !778: u64) -> bool, !779 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn copy_bytes_to_37(self !780: u64, dst !781: u64, count !782: u64) -> (), !783 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) {
            mcp    dst src len, !693
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn ptr_38(self !784: { u64, u64 }) -> u64, !785 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !786
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !787: slice) -> { u64, u64 }, !788 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !792 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !789
        store v0 to v1, !789
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !794
        v4 = load v3, !789
        v5 = call number_of_bytes_42(slice), !795
        v6 = get_local ptr { u64, u64 }, __anon_0, !796
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !796
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !796
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn ptr_40(self !797: slice) -> u64, !798 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !799 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !793
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_41(slice !800: slice) -> { u64, u64 }, !801 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !791 {
        }
        ret { u64, u64 } v0
    }

    pub fn number_of_bytes_42(self !802: slice) -> u64, !803 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !805 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !806
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_43(self !807: u64, offset !808: u64) -> u64, !809 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !718 {
            add    new ptr offset, !720
        }
        ret u64 v0
    }

    pub fn ptr_44(self !810: { { u64, u64 }, u64 }) -> u64, !811 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !662
        v4 = load v3
        v5 = call ptr_38(v4), !812
        ret u64 v5
    }

    pub fn from_45(slice !813: slice) -> { { u64, u64 }, u64 }, !814 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !815
        v1 = call number_of_bytes_42(slice), !816
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !817
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !817
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !817
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn hash_46(self !818: b256, state !819: ptr { { { u64, u64 }, u64 } }) -> (), !820 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: b256, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 32, !572
        v1 = asm(size: v0, ptr) -> u64 ptr, !821 {
            aloc   size, !542
            move   ptr hp, !543
        }
        v2 = get_local ptr u64, ptr, !576
        v3 = asm(r1: self) -> { u64, u64, u64, u64 } r1, !578 {
        }
        v4 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !580
        store v3 to v4, !580
        v5 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !580
        v6 = load v5
        v7 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !580
        store v6 to v7, !580
        v8 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !580
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !580
        v11 = load v10
        v12 = get_local ptr u64, word_1, !580
        v13 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !580
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr u64, v14, !580
        v16 = load v15
        v17 = get_local ptr u64, word_2, !580
        v18 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !580
        v19 = const u64 2
        v20 = get_elem_ptr v18, ptr u64, v19, !580
        v21 = load v20
        v22 = get_local ptr u64, word_3, !580
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !580
        v24 = const u64 3
        v25 = get_elem_ptr v23, ptr u64, v24, !580
        v26 = load v25
        v27 = get_local ptr u64, word_4, !580
        v28 = get_local ptr u64, ptr, !598
        v29 = get_local ptr u64, word_1, !600
        v30 = get_local ptr u64, word_2, !602
        v31 = get_local ptr u64, word_3, !604
        v32 = get_local ptr u64, word_4, !606
        v33 = asm(ptr: v1, val_1: v11, val_2: v16, val_3: v21, val_4: v26) {
            sw     ptr val_1 i0, !608
            sw     ptr val_2 i1, !609
            sw     ptr val_3 i2, !610
            sw     ptr val_4 i3, !611
        }
        v34 = get_local ptr u64, ptr, !612
        v35 = const u64 32, !614
        v36 = call from_parts_33(v1, v35), !615
        v37 = call from_45(v36), !617
        v38 = call write_27(state, v37), !619
        v39 = const unit ()
        ret () v39
    }

    pub fn sha256_47(self !822: { { { u64, u64 }, u64 } }) -> b256, !823 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr b256, result_buffer, !514
        v1 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !517
        store v1 to v0, !514
        v2 = get_local ptr b256, result_buffer, !519
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !521
        v7 = load v6
        v8 = call ptr_44(v7), !523
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !521
        v13 = load v12
        v14 = call len_29(v13), !526
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !528 {
            s256   hash ptr bytes, !530
        }
        ret b256 v15
    }

    pub fn min_48() -> b256, !824 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !517
        ret b256 v0
    }

    pub fn field_id_49(self !825: { b256, u64, b256 }) -> b256, !826 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !11
        v4 = load v3
        ret b256 v4
    }

    pub fn new_50(slot !827: b256, offset !828: u64, field_id !829: b256) -> { b256, u64, b256 }, !830 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !31
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !31
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !31
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !31
        v7 = load v0
        ret { b256, u64, b256 } v7
    }
}

// IR: [fn-dce] Dead function elimination
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { b256, u64, b256 } __anon_000
        local { b256, u64, u64 } __anon_001
        local { u64, ( () | {  } ) } __anon_01
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        v16 = get_local ptr { u64, b256 }, __anon_00, !15
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !16
        v19 = const u64 1, !17
        store v19 to v18, !18
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr b256, v20, !19
        store v15 to v21, !20
        v22 = load v16, !5
        v23 = call sha256_20(v22), !22
        v24 = get_local ptr b256, key_, !24
        store v23 to v24, !25
        v25 = get_local ptr b256, key_, !27
        v26 = load v25, !5
        v27 = get_local ptr b256, key_, !29
        v28 = load v27, !5
        v29 = get_local ptr { b256, u64, b256 }, __anon_000, !32
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30, !33
        store v26 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32, !35
        v34 = const u64 0, !36
        store v34 to v33, !37
        v35 = const u64 2
        v36 = get_elem_ptr v29, ptr b256, v35, !38
        store v28 to v36, !39
        v37 = load v29, !40
        v38 = ptr_to_int v37 to u64, !44
        v39 = int_to_ptr v38 to ptr { b256, u64, b256 }, !45
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr b256, v40, !47
        v42 = load v41, !48
        v43 = ptr_to_int v37 to u64, !50
        v44 = int_to_ptr v43 to ptr { b256, u64, b256 }, !51
        v45 = const u64 1
        v46 = get_elem_ptr v44, ptr u64, v45, !53
        v47 = load v46, !54
        v48 = const u64 0
        v49 = const u64 0, !56
        v50 = cmp eq v48 v49, !59
        cbr v50, try_read_0_read_1_block0(), try_read_0_read_1_block1(), !60

        try_read_0_read_1_block0():
        v51 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !63
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !64
        v54 = const u64 0, !62
        store v54 to v53, !65
        v55 = load v51, !66
        br try_read_0_block2(v55), !68

        try_read_0_read_1_block1():
        v56 = get_local ptr u64, size_of_t, !71
        v57 = const u64 8, !72
        v58 = mul v47, v57, !74
        v59 = get_local ptr u64, size_of_t, !76
        v60 = const u64 0
        v61 = add v58, v60, !78
        v62 = const u64 31, !79
        v63 = add v61, v62, !81
        v64 = const u64 5, !82
        v65 = rsh v63, v64, !84
        v66 = get_local ptr u64, last_slot, !86
        v67 = const u64 4, !87
        v68 = mod v47, v67, !89
        v69 = get_local ptr u64, place_in_slot0, !91
        v70 = get_local ptr bool, __matched_value_1, !93
        v71 = get_local ptr bool, __matched_value_1, !95
        v72 = const bool true
        v73 = const bool true, !96
        v74 = cmp eq v72 v73, !98
        cbr v74, try_read_0_read_1_slot_calculator_3_block0(), try_read_0_read_1_slot_calculator_3_block1(), !99

        try_read_0_read_1_slot_calculator_3_block0():
        v75 = get_local ptr u64, place_in_slot0, !101
        v76 = const u64 8, !102
        v77 = mul v68, v76, !104
        v78 = get_local ptr u64, size_of_t, !106
        v79 = add v77, v60, !108
        v80 = const u64 31, !109
        v81 = add v79, v80, !111
        v82 = const u64 5, !112
        v83 = rsh v81, v82, !114
        br try_read_0_read_1_slot_calculator_3_block5(v83), !115

        try_read_0_read_1_slot_calculator_3_block1():
        v84 = get_local ptr bool, __matched_value_1, !116
        v85 = const bool false, !117
        v86 = cmp eq v72 v85, !119
        v87 = const u64 1, !120
        cbr v86, try_read_0_read_1_slot_calculator_3_block5(v87), try_read_0_read_1_slot_calculator_3_block3(), !121

        try_read_0_read_1_slot_calculator_3_block3():
        v88 = const u64 14757395258967588866, !92
        revert v88, !122

        try_read_0_read_1_slot_calculator_3_block5(v89: u64):
        v90 = get_local ptr u64, number_of_slots0, !124
        v91 = asm(input: v42) -> u256 input, !128 {
        }
        v92 = get_local ptr u256, offset_slot0, !130
        store v91 to v92, !131
        v93 = get_local ptr u256, offset_slot0, !133
        v94 = load v93, !134
        v95 = get_local ptr u64, last_slot, !136
        v96 = call as_u256_12(v65), !138
        v97 = get_local ptr u64, number_of_slots0, !140
        v98 = call as_u256_12(v89), !142
        v99 = sub v96, v98, !144
        v100 = add v94, v99, !146
        v101 = get_local ptr u256, offset_slot0, !147
        store v100 to v101, !148
        v102 = get_local ptr u256, offset_slot0, !150
        v103 = load v102, !151
        v104 = asm(input: v103) -> b256 input, !154 {
        }
        v105 = get_local ptr u64, number_of_slots0, !156
        v106 = get_local ptr u64, place_in_slot0, !158
        v107 = get_local ptr { b256, u64, u64 }, __anon_001, !160
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr b256, v108, !161
        store v104 to v109, !162
        v110 = const u64 1
        v111 = get_elem_ptr v107, ptr u64, v110, !163
        store v89 to v111, !164
        v112 = const u64 2
        v113 = get_elem_ptr v107, ptr u64, v112, !165
        store v68 to v113, !166
        v114 = load v107, !167
        v115 = get_local ptr { b256, u64, u64 }, __tuple_2, !169
        store v114 to v115, !170
        v116 = get_local ptr { b256, u64, u64 }, __tuple_2, !171
        v117 = load v116, !172
        v118 = get_local ptr { b256, u64, u64 }, __tuple_2_, !173
        store v117 to v118, !174
        v119 = get_local ptr { b256, u64, u64 }, __tuple_2_, !175
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr b256, v120, !176
        v122 = load v121, !177
        v123 = get_local ptr b256, offset_slot, !178
        store v122 to v123, !179
        v124 = get_local ptr { b256, u64, u64 }, __tuple_2_, !180
        v125 = const u64 1
        v126 = get_elem_ptr v124, ptr u64, v125, !181
        v127 = load v126, !182
        v128 = get_local ptr u64, number_of_slots, !183
        v129 = get_local ptr { b256, u64, u64 }, __tuple_2_, !184
        v130 = const u64 2
        v131 = get_elem_ptr v129, ptr u64, v130, !185
        v132 = load v131, !186
        v133 = get_local ptr u64, place_in_slot, !187
        v134 = get_local ptr u64, number_of_slots, !189
        v135 = const u64 32, !190
        v136 = mul v127, v135, !192
        v137 = const u64 8
        v138 = mul v137, v136, !196
        v139 = asm(size: v138, ptr) -> u64 ptr, !198 {
            aloc   size, !199
            move   ptr hp, !200
        }
        v140 = get_local ptr u64, result_ptr, !202
        v141 = get_local ptr b256, offset_slot, !204
        v142 = load v141, !205
        v143 = get_local ptr u64, result_ptr, !207
        v144 = get_local ptr u64, number_of_slots, !209
        v145 = get_local ptr b256, key_for_storage, !211
        store v142 to v145, !212
        v146 = int_to_ptr v139 to ptr b256, !213
        v147 = state_load_quad_word v146, key v145, v127, !214
        cbr v147, try_read_0_read_1_block3(), try_read_0_read_1_block4(), !215

        try_read_0_read_1_block3():
        v148 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !216
        v149 = const u64 0
        v150 = get_elem_ptr v148, ptr u64, v149, !217
        v151 = const u64 1, !62
        store v151 to v150, !218
        v152 = get_local ptr u64, result_ptr, !220
        v153 = get_local ptr u64, place_in_slot, !222
        v154 = const u64 8
        v155 = mul v154, v132, !224
        v156 = add v139, v155, !225
        v157 = const bool true
        cbr v157, try_read_0_read_1_read_15_block0(), try_read_0_read_1_read_15_block1(), !229

        try_read_0_read_1_read_15_block0():
        v158 = asm(ptr: v156) -> {  } ptr, !231 {
        }
        br try_read_0_read_1_read_15_block5(v158), !232

        try_read_0_read_1_read_15_block1():
        v159 = const u64 0
        v160 = const u64 1, !233
        v161 = cmp eq v159 v160, !234
        cbr v161, try_read_0_read_1_read_15_block2(), try_read_0_read_1_read_15_block3(), !236

        try_read_0_read_1_read_15_block2():
        v162 = asm(ptr: v156, val) -> {  } val, !238 {
            lb     val ptr i0, !239
        }
        br try_read_0_read_1_read_15_block4(v162), !240

        try_read_0_read_1_read_15_block3():
        v163 = asm(ptr: v156, val) -> {  } val, !242 {
            lw     val ptr i0, !243
        }
        br try_read_0_read_1_read_15_block4(v163), !244

        try_read_0_read_1_read_15_block4(v164: {  }):
        br try_read_0_read_1_read_15_block5(v164), !245

        try_read_0_read_1_read_15_block5(v165: {  }):
        v166 = const u64 1
        v167 = const u64 1
        v168 = get_elem_ptr v148, ptr {  }, v166, v167, !246
        store v165 to v168, !247
        v169 = load v148, !248
        br try_read_0_read_1_block5(v169), !249

        try_read_0_read_1_block4():
        v170 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !250
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !251
        v173 = const u64 0, !62
        store v173 to v172, !252
        v174 = load v170, !253
        br try_read_0_read_1_block5(v174), !254

        try_read_0_read_1_block5(v175: { u64, ( () | {  } ) }):
        br try_read_0_block2(v175), !255

        try_read_0_block2(v176: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v176
    }

    pub fn as_u256_12(self !256: u64) -> u256, !257 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !258
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !258
        v3 = const u64 0, !259
        store v3 to v2, !258
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !258
        v6 = const u64 0, !260
        store v6 to v5, !258
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !258
        v9 = const u64 0, !261
        store v9 to v8, !258
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !258
        store self to v11, !258
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !262
        store v12 to v13, !262
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !263
        v15 = asm(input: v14) -> u256 input, !264 {
        }
        ret u256 v15
    }

    pub fn sha256_20(s !266: { u64, b256 }) -> b256, !269 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !274
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !276
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !277
        store v0 to v3, !278
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !279
        v6 = const u64 0, !280
        store v6 to v5, !281
        v7 = load v1, !282
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !284
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !270
        store v7 to v10, !285
        v11 = load v8, !270
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !286
        store v11 to v12, !286
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !287
        v14 = call hash_25(s, v13), !288
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !289
        v16 = load v15
        v17 = get_local ptr b256, result_buffer, !292
        v18 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !294
        store v18 to v17, !295
        v19 = get_local ptr b256, result_buffer, !297
        v20 = ptr_to_int v16 to u64, !290
        v21 = int_to_ptr v20 to ptr { { { u64, u64 }, u64 } }, !290
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v22, !299
        v24 = load v23, !290
        v25 = call ptr_44(v24), !301
        v26 = ptr_to_int v16 to u64, !290
        v27 = int_to_ptr v26 to ptr { { { u64, u64 }, u64 } }, !290
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { { u64, u64 }, u64 }, v28, !302
        v30 = load v29, !290
        v31 = call len_29(v30), !304
        v32 = asm(hash: v19, ptr: v25, bytes: v31) -> b256 hash, !306 {
            s256   hash ptr bytes, !307
        }
        ret b256 v32
    }

    pub fn new_23() -> { u64, u64 }, !308 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !309
        v1 = asm(size: v0, ptr) -> u64 ptr, !312 {
            aloc   size, !313
            move   ptr hp, !314
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !315
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !315
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !316
        store v7 to v6, !315
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self !317: { u64, b256 }, state !318: ptr { { { u64, u64 }, u64 } }) -> (), !320 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 ptr0
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !321
        v4 = load v3
        v5 = const u64 8, !322
        v6 = asm(size: v5, ptr) -> u64 ptr, !325 {
            aloc   size, !313
            move   ptr hp, !314
        }
        v7 = get_local ptr u64, ptr, !327
        v8 = get_local ptr u64, ptr, !329
        v9 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !330
        }
        v10 = get_local ptr u64, ptr, !332
        v11 = const u64 8, !333
        v12 = call from_parts_33(v6, v11), !335
        v13 = call from_45(v12), !337
        v14 = call write_27(state, v13), !339
        v15 = ptr_to_int self to u64
        v16 = int_to_ptr v15 to ptr { u64, b256 }
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr b256, v17, !340
        v19 = load v18
        v20 = const u64 32, !341
        v21 = asm(size: v20, ptr) -> u64 ptr, !344 {
            aloc   size, !313
            move   ptr hp, !314
        }
        v22 = get_local ptr u64, ptr0, !346
        v23 = asm(r1: v19) -> { u64, u64, u64, u64 } r1, !348 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !350
        store v23 to v24, !351
        v25 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !352
        v26 = load v25, !342
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !353
        store v26 to v27, !354
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !355
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !356
        v31 = load v30, !342
        v32 = get_local ptr u64, word_1, !357
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !358
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr u64, v34, !359
        v36 = load v35, !342
        v37 = get_local ptr u64, word_2, !360
        v38 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !361
        v39 = const u64 2
        v40 = get_elem_ptr v38, ptr u64, v39, !362
        v41 = load v40, !342
        v42 = get_local ptr u64, word_3, !363
        v43 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !364
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44, !365
        v46 = load v45, !342
        v47 = get_local ptr u64, word_4, !366
        v48 = get_local ptr u64, ptr0, !368
        v49 = get_local ptr u64, word_1, !370
        v50 = get_local ptr u64, word_2, !372
        v51 = get_local ptr u64, word_3, !374
        v52 = get_local ptr u64, word_4, !376
        v53 = asm(ptr: v21, val_1: v31, val_2: v36, val_3: v41, val_4: v46) {
            sw     ptr val_1 i0, !377
            sw     ptr val_2 i1, !378
            sw     ptr val_3 i2, !379
            sw     ptr val_4 i3, !380
        }
        v54 = get_local ptr u64, ptr0, !382
        v55 = const u64 32, !383
        v56 = call from_parts_33(v21, v55), !385
        v57 = call from_45(v56), !387
        v58 = call write_27(state, v57), !389
        v59 = const unit ()
        ret () v59
    }

    pub fn write_27(self !390: ptr { { { u64, u64 }, u64 } }, bytes !391: { { u64, u64 }, u64 }) -> (), !392 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !298
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !393
        v5 = call len_29(v4), !395
        v6 = get_local ptr u64, other_len, !397
        v7 = get_local ptr u64, other_len, !399
        v8 = const u64 0, !400
        v9 = cmp eq v5 v8, !402
        v10 = const unit (), !403
        cbr v9, block0(v10), append_28_block1(), !404

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !406
        v13 = load v12, !393
        v14 = const u64 0, !407
        v15 = cmp eq v13 v14, !409
        cbr v15, append_28_block3(), append_28_block4(), !410

        append_28_block3():
        v16 = load v3, !393
        store v16 to v1, !412
        v17 = call clear_30(v3), !414
        v18 = const unit (), !415
        br block0(v18), !416

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v1, ptr u64, v19, !417
        v21 = load v20, !393
        v22 = get_local ptr u64, other_len, !419
        v23 = add v21, v5, !421
        v24 = get_local ptr u64, both_len, !423
        v25 = const u64 1
        v26 = get_elem_ptr v1, ptr u64, v25, !424
        v27 = load v26, !393
        v28 = get_local ptr u64, other_start, !426
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !428
        v31 = load v30, !393
        v32 = call capacity_32(v31), !430
        v33 = get_local ptr u64, both_len, !432
        v34 = cmp lt v32 v23, !434
        v35 = const unit ()
        cbr v34, append_28_block6(), append_28_block8(v35), !435

        append_28_block6():
        v36 = const u64 0
        v37 = get_elem_ptr v1, ptr { u64, u64 }, v36, !436
        v38 = load v37, !393
        v39 = call ptr_38(v38), !438
        v40 = const u64 0
        v41 = get_elem_ptr v1, ptr { u64, u64 }, v40, !439
        v42 = load v41, !393
        v43 = call capacity_32(v42), !441
        v44 = get_local ptr u64, both_len, !443
        v45 = cmp gt v23 v43, !446
        cbr v45, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v39), !447

        append_28_realloc_bytes_35_block0():
        v46 = asm(size: v23, ptr) -> u64 ptr, !449 {
            aloc   size, !313
            move   ptr hp, !314
        }
        v47 = get_local ptr u64, new_ptr0, !451
        v48 = const u64 0, !452
        v49 = cmp gt v43 v48, !454
        v50 = const unit ()
        cbr v49, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v50), !455

        append_28_realloc_bytes_35_block1():
        v51 = get_local ptr u64, new_ptr0, !457
        v52 = asm(dst: v46, src: v39, len: v43) {
            mcp    dst src len, !458
        }
        v53 = const unit ()
        br append_28_realloc_bytes_35_block3(v53), !459

        append_28_realloc_bytes_35_block3(v54: ()):
        v55 = get_local ptr u64, new_ptr0, !461
        br append_28_realloc_bytes_35_block5(v46), !462

        append_28_realloc_bytes_35_block5(v56: u64):
        v57 = get_local ptr u64, both_len, !464
        v58 = call from_parts_33(v56, v23), !466
        v59 = get_local ptr slice, new_slice, !468
        store v58 to v59, !469
        v60 = get_local ptr slice, new_slice, !471
        v61 = load v60, !393
        v62 = call from_39(v61), !473
        v63 = const u64 0
        v64 = get_elem_ptr v1, ptr { u64, u64 }, v63, !475
        store v62 to v64, !476
        v65 = const unit ()
        br append_28_block8(v65), !393

        append_28_block8(v66: ()):
        v67 = const u64 0
        v68 = get_elem_ptr v1, ptr { u64, u64 }, v67, !477
        v69 = load v68, !393
        v70 = call ptr_38(v69), !479
        v71 = get_local ptr u64, other_start, !481
        v72 = asm(ptr: v70, offset: v27, new) -> u64 new, !484 {
            add    new ptr offset, !485
        }
        v73 = get_local ptr u64, new_ptr, !487
        v74 = load v3, !393
        v75 = call ptr_44(v74), !489
        v76 = get_local ptr u64, new_ptr, !491
        v77 = get_local ptr u64, other_len, !493
        v78 = asm(dst: v72, src: v75, len: v5) {
            mcp    dst src len, !458
        }
        v79 = get_local ptr u64, both_len, !495
        v80 = const u64 1
        v81 = get_elem_ptr v1, ptr u64, v80, !497
        store v23 to v81, !498
        v82 = call clear_30(v3), !500
        v83 = const unit ()
        br block0(v83), !393

        block0(v84: ()):
        v85 = const unit ()
        ret () v85
    }

    pub fn len_29(self !501: { { u64, u64 }, u64 }) -> u64, !502 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !405
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !503: ptr { { u64, u64 }, u64 }) -> (), !504 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !505
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !506
        store v0 to v2, !506
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !507
        v5 = const u64 0, !508
        store v5 to v4, !507
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self !509: { u64, u64 }) -> u64, !510 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !511
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !513: u64, count !514: u64) -> slice, !515 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !516
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !516
        store ptr to v4, !516
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !516
        store v1 to v6, !516
        v7 = load v2
        v8 = asm(ptr: v7) -> slice ptr, !519 {
        }
        ret slice v8
    }

    pub fn ptr_38(self !520: { u64, u64 }) -> u64, !521 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !522
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !523: slice) -> { u64, u64 }, !524 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !528 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !525
        store v0 to v1, !525
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !530
        v4 = load v3, !525
        v5 = call number_of_bytes_42(slice), !531
        v6 = get_local ptr { u64, u64 }, __anon_0, !532
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !532
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !532
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn number_of_bytes_42(self !533: slice) -> u64, !534 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !536 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !537
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self !538: { { u64, u64 }, u64 }) -> u64, !539 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !427
        v4 = load v3
        v5 = call ptr_38(v4), !540
        ret u64 v5
    }

    pub fn from_45(slice !541: slice) -> { { u64, u64 }, u64 }, !542 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !543
        v1 = call number_of_bytes_42(slice), !544
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !545
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !545
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !545
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }
}

// IR: [const-folding] Constant folding
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { b256, u64, b256 } __anon_000
        local { b256, u64, u64 } __anon_001
        local { u64, ( () | {  } ) } __anon_01
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        v16 = get_local ptr { u64, b256 }, __anon_00, !15
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !16
        v19 = const u64 1, !17
        store v19 to v18, !18
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr b256, v20, !19
        store v15 to v21, !20
        v22 = load v16, !5
        v23 = call sha256_20(v22), !22
        v24 = get_local ptr b256, key_, !24
        store v23 to v24, !25
        v25 = get_local ptr b256, key_, !27
        v26 = load v25, !5
        v27 = get_local ptr b256, key_, !29
        v28 = load v27, !5
        v29 = get_local ptr { b256, u64, b256 }, __anon_000, !32
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30, !33
        store v26 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32, !35
        v34 = const u64 0, !36
        store v34 to v33, !37
        v35 = const u64 2
        v36 = get_elem_ptr v29, ptr b256, v35, !38
        store v28 to v36, !39
        v37 = load v29, !40
        v38 = ptr_to_int v37 to u64, !44
        v39 = int_to_ptr v38 to ptr { b256, u64, b256 }, !45
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr b256, v40, !47
        v42 = load v41, !48
        v43 = ptr_to_int v37 to u64, !50
        v44 = int_to_ptr v43 to ptr { b256, u64, b256 }, !51
        v45 = const u64 1
        v46 = get_elem_ptr v44, ptr u64, v45, !53
        v47 = load v46, !54
        br try_read_0_read_1_block0(), !58

        try_read_0_read_1_block0():
        v48 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !61
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !62
        v51 = const u64 0, !60
        store v51 to v50, !63
        v52 = load v48, !64
        br try_read_0_block2(v52), !66

        try_read_0_read_1_block1():
        v53 = get_local ptr u64, size_of_t, !69
        v54 = const u64 8, !70
        v55 = mul v47, v54, !72
        v56 = get_local ptr u64, size_of_t, !74
        v57 = const u64 31, !75
        v58 = add v55, v57, !77
        v59 = const u64 5, !78
        v60 = rsh v58, v59, !80
        v61 = get_local ptr u64, last_slot, !82
        v62 = const u64 4, !83
        v63 = mod v47, v62, !85
        v64 = get_local ptr u64, place_in_slot0, !87
        v65 = get_local ptr bool, __matched_value_1, !89
        v66 = get_local ptr bool, __matched_value_1, !91
        br try_read_0_read_1_slot_calculator_3_block0(), !93

        try_read_0_read_1_slot_calculator_3_block0():
        v67 = get_local ptr u64, place_in_slot0, !95
        v68 = const u64 8, !96
        v69 = mul v63, v68, !98
        v70 = get_local ptr u64, size_of_t, !100
        v71 = const u64 31, !101
        v72 = add v69, v71, !103
        v73 = const u64 5, !104
        v74 = rsh v72, v73, !106
        br try_read_0_read_1_slot_calculator_3_block5(v74), !107

        try_read_0_read_1_slot_calculator_3_block1():
        v75 = get_local ptr bool, __matched_value_1, !108
        br try_read_0_read_1_slot_calculator_3_block3(), !110

        try_read_0_read_1_slot_calculator_3_block3():
        v76 = const u64 14757395258967588866, !88
        revert v76, !111

        try_read_0_read_1_slot_calculator_3_block5(v77: u64):
        v78 = get_local ptr u64, number_of_slots0, !113
        v79 = asm(input: v42) -> u256 input, !117 {
        }
        v80 = get_local ptr u256, offset_slot0, !119
        store v79 to v80, !120
        v81 = get_local ptr u256, offset_slot0, !122
        v82 = load v81, !123
        v83 = get_local ptr u64, last_slot, !125
        v84 = call as_u256_12(v60), !127
        v85 = get_local ptr u64, number_of_slots0, !129
        v86 = call as_u256_12(v77), !131
        v87 = sub v84, v86, !133
        v88 = add v82, v87, !135
        v89 = get_local ptr u256, offset_slot0, !136
        store v88 to v89, !137
        v90 = get_local ptr u256, offset_slot0, !139
        v91 = load v90, !140
        v92 = asm(input: v91) -> b256 input, !143 {
        }
        v93 = get_local ptr u64, number_of_slots0, !145
        v94 = get_local ptr u64, place_in_slot0, !147
        v95 = get_local ptr { b256, u64, u64 }, __anon_001, !149
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr b256, v96, !150
        store v92 to v97, !151
        v98 = const u64 1
        v99 = get_elem_ptr v95, ptr u64, v98, !152
        store v77 to v99, !153
        v100 = const u64 2
        v101 = get_elem_ptr v95, ptr u64, v100, !154
        store v63 to v101, !155
        v102 = load v95, !156
        v103 = get_local ptr { b256, u64, u64 }, __tuple_2, !158
        store v102 to v103, !159
        v104 = get_local ptr { b256, u64, u64 }, __tuple_2, !160
        v105 = load v104, !161
        v106 = get_local ptr { b256, u64, u64 }, __tuple_2_, !162
        store v105 to v106, !163
        v107 = get_local ptr { b256, u64, u64 }, __tuple_2_, !164
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr b256, v108, !165
        v110 = load v109, !166
        v111 = get_local ptr b256, offset_slot, !167
        store v110 to v111, !168
        v112 = get_local ptr { b256, u64, u64 }, __tuple_2_, !169
        v113 = const u64 1
        v114 = get_elem_ptr v112, ptr u64, v113, !170
        v115 = load v114, !171
        v116 = get_local ptr u64, number_of_slots, !172
        v117 = get_local ptr { b256, u64, u64 }, __tuple_2_, !173
        v118 = const u64 2
        v119 = get_elem_ptr v117, ptr u64, v118, !174
        v120 = load v119, !175
        v121 = get_local ptr u64, place_in_slot, !176
        v122 = get_local ptr u64, number_of_slots, !178
        v123 = const u64 32, !179
        v124 = mul v115, v123, !181
        v125 = const u64 8
        v126 = mul v125, v124, !185
        v127 = asm(size: v126, ptr) -> u64 ptr, !187 {
            aloc   size, !188
            move   ptr hp, !189
        }
        v128 = get_local ptr u64, result_ptr, !191
        v129 = get_local ptr b256, offset_slot, !193
        v130 = load v129, !194
        v131 = get_local ptr u64, result_ptr, !196
        v132 = get_local ptr u64, number_of_slots, !198
        v133 = get_local ptr b256, key_for_storage, !200
        store v130 to v133, !201
        v134 = int_to_ptr v127 to ptr b256, !202
        v135 = state_load_quad_word v134, key v133, v115, !203
        cbr v135, try_read_0_read_1_block3(), try_read_0_read_1_block4(), !204

        try_read_0_read_1_block3():
        v136 = get_local ptr { u64, ( () | {  } ) }, __anon_1, !205
        v137 = const u64 0
        v138 = get_elem_ptr v136, ptr u64, v137, !206
        v139 = const u64 1, !60
        store v139 to v138, !207
        v140 = get_local ptr u64, result_ptr, !209
        v141 = get_local ptr u64, place_in_slot, !211
        v142 = const u64 8
        v143 = mul v142, v120, !213
        v144 = add v127, v143, !214
        br try_read_0_read_1_read_15_block0(), !218

        try_read_0_read_1_read_15_block0():
        v145 = asm(ptr: v144) -> {  } ptr, !220 {
        }
        br try_read_0_read_1_read_15_block5(v145), !221

        try_read_0_read_1_read_15_block1():
        br try_read_0_read_1_read_15_block3(), !223

        try_read_0_read_1_read_15_block2():
        v146 = asm(ptr: v144, val) -> {  } val, !225 {
            lb     val ptr i0, !226
        }
        br try_read_0_read_1_read_15_block4(v146), !227

        try_read_0_read_1_read_15_block3():
        v147 = asm(ptr: v144, val) -> {  } val, !229 {
            lw     val ptr i0, !230
        }
        br try_read_0_read_1_read_15_block4(v147), !231

        try_read_0_read_1_read_15_block4(v148: {  }):
        br try_read_0_read_1_read_15_block5(v148), !232

        try_read_0_read_1_read_15_block5(v149: {  }):
        v150 = const u64 1
        v151 = const u64 1
        v152 = get_elem_ptr v136, ptr {  }, v150, v151, !233
        store v149 to v152, !234
        v153 = load v136, !235
        br try_read_0_read_1_block5(v153), !236

        try_read_0_read_1_block4():
        v154 = get_local ptr { u64, ( () | {  } ) }, __anon_2, !237
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr u64, v155, !238
        v157 = const u64 0, !60
        store v157 to v156, !239
        v158 = load v154, !240
        br try_read_0_read_1_block5(v158), !241

        try_read_0_read_1_block5(v159: { u64, ( () | {  } ) }):
        br try_read_0_block2(v159), !242

        try_read_0_block2(v160: { u64, ( () | {  } ) }):
        ret { u64, ( () | {  } ) } v160
    }

    pub fn as_u256_12(self !243: u64) -> u256, !244 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !245
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !245
        v3 = const u64 0, !246
        store v3 to v2, !245
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !245
        v6 = const u64 0, !247
        store v6 to v5, !245
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !245
        v9 = const u64 0, !248
        store v9 to v8, !245
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !245
        store self to v11, !245
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !249
        store v12 to v13, !249
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !250
        v15 = asm(input: v14) -> u256 input, !251 {
        }
        ret u256 v15
    }

    pub fn sha256_20(s !253: { u64, b256 }) -> b256, !256 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !261
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !263
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !264
        store v0 to v3, !265
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !266
        v6 = const u64 0, !267
        store v6 to v5, !268
        v7 = load v1, !269
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !271
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !257
        store v7 to v10, !272
        v11 = load v8, !257
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !273
        store v11 to v12, !273
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !274
        v14 = call hash_25(s, v13), !275
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !276
        v16 = load v15
        v17 = get_local ptr b256, result_buffer, !279
        v18 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !281
        store v18 to v17, !282
        v19 = get_local ptr b256, result_buffer, !284
        v20 = ptr_to_int v16 to u64, !277
        v21 = int_to_ptr v20 to ptr { { { u64, u64 }, u64 } }, !277
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v22, !286
        v24 = load v23, !277
        v25 = call ptr_44(v24), !288
        v26 = ptr_to_int v16 to u64, !277
        v27 = int_to_ptr v26 to ptr { { { u64, u64 }, u64 } }, !277
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { { u64, u64 }, u64 }, v28, !289
        v30 = load v29, !277
        v31 = call len_29(v30), !291
        v32 = asm(hash: v19, ptr: v25, bytes: v31) -> b256 hash, !293 {
            s256   hash ptr bytes, !294
        }
        ret b256 v32
    }

    pub fn new_23() -> { u64, u64 }, !295 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !296
        v1 = asm(size: v0, ptr) -> u64 ptr, !299 {
            aloc   size, !300
            move   ptr hp, !301
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !302
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !302
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !303
        store v7 to v6, !302
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self !304: { u64, b256 }, state !305: ptr { { { u64, u64 }, u64 } }) -> (), !307 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 ptr0
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !308
        v4 = load v3
        v5 = const u64 8, !309
        v6 = asm(size: v5, ptr) -> u64 ptr, !312 {
            aloc   size, !300
            move   ptr hp, !301
        }
        v7 = get_local ptr u64, ptr, !314
        v8 = get_local ptr u64, ptr, !316
        v9 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !317
        }
        v10 = get_local ptr u64, ptr, !319
        v11 = const u64 8, !320
        v12 = call from_parts_33(v6, v11), !322
        v13 = call from_45(v12), !324
        v14 = call write_27(state, v13), !326
        v15 = ptr_to_int self to u64
        v16 = int_to_ptr v15 to ptr { u64, b256 }
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr b256, v17, !327
        v19 = load v18
        v20 = const u64 32, !328
        v21 = asm(size: v20, ptr) -> u64 ptr, !331 {
            aloc   size, !300
            move   ptr hp, !301
        }
        v22 = get_local ptr u64, ptr0, !333
        v23 = asm(r1: v19) -> { u64, u64, u64, u64 } r1, !335 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !337
        store v23 to v24, !338
        v25 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !339
        v26 = load v25, !329
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !340
        store v26 to v27, !341
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !342
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !343
        v31 = load v30, !329
        v32 = get_local ptr u64, word_1, !344
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !345
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr u64, v34, !346
        v36 = load v35, !329
        v37 = get_local ptr u64, word_2, !347
        v38 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !348
        v39 = const u64 2
        v40 = get_elem_ptr v38, ptr u64, v39, !349
        v41 = load v40, !329
        v42 = get_local ptr u64, word_3, !350
        v43 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !351
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44, !352
        v46 = load v45, !329
        v47 = get_local ptr u64, word_4, !353
        v48 = get_local ptr u64, ptr0, !355
        v49 = get_local ptr u64, word_1, !357
        v50 = get_local ptr u64, word_2, !359
        v51 = get_local ptr u64, word_3, !361
        v52 = get_local ptr u64, word_4, !363
        v53 = asm(ptr: v21, val_1: v31, val_2: v36, val_3: v41, val_4: v46) {
            sw     ptr val_1 i0, !364
            sw     ptr val_2 i1, !365
            sw     ptr val_3 i2, !366
            sw     ptr val_4 i3, !367
        }
        v54 = get_local ptr u64, ptr0, !369
        v55 = const u64 32, !370
        v56 = call from_parts_33(v21, v55), !372
        v57 = call from_45(v56), !374
        v58 = call write_27(state, v57), !376
        v59 = const unit ()
        ret () v59
    }

    pub fn write_27(self !377: ptr { { { u64, u64 }, u64 } }, bytes !378: { { u64, u64 }, u64 }) -> (), !379 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !285
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !380
        v5 = call len_29(v4), !382
        v6 = get_local ptr u64, other_len, !384
        v7 = get_local ptr u64, other_len, !386
        v8 = const u64 0, !387
        v9 = cmp eq v5 v8, !389
        v10 = const unit (), !390
        cbr v9, block0(v10), append_28_block1(), !391

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !393
        v13 = load v12, !380
        v14 = const u64 0, !394
        v15 = cmp eq v13 v14, !396
        cbr v15, append_28_block3(), append_28_block4(), !397

        append_28_block3():
        v16 = load v3, !380
        store v16 to v1, !399
        v17 = call clear_30(v3), !401
        v18 = const unit (), !402
        br block0(v18), !403

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v1, ptr u64, v19, !404
        v21 = load v20, !380
        v22 = get_local ptr u64, other_len, !406
        v23 = add v21, v5, !408
        v24 = get_local ptr u64, both_len, !410
        v25 = const u64 1
        v26 = get_elem_ptr v1, ptr u64, v25, !411
        v27 = load v26, !380
        v28 = get_local ptr u64, other_start, !413
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !415
        v31 = load v30, !380
        v32 = call capacity_32(v31), !417
        v33 = get_local ptr u64, both_len, !419
        v34 = cmp lt v32 v23, !421
        v35 = const unit ()
        cbr v34, append_28_block6(), append_28_block8(v35), !422

        append_28_block6():
        v36 = const u64 0
        v37 = get_elem_ptr v1, ptr { u64, u64 }, v36, !423
        v38 = load v37, !380
        v39 = call ptr_38(v38), !425
        v40 = const u64 0
        v41 = get_elem_ptr v1, ptr { u64, u64 }, v40, !426
        v42 = load v41, !380
        v43 = call capacity_32(v42), !428
        v44 = get_local ptr u64, both_len, !430
        v45 = cmp gt v23 v43, !433
        cbr v45, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v39), !434

        append_28_realloc_bytes_35_block0():
        v46 = asm(size: v23, ptr) -> u64 ptr, !436 {
            aloc   size, !300
            move   ptr hp, !301
        }
        v47 = get_local ptr u64, new_ptr0, !438
        v48 = const u64 0, !439
        v49 = cmp gt v43 v48, !441
        v50 = const unit ()
        cbr v49, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v50), !442

        append_28_realloc_bytes_35_block1():
        v51 = get_local ptr u64, new_ptr0, !444
        v52 = asm(dst: v46, src: v39, len: v43) {
            mcp    dst src len, !445
        }
        v53 = const unit ()
        br append_28_realloc_bytes_35_block3(v53), !446

        append_28_realloc_bytes_35_block3(v54: ()):
        v55 = get_local ptr u64, new_ptr0, !448
        br append_28_realloc_bytes_35_block5(v46), !449

        append_28_realloc_bytes_35_block5(v56: u64):
        v57 = get_local ptr u64, both_len, !451
        v58 = call from_parts_33(v56, v23), !453
        v59 = get_local ptr slice, new_slice, !455
        store v58 to v59, !456
        v60 = get_local ptr slice, new_slice, !458
        v61 = load v60, !380
        v62 = call from_39(v61), !460
        v63 = const u64 0
        v64 = get_elem_ptr v1, ptr { u64, u64 }, v63, !462
        store v62 to v64, !463
        v65 = const unit ()
        br append_28_block8(v65), !380

        append_28_block8(v66: ()):
        v67 = const u64 0
        v68 = get_elem_ptr v1, ptr { u64, u64 }, v67, !464
        v69 = load v68, !380
        v70 = call ptr_38(v69), !466
        v71 = get_local ptr u64, other_start, !468
        v72 = asm(ptr: v70, offset: v27, new) -> u64 new, !471 {
            add    new ptr offset, !472
        }
        v73 = get_local ptr u64, new_ptr, !474
        v74 = load v3, !380
        v75 = call ptr_44(v74), !476
        v76 = get_local ptr u64, new_ptr, !478
        v77 = get_local ptr u64, other_len, !480
        v78 = asm(dst: v72, src: v75, len: v5) {
            mcp    dst src len, !445
        }
        v79 = get_local ptr u64, both_len, !482
        v80 = const u64 1
        v81 = get_elem_ptr v1, ptr u64, v80, !484
        store v23 to v81, !485
        v82 = call clear_30(v3), !487
        v83 = const unit ()
        br block0(v83), !380

        block0(v84: ()):
        v85 = const unit ()
        ret () v85
    }

    pub fn len_29(self !488: { { u64, u64 }, u64 }) -> u64, !489 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !392
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !490: ptr { { u64, u64 }, u64 }) -> (), !491 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !492
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !493
        store v0 to v2, !493
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !494
        v5 = const u64 0, !495
        store v5 to v4, !494
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self !496: { u64, u64 }) -> u64, !497 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !498
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !500: u64, count !501: u64) -> slice, !502 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !503
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !503
        store ptr to v2, !503
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !503
        store count to v4, !503
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !506 {
        }
        ret slice v6
    }

    pub fn ptr_38(self !507: { u64, u64 }) -> u64, !508 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !509
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !510: slice) -> { u64, u64 }, !511 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !515 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !512
        store v0 to v1, !512
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !517
        v4 = load v3, !512
        v5 = call number_of_bytes_42(slice), !518
        v6 = get_local ptr { u64, u64 }, __anon_0, !519
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !519
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !519
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn number_of_bytes_42(self !520: slice) -> u64, !521 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !523 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !524
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self !525: { { u64, u64 }, u64 }) -> u64, !526 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !414
        v4 = load v3
        v5 = call ptr_38(v4), !527
        ret u64 v5
    }

    pub fn from_45(slice !528: slice) -> { { u64, u64 }, u64 }, !529 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !530
        v1 = call number_of_bytes_42(slice), !531
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !532
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !532
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !532
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }
}

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { b256, u64, b256 } __anon_000
        local { b256, u64, u64 } __anon_001
        local { u64, ( () | {  } ) } __anon_01
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        v16 = get_local ptr { u64, b256 }, __anon_00, !15
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !16
        v19 = const u64 1, !17
        store v19 to v18, !18
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr b256, v20, !19
        store v15 to v21, !20
        v22 = load v16, !5
        v23 = call sha256_20(v22), !22
        v24 = get_local ptr b256, key_, !24
        store v23 to v24, !25
        v25 = get_local ptr b256, key_, !27
        v26 = load v25, !5
        v27 = get_local ptr b256, key_, !29
        v28 = load v27, !5
        v29 = get_local ptr { b256, u64, b256 }, __anon_000, !32
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30, !33
        store v26 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32, !35
        v34 = const u64 0, !36
        store v34 to v33, !37
        v35 = const u64 2
        v36 = get_elem_ptr v29, ptr b256, v35, !38
        store v28 to v36, !39
        v37 = load v29, !40
        v38 = ptr_to_int v37 to u64, !44
        v39 = int_to_ptr v38 to ptr { b256, u64, b256 }, !45
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr b256, v40, !47
        v42 = load v41, !48
        v43 = ptr_to_int v37 to u64, !50
        v44 = int_to_ptr v43 to ptr { b256, u64, b256 }, !51
        v45 = const u64 1
        v46 = get_elem_ptr v44, ptr u64, v45, !53
        v47 = load v46, !54
        v48 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !58
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !59
        v51 = const u64 0, !57
        store v51 to v50, !60
        v52 = load v48, !61
        ret { u64, ( () | {  } ) } v52
    }

    pub fn as_u256_12(self !63: u64) -> u256, !64 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !65
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !65
        v3 = const u64 0, !66
        store v3 to v2, !65
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !65
        v6 = const u64 0, !67
        store v6 to v5, !65
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !65
        v9 = const u64 0, !68
        store v9 to v8, !65
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !65
        store self to v11, !65
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !69
        store v12 to v13, !69
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !70
        v15 = asm(input: v14) -> u256 input, !71 {
        }
        ret u256 v15
    }

    pub fn sha256_20(s !73: { u64, b256 }) -> b256, !76 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !81
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !83
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !84
        store v0 to v3, !85
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !86
        v6 = const u64 0, !87
        store v6 to v5, !88
        v7 = load v1, !89
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !91
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !77
        store v7 to v10, !92
        v11 = load v8, !77
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !93
        store v11 to v12, !93
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !94
        v14 = call hash_25(s, v13), !95
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !96
        v16 = load v15
        v17 = get_local ptr b256, result_buffer, !99
        v18 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !101
        store v18 to v17, !102
        v19 = get_local ptr b256, result_buffer, !104
        v20 = ptr_to_int v16 to u64, !97
        v21 = int_to_ptr v20 to ptr { { { u64, u64 }, u64 } }, !97
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v22, !106
        v24 = load v23, !97
        v25 = call ptr_44(v24), !108
        v26 = ptr_to_int v16 to u64, !97
        v27 = int_to_ptr v26 to ptr { { { u64, u64 }, u64 } }, !97
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { { u64, u64 }, u64 }, v28, !109
        v30 = load v29, !97
        v31 = call len_29(v30), !111
        v32 = asm(hash: v19, ptr: v25, bytes: v31) -> b256 hash, !113 {
            s256   hash ptr bytes, !114
        }
        ret b256 v32
    }

    pub fn new_23() -> { u64, u64 }, !115 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !116
        v1 = asm(size: v0, ptr) -> u64 ptr, !120 {
            aloc   size, !121
            move   ptr hp, !122
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !123
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !123
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !124
        store v7 to v6, !123
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self !125: { u64, b256 }, state !126: ptr { { { u64, u64 }, u64 } }) -> (), !128 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 ptr0
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !129
        v4 = load v3
        v5 = const u64 8, !130
        v6 = asm(size: v5, ptr) -> u64 ptr, !133 {
            aloc   size, !121
            move   ptr hp, !122
        }
        v7 = get_local ptr u64, ptr, !135
        v8 = get_local ptr u64, ptr, !137
        v9 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !138
        }
        v10 = get_local ptr u64, ptr, !140
        v11 = const u64 8, !141
        v12 = call from_parts_33(v6, v11), !143
        v13 = call from_45(v12), !145
        v14 = call write_27(state, v13), !147
        v15 = ptr_to_int self to u64
        v16 = int_to_ptr v15 to ptr { u64, b256 }
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr b256, v17, !148
        v19 = load v18
        v20 = const u64 32, !149
        v21 = asm(size: v20, ptr) -> u64 ptr, !152 {
            aloc   size, !121
            move   ptr hp, !122
        }
        v22 = get_local ptr u64, ptr0, !154
        v23 = asm(r1: v19) -> { u64, u64, u64, u64 } r1, !156 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !158
        store v23 to v24, !159
        v25 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !160
        v26 = load v25, !150
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !161
        store v26 to v27, !162
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !163
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !164
        v31 = load v30, !150
        v32 = get_local ptr u64, word_1, !165
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !166
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr u64, v34, !167
        v36 = load v35, !150
        v37 = get_local ptr u64, word_2, !168
        v38 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !169
        v39 = const u64 2
        v40 = get_elem_ptr v38, ptr u64, v39, !170
        v41 = load v40, !150
        v42 = get_local ptr u64, word_3, !171
        v43 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !172
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44, !173
        v46 = load v45, !150
        v47 = get_local ptr u64, word_4, !174
        v48 = get_local ptr u64, ptr0, !176
        v49 = get_local ptr u64, word_1, !178
        v50 = get_local ptr u64, word_2, !180
        v51 = get_local ptr u64, word_3, !182
        v52 = get_local ptr u64, word_4, !184
        v53 = asm(ptr: v21, val_1: v31, val_2: v36, val_3: v41, val_4: v46) {
            sw     ptr val_1 i0, !185
            sw     ptr val_2 i1, !186
            sw     ptr val_3 i2, !187
            sw     ptr val_4 i3, !188
        }
        v54 = get_local ptr u64, ptr0, !190
        v55 = const u64 32, !191
        v56 = call from_parts_33(v21, v55), !193
        v57 = call from_45(v56), !195
        v58 = call write_27(state, v57), !197
        v59 = const unit ()
        ret () v59
    }

    pub fn write_27(self !198: ptr { { { u64, u64 }, u64 } }, bytes !199: { { u64, u64 }, u64 }) -> (), !200 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !105
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !201
        v5 = call len_29(v4), !203
        v6 = get_local ptr u64, other_len, !205
        v7 = get_local ptr u64, other_len, !207
        v8 = const u64 0, !208
        v9 = cmp eq v5 v8, !210
        v10 = const unit (), !211
        cbr v9, block0(v10), append_28_block1(), !212

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !214
        v13 = load v12, !201
        v14 = const u64 0, !215
        v15 = cmp eq v13 v14, !217
        cbr v15, append_28_block3(), append_28_block4(), !218

        append_28_block3():
        v16 = load v3, !201
        store v16 to v1, !220
        v17 = call clear_30(v3), !222
        v18 = const unit (), !223
        br block0(v18), !224

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v1, ptr u64, v19, !225
        v21 = load v20, !201
        v22 = get_local ptr u64, other_len, !227
        v23 = add v21, v5, !229
        v24 = get_local ptr u64, both_len, !231
        v25 = const u64 1
        v26 = get_elem_ptr v1, ptr u64, v25, !232
        v27 = load v26, !201
        v28 = get_local ptr u64, other_start, !234
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !236
        v31 = load v30, !201
        v32 = call capacity_32(v31), !238
        v33 = get_local ptr u64, both_len, !240
        v34 = cmp lt v32 v23, !242
        v35 = const unit ()
        cbr v34, append_28_block6(), append_28_block8(v35), !243

        append_28_block6():
        v36 = const u64 0
        v37 = get_elem_ptr v1, ptr { u64, u64 }, v36, !244
        v38 = load v37, !201
        v39 = call ptr_38(v38), !246
        v40 = const u64 0
        v41 = get_elem_ptr v1, ptr { u64, u64 }, v40, !247
        v42 = load v41, !201
        v43 = call capacity_32(v42), !249
        v44 = get_local ptr u64, both_len, !251
        v45 = cmp gt v23 v43, !254
        cbr v45, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v39), !255

        append_28_realloc_bytes_35_block0():
        v46 = asm(size: v23, ptr) -> u64 ptr, !257 {
            aloc   size, !121
            move   ptr hp, !122
        }
        v47 = get_local ptr u64, new_ptr0, !259
        v48 = const u64 0, !260
        v49 = cmp gt v43 v48, !262
        v50 = const unit ()
        cbr v49, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v50), !263

        append_28_realloc_bytes_35_block1():
        v51 = get_local ptr u64, new_ptr0, !265
        v52 = asm(dst: v46, src: v39, len: v43) {
            mcp    dst src len, !267
        }
        v53 = const unit ()
        br append_28_realloc_bytes_35_block3(v53), !268

        append_28_realloc_bytes_35_block3(v54: ()):
        v55 = get_local ptr u64, new_ptr0, !270
        br append_28_realloc_bytes_35_block5(v46), !271

        append_28_realloc_bytes_35_block5(v56: u64):
        v57 = get_local ptr u64, both_len, !273
        v58 = call from_parts_33(v56, v23), !275
        v59 = get_local ptr slice, new_slice, !277
        store v58 to v59, !278
        v60 = get_local ptr slice, new_slice, !280
        v61 = load v60, !201
        v62 = call from_39(v61), !282
        v63 = const u64 0
        v64 = get_elem_ptr v1, ptr { u64, u64 }, v63, !284
        store v62 to v64, !285
        v65 = const unit ()
        br append_28_block8(v65), !201

        append_28_block8(v66: ()):
        v67 = const u64 0
        v68 = get_elem_ptr v1, ptr { u64, u64 }, v67, !286
        v69 = load v68, !201
        v70 = call ptr_38(v69), !288
        v71 = get_local ptr u64, other_start, !290
        v72 = asm(ptr: v70, offset: v27, new) -> u64 new, !293 {
            add    new ptr offset, !294
        }
        v73 = get_local ptr u64, new_ptr, !296
        v74 = load v3, !201
        v75 = call ptr_44(v74), !298
        v76 = get_local ptr u64, new_ptr, !300
        v77 = get_local ptr u64, other_len, !302
        v78 = asm(dst: v72, src: v75, len: v5) {
            mcp    dst src len, !267
        }
        v79 = get_local ptr u64, both_len, !304
        v80 = const u64 1
        v81 = get_elem_ptr v1, ptr u64, v80, !306
        store v23 to v81, !307
        v82 = call clear_30(v3), !309
        v83 = const unit ()
        br block0(v83), !201

        block0(v84: ()):
        v85 = const unit ()
        ret () v85
    }

    pub fn len_29(self !310: { { u64, u64 }, u64 }) -> u64, !311 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !213
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !312: ptr { { u64, u64 }, u64 }) -> (), !313 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !314
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !315
        store v0 to v2, !315
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !316
        v5 = const u64 0, !317
        store v5 to v4, !316
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self !318: { u64, u64 }) -> u64, !319 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !320
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !322: u64, count !323: u64) -> slice, !324 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !325
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !325
        store ptr to v2, !325
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !325
        store count to v4, !325
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !328 {
        }
        ret slice v6
    }

    pub fn ptr_38(self !329: { u64, u64 }) -> u64, !330 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !331
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !332: slice) -> { u64, u64 }, !333 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !337 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !334
        store v0 to v1, !334
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !339
        v4 = load v3, !334
        v5 = call number_of_bytes_42(slice), !340
        v6 = get_local ptr { u64, u64 }, __anon_0, !341
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !341
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !341
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn number_of_bytes_42(self !342: slice) -> u64, !343 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !345 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !346
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self !347: { { u64, u64 }, u64 }) -> u64, !348 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !235
        v4 = load v3
        v5 = call ptr_38(v4), !349
        ret u64 v5
    }

    pub fn from_45(slice !350: slice) -> { { u64, u64 }, u64 }, !351 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !352
        v1 = call number_of_bytes_42(slice), !353
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !354
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !354
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !354
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }
}

// IR: [fn-dce] Dead function elimination
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { b256, u64, b256 } __anon_000
        local { b256, u64, u64 } __anon_001
        local { u64, ( () | {  } ) } __anon_01
        local { u64, ( () | {  } ) } __anon_1
        local { u64, ( () | {  } ) } __anon_2
        local bool __matched_value_1
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_
        local b256 key_for_storage
        local u64 last_slot
        local u64 number_of_slots
        local u64 number_of_slots0
        local b256 offset_slot
        local mut u256 offset_slot0
        local u64 place_in_slot
        local u64 place_in_slot0
        local u64 result_ptr
        local u64 size_of_t

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        v16 = get_local ptr { u64, b256 }, __anon_00, !15
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !16
        v19 = const u64 1, !17
        store v19 to v18, !18
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr b256, v20, !19
        store v15 to v21, !20
        v22 = load v16, !5
        v23 = call sha256_20(v22), !22
        v24 = get_local ptr b256, key_, !24
        store v23 to v24, !25
        v25 = get_local ptr b256, key_, !27
        v26 = load v25, !5
        v27 = get_local ptr b256, key_, !29
        v28 = load v27, !5
        v29 = get_local ptr { b256, u64, b256 }, __anon_000, !32
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30, !33
        store v26 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32, !35
        v34 = const u64 0, !36
        store v34 to v33, !37
        v35 = const u64 2
        v36 = get_elem_ptr v29, ptr b256, v35, !38
        store v28 to v36, !39
        v37 = load v29, !40
        v38 = ptr_to_int v37 to u64, !44
        v39 = int_to_ptr v38 to ptr { b256, u64, b256 }, !45
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr b256, v40, !47
        v42 = load v41, !48
        v43 = ptr_to_int v37 to u64, !50
        v44 = int_to_ptr v43 to ptr { b256, u64, b256 }, !51
        v45 = const u64 1
        v46 = get_elem_ptr v44, ptr u64, v45, !53
        v47 = load v46, !54
        v48 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !58
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !59
        v51 = const u64 0, !57
        store v51 to v50, !60
        v52 = load v48, !61
        ret { u64, ( () | {  } ) } v52
    }

    pub fn sha256_20(s !63: { u64, b256 }) -> b256, !66 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !71
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !73
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !74
        store v0 to v3, !75
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !76
        v6 = const u64 0, !77
        store v6 to v5, !78
        v7 = load v1, !79
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !81
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !67
        store v7 to v10, !82
        v11 = load v8, !67
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !83
        store v11 to v12, !83
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !84
        v14 = call hash_25(s, v13), !85
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !86
        v16 = load v15
        v17 = get_local ptr b256, result_buffer, !89
        v18 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !91
        store v18 to v17, !92
        v19 = get_local ptr b256, result_buffer, !94
        v20 = ptr_to_int v16 to u64, !87
        v21 = int_to_ptr v20 to ptr { { { u64, u64 }, u64 } }, !87
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v22, !96
        v24 = load v23, !87
        v25 = call ptr_44(v24), !98
        v26 = ptr_to_int v16 to u64, !87
        v27 = int_to_ptr v26 to ptr { { { u64, u64 }, u64 } }, !87
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { { u64, u64 }, u64 }, v28, !99
        v30 = load v29, !87
        v31 = call len_29(v30), !101
        v32 = asm(hash: v19, ptr: v25, bytes: v31) -> b256 hash, !103 {
            s256   hash ptr bytes, !104
        }
        ret b256 v32
    }

    pub fn new_23() -> { u64, u64 }, !105 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !106
        v1 = asm(size: v0, ptr) -> u64 ptr, !110 {
            aloc   size, !111
            move   ptr hp, !112
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !113
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !113
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !114
        store v7 to v6, !113
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self !115: { u64, b256 }, state !116: ptr { { { u64, u64 }, u64 } }) -> (), !118 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 ptr0
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !119
        v4 = load v3
        v5 = const u64 8, !120
        v6 = asm(size: v5, ptr) -> u64 ptr, !123 {
            aloc   size, !111
            move   ptr hp, !112
        }
        v7 = get_local ptr u64, ptr, !125
        v8 = get_local ptr u64, ptr, !127
        v9 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !128
        }
        v10 = get_local ptr u64, ptr, !130
        v11 = const u64 8, !131
        v12 = call from_parts_33(v6, v11), !133
        v13 = call from_45(v12), !135
        v14 = call write_27(state, v13), !137
        v15 = ptr_to_int self to u64
        v16 = int_to_ptr v15 to ptr { u64, b256 }
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr b256, v17, !138
        v19 = load v18
        v20 = const u64 32, !139
        v21 = asm(size: v20, ptr) -> u64 ptr, !142 {
            aloc   size, !111
            move   ptr hp, !112
        }
        v22 = get_local ptr u64, ptr0, !144
        v23 = asm(r1: v19) -> { u64, u64, u64, u64 } r1, !146 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !148
        store v23 to v24, !149
        v25 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !150
        v26 = load v25, !140
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !151
        store v26 to v27, !152
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !153
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !154
        v31 = load v30, !140
        v32 = get_local ptr u64, word_1, !155
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !156
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr u64, v34, !157
        v36 = load v35, !140
        v37 = get_local ptr u64, word_2, !158
        v38 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !159
        v39 = const u64 2
        v40 = get_elem_ptr v38, ptr u64, v39, !160
        v41 = load v40, !140
        v42 = get_local ptr u64, word_3, !161
        v43 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !162
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44, !163
        v46 = load v45, !140
        v47 = get_local ptr u64, word_4, !164
        v48 = get_local ptr u64, ptr0, !166
        v49 = get_local ptr u64, word_1, !168
        v50 = get_local ptr u64, word_2, !170
        v51 = get_local ptr u64, word_3, !172
        v52 = get_local ptr u64, word_4, !174
        v53 = asm(ptr: v21, val_1: v31, val_2: v36, val_3: v41, val_4: v46) {
            sw     ptr val_1 i0, !175
            sw     ptr val_2 i1, !176
            sw     ptr val_3 i2, !177
            sw     ptr val_4 i3, !178
        }
        v54 = get_local ptr u64, ptr0, !180
        v55 = const u64 32, !181
        v56 = call from_parts_33(v21, v55), !183
        v57 = call from_45(v56), !185
        v58 = call write_27(state, v57), !187
        v59 = const unit ()
        ret () v59
    }

    pub fn write_27(self !188: ptr { { { u64, u64 }, u64 } }, bytes !189: { { u64, u64 }, u64 }) -> (), !190 {
        local u64 both_len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !95
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !191
        v5 = call len_29(v4), !193
        v6 = get_local ptr u64, other_len, !195
        v7 = get_local ptr u64, other_len, !197
        v8 = const u64 0, !198
        v9 = cmp eq v5 v8, !200
        v10 = const unit (), !201
        cbr v9, block0(v10), append_28_block1(), !202

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !204
        v13 = load v12, !191
        v14 = const u64 0, !205
        v15 = cmp eq v13 v14, !207
        cbr v15, append_28_block3(), append_28_block4(), !208

        append_28_block3():
        v16 = load v3, !191
        store v16 to v1, !210
        v17 = call clear_30(v3), !212
        v18 = const unit (), !213
        br block0(v18), !214

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v1, ptr u64, v19, !215
        v21 = load v20, !191
        v22 = get_local ptr u64, other_len, !217
        v23 = add v21, v5, !219
        v24 = get_local ptr u64, both_len, !221
        v25 = const u64 1
        v26 = get_elem_ptr v1, ptr u64, v25, !222
        v27 = load v26, !191
        v28 = get_local ptr u64, other_start, !224
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !226
        v31 = load v30, !191
        v32 = call capacity_32(v31), !228
        v33 = get_local ptr u64, both_len, !230
        v34 = cmp lt v32 v23, !232
        v35 = const unit ()
        cbr v34, append_28_block6(), append_28_block8(v35), !233

        append_28_block6():
        v36 = const u64 0
        v37 = get_elem_ptr v1, ptr { u64, u64 }, v36, !234
        v38 = load v37, !191
        v39 = call ptr_38(v38), !236
        v40 = const u64 0
        v41 = get_elem_ptr v1, ptr { u64, u64 }, v40, !237
        v42 = load v41, !191
        v43 = call capacity_32(v42), !239
        v44 = get_local ptr u64, both_len, !241
        v45 = cmp gt v23 v43, !244
        cbr v45, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v39), !245

        append_28_realloc_bytes_35_block0():
        v46 = asm(size: v23, ptr) -> u64 ptr, !247 {
            aloc   size, !111
            move   ptr hp, !112
        }
        v47 = get_local ptr u64, new_ptr0, !249
        v48 = const u64 0, !250
        v49 = cmp gt v43 v48, !252
        v50 = const unit ()
        cbr v49, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v50), !253

        append_28_realloc_bytes_35_block1():
        v51 = get_local ptr u64, new_ptr0, !255
        v52 = asm(dst: v46, src: v39, len: v43) {
            mcp    dst src len, !257
        }
        v53 = const unit ()
        br append_28_realloc_bytes_35_block3(v53), !258

        append_28_realloc_bytes_35_block3(v54: ()):
        v55 = get_local ptr u64, new_ptr0, !260
        br append_28_realloc_bytes_35_block5(v46), !261

        append_28_realloc_bytes_35_block5(v56: u64):
        v57 = get_local ptr u64, both_len, !263
        v58 = call from_parts_33(v56, v23), !265
        v59 = get_local ptr slice, new_slice, !267
        store v58 to v59, !268
        v60 = get_local ptr slice, new_slice, !270
        v61 = load v60, !191
        v62 = call from_39(v61), !272
        v63 = const u64 0
        v64 = get_elem_ptr v1, ptr { u64, u64 }, v63, !274
        store v62 to v64, !275
        v65 = const unit ()
        br append_28_block8(v65), !191

        append_28_block8(v66: ()):
        v67 = const u64 0
        v68 = get_elem_ptr v1, ptr { u64, u64 }, v67, !276
        v69 = load v68, !191
        v70 = call ptr_38(v69), !278
        v71 = get_local ptr u64, other_start, !280
        v72 = asm(ptr: v70, offset: v27, new) -> u64 new, !283 {
            add    new ptr offset, !284
        }
        v73 = get_local ptr u64, new_ptr, !286
        v74 = load v3, !191
        v75 = call ptr_44(v74), !288
        v76 = get_local ptr u64, new_ptr, !290
        v77 = get_local ptr u64, other_len, !292
        v78 = asm(dst: v72, src: v75, len: v5) {
            mcp    dst src len, !257
        }
        v79 = get_local ptr u64, both_len, !294
        v80 = const u64 1
        v81 = get_elem_ptr v1, ptr u64, v80, !296
        store v23 to v81, !297
        v82 = call clear_30(v3), !299
        v83 = const unit ()
        br block0(v83), !191

        block0(v84: ()):
        v85 = const unit ()
        ret () v85
    }

    pub fn len_29(self !300: { { u64, u64 }, u64 }) -> u64, !301 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !203
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !302: ptr { { u64, u64 }, u64 }) -> (), !303 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !304
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !305
        store v0 to v2, !305
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !306
        v5 = const u64 0, !307
        store v5 to v4, !306
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self !308: { u64, u64 }) -> u64, !309 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !310
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !312: u64, count !313: u64) -> slice, !314 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !315
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !315
        store ptr to v2, !315
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !315
        store count to v4, !315
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !318 {
        }
        ret slice v6
    }

    pub fn ptr_38(self !319: { u64, u64 }) -> u64, !320 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !321
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !322: slice) -> { u64, u64 }, !323 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !327 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !324
        store v0 to v1, !324
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !329
        v4 = load v3, !324
        v5 = call number_of_bytes_42(slice), !330
        v6 = get_local ptr { u64, u64 }, __anon_0, !331
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !331
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !331
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn number_of_bytes_42(self !332: slice) -> u64, !333 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !335 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !336
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self !337: { { u64, u64 }, u64 }) -> u64, !338 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !225
        v4 = load v3
        v5 = call ptr_38(v4), !339
        ret u64 v5
    }

    pub fn from_45(slice !340: slice) -> { { u64, u64 }, u64 }, !341 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !342
        v1 = call number_of_bytes_42(slice), !343
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !344
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !344
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !344
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }
}

// IR: [dce] Dead code elimination
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048, !4
        store v9 to v8, !4
        v10 = load v0
        v11 = ptr_to_int v10 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = load v14, !13
        v16 = get_local ptr { u64, b256 }, __anon_00, !15
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !16
        v19 = const u64 1, !17
        store v19 to v18, !18
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr b256, v20, !19
        store v15 to v21, !20
        v22 = load v16, !5
        v23 = call sha256_20(v22), !22
        v24 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !28
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !29
        v27 = const u64 0, !27
        store v27 to v26, !30
        v28 = load v24, !31
        ret { u64, ( () | {  } ) } v28
    }

    pub fn sha256_20(s !33: { u64, b256 }) -> b256, !36 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = call new_23(), !41
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !43
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !44
        store v0 to v3, !45
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !46
        v6 = const u64 0, !47
        store v6 to v5, !48
        v7 = load v1, !49
        v8 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !51
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !37
        store v7 to v10, !52
        v11 = load v8, !37
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !53
        store v11 to v12, !53
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !54
        v14 = call hash_25(s, v13), !55
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !56
        v16 = load v15
        v17 = get_local ptr b256, result_buffer, !59
        v18 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !61
        store v18 to v17, !62
        v19 = get_local ptr b256, result_buffer, !64
        v20 = ptr_to_int v16 to u64, !57
        v21 = int_to_ptr v20 to ptr { { { u64, u64 }, u64 } }, !57
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v22, !66
        v24 = load v23, !57
        v25 = call ptr_44(v24), !68
        v26 = ptr_to_int v16 to u64, !57
        v27 = int_to_ptr v26 to ptr { { { u64, u64 }, u64 } }, !57
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { { u64, u64 }, u64 }, v28, !69
        v30 = load v29, !57
        v31 = call len_29(v30), !71
        v32 = asm(hash: v19, ptr: v25, bytes: v31) -> b256 hash, !73 {
            s256   hash ptr bytes, !74
        }
        ret b256 v32
    }

    pub fn new_23() -> { u64, u64 }, !75 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !76
        v1 = asm(size: v0, ptr) -> u64 ptr, !80 {
            aloc   size, !81
            move   ptr hp, !82
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !83
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !83
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !84
        store v7 to v6, !83
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self !85: { u64, b256 }, state !86: ptr { { { u64, u64 }, u64 } }) -> (), !88 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !89
        v4 = load v3
        v5 = const u64 8, !90
        v6 = asm(size: v5, ptr) -> u64 ptr, !93 {
            aloc   size, !81
            move   ptr hp, !82
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !94
        }
        v8 = const u64 8, !95
        v9 = call from_parts_33(v6, v8), !97
        v10 = call from_45(v9), !99
        v11 = call write_27(state, v10), !101
        v12 = ptr_to_int self to u64
        v13 = int_to_ptr v12 to ptr { u64, b256 }
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr b256, v14, !102
        v16 = load v15
        v17 = const u64 32, !103
        v18 = asm(size: v17, ptr) -> u64 ptr, !106 {
            aloc   size, !81
            move   ptr hp, !82
        }
        v19 = asm(r1: v16) -> { u64, u64, u64, u64 } r1, !108 {
        }
        v20 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !110
        store v19 to v20, !111
        v21 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !112
        v22 = load v21, !104
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !113
        store v22 to v23, !114
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !115
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !116
        v27 = load v26, !104
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !117
        v29 = const u64 1
        v30 = get_elem_ptr v28, ptr u64, v29, !118
        v31 = load v30, !104
        v32 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !119
        v33 = const u64 2
        v34 = get_elem_ptr v32, ptr u64, v33, !120
        v35 = load v34, !104
        v36 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !121
        v37 = const u64 3
        v38 = get_elem_ptr v36, ptr u64, v37, !122
        v39 = load v38, !104
        v40 = asm(ptr: v18, val_1: v27, val_2: v31, val_3: v35, val_4: v39) {
            sw     ptr val_1 i0, !123
            sw     ptr val_2 i1, !124
            sw     ptr val_3 i2, !125
            sw     ptr val_4 i3, !126
        }
        v41 = const u64 32, !127
        v42 = call from_parts_33(v18, v41), !129
        v43 = call from_45(v42), !131
        v44 = call write_27(state, v43), !133
        v45 = const unit ()
        ret () v45
    }

    pub fn write_27(self !134: ptr { { { u64, u64 }, u64 } }, bytes !135: { { u64, u64 }, u64 }) -> (), !136 {
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !65
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !137
        v5 = call len_29(v4), !139
        v6 = const u64 0, !140
        v7 = cmp eq v5 v6, !142
        v8 = const unit (), !143
        cbr v7, block0(v8), append_28_block1(), !144

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !146
        v11 = load v10, !137
        v12 = const u64 0, !147
        v13 = cmp eq v11 v12, !149
        cbr v13, append_28_block3(), append_28_block4(), !150

        append_28_block3():
        v14 = load v3, !137
        store v14 to v1, !152
        v15 = call clear_30(v3), !154
        v16 = const unit (), !155
        br block0(v16), !156

        append_28_block4():
        v17 = const u64 1
        v18 = get_elem_ptr v1, ptr u64, v17, !157
        v19 = load v18, !137
        v20 = add v19, v5, !159
        v21 = const u64 1
        v22 = get_elem_ptr v1, ptr u64, v21, !160
        v23 = load v22, !137
        v24 = const u64 0
        v25 = get_elem_ptr v1, ptr { u64, u64 }, v24, !162
        v26 = load v25, !137
        v27 = call capacity_32(v26), !164
        v28 = cmp lt v27 v20, !166
        v29 = const unit ()
        cbr v28, append_28_block6(), append_28_block8(v29), !167

        append_28_block6():
        v30 = const u64 0
        v31 = get_elem_ptr v1, ptr { u64, u64 }, v30, !168
        v32 = load v31, !137
        v33 = call ptr_38(v32), !170
        v34 = const u64 0
        v35 = get_elem_ptr v1, ptr { u64, u64 }, v34, !171
        v36 = load v35, !137
        v37 = call capacity_32(v36), !173
        v38 = cmp gt v20 v37, !176
        cbr v38, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v33), !177

        append_28_realloc_bytes_35_block0():
        v39 = asm(size: v20, ptr) -> u64 ptr, !179 {
            aloc   size, !81
            move   ptr hp, !82
        }
        v40 = const u64 0, !180
        v41 = cmp gt v37 v40, !182
        v42 = const unit ()
        cbr v41, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v42), !183

        append_28_realloc_bytes_35_block1():
        v43 = asm(dst: v39, src: v33, len: v37) {
            mcp    dst src len, !185
        }
        v44 = const unit ()
        br append_28_realloc_bytes_35_block3(v44), !186

        append_28_realloc_bytes_35_block3(v45: ()):
        br append_28_realloc_bytes_35_block5(v39), !187

        append_28_realloc_bytes_35_block5(v46: u64):
        v47 = call from_parts_33(v46, v20), !189
        v48 = get_local ptr slice, new_slice, !191
        store v47 to v48, !192
        v49 = get_local ptr slice, new_slice, !194
        v50 = load v49, !137
        v51 = call from_39(v50), !196
        v52 = const u64 0
        v53 = get_elem_ptr v1, ptr { u64, u64 }, v52, !198
        store v51 to v53, !199
        v54 = const unit ()
        br append_28_block8(v54), !137

        append_28_block8(v55: ()):
        v56 = const u64 0
        v57 = get_elem_ptr v1, ptr { u64, u64 }, v56, !200
        v58 = load v57, !137
        v59 = call ptr_38(v58), !202
        v60 = asm(ptr: v59, offset: v23, new) -> u64 new, !205 {
            add    new ptr offset, !206
        }
        v61 = load v3, !137
        v62 = call ptr_44(v61), !208
        v63 = asm(dst: v60, src: v62, len: v5) {
            mcp    dst src len, !185
        }
        v64 = const u64 1
        v65 = get_elem_ptr v1, ptr u64, v64, !210
        store v20 to v65, !211
        v66 = call clear_30(v3), !213
        v67 = const unit ()
        br block0(v67), !137

        block0(v68: ()):
        v69 = const unit ()
        ret () v69
    }

    pub fn len_29(self !214: { { u64, u64 }, u64 }) -> u64, !215 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !145
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !216: ptr { { u64, u64 }, u64 }) -> (), !217 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !218
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !219
        store v0 to v2, !219
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !220
        v5 = const u64 0, !221
        store v5 to v4, !220
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self !222: { u64, u64 }) -> u64, !223 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !224
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !226: u64, count !227: u64) -> slice, !228 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !229
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !229
        store ptr to v2, !229
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !229
        store count to v4, !229
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !232 {
        }
        ret slice v6
    }

    pub fn ptr_38(self !233: { u64, u64 }) -> u64, !234 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !235
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !236: slice) -> { u64, u64 }, !237 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !241 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !238
        store v0 to v1, !238
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !243
        v4 = load v3, !238
        v5 = call number_of_bytes_42(slice), !244
        v6 = get_local ptr { u64, u64 }, __anon_0, !245
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !245
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !245
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn number_of_bytes_42(self !246: slice) -> u64, !247 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !249 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !250
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self !251: { { u64, u64 }, u64 }) -> u64, !252 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !161
        v4 = load v3
        v5 = call ptr_38(v4), !253
        ret u64 v5
    }

    pub fn from_45(slice !254: slice) -> { { u64, u64 }, u64 }, !255 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !256
        v1 = call number_of_bytes_42(slice), !257
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !258
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !258
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !258
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }
}

// IR: [const-demotion] Demotion of by-value constants to by-reference
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048

        entry():
        v0 = get_local ptr b256, __const
        v1 = load v0
        v2 = get_local ptr b256, __const0
        v3 = load v2
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        store v1 to v6, !4
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        v9 = const u64 0
        store v9 to v8, !4
        v10 = const u64 2
        v11 = get_elem_ptr v4, ptr b256, v10
        store v3 to v11, !4
        v12 = load v4
        v13 = ptr_to_int v12 to u64, !8
        v14 = int_to_ptr v13 to ptr { b256, u64, b256 }, !9
        v15 = const u64 2
        v16 = get_elem_ptr v14, ptr b256, v15, !12
        v17 = load v16, !13
        v18 = get_local ptr { u64, b256 }, __anon_00, !15
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !16
        v21 = const u64 1, !17
        store v21 to v20, !18
        v22 = const u64 1
        v23 = get_elem_ptr v18, ptr b256, v22, !19
        store v17 to v23, !20
        v24 = load v18, !5
        v25 = call sha256_20(v24), !22
        v26 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !28
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !29
        v29 = const u64 0, !27
        store v29 to v28, !30
        v30 = load v26, !31
        ret { u64, ( () | {  } ) } v30
    }

    pub fn sha256_20(s !33: { u64, b256 }) -> b256, !36 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: { u64, b256 }):
        v0 = get_local ptr b256, __const
        v1 = load v0
        v2 = call new_23(), !41
        v3 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !43
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64, u64 }, v4, !44
        store v2 to v5, !45
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !46
        v8 = const u64 0, !47
        store v8 to v7, !48
        v9 = load v3, !49
        v10 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !51
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !37
        store v9 to v12, !52
        v13 = load v10, !37
        v14 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !53
        store v13 to v14, !53
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !54
        v16 = call hash_25(s, v15), !55
        v17 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !56
        v18 = load v17
        v19 = get_local ptr b256, result_buffer, !59
        store v1 to v19, !60
        v20 = get_local ptr b256, result_buffer, !62
        v21 = ptr_to_int v18 to u64, !57
        v22 = int_to_ptr v21 to ptr { { { u64, u64 }, u64 } }, !57
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr { { u64, u64 }, u64 }, v23, !64
        v25 = load v24, !57
        v26 = call ptr_44(v25), !66
        v27 = ptr_to_int v18 to u64, !57
        v28 = int_to_ptr v27 to ptr { { { u64, u64 }, u64 } }, !57
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr { { u64, u64 }, u64 }, v29, !67
        v31 = load v30, !57
        v32 = call len_29(v31), !69
        v33 = asm(hash: v20, ptr: v26, bytes: v32) -> b256 hash, !71 {
            s256   hash ptr bytes, !72
        }
        ret b256 v33
    }

    pub fn new_23() -> { u64, u64 }, !73 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !74
        v1 = asm(size: v0, ptr) -> u64 ptr, !78 {
            aloc   size, !79
            move   ptr hp, !80
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !81
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !81
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !82
        store v7 to v6, !81
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self !83: { u64, b256 }, state !84: ptr { { { u64, u64 }, u64 } }) -> (), !86 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_

        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !87
        v4 = load v3
        v5 = const u64 8, !88
        v6 = asm(size: v5, ptr) -> u64 ptr, !91 {
            aloc   size, !79
            move   ptr hp, !80
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !92
        }
        v8 = const u64 8, !93
        v9 = call from_parts_33(v6, v8), !95
        v10 = call from_45(v9), !97
        v11 = call write_27(state, v10), !99
        v12 = ptr_to_int self to u64
        v13 = int_to_ptr v12 to ptr { u64, b256 }
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr b256, v14, !100
        v16 = load v15
        v17 = const u64 32, !101
        v18 = asm(size: v17, ptr) -> u64 ptr, !104 {
            aloc   size, !79
            move   ptr hp, !80
        }
        v19 = asm(r1: v16) -> { u64, u64, u64, u64 } r1, !106 {
        }
        v20 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !108
        store v19 to v20, !109
        v21 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !110
        v22 = load v21, !102
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !111
        store v22 to v23, !112
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !113
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !114
        v27 = load v26, !102
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !115
        v29 = const u64 1
        v30 = get_elem_ptr v28, ptr u64, v29, !116
        v31 = load v30, !102
        v32 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !117
        v33 = const u64 2
        v34 = get_elem_ptr v32, ptr u64, v33, !118
        v35 = load v34, !102
        v36 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !119
        v37 = const u64 3
        v38 = get_elem_ptr v36, ptr u64, v37, !120
        v39 = load v38, !102
        v40 = asm(ptr: v18, val_1: v27, val_2: v31, val_3: v35, val_4: v39) {
            sw     ptr val_1 i0, !121
            sw     ptr val_2 i1, !122
            sw     ptr val_3 i2, !123
            sw     ptr val_4 i3, !124
        }
        v41 = const u64 32, !125
        v42 = call from_parts_33(v18, v41), !127
        v43 = call from_45(v42), !129
        v44 = call write_27(state, v43), !131
        v45 = const unit ()
        ret () v45
    }

    pub fn write_27(self !132: ptr { { { u64, u64 }, u64 } }, bytes !133: { { u64, u64 }, u64 }) -> (), !134 {
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !63
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !135
        v5 = call len_29(v4), !137
        v6 = const u64 0, !138
        v7 = cmp eq v5 v6, !140
        v8 = const unit (), !141
        cbr v7, block0(v8), append_28_block1(), !142

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !144
        v11 = load v10, !135
        v12 = const u64 0, !145
        v13 = cmp eq v11 v12, !147
        cbr v13, append_28_block3(), append_28_block4(), !148

        append_28_block3():
        v14 = load v3, !135
        store v14 to v1, !150
        v15 = call clear_30(v3), !152
        v16 = const unit (), !153
        br block0(v16), !154

        append_28_block4():
        v17 = const u64 1
        v18 = get_elem_ptr v1, ptr u64, v17, !155
        v19 = load v18, !135
        v20 = add v19, v5, !157
        v21 = const u64 1
        v22 = get_elem_ptr v1, ptr u64, v21, !158
        v23 = load v22, !135
        v24 = const u64 0
        v25 = get_elem_ptr v1, ptr { u64, u64 }, v24, !160
        v26 = load v25, !135
        v27 = call capacity_32(v26), !162
        v28 = cmp lt v27 v20, !164
        v29 = const unit ()
        cbr v28, append_28_block6(), append_28_block8(v29), !165

        append_28_block6():
        v30 = const u64 0
        v31 = get_elem_ptr v1, ptr { u64, u64 }, v30, !166
        v32 = load v31, !135
        v33 = call ptr_38(v32), !168
        v34 = const u64 0
        v35 = get_elem_ptr v1, ptr { u64, u64 }, v34, !169
        v36 = load v35, !135
        v37 = call capacity_32(v36), !171
        v38 = cmp gt v20 v37, !174
        cbr v38, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v33), !175

        append_28_realloc_bytes_35_block0():
        v39 = asm(size: v20, ptr) -> u64 ptr, !177 {
            aloc   size, !79
            move   ptr hp, !80
        }
        v40 = const u64 0, !178
        v41 = cmp gt v37 v40, !180
        v42 = const unit ()
        cbr v41, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v42), !181

        append_28_realloc_bytes_35_block1():
        v43 = asm(dst: v39, src: v33, len: v37) {
            mcp    dst src len, !183
        }
        v44 = const unit ()
        br append_28_realloc_bytes_35_block3(v44), !184

        append_28_realloc_bytes_35_block3(v45: ()):
        br append_28_realloc_bytes_35_block5(v39), !185

        append_28_realloc_bytes_35_block5(v46: u64):
        v47 = call from_parts_33(v46, v20), !187
        v48 = get_local ptr slice, new_slice, !189
        store v47 to v48, !190
        v49 = get_local ptr slice, new_slice, !192
        v50 = load v49, !135
        v51 = call from_39(v50), !194
        v52 = const u64 0
        v53 = get_elem_ptr v1, ptr { u64, u64 }, v52, !196
        store v51 to v53, !197
        v54 = const unit ()
        br append_28_block8(v54), !135

        append_28_block8(v55: ()):
        v56 = const u64 0
        v57 = get_elem_ptr v1, ptr { u64, u64 }, v56, !198
        v58 = load v57, !135
        v59 = call ptr_38(v58), !200
        v60 = asm(ptr: v59, offset: v23, new) -> u64 new, !203 {
            add    new ptr offset, !204
        }
        v61 = load v3, !135
        v62 = call ptr_44(v61), !206
        v63 = asm(dst: v60, src: v62, len: v5) {
            mcp    dst src len, !183
        }
        v64 = const u64 1
        v65 = get_elem_ptr v1, ptr u64, v64, !208
        store v20 to v65, !209
        v66 = call clear_30(v3), !211
        v67 = const unit ()
        br block0(v67), !135

        block0(v68: ()):
        v69 = const unit ()
        ret () v69
    }

    pub fn len_29(self !212: { { u64, u64 }, u64 }) -> u64, !213 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !143
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !214: ptr { { u64, u64 }, u64 }) -> (), !215 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !216
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !217
        store v0 to v2, !217
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !218
        v5 = const u64 0, !219
        store v5 to v4, !218
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self !220: { u64, u64 }) -> u64, !221 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !222
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !224: u64, count !225: u64) -> slice, !226 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !227
        store ptr to v2, !227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !227
        store count to v4, !227
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !230 {
        }
        ret slice v6
    }

    pub fn ptr_38(self !231: { u64, u64 }) -> u64, !232 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !233
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice !234: slice) -> { u64, u64 }, !235 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !239 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !236
        store v0 to v1, !236
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3, !236
        v5 = call number_of_bytes_42(slice), !242
        v6 = get_local ptr { u64, u64 }, __anon_0, !243
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v4 to v8, !243
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        store v5 to v10, !243
        v11 = load v6
        ret { u64, u64 } v11
    }

    pub fn number_of_bytes_42(self !244: slice) -> u64, !245 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !247 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !248
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self !249: { { u64, u64 }, u64 }) -> u64, !250 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !159
        v4 = load v3
        v5 = call ptr_38(v4), !251
        ret u64 v5
    }

    pub fn from_45(slice !252: slice) -> { { u64, u64 }, u64 }, !253 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_39(slice), !254
        v1 = call number_of_bytes_42(slice), !255
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !256
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !256
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !256
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }
}

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
contract {
    pub entry fn test_function<2151bd4b>() -> { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr b256, __const
        v1 = load v0
        v2 = get_local ptr b256, __const0
        v3 = load v2
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        store v1 to v6, !4
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        v9 = const u64 0
        store v9 to v8, !4
        v10 = const u64 2
        v11 = get_elem_ptr v4, ptr b256, v10
        store v3 to v11, !4
        v12 = load v4
        v13 = ptr_to_int v12 to u64, !8
        v14 = int_to_ptr v13 to ptr { b256, u64, b256 }, !9
        v15 = const u64 2
        v16 = get_elem_ptr v14, ptr b256, v15, !12
        v17 = load v16, !13
        v18 = get_local ptr { u64, b256 }, __anon_00, !15
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !16
        v21 = const u64 1, !17
        store v21 to v20, !18
        v22 = const u64 1
        v23 = get_elem_ptr v18, ptr b256, v22, !19
        store v17 to v23, !20
        v24 = load v18, !5
        v25 = get_local ptr { u64, b256 }, __tmp_arg
        store v24 to v25
        v26 = call sha256_20(v25)
        v27 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !26
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !27
        v30 = const u64 0, !25
        store v30 to v29, !28
        v31 = load v27, !29
        ret { u64, ( () | {  } ) } v31
    }

    pub fn sha256_20(s: ptr { u64, b256 }) -> b256, !33 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }):
        v0 = load s
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = call new_23(), !38
        v4 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !40
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { u64, u64 }, v5, !41
        store v3 to v6, !42
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !43
        v9 = const u64 0, !44
        store v9 to v8, !45
        v10 = load v4, !46
        v11 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !48
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { { u64, u64 }, u64 }, v12, !34
        store v10 to v13, !49
        v14 = load v11, !34
        v15 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !50
        store v14 to v15, !50
        v16 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !51
        v17 = get_local ptr { u64, b256 }, __tmp_arg
        store v0 to v17
        v18 = call hash_25(v17, v16)
        v19 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !52
        v20 = load v19
        v21 = get_local ptr b256, result_buffer, !55
        store v2 to v21, !56
        v22 = get_local ptr b256, result_buffer, !58
        v23 = ptr_to_int v20 to u64, !53
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !53
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !60
        v27 = load v26, !53
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v27 to v28
        v29 = call ptr_44(v28)
        v30 = ptr_to_int v20 to u64, !53
        v31 = int_to_ptr v30 to ptr { { { u64, u64 }, u64 } }, !53
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { { u64, u64 }, u64 }, v32, !61
        v34 = load v33, !53
        v35 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v34 to v35
        v36 = call len_29(v35)
        v37 = asm(hash: v22, ptr: v29, bytes: v36) -> b256 hash, !63 {
            s256   hash ptr bytes, !64
        }
        ret b256 v37
    }

    pub fn new_23() -> { u64, u64 }, !65 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !66
        v1 = asm(size: v0, ptr) -> u64 ptr, !70 {
            aloc   size, !71
            move   ptr hp, !72
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !73
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !73
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !74
        store v7 to v6, !73
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !75: ptr { { { u64, u64 }, u64 } }) -> (), !77 {
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, b256 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !78
        v5 = load v4
        v6 = const u64 8, !79
        v7 = asm(size: v6, ptr) -> u64 ptr, !82 {
            aloc   size, !71
            move   ptr hp, !72
        }
        v8 = asm(ptr: v7, val: v5) {
            sw     ptr val i0, !83
        }
        v9 = const u64 8, !84
        v10 = call from_parts_33(v7, v9), !86
        v11 = get_local ptr slice, __tmp_arg1
        store v10 to v11
        v12 = call from_45(v11)
        v13 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v12 to v13
        v14 = call write_27(state, v13)
        v15 = ptr_to_int v0 to u64
        v16 = int_to_ptr v15 to ptr { u64, b256 }
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr b256, v17, !87
        v19 = load v18
        v20 = const u64 32, !88
        v21 = asm(size: v20, ptr) -> u64 ptr, !91 {
            aloc   size, !71
            move   ptr hp, !72
        }
        v22 = asm(r1: v19) -> { u64, u64, u64, u64 } r1, !93 {
        }
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !95
        store v22 to v23, !96
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !97
        v25 = load v24, !89
        v26 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !98
        store v25 to v26, !99
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !100
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !101
        v30 = load v29, !89
        v31 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !102
        v32 = const u64 1
        v33 = get_elem_ptr v31, ptr u64, v32, !103
        v34 = load v33, !89
        v35 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !104
        v36 = const u64 2
        v37 = get_elem_ptr v35, ptr u64, v36, !105
        v38 = load v37, !89
        v39 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !106
        v40 = const u64 3
        v41 = get_elem_ptr v39, ptr u64, v40, !107
        v42 = load v41, !89
        v43 = asm(ptr: v21, val_1: v30, val_2: v34, val_3: v38, val_4: v42) {
            sw     ptr val_1 i0, !108
            sw     ptr val_2 i1, !109
            sw     ptr val_3 i2, !110
            sw     ptr val_4 i3, !111
        }
        v44 = const u64 32, !112
        v45 = call from_parts_33(v21, v44), !114
        v46 = get_local ptr slice, __tmp_arg2
        store v45 to v46
        v47 = call from_45(v46)
        v48 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v47 to v48
        v49 = call write_27(state, v48)
        v50 = const unit ()
        ret () v50
    }

    pub fn write_27(self !115: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !116 {
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = load bytes
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v1, !59
        v3 = ptr_to_int v0 to u64
        v4 = int_to_ptr v3 to ptr { { u64, u64 }, u64 }
        v5 = load v4, !117
        v6 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v5 to v6
        v7 = call len_29(v6)
        v8 = const u64 0, !118
        v9 = cmp eq v7 v8, !120
        v10 = const unit (), !121
        cbr v9, block0(v10), append_28_block1(), !122

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !124
        v13 = load v12, !117
        v14 = const u64 0, !125
        v15 = cmp eq v13 v14, !127
        cbr v15, append_28_block3(), append_28_block4(), !128

        append_28_block3():
        v16 = load v4, !117
        store v16 to v2, !130
        v17 = call clear_30(v4), !132
        v18 = const unit (), !133
        br block0(v18), !134

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v2, ptr u64, v19, !135
        v21 = load v20, !117
        v22 = add v21, v7, !137
        v23 = const u64 1
        v24 = get_elem_ptr v2, ptr u64, v23, !138
        v25 = load v24, !117
        v26 = const u64 0
        v27 = get_elem_ptr v2, ptr { u64, u64 }, v26, !140
        v28 = load v27, !117
        v29 = get_local ptr { u64, u64 }, __tmp_arg0
        store v28 to v29
        v30 = call capacity_32(v29)
        v31 = cmp lt v30 v22, !142
        v32 = const unit ()
        cbr v31, append_28_block6(), append_28_block8(v32), !143

        append_28_block6():
        v33 = const u64 0
        v34 = get_elem_ptr v2, ptr { u64, u64 }, v33, !144
        v35 = load v34, !117
        v36 = get_local ptr { u64, u64 }, __tmp_arg2
        store v35 to v36
        v37 = call ptr_38(v36)
        v38 = const u64 0
        v39 = get_elem_ptr v2, ptr { u64, u64 }, v38, !145
        v40 = load v39, !117
        v41 = get_local ptr { u64, u64 }, __tmp_arg1
        store v40 to v41
        v42 = call capacity_32(v41)
        v43 = cmp gt v22 v42, !148
        cbr v43, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v37), !149

        append_28_realloc_bytes_35_block0():
        v44 = asm(size: v22, ptr) -> u64 ptr, !151 {
            aloc   size, !71
            move   ptr hp, !72
        }
        v45 = const u64 0, !152
        v46 = cmp gt v42 v45, !154
        v47 = const unit ()
        cbr v46, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v47), !155

        append_28_realloc_bytes_35_block1():
        v48 = asm(dst: v44, src: v37, len: v42) {
            mcp    dst src len, !157
        }
        v49 = const unit ()
        br append_28_realloc_bytes_35_block3(v49), !158

        append_28_realloc_bytes_35_block3(v50: ()):
        br append_28_realloc_bytes_35_block5(v44), !159

        append_28_realloc_bytes_35_block5(v51: u64):
        v52 = call from_parts_33(v51, v22), !161
        v53 = get_local ptr slice, new_slice, !163
        store v52 to v53, !164
        v54 = get_local ptr slice, new_slice, !166
        v55 = load v54, !117
        v56 = get_local ptr slice, __tmp_arg4
        store v55 to v56
        v57 = call from_39(v56)
        v58 = const u64 0
        v59 = get_elem_ptr v2, ptr { u64, u64 }, v58, !168
        store v57 to v59, !169
        v60 = const unit ()
        br append_28_block8(v60), !117

        append_28_block8(v61: ()):
        v62 = const u64 0
        v63 = get_elem_ptr v2, ptr { u64, u64 }, v62, !170
        v64 = load v63, !117
        v65 = get_local ptr { u64, u64 }, __tmp_arg3
        store v64 to v65
        v66 = call ptr_38(v65)
        v67 = asm(ptr: v66, offset: v25, new) -> u64 new, !173 {
            add    new ptr offset, !174
        }
        v68 = load v4, !117
        v69 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        store v68 to v69
        v70 = call ptr_44(v69)
        v71 = asm(dst: v67, src: v70, len: v7) {
            mcp    dst src len, !157
        }
        v72 = const u64 1
        v73 = get_elem_ptr v2, ptr u64, v72, !176
        store v22 to v73, !177
        v74 = call clear_30(v4), !179
        v75 = const unit ()
        br block0(v75), !117

        block0(v76: ()):
        v77 = const unit ()
        ret () v77
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !180 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !123
        v5 = load v4
        ret u64 v5
    }

    pub fn clear_30(self !181: ptr { { u64, u64 }, u64 }) -> (), !182 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = call new_23(), !183
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { u64, u64 }, v1, !184
        store v0 to v2, !184
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !185
        v5 = const u64 0, !186
        store v5 to v4, !185
        v6 = const unit ()
        ret () v6
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !187 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !188
        v5 = load v4
        ret u64 v5
    }

    pub fn from_parts_33(ptr !190: u64, count !191: u64) -> slice, !192 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !193
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !193
        store ptr to v2, !193
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !193
        store count to v4, !193
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !196 {
        }
        ret slice v6
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !197 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !198
        v5 = load v4
        ret u64 v5
    }

    pub fn from_39(slice: ptr slice) -> { u64, u64 }, !199 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local slice __tmp_arg

        entry(slice: ptr slice):
        v0 = load slice
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !203 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !200
        store v1 to v2, !200
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !205
        v5 = load v4, !200
        v6 = get_local ptr slice, __tmp_arg
        store v0 to v6
        v7 = call number_of_bytes_42(v6)
        v8 = get_local ptr { u64, u64 }, __anon_0, !206
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v5 to v10, !206
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        store v7 to v12, !206
        v13 = load v8
        ret { u64, u64 } v13
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !207 {
        local { u64, u64 } __anon_0

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !209 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !210
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !211 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !139
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_38(v6)
        ret u64 v7
    }

    pub fn from_45(slice: ptr slice) -> { { u64, u64 }, u64 }, !212 {
        local { { u64, u64 }, u64 } __anon_0
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice):
        v0 = load slice
        v1 = get_local ptr slice, __tmp_arg
        store v0 to v1
        v2 = call from_39(v1)
        v3 = get_local ptr slice, __tmp_arg0
        store v0 to v3
        v4 = call number_of_bytes_42(v3)
        v5 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !213
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { u64, u64 }, v6
        store v2 to v7, !213
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        store v4 to v9, !213
        v10 = load v5
        ret { { u64, u64 }, u64 } v10
    }
}

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, ( () | {  } ) } __ret_value
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __const0
        v4 = load v3
        v5 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr b256, v6
        store v2 to v7, !4
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !4
        v11 = const u64 2
        v12 = get_elem_ptr v5, ptr b256, v11
        store v4 to v12, !4
        v13 = load v5
        v14 = ptr_to_int v13 to u64, !8
        v15 = int_to_ptr v14 to ptr { b256, u64, b256 }, !9
        v16 = const u64 2
        v17 = get_elem_ptr v15, ptr b256, v16, !12
        v18 = load v17, !13
        v19 = get_local ptr { u64, b256 }, __anon_00, !15
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !16
        v22 = const u64 1, !17
        store v22 to v21, !18
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr b256, v23, !19
        store v18 to v24, !20
        v25 = load v19, !5
        v26 = get_local ptr { u64, b256 }, __tmp_arg
        store v25 to v26
        v27 = get_local ptr b256, __ret_val
        v28 = call sha256_20(v26, v27)
        v29 = load v28
        v30 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !26
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !27
        v33 = const u64 0, !25
        store v33 to v32, !28
        v34 = load v30, !29
        store v34 to v0
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !33 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr { u64, u64 }, __ret_val
        v4 = call new_23(v3)
        v5 = load v4
        v6 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !38
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { u64, u64 }, v7, !39
        store v5 to v8, !40
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !41
        v11 = const u64 0, !42
        store v11 to v10, !43
        v12 = load v6, !44
        v13 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !46
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { { u64, u64 }, u64 }, v14, !34
        store v12 to v15, !47
        v16 = load v13, !34
        v17 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !48
        store v16 to v17, !48
        v18 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !49
        v19 = get_local ptr { u64, b256 }, __tmp_arg
        store v0 to v19
        v20 = call hash_25(v19, v18)
        v21 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !50
        v22 = load v21
        v23 = get_local ptr b256, result_buffer, !53
        store v2 to v23, !54
        v24 = get_local ptr b256, result_buffer, !56
        v25 = ptr_to_int v22 to u64, !51
        v26 = int_to_ptr v25 to ptr { { { u64, u64 }, u64 } }, !51
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, u64 }, v27, !58
        v29 = load v28, !51
        v30 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v29 to v30
        v31 = call ptr_44(v30)
        v32 = ptr_to_int v22 to u64, !51
        v33 = int_to_ptr v32 to ptr { { { u64, u64 }, u64 } }, !51
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { { u64, u64 }, u64 }, v34, !59
        v36 = load v35, !51
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v36 to v37
        v38 = call len_29(v37)
        v39 = asm(hash: v24, ptr: v31, bytes: v38) -> b256 hash, !61 {
            s256   hash ptr bytes, !62
        }
        store v39 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !63 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !64
        v1 = asm(size: v0, ptr) -> u64 ptr, !68 {
            aloc   size, !69
            move   ptr hp, !70
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !71
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !71
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !72
        store v7 to v6, !71
        v8 = load v2
        store v8 to __ret_value
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !73: ptr { { { u64, u64 }, u64 } }) -> (), !75 {
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, b256 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !76
        v5 = load v4
        v6 = const u64 8, !77
        v7 = asm(size: v6, ptr) -> u64 ptr, !80 {
            aloc   size, !69
            move   ptr hp, !70
        }
        v8 = asm(ptr: v7, val: v5) {
            sw     ptr val i0, !81
        }
        v9 = get_local ptr slice, __ret_val
        v10 = const u64 8, !82
        v11 = call from_parts_33(v7, v10, v9)
        v12 = load v11
        v13 = get_local ptr slice, __tmp_arg1
        store v12 to v13
        v14 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v15 = call from_45(v13, v14)
        v16 = load v15
        v17 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v16 to v17
        v18 = call write_27(state, v17)
        v19 = ptr_to_int v0 to u64
        v20 = int_to_ptr v19 to ptr { u64, b256 }
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr b256, v21, !83
        v23 = load v22
        v24 = const u64 32, !84
        v25 = asm(size: v24, ptr) -> u64 ptr, !87 {
            aloc   size, !69
            move   ptr hp, !70
        }
        v26 = asm(r1: v23) -> { u64, u64, u64, u64 } r1, !89 {
        }
        v27 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !91
        store v26 to v27, !92
        v28 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !93
        v29 = load v28, !85
        v30 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !94
        store v29 to v30, !95
        v31 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !96
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !97
        v34 = load v33, !85
        v35 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !98
        v36 = const u64 1
        v37 = get_elem_ptr v35, ptr u64, v36, !99
        v38 = load v37, !85
        v39 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !100
        v40 = const u64 2
        v41 = get_elem_ptr v39, ptr u64, v40, !101
        v42 = load v41, !85
        v43 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !102
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44, !103
        v46 = load v45, !85
        v47 = asm(ptr: v25, val_1: v34, val_2: v38, val_3: v42, val_4: v46) {
            sw     ptr val_1 i0, !104
            sw     ptr val_2 i1, !105
            sw     ptr val_3 i2, !106
            sw     ptr val_4 i3, !107
        }
        v48 = get_local ptr slice, __ret_val0
        v49 = const u64 32, !108
        v50 = call from_parts_33(v25, v49, v48)
        v51 = load v50
        v52 = get_local ptr slice, __tmp_arg2
        store v51 to v52
        v53 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v54 = call from_45(v52, v53)
        v55 = load v54
        v56 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v55 to v56
        v57 = call write_27(state, v56)
        v58 = const unit ()
        ret () v58
    }

    pub fn write_27(self !109: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !110 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = load bytes
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v1, !57
        v3 = ptr_to_int v0 to u64
        v4 = int_to_ptr v3 to ptr { { u64, u64 }, u64 }
        v5 = load v4, !111
        v6 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v5 to v6
        v7 = call len_29(v6)
        v8 = const u64 0, !112
        v9 = cmp eq v7 v8, !114
        v10 = const unit (), !115
        cbr v9, block0(v10), append_28_block1(), !116

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !118
        v13 = load v12, !111
        v14 = const u64 0, !119
        v15 = cmp eq v13 v14, !121
        cbr v15, append_28_block3(), append_28_block4(), !122

        append_28_block3():
        v16 = load v4, !111
        store v16 to v2, !124
        v17 = call clear_30(v4), !126
        v18 = const unit (), !127
        br block0(v18), !128

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v2, ptr u64, v19, !129
        v21 = load v20, !111
        v22 = add v21, v7, !131
        v23 = const u64 1
        v24 = get_elem_ptr v2, ptr u64, v23, !132
        v25 = load v24, !111
        v26 = const u64 0
        v27 = get_elem_ptr v2, ptr { u64, u64 }, v26, !134
        v28 = load v27, !111
        v29 = get_local ptr { u64, u64 }, __tmp_arg0
        store v28 to v29
        v30 = call capacity_32(v29)
        v31 = cmp lt v30 v22, !136
        v32 = const unit ()
        cbr v31, append_28_block6(), append_28_block8(v32), !137

        append_28_block6():
        v33 = const u64 0
        v34 = get_elem_ptr v2, ptr { u64, u64 }, v33, !138
        v35 = load v34, !111
        v36 = get_local ptr { u64, u64 }, __tmp_arg2
        store v35 to v36
        v37 = call ptr_38(v36)
        v38 = const u64 0
        v39 = get_elem_ptr v2, ptr { u64, u64 }, v38, !139
        v40 = load v39, !111
        v41 = get_local ptr { u64, u64 }, __tmp_arg1
        store v40 to v41
        v42 = call capacity_32(v41)
        v43 = cmp gt v22 v42, !142
        cbr v43, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v37), !143

        append_28_realloc_bytes_35_block0():
        v44 = asm(size: v22, ptr) -> u64 ptr, !145 {
            aloc   size, !69
            move   ptr hp, !70
        }
        v45 = const u64 0, !146
        v46 = cmp gt v42 v45, !148
        v47 = const unit ()
        cbr v46, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v47), !149

        append_28_realloc_bytes_35_block1():
        v48 = asm(dst: v44, src: v37, len: v42) {
            mcp    dst src len, !151
        }
        v49 = const unit ()
        br append_28_realloc_bytes_35_block3(v49), !152

        append_28_realloc_bytes_35_block3(v50: ()):
        br append_28_realloc_bytes_35_block5(v44), !153

        append_28_realloc_bytes_35_block5(v51: u64):
        v52 = get_local ptr slice, __ret_val
        v53 = call from_parts_33(v51, v22, v52)
        v54 = load v53
        v55 = get_local ptr slice, new_slice, !155
        store v54 to v55, !156
        v56 = get_local ptr slice, new_slice, !158
        v57 = load v56, !111
        v58 = get_local ptr slice, __tmp_arg4
        store v57 to v58
        v59 = get_local ptr { u64, u64 }, __ret_val0
        v60 = call from_39(v58, v59)
        v61 = load v60
        v62 = const u64 0
        v63 = get_elem_ptr v2, ptr { u64, u64 }, v62, !160
        store v61 to v63, !161
        v64 = const unit ()
        br append_28_block8(v64), !111

        append_28_block8(v65: ()):
        v66 = const u64 0
        v67 = get_elem_ptr v2, ptr { u64, u64 }, v66, !162
        v68 = load v67, !111
        v69 = get_local ptr { u64, u64 }, __tmp_arg3
        store v68 to v69
        v70 = call ptr_38(v69)
        v71 = asm(ptr: v70, offset: v25, new) -> u64 new, !165 {
            add    new ptr offset, !166
        }
        v72 = load v4, !111
        v73 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        store v72 to v73
        v74 = call ptr_44(v73)
        v75 = asm(dst: v71, src: v74, len: v7) {
            mcp    dst src len, !151
        }
        v76 = const u64 1
        v77 = get_elem_ptr v2, ptr u64, v76, !168
        store v22 to v77, !169
        v78 = call clear_30(v4), !171
        v79 = const unit ()
        br block0(v79), !111

        block0(v80: ()):
        v81 = const unit ()
        ret () v81
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !172 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !117
        v5 = load v4
        ret u64 v5
    }

    pub fn clear_30(self !173: ptr { { u64, u64 }, u64 }) -> (), !174 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !175
        store v2 to v4, !175
        v5 = const u64 1
        v6 = get_elem_ptr self, ptr u64, v5, !176
        v7 = const u64 0, !177
        store v7 to v6, !176
        v8 = const unit ()
        ret () v8
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !178 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !179
        v5 = load v4
        ret u64 v5
    }

    pub fn from_parts_33(ptr !181: u64, count !182: u64, __ret_value: ptr slice) -> ptr slice, !183 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __anon_0, !184
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !184
        store ptr to v2, !184
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !184
        store count to v4, !184
        v5 = load v0
        v6 = asm(ptr: v5) -> slice ptr, !187 {
        }
        store v6 to __ret_value
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !188 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !189
        v5 = load v4
        ret u64 v5
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !190 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = load slice
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !194 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !191
        store v1 to v2, !191
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !196
        v5 = load v4, !191
        v6 = get_local ptr slice, __tmp_arg
        store v0 to v6
        v7 = call number_of_bytes_42(v6)
        v8 = get_local ptr { u64, u64 }, __anon_0, !197
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v5 to v10, !197
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        store v7 to v12, !197
        v13 = load v8
        store v13 to __ret_value
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !198 {
        local { u64, u64 } __anon_0

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !200 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !201
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !202 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !133
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_38(v6)
        ret u64 v7
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !203 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = load slice
        v1 = get_local ptr slice, __tmp_arg
        store v0 to v1
        v2 = get_local ptr { u64, u64 }, __ret_val
        v3 = call from_39(v1, v2)
        v4 = load v3
        v5 = get_local ptr slice, __tmp_arg0
        store v0 to v5
        v6 = call number_of_bytes_42(v5)
        v7 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !204
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8
        store v4 to v9, !204
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        store v6 to v11, !204
        v12 = load v7
        store v12 to __ret_value
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, ( () | {  } ) } __ret_value
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __const0
        v4 = load v3
        v5 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr b256, v6
        store v2 to v7, !4
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !4
        v11 = const u64 2
        v12 = get_elem_ptr v5, ptr b256, v11
        store v4 to v12, !4
        v13 = load v5
        v14 = ptr_to_int v5 to u64, !8
        v15 = int_to_ptr v14 to ptr { b256, u64, b256 }, !9
        v16 = const u64 2
        v17 = get_elem_ptr v15, ptr b256, v16, !12
        v18 = load v17, !13
        v19 = get_local ptr { u64, b256 }, __anon_00, !15
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !16
        v22 = const u64 1, !17
        store v22 to v21, !18
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr b256, v23, !19
        store v18 to v24, !20
        v25 = load v19, !5
        v26 = get_local ptr { u64, b256 }, __tmp_arg
        store v25 to v26
        v27 = get_local ptr b256, __ret_val
        v28 = call sha256_20(v26, v27)
        v29 = load v28
        v30 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !26
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !27
        v33 = const u64 0, !25
        store v33 to v32, !28
        v34 = load v30, !29
        store v34 to v0
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !33 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr { u64, u64 }, __ret_val
        v4 = call new_23(v3)
        v5 = load v4
        v6 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !38
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { u64, u64 }, v7, !39
        store v5 to v8, !40
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !41
        v11 = const u64 0, !42
        store v11 to v10, !43
        v12 = load v6, !44
        v13 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !46
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { { u64, u64 }, u64 }, v14, !34
        store v12 to v15, !47
        v16 = load v13, !34
        v17 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !48
        store v16 to v17, !48
        v18 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !49
        v19 = get_local ptr { u64, b256 }, __tmp_arg
        store v0 to v19
        v20 = call hash_25(v19, v18)
        v21 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !50
        v22 = load v21
        v23 = get_local ptr b256, result_buffer, !53
        store v2 to v23, !54
        v24 = get_local ptr b256, result_buffer, !56
        v25 = ptr_to_int v21 to u64, !51
        v26 = int_to_ptr v25 to ptr { { { u64, u64 }, u64 } }, !51
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, u64 }, v27, !58
        v29 = load v28, !51
        v30 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v29 to v30
        v31 = call ptr_44(v30)
        v32 = ptr_to_int v21 to u64, !51
        v33 = int_to_ptr v32 to ptr { { { u64, u64 }, u64 } }, !51
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { { u64, u64 }, u64 }, v34, !59
        v36 = load v35, !51
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v36 to v37
        v38 = call len_29(v37)
        v39 = asm(hash: v24, ptr: v31, bytes: v38) -> ptr b256 hash {
            s256   hash ptr bytes, !60
        }
        v40 = load v39
        store v40 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !61 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !62
        v1 = asm(size: v0, ptr) -> u64 ptr, !66 {
            aloc   size, !67
            move   ptr hp, !68
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !69
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !69
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !70
        store v7 to v6, !69
        v8 = load v2
        store v8 to __ret_value
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !71: ptr { { { u64, u64 }, u64 } }) -> (), !73 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, b256 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !74
        v5 = load v4
        v6 = const u64 8, !75
        v7 = asm(size: v6, ptr) -> u64 ptr, !78 {
            aloc   size, !67
            move   ptr hp, !68
        }
        v8 = asm(ptr: v7, val: v5) {
            sw     ptr val i0, !79
        }
        v9 = get_local ptr slice, __ret_val
        v10 = const u64 8, !80
        v11 = call from_parts_33(v7, v10, v9)
        v12 = load v11
        v13 = get_local ptr slice, __tmp_arg1
        store v12 to v13
        v14 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v15 = call from_45(v13, v14)
        v16 = load v15
        v17 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v16 to v17
        v18 = call write_27(state, v17)
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { u64, b256 }
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr b256, v21, !81
        v23 = load v22
        v24 = const u64 32, !82
        v25 = asm(size: v24, ptr) -> u64 ptr, !85 {
            aloc   size, !67
            move   ptr hp, !68
        }
        v26 = get_local ptr b256, __asm_arg
        store v23 to v26
        v27 = asm(r1: v26) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v28 = load v27
        v29 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !87
        store v28 to v29, !88
        v30 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !89
        v31 = load v30, !83
        v32 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !90
        store v31 to v32, !91
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !92
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !93
        v36 = load v35, !83
        v37 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !94
        v38 = const u64 1
        v39 = get_elem_ptr v37, ptr u64, v38, !95
        v40 = load v39, !83
        v41 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !96
        v42 = const u64 2
        v43 = get_elem_ptr v41, ptr u64, v42, !97
        v44 = load v43, !83
        v45 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !98
        v46 = const u64 3
        v47 = get_elem_ptr v45, ptr u64, v46, !99
        v48 = load v47, !83
        v49 = asm(ptr: v25, val_1: v36, val_2: v40, val_3: v44, val_4: v48) {
            sw     ptr val_1 i0, !100
            sw     ptr val_2 i1, !101
            sw     ptr val_3 i2, !102
            sw     ptr val_4 i3, !103
        }
        v50 = get_local ptr slice, __ret_val0
        v51 = const u64 32, !104
        v52 = call from_parts_33(v25, v51, v50)
        v53 = load v52
        v54 = get_local ptr slice, __tmp_arg2
        store v53 to v54
        v55 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v56 = call from_45(v54, v55)
        v57 = load v56
        v58 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v57 to v58
        v59 = call write_27(state, v58)
        v60 = const unit ()
        ret () v60
    }

    pub fn write_27(self !105: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !106 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = load bytes
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v1, !57
        v3 = ptr_to_int bytes to u64
        v4 = int_to_ptr v3 to ptr { { u64, u64 }, u64 }
        v5 = load v4, !107
        v6 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v5 to v6
        v7 = call len_29(v6)
        v8 = const u64 0, !108
        v9 = cmp eq v7 v8, !110
        v10 = const unit (), !111
        cbr v9, block0(v10), append_28_block1(), !112

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !114
        v13 = load v12, !107
        v14 = const u64 0, !115
        v15 = cmp eq v13 v14, !117
        cbr v15, append_28_block3(), append_28_block4(), !118

        append_28_block3():
        v16 = load v4, !107
        store v16 to v2, !120
        v17 = call clear_30(v4), !122
        v18 = const unit (), !123
        br block0(v18), !124

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v2, ptr u64, v19, !125
        v21 = load v20, !107
        v22 = add v21, v7, !127
        v23 = const u64 1
        v24 = get_elem_ptr v2, ptr u64, v23, !128
        v25 = load v24, !107
        v26 = const u64 0
        v27 = get_elem_ptr v2, ptr { u64, u64 }, v26, !130
        v28 = load v27, !107
        v29 = get_local ptr { u64, u64 }, __tmp_arg0
        store v28 to v29
        v30 = call capacity_32(v29)
        v31 = cmp lt v30 v22, !132
        v32 = const unit ()
        cbr v31, append_28_block6(), append_28_block8(v32), !133

        append_28_block6():
        v33 = const u64 0
        v34 = get_elem_ptr v2, ptr { u64, u64 }, v33, !134
        v35 = load v34, !107
        v36 = get_local ptr { u64, u64 }, __tmp_arg2
        store v35 to v36
        v37 = call ptr_38(v36)
        v38 = const u64 0
        v39 = get_elem_ptr v2, ptr { u64, u64 }, v38, !135
        v40 = load v39, !107
        v41 = get_local ptr { u64, u64 }, __tmp_arg1
        store v40 to v41
        v42 = call capacity_32(v41)
        v43 = cmp gt v22 v42, !138
        cbr v43, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v37), !139

        append_28_realloc_bytes_35_block0():
        v44 = asm(size: v22, ptr) -> u64 ptr, !141 {
            aloc   size, !67
            move   ptr hp, !68
        }
        v45 = const u64 0, !142
        v46 = cmp gt v42 v45, !144
        v47 = const unit ()
        cbr v46, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v47), !145

        append_28_realloc_bytes_35_block1():
        v48 = asm(dst: v44, src: v37, len: v42) {
            mcp    dst src len, !147
        }
        v49 = const unit ()
        br append_28_realloc_bytes_35_block3(v49), !148

        append_28_realloc_bytes_35_block3(v50: ()):
        br append_28_realloc_bytes_35_block5(v44), !149

        append_28_realloc_bytes_35_block5(v51: u64):
        v52 = get_local ptr slice, __ret_val
        v53 = call from_parts_33(v51, v22, v52)
        v54 = load v53
        v55 = get_local ptr slice, new_slice, !151
        store v54 to v55, !152
        v56 = get_local ptr slice, new_slice, !154
        v57 = load v56, !107
        v58 = get_local ptr slice, __tmp_arg4
        store v57 to v58
        v59 = get_local ptr { u64, u64 }, __ret_val0
        v60 = call from_39(v58, v59)
        v61 = load v60
        v62 = const u64 0
        v63 = get_elem_ptr v2, ptr { u64, u64 }, v62, !156
        store v61 to v63, !157
        v64 = const unit ()
        br append_28_block8(v64), !107

        append_28_block8(v65: ()):
        v66 = const u64 0
        v67 = get_elem_ptr v2, ptr { u64, u64 }, v66, !158
        v68 = load v67, !107
        v69 = get_local ptr { u64, u64 }, __tmp_arg3
        store v68 to v69
        v70 = call ptr_38(v69)
        v71 = asm(ptr: v70, offset: v25, new) -> u64 new, !161 {
            add    new ptr offset, !162
        }
        v72 = load v4, !107
        v73 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        store v72 to v73
        v74 = call ptr_44(v73)
        v75 = asm(dst: v71, src: v74, len: v7) {
            mcp    dst src len, !147
        }
        v76 = const u64 1
        v77 = get_elem_ptr v2, ptr u64, v76, !164
        store v22 to v77, !165
        v78 = call clear_30(v4), !167
        v79 = const unit ()
        br block0(v79), !107

        block0(v80: ()):
        v81 = const unit ()
        ret () v81
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !168 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !113
        v5 = load v4
        ret u64 v5
    }

    pub fn clear_30(self !169: ptr { { u64, u64 }, u64 }) -> (), !170 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !171
        store v2 to v4, !171
        v5 = const u64 1
        v6 = get_elem_ptr self, ptr u64, v5, !172
        v7 = const u64 0, !173
        store v7 to v6, !172
        v8 = const unit ()
        ret () v8
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !174 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !175
        v5 = load v4
        ret u64 v5
    }

    pub fn from_parts_33(ptr !177: u64, count !178: u64, __ret_value: ptr slice) -> ptr slice, !179 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __anon_0, !180
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !180
        store ptr to v2, !180
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !180
        store count to v4, !180
        v5 = load v0
        v6 = get_local ptr { u64, u64 }, __asm_arg
        store v5 to v6
        v7 = asm(ptr: v6) -> ptr slice ptr {
        }
        v8 = load v7
        store v8 to __ret_value
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !181 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !182
        v5 = load v4
        ret u64 v5
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !183 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = load slice
        v1 = get_local ptr slice, __asm_arg
        store v0 to v1
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_00, !184
        store v3 to v4, !184
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !186
        v7 = load v6, !184
        v8 = get_local ptr slice, __tmp_arg
        store v0 to v8
        v9 = call number_of_bytes_42(v8)
        v10 = get_local ptr { u64, u64 }, __anon_0, !187
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11
        store v7 to v12, !187
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13
        store v9 to v14, !187
        v15 = load v10
        store v15 to __ret_value
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !188 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        store v0 to v1
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_0
        store v3 to v4
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr u64, v5, !189
        v7 = load v6
        ret u64 v7
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !190 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !129
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_38(v6)
        ret u64 v7
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !191 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = load slice
        v1 = get_local ptr slice, __tmp_arg
        store v0 to v1
        v2 = get_local ptr { u64, u64 }, __ret_val
        v3 = call from_39(v1, v2)
        v4 = load v3
        v5 = get_local ptr slice, __tmp_arg0
        store v0 to v5
        v6 = call number_of_bytes_42(v5)
        v7 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !192
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8
        store v4 to v9, !192
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        store v6 to v11, !192
        v12 = load v7
        store v12 to __ret_value
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: [memcpyopt] Optimizations related to MemCopy instructions
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, ( () | {  } ) } __ret_value
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __anon_01
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __const0
        v4 = load v3
        v5 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr b256, v6
        mem_copy_val v7, v1
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !4
        v11 = const u64 2
        v12 = get_elem_ptr v5, ptr b256, v11
        mem_copy_val v12, v3
        v13 = load v5
        v14 = ptr_to_int v5 to u64, !8
        v15 = int_to_ptr v14 to ptr { b256, u64, b256 }, !9
        v16 = const u64 2
        v17 = get_elem_ptr v15, ptr b256, v16, !12
        v18 = load v17, !13
        v19 = get_local ptr { u64, b256 }, __anon_00, !15
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !16
        v22 = const u64 1, !17
        store v22 to v21, !18
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr b256, v23, !19
        mem_copy_val v24, v17
        v25 = load v19, !5
        v26 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v26, v19
        v27 = get_local ptr b256, __ret_val
        v28 = call sha256_20(v26, v27)
        v29 = load v28
        v30 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !25
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !26
        v33 = const u64 0, !24
        store v33 to v32, !27
        v34 = load v30, !28
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !32 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr { u64, u64 }, __ret_val
        v4 = call new_23(v3)
        v5 = load v4
        v6 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !37
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { u64, u64 }, v7, !38
        mem_copy_val v8, v4
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !39
        v11 = const u64 0, !40
        store v11 to v10, !41
        v12 = load v6, !42
        v13 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !44
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { { u64, u64 }, u64 }, v14, !33
        mem_copy_val v15, v6
        v16 = load v13, !33
        v17 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !45
        mem_copy_val v17, v13
        v18 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !46
        v19 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v19, s
        v20 = call hash_25(v19, v18)
        v21 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !47
        v22 = load v21
        v23 = get_local ptr b256, result_buffer, !50
        mem_copy_val v23, v1
        v24 = get_local ptr b256, result_buffer, !52
        v25 = ptr_to_int v21 to u64, !48
        v26 = int_to_ptr v25 to ptr { { { u64, u64 }, u64 } }, !48
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, u64 }, v27, !54
        v29 = load v28, !48
        v30 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v30, v28
        v31 = call ptr_44(v30)
        v32 = ptr_to_int v21 to u64, !48
        v33 = int_to_ptr v32 to ptr { { { u64, u64 }, u64 } }, !48
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { { u64, u64 }, u64 }, v34, !55
        v36 = load v35, !48
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v37, v35
        v38 = call len_29(v37)
        v39 = asm(hash: v24, ptr: v31, bytes: v38) -> ptr b256 hash {
            s256   hash ptr bytes, !56
        }
        v40 = load v39
        mem_copy_val __ret_value, v39
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !57 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !58
        v1 = asm(size: v0, ptr) -> u64 ptr, !62 {
            aloc   size, !63
            move   ptr hp, !64
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !65
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !65
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !66
        store v7 to v6, !65
        v8 = load v2
        mem_copy_val __ret_value, v2
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !67: ptr { { { u64, u64 }, u64 } }) -> (), !69 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, b256 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !70
        v5 = load v4
        v6 = const u64 8, !71
        v7 = asm(size: v6, ptr) -> u64 ptr, !74 {
            aloc   size, !63
            move   ptr hp, !64
        }
        v8 = asm(ptr: v7, val: v5) {
            sw     ptr val i0, !75
        }
        v9 = get_local ptr slice, __ret_val
        v10 = const u64 8, !76
        v11 = call from_parts_33(v7, v10, v9)
        v12 = load v11
        v13 = get_local ptr slice, __tmp_arg1
        mem_copy_val v13, v11
        v14 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v15 = call from_45(v13, v14)
        v16 = load v15
        v17 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v17, v15
        v18 = call write_27(state, v17)
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { u64, b256 }
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr b256, v21, !77
        v23 = load v22
        v24 = const u64 32, !78
        v25 = asm(size: v24, ptr) -> u64 ptr, !81 {
            aloc   size, !63
            move   ptr hp, !64
        }
        v26 = get_local ptr b256, __asm_arg
        mem_copy_val v26, v22
        v27 = asm(r1: v26) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v28 = load v27
        v29 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !83
        mem_copy_val v29, v27
        v30 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !84
        v31 = load v30, !79
        v32 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !85
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !86
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !87
        v36 = load v35, !79
        v37 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !88
        v38 = const u64 1
        v39 = get_elem_ptr v37, ptr u64, v38, !89
        v40 = load v39, !79
        v41 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !90
        v42 = const u64 2
        v43 = get_elem_ptr v41, ptr u64, v42, !91
        v44 = load v43, !79
        v45 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !92
        v46 = const u64 3
        v47 = get_elem_ptr v45, ptr u64, v46, !93
        v48 = load v47, !79
        v49 = asm(ptr: v25, val_1: v36, val_2: v40, val_3: v44, val_4: v48) {
            sw     ptr val_1 i0, !94
            sw     ptr val_2 i1, !95
            sw     ptr val_3 i2, !96
            sw     ptr val_4 i3, !97
        }
        v50 = get_local ptr slice, __ret_val0
        v51 = const u64 32, !98
        v52 = call from_parts_33(v25, v51, v50)
        v53 = load v52
        v54 = get_local ptr slice, __tmp_arg2
        mem_copy_val v54, v52
        v55 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v56 = call from_45(v54, v55)
        v57 = load v56
        v58 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v58, v56
        v59 = call write_27(state, v58)
        v60 = const unit ()
        ret () v60
    }

    pub fn write_27(self !99: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !100 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = load bytes
        v1 = const u64 0
        v2 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v1, !53
        v3 = ptr_to_int bytes to u64
        v4 = int_to_ptr v3 to ptr { { u64, u64 }, u64 }
        v5 = load v4, !101
        v6 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v6, v4
        v7 = call len_29(v6)
        v8 = const u64 0, !102
        v9 = cmp eq v7 v8, !104
        v10 = const unit (), !105
        cbr v9, block0(v10), append_28_block1(), !106

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !108
        v13 = load v12, !101
        v14 = const u64 0, !109
        v15 = cmp eq v13 v14, !111
        cbr v15, append_28_block3(), append_28_block4(), !112

        append_28_block3():
        v16 = load v4, !101
        mem_copy_val v2, v4
        v17 = call clear_30(v4), !114
        v18 = const unit (), !115
        br block0(v18), !116

        append_28_block4():
        v19 = const u64 1
        v20 = get_elem_ptr v2, ptr u64, v19, !117
        v21 = load v20, !101
        v22 = add v21, v7, !119
        v23 = const u64 1
        v24 = get_elem_ptr v2, ptr u64, v23, !120
        v25 = load v24, !101
        v26 = const u64 0
        v27 = get_elem_ptr v2, ptr { u64, u64 }, v26, !122
        v28 = load v27, !101
        v29 = get_local ptr { u64, u64 }, __tmp_arg0
        mem_copy_val v29, v27
        v30 = call capacity_32(v29)
        v31 = cmp lt v30 v22, !124
        v32 = const unit ()
        cbr v31, append_28_block6(), append_28_block8(v32), !125

        append_28_block6():
        v33 = const u64 0
        v34 = get_elem_ptr v2, ptr { u64, u64 }, v33, !126
        v35 = load v34, !101
        v36 = get_local ptr { u64, u64 }, __tmp_arg2
        mem_copy_val v36, v34
        v37 = call ptr_38(v36)
        v38 = const u64 0
        v39 = get_elem_ptr v2, ptr { u64, u64 }, v38, !127
        v40 = load v39, !101
        v41 = get_local ptr { u64, u64 }, __tmp_arg1
        mem_copy_val v41, v39
        v42 = call capacity_32(v41)
        v43 = cmp gt v22 v42, !130
        cbr v43, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v37), !131

        append_28_realloc_bytes_35_block0():
        v44 = asm(size: v22, ptr) -> u64 ptr, !133 {
            aloc   size, !63
            move   ptr hp, !64
        }
        v45 = const u64 0, !134
        v46 = cmp gt v42 v45, !136
        v47 = const unit ()
        cbr v46, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v47), !137

        append_28_realloc_bytes_35_block1():
        v48 = asm(dst: v44, src: v37, len: v42) {
            mcp    dst src len, !139
        }
        v49 = const unit ()
        br append_28_realloc_bytes_35_block3(v49), !140

        append_28_realloc_bytes_35_block3(v50: ()):
        br append_28_realloc_bytes_35_block5(v44), !141

        append_28_realloc_bytes_35_block5(v51: u64):
        v52 = get_local ptr slice, __ret_val
        v53 = call from_parts_33(v51, v22, v52)
        v54 = load v53
        v55 = get_local ptr slice, new_slice, !143
        mem_copy_val v55, v53
        v56 = get_local ptr slice, new_slice, !145
        v57 = load v56, !101
        v58 = get_local ptr slice, __tmp_arg4
        mem_copy_val v58, v56
        v59 = get_local ptr { u64, u64 }, __ret_val0
        v60 = call from_39(v58, v59)
        v61 = load v60
        v62 = const u64 0
        v63 = get_elem_ptr v2, ptr { u64, u64 }, v62, !147
        mem_copy_val v63, v60
        v64 = const unit ()
        br append_28_block8(v64), !101

        append_28_block8(v65: ()):
        v66 = const u64 0
        v67 = get_elem_ptr v2, ptr { u64, u64 }, v66, !148
        v68 = load v67, !101
        v69 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v69, v67
        v70 = call ptr_38(v69)
        v71 = asm(ptr: v70, offset: v25, new) -> u64 new, !151 {
            add    new ptr offset, !152
        }
        v72 = load v4, !101
        v73 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        mem_copy_val v73, v4
        v74 = call ptr_44(v73)
        v75 = asm(dst: v71, src: v74, len: v7) {
            mcp    dst src len, !139
        }
        v76 = const u64 1
        v77 = get_elem_ptr v2, ptr u64, v76, !154
        store v22 to v77, !155
        v78 = call clear_30(v4), !157
        v79 = const unit ()
        br block0(v79), !101

        block0(v80: ()):
        v81 = const unit ()
        ret () v81
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !158 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !107
        v5 = load v4
        ret u64 v5
    }

    pub fn clear_30(self !159: ptr { { u64, u64 }, u64 }) -> (), !160 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !161
        mem_copy_val v4, v1
        v5 = const u64 1
        v6 = get_elem_ptr self, ptr u64, v5, !162
        v7 = const u64 0, !163
        store v7 to v6, !162
        v8 = const unit ()
        ret () v8
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !164 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !165
        v5 = load v4
        ret u64 v5
    }

    pub fn from_parts_33(ptr !167: u64, count !168: u64, __ret_value: ptr slice) -> ptr slice, !169 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __anon_0, !170
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !170
        store ptr to v2, !170
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !170
        store count to v4, !170
        v5 = load v0
        v6 = get_local ptr { u64, u64 }, __asm_arg
        mem_copy_val v6, v0
        v7 = asm(ptr: v6) -> ptr slice ptr {
        }
        v8 = load v7
        mem_copy_val __ret_value, v7
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !171 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !172
        v5 = load v4
        ret u64 v5
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !173 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = load slice
        v1 = get_local ptr slice, __asm_arg
        mem_copy_val v1, slice
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_00, !174
        mem_copy_val v4, v2
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !176
        v7 = load v6, !174
        v8 = get_local ptr slice, __tmp_arg
        mem_copy_val v8, slice
        v9 = call number_of_bytes_42(v8)
        v10 = get_local ptr { u64, u64 }, __anon_0, !177
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11
        mem_copy_val v12, v6
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13
        store v9 to v14, !177
        v15 = load v10
        mem_copy_val __ret_value, v10
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !178 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        mem_copy_val v1, self
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v4, v2
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr u64, v5, !179
        v7 = load v6
        ret u64 v7
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !180 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !121
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v6, v4
        v7 = call ptr_38(v6)
        ret u64 v7
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !181 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = load slice
        v1 = get_local ptr slice, __tmp_arg
        mem_copy_val v1, slice
        v2 = get_local ptr { u64, u64 }, __ret_val
        v3 = call from_39(v1, v2)
        v4 = load v3
        v5 = get_local ptr slice, __tmp_arg0
        mem_copy_val v5, slice
        v6 = call number_of_bytes_42(v5)
        v7 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !182
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8
        mem_copy_val v9, v3
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        store v6 to v11, !182
        v12 = load v7
        mem_copy_val __ret_value, v7
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: [dce] Dead code elimination
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __anon_01
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __const0
        v3 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr b256, v4
        mem_copy_val v5, v1
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !4
        v9 = const u64 2
        v10 = get_elem_ptr v3, ptr b256, v9
        mem_copy_val v10, v2
        v11 = ptr_to_int v3 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = get_local ptr { u64, b256 }, __anon_00, !14
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !15
        v18 = const u64 1, !16
        store v18 to v17, !17
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr b256, v19, !18
        mem_copy_val v20, v14
        v21 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v21, v15
        v22 = get_local ptr b256, __ret_val
        v23 = call sha256_20(v21, v22)
        v24 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !24
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !25
        v27 = const u64 0, !23
        store v27 to v26, !26
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !30 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = get_local ptr b256, __const
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call new_23(v1)
        v3 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !35
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64, u64 }, v4, !36
        mem_copy_val v5, v2
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !37
        v8 = const u64 0, !38
        store v8 to v7, !39
        v9 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !41
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { { u64, u64 }, u64 }, v10, !31
        mem_copy_val v11, v3
        v12 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !42
        mem_copy_val v12, v9
        v13 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !43
        v14 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v14, s
        v15 = call hash_25(v14, v13)
        v16 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !44
        v17 = get_local ptr b256, result_buffer, !47
        mem_copy_val v17, v0
        v18 = get_local ptr b256, result_buffer, !49
        v19 = ptr_to_int v16 to u64, !45
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }, !45
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !51
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v23, v22
        v24 = call ptr_44(v23)
        v25 = ptr_to_int v16 to u64, !45
        v26 = int_to_ptr v25 to ptr { { { u64, u64 }, u64 } }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, u64 }, v27, !52
        v29 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v29, v28
        v30 = call len_29(v29)
        v31 = asm(hash: v18, ptr: v24, bytes: v30) -> ptr b256 hash {
            s256   hash ptr bytes, !53
        }
        mem_copy_val __ret_value, v31
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !54 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !55
        v1 = asm(size: v0, ptr) -> u64 ptr, !59 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !62
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !62
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !63
        store v7 to v6, !62
        mem_copy_val __ret_value, v2
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !64: ptr { { { u64, u64 }, u64 } }) -> (), !66 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !67
        v4 = load v3
        v5 = const u64 8, !68
        v6 = asm(size: v5, ptr) -> u64 ptr, !71 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !72
        }
        v8 = get_local ptr slice, __ret_val
        v9 = const u64 8, !73
        v10 = call from_parts_33(v6, v9, v8)
        v11 = get_local ptr slice, __tmp_arg1
        mem_copy_val v11, v10
        v12 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v13 = call from_45(v11, v12)
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v14, v13
        v15 = call write_27(state, v14)
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, b256 }
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr b256, v18, !74
        v20 = const u64 32, !75
        v21 = asm(size: v20, ptr) -> u64 ptr, !78 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v22 = get_local ptr b256, __asm_arg
        mem_copy_val v22, v19
        v23 = asm(r1: v22) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !80
        mem_copy_val v24, v23
        v25 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !81
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !82
        v28 = load v27, !76
        v29 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !83
        v30 = const u64 1
        v31 = get_elem_ptr v29, ptr u64, v30, !84
        v32 = load v31, !76
        v33 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !85
        v34 = const u64 2
        v35 = get_elem_ptr v33, ptr u64, v34, !86
        v36 = load v35, !76
        v37 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !87
        v38 = const u64 3
        v39 = get_elem_ptr v37, ptr u64, v38, !88
        v40 = load v39, !76
        v41 = asm(ptr: v21, val_1: v28, val_2: v32, val_3: v36, val_4: v40) {
            sw     ptr val_1 i0, !89
            sw     ptr val_2 i1, !90
            sw     ptr val_3 i2, !91
            sw     ptr val_4 i3, !92
        }
        v42 = get_local ptr slice, __ret_val0
        v43 = const u64 32, !93
        v44 = call from_parts_33(v21, v43, v42)
        v45 = get_local ptr slice, __tmp_arg2
        mem_copy_val v45, v44
        v46 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v47 = call from_45(v45, v46)
        v48 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v48, v47
        v49 = call write_27(state, v48)
        v50 = const unit ()
        ret () v50
    }

    pub fn write_27(self !94: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !95 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !50
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call len_29(v4)
        v6 = const u64 0, !96
        v7 = cmp eq v5 v6, !99
        v8 = const unit (), !100
        cbr v7, block0(v8), append_28_block1(), !101

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !103
        v11 = load v10, !97
        v12 = const u64 0, !104
        v13 = cmp eq v11 v12, !106
        cbr v13, append_28_block3(), append_28_block4(), !107

        append_28_block3():
        mem_copy_val v1, v3
        v14 = call clear_30(v3), !109
        v15 = const unit (), !110
        br block0(v15), !111

        append_28_block4():
        v16 = const u64 1
        v17 = get_elem_ptr v1, ptr u64, v16, !112
        v18 = load v17, !97
        v19 = add v18, v5, !114
        v20 = const u64 1
        v21 = get_elem_ptr v1, ptr u64, v20, !115
        v22 = load v21, !97
        v23 = const u64 0
        v24 = get_elem_ptr v1, ptr { u64, u64 }, v23, !117
        v25 = get_local ptr { u64, u64 }, __tmp_arg0
        mem_copy_val v25, v24
        v26 = call capacity_32(v25)
        v27 = cmp lt v26 v19, !119
        v28 = const unit ()
        cbr v27, append_28_block6(), append_28_block8(v28), !120

        append_28_block6():
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !121
        v31 = get_local ptr { u64, u64 }, __tmp_arg2
        mem_copy_val v31, v30
        v32 = call ptr_38(v31)
        v33 = const u64 0
        v34 = get_elem_ptr v1, ptr { u64, u64 }, v33, !122
        v35 = get_local ptr { u64, u64 }, __tmp_arg1
        mem_copy_val v35, v34
        v36 = call capacity_32(v35)
        v37 = cmp gt v19 v36, !125
        cbr v37, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v32), !126

        append_28_realloc_bytes_35_block0():
        v38 = asm(size: v19, ptr) -> u64 ptr, !128 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v39 = const u64 0, !129
        v40 = cmp gt v36 v39, !131
        v41 = const unit ()
        cbr v40, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v41), !132

        append_28_realloc_bytes_35_block1():
        v42 = asm(dst: v38, src: v32, len: v36) {
            mcp    dst src len, !134
        }
        v43 = const unit ()
        br append_28_realloc_bytes_35_block3(v43), !135

        append_28_realloc_bytes_35_block3(v44: ()):
        br append_28_realloc_bytes_35_block5(v38), !136

        append_28_realloc_bytes_35_block5(v45: u64):
        v46 = get_local ptr slice, __ret_val
        v47 = call from_parts_33(v45, v19, v46)
        v48 = get_local ptr slice, new_slice, !138
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !140
        v50 = get_local ptr slice, __tmp_arg4
        mem_copy_val v50, v49
        v51 = get_local ptr { u64, u64 }, __ret_val0
        v52 = call from_39(v50, v51)
        v53 = const u64 0
        v54 = get_elem_ptr v1, ptr { u64, u64 }, v53, !142
        mem_copy_val v54, v52
        v55 = const unit ()
        br append_28_block8(v55), !97

        append_28_block8(v56: ()):
        v57 = const u64 0
        v58 = get_elem_ptr v1, ptr { u64, u64 }, v57, !143
        v59 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v59, v58
        v60 = call ptr_38(v59)
        v61 = asm(ptr: v60, offset: v22, new) -> u64 new, !146 {
            add    new ptr offset, !147
        }
        v62 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        mem_copy_val v62, v3
        v63 = call ptr_44(v62)
        v64 = asm(dst: v61, src: v63, len: v5) {
            mcp    dst src len, !134
        }
        v65 = const u64 1
        v66 = get_elem_ptr v1, ptr u64, v65, !149
        store v19 to v66, !150
        v67 = call clear_30(v3), !152
        v68 = const unit ()
        br block0(v68), !97

        block0(v69: ()):
        v70 = const unit ()
        ret () v70
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !153 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !102
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !154: ptr { { u64, u64 }, u64 }) -> (), !155 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = const u64 0
        v3 = get_elem_ptr self, ptr { u64, u64 }, v2, !156
        mem_copy_val v3, v1
        v4 = const u64 1
        v5 = get_elem_ptr self, ptr u64, v4, !157
        v6 = const u64 0, !158
        store v6 to v5, !157
        v7 = const unit ()
        ret () v7
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !159 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !160
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !162: u64, count !163: u64, __ret_value: ptr slice) -> ptr slice, !164 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __anon_0, !165
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !165
        store ptr to v2, !165
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3, !165
        store count to v4, !165
        v5 = get_local ptr { u64, u64 }, __asm_arg
        mem_copy_val v5, v0
        v6 = asm(ptr: v5) -> ptr slice ptr {
        }
        mem_copy_val __ret_value, v6
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !166 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !167
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !168 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, slice
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !169
        mem_copy_val v2, v1
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !171
        v5 = get_local ptr slice, __tmp_arg
        mem_copy_val v5, slice
        v6 = call number_of_bytes_42(v5)
        v7 = get_local ptr { u64, u64 }, __anon_0, !172
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8
        mem_copy_val v9, v4
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        store v6 to v11, !172
        mem_copy_val __ret_value, v7
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !173 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v2, v1
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !174
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !175 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !116
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_38(v4)
        ret u64 v5
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !176 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, slice
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call from_39(v0, v1)
        v3 = get_local ptr slice, __tmp_arg0
        mem_copy_val v3, slice
        v4 = call number_of_bytes_42(v3)
        v5 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !177
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { u64, u64 }, v6
        mem_copy_val v7, v2
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        store v4 to v9, !177
        mem_copy_val __ret_value, v5
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: [sroa] Scalar replacement of aggregates
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __anon_01
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __const0
        v3 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr b256, v4
        mem_copy_val v5, v1
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !4
        v9 = const u64 2
        v10 = get_elem_ptr v3, ptr b256, v9
        mem_copy_val v10, v2
        v11 = ptr_to_int v3 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = get_local ptr { u64, b256 }, __anon_00, !14
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !15
        v18 = const u64 1, !16
        store v18 to v17, !17
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr b256, v19, !18
        mem_copy_val v20, v14
        v21 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v21, v15
        v22 = get_local ptr b256, __ret_val
        v23 = call sha256_20(v21, v22)
        v24 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !24
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !25
        v27 = const u64 0, !23
        store v27 to v26, !26
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !30 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local u64 __anon_000
        local u64 __anon_0000
        local u64 __anon_0016
        local u64 __anon_008
        local u64 __anon_016
        local u64 __anon_08
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = get_local ptr b256, __const
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call new_23(v1)
        v3 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !35
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64, u64 }, v4, !36
        v6 = const u64 0
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr u64, v9
        v11 = load v10
        v12 = get_local ptr u64, __anon_0000
        store v8 to v12
        v13 = get_local ptr u64, __anon_008
        store v11 to v13
        v14 = const u64 1
        v15 = get_elem_ptr v3, ptr u64, v14, !37
        v16 = get_local ptr u64, __anon_0016
        v17 = const u64 0, !38
        store v17 to v16, !39
        v18 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !41
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { { u64, u64 }, u64 }, v19, !31
        v21 = get_local ptr u64, __anon_0000
        v22 = load v21
        v23 = get_local ptr u64, __anon_008
        v24 = load v23
        v25 = get_local ptr u64, __anon_0016
        v26 = load v25
        v27 = get_local ptr u64, __anon_000
        store v22 to v27
        v28 = get_local ptr u64, __anon_08
        store v24 to v28
        v29 = get_local ptr u64, __anon_016
        store v26 to v29
        v30 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !42
        v31 = get_local ptr u64, __anon_000
        v32 = load v31
        v33 = get_local ptr u64, __anon_08
        v34 = load v33
        v35 = get_local ptr u64, __anon_016
        v36 = load v35
        v37 = const u64 0
        v38 = const u64 0
        v39 = const u64 0
        v40 = get_elem_ptr v30, ptr u64, v37, v38, v39
        store v32 to v40
        v41 = const u64 0
        v42 = const u64 0
        v43 = const u64 1
        v44 = get_elem_ptr v30, ptr u64, v41, v42, v43
        store v34 to v44
        v45 = const u64 0
        v46 = const u64 1
        v47 = get_elem_ptr v30, ptr u64, v45, v46
        store v36 to v47
        v48 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !43
        v49 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v49, s
        v50 = call hash_25(v49, v48)
        v51 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !44
        v52 = get_local ptr b256, result_buffer, !47
        mem_copy_val v52, v0
        v53 = get_local ptr b256, result_buffer, !49
        v54 = ptr_to_int v51 to u64, !45
        v55 = int_to_ptr v54 to ptr { { { u64, u64 }, u64 } }, !45
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr { { u64, u64 }, u64 }, v56, !51
        v58 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v58, v57
        v59 = call ptr_44(v58)
        v60 = ptr_to_int v51 to u64, !45
        v61 = int_to_ptr v60 to ptr { { { u64, u64 }, u64 } }, !45
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { { u64, u64 }, u64 }, v62, !52
        v64 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v64, v63
        v65 = call len_29(v64)
        v66 = asm(hash: v53, ptr: v59, bytes: v65) -> ptr b256 hash {
            s256   hash ptr bytes, !53
        }
        mem_copy_val __ret_value, v66
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !54 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08

        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !55
        v1 = asm(size: v0, ptr) -> u64 ptr, !59 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !62
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        v5 = get_local ptr u64, __anon_00
        store v1 to v5, !62
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = get_local ptr u64, __anon_08
        v9 = const u64 0, !63
        store v9 to v8, !62
        v10 = get_local ptr u64, __anon_00
        v11 = load v10
        v12 = get_local ptr u64, __anon_08
        v13 = load v12
        v14 = const u64 0
        v15 = get_elem_ptr __ret_value, ptr u64, v14
        store v11 to v15
        v16 = const u64 1
        v17 = get_elem_ptr __ret_value, ptr u64, v16
        store v13 to v17
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !64: ptr { { { u64, u64 }, u64 } }) -> (), !66 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1
        local u64 __tuple_10
        local u64 __tuple_116
        local u64 __tuple_124
        local u64 __tuple_18

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !67
        v4 = load v3
        v5 = const u64 8, !68
        v6 = asm(size: v5, ptr) -> u64 ptr, !71 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !72
        }
        v8 = get_local ptr slice, __ret_val
        v9 = const u64 8, !73
        v10 = call from_parts_33(v6, v9, v8)
        v11 = get_local ptr slice, __tmp_arg1
        mem_copy_val v11, v10
        v12 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v13 = call from_45(v11, v12)
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v14, v13
        v15 = call write_27(state, v14)
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, b256 }
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr b256, v18, !74
        v20 = const u64 32, !75
        v21 = asm(size: v20, ptr) -> u64 ptr, !78 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v22 = get_local ptr b256, __asm_arg
        mem_copy_val v22, v19
        v23 = asm(r1: v22) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !80
        v25 = const u64 0
        v26 = get_elem_ptr v23, ptr u64, v25
        v27 = load v26
        v28 = const u64 1
        v29 = get_elem_ptr v23, ptr u64, v28
        v30 = load v29
        v31 = const u64 2
        v32 = get_elem_ptr v23, ptr u64, v31
        v33 = load v32
        v34 = const u64 3
        v35 = get_elem_ptr v23, ptr u64, v34
        v36 = load v35
        v37 = get_local ptr u64, __tuple_10
        store v27 to v37
        v38 = get_local ptr u64, __tuple_18
        store v30 to v38
        v39 = get_local ptr u64, __tuple_116
        store v33 to v39
        v40 = get_local ptr u64, __tuple_124
        store v36 to v40
        v41 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !81
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !82
        v44 = get_local ptr u64, __tuple_10
        v45 = load v44, !76
        v46 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !83
        v47 = const u64 1
        v48 = get_elem_ptr v46, ptr u64, v47, !84
        v49 = get_local ptr u64, __tuple_18
        v50 = load v49, !76
        v51 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !85
        v52 = const u64 2
        v53 = get_elem_ptr v51, ptr u64, v52, !86
        v54 = get_local ptr u64, __tuple_116
        v55 = load v54, !76
        v56 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !87
        v57 = const u64 3
        v58 = get_elem_ptr v56, ptr u64, v57, !88
        v59 = get_local ptr u64, __tuple_124
        v60 = load v59, !76
        v61 = asm(ptr: v21, val_1: v45, val_2: v50, val_3: v55, val_4: v60) {
            sw     ptr val_1 i0, !89
            sw     ptr val_2 i1, !90
            sw     ptr val_3 i2, !91
            sw     ptr val_4 i3, !92
        }
        v62 = get_local ptr slice, __ret_val0
        v63 = const u64 32, !93
        v64 = call from_parts_33(v21, v63, v62)
        v65 = get_local ptr slice, __tmp_arg2
        mem_copy_val v65, v64
        v66 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v67 = call from_45(v65, v66)
        v68 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v68, v67
        v69 = call write_27(state, v68)
        v70 = const unit ()
        ret () v70
    }

    pub fn write_27(self !94: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !95 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !50
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call len_29(v4)
        v6 = const u64 0, !96
        v7 = cmp eq v5 v6, !99
        v8 = const unit (), !100
        cbr v7, block0(v8), append_28_block1(), !101

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !103
        v11 = load v10, !97
        v12 = const u64 0, !104
        v13 = cmp eq v11 v12, !106
        cbr v13, append_28_block3(), append_28_block4(), !107

        append_28_block3():
        mem_copy_val v1, v3
        v14 = call clear_30(v3), !109
        v15 = const unit (), !110
        br block0(v15), !111

        append_28_block4():
        v16 = const u64 1
        v17 = get_elem_ptr v1, ptr u64, v16, !112
        v18 = load v17, !97
        v19 = add v18, v5, !114
        v20 = const u64 1
        v21 = get_elem_ptr v1, ptr u64, v20, !115
        v22 = load v21, !97
        v23 = const u64 0
        v24 = get_elem_ptr v1, ptr { u64, u64 }, v23, !117
        v25 = get_local ptr { u64, u64 }, __tmp_arg0
        mem_copy_val v25, v24
        v26 = call capacity_32(v25)
        v27 = cmp lt v26 v19, !119
        v28 = const unit ()
        cbr v27, append_28_block6(), append_28_block8(v28), !120

        append_28_block6():
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !121
        v31 = get_local ptr { u64, u64 }, __tmp_arg2
        mem_copy_val v31, v30
        v32 = call ptr_38(v31)
        v33 = const u64 0
        v34 = get_elem_ptr v1, ptr { u64, u64 }, v33, !122
        v35 = get_local ptr { u64, u64 }, __tmp_arg1
        mem_copy_val v35, v34
        v36 = call capacity_32(v35)
        v37 = cmp gt v19 v36, !125
        cbr v37, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v32), !126

        append_28_realloc_bytes_35_block0():
        v38 = asm(size: v19, ptr) -> u64 ptr, !128 {
            aloc   size, !60
            move   ptr hp, !61
        }
        v39 = const u64 0, !129
        v40 = cmp gt v36 v39, !131
        v41 = const unit ()
        cbr v40, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v41), !132

        append_28_realloc_bytes_35_block1():
        v42 = asm(dst: v38, src: v32, len: v36) {
            mcp    dst src len, !134
        }
        v43 = const unit ()
        br append_28_realloc_bytes_35_block3(v43), !135

        append_28_realloc_bytes_35_block3(v44: ()):
        br append_28_realloc_bytes_35_block5(v38), !136

        append_28_realloc_bytes_35_block5(v45: u64):
        v46 = get_local ptr slice, __ret_val
        v47 = call from_parts_33(v45, v19, v46)
        v48 = get_local ptr slice, new_slice, !138
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !140
        v50 = get_local ptr slice, __tmp_arg4
        mem_copy_val v50, v49
        v51 = get_local ptr { u64, u64 }, __ret_val0
        v52 = call from_39(v50, v51)
        v53 = const u64 0
        v54 = get_elem_ptr v1, ptr { u64, u64 }, v53, !142
        mem_copy_val v54, v52
        v55 = const unit ()
        br append_28_block8(v55), !97

        append_28_block8(v56: ()):
        v57 = const u64 0
        v58 = get_elem_ptr v1, ptr { u64, u64 }, v57, !143
        v59 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v59, v58
        v60 = call ptr_38(v59)
        v61 = asm(ptr: v60, offset: v22, new) -> u64 new, !146 {
            add    new ptr offset, !147
        }
        v62 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        mem_copy_val v62, v3
        v63 = call ptr_44(v62)
        v64 = asm(dst: v61, src: v63, len: v5) {
            mcp    dst src len, !134
        }
        v65 = const u64 1
        v66 = get_elem_ptr v1, ptr u64, v65, !149
        store v19 to v66, !150
        v67 = call clear_30(v3), !152
        v68 = const unit ()
        br block0(v68), !97

        block0(v69: ()):
        v70 = const unit ()
        ret () v70
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !153 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !102
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !154: ptr { { u64, u64 }, u64 }) -> (), !155 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = const u64 0
        v3 = get_elem_ptr self, ptr { u64, u64 }, v2, !156
        mem_copy_val v3, v1
        v4 = const u64 1
        v5 = get_elem_ptr self, ptr u64, v4, !157
        v6 = const u64 0, !158
        store v6 to v5, !157
        v7 = const unit ()
        ret () v7
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !159 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !160
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !162: u64, count !163: u64, __ret_value: ptr slice) -> ptr slice, !164 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __anon_0, !165
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !165
        v3 = get_local ptr u64, __anon_00
        store ptr to v3, !165
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !165
        v6 = get_local ptr u64, __anon_08
        store count to v6, !165
        v7 = get_local ptr { u64, u64 }, __asm_arg
        v8 = get_local ptr u64, __anon_00
        v9 = load v8
        v10 = get_local ptr u64, __anon_08
        v11 = load v10
        v12 = const u64 0
        v13 = get_elem_ptr v7, ptr u64, v12
        store v9 to v13
        v14 = const u64 1
        v15 = get_elem_ptr v7, ptr u64, v14
        store v11 to v15
        v16 = asm(ptr: v7) -> ptr slice ptr {
        }
        mem_copy_val __ret_value, v16
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !166 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !167
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !168 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local u64 __anon_000
        local u64 __anon_0000
        local u64 __anon_008
        local u64 __anon_08
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, slice
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !169
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_0000
        store v5 to v9
        v10 = get_local ptr u64, __anon_008
        store v8 to v10
        v11 = const u64 0
        v12 = get_elem_ptr v2, ptr u64, v11, !171
        v13 = get_local ptr slice, __tmp_arg
        mem_copy_val v13, slice
        v14 = call number_of_bytes_42(v13)
        v15 = get_local ptr { u64, u64 }, __anon_0, !172
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        v18 = get_local ptr u64, __anon_0000
        v19 = load v18
        v20 = get_local ptr u64, __anon_000
        store v19 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v15, ptr u64, v21
        v23 = get_local ptr u64, __anon_08
        store v14 to v23, !172
        v24 = get_local ptr u64, __anon_000
        v25 = load v24
        v26 = get_local ptr u64, __anon_08
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr __ret_value, ptr u64, v28
        store v25 to v29
        v30 = const u64 1
        v31 = get_elem_ptr __ret_value, ptr u64, v30
        store v27 to v31
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !173 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_00
        store v5 to v9
        v10 = get_local ptr u64, __anon_08
        store v8 to v10
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !174
        v13 = get_local ptr u64, __anon_08
        v14 = load v13
        ret u64 v14
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !175 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !116
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_38(v4)
        ret u64 v5
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !176 {
        local { { u64, u64 }, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_016
        local u64 __anon_08
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, slice
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call from_39(v0, v1)
        v3 = get_local ptr slice, __tmp_arg0
        mem_copy_val v3, slice
        v4 = call number_of_bytes_42(v3)
        v5 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !177
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { u64, u64 }, v6
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr u64, v8
        v10 = load v9
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11
        v13 = load v12
        v14 = get_local ptr u64, __anon_00
        store v10 to v14
        v15 = get_local ptr u64, __anon_08
        store v13 to v15
        v16 = const u64 1
        v17 = get_elem_ptr v5, ptr u64, v16
        v18 = get_local ptr u64, __anon_016
        store v4 to v18, !177
        v19 = get_local ptr u64, __anon_00
        v20 = load v19
        v21 = get_local ptr u64, __anon_08
        v22 = load v21
        v23 = get_local ptr u64, __anon_016
        v24 = load v23
        v25 = const u64 0
        v26 = const u64 0
        v27 = get_elem_ptr __ret_value, ptr u64, v25, v26
        store v20 to v27
        v28 = const u64 0
        v29 = const u64 1
        v30 = get_elem_ptr __ret_value, ptr u64, v28, v29
        store v22 to v30
        v31 = const u64 1
        v32 = get_elem_ptr __ret_value, ptr u64, v31
        store v24 to v32
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: [mem2reg] Promotion of local memory to SSA registers
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __anon_01
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __const0
        v3 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr b256, v4
        mem_copy_val v5, v1
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !4
        v9 = const u64 2
        v10 = get_elem_ptr v3, ptr b256, v9
        mem_copy_val v10, v2
        v11 = ptr_to_int v3 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = get_local ptr { u64, b256 }, __anon_00, !14
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !15
        v18 = const u64 1, !16
        store v18 to v17, !17
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr b256, v19, !18
        mem_copy_val v20, v14
        v21 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v21, v15
        v22 = get_local ptr b256, __ret_val
        v23 = call sha256_20(v21, v22)
        v24 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !24
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !25
        v27 = const u64 0, !23
        store v27 to v26, !26
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !30 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local u64 __anon_000
        local u64 __anon_0000
        local u64 __anon_0016
        local u64 __anon_008
        local u64 __anon_016
        local u64 __anon_08
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = get_local ptr b256, __const
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call new_23(v1)
        v3 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !35
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64, u64 }, v4, !36
        v6 = const u64 0
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr u64, v9
        v11 = load v10
        v12 = get_local ptr u64, __anon_0000
        v13 = get_local ptr u64, __anon_008
        v14 = const u64 1
        v15 = get_elem_ptr v3, ptr u64, v14, !37
        v16 = get_local ptr u64, __anon_0016
        v17 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !39
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr { { u64, u64 }, u64 }, v18, !31
        v20 = get_local ptr u64, __anon_0000
        v21 = get_local ptr u64, __anon_008
        v22 = get_local ptr u64, __anon_0016
        v23 = get_local ptr u64, __anon_000
        v24 = get_local ptr u64, __anon_08
        v25 = get_local ptr u64, __anon_016
        v26 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !40
        v27 = get_local ptr u64, __anon_000
        v28 = get_local ptr u64, __anon_08
        v29 = get_local ptr u64, __anon_016
        v30 = const u64 0
        v31 = const u64 0
        v32 = const u64 0
        v33 = get_elem_ptr v26, ptr u64, v30, v31, v32
        store v8 to v33
        v34 = const u64 0
        v35 = const u64 0
        v36 = const u64 1
        v37 = get_elem_ptr v26, ptr u64, v34, v35, v36
        store v11 to v37
        v38 = const u64 0
        v39 = const u64 1
        v40 = get_elem_ptr v26, ptr u64, v38, v39
        v41 = const u64 0, !41
        store v41 to v40
        v42 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !42
        v43 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v43, s
        v44 = call hash_25(v43, v42)
        v45 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !43
        v46 = get_local ptr b256, result_buffer, !46
        mem_copy_val v46, v0
        v47 = get_local ptr b256, result_buffer, !48
        v48 = ptr_to_int v45 to u64, !44
        v49 = int_to_ptr v48 to ptr { { { u64, u64 }, u64 } }, !44
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { { u64, u64 }, u64 }, v50, !50
        v52 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v52, v51
        v53 = call ptr_44(v52)
        v54 = ptr_to_int v45 to u64, !44
        v55 = int_to_ptr v54 to ptr { { { u64, u64 }, u64 } }, !44
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr { { u64, u64 }, u64 }, v56, !51
        v58 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v58, v57
        v59 = call len_29(v58)
        v60 = asm(hash: v47, ptr: v53, bytes: v59) -> ptr b256 hash {
            s256   hash ptr bytes, !52
        }
        mem_copy_val __ret_value, v60
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !53 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08

        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !54
        v1 = asm(size: v0, ptr) -> u64 ptr, !58 {
            aloc   size, !59
            move   ptr hp, !60
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !61
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        v5 = get_local ptr u64, __anon_00
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = get_local ptr u64, __anon_08
        v9 = get_local ptr u64, __anon_00
        v10 = get_local ptr u64, __anon_08
        v11 = const u64 0
        v12 = get_elem_ptr __ret_value, ptr u64, v11
        store v1 to v12
        v13 = const u64 1
        v14 = get_elem_ptr __ret_value, ptr u64, v13
        v15 = const u64 0, !62
        store v15 to v14
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !63: ptr { { { u64, u64 }, u64 } }) -> (), !65 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local { u64, u64, u64, u64 } __tuple_1
        local u64 __tuple_10
        local u64 __tuple_116
        local u64 __tuple_124
        local u64 __tuple_18

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !66
        v4 = load v3
        v5 = const u64 8, !67
        v6 = asm(size: v5, ptr) -> u64 ptr, !70 {
            aloc   size, !59
            move   ptr hp, !60
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !71
        }
        v8 = get_local ptr slice, __ret_val
        v9 = const u64 8, !72
        v10 = call from_parts_33(v6, v9, v8)
        v11 = get_local ptr slice, __tmp_arg1
        mem_copy_val v11, v10
        v12 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v13 = call from_45(v11, v12)
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v14, v13
        v15 = call write_27(state, v14)
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, b256 }
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr b256, v18, !73
        v20 = const u64 32, !74
        v21 = asm(size: v20, ptr) -> u64 ptr, !77 {
            aloc   size, !59
            move   ptr hp, !60
        }
        v22 = get_local ptr b256, __asm_arg
        mem_copy_val v22, v19
        v23 = asm(r1: v22) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v24 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !79
        v25 = const u64 0
        v26 = get_elem_ptr v23, ptr u64, v25
        v27 = load v26
        v28 = const u64 1
        v29 = get_elem_ptr v23, ptr u64, v28
        v30 = load v29
        v31 = const u64 2
        v32 = get_elem_ptr v23, ptr u64, v31
        v33 = load v32
        v34 = const u64 3
        v35 = get_elem_ptr v23, ptr u64, v34
        v36 = load v35
        v37 = get_local ptr u64, __tuple_10
        v38 = get_local ptr u64, __tuple_18
        v39 = get_local ptr u64, __tuple_116
        v40 = get_local ptr u64, __tuple_124
        v41 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !80
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !81
        v44 = get_local ptr u64, __tuple_10
        v45 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !82
        v46 = const u64 1
        v47 = get_elem_ptr v45, ptr u64, v46, !83
        v48 = get_local ptr u64, __tuple_18
        v49 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !84
        v50 = const u64 2
        v51 = get_elem_ptr v49, ptr u64, v50, !85
        v52 = get_local ptr u64, __tuple_116
        v53 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !86
        v54 = const u64 3
        v55 = get_elem_ptr v53, ptr u64, v54, !87
        v56 = get_local ptr u64, __tuple_124
        v57 = asm(ptr: v21, val_1: v27, val_2: v30, val_3: v33, val_4: v36) {
            sw     ptr val_1 i0, !88
            sw     ptr val_2 i1, !89
            sw     ptr val_3 i2, !90
            sw     ptr val_4 i3, !91
        }
        v58 = get_local ptr slice, __ret_val0
        v59 = const u64 32, !92
        v60 = call from_parts_33(v21, v59, v58)
        v61 = get_local ptr slice, __tmp_arg2
        mem_copy_val v61, v60
        v62 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v63 = call from_45(v61, v62)
        v64 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v64, v63
        v65 = call write_27(state, v64)
        v66 = const unit ()
        ret () v66
    }

    pub fn write_27(self !93: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !94 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !49
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call len_29(v4)
        v6 = const u64 0, !95
        v7 = cmp eq v5 v6, !98
        v8 = const unit (), !99
        cbr v7, block0(v8), append_28_block1(), !100

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !102
        v11 = load v10, !96
        v12 = const u64 0, !103
        v13 = cmp eq v11 v12, !105
        cbr v13, append_28_block3(), append_28_block4(), !106

        append_28_block3():
        mem_copy_val v1, v3
        v14 = call clear_30(v3), !108
        v15 = const unit (), !109
        br block0(v15), !110

        append_28_block4():
        v16 = const u64 1
        v17 = get_elem_ptr v1, ptr u64, v16, !111
        v18 = load v17, !96
        v19 = add v18, v5, !113
        v20 = const u64 1
        v21 = get_elem_ptr v1, ptr u64, v20, !114
        v22 = load v21, !96
        v23 = const u64 0
        v24 = get_elem_ptr v1, ptr { u64, u64 }, v23, !116
        v25 = get_local ptr { u64, u64 }, __tmp_arg0
        mem_copy_val v25, v24
        v26 = call capacity_32(v25)
        v27 = cmp lt v26 v19, !118
        v28 = const unit ()
        cbr v27, append_28_block6(), append_28_block8(v28), !119

        append_28_block6():
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !120
        v31 = get_local ptr { u64, u64 }, __tmp_arg2
        mem_copy_val v31, v30
        v32 = call ptr_38(v31)
        v33 = const u64 0
        v34 = get_elem_ptr v1, ptr { u64, u64 }, v33, !121
        v35 = get_local ptr { u64, u64 }, __tmp_arg1
        mem_copy_val v35, v34
        v36 = call capacity_32(v35)
        v37 = cmp gt v19 v36, !124
        cbr v37, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v32), !125

        append_28_realloc_bytes_35_block0():
        v38 = asm(size: v19, ptr) -> u64 ptr, !127 {
            aloc   size, !59
            move   ptr hp, !60
        }
        v39 = const u64 0, !128
        v40 = cmp gt v36 v39, !130
        v41 = const unit ()
        cbr v40, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v41), !131

        append_28_realloc_bytes_35_block1():
        v42 = asm(dst: v38, src: v32, len: v36) {
            mcp    dst src len, !133
        }
        v43 = const unit ()
        br append_28_realloc_bytes_35_block3(v43), !134

        append_28_realloc_bytes_35_block3(v44: ()):
        br append_28_realloc_bytes_35_block5(v38), !135

        append_28_realloc_bytes_35_block5(v45: u64):
        v46 = get_local ptr slice, __ret_val
        v47 = call from_parts_33(v45, v19, v46)
        v48 = get_local ptr slice, new_slice, !137
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !139
        v50 = get_local ptr slice, __tmp_arg4
        mem_copy_val v50, v49
        v51 = get_local ptr { u64, u64 }, __ret_val0
        v52 = call from_39(v50, v51)
        v53 = const u64 0
        v54 = get_elem_ptr v1, ptr { u64, u64 }, v53, !141
        mem_copy_val v54, v52
        v55 = const unit ()
        br append_28_block8(v55), !96

        append_28_block8(v56: ()):
        v57 = const u64 0
        v58 = get_elem_ptr v1, ptr { u64, u64 }, v57, !142
        v59 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v59, v58
        v60 = call ptr_38(v59)
        v61 = asm(ptr: v60, offset: v22, new) -> u64 new, !145 {
            add    new ptr offset, !146
        }
        v62 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        mem_copy_val v62, v3
        v63 = call ptr_44(v62)
        v64 = asm(dst: v61, src: v63, len: v5) {
            mcp    dst src len, !133
        }
        v65 = const u64 1
        v66 = get_elem_ptr v1, ptr u64, v65, !148
        store v19 to v66, !149
        v67 = call clear_30(v3), !151
        v68 = const unit ()
        br block0(v68), !96

        block0(v69: ()):
        v70 = const unit ()
        ret () v70
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !152 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !101
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !153: ptr { { u64, u64 }, u64 }) -> (), !154 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = const u64 0
        v3 = get_elem_ptr self, ptr { u64, u64 }, v2, !155
        mem_copy_val v3, v1
        v4 = const u64 1
        v5 = get_elem_ptr self, ptr u64, v4, !156
        v6 = const u64 0, !157
        store v6 to v5, !156
        v7 = const unit ()
        ret () v7
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !158 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !159
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !161: u64, count !162: u64, __ret_value: ptr slice) -> ptr slice, !163 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __anon_0, !164
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !164
        v3 = get_local ptr u64, __anon_00
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !164
        v6 = get_local ptr u64, __anon_08
        v7 = get_local ptr { u64, u64 }, __asm_arg
        v8 = get_local ptr u64, __anon_00
        v9 = get_local ptr u64, __anon_08
        v10 = const u64 0
        v11 = get_elem_ptr v7, ptr u64, v10
        store ptr to v11
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr u64, v12
        store count to v13
        v14 = asm(ptr: v7) -> ptr slice ptr {
        }
        mem_copy_val __ret_value, v14
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !165 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !166
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !167 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local u64 __anon_000
        local u64 __anon_0000
        local u64 __anon_008
        local u64 __anon_08
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, slice
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !168
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_0000
        v10 = get_local ptr u64, __anon_008
        v11 = const u64 0
        v12 = get_elem_ptr v2, ptr u64, v11, !170
        v13 = get_local ptr slice, __tmp_arg
        mem_copy_val v13, slice
        v14 = call number_of_bytes_42(v13)
        v15 = get_local ptr { u64, u64 }, __anon_0, !171
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        v18 = get_local ptr u64, __anon_0000
        v19 = get_local ptr u64, __anon_000
        v20 = const u64 1
        v21 = get_elem_ptr v15, ptr u64, v20
        v22 = get_local ptr u64, __anon_08
        v23 = get_local ptr u64, __anon_000
        v24 = get_local ptr u64, __anon_08
        v25 = const u64 0
        v26 = get_elem_ptr __ret_value, ptr u64, v25
        store v5 to v26
        v27 = const u64 1
        v28 = get_elem_ptr __ret_value, ptr u64, v27
        store v14 to v28
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !172 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_00
        v10 = get_local ptr u64, __anon_08
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !173
        v13 = get_local ptr u64, __anon_08
        ret u64 v8
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !174 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !115
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_38(v4)
        ret u64 v5
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !175 {
        local { { u64, u64 }, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_016
        local u64 __anon_08
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, slice
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call from_39(v0, v1)
        v3 = get_local ptr slice, __tmp_arg0
        mem_copy_val v3, slice
        v4 = call number_of_bytes_42(v3)
        v5 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !176
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { u64, u64 }, v6
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr u64, v8
        v10 = load v9
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11
        v13 = load v12
        v14 = get_local ptr u64, __anon_00
        v15 = get_local ptr u64, __anon_08
        v16 = const u64 1
        v17 = get_elem_ptr v5, ptr u64, v16
        v18 = get_local ptr u64, __anon_016
        v19 = get_local ptr u64, __anon_00
        v20 = get_local ptr u64, __anon_08
        v21 = get_local ptr u64, __anon_016
        v22 = const u64 0
        v23 = const u64 0
        v24 = get_elem_ptr __ret_value, ptr u64, v22, v23
        store v10 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr __ret_value, ptr u64, v25, v26
        store v13 to v27
        v28 = const u64 1
        v29 = get_elem_ptr __ret_value, ptr u64, v28
        store v4 to v29
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: [dce] Dead code elimination
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __anon_01
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __const0
        v3 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr b256, v4
        mem_copy_val v5, v1
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !4
        v9 = const u64 2
        v10 = get_elem_ptr v3, ptr b256, v9
        mem_copy_val v10, v2
        v11 = ptr_to_int v3 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = get_local ptr { u64, b256 }, __anon_00, !14
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !15
        v18 = const u64 1, !16
        store v18 to v17, !17
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr b256, v19, !18
        mem_copy_val v20, v14
        v21 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v21, v15
        v22 = get_local ptr b256, __ret_val
        v23 = call sha256_20(v21, v22)
        v24 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !24
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !25
        v27 = const u64 0, !23
        store v27 to v26, !26
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !30 {
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = get_local ptr b256, __const
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call new_23(v1)
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !31
        v10 = const u64 0
        v11 = const u64 0
        v12 = const u64 0
        v13 = get_elem_ptr v9, ptr u64, v10, v11, v12
        store v5 to v13
        v14 = const u64 0
        v15 = const u64 0
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v14, v15, v16
        store v8 to v17
        v18 = const u64 0
        v19 = const u64 1
        v20 = get_elem_ptr v9, ptr u64, v18, v19
        v21 = const u64 0, !33
        store v21 to v20
        v22 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !34
        v23 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v23, s
        v24 = call hash_25(v23, v22)
        v25 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !35
        v26 = get_local ptr b256, result_buffer, !38
        mem_copy_val v26, v0
        v27 = get_local ptr b256, result_buffer, !40
        v28 = ptr_to_int v25 to u64, !36
        v29 = int_to_ptr v28 to ptr { { { u64, u64 }, u64 } }, !36
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { { u64, u64 }, u64 }, v30, !42
        v32 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v32, v31
        v33 = call ptr_44(v32)
        v34 = ptr_to_int v25 to u64, !36
        v35 = int_to_ptr v34 to ptr { { { u64, u64 }, u64 } }, !36
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr { { u64, u64 }, u64 }, v36, !43
        v38 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v38, v37
        v39 = call len_29(v38)
        v40 = asm(hash: v27, ptr: v33, bytes: v39) -> ptr b256 hash {
            s256   hash ptr bytes, !44
        }
        mem_copy_val __ret_value, v40
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !45 {
        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !46
        v1 = asm(size: v0, ptr) -> u64 ptr, !50 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v2 = const u64 0
        v3 = get_elem_ptr __ret_value, ptr u64, v2
        store v1 to v3
        v4 = const u64 1
        v5 = get_elem_ptr __ret_value, ptr u64, v4
        v6 = const u64 0, !53
        store v6 to v5
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !54: ptr { { { u64, u64 }, u64 } }) -> (), !56 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !57
        v4 = load v3
        v5 = const u64 8, !58
        v6 = asm(size: v5, ptr) -> u64 ptr, !61 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !62
        }
        v8 = get_local ptr slice, __ret_val
        v9 = const u64 8, !63
        v10 = call from_parts_33(v6, v9, v8)
        v11 = get_local ptr slice, __tmp_arg1
        mem_copy_val v11, v10
        v12 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v13 = call from_45(v11, v12)
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v14, v13
        v15 = call write_27(state, v14)
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, b256 }
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr b256, v18, !64
        v20 = const u64 32, !65
        v21 = asm(size: v20, ptr) -> u64 ptr, !68 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v22 = get_local ptr b256, __asm_arg
        mem_copy_val v22, v19
        v23 = asm(r1: v22) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        v26 = load v25
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27
        v29 = load v28
        v30 = const u64 2
        v31 = get_elem_ptr v23, ptr u64, v30
        v32 = load v31
        v33 = const u64 3
        v34 = get_elem_ptr v23, ptr u64, v33
        v35 = load v34
        v36 = asm(ptr: v21, val_1: v26, val_2: v29, val_3: v32, val_4: v35) {
            sw     ptr val_1 i0, !69
            sw     ptr val_2 i1, !70
            sw     ptr val_3 i2, !71
            sw     ptr val_4 i3, !72
        }
        v37 = get_local ptr slice, __ret_val0
        v38 = const u64 32, !73
        v39 = call from_parts_33(v21, v38, v37)
        v40 = get_local ptr slice, __tmp_arg2
        mem_copy_val v40, v39
        v41 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v42 = call from_45(v40, v41)
        v43 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v43, v42
        v44 = call write_27(state, v43)
        v45 = const unit ()
        ret () v45
    }

    pub fn write_27(self !74: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !75 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !41
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call len_29(v4)
        v6 = const u64 0, !76
        v7 = cmp eq v5 v6, !79
        v8 = const unit (), !80
        cbr v7, block0(v8), append_28_block1(), !81

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !83
        v11 = load v10, !77
        v12 = const u64 0, !84
        v13 = cmp eq v11 v12, !86
        cbr v13, append_28_block3(), append_28_block4(), !87

        append_28_block3():
        mem_copy_val v1, v3
        v14 = call clear_30(v3), !89
        v15 = const unit (), !90
        br block0(v15), !91

        append_28_block4():
        v16 = const u64 1
        v17 = get_elem_ptr v1, ptr u64, v16, !92
        v18 = load v17, !77
        v19 = add v18, v5, !94
        v20 = const u64 1
        v21 = get_elem_ptr v1, ptr u64, v20, !95
        v22 = load v21, !77
        v23 = const u64 0
        v24 = get_elem_ptr v1, ptr { u64, u64 }, v23, !97
        v25 = get_local ptr { u64, u64 }, __tmp_arg0
        mem_copy_val v25, v24
        v26 = call capacity_32(v25)
        v27 = cmp lt v26 v19, !99
        v28 = const unit ()
        cbr v27, append_28_block6(), append_28_block8(v28), !100

        append_28_block6():
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !101
        v31 = get_local ptr { u64, u64 }, __tmp_arg2
        mem_copy_val v31, v30
        v32 = call ptr_38(v31)
        v33 = const u64 0
        v34 = get_elem_ptr v1, ptr { u64, u64 }, v33, !102
        v35 = get_local ptr { u64, u64 }, __tmp_arg1
        mem_copy_val v35, v34
        v36 = call capacity_32(v35)
        v37 = cmp gt v19 v36, !105
        cbr v37, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v32), !106

        append_28_realloc_bytes_35_block0():
        v38 = asm(size: v19, ptr) -> u64 ptr, !108 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v39 = const u64 0, !109
        v40 = cmp gt v36 v39, !111
        v41 = const unit ()
        cbr v40, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v41), !112

        append_28_realloc_bytes_35_block1():
        v42 = asm(dst: v38, src: v32, len: v36) {
            mcp    dst src len, !114
        }
        v43 = const unit ()
        br append_28_realloc_bytes_35_block3(v43), !115

        append_28_realloc_bytes_35_block3(v44: ()):
        br append_28_realloc_bytes_35_block5(v38), !116

        append_28_realloc_bytes_35_block5(v45: u64):
        v46 = get_local ptr slice, __ret_val
        v47 = call from_parts_33(v45, v19, v46)
        v48 = get_local ptr slice, new_slice, !118
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !120
        v50 = get_local ptr slice, __tmp_arg4
        mem_copy_val v50, v49
        v51 = get_local ptr { u64, u64 }, __ret_val0
        v52 = call from_39(v50, v51)
        v53 = const u64 0
        v54 = get_elem_ptr v1, ptr { u64, u64 }, v53, !122
        mem_copy_val v54, v52
        v55 = const unit ()
        br append_28_block8(v55), !77

        append_28_block8(v56: ()):
        v57 = const u64 0
        v58 = get_elem_ptr v1, ptr { u64, u64 }, v57, !123
        v59 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v59, v58
        v60 = call ptr_38(v59)
        v61 = asm(ptr: v60, offset: v22, new) -> u64 new, !126 {
            add    new ptr offset, !127
        }
        v62 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        mem_copy_val v62, v3
        v63 = call ptr_44(v62)
        v64 = asm(dst: v61, src: v63, len: v5) {
            mcp    dst src len, !114
        }
        v65 = const u64 1
        v66 = get_elem_ptr v1, ptr u64, v65, !129
        store v19 to v66, !130
        v67 = call clear_30(v3), !132
        v68 = const unit ()
        br block0(v68), !77

        block0(v69: ()):
        v70 = const unit ()
        ret () v70
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !133 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !82
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !134: ptr { { u64, u64 }, u64 }) -> (), !135 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = const u64 0
        v3 = get_elem_ptr self, ptr { u64, u64 }, v2, !136
        mem_copy_val v3, v1
        v4 = const u64 1
        v5 = get_elem_ptr self, ptr u64, v4, !137
        v6 = const u64 0, !138
        store v6 to v5, !137
        v7 = const unit ()
        ret () v7
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !139 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !140
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !142: u64, count !143: u64, __ret_value: ptr slice) -> ptr slice, !144 {
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __asm_arg
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        store ptr to v2
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store count to v4
        v5 = asm(ptr: v0) -> ptr slice ptr {
        }
        mem_copy_val __ret_value, v5
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !145 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !146
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !147 {
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, slice
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        v5 = get_local ptr slice, __tmp_arg
        mem_copy_val v5, slice
        v6 = call number_of_bytes_42(v5)
        v7 = const u64 0
        v8 = get_elem_ptr __ret_value, ptr u64, v7
        store v4 to v8
        v9 = const u64 1
        v10 = get_elem_ptr __ret_value, ptr u64, v9
        store v6 to v10
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !148 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !149 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !96
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_38(v4)
        ret u64 v5
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !150 {
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, slice
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call from_39(v0, v1)
        v3 = get_local ptr slice, __tmp_arg0
        mem_copy_val v3, slice
        v4 = call number_of_bytes_42(v3)
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr v2, ptr u64, v8
        v10 = load v9
        v11 = const u64 0
        v12 = const u64 0
        v13 = get_elem_ptr __ret_value, ptr u64, v11, v12
        store v7 to v13
        v14 = const u64 0
        v15 = const u64 1
        v16 = get_elem_ptr __ret_value, ptr u64, v14, v15
        store v10 to v16
        v17 = const u64 1
        v18 = get_elem_ptr __ret_value, ptr u64, v17
        store v4 to v18
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

// IR: Final
contract {
    pub entry fn test_function<2151bd4b>() -> ptr { u64, ( () | {  } ) }, !3 {
        local { b256, u64, b256 } __anon_0
        local { u64, b256 } __anon_00
        local { u64, ( () | {  } ) } __anon_01
        local b256 __const = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __const0 = const b256 0xa24a9a952387782d16a882c340d5621f40cad0921d5c70f721993e2187c46048
        local b256 __ret_val
        local { u64, b256 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, ( () | {  } ) }, __anon_01
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __const0
        v3 = get_local ptr { b256, u64, b256 }, __anon_0, !4
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr b256, v4
        mem_copy_val v5, v1
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !4
        v9 = const u64 2
        v10 = get_elem_ptr v3, ptr b256, v9
        mem_copy_val v10, v2
        v11 = ptr_to_int v3 to u64, !8
        v12 = int_to_ptr v11 to ptr { b256, u64, b256 }, !9
        v13 = const u64 2
        v14 = get_elem_ptr v12, ptr b256, v13, !12
        v15 = get_local ptr { u64, b256 }, __anon_00, !14
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !15
        v18 = const u64 1, !16
        store v18 to v17, !17
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr b256, v19, !18
        mem_copy_val v20, v14
        v21 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v21, v15
        v22 = get_local ptr b256, __ret_val
        v23 = call sha256_20(v21, v22)
        v24 = get_local ptr { u64, ( () | {  } ) }, __anon_01, !24
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !25
        v27 = const u64 0, !23
        store v27 to v26, !26
        ret ptr { u64, ( () | {  } ) } v0
    }

    pub fn sha256_20(s: ptr { u64, b256 }, __ret_value: ptr b256) -> ptr b256, !30 {
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { u64, u64 } __ret_val
        local { u64, b256 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local mut { { { u64, u64 }, u64 } } hasher
        local mut b256 result_buffer

        entry(s: ptr { u64, b256 }, __ret_value: ptr b256):
        v0 = get_local ptr b256, __const
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call new_23(v1)
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !31
        v10 = const u64 0
        v11 = const u64 0
        v12 = const u64 0
        v13 = get_elem_ptr v9, ptr u64, v10, v11, v12
        store v5 to v13
        v14 = const u64 0
        v15 = const u64 0
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v14, v15, v16
        store v8 to v17
        v18 = const u64 0
        v19 = const u64 1
        v20 = get_elem_ptr v9, ptr u64, v18, v19
        v21 = const u64 0, !33
        store v21 to v20
        v22 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !34
        v23 = get_local ptr { u64, b256 }, __tmp_arg
        mem_copy_val v23, s
        v24 = call hash_25(v23, v22)
        v25 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !35
        v26 = get_local ptr b256, result_buffer, !38
        mem_copy_val v26, v0
        v27 = get_local ptr b256, result_buffer, !40
        v28 = ptr_to_int v25 to u64, !36
        v29 = int_to_ptr v28 to ptr { { { u64, u64 }, u64 } }, !36
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { { u64, u64 }, u64 }, v30, !42
        v32 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v32, v31
        v33 = call ptr_44(v32)
        v34 = ptr_to_int v25 to u64, !36
        v35 = int_to_ptr v34 to ptr { { { u64, u64 }, u64 } }, !36
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr { { u64, u64 }, u64 }, v36, !43
        v38 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v38, v37
        v39 = call len_29(v38)
        v40 = asm(hash: v27, ptr: v33, bytes: v39) -> ptr b256 hash {
            s256   hash ptr bytes, !44
        }
        mem_copy_val __ret_value, v40
        ret ptr b256 __ret_value
    }

    pub fn new_23(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !45 {
        entry(__ret_value: ptr { u64, u64 }):
        v0 = const u64 0, !46
        v1 = asm(size: v0, ptr) -> u64 ptr, !50 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v2 = const u64 0
        v3 = get_elem_ptr __ret_value, ptr u64, v2
        store v1 to v3
        v4 = const u64 1
        v5 = get_elem_ptr __ret_value, ptr u64, v4
        v6 = const u64 0, !53
        store v6 to v5
        ret ptr { u64, u64 } __ret_value
    }

    pub fn hash_25(self: ptr { u64, b256 }, state !54: ptr { { { u64, u64 }, u64 } }) -> (), !56 {
        local b256 __asm_arg
        local slice __ret_val
        local slice __ret_val0
        local { { u64, u64 }, u64 } __ret_val1
        local { { u64, u64 }, u64 } __ret_val2
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2

        entry(self: ptr { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !57
        v4 = load v3
        v5 = const u64 8, !58
        v6 = asm(size: v5, ptr) -> u64 ptr, !61 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v7 = asm(ptr: v6, val: v4) {
            sw     ptr val i0, !62
        }
        v8 = get_local ptr slice, __ret_val
        v9 = const u64 8, !63
        v10 = call from_parts_33(v6, v9, v8)
        v11 = get_local ptr slice, __tmp_arg1
        mem_copy_val v11, v10
        v12 = get_local ptr { { u64, u64 }, u64 }, __ret_val1
        v13 = call from_45(v11, v12)
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v14, v13
        v15 = call write_27(state, v14)
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, b256 }
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr b256, v18, !64
        v20 = const u64 32, !65
        v21 = asm(size: v20, ptr) -> u64 ptr, !68 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v22 = get_local ptr b256, __asm_arg
        mem_copy_val v22, v19
        v23 = asm(r1: v22) -> ptr { u64, u64, u64, u64 } r1 {
        }
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        v26 = load v25
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27
        v29 = load v28
        v30 = const u64 2
        v31 = get_elem_ptr v23, ptr u64, v30
        v32 = load v31
        v33 = const u64 3
        v34 = get_elem_ptr v23, ptr u64, v33
        v35 = load v34
        v36 = asm(ptr: v21, val_1: v26, val_2: v29, val_3: v32, val_4: v35) {
            sw     ptr val_1 i0, !69
            sw     ptr val_2 i1, !70
            sw     ptr val_3 i2, !71
            sw     ptr val_4 i3, !72
        }
        v37 = get_local ptr slice, __ret_val0
        v38 = const u64 32, !73
        v39 = call from_parts_33(v21, v38, v37)
        v40 = get_local ptr slice, __tmp_arg2
        mem_copy_val v40, v39
        v41 = get_local ptr { { u64, u64 }, u64 }, __ret_val2
        v42 = call from_45(v40, v41)
        v43 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v43, v42
        v44 = call write_27(state, v43)
        v45 = const unit ()
        ret () v45
    }

    pub fn write_27(self !74: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }) -> (), !75 {
        local slice __ret_val
        local { u64, u64 } __ret_val0
        local { { u64, u64 }, u64 } __tmp_arg
        local { u64, u64 } __tmp_arg0
        local { u64, u64 } __tmp_arg1
        local { u64, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local slice __tmp_arg4
        local { { u64, u64 }, u64 } __tmp_arg5
        local slice new_slice

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: ptr { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !41
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call len_29(v4)
        v6 = const u64 0, !76
        v7 = cmp eq v5 v6, !79
        v8 = const unit (), !80
        cbr v7, block0(v8), append_28_block1(), !81

        append_28_block1():
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v9, !83
        v11 = load v10, !77
        v12 = const u64 0, !84
        v13 = cmp eq v11 v12, !86
        cbr v13, append_28_block3(), append_28_block4(), !87

        append_28_block3():
        mem_copy_val v1, v3
        v14 = call clear_30(v3), !89
        v15 = const unit (), !90
        br block0(v15), !91

        append_28_block4():
        v16 = const u64 1
        v17 = get_elem_ptr v1, ptr u64, v16, !92
        v18 = load v17, !77
        v19 = add v18, v5, !94
        v20 = const u64 1
        v21 = get_elem_ptr v1, ptr u64, v20, !95
        v22 = load v21, !77
        v23 = const u64 0
        v24 = get_elem_ptr v1, ptr { u64, u64 }, v23, !97
        v25 = get_local ptr { u64, u64 }, __tmp_arg0
        mem_copy_val v25, v24
        v26 = call capacity_32(v25)
        v27 = cmp lt v26 v19, !99
        v28 = const unit ()
        cbr v27, append_28_block6(), append_28_block8(v28), !100

        append_28_block6():
        v29 = const u64 0
        v30 = get_elem_ptr v1, ptr { u64, u64 }, v29, !101
        v31 = get_local ptr { u64, u64 }, __tmp_arg2
        mem_copy_val v31, v30
        v32 = call ptr_38(v31)
        v33 = const u64 0
        v34 = get_elem_ptr v1, ptr { u64, u64 }, v33, !102
        v35 = get_local ptr { u64, u64 }, __tmp_arg1
        mem_copy_val v35, v34
        v36 = call capacity_32(v35)
        v37 = cmp gt v19 v36, !105
        cbr v37, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v32), !106

        append_28_realloc_bytes_35_block0():
        v38 = asm(size: v19, ptr) -> u64 ptr, !108 {
            aloc   size, !51
            move   ptr hp, !52
        }
        v39 = const u64 0, !109
        v40 = cmp gt v36 v39, !111
        v41 = const unit ()
        cbr v40, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v41), !112

        append_28_realloc_bytes_35_block1():
        v42 = asm(dst: v38, src: v32, len: v36) {
            mcp    dst src len, !114
        }
        v43 = const unit ()
        br append_28_realloc_bytes_35_block3(v43), !115

        append_28_realloc_bytes_35_block3(v44: ()):
        br append_28_realloc_bytes_35_block5(v38), !116

        append_28_realloc_bytes_35_block5(v45: u64):
        v46 = get_local ptr slice, __ret_val
        v47 = call from_parts_33(v45, v19, v46)
        v48 = get_local ptr slice, new_slice, !118
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !120
        v50 = get_local ptr slice, __tmp_arg4
        mem_copy_val v50, v49
        v51 = get_local ptr { u64, u64 }, __ret_val0
        v52 = call from_39(v50, v51)
        v53 = const u64 0
        v54 = get_elem_ptr v1, ptr { u64, u64 }, v53, !122
        mem_copy_val v54, v52
        v55 = const unit ()
        br append_28_block8(v55), !77

        append_28_block8(v56: ()):
        v57 = const u64 0
        v58 = get_elem_ptr v1, ptr { u64, u64 }, v57, !123
        v59 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v59, v58
        v60 = call ptr_38(v59)
        v61 = asm(ptr: v60, offset: v22, new) -> u64 new, !126 {
            add    new ptr offset, !127
        }
        v62 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg5
        mem_copy_val v62, v3
        v63 = call ptr_44(v62)
        v64 = asm(dst: v61, src: v63, len: v5) {
            mcp    dst src len, !114
        }
        v65 = const u64 1
        v66 = get_elem_ptr v1, ptr u64, v65, !129
        store v19 to v66, !130
        v67 = call clear_30(v3), !132
        v68 = const unit ()
        br block0(v68), !77

        block0(v69: ()):
        v70 = const unit ()
        ret () v70
    }

    pub fn len_29(self: ptr { { u64, u64 }, u64 }) -> u64, !133 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !82
        v4 = load v3
        ret u64 v4
    }

    pub fn clear_30(self !134: ptr { { u64, u64 }, u64 }) -> (), !135 {
        local { u64, u64 } __ret_val

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr { u64, u64 }, __ret_val
        v1 = call new_23(v0)
        v2 = const u64 0
        v3 = get_elem_ptr self, ptr { u64, u64 }, v2, !136
        mem_copy_val v3, v1
        v4 = const u64 1
        v5 = get_elem_ptr self, ptr u64, v4, !137
        v6 = const u64 0, !138
        store v6 to v5, !137
        v7 = const unit ()
        ret () v7
    }

    pub fn capacity_32(self: ptr { u64, u64 }) -> u64, !139 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !140
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_33(ptr !142: u64, count !143: u64, __ret_value: ptr slice) -> ptr slice, !144 {
        local { u64, u64 } __asm_arg

        entry(ptr: u64, count: u64, __ret_value: ptr slice):
        v0 = get_local ptr { u64, u64 }, __asm_arg
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        store ptr to v2
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store count to v4
        v5 = asm(ptr: v0) -> ptr slice ptr {
        }
        mem_copy_val __ret_value, v5
        ret ptr slice __ret_value
    }

    pub fn ptr_38(self: ptr { u64, u64 }) -> u64, !145 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !146
        v4 = load v3
        ret u64 v4
    }

    pub fn from_39(slice: ptr slice, __ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !147 {
        local slice __asm_arg
        local slice __tmp_arg

        entry(slice: ptr slice, __ret_value: ptr { u64, u64 }):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, slice
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        v5 = get_local ptr slice, __tmp_arg
        mem_copy_val v5, slice
        v6 = call number_of_bytes_42(v5)
        v7 = const u64 0
        v8 = get_elem_ptr __ret_value, ptr u64, v7
        store v4 to v8
        v9 = const u64 1
        v10 = get_elem_ptr __ret_value, ptr u64, v9
        store v6 to v10
        ret ptr { u64, u64 } __ret_value
    }

    pub fn number_of_bytes_42(self: ptr slice) -> u64, !148 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_44(self: ptr { { u64, u64 }, u64 }) -> u64, !149 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !96
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_38(v4)
        ret u64 v5
    }

    pub fn from_45(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !150 {
        local { u64, u64 } __ret_val
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(slice: ptr slice, __ret_value: ptr { { u64, u64 }, u64 }):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, slice
        v1 = get_local ptr { u64, u64 }, __ret_val
        v2 = call from_39(v0, v1)
        v3 = get_local ptr slice, __tmp_arg0
        mem_copy_val v3, slice
        v4 = call number_of_bytes_42(v3)
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr v2, ptr u64, v8
        v10 = load v9
        v11 = const u64 0
        v12 = const u64 0
        v13 = get_elem_ptr __ret_value, ptr u64, v11, v12
        store v7 to v13
        v14 = const u64 0
        v15 = const u64 1
        v16 = get_elem_ptr __ret_value, ptr u64, v14, v15
        store v10 to v16
        v17 = const u64 1
        v18 = get_elem_ptr __ret_value, ptr u64, v17
        store v4 to v18
        ret ptr { { u64, u64 }, u64 } __ret_value
    }
}

  [1;32mFinished[0m release [optimized + fuel] target(s) in 10.28s
      Bytecode size: 2168 bytes
