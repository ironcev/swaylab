// IR: Initial
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64, u64 } __anon_2
        local slice __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = call decode_first_param_0(), !2
        v1 = get_local ptr slice, _method_name, !3
        store v0 to v1, !3
        v2 = get_local ptr slice, _method_name, !4
        v3 = load v2
        v4 = const string<16> "complex_function"
        v5 = ptr_to_int v4 to u64, !5
        v6 = get_local ptr { u64, u64 }, __anon_0, !5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8, !5
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 16
        store v11 to v10, !5
        v12 = get_local ptr slice, __anon_1, !5
        mem_copy_bytes v12, v6, 16
        v13 = load v12
        v14 = call eq_13(v3, v13), !6
        cbr v14, block0(), block1(), !6

        block0():
        v15 = call decode_second_param_18(), !7
        v16 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !8
        store v15 to v16, !8
        v17 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !9
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v18, !10
        v20 = load v19
        v21 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !11
        v22 = const u64 1
        v23 = get_elem_ptr v21, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v22, !12
        v24 = load v23
        v25 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !13
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr { string<5>, bool }, v26, !14
        v28 = load v27
        v29 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !15
        v30 = const u64 3
        v31 = get_elem_ptr v29, ptr { u64 }, v30, !16
        v32 = load v31
        v33 = call complex_function_44(v20, v24, v28, v32), !17
        v34 = call encode_40(v33), !18
        v35 = get_local ptr slice, result_complex_function, !19
        store v34 to v35, !19
        v36 = get_local ptr slice, result_complex_function, !20
        v37 = load v36
        v38 = call ptr_11(v37), !21
        v39 = get_local ptr slice, result_complex_function, !22
        v40 = load v39
        v41 = call len_45(v40), !23
        retd v38 v41, !24
        v42 = const unit ()
        br block2(v42)

        block1():
        v43 = const unit ()
        br block2(v43)

        block2(v44: ()):
        v45 = get_local ptr slice, _method_name, !25
        v46 = load v45
        v47 = const string<18> "take_generic_array"
        v48 = ptr_to_int v47 to u64, !26
        v49 = get_local ptr { u64, u64 }, __anon_2, !26
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50
        store v48 to v51, !26
        v52 = const u64 1
        v53 = get_elem_ptr v49, ptr u64, v52
        v54 = const u64 18
        store v54 to v53, !26
        v55 = get_local ptr slice, __anon_3, !26
        mem_copy_bytes v55, v49, 16
        v56 = load v55
        v57 = call eq_13(v46, v56), !27
        cbr v57, block3(), block4(), !27

        block3():
        v58 = call decode_second_param_46(), !28
        v59 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !29
        store v58 to v59, !29
        v60 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !30
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v61, !31
        v63 = load v62
        v64 = call take_generic_array_62(v63), !32
        v65 = call encode_60(v64), !33
        v66 = get_local ptr slice, result_take_generic_array, !34
        store v65 to v66, !34
        v67 = get_local ptr slice, result_take_generic_array, !35
        v68 = load v67
        v69 = call ptr_11(v68), !36
        v70 = get_local ptr slice, result_take_generic_array, !37
        v71 = load v70
        v72 = call len_45(v71), !38
        retd v69 v72, !39
        v73 = const unit ()
        br block5(v73)

        block4():
        v74 = const unit ()
        br block5(v74)

        block5(v75: ()):
        v76 = get_local ptr slice, _method_name, !40
        v77 = load v76
        v78 = const string<36> "take_generic_struct_containing_tuple"
        v79 = ptr_to_int v78 to u64, !41
        v80 = get_local ptr { u64, u64 }, __anon_4, !41
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81
        store v79 to v82, !41
        v83 = const u64 1
        v84 = get_elem_ptr v80, ptr u64, v83
        v85 = const u64 36
        store v85 to v84, !41
        v86 = get_local ptr slice, __anon_5, !41
        mem_copy_bytes v86, v80, 16
        v87 = load v86
        v88 = call eq_13(v77, v87), !42
        cbr v88, block6(), block7(), !42

        block6():
        v89 = call decode_second_param_63(), !43
        v90 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !44
        store v89 to v90, !44
        v91 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !45
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v92, !46
        v94 = load v93
        v95 = call take_generic_struct_containing_tuple_84(v94), !47
        v96 = call encode_82(v95), !48
        v97 = get_local ptr slice, result_take_generic_struct_containing_tuple, !49
        store v96 to v97, !49
        v98 = get_local ptr slice, result_take_generic_struct_containing_tuple, !50
        v99 = load v98
        v100 = call ptr_11(v99), !51
        v101 = get_local ptr slice, result_take_generic_struct_containing_tuple, !52
        v102 = load v101
        v103 = call len_45(v102), !53
        retd v100 v103, !54
        v104 = const unit ()
        br block8(v104)

        block7():
        v105 = const unit ()
        br block8(v105)

        block8(v106: ()):
        v107 = const u64 123, !55
        revert v107, !56
    }

    pub fn decode_first_param_0() -> slice, !58 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_first_parameter_1(), !59
        v1 = get_local ptr { u64, u64 }, buffer, !60
        store v0 to v1, !60
        v2 = get_local ptr { u64, u64 }, buffer, !61
        v3 = call abi_decode_4(v2), !62
        ret slice v3
    }

    pub fn from_first_parameter_1() -> { u64, u64 }, !63 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !64
        v1 = const u64 73, !65
        store v1 to v0, !64
        v2 = asm() -> u64 fp, !66 {
        }
        v3 = get_local ptr u64, ptr, !67
        store v2 to v3, !67
        v4 = get_local ptr u64, ptr, !68
        v5 = load v4
        v6 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !69
        v7 = load v6
        v8 = call add_2(v5, v7), !70
        v9 = get_local ptr u64, ptr_, !71
        store v8 to v9, !71
        v10 = get_local ptr u64, ptr_, !72
        v11 = load v10
        v12 = call read_3(v11), !73
        v13 = get_local ptr u64, ptr__, !74
        store v12 to v13, !74
        v14 = get_local ptr u64, ptr__, !75
        v15 = load v14
        v16 = asm(ptr: v15) -> u64 ptr, !76 {
        }
        v17 = get_local ptr { u64, u64 }, __anon_0, !77
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v16 to v19, !77
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20
        v22 = const u64 0, !78
        store v22 to v21, !77
        v23 = load v17
        ret { u64, u64 } v23
    }

    pub fn add_2(self !80: u64, count !81: u64) -> u64, !82 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_3(self !83: u64) -> u64, !84 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !85

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !86 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !87
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !88

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !89 {
            lb     val ptr i0, !90
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !91 {
            lw     val ptr i0, !92
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn abi_decode_4(buffer !93: ptr { u64, u64 }) -> slice, !94 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !95
        v1 = get_local ptr u64, len, !96
        store v0 to v1, !96
        v2 = get_local ptr u64, len, !97
        v3 = load v2
        v4 = call read_bytes_10(buffer, v3), !98
        v5 = get_local ptr slice, data, !99
        store v4 to v5, !99
        v6 = get_local ptr slice, data, !100
        v7 = load v6
        v8 = call ptr_11(v7), !101
        v9 = get_local ptr u64, len, !102
        v10 = load v9
        v11 = get_local ptr { u64, u64 }, __anon_0, !103
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !103
        store v8 to v13, !103
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14, !103
        store v10 to v15, !103
        v16 = asm(s: v11) -> slice s, !104 {
        }
        ret slice v16
    }

    pub fn abi_decode_5(buffer !105: ptr { u64, u64 }) -> u64, !106 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_6(buffer), !107
        ret u64 v0
    }

    pub fn read_6(self !108: ptr { u64, u64 }) -> u64, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        store v6 to v7, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 8
        store v9 to v8, !114
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !111
        v12 = load v11
        v13 = get_local ptr u64, size, !115
        v14 = load v13
        v15 = call add_8(v12, v14), !116
        v16 = get_local ptr u64, next_pos, !117
        store v15 to v16, !117
        v17 = const bool false
        cbr v17, block0(), block1(), !118

        block0():
        v18 = get_local ptr u64, ptr, !119
        v19 = load v18
        v20 = asm(ptr: v19) -> u64 ptr, !120 {
        }
        v21 = get_local ptr u64, v, !121
        store v20 to v21, !121
        v22 = get_local ptr u64, next_pos, !122
        v23 = load v22
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !123
        store v23 to v25, !123
        v26 = get_local ptr u64, v, !124
        v27 = load v26
        br block5(v27)

        block1():
        v28 = get_local ptr u64, size, !125
        v29 = load v28
        v30 = const u64 1, !126
        v31 = call eq_9(v29, v30), !127
        cbr v31, block2(), block3(), !127

        block2():
        v32 = get_local ptr u64, ptr, !128
        v33 = load v32
        v34 = asm(ptr: v33, val) -> u64 val, !129 {
            lb     val ptr i0, !130
        }
        v35 = get_local ptr u64, v_, !131
        store v34 to v35, !131
        v36 = get_local ptr u64, next_pos, !132
        v37 = load v36
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !133
        store v37 to v39, !133
        v40 = get_local ptr u64, v_, !134
        v41 = load v40
        br block4(v41)

        block3():
        v42 = get_local ptr u64, ptr, !135
        v43 = load v42
        v44 = asm(ptr: v43, val) -> u64 val, !136 {
            lw     val ptr i0, !137
        }
        v45 = get_local ptr u64, v__, !138
        store v44 to v45, !138
        v46 = get_local ptr u64, next_pos, !139
        v47 = load v46
        v48 = const u64 1
        v49 = get_elem_ptr self, ptr u64, v48, !140
        store v47 to v49, !140
        v50 = get_local ptr u64, v__, !141
        v51 = load v50
        br block4(v51)

        block4(v52: u64):
        br block5(v52)

        block5(v53: u64):
        ret u64 v53
    }

    pub fn add_7(self !80: u64, count !81: u64) -> u64, !82 {
        entry(self: u64, count: u64):
        v0 = const u64 1
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn add_8(self !143: u64, other !144: u64) -> u64, !145 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn eq_9(self !146: u64, other !147: u64) -> bool, !148 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn read_bytes_10(self !149: ptr { u64, u64 }, count !150: u64) -> slice, !151 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !111
        v2 = load v1
        v3 = call add_8(v2, count), !152
        v4 = get_local ptr u64, next_pos, !153
        store v3 to v4, !153
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !110
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !111
        v10 = load v9
        v11 = call add_7(v7, v10), !154
        v12 = get_local ptr u64, ptr, !155
        store v11 to v12, !155
        v13 = get_local ptr u64, ptr, !156
        v14 = load v13
        v15 = get_local ptr { u64, u64 }, __anon_0, !157
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !157
        store v14 to v17, !157
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !157
        store count to v19, !157
        v20 = asm(ptr: v15) -> slice ptr, !158 {
        }
        v21 = get_local ptr slice, slice, !159
        store v20 to v21, !159
        v22 = get_local ptr u64, next_pos, !160
        v23 = load v22
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !161
        store v23 to v25, !161
        v26 = get_local ptr slice, slice, !162
        v27 = load v26
        ret slice v27
    }

    pub fn ptr_11(self !164: slice) -> u64, !165 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !166
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !167
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_12(slice !168: slice) -> { u64, u64 }, !169 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !170 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_13(self !171: slice, other !172: slice) -> bool, !173 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !174
        v1 = call len_16(other), !175
        v2 = call neq_14(v0, v1), !176
        cbr v2, block0(), block1(), !176

        block0():
        v3 = const bool false, !177
        br block2(v3)

        block1():
        v4 = call as_ptr_17(self), !178
        v5 = get_local ptr u64, self_ptr, !179
        store v4 to v5, !179
        v6 = call as_ptr_17(other), !180
        v7 = get_local ptr u64, other_ptr, !181
        store v6 to v7, !181
        v8 = call len_16(self), !182
        v9 = get_local ptr u64, l, !183
        store v8 to v9, !183
        v10 = get_local ptr u64, self_ptr, !184
        v11 = load v10
        v12 = get_local ptr u64, other_ptr, !185
        v13 = load v12
        v14 = get_local ptr u64, l, !186
        v15 = load v14
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !187 {
            meq    r4 r1 r2 r3, !188
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn neq_14(self !189: u64, other !190: u64) -> bool, !191 {
        entry(self: u64, other: u64):
        v0 = call eq_9(self, other), !192
        v1 = call not_15(v0), !193
        ret bool v1
    }

    pub fn not_15(self !194: bool) -> bool, !195 {
        entry(self: bool):
        v0 = const bool false, !196
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_16(self !198: slice) -> u64, !199 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !200 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !201
        store v0 to v1, !201
        v2 = get_local ptr { u64, u64 }, __tuple_2, !201
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !201
        store v3 to v4, !201
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !201
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !201
        v8 = load v7
        v9 = get_local ptr u64, _, !201
        store v8 to v9, !201
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !201
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !201
        v13 = load v12
        v14 = get_local ptr u64, len, !201
        store v13 to v14, !201
        v15 = get_local ptr u64, len, !202
        v16 = load v15
        ret u64 v16
    }

    pub fn as_ptr_17(self !203: slice) -> u64, !204 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !205 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !206
        store v0 to v1, !206
        v2 = get_local ptr { u64, u64 }, __tuple_1, !206
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !206
        store v3 to v4, !206
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !206
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !206
        v8 = load v7
        v9 = get_local ptr u64, ptr, !206
        store v8 to v9, !206
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !206
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !206
        v13 = load v12
        v14 = get_local ptr u64, _, !206
        store v13 to v14, !206
        v15 = get_local ptr u64, ptr, !207
        v16 = load v15
        ret u64 v16
    }

    pub fn decode_second_param_18() -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_20(v2), !212
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v3
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !213 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !214
        v1 = const u64 74, !215
        store v1 to v0, !214
        v2 = asm() -> u64 fp, !216 {
        }
        v3 = get_local ptr u64, ptr, !217
        store v2 to v3, !217
        v4 = get_local ptr u64, ptr, !218
        v5 = load v4
        v6 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !219
        v7 = load v6
        v8 = call add_2(v5, v7), !220
        v9 = get_local ptr u64, ptr_, !221
        store v8 to v9, !221
        v10 = get_local ptr u64, ptr_, !222
        v11 = load v10
        v12 = call read_3(v11), !223
        v13 = get_local ptr u64, ptr__, !224
        store v12 to v13, !224
        v14 = get_local ptr u64, ptr__, !225
        v15 = load v14
        v16 = asm(ptr: v15) -> u64 ptr, !226 {
        }
        v17 = get_local ptr { u64, u64 }, __anon_0, !227
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v16 to v19, !227
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20
        v22 = const u64 0, !228
        store v22 to v21, !227
        v23 = load v17
        ret { u64, u64 } v23
    }

    pub fn abi_decode_20(buffer !229: ptr { u64, u64 }) -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !230 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_21(buffer), !231
        v1 = call abi_decode_34(buffer), !232
        v2 = call abi_decode_37(buffer), !233
        v3 = call abi_decode_39(buffer), !234
        v4 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !235
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v5, !235
        store v0 to v6, !235
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v7, !235
        store v1 to v8, !235
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr { string<5>, bool }, v9, !235
        store v2 to v10, !235
        v11 = const u64 3
        v12 = get_elem_ptr v4, ptr { u64 }, v11, !235
        store v3 to v12, !235
        v13 = load v4
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v13
    }

    pub fn abi_decode_21(buffer !236: ptr { u64, u64 }) -> { [b256; 3], { u64, ( u64 | bool ) } }, !237 {
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_22(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr [b256; 3], v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { [b256; 3], { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_22(self !241: ptr { u64, u64 }) -> [b256; 3], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_23(self), !243
        ret [b256; 3] v0
    }

    pub fn abi_decode_23(buffer !244: ptr { u64, u64 }) -> [b256; 3], !245 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !246
        v1 = get_local ptr b256, first, !247
        store v0 to v1, !247
        v2 = get_local ptr [b256; 3], __anon_0, !248
        v3 = get_local ptr b256, first, !249
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5
        store v4 to v6, !248
        v7 = get_local ptr b256, first, !249
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9
        store v8 to v10, !248
        v11 = get_local ptr b256, first, !249
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13
        store v12 to v14, !248
        v15 = load v2
        v16 = get_local ptr [b256; 3], array, !250
        store v15 to v16, !250
        v17 = get_local ptr u64, i, !251
        v18 = const u64 1, !252
        store v18 to v17, !251
        br while()

        while():
        v19 = get_local ptr u64, i, !253
        v20 = load v19
        v21 = const u64 3, !254
        v22 = call lt_27(v20, v21), !255
        cbr v22, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v23 = call decode_24(buffer), !256
        v24 = get_local ptr [b256; 3], array, !257
        v25 = get_local ptr u64, i, !258
        v26 = load v25
        v27 = get_elem_ptr v24, ptr b256, v26, !257
        store v23 to v27, !257
        v28 = get_local ptr u64, i, !259
        v29 = load v28
        v30 = const u64 1, !260
        v31 = call add_8(v29, v30), !261
        v32 = get_local ptr u64, i, !261
        store v31 to v32, !261
        br while()

        end_while():
        v33 = get_local ptr [b256; 3], array, !262
        v34 = load v33
        ret [b256; 3] v34
    }

    pub fn decode_24(self !241: ptr { u64, u64 }) -> b256, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_25(self), !243
        ret b256 v0
    }

    pub fn abi_decode_25(buffer !263: ptr { u64, u64 }) -> b256, !264 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_26(buffer), !265
        ret b256 v0
    }

    pub fn read_26(self !108: ptr { u64, u64 }) -> b256, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        store v6 to v7, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 32
        store v9 to v8, !114
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !111
        v12 = load v11
        v13 = get_local ptr u64, size, !115
        v14 = load v13
        v15 = call add_8(v12, v14), !116
        v16 = get_local ptr u64, next_pos, !117
        store v15 to v16, !117
        v17 = const bool true
        cbr v17, block0(), block1(), !118

        block0():
        v18 = get_local ptr u64, ptr, !119
        v19 = load v18
        v20 = asm(ptr: v19) -> b256 ptr, !120 {
        }
        v21 = get_local ptr b256, v, !121
        store v20 to v21, !121
        v22 = get_local ptr u64, next_pos, !122
        v23 = load v22
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !123
        store v23 to v25, !123
        v26 = get_local ptr b256, v, !124
        v27 = load v26
        br block5(v27)

        block1():
        v28 = get_local ptr u64, size, !125
        v29 = load v28
        v30 = const u64 1, !126
        v31 = call eq_9(v29, v30), !127
        cbr v31, block2(), block3(), !127

        block2():
        v32 = get_local ptr u64, ptr, !128
        v33 = load v32
        v34 = asm(ptr: v33, val) -> b256 val, !129 {
            lb     val ptr i0, !130
        }
        v35 = get_local ptr b256, v_, !131
        store v34 to v35, !131
        v36 = get_local ptr u64, next_pos, !132
        v37 = load v36
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !133
        store v37 to v39, !133
        v40 = get_local ptr b256, v_, !134
        v41 = load v40
        br block4(v41)

        block3():
        v42 = get_local ptr u64, ptr, !135
        v43 = load v42
        v44 = asm(ptr: v43, val) -> b256 val, !136 {
            lw     val ptr i0, !137
        }
        v45 = get_local ptr b256, v__, !138
        store v44 to v45, !138
        v46 = get_local ptr u64, next_pos, !139
        v47 = load v46
        v48 = const u64 1
        v49 = get_elem_ptr self, ptr u64, v48, !140
        store v47 to v49, !140
        v50 = get_local ptr b256, v__, !141
        v51 = load v50
        br block4(v51)

        block4(v52: b256):
        br block5(v52)

        block5(v53: b256):
        ret b256 v53
    }

    pub fn lt_27(self !266: u64, other !267: u64) -> bool, !268 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn decode_28(self !241: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_29(self), !243
        ret { u64, ( u64 | bool ) } v0
    }

    pub fn abi_decode_29(buffer !269: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !270 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !271
        v1 = get_local ptr u64, variant, !272
        store v0 to v1, !272
        v2 = get_local ptr u64, variant, !273
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !274
        store v3 to v4, !274
        v5 = get_local ptr u64, __matched_value_1, !273
        v6 = load v5
        v7 = const u64 0, !275
        v8 = call eq_9(v6, v7), !276
        cbr v8, block0(), block1(), !276

        block0():
        v9 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !278
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !278
        v12 = const u64 0, !278
        store v12 to v11, !278
        v13 = call decode_30(buffer), !279
        v14 = const u64 1
        v15 = const u64 0
        v16 = get_elem_ptr v9, ptr u64, v14, v15, !278
        store v13 to v16, !278
        v17 = load v9
        br block5(v17)

        block1():
        v18 = get_local ptr u64, __matched_value_1, !273
        v19 = load v18
        v20 = const u64 1, !280
        v21 = call eq_9(v19, v20), !281
        cbr v21, block2(), block3(), !281

        block2():
        v22 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !278
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !278
        v25 = const u64 1, !278
        store v25 to v24, !278
        v26 = call decode_31(buffer), !282
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v22, ptr bool, v27, v28, !278
        store v26 to v29, !278
        v30 = load v22
        br block4(v30)

        block3():
        v31 = const u64 0, !283
        revert v31, !284

        block4(v32: { u64, ( u64 | bool ) }):
        br block5(v32)

        block5(v33: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v33
    }

    pub fn decode_30(self !241: ptr { u64, u64 }) -> u64, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !243
        ret u64 v0
    }

    pub fn decode_31(self !241: ptr { u64, u64 }) -> bool, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_32(self), !243
        ret bool v0
    }

    pub fn abi_decode_32(buffer !285: ptr { u64, u64 }) -> bool, !286 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_33(buffer), !287
        ret bool v0
    }

    pub fn read_33(self !108: ptr { u64, u64 }) -> bool, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        store v6 to v7, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        store v9 to v8, !114
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !111
        v12 = load v11
        v13 = get_local ptr u64, size, !115
        v14 = load v13
        v15 = call add_8(v12, v14), !116
        v16 = get_local ptr u64, next_pos, !117
        store v15 to v16, !117
        v17 = const bool false
        cbr v17, block0(), block1(), !118

        block0():
        v18 = get_local ptr u64, ptr, !119
        v19 = load v18
        v20 = asm(ptr: v19) -> bool ptr, !120 {
        }
        v21 = get_local ptr bool, v, !121
        store v20 to v21, !121
        v22 = get_local ptr u64, next_pos, !122
        v23 = load v22
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !123
        store v23 to v25, !123
        v26 = get_local ptr bool, v, !124
        v27 = load v26
        br block5(v27)

        block1():
        v28 = get_local ptr u64, size, !125
        v29 = load v28
        v30 = const u64 1, !126
        v31 = call eq_9(v29, v30), !127
        cbr v31, block2(), block3(), !127

        block2():
        v32 = get_local ptr u64, ptr, !128
        v33 = load v32
        v34 = asm(ptr: v33, val) -> bool val, !129 {
            lb     val ptr i0, !130
        }
        v35 = get_local ptr bool, v_, !131
        store v34 to v35, !131
        v36 = get_local ptr u64, next_pos, !132
        v37 = load v36
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !133
        store v37 to v39, !133
        v40 = get_local ptr bool, v_, !134
        v41 = load v40
        br block4(v41)

        block3():
        v42 = get_local ptr u64, ptr, !135
        v43 = load v42
        v44 = asm(ptr: v43, val) -> bool val, !136 {
            lw     val ptr i0, !137
        }
        v45 = get_local ptr bool, v__, !138
        store v44 to v45, !138
        v46 = get_local ptr u64, next_pos, !139
        v47 = load v46
        v48 = const u64 1
        v49 = get_elem_ptr self, ptr u64, v48, !140
        store v47 to v49, !140
        v50 = get_local ptr bool, v__, !141
        v51 = load v50
        br block4(v51)

        block4(v52: bool):
        br block5(v52)

        block5(v53: bool):
        ret bool v53
    }

    pub fn abi_decode_34(buffer !288: ptr { u64, u64 }) -> [{ u64, { u64, ( u64 | bool ) } }; 4], !289 {
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_0
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array
        local { u64, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_35(buffer), !290
        v1 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !291
        store v0 to v1, !291
        v2 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_0, !292
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !292
        v7 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !292
        v11 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !292
        v15 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !292
        v19 = load v2
        v20 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !294
        store v19 to v20, !294
        v21 = get_local ptr u64, i, !295
        v22 = const u64 1, !296
        store v22 to v21, !295
        br while()

        while():
        v23 = get_local ptr u64, i, !297
        v24 = load v23
        v25 = const u64 4, !298
        v26 = call lt_27(v24, v25), !299
        cbr v26, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v27 = call decode_35(buffer), !300
        v28 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !301
        v29 = get_local ptr u64, i, !302
        v30 = load v29
        v31 = get_elem_ptr v28, ptr { u64, { u64, ( u64 | bool ) } }, v30, !301
        store v27 to v31, !301
        v32 = get_local ptr u64, i, !303
        v33 = load v32
        v34 = const u64 1, !304
        v35 = call add_8(v33, v34), !305
        v36 = get_local ptr u64, i, !305
        store v35 to v36, !305
        br while()

        end_while():
        v37 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !306
        v38 = load v37
        ret [{ u64, { u64, ( u64 | bool ) } }; 4] v38
    }

    pub fn decode_35(self !241: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_36(self), !243
        ret { u64, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_36(buffer !236: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !237 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_37(buffer !307: ptr { u64, u64 }) -> { string<5>, bool }, !308 {
        local { string<5>, bool } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_38(buffer), !309
        v1 = call abi_decode_32(buffer), !310
        v2 = get_local ptr { string<5>, bool }, __anon_0, !311
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr string<5>, v3, !311
        store v0 to v4, !311
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr bool, v5, !311
        store v1 to v6, !311
        v7 = load v2
        ret { string<5>, bool } v7
    }

    pub fn abi_decode_38(buffer !312: ptr { u64, u64 }) -> string<5>, !313 {
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !314
        v1 = call read_bytes_10(buffer, v0), !315
        v2 = get_local ptr slice, data, !316
        store v1 to v2, !316
        v3 = get_local ptr slice, data, !317
        v4 = load v3
        v5 = call ptr_11(v4), !318
        v6 = asm(s: v5) -> string<5> s, !319 {
        }
        ret string<5> v6
    }

    pub fn abi_decode_39(buffer !320: ptr { u64, u64 }) -> { u64 }, !321 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !322
        v1 = get_local ptr { u64 }, __anon_0, !323
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !323
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_40(item !324: string<6>) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: string<6>):
        v0 = call new_42(), !326
        v1 = call abi_encode_41(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_41(self !331: string<6>, buffer !332: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !333 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: string<6>, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = get_local ptr string<6>, __anon_1
        store self to v17
        v18 = ptr_to_int v10 to u64
        v19 = add v18, v16
        v20 = int_to_ptr v19 to ptr u8
        mem_copy_bytes v20, v17, 6
        v21 = const u64 6
        v22 = add v16, v21
        v23 = ptr_to_int v10 to u64
        v24 = get_local ptr { u64, u64, u64 }, __anon_2
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25
        store v23 to v26
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27
        store v13 to v28
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29
        store v22 to v30
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_3, !335
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33
        store v31 to v34, !335
        v35 = load v32
        ret { { u64, u64, u64 } } v35
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !336 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !337
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !337
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !338: { { u64, u64, u64 } }) -> slice, !339 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn complex_function_44(_arg1 !340: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !341: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !342: { string<5>, bool }, _arg4 !343: { u64 }) -> string<6>, !344 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn len_45(self !345: slice) -> u64, !346 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !347
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !348
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn decode_second_param_46() -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_47(v2), !212
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v3
    }

    pub fn abi_decode_47(buffer !349: ptr { u64, u64 }) -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !350 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_48(buffer), !351
        v1 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !352
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v2, !352
        store v0 to v3, !352
        v4 = load v1
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v4
    }

    pub fn abi_decode_48(buffer !353: ptr { u64, u64 }) -> { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, !354 {
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_49(buffer), !355
        v1 = call decode_54(buffer), !356
        v2 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_0, !357
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr [u8; 3], v3
        store v0 to v4, !357
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v5
        store v1 to v6, !357
        v7 = load v2
        ret { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } v7
    }

    pub fn decode_49(self !241: ptr { u64, u64 }) -> [u8; 3], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_50(self), !243
        ret [u8; 3] v0
    }

    pub fn abi_decode_50(buffer !244: ptr { u64, u64 }) -> [u8; 3], !245 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !246
        v1 = get_local ptr u8, first, !247
        store v0 to v1, !247
        v2 = get_local ptr [u8; 3], __anon_0, !248
        v3 = get_local ptr u8, first, !249
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr u8, v5
        store v4 to v6, !248
        v7 = get_local ptr u8, first, !249
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr u8, v9
        store v8 to v10, !248
        v11 = get_local ptr u8, first, !249
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr u8, v13
        store v12 to v14, !248
        v15 = load v2
        v16 = get_local ptr [u8; 3], array, !250
        store v15 to v16, !250
        v17 = get_local ptr u64, i, !251
        v18 = const u64 1, !252
        store v18 to v17, !251
        br while()

        while():
        v19 = get_local ptr u64, i, !253
        v20 = load v19
        v21 = const u64 3, !254
        v22 = call lt_27(v20, v21), !255
        cbr v22, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v23 = call decode_51(buffer), !256
        v24 = get_local ptr [u8; 3], array, !257
        v25 = get_local ptr u64, i, !258
        v26 = load v25
        v27 = get_elem_ptr v24, ptr u8, v26, !257
        store v23 to v27, !257
        v28 = get_local ptr u64, i, !259
        v29 = load v28
        v30 = const u64 1, !260
        v31 = call add_8(v29, v30), !261
        v32 = get_local ptr u64, i, !261
        store v31 to v32, !261
        br while()

        end_while():
        v33 = get_local ptr [u8; 3], array, !262
        v34 = load v33
        ret [u8; 3] v34
    }

    pub fn decode_51(self !241: ptr { u64, u64 }) -> u8, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_52(self), !243
        ret u8 v0
    }

    pub fn abi_decode_52(buffer !358: ptr { u64, u64 }) -> u8, !359 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !360
        ret u8 v0
    }

    pub fn read_53(self !108: ptr { u64, u64 }) -> u8, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        store v6 to v7, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        store v9 to v8, !114
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !111
        v12 = load v11
        v13 = get_local ptr u64, size, !115
        v14 = load v13
        v15 = call add_8(v12, v14), !116
        v16 = get_local ptr u64, next_pos, !117
        store v15 to v16, !117
        v17 = const bool false
        cbr v17, block0(), block1(), !118

        block0():
        v18 = get_local ptr u64, ptr, !119
        v19 = load v18
        v20 = asm(ptr: v19) -> u8 ptr, !120 {
        }
        v21 = get_local ptr u8, v, !121
        store v20 to v21, !121
        v22 = get_local ptr u64, next_pos, !122
        v23 = load v22
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !123
        store v23 to v25, !123
        v26 = get_local ptr u8, v, !124
        v27 = load v26
        br block5(v27)

        block1():
        v28 = get_local ptr u64, size, !125
        v29 = load v28
        v30 = const u64 1, !126
        v31 = call eq_9(v29, v30), !127
        cbr v31, block2(), block3(), !127

        block2():
        v32 = get_local ptr u64, ptr, !128
        v33 = load v32
        v34 = asm(ptr: v33, val) -> u8 val, !129 {
            lb     val ptr i0, !130
        }
        v35 = get_local ptr u8, v_, !131
        store v34 to v35, !131
        v36 = get_local ptr u64, next_pos, !132
        v37 = load v36
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !133
        store v37 to v39, !133
        v40 = get_local ptr u8, v_, !134
        v41 = load v40
        br block4(v41)

        block3():
        v42 = get_local ptr u64, ptr, !135
        v43 = load v42
        v44 = asm(ptr: v43, val) -> u8 val, !136 {
            lw     val ptr i0, !137
        }
        v45 = get_local ptr u8, v__, !138
        store v44 to v45, !138
        v46 = get_local ptr u64, next_pos, !139
        v47 = load v46
        v48 = const u64 1
        v49 = get_elem_ptr self, ptr u64, v48, !140
        store v47 to v49, !140
        v50 = get_local ptr u8, v__, !141
        v51 = load v50
        br block4(v51)

        block4(v52: u8):
        br block5(v52)

        block5(v53: u8):
        ret u8 v53
    }

    pub fn decode_54(self !241: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_55(self), !243
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v0
    }

    pub fn abi_decode_55(buffer !361: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !362 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_56(buffer), !363
        v1 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !364
        store v0 to v1, !364
        v2 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !365
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !365
        v7 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !365
        v11 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !365
        v15 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !365
        v19 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v20 = load v19
        v21 = const u64 4
        v22 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v21
        store v20 to v22, !365
        v23 = load v2
        v24 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !367
        store v23 to v24, !367
        v25 = get_local ptr u64, i, !368
        v26 = const u64 1, !369
        store v26 to v25, !368
        br while()

        while():
        v27 = get_local ptr u64, i, !370
        v28 = load v27
        v29 = const u64 5, !371
        v30 = call lt_27(v28, v29), !372
        cbr v30, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v31 = call decode_58(buffer), !373
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !374
        v33 = get_local ptr u64, i, !375
        v34 = load v33
        v35 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v34, !374
        store v31 to v35, !374
        v36 = get_local ptr u64, i, !376
        v37 = load v36
        v38 = const u64 1, !377
        v39 = call add_8(v37, v38), !378
        v40 = get_local ptr u64, i, !378
        store v39 to v40, !378
        br while()

        end_while():
        v41 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !379
        v42 = load v41
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v42
    }

    pub fn decode_56(self !241: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_57(self), !243
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_57(buffer !236: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !237 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_58(self !241: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !243
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_59(buffer !236: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !237 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn encode_60(item !324: u64) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_42(), !326
        v1 = call abi_encode_61(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_61(self !380: u64, buffer !381: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !382 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr u64
        store self to v19
        v20 = const u64 8
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !383
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !383
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn take_generic_array_62(_arg !384: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !385 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !386
        ret u64 v0
    }

    pub fn decode_second_param_63() -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_64(v2), !212
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v3
    }

    pub fn abi_decode_64(buffer !349: ptr { u64, u64 }) -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !350 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_65(buffer), !351
        v1 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !352
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v2, !352
        store v0 to v3, !352
        v4 = load v1
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v4
    }

    pub fn abi_decode_65(buffer !387: ptr { u64, u64 }) -> { { { u64 }, u64, u64 }, { u64, { u64 } } }, !388 {
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_66(buffer), !389
        v1 = call decode_79(buffer), !390
        v2 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_0, !391
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { { u64 }, u64, u64 }, v3
        store v0 to v4, !391
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, { u64 } }, v5
        store v1 to v6, !391
        v7 = load v2
        ret { { { u64 }, u64, u64 }, { u64, { u64 } } } v7
    }

    pub fn decode_66(self !241: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_67(self), !243
        ret { { u64 }, u64, u64 } v0
    }

    pub fn abi_decode_67(buffer !392: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !393 {
        local { { u64 }, u64, u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_68(buffer), !394
        v1 = call abi_decode_69(buffer), !395
        v2 = call abi_decode_74(buffer), !396
        v3 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !397
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64 }, v4, !397
        store v0 to v5, !397
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !397
        store v1 to v7, !397
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr u64, v8, !397
        store v2 to v9, !397
        v10 = load v3
        ret { { u64 }, u64, u64 } v10
    }

    pub fn abi_decode_68(buffer !398: ptr { u64, u64 }) -> { u64 }, !399 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !400
        v1 = get_local ptr { u64 }, __anon_0, !401
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !401
        v4 = load v1
        ret { u64 } v4
    }

    pub fn abi_decode_69(buffer !402: ptr { u64, u64 }) -> u64, !403 {
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !404
        v1 = call as_u16_70(v0), !405
        v2 = get_local ptr u64, a, !406
        store v1 to v2, !406
        v3 = call read_53(buffer), !407
        v4 = call as_u16_70(v3), !408
        v5 = get_local ptr u64, b, !409
        store v4 to v5, !409
        v6 = get_local ptr u64, a, !410
        v7 = load v6
        v8 = const u64 8, !411
        v9 = call lsh_72(v7, v8), !412
        v10 = get_local ptr u64, b, !413
        v11 = load v10
        v12 = call binary_or_71(v9, v11), !414
        ret u64 v12
    }

    pub fn as_u16_70(self !416: u8) -> u64, !417 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !418 {
        }
        ret u64 v0
    }

    pub fn binary_or_71(self !419: u64, other !420: u64) -> u64, !421 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_72(self !422: u64, other !423: u64) -> u64, !424 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_73(), !425
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_73() -> u64, !427 {
        entry():
        v0 = const u64 65535, !428
        ret u64 v0
    }

    pub fn abi_decode_74(buffer !429: ptr { u64, u64 }) -> u64, !430 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !431
        v1 = call as_u32_75(v0), !432
        v2 = get_local ptr u64, a, !433
        store v1 to v2, !433
        v3 = call read_53(buffer), !434
        v4 = call as_u32_75(v3), !435
        v5 = get_local ptr u64, b, !436
        store v4 to v5, !436
        v6 = call read_53(buffer), !437
        v7 = call as_u32_75(v6), !438
        v8 = get_local ptr u64, c, !439
        store v7 to v8, !439
        v9 = call read_53(buffer), !440
        v10 = call as_u32_75(v9), !441
        v11 = get_local ptr u64, d, !442
        store v10 to v11, !442
        v12 = get_local ptr u64, a, !443
        v13 = load v12
        v14 = const u64 24, !444
        v15 = call lsh_77(v13, v14), !445
        v16 = get_local ptr u64, b, !446
        v17 = load v16
        v18 = const u64 16, !447
        v19 = call lsh_77(v17, v18), !448
        v20 = call binary_or_76(v15, v19), !449
        v21 = get_local ptr u64, c, !450
        v22 = load v21
        v23 = const u64 8, !451
        v24 = call lsh_77(v22, v23), !452
        v25 = call binary_or_76(v20, v24), !453
        v26 = get_local ptr u64, d, !454
        v27 = load v26
        v28 = call binary_or_76(v25, v27), !455
        ret u64 v28
    }

    pub fn as_u32_75(self !456: u8) -> u64, !457 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !458 {
        }
        ret u64 v0
    }

    pub fn binary_or_76(self !459: u64, other !460: u64) -> u64, !461 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_77(self !462: u64, other !463: u64) -> u64, !464 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_78(), !465
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_78() -> u64, !466 {
        entry():
        v0 = const u64 4294967295, !467
        ret u64 v0
    }

    pub fn decode_79(self !241: ptr { u64, u64 }) -> { u64, { u64 } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_80(self), !243
        ret { u64, { u64 } } v0
    }

    pub fn abi_decode_80(buffer !307: ptr { u64, u64 }) -> { u64, { u64 } }, !308 {
        local { u64, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_74(buffer), !309
        v1 = call abi_decode_81(buffer), !310
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !311
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !311
        store v0 to v4, !311
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !311
        store v1 to v6, !311
        v7 = load v2
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_81(buffer !398: ptr { u64, u64 }) -> { u64 }, !399 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !400
        v1 = get_local ptr { u64 }, __anon_0, !401
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !401
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_82(item !324: ()) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_42(), !326
        v1 = call abi_encode_83(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_83(self !468: (), buffer !469: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !470 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn take_generic_struct_containing_tuple_84(_arg !471: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !472 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }

    pub fn complex_function<51fdfdad>(_arg1 !340: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !341: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !342: { string<5>, bool }, _arg4 !343: { u64 }) -> string<6>, !344 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn take_generic_array<67f6e807>(_arg !384: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !385 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !386
        ret u64 v0
    }

    pub fn take_generic_struct_containing_tuple<29ad7e95>(_arg !471: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !472 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }
}

// IR: [mem2reg] Promotion of local memory to SSA registers
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64, u64 } __anon_2
        local slice __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = call decode_first_param_0(), !2
        v1 = get_local ptr slice, _method_name, !3
        store v0 to v1, !3
        v2 = get_local ptr slice, _method_name, !4
        v3 = load v2
        v4 = const string<16> "complex_function"
        v5 = ptr_to_int v4 to u64, !5
        v6 = get_local ptr { u64, u64 }, __anon_0, !5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8, !5
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 16
        store v11 to v10, !5
        v12 = get_local ptr slice, __anon_1, !5
        mem_copy_bytes v12, v6, 16
        v13 = load v12
        v14 = call eq_13(v3, v13), !6
        cbr v14, block0(), block1(), !6

        block0():
        v15 = call decode_second_param_18(), !7
        v16 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !8
        store v15 to v16, !8
        v17 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !9
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v18, !10
        v20 = load v19
        v21 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !11
        v22 = const u64 1
        v23 = get_elem_ptr v21, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v22, !12
        v24 = load v23
        v25 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !13
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr { string<5>, bool }, v26, !14
        v28 = load v27
        v29 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !15
        v30 = const u64 3
        v31 = get_elem_ptr v29, ptr { u64 }, v30, !16
        v32 = load v31
        v33 = call complex_function_44(v20, v24, v28, v32), !17
        v34 = call encode_40(v33), !18
        v35 = get_local ptr slice, result_complex_function, !19
        store v34 to v35, !19
        v36 = get_local ptr slice, result_complex_function, !20
        v37 = load v36
        v38 = call ptr_11(v37), !21
        v39 = get_local ptr slice, result_complex_function, !22
        v40 = load v39
        v41 = call len_45(v40), !23
        retd v38 v41, !24
        v42 = const unit ()
        br block2(v42)

        block1():
        v43 = const unit ()
        br block2(v43)

        block2(v44: ()):
        v45 = get_local ptr slice, _method_name, !25
        v46 = load v45
        v47 = const string<18> "take_generic_array"
        v48 = ptr_to_int v47 to u64, !26
        v49 = get_local ptr { u64, u64 }, __anon_2, !26
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50
        store v48 to v51, !26
        v52 = const u64 1
        v53 = get_elem_ptr v49, ptr u64, v52
        v54 = const u64 18
        store v54 to v53, !26
        v55 = get_local ptr slice, __anon_3, !26
        mem_copy_bytes v55, v49, 16
        v56 = load v55
        v57 = call eq_13(v46, v56), !27
        cbr v57, block3(), block4(), !27

        block3():
        v58 = call decode_second_param_46(), !28
        v59 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !29
        store v58 to v59, !29
        v60 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !30
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v61, !31
        v63 = load v62
        v64 = call take_generic_array_62(v63), !32
        v65 = call encode_60(v64), !33
        v66 = get_local ptr slice, result_take_generic_array, !34
        store v65 to v66, !34
        v67 = get_local ptr slice, result_take_generic_array, !35
        v68 = load v67
        v69 = call ptr_11(v68), !36
        v70 = get_local ptr slice, result_take_generic_array, !37
        v71 = load v70
        v72 = call len_45(v71), !38
        retd v69 v72, !39
        v73 = const unit ()
        br block5(v73)

        block4():
        v74 = const unit ()
        br block5(v74)

        block5(v75: ()):
        v76 = get_local ptr slice, _method_name, !40
        v77 = load v76
        v78 = const string<36> "take_generic_struct_containing_tuple"
        v79 = ptr_to_int v78 to u64, !41
        v80 = get_local ptr { u64, u64 }, __anon_4, !41
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81
        store v79 to v82, !41
        v83 = const u64 1
        v84 = get_elem_ptr v80, ptr u64, v83
        v85 = const u64 36
        store v85 to v84, !41
        v86 = get_local ptr slice, __anon_5, !41
        mem_copy_bytes v86, v80, 16
        v87 = load v86
        v88 = call eq_13(v77, v87), !42
        cbr v88, block6(), block7(), !42

        block6():
        v89 = call decode_second_param_63(), !43
        v90 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !44
        store v89 to v90, !44
        v91 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !45
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v92, !46
        v94 = load v93
        v95 = call take_generic_struct_containing_tuple_84(v94), !47
        v96 = call encode_82(v95), !48
        v97 = get_local ptr slice, result_take_generic_struct_containing_tuple, !49
        store v96 to v97, !49
        v98 = get_local ptr slice, result_take_generic_struct_containing_tuple, !50
        v99 = load v98
        v100 = call ptr_11(v99), !51
        v101 = get_local ptr slice, result_take_generic_struct_containing_tuple, !52
        v102 = load v101
        v103 = call len_45(v102), !53
        retd v100 v103, !54
        v104 = const unit ()
        br block8(v104)

        block7():
        v105 = const unit ()
        br block8(v105)

        block8(v106: ()):
        v107 = const u64 123, !55
        revert v107, !56
    }

    pub fn decode_first_param_0() -> slice, !58 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_first_parameter_1(), !59
        v1 = get_local ptr { u64, u64 }, buffer, !60
        store v0 to v1, !60
        v2 = get_local ptr { u64, u64 }, buffer, !61
        v3 = call abi_decode_4(v2), !62
        ret slice v3
    }

    pub fn from_first_parameter_1() -> { u64, u64 }, !63 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !64
        v1 = asm() -> u64 fp, !65 {
        }
        v2 = get_local ptr u64, ptr, !66
        v3 = get_local ptr u64, ptr, !67
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !68
        v5 = const u64 73, !69
        v6 = call add_2(v1, v5), !70
        v7 = get_local ptr u64, ptr_, !71
        v8 = get_local ptr u64, ptr_, !72
        v9 = call read_3(v6), !73
        v10 = get_local ptr u64, ptr__, !74
        v11 = get_local ptr u64, ptr__, !75
        v12 = asm(ptr: v9) -> u64 ptr, !76 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_0, !77
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !77
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 0, !78
        store v18 to v17, !77
        v19 = load v13
        ret { u64, u64 } v19
    }

    pub fn add_2(self !80: u64, count !81: u64) -> u64, !82 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_3(self !83: u64) -> u64, !84 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !85

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !86 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !87
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !88

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !89 {
            lb     val ptr i0, !90
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !91 {
            lw     val ptr i0, !92
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn abi_decode_4(buffer !93: ptr { u64, u64 }) -> slice, !94 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !95
        v1 = get_local ptr u64, len, !96
        v2 = get_local ptr u64, len, !97
        v3 = call read_bytes_10(buffer, v0), !98
        v4 = get_local ptr slice, data, !99
        store v3 to v4, !99
        v5 = get_local ptr slice, data, !100
        v6 = load v5
        v7 = call ptr_11(v6), !101
        v8 = get_local ptr u64, len, !102
        v9 = get_local ptr { u64, u64 }, __anon_0, !103
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !103
        store v7 to v11, !103
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !103
        store v0 to v13, !103
        v14 = asm(s: v9) -> slice s, !104 {
        }
        ret slice v14
    }

    pub fn abi_decode_5(buffer !105: ptr { u64, u64 }) -> u64, !106 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_6(buffer), !107
        ret u64 v0
    }

    pub fn read_6(self !108: ptr { u64, u64 }) -> u64, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 8
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool false
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> u64 ptr, !120 {
        }
        v19 = get_local ptr u64, v, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr u64, v, !124
        br block5(v18)

        block1():
        v24 = get_local ptr u64, size, !125
        v25 = const u64 1, !126
        v26 = call eq_9(v13, v25), !127
        cbr v26, block2(), block3(), !127

        block2():
        v27 = get_local ptr u64, ptr, !128
        v28 = asm(ptr: v6, val) -> u64 val, !129 {
            lb     val ptr i0, !130
        }
        v29 = get_local ptr u64, v_, !131
        v30 = get_local ptr u64, next_pos, !132
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !133
        store v14 to v32, !133
        v33 = get_local ptr u64, v_, !134
        br block4(v28)

        block3():
        v34 = get_local ptr u64, ptr, !135
        v35 = asm(ptr: v6, val) -> u64 val, !136 {
            lw     val ptr i0, !137
        }
        v36 = get_local ptr u64, v__, !138
        v37 = get_local ptr u64, next_pos, !139
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !140
        store v14 to v39, !140
        v40 = get_local ptr u64, v__, !141
        br block4(v35)

        block4(v41: u64):
        br block5(v41)

        block5(v42: u64):
        ret u64 v42
    }

    pub fn add_7(self !80: u64, count !81: u64) -> u64, !82 {
        entry(self: u64, count: u64):
        v0 = const u64 1
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn add_8(self !143: u64, other !144: u64) -> u64, !145 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn eq_9(self !146: u64, other !147: u64) -> bool, !148 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn read_bytes_10(self !149: ptr { u64, u64 }, count !150: u64) -> slice, !151 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !111
        v2 = load v1
        v3 = call add_8(v2, count), !152
        v4 = get_local ptr u64, next_pos, !153
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !110
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !111
        v10 = load v9
        v11 = call add_7(v7, v10), !154
        v12 = get_local ptr u64, ptr, !155
        v13 = get_local ptr u64, ptr, !156
        v14 = get_local ptr { u64, u64 }, __anon_0, !157
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !157
        store v11 to v16, !157
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17, !157
        store count to v18, !157
        v19 = asm(ptr: v14) -> slice ptr, !158 {
        }
        v20 = get_local ptr slice, slice, !159
        store v19 to v20, !159
        v21 = get_local ptr u64, next_pos, !160
        v22 = const u64 1
        v23 = get_elem_ptr self, ptr u64, v22, !161
        store v3 to v23, !161
        v24 = get_local ptr slice, slice, !162
        v25 = load v24
        ret slice v25
    }

    pub fn ptr_11(self !164: slice) -> u64, !165 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !166
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !167
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_12(slice !168: slice) -> { u64, u64 }, !169 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !170 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_13(self !171: slice, other !172: slice) -> bool, !173 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !174
        v1 = call len_16(other), !175
        v2 = call neq_14(v0, v1), !176
        cbr v2, block0(), block1(), !176

        block0():
        v3 = const bool false, !177
        br block2(v3)

        block1():
        v4 = call as_ptr_17(self), !178
        v5 = get_local ptr u64, self_ptr, !179
        v6 = call as_ptr_17(other), !180
        v7 = get_local ptr u64, other_ptr, !181
        v8 = call len_16(self), !182
        v9 = get_local ptr u64, l, !183
        v10 = get_local ptr u64, self_ptr, !184
        v11 = get_local ptr u64, other_ptr, !185
        v12 = get_local ptr u64, l, !186
        v13 = asm(r1: v4, r2: v6, r3: v8, r4) -> bool r4, !187 {
            meq    r4 r1 r2 r3, !188
        }
        br block2(v13)

        block2(v14: bool):
        ret bool v14
    }

    pub fn neq_14(self !189: u64, other !190: u64) -> bool, !191 {
        entry(self: u64, other: u64):
        v0 = call eq_9(self, other), !192
        v1 = call not_15(v0), !193
        ret bool v1
    }

    pub fn not_15(self !194: bool) -> bool, !195 {
        entry(self: bool):
        v0 = const bool false, !196
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_16(self !198: slice) -> u64, !199 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !200 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !201
        store v0 to v1, !201
        v2 = get_local ptr { u64, u64 }, __tuple_2, !201
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !201
        store v3 to v4, !201
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !201
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !201
        v8 = load v7
        v9 = get_local ptr u64, _, !201
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !201
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !201
        v13 = load v12
        v14 = get_local ptr u64, len, !201
        v15 = get_local ptr u64, len, !202
        ret u64 v13
    }

    pub fn as_ptr_17(self !203: slice) -> u64, !204 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !205 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !206
        store v0 to v1, !206
        v2 = get_local ptr { u64, u64 }, __tuple_1, !206
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !206
        store v3 to v4, !206
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !206
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !206
        v8 = load v7
        v9 = get_local ptr u64, ptr, !206
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !206
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !206
        v13 = load v12
        v14 = get_local ptr u64, _, !206
        v15 = get_local ptr u64, ptr, !207
        ret u64 v8
    }

    pub fn decode_second_param_18() -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_20(v2), !212
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v3
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !213 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !214
        v1 = asm() -> u64 fp, !215 {
        }
        v2 = get_local ptr u64, ptr, !216
        v3 = get_local ptr u64, ptr, !217
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !218
        v5 = const u64 74, !219
        v6 = call add_2(v1, v5), !220
        v7 = get_local ptr u64, ptr_, !221
        v8 = get_local ptr u64, ptr_, !222
        v9 = call read_3(v6), !223
        v10 = get_local ptr u64, ptr__, !224
        v11 = get_local ptr u64, ptr__, !225
        v12 = asm(ptr: v9) -> u64 ptr, !226 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_0, !227
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !227
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 0, !228
        store v18 to v17, !227
        v19 = load v13
        ret { u64, u64 } v19
    }

    pub fn abi_decode_20(buffer !229: ptr { u64, u64 }) -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !230 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_21(buffer), !231
        v1 = call abi_decode_34(buffer), !232
        v2 = call abi_decode_37(buffer), !233
        v3 = call abi_decode_39(buffer), !234
        v4 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !235
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v5, !235
        store v0 to v6, !235
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v7, !235
        store v1 to v8, !235
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr { string<5>, bool }, v9, !235
        store v2 to v10, !235
        v11 = const u64 3
        v12 = get_elem_ptr v4, ptr { u64 }, v11, !235
        store v3 to v12, !235
        v13 = load v4
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v13
    }

    pub fn abi_decode_21(buffer !236: ptr { u64, u64 }) -> { [b256; 3], { u64, ( u64 | bool ) } }, !237 {
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_22(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr [b256; 3], v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { [b256; 3], { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_22(self !241: ptr { u64, u64 }) -> [b256; 3], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_23(self), !243
        ret [b256; 3] v0
    }

    pub fn abi_decode_23(buffer !244: ptr { u64, u64 }) -> [b256; 3], !245 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !246
        v1 = get_local ptr b256, first, !247
        store v0 to v1, !247
        v2 = get_local ptr [b256; 3], __anon_0, !248
        v3 = get_local ptr b256, first, !249
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5
        store v4 to v6, !248
        v7 = get_local ptr b256, first, !249
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9
        store v8 to v10, !248
        v11 = get_local ptr b256, first, !249
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13
        store v12 to v14, !248
        v15 = load v2
        v16 = get_local ptr [b256; 3], array, !250
        store v15 to v16, !250
        v17 = get_local ptr u64, i, !251
        v18 = const u64 1, !252
        br while(v18)

        while(v19: u64):
        v20 = get_local ptr u64, i, !253
        v21 = const u64 3, !254
        v22 = call lt_27(v19, v21), !255
        cbr v22, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v23 = call decode_24(buffer), !256
        v24 = get_local ptr [b256; 3], array, !257
        v25 = get_local ptr u64, i, !258
        v26 = get_elem_ptr v24, ptr b256, v19, !257
        store v23 to v26, !257
        v27 = get_local ptr u64, i, !259
        v28 = const u64 1, !260
        v29 = call add_8(v19, v28), !261
        v30 = get_local ptr u64, i, !261
        br while(v29)

        end_while():
        v31 = get_local ptr [b256; 3], array, !262
        v32 = load v31
        ret [b256; 3] v32
    }

    pub fn decode_24(self !241: ptr { u64, u64 }) -> b256, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_25(self), !243
        ret b256 v0
    }

    pub fn abi_decode_25(buffer !263: ptr { u64, u64 }) -> b256, !264 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_26(buffer), !265
        ret b256 v0
    }

    pub fn read_26(self !108: ptr { u64, u64 }) -> b256, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 32
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool true
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> b256 ptr, !120 {
        }
        v19 = get_local ptr b256, v, !121
        store v18 to v19, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr b256, v, !124
        v24 = load v23
        br block5(v24)

        block1():
        v25 = get_local ptr u64, size, !125
        v26 = const u64 1, !126
        v27 = call eq_9(v13, v26), !127
        cbr v27, block2(), block3(), !127

        block2():
        v28 = get_local ptr u64, ptr, !128
        v29 = asm(ptr: v6, val) -> b256 val, !129 {
            lb     val ptr i0, !130
        }
        v30 = get_local ptr b256, v_, !131
        store v29 to v30, !131
        v31 = get_local ptr u64, next_pos, !132
        v32 = const u64 1
        v33 = get_elem_ptr self, ptr u64, v32, !133
        store v14 to v33, !133
        v34 = get_local ptr b256, v_, !134
        v35 = load v34
        br block4(v35)

        block3():
        v36 = get_local ptr u64, ptr, !135
        v37 = asm(ptr: v6, val) -> b256 val, !136 {
            lw     val ptr i0, !137
        }
        v38 = get_local ptr b256, v__, !138
        store v37 to v38, !138
        v39 = get_local ptr u64, next_pos, !139
        v40 = const u64 1
        v41 = get_elem_ptr self, ptr u64, v40, !140
        store v14 to v41, !140
        v42 = get_local ptr b256, v__, !141
        v43 = load v42
        br block4(v43)

        block4(v44: b256):
        br block5(v44)

        block5(v45: b256):
        ret b256 v45
    }

    pub fn lt_27(self !266: u64, other !267: u64) -> bool, !268 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn decode_28(self !241: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_29(self), !243
        ret { u64, ( u64 | bool ) } v0
    }

    pub fn abi_decode_29(buffer !269: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !270 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !271
        v1 = get_local ptr u64, variant, !272
        v2 = get_local ptr u64, variant, !273
        v3 = get_local ptr u64, __matched_value_1, !274
        v4 = get_local ptr u64, __matched_value_1, !273
        v5 = const u64 0, !275
        v6 = call eq_9(v0, v5), !276
        cbr v6, block0(), block1(), !276

        block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !278
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !278
        v10 = const u64 0, !278
        store v10 to v9, !278
        v11 = call decode_30(buffer), !279
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !278
        store v11 to v14, !278
        v15 = load v7
        br block5(v15)

        block1():
        v16 = get_local ptr u64, __matched_value_1, !273
        v17 = const u64 1, !280
        v18 = call eq_9(v0, v17), !281
        cbr v18, block2(), block3(), !281

        block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !278
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !278
        v22 = const u64 1, !278
        store v22 to v21, !278
        v23 = call decode_31(buffer), !282
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !278
        store v23 to v26, !278
        v27 = load v19
        br block4(v27)

        block3():
        v28 = const u64 0, !283
        revert v28, !284

        block4(v29: { u64, ( u64 | bool ) }):
        br block5(v29)

        block5(v30: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v30
    }

    pub fn decode_30(self !241: ptr { u64, u64 }) -> u64, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !243
        ret u64 v0
    }

    pub fn decode_31(self !241: ptr { u64, u64 }) -> bool, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_32(self), !243
        ret bool v0
    }

    pub fn abi_decode_32(buffer !285: ptr { u64, u64 }) -> bool, !286 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_33(buffer), !287
        ret bool v0
    }

    pub fn read_33(self !108: ptr { u64, u64 }) -> bool, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 1
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool false
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> bool ptr, !120 {
        }
        v19 = get_local ptr bool, v, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr bool, v, !124
        br block5(v18)

        block1():
        v24 = get_local ptr u64, size, !125
        v25 = const u64 1, !126
        v26 = call eq_9(v13, v25), !127
        cbr v26, block2(), block3(), !127

        block2():
        v27 = get_local ptr u64, ptr, !128
        v28 = asm(ptr: v6, val) -> bool val, !129 {
            lb     val ptr i0, !130
        }
        v29 = get_local ptr bool, v_, !131
        v30 = get_local ptr u64, next_pos, !132
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !133
        store v14 to v32, !133
        v33 = get_local ptr bool, v_, !134
        br block4(v28)

        block3():
        v34 = get_local ptr u64, ptr, !135
        v35 = asm(ptr: v6, val) -> bool val, !136 {
            lw     val ptr i0, !137
        }
        v36 = get_local ptr bool, v__, !138
        v37 = get_local ptr u64, next_pos, !139
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !140
        store v14 to v39, !140
        v40 = get_local ptr bool, v__, !141
        br block4(v35)

        block4(v41: bool):
        br block5(v41)

        block5(v42: bool):
        ret bool v42
    }

    pub fn abi_decode_34(buffer !288: ptr { u64, u64 }) -> [{ u64, { u64, ( u64 | bool ) } }; 4], !289 {
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_0
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array
        local { u64, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_35(buffer), !290
        v1 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !291
        store v0 to v1, !291
        v2 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_0, !292
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !292
        v7 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !292
        v11 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !292
        v15 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !292
        v19 = load v2
        v20 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !294
        store v19 to v20, !294
        v21 = get_local ptr u64, i, !295
        v22 = const u64 1, !296
        br while(v22)

        while(v23: u64):
        v24 = get_local ptr u64, i, !297
        v25 = const u64 4, !298
        v26 = call lt_27(v23, v25), !299
        cbr v26, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v27 = call decode_35(buffer), !300
        v28 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !301
        v29 = get_local ptr u64, i, !302
        v30 = get_elem_ptr v28, ptr { u64, { u64, ( u64 | bool ) } }, v23, !301
        store v27 to v30, !301
        v31 = get_local ptr u64, i, !303
        v32 = const u64 1, !304
        v33 = call add_8(v23, v32), !305
        v34 = get_local ptr u64, i, !305
        br while(v33)

        end_while():
        v35 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !306
        v36 = load v35
        ret [{ u64, { u64, ( u64 | bool ) } }; 4] v36
    }

    pub fn decode_35(self !241: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_36(self), !243
        ret { u64, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_36(buffer !236: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !237 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_37(buffer !307: ptr { u64, u64 }) -> { string<5>, bool }, !308 {
        local { string<5>, bool } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_38(buffer), !309
        v1 = call abi_decode_32(buffer), !310
        v2 = get_local ptr { string<5>, bool }, __anon_0, !311
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr string<5>, v3, !311
        store v0 to v4, !311
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr bool, v5, !311
        store v1 to v6, !311
        v7 = load v2
        ret { string<5>, bool } v7
    }

    pub fn abi_decode_38(buffer !312: ptr { u64, u64 }) -> string<5>, !313 {
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !314
        v1 = call read_bytes_10(buffer, v0), !315
        v2 = get_local ptr slice, data, !316
        store v1 to v2, !316
        v3 = get_local ptr slice, data, !317
        v4 = load v3
        v5 = call ptr_11(v4), !318
        v6 = asm(s: v5) -> string<5> s, !319 {
        }
        ret string<5> v6
    }

    pub fn abi_decode_39(buffer !320: ptr { u64, u64 }) -> { u64 }, !321 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !322
        v1 = get_local ptr { u64 }, __anon_0, !323
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !323
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_40(item !324: string<6>) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: string<6>):
        v0 = call new_42(), !326
        v1 = call abi_encode_41(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_41(self !331: string<6>, buffer !332: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !333 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: string<6>, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = get_local ptr string<6>, __anon_1
        store self to v17
        v18 = ptr_to_int v10 to u64
        v19 = add v18, v16
        v20 = int_to_ptr v19 to ptr u8
        mem_copy_bytes v20, v17, 6
        v21 = const u64 6
        v22 = add v16, v21
        v23 = ptr_to_int v10 to u64
        v24 = get_local ptr { u64, u64, u64 }, __anon_2
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25
        store v23 to v26
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27
        store v13 to v28
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29
        store v22 to v30
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_3, !335
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33
        store v31 to v34, !335
        v35 = load v32
        ret { { u64, u64, u64 } } v35
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !336 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !337
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !337
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !338: { { u64, u64, u64 } }) -> slice, !339 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn complex_function_44(_arg1 !340: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !341: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !342: { string<5>, bool }, _arg4 !343: { u64 }) -> string<6>, !344 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn len_45(self !345: slice) -> u64, !346 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !347
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !348
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn decode_second_param_46() -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_47(v2), !212
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v3
    }

    pub fn abi_decode_47(buffer !349: ptr { u64, u64 }) -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !350 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_48(buffer), !351
        v1 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !352
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v2, !352
        store v0 to v3, !352
        v4 = load v1
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v4
    }

    pub fn abi_decode_48(buffer !353: ptr { u64, u64 }) -> { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, !354 {
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_49(buffer), !355
        v1 = call decode_54(buffer), !356
        v2 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_0, !357
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr [u8; 3], v3
        store v0 to v4, !357
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v5
        store v1 to v6, !357
        v7 = load v2
        ret { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } v7
    }

    pub fn decode_49(self !241: ptr { u64, u64 }) -> [u8; 3], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_50(self), !243
        ret [u8; 3] v0
    }

    pub fn abi_decode_50(buffer !244: ptr { u64, u64 }) -> [u8; 3], !245 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !246
        v1 = get_local ptr u8, first, !247
        v2 = get_local ptr [u8; 3], __anon_0, !248
        v3 = get_local ptr u8, first, !249
        v4 = const u64 0
        v5 = get_elem_ptr v2, ptr u8, v4
        store v0 to v5, !248
        v6 = get_local ptr u8, first, !249
        v7 = const u64 1
        v8 = get_elem_ptr v2, ptr u8, v7
        store v0 to v8, !248
        v9 = get_local ptr u8, first, !249
        v10 = const u64 2
        v11 = get_elem_ptr v2, ptr u8, v10
        store v0 to v11, !248
        v12 = load v2
        v13 = get_local ptr [u8; 3], array, !250
        store v12 to v13, !250
        v14 = get_local ptr u64, i, !251
        v15 = const u64 1, !252
        br while(v15)

        while(v16: u64):
        v17 = get_local ptr u64, i, !253
        v18 = const u64 3, !254
        v19 = call lt_27(v16, v18), !255
        cbr v19, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v20 = call decode_51(buffer), !256
        v21 = get_local ptr [u8; 3], array, !257
        v22 = get_local ptr u64, i, !258
        v23 = get_elem_ptr v21, ptr u8, v16, !257
        store v20 to v23, !257
        v24 = get_local ptr u64, i, !259
        v25 = const u64 1, !260
        v26 = call add_8(v16, v25), !261
        v27 = get_local ptr u64, i, !261
        br while(v26)

        end_while():
        v28 = get_local ptr [u8; 3], array, !262
        v29 = load v28
        ret [u8; 3] v29
    }

    pub fn decode_51(self !241: ptr { u64, u64 }) -> u8, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_52(self), !243
        ret u8 v0
    }

    pub fn abi_decode_52(buffer !358: ptr { u64, u64 }) -> u8, !359 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !360
        ret u8 v0
    }

    pub fn read_53(self !108: ptr { u64, u64 }) -> u8, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 1
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool false
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> u8 ptr, !120 {
        }
        v19 = get_local ptr u8, v, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr u8, v, !124
        br block5(v18)

        block1():
        v24 = get_local ptr u64, size, !125
        v25 = const u64 1, !126
        v26 = call eq_9(v13, v25), !127
        cbr v26, block2(), block3(), !127

        block2():
        v27 = get_local ptr u64, ptr, !128
        v28 = asm(ptr: v6, val) -> u8 val, !129 {
            lb     val ptr i0, !130
        }
        v29 = get_local ptr u8, v_, !131
        v30 = get_local ptr u64, next_pos, !132
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !133
        store v14 to v32, !133
        v33 = get_local ptr u8, v_, !134
        br block4(v28)

        block3():
        v34 = get_local ptr u64, ptr, !135
        v35 = asm(ptr: v6, val) -> u8 val, !136 {
            lw     val ptr i0, !137
        }
        v36 = get_local ptr u8, v__, !138
        v37 = get_local ptr u64, next_pos, !139
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !140
        store v14 to v39, !140
        v40 = get_local ptr u8, v__, !141
        br block4(v35)

        block4(v41: u8):
        br block5(v41)

        block5(v42: u8):
        ret u8 v42
    }

    pub fn decode_54(self !241: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_55(self), !243
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v0
    }

    pub fn abi_decode_55(buffer !361: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !362 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_56(buffer), !363
        v1 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !364
        store v0 to v1, !364
        v2 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !365
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !365
        v7 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !365
        v11 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !365
        v15 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !365
        v19 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v20 = load v19
        v21 = const u64 4
        v22 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v21
        store v20 to v22, !365
        v23 = load v2
        v24 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !367
        store v23 to v24, !367
        v25 = get_local ptr u64, i, !368
        v26 = const u64 1, !369
        br while(v26)

        while(v27: u64):
        v28 = get_local ptr u64, i, !370
        v29 = const u64 5, !371
        v30 = call lt_27(v27, v29), !372
        cbr v30, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v31 = call decode_58(buffer), !373
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !374
        v33 = get_local ptr u64, i, !375
        v34 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v27, !374
        store v31 to v34, !374
        v35 = get_local ptr u64, i, !376
        v36 = const u64 1, !377
        v37 = call add_8(v27, v36), !378
        v38 = get_local ptr u64, i, !378
        br while(v37)

        end_while():
        v39 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !379
        v40 = load v39
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v40
    }

    pub fn decode_56(self !241: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_57(self), !243
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_57(buffer !236: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !237 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_58(self !241: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !243
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_59(buffer !236: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !237 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn encode_60(item !324: u64) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_42(), !326
        v1 = call abi_encode_61(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_61(self !380: u64, buffer !381: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !382 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr u64
        store self to v19
        v20 = const u64 8
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !383
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !383
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn take_generic_array_62(_arg !384: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !385 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !386
        ret u64 v0
    }

    pub fn decode_second_param_63() -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_64(v2), !212
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v3
    }

    pub fn abi_decode_64(buffer !349: ptr { u64, u64 }) -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !350 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_65(buffer), !351
        v1 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !352
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v2, !352
        store v0 to v3, !352
        v4 = load v1
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v4
    }

    pub fn abi_decode_65(buffer !387: ptr { u64, u64 }) -> { { { u64 }, u64, u64 }, { u64, { u64 } } }, !388 {
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_66(buffer), !389
        v1 = call decode_79(buffer), !390
        v2 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_0, !391
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { { u64 }, u64, u64 }, v3
        store v0 to v4, !391
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, { u64 } }, v5
        store v1 to v6, !391
        v7 = load v2
        ret { { { u64 }, u64, u64 }, { u64, { u64 } } } v7
    }

    pub fn decode_66(self !241: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_67(self), !243
        ret { { u64 }, u64, u64 } v0
    }

    pub fn abi_decode_67(buffer !392: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !393 {
        local { { u64 }, u64, u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_68(buffer), !394
        v1 = call abi_decode_69(buffer), !395
        v2 = call abi_decode_74(buffer), !396
        v3 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !397
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64 }, v4, !397
        store v0 to v5, !397
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !397
        store v1 to v7, !397
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr u64, v8, !397
        store v2 to v9, !397
        v10 = load v3
        ret { { u64 }, u64, u64 } v10
    }

    pub fn abi_decode_68(buffer !398: ptr { u64, u64 }) -> { u64 }, !399 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !400
        v1 = get_local ptr { u64 }, __anon_0, !401
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !401
        v4 = load v1
        ret { u64 } v4
    }

    pub fn abi_decode_69(buffer !402: ptr { u64, u64 }) -> u64, !403 {
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !404
        v1 = call as_u16_70(v0), !405
        v2 = get_local ptr u64, a, !406
        v3 = call read_53(buffer), !407
        v4 = call as_u16_70(v3), !408
        v5 = get_local ptr u64, b, !409
        v6 = get_local ptr u64, a, !410
        v7 = const u64 8, !411
        v8 = call lsh_72(v1, v7), !412
        v9 = get_local ptr u64, b, !413
        v10 = call binary_or_71(v8, v4), !414
        ret u64 v10
    }

    pub fn as_u16_70(self !416: u8) -> u64, !417 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !418 {
        }
        ret u64 v0
    }

    pub fn binary_or_71(self !419: u64, other !420: u64) -> u64, !421 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_72(self !422: u64, other !423: u64) -> u64, !424 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_73(), !425
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_73() -> u64, !427 {
        entry():
        v0 = const u64 65535, !428
        ret u64 v0
    }

    pub fn abi_decode_74(buffer !429: ptr { u64, u64 }) -> u64, !430 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !431
        v1 = call as_u32_75(v0), !432
        v2 = get_local ptr u64, a, !433
        v3 = call read_53(buffer), !434
        v4 = call as_u32_75(v3), !435
        v5 = get_local ptr u64, b, !436
        v6 = call read_53(buffer), !437
        v7 = call as_u32_75(v6), !438
        v8 = get_local ptr u64, c, !439
        v9 = call read_53(buffer), !440
        v10 = call as_u32_75(v9), !441
        v11 = get_local ptr u64, d, !442
        v12 = get_local ptr u64, a, !443
        v13 = const u64 24, !444
        v14 = call lsh_77(v1, v13), !445
        v15 = get_local ptr u64, b, !446
        v16 = const u64 16, !447
        v17 = call lsh_77(v4, v16), !448
        v18 = call binary_or_76(v14, v17), !449
        v19 = get_local ptr u64, c, !450
        v20 = const u64 8, !451
        v21 = call lsh_77(v7, v20), !452
        v22 = call binary_or_76(v18, v21), !453
        v23 = get_local ptr u64, d, !454
        v24 = call binary_or_76(v22, v10), !455
        ret u64 v24
    }

    pub fn as_u32_75(self !456: u8) -> u64, !457 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !458 {
        }
        ret u64 v0
    }

    pub fn binary_or_76(self !459: u64, other !460: u64) -> u64, !461 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_77(self !462: u64, other !463: u64) -> u64, !464 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_78(), !465
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_78() -> u64, !466 {
        entry():
        v0 = const u64 4294967295, !467
        ret u64 v0
    }

    pub fn decode_79(self !241: ptr { u64, u64 }) -> { u64, { u64 } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_80(self), !243
        ret { u64, { u64 } } v0
    }

    pub fn abi_decode_80(buffer !307: ptr { u64, u64 }) -> { u64, { u64 } }, !308 {
        local { u64, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_74(buffer), !309
        v1 = call abi_decode_81(buffer), !310
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !311
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !311
        store v0 to v4, !311
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !311
        store v1 to v6, !311
        v7 = load v2
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_81(buffer !398: ptr { u64, u64 }) -> { u64 }, !399 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !400
        v1 = get_local ptr { u64 }, __anon_0, !401
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !401
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_82(item !324: ()) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_42(), !326
        v1 = call abi_encode_83(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_83(self !468: (), buffer !469: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !470 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn take_generic_struct_containing_tuple_84(_arg !471: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !472 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }

    pub fn complex_function<51fdfdad>(_arg1 !340: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !341: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !342: { string<5>, bool }, _arg4 !343: { u64 }) -> string<6>, !344 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn take_generic_array<67f6e807>(_arg !384: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !385 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !386
        ret u64 v0
    }

    pub fn take_generic_struct_containing_tuple<29ad7e95>(_arg !471: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !472 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }
}

// IR: [fn-dedup-release] Function deduplication with metadata ignored
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64, u64 } __anon_2
        local slice __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = call decode_first_param_0(), !2
        v1 = get_local ptr slice, _method_name, !3
        store v0 to v1, !3
        v2 = get_local ptr slice, _method_name, !4
        v3 = load v2
        v4 = const string<16> "complex_function"
        v5 = ptr_to_int v4 to u64, !5
        v6 = get_local ptr { u64, u64 }, __anon_0, !5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8, !5
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 16
        store v11 to v10, !5
        v12 = get_local ptr slice, __anon_1, !5
        mem_copy_bytes v12, v6, 16
        v13 = load v12
        v14 = call eq_13(v3, v13), !6
        cbr v14, block0(), block1(), !6

        block0():
        v15 = call decode_second_param_18(), !7
        v16 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !8
        store v15 to v16, !8
        v17 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !9
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v18, !10
        v20 = load v19
        v21 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !11
        v22 = const u64 1
        v23 = get_elem_ptr v21, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v22, !12
        v24 = load v23
        v25 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !13
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr { string<5>, bool }, v26, !14
        v28 = load v27
        v29 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !15
        v30 = const u64 3
        v31 = get_elem_ptr v29, ptr { u64 }, v30, !16
        v32 = load v31
        v33 = call complex_function_44(v20, v24, v28, v32), !17
        v34 = call encode_40(v33), !18
        v35 = get_local ptr slice, result_complex_function, !19
        store v34 to v35, !19
        v36 = get_local ptr slice, result_complex_function, !20
        v37 = load v36
        v38 = call ptr_11(v37), !21
        v39 = get_local ptr slice, result_complex_function, !22
        v40 = load v39
        v41 = call len_45(v40), !23
        retd v38 v41, !24
        v42 = const unit ()
        br block2(v42)

        block1():
        v43 = const unit ()
        br block2(v43)

        block2(v44: ()):
        v45 = get_local ptr slice, _method_name, !25
        v46 = load v45
        v47 = const string<18> "take_generic_array"
        v48 = ptr_to_int v47 to u64, !26
        v49 = get_local ptr { u64, u64 }, __anon_2, !26
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50
        store v48 to v51, !26
        v52 = const u64 1
        v53 = get_elem_ptr v49, ptr u64, v52
        v54 = const u64 18
        store v54 to v53, !26
        v55 = get_local ptr slice, __anon_3, !26
        mem_copy_bytes v55, v49, 16
        v56 = load v55
        v57 = call eq_13(v46, v56), !27
        cbr v57, block3(), block4(), !27

        block3():
        v58 = call decode_second_param_46(), !28
        v59 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !29
        store v58 to v59, !29
        v60 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !30
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v61, !31
        v63 = load v62
        v64 = call take_generic_array_62(v63), !32
        v65 = call encode_60(v64), !33
        v66 = get_local ptr slice, result_take_generic_array, !34
        store v65 to v66, !34
        v67 = get_local ptr slice, result_take_generic_array, !35
        v68 = load v67
        v69 = call ptr_11(v68), !36
        v70 = get_local ptr slice, result_take_generic_array, !37
        v71 = load v70
        v72 = call len_45(v71), !38
        retd v69 v72, !39
        v73 = const unit ()
        br block5(v73)

        block4():
        v74 = const unit ()
        br block5(v74)

        block5(v75: ()):
        v76 = get_local ptr slice, _method_name, !40
        v77 = load v76
        v78 = const string<36> "take_generic_struct_containing_tuple"
        v79 = ptr_to_int v78 to u64, !41
        v80 = get_local ptr { u64, u64 }, __anon_4, !41
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81
        store v79 to v82, !41
        v83 = const u64 1
        v84 = get_elem_ptr v80, ptr u64, v83
        v85 = const u64 36
        store v85 to v84, !41
        v86 = get_local ptr slice, __anon_5, !41
        mem_copy_bytes v86, v80, 16
        v87 = load v86
        v88 = call eq_13(v77, v87), !42
        cbr v88, block6(), block7(), !42

        block6():
        v89 = call decode_second_param_63(), !43
        v90 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !44
        store v89 to v90, !44
        v91 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !45
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v92, !46
        v94 = load v93
        v95 = call take_generic_struct_containing_tuple(v94), !47
        v96 = call encode_82(v95), !48
        v97 = get_local ptr slice, result_take_generic_struct_containing_tuple, !49
        store v96 to v97, !49
        v98 = get_local ptr slice, result_take_generic_struct_containing_tuple, !50
        v99 = load v98
        v100 = call ptr_11(v99), !51
        v101 = get_local ptr slice, result_take_generic_struct_containing_tuple, !52
        v102 = load v101
        v103 = call len_45(v102), !53
        retd v100 v103, !54
        v104 = const unit ()
        br block8(v104)

        block7():
        v105 = const unit ()
        br block8(v105)

        block8(v106: ()):
        v107 = const u64 123, !55
        revert v107, !56
    }

    pub fn decode_first_param_0() -> slice, !58 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_first_parameter_1(), !59
        v1 = get_local ptr { u64, u64 }, buffer, !60
        store v0 to v1, !60
        v2 = get_local ptr { u64, u64 }, buffer, !61
        v3 = call abi_decode_4(v2), !62
        ret slice v3
    }

    pub fn from_first_parameter_1() -> { u64, u64 }, !63 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !64
        v1 = asm() -> u64 fp, !65 {
        }
        v2 = get_local ptr u64, ptr, !66
        v3 = get_local ptr u64, ptr, !67
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !68
        v5 = const u64 73, !69
        v6 = call add_2(v1, v5), !70
        v7 = get_local ptr u64, ptr_, !71
        v8 = get_local ptr u64, ptr_, !72
        v9 = call read_3(v6), !73
        v10 = get_local ptr u64, ptr__, !74
        v11 = get_local ptr u64, ptr__, !75
        v12 = asm(ptr: v9) -> u64 ptr, !76 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_0, !77
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !77
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 0, !78
        store v18 to v17, !77
        v19 = load v13
        ret { u64, u64 } v19
    }

    pub fn add_2(self !80: u64, count !81: u64) -> u64, !82 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_3(self !83: u64) -> u64, !84 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !85

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !86 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !87
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !88

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !89 {
            lb     val ptr i0, !90
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !91 {
            lw     val ptr i0, !92
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn abi_decode_4(buffer !93: ptr { u64, u64 }) -> slice, !94 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !95
        v1 = get_local ptr u64, len, !96
        v2 = get_local ptr u64, len, !97
        v3 = call read_bytes_10(buffer, v0), !98
        v4 = get_local ptr slice, data, !99
        store v3 to v4, !99
        v5 = get_local ptr slice, data, !100
        v6 = load v5
        v7 = call ptr_11(v6), !101
        v8 = get_local ptr u64, len, !102
        v9 = get_local ptr { u64, u64 }, __anon_0, !103
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !103
        store v7 to v11, !103
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !103
        store v0 to v13, !103
        v14 = asm(s: v9) -> slice s, !104 {
        }
        ret slice v14
    }

    pub fn abi_decode_5(buffer !105: ptr { u64, u64 }) -> u64, !106 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_6(buffer), !107
        ret u64 v0
    }

    pub fn read_6(self !108: ptr { u64, u64 }) -> u64, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 8
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool false
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> u64 ptr, !120 {
        }
        v19 = get_local ptr u64, v, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr u64, v, !124
        br block5(v18)

        block1():
        v24 = get_local ptr u64, size, !125
        v25 = const u64 1, !126
        v26 = call eq_9(v13, v25), !127
        cbr v26, block2(), block3(), !127

        block2():
        v27 = get_local ptr u64, ptr, !128
        v28 = asm(ptr: v6, val) -> u64 val, !129 {
            lb     val ptr i0, !130
        }
        v29 = get_local ptr u64, v_, !131
        v30 = get_local ptr u64, next_pos, !132
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !133
        store v14 to v32, !133
        v33 = get_local ptr u64, v_, !134
        br block4(v28)

        block3():
        v34 = get_local ptr u64, ptr, !135
        v35 = asm(ptr: v6, val) -> u64 val, !136 {
            lw     val ptr i0, !137
        }
        v36 = get_local ptr u64, v__, !138
        v37 = get_local ptr u64, next_pos, !139
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !140
        store v14 to v39, !140
        v40 = get_local ptr u64, v__, !141
        br block4(v35)

        block4(v41: u64):
        br block5(v41)

        block5(v42: u64):
        ret u64 v42
    }

    pub fn add_7(self !80: u64, count !81: u64) -> u64, !82 {
        entry(self: u64, count: u64):
        v0 = const u64 1
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn add_8(self !143: u64, other !144: u64) -> u64, !145 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn eq_9(self !146: u64, other !147: u64) -> bool, !148 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn read_bytes_10(self !149: ptr { u64, u64 }, count !150: u64) -> slice, !151 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !111
        v2 = load v1
        v3 = call add_8(v2, count), !152
        v4 = get_local ptr u64, next_pos, !153
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !110
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !111
        v10 = load v9
        v11 = call add_7(v7, v10), !154
        v12 = get_local ptr u64, ptr, !155
        v13 = get_local ptr u64, ptr, !156
        v14 = get_local ptr { u64, u64 }, __anon_0, !157
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !157
        store v11 to v16, !157
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17, !157
        store count to v18, !157
        v19 = asm(ptr: v14) -> slice ptr, !158 {
        }
        v20 = get_local ptr slice, slice, !159
        store v19 to v20, !159
        v21 = get_local ptr u64, next_pos, !160
        v22 = const u64 1
        v23 = get_elem_ptr self, ptr u64, v22, !161
        store v3 to v23, !161
        v24 = get_local ptr slice, slice, !162
        v25 = load v24
        ret slice v25
    }

    pub fn ptr_11(self !164: slice) -> u64, !165 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !166
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !167
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_12(slice !168: slice) -> { u64, u64 }, !169 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !170 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_13(self !171: slice, other !172: slice) -> bool, !173 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !174
        v1 = call len_16(other), !175
        v2 = call neq_14(v0, v1), !176
        cbr v2, block0(), block1(), !176

        block0():
        v3 = const bool false, !177
        br block2(v3)

        block1():
        v4 = call as_ptr_17(self), !178
        v5 = get_local ptr u64, self_ptr, !179
        v6 = call as_ptr_17(other), !180
        v7 = get_local ptr u64, other_ptr, !181
        v8 = call len_16(self), !182
        v9 = get_local ptr u64, l, !183
        v10 = get_local ptr u64, self_ptr, !184
        v11 = get_local ptr u64, other_ptr, !185
        v12 = get_local ptr u64, l, !186
        v13 = asm(r1: v4, r2: v6, r3: v8, r4) -> bool r4, !187 {
            meq    r4 r1 r2 r3, !188
        }
        br block2(v13)

        block2(v14: bool):
        ret bool v14
    }

    pub fn neq_14(self !189: u64, other !190: u64) -> bool, !191 {
        entry(self: u64, other: u64):
        v0 = call eq_9(self, other), !192
        v1 = call not_15(v0), !193
        ret bool v1
    }

    pub fn not_15(self !194: bool) -> bool, !195 {
        entry(self: bool):
        v0 = const bool false, !196
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_16(self !198: slice) -> u64, !199 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !200 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !201
        store v0 to v1, !201
        v2 = get_local ptr { u64, u64 }, __tuple_2, !201
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !201
        store v3 to v4, !201
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !201
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !201
        v8 = load v7
        v9 = get_local ptr u64, _, !201
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !201
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !201
        v13 = load v12
        v14 = get_local ptr u64, len, !201
        v15 = get_local ptr u64, len, !202
        ret u64 v13
    }

    pub fn as_ptr_17(self !203: slice) -> u64, !204 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !205 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !206
        store v0 to v1, !206
        v2 = get_local ptr { u64, u64 }, __tuple_1, !206
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !206
        store v3 to v4, !206
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !206
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !206
        v8 = load v7
        v9 = get_local ptr u64, ptr, !206
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !206
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !206
        v13 = load v12
        v14 = get_local ptr u64, _, !206
        v15 = get_local ptr u64, ptr, !207
        ret u64 v8
    }

    pub fn decode_second_param_18() -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_20(v2), !212
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v3
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !213 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !214
        v1 = asm() -> u64 fp, !215 {
        }
        v2 = get_local ptr u64, ptr, !216
        v3 = get_local ptr u64, ptr, !217
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !218
        v5 = const u64 74, !219
        v6 = call add_2(v1, v5), !220
        v7 = get_local ptr u64, ptr_, !221
        v8 = get_local ptr u64, ptr_, !222
        v9 = call read_3(v6), !223
        v10 = get_local ptr u64, ptr__, !224
        v11 = get_local ptr u64, ptr__, !225
        v12 = asm(ptr: v9) -> u64 ptr, !226 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_0, !227
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !227
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 0, !228
        store v18 to v17, !227
        v19 = load v13
        ret { u64, u64 } v19
    }

    pub fn abi_decode_20(buffer !229: ptr { u64, u64 }) -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !230 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_21(buffer), !231
        v1 = call abi_decode_34(buffer), !232
        v2 = call abi_decode_37(buffer), !233
        v3 = call abi_decode_39(buffer), !234
        v4 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !235
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v5, !235
        store v0 to v6, !235
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v7, !235
        store v1 to v8, !235
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr { string<5>, bool }, v9, !235
        store v2 to v10, !235
        v11 = const u64 3
        v12 = get_elem_ptr v4, ptr { u64 }, v11, !235
        store v3 to v12, !235
        v13 = load v4
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v13
    }

    pub fn abi_decode_21(buffer !236: ptr { u64, u64 }) -> { [b256; 3], { u64, ( u64 | bool ) } }, !237 {
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_22(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr [b256; 3], v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { [b256; 3], { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_22(self !241: ptr { u64, u64 }) -> [b256; 3], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_23(self), !243
        ret [b256; 3] v0
    }

    pub fn abi_decode_23(buffer !244: ptr { u64, u64 }) -> [b256; 3], !245 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !246
        v1 = get_local ptr b256, first, !247
        store v0 to v1, !247
        v2 = get_local ptr [b256; 3], __anon_0, !248
        v3 = get_local ptr b256, first, !249
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5
        store v4 to v6, !248
        v7 = get_local ptr b256, first, !249
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9
        store v8 to v10, !248
        v11 = get_local ptr b256, first, !249
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13
        store v12 to v14, !248
        v15 = load v2
        v16 = get_local ptr [b256; 3], array, !250
        store v15 to v16, !250
        v17 = get_local ptr u64, i, !251
        v18 = const u64 1, !252
        br while(v18)

        while(v19: u64):
        v20 = get_local ptr u64, i, !253
        v21 = const u64 3, !254
        v22 = call lt_27(v19, v21), !255
        cbr v22, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v23 = call decode_24(buffer), !256
        v24 = get_local ptr [b256; 3], array, !257
        v25 = get_local ptr u64, i, !258
        v26 = get_elem_ptr v24, ptr b256, v19, !257
        store v23 to v26, !257
        v27 = get_local ptr u64, i, !259
        v28 = const u64 1, !260
        v29 = call add_8(v19, v28), !261
        v30 = get_local ptr u64, i, !261
        br while(v29)

        end_while():
        v31 = get_local ptr [b256; 3], array, !262
        v32 = load v31
        ret [b256; 3] v32
    }

    pub fn decode_24(self !241: ptr { u64, u64 }) -> b256, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_25(self), !243
        ret b256 v0
    }

    pub fn abi_decode_25(buffer !263: ptr { u64, u64 }) -> b256, !264 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_26(buffer), !265
        ret b256 v0
    }

    pub fn read_26(self !108: ptr { u64, u64 }) -> b256, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 32
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool true
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> b256 ptr, !120 {
        }
        v19 = get_local ptr b256, v, !121
        store v18 to v19, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr b256, v, !124
        v24 = load v23
        br block5(v24)

        block1():
        v25 = get_local ptr u64, size, !125
        v26 = const u64 1, !126
        v27 = call eq_9(v13, v26), !127
        cbr v27, block2(), block3(), !127

        block2():
        v28 = get_local ptr u64, ptr, !128
        v29 = asm(ptr: v6, val) -> b256 val, !129 {
            lb     val ptr i0, !130
        }
        v30 = get_local ptr b256, v_, !131
        store v29 to v30, !131
        v31 = get_local ptr u64, next_pos, !132
        v32 = const u64 1
        v33 = get_elem_ptr self, ptr u64, v32, !133
        store v14 to v33, !133
        v34 = get_local ptr b256, v_, !134
        v35 = load v34
        br block4(v35)

        block3():
        v36 = get_local ptr u64, ptr, !135
        v37 = asm(ptr: v6, val) -> b256 val, !136 {
            lw     val ptr i0, !137
        }
        v38 = get_local ptr b256, v__, !138
        store v37 to v38, !138
        v39 = get_local ptr u64, next_pos, !139
        v40 = const u64 1
        v41 = get_elem_ptr self, ptr u64, v40, !140
        store v14 to v41, !140
        v42 = get_local ptr b256, v__, !141
        v43 = load v42
        br block4(v43)

        block4(v44: b256):
        br block5(v44)

        block5(v45: b256):
        ret b256 v45
    }

    pub fn lt_27(self !266: u64, other !267: u64) -> bool, !268 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn decode_28(self !241: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_29(self), !243
        ret { u64, ( u64 | bool ) } v0
    }

    pub fn abi_decode_29(buffer !269: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !270 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !271
        v1 = get_local ptr u64, variant, !272
        v2 = get_local ptr u64, variant, !273
        v3 = get_local ptr u64, __matched_value_1, !274
        v4 = get_local ptr u64, __matched_value_1, !273
        v5 = const u64 0, !275
        v6 = call eq_9(v0, v5), !276
        cbr v6, block0(), block1(), !276

        block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !278
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !278
        v10 = const u64 0, !278
        store v10 to v9, !278
        v11 = call decode_30(buffer), !279
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !278
        store v11 to v14, !278
        v15 = load v7
        br block5(v15)

        block1():
        v16 = get_local ptr u64, __matched_value_1, !273
        v17 = const u64 1, !280
        v18 = call eq_9(v0, v17), !281
        cbr v18, block2(), block3(), !281

        block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !278
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !278
        v22 = const u64 1, !278
        store v22 to v21, !278
        v23 = call decode_31(buffer), !282
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !278
        store v23 to v26, !278
        v27 = load v19
        br block4(v27)

        block3():
        v28 = const u64 0, !283
        revert v28, !284

        block4(v29: { u64, ( u64 | bool ) }):
        br block5(v29)

        block5(v30: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v30
    }

    pub fn decode_30(self !241: ptr { u64, u64 }) -> u64, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !243
        ret u64 v0
    }

    pub fn decode_31(self !241: ptr { u64, u64 }) -> bool, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_32(self), !243
        ret bool v0
    }

    pub fn abi_decode_32(buffer !285: ptr { u64, u64 }) -> bool, !286 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_33(buffer), !287
        ret bool v0
    }

    pub fn read_33(self !108: ptr { u64, u64 }) -> bool, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 1
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool false
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> bool ptr, !120 {
        }
        v19 = get_local ptr bool, v, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr bool, v, !124
        br block5(v18)

        block1():
        v24 = get_local ptr u64, size, !125
        v25 = const u64 1, !126
        v26 = call eq_9(v13, v25), !127
        cbr v26, block2(), block3(), !127

        block2():
        v27 = get_local ptr u64, ptr, !128
        v28 = asm(ptr: v6, val) -> bool val, !129 {
            lb     val ptr i0, !130
        }
        v29 = get_local ptr bool, v_, !131
        v30 = get_local ptr u64, next_pos, !132
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !133
        store v14 to v32, !133
        v33 = get_local ptr bool, v_, !134
        br block4(v28)

        block3():
        v34 = get_local ptr u64, ptr, !135
        v35 = asm(ptr: v6, val) -> bool val, !136 {
            lw     val ptr i0, !137
        }
        v36 = get_local ptr bool, v__, !138
        v37 = get_local ptr u64, next_pos, !139
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !140
        store v14 to v39, !140
        v40 = get_local ptr bool, v__, !141
        br block4(v35)

        block4(v41: bool):
        br block5(v41)

        block5(v42: bool):
        ret bool v42
    }

    pub fn abi_decode_34(buffer !288: ptr { u64, u64 }) -> [{ u64, { u64, ( u64 | bool ) } }; 4], !289 {
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_0
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array
        local { u64, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_35(buffer), !290
        v1 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !291
        store v0 to v1, !291
        v2 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_0, !292
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !292
        v7 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !292
        v11 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !292
        v15 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !293
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !292
        v19 = load v2
        v20 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !294
        store v19 to v20, !294
        v21 = get_local ptr u64, i, !295
        v22 = const u64 1, !296
        br while(v22)

        while(v23: u64):
        v24 = get_local ptr u64, i, !297
        v25 = const u64 4, !298
        v26 = call lt_27(v23, v25), !299
        cbr v26, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v27 = call decode_35(buffer), !300
        v28 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !301
        v29 = get_local ptr u64, i, !302
        v30 = get_elem_ptr v28, ptr { u64, { u64, ( u64 | bool ) } }, v23, !301
        store v27 to v30, !301
        v31 = get_local ptr u64, i, !303
        v32 = const u64 1, !304
        v33 = call add_8(v23, v32), !305
        v34 = get_local ptr u64, i, !305
        br while(v33)

        end_while():
        v35 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !306
        v36 = load v35
        ret [{ u64, { u64, ( u64 | bool ) } }; 4] v36
    }

    pub fn decode_35(self !241: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_36(self), !243
        ret { u64, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_36(buffer !236: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !237 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_37(buffer !307: ptr { u64, u64 }) -> { string<5>, bool }, !308 {
        local { string<5>, bool } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_38(buffer), !309
        v1 = call abi_decode_32(buffer), !310
        v2 = get_local ptr { string<5>, bool }, __anon_0, !311
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr string<5>, v3, !311
        store v0 to v4, !311
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr bool, v5, !311
        store v1 to v6, !311
        v7 = load v2
        ret { string<5>, bool } v7
    }

    pub fn abi_decode_38(buffer !312: ptr { u64, u64 }) -> string<5>, !313 {
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !314
        v1 = call read_bytes_10(buffer, v0), !315
        v2 = get_local ptr slice, data, !316
        store v1 to v2, !316
        v3 = get_local ptr slice, data, !317
        v4 = load v3
        v5 = call ptr_11(v4), !318
        v6 = asm(s: v5) -> string<5> s, !319 {
        }
        ret string<5> v6
    }

    pub fn abi_decode_39(buffer !320: ptr { u64, u64 }) -> { u64 }, !321 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !322
        v1 = get_local ptr { u64 }, __anon_0, !323
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !323
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_40(item !324: string<6>) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: string<6>):
        v0 = call new_42(), !326
        v1 = call abi_encode_41(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_41(self !331: string<6>, buffer !332: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !333 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: string<6>, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = get_local ptr string<6>, __anon_1
        store self to v17
        v18 = ptr_to_int v10 to u64
        v19 = add v18, v16
        v20 = int_to_ptr v19 to ptr u8
        mem_copy_bytes v20, v17, 6
        v21 = const u64 6
        v22 = add v16, v21
        v23 = ptr_to_int v10 to u64
        v24 = get_local ptr { u64, u64, u64 }, __anon_2
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25
        store v23 to v26
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27
        store v13 to v28
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29
        store v22 to v30
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_3, !335
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33
        store v31 to v34, !335
        v35 = load v32
        ret { { u64, u64, u64 } } v35
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !336 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !337
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !337
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !338: { { u64, u64, u64 } }) -> slice, !339 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn complex_function_44(_arg1 !340: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !341: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !342: { string<5>, bool }, _arg4 !343: { u64 }) -> string<6>, !344 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn len_45(self !345: slice) -> u64, !346 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !347
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !348
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn decode_second_param_46() -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_47(v2), !212
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v3
    }

    pub fn abi_decode_47(buffer !349: ptr { u64, u64 }) -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !350 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_48(buffer), !351
        v1 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !352
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v2, !352
        store v0 to v3, !352
        v4 = load v1
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v4
    }

    pub fn abi_decode_48(buffer !353: ptr { u64, u64 }) -> { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, !354 {
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_49(buffer), !355
        v1 = call decode_54(buffer), !356
        v2 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_0, !357
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr [u8; 3], v3
        store v0 to v4, !357
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v5
        store v1 to v6, !357
        v7 = load v2
        ret { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } v7
    }

    pub fn decode_49(self !241: ptr { u64, u64 }) -> [u8; 3], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_50(self), !243
        ret [u8; 3] v0
    }

    pub fn abi_decode_50(buffer !244: ptr { u64, u64 }) -> [u8; 3], !245 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !246
        v1 = get_local ptr u8, first, !247
        v2 = get_local ptr [u8; 3], __anon_0, !248
        v3 = get_local ptr u8, first, !249
        v4 = const u64 0
        v5 = get_elem_ptr v2, ptr u8, v4
        store v0 to v5, !248
        v6 = get_local ptr u8, first, !249
        v7 = const u64 1
        v8 = get_elem_ptr v2, ptr u8, v7
        store v0 to v8, !248
        v9 = get_local ptr u8, first, !249
        v10 = const u64 2
        v11 = get_elem_ptr v2, ptr u8, v10
        store v0 to v11, !248
        v12 = load v2
        v13 = get_local ptr [u8; 3], array, !250
        store v12 to v13, !250
        v14 = get_local ptr u64, i, !251
        v15 = const u64 1, !252
        br while(v15)

        while(v16: u64):
        v17 = get_local ptr u64, i, !253
        v18 = const u64 3, !254
        v19 = call lt_27(v16, v18), !255
        cbr v19, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v20 = call decode_51(buffer), !256
        v21 = get_local ptr [u8; 3], array, !257
        v22 = get_local ptr u64, i, !258
        v23 = get_elem_ptr v21, ptr u8, v16, !257
        store v20 to v23, !257
        v24 = get_local ptr u64, i, !259
        v25 = const u64 1, !260
        v26 = call add_8(v16, v25), !261
        v27 = get_local ptr u64, i, !261
        br while(v26)

        end_while():
        v28 = get_local ptr [u8; 3], array, !262
        v29 = load v28
        ret [u8; 3] v29
    }

    pub fn decode_51(self !241: ptr { u64, u64 }) -> u8, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_52(self), !243
        ret u8 v0
    }

    pub fn abi_decode_52(buffer !358: ptr { u64, u64 }) -> u8, !359 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !360
        ret u8 v0
    }

    pub fn read_53(self !108: ptr { u64, u64 }) -> u8, !109 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !110
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !111
        v5 = load v4
        v6 = call add_7(v2, v5), !112
        v7 = get_local ptr u64, ptr, !113
        v8 = get_local ptr u64, size, !114
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !111
        v11 = load v10
        v12 = get_local ptr u64, size, !115
        v13 = const u64 1
        v14 = call add_8(v11, v13), !116
        v15 = get_local ptr u64, next_pos, !117
        v16 = const bool false
        cbr v16, block0(), block1(), !118

        block0():
        v17 = get_local ptr u64, ptr, !119
        v18 = asm(ptr: v6) -> u8 ptr, !120 {
        }
        v19 = get_local ptr u8, v, !121
        v20 = get_local ptr u64, next_pos, !122
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !123
        store v14 to v22, !123
        v23 = get_local ptr u8, v, !124
        br block5(v18)

        block1():
        v24 = get_local ptr u64, size, !125
        v25 = const u64 1, !126
        v26 = call eq_9(v13, v25), !127
        cbr v26, block2(), block3(), !127

        block2():
        v27 = get_local ptr u64, ptr, !128
        v28 = asm(ptr: v6, val) -> u8 val, !129 {
            lb     val ptr i0, !130
        }
        v29 = get_local ptr u8, v_, !131
        v30 = get_local ptr u64, next_pos, !132
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !133
        store v14 to v32, !133
        v33 = get_local ptr u8, v_, !134
        br block4(v28)

        block3():
        v34 = get_local ptr u64, ptr, !135
        v35 = asm(ptr: v6, val) -> u8 val, !136 {
            lw     val ptr i0, !137
        }
        v36 = get_local ptr u8, v__, !138
        v37 = get_local ptr u64, next_pos, !139
        v38 = const u64 1
        v39 = get_elem_ptr self, ptr u64, v38, !140
        store v14 to v39, !140
        v40 = get_local ptr u8, v__, !141
        br block4(v35)

        block4(v41: u8):
        br block5(v41)

        block5(v42: u8):
        ret u8 v42
    }

    pub fn decode_54(self !241: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_55(self), !243
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v0
    }

    pub fn abi_decode_55(buffer !361: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !362 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_58(buffer), !363
        v1 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !364
        store v0 to v1, !364
        v2 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !365
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !365
        v7 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !365
        v11 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !365
        v15 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !365
        v19 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !366
        v20 = load v19
        v21 = const u64 4
        v22 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v21
        store v20 to v22, !365
        v23 = load v2
        v24 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !367
        store v23 to v24, !367
        v25 = get_local ptr u64, i, !368
        v26 = const u64 1, !369
        br while(v26)

        while(v27: u64):
        v28 = get_local ptr u64, i, !370
        v29 = const u64 5, !371
        v30 = call lt_27(v27, v29), !372
        cbr v30, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v31 = call decode_58(buffer), !373
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !374
        v33 = get_local ptr u64, i, !375
        v34 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v27, !374
        store v31 to v34, !374
        v35 = get_local ptr u64, i, !376
        v36 = const u64 1, !377
        v37 = call add_8(v27, v36), !378
        v38 = get_local ptr u64, i, !378
        br while(v37)

        end_while():
        v39 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !379
        v40 = load v39
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v40
    }

    pub fn decode_56(self !241: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !243
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_57(buffer !236: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !237 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_58(self !241: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !243
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_59(buffer !236: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !237 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_51(buffer), !238
        v1 = call decode_28(buffer), !239
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !240
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !240
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !240
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn encode_60(item !324: u64) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_42(), !326
        v1 = call abi_encode_61(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_61(self !380: u64, buffer !381: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !382 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !334
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr u64
        store self to v19
        v20 = const u64 8
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !383
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !383
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn take_generic_array_62(_arg !384: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !385 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !386
        ret u64 v0
    }

    pub fn decode_second_param_63() -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !208 {
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !209
        v1 = get_local ptr { u64, u64 }, buffer, !210
        store v0 to v1, !210
        v2 = get_local ptr { u64, u64 }, buffer, !211
        v3 = call abi_decode_64(v2), !212
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v3
    }

    pub fn abi_decode_64(buffer !349: ptr { u64, u64 }) -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !350 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_65(buffer), !351
        v1 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !352
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v2, !352
        store v0 to v3, !352
        v4 = load v1
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v4
    }

    pub fn abi_decode_65(buffer !387: ptr { u64, u64 }) -> { { { u64 }, u64, u64 }, { u64, { u64 } } }, !388 {
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_66(buffer), !389
        v1 = call decode_79(buffer), !390
        v2 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_0, !391
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { { u64 }, u64, u64 }, v3
        store v0 to v4, !391
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, { u64 } }, v5
        store v1 to v6, !391
        v7 = load v2
        ret { { { u64 }, u64, u64 }, { u64, { u64 } } } v7
    }

    pub fn decode_66(self !241: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_67(self), !243
        ret { { u64 }, u64, u64 } v0
    }

    pub fn abi_decode_67(buffer !392: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !393 {
        local { { u64 }, u64, u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !394
        v1 = call abi_decode_69(buffer), !395
        v2 = call abi_decode_74(buffer), !396
        v3 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !397
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { u64 }, v4, !397
        store v0 to v5, !397
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !397
        store v1 to v7, !397
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr u64, v8, !397
        store v2 to v9, !397
        v10 = load v3
        ret { { u64 }, u64, u64 } v10
    }

    pub fn abi_decode_68(buffer !398: ptr { u64, u64 }) -> { u64 }, !399 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !400
        v1 = get_local ptr { u64 }, __anon_0, !401
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !401
        v4 = load v1
        ret { u64 } v4
    }

    pub fn abi_decode_69(buffer !402: ptr { u64, u64 }) -> u64, !403 {
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !404
        v1 = call as_u16_70(v0), !405
        v2 = get_local ptr u64, a, !406
        v3 = call read_53(buffer), !407
        v4 = call as_u16_70(v3), !408
        v5 = get_local ptr u64, b, !409
        v6 = get_local ptr u64, a, !410
        v7 = const u64 8, !411
        v8 = call lsh_72(v1, v7), !412
        v9 = get_local ptr u64, b, !413
        v10 = call binary_or_71(v8, v4), !414
        ret u64 v10
    }

    pub fn as_u16_70(self !416: u8) -> u64, !417 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !418 {
        }
        ret u64 v0
    }

    pub fn binary_or_71(self !419: u64, other !420: u64) -> u64, !421 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_72(self !422: u64, other !423: u64) -> u64, !424 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_73(), !425
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_73() -> u64, !427 {
        entry():
        v0 = const u64 65535, !428
        ret u64 v0
    }

    pub fn abi_decode_74(buffer !429: ptr { u64, u64 }) -> u64, !430 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !431
        v1 = call as_u16_70(v0), !432
        v2 = get_local ptr u64, a, !433
        v3 = call read_53(buffer), !434
        v4 = call as_u16_70(v3), !435
        v5 = get_local ptr u64, b, !436
        v6 = call read_53(buffer), !437
        v7 = call as_u16_70(v6), !438
        v8 = get_local ptr u64, c, !439
        v9 = call read_53(buffer), !440
        v10 = call as_u16_70(v9), !441
        v11 = get_local ptr u64, d, !442
        v12 = get_local ptr u64, a, !443
        v13 = const u64 24, !444
        v14 = call lsh_77(v1, v13), !445
        v15 = get_local ptr u64, b, !446
        v16 = const u64 16, !447
        v17 = call lsh_77(v4, v16), !448
        v18 = call binary_or_71(v14, v17), !449
        v19 = get_local ptr u64, c, !450
        v20 = const u64 8, !451
        v21 = call lsh_77(v7, v20), !452
        v22 = call binary_or_71(v18, v21), !453
        v23 = get_local ptr u64, d, !454
        v24 = call binary_or_71(v22, v10), !455
        ret u64 v24
    }

    pub fn as_u32_75(self !456: u8) -> u64, !457 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !458 {
        }
        ret u64 v0
    }

    pub fn binary_or_76(self !459: u64, other !460: u64) -> u64, !461 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_77(self !462: u64, other !463: u64) -> u64, !464 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_78(), !465
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_78() -> u64, !466 {
        entry():
        v0 = const u64 4294967295, !467
        ret u64 v0
    }

    pub fn decode_79(self !241: ptr { u64, u64 }) -> { u64, { u64 } }, !242 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_80(self), !243
        ret { u64, { u64 } } v0
    }

    pub fn abi_decode_80(buffer !307: ptr { u64, u64 }) -> { u64, { u64 } }, !308 {
        local { u64, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_74(buffer), !309
        v1 = call abi_decode_39(buffer), !310
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !311
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !311
        store v0 to v4, !311
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !311
        store v1 to v6, !311
        v7 = load v2
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_81(buffer !398: ptr { u64, u64 }) -> { u64 }, !399 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_30(buffer), !400
        v1 = get_local ptr { u64 }, __anon_0, !401
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !401
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_82(item !324: ()) -> slice, !325 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_42(), !326
        v1 = call abi_encode_83(item, v0), !327
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !328
        store v1 to v2, !328
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !329
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !330
        ret slice v5
    }

    pub fn abi_encode_83(self !468: (), buffer !469: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !470 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn take_generic_struct_containing_tuple_84(_arg !471: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !472 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }

    pub fn complex_function<51fdfdad>(_arg1 !340: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !341: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !342: { string<5>, bool }, _arg4 !343: { u64 }) -> string<6>, !344 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn take_generic_array<67f6e807>(_arg !384: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !385 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !386
        ret u64 v0
    }

    pub fn take_generic_struct_containing_tuple<29ad7e95>(_arg !471: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !472 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }
}

// IR: [inline] Function inlining
contract {
    pub entry fn __entry() -> (), !1 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local [b256; 3] __anon_0000
        local [u8; 3] __anon_0001
        local { { u64 }, u64, u64 } __anon_0002
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_001
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_002
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_003
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_01
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_010
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_011
        local { u64, { u64 } } __anon_012
        local { string<5>, bool } __anon_02
        local { u64, u64, u64 } __anon_03
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_04
        local { u64, u64, u64 } __anon_05
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_06
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local u64 a
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array00
        local mut [u8; 3] array1
        local u64 b
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local { u8, { u64, ( u64 | bool ) } } first00
        local u8 first1
        local mut u64 i
        local mut u64 i0
        local mut u64 i00
        local mut u64 i1
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !6
        v1 = asm() -> u64 fp, !8 {
        }
        v2 = get_local ptr u64, ptr, !10
        v3 = get_local ptr u64, ptr, !12
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !14
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !17
        v8 = add v1, v7, !18
        br decode_first_param_0_from_first_parameter_1_block0(v8), !19

        decode_first_param_0_from_first_parameter_1_block0(v9: u64):
        v10 = get_local ptr u64, ptr_, !21
        v11 = get_local ptr u64, ptr_, !23
        v12 = call read_3(v9), !25
        v13 = get_local ptr u64, ptr__, !27
        v14 = get_local ptr u64, ptr__, !29
        v15 = asm(ptr: v12) -> u64 ptr, !31 {
        }
        v16 = get_local ptr { u64, u64 }, __anon_00, !33
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !34
        store v15 to v18, !35
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19, !36
        v21 = const u64 0, !37
        store v21 to v20, !38
        v22 = load v16, !39
        br decode_first_param_0_block0(v22), !40

        decode_first_param_0_block0(v23: { u64, u64 }):
        v24 = get_local ptr { u64, u64 }, buffer, !42
        store v23 to v24, !43
        v25 = get_local ptr { u64, u64 }, buffer, !45
        v26 = call abi_decode_5(v25), !48
        v27 = get_local ptr u64, len, !50
        v28 = get_local ptr u64, len, !52
        v29 = call read_bytes_10(v25, v26), !54
        v30 = get_local ptr slice, data, !56
        store v29 to v30, !57
        v31 = get_local ptr slice, data, !59
        v32 = load v31, !60
        v33 = call ptr_11(v32), !62
        v34 = get_local ptr u64, len, !64
        v35 = get_local ptr { u64, u64 }, __anon_000, !66
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !67
        store v33 to v37, !68
        v38 = const u64 1
        v39 = get_elem_ptr v35, ptr u64, v38, !69
        store v26 to v39, !70
        v40 = asm(s: v35) -> slice s, !72 {
        }
        br decode_first_param_0_block1(v40), !73

        decode_first_param_0_block1(v41: slice):
        br block9(v41), !2

        block9(v42: slice):
        v43 = get_local ptr slice, _method_name, !74
        store v42 to v43, !74
        v44 = get_local ptr slice, _method_name, !75
        v45 = load v44
        v46 = const string<16> "complex_function"
        v47 = ptr_to_int v46 to u64, !76
        v48 = get_local ptr { u64, u64 }, __anon_0, !76
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49
        store v47 to v50, !76
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51
        v53 = const u64 16
        store v53 to v52, !76
        v54 = get_local ptr slice, __anon_1, !76
        mem_copy_bytes v54, v48, 16
        v55 = load v54
        v56 = call eq_13(v45, v55), !77
        cbr v56, block0(), block1(), !77

        block0():
        v57 = call from_second_parameter_19(), !80
        v58 = get_local ptr { u64, u64 }, buffer0, !82
        store v57 to v58, !83
        v59 = get_local ptr { u64, u64 }, buffer0, !85
        v60 = call decode_24(v59), !91
        v61 = get_local ptr b256, first, !93
        store v60 to v61, !94
        v62 = get_local ptr [b256; 3], __anon_0000, !96
        v63 = get_local ptr b256, first, !98
        v64 = load v63, !99
        v65 = const u64 0
        v66 = get_elem_ptr v62, ptr b256, v65, !100
        store v64 to v66, !101
        v67 = get_local ptr b256, first, !102
        v68 = load v67, !103
        v69 = const u64 1
        v70 = get_elem_ptr v62, ptr b256, v69, !104
        store v68 to v70, !105
        v71 = get_local ptr b256, first, !106
        v72 = load v71, !107
        v73 = const u64 2
        v74 = get_elem_ptr v62, ptr b256, v73, !108
        store v72 to v74, !109
        v75 = load v62, !110
        v76 = get_local ptr [b256; 3], array, !112
        store v75 to v76, !113
        v77 = get_local ptr u64, i, !115
        v78 = const u64 1, !116
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v78), !117

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v79: u64):
        v80 = get_local ptr u64, i, !119
        v81 = const u64 3, !120
        v82 = cmp lt v79 v81, !122
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block0(v82), !123

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block0(v83: bool):
        cbr v83, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !124

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_break():
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !125

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v84 = call decode_24(v59), !127
        v85 = get_local ptr [b256; 3], array, !129
        v86 = get_local ptr u64, i, !131
        v87 = get_elem_ptr v85, ptr b256, v79, !132
        store v84 to v87, !133
        v88 = get_local ptr u64, i, !135
        v89 = const u64 1, !136
        v90 = add v79, v89, !138
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block1(v90), !139

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block1(v91: u64):
        v92 = get_local ptr u64, i, !140
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v91), !141

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v93 = get_local ptr [b256; 3], array, !143
        v94 = load v93, !144
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_block0(v94), !145

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_block0(v95: [b256; 3]):
        br decode_second_param_18_abi_decode_20_abi_decode_21_block0(v95), !146

        decode_second_param_18_abi_decode_20_abi_decode_21_block0(v96: [b256; 3]):
        v97 = call decode_28(v59), !148
        v98 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_001, !150
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr [b256; 3], v99, !151
        store v96 to v100, !152
        v101 = const u64 1
        v102 = get_elem_ptr v98, ptr { u64, ( u64 | bool ) }, v101, !153
        store v97 to v102, !154
        v103 = load v98, !155
        br decode_second_param_18_abi_decode_20_block0(v103), !156

        decode_second_param_18_abi_decode_20_block0(v104: { [b256; 3], { u64, ( u64 | bool ) } }):
        v105 = call decode_35(v59), !159
        v106 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !161
        store v105 to v106, !162
        v107 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_010, !164
        v108 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !166
        v109 = load v108, !167
        v110 = const u64 0
        v111 = get_elem_ptr v107, ptr { u64, { u64, ( u64 | bool ) } }, v110, !168
        store v109 to v111, !169
        v112 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !170
        v113 = load v112, !171
        v114 = const u64 1
        v115 = get_elem_ptr v107, ptr { u64, { u64, ( u64 | bool ) } }, v114, !172
        store v113 to v115, !173
        v116 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !174
        v117 = load v116, !175
        v118 = const u64 2
        v119 = get_elem_ptr v107, ptr { u64, { u64, ( u64 | bool ) } }, v118, !176
        store v117 to v119, !177
        v120 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !178
        v121 = load v120, !179
        v122 = const u64 3
        v123 = get_elem_ptr v107, ptr { u64, { u64, ( u64 | bool ) } }, v122, !180
        store v121 to v123, !181
        v124 = load v107, !182
        v125 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !184
        store v124 to v125, !185
        v126 = get_local ptr u64, i0, !187
        v127 = const u64 1, !188
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v127), !189

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v128: u64):
        v129 = get_local ptr u64, i0, !191
        v130 = const u64 4, !192
        v131 = cmp lt v128 v130, !194
        br decode_second_param_18_abi_decode_20_abi_decode_34_block0(v131), !195

        decode_second_param_18_abi_decode_20_abi_decode_34_block0(v132: bool):
        cbr v132, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !196

        decode_second_param_18_abi_decode_20_abi_decode_34_while_break():
        br decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !197

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v133 = call decode_35(v59), !199
        v134 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !201
        v135 = get_local ptr u64, i0, !203
        v136 = get_elem_ptr v134, ptr { u64, { u64, ( u64 | bool ) } }, v128, !204
        store v133 to v136, !205
        v137 = get_local ptr u64, i0, !207
        v138 = const u64 1, !208
        v139 = add v128, v138, !210
        br decode_second_param_18_abi_decode_20_abi_decode_34_block1(v139), !211

        decode_second_param_18_abi_decode_20_abi_decode_34_block1(v140: u64):
        v141 = get_local ptr u64, i0, !212
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v140), !213

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v142 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !215
        v143 = load v142, !216
        br decode_second_param_18_abi_decode_20_block1(v143), !217

        decode_second_param_18_abi_decode_20_block1(v144: [{ u64, { u64, ( u64 | bool ) } }; 4]):
        v145 = const u64 5, !218
        v146 = call read_bytes_10(v59, v145), !222
        v147 = get_local ptr slice, data0, !224
        store v146 to v147, !225
        v148 = get_local ptr slice, data0, !227
        v149 = load v148, !228
        v150 = call ptr_11(v149), !230
        v151 = asm(s: v150) -> string<5> s, !232 {
        }
        br decode_second_param_18_abi_decode_20_abi_decode_37_block0(v151), !233

        decode_second_param_18_abi_decode_20_abi_decode_37_block0(v152: string<5>):
        v153 = call abi_decode_32(v59), !235
        v154 = get_local ptr { string<5>, bool }, __anon_02, !237
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr string<5>, v155, !238
        store v152 to v156, !239
        v157 = const u64 1
        v158 = get_elem_ptr v154, ptr bool, v157, !240
        store v153 to v158, !241
        v159 = load v154, !242
        br decode_second_param_18_abi_decode_20_block2(v159), !243

        decode_second_param_18_abi_decode_20_block2(v160: { string<5>, bool }):
        v161 = call abi_decode_39(v59), !245
        v162 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_01, !247
        v163 = const u64 0
        v164 = get_elem_ptr v162, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v163, !248
        store v104 to v164, !249
        v165 = const u64 1
        v166 = get_elem_ptr v162, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v165, !250
        store v144 to v166, !251
        v167 = const u64 2
        v168 = get_elem_ptr v162, ptr { string<5>, bool }, v167, !252
        store v160 to v168, !253
        v169 = const u64 3
        v170 = get_elem_ptr v162, ptr { u64 }, v169, !254
        store v161 to v170, !255
        v171 = load v162, !256
        br decode_second_param_18_block0(v171), !257

        decode_second_param_18_block0(v172: { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }):
        br block10(v172), !78

        block10(v173: { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }):
        v174 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !258
        store v173 to v174, !258
        v175 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !259
        v176 = const u64 0
        v177 = get_elem_ptr v175, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v176, !260
        v178 = load v177
        v179 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !261
        v180 = const u64 1
        v181 = get_elem_ptr v179, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v180, !262
        v182 = load v181
        v183 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !263
        v184 = const u64 2
        v185 = get_elem_ptr v183, ptr { string<5>, bool }, v184, !264
        v186 = load v185
        v187 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !265
        v188 = const u64 3
        v189 = get_elem_ptr v187, ptr { u64 }, v188, !266
        v190 = load v189
        v191 = const string<6> "fuel42"
        br block11(v191), !267

        block11(v192: string<6>):
        v193 = call new_42(), !270
        v194 = ptr_to_int v193 to u64, !272
        v195 = int_to_ptr v194 to ptr { { u64, u64, u64 } }, !273
        v196 = const u64 0
        v197 = get_elem_ptr v195, ptr { u64, u64, u64 }, v196, !275
        v198 = load v197, !276
        v199 = asm(buffer: v198) -> { u64, u64, u64 } buffer, !277 {
        }
        v200 = get_local ptr { u64, u64, u64 }, __anon_03, !278
        store v199 to v200, !279
        v201 = const u64 0
        v202 = get_elem_ptr v200, ptr u64, v201, !280
        v203 = load v202, !281
        v204 = int_to_ptr v203 to ptr u8, !282
        v205 = const u64 1
        v206 = get_elem_ptr v200, ptr u64, v205, !283
        v207 = load v206, !284
        v208 = const u64 2
        v209 = get_elem_ptr v200, ptr u64, v208, !285
        v210 = load v209, !286
        v211 = get_local ptr string<6>, __anon_10, !287
        store v192 to v211, !288
        v212 = ptr_to_int v204 to u64, !289
        v213 = add v212, v210, !290
        v214 = int_to_ptr v213 to ptr u8, !291
        mem_copy_bytes v214, v211, 6, !292
        v215 = const u64 6
        v216 = add v210, v215, !293
        v217 = ptr_to_int v204 to u64, !294
        v218 = get_local ptr { u64, u64, u64 }, __anon_20, !295
        v219 = const u64 0
        v220 = get_elem_ptr v218, ptr u64, v219, !296
        store v217 to v220, !297
        v221 = const u64 1
        v222 = get_elem_ptr v218, ptr u64, v221, !298
        store v207 to v222, !299
        v223 = const u64 2
        v224 = get_elem_ptr v218, ptr u64, v223, !300
        store v216 to v224, !301
        v225 = asm(buffer: v218) -> { u64, u64, u64 } buffer, !302 {
        }
        v226 = get_local ptr { { u64, u64, u64 } }, __anon_30, !304
        v227 = const u64 0
        v228 = get_elem_ptr v226, ptr { u64, u64, u64 }, v227, !305
        store v225 to v228, !306
        v229 = load v226, !307
        br encode_40_block0(v229), !308

        encode_40_block0(v230: { { u64, u64, u64 } }):
        v231 = get_local ptr { { u64, u64, u64 } }, buffer1, !310
        store v230 to v231, !311
        v232 = get_local ptr { { u64, u64, u64 } }, buffer1, !313
        v233 = load v232, !268
        v234 = call as_raw_slice_43(v233), !315
        br block12(v234), !268

        block12(v235: slice):
        v236 = get_local ptr slice, result_complex_function, !316
        store v235 to v236, !316
        v237 = get_local ptr slice, result_complex_function, !317
        v238 = load v237
        v239 = call ptr_11(v238), !318
        v240 = get_local ptr slice, result_complex_function, !319
        v241 = load v240
        v242 = call len_45(v241), !320
        retd v239 v242, !321
        v243 = const unit ()
        br block2(v243)

        block1():
        v244 = const unit ()
        br block2(v244)

        block2(v245: ()):
        v246 = get_local ptr slice, _method_name, !322
        v247 = load v246
        v248 = const string<18> "take_generic_array"
        v249 = ptr_to_int v248 to u64, !323
        v250 = get_local ptr { u64, u64 }, __anon_2, !323
        v251 = const u64 0
        v252 = get_elem_ptr v250, ptr u64, v251
        store v249 to v252, !323
        v253 = const u64 1
        v254 = get_elem_ptr v250, ptr u64, v253
        v255 = const u64 18
        store v255 to v254, !323
        v256 = get_local ptr slice, __anon_3, !323
        mem_copy_bytes v256, v250, 16
        v257 = load v256
        v258 = call eq_13(v247, v257), !324
        cbr v258, block3(), block4(), !324

        block3():
        v259 = call from_second_parameter_19(), !326
        v260 = get_local ptr { u64, u64 }, buffer2, !327
        store v259 to v260, !328
        v261 = get_local ptr { u64, u64 }, buffer2, !329
        v262 = call read_53(v261), !333
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block0(v262), !334

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block0(v263: u8):
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block0(v263), !335

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block0(v264: u8):
        v265 = get_local ptr u8, first1, !336
        v266 = get_local ptr [u8; 3], __anon_0001, !337
        v267 = get_local ptr u8, first1, !338
        v268 = const u64 0
        v269 = get_elem_ptr v266, ptr u8, v268, !339
        store v264 to v269, !340
        v270 = get_local ptr u8, first1, !341
        v271 = const u64 1
        v272 = get_elem_ptr v266, ptr u8, v271, !342
        store v264 to v272, !343
        v273 = get_local ptr u8, first1, !344
        v274 = const u64 2
        v275 = get_elem_ptr v266, ptr u8, v274, !345
        store v264 to v275, !346
        v276 = load v266, !347
        v277 = get_local ptr [u8; 3], array1, !348
        store v276 to v277, !349
        v278 = get_local ptr u64, i1, !350
        v279 = const u64 1, !116
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v279), !351

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v280: u64):
        v281 = get_local ptr u64, i1, !352
        v282 = const u64 3, !120
        v283 = cmp lt v280 v282, !353
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block1(v283), !354

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block1(v284: bool):
        cbr v284, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !355

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_break():
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !356

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v285 = call read_53(v261), !357
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block03(v285), !358

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block03(v286: u8):
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block2(v286), !359

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block2(v287: u8):
        v288 = get_local ptr [u8; 3], array1, !360
        v289 = get_local ptr u64, i1, !361
        v290 = get_elem_ptr v288, ptr u8, v280, !362
        store v287 to v290, !363
        v291 = get_local ptr u64, i1, !364
        v292 = const u64 1, !136
        v293 = add v280, v292, !365
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block4(v293), !366

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block4(v294: u64):
        v295 = get_local ptr u64, i1, !367
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v294), !368

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v296 = get_local ptr [u8; 3], array1, !369
        v297 = load v296, !370
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_block0(v297), !371

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_block0(v298: [u8; 3]):
        br decode_second_param_46_abi_decode_47_abi_decode_48_block0(v298), !372

        decode_second_param_46_abi_decode_47_abi_decode_48_block0(v299: [u8; 3]):
        v300 = call abi_decode_59(v261), !375
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block0(v300), !376

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block0(v301: { u8, { u64, ( u64 | bool ) } }):
        v302 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !378
        store v301 to v302, !379
        v303 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_011, !381
        v304 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !383
        v305 = load v304, !384
        v306 = const u64 0
        v307 = get_elem_ptr v303, ptr { u8, { u64, ( u64 | bool ) } }, v306, !385
        store v305 to v307, !386
        v308 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !387
        v309 = load v308, !388
        v310 = const u64 1
        v311 = get_elem_ptr v303, ptr { u8, { u64, ( u64 | bool ) } }, v310, !389
        store v309 to v311, !390
        v312 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !391
        v313 = load v312, !392
        v314 = const u64 2
        v315 = get_elem_ptr v303, ptr { u8, { u64, ( u64 | bool ) } }, v314, !393
        store v313 to v315, !394
        v316 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !395
        v317 = load v316, !396
        v318 = const u64 3
        v319 = get_elem_ptr v303, ptr { u8, { u64, ( u64 | bool ) } }, v318, !397
        store v317 to v319, !398
        v320 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !399
        v321 = load v320, !400
        v322 = const u64 4
        v323 = get_elem_ptr v303, ptr { u8, { u64, ( u64 | bool ) } }, v322, !401
        store v321 to v323, !402
        v324 = load v303, !403
        v325 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !405
        store v324 to v325, !406
        v326 = get_local ptr u64, i00, !408
        v327 = const u64 1, !409
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v327), !410

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v328: u64):
        v329 = get_local ptr u64, i00, !412
        v330 = const u64 5, !413
        v331 = cmp lt v328 v330, !415
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block1(v331), !416

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block1(v332: bool):
        cbr v332, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !417

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_break():
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !418

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v333 = call abi_decode_59(v261), !420
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block2(v333), !421

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block2(v334: { u8, { u64, ( u64 | bool ) } }):
        v335 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !423
        v336 = get_local ptr u64, i00, !425
        v337 = get_elem_ptr v335, ptr { u8, { u64, ( u64 | bool ) } }, v328, !426
        store v334 to v337, !427
        v338 = get_local ptr u64, i00, !429
        v339 = const u64 1, !430
        v340 = add v328, v339, !432
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block3(v340), !433

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block3(v341: u64):
        v342 = get_local ptr u64, i00, !434
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v341), !435

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v343 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !437
        v344 = load v343, !438
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_block0(v344), !439

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_block0(v345: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        br decode_second_param_46_abi_decode_47_abi_decode_48_block1(v345), !440

        decode_second_param_46_abi_decode_47_abi_decode_48_block1(v346: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        v347 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_002, !442
        v348 = const u64 0
        v349 = get_elem_ptr v347, ptr [u8; 3], v348, !443
        store v299 to v349, !444
        v350 = const u64 1
        v351 = get_elem_ptr v347, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v350, !445
        store v346 to v351, !446
        v352 = load v347, !447
        br decode_second_param_46_abi_decode_47_block0(v352), !448

        decode_second_param_46_abi_decode_47_block0(v353: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v354 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_04, !450
        v355 = const u64 0
        v356 = get_elem_ptr v354, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v355, !451
        store v353 to v356, !452
        v357 = load v354, !453
        br decode_second_param_46_block0(v357), !454

        decode_second_param_46_block0(v358: { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }):
        br block13(v358), !325

        block13(v359: { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }):
        v360 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !455
        store v359 to v360, !455
        v361 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !456
        v362 = const u64 0
        v363 = get_elem_ptr v361, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v362, !457
        v364 = load v363
        v365 = const u64 0, !459
        br block14(v365), !460

        block14(v366: u64):
        v367 = call new_42(), !462
        v368 = ptr_to_int v367 to u64, !463
        v369 = int_to_ptr v368 to ptr { { u64, u64, u64 } }, !464
        v370 = const u64 0
        v371 = get_elem_ptr v369, ptr { u64, u64, u64 }, v370, !465
        v372 = load v371, !466
        v373 = asm(buffer: v372) -> { u64, u64, u64 } buffer, !467 {
        }
        v374 = get_local ptr { u64, u64, u64 }, __anon_05, !468
        store v373 to v374, !469
        v375 = const u64 0
        v376 = get_elem_ptr v374, ptr u64, v375, !470
        v377 = load v376, !471
        v378 = int_to_ptr v377 to ptr u8, !472
        v379 = const u64 1
        v380 = get_elem_ptr v374, ptr u64, v379, !473
        v381 = load v380, !474
        v382 = const u64 2
        v383 = get_elem_ptr v374, ptr u64, v382, !475
        v384 = load v383, !476
        v385 = ptr_to_int v378 to u64, !477
        v386 = add v385, v384, !478
        v387 = int_to_ptr v386 to ptr u64, !479
        store v366 to v387, !480
        v388 = const u64 8
        v389 = add v384, v388, !481
        v390 = ptr_to_int v378 to u64, !482
        v391 = get_local ptr { u64, u64, u64 }, __anon_11, !483
        v392 = const u64 0
        v393 = get_elem_ptr v391, ptr u64, v392, !484
        store v390 to v393, !485
        v394 = const u64 1
        v395 = get_elem_ptr v391, ptr u64, v394, !486
        store v381 to v395, !487
        v396 = const u64 2
        v397 = get_elem_ptr v391, ptr u64, v396, !488
        store v389 to v397, !489
        v398 = asm(buffer: v391) -> { u64, u64, u64 } buffer, !490 {
        }
        v399 = get_local ptr { { u64, u64, u64 } }, __anon_21, !492
        v400 = const u64 0
        v401 = get_elem_ptr v399, ptr { u64, u64, u64 }, v400, !493
        store v398 to v401, !494
        v402 = load v399, !495
        br encode_60_block0(v402), !496

        encode_60_block0(v403: { { u64, u64, u64 } }):
        v404 = get_local ptr { { u64, u64, u64 } }, buffer3, !497
        store v403 to v404, !498
        v405 = get_local ptr { { u64, u64, u64 } }, buffer3, !499
        v406 = load v405, !461
        v407 = call as_raw_slice_43(v406), !500
        br block15(v407), !461

        block15(v408: slice):
        v409 = get_local ptr slice, result_take_generic_array, !501
        store v408 to v409, !501
        v410 = get_local ptr slice, result_take_generic_array, !502
        v411 = load v410
        v412 = call ptr_11(v411), !503
        v413 = get_local ptr slice, result_take_generic_array, !504
        v414 = load v413
        v415 = call len_45(v414), !505
        retd v412 v415, !506
        v416 = const unit ()
        br block5(v416)

        block4():
        v417 = const unit ()
        br block5(v417)

        block5(v418: ()):
        v419 = get_local ptr slice, _method_name, !507
        v420 = load v419
        v421 = const string<36> "take_generic_struct_containing_tuple"
        v422 = ptr_to_int v421 to u64, !508
        v423 = get_local ptr { u64, u64 }, __anon_4, !508
        v424 = const u64 0
        v425 = get_elem_ptr v423, ptr u64, v424
        store v422 to v425, !508
        v426 = const u64 1
        v427 = get_elem_ptr v423, ptr u64, v426
        v428 = const u64 36
        store v428 to v427, !508
        v429 = get_local ptr slice, __anon_5, !508
        mem_copy_bytes v429, v423, 16
        v430 = load v429
        v431 = call eq_13(v420, v430), !509
        cbr v431, block6(), block7(), !509

        block6():
        v432 = call from_second_parameter_19(), !511
        v433 = get_local ptr { u64, u64 }, buffer4, !512
        store v432 to v433, !513
        v434 = get_local ptr { u64, u64 }, buffer4, !514
        v435 = call abi_decode_39(v434), !517
        v436 = call read_53(v434), !520
        v437 = asm(input: v436) -> u64 input, !524 {
        }
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block0(v437), !525

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block0(v438: u64):
        v439 = get_local ptr u64, a, !527
        v440 = call read_53(v434), !529
        v441 = asm(input: v440) -> u64 input, !531 {
        }
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block1(v441), !532

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block1(v442: u64):
        v443 = get_local ptr u64, b, !534
        v444 = get_local ptr u64, a, !536
        v445 = const u64 8, !537
        v446 = lsh v438, v445, !539
        v447 = const u64 65535, !541
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v447), !544

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v448: u64):
        v449 = and v446, v448, !545
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block2(v449), !546

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block2(v450: u64):
        v451 = get_local ptr u64, b, !548
        v452 = or v450, v442, !550
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block3(v452), !551

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block3(v453: u64):
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_block0(v453), !552

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_abi_decode_67_block0(v454: u64):
        v455 = call abi_decode_74(v434), !554
        v456 = get_local ptr { { u64 }, u64, u64 }, __anon_0002, !556
        v457 = const u64 0
        v458 = get_elem_ptr v456, ptr { u64 }, v457, !557
        store v435 to v458, !558
        v459 = const u64 1
        v460 = get_elem_ptr v456, ptr u64, v459, !559
        store v454 to v460, !560
        v461 = const u64 2
        v462 = get_elem_ptr v456, ptr u64, v461, !561
        store v455 to v462, !562
        v463 = load v456, !563
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_block0(v463), !564

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_66_block0(v464: { { u64 }, u64, u64 }):
        br decode_second_param_63_abi_decode_64_abi_decode_65_block0(v464), !565

        decode_second_param_63_abi_decode_64_abi_decode_65_block0(v465: { { u64 }, u64, u64 }):
        v466 = call abi_decode_74(v434), !567
        v467 = call abi_decode_39(v434), !568
        v468 = get_local ptr { u64, { u64 } }, __anon_012, !569
        v469 = const u64 0
        v470 = get_elem_ptr v468, ptr u64, v469, !570
        store v466 to v470, !571
        v471 = const u64 1
        v472 = get_elem_ptr v468, ptr { u64 }, v471, !572
        store v467 to v472, !573
        v473 = load v468, !574
        br decode_second_param_63_abi_decode_64_abi_decode_65_decode_79_block0(v473), !575

        decode_second_param_63_abi_decode_64_abi_decode_65_decode_79_block0(v474: { u64, { u64 } }):
        br decode_second_param_63_abi_decode_64_abi_decode_65_block1(v474), !576

        decode_second_param_63_abi_decode_64_abi_decode_65_block1(v475: { u64, { u64 } }):
        v476 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_003, !578
        v477 = const u64 0
        v478 = get_elem_ptr v476, ptr { { u64 }, u64, u64 }, v477, !579
        store v465 to v478, !580
        v479 = const u64 1
        v480 = get_elem_ptr v476, ptr { u64, { u64 } }, v479, !581
        store v475 to v480, !582
        v481 = load v476, !583
        br decode_second_param_63_abi_decode_64_block0(v481), !584

        decode_second_param_63_abi_decode_64_block0(v482: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v483 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_06, !585
        v484 = const u64 0
        v485 = get_elem_ptr v483, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v484, !586
        store v482 to v485, !587
        v486 = load v483, !588
        br decode_second_param_63_block0(v486), !589

        decode_second_param_63_block0(v487: { { { { u64 }, u64, u64 }, { u64, { u64 } } } }):
        br block16(v487), !510

        block16(v488: { { { { u64 }, u64, u64 }, { u64, { u64 } } } }):
        v489 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !590
        store v488 to v489, !590
        v490 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !591
        v491 = const u64 0
        v492 = get_elem_ptr v490, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v491, !592
        v493 = load v492
        v494 = const unit ()
        br block17(v494), !593

        block17(v495: ()):
        v496 = call new_42(), !595
        br encode_82_block0(v496), !596

        encode_82_block0(v497: { { u64, u64, u64 } }):
        v498 = get_local ptr { { u64, u64, u64 } }, buffer5, !597
        store v497 to v498, !598
        v499 = get_local ptr { { u64, u64, u64 } }, buffer5, !599
        v500 = load v499, !594
        v501 = call as_raw_slice_43(v500), !600
        br block18(v501), !594

        block18(v502: slice):
        v503 = get_local ptr slice, result_take_generic_struct_containing_tuple, !601
        store v502 to v503, !601
        v504 = get_local ptr slice, result_take_generic_struct_containing_tuple, !602
        v505 = load v504
        v506 = call ptr_11(v505), !603
        v507 = get_local ptr slice, result_take_generic_struct_containing_tuple, !604
        v508 = load v507
        v509 = call len_45(v508), !605
        retd v506 v509, !606
        v510 = const unit ()
        br block8(v510)

        block7():
        v511 = const unit ()
        br block8(v511)

        block8(v512: ()):
        v513 = const u64 123, !607
        revert v513, !608
    }

    pub fn decode_first_param_0() -> slice, !609 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local mut { u64, u64 } buffer
        local slice data
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !610
        v1 = asm() -> u64 fp, !611 {
        }
        v2 = get_local ptr u64, ptr, !612
        v3 = get_local ptr u64, ptr, !613
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !614
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !615
        v8 = add v1, v7, !616
        br from_first_parameter_1_block0(v8), !617

        from_first_parameter_1_block0(v9: u64):
        v10 = get_local ptr u64, ptr_, !618
        v11 = get_local ptr u64, ptr_, !619
        v12 = call read_3(v9), !620
        v13 = get_local ptr u64, ptr__, !621
        v14 = get_local ptr u64, ptr__, !622
        v15 = asm(ptr: v12) -> u64 ptr, !623 {
        }
        v16 = get_local ptr { u64, u64 }, __anon_0, !624
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !4
        store v15 to v18, !625
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19, !4
        v21 = const u64 0, !37
        store v21 to v20, !626
        v22 = load v16, !4
        br block0(v22), !4

        block0(v23: { u64, u64 }):
        v24 = get_local ptr { u64, u64 }, buffer, !41
        store v23 to v24, !41
        v25 = get_local ptr { u64, u64 }, buffer, !44
        v26 = call abi_decode_5(v25), !627
        v27 = get_local ptr u64, len, !628
        v28 = get_local ptr u64, len, !629
        v29 = call read_bytes_10(v25, v26), !630
        v30 = get_local ptr slice, data, !631
        store v29 to v30, !632
        v31 = get_local ptr slice, data, !633
        v32 = load v31, !46
        v33 = call ptr_11(v32), !634
        v34 = get_local ptr u64, len, !635
        v35 = get_local ptr { u64, u64 }, __anon_00, !636
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !637
        store v33 to v37, !638
        v38 = const u64 1
        v39 = get_elem_ptr v35, ptr u64, v38, !639
        store v26 to v39, !640
        v40 = asm(s: v35) -> slice s, !641 {
        }
        br block1(v40), !46

        block1(v41: slice):
        ret slice v41
    }

    pub fn from_first_parameter_1() -> { u64, u64 }, !642 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !5
        v1 = asm() -> u64 fp, !7 {
        }
        v2 = get_local ptr u64, ptr, !9
        v3 = get_local ptr u64, ptr, !11
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !13
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !16
        v8 = add v1, v7, !16
        br block0(v8), !16

        block0(v9: u64):
        v10 = get_local ptr u64, ptr_, !20
        v11 = get_local ptr u64, ptr_, !22
        v12 = call read_3(v9), !24
        v13 = get_local ptr u64, ptr__, !26
        v14 = get_local ptr u64, ptr__, !28
        v15 = asm(ptr: v12) -> u64 ptr, !30 {
        }
        v16 = get_local ptr { u64, u64 }, __anon_0, !32
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        store v15 to v18, !32
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19
        v21 = const u64 0, !37
        store v21 to v20, !32
        v22 = load v16
        ret { u64, u64 } v22
    }

    pub fn add_2(self !644: u64, count !645: u64) -> u64, !646 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_3(self !647: u64) -> u64, !648 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !649

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !650 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !651
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !652

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !653 {
            lb     val ptr i0, !654
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !655 {
            lw     val ptr i0, !656
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn abi_decode_4(buffer !657: ptr { u64, u64 }) -> slice, !658 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !47
        v1 = get_local ptr u64, len, !49
        v2 = get_local ptr u64, len, !51
        v3 = call read_bytes_10(buffer, v0), !53
        v4 = get_local ptr slice, data, !55
        store v3 to v4, !55
        v5 = get_local ptr slice, data, !58
        v6 = load v5
        v7 = call ptr_11(v6), !61
        v8 = get_local ptr u64, len, !63
        v9 = get_local ptr { u64, u64 }, __anon_0, !65
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !65
        store v7 to v11, !65
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !65
        store v0 to v13, !65
        v14 = asm(s: v9) -> slice s, !71 {
        }
        ret slice v14
    }

    pub fn abi_decode_5(buffer !659: ptr { u64, u64 }) -> u64, !660 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !663
        v2 = load v1, !661
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !665
        v5 = load v4, !661
        v6 = const u64 1
        v7 = mul v6, v5, !667
        v8 = add v2, v7, !668
        br read_6_block6(v8), !669

        read_6_block6(v9: u64):
        v10 = get_local ptr u64, ptr, !671
        v11 = get_local ptr u64, size, !673
        v12 = const u64 1
        v13 = get_elem_ptr buffer, ptr u64, v12, !674
        v14 = load v13, !661
        v15 = get_local ptr u64, size, !676
        v16 = const u64 8
        v17 = add v14, v16, !678
        br read_6_block7(v17), !679

        read_6_block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !681
        v20 = const bool false
        cbr v20, read_6_block0(), read_6_block1(), !683

        read_6_block0():
        v21 = get_local ptr u64, ptr, !685
        v22 = asm(ptr: v9) -> u64 ptr, !687 {
        }
        v23 = get_local ptr u64, v, !689
        v24 = get_local ptr u64, next_pos, !691
        v25 = const u64 1
        v26 = get_elem_ptr buffer, ptr u64, v25, !693
        store v18 to v26, !694
        v27 = get_local ptr u64, v, !696
        br read_6_block5(v22), !661

        read_6_block1():
        v28 = get_local ptr u64, size, !698
        v29 = const u64 1, !699
        v30 = cmp eq v16 v29, !701
        br read_6_block8(v30), !702

        read_6_block8(v31: bool):
        cbr v31, read_6_block2(), read_6_block3(), !703

        read_6_block2():
        v32 = get_local ptr u64, ptr, !705
        v33 = asm(ptr: v9, val) -> u64 val, !707 {
            lb     val ptr i0, !708
        }
        v34 = get_local ptr u64, v_, !710
        v35 = get_local ptr u64, next_pos, !712
        v36 = const u64 1
        v37 = get_elem_ptr buffer, ptr u64, v36, !714
        store v18 to v37, !715
        v38 = get_local ptr u64, v_, !717
        br read_6_block4(v33), !661

        read_6_block3():
        v39 = get_local ptr u64, ptr, !719
        v40 = asm(ptr: v9, val) -> u64 val, !721 {
            lw     val ptr i0, !722
        }
        v41 = get_local ptr u64, v__, !724
        v42 = get_local ptr u64, next_pos, !726
        v43 = const u64 1
        v44 = get_elem_ptr buffer, ptr u64, v43, !728
        store v18 to v44, !729
        v45 = get_local ptr u64, v__, !731
        br read_6_block4(v40), !661

        read_6_block4(v46: u64):
        br read_6_block5(v46), !661

        read_6_block5(v47: u64):
        br block0(v47), !661

        block0(v48: u64):
        ret u64 v48
    }

    pub fn read_6(self !732: ptr { u64, u64 }) -> u64, !733 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !662
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !664
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !666
        v8 = add v2, v7, !666
        br block6(v8), !666

        block6(v9: u64):
        v10 = get_local ptr u64, ptr, !670
        v11 = get_local ptr u64, size, !672
        v12 = const u64 1
        v13 = get_elem_ptr self, ptr u64, v12, !664
        v14 = load v13
        v15 = get_local ptr u64, size, !675
        v16 = const u64 8
        v17 = add v14, v16, !677
        br block7(v17), !677

        block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !680
        v20 = const bool false
        cbr v20, block0(), block1(), !682

        block0():
        v21 = get_local ptr u64, ptr, !684
        v22 = asm(ptr: v9) -> u64 ptr, !686 {
        }
        v23 = get_local ptr u64, v, !688
        v24 = get_local ptr u64, next_pos, !690
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !692
        store v18 to v26, !692
        v27 = get_local ptr u64, v, !695
        br block5(v22)

        block1():
        v28 = get_local ptr u64, size, !697
        v29 = const u64 1, !699
        v30 = cmp eq v16 v29, !700
        br block8(v30), !700

        block8(v31: bool):
        cbr v31, block2(), block3(), !700

        block2():
        v32 = get_local ptr u64, ptr, !704
        v33 = asm(ptr: v9, val) -> u64 val, !706 {
            lb     val ptr i0, !708
        }
        v34 = get_local ptr u64, v_, !709
        v35 = get_local ptr u64, next_pos, !711
        v36 = const u64 1
        v37 = get_elem_ptr self, ptr u64, v36, !713
        store v18 to v37, !713
        v38 = get_local ptr u64, v_, !716
        br block4(v33)

        block3():
        v39 = get_local ptr u64, ptr, !718
        v40 = asm(ptr: v9, val) -> u64 val, !720 {
            lw     val ptr i0, !722
        }
        v41 = get_local ptr u64, v__, !723
        v42 = get_local ptr u64, next_pos, !725
        v43 = const u64 1
        v44 = get_elem_ptr self, ptr u64, v43, !727
        store v18 to v44, !727
        v45 = get_local ptr u64, v__, !730
        br block4(v40)

        block4(v46: u64):
        br block5(v46)

        block5(v47: u64):
        ret u64 v47
    }

    pub fn add_7(self !644: u64, count !645: u64) -> u64, !646 {
        entry(self: u64, count: u64):
        v0 = const u64 1
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn add_8(self !734: u64, other !735: u64) -> u64, !736 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn eq_9(self !737: u64, other !738: u64) -> bool, !739 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn read_bytes_10(self !740: ptr { u64, u64 }, count !741: u64) -> slice, !742 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !664
        v2 = load v1
        v3 = add v2, count, !743
        br block0(v3), !743

        block0(v4: u64):
        v5 = get_local ptr u64, next_pos, !744
        v6 = const u64 0
        v7 = get_elem_ptr self, ptr u64, v6, !662
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !664
        v11 = load v10
        v12 = const u64 1
        v13 = mul v12, v11, !745
        v14 = add v8, v13, !745
        br block1(v14), !745

        block1(v15: u64):
        v16 = get_local ptr u64, ptr, !746
        v17 = get_local ptr u64, ptr, !747
        v18 = get_local ptr { u64, u64 }, __anon_0, !748
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !748
        store v15 to v20, !748
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21, !748
        store count to v22, !748
        v23 = asm(ptr: v18) -> slice ptr, !749 {
        }
        v24 = get_local ptr slice, slice, !750
        store v23 to v24, !750
        v25 = get_local ptr u64, next_pos, !751
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !752
        store v4 to v27, !752
        v28 = get_local ptr slice, slice, !753
        v29 = load v28
        ret slice v29
    }

    pub fn ptr_11(self !755: slice) -> u64, !756 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !759 {
        }
        br block0(v0), !757

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !760
        v5 = load v4
        ret u64 v5
    }

    fn into_parts_12(slice !761: slice) -> { u64, u64 }, !762 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !758 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_13(self !763: slice, other !764: slice) -> bool, !765 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !766
        v1 = call len_16(other), !767
        v2 = cmp eq v0 v1, !770
        br neq_14_block0(v2), !771

        neq_14_block0(v3: bool):
        v4 = const bool false, !772
        v5 = cmp eq v3 v4, !774
        br neq_14_block1(v5), !775

        neq_14_block1(v6: bool):
        br block3(v6), !768

        block3(v7: bool):
        cbr v7, block0(), block1(), !768

        block0():
        v8 = const bool false, !776
        br block2(v8)

        block1():
        v9 = call as_ptr_17(self), !777
        v10 = get_local ptr u64, self_ptr, !778
        v11 = call as_ptr_17(other), !779
        v12 = get_local ptr u64, other_ptr, !780
        v13 = call len_16(self), !781
        v14 = get_local ptr u64, l, !782
        v15 = get_local ptr u64, self_ptr, !783
        v16 = get_local ptr u64, other_ptr, !784
        v17 = get_local ptr u64, l, !785
        v18 = asm(r1: v9, r2: v11, r3: v13, r4) -> bool r4, !786 {
            meq    r4 r1 r2 r3, !787
        }
        br block2(v18)

        block2(v19: bool):
        ret bool v19
    }

    pub fn neq_14(self !788: u64, other !789: u64) -> bool, !790 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other, !769
        br block0(v0), !769

        block0(v1: bool):
        v2 = const bool false, !772
        v3 = cmp eq v1 v2, !773
        br block1(v3), !773

        block1(v4: bool):
        ret bool v4
    }

    pub fn not_15(self !791: bool) -> bool, !792 {
        entry(self: bool):
        v0 = const bool false, !772
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_16(self !794: slice) -> u64, !795 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !796 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !797
        store v0 to v1, !797
        v2 = get_local ptr { u64, u64 }, __tuple_2, !797
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !797
        store v3 to v4, !797
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !797
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !797
        v8 = load v7
        v9 = get_local ptr u64, _, !797
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !797
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !797
        v13 = load v12
        v14 = get_local ptr u64, len, !797
        v15 = get_local ptr u64, len, !798
        ret u64 v13
    }

    pub fn as_ptr_17(self !799: slice) -> u64, !800 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !801 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !802
        store v0 to v1, !802
        v2 = get_local ptr { u64, u64 }, __tuple_1, !802
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !802
        store v3 to v4, !802
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !802
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !802
        v8 = load v7
        v9 = get_local ptr u64, ptr, !802
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !802
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !802
        v13 = load v12
        v14 = get_local ptr u64, _, !802
        v15 = get_local ptr u64, ptr, !803
        ret u64 v8
    }

    pub fn decode_second_param_18() -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !804 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_00
        local [b256; 3] __anon_000
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_01
        local { string<5>, bool } __anon_02
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut { u64, u64 } buffer
        local slice data
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry():
        v0 = call from_second_parameter_19(), !79
        v1 = get_local ptr { u64, u64 }, buffer, !81
        store v0 to v1, !81
        v2 = get_local ptr { u64, u64 }, buffer, !84
        v3 = call decode_24(v2), !805
        v4 = get_local ptr b256, first, !806
        store v3 to v4, !807
        v5 = get_local ptr [b256; 3], __anon_000, !808
        v6 = get_local ptr b256, first, !809
        v7 = load v6, !810
        v8 = const u64 0
        v9 = get_elem_ptr v5, ptr b256, v8, !811
        store v7 to v9, !812
        v10 = get_local ptr b256, first, !813
        v11 = load v10, !814
        v12 = const u64 1
        v13 = get_elem_ptr v5, ptr b256, v12, !815
        store v11 to v13, !816
        v14 = get_local ptr b256, first, !817
        v15 = load v14, !818
        v16 = const u64 2
        v17 = get_elem_ptr v5, ptr b256, v16, !819
        store v15 to v17, !820
        v18 = load v5, !821
        v19 = get_local ptr [b256; 3], array, !822
        store v18 to v19, !823
        v20 = get_local ptr u64, i, !824
        v21 = const u64 1, !116
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v21), !825

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v22: u64):
        v23 = get_local ptr u64, i, !826
        v24 = const u64 3, !120
        v25 = cmp lt v22 v24, !827
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block0(v25), !828

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block0(v26: bool):
        cbr v26, abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !829

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_break():
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !830

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v27 = call decode_24(v2), !831
        v28 = get_local ptr [b256; 3], array, !832
        v29 = get_local ptr u64, i, !833
        v30 = get_elem_ptr v28, ptr b256, v22, !834
        store v27 to v30, !835
        v31 = get_local ptr u64, i, !836
        v32 = const u64 1, !136
        v33 = add v22, v32, !837
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block1(v33), !838

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_block1(v34: u64):
        v35 = get_local ptr u64, i, !839
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v34), !840

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v36 = get_local ptr [b256; 3], array, !841
        v37 = load v36, !842
        br abi_decode_20_abi_decode_21_decode_22_block0(v37), !843

        abi_decode_20_abi_decode_21_decode_22_block0(v38: [b256; 3]):
        br abi_decode_20_abi_decode_21_block0(v38), !844

        abi_decode_20_abi_decode_21_block0(v39: [b256; 3]):
        v40 = call decode_28(v2), !845
        v41 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_00, !846
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr [b256; 3], v42, !847
        store v39 to v43, !848
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr { u64, ( u64 | bool ) }, v44, !849
        store v40 to v45, !850
        v46 = load v41, !851
        br abi_decode_20_block0(v46), !852

        abi_decode_20_block0(v47: { [b256; 3], { u64, ( u64 | bool ) } }):
        v48 = call decode_35(v2), !853
        v49 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !854
        store v48 to v49, !855
        v50 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_01, !856
        v51 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !857
        v52 = load v51, !858
        v53 = const u64 0
        v54 = get_elem_ptr v50, ptr { u64, { u64, ( u64 | bool ) } }, v53, !859
        store v52 to v54, !860
        v55 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !861
        v56 = load v55, !862
        v57 = const u64 1
        v58 = get_elem_ptr v50, ptr { u64, { u64, ( u64 | bool ) } }, v57, !863
        store v56 to v58, !864
        v59 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !865
        v60 = load v59, !866
        v61 = const u64 2
        v62 = get_elem_ptr v50, ptr { u64, { u64, ( u64 | bool ) } }, v61, !867
        store v60 to v62, !868
        v63 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !869
        v64 = load v63, !870
        v65 = const u64 3
        v66 = get_elem_ptr v50, ptr { u64, { u64, ( u64 | bool ) } }, v65, !871
        store v64 to v66, !872
        v67 = load v50, !873
        v68 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !874
        store v67 to v68, !875
        v69 = get_local ptr u64, i0, !876
        v70 = const u64 1, !188
        br abi_decode_20_abi_decode_34_while(v70), !877

        abi_decode_20_abi_decode_34_while(v71: u64):
        v72 = get_local ptr u64, i0, !878
        v73 = const u64 4, !192
        v74 = cmp lt v71 v73, !879
        br abi_decode_20_abi_decode_34_block0(v74), !880

        abi_decode_20_abi_decode_34_block0(v75: bool):
        cbr v75, abi_decode_20_abi_decode_34_while_body(), abi_decode_20_abi_decode_34_end_while(), !881

        abi_decode_20_abi_decode_34_while_break():
        br abi_decode_20_abi_decode_34_end_while(), !882

        abi_decode_20_abi_decode_34_while_body():
        v76 = call decode_35(v2), !883
        v77 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !884
        v78 = get_local ptr u64, i0, !885
        v79 = get_elem_ptr v77, ptr { u64, { u64, ( u64 | bool ) } }, v71, !886
        store v76 to v79, !887
        v80 = get_local ptr u64, i0, !888
        v81 = const u64 1, !208
        v82 = add v71, v81, !889
        br abi_decode_20_abi_decode_34_block1(v82), !890

        abi_decode_20_abi_decode_34_block1(v83: u64):
        v84 = get_local ptr u64, i0, !891
        br abi_decode_20_abi_decode_34_while(v83), !892

        abi_decode_20_abi_decode_34_end_while():
        v85 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !893
        v86 = load v85, !894
        br abi_decode_20_block1(v86), !895

        abi_decode_20_block1(v87: [{ u64, { u64, ( u64 | bool ) } }; 4]):
        v88 = const u64 5, !218
        v89 = call read_bytes_10(v2, v88), !896
        v90 = get_local ptr slice, data, !897
        store v89 to v90, !898
        v91 = get_local ptr slice, data, !899
        v92 = load v91, !900
        v93 = call ptr_11(v92), !901
        v94 = asm(s: v93) -> string<5> s, !902 {
        }
        br abi_decode_20_abi_decode_37_block0(v94), !903

        abi_decode_20_abi_decode_37_block0(v95: string<5>):
        v96 = call abi_decode_32(v2), !904
        v97 = get_local ptr { string<5>, bool }, __anon_02, !905
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr string<5>, v98, !906
        store v95 to v99, !907
        v100 = const u64 1
        v101 = get_elem_ptr v97, ptr bool, v100, !908
        store v96 to v101, !909
        v102 = load v97, !910
        br abi_decode_20_block2(v102), !911

        abi_decode_20_block2(v103: { string<5>, bool }):
        v104 = call abi_decode_39(v2), !912
        v105 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !913
        v106 = const u64 0
        v107 = get_elem_ptr v105, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v106, !914
        store v47 to v107, !915
        v108 = const u64 1
        v109 = get_elem_ptr v105, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v108, !916
        store v87 to v109, !917
        v110 = const u64 2
        v111 = get_elem_ptr v105, ptr { string<5>, bool }, v110, !918
        store v103 to v111, !919
        v112 = const u64 3
        v113 = get_elem_ptr v105, ptr { u64 }, v112, !920
        store v104 to v113, !921
        v114 = load v105, !86
        br block0(v114), !86

        block0(v115: { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }):
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v115
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !922 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !923
        v1 = asm() -> u64 fp, !924 {
        }
        v2 = get_local ptr u64, ptr, !925
        v3 = get_local ptr u64, ptr, !926
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !927
        v5 = const u64 8
        v6 = const u64 74, !928
        v7 = mul v5, v6, !929
        v8 = add v1, v7, !929
        br block0(v8), !929

        block0(v9: u64):
        v10 = get_local ptr u64, ptr_, !930
        v11 = get_local ptr u64, ptr_, !931
        v12 = call read_3(v9), !932
        v13 = get_local ptr u64, ptr__, !933
        v14 = get_local ptr u64, ptr__, !934
        v15 = asm(ptr: v12) -> u64 ptr, !935 {
        }
        v16 = get_local ptr { u64, u64 }, __anon_0, !936
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        store v15 to v18, !936
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19
        v21 = const u64 0, !937
        store v21 to v20, !936
        v22 = load v16
        ret { u64, u64 } v22
    }

    pub fn abi_decode_20(buffer !938: ptr { u64, u64 }) -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !939 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_00
        local [b256; 3] __anon_000
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_01
        local { string<5>, bool } __anon_02
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local slice data
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !940
        v1 = get_local ptr b256, first, !941
        store v0 to v1, !942
        v2 = get_local ptr [b256; 3], __anon_000, !943
        v3 = get_local ptr b256, first, !944
        v4 = load v3, !945
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5, !946
        store v4 to v6, !947
        v7 = get_local ptr b256, first, !948
        v8 = load v7, !949
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9, !950
        store v8 to v10, !951
        v11 = get_local ptr b256, first, !952
        v12 = load v11, !953
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13, !954
        store v12 to v14, !955
        v15 = load v2, !956
        v16 = get_local ptr [b256; 3], array, !957
        store v15 to v16, !958
        v17 = get_local ptr u64, i, !959
        v18 = const u64 1, !116
        br abi_decode_21_decode_22_abi_decode_23_while(v18), !960

        abi_decode_21_decode_22_abi_decode_23_while(v19: u64):
        v20 = get_local ptr u64, i, !961
        v21 = const u64 3, !120
        v22 = cmp lt v19 v21, !962
        br abi_decode_21_decode_22_abi_decode_23_block0(v22), !963

        abi_decode_21_decode_22_abi_decode_23_block0(v23: bool):
        cbr v23, abi_decode_21_decode_22_abi_decode_23_while_body(), abi_decode_21_decode_22_abi_decode_23_end_while(), !964

        abi_decode_21_decode_22_abi_decode_23_while_break():
        br abi_decode_21_decode_22_abi_decode_23_end_while(), !965

        abi_decode_21_decode_22_abi_decode_23_while_body():
        v24 = call decode_24(buffer), !966
        v25 = get_local ptr [b256; 3], array, !967
        v26 = get_local ptr u64, i, !968
        v27 = get_elem_ptr v25, ptr b256, v19, !969
        store v24 to v27, !970
        v28 = get_local ptr u64, i, !971
        v29 = const u64 1, !136
        v30 = add v19, v29, !972
        br abi_decode_21_decode_22_abi_decode_23_block1(v30), !973

        abi_decode_21_decode_22_abi_decode_23_block1(v31: u64):
        v32 = get_local ptr u64, i, !974
        br abi_decode_21_decode_22_abi_decode_23_while(v31), !975

        abi_decode_21_decode_22_abi_decode_23_end_while():
        v33 = get_local ptr [b256; 3], array, !976
        v34 = load v33, !977
        br abi_decode_21_decode_22_block0(v34), !978

        abi_decode_21_decode_22_block0(v35: [b256; 3]):
        br abi_decode_21_block0(v35), !979

        abi_decode_21_block0(v36: [b256; 3]):
        v37 = call decode_28(buffer), !980
        v38 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_00, !981
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr [b256; 3], v39, !87
        store v36 to v40, !982
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr { u64, ( u64 | bool ) }, v41, !87
        store v37 to v42, !983
        v43 = load v38, !87
        br block0(v43), !87

        block0(v44: { [b256; 3], { u64, ( u64 | bool ) } }):
        v45 = call decode_35(buffer), !984
        v46 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !985
        store v45 to v46, !986
        v47 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_01, !987
        v48 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !988
        v49 = load v48, !157
        v50 = const u64 0
        v51 = get_elem_ptr v47, ptr { u64, { u64, ( u64 | bool ) } }, v50, !157
        store v49 to v51, !989
        v52 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !990
        v53 = load v52, !157
        v54 = const u64 1
        v55 = get_elem_ptr v47, ptr { u64, { u64, ( u64 | bool ) } }, v54, !157
        store v53 to v55, !991
        v56 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !992
        v57 = load v56, !157
        v58 = const u64 2
        v59 = get_elem_ptr v47, ptr { u64, { u64, ( u64 | bool ) } }, v58, !157
        store v57 to v59, !993
        v60 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !994
        v61 = load v60, !157
        v62 = const u64 3
        v63 = get_elem_ptr v47, ptr { u64, { u64, ( u64 | bool ) } }, v62, !157
        store v61 to v63, !995
        v64 = load v47, !157
        v65 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !996
        store v64 to v65, !997
        v66 = get_local ptr u64, i0, !998
        v67 = const u64 1, !188
        br abi_decode_34_while(v67), !157

        abi_decode_34_while(v68: u64):
        v69 = get_local ptr u64, i0, !999
        v70 = const u64 4, !192
        v71 = cmp lt v68 v70, !1000
        br abi_decode_34_block0(v71), !1001

        abi_decode_34_block0(v72: bool):
        cbr v72, abi_decode_34_while_body(), abi_decode_34_end_while(), !157

        abi_decode_34_while_break():
        br abi_decode_34_end_while(), !157

        abi_decode_34_while_body():
        v73 = call decode_35(buffer), !1002
        v74 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !1003
        v75 = get_local ptr u64, i0, !1004
        v76 = get_elem_ptr v74, ptr { u64, { u64, ( u64 | bool ) } }, v68, !1005
        store v73 to v76, !1006
        v77 = get_local ptr u64, i0, !1007
        v78 = const u64 1, !208
        v79 = add v68, v78, !1008
        br abi_decode_34_block1(v79), !1009

        abi_decode_34_block1(v80: u64):
        v81 = get_local ptr u64, i0, !1010
        br abi_decode_34_while(v80), !157

        abi_decode_34_end_while():
        v82 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !1011
        v83 = load v82, !157
        br block1(v83), !157

        block1(v84: [{ u64, { u64, ( u64 | bool ) } }; 4]):
        v85 = const u64 5, !218
        v86 = call read_bytes_10(buffer, v85), !1012
        v87 = get_local ptr slice, data, !1013
        store v86 to v87, !1014
        v88 = get_local ptr slice, data, !1015
        v89 = load v88, !1016
        v90 = call ptr_11(v89), !1017
        v91 = asm(s: v90) -> string<5> s, !1018 {
        }
        br abi_decode_37_block0(v91), !1019

        abi_decode_37_block0(v92: string<5>):
        v93 = call abi_decode_32(buffer), !1020
        v94 = get_local ptr { string<5>, bool }, __anon_02, !1021
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr string<5>, v95, !1022
        store v92 to v96, !1023
        v97 = const u64 1
        v98 = get_elem_ptr v94, ptr bool, v97, !1024
        store v93 to v98, !1025
        v99 = load v94, !219
        br block2(v99), !219

        block2(v100: { string<5>, bool }):
        v101 = call abi_decode_39(buffer), !244
        v102 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !246
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v103, !246
        store v44 to v104, !246
        v105 = const u64 1
        v106 = get_elem_ptr v102, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v105, !246
        store v84 to v106, !246
        v107 = const u64 2
        v108 = get_elem_ptr v102, ptr { string<5>, bool }, v107, !246
        store v100 to v108, !246
        v109 = const u64 3
        v110 = get_elem_ptr v102, ptr { u64 }, v109, !246
        store v101 to v110, !246
        v111 = load v102
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v111
    }

    pub fn abi_decode_21(buffer !1026: ptr { u64, u64 }) -> { [b256; 3], { u64, ( u64 | bool ) } }, !1027 {
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_0
        local [b256; 3] __anon_00
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !1028
        v1 = get_local ptr b256, first, !1029
        store v0 to v1, !1030
        v2 = get_local ptr [b256; 3], __anon_00, !1031
        v3 = get_local ptr b256, first, !1032
        v4 = load v3, !1033
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5, !1034
        store v4 to v6, !1035
        v7 = get_local ptr b256, first, !1036
        v8 = load v7, !1037
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9, !1038
        store v8 to v10, !1039
        v11 = get_local ptr b256, first, !1040
        v12 = load v11, !1041
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13, !1042
        store v12 to v14, !1043
        v15 = load v2, !1044
        v16 = get_local ptr [b256; 3], array, !1045
        store v15 to v16, !1046
        v17 = get_local ptr u64, i, !1047
        v18 = const u64 1, !116
        br decode_22_abi_decode_23_while(v18), !1048

        decode_22_abi_decode_23_while(v19: u64):
        v20 = get_local ptr u64, i, !1049
        v21 = const u64 3, !120
        v22 = cmp lt v19 v21, !1050
        br decode_22_abi_decode_23_block0(v22), !1051

        decode_22_abi_decode_23_block0(v23: bool):
        cbr v23, decode_22_abi_decode_23_while_body(), decode_22_abi_decode_23_end_while(), !1052

        decode_22_abi_decode_23_while_break():
        br decode_22_abi_decode_23_end_while(), !1053

        decode_22_abi_decode_23_while_body():
        v24 = call decode_24(buffer), !1054
        v25 = get_local ptr [b256; 3], array, !1055
        v26 = get_local ptr u64, i, !1056
        v27 = get_elem_ptr v25, ptr b256, v19, !1057
        store v24 to v27, !1058
        v28 = get_local ptr u64, i, !1059
        v29 = const u64 1, !136
        v30 = add v19, v29, !1060
        br decode_22_abi_decode_23_block1(v30), !1061

        decode_22_abi_decode_23_block1(v31: u64):
        v32 = get_local ptr u64, i, !1062
        br decode_22_abi_decode_23_while(v31), !1063

        decode_22_abi_decode_23_end_while():
        v33 = get_local ptr [b256; 3], array, !1064
        v34 = load v33, !1065
        br decode_22_block0(v34), !1066

        decode_22_block0(v35: [b256; 3]):
        br block0(v35), !88

        block0(v36: [b256; 3]):
        v37 = call decode_28(buffer), !147
        v38 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_0, !149
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr [b256; 3], v39
        store v36 to v40, !149
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr { u64, ( u64 | bool ) }, v41
        store v37 to v42, !149
        v43 = load v38
        ret { [b256; 3], { u64, ( u64 | bool ) } } v43
    }

    pub fn decode_22(self !1067: ptr { u64, u64 }) -> [b256; 3], !1068 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(self: ptr { u64, u64 }):
        v0 = call decode_24(self), !1069
        v1 = get_local ptr b256, first, !1070
        store v0 to v1, !1071
        v2 = get_local ptr [b256; 3], __anon_0, !1072
        v3 = get_local ptr b256, first, !1073
        v4 = load v3, !89
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5, !89
        store v4 to v6, !1074
        v7 = get_local ptr b256, first, !1075
        v8 = load v7, !89
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9, !89
        store v8 to v10, !1076
        v11 = get_local ptr b256, first, !1077
        v12 = load v11, !89
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13, !89
        store v12 to v14, !1078
        v15 = load v2, !89
        v16 = get_local ptr [b256; 3], array, !1079
        store v15 to v16, !1080
        v17 = get_local ptr u64, i, !1081
        v18 = const u64 1, !116
        br abi_decode_23_while(v18), !89

        abi_decode_23_while(v19: u64):
        v20 = get_local ptr u64, i, !1082
        v21 = const u64 3, !120
        v22 = cmp lt v19 v21, !1083
        br abi_decode_23_block0(v22), !1084

        abi_decode_23_block0(v23: bool):
        cbr v23, abi_decode_23_while_body(), abi_decode_23_end_while(), !89

        abi_decode_23_while_break():
        br abi_decode_23_end_while(), !89

        abi_decode_23_while_body():
        v24 = call decode_24(self), !1085
        v25 = get_local ptr [b256; 3], array, !1086
        v26 = get_local ptr u64, i, !1087
        v27 = get_elem_ptr v25, ptr b256, v19, !1088
        store v24 to v27, !1089
        v28 = get_local ptr u64, i, !1090
        v29 = const u64 1, !136
        v30 = add v19, v29, !1091
        br abi_decode_23_block1(v30), !1092

        abi_decode_23_block1(v31: u64):
        v32 = get_local ptr u64, i, !1093
        br abi_decode_23_while(v31), !89

        abi_decode_23_end_while():
        v33 = get_local ptr [b256; 3], array, !1094
        v34 = load v33, !89
        br block0(v34), !89

        block0(v35: [b256; 3]):
        ret [b256; 3] v35
    }

    pub fn abi_decode_23(buffer !1095: ptr { u64, u64 }) -> [b256; 3], !1096 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !90
        v1 = get_local ptr b256, first, !92
        store v0 to v1, !92
        v2 = get_local ptr [b256; 3], __anon_0, !95
        v3 = get_local ptr b256, first, !97
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5
        store v4 to v6, !95
        v7 = get_local ptr b256, first, !97
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9
        store v8 to v10, !95
        v11 = get_local ptr b256, first, !97
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13
        store v12 to v14, !95
        v15 = load v2
        v16 = get_local ptr [b256; 3], array, !111
        store v15 to v16, !111
        v17 = get_local ptr u64, i, !114
        v18 = const u64 1, !116
        br while(v18)

        while(v19: u64):
        v20 = get_local ptr u64, i, !118
        v21 = const u64 3, !120
        v22 = cmp lt v19 v21, !121
        br block0(v22), !121

        block0(v23: bool):
        cbr v23, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v24 = call decode_24(buffer), !126
        v25 = get_local ptr [b256; 3], array, !128
        v26 = get_local ptr u64, i, !130
        v27 = get_elem_ptr v25, ptr b256, v19, !128
        store v24 to v27, !128
        v28 = get_local ptr u64, i, !134
        v29 = const u64 1, !136
        v30 = add v19, v29, !137
        br block1(v30), !137

        block1(v31: u64):
        v32 = get_local ptr u64, i, !137
        br while(v31)

        end_while():
        v33 = get_local ptr [b256; 3], array, !142
        v34 = load v33
        ret [b256; 3] v34
    }

    pub fn decode_24(self !1067: ptr { u64, u64 }) -> b256, !1068 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !1098
        v2 = load v1, !1099
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !1100
        v5 = load v4, !1101
        v6 = const u64 1
        v7 = mul v6, v5, !1102
        v8 = add v2, v7, !1103
        br abi_decode_25_read_26_block6(v8), !1104

        abi_decode_25_read_26_block6(v9: u64):
        v10 = get_local ptr u64, ptr, !1105
        v11 = get_local ptr u64, size, !1106
        v12 = const u64 1
        v13 = get_elem_ptr self, ptr u64, v12, !1107
        v14 = load v13, !1108
        v15 = get_local ptr u64, size, !1109
        v16 = const u64 32
        v17 = add v14, v16, !1110
        br abi_decode_25_read_26_block7(v17), !1111

        abi_decode_25_read_26_block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !1112
        v20 = const bool true
        cbr v20, abi_decode_25_read_26_block0(), abi_decode_25_read_26_block1(), !1113

        abi_decode_25_read_26_block0():
        v21 = get_local ptr u64, ptr, !1114
        v22 = asm(ptr: v9) -> b256 ptr, !1115 {
        }
        v23 = get_local ptr b256, v, !1116
        store v22 to v23, !1117
        v24 = get_local ptr u64, next_pos, !1118
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !1119
        store v18 to v26, !1120
        v27 = get_local ptr b256, v, !1121
        v28 = load v27, !1122
        br abi_decode_25_read_26_block5(v28), !1123

        abi_decode_25_read_26_block1():
        v29 = get_local ptr u64, size, !1124
        v30 = const u64 1, !699
        v31 = cmp eq v16 v30, !1125
        br abi_decode_25_read_26_block8(v31), !1126

        abi_decode_25_read_26_block8(v32: bool):
        cbr v32, abi_decode_25_read_26_block2(), abi_decode_25_read_26_block3(), !1127

        abi_decode_25_read_26_block2():
        v33 = get_local ptr u64, ptr, !1128
        v34 = asm(ptr: v9, val) -> b256 val, !1129 {
            lb     val ptr i0, !708
        }
        v35 = get_local ptr b256, v_, !1130
        store v34 to v35, !1131
        v36 = get_local ptr u64, next_pos, !1132
        v37 = const u64 1
        v38 = get_elem_ptr self, ptr u64, v37, !1133
        store v18 to v38, !1134
        v39 = get_local ptr b256, v_, !1135
        v40 = load v39, !1136
        br abi_decode_25_read_26_block4(v40), !1137

        abi_decode_25_read_26_block3():
        v41 = get_local ptr u64, ptr, !1138
        v42 = asm(ptr: v9, val) -> b256 val, !1139 {
            lw     val ptr i0, !722
        }
        v43 = get_local ptr b256, v__, !1140
        store v42 to v43, !1141
        v44 = get_local ptr u64, next_pos, !1142
        v45 = const u64 1
        v46 = get_elem_ptr self, ptr u64, v45, !1143
        store v18 to v46, !1144
        v47 = get_local ptr b256, v__, !1145
        v48 = load v47, !1146
        br abi_decode_25_read_26_block4(v48), !1147

        abi_decode_25_read_26_block4(v49: b256):
        br abi_decode_25_read_26_block5(v49), !1148

        abi_decode_25_read_26_block5(v50: b256):
        br abi_decode_25_block0(v50), !1149

        abi_decode_25_block0(v51: b256):
        br block0(v51), !89

        block0(v52: b256):
        ret b256 v52
    }

    pub fn abi_decode_25(buffer !1150: ptr { u64, u64 }) -> b256, !1151 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !1152
        v2 = load v1, !1097
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !1153
        v5 = load v4, !1097
        v6 = const u64 1
        v7 = mul v6, v5, !1154
        v8 = add v2, v7, !1155
        br read_26_block6(v8), !1156

        read_26_block6(v9: u64):
        v10 = get_local ptr u64, ptr, !1157
        v11 = get_local ptr u64, size, !1158
        v12 = const u64 1
        v13 = get_elem_ptr buffer, ptr u64, v12, !1159
        v14 = load v13, !1097
        v15 = get_local ptr u64, size, !1160
        v16 = const u64 32
        v17 = add v14, v16, !1161
        br read_26_block7(v17), !1162

        read_26_block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !1163
        v20 = const bool true
        cbr v20, read_26_block0(), read_26_block1(), !1164

        read_26_block0():
        v21 = get_local ptr u64, ptr, !1165
        v22 = asm(ptr: v9) -> b256 ptr, !1166 {
        }
        v23 = get_local ptr b256, v, !1167
        store v22 to v23, !1168
        v24 = get_local ptr u64, next_pos, !1169
        v25 = const u64 1
        v26 = get_elem_ptr buffer, ptr u64, v25, !1170
        store v18 to v26, !1171
        v27 = get_local ptr b256, v, !1172
        v28 = load v27, !1097
        br read_26_block5(v28), !1097

        read_26_block1():
        v29 = get_local ptr u64, size, !1173
        v30 = const u64 1, !699
        v31 = cmp eq v16 v30, !1174
        br read_26_block8(v31), !1175

        read_26_block8(v32: bool):
        cbr v32, read_26_block2(), read_26_block3(), !1176

        read_26_block2():
        v33 = get_local ptr u64, ptr, !1177
        v34 = asm(ptr: v9, val) -> b256 val, !1178 {
            lb     val ptr i0, !708
        }
        v35 = get_local ptr b256, v_, !1179
        store v34 to v35, !1180
        v36 = get_local ptr u64, next_pos, !1181
        v37 = const u64 1
        v38 = get_elem_ptr buffer, ptr u64, v37, !1182
        store v18 to v38, !1183
        v39 = get_local ptr b256, v_, !1184
        v40 = load v39, !1097
        br read_26_block4(v40), !1097

        read_26_block3():
        v41 = get_local ptr u64, ptr, !1185
        v42 = asm(ptr: v9, val) -> b256 val, !1186 {
            lw     val ptr i0, !722
        }
        v43 = get_local ptr b256, v__, !1187
        store v42 to v43, !1188
        v44 = get_local ptr u64, next_pos, !1189
        v45 = const u64 1
        v46 = get_elem_ptr buffer, ptr u64, v45, !1190
        store v18 to v46, !1191
        v47 = get_local ptr b256, v__, !1192
        v48 = load v47, !1097
        br read_26_block4(v48), !1097

        read_26_block4(v49: b256):
        br read_26_block5(v49), !1097

        read_26_block5(v50: b256):
        br block0(v50), !1097

        block0(v51: b256):
        ret b256 v51
    }

    pub fn read_26(self !732: ptr { u64, u64 }) -> b256, !733 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !662
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !664
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !666
        v8 = add v2, v7, !666
        br block6(v8), !666

        block6(v9: u64):
        v10 = get_local ptr u64, ptr, !670
        v11 = get_local ptr u64, size, !672
        v12 = const u64 1
        v13 = get_elem_ptr self, ptr u64, v12, !664
        v14 = load v13
        v15 = get_local ptr u64, size, !675
        v16 = const u64 32
        v17 = add v14, v16, !677
        br block7(v17), !677

        block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !680
        v20 = const bool true
        cbr v20, block0(), block1(), !682

        block0():
        v21 = get_local ptr u64, ptr, !684
        v22 = asm(ptr: v9) -> b256 ptr, !686 {
        }
        v23 = get_local ptr b256, v, !688
        store v22 to v23, !688
        v24 = get_local ptr u64, next_pos, !690
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !692
        store v18 to v26, !692
        v27 = get_local ptr b256, v, !695
        v28 = load v27
        br block5(v28)

        block1():
        v29 = get_local ptr u64, size, !697
        v30 = const u64 1, !699
        v31 = cmp eq v16 v30, !700
        br block8(v31), !700

        block8(v32: bool):
        cbr v32, block2(), block3(), !700

        block2():
        v33 = get_local ptr u64, ptr, !704
        v34 = asm(ptr: v9, val) -> b256 val, !706 {
            lb     val ptr i0, !708
        }
        v35 = get_local ptr b256, v_, !709
        store v34 to v35, !709
        v36 = get_local ptr u64, next_pos, !711
        v37 = const u64 1
        v38 = get_elem_ptr self, ptr u64, v37, !713
        store v18 to v38, !713
        v39 = get_local ptr b256, v_, !716
        v40 = load v39
        br block4(v40)

        block3():
        v41 = get_local ptr u64, ptr, !718
        v42 = asm(ptr: v9, val) -> b256 val, !720 {
            lw     val ptr i0, !722
        }
        v43 = get_local ptr b256, v__, !723
        store v42 to v43, !723
        v44 = get_local ptr u64, next_pos, !725
        v45 = const u64 1
        v46 = get_elem_ptr self, ptr u64, v45, !727
        store v18 to v46, !727
        v47 = get_local ptr b256, v__, !730
        v48 = load v47
        br block4(v48)

        block4(v49: b256):
        br block5(v49)

        block5(v50: b256):
        ret b256 v50
    }

    pub fn lt_27(self !1193: u64, other !1194: u64) -> bool, !1195 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn decode_28(self !1067: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !1068 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !1197
        br abi_decode_29_block6(v0), !1198

        abi_decode_29_block6(v1: u64):
        v2 = get_local ptr u64, variant, !1200
        v3 = get_local ptr u64, variant, !1202
        v4 = get_local ptr u64, __matched_value_1, !1204
        v5 = get_local ptr u64, __matched_value_1, !1205
        v6 = const u64 0, !1206
        v7 = cmp eq v1 v6, !1208
        br abi_decode_29_block7(v7), !1209

        abi_decode_29_block7(v8: bool):
        cbr v8, abi_decode_29_block0(), abi_decode_29_block1(), !1210

        abi_decode_29_block0():
        v9 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !1212
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1213
        v12 = const u64 0, !1211
        store v12 to v11, !1214
        v13 = call abi_decode_5(self), !1216
        br abi_decode_29_block8(v13), !1217

        abi_decode_29_block8(v14: u64):
        v15 = const u64 1
        v16 = const u64 0
        v17 = get_elem_ptr v9, ptr u64, v15, v16, !1218
        store v14 to v17, !1219
        v18 = load v9, !89
        br abi_decode_29_block5(v18), !89

        abi_decode_29_block1():
        v19 = get_local ptr u64, __matched_value_1, !1220
        v20 = const u64 1, !1221
        v21 = cmp eq v1 v20, !1223
        br abi_decode_29_block9(v21), !1224

        abi_decode_29_block9(v22: bool):
        cbr v22, abi_decode_29_block2(), abi_decode_29_block3(), !1225

        abi_decode_29_block2():
        v23 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !1226
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !1227
        v26 = const u64 1, !1211
        store v26 to v25, !1228
        v27 = call abi_decode_32(self), !1230
        br abi_decode_29_block10(v27), !1231

        abi_decode_29_block10(v28: bool):
        v29 = const u64 1
        v30 = const u64 1
        v31 = get_elem_ptr v23, ptr bool, v29, v30, !1232
        store v28 to v31, !1233
        v32 = load v23, !89
        br abi_decode_29_block4(v32), !89

        abi_decode_29_block3():
        v33 = const u64 0, !1234
        revert v33, !1236

        abi_decode_29_block4(v34: { u64, ( u64 | bool ) }):
        br abi_decode_29_block5(v34), !89

        abi_decode_29_block5(v35: { u64, ( u64 | bool ) }):
        br block0(v35), !89

        block0(v36: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v36
    }

    pub fn abi_decode_29(buffer !1237: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !1238 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1239
        br block6(v0), !1196

        block6(v1: u64):
        v2 = get_local ptr u64, variant, !1199
        v3 = get_local ptr u64, variant, !1201
        v4 = get_local ptr u64, __matched_value_1, !1203
        v5 = get_local ptr u64, __matched_value_1, !1201
        v6 = const u64 0, !1206
        v7 = cmp eq v1 v6, !1207
        br block7(v7), !1207

        block7(v8: bool):
        cbr v8, block0(), block1(), !1207

        block0():
        v9 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !1211
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1211
        v12 = const u64 0, !1211
        store v12 to v11, !1211
        v13 = call abi_decode_5(buffer), !1240
        br block8(v13), !1215

        block8(v14: u64):
        v15 = const u64 1
        v16 = const u64 0
        v17 = get_elem_ptr v9, ptr u64, v15, v16, !1211
        store v14 to v17, !1211
        v18 = load v9
        br block5(v18)

        block1():
        v19 = get_local ptr u64, __matched_value_1, !1201
        v20 = const u64 1, !1221
        v21 = cmp eq v1 v20, !1222
        br block9(v21), !1222

        block9(v22: bool):
        cbr v22, block2(), block3(), !1222

        block2():
        v23 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !1211
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !1211
        v26 = const u64 1, !1211
        store v26 to v25, !1211
        v27 = call abi_decode_32(buffer), !1241
        br block10(v27), !1229

        block10(v28: bool):
        v29 = const u64 1
        v30 = const u64 1
        v31 = get_elem_ptr v23, ptr bool, v29, v30, !1211
        store v28 to v31, !1211
        v32 = load v23
        br block4(v32)

        block3():
        v33 = const u64 0, !1234
        revert v33, !1235

        block4(v34: { u64, ( u64 | bool ) }):
        br block5(v34)

        block5(v35: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v35
    }

    pub fn decode_30(self !1067: ptr { u64, u64 }) -> u64, !1068 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !89
        ret u64 v0
    }

    pub fn decode_31(self !1067: ptr { u64, u64 }) -> bool, !1068 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_32(self), !89
        ret bool v0
    }

    pub fn abi_decode_32(buffer !1242: ptr { u64, u64 }) -> bool, !1243 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !1245
        v2 = load v1, !1244
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !1246
        v5 = load v4, !1244
        v6 = const u64 1
        v7 = mul v6, v5, !1247
        v8 = add v2, v7, !1248
        br read_33_block6(v8), !1249

        read_33_block6(v9: u64):
        v10 = get_local ptr u64, ptr, !1250
        v11 = get_local ptr u64, size, !1251
        v12 = const u64 1
        v13 = get_elem_ptr buffer, ptr u64, v12, !1252
        v14 = load v13, !1244
        v15 = get_local ptr u64, size, !1253
        v16 = const u64 1
        v17 = add v14, v16, !1254
        br read_33_block7(v17), !1255

        read_33_block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !1256
        v20 = const bool false
        cbr v20, read_33_block0(), read_33_block1(), !1257

        read_33_block0():
        v21 = get_local ptr u64, ptr, !1258
        v22 = asm(ptr: v9) -> bool ptr, !1259 {
        }
        v23 = get_local ptr bool, v, !1260
        v24 = get_local ptr u64, next_pos, !1261
        v25 = const u64 1
        v26 = get_elem_ptr buffer, ptr u64, v25, !1262
        store v18 to v26, !1263
        v27 = get_local ptr bool, v, !1264
        br read_33_block5(v22), !1244

        read_33_block1():
        v28 = get_local ptr u64, size, !1265
        v29 = const u64 1, !699
        v30 = cmp eq v16 v29, !1266
        br read_33_block8(v30), !1267

        read_33_block8(v31: bool):
        cbr v31, read_33_block2(), read_33_block3(), !1268

        read_33_block2():
        v32 = get_local ptr u64, ptr, !1269
        v33 = asm(ptr: v9, val) -> bool val, !1270 {
            lb     val ptr i0, !708
        }
        v34 = get_local ptr bool, v_, !1271
        v35 = get_local ptr u64, next_pos, !1272
        v36 = const u64 1
        v37 = get_elem_ptr buffer, ptr u64, v36, !1273
        store v18 to v37, !1274
        v38 = get_local ptr bool, v_, !1275
        br read_33_block4(v33), !1244

        read_33_block3():
        v39 = get_local ptr u64, ptr, !1276
        v40 = asm(ptr: v9, val) -> bool val, !1277 {
            lw     val ptr i0, !722
        }
        v41 = get_local ptr bool, v__, !1278
        v42 = get_local ptr u64, next_pos, !1279
        v43 = const u64 1
        v44 = get_elem_ptr buffer, ptr u64, v43, !1280
        store v18 to v44, !1281
        v45 = get_local ptr bool, v__, !1282
        br read_33_block4(v40), !1244

        read_33_block4(v46: bool):
        br read_33_block5(v46), !1244

        read_33_block5(v47: bool):
        br block0(v47), !1244

        block0(v48: bool):
        ret bool v48
    }

    pub fn read_33(self !732: ptr { u64, u64 }) -> bool, !733 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !662
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !664
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !666
        v8 = add v2, v7, !666
        br block6(v8), !666

        block6(v9: u64):
        v10 = get_local ptr u64, ptr, !670
        v11 = get_local ptr u64, size, !672
        v12 = const u64 1
        v13 = get_elem_ptr self, ptr u64, v12, !664
        v14 = load v13
        v15 = get_local ptr u64, size, !675
        v16 = const u64 1
        v17 = add v14, v16, !677
        br block7(v17), !677

        block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !680
        v20 = const bool false
        cbr v20, block0(), block1(), !682

        block0():
        v21 = get_local ptr u64, ptr, !684
        v22 = asm(ptr: v9) -> bool ptr, !686 {
        }
        v23 = get_local ptr bool, v, !688
        v24 = get_local ptr u64, next_pos, !690
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !692
        store v18 to v26, !692
        v27 = get_local ptr bool, v, !695
        br block5(v22)

        block1():
        v28 = get_local ptr u64, size, !697
        v29 = const u64 1, !699
        v30 = cmp eq v16 v29, !700
        br block8(v30), !700

        block8(v31: bool):
        cbr v31, block2(), block3(), !700

        block2():
        v32 = get_local ptr u64, ptr, !704
        v33 = asm(ptr: v9, val) -> bool val, !706 {
            lb     val ptr i0, !708
        }
        v34 = get_local ptr bool, v_, !709
        v35 = get_local ptr u64, next_pos, !711
        v36 = const u64 1
        v37 = get_elem_ptr self, ptr u64, v36, !713
        store v18 to v37, !713
        v38 = get_local ptr bool, v_, !716
        br block4(v33)

        block3():
        v39 = get_local ptr u64, ptr, !718
        v40 = asm(ptr: v9, val) -> bool val, !720 {
            lw     val ptr i0, !722
        }
        v41 = get_local ptr bool, v__, !723
        v42 = get_local ptr u64, next_pos, !725
        v43 = const u64 1
        v44 = get_elem_ptr self, ptr u64, v43, !727
        store v18 to v44, !727
        v45 = get_local ptr bool, v__, !730
        br block4(v40)

        block4(v46: bool):
        br block5(v46)

        block5(v47: bool):
        ret bool v47
    }

    pub fn abi_decode_34(buffer !1283: ptr { u64, u64 }) -> [{ u64, { u64, ( u64 | bool ) } }; 4], !1284 {
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_0
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array
        local { u64, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_35(buffer), !158
        v1 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !160
        store v0 to v1, !160
        v2 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_0, !163
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !165
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !163
        v7 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !165
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !163
        v11 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !165
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !163
        v15 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !165
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !163
        v19 = load v2
        v20 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !183
        store v19 to v20, !183
        v21 = get_local ptr u64, i, !186
        v22 = const u64 1, !188
        br while(v22)

        while(v23: u64):
        v24 = get_local ptr u64, i, !190
        v25 = const u64 4, !192
        v26 = cmp lt v23 v25, !193
        br block0(v26), !193

        block0(v27: bool):
        cbr v27, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v28 = call decode_35(buffer), !198
        v29 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !200
        v30 = get_local ptr u64, i, !202
        v31 = get_elem_ptr v29, ptr { u64, { u64, ( u64 | bool ) } }, v23, !200
        store v28 to v31, !200
        v32 = get_local ptr u64, i, !206
        v33 = const u64 1, !208
        v34 = add v23, v33, !209
        br block1(v34), !209

        block1(v35: u64):
        v36 = get_local ptr u64, i, !209
        br while(v35)

        end_while():
        v37 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !214
        v38 = load v37
        ret [{ u64, { u64, ( u64 | bool ) } }; 4] v38
    }

    pub fn decode_35(self !1067: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !1068 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !1285
        br abi_decode_36_block0(v0), !1286

        abi_decode_36_block0(v1: u64):
        v2 = call decode_28(self), !1287
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !1288
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !89
        store v1 to v5, !1289
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6, !89
        store v2 to v7, !1290
        v8 = load v3, !89
        br block0(v8), !89

        block0(v9: { u64, { u64, ( u64 | bool ) } }):
        ret { u64, { u64, ( u64 | bool ) } } v9
    }

    pub fn abi_decode_36(buffer !1026: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !1027 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1291
        br block0(v0), !88

        block0(v1: u64):
        v2 = call decode_28(buffer), !147
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !149
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4
        store v1 to v5, !149
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6
        store v2 to v7, !149
        v8 = load v3
        ret { u64, { u64, ( u64 | bool ) } } v8
    }

    pub fn abi_decode_37(buffer !1292: ptr { u64, u64 }) -> { string<5>, bool }, !1293 {
        local { string<5>, bool } __anon_0
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !218
        v1 = call read_bytes_10(buffer, v0), !1294
        v2 = get_local ptr slice, data, !1295
        store v1 to v2, !1296
        v3 = get_local ptr slice, data, !1297
        v4 = load v3, !220
        v5 = call ptr_11(v4), !1298
        v6 = asm(s: v5) -> string<5> s, !1299 {
        }
        br block0(v6), !220

        block0(v7: string<5>):
        v8 = call abi_decode_32(buffer), !234
        v9 = get_local ptr { string<5>, bool }, __anon_0, !236
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr string<5>, v10, !236
        store v7 to v11, !236
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr bool, v12, !236
        store v8 to v13, !236
        v14 = load v9
        ret { string<5>, bool } v14
    }

    pub fn abi_decode_38(buffer !1300: ptr { u64, u64 }) -> string<5>, !1301 {
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !218
        v1 = call read_bytes_10(buffer, v0), !221
        v2 = get_local ptr slice, data, !223
        store v1 to v2, !223
        v3 = get_local ptr slice, data, !226
        v4 = load v3
        v5 = call ptr_11(v4), !229
        v6 = asm(s: v5) -> string<5> s, !231 {
        }
        ret string<5> v6
    }

    pub fn abi_decode_39(buffer !1302: ptr { u64, u64 }) -> { u64 }, !1303 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1305
        br block0(v0), !1304

        block0(v1: u64):
        v2 = get_local ptr { u64 }, __anon_0, !1306
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !1306
        v5 = load v2
        ret { u64 } v5
    }

    pub fn encode_40(item !1307: string<6>) -> slice, !1308 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3
        local { { u64, u64, u64 } } buffer

        entry(item: string<6>):
        v0 = call new_42(), !269
        v1 = ptr_to_int v0 to u64, !271
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }, !271
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !1309
        v5 = load v4, !271
        v6 = asm(buffer: v5) -> { u64, u64, u64 } buffer, !271 {
        }
        v7 = get_local ptr { u64, u64, u64 }, __anon_0, !271
        store v6 to v7, !271
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !271
        v10 = load v9, !271
        v11 = int_to_ptr v10 to ptr u8, !271
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr u64, v12, !271
        v14 = load v13, !271
        v15 = const u64 2
        v16 = get_elem_ptr v7, ptr u64, v15, !271
        v17 = load v16, !271
        v18 = get_local ptr string<6>, __anon_1, !271
        store item to v18, !271
        v19 = ptr_to_int v11 to u64, !271
        v20 = add v19, v17, !271
        v21 = int_to_ptr v20 to ptr u8, !271
        mem_copy_bytes v21, v18, 6, !271
        v22 = const u64 6
        v23 = add v17, v22, !271
        v24 = ptr_to_int v11 to u64, !271
        v25 = get_local ptr { u64, u64, u64 }, __anon_2, !271
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !271
        store v24 to v27, !271
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr u64, v28, !271
        store v14 to v29, !271
        v30 = const u64 2
        v31 = get_elem_ptr v25, ptr u64, v30, !271
        store v23 to v31, !271
        v32 = asm(buffer: v25) -> { u64, u64, u64 } buffer, !271 {
        }
        v33 = get_local ptr { { u64, u64, u64 } }, __anon_3, !1310
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { u64, u64, u64 }, v34, !271
        store v32 to v35, !1311
        v36 = load v33, !271
        br block0(v36), !271

        block0(v37: { { u64, u64, u64 } }):
        v38 = get_local ptr { { u64, u64, u64 } }, buffer, !309
        store v37 to v38, !309
        v39 = get_local ptr { { u64, u64, u64 } }, buffer, !312
        v40 = load v39
        v41 = call as_raw_slice_43(v40), !314
        ret slice v41
    }

    pub fn abi_encode_41(self !1312: string<6>, buffer !1313: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1314 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: string<6>, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !274
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = get_local ptr string<6>, __anon_1
        store self to v17
        v18 = ptr_to_int v10 to u64
        v19 = add v18, v16
        v20 = int_to_ptr v19 to ptr u8
        mem_copy_bytes v20, v17, 6
        v21 = const u64 6
        v22 = add v16, v21
        v23 = ptr_to_int v10 to u64
        v24 = get_local ptr { u64, u64, u64 }, __anon_2
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25
        store v23 to v26
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27
        store v13 to v28
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29
        store v22 to v30
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_3, !303
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33
        store v31 to v34, !303
        v35 = load v32
        ret { { u64, u64, u64 } } v35
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !1315 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !1316
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !1316
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !1317: { { u64, u64, u64 } }) -> slice, !1318 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !274
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn complex_function_44(_arg1 !1319: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !1320: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !1321: { string<5>, bool }, _arg4 !1322: { u64 }) -> string<6>, !1323 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn len_45(self !1324: slice) -> u64, !1325 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1327 {
        }
        br block0(v0), !1326

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !1328
        v5 = load v4
        v6 = const u64 1
        v7 = div v5, v6
        ret u64 v7
    }

    pub fn decode_second_param_46() -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !804 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_00
        local [u8; 3] __anon_000
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_01
        local mut [u8; 3] array
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array0
        local mut { u64, u64 } buffer
        local u8 first
        local { u8, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry():
        v0 = call from_second_parameter_19(), !79
        v1 = get_local ptr { u64, u64 }, buffer, !81
        store v0 to v1, !81
        v2 = get_local ptr { u64, u64 }, buffer, !84
        v3 = call read_53(v2), !1329
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block0(v3), !1330

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block0(v4: u8):
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block0(v4), !1331

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block0(v5: u8):
        v6 = get_local ptr u8, first, !1332
        v7 = get_local ptr [u8; 3], __anon_000, !1333
        v8 = get_local ptr u8, first, !1334
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr u8, v9, !1335
        store v5 to v10, !1336
        v11 = get_local ptr u8, first, !1337
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr u8, v12, !1338
        store v5 to v13, !1339
        v14 = get_local ptr u8, first, !1340
        v15 = const u64 2
        v16 = get_elem_ptr v7, ptr u8, v15, !1341
        store v5 to v16, !1342
        v17 = load v7, !1343
        v18 = get_local ptr [u8; 3], array, !1344
        store v17 to v18, !1345
        v19 = get_local ptr u64, i, !1346
        v20 = const u64 1, !116
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v20), !1347

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v21: u64):
        v22 = get_local ptr u64, i, !1348
        v23 = const u64 3, !120
        v24 = cmp lt v21 v23, !1349
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block1(v24), !1350

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block1(v25: bool):
        cbr v25, abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !1351

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_break():
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !1352

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v26 = call read_53(v2), !1353
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block03(v26), !1354

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_decode_51_block03(v27: u8):
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block2(v27), !1355

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block2(v28: u8):
        v29 = get_local ptr [u8; 3], array, !1356
        v30 = get_local ptr u64, i, !1357
        v31 = get_elem_ptr v29, ptr u8, v21, !1358
        store v28 to v31, !1359
        v32 = get_local ptr u64, i, !1360
        v33 = const u64 1, !136
        v34 = add v21, v33, !1361
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block4(v34), !1362

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_block4(v35: u64):
        v36 = get_local ptr u64, i, !1363
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v35), !1364

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v37 = get_local ptr [u8; 3], array, !1365
        v38 = load v37, !1366
        br abi_decode_47_abi_decode_48_decode_49_block0(v38), !1367

        abi_decode_47_abi_decode_48_decode_49_block0(v39: [u8; 3]):
        br abi_decode_47_abi_decode_48_block0(v39), !1368

        abi_decode_47_abi_decode_48_block0(v40: [u8; 3]):
        v41 = call abi_decode_59(v2), !1369
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block0(v41), !1370

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block0(v42: { u8, { u64, ( u64 | bool ) } }):
        v43 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1371
        store v42 to v43, !1372
        v44 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_01, !1373
        v45 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1374
        v46 = load v45, !1375
        v47 = const u64 0
        v48 = get_elem_ptr v44, ptr { u8, { u64, ( u64 | bool ) } }, v47, !1376
        store v46 to v48, !1377
        v49 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1378
        v50 = load v49, !1379
        v51 = const u64 1
        v52 = get_elem_ptr v44, ptr { u8, { u64, ( u64 | bool ) } }, v51, !1380
        store v50 to v52, !1381
        v53 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1382
        v54 = load v53, !1383
        v55 = const u64 2
        v56 = get_elem_ptr v44, ptr { u8, { u64, ( u64 | bool ) } }, v55, !1384
        store v54 to v56, !1385
        v57 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1386
        v58 = load v57, !1387
        v59 = const u64 3
        v60 = get_elem_ptr v44, ptr { u8, { u64, ( u64 | bool ) } }, v59, !1388
        store v58 to v60, !1389
        v61 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1390
        v62 = load v61, !1391
        v63 = const u64 4
        v64 = get_elem_ptr v44, ptr { u8, { u64, ( u64 | bool ) } }, v63, !1392
        store v62 to v64, !1393
        v65 = load v44, !1394
        v66 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1395
        store v65 to v66, !1396
        v67 = get_local ptr u64, i0, !1397
        v68 = const u64 1, !409
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v68), !1398

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v69: u64):
        v70 = get_local ptr u64, i0, !1399
        v71 = const u64 5, !413
        v72 = cmp lt v69 v71, !1400
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block1(v72), !1401

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block1(v73: bool):
        cbr v73, abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !1402

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_break():
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !1403

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v74 = call abi_decode_59(v2), !1404
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block2(v74), !1405

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block2(v75: { u8, { u64, ( u64 | bool ) } }):
        v76 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1406
        v77 = get_local ptr u64, i0, !1407
        v78 = get_elem_ptr v76, ptr { u8, { u64, ( u64 | bool ) } }, v69, !1408
        store v75 to v78, !1409
        v79 = get_local ptr u64, i0, !1410
        v80 = const u64 1, !430
        v81 = add v69, v80, !1411
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block3(v81), !1412

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_block3(v82: u64):
        v83 = get_local ptr u64, i0, !1413
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v82), !1414

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v84 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1415
        v85 = load v84, !1416
        br abi_decode_47_abi_decode_48_decode_54_block0(v85), !1417

        abi_decode_47_abi_decode_48_decode_54_block0(v86: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        br abi_decode_47_abi_decode_48_block1(v86), !1418

        abi_decode_47_abi_decode_48_block1(v87: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        v88 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_00, !1419
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr [u8; 3], v89, !1420
        store v40 to v90, !1421
        v91 = const u64 1
        v92 = get_elem_ptr v88, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v91, !1422
        store v87 to v92, !1423
        v93 = load v88, !1424
        br abi_decode_47_block0(v93), !1425

        abi_decode_47_block0(v94: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v95 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !1426
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v96, !1427
        store v94 to v97, !1428
        v98 = load v95, !86
        br block0(v98), !86

        block0(v99: { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }):
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v99
    }

    pub fn abi_decode_47(buffer !1429: ptr { u64, u64 }) -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !1430 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_00
        local [u8; 3] __anon_000
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_01
        local mut [u8; 3] array
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array0
        local u8 first
        local { u8, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1431
        br abi_decode_48_decode_49_abi_decode_50_decode_51_block0(v0), !1432

        abi_decode_48_decode_49_abi_decode_50_decode_51_block0(v1: u8):
        br abi_decode_48_decode_49_abi_decode_50_block0(v1), !1433

        abi_decode_48_decode_49_abi_decode_50_block0(v2: u8):
        v3 = get_local ptr u8, first, !1434
        v4 = get_local ptr [u8; 3], __anon_000, !1435
        v5 = get_local ptr u8, first, !1436
        v6 = const u64 0
        v7 = get_elem_ptr v4, ptr u8, v6, !1437
        store v2 to v7, !1438
        v8 = get_local ptr u8, first, !1439
        v9 = const u64 1
        v10 = get_elem_ptr v4, ptr u8, v9, !1440
        store v2 to v10, !1441
        v11 = get_local ptr u8, first, !1442
        v12 = const u64 2
        v13 = get_elem_ptr v4, ptr u8, v12, !1443
        store v2 to v13, !1444
        v14 = load v4, !1445
        v15 = get_local ptr [u8; 3], array, !1446
        store v14 to v15, !1447
        v16 = get_local ptr u64, i, !1448
        v17 = const u64 1, !116
        br abi_decode_48_decode_49_abi_decode_50_while(v17), !1449

        abi_decode_48_decode_49_abi_decode_50_while(v18: u64):
        v19 = get_local ptr u64, i, !1450
        v20 = const u64 3, !120
        v21 = cmp lt v18 v20, !1451
        br abi_decode_48_decode_49_abi_decode_50_block1(v21), !1452

        abi_decode_48_decode_49_abi_decode_50_block1(v22: bool):
        cbr v22, abi_decode_48_decode_49_abi_decode_50_while_body(), abi_decode_48_decode_49_abi_decode_50_end_while(), !1453

        abi_decode_48_decode_49_abi_decode_50_while_break():
        br abi_decode_48_decode_49_abi_decode_50_end_while(), !1454

        abi_decode_48_decode_49_abi_decode_50_while_body():
        v23 = call read_53(buffer), !1455
        br abi_decode_48_decode_49_abi_decode_50_decode_51_block03(v23), !1456

        abi_decode_48_decode_49_abi_decode_50_decode_51_block03(v24: u8):
        br abi_decode_48_decode_49_abi_decode_50_block2(v24), !1457

        abi_decode_48_decode_49_abi_decode_50_block2(v25: u8):
        v26 = get_local ptr [u8; 3], array, !1458
        v27 = get_local ptr u64, i, !1459
        v28 = get_elem_ptr v26, ptr u8, v18, !1460
        store v25 to v28, !1461
        v29 = get_local ptr u64, i, !1462
        v30 = const u64 1, !136
        v31 = add v18, v30, !1463
        br abi_decode_48_decode_49_abi_decode_50_block4(v31), !1464

        abi_decode_48_decode_49_abi_decode_50_block4(v32: u64):
        v33 = get_local ptr u64, i, !1465
        br abi_decode_48_decode_49_abi_decode_50_while(v32), !1466

        abi_decode_48_decode_49_abi_decode_50_end_while():
        v34 = get_local ptr [u8; 3], array, !1467
        v35 = load v34, !1468
        br abi_decode_48_decode_49_block0(v35), !1469

        abi_decode_48_decode_49_block0(v36: [u8; 3]):
        br abi_decode_48_block0(v36), !1470

        abi_decode_48_block0(v37: [u8; 3]):
        v38 = call abi_decode_59(buffer), !1471
        br abi_decode_48_decode_54_abi_decode_55_block0(v38), !1472

        abi_decode_48_decode_54_abi_decode_55_block0(v39: { u8, { u64, ( u64 | bool ) } }):
        v40 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1473
        store v39 to v40, !1474
        v41 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_01, !1475
        v42 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1476
        v43 = load v42, !1477
        v44 = const u64 0
        v45 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v44, !1478
        store v43 to v45, !1479
        v46 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1480
        v47 = load v46, !1481
        v48 = const u64 1
        v49 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v48, !1482
        store v47 to v49, !1483
        v50 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1484
        v51 = load v50, !1485
        v52 = const u64 2
        v53 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v52, !1486
        store v51 to v53, !1487
        v54 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1488
        v55 = load v54, !1489
        v56 = const u64 3
        v57 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v56, !1490
        store v55 to v57, !1491
        v58 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1492
        v59 = load v58, !1493
        v60 = const u64 4
        v61 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v60, !1494
        store v59 to v61, !1495
        v62 = load v41, !1496
        v63 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1497
        store v62 to v63, !1498
        v64 = get_local ptr u64, i0, !1499
        v65 = const u64 1, !409
        br abi_decode_48_decode_54_abi_decode_55_while(v65), !1500

        abi_decode_48_decode_54_abi_decode_55_while(v66: u64):
        v67 = get_local ptr u64, i0, !1501
        v68 = const u64 5, !413
        v69 = cmp lt v66 v68, !1502
        br abi_decode_48_decode_54_abi_decode_55_block1(v69), !1503

        abi_decode_48_decode_54_abi_decode_55_block1(v70: bool):
        cbr v70, abi_decode_48_decode_54_abi_decode_55_while_body(), abi_decode_48_decode_54_abi_decode_55_end_while(), !1504

        abi_decode_48_decode_54_abi_decode_55_while_break():
        br abi_decode_48_decode_54_abi_decode_55_end_while(), !1505

        abi_decode_48_decode_54_abi_decode_55_while_body():
        v71 = call abi_decode_59(buffer), !1506
        br abi_decode_48_decode_54_abi_decode_55_block2(v71), !1507

        abi_decode_48_decode_54_abi_decode_55_block2(v72: { u8, { u64, ( u64 | bool ) } }):
        v73 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1508
        v74 = get_local ptr u64, i0, !1509
        v75 = get_elem_ptr v73, ptr { u8, { u64, ( u64 | bool ) } }, v66, !1510
        store v72 to v75, !1511
        v76 = get_local ptr u64, i0, !1512
        v77 = const u64 1, !430
        v78 = add v66, v77, !1513
        br abi_decode_48_decode_54_abi_decode_55_block3(v78), !1514

        abi_decode_48_decode_54_abi_decode_55_block3(v79: u64):
        v80 = get_local ptr u64, i0, !1515
        br abi_decode_48_decode_54_abi_decode_55_while(v79), !1516

        abi_decode_48_decode_54_abi_decode_55_end_while():
        v81 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1517
        v82 = load v81, !1518
        br abi_decode_48_decode_54_block0(v82), !1519

        abi_decode_48_decode_54_block0(v83: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        br abi_decode_48_block1(v83), !1520

        abi_decode_48_block1(v84: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        v85 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_00, !1521
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr [u8; 3], v86, !330
        store v37 to v87, !1522
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v88, !330
        store v84 to v89, !1523
        v90 = load v85, !330
        br block0(v90), !330

        block0(v91: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v92 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !449
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v93, !449
        store v91 to v94, !449
        v95 = load v92
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v95
    }

    pub fn abi_decode_48(buffer !1524: ptr { u64, u64 }) -> { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, !1525 {
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_0
        local [u8; 3] __anon_00
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_01
        local mut [u8; 3] array
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array0
        local u8 first
        local { u8, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1526
        br decode_49_abi_decode_50_decode_51_block0(v0), !1527

        decode_49_abi_decode_50_decode_51_block0(v1: u8):
        br decode_49_abi_decode_50_block0(v1), !1528

        decode_49_abi_decode_50_block0(v2: u8):
        v3 = get_local ptr u8, first, !1529
        v4 = get_local ptr [u8; 3], __anon_00, !1530
        v5 = get_local ptr u8, first, !1531
        v6 = const u64 0
        v7 = get_elem_ptr v4, ptr u8, v6, !1532
        store v2 to v7, !1533
        v8 = get_local ptr u8, first, !1534
        v9 = const u64 1
        v10 = get_elem_ptr v4, ptr u8, v9, !1535
        store v2 to v10, !1536
        v11 = get_local ptr u8, first, !1537
        v12 = const u64 2
        v13 = get_elem_ptr v4, ptr u8, v12, !1538
        store v2 to v13, !1539
        v14 = load v4, !1540
        v15 = get_local ptr [u8; 3], array, !1541
        store v14 to v15, !1542
        v16 = get_local ptr u64, i, !1543
        v17 = const u64 1, !116
        br decode_49_abi_decode_50_while(v17), !1544

        decode_49_abi_decode_50_while(v18: u64):
        v19 = get_local ptr u64, i, !1545
        v20 = const u64 3, !120
        v21 = cmp lt v18 v20, !1546
        br decode_49_abi_decode_50_block1(v21), !1547

        decode_49_abi_decode_50_block1(v22: bool):
        cbr v22, decode_49_abi_decode_50_while_body(), decode_49_abi_decode_50_end_while(), !1548

        decode_49_abi_decode_50_while_break():
        br decode_49_abi_decode_50_end_while(), !1549

        decode_49_abi_decode_50_while_body():
        v23 = call read_53(buffer), !1550
        br decode_49_abi_decode_50_decode_51_block03(v23), !1551

        decode_49_abi_decode_50_decode_51_block03(v24: u8):
        br decode_49_abi_decode_50_block2(v24), !1552

        decode_49_abi_decode_50_block2(v25: u8):
        v26 = get_local ptr [u8; 3], array, !1553
        v27 = get_local ptr u64, i, !1554
        v28 = get_elem_ptr v26, ptr u8, v18, !1555
        store v25 to v28, !1556
        v29 = get_local ptr u64, i, !1557
        v30 = const u64 1, !136
        v31 = add v18, v30, !1558
        br decode_49_abi_decode_50_block4(v31), !1559

        decode_49_abi_decode_50_block4(v32: u64):
        v33 = get_local ptr u64, i, !1560
        br decode_49_abi_decode_50_while(v32), !1561

        decode_49_abi_decode_50_end_while():
        v34 = get_local ptr [u8; 3], array, !1562
        v35 = load v34, !1563
        br decode_49_block0(v35), !1564

        decode_49_block0(v36: [u8; 3]):
        br block0(v36), !331

        block0(v37: [u8; 3]):
        v38 = call abi_decode_59(buffer), !1565
        br decode_54_abi_decode_55_block0(v38), !1566

        decode_54_abi_decode_55_block0(v39: { u8, { u64, ( u64 | bool ) } }):
        v40 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1567
        store v39 to v40, !1568
        v41 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_01, !1569
        v42 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1570
        v43 = load v42, !1571
        v44 = const u64 0
        v45 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v44, !1572
        store v43 to v45, !1573
        v46 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1574
        v47 = load v46, !1575
        v48 = const u64 1
        v49 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v48, !1576
        store v47 to v49, !1577
        v50 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1578
        v51 = load v50, !1579
        v52 = const u64 2
        v53 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v52, !1580
        store v51 to v53, !1581
        v54 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1582
        v55 = load v54, !1583
        v56 = const u64 3
        v57 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v56, !1584
        store v55 to v57, !1585
        v58 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1586
        v59 = load v58, !1587
        v60 = const u64 4
        v61 = get_elem_ptr v41, ptr { u8, { u64, ( u64 | bool ) } }, v60, !1588
        store v59 to v61, !1589
        v62 = load v41, !1590
        v63 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1591
        store v62 to v63, !1592
        v64 = get_local ptr u64, i0, !1593
        v65 = const u64 1, !409
        br decode_54_abi_decode_55_while(v65), !1594

        decode_54_abi_decode_55_while(v66: u64):
        v67 = get_local ptr u64, i0, !1595
        v68 = const u64 5, !413
        v69 = cmp lt v66 v68, !1596
        br decode_54_abi_decode_55_block1(v69), !1597

        decode_54_abi_decode_55_block1(v70: bool):
        cbr v70, decode_54_abi_decode_55_while_body(), decode_54_abi_decode_55_end_while(), !1598

        decode_54_abi_decode_55_while_break():
        br decode_54_abi_decode_55_end_while(), !1599

        decode_54_abi_decode_55_while_body():
        v71 = call abi_decode_59(buffer), !1600
        br decode_54_abi_decode_55_block2(v71), !1601

        decode_54_abi_decode_55_block2(v72: { u8, { u64, ( u64 | bool ) } }):
        v73 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1602
        v74 = get_local ptr u64, i0, !1603
        v75 = get_elem_ptr v73, ptr { u8, { u64, ( u64 | bool ) } }, v66, !1604
        store v72 to v75, !1605
        v76 = get_local ptr u64, i0, !1606
        v77 = const u64 1, !430
        v78 = add v66, v77, !1607
        br decode_54_abi_decode_55_block3(v78), !1608

        decode_54_abi_decode_55_block3(v79: u64):
        v80 = get_local ptr u64, i0, !1609
        br decode_54_abi_decode_55_while(v79), !1610

        decode_54_abi_decode_55_end_while():
        v81 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1611
        v82 = load v81, !1612
        br decode_54_block0(v82), !1613

        decode_54_block0(v83: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        br block1(v83), !373

        block1(v84: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        v85 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_0, !441
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr [u8; 3], v86
        store v37 to v87, !441
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v88
        store v84 to v89, !441
        v90 = load v85
        ret { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } v90
    }

    pub fn decode_49(self !1067: ptr { u64, u64 }) -> [u8; 3], !1068 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(self: ptr { u64, u64 }):
        v0 = call read_53(self), !1614
        br abi_decode_50_decode_51_block0(v0), !1615

        abi_decode_50_decode_51_block0(v1: u8):
        br abi_decode_50_block0(v1), !1616

        abi_decode_50_block0(v2: u8):
        v3 = get_local ptr u8, first, !1617
        v4 = get_local ptr [u8; 3], __anon_0, !1618
        v5 = get_local ptr u8, first, !1619
        v6 = const u64 0
        v7 = get_elem_ptr v4, ptr u8, v6, !89
        store v2 to v7, !1620
        v8 = get_local ptr u8, first, !1621
        v9 = const u64 1
        v10 = get_elem_ptr v4, ptr u8, v9, !89
        store v2 to v10, !1622
        v11 = get_local ptr u8, first, !1623
        v12 = const u64 2
        v13 = get_elem_ptr v4, ptr u8, v12, !89
        store v2 to v13, !1624
        v14 = load v4, !89
        v15 = get_local ptr [u8; 3], array, !1625
        store v14 to v15, !1626
        v16 = get_local ptr u64, i, !1627
        v17 = const u64 1, !116
        br abi_decode_50_while(v17), !89

        abi_decode_50_while(v18: u64):
        v19 = get_local ptr u64, i, !1628
        v20 = const u64 3, !120
        v21 = cmp lt v18 v20, !1629
        br abi_decode_50_block1(v21), !1630

        abi_decode_50_block1(v22: bool):
        cbr v22, abi_decode_50_while_body(), abi_decode_50_end_while(), !89

        abi_decode_50_while_break():
        br abi_decode_50_end_while(), !89

        abi_decode_50_while_body():
        v23 = call read_53(self), !1631
        br abi_decode_50_decode_51_block03(v23), !1632

        abi_decode_50_decode_51_block03(v24: u8):
        br abi_decode_50_block2(v24), !1633

        abi_decode_50_block2(v25: u8):
        v26 = get_local ptr [u8; 3], array, !1634
        v27 = get_local ptr u64, i, !1635
        v28 = get_elem_ptr v26, ptr u8, v18, !1636
        store v25 to v28, !1637
        v29 = get_local ptr u64, i, !1638
        v30 = const u64 1, !136
        v31 = add v18, v30, !1639
        br abi_decode_50_block4(v31), !1640

        abi_decode_50_block4(v32: u64):
        v33 = get_local ptr u64, i, !1641
        br abi_decode_50_while(v32), !89

        abi_decode_50_end_while():
        v34 = get_local ptr [u8; 3], array, !1642
        v35 = load v34, !89
        br block0(v35), !89

        block0(v36: [u8; 3]):
        ret [u8; 3] v36
    }

    pub fn abi_decode_50(buffer !1095: ptr { u64, u64 }) -> [u8; 3], !1096 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1643
        br decode_51_block0(v0), !1644

        decode_51_block0(v1: u8):
        br block0(v1), !90

        block0(v2: u8):
        v3 = get_local ptr u8, first, !92
        v4 = get_local ptr [u8; 3], __anon_0, !95
        v5 = get_local ptr u8, first, !97
        v6 = const u64 0
        v7 = get_elem_ptr v4, ptr u8, v6
        store v2 to v7, !95
        v8 = get_local ptr u8, first, !97
        v9 = const u64 1
        v10 = get_elem_ptr v4, ptr u8, v9
        store v2 to v10, !95
        v11 = get_local ptr u8, first, !97
        v12 = const u64 2
        v13 = get_elem_ptr v4, ptr u8, v12
        store v2 to v13, !95
        v14 = load v4
        v15 = get_local ptr [u8; 3], array, !111
        store v14 to v15, !111
        v16 = get_local ptr u64, i, !114
        v17 = const u64 1, !116
        br while(v17)

        while(v18: u64):
        v19 = get_local ptr u64, i, !118
        v20 = const u64 3, !120
        v21 = cmp lt v18 v20, !121
        br block1(v21), !121

        block1(v22: bool):
        cbr v22, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v23 = call read_53(buffer), !1645
        br decode_51_block03(v23), !1646

        decode_51_block03(v24: u8):
        br block2(v24), !126

        block2(v25: u8):
        v26 = get_local ptr [u8; 3], array, !128
        v27 = get_local ptr u64, i, !130
        v28 = get_elem_ptr v26, ptr u8, v18, !128
        store v25 to v28, !128
        v29 = get_local ptr u64, i, !134
        v30 = const u64 1, !136
        v31 = add v18, v30, !137
        br block4(v31), !137

        block4(v32: u64):
        v33 = get_local ptr u64, i, !137
        br while(v32)

        end_while():
        v34 = get_local ptr [u8; 3], array, !142
        v35 = load v34
        ret [u8; 3] v35
    }

    pub fn decode_51(self !1067: ptr { u64, u64 }) -> u8, !1068 {
        entry(self: ptr { u64, u64 }):
        v0 = call read_53(self), !1647
        br block0(v0), !89

        block0(v1: u8):
        ret u8 v1
    }

    pub fn abi_decode_52(buffer !1648: ptr { u64, u64 }) -> u8, !1649 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !332
        ret u8 v0
    }

    pub fn read_53(self !732: ptr { u64, u64 }) -> u8, !733 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !662
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !664
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !666
        v8 = add v2, v7, !666
        br block6(v8), !666

        block6(v9: u64):
        v10 = get_local ptr u64, ptr, !670
        v11 = get_local ptr u64, size, !672
        v12 = const u64 1
        v13 = get_elem_ptr self, ptr u64, v12, !664
        v14 = load v13
        v15 = get_local ptr u64, size, !675
        v16 = const u64 1
        v17 = add v14, v16, !677
        br block7(v17), !677

        block7(v18: u64):
        v19 = get_local ptr u64, next_pos, !680
        v20 = const bool false
        cbr v20, block0(), block1(), !682

        block0():
        v21 = get_local ptr u64, ptr, !684
        v22 = asm(ptr: v9) -> u8 ptr, !686 {
        }
        v23 = get_local ptr u8, v, !688
        v24 = get_local ptr u64, next_pos, !690
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !692
        store v18 to v26, !692
        v27 = get_local ptr u8, v, !695
        br block5(v22)

        block1():
        v28 = get_local ptr u64, size, !697
        v29 = const u64 1, !699
        v30 = cmp eq v16 v29, !700
        br block8(v30), !700

        block8(v31: bool):
        cbr v31, block2(), block3(), !700

        block2():
        v32 = get_local ptr u64, ptr, !704
        v33 = asm(ptr: v9, val) -> u8 val, !706 {
            lb     val ptr i0, !708
        }
        v34 = get_local ptr u8, v_, !709
        v35 = get_local ptr u64, next_pos, !711
        v36 = const u64 1
        v37 = get_elem_ptr self, ptr u64, v36, !713
        store v18 to v37, !713
        v38 = get_local ptr u8, v_, !716
        br block4(v33)

        block3():
        v39 = get_local ptr u64, ptr, !718
        v40 = asm(ptr: v9, val) -> u8 val, !720 {
            lw     val ptr i0, !722
        }
        v41 = get_local ptr u8, v__, !723
        v42 = get_local ptr u64, next_pos, !725
        v43 = const u64 1
        v44 = get_elem_ptr self, ptr u64, v43, !727
        store v18 to v44, !727
        v45 = get_local ptr u8, v__, !730
        br block4(v40)

        block4(v46: u8):
        br block5(v46)

        block5(v47: u8):
        ret u8 v47
    }

    pub fn decode_54(self !1067: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !1068 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !1650
        br abi_decode_55_block0(v0), !1651

        abi_decode_55_block0(v1: { u8, { u64, ( u64 | bool ) } }):
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1652
        store v1 to v2, !1653
        v3 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !1654
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1655
        v5 = load v4, !89
        v6 = const u64 0
        v7 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v6, !89
        store v5 to v7, !1656
        v8 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1657
        v9 = load v8, !89
        v10 = const u64 1
        v11 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v10, !89
        store v9 to v11, !1658
        v12 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1659
        v13 = load v12, !89
        v14 = const u64 2
        v15 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v14, !89
        store v13 to v15, !1660
        v16 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1661
        v17 = load v16, !89
        v18 = const u64 3
        v19 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v18, !89
        store v17 to v19, !1662
        v20 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1663
        v21 = load v20, !89
        v22 = const u64 4
        v23 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v22, !89
        store v21 to v23, !1664
        v24 = load v3, !89
        v25 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !1665
        store v24 to v25, !1666
        v26 = get_local ptr u64, i, !1667
        v27 = const u64 1, !409
        br abi_decode_55_while(v27), !89

        abi_decode_55_while(v28: u64):
        v29 = get_local ptr u64, i, !1668
        v30 = const u64 5, !413
        v31 = cmp lt v28 v30, !1669
        br abi_decode_55_block1(v31), !1670

        abi_decode_55_block1(v32: bool):
        cbr v32, abi_decode_55_while_body(), abi_decode_55_end_while(), !89

        abi_decode_55_while_break():
        br abi_decode_55_end_while(), !89

        abi_decode_55_while_body():
        v33 = call abi_decode_59(self), !1671
        br abi_decode_55_block2(v33), !1672

        abi_decode_55_block2(v34: { u8, { u64, ( u64 | bool ) } }):
        v35 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !1673
        v36 = get_local ptr u64, i, !1674
        v37 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v28, !1675
        store v34 to v37, !1676
        v38 = get_local ptr u64, i, !1677
        v39 = const u64 1, !430
        v40 = add v28, v39, !1678
        br abi_decode_55_block3(v40), !1679

        abi_decode_55_block3(v41: u64):
        v42 = get_local ptr u64, i, !1680
        br abi_decode_55_while(v41), !89

        abi_decode_55_end_while():
        v43 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !1681
        v44 = load v43, !89
        br block0(v44), !89

        block0(v45: [{ u8, { u64, ( u64 | bool ) } }; 5]):
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v45
    }

    pub fn abi_decode_55(buffer !1682: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !1683 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_59(buffer), !1684
        br block0(v0), !374

        block0(v1: { u8, { u64, ( u64 | bool ) } }):
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !377
        store v1 to v2, !377
        v3 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !380
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !382
        v5 = load v4
        v6 = const u64 0
        v7 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v6
        store v5 to v7, !380
        v8 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !382
        v9 = load v8
        v10 = const u64 1
        v11 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v10
        store v9 to v11, !380
        v12 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !382
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v14
        store v13 to v15, !380
        v16 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !382
        v17 = load v16
        v18 = const u64 3
        v19 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v18
        store v17 to v19, !380
        v20 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !382
        v21 = load v20
        v22 = const u64 4
        v23 = get_elem_ptr v3, ptr { u8, { u64, ( u64 | bool ) } }, v22
        store v21 to v23, !380
        v24 = load v3
        v25 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !404
        store v24 to v25, !404
        v26 = get_local ptr u64, i, !407
        v27 = const u64 1, !409
        br while(v27)

        while(v28: u64):
        v29 = get_local ptr u64, i, !411
        v30 = const u64 5, !413
        v31 = cmp lt v28 v30, !414
        br block1(v31), !414

        block1(v32: bool):
        cbr v32, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v33 = call abi_decode_59(buffer), !1685
        br block2(v33), !419

        block2(v34: { u8, { u64, ( u64 | bool ) } }):
        v35 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !422
        v36 = get_local ptr u64, i, !424
        v37 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v28, !422
        store v34 to v37, !422
        v38 = get_local ptr u64, i, !428
        v39 = const u64 1, !430
        v40 = add v28, v39, !431
        br block3(v40), !431

        block3(v41: u64):
        v42 = get_local ptr u64, i, !431
        br while(v41)

        end_while():
        v43 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !436
        v44 = load v43
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v44
    }

    pub fn decode_56(self !1067: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !1068 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !89
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_57(buffer !1026: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !1027 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1686
        br decode_51_block0(v0), !1687

        decode_51_block0(v1: u8):
        br block0(v1), !88

        block0(v2: u8):
        v3 = call decode_28(buffer), !147
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !149
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u8, v5
        store v2 to v6, !149
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7
        store v3 to v8, !149
        v9 = load v4
        ret { u8, { u64, ( u64 | bool ) } } v9
    }

    pub fn decode_58(self !1067: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !1068 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !89
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_59(buffer !1026: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !1027 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1688
        br decode_51_block0(v0), !1689

        decode_51_block0(v1: u8):
        br block0(v1), !88

        block0(v2: u8):
        v3 = call decode_28(buffer), !147
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !149
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u8, v5
        store v2 to v6, !149
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7
        store v3 to v8, !149
        v9 = load v4
        ret { u8, { u64, ( u64 | bool ) } } v9
    }

    pub fn encode_60(item !1307: u64) -> slice, !1308 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_42(), !269
        v1 = ptr_to_int v0 to u64, !271
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }, !271
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !1690
        v5 = load v4, !271
        v6 = asm(buffer: v5) -> { u64, u64, u64 } buffer, !271 {
        }
        v7 = get_local ptr { u64, u64, u64 }, __anon_0, !271
        store v6 to v7, !271
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !271
        v10 = load v9, !271
        v11 = int_to_ptr v10 to ptr u8, !271
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr u64, v12, !271
        v14 = load v13, !271
        v15 = const u64 2
        v16 = get_elem_ptr v7, ptr u64, v15, !271
        v17 = load v16, !271
        v18 = ptr_to_int v11 to u64, !271
        v19 = add v18, v17, !271
        v20 = int_to_ptr v19 to ptr u64, !271
        store item to v20, !271
        v21 = const u64 8
        v22 = add v17, v21, !271
        v23 = ptr_to_int v11 to u64, !271
        v24 = get_local ptr { u64, u64, u64 }, __anon_1, !271
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !271
        store v23 to v26, !271
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27, !271
        store v14 to v28, !271
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29, !271
        store v22 to v30, !271
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer, !271 {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_2, !1691
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33, !271
        store v31 to v34, !1692
        v35 = load v32, !271
        br block0(v35), !271

        block0(v36: { { u64, u64, u64 } }):
        v37 = get_local ptr { { u64, u64, u64 } }, buffer, !309
        store v36 to v37, !309
        v38 = get_local ptr { { u64, u64, u64 } }, buffer, !312
        v39 = load v38
        v40 = call as_raw_slice_43(v39), !314
        ret slice v40
    }

    pub fn abi_encode_61(self !1693: u64, buffer !1694: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1695 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !274
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr u64
        store self to v19
        v20 = const u64 8
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !491
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !491
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn take_generic_array_62(_arg !1696: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !1697 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !459
        ret u64 v0
    }

    pub fn decode_second_param_63() -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !804 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_00
        local { { u64 }, u64, u64 } __anon_000
        local { u64, { u64 } } __anon_01
        local u64 a
        local u64 b
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !79
        v1 = get_local ptr { u64, u64 }, buffer, !81
        store v0 to v1, !81
        v2 = get_local ptr { u64, u64 }, buffer, !84
        v3 = call abi_decode_39(v2), !1698
        v4 = call read_53(v2), !1699
        v5 = asm(input: v4) -> u64 input, !1700 {
        }
        br abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block0(v5), !1701

        abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block0(v6: u64):
        v7 = get_local ptr u64, a, !1702
        v8 = call read_53(v2), !1703
        v9 = asm(input: v8) -> u64 input, !1704 {
        }
        br abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block1(v9), !1705

        abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block1(v10: u64):
        v11 = get_local ptr u64, b, !1706
        v12 = get_local ptr u64, a, !1707
        v13 = const u64 8, !537
        v14 = lsh v6, v13, !1708
        v15 = const u64 65535, !541
        br abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v15), !1709

        abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v16: u64):
        v17 = and v14, v16, !1710
        br abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block2(v17), !1711

        abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block2(v18: u64):
        v19 = get_local ptr u64, b, !1712
        v20 = or v18, v10, !1713
        br abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block3(v20), !1714

        abi_decode_64_abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block3(v21: u64):
        br abi_decode_64_abi_decode_65_decode_66_abi_decode_67_block0(v21), !1715

        abi_decode_64_abi_decode_65_decode_66_abi_decode_67_block0(v22: u64):
        v23 = call abi_decode_74(v2), !1716
        v24 = get_local ptr { { u64 }, u64, u64 }, __anon_000, !1717
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64 }, v25, !1718
        store v3 to v26, !1719
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27, !1720
        store v22 to v28, !1721
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29, !1722
        store v23 to v30, !1723
        v31 = load v24, !1724
        br abi_decode_64_abi_decode_65_decode_66_block0(v31), !1725

        abi_decode_64_abi_decode_65_decode_66_block0(v32: { { u64 }, u64, u64 }):
        br abi_decode_64_abi_decode_65_block0(v32), !1726

        abi_decode_64_abi_decode_65_block0(v33: { { u64 }, u64, u64 }):
        v34 = call abi_decode_74(v2), !1727
        v35 = call abi_decode_39(v2), !1728
        v36 = get_local ptr { u64, { u64 } }, __anon_01, !1729
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !1730
        store v34 to v38, !1731
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr { u64 }, v39, !1732
        store v35 to v40, !1733
        v41 = load v36, !1734
        br abi_decode_64_abi_decode_65_decode_79_block0(v41), !1735

        abi_decode_64_abi_decode_65_decode_79_block0(v42: { u64, { u64 } }):
        br abi_decode_64_abi_decode_65_block1(v42), !1736

        abi_decode_64_abi_decode_65_block1(v43: { u64, { u64 } }):
        v44 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_00, !1737
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr { { u64 }, u64, u64 }, v45, !1738
        store v33 to v46, !1739
        v47 = const u64 1
        v48 = get_elem_ptr v44, ptr { u64, { u64 } }, v47, !1740
        store v43 to v48, !1741
        v49 = load v44, !1742
        br abi_decode_64_block0(v49), !1743

        abi_decode_64_block0(v50: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v51 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !1744
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v52, !1745
        store v50 to v53, !1746
        v54 = load v51, !86
        br block0(v54), !86

        block0(v55: { { { { u64 }, u64, u64 }, { u64, { u64 } } } }):
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v55
    }

    pub fn abi_decode_64(buffer !1429: ptr { u64, u64 }) -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !1430 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_00
        local { { u64 }, u64, u64 } __anon_000
        local { u64, { u64 } } __anon_01
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !1747
        v1 = call read_53(buffer), !1748
        v2 = asm(input: v1) -> u64 input, !1749 {
        }
        br abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block0(v2), !1750

        abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block0(v3: u64):
        v4 = get_local ptr u64, a, !1751
        v5 = call read_53(buffer), !1752
        v6 = asm(input: v5) -> u64 input, !1753 {
        }
        br abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block1(v6), !1754

        abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block1(v7: u64):
        v8 = get_local ptr u64, b, !1755
        v9 = get_local ptr u64, a, !1756
        v10 = const u64 8, !537
        v11 = lsh v3, v10, !1757
        v12 = const u64 65535, !541
        br abi_decode_65_decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v12), !1758

        abi_decode_65_decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v13: u64):
        v14 = and v11, v13, !1759
        br abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block2(v14), !1760

        abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block2(v15: u64):
        v16 = get_local ptr u64, b, !1761
        v17 = or v15, v7, !1762
        br abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block3(v17), !1763

        abi_decode_65_decode_66_abi_decode_67_abi_decode_69_block3(v18: u64):
        br abi_decode_65_decode_66_abi_decode_67_block0(v18), !1764

        abi_decode_65_decode_66_abi_decode_67_block0(v19: u64):
        v20 = call abi_decode_74(buffer), !1765
        v21 = get_local ptr { { u64 }, u64, u64 }, __anon_000, !1766
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64 }, v22, !1767
        store v0 to v23, !1768
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !1769
        store v19 to v25, !1770
        v26 = const u64 2
        v27 = get_elem_ptr v21, ptr u64, v26, !1771
        store v20 to v27, !1772
        v28 = load v21, !1773
        br abi_decode_65_decode_66_block0(v28), !1774

        abi_decode_65_decode_66_block0(v29: { { u64 }, u64, u64 }):
        br abi_decode_65_block0(v29), !1775

        abi_decode_65_block0(v30: { { u64 }, u64, u64 }):
        v31 = call abi_decode_74(buffer), !1776
        v32 = call abi_decode_39(buffer), !1777
        v33 = get_local ptr { u64, { u64 } }, __anon_01, !1778
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !1779
        store v31 to v35, !1780
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { u64 }, v36, !1781
        store v32 to v37, !1782
        v38 = load v33, !1783
        br abi_decode_65_decode_79_block0(v38), !1784

        abi_decode_65_decode_79_block0(v39: { u64, { u64 } }):
        br abi_decode_65_block1(v39), !1785

        abi_decode_65_block1(v40: { u64, { u64 } }):
        v41 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_00, !1786
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { { u64 }, u64, u64 }, v42, !330
        store v30 to v43, !1787
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr { u64, { u64 } }, v44, !330
        store v40 to v45, !1788
        v46 = load v41, !330
        br block0(v46), !330

        block0(v47: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v48 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !449
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v49, !449
        store v47 to v50, !449
        v51 = load v48
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v51
    }

    pub fn abi_decode_65(buffer !1789: ptr { u64, u64 }) -> { { { u64 }, u64, u64 }, { u64, { u64 } } }, !1790 {
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_0
        local { { u64 }, u64, u64 } __anon_00
        local { u64, { u64 } } __anon_01
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !1791
        v1 = call read_53(buffer), !1792
        v2 = asm(input: v1) -> u64 input, !1793 {
        }
        br decode_66_abi_decode_67_abi_decode_69_block0(v2), !1794

        decode_66_abi_decode_67_abi_decode_69_block0(v3: u64):
        v4 = get_local ptr u64, a, !1795
        v5 = call read_53(buffer), !1796
        v6 = asm(input: v5) -> u64 input, !1797 {
        }
        br decode_66_abi_decode_67_abi_decode_69_block1(v6), !1798

        decode_66_abi_decode_67_abi_decode_69_block1(v7: u64):
        v8 = get_local ptr u64, b, !1799
        v9 = get_local ptr u64, a, !1800
        v10 = const u64 8, !537
        v11 = lsh v3, v10, !1801
        v12 = const u64 65535, !541
        br decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v12), !1802

        decode_66_abi_decode_67_abi_decode_69_lsh_72_block0(v13: u64):
        v14 = and v11, v13, !1803
        br decode_66_abi_decode_67_abi_decode_69_block2(v14), !1804

        decode_66_abi_decode_67_abi_decode_69_block2(v15: u64):
        v16 = get_local ptr u64, b, !1805
        v17 = or v15, v7, !1806
        br decode_66_abi_decode_67_abi_decode_69_block3(v17), !1807

        decode_66_abi_decode_67_abi_decode_69_block3(v18: u64):
        br decode_66_abi_decode_67_block0(v18), !1808

        decode_66_abi_decode_67_block0(v19: u64):
        v20 = call abi_decode_74(buffer), !1809
        v21 = get_local ptr { { u64 }, u64, u64 }, __anon_00, !1810
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64 }, v22, !1811
        store v0 to v23, !1812
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !1813
        store v19 to v25, !1814
        v26 = const u64 2
        v27 = get_elem_ptr v21, ptr u64, v26, !1815
        store v20 to v27, !1816
        v28 = load v21, !1817
        br decode_66_block0(v28), !1818

        decode_66_block0(v29: { { u64 }, u64, u64 }):
        br block0(v29), !515

        block0(v30: { { u64 }, u64, u64 }):
        v31 = call abi_decode_74(buffer), !1819
        v32 = call abi_decode_39(buffer), !1820
        v33 = get_local ptr { u64, { u64 } }, __anon_01, !1821
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !1822
        store v31 to v35, !1823
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { u64 }, v36, !1824
        store v32 to v37, !1825
        v38 = load v33, !1826
        br decode_79_block0(v38), !1827

        decode_79_block0(v39: { u64, { u64 } }):
        br block1(v39), !566

        block1(v40: { u64, { u64 } }):
        v41 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_0, !577
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { { u64 }, u64, u64 }, v42
        store v30 to v43, !577
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr { u64, { u64 } }, v44
        store v40 to v45, !577
        v46 = load v41
        ret { { { u64 }, u64, u64 }, { u64, { u64 } } } v46
    }

    pub fn decode_66(self !1067: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !1068 {
        local { { u64 }, u64, u64 } __anon_0
        local u64 a
        local u64 b

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_39(self), !1828
        v1 = call read_53(self), !1829
        v2 = asm(input: v1) -> u64 input, !1830 {
        }
        br abi_decode_67_abi_decode_69_block0(v2), !1831

        abi_decode_67_abi_decode_69_block0(v3: u64):
        v4 = get_local ptr u64, a, !1832
        v5 = call read_53(self), !1833
        v6 = asm(input: v5) -> u64 input, !1834 {
        }
        br abi_decode_67_abi_decode_69_block1(v6), !1835

        abi_decode_67_abi_decode_69_block1(v7: u64):
        v8 = get_local ptr u64, b, !1836
        v9 = get_local ptr u64, a, !1837
        v10 = const u64 8, !537
        v11 = lsh v3, v10, !1838
        v12 = const u64 65535, !541
        br abi_decode_67_abi_decode_69_lsh_72_block0(v12), !1839

        abi_decode_67_abi_decode_69_lsh_72_block0(v13: u64):
        v14 = and v11, v13, !1840
        br abi_decode_67_abi_decode_69_block2(v14), !1841

        abi_decode_67_abi_decode_69_block2(v15: u64):
        v16 = get_local ptr u64, b, !1842
        v17 = or v15, v7, !1843
        br abi_decode_67_abi_decode_69_block3(v17), !1844

        abi_decode_67_abi_decode_69_block3(v18: u64):
        br abi_decode_67_block0(v18), !1845

        abi_decode_67_block0(v19: u64):
        v20 = call abi_decode_74(self), !1846
        v21 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !1847
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64 }, v22, !1848
        store v0 to v23, !1849
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !1850
        store v19 to v25, !1851
        v26 = const u64 2
        v27 = get_elem_ptr v21, ptr u64, v26, !1852
        store v20 to v27, !1853
        v28 = load v21, !89
        br block0(v28), !89

        block0(v29: { { u64 }, u64, u64 }):
        ret { { u64 }, u64, u64 } v29
    }

    pub fn abi_decode_67(buffer !1854: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !1855 {
        local { { u64 }, u64, u64 } __anon_0
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !516
        v1 = call read_53(buffer), !1856
        v2 = asm(input: v1) -> u64 input, !1857 {
        }
        br abi_decode_69_block0(v2), !1858

        abi_decode_69_block0(v3: u64):
        v4 = get_local ptr u64, a, !1859
        v5 = call read_53(buffer), !1860
        v6 = asm(input: v5) -> u64 input, !1861 {
        }
        br abi_decode_69_block1(v6), !1862

        abi_decode_69_block1(v7: u64):
        v8 = get_local ptr u64, b, !1863
        v9 = get_local ptr u64, a, !1864
        v10 = const u64 8, !537
        v11 = lsh v3, v10, !1865
        v12 = const u64 65535, !541
        br abi_decode_69_lsh_72_block0(v12), !1866

        abi_decode_69_lsh_72_block0(v13: u64):
        v14 = and v11, v13, !1867
        br abi_decode_69_block2(v14), !1868

        abi_decode_69_block2(v15: u64):
        v16 = get_local ptr u64, b, !1869
        v17 = or v15, v7, !1870
        br abi_decode_69_block3(v17), !1871

        abi_decode_69_block3(v18: u64):
        br block0(v18), !518

        block0(v19: u64):
        v20 = call abi_decode_74(buffer), !553
        v21 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !555
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64 }, v22, !555
        store v0 to v23, !555
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !555
        store v19 to v25, !555
        v26 = const u64 2
        v27 = get_elem_ptr v21, ptr u64, v26, !555
        store v20 to v27, !555
        v28 = load v21
        ret { { u64 }, u64, u64 } v28
    }

    pub fn abi_decode_68(buffer !1872: ptr { u64, u64 }) -> { u64 }, !1873 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1875
        br block0(v0), !1874

        block0(v1: u64):
        v2 = get_local ptr { u64 }, __anon_0, !1876
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !1876
        v5 = load v2
        ret { u64 } v5
    }

    pub fn abi_decode_69(buffer !1877: ptr { u64, u64 }) -> u64, !1878 {
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !519
        v1 = asm(input: v0) -> u64 input, !1879 {
        }
        br block0(v1), !521

        block0(v2: u64):
        v3 = get_local ptr u64, a, !526
        v4 = call read_53(buffer), !528
        v5 = asm(input: v4) -> u64 input, !1880 {
        }
        br block1(v5), !530

        block1(v6: u64):
        v7 = get_local ptr u64, b, !533
        v8 = get_local ptr u64, a, !535
        v9 = const u64 8, !537
        v10 = lsh v2, v9, !538
        v11 = const u64 65535, !541
        br lsh_72_block0(v11), !1881

        lsh_72_block0(v12: u64):
        v13 = and v10, v12, !538
        br block2(v13), !538

        block2(v14: u64):
        v15 = get_local ptr u64, b, !547
        v16 = or v14, v6, !549
        br block3(v16), !549

        block3(v17: u64):
        ret u64 v17
    }

    pub fn as_u16_70(self !1882: u8) -> u64, !1883 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !523 {
        }
        ret u64 v0
    }

    pub fn binary_or_71(self !1884: u64, other !1885: u64) -> u64, !1886 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_72(self !1887: u64, other !1888: u64) -> u64, !1889 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = const u64 65535, !541
        br block0(v1), !543

        block0(v2: u64):
        v3 = and v0, v2
        ret u64 v3
    }

    pub fn max_73() -> u64, !1890 {
        entry():
        v0 = const u64 65535, !541
        ret u64 v0
    }

    pub fn abi_decode_74(buffer !1891: ptr { u64, u64 }) -> u64, !1892 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1893
        v1 = asm(input: v0) -> u64 input, !1895 {
        }
        br block0(v1), !1894

        block0(v2: u64):
        v3 = get_local ptr u64, a, !1896
        v4 = call read_53(buffer), !1897
        v5 = asm(input: v4) -> u64 input, !1899 {
        }
        br block1(v5), !1898

        block1(v6: u64):
        v7 = get_local ptr u64, b, !1900
        v8 = call read_53(buffer), !1901
        v9 = asm(input: v8) -> u64 input, !1903 {
        }
        br block2(v9), !1902

        block2(v10: u64):
        v11 = get_local ptr u64, c, !1904
        v12 = call read_53(buffer), !1905
        v13 = asm(input: v12) -> u64 input, !1907 {
        }
        br block3(v13), !1906

        block3(v14: u64):
        v15 = get_local ptr u64, d, !1908
        v16 = get_local ptr u64, a, !1909
        v17 = const u64 24, !1910
        v18 = lsh v2, v17, !1911
        v19 = const u64 4294967295, !1912
        br lsh_77_block0(v19), !1914

        lsh_77_block0(v20: u64):
        v21 = and v18, v20, !1911
        br block4(v21), !1911

        block4(v22: u64):
        v23 = get_local ptr u64, b, !1915
        v24 = const u64 16, !1916
        v25 = lsh v6, v24, !1917
        br lsh_77_block06(v19), !1918

        lsh_77_block06(v26: u64):
        v27 = and v25, v26, !1917
        br block5(v27), !1917

        block5(v28: u64):
        v29 = or v22, v28, !1919
        br block7(v29), !1919

        block7(v30: u64):
        v31 = get_local ptr u64, c, !1920
        v32 = const u64 8, !1921
        v33 = lsh v10, v32, !1922
        br lsh_77_block09(v19), !1923

        lsh_77_block09(v34: u64):
        v35 = and v33, v34, !1922
        br block8(v35), !1922

        block8(v36: u64):
        v37 = or v30, v36, !1924
        br block10(v37), !1924

        block10(v38: u64):
        v39 = get_local ptr u64, d, !1925
        v40 = or v38, v14, !1926
        br block11(v40), !1926

        block11(v41: u64):
        ret u64 v41
    }

    pub fn as_u32_75(self !1927: u8) -> u64, !1928 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !1929 {
        }
        ret u64 v0
    }

    pub fn binary_or_76(self !1930: u64, other !1931: u64) -> u64, !1932 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_77(self !1933: u64, other !1934: u64) -> u64, !1935 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = const u64 4294967295, !1912
        br block0(v1), !1913

        block0(v2: u64):
        v3 = and v0, v2
        ret u64 v3
    }

    pub fn max_78() -> u64, !1936 {
        entry():
        v0 = const u64 4294967295, !1912
        ret u64 v0
    }

    pub fn decode_79(self !1067: ptr { u64, u64 }) -> { u64, { u64 } }, !1068 {
        local { u64, { u64 } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_74(self), !1937
        v1 = call abi_decode_39(self), !1938
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !1939
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !1940
        store v0 to v4, !1941
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !1942
        store v1 to v6, !1943
        v7 = load v2, !89
        br block0(v7), !89

        block0(v8: { u64, { u64 } }):
        ret { u64, { u64 } } v8
    }

    pub fn abi_decode_80(buffer !1292: ptr { u64, u64 }) -> { u64, { u64 } }, !1293 {
        local { u64, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_74(buffer), !220
        v1 = call abi_decode_39(buffer), !234
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !236
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !236
        store v0 to v4, !236
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !236
        store v1 to v6, !236
        v7 = load v2
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_81(buffer !1872: ptr { u64, u64 }) -> { u64 }, !1873 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1944
        br block0(v0), !1874

        block0(v1: u64):
        v2 = get_local ptr { u64 }, __anon_0, !1876
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !1876
        v5 = load v2
        ret { u64 } v5
    }

    pub fn encode_82(item !1307: ()) -> slice, !1308 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_42(), !269
        br block0(v0), !271

        block0(v1: { { u64, u64, u64 } }):
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !309
        store v1 to v2, !309
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !312
        v4 = load v3
        v5 = call as_raw_slice_43(v4), !314
        ret slice v5
    }

    pub fn abi_encode_83(self !1945: (), buffer !1946: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1947 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn take_generic_struct_containing_tuple_84(_arg !1948: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !1949 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }

    pub fn complex_function<51fdfdad>(_arg1 !1319: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !1320: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !1321: { string<5>, bool }, _arg4 !1322: { u64 }) -> string<6>, !1323 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn take_generic_array<67f6e807>(_arg !1696: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !1697 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !459
        ret u64 v0
    }

    pub fn take_generic_struct_containing_tuple<29ad7e95>(_arg !1948: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !1949 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }
}

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
contract {
    pub entry fn __entry() -> (), !1 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local [b256; 3] __anon_0000
        local [u8; 3] __anon_0001
        local { { u64 }, u64, u64 } __anon_0002
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_001
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_002
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_003
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_01
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_010
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_011
        local { u64, { u64 } } __anon_012
        local { string<5>, bool } __anon_02
        local { u64, u64, u64 } __anon_03
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_04
        local { u64, u64, u64 } __anon_05
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_06
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local u64 a
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array00
        local mut [u8; 3] array1
        local u64 b
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local { u8, { u64, ( u64 | bool ) } } first00
        local u8 first1
        local mut u64 i
        local mut u64 i0
        local mut u64 i00
        local mut u64 i1
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !6
        v1 = asm() -> u64 fp, !8 {
        }
        v2 = get_local ptr u64, ptr, !10
        v3 = get_local ptr u64, ptr, !12
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !14
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !17
        v8 = add v1, v7, !18
        v9 = get_local ptr u64, ptr_, !20
        v10 = get_local ptr u64, ptr_, !22
        v11 = call read_3(v8), !24
        v12 = get_local ptr u64, ptr__, !26
        v13 = get_local ptr u64, ptr__, !28
        v14 = asm(ptr: v11) -> u64 ptr, !30 {
        }
        v15 = get_local ptr { u64, u64 }, __anon_00, !32
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !33
        store v14 to v17, !34
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !35
        v20 = const u64 0, !36
        store v20 to v19, !37
        v21 = load v15, !38
        v22 = get_local ptr { u64, u64 }, buffer, !40
        store v21 to v22, !41
        v23 = get_local ptr { u64, u64 }, buffer, !43
        v24 = call abi_decode_5(v23), !46
        v25 = get_local ptr u64, len, !48
        v26 = get_local ptr u64, len, !50
        v27 = call read_bytes_10(v23, v24), !52
        v28 = get_local ptr slice, data, !54
        store v27 to v28, !55
        v29 = get_local ptr slice, data, !57
        v30 = load v29, !58
        v31 = call ptr_11(v30), !60
        v32 = get_local ptr u64, len, !62
        v33 = get_local ptr { u64, u64 }, __anon_000, !64
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !65
        store v31 to v35, !66
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36, !67
        store v24 to v37, !68
        v38 = asm(s: v33) -> slice s, !70 {
        }
        v39 = get_local ptr slice, _method_name, !71
        store v38 to v39, !71
        v40 = get_local ptr slice, _method_name, !72
        v41 = load v40
        v42 = const string<16> "complex_function"
        v43 = ptr_to_int v42 to u64, !73
        v44 = get_local ptr { u64, u64 }, __anon_0, !73
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45
        store v43 to v46, !73
        v47 = const u64 1
        v48 = get_elem_ptr v44, ptr u64, v47
        v49 = const u64 16
        store v49 to v48, !73
        v50 = get_local ptr slice, __anon_1, !73
        mem_copy_bytes v50, v44, 16
        v51 = load v50
        v52 = call eq_13(v41, v51), !74
        v53 = const unit ()
        cbr v52, block0(), block2(v53), !74

        block0():
        v54 = call from_second_parameter_19(), !77
        v55 = get_local ptr { u64, u64 }, buffer0, !79
        store v54 to v55, !80
        v56 = get_local ptr { u64, u64 }, buffer0, !82
        v57 = call decode_24(v56), !88
        v58 = get_local ptr b256, first, !90
        store v57 to v58, !91
        v59 = get_local ptr [b256; 3], __anon_0000, !93
        v60 = get_local ptr b256, first, !95
        v61 = load v60, !96
        v62 = const u64 0
        v63 = get_elem_ptr v59, ptr b256, v62, !97
        store v61 to v63, !98
        v64 = get_local ptr b256, first, !99
        v65 = load v64, !100
        v66 = const u64 1
        v67 = get_elem_ptr v59, ptr b256, v66, !101
        store v65 to v67, !102
        v68 = get_local ptr b256, first, !103
        v69 = load v68, !104
        v70 = const u64 2
        v71 = get_elem_ptr v59, ptr b256, v70, !105
        store v69 to v71, !106
        v72 = load v59, !107
        v73 = get_local ptr [b256; 3], array, !109
        store v72 to v73, !110
        v74 = get_local ptr u64, i, !112
        v75 = const u64 1, !113
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v75), !114

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v76: u64):
        v77 = get_local ptr u64, i, !116
        v78 = const u64 3, !117
        v79 = cmp lt v76 v78, !119
        cbr v79, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !120

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v80 = call decode_24(v56), !122
        v81 = get_local ptr [b256; 3], array, !124
        v82 = get_local ptr u64, i, !126
        v83 = get_elem_ptr v81, ptr b256, v76, !127
        store v80 to v83, !128
        v84 = get_local ptr u64, i, !130
        v85 = const u64 1, !131
        v86 = add v76, v85, !133
        v87 = get_local ptr u64, i, !134
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v86), !135

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v88 = get_local ptr [b256; 3], array, !137
        v89 = load v88, !138
        v90 = call decode_28(v56), !140
        v91 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_001, !142
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr [b256; 3], v92, !143
        store v89 to v93, !144
        v94 = const u64 1
        v95 = get_elem_ptr v91, ptr { u64, ( u64 | bool ) }, v94, !145
        store v90 to v95, !146
        v96 = load v91, !147
        v97 = call decode_35(v56), !150
        v98 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !152
        store v97 to v98, !153
        v99 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_010, !155
        v100 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !157
        v101 = load v100, !158
        v102 = const u64 0
        v103 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v102, !159
        store v101 to v103, !160
        v104 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !161
        v105 = load v104, !162
        v106 = const u64 1
        v107 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v106, !163
        store v105 to v107, !164
        v108 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !165
        v109 = load v108, !166
        v110 = const u64 2
        v111 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v110, !167
        store v109 to v111, !168
        v112 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !169
        v113 = load v112, !170
        v114 = const u64 3
        v115 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v114, !171
        store v113 to v115, !172
        v116 = load v99, !173
        v117 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !175
        store v116 to v117, !176
        v118 = get_local ptr u64, i0, !178
        v119 = const u64 1, !179
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v119), !180

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v120: u64):
        v121 = get_local ptr u64, i0, !182
        v122 = const u64 4, !183
        v123 = cmp lt v120 v122, !185
        cbr v123, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !186

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v124 = call decode_35(v56), !188
        v125 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !190
        v126 = get_local ptr u64, i0, !192
        v127 = get_elem_ptr v125, ptr { u64, { u64, ( u64 | bool ) } }, v120, !193
        store v124 to v127, !194
        v128 = get_local ptr u64, i0, !196
        v129 = const u64 1, !197
        v130 = add v120, v129, !199
        v131 = get_local ptr u64, i0, !200
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v130), !201

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v132 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !203
        v133 = load v132, !204
        v134 = const u64 5, !205
        v135 = call read_bytes_10(v56, v134), !209
        v136 = get_local ptr slice, data0, !211
        store v135 to v136, !212
        v137 = get_local ptr slice, data0, !214
        v138 = load v137, !215
        v139 = call ptr_11(v138), !217
        v140 = asm(s: v139) -> string<5> s, !219 {
        }
        v141 = call abi_decode_32(v56), !221
        v142 = get_local ptr { string<5>, bool }, __anon_02, !223
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr string<5>, v143, !224
        store v140 to v144, !225
        v145 = const u64 1
        v146 = get_elem_ptr v142, ptr bool, v145, !226
        store v141 to v146, !227
        v147 = load v142, !228
        v148 = call abi_decode_39(v56), !230
        v149 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_01, !232
        v150 = const u64 0
        v151 = get_elem_ptr v149, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v150, !233
        store v96 to v151, !234
        v152 = const u64 1
        v153 = get_elem_ptr v149, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v152, !235
        store v133 to v153, !236
        v154 = const u64 2
        v155 = get_elem_ptr v149, ptr { string<5>, bool }, v154, !237
        store v147 to v155, !238
        v156 = const u64 3
        v157 = get_elem_ptr v149, ptr { u64 }, v156, !239
        store v148 to v157, !240
        v158 = load v149, !241
        v159 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !242
        store v158 to v159, !242
        v160 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !243
        v161 = const u64 0
        v162 = get_elem_ptr v160, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v161, !244
        v163 = load v162
        v164 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !245
        v165 = const u64 1
        v166 = get_elem_ptr v164, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v165, !246
        v167 = load v166
        v168 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !247
        v169 = const u64 2
        v170 = get_elem_ptr v168, ptr { string<5>, bool }, v169, !248
        v171 = load v170
        v172 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !249
        v173 = const u64 3
        v174 = get_elem_ptr v172, ptr { u64 }, v173, !250
        v175 = load v174
        v176 = call new_42(), !253
        v177 = ptr_to_int v176 to u64, !255
        v178 = int_to_ptr v177 to ptr { { u64, u64, u64 } }, !256
        v179 = const u64 0
        v180 = get_elem_ptr v178, ptr { u64, u64, u64 }, v179, !258
        v181 = load v180, !259
        v182 = asm(buffer: v181) -> { u64, u64, u64 } buffer, !260 {
        }
        v183 = get_local ptr { u64, u64, u64 }, __anon_03, !261
        store v182 to v183, !262
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr u64, v184, !263
        v186 = load v185, !264
        v187 = int_to_ptr v186 to ptr u8, !265
        v188 = const u64 1
        v189 = get_elem_ptr v183, ptr u64, v188, !266
        v190 = load v189, !267
        v191 = const u64 2
        v192 = get_elem_ptr v183, ptr u64, v191, !268
        v193 = load v192, !269
        v194 = get_local ptr string<6>, __anon_10, !270
        v195 = const string<6> "fuel42"
        store v195 to v194, !271
        v196 = ptr_to_int v187 to u64, !272
        v197 = add v196, v193, !273
        v198 = int_to_ptr v197 to ptr u8, !274
        mem_copy_bytes v198, v194, 6, !275
        v199 = const u64 6
        v200 = add v193, v199, !276
        v201 = ptr_to_int v187 to u64, !277
        v202 = get_local ptr { u64, u64, u64 }, __anon_20, !278
        v203 = const u64 0
        v204 = get_elem_ptr v202, ptr u64, v203, !279
        store v201 to v204, !280
        v205 = const u64 1
        v206 = get_elem_ptr v202, ptr u64, v205, !281
        store v190 to v206, !282
        v207 = const u64 2
        v208 = get_elem_ptr v202, ptr u64, v207, !283
        store v200 to v208, !284
        v209 = asm(buffer: v202) -> { u64, u64, u64 } buffer, !285 {
        }
        v210 = get_local ptr { { u64, u64, u64 } }, __anon_30, !287
        v211 = const u64 0
        v212 = get_elem_ptr v210, ptr { u64, u64, u64 }, v211, !288
        store v209 to v212, !289
        v213 = load v210, !290
        v214 = get_local ptr { { u64, u64, u64 } }, buffer1, !292
        store v213 to v214, !293
        v215 = get_local ptr { { u64, u64, u64 } }, buffer1, !295
        v216 = load v215, !251
        v217 = call as_raw_slice_43(v216), !297
        v218 = get_local ptr slice, result_complex_function, !298
        store v217 to v218, !298
        v219 = get_local ptr slice, result_complex_function, !299
        v220 = load v219
        v221 = call ptr_11(v220), !300
        v222 = get_local ptr slice, result_complex_function, !301
        v223 = load v222
        v224 = call len_45(v223), !302
        retd v221 v224, !303
        v225 = const unit ()
        br block2(v225)

        block2(v226: ()):
        v227 = get_local ptr slice, _method_name, !304
        v228 = load v227
        v229 = const string<18> "take_generic_array"
        v230 = ptr_to_int v229 to u64, !305
        v231 = get_local ptr { u64, u64 }, __anon_2, !305
        v232 = const u64 0
        v233 = get_elem_ptr v231, ptr u64, v232
        store v230 to v233, !305
        v234 = const u64 1
        v235 = get_elem_ptr v231, ptr u64, v234
        v236 = const u64 18
        store v236 to v235, !305
        v237 = get_local ptr slice, __anon_3, !305
        mem_copy_bytes v237, v231, 16
        v238 = load v237
        v239 = call eq_13(v228, v238), !306
        v240 = const unit ()
        cbr v239, block3(), block5(v240), !306

        block3():
        v241 = call from_second_parameter_19(), !308
        v242 = get_local ptr { u64, u64 }, buffer2, !309
        store v241 to v242, !310
        v243 = get_local ptr { u64, u64 }, buffer2, !311
        v244 = call read_53(v243), !315
        v245 = get_local ptr u8, first1, !316
        v246 = get_local ptr [u8; 3], __anon_0001, !317
        v247 = get_local ptr u8, first1, !318
        v248 = const u64 0
        v249 = get_elem_ptr v246, ptr u8, v248, !319
        store v244 to v249, !320
        v250 = get_local ptr u8, first1, !321
        v251 = const u64 1
        v252 = get_elem_ptr v246, ptr u8, v251, !322
        store v244 to v252, !323
        v253 = get_local ptr u8, first1, !324
        v254 = const u64 2
        v255 = get_elem_ptr v246, ptr u8, v254, !325
        store v244 to v255, !326
        v256 = load v246, !327
        v257 = get_local ptr [u8; 3], array1, !328
        store v256 to v257, !329
        v258 = get_local ptr u64, i1, !330
        v259 = const u64 1, !113
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v259), !331

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v260: u64):
        v261 = get_local ptr u64, i1, !332
        v262 = const u64 3, !117
        v263 = cmp lt v260 v262, !333
        cbr v263, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !334

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v264 = call read_53(v243), !335
        v265 = get_local ptr [u8; 3], array1, !336
        v266 = get_local ptr u64, i1, !337
        v267 = get_elem_ptr v265, ptr u8, v260, !338
        store v264 to v267, !339
        v268 = get_local ptr u64, i1, !340
        v269 = const u64 1, !131
        v270 = add v260, v269, !341
        v271 = get_local ptr u64, i1, !342
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v270), !343

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v272 = get_local ptr [u8; 3], array1, !344
        v273 = load v272, !345
        v274 = call abi_decode_59(v243), !348
        v275 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !350
        store v274 to v275, !351
        v276 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_011, !353
        v277 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !355
        v278 = load v277, !356
        v279 = const u64 0
        v280 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v279, !357
        store v278 to v280, !358
        v281 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !359
        v282 = load v281, !360
        v283 = const u64 1
        v284 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v283, !361
        store v282 to v284, !362
        v285 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !363
        v286 = load v285, !364
        v287 = const u64 2
        v288 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v287, !365
        store v286 to v288, !366
        v289 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !367
        v290 = load v289, !368
        v291 = const u64 3
        v292 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v291, !369
        store v290 to v292, !370
        v293 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !371
        v294 = load v293, !372
        v295 = const u64 4
        v296 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v295, !373
        store v294 to v296, !374
        v297 = load v276, !375
        v298 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !377
        store v297 to v298, !378
        v299 = get_local ptr u64, i00, !380
        v300 = const u64 1, !381
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v300), !382

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v301: u64):
        v302 = get_local ptr u64, i00, !384
        v303 = const u64 5, !385
        v304 = cmp lt v301 v303, !387
        cbr v304, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !388

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v305 = call abi_decode_59(v243), !390
        v306 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !392
        v307 = get_local ptr u64, i00, !394
        v308 = get_elem_ptr v306, ptr { u8, { u64, ( u64 | bool ) } }, v301, !395
        store v305 to v308, !396
        v309 = get_local ptr u64, i00, !398
        v310 = const u64 1, !399
        v311 = add v301, v310, !401
        v312 = get_local ptr u64, i00, !402
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v311), !403

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v313 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !405
        v314 = load v313, !406
        v315 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_002, !408
        v316 = const u64 0
        v317 = get_elem_ptr v315, ptr [u8; 3], v316, !409
        store v273 to v317, !410
        v318 = const u64 1
        v319 = get_elem_ptr v315, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v318, !411
        store v314 to v319, !412
        v320 = load v315, !413
        v321 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_04, !415
        v322 = const u64 0
        v323 = get_elem_ptr v321, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v322, !416
        store v320 to v323, !417
        v324 = load v321, !418
        v325 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !419
        store v324 to v325, !419
        v326 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !420
        v327 = const u64 0
        v328 = get_elem_ptr v326, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v327, !421
        v329 = load v328
        v330 = call new_42(), !423
        v331 = ptr_to_int v330 to u64, !424
        v332 = int_to_ptr v331 to ptr { { u64, u64, u64 } }, !425
        v333 = const u64 0
        v334 = get_elem_ptr v332, ptr { u64, u64, u64 }, v333, !426
        v335 = load v334, !427
        v336 = asm(buffer: v335) -> { u64, u64, u64 } buffer, !428 {
        }
        v337 = get_local ptr { u64, u64, u64 }, __anon_05, !429
        store v336 to v337, !430
        v338 = const u64 0
        v339 = get_elem_ptr v337, ptr u64, v338, !431
        v340 = load v339, !432
        v341 = int_to_ptr v340 to ptr u8, !433
        v342 = const u64 1
        v343 = get_elem_ptr v337, ptr u64, v342, !434
        v344 = load v343, !435
        v345 = const u64 2
        v346 = get_elem_ptr v337, ptr u64, v345, !436
        v347 = load v346, !437
        v348 = ptr_to_int v341 to u64, !438
        v349 = add v348, v347, !439
        v350 = int_to_ptr v349 to ptr u64, !440
        v351 = const u64 0, !442
        store v351 to v350, !443
        v352 = const u64 8
        v353 = add v347, v352, !444
        v354 = ptr_to_int v341 to u64, !445
        v355 = get_local ptr { u64, u64, u64 }, __anon_11, !446
        v356 = const u64 0
        v357 = get_elem_ptr v355, ptr u64, v356, !447
        store v354 to v357, !448
        v358 = const u64 1
        v359 = get_elem_ptr v355, ptr u64, v358, !449
        store v344 to v359, !450
        v360 = const u64 2
        v361 = get_elem_ptr v355, ptr u64, v360, !451
        store v353 to v361, !452
        v362 = asm(buffer: v355) -> { u64, u64, u64 } buffer, !453 {
        }
        v363 = get_local ptr { { u64, u64, u64 } }, __anon_21, !455
        v364 = const u64 0
        v365 = get_elem_ptr v363, ptr { u64, u64, u64 }, v364, !456
        store v362 to v365, !457
        v366 = load v363, !458
        v367 = get_local ptr { { u64, u64, u64 } }, buffer3, !459
        store v366 to v367, !460
        v368 = get_local ptr { { u64, u64, u64 } }, buffer3, !461
        v369 = load v368, !422
        v370 = call as_raw_slice_43(v369), !462
        v371 = get_local ptr slice, result_take_generic_array, !463
        store v370 to v371, !463
        v372 = get_local ptr slice, result_take_generic_array, !464
        v373 = load v372
        v374 = call ptr_11(v373), !465
        v375 = get_local ptr slice, result_take_generic_array, !466
        v376 = load v375
        v377 = call len_45(v376), !467
        retd v374 v377, !468
        v378 = const unit ()
        br block5(v378)

        block5(v379: ()):
        v380 = get_local ptr slice, _method_name, !469
        v381 = load v380
        v382 = const string<36> "take_generic_struct_containing_tuple"
        v383 = ptr_to_int v382 to u64, !470
        v384 = get_local ptr { u64, u64 }, __anon_4, !470
        v385 = const u64 0
        v386 = get_elem_ptr v384, ptr u64, v385
        store v383 to v386, !470
        v387 = const u64 1
        v388 = get_elem_ptr v384, ptr u64, v387
        v389 = const u64 36
        store v389 to v388, !470
        v390 = get_local ptr slice, __anon_5, !470
        mem_copy_bytes v390, v384, 16
        v391 = load v390
        v392 = call eq_13(v381, v391), !471
        v393 = const unit ()
        cbr v392, block6(), block8(v393), !471

        block6():
        v394 = call from_second_parameter_19(), !473
        v395 = get_local ptr { u64, u64 }, buffer4, !474
        store v394 to v395, !475
        v396 = get_local ptr { u64, u64 }, buffer4, !476
        v397 = call abi_decode_39(v396), !479
        v398 = call read_53(v396), !482
        v399 = asm(input: v398) -> u64 input, !486 {
        }
        v400 = get_local ptr u64, a, !488
        v401 = call read_53(v396), !490
        v402 = asm(input: v401) -> u64 input, !492 {
        }
        v403 = get_local ptr u64, b, !494
        v404 = get_local ptr u64, a, !496
        v405 = const u64 8, !497
        v406 = lsh v399, v405, !499
        v407 = const u64 65535, !501
        v408 = and v406, v407, !502
        v409 = get_local ptr u64, b, !504
        v410 = or v408, v402, !506
        v411 = call abi_decode_74(v396), !508
        v412 = get_local ptr { { u64 }, u64, u64 }, __anon_0002, !510
        v413 = const u64 0
        v414 = get_elem_ptr v412, ptr { u64 }, v413, !511
        store v397 to v414, !512
        v415 = const u64 1
        v416 = get_elem_ptr v412, ptr u64, v415, !513
        store v410 to v416, !514
        v417 = const u64 2
        v418 = get_elem_ptr v412, ptr u64, v417, !515
        store v411 to v418, !516
        v419 = load v412, !517
        v420 = call abi_decode_74(v396), !519
        v421 = call abi_decode_39(v396), !520
        v422 = get_local ptr { u64, { u64 } }, __anon_012, !521
        v423 = const u64 0
        v424 = get_elem_ptr v422, ptr u64, v423, !522
        store v420 to v424, !523
        v425 = const u64 1
        v426 = get_elem_ptr v422, ptr { u64 }, v425, !524
        store v421 to v426, !525
        v427 = load v422, !526
        v428 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_003, !528
        v429 = const u64 0
        v430 = get_elem_ptr v428, ptr { { u64 }, u64, u64 }, v429, !529
        store v419 to v430, !530
        v431 = const u64 1
        v432 = get_elem_ptr v428, ptr { u64, { u64 } }, v431, !531
        store v427 to v432, !532
        v433 = load v428, !533
        v434 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_06, !534
        v435 = const u64 0
        v436 = get_elem_ptr v434, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v435, !535
        store v433 to v436, !536
        v437 = load v434, !537
        v438 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !538
        store v437 to v438, !538
        v439 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !539
        v440 = const u64 0
        v441 = get_elem_ptr v439, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v440, !540
        v442 = load v441
        v443 = call new_42(), !542
        v444 = get_local ptr { { u64, u64, u64 } }, buffer5, !543
        store v443 to v444, !544
        v445 = get_local ptr { { u64, u64, u64 } }, buffer5, !545
        v446 = load v445, !541
        v447 = call as_raw_slice_43(v446), !546
        v448 = get_local ptr slice, result_take_generic_struct_containing_tuple, !547
        store v447 to v448, !547
        v449 = get_local ptr slice, result_take_generic_struct_containing_tuple, !548
        v450 = load v449
        v451 = call ptr_11(v450), !549
        v452 = get_local ptr slice, result_take_generic_struct_containing_tuple, !550
        v453 = load v452
        v454 = call len_45(v453), !551
        retd v451 v454, !552
        v455 = const unit ()
        br block8(v455)

        block8(v456: ()):
        v457 = const u64 123, !553
        revert v457, !554
    }

    pub fn decode_first_param_0() -> slice, !555 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local mut { u64, u64 } buffer
        local slice data
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !556
        v1 = asm() -> u64 fp, !557 {
        }
        v2 = get_local ptr u64, ptr, !558
        v3 = get_local ptr u64, ptr, !559
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !560
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !561
        v8 = add v1, v7, !562
        v9 = get_local ptr u64, ptr_, !563
        v10 = get_local ptr u64, ptr_, !564
        v11 = call read_3(v8), !565
        v12 = get_local ptr u64, ptr__, !566
        v13 = get_local ptr u64, ptr__, !567
        v14 = asm(ptr: v11) -> u64 ptr, !568 {
        }
        v15 = get_local ptr { u64, u64 }, __anon_0, !569
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !4
        store v14 to v17, !570
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !4
        v20 = const u64 0, !36
        store v20 to v19, !571
        v21 = load v15, !4
        v22 = get_local ptr { u64, u64 }, buffer, !39
        store v21 to v22, !39
        v23 = get_local ptr { u64, u64 }, buffer, !42
        v24 = call abi_decode_5(v23), !572
        v25 = get_local ptr u64, len, !573
        v26 = get_local ptr u64, len, !574
        v27 = call read_bytes_10(v23, v24), !575
        v28 = get_local ptr slice, data, !576
        store v27 to v28, !577
        v29 = get_local ptr slice, data, !578
        v30 = load v29, !44
        v31 = call ptr_11(v30), !579
        v32 = get_local ptr u64, len, !580
        v33 = get_local ptr { u64, u64 }, __anon_00, !581
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !582
        store v31 to v35, !583
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36, !584
        store v24 to v37, !585
        v38 = asm(s: v33) -> slice s, !586 {
        }
        ret slice v38
    }

    pub fn from_first_parameter_1() -> { u64, u64 }, !587 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !5
        v1 = asm() -> u64 fp, !7 {
        }
        v2 = get_local ptr u64, ptr, !9
        v3 = get_local ptr u64, ptr, !11
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !13
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !16
        v8 = add v1, v7, !16
        v9 = get_local ptr u64, ptr_, !19
        v10 = get_local ptr u64, ptr_, !21
        v11 = call read_3(v8), !23
        v12 = get_local ptr u64, ptr__, !25
        v13 = get_local ptr u64, ptr__, !27
        v14 = asm(ptr: v11) -> u64 ptr, !29 {
        }
        v15 = get_local ptr { u64, u64 }, __anon_0, !31
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17, !31
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        v20 = const u64 0, !36
        store v20 to v19, !31
        v21 = load v15
        ret { u64, u64 } v21
    }

    pub fn add_2(self !589: u64, count !590: u64) -> u64, !591 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_3(self !592: u64) -> u64, !593 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !594

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !595 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !596
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !597

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !598 {
            lb     val ptr i0, !599
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !600 {
            lw     val ptr i0, !601
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn abi_decode_4(buffer !602: ptr { u64, u64 }) -> slice, !603 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !45
        v1 = get_local ptr u64, len, !47
        v2 = get_local ptr u64, len, !49
        v3 = call read_bytes_10(buffer, v0), !51
        v4 = get_local ptr slice, data, !53
        store v3 to v4, !53
        v5 = get_local ptr slice, data, !56
        v6 = load v5
        v7 = call ptr_11(v6), !59
        v8 = get_local ptr u64, len, !61
        v9 = get_local ptr { u64, u64 }, __anon_0, !63
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !63
        store v7 to v11, !63
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !63
        store v0 to v13, !63
        v14 = asm(s: v9) -> slice s, !69 {
        }
        ret slice v14
    }

    pub fn abi_decode_5(buffer !604: ptr { u64, u64 }) -> u64, !605 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !608
        v2 = load v1, !606
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !610
        v5 = load v4, !606
        v6 = const u64 1
        v7 = mul v6, v5, !612
        v8 = add v2, v7, !613
        v9 = get_local ptr u64, ptr, !615
        v10 = get_local ptr u64, size, !617
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !618
        v13 = load v12, !606
        v14 = get_local ptr u64, size, !620
        v15 = const u64 8
        v16 = add v13, v15, !622
        v17 = get_local ptr u64, next_pos, !624
        v18 = const bool false
        cbr v18, read_6_block0(), read_6_block1(), !626

        read_6_block0():
        v19 = get_local ptr u64, ptr, !628
        v20 = asm(ptr: v8) -> u64 ptr, !630 {
        }
        v21 = get_local ptr u64, v, !632
        v22 = get_local ptr u64, next_pos, !634
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !636
        store v16 to v24, !637
        v25 = get_local ptr u64, v, !639
        br read_6_block5(v20), !606

        read_6_block1():
        v26 = get_local ptr u64, size, !641
        v27 = const u64 1, !642
        v28 = cmp eq v15 v27, !644
        cbr v28, read_6_block2(), read_6_block3(), !645

        read_6_block2():
        v29 = get_local ptr u64, ptr, !647
        v30 = asm(ptr: v8, val) -> u64 val, !649 {
            lb     val ptr i0, !650
        }
        v31 = get_local ptr u64, v_, !652
        v32 = get_local ptr u64, next_pos, !654
        v33 = const u64 1
        v34 = get_elem_ptr buffer, ptr u64, v33, !656
        store v16 to v34, !657
        v35 = get_local ptr u64, v_, !659
        br read_6_block4(v30), !606

        read_6_block3():
        v36 = get_local ptr u64, ptr, !661
        v37 = asm(ptr: v8, val) -> u64 val, !663 {
            lw     val ptr i0, !664
        }
        v38 = get_local ptr u64, v__, !666
        v39 = get_local ptr u64, next_pos, !668
        v40 = const u64 1
        v41 = get_elem_ptr buffer, ptr u64, v40, !670
        store v16 to v41, !671
        v42 = get_local ptr u64, v__, !673
        br read_6_block4(v37), !606

        read_6_block4(v43: u64):
        br read_6_block5(v43), !606

        read_6_block5(v44: u64):
        ret u64 v44
    }

    pub fn read_6(self !674: ptr { u64, u64 }) -> u64, !675 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !607
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !609
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !611
        v8 = add v2, v7, !611
        v9 = get_local ptr u64, ptr, !614
        v10 = get_local ptr u64, size, !616
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !609
        v13 = load v12
        v14 = get_local ptr u64, size, !619
        v15 = const u64 8
        v16 = add v13, v15, !621
        v17 = get_local ptr u64, next_pos, !623
        v18 = const bool false
        cbr v18, block0(), block1(), !625

        block0():
        v19 = get_local ptr u64, ptr, !627
        v20 = asm(ptr: v8) -> u64 ptr, !629 {
        }
        v21 = get_local ptr u64, v, !631
        v22 = get_local ptr u64, next_pos, !633
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !635
        store v16 to v24, !635
        v25 = get_local ptr u64, v, !638
        br block5(v20)

        block1():
        v26 = get_local ptr u64, size, !640
        v27 = const u64 1, !642
        v28 = cmp eq v15 v27, !643
        cbr v28, block2(), block3(), !643

        block2():
        v29 = get_local ptr u64, ptr, !646
        v30 = asm(ptr: v8, val) -> u64 val, !648 {
            lb     val ptr i0, !650
        }
        v31 = get_local ptr u64, v_, !651
        v32 = get_local ptr u64, next_pos, !653
        v33 = const u64 1
        v34 = get_elem_ptr self, ptr u64, v33, !655
        store v16 to v34, !655
        v35 = get_local ptr u64, v_, !658
        br block4(v30)

        block3():
        v36 = get_local ptr u64, ptr, !660
        v37 = asm(ptr: v8, val) -> u64 val, !662 {
            lw     val ptr i0, !664
        }
        v38 = get_local ptr u64, v__, !665
        v39 = get_local ptr u64, next_pos, !667
        v40 = const u64 1
        v41 = get_elem_ptr self, ptr u64, v40, !669
        store v16 to v41, !669
        v42 = get_local ptr u64, v__, !672
        br block4(v37)

        block4(v43: u64):
        br block5(v43)

        block5(v44: u64):
        ret u64 v44
    }

    pub fn add_7(self !589: u64, count !590: u64) -> u64, !591 {
        entry(self: u64, count: u64):
        v0 = const u64 1
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn add_8(self !677: u64, other !678: u64) -> u64, !679 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn eq_9(self !680: u64, other !681: u64) -> bool, !682 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn read_bytes_10(self !683: ptr { u64, u64 }, count !684: u64) -> slice, !685 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !609
        v2 = load v1
        v3 = add v2, count, !686
        v4 = get_local ptr u64, next_pos, !687
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !607
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !609
        v10 = load v9
        v11 = const u64 1
        v12 = mul v11, v10, !688
        v13 = add v7, v12, !688
        v14 = get_local ptr u64, ptr, !689
        v15 = get_local ptr u64, ptr, !690
        v16 = get_local ptr { u64, u64 }, __anon_0, !691
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !691
        store v13 to v18, !691
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19, !691
        store count to v20, !691
        v21 = asm(ptr: v16) -> slice ptr, !692 {
        }
        v22 = get_local ptr slice, slice, !693
        store v21 to v22, !693
        v23 = get_local ptr u64, next_pos, !694
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !695
        store v3 to v25, !695
        v26 = get_local ptr slice, slice, !696
        v27 = load v26
        ret slice v27
    }

    pub fn ptr_11(self !698: slice) -> u64, !699 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !702 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !703
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_12(slice !704: slice) -> { u64, u64 }, !705 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !701 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_13(self !706: slice, other !707: slice) -> bool, !708 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !709
        v1 = call len_16(other), !710
        v2 = cmp eq v0 v1, !713
        v3 = const bool false, !714
        v4 = cmp eq v2 v3, !716
        v5 = const bool false, !717
        cbr v4, block2(v5), block1(), !711

        block1():
        v6 = call as_ptr_17(self), !718
        v7 = get_local ptr u64, self_ptr, !719
        v8 = call as_ptr_17(other), !720
        v9 = get_local ptr u64, other_ptr, !721
        v10 = call len_16(self), !722
        v11 = get_local ptr u64, l, !723
        v12 = get_local ptr u64, self_ptr, !724
        v13 = get_local ptr u64, other_ptr, !725
        v14 = get_local ptr u64, l, !726
        v15 = asm(r1: v6, r2: v8, r3: v10, r4) -> bool r4, !727 {
            meq    r4 r1 r2 r3, !728
        }
        br block2(v15)

        block2(v16: bool):
        ret bool v16
    }

    pub fn neq_14(self !729: u64, other !730: u64) -> bool, !731 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other, !712
        v1 = const bool false, !714
        v2 = cmp eq v0 v1, !715
        ret bool v2
    }

    pub fn not_15(self !732: bool) -> bool, !733 {
        entry(self: bool):
        v0 = const bool false, !714
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_16(self !735: slice) -> u64, !736 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !737 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !738
        store v0 to v1, !738
        v2 = get_local ptr { u64, u64 }, __tuple_2, !738
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !738
        store v3 to v4, !738
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !738
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !738
        v8 = load v7
        v9 = get_local ptr u64, _, !738
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !738
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !738
        v13 = load v12
        v14 = get_local ptr u64, len, !738
        v15 = get_local ptr u64, len, !739
        ret u64 v13
    }

    pub fn as_ptr_17(self !740: slice) -> u64, !741 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !742 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !743
        store v0 to v1, !743
        v2 = get_local ptr { u64, u64 }, __tuple_1, !743
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !743
        store v3 to v4, !743
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !743
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !743
        v8 = load v7
        v9 = get_local ptr u64, ptr, !743
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !743
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !743
        v13 = load v12
        v14 = get_local ptr u64, _, !743
        v15 = get_local ptr u64, ptr, !744
        ret u64 v8
    }

    pub fn decode_second_param_18() -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !745 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_00
        local [b256; 3] __anon_000
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_01
        local { string<5>, bool } __anon_02
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut { u64, u64 } buffer
        local slice data
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry():
        v0 = call from_second_parameter_19(), !76
        v1 = get_local ptr { u64, u64 }, buffer, !78
        store v0 to v1, !78
        v2 = get_local ptr { u64, u64 }, buffer, !81
        v3 = call decode_24(v2), !746
        v4 = get_local ptr b256, first, !747
        store v3 to v4, !748
        v5 = get_local ptr [b256; 3], __anon_000, !749
        v6 = get_local ptr b256, first, !750
        v7 = load v6, !751
        v8 = const u64 0
        v9 = get_elem_ptr v5, ptr b256, v8, !752
        store v7 to v9, !753
        v10 = get_local ptr b256, first, !754
        v11 = load v10, !755
        v12 = const u64 1
        v13 = get_elem_ptr v5, ptr b256, v12, !756
        store v11 to v13, !757
        v14 = get_local ptr b256, first, !758
        v15 = load v14, !759
        v16 = const u64 2
        v17 = get_elem_ptr v5, ptr b256, v16, !760
        store v15 to v17, !761
        v18 = load v5, !762
        v19 = get_local ptr [b256; 3], array, !763
        store v18 to v19, !764
        v20 = get_local ptr u64, i, !765
        v21 = const u64 1, !113
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v21), !766

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v22: u64):
        v23 = get_local ptr u64, i, !767
        v24 = const u64 3, !117
        v25 = cmp lt v22 v24, !768
        cbr v25, abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !769

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v26 = call decode_24(v2), !770
        v27 = get_local ptr [b256; 3], array, !771
        v28 = get_local ptr u64, i, !772
        v29 = get_elem_ptr v27, ptr b256, v22, !773
        store v26 to v29, !774
        v30 = get_local ptr u64, i, !775
        v31 = const u64 1, !131
        v32 = add v22, v31, !776
        v33 = get_local ptr u64, i, !777
        br abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v32), !778

        abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v34 = get_local ptr [b256; 3], array, !779
        v35 = load v34, !780
        v36 = call decode_28(v2), !781
        v37 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_00, !782
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr [b256; 3], v38, !783
        store v35 to v39, !784
        v40 = const u64 1
        v41 = get_elem_ptr v37, ptr { u64, ( u64 | bool ) }, v40, !785
        store v36 to v41, !786
        v42 = load v37, !787
        v43 = call decode_35(v2), !788
        v44 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !789
        store v43 to v44, !790
        v45 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_01, !791
        v46 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !792
        v47 = load v46, !793
        v48 = const u64 0
        v49 = get_elem_ptr v45, ptr { u64, { u64, ( u64 | bool ) } }, v48, !794
        store v47 to v49, !795
        v50 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !796
        v51 = load v50, !797
        v52 = const u64 1
        v53 = get_elem_ptr v45, ptr { u64, { u64, ( u64 | bool ) } }, v52, !798
        store v51 to v53, !799
        v54 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !800
        v55 = load v54, !801
        v56 = const u64 2
        v57 = get_elem_ptr v45, ptr { u64, { u64, ( u64 | bool ) } }, v56, !802
        store v55 to v57, !803
        v58 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !804
        v59 = load v58, !805
        v60 = const u64 3
        v61 = get_elem_ptr v45, ptr { u64, { u64, ( u64 | bool ) } }, v60, !806
        store v59 to v61, !807
        v62 = load v45, !808
        v63 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !809
        store v62 to v63, !810
        v64 = get_local ptr u64, i0, !811
        v65 = const u64 1, !179
        br abi_decode_20_abi_decode_34_while(v65), !812

        abi_decode_20_abi_decode_34_while(v66: u64):
        v67 = get_local ptr u64, i0, !813
        v68 = const u64 4, !183
        v69 = cmp lt v66 v68, !814
        cbr v69, abi_decode_20_abi_decode_34_while_body(), abi_decode_20_abi_decode_34_end_while(), !815

        abi_decode_20_abi_decode_34_while_body():
        v70 = call decode_35(v2), !816
        v71 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !817
        v72 = get_local ptr u64, i0, !818
        v73 = get_elem_ptr v71, ptr { u64, { u64, ( u64 | bool ) } }, v66, !819
        store v70 to v73, !820
        v74 = get_local ptr u64, i0, !821
        v75 = const u64 1, !197
        v76 = add v66, v75, !822
        v77 = get_local ptr u64, i0, !823
        br abi_decode_20_abi_decode_34_while(v76), !824

        abi_decode_20_abi_decode_34_end_while():
        v78 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !825
        v79 = load v78, !826
        v80 = const u64 5, !205
        v81 = call read_bytes_10(v2, v80), !827
        v82 = get_local ptr slice, data, !828
        store v81 to v82, !829
        v83 = get_local ptr slice, data, !830
        v84 = load v83, !831
        v85 = call ptr_11(v84), !832
        v86 = asm(s: v85) -> string<5> s, !833 {
        }
        v87 = call abi_decode_32(v2), !834
        v88 = get_local ptr { string<5>, bool }, __anon_02, !835
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr string<5>, v89, !836
        store v86 to v90, !837
        v91 = const u64 1
        v92 = get_elem_ptr v88, ptr bool, v91, !838
        store v87 to v92, !839
        v93 = load v88, !840
        v94 = call abi_decode_39(v2), !841
        v95 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !842
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v96, !843
        store v42 to v97, !844
        v98 = const u64 1
        v99 = get_elem_ptr v95, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v98, !845
        store v79 to v99, !846
        v100 = const u64 2
        v101 = get_elem_ptr v95, ptr { string<5>, bool }, v100, !847
        store v93 to v101, !848
        v102 = const u64 3
        v103 = get_elem_ptr v95, ptr { u64 }, v102, !849
        store v94 to v103, !850
        v104 = load v95, !83
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v104
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !851 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !852
        v1 = asm() -> u64 fp, !853 {
        }
        v2 = get_local ptr u64, ptr, !854
        v3 = get_local ptr u64, ptr, !855
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !856
        v5 = const u64 8
        v6 = const u64 74, !857
        v7 = mul v5, v6, !858
        v8 = add v1, v7, !858
        v9 = get_local ptr u64, ptr_, !859
        v10 = get_local ptr u64, ptr_, !860
        v11 = call read_3(v8), !861
        v12 = get_local ptr u64, ptr__, !862
        v13 = get_local ptr u64, ptr__, !863
        v14 = asm(ptr: v11) -> u64 ptr, !864 {
        }
        v15 = get_local ptr { u64, u64 }, __anon_0, !865
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17, !865
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        v20 = const u64 0, !866
        store v20 to v19, !865
        v21 = load v15
        ret { u64, u64 } v21
    }

    pub fn abi_decode_20(buffer !867: ptr { u64, u64 }) -> { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, !868 {
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_0
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_00
        local [b256; 3] __anon_000
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_01
        local { string<5>, bool } __anon_02
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local slice data
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !869
        v1 = get_local ptr b256, first, !870
        store v0 to v1, !871
        v2 = get_local ptr [b256; 3], __anon_000, !872
        v3 = get_local ptr b256, first, !873
        v4 = load v3, !874
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5, !875
        store v4 to v6, !876
        v7 = get_local ptr b256, first, !877
        v8 = load v7, !878
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9, !879
        store v8 to v10, !880
        v11 = get_local ptr b256, first, !881
        v12 = load v11, !882
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13, !883
        store v12 to v14, !884
        v15 = load v2, !885
        v16 = get_local ptr [b256; 3], array, !886
        store v15 to v16, !887
        v17 = get_local ptr u64, i, !888
        v18 = const u64 1, !113
        br abi_decode_21_decode_22_abi_decode_23_while(v18), !889

        abi_decode_21_decode_22_abi_decode_23_while(v19: u64):
        v20 = get_local ptr u64, i, !890
        v21 = const u64 3, !117
        v22 = cmp lt v19 v21, !891
        cbr v22, abi_decode_21_decode_22_abi_decode_23_while_body(), abi_decode_21_decode_22_abi_decode_23_end_while(), !892

        abi_decode_21_decode_22_abi_decode_23_while_body():
        v23 = call decode_24(buffer), !893
        v24 = get_local ptr [b256; 3], array, !894
        v25 = get_local ptr u64, i, !895
        v26 = get_elem_ptr v24, ptr b256, v19, !896
        store v23 to v26, !897
        v27 = get_local ptr u64, i, !898
        v28 = const u64 1, !131
        v29 = add v19, v28, !899
        v30 = get_local ptr u64, i, !900
        br abi_decode_21_decode_22_abi_decode_23_while(v29), !901

        abi_decode_21_decode_22_abi_decode_23_end_while():
        v31 = get_local ptr [b256; 3], array, !902
        v32 = load v31, !903
        v33 = call decode_28(buffer), !904
        v34 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_00, !905
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr [b256; 3], v35, !84
        store v32 to v36, !906
        v37 = const u64 1
        v38 = get_elem_ptr v34, ptr { u64, ( u64 | bool ) }, v37, !84
        store v33 to v38, !907
        v39 = load v34, !84
        v40 = call decode_35(buffer), !908
        v41 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !909
        store v40 to v41, !910
        v42 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_01, !911
        v43 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !912
        v44 = load v43, !148
        v45 = const u64 0
        v46 = get_elem_ptr v42, ptr { u64, { u64, ( u64 | bool ) } }, v45, !148
        store v44 to v46, !913
        v47 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !914
        v48 = load v47, !148
        v49 = const u64 1
        v50 = get_elem_ptr v42, ptr { u64, { u64, ( u64 | bool ) } }, v49, !148
        store v48 to v50, !915
        v51 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !916
        v52 = load v51, !148
        v53 = const u64 2
        v54 = get_elem_ptr v42, ptr { u64, { u64, ( u64 | bool ) } }, v53, !148
        store v52 to v54, !917
        v55 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !918
        v56 = load v55, !148
        v57 = const u64 3
        v58 = get_elem_ptr v42, ptr { u64, { u64, ( u64 | bool ) } }, v57, !148
        store v56 to v58, !919
        v59 = load v42, !148
        v60 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !920
        store v59 to v60, !921
        v61 = get_local ptr u64, i0, !922
        v62 = const u64 1, !179
        br abi_decode_34_while(v62), !148

        abi_decode_34_while(v63: u64):
        v64 = get_local ptr u64, i0, !923
        v65 = const u64 4, !183
        v66 = cmp lt v63 v65, !924
        cbr v66, abi_decode_34_while_body(), abi_decode_34_end_while(), !148

        abi_decode_34_while_body():
        v67 = call decode_35(buffer), !925
        v68 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !926
        v69 = get_local ptr u64, i0, !927
        v70 = get_elem_ptr v68, ptr { u64, { u64, ( u64 | bool ) } }, v63, !928
        store v67 to v70, !929
        v71 = get_local ptr u64, i0, !930
        v72 = const u64 1, !197
        v73 = add v63, v72, !931
        v74 = get_local ptr u64, i0, !932
        br abi_decode_34_while(v73), !148

        abi_decode_34_end_while():
        v75 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !933
        v76 = load v75, !148
        v77 = const u64 5, !205
        v78 = call read_bytes_10(buffer, v77), !934
        v79 = get_local ptr slice, data, !935
        store v78 to v79, !936
        v80 = get_local ptr slice, data, !937
        v81 = load v80, !938
        v82 = call ptr_11(v81), !939
        v83 = asm(s: v82) -> string<5> s, !940 {
        }
        v84 = call abi_decode_32(buffer), !941
        v85 = get_local ptr { string<5>, bool }, __anon_02, !942
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr string<5>, v86, !943
        store v83 to v87, !944
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr bool, v88, !945
        store v84 to v89, !946
        v90 = load v85, !206
        v91 = call abi_decode_39(buffer), !229
        v92 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_0, !231
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v93, !231
        store v39 to v94, !231
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v95, !231
        store v76 to v96, !231
        v97 = const u64 2
        v98 = get_elem_ptr v92, ptr { string<5>, bool }, v97, !231
        store v90 to v98, !231
        v99 = const u64 3
        v100 = get_elem_ptr v92, ptr { u64 }, v99, !231
        store v91 to v100, !231
        v101 = load v92
        ret { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } v101
    }

    pub fn abi_decode_21(buffer !947: ptr { u64, u64 }) -> { [b256; 3], { u64, ( u64 | bool ) } }, !948 {
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_0
        local [b256; 3] __anon_00
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !949
        v1 = get_local ptr b256, first, !950
        store v0 to v1, !951
        v2 = get_local ptr [b256; 3], __anon_00, !952
        v3 = get_local ptr b256, first, !953
        v4 = load v3, !954
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5, !955
        store v4 to v6, !956
        v7 = get_local ptr b256, first, !957
        v8 = load v7, !958
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9, !959
        store v8 to v10, !960
        v11 = get_local ptr b256, first, !961
        v12 = load v11, !962
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13, !963
        store v12 to v14, !964
        v15 = load v2, !965
        v16 = get_local ptr [b256; 3], array, !966
        store v15 to v16, !967
        v17 = get_local ptr u64, i, !968
        v18 = const u64 1, !113
        br decode_22_abi_decode_23_while(v18), !969

        decode_22_abi_decode_23_while(v19: u64):
        v20 = get_local ptr u64, i, !970
        v21 = const u64 3, !117
        v22 = cmp lt v19 v21, !971
        cbr v22, decode_22_abi_decode_23_while_body(), decode_22_abi_decode_23_end_while(), !972

        decode_22_abi_decode_23_while_body():
        v23 = call decode_24(buffer), !973
        v24 = get_local ptr [b256; 3], array, !974
        v25 = get_local ptr u64, i, !975
        v26 = get_elem_ptr v24, ptr b256, v19, !976
        store v23 to v26, !977
        v27 = get_local ptr u64, i, !978
        v28 = const u64 1, !131
        v29 = add v19, v28, !979
        v30 = get_local ptr u64, i, !980
        br decode_22_abi_decode_23_while(v29), !981

        decode_22_abi_decode_23_end_while():
        v31 = get_local ptr [b256; 3], array, !982
        v32 = load v31, !983
        v33 = call decode_28(buffer), !139
        v34 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_0, !141
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr [b256; 3], v35
        store v32 to v36, !141
        v37 = const u64 1
        v38 = get_elem_ptr v34, ptr { u64, ( u64 | bool ) }, v37
        store v33 to v38, !141
        v39 = load v34
        ret { [b256; 3], { u64, ( u64 | bool ) } } v39
    }

    pub fn decode_22(self !984: ptr { u64, u64 }) -> [b256; 3], !985 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(self: ptr { u64, u64 }):
        v0 = call decode_24(self), !986
        v1 = get_local ptr b256, first, !987
        store v0 to v1, !988
        v2 = get_local ptr [b256; 3], __anon_0, !989
        v3 = get_local ptr b256, first, !990
        v4 = load v3, !86
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5, !86
        store v4 to v6, !991
        v7 = get_local ptr b256, first, !992
        v8 = load v7, !86
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9, !86
        store v8 to v10, !993
        v11 = get_local ptr b256, first, !994
        v12 = load v11, !86
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13, !86
        store v12 to v14, !995
        v15 = load v2, !86
        v16 = get_local ptr [b256; 3], array, !996
        store v15 to v16, !997
        v17 = get_local ptr u64, i, !998
        v18 = const u64 1, !113
        br abi_decode_23_while(v18), !86

        abi_decode_23_while(v19: u64):
        v20 = get_local ptr u64, i, !999
        v21 = const u64 3, !117
        v22 = cmp lt v19 v21, !1000
        cbr v22, abi_decode_23_while_body(), abi_decode_23_end_while(), !86

        abi_decode_23_while_body():
        v23 = call decode_24(self), !1001
        v24 = get_local ptr [b256; 3], array, !1002
        v25 = get_local ptr u64, i, !1003
        v26 = get_elem_ptr v24, ptr b256, v19, !1004
        store v23 to v26, !1005
        v27 = get_local ptr u64, i, !1006
        v28 = const u64 1, !131
        v29 = add v19, v28, !1007
        v30 = get_local ptr u64, i, !1008
        br abi_decode_23_while(v29), !86

        abi_decode_23_end_while():
        v31 = get_local ptr [b256; 3], array, !1009
        v32 = load v31, !86
        ret [b256; 3] v32
    }

    pub fn abi_decode_23(buffer !1010: ptr { u64, u64 }) -> [b256; 3], !1011 {
        local [b256; 3] __anon_0
        local mut [b256; 3] array
        local b256 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_24(buffer), !87
        v1 = get_local ptr b256, first, !89
        store v0 to v1, !89
        v2 = get_local ptr [b256; 3], __anon_0, !92
        v3 = get_local ptr b256, first, !94
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr b256, v5
        store v4 to v6, !92
        v7 = get_local ptr b256, first, !94
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr b256, v9
        store v8 to v10, !92
        v11 = get_local ptr b256, first, !94
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr b256, v13
        store v12 to v14, !92
        v15 = load v2
        v16 = get_local ptr [b256; 3], array, !108
        store v15 to v16, !108
        v17 = get_local ptr u64, i, !111
        v18 = const u64 1, !113
        br while(v18)

        while(v19: u64):
        v20 = get_local ptr u64, i, !115
        v21 = const u64 3, !117
        v22 = cmp lt v19 v21, !118
        cbr v22, while_body(), end_while()

        while_body():
        v23 = call decode_24(buffer), !121
        v24 = get_local ptr [b256; 3], array, !123
        v25 = get_local ptr u64, i, !125
        v26 = get_elem_ptr v24, ptr b256, v19, !123
        store v23 to v26, !123
        v27 = get_local ptr u64, i, !129
        v28 = const u64 1, !131
        v29 = add v19, v28, !132
        v30 = get_local ptr u64, i, !132
        br while(v29)

        end_while():
        v31 = get_local ptr [b256; 3], array, !136
        v32 = load v31
        ret [b256; 3] v32
    }

    pub fn decode_24(self !984: ptr { u64, u64 }) -> b256, !985 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !1013
        v2 = load v1, !1014
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !1015
        v5 = load v4, !1016
        v6 = const u64 1
        v7 = mul v6, v5, !1017
        v8 = add v2, v7, !1018
        v9 = get_local ptr u64, ptr, !1019
        v10 = get_local ptr u64, size, !1020
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !1021
        v13 = load v12, !1022
        v14 = get_local ptr u64, size, !1023
        v15 = const u64 32
        v16 = add v13, v15, !1024
        v17 = get_local ptr u64, next_pos, !1025
        v18 = const bool true
        cbr v18, abi_decode_25_read_26_block0(), abi_decode_25_read_26_block1(), !1026

        abi_decode_25_read_26_block0():
        v19 = get_local ptr u64, ptr, !1027
        v20 = asm(ptr: v8) -> b256 ptr, !1028 {
        }
        v21 = get_local ptr b256, v, !1029
        store v20 to v21, !1030
        v22 = get_local ptr u64, next_pos, !1031
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !1032
        store v16 to v24, !1033
        v25 = get_local ptr b256, v, !1034
        v26 = load v25, !1035
        br abi_decode_25_read_26_block5(v26), !1036

        abi_decode_25_read_26_block1():
        v27 = get_local ptr u64, size, !1037
        v28 = const u64 1, !642
        v29 = cmp eq v15 v28, !1038
        cbr v29, abi_decode_25_read_26_block2(), abi_decode_25_read_26_block3(), !1039

        abi_decode_25_read_26_block2():
        v30 = get_local ptr u64, ptr, !1040
        v31 = asm(ptr: v8, val) -> b256 val, !1041 {
            lb     val ptr i0, !650
        }
        v32 = get_local ptr b256, v_, !1042
        store v31 to v32, !1043
        v33 = get_local ptr u64, next_pos, !1044
        v34 = const u64 1
        v35 = get_elem_ptr self, ptr u64, v34, !1045
        store v16 to v35, !1046
        v36 = get_local ptr b256, v_, !1047
        v37 = load v36, !1048
        br abi_decode_25_read_26_block4(v37), !1049

        abi_decode_25_read_26_block3():
        v38 = get_local ptr u64, ptr, !1050
        v39 = asm(ptr: v8, val) -> b256 val, !1051 {
            lw     val ptr i0, !664
        }
        v40 = get_local ptr b256, v__, !1052
        store v39 to v40, !1053
        v41 = get_local ptr u64, next_pos, !1054
        v42 = const u64 1
        v43 = get_elem_ptr self, ptr u64, v42, !1055
        store v16 to v43, !1056
        v44 = get_local ptr b256, v__, !1057
        v45 = load v44, !1058
        br abi_decode_25_read_26_block4(v45), !1059

        abi_decode_25_read_26_block4(v46: b256):
        br abi_decode_25_read_26_block5(v46), !1060

        abi_decode_25_read_26_block5(v47: b256):
        ret b256 v47
    }

    pub fn abi_decode_25(buffer !1061: ptr { u64, u64 }) -> b256, !1062 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !1063
        v2 = load v1, !1012
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !1064
        v5 = load v4, !1012
        v6 = const u64 1
        v7 = mul v6, v5, !1065
        v8 = add v2, v7, !1066
        v9 = get_local ptr u64, ptr, !1067
        v10 = get_local ptr u64, size, !1068
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !1069
        v13 = load v12, !1012
        v14 = get_local ptr u64, size, !1070
        v15 = const u64 32
        v16 = add v13, v15, !1071
        v17 = get_local ptr u64, next_pos, !1072
        v18 = const bool true
        cbr v18, read_26_block0(), read_26_block1(), !1073

        read_26_block0():
        v19 = get_local ptr u64, ptr, !1074
        v20 = asm(ptr: v8) -> b256 ptr, !1075 {
        }
        v21 = get_local ptr b256, v, !1076
        store v20 to v21, !1077
        v22 = get_local ptr u64, next_pos, !1078
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !1079
        store v16 to v24, !1080
        v25 = get_local ptr b256, v, !1081
        v26 = load v25, !1012
        br read_26_block5(v26), !1012

        read_26_block1():
        v27 = get_local ptr u64, size, !1082
        v28 = const u64 1, !642
        v29 = cmp eq v15 v28, !1083
        cbr v29, read_26_block2(), read_26_block3(), !1084

        read_26_block2():
        v30 = get_local ptr u64, ptr, !1085
        v31 = asm(ptr: v8, val) -> b256 val, !1086 {
            lb     val ptr i0, !650
        }
        v32 = get_local ptr b256, v_, !1087
        store v31 to v32, !1088
        v33 = get_local ptr u64, next_pos, !1089
        v34 = const u64 1
        v35 = get_elem_ptr buffer, ptr u64, v34, !1090
        store v16 to v35, !1091
        v36 = get_local ptr b256, v_, !1092
        v37 = load v36, !1012
        br read_26_block4(v37), !1012

        read_26_block3():
        v38 = get_local ptr u64, ptr, !1093
        v39 = asm(ptr: v8, val) -> b256 val, !1094 {
            lw     val ptr i0, !664
        }
        v40 = get_local ptr b256, v__, !1095
        store v39 to v40, !1096
        v41 = get_local ptr u64, next_pos, !1097
        v42 = const u64 1
        v43 = get_elem_ptr buffer, ptr u64, v42, !1098
        store v16 to v43, !1099
        v44 = get_local ptr b256, v__, !1100
        v45 = load v44, !1012
        br read_26_block4(v45), !1012

        read_26_block4(v46: b256):
        br read_26_block5(v46), !1012

        read_26_block5(v47: b256):
        ret b256 v47
    }

    pub fn read_26(self !674: ptr { u64, u64 }) -> b256, !675 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !607
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !609
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !611
        v8 = add v2, v7, !611
        v9 = get_local ptr u64, ptr, !614
        v10 = get_local ptr u64, size, !616
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !609
        v13 = load v12
        v14 = get_local ptr u64, size, !619
        v15 = const u64 32
        v16 = add v13, v15, !621
        v17 = get_local ptr u64, next_pos, !623
        v18 = const bool true
        cbr v18, block0(), block1(), !625

        block0():
        v19 = get_local ptr u64, ptr, !627
        v20 = asm(ptr: v8) -> b256 ptr, !629 {
        }
        v21 = get_local ptr b256, v, !631
        store v20 to v21, !631
        v22 = get_local ptr u64, next_pos, !633
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !635
        store v16 to v24, !635
        v25 = get_local ptr b256, v, !638
        v26 = load v25
        br block5(v26)

        block1():
        v27 = get_local ptr u64, size, !640
        v28 = const u64 1, !642
        v29 = cmp eq v15 v28, !643
        cbr v29, block2(), block3(), !643

        block2():
        v30 = get_local ptr u64, ptr, !646
        v31 = asm(ptr: v8, val) -> b256 val, !648 {
            lb     val ptr i0, !650
        }
        v32 = get_local ptr b256, v_, !651
        store v31 to v32, !651
        v33 = get_local ptr u64, next_pos, !653
        v34 = const u64 1
        v35 = get_elem_ptr self, ptr u64, v34, !655
        store v16 to v35, !655
        v36 = get_local ptr b256, v_, !658
        v37 = load v36
        br block4(v37)

        block3():
        v38 = get_local ptr u64, ptr, !660
        v39 = asm(ptr: v8, val) -> b256 val, !662 {
            lw     val ptr i0, !664
        }
        v40 = get_local ptr b256, v__, !665
        store v39 to v40, !665
        v41 = get_local ptr u64, next_pos, !667
        v42 = const u64 1
        v43 = get_elem_ptr self, ptr u64, v42, !669
        store v16 to v43, !669
        v44 = get_local ptr b256, v__, !672
        v45 = load v44
        br block4(v45)

        block4(v46: b256):
        br block5(v46)

        block5(v47: b256):
        ret b256 v47
    }

    pub fn lt_27(self !1101: u64, other !1102: u64) -> bool, !1103 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn decode_28(self !984: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !985 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !1105
        v1 = get_local ptr u64, variant, !1107
        v2 = get_local ptr u64, variant, !1109
        v3 = get_local ptr u64, __matched_value_1, !1111
        v4 = get_local ptr u64, __matched_value_1, !1112
        v5 = const u64 0, !1113
        v6 = cmp eq v0 v5, !1115
        cbr v6, abi_decode_29_block0(), abi_decode_29_block1(), !1116

        abi_decode_29_block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !1118
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !1119
        v10 = const u64 0, !1117
        store v10 to v9, !1120
        v11 = call abi_decode_5(self), !1122
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !1123
        store v11 to v14, !1124
        v15 = load v7, !86
        br abi_decode_29_block5(v15), !86

        abi_decode_29_block1():
        v16 = get_local ptr u64, __matched_value_1, !1125
        v17 = const u64 1, !1126
        v18 = cmp eq v0 v17, !1128
        cbr v18, abi_decode_29_block2(), abi_decode_29_block3(), !1129

        abi_decode_29_block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !1130
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !1131
        v22 = const u64 1, !1117
        store v22 to v21, !1132
        v23 = call abi_decode_32(self), !1134
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !1135
        store v23 to v26, !1136
        v27 = load v19, !86
        br abi_decode_29_block5(v27), !86

        abi_decode_29_block3():
        v28 = const u64 0, !1137
        revert v28, !1139

        abi_decode_29_block5(v29: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v29
    }

    pub fn abi_decode_29(buffer !1140: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !1141 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1142
        v1 = get_local ptr u64, variant, !1106
        v2 = get_local ptr u64, variant, !1108
        v3 = get_local ptr u64, __matched_value_1, !1110
        v4 = get_local ptr u64, __matched_value_1, !1108
        v5 = const u64 0, !1113
        v6 = cmp eq v0 v5, !1114
        cbr v6, block0(), block1(), !1114

        block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !1117
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !1117
        v10 = const u64 0, !1117
        store v10 to v9, !1117
        v11 = call abi_decode_5(buffer), !1143
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !1117
        store v11 to v14, !1117
        v15 = load v7
        br block5(v15)

        block1():
        v16 = get_local ptr u64, __matched_value_1, !1108
        v17 = const u64 1, !1126
        v18 = cmp eq v0 v17, !1127
        cbr v18, block2(), block3(), !1127

        block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !1117
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !1117
        v22 = const u64 1, !1117
        store v22 to v21, !1117
        v23 = call abi_decode_32(buffer), !1144
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !1117
        store v23 to v26, !1117
        v27 = load v19
        br block5(v27)

        block3():
        v28 = const u64 0, !1137
        revert v28, !1138

        block5(v29: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v29
    }

    pub fn decode_30(self !984: ptr { u64, u64 }) -> u64, !985 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !86
        ret u64 v0
    }

    pub fn decode_31(self !984: ptr { u64, u64 }) -> bool, !985 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_32(self), !86
        ret bool v0
    }

    pub fn abi_decode_32(buffer !1145: ptr { u64, u64 }) -> bool, !1146 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !1148
        v2 = load v1, !1147
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !1149
        v5 = load v4, !1147
        v6 = const u64 1
        v7 = mul v6, v5, !1150
        v8 = add v2, v7, !1151
        v9 = get_local ptr u64, ptr, !1152
        v10 = get_local ptr u64, size, !1153
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !1154
        v13 = load v12, !1147
        v14 = get_local ptr u64, size, !1155
        v15 = const u64 1
        v16 = add v13, v15, !1156
        v17 = get_local ptr u64, next_pos, !1157
        v18 = const bool false
        cbr v18, read_33_block0(), read_33_block1(), !1158

        read_33_block0():
        v19 = get_local ptr u64, ptr, !1159
        v20 = asm(ptr: v8) -> bool ptr, !1160 {
        }
        v21 = get_local ptr bool, v, !1161
        v22 = get_local ptr u64, next_pos, !1162
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !1163
        store v16 to v24, !1164
        v25 = get_local ptr bool, v, !1165
        br read_33_block5(v20), !1147

        read_33_block1():
        v26 = get_local ptr u64, size, !1166
        v27 = const u64 1, !642
        v28 = cmp eq v15 v27, !1167
        cbr v28, read_33_block2(), read_33_block3(), !1168

        read_33_block2():
        v29 = get_local ptr u64, ptr, !1169
        v30 = asm(ptr: v8, val) -> bool val, !1170 {
            lb     val ptr i0, !650
        }
        v31 = get_local ptr bool, v_, !1171
        v32 = get_local ptr u64, next_pos, !1172
        v33 = const u64 1
        v34 = get_elem_ptr buffer, ptr u64, v33, !1173
        store v16 to v34, !1174
        v35 = get_local ptr bool, v_, !1175
        br read_33_block4(v30), !1147

        read_33_block3():
        v36 = get_local ptr u64, ptr, !1176
        v37 = asm(ptr: v8, val) -> bool val, !1177 {
            lw     val ptr i0, !664
        }
        v38 = get_local ptr bool, v__, !1178
        v39 = get_local ptr u64, next_pos, !1179
        v40 = const u64 1
        v41 = get_elem_ptr buffer, ptr u64, v40, !1180
        store v16 to v41, !1181
        v42 = get_local ptr bool, v__, !1182
        br read_33_block4(v37), !1147

        read_33_block4(v43: bool):
        br read_33_block5(v43), !1147

        read_33_block5(v44: bool):
        ret bool v44
    }

    pub fn read_33(self !674: ptr { u64, u64 }) -> bool, !675 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !607
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !609
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !611
        v8 = add v2, v7, !611
        v9 = get_local ptr u64, ptr, !614
        v10 = get_local ptr u64, size, !616
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !609
        v13 = load v12
        v14 = get_local ptr u64, size, !619
        v15 = const u64 1
        v16 = add v13, v15, !621
        v17 = get_local ptr u64, next_pos, !623
        v18 = const bool false
        cbr v18, block0(), block1(), !625

        block0():
        v19 = get_local ptr u64, ptr, !627
        v20 = asm(ptr: v8) -> bool ptr, !629 {
        }
        v21 = get_local ptr bool, v, !631
        v22 = get_local ptr u64, next_pos, !633
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !635
        store v16 to v24, !635
        v25 = get_local ptr bool, v, !638
        br block5(v20)

        block1():
        v26 = get_local ptr u64, size, !640
        v27 = const u64 1, !642
        v28 = cmp eq v15 v27, !643
        cbr v28, block2(), block3(), !643

        block2():
        v29 = get_local ptr u64, ptr, !646
        v30 = asm(ptr: v8, val) -> bool val, !648 {
            lb     val ptr i0, !650
        }
        v31 = get_local ptr bool, v_, !651
        v32 = get_local ptr u64, next_pos, !653
        v33 = const u64 1
        v34 = get_elem_ptr self, ptr u64, v33, !655
        store v16 to v34, !655
        v35 = get_local ptr bool, v_, !658
        br block4(v30)

        block3():
        v36 = get_local ptr u64, ptr, !660
        v37 = asm(ptr: v8, val) -> bool val, !662 {
            lw     val ptr i0, !664
        }
        v38 = get_local ptr bool, v__, !665
        v39 = get_local ptr u64, next_pos, !667
        v40 = const u64 1
        v41 = get_elem_ptr self, ptr u64, v40, !669
        store v16 to v41, !669
        v42 = get_local ptr bool, v__, !672
        br block4(v37)

        block4(v43: bool):
        br block5(v43)

        block5(v44: bool):
        ret bool v44
    }

    pub fn abi_decode_34(buffer !1183: ptr { u64, u64 }) -> [{ u64, { u64, ( u64 | bool ) } }; 4], !1184 {
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_0
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array
        local { u64, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call decode_35(buffer), !149
        v1 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !151
        store v0 to v1, !151
        v2 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_0, !154
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !156
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !154
        v7 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !156
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !154
        v11 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !156
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !154
        v15 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first, !156
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u64, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !154
        v19 = load v2
        v20 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !174
        store v19 to v20, !174
        v21 = get_local ptr u64, i, !177
        v22 = const u64 1, !179
        br while(v22)

        while(v23: u64):
        v24 = get_local ptr u64, i, !181
        v25 = const u64 4, !183
        v26 = cmp lt v23 v25, !184
        cbr v26, while_body(), end_while()

        while_body():
        v27 = call decode_35(buffer), !187
        v28 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !189
        v29 = get_local ptr u64, i, !191
        v30 = get_elem_ptr v28, ptr { u64, { u64, ( u64 | bool ) } }, v23, !189
        store v27 to v30, !189
        v31 = get_local ptr u64, i, !195
        v32 = const u64 1, !197
        v33 = add v23, v32, !198
        v34 = get_local ptr u64, i, !198
        br while(v33)

        end_while():
        v35 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array, !202
        v36 = load v35
        ret [{ u64, { u64, ( u64 | bool ) } }; 4] v36
    }

    pub fn decode_35(self !984: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !985 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !1185
        v1 = call decode_28(self), !1186
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !1187
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !86
        store v0 to v4, !1188
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !86
        store v1 to v6, !1189
        v7 = load v2, !86
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_36(buffer !947: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !948 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1190
        v1 = call decode_28(buffer), !139
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !141
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v0 to v4, !141
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !141
        v7 = load v2
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_37(buffer !1191: ptr { u64, u64 }) -> { string<5>, bool }, !1192 {
        local { string<5>, bool } __anon_0
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !205
        v1 = call read_bytes_10(buffer, v0), !1193
        v2 = get_local ptr slice, data, !1194
        store v1 to v2, !1195
        v3 = get_local ptr slice, data, !1196
        v4 = load v3, !207
        v5 = call ptr_11(v4), !1197
        v6 = asm(s: v5) -> string<5> s, !1198 {
        }
        v7 = call abi_decode_32(buffer), !220
        v8 = get_local ptr { string<5>, bool }, __anon_0, !222
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr string<5>, v9, !222
        store v6 to v10, !222
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr bool, v11, !222
        store v7 to v12, !222
        v13 = load v8
        ret { string<5>, bool } v13
    }

    pub fn abi_decode_38(buffer !1199: ptr { u64, u64 }) -> string<5>, !1200 {
        local slice data

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 5, !205
        v1 = call read_bytes_10(buffer, v0), !208
        v2 = get_local ptr slice, data, !210
        store v1 to v2, !210
        v3 = get_local ptr slice, data, !213
        v4 = load v3
        v5 = call ptr_11(v4), !216
        v6 = asm(s: v5) -> string<5> s, !218 {
        }
        ret string<5> v6
    }

    pub fn abi_decode_39(buffer !1201: ptr { u64, u64 }) -> { u64 }, !1202 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1204
        v1 = get_local ptr { u64 }, __anon_0, !1205
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1205
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_40(item !1206: string<6>) -> slice, !1207 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3
        local { { u64, u64, u64 } } buffer

        entry(item: string<6>):
        v0 = call new_42(), !252
        v1 = ptr_to_int v0 to u64, !254
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }, !254
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !1208
        v5 = load v4, !254
        v6 = asm(buffer: v5) -> { u64, u64, u64 } buffer, !254 {
        }
        v7 = get_local ptr { u64, u64, u64 }, __anon_0, !254
        store v6 to v7, !254
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !254
        v10 = load v9, !254
        v11 = int_to_ptr v10 to ptr u8, !254
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr u64, v12, !254
        v14 = load v13, !254
        v15 = const u64 2
        v16 = get_elem_ptr v7, ptr u64, v15, !254
        v17 = load v16, !254
        v18 = get_local ptr string<6>, __anon_1, !254
        store item to v18, !254
        v19 = ptr_to_int v11 to u64, !254
        v20 = add v19, v17, !254
        v21 = int_to_ptr v20 to ptr u8, !254
        mem_copy_bytes v21, v18, 6, !254
        v22 = const u64 6
        v23 = add v17, v22, !254
        v24 = ptr_to_int v11 to u64, !254
        v25 = get_local ptr { u64, u64, u64 }, __anon_2, !254
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !254
        store v24 to v27, !254
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr u64, v28, !254
        store v14 to v29, !254
        v30 = const u64 2
        v31 = get_elem_ptr v25, ptr u64, v30, !254
        store v23 to v31, !254
        v32 = asm(buffer: v25) -> { u64, u64, u64 } buffer, !254 {
        }
        v33 = get_local ptr { { u64, u64, u64 } }, __anon_3, !1209
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { u64, u64, u64 }, v34, !254
        store v32 to v35, !1210
        v36 = load v33, !254
        v37 = get_local ptr { { u64, u64, u64 } }, buffer, !291
        store v36 to v37, !291
        v38 = get_local ptr { { u64, u64, u64 } }, buffer, !294
        v39 = load v38
        v40 = call as_raw_slice_43(v39), !296
        ret slice v40
    }

    pub fn abi_encode_41(self !1211: string<6>, buffer !1212: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1213 {
        local { u64, u64, u64 } __anon_0
        local string<6> __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: string<6>, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !257
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = get_local ptr string<6>, __anon_1
        store self to v17
        v18 = ptr_to_int v10 to u64
        v19 = add v18, v16
        v20 = int_to_ptr v19 to ptr u8
        mem_copy_bytes v20, v17, 6
        v21 = const u64 6
        v22 = add v16, v21
        v23 = ptr_to_int v10 to u64
        v24 = get_local ptr { u64, u64, u64 }, __anon_2
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25
        store v23 to v26
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27
        store v13 to v28
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29
        store v22 to v30
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_3, !286
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33
        store v31 to v34, !286
        v35 = load v32
        ret { { u64, u64, u64 } } v35
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !1214 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !1215
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !1215
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !1216: { { u64, u64, u64 } }) -> slice, !1217 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !257
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn complex_function_44(_arg1 !1218: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !1219: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !1220: { string<5>, bool }, _arg4 !1221: { u64 }) -> string<6>, !1222 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn len_45(self !1223: slice) -> u64, !1224 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1226 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1227
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn decode_second_param_46() -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !745 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_00
        local [u8; 3] __anon_000
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_01
        local mut [u8; 3] array
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array0
        local mut { u64, u64 } buffer
        local u8 first
        local { u8, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry():
        v0 = call from_second_parameter_19(), !76
        v1 = get_local ptr { u64, u64 }, buffer, !78
        store v0 to v1, !78
        v2 = get_local ptr { u64, u64 }, buffer, !81
        v3 = call read_53(v2), !1228
        v4 = get_local ptr u8, first, !1229
        v5 = get_local ptr [u8; 3], __anon_000, !1230
        v6 = get_local ptr u8, first, !1231
        v7 = const u64 0
        v8 = get_elem_ptr v5, ptr u8, v7, !1232
        store v3 to v8, !1233
        v9 = get_local ptr u8, first, !1234
        v10 = const u64 1
        v11 = get_elem_ptr v5, ptr u8, v10, !1235
        store v3 to v11, !1236
        v12 = get_local ptr u8, first, !1237
        v13 = const u64 2
        v14 = get_elem_ptr v5, ptr u8, v13, !1238
        store v3 to v14, !1239
        v15 = load v5, !1240
        v16 = get_local ptr [u8; 3], array, !1241
        store v15 to v16, !1242
        v17 = get_local ptr u64, i, !1243
        v18 = const u64 1, !113
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v18), !1244

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v19: u64):
        v20 = get_local ptr u64, i, !1245
        v21 = const u64 3, !117
        v22 = cmp lt v19 v21, !1246
        cbr v22, abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !1247

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v23 = call read_53(v2), !1248
        v24 = get_local ptr [u8; 3], array, !1249
        v25 = get_local ptr u64, i, !1250
        v26 = get_elem_ptr v24, ptr u8, v19, !1251
        store v23 to v26, !1252
        v27 = get_local ptr u64, i, !1253
        v28 = const u64 1, !131
        v29 = add v19, v28, !1254
        v30 = get_local ptr u64, i, !1255
        br abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v29), !1256

        abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v31 = get_local ptr [u8; 3], array, !1257
        v32 = load v31, !1258
        v33 = call abi_decode_59(v2), !1259
        v34 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1260
        store v33 to v34, !1261
        v35 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_01, !1262
        v36 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1263
        v37 = load v36, !1264
        v38 = const u64 0
        v39 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v38, !1265
        store v37 to v39, !1266
        v40 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1267
        v41 = load v40, !1268
        v42 = const u64 1
        v43 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v42, !1269
        store v41 to v43, !1270
        v44 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1271
        v45 = load v44, !1272
        v46 = const u64 2
        v47 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v46, !1273
        store v45 to v47, !1274
        v48 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1275
        v49 = load v48, !1276
        v50 = const u64 3
        v51 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v50, !1277
        store v49 to v51, !1278
        v52 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1279
        v53 = load v52, !1280
        v54 = const u64 4
        v55 = get_elem_ptr v35, ptr { u8, { u64, ( u64 | bool ) } }, v54, !1281
        store v53 to v55, !1282
        v56 = load v35, !1283
        v57 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1284
        store v56 to v57, !1285
        v58 = get_local ptr u64, i0, !1286
        v59 = const u64 1, !381
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v59), !1287

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v60: u64):
        v61 = get_local ptr u64, i0, !1288
        v62 = const u64 5, !385
        v63 = cmp lt v60 v62, !1289
        cbr v63, abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !1290

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v64 = call abi_decode_59(v2), !1291
        v65 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1292
        v66 = get_local ptr u64, i0, !1293
        v67 = get_elem_ptr v65, ptr { u8, { u64, ( u64 | bool ) } }, v60, !1294
        store v64 to v67, !1295
        v68 = get_local ptr u64, i0, !1296
        v69 = const u64 1, !399
        v70 = add v60, v69, !1297
        v71 = get_local ptr u64, i0, !1298
        br abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v70), !1299

        abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v72 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1300
        v73 = load v72, !1301
        v74 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_00, !1302
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr [u8; 3], v75, !1303
        store v32 to v76, !1304
        v77 = const u64 1
        v78 = get_elem_ptr v74, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v77, !1305
        store v73 to v78, !1306
        v79 = load v74, !1307
        v80 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !1308
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v81, !1309
        store v79 to v82, !1310
        v83 = load v80, !83
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v83
    }

    pub fn abi_decode_47(buffer !1311: ptr { u64, u64 }) -> { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, !1312 {
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_0
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_00
        local [u8; 3] __anon_000
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_01
        local mut [u8; 3] array
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array0
        local u8 first
        local { u8, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1313
        v1 = get_local ptr u8, first, !1314
        v2 = get_local ptr [u8; 3], __anon_000, !1315
        v3 = get_local ptr u8, first, !1316
        v4 = const u64 0
        v5 = get_elem_ptr v2, ptr u8, v4, !1317
        store v0 to v5, !1318
        v6 = get_local ptr u8, first, !1319
        v7 = const u64 1
        v8 = get_elem_ptr v2, ptr u8, v7, !1320
        store v0 to v8, !1321
        v9 = get_local ptr u8, first, !1322
        v10 = const u64 2
        v11 = get_elem_ptr v2, ptr u8, v10, !1323
        store v0 to v11, !1324
        v12 = load v2, !1325
        v13 = get_local ptr [u8; 3], array, !1326
        store v12 to v13, !1327
        v14 = get_local ptr u64, i, !1328
        v15 = const u64 1, !113
        br abi_decode_48_decode_49_abi_decode_50_while(v15), !1329

        abi_decode_48_decode_49_abi_decode_50_while(v16: u64):
        v17 = get_local ptr u64, i, !1330
        v18 = const u64 3, !117
        v19 = cmp lt v16 v18, !1331
        cbr v19, abi_decode_48_decode_49_abi_decode_50_while_body(), abi_decode_48_decode_49_abi_decode_50_end_while(), !1332

        abi_decode_48_decode_49_abi_decode_50_while_body():
        v20 = call read_53(buffer), !1333
        v21 = get_local ptr [u8; 3], array, !1334
        v22 = get_local ptr u64, i, !1335
        v23 = get_elem_ptr v21, ptr u8, v16, !1336
        store v20 to v23, !1337
        v24 = get_local ptr u64, i, !1338
        v25 = const u64 1, !131
        v26 = add v16, v25, !1339
        v27 = get_local ptr u64, i, !1340
        br abi_decode_48_decode_49_abi_decode_50_while(v26), !1341

        abi_decode_48_decode_49_abi_decode_50_end_while():
        v28 = get_local ptr [u8; 3], array, !1342
        v29 = load v28, !1343
        v30 = call abi_decode_59(buffer), !1344
        v31 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1345
        store v30 to v31, !1346
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_01, !1347
        v33 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1348
        v34 = load v33, !1349
        v35 = const u64 0
        v36 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v35, !1350
        store v34 to v36, !1351
        v37 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1352
        v38 = load v37, !1353
        v39 = const u64 1
        v40 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v39, !1354
        store v38 to v40, !1355
        v41 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1356
        v42 = load v41, !1357
        v43 = const u64 2
        v44 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v43, !1358
        store v42 to v44, !1359
        v45 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1360
        v46 = load v45, !1361
        v47 = const u64 3
        v48 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v47, !1362
        store v46 to v48, !1363
        v49 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1364
        v50 = load v49, !1365
        v51 = const u64 4
        v52 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v51, !1366
        store v50 to v52, !1367
        v53 = load v32, !1368
        v54 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1369
        store v53 to v54, !1370
        v55 = get_local ptr u64, i0, !1371
        v56 = const u64 1, !381
        br abi_decode_48_decode_54_abi_decode_55_while(v56), !1372

        abi_decode_48_decode_54_abi_decode_55_while(v57: u64):
        v58 = get_local ptr u64, i0, !1373
        v59 = const u64 5, !385
        v60 = cmp lt v57 v59, !1374
        cbr v60, abi_decode_48_decode_54_abi_decode_55_while_body(), abi_decode_48_decode_54_abi_decode_55_end_while(), !1375

        abi_decode_48_decode_54_abi_decode_55_while_body():
        v61 = call abi_decode_59(buffer), !1376
        v62 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1377
        v63 = get_local ptr u64, i0, !1378
        v64 = get_elem_ptr v62, ptr { u8, { u64, ( u64 | bool ) } }, v57, !1379
        store v61 to v64, !1380
        v65 = get_local ptr u64, i0, !1381
        v66 = const u64 1, !399
        v67 = add v57, v66, !1382
        v68 = get_local ptr u64, i0, !1383
        br abi_decode_48_decode_54_abi_decode_55_while(v67), !1384

        abi_decode_48_decode_54_abi_decode_55_end_while():
        v69 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1385
        v70 = load v69, !1386
        v71 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_00, !1387
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr [u8; 3], v72, !312
        store v29 to v73, !1388
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v74, !312
        store v70 to v75, !1389
        v76 = load v71, !312
        v77 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_0, !414
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v78, !414
        store v76 to v79, !414
        v80 = load v77
        ret { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } v80
    }

    pub fn abi_decode_48(buffer !1390: ptr { u64, u64 }) -> { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, !1391 {
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_0
        local [u8; 3] __anon_00
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_01
        local mut [u8; 3] array
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array0
        local u8 first
        local { u8, { u64, ( u64 | bool ) } } first0
        local mut u64 i
        local mut u64 i0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1392
        v1 = get_local ptr u8, first, !1393
        v2 = get_local ptr [u8; 3], __anon_00, !1394
        v3 = get_local ptr u8, first, !1395
        v4 = const u64 0
        v5 = get_elem_ptr v2, ptr u8, v4, !1396
        store v0 to v5, !1397
        v6 = get_local ptr u8, first, !1398
        v7 = const u64 1
        v8 = get_elem_ptr v2, ptr u8, v7, !1399
        store v0 to v8, !1400
        v9 = get_local ptr u8, first, !1401
        v10 = const u64 2
        v11 = get_elem_ptr v2, ptr u8, v10, !1402
        store v0 to v11, !1403
        v12 = load v2, !1404
        v13 = get_local ptr [u8; 3], array, !1405
        store v12 to v13, !1406
        v14 = get_local ptr u64, i, !1407
        v15 = const u64 1, !113
        br decode_49_abi_decode_50_while(v15), !1408

        decode_49_abi_decode_50_while(v16: u64):
        v17 = get_local ptr u64, i, !1409
        v18 = const u64 3, !117
        v19 = cmp lt v16 v18, !1410
        cbr v19, decode_49_abi_decode_50_while_body(), decode_49_abi_decode_50_end_while(), !1411

        decode_49_abi_decode_50_while_body():
        v20 = call read_53(buffer), !1412
        v21 = get_local ptr [u8; 3], array, !1413
        v22 = get_local ptr u64, i, !1414
        v23 = get_elem_ptr v21, ptr u8, v16, !1415
        store v20 to v23, !1416
        v24 = get_local ptr u64, i, !1417
        v25 = const u64 1, !131
        v26 = add v16, v25, !1418
        v27 = get_local ptr u64, i, !1419
        br decode_49_abi_decode_50_while(v26), !1420

        decode_49_abi_decode_50_end_while():
        v28 = get_local ptr [u8; 3], array, !1421
        v29 = load v28, !1422
        v30 = call abi_decode_59(buffer), !1423
        v31 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1424
        store v30 to v31, !1425
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_01, !1426
        v33 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1427
        v34 = load v33, !1428
        v35 = const u64 0
        v36 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v35, !1429
        store v34 to v36, !1430
        v37 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1431
        v38 = load v37, !1432
        v39 = const u64 1
        v40 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v39, !1433
        store v38 to v40, !1434
        v41 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1435
        v42 = load v41, !1436
        v43 = const u64 2
        v44 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v43, !1437
        store v42 to v44, !1438
        v45 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1439
        v46 = load v45, !1440
        v47 = const u64 3
        v48 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v47, !1441
        store v46 to v48, !1442
        v49 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first0, !1443
        v50 = load v49, !1444
        v51 = const u64 4
        v52 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v51, !1445
        store v50 to v52, !1446
        v53 = load v32, !1447
        v54 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1448
        store v53 to v54, !1449
        v55 = get_local ptr u64, i0, !1450
        v56 = const u64 1, !381
        br decode_54_abi_decode_55_while(v56), !1451

        decode_54_abi_decode_55_while(v57: u64):
        v58 = get_local ptr u64, i0, !1452
        v59 = const u64 5, !385
        v60 = cmp lt v57 v59, !1453
        cbr v60, decode_54_abi_decode_55_while_body(), decode_54_abi_decode_55_end_while(), !1454

        decode_54_abi_decode_55_while_body():
        v61 = call abi_decode_59(buffer), !1455
        v62 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1456
        v63 = get_local ptr u64, i0, !1457
        v64 = get_elem_ptr v62, ptr { u8, { u64, ( u64 | bool ) } }, v57, !1458
        store v61 to v64, !1459
        v65 = get_local ptr u64, i0, !1460
        v66 = const u64 1, !399
        v67 = add v57, v66, !1461
        v68 = get_local ptr u64, i0, !1462
        br decode_54_abi_decode_55_while(v67), !1463

        decode_54_abi_decode_55_end_while():
        v69 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array0, !1464
        v70 = load v69, !1465
        v71 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_0, !407
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr [u8; 3], v72
        store v29 to v73, !407
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v74
        store v70 to v75, !407
        v76 = load v71
        ret { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } v76
    }

    pub fn decode_49(self !984: ptr { u64, u64 }) -> [u8; 3], !985 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(self: ptr { u64, u64 }):
        v0 = call read_53(self), !1466
        v1 = get_local ptr u8, first, !1467
        v2 = get_local ptr [u8; 3], __anon_0, !1468
        v3 = get_local ptr u8, first, !1469
        v4 = const u64 0
        v5 = get_elem_ptr v2, ptr u8, v4, !86
        store v0 to v5, !1470
        v6 = get_local ptr u8, first, !1471
        v7 = const u64 1
        v8 = get_elem_ptr v2, ptr u8, v7, !86
        store v0 to v8, !1472
        v9 = get_local ptr u8, first, !1473
        v10 = const u64 2
        v11 = get_elem_ptr v2, ptr u8, v10, !86
        store v0 to v11, !1474
        v12 = load v2, !86
        v13 = get_local ptr [u8; 3], array, !1475
        store v12 to v13, !1476
        v14 = get_local ptr u64, i, !1477
        v15 = const u64 1, !113
        br abi_decode_50_while(v15), !86

        abi_decode_50_while(v16: u64):
        v17 = get_local ptr u64, i, !1478
        v18 = const u64 3, !117
        v19 = cmp lt v16 v18, !1479
        cbr v19, abi_decode_50_while_body(), abi_decode_50_end_while(), !86

        abi_decode_50_while_body():
        v20 = call read_53(self), !1480
        v21 = get_local ptr [u8; 3], array, !1481
        v22 = get_local ptr u64, i, !1482
        v23 = get_elem_ptr v21, ptr u8, v16, !1483
        store v20 to v23, !1484
        v24 = get_local ptr u64, i, !1485
        v25 = const u64 1, !131
        v26 = add v16, v25, !1486
        v27 = get_local ptr u64, i, !1487
        br abi_decode_50_while(v26), !86

        abi_decode_50_end_while():
        v28 = get_local ptr [u8; 3], array, !1488
        v29 = load v28, !86
        ret [u8; 3] v29
    }

    pub fn abi_decode_50(buffer !1010: ptr { u64, u64 }) -> [u8; 3], !1011 {
        local [u8; 3] __anon_0
        local mut [u8; 3] array
        local u8 first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1489
        v1 = get_local ptr u8, first, !89
        v2 = get_local ptr [u8; 3], __anon_0, !92
        v3 = get_local ptr u8, first, !94
        v4 = const u64 0
        v5 = get_elem_ptr v2, ptr u8, v4
        store v0 to v5, !92
        v6 = get_local ptr u8, first, !94
        v7 = const u64 1
        v8 = get_elem_ptr v2, ptr u8, v7
        store v0 to v8, !92
        v9 = get_local ptr u8, first, !94
        v10 = const u64 2
        v11 = get_elem_ptr v2, ptr u8, v10
        store v0 to v11, !92
        v12 = load v2
        v13 = get_local ptr [u8; 3], array, !108
        store v12 to v13, !108
        v14 = get_local ptr u64, i, !111
        v15 = const u64 1, !113
        br while(v15)

        while(v16: u64):
        v17 = get_local ptr u64, i, !115
        v18 = const u64 3, !117
        v19 = cmp lt v16 v18, !118
        cbr v19, while_body(), end_while()

        while_body():
        v20 = call read_53(buffer), !1490
        v21 = get_local ptr [u8; 3], array, !123
        v22 = get_local ptr u64, i, !125
        v23 = get_elem_ptr v21, ptr u8, v16, !123
        store v20 to v23, !123
        v24 = get_local ptr u64, i, !129
        v25 = const u64 1, !131
        v26 = add v16, v25, !132
        v27 = get_local ptr u64, i, !132
        br while(v26)

        end_while():
        v28 = get_local ptr [u8; 3], array, !136
        v29 = load v28
        ret [u8; 3] v29
    }

    pub fn decode_51(self !984: ptr { u64, u64 }) -> u8, !985 {
        entry(self: ptr { u64, u64 }):
        v0 = call read_53(self), !1491
        ret u8 v0
    }

    pub fn abi_decode_52(buffer !1492: ptr { u64, u64 }) -> u8, !1493 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !314
        ret u8 v0
    }

    pub fn read_53(self !674: ptr { u64, u64 }) -> u8, !675 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !607
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !609
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !611
        v8 = add v2, v7, !611
        v9 = get_local ptr u64, ptr, !614
        v10 = get_local ptr u64, size, !616
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !609
        v13 = load v12
        v14 = get_local ptr u64, size, !619
        v15 = const u64 1
        v16 = add v13, v15, !621
        v17 = get_local ptr u64, next_pos, !623
        v18 = const bool false
        cbr v18, block0(), block1(), !625

        block0():
        v19 = get_local ptr u64, ptr, !627
        v20 = asm(ptr: v8) -> u8 ptr, !629 {
        }
        v21 = get_local ptr u8, v, !631
        v22 = get_local ptr u64, next_pos, !633
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !635
        store v16 to v24, !635
        v25 = get_local ptr u8, v, !638
        br block5(v20)

        block1():
        v26 = get_local ptr u64, size, !640
        v27 = const u64 1, !642
        v28 = cmp eq v15 v27, !643
        cbr v28, block2(), block3(), !643

        block2():
        v29 = get_local ptr u64, ptr, !646
        v30 = asm(ptr: v8, val) -> u8 val, !648 {
            lb     val ptr i0, !650
        }
        v31 = get_local ptr u8, v_, !651
        v32 = get_local ptr u64, next_pos, !653
        v33 = const u64 1
        v34 = get_elem_ptr self, ptr u64, v33, !655
        store v16 to v34, !655
        v35 = get_local ptr u8, v_, !658
        br block4(v30)

        block3():
        v36 = get_local ptr u64, ptr, !660
        v37 = asm(ptr: v8, val) -> u8 val, !662 {
            lw     val ptr i0, !664
        }
        v38 = get_local ptr u8, v__, !665
        v39 = get_local ptr u64, next_pos, !667
        v40 = const u64 1
        v41 = get_elem_ptr self, ptr u64, v40, !669
        store v16 to v41, !669
        v42 = get_local ptr u8, v__, !672
        br block4(v37)

        block4(v43: u8):
        br block5(v43)

        block5(v44: u8):
        ret u8 v44
    }

    pub fn decode_54(self !984: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !985 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !1494
        v1 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1495
        store v0 to v1, !1496
        v2 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !1497
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1498
        v4 = load v3, !86
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v5, !86
        store v4 to v6, !1499
        v7 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1500
        v8 = load v7, !86
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v9, !86
        store v8 to v10, !1501
        v11 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1502
        v12 = load v11, !86
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v13, !86
        store v12 to v14, !1503
        v15 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1504
        v16 = load v15, !86
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v17, !86
        store v16 to v18, !1505
        v19 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !1506
        v20 = load v19, !86
        v21 = const u64 4
        v22 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v21, !86
        store v20 to v22, !1507
        v23 = load v2, !86
        v24 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !1508
        store v23 to v24, !1509
        v25 = get_local ptr u64, i, !1510
        v26 = const u64 1, !381
        br abi_decode_55_while(v26), !86

        abi_decode_55_while(v27: u64):
        v28 = get_local ptr u64, i, !1511
        v29 = const u64 5, !385
        v30 = cmp lt v27 v29, !1512
        cbr v30, abi_decode_55_while_body(), abi_decode_55_end_while(), !86

        abi_decode_55_while_body():
        v31 = call abi_decode_59(self), !1513
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !1514
        v33 = get_local ptr u64, i, !1515
        v34 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v27, !1516
        store v31 to v34, !1517
        v35 = get_local ptr u64, i, !1518
        v36 = const u64 1, !399
        v37 = add v27, v36, !1519
        v38 = get_local ptr u64, i, !1520
        br abi_decode_55_while(v37), !86

        abi_decode_55_end_while():
        v39 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !1521
        v40 = load v39, !86
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v40
    }

    pub fn abi_decode_55(buffer !1522: ptr { u64, u64 }) -> [{ u8, { u64, ( u64 | bool ) } }; 5], !1523 {
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array
        local { u8, { u64, ( u64 | bool ) } } first
        local mut u64 i

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_59(buffer), !1524
        v1 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !349
        store v0 to v1, !349
        v2 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_0, !352
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !354
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v5
        store v4 to v6, !352
        v7 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !354
        v8 = load v7
        v9 = const u64 1
        v10 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v9
        store v8 to v10, !352
        v11 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !354
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v13
        store v12 to v14, !352
        v15 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !354
        v16 = load v15
        v17 = const u64 3
        v18 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v17
        store v16 to v18, !352
        v19 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first, !354
        v20 = load v19
        v21 = const u64 4
        v22 = get_elem_ptr v2, ptr { u8, { u64, ( u64 | bool ) } }, v21
        store v20 to v22, !352
        v23 = load v2
        v24 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !376
        store v23 to v24, !376
        v25 = get_local ptr u64, i, !379
        v26 = const u64 1, !381
        br while(v26)

        while(v27: u64):
        v28 = get_local ptr u64, i, !383
        v29 = const u64 5, !385
        v30 = cmp lt v27 v29, !386
        cbr v30, while_body(), end_while()

        while_body():
        v31 = call abi_decode_59(buffer), !1525
        v32 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !391
        v33 = get_local ptr u64, i, !393
        v34 = get_elem_ptr v32, ptr { u8, { u64, ( u64 | bool ) } }, v27, !391
        store v31 to v34, !391
        v35 = get_local ptr u64, i, !397
        v36 = const u64 1, !399
        v37 = add v27, v36, !400
        v38 = get_local ptr u64, i, !400
        br while(v37)

        end_while():
        v39 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array, !404
        v40 = load v39
        ret [{ u8, { u64, ( u64 | bool ) } }; 5] v40
    }

    pub fn decode_56(self !984: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !985 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !86
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_57(buffer !947: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !948 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1526
        v1 = call decode_28(buffer), !139
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !141
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !141
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !141
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn decode_58(self !984: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !985 {
        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_59(self), !86
        ret { u8, { u64, ( u64 | bool ) } } v0
    }

    pub fn abi_decode_59(buffer !947: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !948 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1527
        v1 = call decode_28(buffer), !139
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !141
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !141
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !141
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn encode_60(item !1206: u64) -> slice, !1207 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_42(), !252
        v1 = ptr_to_int v0 to u64, !254
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }, !254
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !1528
        v5 = load v4, !254
        v6 = asm(buffer: v5) -> { u64, u64, u64 } buffer, !254 {
        }
        v7 = get_local ptr { u64, u64, u64 }, __anon_0, !254
        store v6 to v7, !254
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !254
        v10 = load v9, !254
        v11 = int_to_ptr v10 to ptr u8, !254
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr u64, v12, !254
        v14 = load v13, !254
        v15 = const u64 2
        v16 = get_elem_ptr v7, ptr u64, v15, !254
        v17 = load v16, !254
        v18 = ptr_to_int v11 to u64, !254
        v19 = add v18, v17, !254
        v20 = int_to_ptr v19 to ptr u64, !254
        store item to v20, !254
        v21 = const u64 8
        v22 = add v17, v21, !254
        v23 = ptr_to_int v11 to u64, !254
        v24 = get_local ptr { u64, u64, u64 }, __anon_1, !254
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !254
        store v23 to v26, !254
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27, !254
        store v14 to v28, !254
        v29 = const u64 2
        v30 = get_elem_ptr v24, ptr u64, v29, !254
        store v22 to v30, !254
        v31 = asm(buffer: v24) -> { u64, u64, u64 } buffer, !254 {
        }
        v32 = get_local ptr { { u64, u64, u64 } }, __anon_2, !1529
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr { u64, u64, u64 }, v33, !254
        store v31 to v34, !1530
        v35 = load v32, !254
        v36 = get_local ptr { { u64, u64, u64 } }, buffer, !291
        store v35 to v36, !291
        v37 = get_local ptr { { u64, u64, u64 } }, buffer, !294
        v38 = load v37
        v39 = call as_raw_slice_43(v38), !296
        ret slice v39
    }

    pub fn abi_encode_61(self !1531: u64, buffer !1532: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1533 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !257
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr u64
        store self to v19
        v20 = const u64 8
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !454
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !454
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn take_generic_array_62(_arg !1534: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !1535 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !442
        ret u64 v0
    }

    pub fn decode_second_param_63() -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !745 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_00
        local { { u64 }, u64, u64 } __anon_000
        local { u64, { u64 } } __anon_01
        local u64 a
        local u64 b
        local mut { u64, u64 } buffer

        entry():
        v0 = call from_second_parameter_19(), !76
        v1 = get_local ptr { u64, u64 }, buffer, !78
        store v0 to v1, !78
        v2 = get_local ptr { u64, u64 }, buffer, !81
        v3 = call abi_decode_39(v2), !1536
        v4 = call read_53(v2), !1537
        v5 = asm(input: v4) -> u64 input, !1538 {
        }
        v6 = get_local ptr u64, a, !1539
        v7 = call read_53(v2), !1540
        v8 = asm(input: v7) -> u64 input, !1541 {
        }
        v9 = get_local ptr u64, b, !1542
        v10 = get_local ptr u64, a, !1543
        v11 = const u64 8, !497
        v12 = lsh v5, v11, !1544
        v13 = const u64 65535, !501
        v14 = and v12, v13, !1545
        v15 = get_local ptr u64, b, !1546
        v16 = or v14, v8, !1547
        v17 = call abi_decode_74(v2), !1548
        v18 = get_local ptr { { u64 }, u64, u64 }, __anon_000, !1549
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { u64 }, v19, !1550
        store v3 to v20, !1551
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21, !1552
        store v16 to v22, !1553
        v23 = const u64 2
        v24 = get_elem_ptr v18, ptr u64, v23, !1554
        store v17 to v24, !1555
        v25 = load v18, !1556
        v26 = call abi_decode_74(v2), !1557
        v27 = call abi_decode_39(v2), !1558
        v28 = get_local ptr { u64, { u64 } }, __anon_01, !1559
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !1560
        store v26 to v30, !1561
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr { u64 }, v31, !1562
        store v27 to v32, !1563
        v33 = load v28, !1564
        v34 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_00, !1565
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr { { u64 }, u64, u64 }, v35, !1566
        store v25 to v36, !1567
        v37 = const u64 1
        v38 = get_elem_ptr v34, ptr { u64, { u64 } }, v37, !1568
        store v33 to v38, !1569
        v39 = load v34, !1570
        v40 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !1571
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v41, !1572
        store v39 to v42, !1573
        v43 = load v40, !83
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v43
    }

    pub fn abi_decode_64(buffer !1311: ptr { u64, u64 }) -> { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, !1312 {
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_0
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_00
        local { { u64 }, u64, u64 } __anon_000
        local { u64, { u64 } } __anon_01
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !1574
        v1 = call read_53(buffer), !1575
        v2 = asm(input: v1) -> u64 input, !1576 {
        }
        v3 = get_local ptr u64, a, !1577
        v4 = call read_53(buffer), !1578
        v5 = asm(input: v4) -> u64 input, !1579 {
        }
        v6 = get_local ptr u64, b, !1580
        v7 = get_local ptr u64, a, !1581
        v8 = const u64 8, !497
        v9 = lsh v2, v8, !1582
        v10 = const u64 65535, !501
        v11 = and v9, v10, !1583
        v12 = get_local ptr u64, b, !1584
        v13 = or v11, v5, !1585
        v14 = call abi_decode_74(buffer), !1586
        v15 = get_local ptr { { u64 }, u64, u64 }, __anon_000, !1587
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !1588
        store v0 to v17, !1589
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !1590
        store v13 to v19, !1591
        v20 = const u64 2
        v21 = get_elem_ptr v15, ptr u64, v20, !1592
        store v14 to v21, !1593
        v22 = load v15, !1594
        v23 = call abi_decode_74(buffer), !1595
        v24 = call abi_decode_39(buffer), !1596
        v25 = get_local ptr { u64, { u64 } }, __anon_01, !1597
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !1598
        store v23 to v27, !1599
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr { u64 }, v28, !1600
        store v24 to v29, !1601
        v30 = load v25, !1602
        v31 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_00, !1603
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { { u64 }, u64, u64 }, v32, !312
        store v22 to v33, !1604
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr { u64, { u64 } }, v34, !312
        store v30 to v35, !1605
        v36 = load v31, !312
        v37 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_0, !414
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v38, !414
        store v36 to v39, !414
        v40 = load v37
        ret { { { { u64 }, u64, u64 }, { u64, { u64 } } } } v40
    }

    pub fn abi_decode_65(buffer !1606: ptr { u64, u64 }) -> { { { u64 }, u64, u64 }, { u64, { u64 } } }, !1607 {
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_0
        local { { u64 }, u64, u64 } __anon_00
        local { u64, { u64 } } __anon_01
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !1608
        v1 = call read_53(buffer), !1609
        v2 = asm(input: v1) -> u64 input, !1610 {
        }
        v3 = get_local ptr u64, a, !1611
        v4 = call read_53(buffer), !1612
        v5 = asm(input: v4) -> u64 input, !1613 {
        }
        v6 = get_local ptr u64, b, !1614
        v7 = get_local ptr u64, a, !1615
        v8 = const u64 8, !497
        v9 = lsh v2, v8, !1616
        v10 = const u64 65535, !501
        v11 = and v9, v10, !1617
        v12 = get_local ptr u64, b, !1618
        v13 = or v11, v5, !1619
        v14 = call abi_decode_74(buffer), !1620
        v15 = get_local ptr { { u64 }, u64, u64 }, __anon_00, !1621
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !1622
        store v0 to v17, !1623
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !1624
        store v13 to v19, !1625
        v20 = const u64 2
        v21 = get_elem_ptr v15, ptr u64, v20, !1626
        store v14 to v21, !1627
        v22 = load v15, !1628
        v23 = call abi_decode_74(buffer), !1629
        v24 = call abi_decode_39(buffer), !1630
        v25 = get_local ptr { u64, { u64 } }, __anon_01, !1631
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !1632
        store v23 to v27, !1633
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr { u64 }, v28, !1634
        store v24 to v29, !1635
        v30 = load v25, !1636
        v31 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_0, !527
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { { u64 }, u64, u64 }, v32
        store v22 to v33, !527
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr { u64, { u64 } }, v34
        store v30 to v35, !527
        v36 = load v31
        ret { { { u64 }, u64, u64 }, { u64, { u64 } } } v36
    }

    pub fn decode_66(self !984: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !985 {
        local { { u64 }, u64, u64 } __anon_0
        local u64 a
        local u64 b

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_39(self), !1637
        v1 = call read_53(self), !1638
        v2 = asm(input: v1) -> u64 input, !1639 {
        }
        v3 = get_local ptr u64, a, !1640
        v4 = call read_53(self), !1641
        v5 = asm(input: v4) -> u64 input, !1642 {
        }
        v6 = get_local ptr u64, b, !1643
        v7 = get_local ptr u64, a, !1644
        v8 = const u64 8, !497
        v9 = lsh v2, v8, !1645
        v10 = const u64 65535, !501
        v11 = and v9, v10, !1646
        v12 = get_local ptr u64, b, !1647
        v13 = or v11, v5, !1648
        v14 = call abi_decode_74(self), !1649
        v15 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !1650
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !1651
        store v0 to v17, !1652
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !1653
        store v13 to v19, !1654
        v20 = const u64 2
        v21 = get_elem_ptr v15, ptr u64, v20, !1655
        store v14 to v21, !1656
        v22 = load v15, !86
        ret { { u64 }, u64, u64 } v22
    }

    pub fn abi_decode_67(buffer !1657: ptr { u64, u64 }) -> { { u64 }, u64, u64 }, !1658 {
        local { { u64 }, u64, u64 } __anon_0
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_39(buffer), !478
        v1 = call read_53(buffer), !1659
        v2 = asm(input: v1) -> u64 input, !1660 {
        }
        v3 = get_local ptr u64, a, !1661
        v4 = call read_53(buffer), !1662
        v5 = asm(input: v4) -> u64 input, !1663 {
        }
        v6 = get_local ptr u64, b, !1664
        v7 = get_local ptr u64, a, !1665
        v8 = const u64 8, !497
        v9 = lsh v2, v8, !1666
        v10 = const u64 65535, !501
        v11 = and v9, v10, !1667
        v12 = get_local ptr u64, b, !1668
        v13 = or v11, v5, !1669
        v14 = call abi_decode_74(buffer), !507
        v15 = get_local ptr { { u64 }, u64, u64 }, __anon_0, !509
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !509
        store v0 to v17, !509
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !509
        store v13 to v19, !509
        v20 = const u64 2
        v21 = get_elem_ptr v15, ptr u64, v20, !509
        store v14 to v21, !509
        v22 = load v15
        ret { { u64 }, u64, u64 } v22
    }

    pub fn abi_decode_68(buffer !1670: ptr { u64, u64 }) -> { u64 }, !1671 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1673
        v1 = get_local ptr { u64 }, __anon_0, !1674
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1674
        v4 = load v1
        ret { u64 } v4
    }

    pub fn abi_decode_69(buffer !1675: ptr { u64, u64 }) -> u64, !1676 {
        local u64 a
        local u64 b

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !481
        v1 = asm(input: v0) -> u64 input, !1677 {
        }
        v2 = get_local ptr u64, a, !487
        v3 = call read_53(buffer), !489
        v4 = asm(input: v3) -> u64 input, !1678 {
        }
        v5 = get_local ptr u64, b, !493
        v6 = get_local ptr u64, a, !495
        v7 = const u64 8, !497
        v8 = lsh v1, v7, !498
        v9 = const u64 65535, !501
        v10 = and v8, v9, !498
        v11 = get_local ptr u64, b, !503
        v12 = or v10, v4, !505
        ret u64 v12
    }

    pub fn as_u16_70(self !1679: u8) -> u64, !1680 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !485 {
        }
        ret u64 v0
    }

    pub fn binary_or_71(self !1681: u64, other !1682: u64) -> u64, !1683 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_72(self !1684: u64, other !1685: u64) -> u64, !1686 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = const u64 65535, !501
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_73() -> u64, !1687 {
        entry():
        v0 = const u64 65535, !501
        ret u64 v0
    }

    pub fn abi_decode_74(buffer !1688: ptr { u64, u64 }) -> u64, !1689 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !1690
        v1 = asm(input: v0) -> u64 input, !1692 {
        }
        v2 = get_local ptr u64, a, !1693
        v3 = call read_53(buffer), !1694
        v4 = asm(input: v3) -> u64 input, !1696 {
        }
        v5 = get_local ptr u64, b, !1697
        v6 = call read_53(buffer), !1698
        v7 = asm(input: v6) -> u64 input, !1700 {
        }
        v8 = get_local ptr u64, c, !1701
        v9 = call read_53(buffer), !1702
        v10 = asm(input: v9) -> u64 input, !1704 {
        }
        v11 = get_local ptr u64, d, !1705
        v12 = get_local ptr u64, a, !1706
        v13 = const u64 24, !1707
        v14 = lsh v1, v13, !1708
        v15 = const u64 4294967295, !1709
        v16 = and v14, v15, !1708
        v17 = get_local ptr u64, b, !1710
        v18 = const u64 16, !1711
        v19 = lsh v4, v18, !1712
        v20 = and v19, v15, !1712
        v21 = or v16, v20, !1713
        v22 = get_local ptr u64, c, !1714
        v23 = const u64 8, !1715
        v24 = lsh v7, v23, !1716
        v25 = and v24, v15, !1716
        v26 = or v21, v25, !1717
        v27 = get_local ptr u64, d, !1718
        v28 = or v26, v10, !1719
        ret u64 v28
    }

    pub fn as_u32_75(self !1720: u8) -> u64, !1721 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !1722 {
        }
        ret u64 v0
    }

    pub fn binary_or_76(self !1723: u64, other !1724: u64) -> u64, !1725 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_77(self !1726: u64, other !1727: u64) -> u64, !1728 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = const u64 4294967295, !1709
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_78() -> u64, !1729 {
        entry():
        v0 = const u64 4294967295, !1709
        ret u64 v0
    }

    pub fn decode_79(self !984: ptr { u64, u64 }) -> { u64, { u64 } }, !985 {
        local { u64, { u64 } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_74(self), !1730
        v1 = call abi_decode_39(self), !1731
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !1732
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !1733
        store v0 to v4, !1734
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !1735
        store v1 to v6, !1736
        v7 = load v2, !86
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_80(buffer !1191: ptr { u64, u64 }) -> { u64, { u64 } }, !1192 {
        local { u64, { u64 } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_74(buffer), !207
        v1 = call abi_decode_39(buffer), !220
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !222
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !222
        store v0 to v4, !222
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !222
        store v1 to v6, !222
        v7 = load v2
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_81(buffer !1670: ptr { u64, u64 }) -> { u64 }, !1671 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !1737
        v1 = get_local ptr { u64 }, __anon_0, !1674
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1674
        v4 = load v1
        ret { u64 } v4
    }

    pub fn encode_82(item !1206: ()) -> slice, !1207 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_42(), !252
        v1 = get_local ptr { { u64, u64, u64 } }, buffer, !291
        store v0 to v1, !291
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !294
        v3 = load v2
        v4 = call as_raw_slice_43(v3), !296
        ret slice v4
    }

    pub fn abi_encode_83(self !1738: (), buffer !1739: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1740 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn take_generic_struct_containing_tuple_84(_arg !1741: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !1742 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }

    pub fn complex_function<51fdfdad>(_arg1 !1218: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2 !1219: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3 !1220: { string<5>, bool }, _arg4 !1221: { u64 }) -> string<6>, !1222 {
        entry(_arg1: { [b256; 3], { u64, ( u64 | bool ) } }, _arg2: [{ u64, { u64, ( u64 | bool ) } }; 4], _arg3: { string<5>, bool }, _arg4: { u64 }):
        v0 = const string<6> "fuel42"
        ret string<6> v0
    }

    pub fn take_generic_array<67f6e807>(_arg !1534: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }) -> u64, !1535 {
        entry(_arg: { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }):
        v0 = const u64 0, !442
        ret u64 v0
    }

    pub fn take_generic_struct_containing_tuple<29ad7e95>(_arg !1741: { { { u64 }, u64, u64 }, { u64, { u64 } } }) -> (), !1742 {
        entry(_arg: { { { u64 }, u64, u64 }, { u64, { u64 } } }):
        v0 = const unit ()
        ret () v0
    }
}

// IR: [fn-dce] Dead function elimination
contract {
    pub entry fn __entry() -> (), !1 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local [b256; 3] __anon_0000
        local [u8; 3] __anon_0001
        local { { u64 }, u64, u64 } __anon_0002
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_001
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_002
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_003
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_01
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_010
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_011
        local { u64, { u64 } } __anon_012
        local { string<5>, bool } __anon_02
        local { u64, u64, u64 } __anon_03
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_04
        local { u64, u64, u64 } __anon_05
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_06
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local u64 a
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array00
        local mut [u8; 3] array1
        local u64 b
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local { u8, { u64, ( u64 | bool ) } } first00
        local u8 first1
        local mut u64 i
        local mut u64 i0
        local mut u64 i00
        local mut u64 i1
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !6
        v1 = asm() -> u64 fp, !8 {
        }
        v2 = get_local ptr u64, ptr, !10
        v3 = get_local ptr u64, ptr, !12
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !14
        v5 = const u64 8
        v6 = const u64 73, !15
        v7 = mul v5, v6, !17
        v8 = add v1, v7, !18
        v9 = get_local ptr u64, ptr_, !20
        v10 = get_local ptr u64, ptr_, !22
        v11 = call read_3(v8), !24
        v12 = get_local ptr u64, ptr__, !26
        v13 = get_local ptr u64, ptr__, !28
        v14 = asm(ptr: v11) -> u64 ptr, !30 {
        }
        v15 = get_local ptr { u64, u64 }, __anon_00, !32
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !33
        store v14 to v17, !34
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !35
        v20 = const u64 0, !36
        store v20 to v19, !37
        v21 = load v15, !38
        v22 = get_local ptr { u64, u64 }, buffer, !40
        store v21 to v22, !41
        v23 = get_local ptr { u64, u64 }, buffer, !43
        v24 = call abi_decode_5(v23), !46
        v25 = get_local ptr u64, len, !48
        v26 = get_local ptr u64, len, !50
        v27 = call read_bytes_10(v23, v24), !52
        v28 = get_local ptr slice, data, !54
        store v27 to v28, !55
        v29 = get_local ptr slice, data, !57
        v30 = load v29, !58
        v31 = call ptr_11(v30), !60
        v32 = get_local ptr u64, len, !62
        v33 = get_local ptr { u64, u64 }, __anon_000, !64
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !65
        store v31 to v35, !66
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36, !67
        store v24 to v37, !68
        v38 = asm(s: v33) -> slice s, !70 {
        }
        v39 = get_local ptr slice, _method_name, !71
        store v38 to v39, !71
        v40 = get_local ptr slice, _method_name, !72
        v41 = load v40
        v42 = const string<16> "complex_function"
        v43 = ptr_to_int v42 to u64, !73
        v44 = get_local ptr { u64, u64 }, __anon_0, !73
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45
        store v43 to v46, !73
        v47 = const u64 1
        v48 = get_elem_ptr v44, ptr u64, v47
        v49 = const u64 16
        store v49 to v48, !73
        v50 = get_local ptr slice, __anon_1, !73
        mem_copy_bytes v50, v44, 16
        v51 = load v50
        v52 = call eq_13(v41, v51), !74
        v53 = const unit ()
        cbr v52, block0(), block2(v53), !74

        block0():
        v54 = call from_second_parameter_19(), !77
        v55 = get_local ptr { u64, u64 }, buffer0, !79
        store v54 to v55, !80
        v56 = get_local ptr { u64, u64 }, buffer0, !82
        v57 = call decode_24(v56), !88
        v58 = get_local ptr b256, first, !90
        store v57 to v58, !91
        v59 = get_local ptr [b256; 3], __anon_0000, !93
        v60 = get_local ptr b256, first, !95
        v61 = load v60, !96
        v62 = const u64 0
        v63 = get_elem_ptr v59, ptr b256, v62, !97
        store v61 to v63, !98
        v64 = get_local ptr b256, first, !99
        v65 = load v64, !100
        v66 = const u64 1
        v67 = get_elem_ptr v59, ptr b256, v66, !101
        store v65 to v67, !102
        v68 = get_local ptr b256, first, !103
        v69 = load v68, !104
        v70 = const u64 2
        v71 = get_elem_ptr v59, ptr b256, v70, !105
        store v69 to v71, !106
        v72 = load v59, !107
        v73 = get_local ptr [b256; 3], array, !109
        store v72 to v73, !110
        v74 = get_local ptr u64, i, !112
        v75 = const u64 1, !113
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v75), !114

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v76: u64):
        v77 = get_local ptr u64, i, !116
        v78 = const u64 3, !117
        v79 = cmp lt v76 v78, !119
        cbr v79, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !120

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v80 = call decode_24(v56), !122
        v81 = get_local ptr [b256; 3], array, !124
        v82 = get_local ptr u64, i, !126
        v83 = get_elem_ptr v81, ptr b256, v76, !127
        store v80 to v83, !128
        v84 = get_local ptr u64, i, !130
        v85 = const u64 1, !131
        v86 = add v76, v85, !133
        v87 = get_local ptr u64, i, !134
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v86), !135

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v88 = get_local ptr [b256; 3], array, !137
        v89 = load v88, !138
        v90 = call decode_28(v56), !140
        v91 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_001, !142
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr [b256; 3], v92, !143
        store v89 to v93, !144
        v94 = const u64 1
        v95 = get_elem_ptr v91, ptr { u64, ( u64 | bool ) }, v94, !145
        store v90 to v95, !146
        v96 = load v91, !147
        v97 = call decode_35(v56), !150
        v98 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !152
        store v97 to v98, !153
        v99 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_010, !155
        v100 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !157
        v101 = load v100, !158
        v102 = const u64 0
        v103 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v102, !159
        store v101 to v103, !160
        v104 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !161
        v105 = load v104, !162
        v106 = const u64 1
        v107 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v106, !163
        store v105 to v107, !164
        v108 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !165
        v109 = load v108, !166
        v110 = const u64 2
        v111 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v110, !167
        store v109 to v111, !168
        v112 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !169
        v113 = load v112, !170
        v114 = const u64 3
        v115 = get_elem_ptr v99, ptr { u64, { u64, ( u64 | bool ) } }, v114, !171
        store v113 to v115, !172
        v116 = load v99, !173
        v117 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !175
        store v116 to v117, !176
        v118 = get_local ptr u64, i0, !178
        v119 = const u64 1, !179
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v119), !180

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v120: u64):
        v121 = get_local ptr u64, i0, !182
        v122 = const u64 4, !183
        v123 = cmp lt v120 v122, !185
        cbr v123, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !186

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v124 = call decode_35(v56), !188
        v125 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !190
        v126 = get_local ptr u64, i0, !192
        v127 = get_elem_ptr v125, ptr { u64, { u64, ( u64 | bool ) } }, v120, !193
        store v124 to v127, !194
        v128 = get_local ptr u64, i0, !196
        v129 = const u64 1, !197
        v130 = add v120, v129, !199
        v131 = get_local ptr u64, i0, !200
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v130), !201

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v132 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !203
        v133 = load v132, !204
        v134 = const u64 5, !205
        v135 = call read_bytes_10(v56, v134), !209
        v136 = get_local ptr slice, data0, !211
        store v135 to v136, !212
        v137 = get_local ptr slice, data0, !214
        v138 = load v137, !215
        v139 = call ptr_11(v138), !217
        v140 = asm(s: v139) -> string<5> s, !219 {
        }
        v141 = call abi_decode_32(v56), !221
        v142 = get_local ptr { string<5>, bool }, __anon_02, !223
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr string<5>, v143, !224
        store v140 to v144, !225
        v145 = const u64 1
        v146 = get_elem_ptr v142, ptr bool, v145, !226
        store v141 to v146, !227
        v147 = load v142, !228
        v148 = call abi_decode_39(v56), !230
        v149 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_01, !232
        v150 = const u64 0
        v151 = get_elem_ptr v149, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v150, !233
        store v96 to v151, !234
        v152 = const u64 1
        v153 = get_elem_ptr v149, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v152, !235
        store v133 to v153, !236
        v154 = const u64 2
        v155 = get_elem_ptr v149, ptr { string<5>, bool }, v154, !237
        store v147 to v155, !238
        v156 = const u64 3
        v157 = get_elem_ptr v149, ptr { u64 }, v156, !239
        store v148 to v157, !240
        v158 = load v149, !241
        v159 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !242
        store v158 to v159, !242
        v160 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !243
        v161 = const u64 0
        v162 = get_elem_ptr v160, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v161, !244
        v163 = load v162
        v164 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !245
        v165 = const u64 1
        v166 = get_elem_ptr v164, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v165, !246
        v167 = load v166
        v168 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !247
        v169 = const u64 2
        v170 = get_elem_ptr v168, ptr { string<5>, bool }, v169, !248
        v171 = load v170
        v172 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !249
        v173 = const u64 3
        v174 = get_elem_ptr v172, ptr { u64 }, v173, !250
        v175 = load v174
        v176 = call new_42(), !253
        v177 = ptr_to_int v176 to u64, !255
        v178 = int_to_ptr v177 to ptr { { u64, u64, u64 } }, !256
        v179 = const u64 0
        v180 = get_elem_ptr v178, ptr { u64, u64, u64 }, v179, !258
        v181 = load v180, !259
        v182 = asm(buffer: v181) -> { u64, u64, u64 } buffer, !260 {
        }
        v183 = get_local ptr { u64, u64, u64 }, __anon_03, !261
        store v182 to v183, !262
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr u64, v184, !263
        v186 = load v185, !264
        v187 = int_to_ptr v186 to ptr u8, !265
        v188 = const u64 1
        v189 = get_elem_ptr v183, ptr u64, v188, !266
        v190 = load v189, !267
        v191 = const u64 2
        v192 = get_elem_ptr v183, ptr u64, v191, !268
        v193 = load v192, !269
        v194 = get_local ptr string<6>, __anon_10, !270
        v195 = const string<6> "fuel42"
        store v195 to v194, !271
        v196 = ptr_to_int v187 to u64, !272
        v197 = add v196, v193, !273
        v198 = int_to_ptr v197 to ptr u8, !274
        mem_copy_bytes v198, v194, 6, !275
        v199 = const u64 6
        v200 = add v193, v199, !276
        v201 = ptr_to_int v187 to u64, !277
        v202 = get_local ptr { u64, u64, u64 }, __anon_20, !278
        v203 = const u64 0
        v204 = get_elem_ptr v202, ptr u64, v203, !279
        store v201 to v204, !280
        v205 = const u64 1
        v206 = get_elem_ptr v202, ptr u64, v205, !281
        store v190 to v206, !282
        v207 = const u64 2
        v208 = get_elem_ptr v202, ptr u64, v207, !283
        store v200 to v208, !284
        v209 = asm(buffer: v202) -> { u64, u64, u64 } buffer, !285 {
        }
        v210 = get_local ptr { { u64, u64, u64 } }, __anon_30, !287
        v211 = const u64 0
        v212 = get_elem_ptr v210, ptr { u64, u64, u64 }, v211, !288
        store v209 to v212, !289
        v213 = load v210, !290
        v214 = get_local ptr { { u64, u64, u64 } }, buffer1, !292
        store v213 to v214, !293
        v215 = get_local ptr { { u64, u64, u64 } }, buffer1, !295
        v216 = load v215, !251
        v217 = call as_raw_slice_43(v216), !297
        v218 = get_local ptr slice, result_complex_function, !298
        store v217 to v218, !298
        v219 = get_local ptr slice, result_complex_function, !299
        v220 = load v219
        v221 = call ptr_11(v220), !300
        v222 = get_local ptr slice, result_complex_function, !301
        v223 = load v222
        v224 = call len_45(v223), !302
        retd v221 v224, !303
        v225 = const unit ()
        br block2(v225)

        block2(v226: ()):
        v227 = get_local ptr slice, _method_name, !304
        v228 = load v227
        v229 = const string<18> "take_generic_array"
        v230 = ptr_to_int v229 to u64, !305
        v231 = get_local ptr { u64, u64 }, __anon_2, !305
        v232 = const u64 0
        v233 = get_elem_ptr v231, ptr u64, v232
        store v230 to v233, !305
        v234 = const u64 1
        v235 = get_elem_ptr v231, ptr u64, v234
        v236 = const u64 18
        store v236 to v235, !305
        v237 = get_local ptr slice, __anon_3, !305
        mem_copy_bytes v237, v231, 16
        v238 = load v237
        v239 = call eq_13(v228, v238), !306
        v240 = const unit ()
        cbr v239, block3(), block5(v240), !306

        block3():
        v241 = call from_second_parameter_19(), !308
        v242 = get_local ptr { u64, u64 }, buffer2, !309
        store v241 to v242, !310
        v243 = get_local ptr { u64, u64 }, buffer2, !311
        v244 = call read_53(v243), !315
        v245 = get_local ptr u8, first1, !316
        v246 = get_local ptr [u8; 3], __anon_0001, !317
        v247 = get_local ptr u8, first1, !318
        v248 = const u64 0
        v249 = get_elem_ptr v246, ptr u8, v248, !319
        store v244 to v249, !320
        v250 = get_local ptr u8, first1, !321
        v251 = const u64 1
        v252 = get_elem_ptr v246, ptr u8, v251, !322
        store v244 to v252, !323
        v253 = get_local ptr u8, first1, !324
        v254 = const u64 2
        v255 = get_elem_ptr v246, ptr u8, v254, !325
        store v244 to v255, !326
        v256 = load v246, !327
        v257 = get_local ptr [u8; 3], array1, !328
        store v256 to v257, !329
        v258 = get_local ptr u64, i1, !330
        v259 = const u64 1, !113
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v259), !331

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v260: u64):
        v261 = get_local ptr u64, i1, !332
        v262 = const u64 3, !117
        v263 = cmp lt v260 v262, !333
        cbr v263, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !334

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v264 = call read_53(v243), !335
        v265 = get_local ptr [u8; 3], array1, !336
        v266 = get_local ptr u64, i1, !337
        v267 = get_elem_ptr v265, ptr u8, v260, !338
        store v264 to v267, !339
        v268 = get_local ptr u64, i1, !340
        v269 = const u64 1, !131
        v270 = add v260, v269, !341
        v271 = get_local ptr u64, i1, !342
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v270), !343

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v272 = get_local ptr [u8; 3], array1, !344
        v273 = load v272, !345
        v274 = call abi_decode_59(v243), !348
        v275 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !350
        store v274 to v275, !351
        v276 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_011, !353
        v277 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !355
        v278 = load v277, !356
        v279 = const u64 0
        v280 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v279, !357
        store v278 to v280, !358
        v281 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !359
        v282 = load v281, !360
        v283 = const u64 1
        v284 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v283, !361
        store v282 to v284, !362
        v285 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !363
        v286 = load v285, !364
        v287 = const u64 2
        v288 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v287, !365
        store v286 to v288, !366
        v289 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !367
        v290 = load v289, !368
        v291 = const u64 3
        v292 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v291, !369
        store v290 to v292, !370
        v293 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !371
        v294 = load v293, !372
        v295 = const u64 4
        v296 = get_elem_ptr v276, ptr { u8, { u64, ( u64 | bool ) } }, v295, !373
        store v294 to v296, !374
        v297 = load v276, !375
        v298 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !377
        store v297 to v298, !378
        v299 = get_local ptr u64, i00, !380
        v300 = const u64 1, !381
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v300), !382

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v301: u64):
        v302 = get_local ptr u64, i00, !384
        v303 = const u64 5, !385
        v304 = cmp lt v301 v303, !387
        cbr v304, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !388

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v305 = call abi_decode_59(v243), !390
        v306 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !392
        v307 = get_local ptr u64, i00, !394
        v308 = get_elem_ptr v306, ptr { u8, { u64, ( u64 | bool ) } }, v301, !395
        store v305 to v308, !396
        v309 = get_local ptr u64, i00, !398
        v310 = const u64 1, !399
        v311 = add v301, v310, !401
        v312 = get_local ptr u64, i00, !402
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v311), !403

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v313 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !405
        v314 = load v313, !406
        v315 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_002, !408
        v316 = const u64 0
        v317 = get_elem_ptr v315, ptr [u8; 3], v316, !409
        store v273 to v317, !410
        v318 = const u64 1
        v319 = get_elem_ptr v315, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v318, !411
        store v314 to v319, !412
        v320 = load v315, !413
        v321 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_04, !415
        v322 = const u64 0
        v323 = get_elem_ptr v321, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v322, !416
        store v320 to v323, !417
        v324 = load v321, !418
        v325 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !419
        store v324 to v325, !419
        v326 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !420
        v327 = const u64 0
        v328 = get_elem_ptr v326, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v327, !421
        v329 = load v328
        v330 = call new_42(), !423
        v331 = ptr_to_int v330 to u64, !424
        v332 = int_to_ptr v331 to ptr { { u64, u64, u64 } }, !425
        v333 = const u64 0
        v334 = get_elem_ptr v332, ptr { u64, u64, u64 }, v333, !426
        v335 = load v334, !427
        v336 = asm(buffer: v335) -> { u64, u64, u64 } buffer, !428 {
        }
        v337 = get_local ptr { u64, u64, u64 }, __anon_05, !429
        store v336 to v337, !430
        v338 = const u64 0
        v339 = get_elem_ptr v337, ptr u64, v338, !431
        v340 = load v339, !432
        v341 = int_to_ptr v340 to ptr u8, !433
        v342 = const u64 1
        v343 = get_elem_ptr v337, ptr u64, v342, !434
        v344 = load v343, !435
        v345 = const u64 2
        v346 = get_elem_ptr v337, ptr u64, v345, !436
        v347 = load v346, !437
        v348 = ptr_to_int v341 to u64, !438
        v349 = add v348, v347, !439
        v350 = int_to_ptr v349 to ptr u64, !440
        v351 = const u64 0, !442
        store v351 to v350, !443
        v352 = const u64 8
        v353 = add v347, v352, !444
        v354 = ptr_to_int v341 to u64, !445
        v355 = get_local ptr { u64, u64, u64 }, __anon_11, !446
        v356 = const u64 0
        v357 = get_elem_ptr v355, ptr u64, v356, !447
        store v354 to v357, !448
        v358 = const u64 1
        v359 = get_elem_ptr v355, ptr u64, v358, !449
        store v344 to v359, !450
        v360 = const u64 2
        v361 = get_elem_ptr v355, ptr u64, v360, !451
        store v353 to v361, !452
        v362 = asm(buffer: v355) -> { u64, u64, u64 } buffer, !453 {
        }
        v363 = get_local ptr { { u64, u64, u64 } }, __anon_21, !455
        v364 = const u64 0
        v365 = get_elem_ptr v363, ptr { u64, u64, u64 }, v364, !456
        store v362 to v365, !457
        v366 = load v363, !458
        v367 = get_local ptr { { u64, u64, u64 } }, buffer3, !459
        store v366 to v367, !460
        v368 = get_local ptr { { u64, u64, u64 } }, buffer3, !461
        v369 = load v368, !422
        v370 = call as_raw_slice_43(v369), !462
        v371 = get_local ptr slice, result_take_generic_array, !463
        store v370 to v371, !463
        v372 = get_local ptr slice, result_take_generic_array, !464
        v373 = load v372
        v374 = call ptr_11(v373), !465
        v375 = get_local ptr slice, result_take_generic_array, !466
        v376 = load v375
        v377 = call len_45(v376), !467
        retd v374 v377, !468
        v378 = const unit ()
        br block5(v378)

        block5(v379: ()):
        v380 = get_local ptr slice, _method_name, !469
        v381 = load v380
        v382 = const string<36> "take_generic_struct_containing_tuple"
        v383 = ptr_to_int v382 to u64, !470
        v384 = get_local ptr { u64, u64 }, __anon_4, !470
        v385 = const u64 0
        v386 = get_elem_ptr v384, ptr u64, v385
        store v383 to v386, !470
        v387 = const u64 1
        v388 = get_elem_ptr v384, ptr u64, v387
        v389 = const u64 36
        store v389 to v388, !470
        v390 = get_local ptr slice, __anon_5, !470
        mem_copy_bytes v390, v384, 16
        v391 = load v390
        v392 = call eq_13(v381, v391), !471
        v393 = const unit ()
        cbr v392, block6(), block8(v393), !471

        block6():
        v394 = call from_second_parameter_19(), !473
        v395 = get_local ptr { u64, u64 }, buffer4, !474
        store v394 to v395, !475
        v396 = get_local ptr { u64, u64 }, buffer4, !476
        v397 = call abi_decode_39(v396), !479
        v398 = call read_53(v396), !482
        v399 = asm(input: v398) -> u64 input, !486 {
        }
        v400 = get_local ptr u64, a, !488
        v401 = call read_53(v396), !490
        v402 = asm(input: v401) -> u64 input, !492 {
        }
        v403 = get_local ptr u64, b, !494
        v404 = get_local ptr u64, a, !496
        v405 = const u64 8, !497
        v406 = lsh v399, v405, !499
        v407 = const u64 65535, !501
        v408 = and v406, v407, !502
        v409 = get_local ptr u64, b, !504
        v410 = or v408, v402, !506
        v411 = call abi_decode_74(v396), !508
        v412 = get_local ptr { { u64 }, u64, u64 }, __anon_0002, !510
        v413 = const u64 0
        v414 = get_elem_ptr v412, ptr { u64 }, v413, !511
        store v397 to v414, !512
        v415 = const u64 1
        v416 = get_elem_ptr v412, ptr u64, v415, !513
        store v410 to v416, !514
        v417 = const u64 2
        v418 = get_elem_ptr v412, ptr u64, v417, !515
        store v411 to v418, !516
        v419 = load v412, !517
        v420 = call abi_decode_74(v396), !519
        v421 = call abi_decode_39(v396), !520
        v422 = get_local ptr { u64, { u64 } }, __anon_012, !521
        v423 = const u64 0
        v424 = get_elem_ptr v422, ptr u64, v423, !522
        store v420 to v424, !523
        v425 = const u64 1
        v426 = get_elem_ptr v422, ptr { u64 }, v425, !524
        store v421 to v426, !525
        v427 = load v422, !526
        v428 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_003, !528
        v429 = const u64 0
        v430 = get_elem_ptr v428, ptr { { u64 }, u64, u64 }, v429, !529
        store v419 to v430, !530
        v431 = const u64 1
        v432 = get_elem_ptr v428, ptr { u64, { u64 } }, v431, !531
        store v427 to v432, !532
        v433 = load v428, !533
        v434 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_06, !534
        v435 = const u64 0
        v436 = get_elem_ptr v434, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v435, !535
        store v433 to v436, !536
        v437 = load v434, !537
        v438 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !538
        store v437 to v438, !538
        v439 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !539
        v440 = const u64 0
        v441 = get_elem_ptr v439, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v440, !540
        v442 = load v441
        v443 = call new_42(), !542
        v444 = get_local ptr { { u64, u64, u64 } }, buffer5, !543
        store v443 to v444, !544
        v445 = get_local ptr { { u64, u64, u64 } }, buffer5, !545
        v446 = load v445, !541
        v447 = call as_raw_slice_43(v446), !546
        v448 = get_local ptr slice, result_take_generic_struct_containing_tuple, !547
        store v447 to v448, !547
        v449 = get_local ptr slice, result_take_generic_struct_containing_tuple, !548
        v450 = load v449
        v451 = call ptr_11(v450), !549
        v452 = get_local ptr slice, result_take_generic_struct_containing_tuple, !550
        v453 = load v452
        v454 = call len_45(v453), !551
        retd v451 v454, !552
        v455 = const unit ()
        br block8(v455)

        block8(v456: ()):
        v457 = const u64 123, !553
        revert v457, !554
    }

    pub fn read_3(self !556: u64) -> u64, !557 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !558

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !559 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !560
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !561

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !562 {
            lb     val ptr i0, !563
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !564 {
            lw     val ptr i0, !565
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn abi_decode_5(buffer !566: ptr { u64, u64 }) -> u64, !567 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !570
        v2 = load v1, !568
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !572
        v5 = load v4, !568
        v6 = const u64 1
        v7 = mul v6, v5, !574
        v8 = add v2, v7, !575
        v9 = get_local ptr u64, ptr, !577
        v10 = get_local ptr u64, size, !579
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !580
        v13 = load v12, !568
        v14 = get_local ptr u64, size, !582
        v15 = const u64 8
        v16 = add v13, v15, !584
        v17 = get_local ptr u64, next_pos, !586
        v18 = const bool false
        cbr v18, read_6_block0(), read_6_block1(), !588

        read_6_block0():
        v19 = get_local ptr u64, ptr, !590
        v20 = asm(ptr: v8) -> u64 ptr, !592 {
        }
        v21 = get_local ptr u64, v, !594
        v22 = get_local ptr u64, next_pos, !596
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !598
        store v16 to v24, !599
        v25 = get_local ptr u64, v, !601
        br read_6_block5(v20), !568

        read_6_block1():
        v26 = get_local ptr u64, size, !603
        v27 = const u64 1, !604
        v28 = cmp eq v15 v27, !606
        cbr v28, read_6_block2(), read_6_block3(), !607

        read_6_block2():
        v29 = get_local ptr u64, ptr, !609
        v30 = asm(ptr: v8, val) -> u64 val, !611 {
            lb     val ptr i0, !612
        }
        v31 = get_local ptr u64, v_, !614
        v32 = get_local ptr u64, next_pos, !616
        v33 = const u64 1
        v34 = get_elem_ptr buffer, ptr u64, v33, !618
        store v16 to v34, !619
        v35 = get_local ptr u64, v_, !621
        br read_6_block4(v30), !568

        read_6_block3():
        v36 = get_local ptr u64, ptr, !623
        v37 = asm(ptr: v8, val) -> u64 val, !625 {
            lw     val ptr i0, !626
        }
        v38 = get_local ptr u64, v__, !628
        v39 = get_local ptr u64, next_pos, !630
        v40 = const u64 1
        v41 = get_elem_ptr buffer, ptr u64, v40, !632
        store v16 to v41, !633
        v42 = get_local ptr u64, v__, !635
        br read_6_block4(v37), !568

        read_6_block4(v43: u64):
        br read_6_block5(v43), !568

        read_6_block5(v44: u64):
        ret u64 v44
    }

    pub fn read_bytes_10(self !636: ptr { u64, u64 }, count !637: u64) -> slice, !638 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !571
        v2 = load v1
        v3 = add v2, count, !639
        v4 = get_local ptr u64, next_pos, !640
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !569
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !571
        v10 = load v9
        v11 = const u64 1
        v12 = mul v11, v10, !641
        v13 = add v7, v12, !641
        v14 = get_local ptr u64, ptr, !642
        v15 = get_local ptr u64, ptr, !643
        v16 = get_local ptr { u64, u64 }, __anon_0, !644
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !644
        store v13 to v18, !644
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19, !644
        store count to v20, !644
        v21 = asm(ptr: v16) -> slice ptr, !645 {
        }
        v22 = get_local ptr slice, slice, !646
        store v21 to v22, !646
        v23 = get_local ptr u64, next_pos, !647
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !648
        store v3 to v25, !648
        v26 = get_local ptr slice, slice, !649
        v27 = load v26
        ret slice v27
    }

    pub fn ptr_11(self !651: slice) -> u64, !652 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !655 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !656
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self !658: slice, other !659: slice) -> bool, !660 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !661
        v1 = call len_16(other), !662
        v2 = cmp eq v0 v1, !665
        v3 = const bool false, !666
        v4 = cmp eq v2 v3, !668
        v5 = const bool false, !669
        cbr v4, block2(v5), block1(), !663

        block1():
        v6 = call as_ptr_17(self), !670
        v7 = get_local ptr u64, self_ptr, !671
        v8 = call as_ptr_17(other), !672
        v9 = get_local ptr u64, other_ptr, !673
        v10 = call len_16(self), !674
        v11 = get_local ptr u64, l, !675
        v12 = get_local ptr u64, self_ptr, !676
        v13 = get_local ptr u64, other_ptr, !677
        v14 = get_local ptr u64, l, !678
        v15 = asm(r1: v6, r2: v8, r3: v10, r4) -> bool r4, !679 {
            meq    r4 r1 r2 r3, !680
        }
        br block2(v15)

        block2(v16: bool):
        ret bool v16
    }

    pub fn len_16(self !682: slice) -> u64, !683 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !684 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !685
        store v0 to v1, !685
        v2 = get_local ptr { u64, u64 }, __tuple_2, !685
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !685
        store v3 to v4, !685
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !685
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !685
        v8 = load v7
        v9 = get_local ptr u64, _, !685
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !685
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !685
        v13 = load v12
        v14 = get_local ptr u64, len, !685
        v15 = get_local ptr u64, len, !686
        ret u64 v13
    }

    pub fn as_ptr_17(self !687: slice) -> u64, !688 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !689 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !690
        store v0 to v1, !690
        v2 = get_local ptr { u64, u64 }, __tuple_1, !690
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !690
        store v3 to v4, !690
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !690
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !690
        v8 = load v7
        v9 = get_local ptr u64, ptr, !690
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !690
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !690
        v13 = load v12
        v14 = get_local ptr u64, _, !690
        v15 = get_local ptr u64, ptr, !691
        ret u64 v8
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !692 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !693
        v1 = asm() -> u64 fp, !694 {
        }
        v2 = get_local ptr u64, ptr, !695
        v3 = get_local ptr u64, ptr, !696
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !697
        v5 = const u64 8
        v6 = const u64 74, !698
        v7 = mul v5, v6, !699
        v8 = add v1, v7, !699
        v9 = get_local ptr u64, ptr_, !700
        v10 = get_local ptr u64, ptr_, !701
        v11 = call read_3(v8), !702
        v12 = get_local ptr u64, ptr__, !703
        v13 = get_local ptr u64, ptr__, !704
        v14 = asm(ptr: v11) -> u64 ptr, !705 {
        }
        v15 = get_local ptr { u64, u64 }, __anon_0, !706
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17, !706
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        v20 = const u64 0, !707
        store v20 to v19, !706
        v21 = load v15
        ret { u64, u64 } v21
    }

    pub fn decode_24(self !708: ptr { u64, u64 }) -> b256, !709 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !711
        v2 = load v1, !712
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !713
        v5 = load v4, !714
        v6 = const u64 1
        v7 = mul v6, v5, !715
        v8 = add v2, v7, !716
        v9 = get_local ptr u64, ptr, !717
        v10 = get_local ptr u64, size, !718
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !719
        v13 = load v12, !720
        v14 = get_local ptr u64, size, !721
        v15 = const u64 32
        v16 = add v13, v15, !722
        v17 = get_local ptr u64, next_pos, !723
        v18 = const bool true
        cbr v18, abi_decode_25_read_26_block0(), abi_decode_25_read_26_block1(), !724

        abi_decode_25_read_26_block0():
        v19 = get_local ptr u64, ptr, !725
        v20 = asm(ptr: v8) -> b256 ptr, !726 {
        }
        v21 = get_local ptr b256, v, !727
        store v20 to v21, !728
        v22 = get_local ptr u64, next_pos, !729
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !730
        store v16 to v24, !731
        v25 = get_local ptr b256, v, !732
        v26 = load v25, !733
        br abi_decode_25_read_26_block5(v26), !734

        abi_decode_25_read_26_block1():
        v27 = get_local ptr u64, size, !735
        v28 = const u64 1, !604
        v29 = cmp eq v15 v28, !736
        cbr v29, abi_decode_25_read_26_block2(), abi_decode_25_read_26_block3(), !737

        abi_decode_25_read_26_block2():
        v30 = get_local ptr u64, ptr, !738
        v31 = asm(ptr: v8, val) -> b256 val, !739 {
            lb     val ptr i0, !612
        }
        v32 = get_local ptr b256, v_, !740
        store v31 to v32, !741
        v33 = get_local ptr u64, next_pos, !742
        v34 = const u64 1
        v35 = get_elem_ptr self, ptr u64, v34, !743
        store v16 to v35, !744
        v36 = get_local ptr b256, v_, !745
        v37 = load v36, !746
        br abi_decode_25_read_26_block4(v37), !747

        abi_decode_25_read_26_block3():
        v38 = get_local ptr u64, ptr, !748
        v39 = asm(ptr: v8, val) -> b256 val, !749 {
            lw     val ptr i0, !626
        }
        v40 = get_local ptr b256, v__, !750
        store v39 to v40, !751
        v41 = get_local ptr u64, next_pos, !752
        v42 = const u64 1
        v43 = get_elem_ptr self, ptr u64, v42, !753
        store v16 to v43, !754
        v44 = get_local ptr b256, v__, !755
        v45 = load v44, !756
        br abi_decode_25_read_26_block4(v45), !757

        abi_decode_25_read_26_block4(v46: b256):
        br abi_decode_25_read_26_block5(v46), !758

        abi_decode_25_read_26_block5(v47: b256):
        ret b256 v47
    }

    pub fn decode_28(self !708: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !709 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !760
        v1 = get_local ptr u64, variant, !762
        v2 = get_local ptr u64, variant, !764
        v3 = get_local ptr u64, __matched_value_1, !766
        v4 = get_local ptr u64, __matched_value_1, !767
        v5 = const u64 0, !768
        v6 = cmp eq v0 v5, !770
        cbr v6, abi_decode_29_block0(), abi_decode_29_block1(), !771

        abi_decode_29_block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !773
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !774
        v10 = const u64 0, !772
        store v10 to v9, !775
        v11 = call abi_decode_5(self), !777
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !778
        store v11 to v14, !779
        v15 = load v7, !86
        br abi_decode_29_block5(v15), !86

        abi_decode_29_block1():
        v16 = get_local ptr u64, __matched_value_1, !780
        v17 = const u64 1, !781
        v18 = cmp eq v0 v17, !783
        cbr v18, abi_decode_29_block2(), abi_decode_29_block3(), !784

        abi_decode_29_block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !785
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !786
        v22 = const u64 1, !772
        store v22 to v21, !787
        v23 = call abi_decode_32(self), !789
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !790
        store v23 to v26, !791
        v27 = load v19, !86
        br abi_decode_29_block5(v27), !86

        abi_decode_29_block3():
        v28 = const u64 0, !792
        revert v28, !794

        abi_decode_29_block5(v29: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v29
    }

    pub fn abi_decode_32(buffer !795: ptr { u64, u64 }) -> bool, !796 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !798
        v2 = load v1, !797
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !799
        v5 = load v4, !797
        v6 = const u64 1
        v7 = mul v6, v5, !800
        v8 = add v2, v7, !801
        v9 = get_local ptr u64, ptr, !802
        v10 = get_local ptr u64, size, !803
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !804
        v13 = load v12, !797
        v14 = get_local ptr u64, size, !805
        v15 = const u64 1
        v16 = add v13, v15, !806
        v17 = get_local ptr u64, next_pos, !807
        v18 = const bool false
        cbr v18, read_33_block0(), read_33_block1(), !808

        read_33_block0():
        v19 = get_local ptr u64, ptr, !809
        v20 = asm(ptr: v8) -> bool ptr, !810 {
        }
        v21 = get_local ptr bool, v, !811
        v22 = get_local ptr u64, next_pos, !812
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !813
        store v16 to v24, !814
        v25 = get_local ptr bool, v, !815
        br read_33_block5(v20), !797

        read_33_block1():
        v26 = get_local ptr u64, size, !816
        v27 = const u64 1, !604
        v28 = cmp eq v15 v27, !817
        cbr v28, read_33_block2(), read_33_block3(), !818

        read_33_block2():
        v29 = get_local ptr u64, ptr, !819
        v30 = asm(ptr: v8, val) -> bool val, !820 {
            lb     val ptr i0, !612
        }
        v31 = get_local ptr bool, v_, !821
        v32 = get_local ptr u64, next_pos, !822
        v33 = const u64 1
        v34 = get_elem_ptr buffer, ptr u64, v33, !823
        store v16 to v34, !824
        v35 = get_local ptr bool, v_, !825
        br read_33_block4(v30), !797

        read_33_block3():
        v36 = get_local ptr u64, ptr, !826
        v37 = asm(ptr: v8, val) -> bool val, !827 {
            lw     val ptr i0, !626
        }
        v38 = get_local ptr bool, v__, !828
        v39 = get_local ptr u64, next_pos, !829
        v40 = const u64 1
        v41 = get_elem_ptr buffer, ptr u64, v40, !830
        store v16 to v41, !831
        v42 = get_local ptr bool, v__, !832
        br read_33_block4(v37), !797

        read_33_block4(v43: bool):
        br read_33_block5(v43), !797

        read_33_block5(v44: bool):
        ret bool v44
    }

    pub fn decode_35(self !708: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !709 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !833
        v1 = call decode_28(self), !834
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !835
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !86
        store v0 to v4, !836
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !86
        store v1 to v6, !837
        v7 = load v2, !86
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_39(buffer !838: ptr { u64, u64 }) -> { u64 }, !839 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !841
        v1 = get_local ptr { u64 }, __anon_0, !842
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !842
        v4 = load v1
        ret { u64 } v4
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !843 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !844
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !844
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !845: { { u64, u64, u64 } }) -> slice, !846 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !257
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn len_45(self !847: slice) -> u64, !848 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !850 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !851
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !852: ptr { u64, u64 }) -> u8, !853 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !569
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !571
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !573
        v8 = add v2, v7, !573
        v9 = get_local ptr u64, ptr, !576
        v10 = get_local ptr u64, size, !578
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !571
        v13 = load v12
        v14 = get_local ptr u64, size, !581
        v15 = const u64 1
        v16 = add v13, v15, !583
        v17 = get_local ptr u64, next_pos, !585
        v18 = const bool false
        cbr v18, block0(), block1(), !587

        block0():
        v19 = get_local ptr u64, ptr, !589
        v20 = asm(ptr: v8) -> u8 ptr, !591 {
        }
        v21 = get_local ptr u8, v, !593
        v22 = get_local ptr u64, next_pos, !595
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !597
        store v16 to v24, !597
        v25 = get_local ptr u8, v, !600
        br block5(v20)

        block1():
        v26 = get_local ptr u64, size, !602
        v27 = const u64 1, !604
        v28 = cmp eq v15 v27, !605
        cbr v28, block2(), block3(), !605

        block2():
        v29 = get_local ptr u64, ptr, !608
        v30 = asm(ptr: v8, val) -> u8 val, !610 {
            lb     val ptr i0, !612
        }
        v31 = get_local ptr u8, v_, !613
        v32 = get_local ptr u64, next_pos, !615
        v33 = const u64 1
        v34 = get_elem_ptr self, ptr u64, v33, !617
        store v16 to v34, !617
        v35 = get_local ptr u8, v_, !620
        br block4(v30)

        block3():
        v36 = get_local ptr u64, ptr, !622
        v37 = asm(ptr: v8, val) -> u8 val, !624 {
            lw     val ptr i0, !626
        }
        v38 = get_local ptr u8, v__, !627
        v39 = get_local ptr u64, next_pos, !629
        v40 = const u64 1
        v41 = get_elem_ptr self, ptr u64, v40, !631
        store v16 to v41, !631
        v42 = get_local ptr u8, v__, !634
        br block4(v37)

        block4(v43: u8):
        br block5(v43)

        block5(v44: u8):
        ret u8 v44
    }

    pub fn abi_decode_59(buffer !854: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !855 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !856
        v1 = call decode_28(buffer), !139
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !141
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !141
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !141
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_74(buffer !857: ptr { u64, u64 }) -> u64, !858 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !859
        v1 = asm(input: v0) -> u64 input, !861 {
        }
        v2 = get_local ptr u64, a, !862
        v3 = call read_53(buffer), !863
        v4 = asm(input: v3) -> u64 input, !865 {
        }
        v5 = get_local ptr u64, b, !866
        v6 = call read_53(buffer), !867
        v7 = asm(input: v6) -> u64 input, !869 {
        }
        v8 = get_local ptr u64, c, !870
        v9 = call read_53(buffer), !871
        v10 = asm(input: v9) -> u64 input, !873 {
        }
        v11 = get_local ptr u64, d, !874
        v12 = get_local ptr u64, a, !875
        v13 = const u64 24, !876
        v14 = lsh v1, v13, !877
        v15 = const u64 4294967295, !878
        v16 = and v14, v15, !877
        v17 = get_local ptr u64, b, !879
        v18 = const u64 16, !880
        v19 = lsh v4, v18, !881
        v20 = and v19, v15, !881
        v21 = or v16, v20, !882
        v22 = get_local ptr u64, c, !883
        v23 = const u64 8, !884
        v24 = lsh v7, v23, !885
        v25 = and v24, v15, !885
        v26 = or v21, v25, !886
        v27 = get_local ptr u64, d, !887
        v28 = or v26, v10, !888
        ret u64 v28
    }
}

// IR: [const-folding] Constant folding
contract {
    pub entry fn __entry() -> (), !1 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local [b256; 3] __anon_0000
        local [u8; 3] __anon_0001
        local { { u64 }, u64, u64 } __anon_0002
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_001
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_002
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_003
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_01
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_010
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_011
        local { u64, { u64 } } __anon_012
        local { string<5>, bool } __anon_02
        local { u64, u64, u64 } __anon_03
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_04
        local { u64, u64, u64 } __anon_05
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_06
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local u64 a
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array00
        local mut [u8; 3] array1
        local u64 b
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local { u8, { u64, ( u64 | bool ) } } first00
        local u8 first1
        local mut u64 i
        local mut u64 i0
        local mut u64 i00
        local mut u64 i1
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !6
        v1 = asm() -> u64 fp, !8 {
        }
        v2 = get_local ptr u64, ptr, !10
        v3 = get_local ptr u64, ptr, !12
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !14
        v5 = const u64 584, !16
        v6 = add v1, v5, !17
        v7 = get_local ptr u64, ptr_, !19
        v8 = get_local ptr u64, ptr_, !21
        v9 = call read_3(v6), !23
        v10 = get_local ptr u64, ptr__, !25
        v11 = get_local ptr u64, ptr__, !27
        v12 = asm(ptr: v9) -> u64 ptr, !29 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_00, !31
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !32
        store v12 to v15, !33
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !34
        v18 = const u64 0, !35
        store v18 to v17, !36
        v19 = load v13, !37
        v20 = get_local ptr { u64, u64 }, buffer, !39
        store v19 to v20, !40
        v21 = get_local ptr { u64, u64 }, buffer, !42
        v22 = call abi_decode_5(v21), !45
        v23 = get_local ptr u64, len, !47
        v24 = get_local ptr u64, len, !49
        v25 = call read_bytes_10(v21, v22), !51
        v26 = get_local ptr slice, data, !53
        store v25 to v26, !54
        v27 = get_local ptr slice, data, !56
        v28 = load v27, !57
        v29 = call ptr_11(v28), !59
        v30 = get_local ptr u64, len, !61
        v31 = get_local ptr { u64, u64 }, __anon_000, !63
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !64
        store v29 to v33, !65
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr u64, v34, !66
        store v22 to v35, !67
        v36 = asm(s: v31) -> slice s, !69 {
        }
        v37 = get_local ptr slice, _method_name, !70
        store v36 to v37, !70
        v38 = get_local ptr slice, _method_name, !71
        v39 = load v38
        v40 = const string<16> "complex_function"
        v41 = ptr_to_int v40 to u64, !72
        v42 = get_local ptr { u64, u64 }, __anon_0, !72
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr u64, v43
        store v41 to v44, !72
        v45 = const u64 1
        v46 = get_elem_ptr v42, ptr u64, v45
        v47 = const u64 16
        store v47 to v46, !72
        v48 = get_local ptr slice, __anon_1, !72
        mem_copy_bytes v48, v42, 16
        v49 = load v48
        v50 = call eq_13(v39, v49), !73
        v51 = const unit ()
        cbr v50, block0(), block2(v51), !73

        block0():
        v52 = call from_second_parameter_19(), !76
        v53 = get_local ptr { u64, u64 }, buffer0, !78
        store v52 to v53, !79
        v54 = get_local ptr { u64, u64 }, buffer0, !81
        v55 = call decode_24(v54), !87
        v56 = get_local ptr b256, first, !89
        store v55 to v56, !90
        v57 = get_local ptr [b256; 3], __anon_0000, !92
        v58 = get_local ptr b256, first, !94
        v59 = load v58, !95
        v60 = const u64 0
        v61 = get_elem_ptr v57, ptr b256, v60, !96
        store v59 to v61, !97
        v62 = get_local ptr b256, first, !98
        v63 = load v62, !99
        v64 = const u64 1
        v65 = get_elem_ptr v57, ptr b256, v64, !100
        store v63 to v65, !101
        v66 = get_local ptr b256, first, !102
        v67 = load v66, !103
        v68 = const u64 2
        v69 = get_elem_ptr v57, ptr b256, v68, !104
        store v67 to v69, !105
        v70 = load v57, !106
        v71 = get_local ptr [b256; 3], array, !108
        store v70 to v71, !109
        v72 = get_local ptr u64, i, !111
        v73 = const u64 1, !112
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v73), !113

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v74: u64):
        v75 = get_local ptr u64, i, !115
        v76 = const u64 3, !116
        v77 = cmp lt v74 v76, !118
        cbr v77, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !119

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v78 = call decode_24(v54), !121
        v79 = get_local ptr [b256; 3], array, !123
        v80 = get_local ptr u64, i, !125
        v81 = get_elem_ptr v79, ptr b256, v74, !126
        store v78 to v81, !127
        v82 = get_local ptr u64, i, !129
        v83 = const u64 1, !130
        v84 = add v74, v83, !132
        v85 = get_local ptr u64, i, !133
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v84), !134

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v86 = get_local ptr [b256; 3], array, !136
        v87 = load v86, !137
        v88 = call decode_28(v54), !139
        v89 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_001, !141
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr [b256; 3], v90, !142
        store v87 to v91, !143
        v92 = const u64 1
        v93 = get_elem_ptr v89, ptr { u64, ( u64 | bool ) }, v92, !144
        store v88 to v93, !145
        v94 = load v89, !146
        v95 = call decode_35(v54), !149
        v96 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !151
        store v95 to v96, !152
        v97 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_010, !154
        v98 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !156
        v99 = load v98, !157
        v100 = const u64 0
        v101 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v100, !158
        store v99 to v101, !159
        v102 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !160
        v103 = load v102, !161
        v104 = const u64 1
        v105 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v104, !162
        store v103 to v105, !163
        v106 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !164
        v107 = load v106, !165
        v108 = const u64 2
        v109 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v108, !166
        store v107 to v109, !167
        v110 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !168
        v111 = load v110, !169
        v112 = const u64 3
        v113 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v112, !170
        store v111 to v113, !171
        v114 = load v97, !172
        v115 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !174
        store v114 to v115, !175
        v116 = get_local ptr u64, i0, !177
        v117 = const u64 1, !178
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v117), !179

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v118: u64):
        v119 = get_local ptr u64, i0, !181
        v120 = const u64 4, !182
        v121 = cmp lt v118 v120, !184
        cbr v121, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !185

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v122 = call decode_35(v54), !187
        v123 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !189
        v124 = get_local ptr u64, i0, !191
        v125 = get_elem_ptr v123, ptr { u64, { u64, ( u64 | bool ) } }, v118, !192
        store v122 to v125, !193
        v126 = get_local ptr u64, i0, !195
        v127 = const u64 1, !196
        v128 = add v118, v127, !198
        v129 = get_local ptr u64, i0, !199
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v128), !200

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v130 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !202
        v131 = load v130, !203
        v132 = const u64 5, !204
        v133 = call read_bytes_10(v54, v132), !208
        v134 = get_local ptr slice, data0, !210
        store v133 to v134, !211
        v135 = get_local ptr slice, data0, !213
        v136 = load v135, !214
        v137 = call ptr_11(v136), !216
        v138 = asm(s: v137) -> string<5> s, !218 {
        }
        v139 = call abi_decode_32(v54), !220
        v140 = get_local ptr { string<5>, bool }, __anon_02, !222
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr string<5>, v141, !223
        store v138 to v142, !224
        v143 = const u64 1
        v144 = get_elem_ptr v140, ptr bool, v143, !225
        store v139 to v144, !226
        v145 = load v140, !227
        v146 = call abi_decode_39(v54), !229
        v147 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_01, !231
        v148 = const u64 0
        v149 = get_elem_ptr v147, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v148, !232
        store v94 to v149, !233
        v150 = const u64 1
        v151 = get_elem_ptr v147, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v150, !234
        store v131 to v151, !235
        v152 = const u64 2
        v153 = get_elem_ptr v147, ptr { string<5>, bool }, v152, !236
        store v145 to v153, !237
        v154 = const u64 3
        v155 = get_elem_ptr v147, ptr { u64 }, v154, !238
        store v146 to v155, !239
        v156 = load v147, !240
        v157 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !241
        store v156 to v157, !241
        v158 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !242
        v159 = const u64 0
        v160 = get_elem_ptr v158, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v159, !243
        v161 = load v160
        v162 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !244
        v163 = const u64 1
        v164 = get_elem_ptr v162, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v163, !245
        v165 = load v164
        v166 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !246
        v167 = const u64 2
        v168 = get_elem_ptr v166, ptr { string<5>, bool }, v167, !247
        v169 = load v168
        v170 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !248
        v171 = const u64 3
        v172 = get_elem_ptr v170, ptr { u64 }, v171, !249
        v173 = load v172
        v174 = call new_42(), !252
        v175 = ptr_to_int v174 to u64, !254
        v176 = int_to_ptr v175 to ptr { { u64, u64, u64 } }, !255
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr { u64, u64, u64 }, v177, !257
        v179 = load v178, !258
        v180 = asm(buffer: v179) -> { u64, u64, u64 } buffer, !259 {
        }
        v181 = get_local ptr { u64, u64, u64 }, __anon_03, !260
        store v180 to v181, !261
        v182 = const u64 0
        v183 = get_elem_ptr v181, ptr u64, v182, !262
        v184 = load v183, !263
        v185 = int_to_ptr v184 to ptr u8, !264
        v186 = const u64 1
        v187 = get_elem_ptr v181, ptr u64, v186, !265
        v188 = load v187, !266
        v189 = const u64 2
        v190 = get_elem_ptr v181, ptr u64, v189, !267
        v191 = load v190, !268
        v192 = get_local ptr string<6>, __anon_10, !269
        v193 = const string<6> "fuel42"
        store v193 to v192, !270
        v194 = ptr_to_int v185 to u64, !271
        v195 = add v194, v191, !272
        v196 = int_to_ptr v195 to ptr u8, !273
        mem_copy_bytes v196, v192, 6, !274
        v197 = const u64 6
        v198 = add v191, v197, !275
        v199 = ptr_to_int v185 to u64, !276
        v200 = get_local ptr { u64, u64, u64 }, __anon_20, !277
        v201 = const u64 0
        v202 = get_elem_ptr v200, ptr u64, v201, !278
        store v199 to v202, !279
        v203 = const u64 1
        v204 = get_elem_ptr v200, ptr u64, v203, !280
        store v188 to v204, !281
        v205 = const u64 2
        v206 = get_elem_ptr v200, ptr u64, v205, !282
        store v198 to v206, !283
        v207 = asm(buffer: v200) -> { u64, u64, u64 } buffer, !284 {
        }
        v208 = get_local ptr { { u64, u64, u64 } }, __anon_30, !286
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr { u64, u64, u64 }, v209, !287
        store v207 to v210, !288
        v211 = load v208, !289
        v212 = get_local ptr { { u64, u64, u64 } }, buffer1, !291
        store v211 to v212, !292
        v213 = get_local ptr { { u64, u64, u64 } }, buffer1, !294
        v214 = load v213, !250
        v215 = call as_raw_slice_43(v214), !296
        v216 = get_local ptr slice, result_complex_function, !297
        store v215 to v216, !297
        v217 = get_local ptr slice, result_complex_function, !298
        v218 = load v217
        v219 = call ptr_11(v218), !299
        v220 = get_local ptr slice, result_complex_function, !300
        v221 = load v220
        v222 = call len_45(v221), !301
        retd v219 v222, !302
        v223 = const unit ()
        br block2(v223)

        block2(v224: ()):
        v225 = get_local ptr slice, _method_name, !303
        v226 = load v225
        v227 = const string<18> "take_generic_array"
        v228 = ptr_to_int v227 to u64, !304
        v229 = get_local ptr { u64, u64 }, __anon_2, !304
        v230 = const u64 0
        v231 = get_elem_ptr v229, ptr u64, v230
        store v228 to v231, !304
        v232 = const u64 1
        v233 = get_elem_ptr v229, ptr u64, v232
        v234 = const u64 18
        store v234 to v233, !304
        v235 = get_local ptr slice, __anon_3, !304
        mem_copy_bytes v235, v229, 16
        v236 = load v235
        v237 = call eq_13(v226, v236), !305
        v238 = const unit ()
        cbr v237, block3(), block5(v238), !305

        block3():
        v239 = call from_second_parameter_19(), !307
        v240 = get_local ptr { u64, u64 }, buffer2, !308
        store v239 to v240, !309
        v241 = get_local ptr { u64, u64 }, buffer2, !310
        v242 = call read_53(v241), !314
        v243 = get_local ptr u8, first1, !315
        v244 = get_local ptr [u8; 3], __anon_0001, !316
        v245 = get_local ptr u8, first1, !317
        v246 = const u64 0
        v247 = get_elem_ptr v244, ptr u8, v246, !318
        store v242 to v247, !319
        v248 = get_local ptr u8, first1, !320
        v249 = const u64 1
        v250 = get_elem_ptr v244, ptr u8, v249, !321
        store v242 to v250, !322
        v251 = get_local ptr u8, first1, !323
        v252 = const u64 2
        v253 = get_elem_ptr v244, ptr u8, v252, !324
        store v242 to v253, !325
        v254 = load v244, !326
        v255 = get_local ptr [u8; 3], array1, !327
        store v254 to v255, !328
        v256 = get_local ptr u64, i1, !329
        v257 = const u64 1, !112
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v257), !330

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v258: u64):
        v259 = get_local ptr u64, i1, !331
        v260 = const u64 3, !116
        v261 = cmp lt v258 v260, !332
        cbr v261, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !333

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v262 = call read_53(v241), !334
        v263 = get_local ptr [u8; 3], array1, !335
        v264 = get_local ptr u64, i1, !336
        v265 = get_elem_ptr v263, ptr u8, v258, !337
        store v262 to v265, !338
        v266 = get_local ptr u64, i1, !339
        v267 = const u64 1, !130
        v268 = add v258, v267, !340
        v269 = get_local ptr u64, i1, !341
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v268), !342

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v270 = get_local ptr [u8; 3], array1, !343
        v271 = load v270, !344
        v272 = call abi_decode_59(v241), !347
        v273 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !349
        store v272 to v273, !350
        v274 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_011, !352
        v275 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !354
        v276 = load v275, !355
        v277 = const u64 0
        v278 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v277, !356
        store v276 to v278, !357
        v279 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !358
        v280 = load v279, !359
        v281 = const u64 1
        v282 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v281, !360
        store v280 to v282, !361
        v283 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !362
        v284 = load v283, !363
        v285 = const u64 2
        v286 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v285, !364
        store v284 to v286, !365
        v287 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !366
        v288 = load v287, !367
        v289 = const u64 3
        v290 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v289, !368
        store v288 to v290, !369
        v291 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !370
        v292 = load v291, !371
        v293 = const u64 4
        v294 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v293, !372
        store v292 to v294, !373
        v295 = load v274, !374
        v296 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !376
        store v295 to v296, !377
        v297 = get_local ptr u64, i00, !379
        v298 = const u64 1, !380
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v298), !381

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v299: u64):
        v300 = get_local ptr u64, i00, !383
        v301 = const u64 5, !384
        v302 = cmp lt v299 v301, !386
        cbr v302, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !387

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v303 = call abi_decode_59(v241), !389
        v304 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !391
        v305 = get_local ptr u64, i00, !393
        v306 = get_elem_ptr v304, ptr { u8, { u64, ( u64 | bool ) } }, v299, !394
        store v303 to v306, !395
        v307 = get_local ptr u64, i00, !397
        v308 = const u64 1, !398
        v309 = add v299, v308, !400
        v310 = get_local ptr u64, i00, !401
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v309), !402

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v311 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !404
        v312 = load v311, !405
        v313 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_002, !407
        v314 = const u64 0
        v315 = get_elem_ptr v313, ptr [u8; 3], v314, !408
        store v271 to v315, !409
        v316 = const u64 1
        v317 = get_elem_ptr v313, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v316, !410
        store v312 to v317, !411
        v318 = load v313, !412
        v319 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_04, !414
        v320 = const u64 0
        v321 = get_elem_ptr v319, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v320, !415
        store v318 to v321, !416
        v322 = load v319, !417
        v323 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !418
        store v322 to v323, !418
        v324 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !419
        v325 = const u64 0
        v326 = get_elem_ptr v324, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v325, !420
        v327 = load v326
        v328 = call new_42(), !422
        v329 = ptr_to_int v328 to u64, !423
        v330 = int_to_ptr v329 to ptr { { u64, u64, u64 } }, !424
        v331 = const u64 0
        v332 = get_elem_ptr v330, ptr { u64, u64, u64 }, v331, !425
        v333 = load v332, !426
        v334 = asm(buffer: v333) -> { u64, u64, u64 } buffer, !427 {
        }
        v335 = get_local ptr { u64, u64, u64 }, __anon_05, !428
        store v334 to v335, !429
        v336 = const u64 0
        v337 = get_elem_ptr v335, ptr u64, v336, !430
        v338 = load v337, !431
        v339 = int_to_ptr v338 to ptr u8, !432
        v340 = const u64 1
        v341 = get_elem_ptr v335, ptr u64, v340, !433
        v342 = load v341, !434
        v343 = const u64 2
        v344 = get_elem_ptr v335, ptr u64, v343, !435
        v345 = load v344, !436
        v346 = ptr_to_int v339 to u64, !437
        v347 = add v346, v345, !438
        v348 = int_to_ptr v347 to ptr u64, !439
        v349 = const u64 0, !441
        store v349 to v348, !442
        v350 = const u64 8
        v351 = add v345, v350, !443
        v352 = ptr_to_int v339 to u64, !444
        v353 = get_local ptr { u64, u64, u64 }, __anon_11, !445
        v354 = const u64 0
        v355 = get_elem_ptr v353, ptr u64, v354, !446
        store v352 to v355, !447
        v356 = const u64 1
        v357 = get_elem_ptr v353, ptr u64, v356, !448
        store v342 to v357, !449
        v358 = const u64 2
        v359 = get_elem_ptr v353, ptr u64, v358, !450
        store v351 to v359, !451
        v360 = asm(buffer: v353) -> { u64, u64, u64 } buffer, !452 {
        }
        v361 = get_local ptr { { u64, u64, u64 } }, __anon_21, !454
        v362 = const u64 0
        v363 = get_elem_ptr v361, ptr { u64, u64, u64 }, v362, !455
        store v360 to v363, !456
        v364 = load v361, !457
        v365 = get_local ptr { { u64, u64, u64 } }, buffer3, !458
        store v364 to v365, !459
        v366 = get_local ptr { { u64, u64, u64 } }, buffer3, !460
        v367 = load v366, !421
        v368 = call as_raw_slice_43(v367), !461
        v369 = get_local ptr slice, result_take_generic_array, !462
        store v368 to v369, !462
        v370 = get_local ptr slice, result_take_generic_array, !463
        v371 = load v370
        v372 = call ptr_11(v371), !464
        v373 = get_local ptr slice, result_take_generic_array, !465
        v374 = load v373
        v375 = call len_45(v374), !466
        retd v372 v375, !467
        v376 = const unit ()
        br block5(v376)

        block5(v377: ()):
        v378 = get_local ptr slice, _method_name, !468
        v379 = load v378
        v380 = const string<36> "take_generic_struct_containing_tuple"
        v381 = ptr_to_int v380 to u64, !469
        v382 = get_local ptr { u64, u64 }, __anon_4, !469
        v383 = const u64 0
        v384 = get_elem_ptr v382, ptr u64, v383
        store v381 to v384, !469
        v385 = const u64 1
        v386 = get_elem_ptr v382, ptr u64, v385
        v387 = const u64 36
        store v387 to v386, !469
        v388 = get_local ptr slice, __anon_5, !469
        mem_copy_bytes v388, v382, 16
        v389 = load v388
        v390 = call eq_13(v379, v389), !470
        v391 = const unit ()
        cbr v390, block6(), block8(v391), !470

        block6():
        v392 = call from_second_parameter_19(), !472
        v393 = get_local ptr { u64, u64 }, buffer4, !473
        store v392 to v393, !474
        v394 = get_local ptr { u64, u64 }, buffer4, !475
        v395 = call abi_decode_39(v394), !478
        v396 = call read_53(v394), !481
        v397 = asm(input: v396) -> u64 input, !485 {
        }
        v398 = get_local ptr u64, a, !487
        v399 = call read_53(v394), !489
        v400 = asm(input: v399) -> u64 input, !491 {
        }
        v401 = get_local ptr u64, b, !493
        v402 = get_local ptr u64, a, !495
        v403 = const u64 8, !496
        v404 = lsh v397, v403, !498
        v405 = const u64 65535, !500
        v406 = and v404, v405, !501
        v407 = get_local ptr u64, b, !503
        v408 = or v406, v400, !505
        v409 = call abi_decode_74(v394), !507
        v410 = get_local ptr { { u64 }, u64, u64 }, __anon_0002, !509
        v411 = const u64 0
        v412 = get_elem_ptr v410, ptr { u64 }, v411, !510
        store v395 to v412, !511
        v413 = const u64 1
        v414 = get_elem_ptr v410, ptr u64, v413, !512
        store v408 to v414, !513
        v415 = const u64 2
        v416 = get_elem_ptr v410, ptr u64, v415, !514
        store v409 to v416, !515
        v417 = load v410, !516
        v418 = call abi_decode_74(v394), !518
        v419 = call abi_decode_39(v394), !519
        v420 = get_local ptr { u64, { u64 } }, __anon_012, !520
        v421 = const u64 0
        v422 = get_elem_ptr v420, ptr u64, v421, !521
        store v418 to v422, !522
        v423 = const u64 1
        v424 = get_elem_ptr v420, ptr { u64 }, v423, !523
        store v419 to v424, !524
        v425 = load v420, !525
        v426 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_003, !527
        v427 = const u64 0
        v428 = get_elem_ptr v426, ptr { { u64 }, u64, u64 }, v427, !528
        store v417 to v428, !529
        v429 = const u64 1
        v430 = get_elem_ptr v426, ptr { u64, { u64 } }, v429, !530
        store v425 to v430, !531
        v431 = load v426, !532
        v432 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_06, !533
        v433 = const u64 0
        v434 = get_elem_ptr v432, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v433, !534
        store v431 to v434, !535
        v435 = load v432, !536
        v436 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !537
        store v435 to v436, !537
        v437 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !538
        v438 = const u64 0
        v439 = get_elem_ptr v437, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v438, !539
        v440 = load v439
        v441 = call new_42(), !541
        v442 = get_local ptr { { u64, u64, u64 } }, buffer5, !542
        store v441 to v442, !543
        v443 = get_local ptr { { u64, u64, u64 } }, buffer5, !544
        v444 = load v443, !540
        v445 = call as_raw_slice_43(v444), !545
        v446 = get_local ptr slice, result_take_generic_struct_containing_tuple, !546
        store v445 to v446, !546
        v447 = get_local ptr slice, result_take_generic_struct_containing_tuple, !547
        v448 = load v447
        v449 = call ptr_11(v448), !548
        v450 = get_local ptr slice, result_take_generic_struct_containing_tuple, !549
        v451 = load v450
        v452 = call len_45(v451), !550
        retd v449 v452, !551
        v453 = const unit ()
        br block8(v453)

        block8(v454: ()):
        v455 = const u64 123, !552
        revert v455, !553
    }

    pub fn read_3(self !555: u64) -> u64, !556 {
        entry(self: u64):
        br block1(), !557

        block0():
        v0 = asm(ptr: self) -> u64 ptr, !558 {
        }
        br block5(v0)

        block1():
        br block3(), !559

        block2():
        v1 = asm(ptr: self, val) -> u64 val, !560 {
            lb     val ptr i0, !561
        }
        br block4(v1)

        block3():
        v2 = asm(ptr: self, val) -> u64 val, !562 {
            lw     val ptr i0, !563
        }
        br block4(v2)

        block4(v3: u64):
        br block5(v3)

        block5(v4: u64):
        ret u64 v4
    }

    pub fn abi_decode_5(buffer !564: ptr { u64, u64 }) -> u64, !565 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !568
        v2 = load v1, !566
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !570
        v5 = load v4, !566
        v6 = const u64 1
        v7 = mul v6, v5, !572
        v8 = add v2, v7, !573
        v9 = get_local ptr u64, ptr, !575
        v10 = get_local ptr u64, size, !577
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !578
        v13 = load v12, !566
        v14 = get_local ptr u64, size, !580
        v15 = const u64 8
        v16 = add v13, v15, !582
        v17 = get_local ptr u64, next_pos, !584
        br read_6_block1(), !586

        read_6_block0():
        v18 = get_local ptr u64, ptr, !588
        v19 = asm(ptr: v8) -> u64 ptr, !590 {
        }
        v20 = get_local ptr u64, v, !592
        v21 = get_local ptr u64, next_pos, !594
        v22 = const u64 1
        v23 = get_elem_ptr buffer, ptr u64, v22, !596
        store v16 to v23, !597
        v24 = get_local ptr u64, v, !599
        br read_6_block5(v19), !566

        read_6_block1():
        v25 = get_local ptr u64, size, !601
        br read_6_block3(), !603

        read_6_block2():
        v26 = get_local ptr u64, ptr, !605
        v27 = asm(ptr: v8, val) -> u64 val, !607 {
            lb     val ptr i0, !608
        }
        v28 = get_local ptr u64, v_, !610
        v29 = get_local ptr u64, next_pos, !612
        v30 = const u64 1
        v31 = get_elem_ptr buffer, ptr u64, v30, !614
        store v16 to v31, !615
        v32 = get_local ptr u64, v_, !617
        br read_6_block4(v27), !566

        read_6_block3():
        v33 = get_local ptr u64, ptr, !619
        v34 = asm(ptr: v8, val) -> u64 val, !621 {
            lw     val ptr i0, !622
        }
        v35 = get_local ptr u64, v__, !624
        v36 = get_local ptr u64, next_pos, !626
        v37 = const u64 1
        v38 = get_elem_ptr buffer, ptr u64, v37, !628
        store v16 to v38, !629
        v39 = get_local ptr u64, v__, !631
        br read_6_block4(v34), !566

        read_6_block4(v40: u64):
        br read_6_block5(v40), !566

        read_6_block5(v41: u64):
        ret u64 v41
    }

    pub fn read_bytes_10(self !632: ptr { u64, u64 }, count !633: u64) -> slice, !634 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !569
        v2 = load v1
        v3 = add v2, count, !635
        v4 = get_local ptr u64, next_pos, !636
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !567
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !569
        v10 = load v9
        v11 = const u64 1
        v12 = mul v11, v10, !637
        v13 = add v7, v12, !637
        v14 = get_local ptr u64, ptr, !638
        v15 = get_local ptr u64, ptr, !639
        v16 = get_local ptr { u64, u64 }, __anon_0, !640
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !640
        store v13 to v18, !640
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19, !640
        store count to v20, !640
        v21 = asm(ptr: v16) -> slice ptr, !641 {
        }
        v22 = get_local ptr slice, slice, !642
        store v21 to v22, !642
        v23 = get_local ptr u64, next_pos, !643
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !644
        store v3 to v25, !644
        v26 = get_local ptr slice, slice, !645
        v27 = load v26
        ret slice v27
    }

    pub fn ptr_11(self !647: slice) -> u64, !648 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !651 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !652
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self !654: slice, other !655: slice) -> bool, !656 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !657
        v1 = call len_16(other), !658
        v2 = cmp eq v0 v1, !661
        v3 = const bool false, !662
        v4 = cmp eq v2 v3, !664
        v5 = const bool false, !665
        cbr v4, block2(v5), block1(), !659

        block1():
        v6 = call as_ptr_17(self), !666
        v7 = get_local ptr u64, self_ptr, !667
        v8 = call as_ptr_17(other), !668
        v9 = get_local ptr u64, other_ptr, !669
        v10 = call len_16(self), !670
        v11 = get_local ptr u64, l, !671
        v12 = get_local ptr u64, self_ptr, !672
        v13 = get_local ptr u64, other_ptr, !673
        v14 = get_local ptr u64, l, !674
        v15 = asm(r1: v6, r2: v8, r3: v10, r4) -> bool r4, !675 {
            meq    r4 r1 r2 r3, !676
        }
        br block2(v15)

        block2(v16: bool):
        ret bool v16
    }

    pub fn len_16(self !678: slice) -> u64, !679 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !680 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !681
        store v0 to v1, !681
        v2 = get_local ptr { u64, u64 }, __tuple_2, !681
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !681
        store v3 to v4, !681
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !681
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !681
        v8 = load v7
        v9 = get_local ptr u64, _, !681
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !681
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !681
        v13 = load v12
        v14 = get_local ptr u64, len, !681
        v15 = get_local ptr u64, len, !682
        ret u64 v13
    }

    pub fn as_ptr_17(self !683: slice) -> u64, !684 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !685 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !686
        store v0 to v1, !686
        v2 = get_local ptr { u64, u64 }, __tuple_1, !686
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !686
        store v3 to v4, !686
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !686
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !686
        v8 = load v7
        v9 = get_local ptr u64, ptr, !686
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !686
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !686
        v13 = load v12
        v14 = get_local ptr u64, _, !686
        v15 = get_local ptr u64, ptr, !687
        ret u64 v8
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !688 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !689
        v1 = asm() -> u64 fp, !690 {
        }
        v2 = get_local ptr u64, ptr, !691
        v3 = get_local ptr u64, ptr, !692
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !693
        v5 = const u64 592, !694
        v6 = add v1, v5, !694
        v7 = get_local ptr u64, ptr_, !695
        v8 = get_local ptr u64, ptr_, !696
        v9 = call read_3(v6), !697
        v10 = get_local ptr u64, ptr__, !698
        v11 = get_local ptr u64, ptr__, !699
        v12 = asm(ptr: v9) -> u64 ptr, !700 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_0, !701
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !701
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 0, !702
        store v18 to v17, !701
        v19 = load v13
        ret { u64, u64 } v19
    }

    pub fn decode_24(self !703: ptr { u64, u64 }) -> b256, !704 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !706
        v2 = load v1, !707
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !708
        v5 = load v4, !709
        v6 = const u64 1
        v7 = mul v6, v5, !710
        v8 = add v2, v7, !711
        v9 = get_local ptr u64, ptr, !712
        v10 = get_local ptr u64, size, !713
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !714
        v13 = load v12, !715
        v14 = get_local ptr u64, size, !716
        v15 = const u64 32
        v16 = add v13, v15, !717
        v17 = get_local ptr u64, next_pos, !718
        br abi_decode_25_read_26_block0(), !719

        abi_decode_25_read_26_block0():
        v18 = get_local ptr u64, ptr, !720
        v19 = asm(ptr: v8) -> b256 ptr, !721 {
        }
        v20 = get_local ptr b256, v, !722
        store v19 to v20, !723
        v21 = get_local ptr u64, next_pos, !724
        v22 = const u64 1
        v23 = get_elem_ptr self, ptr u64, v22, !725
        store v16 to v23, !726
        v24 = get_local ptr b256, v, !727
        v25 = load v24, !728
        br abi_decode_25_read_26_block5(v25), !729

        abi_decode_25_read_26_block1():
        v26 = get_local ptr u64, size, !730
        br abi_decode_25_read_26_block3(), !731

        abi_decode_25_read_26_block2():
        v27 = get_local ptr u64, ptr, !732
        v28 = asm(ptr: v8, val) -> b256 val, !733 {
            lb     val ptr i0, !608
        }
        v29 = get_local ptr b256, v_, !734
        store v28 to v29, !735
        v30 = get_local ptr u64, next_pos, !736
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !737
        store v16 to v32, !738
        v33 = get_local ptr b256, v_, !739
        v34 = load v33, !740
        br abi_decode_25_read_26_block4(v34), !741

        abi_decode_25_read_26_block3():
        v35 = get_local ptr u64, ptr, !742
        v36 = asm(ptr: v8, val) -> b256 val, !743 {
            lw     val ptr i0, !622
        }
        v37 = get_local ptr b256, v__, !744
        store v36 to v37, !745
        v38 = get_local ptr u64, next_pos, !746
        v39 = const u64 1
        v40 = get_elem_ptr self, ptr u64, v39, !747
        store v16 to v40, !748
        v41 = get_local ptr b256, v__, !749
        v42 = load v41, !750
        br abi_decode_25_read_26_block4(v42), !751

        abi_decode_25_read_26_block4(v43: b256):
        br abi_decode_25_read_26_block5(v43), !752

        abi_decode_25_read_26_block5(v44: b256):
        ret b256 v44
    }

    pub fn decode_28(self !703: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !704 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !754
        v1 = get_local ptr u64, variant, !756
        v2 = get_local ptr u64, variant, !758
        v3 = get_local ptr u64, __matched_value_1, !760
        v4 = get_local ptr u64, __matched_value_1, !761
        v5 = const u64 0, !762
        v6 = cmp eq v0 v5, !764
        cbr v6, abi_decode_29_block0(), abi_decode_29_block1(), !765

        abi_decode_29_block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !767
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !768
        v10 = const u64 0, !766
        store v10 to v9, !769
        v11 = call abi_decode_5(self), !771
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !772
        store v11 to v14, !773
        v15 = load v7, !85
        br abi_decode_29_block5(v15), !85

        abi_decode_29_block1():
        v16 = get_local ptr u64, __matched_value_1, !774
        v17 = const u64 1, !775
        v18 = cmp eq v0 v17, !777
        cbr v18, abi_decode_29_block2(), abi_decode_29_block3(), !778

        abi_decode_29_block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !779
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !780
        v22 = const u64 1, !766
        store v22 to v21, !781
        v23 = call abi_decode_32(self), !783
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !784
        store v23 to v26, !785
        v27 = load v19, !85
        br abi_decode_29_block5(v27), !85

        abi_decode_29_block3():
        v28 = const u64 0, !786
        revert v28, !788

        abi_decode_29_block5(v29: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v29
    }

    pub fn abi_decode_32(buffer !789: ptr { u64, u64 }) -> bool, !790 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !792
        v2 = load v1, !791
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !793
        v5 = load v4, !791
        v6 = const u64 1
        v7 = mul v6, v5, !794
        v8 = add v2, v7, !795
        v9 = get_local ptr u64, ptr, !796
        v10 = get_local ptr u64, size, !797
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !798
        v13 = load v12, !791
        v14 = get_local ptr u64, size, !799
        v15 = const u64 1
        v16 = add v13, v15, !800
        v17 = get_local ptr u64, next_pos, !801
        br read_33_block1(), !802

        read_33_block0():
        v18 = get_local ptr u64, ptr, !803
        v19 = asm(ptr: v8) -> bool ptr, !804 {
        }
        v20 = get_local ptr bool, v, !805
        v21 = get_local ptr u64, next_pos, !806
        v22 = const u64 1
        v23 = get_elem_ptr buffer, ptr u64, v22, !807
        store v16 to v23, !808
        v24 = get_local ptr bool, v, !809
        br read_33_block5(v19), !791

        read_33_block1():
        v25 = get_local ptr u64, size, !810
        br read_33_block2(), !811

        read_33_block2():
        v26 = get_local ptr u64, ptr, !812
        v27 = asm(ptr: v8, val) -> bool val, !813 {
            lb     val ptr i0, !608
        }
        v28 = get_local ptr bool, v_, !814
        v29 = get_local ptr u64, next_pos, !815
        v30 = const u64 1
        v31 = get_elem_ptr buffer, ptr u64, v30, !816
        store v16 to v31, !817
        v32 = get_local ptr bool, v_, !818
        br read_33_block4(v27), !791

        read_33_block3():
        v33 = get_local ptr u64, ptr, !819
        v34 = asm(ptr: v8, val) -> bool val, !820 {
            lw     val ptr i0, !622
        }
        v35 = get_local ptr bool, v__, !821
        v36 = get_local ptr u64, next_pos, !822
        v37 = const u64 1
        v38 = get_elem_ptr buffer, ptr u64, v37, !823
        store v16 to v38, !824
        v39 = get_local ptr bool, v__, !825
        br read_33_block4(v34), !791

        read_33_block4(v40: bool):
        br read_33_block5(v40), !791

        read_33_block5(v41: bool):
        ret bool v41
    }

    pub fn decode_35(self !703: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !704 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !826
        v1 = call decode_28(self), !827
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !828
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !85
        store v0 to v4, !829
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !85
        store v1 to v6, !830
        v7 = load v2, !85
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_39(buffer !831: ptr { u64, u64 }) -> { u64 }, !832 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !834
        v1 = get_local ptr { u64 }, __anon_0, !835
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !835
        v4 = load v1
        ret { u64 } v4
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !836 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !837
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !837
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !838: { { u64, u64, u64 } }) -> slice, !839 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !256
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn len_45(self !840: slice) -> u64, !841 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !843 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !844
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !845: ptr { u64, u64 }) -> u8, !846 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !567
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !569
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !571
        v8 = add v2, v7, !571
        v9 = get_local ptr u64, ptr, !574
        v10 = get_local ptr u64, size, !576
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !569
        v13 = load v12
        v14 = get_local ptr u64, size, !579
        v15 = const u64 1
        v16 = add v13, v15, !581
        v17 = get_local ptr u64, next_pos, !583
        br block1(), !585

        block0():
        v18 = get_local ptr u64, ptr, !587
        v19 = asm(ptr: v8) -> u8 ptr, !589 {
        }
        v20 = get_local ptr u8, v, !591
        v21 = get_local ptr u64, next_pos, !593
        v22 = const u64 1
        v23 = get_elem_ptr self, ptr u64, v22, !595
        store v16 to v23, !595
        v24 = get_local ptr u8, v, !598
        br block5(v19)

        block1():
        v25 = get_local ptr u64, size, !600
        br block2(), !602

        block2():
        v26 = get_local ptr u64, ptr, !604
        v27 = asm(ptr: v8, val) -> u8 val, !606 {
            lb     val ptr i0, !608
        }
        v28 = get_local ptr u8, v_, !609
        v29 = get_local ptr u64, next_pos, !611
        v30 = const u64 1
        v31 = get_elem_ptr self, ptr u64, v30, !613
        store v16 to v31, !613
        v32 = get_local ptr u8, v_, !616
        br block4(v27)

        block3():
        v33 = get_local ptr u64, ptr, !618
        v34 = asm(ptr: v8, val) -> u8 val, !620 {
            lw     val ptr i0, !622
        }
        v35 = get_local ptr u8, v__, !623
        v36 = get_local ptr u64, next_pos, !625
        v37 = const u64 1
        v38 = get_elem_ptr self, ptr u64, v37, !627
        store v16 to v38, !627
        v39 = get_local ptr u8, v__, !630
        br block4(v34)

        block4(v40: u8):
        br block5(v40)

        block5(v41: u8):
        ret u8 v41
    }

    pub fn abi_decode_59(buffer !847: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !848 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !849
        v1 = call decode_28(buffer), !138
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !140
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !140
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !140
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_74(buffer !850: ptr { u64, u64 }) -> u64, !851 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !852
        v1 = asm(input: v0) -> u64 input, !854 {
        }
        v2 = get_local ptr u64, a, !855
        v3 = call read_53(buffer), !856
        v4 = asm(input: v3) -> u64 input, !858 {
        }
        v5 = get_local ptr u64, b, !859
        v6 = call read_53(buffer), !860
        v7 = asm(input: v6) -> u64 input, !862 {
        }
        v8 = get_local ptr u64, c, !863
        v9 = call read_53(buffer), !864
        v10 = asm(input: v9) -> u64 input, !866 {
        }
        v11 = get_local ptr u64, d, !867
        v12 = get_local ptr u64, a, !868
        v13 = const u64 24, !869
        v14 = lsh v1, v13, !870
        v15 = const u64 4294967295, !871
        v16 = and v14, v15, !870
        v17 = get_local ptr u64, b, !872
        v18 = const u64 16, !873
        v19 = lsh v4, v18, !874
        v20 = and v19, v15, !874
        v21 = or v16, v20, !875
        v22 = get_local ptr u64, c, !876
        v23 = const u64 8, !877
        v24 = lsh v7, v23, !878
        v25 = and v24, v15, !878
        v26 = or v21, v25, !879
        v27 = get_local ptr u64, d, !880
        v28 = or v26, v10, !881
        ret u64 v28
    }
}

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
contract {
    pub entry fn __entry() -> (), !1 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local [b256; 3] __anon_0000
        local [u8; 3] __anon_0001
        local { { u64 }, u64, u64 } __anon_0002
        local { [b256; 3], { u64, ( u64 | bool ) } } __anon_001
        local { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } __anon_002
        local { { { u64 }, u64, u64 }, { u64, { u64 } } } __anon_003
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } __anon_01
        local [{ u64, { u64, ( u64 | bool ) } }; 4] __anon_010
        local [{ u8, { u64, ( u64 | bool ) } }; 5] __anon_011
        local { u64, { u64 } } __anon_012
        local { string<5>, bool } __anon_02
        local { u64, u64, u64 } __anon_03
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } __anon_04
        local { u64, u64, u64 } __anon_05
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } __anon_06
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local u64 a
        local { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } } args
        local { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } } args_
        local { { { { u64 }, u64, u64 }, { u64, { u64 } } } } args__
        local mut [b256; 3] array
        local mut [{ u64, { u64, ( u64 | bool ) } }; 4] array0
        local mut [{ u8, { u64, ( u64 | bool ) } }; 5] array00
        local mut [u8; 3] array1
        local u64 b
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local b256 first
        local { u64, { u64, ( u64 | bool ) } } first0
        local { u8, { u64, ( u64 | bool ) } } first00
        local u8 first1
        local mut u64 i
        local mut u64 i0
        local mut u64 i00
        local mut u64 i1
        local u64 len
        local u64 ptr
        local u64 ptr_
        local u64 ptr__
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !6
        v1 = asm() -> u64 fp, !8 {
        }
        v2 = get_local ptr u64, ptr, !10
        v3 = get_local ptr u64, ptr, !12
        v4 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !14
        v5 = const u64 584, !16
        v6 = add v1, v5, !17
        v7 = get_local ptr u64, ptr_, !19
        v8 = get_local ptr u64, ptr_, !21
        v9 = call read_3(v6), !23
        v10 = get_local ptr u64, ptr__, !25
        v11 = get_local ptr u64, ptr__, !27
        v12 = asm(ptr: v9) -> u64 ptr, !29 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_00, !31
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !32
        store v12 to v15, !33
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !34
        v18 = const u64 0, !35
        store v18 to v17, !36
        v19 = load v13, !37
        v20 = get_local ptr { u64, u64 }, buffer, !39
        store v19 to v20, !40
        v21 = get_local ptr { u64, u64 }, buffer, !42
        v22 = call abi_decode_5(v21), !45
        v23 = get_local ptr u64, len, !47
        v24 = get_local ptr u64, len, !49
        v25 = call read_bytes_10(v21, v22), !51
        v26 = get_local ptr slice, data, !53
        store v25 to v26, !54
        v27 = get_local ptr slice, data, !56
        v28 = load v27, !57
        v29 = call ptr_11(v28), !59
        v30 = get_local ptr u64, len, !61
        v31 = get_local ptr { u64, u64 }, __anon_000, !63
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !64
        store v29 to v33, !65
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr u64, v34, !66
        store v22 to v35, !67
        v36 = asm(s: v31) -> slice s, !69 {
        }
        v37 = get_local ptr slice, _method_name, !70
        store v36 to v37, !70
        v38 = get_local ptr slice, _method_name, !71
        v39 = load v38
        v40 = const string<16> "complex_function"
        v41 = ptr_to_int v40 to u64, !72
        v42 = get_local ptr { u64, u64 }, __anon_0, !72
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr u64, v43
        store v41 to v44, !72
        v45 = const u64 1
        v46 = get_elem_ptr v42, ptr u64, v45
        v47 = const u64 16
        store v47 to v46, !72
        v48 = get_local ptr slice, __anon_1, !72
        mem_copy_bytes v48, v42, 16
        v49 = load v48
        v50 = call eq_13(v39, v49), !73
        v51 = const unit ()
        cbr v50, block0(), block2(v51), !73

        block0():
        v52 = call from_second_parameter_19(), !76
        v53 = get_local ptr { u64, u64 }, buffer0, !78
        store v52 to v53, !79
        v54 = get_local ptr { u64, u64 }, buffer0, !81
        v55 = call decode_24(v54), !87
        v56 = get_local ptr b256, first, !89
        store v55 to v56, !90
        v57 = get_local ptr [b256; 3], __anon_0000, !92
        v58 = get_local ptr b256, first, !94
        v59 = load v58, !95
        v60 = const u64 0
        v61 = get_elem_ptr v57, ptr b256, v60, !96
        store v59 to v61, !97
        v62 = get_local ptr b256, first, !98
        v63 = load v62, !99
        v64 = const u64 1
        v65 = get_elem_ptr v57, ptr b256, v64, !100
        store v63 to v65, !101
        v66 = get_local ptr b256, first, !102
        v67 = load v66, !103
        v68 = const u64 2
        v69 = get_elem_ptr v57, ptr b256, v68, !104
        store v67 to v69, !105
        v70 = load v57, !106
        v71 = get_local ptr [b256; 3], array, !108
        store v70 to v71, !109
        v72 = get_local ptr u64, i, !111
        v73 = const u64 1, !112
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v73), !113

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v74: u64):
        v75 = get_local ptr u64, i, !115
        v76 = const u64 3, !116
        v77 = cmp lt v74 v76, !118
        cbr v77, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !119

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v78 = call decode_24(v54), !121
        v79 = get_local ptr [b256; 3], array, !123
        v80 = get_local ptr u64, i, !125
        v81 = get_elem_ptr v79, ptr b256, v74, !126
        store v78 to v81, !127
        v82 = get_local ptr u64, i, !129
        v83 = const u64 1, !130
        v84 = add v74, v83, !132
        v85 = get_local ptr u64, i, !133
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v84), !134

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v86 = get_local ptr [b256; 3], array, !136
        v87 = load v86, !137
        v88 = call decode_28(v54), !139
        v89 = get_local ptr { [b256; 3], { u64, ( u64 | bool ) } }, __anon_001, !141
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr [b256; 3], v90, !142
        store v87 to v91, !143
        v92 = const u64 1
        v93 = get_elem_ptr v89, ptr { u64, ( u64 | bool ) }, v92, !144
        store v88 to v93, !145
        v94 = load v89, !146
        v95 = call decode_35(v54), !149
        v96 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !151
        store v95 to v96, !152
        v97 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], __anon_010, !154
        v98 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !156
        v99 = load v98, !157
        v100 = const u64 0
        v101 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v100, !158
        store v99 to v101, !159
        v102 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !160
        v103 = load v102, !161
        v104 = const u64 1
        v105 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v104, !162
        store v103 to v105, !163
        v106 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !164
        v107 = load v106, !165
        v108 = const u64 2
        v109 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v108, !166
        store v107 to v109, !167
        v110 = get_local ptr { u64, { u64, ( u64 | bool ) } }, first0, !168
        v111 = load v110, !169
        v112 = const u64 3
        v113 = get_elem_ptr v97, ptr { u64, { u64, ( u64 | bool ) } }, v112, !170
        store v111 to v113, !171
        v114 = load v97, !172
        v115 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !174
        store v114 to v115, !175
        v116 = get_local ptr u64, i0, !177
        v117 = const u64 1, !178
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v117), !179

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v118: u64):
        v119 = get_local ptr u64, i0, !181
        v120 = const u64 4, !182
        v121 = cmp lt v118 v120, !184
        cbr v121, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !185

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v122 = call decode_35(v54), !187
        v123 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !189
        v124 = get_local ptr u64, i0, !191
        v125 = get_elem_ptr v123, ptr { u64, { u64, ( u64 | bool ) } }, v118, !192
        store v122 to v125, !193
        v126 = get_local ptr u64, i0, !195
        v127 = const u64 1, !196
        v128 = add v118, v127, !198
        v129 = get_local ptr u64, i0, !199
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v128), !200

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v130 = get_local ptr [{ u64, { u64, ( u64 | bool ) } }; 4], array0, !202
        v131 = load v130, !203
        v132 = const u64 5, !204
        v133 = call read_bytes_10(v54, v132), !208
        v134 = get_local ptr slice, data0, !210
        store v133 to v134, !211
        v135 = get_local ptr slice, data0, !213
        v136 = load v135, !214
        v137 = call ptr_11(v136), !216
        v138 = asm(s: v137) -> string<5> s, !218 {
        }
        v139 = call abi_decode_32(v54), !220
        v140 = get_local ptr { string<5>, bool }, __anon_02, !222
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr string<5>, v141, !223
        store v138 to v142, !224
        v143 = const u64 1
        v144 = get_elem_ptr v140, ptr bool, v143, !225
        store v139 to v144, !226
        v145 = load v140, !227
        v146 = call abi_decode_39(v54), !229
        v147 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, __anon_01, !231
        v148 = const u64 0
        v149 = get_elem_ptr v147, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v148, !232
        store v94 to v149, !233
        v150 = const u64 1
        v151 = get_elem_ptr v147, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v150, !234
        store v131 to v151, !235
        v152 = const u64 2
        v153 = get_elem_ptr v147, ptr { string<5>, bool }, v152, !236
        store v145 to v153, !237
        v154 = const u64 3
        v155 = get_elem_ptr v147, ptr { u64 }, v154, !238
        store v146 to v155, !239
        v156 = load v147, !240
        v157 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !241
        store v156 to v157, !241
        v158 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !242
        v159 = const u64 0
        v160 = get_elem_ptr v158, ptr { [b256; 3], { u64, ( u64 | bool ) } }, v159, !243
        v161 = load v160
        v162 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !244
        v163 = const u64 1
        v164 = get_elem_ptr v162, ptr [{ u64, { u64, ( u64 | bool ) } }; 4], v163, !245
        v165 = load v164
        v166 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !246
        v167 = const u64 2
        v168 = get_elem_ptr v166, ptr { string<5>, bool }, v167, !247
        v169 = load v168
        v170 = get_local ptr { { [b256; 3], { u64, ( u64 | bool ) } }, [{ u64, { u64, ( u64 | bool ) } }; 4], { string<5>, bool }, { u64 } }, args, !248
        v171 = const u64 3
        v172 = get_elem_ptr v170, ptr { u64 }, v171, !249
        v173 = load v172
        v174 = call new_42(), !252
        v175 = ptr_to_int v174 to u64, !254
        v176 = int_to_ptr v175 to ptr { { u64, u64, u64 } }, !255
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr { u64, u64, u64 }, v177, !257
        v179 = load v178, !258
        v180 = asm(buffer: v179) -> { u64, u64, u64 } buffer, !259 {
        }
        v181 = get_local ptr { u64, u64, u64 }, __anon_03, !260
        store v180 to v181, !261
        v182 = const u64 0
        v183 = get_elem_ptr v181, ptr u64, v182, !262
        v184 = load v183, !263
        v185 = int_to_ptr v184 to ptr u8, !264
        v186 = const u64 1
        v187 = get_elem_ptr v181, ptr u64, v186, !265
        v188 = load v187, !266
        v189 = const u64 2
        v190 = get_elem_ptr v181, ptr u64, v189, !267
        v191 = load v190, !268
        v192 = get_local ptr string<6>, __anon_10, !269
        v193 = const string<6> "fuel42"
        store v193 to v192, !270
        v194 = ptr_to_int v185 to u64, !271
        v195 = add v194, v191, !272
        v196 = int_to_ptr v195 to ptr u8, !273
        mem_copy_bytes v196, v192, 6, !274
        v197 = const u64 6
        v198 = add v191, v197, !275
        v199 = ptr_to_int v185 to u64, !276
        v200 = get_local ptr { u64, u64, u64 }, __anon_20, !277
        v201 = const u64 0
        v202 = get_elem_ptr v200, ptr u64, v201, !278
        store v199 to v202, !279
        v203 = const u64 1
        v204 = get_elem_ptr v200, ptr u64, v203, !280
        store v188 to v204, !281
        v205 = const u64 2
        v206 = get_elem_ptr v200, ptr u64, v205, !282
        store v198 to v206, !283
        v207 = asm(buffer: v200) -> { u64, u64, u64 } buffer, !284 {
        }
        v208 = get_local ptr { { u64, u64, u64 } }, __anon_30, !286
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr { u64, u64, u64 }, v209, !287
        store v207 to v210, !288
        v211 = load v208, !289
        v212 = get_local ptr { { u64, u64, u64 } }, buffer1, !291
        store v211 to v212, !292
        v213 = get_local ptr { { u64, u64, u64 } }, buffer1, !294
        v214 = load v213, !250
        v215 = call as_raw_slice_43(v214), !296
        v216 = get_local ptr slice, result_complex_function, !297
        store v215 to v216, !297
        v217 = get_local ptr slice, result_complex_function, !298
        v218 = load v217
        v219 = call ptr_11(v218), !299
        v220 = get_local ptr slice, result_complex_function, !300
        v221 = load v220
        v222 = call len_45(v221), !301
        retd v219 v222, !302
        v223 = const unit ()
        br block2(v223)

        block2(v224: ()):
        v225 = get_local ptr slice, _method_name, !303
        v226 = load v225
        v227 = const string<18> "take_generic_array"
        v228 = ptr_to_int v227 to u64, !304
        v229 = get_local ptr { u64, u64 }, __anon_2, !304
        v230 = const u64 0
        v231 = get_elem_ptr v229, ptr u64, v230
        store v228 to v231, !304
        v232 = const u64 1
        v233 = get_elem_ptr v229, ptr u64, v232
        v234 = const u64 18
        store v234 to v233, !304
        v235 = get_local ptr slice, __anon_3, !304
        mem_copy_bytes v235, v229, 16
        v236 = load v235
        v237 = call eq_13(v226, v236), !305
        v238 = const unit ()
        cbr v237, block3(), block5(v238), !305

        block3():
        v239 = call from_second_parameter_19(), !307
        v240 = get_local ptr { u64, u64 }, buffer2, !308
        store v239 to v240, !309
        v241 = get_local ptr { u64, u64 }, buffer2, !310
        v242 = call read_53(v241), !314
        v243 = get_local ptr u8, first1, !315
        v244 = get_local ptr [u8; 3], __anon_0001, !316
        v245 = get_local ptr u8, first1, !317
        v246 = const u64 0
        v247 = get_elem_ptr v244, ptr u8, v246, !318
        store v242 to v247, !319
        v248 = get_local ptr u8, first1, !320
        v249 = const u64 1
        v250 = get_elem_ptr v244, ptr u8, v249, !321
        store v242 to v250, !322
        v251 = get_local ptr u8, first1, !323
        v252 = const u64 2
        v253 = get_elem_ptr v244, ptr u8, v252, !324
        store v242 to v253, !325
        v254 = load v244, !326
        v255 = get_local ptr [u8; 3], array1, !327
        store v254 to v255, !328
        v256 = get_local ptr u64, i1, !329
        v257 = const u64 1, !112
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v257), !330

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v258: u64):
        v259 = get_local ptr u64, i1, !331
        v260 = const u64 3, !116
        v261 = cmp lt v258 v260, !332
        cbr v261, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !333

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v262 = call read_53(v241), !334
        v263 = get_local ptr [u8; 3], array1, !335
        v264 = get_local ptr u64, i1, !336
        v265 = get_elem_ptr v263, ptr u8, v258, !337
        store v262 to v265, !338
        v266 = get_local ptr u64, i1, !339
        v267 = const u64 1, !130
        v268 = add v258, v267, !340
        v269 = get_local ptr u64, i1, !341
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v268), !342

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v270 = get_local ptr [u8; 3], array1, !343
        v271 = load v270, !344
        v272 = call abi_decode_59(v241), !347
        v273 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !349
        store v272 to v273, !350
        v274 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], __anon_011, !352
        v275 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !354
        v276 = load v275, !355
        v277 = const u64 0
        v278 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v277, !356
        store v276 to v278, !357
        v279 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !358
        v280 = load v279, !359
        v281 = const u64 1
        v282 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v281, !360
        store v280 to v282, !361
        v283 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !362
        v284 = load v283, !363
        v285 = const u64 2
        v286 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v285, !364
        store v284 to v286, !365
        v287 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !366
        v288 = load v287, !367
        v289 = const u64 3
        v290 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v289, !368
        store v288 to v290, !369
        v291 = get_local ptr { u8, { u64, ( u64 | bool ) } }, first00, !370
        v292 = load v291, !371
        v293 = const u64 4
        v294 = get_elem_ptr v274, ptr { u8, { u64, ( u64 | bool ) } }, v293, !372
        store v292 to v294, !373
        v295 = load v274, !374
        v296 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !376
        store v295 to v296, !377
        v297 = get_local ptr u64, i00, !379
        v298 = const u64 1, !380
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v298), !381

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v299: u64):
        v300 = get_local ptr u64, i00, !383
        v301 = const u64 5, !384
        v302 = cmp lt v299 v301, !386
        cbr v302, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !387

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v303 = call abi_decode_59(v241), !389
        v304 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !391
        v305 = get_local ptr u64, i00, !393
        v306 = get_elem_ptr v304, ptr { u8, { u64, ( u64 | bool ) } }, v299, !394
        store v303 to v306, !395
        v307 = get_local ptr u64, i00, !397
        v308 = const u64 1, !398
        v309 = add v299, v308, !400
        v310 = get_local ptr u64, i00, !401
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v309), !402

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v311 = get_local ptr [{ u8, { u64, ( u64 | bool ) } }; 5], array00, !404
        v312 = load v311, !405
        v313 = get_local ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, __anon_002, !407
        v314 = const u64 0
        v315 = get_elem_ptr v313, ptr [u8; 3], v314, !408
        store v271 to v315, !409
        v316 = const u64 1
        v317 = get_elem_ptr v313, ptr [{ u8, { u64, ( u64 | bool ) } }; 5], v316, !410
        store v312 to v317, !411
        v318 = load v313, !412
        v319 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, __anon_04, !414
        v320 = const u64 0
        v321 = get_elem_ptr v319, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v320, !415
        store v318 to v321, !416
        v322 = load v319, !417
        v323 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !418
        store v322 to v323, !418
        v324 = get_local ptr { { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] } }, args_, !419
        v325 = const u64 0
        v326 = get_elem_ptr v324, ptr { [u8; 3], [{ u8, { u64, ( u64 | bool ) } }; 5] }, v325, !420
        v327 = load v326
        v328 = call new_42(), !422
        v329 = ptr_to_int v328 to u64, !423
        v330 = int_to_ptr v329 to ptr { { u64, u64, u64 } }, !424
        v331 = const u64 0
        v332 = get_elem_ptr v330, ptr { u64, u64, u64 }, v331, !425
        v333 = load v332, !426
        v334 = asm(buffer: v333) -> { u64, u64, u64 } buffer, !427 {
        }
        v335 = get_local ptr { u64, u64, u64 }, __anon_05, !428
        store v334 to v335, !429
        v336 = const u64 0
        v337 = get_elem_ptr v335, ptr u64, v336, !430
        v338 = load v337, !431
        v339 = int_to_ptr v338 to ptr u8, !432
        v340 = const u64 1
        v341 = get_elem_ptr v335, ptr u64, v340, !433
        v342 = load v341, !434
        v343 = const u64 2
        v344 = get_elem_ptr v335, ptr u64, v343, !435
        v345 = load v344, !436
        v346 = ptr_to_int v339 to u64, !437
        v347 = add v346, v345, !438
        v348 = int_to_ptr v347 to ptr u64, !439
        v349 = const u64 0, !441
        store v349 to v348, !442
        v350 = const u64 8
        v351 = add v345, v350, !443
        v352 = ptr_to_int v339 to u64, !444
        v353 = get_local ptr { u64, u64, u64 }, __anon_11, !445
        v354 = const u64 0
        v355 = get_elem_ptr v353, ptr u64, v354, !446
        store v352 to v355, !447
        v356 = const u64 1
        v357 = get_elem_ptr v353, ptr u64, v356, !448
        store v342 to v357, !449
        v358 = const u64 2
        v359 = get_elem_ptr v353, ptr u64, v358, !450
        store v351 to v359, !451
        v360 = asm(buffer: v353) -> { u64, u64, u64 } buffer, !452 {
        }
        v361 = get_local ptr { { u64, u64, u64 } }, __anon_21, !454
        v362 = const u64 0
        v363 = get_elem_ptr v361, ptr { u64, u64, u64 }, v362, !455
        store v360 to v363, !456
        v364 = load v361, !457
        v365 = get_local ptr { { u64, u64, u64 } }, buffer3, !458
        store v364 to v365, !459
        v366 = get_local ptr { { u64, u64, u64 } }, buffer3, !460
        v367 = load v366, !421
        v368 = call as_raw_slice_43(v367), !461
        v369 = get_local ptr slice, result_take_generic_array, !462
        store v368 to v369, !462
        v370 = get_local ptr slice, result_take_generic_array, !463
        v371 = load v370
        v372 = call ptr_11(v371), !464
        v373 = get_local ptr slice, result_take_generic_array, !465
        v374 = load v373
        v375 = call len_45(v374), !466
        retd v372 v375, !467
        v376 = const unit ()
        br block5(v376)

        block5(v377: ()):
        v378 = get_local ptr slice, _method_name, !468
        v379 = load v378
        v380 = const string<36> "take_generic_struct_containing_tuple"
        v381 = ptr_to_int v380 to u64, !469
        v382 = get_local ptr { u64, u64 }, __anon_4, !469
        v383 = const u64 0
        v384 = get_elem_ptr v382, ptr u64, v383
        store v381 to v384, !469
        v385 = const u64 1
        v386 = get_elem_ptr v382, ptr u64, v385
        v387 = const u64 36
        store v387 to v386, !469
        v388 = get_local ptr slice, __anon_5, !469
        mem_copy_bytes v388, v382, 16
        v389 = load v388
        v390 = call eq_13(v379, v389), !470
        v391 = const unit ()
        cbr v390, block6(), block8(v391), !470

        block6():
        v392 = call from_second_parameter_19(), !472
        v393 = get_local ptr { u64, u64 }, buffer4, !473
        store v392 to v393, !474
        v394 = get_local ptr { u64, u64 }, buffer4, !475
        v395 = call abi_decode_39(v394), !478
        v396 = call read_53(v394), !481
        v397 = asm(input: v396) -> u64 input, !485 {
        }
        v398 = get_local ptr u64, a, !487
        v399 = call read_53(v394), !489
        v400 = asm(input: v399) -> u64 input, !491 {
        }
        v401 = get_local ptr u64, b, !493
        v402 = get_local ptr u64, a, !495
        v403 = const u64 8, !496
        v404 = lsh v397, v403, !498
        v405 = const u64 65535, !500
        v406 = and v404, v405, !501
        v407 = get_local ptr u64, b, !503
        v408 = or v406, v400, !505
        v409 = call abi_decode_74(v394), !507
        v410 = get_local ptr { { u64 }, u64, u64 }, __anon_0002, !509
        v411 = const u64 0
        v412 = get_elem_ptr v410, ptr { u64 }, v411, !510
        store v395 to v412, !511
        v413 = const u64 1
        v414 = get_elem_ptr v410, ptr u64, v413, !512
        store v408 to v414, !513
        v415 = const u64 2
        v416 = get_elem_ptr v410, ptr u64, v415, !514
        store v409 to v416, !515
        v417 = load v410, !516
        v418 = call abi_decode_74(v394), !518
        v419 = call abi_decode_39(v394), !519
        v420 = get_local ptr { u64, { u64 } }, __anon_012, !520
        v421 = const u64 0
        v422 = get_elem_ptr v420, ptr u64, v421, !521
        store v418 to v422, !522
        v423 = const u64 1
        v424 = get_elem_ptr v420, ptr { u64 }, v423, !523
        store v419 to v424, !524
        v425 = load v420, !525
        v426 = get_local ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, __anon_003, !527
        v427 = const u64 0
        v428 = get_elem_ptr v426, ptr { { u64 }, u64, u64 }, v427, !528
        store v417 to v428, !529
        v429 = const u64 1
        v430 = get_elem_ptr v426, ptr { u64, { u64 } }, v429, !530
        store v425 to v430, !531
        v431 = load v426, !532
        v432 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, __anon_06, !533
        v433 = const u64 0
        v434 = get_elem_ptr v432, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v433, !534
        store v431 to v434, !535
        v435 = load v432, !536
        v436 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !537
        store v435 to v436, !537
        v437 = get_local ptr { { { { u64 }, u64, u64 }, { u64, { u64 } } } }, args__, !538
        v438 = const u64 0
        v439 = get_elem_ptr v437, ptr { { { u64 }, u64, u64 }, { u64, { u64 } } }, v438, !539
        v440 = load v439
        v441 = call new_42(), !541
        v442 = get_local ptr { { u64, u64, u64 } }, buffer5, !542
        store v441 to v442, !543
        v443 = get_local ptr { { u64, u64, u64 } }, buffer5, !544
        v444 = load v443, !540
        v445 = call as_raw_slice_43(v444), !545
        v446 = get_local ptr slice, result_take_generic_struct_containing_tuple, !546
        store v445 to v446, !546
        v447 = get_local ptr slice, result_take_generic_struct_containing_tuple, !547
        v448 = load v447
        v449 = call ptr_11(v448), !548
        v450 = get_local ptr slice, result_take_generic_struct_containing_tuple, !549
        v451 = load v450
        v452 = call len_45(v451), !550
        retd v449 v452, !551
        v453 = const unit ()
        br block8(v453)

        block8(v454: ()):
        v455 = const u64 123, !552
        revert v455, !553
    }

    pub fn read_3(self !555: u64) -> u64, !556 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !557 {
            lw     val ptr i0, !558
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !559: ptr { u64, u64 }) -> u64, !560 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u64 v
        local u64 v_
        local u64 v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !563
        v2 = load v1, !561
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !565
        v5 = load v4, !561
        v6 = const u64 1
        v7 = mul v6, v5, !567
        v8 = add v2, v7, !568
        v9 = get_local ptr u64, ptr, !570
        v10 = get_local ptr u64, size, !572
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !573
        v13 = load v12, !561
        v14 = get_local ptr u64, size, !575
        v15 = const u64 8
        v16 = add v13, v15, !577
        v17 = get_local ptr u64, next_pos, !579
        v18 = get_local ptr u64, size, !581
        v19 = get_local ptr u64, ptr, !583
        v20 = asm(ptr: v8, val) -> u64 val, !585 {
            lw     val ptr i0, !586
        }
        v21 = get_local ptr u64, v__, !588
        v22 = get_local ptr u64, next_pos, !590
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !592
        store v16 to v24, !593
        v25 = get_local ptr u64, v__, !595
        ret u64 v20
    }

    pub fn read_bytes_10(self !596: ptr { u64, u64 }, count !597: u64) -> slice, !598 {
        local { u64, u64 } __anon_0
        local u64 next_pos
        local u64 ptr
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !564
        v2 = load v1
        v3 = add v2, count, !599
        v4 = get_local ptr u64, next_pos, !600
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !562
        v7 = load v6
        v8 = const u64 1
        v9 = get_elem_ptr self, ptr u64, v8, !564
        v10 = load v9
        v11 = const u64 1
        v12 = mul v11, v10, !601
        v13 = add v7, v12, !601
        v14 = get_local ptr u64, ptr, !602
        v15 = get_local ptr u64, ptr, !603
        v16 = get_local ptr { u64, u64 }, __anon_0, !604
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !604
        store v13 to v18, !604
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19, !604
        store count to v20, !604
        v21 = asm(ptr: v16) -> slice ptr, !605 {
        }
        v22 = get_local ptr slice, slice, !606
        store v21 to v22, !606
        v23 = get_local ptr u64, next_pos, !607
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !608
        store v3 to v25, !608
        v26 = get_local ptr slice, slice, !609
        v27 = load v26
        ret slice v27
    }

    pub fn ptr_11(self !611: slice) -> u64, !612 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !615 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !616
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self !618: slice, other !619: slice) -> bool, !620 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_16(self), !621
        v1 = call len_16(other), !622
        v2 = cmp eq v0 v1, !625
        v3 = const bool false, !626
        v4 = cmp eq v2 v3, !628
        v5 = const bool false, !629
        cbr v4, block2(v5), block1(), !623

        block1():
        v6 = call as_ptr_17(self), !630
        v7 = get_local ptr u64, self_ptr, !631
        v8 = call as_ptr_17(other), !632
        v9 = get_local ptr u64, other_ptr, !633
        v10 = call len_16(self), !634
        v11 = get_local ptr u64, l, !635
        v12 = get_local ptr u64, self_ptr, !636
        v13 = get_local ptr u64, other_ptr, !637
        v14 = get_local ptr u64, l, !638
        v15 = asm(r1: v6, r2: v8, r3: v10, r4) -> bool r4, !639 {
            meq    r4 r1 r2 r3, !640
        }
        br block2(v15)

        block2(v16: bool):
        ret bool v16
    }

    pub fn len_16(self !642: slice) -> u64, !643 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !644 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !645
        store v0 to v1, !645
        v2 = get_local ptr { u64, u64 }, __tuple_2, !645
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !645
        store v3 to v4, !645
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !645
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !645
        v8 = load v7
        v9 = get_local ptr u64, _, !645
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !645
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !645
        v13 = load v12
        v14 = get_local ptr u64, len, !645
        v15 = get_local ptr u64, len, !646
        ret u64 v13
    }

    pub fn as_ptr_17(self !647: slice) -> u64, !648 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !649 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !650
        store v0 to v1, !650
        v2 = get_local ptr { u64, u64 }, __tuple_1, !650
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !650
        store v3 to v4, !650
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !650
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !650
        v8 = load v7
        v9 = get_local ptr u64, ptr, !650
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !650
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !650
        v13 = load v12
        v14 = get_local ptr u64, _, !650
        v15 = get_local ptr u64, ptr, !651
        ret u64 v8
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !652 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64, u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !653
        v1 = asm() -> u64 fp, !654 {
        }
        v2 = get_local ptr u64, ptr, !655
        v3 = get_local ptr u64, ptr, !656
        v4 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !657
        v5 = const u64 592, !658
        v6 = add v1, v5, !658
        v7 = get_local ptr u64, ptr_, !659
        v8 = get_local ptr u64, ptr_, !660
        v9 = call read_3(v6), !661
        v10 = get_local ptr u64, ptr__, !662
        v11 = get_local ptr u64, ptr__, !663
        v12 = asm(ptr: v9) -> u64 ptr, !664 {
        }
        v13 = get_local ptr { u64, u64 }, __anon_0, !665
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !665
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 0, !666
        store v18 to v17, !665
        v19 = load v13
        ret { u64, u64 } v19
    }

    pub fn decode_24(self !667: ptr { u64, u64 }) -> b256, !668 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local b256 v
        local b256 v_
        local b256 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !670
        v2 = load v1, !671
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !672
        v5 = load v4, !673
        v6 = const u64 1
        v7 = mul v6, v5, !674
        v8 = add v2, v7, !675
        v9 = get_local ptr u64, ptr, !676
        v10 = get_local ptr u64, size, !677
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !678
        v13 = load v12, !679
        v14 = get_local ptr u64, size, !680
        v15 = const u64 32
        v16 = add v13, v15, !681
        v17 = get_local ptr u64, next_pos, !682
        v18 = get_local ptr u64, ptr, !684
        v19 = asm(ptr: v8) -> b256 ptr, !686 {
        }
        v20 = get_local ptr b256, v, !688
        store v19 to v20, !689
        v21 = get_local ptr u64, next_pos, !691
        v22 = const u64 1
        v23 = get_elem_ptr self, ptr u64, v22, !693
        store v16 to v23, !694
        v24 = get_local ptr b256, v, !696
        v25 = load v24, !697
        ret b256 v25
    }

    pub fn decode_28(self !667: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !668 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !699
        v1 = get_local ptr u64, variant, !701
        v2 = get_local ptr u64, variant, !703
        v3 = get_local ptr u64, __matched_value_1, !705
        v4 = get_local ptr u64, __matched_value_1, !706
        v5 = const u64 0, !707
        v6 = cmp eq v0 v5, !709
        cbr v6, abi_decode_29_block0(), abi_decode_29_block1(), !710

        abi_decode_29_block0():
        v7 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !712
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !713
        v10 = const u64 0, !711
        store v10 to v9, !714
        v11 = call abi_decode_5(self), !716
        v12 = const u64 1
        v13 = const u64 0
        v14 = get_elem_ptr v7, ptr u64, v12, v13, !717
        store v11 to v14, !718
        v15 = load v7, !85
        br abi_decode_29_block5(v15), !85

        abi_decode_29_block1():
        v16 = get_local ptr u64, __matched_value_1, !719
        v17 = const u64 1, !720
        v18 = cmp eq v0 v17, !722
        cbr v18, abi_decode_29_block2(), abi_decode_29_block3(), !723

        abi_decode_29_block2():
        v19 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !724
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !725
        v22 = const u64 1, !711
        store v22 to v21, !726
        v23 = call abi_decode_32(self), !728
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v19, ptr bool, v24, v25, !729
        store v23 to v26, !730
        v27 = load v19, !85
        br abi_decode_29_block5(v27), !85

        abi_decode_29_block3():
        v28 = const u64 0, !731
        revert v28, !733

        abi_decode_29_block5(v29: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v29
    }

    pub fn abi_decode_32(buffer !734: ptr { u64, u64 }) -> bool, !735 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local bool v
        local bool v_
        local bool v__

        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !737
        v2 = load v1, !736
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !738
        v5 = load v4, !736
        v6 = const u64 1
        v7 = mul v6, v5, !739
        v8 = add v2, v7, !740
        v9 = get_local ptr u64, ptr, !741
        v10 = get_local ptr u64, size, !742
        v11 = const u64 1
        v12 = get_elem_ptr buffer, ptr u64, v11, !743
        v13 = load v12, !736
        v14 = get_local ptr u64, size, !744
        v15 = const u64 1
        v16 = add v13, v15, !745
        v17 = get_local ptr u64, next_pos, !746
        v18 = get_local ptr u64, size, !747
        v19 = get_local ptr u64, ptr, !749
        v20 = asm(ptr: v8, val) -> bool val, !751 {
            lb     val ptr i0, !752
        }
        v21 = get_local ptr bool, v_, !754
        v22 = get_local ptr u64, next_pos, !756
        v23 = const u64 1
        v24 = get_elem_ptr buffer, ptr u64, v23, !758
        store v16 to v24, !759
        v25 = get_local ptr bool, v_, !761
        ret bool v20
    }

    pub fn decode_35(self !667: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !668 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !762
        v1 = call decode_28(self), !763
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !764
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !85
        store v0 to v4, !765
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !85
        store v1 to v6, !766
        v7 = load v2, !85
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_39(buffer !767: ptr { u64, u64 }) -> { u64 }, !768 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !770
        v1 = get_local ptr { u64 }, __anon_0, !771
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !771
        v4 = load v1
        ret { u64 } v4
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !772 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !773
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !773
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !774: { { u64, u64, u64 } }) -> slice, !775 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !256
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn len_45(self !776: slice) -> u64, !777 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !779 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !780
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !781: ptr { u64, u64 }) -> u8, !782 {
        local u64 next_pos
        local u64 ptr
        local u64 size
        local u8 v
        local u8 v_
        local u8 v__

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !562
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !564
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !566
        v8 = add v2, v7, !566
        v9 = get_local ptr u64, ptr, !569
        v10 = get_local ptr u64, size, !571
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr u64, v11, !564
        v13 = load v12
        v14 = get_local ptr u64, size, !574
        v15 = const u64 1
        v16 = add v13, v15, !576
        v17 = get_local ptr u64, next_pos, !578
        v18 = get_local ptr u64, size, !580
        v19 = get_local ptr u64, ptr, !748
        v20 = asm(ptr: v8, val) -> u8 val, !750 {
            lb     val ptr i0, !752
        }
        v21 = get_local ptr u8, v_, !753
        v22 = get_local ptr u64, next_pos, !755
        v23 = const u64 1
        v24 = get_elem_ptr self, ptr u64, v23, !757
        store v16 to v24, !757
        v25 = get_local ptr u8, v_, !760
        ret u8 v20
    }

    pub fn abi_decode_59(buffer !783: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !784 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !785
        v1 = call decode_28(buffer), !138
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !140
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !140
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !140
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_74(buffer !786: ptr { u64, u64 }) -> u64, !787 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !788
        v1 = asm(input: v0) -> u64 input, !790 {
        }
        v2 = get_local ptr u64, a, !791
        v3 = call read_53(buffer), !792
        v4 = asm(input: v3) -> u64 input, !794 {
        }
        v5 = get_local ptr u64, b, !795
        v6 = call read_53(buffer), !796
        v7 = asm(input: v6) -> u64 input, !798 {
        }
        v8 = get_local ptr u64, c, !799
        v9 = call read_53(buffer), !800
        v10 = asm(input: v9) -> u64 input, !802 {
        }
        v11 = get_local ptr u64, d, !803
        v12 = get_local ptr u64, a, !804
        v13 = const u64 24, !805
        v14 = lsh v1, v13, !806
        v15 = const u64 4294967295, !807
        v16 = and v14, v15, !806
        v17 = get_local ptr u64, b, !808
        v18 = const u64 16, !809
        v19 = lsh v4, v18, !810
        v20 = and v19, v15, !810
        v21 = or v16, v20, !811
        v22 = get_local ptr u64, c, !812
        v23 = const u64 8, !813
        v24 = lsh v7, v23, !814
        v25 = and v24, v15, !814
        v26 = or v21, v25, !815
        v27 = get_local ptr u64, d, !816
        v28 = or v26, v10, !817
        ret u64 v28
    }
}

// IR: [dce] Dead code elimination
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = asm() -> u64 fp, !6 {
        }
        v1 = const u64 584, !8
        v2 = add v0, v1, !9
        v3 = call read_3(v2), !11
        v4 = asm(ptr: v3) -> u64 ptr, !13 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_00, !15
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !16
        store v4 to v7, !17
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8, !18
        v10 = const u64 0, !19
        store v10 to v9, !20
        v11 = load v5, !21
        v12 = get_local ptr { u64, u64 }, buffer, !23
        store v11 to v12, !24
        v13 = get_local ptr { u64, u64 }, buffer, !26
        v14 = call abi_decode_5(v13), !29
        v15 = call read_bytes_10(v13, v14), !31
        v16 = get_local ptr slice, data, !33
        store v15 to v16, !34
        v17 = get_local ptr slice, data, !36
        v18 = load v17, !37
        v19 = call ptr_11(v18), !39
        v20 = get_local ptr { u64, u64 }, __anon_000, !41
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !42
        store v19 to v22, !43
        v23 = const u64 1
        v24 = get_elem_ptr v20, ptr u64, v23, !44
        store v14 to v24, !45
        v25 = asm(s: v20) -> slice s, !47 {
        }
        v26 = get_local ptr slice, _method_name, !48
        store v25 to v26, !48
        v27 = get_local ptr slice, _method_name, !49
        v28 = load v27
        v29 = const string<16> "complex_function"
        v30 = ptr_to_int v29 to u64, !50
        v31 = get_local ptr { u64, u64 }, __anon_0, !50
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32
        store v30 to v33, !50
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr u64, v34
        v36 = const u64 16
        store v36 to v35, !50
        v37 = get_local ptr slice, __anon_1, !50
        mem_copy_bytes v37, v31, 16
        v38 = load v37
        v39 = call eq_13(v28, v38), !51
        v40 = const unit ()
        cbr v39, block0(), block2(v40), !51

        block0():
        v41 = call from_second_parameter_19(), !54
        v42 = get_local ptr { u64, u64 }, buffer0, !56
        store v41 to v42, !57
        v43 = get_local ptr { u64, u64 }, buffer0, !59
        v44 = call decode_24(v43), !65
        v45 = const u64 1, !66
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v45), !67

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v46: u64):
        v47 = const u64 3, !68
        v48 = cmp lt v46 v47, !70
        cbr v48, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !71

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v49 = call decode_24(v43), !73
        v50 = const u64 1, !74
        v51 = add v46, v50, !76
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v51), !77

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v52 = call decode_28(v43), !79
        v53 = call decode_35(v43), !82
        v54 = const u64 1, !83
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v54), !84

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v55: u64):
        v56 = const u64 4, !85
        v57 = cmp lt v55 v56, !87
        cbr v57, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !88

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v58 = call decode_35(v43), !90
        v59 = const u64 1, !91
        v60 = add v55, v59, !93
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v60), !94

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v61 = const u64 5, !95
        v62 = call read_bytes_10(v43, v61), !99
        v63 = get_local ptr slice, data0, !101
        store v62 to v63, !102
        v64 = get_local ptr slice, data0, !104
        v65 = load v64, !105
        v66 = call ptr_11(v65), !107
        v67 = asm(s: v66) -> string<5> s, !109 {
        }
        v68 = call abi_decode_32(v43), !111
        v69 = call abi_decode_39(v43), !113
        v70 = call new_42(), !116
        v71 = ptr_to_int v70 to u64, !118
        v72 = int_to_ptr v71 to ptr { { u64, u64, u64 } }, !119
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr { u64, u64, u64 }, v73, !121
        v75 = load v74, !122
        v76 = asm(buffer: v75) -> { u64, u64, u64 } buffer, !123 {
        }
        v77 = get_local ptr { u64, u64, u64 }, __anon_03, !124
        store v76 to v77, !125
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !126
        v80 = load v79, !127
        v81 = int_to_ptr v80 to ptr u8, !128
        v82 = const u64 1
        v83 = get_elem_ptr v77, ptr u64, v82, !129
        v84 = load v83, !130
        v85 = const u64 2
        v86 = get_elem_ptr v77, ptr u64, v85, !131
        v87 = load v86, !132
        v88 = get_local ptr string<6>, __anon_10, !133
        v89 = const string<6> "fuel42"
        store v89 to v88, !134
        v90 = ptr_to_int v81 to u64, !135
        v91 = add v90, v87, !136
        v92 = int_to_ptr v91 to ptr u8, !137
        mem_copy_bytes v92, v88, 6, !138
        v93 = const u64 6
        v94 = add v87, v93, !139
        v95 = ptr_to_int v81 to u64, !140
        v96 = get_local ptr { u64, u64, u64 }, __anon_20, !141
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr u64, v97, !142
        store v95 to v98, !143
        v99 = const u64 1
        v100 = get_elem_ptr v96, ptr u64, v99, !144
        store v84 to v100, !145
        v101 = const u64 2
        v102 = get_elem_ptr v96, ptr u64, v101, !146
        store v94 to v102, !147
        v103 = asm(buffer: v96) -> { u64, u64, u64 } buffer, !148 {
        }
        v104 = get_local ptr { { u64, u64, u64 } }, __anon_30, !150
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr { u64, u64, u64 }, v105, !151
        store v103 to v106, !152
        v107 = load v104, !153
        v108 = get_local ptr { { u64, u64, u64 } }, buffer1, !155
        store v107 to v108, !156
        v109 = get_local ptr { { u64, u64, u64 } }, buffer1, !158
        v110 = load v109, !114
        v111 = call as_raw_slice_43(v110), !160
        v112 = get_local ptr slice, result_complex_function, !161
        store v111 to v112, !161
        v113 = get_local ptr slice, result_complex_function, !162
        v114 = load v113
        v115 = call ptr_11(v114), !163
        v116 = get_local ptr slice, result_complex_function, !164
        v117 = load v116
        v118 = call len_45(v117), !165
        retd v115 v118, !166
        v119 = const unit ()
        br block2(v119)

        block2(v120: ()):
        v121 = get_local ptr slice, _method_name, !167
        v122 = load v121
        v123 = const string<18> "take_generic_array"
        v124 = ptr_to_int v123 to u64, !168
        v125 = get_local ptr { u64, u64 }, __anon_2, !168
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126
        store v124 to v127, !168
        v128 = const u64 1
        v129 = get_elem_ptr v125, ptr u64, v128
        v130 = const u64 18
        store v130 to v129, !168
        v131 = get_local ptr slice, __anon_3, !168
        mem_copy_bytes v131, v125, 16
        v132 = load v131
        v133 = call eq_13(v122, v132), !169
        v134 = const unit ()
        cbr v133, block3(), block5(v134), !169

        block3():
        v135 = call from_second_parameter_19(), !171
        v136 = get_local ptr { u64, u64 }, buffer2, !172
        store v135 to v136, !173
        v137 = get_local ptr { u64, u64 }, buffer2, !174
        v138 = call read_53(v137), !178
        v139 = const u64 1, !66
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v139), !179

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v140: u64):
        v141 = const u64 3, !68
        v142 = cmp lt v140 v141, !180
        cbr v142, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !181

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v143 = call read_53(v137), !182
        v144 = const u64 1, !74
        v145 = add v140, v144, !183
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v145), !184

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v146 = call abi_decode_59(v137), !187
        v147 = const u64 1, !188
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v147), !189

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v148: u64):
        v149 = const u64 5, !190
        v150 = cmp lt v148 v149, !192
        cbr v150, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !193

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v151 = call abi_decode_59(v137), !195
        v152 = const u64 1, !196
        v153 = add v148, v152, !198
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v153), !199

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v154 = call new_42(), !201
        v155 = ptr_to_int v154 to u64, !202
        v156 = int_to_ptr v155 to ptr { { u64, u64, u64 } }, !203
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr { u64, u64, u64 }, v157, !204
        v159 = load v158, !205
        v160 = asm(buffer: v159) -> { u64, u64, u64 } buffer, !206 {
        }
        v161 = get_local ptr { u64, u64, u64 }, __anon_05, !207
        store v160 to v161, !208
        v162 = const u64 0
        v163 = get_elem_ptr v161, ptr u64, v162, !209
        v164 = load v163, !210
        v165 = int_to_ptr v164 to ptr u8, !211
        v166 = const u64 1
        v167 = get_elem_ptr v161, ptr u64, v166, !212
        v168 = load v167, !213
        v169 = const u64 2
        v170 = get_elem_ptr v161, ptr u64, v169, !214
        v171 = load v170, !215
        v172 = ptr_to_int v165 to u64, !216
        v173 = add v172, v171, !217
        v174 = int_to_ptr v173 to ptr u64, !218
        v175 = const u64 0, !220
        store v175 to v174, !221
        v176 = const u64 8
        v177 = add v171, v176, !222
        v178 = ptr_to_int v165 to u64, !223
        v179 = get_local ptr { u64, u64, u64 }, __anon_11, !224
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr u64, v180, !225
        store v178 to v181, !226
        v182 = const u64 1
        v183 = get_elem_ptr v179, ptr u64, v182, !227
        store v168 to v183, !228
        v184 = const u64 2
        v185 = get_elem_ptr v179, ptr u64, v184, !229
        store v177 to v185, !230
        v186 = asm(buffer: v179) -> { u64, u64, u64 } buffer, !231 {
        }
        v187 = get_local ptr { { u64, u64, u64 } }, __anon_21, !233
        v188 = const u64 0
        v189 = get_elem_ptr v187, ptr { u64, u64, u64 }, v188, !234
        store v186 to v189, !235
        v190 = load v187, !236
        v191 = get_local ptr { { u64, u64, u64 } }, buffer3, !237
        store v190 to v191, !238
        v192 = get_local ptr { { u64, u64, u64 } }, buffer3, !239
        v193 = load v192, !200
        v194 = call as_raw_slice_43(v193), !240
        v195 = get_local ptr slice, result_take_generic_array, !241
        store v194 to v195, !241
        v196 = get_local ptr slice, result_take_generic_array, !242
        v197 = load v196
        v198 = call ptr_11(v197), !243
        v199 = get_local ptr slice, result_take_generic_array, !244
        v200 = load v199
        v201 = call len_45(v200), !245
        retd v198 v201, !246
        v202 = const unit ()
        br block5(v202)

        block5(v203: ()):
        v204 = get_local ptr slice, _method_name, !247
        v205 = load v204
        v206 = const string<36> "take_generic_struct_containing_tuple"
        v207 = ptr_to_int v206 to u64, !248
        v208 = get_local ptr { u64, u64 }, __anon_4, !248
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr u64, v209
        store v207 to v210, !248
        v211 = const u64 1
        v212 = get_elem_ptr v208, ptr u64, v211
        v213 = const u64 36
        store v213 to v212, !248
        v214 = get_local ptr slice, __anon_5, !248
        mem_copy_bytes v214, v208, 16
        v215 = load v214
        v216 = call eq_13(v205, v215), !249
        v217 = const unit ()
        cbr v216, block6(), block8(v217), !249

        block6():
        v218 = call from_second_parameter_19(), !251
        v219 = get_local ptr { u64, u64 }, buffer4, !252
        store v218 to v219, !253
        v220 = get_local ptr { u64, u64 }, buffer4, !254
        v221 = call abi_decode_39(v220), !257
        v222 = call read_53(v220), !260
        v223 = asm(input: v222) -> u64 input, !264 {
        }
        v224 = call read_53(v220), !266
        v225 = asm(input: v224) -> u64 input, !268 {
        }
        v226 = call abi_decode_74(v220), !270
        v227 = call abi_decode_74(v220), !272
        v228 = call abi_decode_39(v220), !273
        v229 = call new_42(), !275
        v230 = get_local ptr { { u64, u64, u64 } }, buffer5, !276
        store v229 to v230, !277
        v231 = get_local ptr { { u64, u64, u64 } }, buffer5, !278
        v232 = load v231, !274
        v233 = call as_raw_slice_43(v232), !279
        v234 = get_local ptr slice, result_take_generic_struct_containing_tuple, !280
        store v233 to v234, !280
        v235 = get_local ptr slice, result_take_generic_struct_containing_tuple, !281
        v236 = load v235
        v237 = call ptr_11(v236), !282
        v238 = get_local ptr slice, result_take_generic_struct_containing_tuple, !283
        v239 = load v238
        v240 = call len_45(v239), !284
        retd v237 v240, !285
        v241 = const unit ()
        br block8(v241)

        block8(v242: ()):
        v243 = const u64 123, !286
        revert v243, !287
    }

    pub fn read_3(self !289: u64) -> u64, !290 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !291 {
            lw     val ptr i0, !292
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !293: ptr { u64, u64 }) -> u64, !294 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !297
        v2 = load v1, !295
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !299
        v5 = load v4, !295
        v6 = const u64 1
        v7 = mul v6, v5, !301
        v8 = add v2, v7, !302
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !303
        v11 = load v10, !295
        v12 = const u64 8
        v13 = add v11, v12, !305
        v14 = asm(ptr: v8, val) -> u64 val, !307 {
            lw     val ptr i0, !308
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !310
        store v13 to v16, !311
        ret u64 v14
    }

    pub fn read_bytes_10(self !312: ptr { u64, u64 }, count !313: u64) -> slice, !314 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !298
        v2 = load v1
        v3 = add v2, count, !315
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !296
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !298
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !316
        v12 = add v6, v11, !316
        v13 = get_local ptr { u64, u64 }, __anon_0, !317
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !317
        store v12 to v15, !317
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !317
        store count to v17, !317
        v18 = asm(ptr: v13) -> slice ptr, !318 {
        }
        v19 = get_local ptr slice, slice, !319
        store v18 to v19, !319
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !320
        store v3 to v21, !320
        v22 = get_local ptr slice, slice, !321
        v23 = load v22
        ret slice v23
    }

    pub fn ptr_11(self !323: slice) -> u64, !324 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !327 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !328
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self !330: slice, other !331: slice) -> bool, !332 {
        entry(self: slice, other: slice):
        v0 = call len_16(self), !333
        v1 = call len_16(other), !334
        v2 = cmp eq v0 v1, !337
        v3 = const bool false, !338
        v4 = cmp eq v2 v3, !340
        v5 = const bool false, !341
        cbr v4, block2(v5), block1(), !335

        block1():
        v6 = call as_ptr_17(self), !342
        v7 = call as_ptr_17(other), !343
        v8 = call len_16(self), !344
        v9 = asm(r1: v6, r2: v7, r3: v8, r4) -> bool r4, !345 {
            meq    r4 r1 r2 r3, !346
        }
        br block2(v9)

        block2(v10: bool):
        ret bool v10
    }

    pub fn len_16(self !348: slice) -> u64, !349 {
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !350 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !351
        store v0 to v1, !351
        v2 = get_local ptr { u64, u64 }, __tuple_2, !351
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !351
        store v3 to v4, !351
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !351
        v6 = const u64 1
        v7 = get_elem_ptr v5, ptr u64, v6, !351
        v8 = load v7
        ret u64 v8
    }

    pub fn as_ptr_17(self !352: slice) -> u64, !353 {
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !354 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !355
        store v0 to v1, !355
        v2 = get_local ptr { u64, u64 }, __tuple_1, !355
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !355
        store v3 to v4, !355
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !355
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !355
        v8 = load v7
        ret u64 v8
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !356 {
        local { u64, u64 } __anon_0

        entry():
        v0 = asm() -> u64 fp, !357 {
        }
        v1 = const u64 592, !358
        v2 = add v0, v1, !358
        v3 = call read_3(v2), !359
        v4 = asm(ptr: v3) -> u64 ptr, !360 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !361
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !361
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !362
        store v10 to v9, !361
        v11 = load v5
        ret { u64, u64 } v11
    }

    pub fn decode_24(self !363: ptr { u64, u64 }) -> b256, !364 {
        local b256 v

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !366
        v2 = load v1, !367
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !368
        v5 = load v4, !369
        v6 = const u64 1
        v7 = mul v6, v5, !370
        v8 = add v2, v7, !371
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !372
        v11 = load v10, !373
        v12 = const u64 32
        v13 = add v11, v12, !374
        v14 = asm(ptr: v8) -> b256 ptr, !376 {
        }
        v15 = get_local ptr b256, v, !378
        store v14 to v15, !379
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !381
        store v13 to v17, !382
        v18 = get_local ptr b256, v, !384
        v19 = load v18, !385
        ret b256 v19
    }

    pub fn decode_28(self !363: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !364 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !387
        v1 = const u64 0, !388
        v2 = cmp eq v0 v1, !390
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !391

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !393
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !394
        v6 = const u64 0, !392
        store v6 to v5, !395
        v7 = call abi_decode_5(self), !397
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !398
        store v7 to v10, !399
        v11 = load v3, !63
        br abi_decode_29_block5(v11), !63

        abi_decode_29_block1():
        v12 = const u64 1, !400
        v13 = cmp eq v0 v12, !402
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !403

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !404
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !405
        v17 = const u64 1, !392
        store v17 to v16, !406
        v18 = call abi_decode_32(self), !408
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !409
        store v18 to v21, !410
        v22 = load v14, !63
        br abi_decode_29_block5(v22), !63

        abi_decode_29_block3():
        v23 = const u64 0, !411
        revert v23, !413

        abi_decode_29_block5(v24: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v24
    }

    pub fn abi_decode_32(buffer !414: ptr { u64, u64 }) -> bool, !415 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !417
        v2 = load v1, !416
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !418
        v5 = load v4, !416
        v6 = const u64 1
        v7 = mul v6, v5, !419
        v8 = add v2, v7, !420
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !421
        v11 = load v10, !416
        v12 = const u64 1
        v13 = add v11, v12, !422
        v14 = asm(ptr: v8, val) -> bool val, !424 {
            lb     val ptr i0, !425
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !427
        store v13 to v16, !428
        ret bool v14
    }

    pub fn decode_35(self !363: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !364 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !429
        v1 = call decode_28(self), !430
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !432
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !63
        store v0 to v4, !433
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !63
        store v1 to v6, !434
        v7 = load v2, !63
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_39(buffer !435: ptr { u64, u64 }) -> { u64 }, !436 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !438
        v1 = get_local ptr { u64 }, __anon_0, !439
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !439
        v4 = load v1
        ret { u64 } v4
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !440 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !441
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !441
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !442: { { u64, u64, u64 } }) -> slice, !443 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !120
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = ptr_to_int v10 to u64
        v15 = get_local ptr { u64, u64 }, __anon_1
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        store v13 to v19
        v20 = asm(s: v15) -> slice s {
        }
        ret slice v20
    }

    pub fn len_45(self !444: slice) -> u64, !445 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !447 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !448
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !449: ptr { u64, u64 }) -> u8, !450 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !296
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !298
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !300
        v8 = add v2, v7, !300
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !298
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !304
        v14 = asm(ptr: v8, val) -> u8 val, !423 {
            lb     val ptr i0, !425
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !426
        store v13 to v16, !426
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !451: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !452 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !453
        v1 = call decode_28(buffer), !78
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !431
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !431
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !431
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_74(buffer !454: ptr { u64, u64 }) -> u64, !455 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !456
        v1 = asm(input: v0) -> u64 input, !458 {
        }
        v2 = call read_53(buffer), !459
        v3 = asm(input: v2) -> u64 input, !461 {
        }
        v4 = call read_53(buffer), !462
        v5 = asm(input: v4) -> u64 input, !464 {
        }
        v6 = call read_53(buffer), !465
        v7 = asm(input: v6) -> u64 input, !467 {
        }
        v8 = const u64 24, !468
        v9 = lsh v1, v8, !469
        v10 = const u64 4294967295, !471
        v11 = and v9, v10, !469
        v12 = const u64 16, !472
        v13 = lsh v3, v12, !473
        v14 = and v13, v10, !473
        v15 = or v11, v14, !474
        v16 = const u64 8, !475
        v17 = lsh v5, v16, !476
        v18 = and v17, v10, !476
        v19 = or v15, v18, !477
        v20 = or v19, v7, !478
        ret u64 v20
    }
}

// IR: [const-demotion] Demotion of by-value constants to by-reference
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = load v0
        v2 = asm() -> u64 fp, !6 {
        }
        v3 = const u64 584, !8
        v4 = add v2, v3, !9
        v5 = call read_3(v4), !11
        v6 = asm(ptr: v5) -> u64 ptr, !13 {
        }
        v7 = get_local ptr { u64, u64 }, __anon_00, !15
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !16
        store v6 to v9, !17
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10, !18
        v12 = const u64 0, !19
        store v12 to v11, !20
        v13 = load v7, !21
        v14 = get_local ptr { u64, u64 }, buffer, !23
        store v13 to v14, !24
        v15 = get_local ptr { u64, u64 }, buffer, !26
        v16 = call abi_decode_5(v15), !29
        v17 = call read_bytes_10(v15, v16), !31
        v18 = get_local ptr slice, data, !33
        store v17 to v18, !34
        v19 = get_local ptr slice, data, !36
        v20 = load v19, !37
        v21 = call ptr_11(v20), !39
        v22 = get_local ptr { u64, u64 }, __anon_000, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !42
        store v21 to v24, !43
        v25 = const u64 1
        v26 = get_elem_ptr v22, ptr u64, v25, !44
        store v16 to v26, !45
        v27 = asm(s: v22) -> slice s, !47 {
        }
        v28 = get_local ptr slice, _method_name, !48
        store v27 to v28, !48
        v29 = get_local ptr slice, _method_name, !49
        v30 = load v29
        v31 = ptr_to_int v1 to u64, !50
        v32 = get_local ptr { u64, u64 }, __anon_0, !50
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33
        store v31 to v34, !50
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr u64, v35
        v37 = const u64 16
        store v37 to v36, !50
        v38 = get_local ptr slice, __anon_1, !50
        mem_copy_bytes v38, v32, 16
        v39 = load v38
        v40 = call eq_13(v30, v39), !51
        v41 = const unit ()
        cbr v40, block0(), block2(v41), !51

        block0():
        v42 = call from_second_parameter_19(), !54
        v43 = get_local ptr { u64, u64 }, buffer0, !56
        store v42 to v43, !57
        v44 = get_local ptr { u64, u64 }, buffer0, !59
        v45 = call decode_24(v44), !65
        v46 = const u64 1, !66
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v46), !67

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v47: u64):
        v48 = const u64 3, !68
        v49 = cmp lt v47 v48, !70
        cbr v49, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !71

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v50 = call decode_24(v44), !73
        v51 = const u64 1, !74
        v52 = add v47, v51, !76
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v52), !77

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v53 = call decode_28(v44), !79
        v54 = call decode_35(v44), !82
        v55 = const u64 1, !83
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v55), !84

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v56: u64):
        v57 = const u64 4, !85
        v58 = cmp lt v56 v57, !87
        cbr v58, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !88

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v59 = call decode_35(v44), !90
        v60 = const u64 1, !91
        v61 = add v56, v60, !93
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v61), !94

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v62 = get_local ptr string<6>, __const0
        v63 = load v62
        v64 = const u64 5, !95
        v65 = call read_bytes_10(v44, v64), !99
        v66 = get_local ptr slice, data0, !101
        store v65 to v66, !102
        v67 = get_local ptr slice, data0, !104
        v68 = load v67, !105
        v69 = call ptr_11(v68), !107
        v70 = asm(s: v69) -> string<5> s, !109 {
        }
        v71 = call abi_decode_32(v44), !111
        v72 = call abi_decode_39(v44), !113
        v73 = call new_42(), !116
        v74 = ptr_to_int v73 to u64, !118
        v75 = int_to_ptr v74 to ptr { { u64, u64, u64 } }, !119
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr { u64, u64, u64 }, v76, !121
        v78 = load v77, !122
        v79 = asm(buffer: v78) -> { u64, u64, u64 } buffer, !123 {
        }
        v80 = get_local ptr { u64, u64, u64 }, __anon_03, !124
        store v79 to v80, !125
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81, !126
        v83 = load v82, !127
        v84 = int_to_ptr v83 to ptr u8, !128
        v85 = const u64 1
        v86 = get_elem_ptr v80, ptr u64, v85, !129
        v87 = load v86, !130
        v88 = const u64 2
        v89 = get_elem_ptr v80, ptr u64, v88, !131
        v90 = load v89, !132
        v91 = get_local ptr string<6>, __anon_10, !133
        store v63 to v91, !134
        v92 = ptr_to_int v84 to u64, !135
        v93 = add v92, v90, !136
        v94 = int_to_ptr v93 to ptr u8, !137
        mem_copy_bytes v94, v91, 6, !138
        v95 = const u64 6
        v96 = add v90, v95, !139
        v97 = ptr_to_int v84 to u64, !140
        v98 = get_local ptr { u64, u64, u64 }, __anon_20, !141
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr u64, v99, !142
        store v97 to v100, !143
        v101 = const u64 1
        v102 = get_elem_ptr v98, ptr u64, v101, !144
        store v87 to v102, !145
        v103 = const u64 2
        v104 = get_elem_ptr v98, ptr u64, v103, !146
        store v96 to v104, !147
        v105 = asm(buffer: v98) -> { u64, u64, u64 } buffer, !148 {
        }
        v106 = get_local ptr { { u64, u64, u64 } }, __anon_30, !150
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { u64, u64, u64 }, v107, !151
        store v105 to v108, !152
        v109 = load v106, !153
        v110 = get_local ptr { { u64, u64, u64 } }, buffer1, !155
        store v109 to v110, !156
        v111 = get_local ptr { { u64, u64, u64 } }, buffer1, !158
        v112 = load v111, !114
        v113 = call as_raw_slice_43(v112), !160
        v114 = get_local ptr slice, result_complex_function, !161
        store v113 to v114, !161
        v115 = get_local ptr slice, result_complex_function, !162
        v116 = load v115
        v117 = call ptr_11(v116), !163
        v118 = get_local ptr slice, result_complex_function, !164
        v119 = load v118
        v120 = call len_45(v119), !165
        retd v117 v120, !166
        v121 = const unit ()
        br block2(v121)

        block2(v122: ()):
        v123 = get_local ptr string<18>, __const1
        v124 = load v123
        v125 = get_local ptr slice, _method_name, !167
        v126 = load v125
        v127 = ptr_to_int v124 to u64, !168
        v128 = get_local ptr { u64, u64 }, __anon_2, !168
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr u64, v129
        store v127 to v130, !168
        v131 = const u64 1
        v132 = get_elem_ptr v128, ptr u64, v131
        v133 = const u64 18
        store v133 to v132, !168
        v134 = get_local ptr slice, __anon_3, !168
        mem_copy_bytes v134, v128, 16
        v135 = load v134
        v136 = call eq_13(v126, v135), !169
        v137 = const unit ()
        cbr v136, block3(), block5(v137), !169

        block3():
        v138 = call from_second_parameter_19(), !171
        v139 = get_local ptr { u64, u64 }, buffer2, !172
        store v138 to v139, !173
        v140 = get_local ptr { u64, u64 }, buffer2, !174
        v141 = call read_53(v140), !178
        v142 = const u64 1, !66
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v142), !179

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v143: u64):
        v144 = const u64 3, !68
        v145 = cmp lt v143 v144, !180
        cbr v145, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !181

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v146 = call read_53(v140), !182
        v147 = const u64 1, !74
        v148 = add v143, v147, !183
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v148), !184

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v149 = call abi_decode_59(v140), !187
        v150 = const u64 1, !188
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v150), !189

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v151: u64):
        v152 = const u64 5, !190
        v153 = cmp lt v151 v152, !192
        cbr v153, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !193

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v154 = call abi_decode_59(v140), !195
        v155 = const u64 1, !196
        v156 = add v151, v155, !198
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v156), !199

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v157 = call new_42(), !201
        v158 = ptr_to_int v157 to u64, !202
        v159 = int_to_ptr v158 to ptr { { u64, u64, u64 } }, !203
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr { u64, u64, u64 }, v160, !204
        v162 = load v161, !205
        v163 = asm(buffer: v162) -> { u64, u64, u64 } buffer, !206 {
        }
        v164 = get_local ptr { u64, u64, u64 }, __anon_05, !207
        store v163 to v164, !208
        v165 = const u64 0
        v166 = get_elem_ptr v164, ptr u64, v165, !209
        v167 = load v166, !210
        v168 = int_to_ptr v167 to ptr u8, !211
        v169 = const u64 1
        v170 = get_elem_ptr v164, ptr u64, v169, !212
        v171 = load v170, !213
        v172 = const u64 2
        v173 = get_elem_ptr v164, ptr u64, v172, !214
        v174 = load v173, !215
        v175 = ptr_to_int v168 to u64, !216
        v176 = add v175, v174, !217
        v177 = int_to_ptr v176 to ptr u64, !218
        v178 = const u64 0, !220
        store v178 to v177, !221
        v179 = const u64 8
        v180 = add v174, v179, !222
        v181 = ptr_to_int v168 to u64, !223
        v182 = get_local ptr { u64, u64, u64 }, __anon_11, !224
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !225
        store v181 to v184, !226
        v185 = const u64 1
        v186 = get_elem_ptr v182, ptr u64, v185, !227
        store v171 to v186, !228
        v187 = const u64 2
        v188 = get_elem_ptr v182, ptr u64, v187, !229
        store v180 to v188, !230
        v189 = asm(buffer: v182) -> { u64, u64, u64 } buffer, !231 {
        }
        v190 = get_local ptr { { u64, u64, u64 } }, __anon_21, !233
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr { u64, u64, u64 }, v191, !234
        store v189 to v192, !235
        v193 = load v190, !236
        v194 = get_local ptr { { u64, u64, u64 } }, buffer3, !237
        store v193 to v194, !238
        v195 = get_local ptr { { u64, u64, u64 } }, buffer3, !239
        v196 = load v195, !200
        v197 = call as_raw_slice_43(v196), !240
        v198 = get_local ptr slice, result_take_generic_array, !241
        store v197 to v198, !241
        v199 = get_local ptr slice, result_take_generic_array, !242
        v200 = load v199
        v201 = call ptr_11(v200), !243
        v202 = get_local ptr slice, result_take_generic_array, !244
        v203 = load v202
        v204 = call len_45(v203), !245
        retd v201 v204, !246
        v205 = const unit ()
        br block5(v205)

        block5(v206: ()):
        v207 = get_local ptr string<36>, __const2
        v208 = load v207
        v209 = get_local ptr slice, _method_name, !247
        v210 = load v209
        v211 = ptr_to_int v208 to u64, !248
        v212 = get_local ptr { u64, u64 }, __anon_4, !248
        v213 = const u64 0
        v214 = get_elem_ptr v212, ptr u64, v213
        store v211 to v214, !248
        v215 = const u64 1
        v216 = get_elem_ptr v212, ptr u64, v215
        v217 = const u64 36
        store v217 to v216, !248
        v218 = get_local ptr slice, __anon_5, !248
        mem_copy_bytes v218, v212, 16
        v219 = load v218
        v220 = call eq_13(v210, v219), !249
        v221 = const unit ()
        cbr v220, block6(), block8(v221), !249

        block6():
        v222 = call from_second_parameter_19(), !251
        v223 = get_local ptr { u64, u64 }, buffer4, !252
        store v222 to v223, !253
        v224 = get_local ptr { u64, u64 }, buffer4, !254
        v225 = call abi_decode_39(v224), !257
        v226 = call read_53(v224), !260
        v227 = asm(input: v226) -> u64 input, !264 {
        }
        v228 = call read_53(v224), !266
        v229 = asm(input: v228) -> u64 input, !268 {
        }
        v230 = call abi_decode_74(v224), !270
        v231 = call abi_decode_74(v224), !272
        v232 = call abi_decode_39(v224), !273
        v233 = call new_42(), !275
        v234 = get_local ptr { { u64, u64, u64 } }, buffer5, !276
        store v233 to v234, !277
        v235 = get_local ptr { { u64, u64, u64 } }, buffer5, !278
        v236 = load v235, !274
        v237 = call as_raw_slice_43(v236), !279
        v238 = get_local ptr slice, result_take_generic_struct_containing_tuple, !280
        store v237 to v238, !280
        v239 = get_local ptr slice, result_take_generic_struct_containing_tuple, !281
        v240 = load v239
        v241 = call ptr_11(v240), !282
        v242 = get_local ptr slice, result_take_generic_struct_containing_tuple, !283
        v243 = load v242
        v244 = call len_45(v243), !284
        retd v241 v244, !285
        v245 = const unit ()
        br block8(v245)

        block8(v246: ()):
        v247 = const u64 123, !286
        revert v247, !287
    }

    pub fn read_3(self !289: u64) -> u64, !290 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !291 {
            lw     val ptr i0, !292
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !293: ptr { u64, u64 }) -> u64, !294 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !297
        v2 = load v1, !295
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !299
        v5 = load v4, !295
        v6 = const u64 1
        v7 = mul v6, v5, !301
        v8 = add v2, v7, !302
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !303
        v11 = load v10, !295
        v12 = const u64 8
        v13 = add v11, v12, !305
        v14 = asm(ptr: v8, val) -> u64 val, !307 {
            lw     val ptr i0, !308
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !310
        store v13 to v16, !311
        ret u64 v14
    }

    pub fn read_bytes_10(self !312: ptr { u64, u64 }, count !313: u64) -> slice, !314 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !298
        v2 = load v1
        v3 = add v2, count, !315
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !296
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !298
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !316
        v12 = add v6, v11, !316
        v13 = get_local ptr { u64, u64 }, __anon_0, !317
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !317
        store v12 to v15, !317
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !317
        store count to v17, !317
        v18 = asm(ptr: v13) -> slice ptr, !318 {
        }
        v19 = get_local ptr slice, slice, !319
        store v18 to v19, !319
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !320
        store v3 to v21, !320
        v22 = get_local ptr slice, slice, !321
        v23 = load v22
        ret slice v23
    }

    pub fn ptr_11(self !323: slice) -> u64, !324 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !327 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !328
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self !330: slice, other !331: slice) -> bool, !332 {
        entry(self: slice, other: slice):
        v0 = call len_16(self), !333
        v1 = call len_16(other), !334
        v2 = cmp eq v0 v1, !337
        v3 = const bool false, !338
        v4 = cmp eq v2 v3, !340
        v5 = const bool false, !341
        cbr v4, block2(v5), block1(), !335

        block1():
        v6 = call as_ptr_17(self), !342
        v7 = call as_ptr_17(other), !343
        v8 = call len_16(self), !344
        v9 = asm(r1: v6, r2: v7, r3: v8, r4) -> bool r4, !345 {
            meq    r4 r1 r2 r3, !346
        }
        br block2(v9)

        block2(v10: bool):
        ret bool v10
    }

    pub fn len_16(self !348: slice) -> u64, !349 {
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !350 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !351
        store v0 to v1, !351
        v2 = get_local ptr { u64, u64 }, __tuple_2, !351
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !351
        store v3 to v4, !351
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !351
        v6 = const u64 1
        v7 = get_elem_ptr v5, ptr u64, v6, !351
        v8 = load v7
        ret u64 v8
    }

    pub fn as_ptr_17(self !352: slice) -> u64, !353 {
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !354 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !355
        store v0 to v1, !355
        v2 = get_local ptr { u64, u64 }, __tuple_1, !355
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !355
        store v3 to v4, !355
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !355
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !355
        v8 = load v7
        ret u64 v8
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !356 {
        local { u64, u64 } __anon_0

        entry():
        v0 = asm() -> u64 fp, !357 {
        }
        v1 = const u64 592, !358
        v2 = add v0, v1, !358
        v3 = call read_3(v2), !359
        v4 = asm(ptr: v3) -> u64 ptr, !360 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !361
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !361
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !362
        store v10 to v9, !361
        v11 = load v5
        ret { u64, u64 } v11
    }

    pub fn decode_24(self !363: ptr { u64, u64 }) -> b256, !364 {
        local b256 v

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !366
        v2 = load v1, !367
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !368
        v5 = load v4, !369
        v6 = const u64 1
        v7 = mul v6, v5, !370
        v8 = add v2, v7, !371
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !372
        v11 = load v10, !373
        v12 = const u64 32
        v13 = add v11, v12, !374
        v14 = asm(ptr: v8) -> b256 ptr, !376 {
        }
        v15 = get_local ptr b256, v, !378
        store v14 to v15, !379
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !381
        store v13 to v17, !382
        v18 = get_local ptr b256, v, !384
        v19 = load v18, !385
        ret b256 v19
    }

    pub fn decode_28(self !363: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !364 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !387
        v1 = const u64 0, !388
        v2 = cmp eq v0 v1, !390
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !391

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !393
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !394
        v6 = const u64 0, !392
        store v6 to v5, !395
        v7 = call abi_decode_5(self), !397
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !398
        store v7 to v10, !399
        v11 = load v3, !63
        br abi_decode_29_block5(v11), !63

        abi_decode_29_block1():
        v12 = const u64 1, !400
        v13 = cmp eq v0 v12, !402
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !403

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !404
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !405
        v17 = const u64 1, !392
        store v17 to v16, !406
        v18 = call abi_decode_32(self), !408
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !409
        store v18 to v21, !410
        v22 = load v14, !63
        br abi_decode_29_block5(v22), !63

        abi_decode_29_block3():
        v23 = const u64 0, !411
        revert v23, !413

        abi_decode_29_block5(v24: { u64, ( u64 | bool ) }):
        ret { u64, ( u64 | bool ) } v24
    }

    pub fn abi_decode_32(buffer !414: ptr { u64, u64 }) -> bool, !415 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !417
        v2 = load v1, !416
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !418
        v5 = load v4, !416
        v6 = const u64 1
        v7 = mul v6, v5, !419
        v8 = add v2, v7, !420
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !421
        v11 = load v10, !416
        v12 = const u64 1
        v13 = add v11, v12, !422
        v14 = asm(ptr: v8, val) -> bool val, !424 {
            lb     val ptr i0, !425
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !427
        store v13 to v16, !428
        ret bool v14
    }

    pub fn decode_35(self !363: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !364 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !429
        v1 = call decode_28(self), !430
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !432
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !63
        store v0 to v4, !433
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !63
        store v1 to v6, !434
        v7 = load v2, !63
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_39(buffer !435: ptr { u64, u64 }) -> { u64 }, !436 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !438
        v1 = get_local ptr { u64 }, __anon_0, !439
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !439
        v4 = load v1
        ret { u64 } v4
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !440 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !441
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !441
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self !442: { { u64, u64, u64 } }) -> slice, !443 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !120
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = ptr_to_int v10 to u64
        v15 = get_local ptr { u64, u64 }, __anon_1
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        store v13 to v19
        v20 = asm(s: v15) -> slice s {
        }
        ret slice v20
    }

    pub fn len_45(self !444: slice) -> u64, !445 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !447 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !448
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !449: ptr { u64, u64 }) -> u8, !450 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !296
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !298
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !300
        v8 = add v2, v7, !300
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !298
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !304
        v14 = asm(ptr: v8, val) -> u8 val, !423 {
            lb     val ptr i0, !425
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !426
        store v13 to v16, !426
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !451: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !452 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !453
        v1 = call decode_28(buffer), !78
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !431
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !431
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !431
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_74(buffer !454: ptr { u64, u64 }) -> u64, !455 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !456
        v1 = asm(input: v0) -> u64 input, !458 {
        }
        v2 = call read_53(buffer), !459
        v3 = asm(input: v2) -> u64 input, !461 {
        }
        v4 = call read_53(buffer), !462
        v5 = asm(input: v4) -> u64 input, !464 {
        }
        v6 = call read_53(buffer), !465
        v7 = asm(input: v6) -> u64 input, !467 {
        }
        v8 = const u64 24, !468
        v9 = lsh v1, v8, !469
        v10 = const u64 4294967295, !471
        v11 = and v9, v10, !469
        v12 = const u64 16, !472
        v13 = lsh v3, v12, !473
        v14 = and v13, v10, !473
        v15 = or v11, v14, !474
        v16 = const u64 8, !475
        v17 = lsh v5, v16, !476
        v18 = and v17, v10, !476
        v19 = or v15, v18, !477
        v20 = or v19, v7, !478
        ret u64 v20
    }
}

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = load v0
        v2 = asm() -> u64 fp, !6 {
        }
        v3 = const u64 584, !8
        v4 = add v2, v3, !9
        v5 = call read_3(v4), !11
        v6 = asm(ptr: v5) -> u64 ptr, !13 {
        }
        v7 = get_local ptr { u64, u64 }, __anon_00, !15
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !16
        store v6 to v9, !17
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10, !18
        v12 = const u64 0, !19
        store v12 to v11, !20
        v13 = load v7, !21
        v14 = get_local ptr { u64, u64 }, buffer, !23
        store v13 to v14, !24
        v15 = get_local ptr { u64, u64 }, buffer, !26
        v16 = call abi_decode_5(v15), !29
        v17 = call read_bytes_10(v15, v16), !31
        v18 = get_local ptr slice, data, !33
        store v17 to v18, !34
        v19 = get_local ptr slice, data, !36
        v20 = load v19, !37
        v21 = get_local ptr slice, __tmp_arg
        store v20 to v21
        v22 = call ptr_11(v21)
        v23 = get_local ptr { u64, u64 }, __anon_000, !39
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !40
        store v22 to v25, !41
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26, !42
        store v16 to v27, !43
        v28 = asm(s: v23) -> slice s, !45 {
        }
        v29 = get_local ptr slice, _method_name, !46
        store v28 to v29, !46
        v30 = get_local ptr slice, _method_name, !47
        v31 = load v30
        v32 = ptr_to_int v1 to u64, !48
        v33 = get_local ptr { u64, u64 }, __anon_0, !48
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        store v32 to v35, !48
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36
        v38 = const u64 16
        store v38 to v37, !48
        v39 = get_local ptr slice, __anon_1, !48
        mem_copy_bytes v39, v33, 16
        v40 = load v39
        v41 = get_local ptr slice, __tmp_arg4
        store v31 to v41
        v42 = get_local ptr slice, __tmp_arg5
        store v40 to v42
        v43 = call eq_13(v41, v42)
        v44 = const unit ()
        cbr v43, block0(), block2(v44), !49

        block0():
        v45 = call from_second_parameter_19(), !52
        v46 = get_local ptr { u64, u64 }, buffer0, !54
        store v45 to v46, !55
        v47 = get_local ptr { u64, u64 }, buffer0, !57
        v48 = call decode_24(v47), !63
        v49 = const u64 1, !64
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v49), !65

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v50: u64):
        v51 = const u64 3, !66
        v52 = cmp lt v50 v51, !68
        cbr v52, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !69

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v53 = call decode_24(v47), !71
        v54 = const u64 1, !72
        v55 = add v50, v54, !74
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v55), !75

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v56 = call decode_28(v47), !77
        v57 = call decode_35(v47), !80
        v58 = const u64 1, !81
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v58), !82

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v59: u64):
        v60 = const u64 4, !83
        v61 = cmp lt v59 v60, !85
        cbr v61, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !86

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v62 = call decode_35(v47), !88
        v63 = const u64 1, !89
        v64 = add v59, v63, !91
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v64), !92

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v65 = get_local ptr string<6>, __const0
        v66 = load v65
        v67 = const u64 5, !93
        v68 = call read_bytes_10(v47, v67), !97
        v69 = get_local ptr slice, data0, !99
        store v68 to v69, !100
        v70 = get_local ptr slice, data0, !102
        v71 = load v70, !103
        v72 = get_local ptr slice, __tmp_arg0
        store v71 to v72
        v73 = call ptr_11(v72)
        v74 = asm(s: v73) -> string<5> s, !105 {
        }
        v75 = call abi_decode_32(v47), !107
        v76 = call abi_decode_39(v47), !109
        v77 = call new_42(), !112
        v78 = ptr_to_int v77 to u64, !114
        v79 = int_to_ptr v78 to ptr { { u64, u64, u64 } }, !115
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr { u64, u64, u64 }, v80, !117
        v82 = load v81, !118
        v83 = asm(buffer: v82) -> { u64, u64, u64 } buffer, !119 {
        }
        v84 = get_local ptr { u64, u64, u64 }, __anon_03, !120
        store v83 to v84, !121
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !122
        v87 = load v86, !123
        v88 = int_to_ptr v87 to ptr u8, !124
        v89 = const u64 1
        v90 = get_elem_ptr v84, ptr u64, v89, !125
        v91 = load v90, !126
        v92 = const u64 2
        v93 = get_elem_ptr v84, ptr u64, v92, !127
        v94 = load v93, !128
        v95 = get_local ptr string<6>, __anon_10, !129
        store v66 to v95, !130
        v96 = ptr_to_int v88 to u64, !131
        v97 = add v96, v94, !132
        v98 = int_to_ptr v97 to ptr u8, !133
        mem_copy_bytes v98, v95, 6, !134
        v99 = const u64 6
        v100 = add v94, v99, !135
        v101 = ptr_to_int v88 to u64, !136
        v102 = get_local ptr { u64, u64, u64 }, __anon_20, !137
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !138
        store v101 to v104, !139
        v105 = const u64 1
        v106 = get_elem_ptr v102, ptr u64, v105, !140
        store v91 to v106, !141
        v107 = const u64 2
        v108 = get_elem_ptr v102, ptr u64, v107, !142
        store v100 to v108, !143
        v109 = asm(buffer: v102) -> { u64, u64, u64 } buffer, !144 {
        }
        v110 = get_local ptr { { u64, u64, u64 } }, __anon_30, !146
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr { u64, u64, u64 }, v111, !147
        store v109 to v112, !148
        v113 = load v110, !149
        v114 = get_local ptr { { u64, u64, u64 } }, buffer1, !151
        store v113 to v114, !152
        v115 = get_local ptr { { u64, u64, u64 } }, buffer1, !154
        v116 = load v115, !110
        v117 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        store v116 to v117
        v118 = call as_raw_slice_43(v117)
        v119 = get_local ptr slice, result_complex_function, !155
        store v118 to v119, !155
        v120 = get_local ptr slice, result_complex_function, !156
        v121 = load v120
        v122 = get_local ptr slice, __tmp_arg1
        store v121 to v122
        v123 = call ptr_11(v122)
        v124 = get_local ptr slice, result_complex_function, !157
        v125 = load v124
        v126 = get_local ptr slice, __tmp_arg13
        store v125 to v126
        v127 = call len_45(v126)
        retd v123 v127, !158
        v128 = const unit ()
        br block2(v128)

        block2(v129: ()):
        v130 = get_local ptr string<18>, __const1
        v131 = load v130
        v132 = get_local ptr slice, _method_name, !159
        v133 = load v132
        v134 = ptr_to_int v131 to u64, !160
        v135 = get_local ptr { u64, u64 }, __anon_2, !160
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136
        store v134 to v137, !160
        v138 = const u64 1
        v139 = get_elem_ptr v135, ptr u64, v138
        v140 = const u64 18
        store v140 to v139, !160
        v141 = get_local ptr slice, __anon_3, !160
        mem_copy_bytes v141, v135, 16
        v142 = load v141
        v143 = get_local ptr slice, __tmp_arg6
        store v133 to v143
        v144 = get_local ptr slice, __tmp_arg7
        store v142 to v144
        v145 = call eq_13(v143, v144)
        v146 = const unit ()
        cbr v145, block3(), block5(v146), !161

        block3():
        v147 = call from_second_parameter_19(), !163
        v148 = get_local ptr { u64, u64 }, buffer2, !164
        store v147 to v148, !165
        v149 = get_local ptr { u64, u64 }, buffer2, !166
        v150 = call read_53(v149), !170
        v151 = const u64 1, !64
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v151), !171

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v152: u64):
        v153 = const u64 3, !66
        v154 = cmp lt v152 v153, !172
        cbr v154, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !173

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v155 = call read_53(v149), !174
        v156 = const u64 1, !72
        v157 = add v152, v156, !175
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v157), !176

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v158 = call abi_decode_59(v149), !179
        v159 = const u64 1, !180
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v159), !181

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v160: u64):
        v161 = const u64 5, !182
        v162 = cmp lt v160 v161, !184
        cbr v162, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !185

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v163 = call abi_decode_59(v149), !187
        v164 = const u64 1, !188
        v165 = add v160, v164, !190
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v165), !191

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v166 = call new_42(), !193
        v167 = ptr_to_int v166 to u64, !194
        v168 = int_to_ptr v167 to ptr { { u64, u64, u64 } }, !195
        v169 = const u64 0
        v170 = get_elem_ptr v168, ptr { u64, u64, u64 }, v169, !196
        v171 = load v170, !197
        v172 = asm(buffer: v171) -> { u64, u64, u64 } buffer, !198 {
        }
        v173 = get_local ptr { u64, u64, u64 }, __anon_05, !199
        store v172 to v173, !200
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr u64, v174, !201
        v176 = load v175, !202
        v177 = int_to_ptr v176 to ptr u8, !203
        v178 = const u64 1
        v179 = get_elem_ptr v173, ptr u64, v178, !204
        v180 = load v179, !205
        v181 = const u64 2
        v182 = get_elem_ptr v173, ptr u64, v181, !206
        v183 = load v182, !207
        v184 = ptr_to_int v177 to u64, !208
        v185 = add v184, v183, !209
        v186 = int_to_ptr v185 to ptr u64, !210
        v187 = const u64 0, !212
        store v187 to v186, !213
        v188 = const u64 8
        v189 = add v183, v188, !214
        v190 = ptr_to_int v177 to u64, !215
        v191 = get_local ptr { u64, u64, u64 }, __anon_11, !216
        v192 = const u64 0
        v193 = get_elem_ptr v191, ptr u64, v192, !217
        store v190 to v193, !218
        v194 = const u64 1
        v195 = get_elem_ptr v191, ptr u64, v194, !219
        store v180 to v195, !220
        v196 = const u64 2
        v197 = get_elem_ptr v191, ptr u64, v196, !221
        store v189 to v197, !222
        v198 = asm(buffer: v191) -> { u64, u64, u64 } buffer, !223 {
        }
        v199 = get_local ptr { { u64, u64, u64 } }, __anon_21, !225
        v200 = const u64 0
        v201 = get_elem_ptr v199, ptr { u64, u64, u64 }, v200, !226
        store v198 to v201, !227
        v202 = load v199, !228
        v203 = get_local ptr { { u64, u64, u64 } }, buffer3, !229
        store v202 to v203, !230
        v204 = get_local ptr { { u64, u64, u64 } }, buffer3, !231
        v205 = load v204, !192
        v206 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        store v205 to v206
        v207 = call as_raw_slice_43(v206)
        v208 = get_local ptr slice, result_take_generic_array, !232
        store v207 to v208, !232
        v209 = get_local ptr slice, result_take_generic_array, !233
        v210 = load v209
        v211 = get_local ptr slice, __tmp_arg2
        store v210 to v211
        v212 = call ptr_11(v211)
        v213 = get_local ptr slice, result_take_generic_array, !234
        v214 = load v213
        v215 = get_local ptr slice, __tmp_arg14
        store v214 to v215
        v216 = call len_45(v215)
        retd v212 v216, !235
        v217 = const unit ()
        br block5(v217)

        block5(v218: ()):
        v219 = get_local ptr string<36>, __const2
        v220 = load v219
        v221 = get_local ptr slice, _method_name, !236
        v222 = load v221
        v223 = ptr_to_int v220 to u64, !237
        v224 = get_local ptr { u64, u64 }, __anon_4, !237
        v225 = const u64 0
        v226 = get_elem_ptr v224, ptr u64, v225
        store v223 to v226, !237
        v227 = const u64 1
        v228 = get_elem_ptr v224, ptr u64, v227
        v229 = const u64 36
        store v229 to v228, !237
        v230 = get_local ptr slice, __anon_5, !237
        mem_copy_bytes v230, v224, 16
        v231 = load v230
        v232 = get_local ptr slice, __tmp_arg8
        store v222 to v232
        v233 = get_local ptr slice, __tmp_arg9
        store v231 to v233
        v234 = call eq_13(v232, v233)
        v235 = const unit ()
        cbr v234, block6(), block8(v235), !238

        block6():
        v236 = call from_second_parameter_19(), !240
        v237 = get_local ptr { u64, u64 }, buffer4, !241
        store v236 to v237, !242
        v238 = get_local ptr { u64, u64 }, buffer4, !243
        v239 = call abi_decode_39(v238), !246
        v240 = call read_53(v238), !249
        v241 = asm(input: v240) -> u64 input, !253 {
        }
        v242 = call read_53(v238), !255
        v243 = asm(input: v242) -> u64 input, !257 {
        }
        v244 = call abi_decode_74(v238), !259
        v245 = call abi_decode_74(v238), !261
        v246 = call abi_decode_39(v238), !262
        v247 = call new_42(), !264
        v248 = get_local ptr { { u64, u64, u64 } }, buffer5, !265
        store v247 to v248, !266
        v249 = get_local ptr { { u64, u64, u64 } }, buffer5, !267
        v250 = load v249, !263
        v251 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        store v250 to v251
        v252 = call as_raw_slice_43(v251)
        v253 = get_local ptr slice, result_take_generic_struct_containing_tuple, !268
        store v252 to v253, !268
        v254 = get_local ptr slice, result_take_generic_struct_containing_tuple, !269
        v255 = load v254
        v256 = get_local ptr slice, __tmp_arg3
        store v255 to v256
        v257 = call ptr_11(v256)
        v258 = get_local ptr slice, result_take_generic_struct_containing_tuple, !270
        v259 = load v258
        v260 = get_local ptr slice, __tmp_arg15
        store v259 to v260
        v261 = call len_45(v260)
        retd v257 v261, !271
        v262 = const unit ()
        br block8(v262)

        block8(v263: ()):
        v264 = const u64 123, !272
        revert v264, !273
    }

    pub fn read_3(self !275: u64) -> u64, !276 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !277 {
            lw     val ptr i0, !278
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !279: ptr { u64, u64 }) -> u64, !280 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !283
        v2 = load v1, !281
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !285
        v5 = load v4, !281
        v6 = const u64 1
        v7 = mul v6, v5, !287
        v8 = add v2, v7, !288
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !289
        v11 = load v10, !281
        v12 = const u64 8
        v13 = add v11, v12, !291
        v14 = asm(ptr: v8, val) -> u64 val, !293 {
            lw     val ptr i0, !294
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !296
        store v13 to v16, !297
        ret u64 v14
    }

    pub fn read_bytes_10(self !298: ptr { u64, u64 }, count !299: u64) -> slice, !300 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !284
        v2 = load v1
        v3 = add v2, count, !301
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !282
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !284
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !302
        v12 = add v6, v11, !302
        v13 = get_local ptr { u64, u64 }, __anon_0, !303
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !303
        store v12 to v15, !303
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !303
        store count to v17, !303
        v18 = asm(ptr: v13) -> slice ptr, !304 {
        }
        v19 = get_local ptr slice, slice, !305
        store v18 to v19, !305
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !306
        store v3 to v21, !306
        v22 = get_local ptr slice, slice, !307
        v23 = load v22
        ret slice v23
    }

    pub fn ptr_11(self: ptr slice) -> u64, !309 {
        local { u64, u64 } __anon_0

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !312 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !313
        v5 = load v4
        ret u64 v5
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !315 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = load self
        v1 = load other
        v2 = get_local ptr slice, __tmp_arg
        store v0 to v2
        v3 = call len_16(v2)
        v4 = get_local ptr slice, __tmp_arg0
        store v1 to v4
        v5 = call len_16(v4)
        v6 = cmp eq v3 v5, !318
        v7 = const bool false, !319
        v8 = cmp eq v6 v7, !321
        v9 = const bool false, !322
        cbr v8, block2(v9), block1(), !316

        block1():
        v10 = get_local ptr slice, __tmp_arg2
        store v0 to v10
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg3
        store v1 to v12
        v13 = call as_ptr_17(v12)
        v14 = get_local ptr slice, __tmp_arg1
        store v0 to v14
        v15 = call len_16(v14)
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !323 {
            meq    r4 r1 r2 r3, !324
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn len_16(self: ptr slice) -> u64, !326 {
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(s: v0) -> { u64, u64 } s, !327 {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_2, !328
        store v1 to v2, !328
        v3 = get_local ptr { u64, u64 }, __tuple_2, !328
        v4 = load v3
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !328
        store v4 to v5, !328
        v6 = get_local ptr { u64, u64 }, __tuple_2_, !328
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7, !328
        v9 = load v8
        ret u64 v9
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !329 {
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(s: v0) -> { u64, u64 } s, !330 {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_1, !331
        store v1 to v2, !331
        v3 = get_local ptr { u64, u64 }, __tuple_1, !331
        v4 = load v3
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !331
        store v4 to v5, !331
        v6 = get_local ptr { u64, u64 }, __tuple_1_, !331
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !331
        v9 = load v8
        ret u64 v9
    }

    pub fn from_second_parameter_19() -> { u64, u64 }, !332 {
        local { u64, u64 } __anon_0

        entry():
        v0 = asm() -> u64 fp, !333 {
        }
        v1 = const u64 592, !334
        v2 = add v0, v1, !334
        v3 = call read_3(v2), !335
        v4 = asm(ptr: v3) -> u64 ptr, !336 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !337
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !337
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !338
        store v10 to v9, !337
        v11 = load v5
        ret { u64, u64 } v11
    }

    pub fn decode_24(self !339: ptr { u64, u64 }) -> b256, !340 {
        local b256 v

        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !342
        v2 = load v1, !343
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !344
        v5 = load v4, !345
        v6 = const u64 1
        v7 = mul v6, v5, !346
        v8 = add v2, v7, !347
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !348
        v11 = load v10, !349
        v12 = const u64 32
        v13 = add v11, v12, !350
        v14 = asm(ptr: v8) -> b256 ptr, !352 {
        }
        v15 = get_local ptr b256, v, !354
        store v14 to v15, !355
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !357
        store v13 to v17, !358
        v18 = get_local ptr b256, v, !360
        v19 = load v18, !361
        ret b256 v19
    }

    pub fn decode_28(self !339: ptr { u64, u64 }) -> { u64, ( u64 | bool ) }, !340 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !363
        v1 = const u64 0, !364
        v2 = cmp eq v0 v1, !366
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !367

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !369
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !370
        v6 = const u64 0, !368
        store v6 to v5, !371
        v7 = call abi_decode_5(self), !373
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !374
        store v7 to v10, !375
        v11 = load v3, !61
        v12 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        store v11 to v12
        br abi_decode_29_block5(v12), !61

        abi_decode_29_block1():
        v13 = const u64 1, !376
        v14 = cmp eq v0 v13, !378
        cbr v14, abi_decode_29_block2(), abi_decode_29_block3(), !379

        abi_decode_29_block2():
        v15 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !380
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !381
        v18 = const u64 1, !368
        store v18 to v17, !382
        v19 = call abi_decode_32(self), !384
        v20 = const u64 1
        v21 = const u64 1
        v22 = get_elem_ptr v15, ptr bool, v20, v21, !385
        store v19 to v22, !386
        v23 = load v15, !61
        v24 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        store v23 to v24
        br abi_decode_29_block5(v24), !61

        abi_decode_29_block3():
        v25 = const u64 0, !387
        revert v25, !389

        abi_decode_29_block5(v26: ptr { u64, ( u64 | bool ) }):
        v27 = load v26
        ret { u64, ( u64 | bool ) } v27
    }

    pub fn abi_decode_32(buffer !390: ptr { u64, u64 }) -> bool, !391 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !393
        v2 = load v1, !392
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !394
        v5 = load v4, !392
        v6 = const u64 1
        v7 = mul v6, v5, !395
        v8 = add v2, v7, !396
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !397
        v11 = load v10, !392
        v12 = const u64 1
        v13 = add v11, v12, !398
        v14 = asm(ptr: v8, val) -> bool val, !400 {
            lb     val ptr i0, !401
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !403
        store v13 to v16, !404
        ret bool v14
    }

    pub fn decode_35(self !339: ptr { u64, u64 }) -> { u64, { u64, ( u64 | bool ) } }, !340 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0

        entry(self: ptr { u64, u64 }):
        v0 = call abi_decode_5(self), !405
        v1 = call decode_28(self), !406
        v2 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !408
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !61
        store v0 to v4, !409
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5, !61
        store v1 to v6, !410
        v7 = load v2, !61
        ret { u64, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_39(buffer !411: ptr { u64, u64 }) -> { u64 }, !412 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call abi_decode_5(buffer), !414
        v1 = get_local ptr { u64 }, __anon_0, !415
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !415
        v4 = load v1
        ret { u64 } v4
    }

    pub fn new_42() -> { { u64, u64, u64 } }, !416 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !417
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !417
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }) -> slice, !418 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: ptr { { u64, u64, u64 } }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !116
        v5 = load v4
        v6 = asm(buffer: v5) -> { u64, u64, u64 } buffer {
        }
        v7 = get_local ptr { u64, u64, u64 }, __anon_0
        store v6 to v7
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8
        v10 = load v9
        v11 = int_to_ptr v10 to ptr u8
        v12 = const u64 2
        v13 = get_elem_ptr v7, ptr u64, v12
        v14 = load v13
        v15 = ptr_to_int v11 to u64
        v16 = get_local ptr { u64, u64 }, __anon_1
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        store v15 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19
        store v14 to v20
        v21 = asm(s: v16) -> slice s {
        }
        ret slice v21
    }

    pub fn len_45(self: ptr slice) -> u64, !419 {
        local { u64, u64 } __anon_0

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !421 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !422
        v5 = load v4
        v6 = const u64 1
        v7 = div v5, v6
        ret u64 v7
    }

    pub fn read_53(self !423: ptr { u64, u64 }) -> u8, !424 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !282
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !284
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !286
        v8 = add v2, v7, !286
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !284
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !290
        v14 = asm(ptr: v8, val) -> u8 val, !399 {
            lb     val ptr i0, !401
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !402
        store v13 to v16, !402
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !425: ptr { u64, u64 }) -> { u8, { u64, ( u64 | bool ) } }, !426 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0

        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !427
        v1 = call decode_28(buffer), !76
        v2 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !407
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u8, v3
        store v0 to v4, !407
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( u64 | bool ) }, v5
        store v1 to v6, !407
        v7 = load v2
        ret { u8, { u64, ( u64 | bool ) } } v7
    }

    pub fn abi_decode_74(buffer !428: ptr { u64, u64 }) -> u64, !429 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !430
        v1 = asm(input: v0) -> u64 input, !432 {
        }
        v2 = call read_53(buffer), !433
        v3 = asm(input: v2) -> u64 input, !435 {
        }
        v4 = call read_53(buffer), !436
        v5 = asm(input: v4) -> u64 input, !438 {
        }
        v6 = call read_53(buffer), !439
        v7 = asm(input: v6) -> u64 input, !441 {
        }
        v8 = const u64 24, !442
        v9 = lsh v1, v8, !443
        v10 = const u64 4294967295, !445
        v11 = and v9, v10, !443
        v12 = const u64 16, !446
        v13 = lsh v3, v12, !447
        v14 = and v13, v10, !447
        v15 = or v11, v14, !448
        v16 = const u64 8, !449
        v17 = lsh v5, v16, !450
        v18 = and v17, v10, !450
        v19 = or v15, v18, !451
        v20 = or v19, v7, !452
        ret u64 v20
    }
}

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = load v0
        v2 = asm() -> u64 fp, !6 {
        }
        v3 = const u64 584, !8
        v4 = add v2, v3, !9
        v5 = call read_3(v4), !11
        v6 = asm(ptr: v5) -> u64 ptr, !13 {
        }
        v7 = get_local ptr { u64, u64 }, __anon_00, !15
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !16
        store v6 to v9, !17
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10, !18
        v12 = const u64 0, !19
        store v12 to v11, !20
        v13 = load v7, !21
        v14 = get_local ptr { u64, u64 }, buffer, !23
        store v13 to v14, !24
        v15 = get_local ptr { u64, u64 }, buffer, !26
        v16 = call abi_decode_5(v15), !29
        v17 = get_local ptr slice, __ret_val
        v18 = call read_bytes_10(v15, v16, v17)
        v19 = load v18
        v20 = get_local ptr slice, data, !31
        store v19 to v20, !32
        v21 = get_local ptr slice, data, !34
        v22 = load v21, !35
        v23 = get_local ptr slice, __tmp_arg
        store v22 to v23
        v24 = call ptr_11(v23)
        v25 = get_local ptr { u64, u64 }, __anon_000, !37
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !38
        store v24 to v27, !39
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr u64, v28, !40
        store v16 to v29, !41
        v30 = asm(s: v25) -> slice s, !43 {
        }
        v31 = get_local ptr slice, _method_name, !44
        store v30 to v31, !44
        v32 = get_local ptr slice, _method_name, !45
        v33 = load v32
        v34 = ptr_to_int v1 to u64, !46
        v35 = get_local ptr { u64, u64 }, __anon_0, !46
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36
        store v34 to v37, !46
        v38 = const u64 1
        v39 = get_elem_ptr v35, ptr u64, v38
        v40 = const u64 16
        store v40 to v39, !46
        v41 = get_local ptr slice, __anon_1, !46
        mem_copy_bytes v41, v35, 16
        v42 = load v41
        v43 = get_local ptr slice, __tmp_arg4
        store v33 to v43
        v44 = get_local ptr slice, __tmp_arg5
        store v42 to v44
        v45 = call eq_13(v43, v44)
        v46 = const unit ()
        cbr v45, block0(), block2(v46), !47

        block0():
        v47 = get_local ptr { u64, u64 }, __ret_val1
        v48 = call from_second_parameter_19(v47)
        v49 = load v48
        v50 = get_local ptr { u64, u64 }, buffer0, !50
        store v49 to v50, !51
        v51 = get_local ptr { u64, u64 }, buffer0, !53
        v52 = get_local ptr b256, __ret_val4
        v53 = call decode_24(v51, v52)
        v54 = load v53
        v55 = const u64 1, !54
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v55), !59

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v56: u64):
        v57 = const u64 3, !60
        v58 = cmp lt v56 v57, !62
        cbr v58, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !63

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v59 = get_local ptr b256, __ret_val5
        v60 = call decode_24(v51, v59)
        v61 = load v60
        v62 = const u64 1, !64
        v63 = add v56, v62, !66
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v63), !67

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v64 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v65 = call decode_28(v51, v64)
        v66 = load v65
        v67 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v68 = call decode_35(v51, v67)
        v69 = load v68
        v70 = const u64 1, !68
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v70), !70

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v71: u64):
        v72 = const u64 4, !71
        v73 = cmp lt v71 v72, !73
        cbr v73, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !74

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v74 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v75 = call decode_35(v51, v74)
        v76 = load v75
        v77 = const u64 1, !75
        v78 = add v71, v77, !77
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v78), !78

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v79 = get_local ptr string<6>, __const0
        v80 = load v79
        v81 = get_local ptr slice, __ret_val0
        v82 = const u64 5, !79
        v83 = call read_bytes_10(v51, v82, v81)
        v84 = load v83
        v85 = get_local ptr slice, data0, !83
        store v84 to v85, !84
        v86 = get_local ptr slice, data0, !86
        v87 = load v86, !87
        v88 = get_local ptr slice, __tmp_arg0
        store v87 to v88
        v89 = call ptr_11(v88)
        v90 = asm(s: v89) -> string<5> s, !89 {
        }
        v91 = call abi_decode_32(v51), !91
        v92 = get_local ptr { u64 }, __ret_val9
        v93 = call abi_decode_39(v51, v92)
        v94 = load v93
        v95 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v96 = call new_42(v95)
        v97 = load v96
        v98 = ptr_to_int v97 to u64, !94
        v99 = int_to_ptr v98 to ptr { { u64, u64, u64 } }, !95
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr { u64, u64, u64 }, v100, !97
        v102 = load v101, !98
        v103 = asm(buffer: v102) -> { u64, u64, u64 } buffer, !99 {
        }
        v104 = get_local ptr { u64, u64, u64 }, __anon_03, !100
        store v103 to v104, !101
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105, !102
        v107 = load v106, !103
        v108 = int_to_ptr v107 to ptr u8, !104
        v109 = const u64 1
        v110 = get_elem_ptr v104, ptr u64, v109, !105
        v111 = load v110, !106
        v112 = const u64 2
        v113 = get_elem_ptr v104, ptr u64, v112, !107
        v114 = load v113, !108
        v115 = get_local ptr string<6>, __anon_10, !109
        store v80 to v115, !110
        v116 = ptr_to_int v108 to u64, !111
        v117 = add v116, v114, !112
        v118 = int_to_ptr v117 to ptr u8, !113
        mem_copy_bytes v118, v115, 6, !114
        v119 = const u64 6
        v120 = add v114, v119, !115
        v121 = ptr_to_int v108 to u64, !116
        v122 = get_local ptr { u64, u64, u64 }, __anon_20, !117
        v123 = const u64 0
        v124 = get_elem_ptr v122, ptr u64, v123, !118
        store v121 to v124, !119
        v125 = const u64 1
        v126 = get_elem_ptr v122, ptr u64, v125, !120
        store v111 to v126, !121
        v127 = const u64 2
        v128 = get_elem_ptr v122, ptr u64, v127, !122
        store v120 to v128, !123
        v129 = asm(buffer: v122) -> { u64, u64, u64 } buffer, !124 {
        }
        v130 = get_local ptr { { u64, u64, u64 } }, __anon_30, !126
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !127
        store v129 to v132, !128
        v133 = load v130, !129
        v134 = get_local ptr { { u64, u64, u64 } }, buffer1, !131
        store v133 to v134, !132
        v135 = get_local ptr { { u64, u64, u64 } }, buffer1, !134
        v136 = load v135, !92
        v137 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        store v136 to v137
        v138 = get_local ptr slice, __ret_val15
        v139 = call as_raw_slice_43(v137, v138)
        v140 = load v139
        v141 = get_local ptr slice, result_complex_function, !135
        store v140 to v141, !135
        v142 = get_local ptr slice, result_complex_function, !136
        v143 = load v142
        v144 = get_local ptr slice, __tmp_arg1
        store v143 to v144
        v145 = call ptr_11(v144)
        v146 = get_local ptr slice, result_complex_function, !137
        v147 = load v146
        v148 = get_local ptr slice, __tmp_arg13
        store v147 to v148
        v149 = call len_45(v148)
        retd v145 v149, !138
        v150 = const unit ()
        br block2(v150)

        block2(v151: ()):
        v152 = get_local ptr string<18>, __const1
        v153 = load v152
        v154 = get_local ptr slice, _method_name, !139
        v155 = load v154
        v156 = ptr_to_int v153 to u64, !140
        v157 = get_local ptr { u64, u64 }, __anon_2, !140
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr u64, v158
        store v156 to v159, !140
        v160 = const u64 1
        v161 = get_elem_ptr v157, ptr u64, v160
        v162 = const u64 18
        store v162 to v161, !140
        v163 = get_local ptr slice, __anon_3, !140
        mem_copy_bytes v163, v157, 16
        v164 = load v163
        v165 = get_local ptr slice, __tmp_arg6
        store v155 to v165
        v166 = get_local ptr slice, __tmp_arg7
        store v164 to v166
        v167 = call eq_13(v165, v166)
        v168 = const unit ()
        cbr v167, block3(), block5(v168), !141

        block3():
        v169 = get_local ptr { u64, u64 }, __ret_val2
        v170 = call from_second_parameter_19(v169)
        v171 = load v170
        v172 = get_local ptr { u64, u64 }, buffer2, !143
        store v171 to v172, !144
        v173 = get_local ptr { u64, u64 }, buffer2, !145
        v174 = call read_53(v173), !150
        v175 = const u64 1, !54
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v175), !151

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v176: u64):
        v177 = const u64 3, !60
        v178 = cmp lt v176 v177, !152
        cbr v178, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !153

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v179 = call read_53(v173), !155
        v180 = const u64 1, !64
        v181 = add v176, v180, !156
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v181), !157

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v182 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v183 = call abi_decode_59(v173, v182)
        v184 = load v183
        v185 = const u64 1, !158
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v185), !160

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v186: u64):
        v187 = const u64 5, !161
        v188 = cmp lt v186 v187, !163
        cbr v188, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !164

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v189 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v190 = call abi_decode_59(v173, v189)
        v191 = load v190
        v192 = const u64 1, !165
        v193 = add v186, v192, !167
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v193), !168

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v194 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v195 = call new_42(v194)
        v196 = load v195
        v197 = ptr_to_int v196 to u64, !170
        v198 = int_to_ptr v197 to ptr { { u64, u64, u64 } }, !171
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr { u64, u64, u64 }, v199, !172
        v201 = load v200, !173
        v202 = asm(buffer: v201) -> { u64, u64, u64 } buffer, !174 {
        }
        v203 = get_local ptr { u64, u64, u64 }, __anon_05, !175
        store v202 to v203, !176
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr u64, v204, !177
        v206 = load v205, !178
        v207 = int_to_ptr v206 to ptr u8, !179
        v208 = const u64 1
        v209 = get_elem_ptr v203, ptr u64, v208, !180
        v210 = load v209, !181
        v211 = const u64 2
        v212 = get_elem_ptr v203, ptr u64, v211, !182
        v213 = load v212, !183
        v214 = ptr_to_int v207 to u64, !184
        v215 = add v214, v213, !185
        v216 = int_to_ptr v215 to ptr u64, !186
        v217 = const u64 0, !188
        store v217 to v216, !189
        v218 = const u64 8
        v219 = add v213, v218, !190
        v220 = ptr_to_int v207 to u64, !191
        v221 = get_local ptr { u64, u64, u64 }, __anon_11, !192
        v222 = const u64 0
        v223 = get_elem_ptr v221, ptr u64, v222, !193
        store v220 to v223, !194
        v224 = const u64 1
        v225 = get_elem_ptr v221, ptr u64, v224, !195
        store v210 to v225, !196
        v226 = const u64 2
        v227 = get_elem_ptr v221, ptr u64, v226, !197
        store v219 to v227, !198
        v228 = asm(buffer: v221) -> { u64, u64, u64 } buffer, !199 {
        }
        v229 = get_local ptr { { u64, u64, u64 } }, __anon_21, !201
        v230 = const u64 0
        v231 = get_elem_ptr v229, ptr { u64, u64, u64 }, v230, !202
        store v228 to v231, !203
        v232 = load v229, !204
        v233 = get_local ptr { { u64, u64, u64 } }, buffer3, !205
        store v232 to v233, !206
        v234 = get_local ptr { { u64, u64, u64 } }, buffer3, !207
        v235 = load v234, !169
        v236 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        store v235 to v236
        v237 = get_local ptr slice, __ret_val16
        v238 = call as_raw_slice_43(v236, v237)
        v239 = load v238
        v240 = get_local ptr slice, result_take_generic_array, !208
        store v239 to v240, !208
        v241 = get_local ptr slice, result_take_generic_array, !209
        v242 = load v241
        v243 = get_local ptr slice, __tmp_arg2
        store v242 to v243
        v244 = call ptr_11(v243)
        v245 = get_local ptr slice, result_take_generic_array, !210
        v246 = load v245
        v247 = get_local ptr slice, __tmp_arg14
        store v246 to v247
        v248 = call len_45(v247)
        retd v244 v248, !211
        v249 = const unit ()
        br block5(v249)

        block5(v250: ()):
        v251 = get_local ptr string<36>, __const2
        v252 = load v251
        v253 = get_local ptr slice, _method_name, !212
        v254 = load v253
        v255 = ptr_to_int v252 to u64, !213
        v256 = get_local ptr { u64, u64 }, __anon_4, !213
        v257 = const u64 0
        v258 = get_elem_ptr v256, ptr u64, v257
        store v255 to v258, !213
        v259 = const u64 1
        v260 = get_elem_ptr v256, ptr u64, v259
        v261 = const u64 36
        store v261 to v260, !213
        v262 = get_local ptr slice, __anon_5, !213
        mem_copy_bytes v262, v256, 16
        v263 = load v262
        v264 = get_local ptr slice, __tmp_arg8
        store v254 to v264
        v265 = get_local ptr slice, __tmp_arg9
        store v263 to v265
        v266 = call eq_13(v264, v265)
        v267 = const unit ()
        cbr v266, block6(), block8(v267), !214

        block6():
        v268 = get_local ptr { u64, u64 }, __ret_val3
        v269 = call from_second_parameter_19(v268)
        v270 = load v269
        v271 = get_local ptr { u64, u64 }, buffer4, !216
        store v270 to v271, !217
        v272 = get_local ptr { u64, u64 }, buffer4, !218
        v273 = get_local ptr { u64 }, __ret_val10
        v274 = call abi_decode_39(v272, v273)
        v275 = load v274
        v276 = call read_53(v272), !222
        v277 = asm(input: v276) -> u64 input, !226 {
        }
        v278 = call read_53(v272), !228
        v279 = asm(input: v278) -> u64 input, !230 {
        }
        v280 = call abi_decode_74(v272), !232
        v281 = call abi_decode_74(v272), !234
        v282 = get_local ptr { u64 }, __ret_val11
        v283 = call abi_decode_39(v272, v282)
        v284 = load v283
        v285 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v286 = call new_42(v285)
        v287 = load v286
        v288 = get_local ptr { { u64, u64, u64 } }, buffer5, !236
        store v287 to v288, !237
        v289 = get_local ptr { { u64, u64, u64 } }, buffer5, !238
        v290 = load v289, !235
        v291 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        store v290 to v291
        v292 = get_local ptr slice, __ret_val17
        v293 = call as_raw_slice_43(v291, v292)
        v294 = load v293
        v295 = get_local ptr slice, result_take_generic_struct_containing_tuple, !239
        store v294 to v295, !239
        v296 = get_local ptr slice, result_take_generic_struct_containing_tuple, !240
        v297 = load v296
        v298 = get_local ptr slice, __tmp_arg3
        store v297 to v298
        v299 = call ptr_11(v298)
        v300 = get_local ptr slice, result_take_generic_struct_containing_tuple, !241
        v301 = load v300
        v302 = get_local ptr slice, __tmp_arg15
        store v301 to v302
        v303 = call len_45(v302)
        retd v299 v303, !242
        v304 = const unit ()
        br block8(v304)

        block8(v305: ()):
        v306 = const u64 123, !243
        revert v306, !244
    }

    pub fn read_3(self !246: u64) -> u64, !247 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !248 {
            lw     val ptr i0, !249
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !250: ptr { u64, u64 }) -> u64, !251 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !254
        v2 = load v1, !252
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !256
        v5 = load v4, !252
        v6 = const u64 1
        v7 = mul v6, v5, !258
        v8 = add v2, v7, !259
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !260
        v11 = load v10, !252
        v12 = const u64 8
        v13 = add v11, v12, !262
        v14 = asm(ptr: v8, val) -> u64 val, !264 {
            lw     val ptr i0, !265
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !267
        store v13 to v16, !268
        ret u64 v14
    }

    pub fn read_bytes_10(self !269: ptr { u64, u64 }, count !270: u64, __ret_value: ptr slice) -> ptr slice, !271 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !255
        v2 = load v1
        v3 = add v2, count, !272
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !253
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !255
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !273
        v12 = add v6, v11, !273
        v13 = get_local ptr { u64, u64 }, __anon_0, !274
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !274
        store v12 to v15, !274
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !274
        store count to v17, !274
        v18 = asm(ptr: v13) -> slice ptr, !275 {
        }
        v19 = get_local ptr slice, slice, !276
        store v18 to v19, !276
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !277
        store v3 to v21, !277
        v22 = get_local ptr slice, slice, !278
        v23 = load v22
        store v23 to __ret_value
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !280 {
        local { u64, u64 } __anon_0

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !283 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !284
        v5 = load v4
        ret u64 v5
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !286 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = load self
        v1 = load other
        v2 = get_local ptr slice, __tmp_arg
        store v0 to v2
        v3 = call len_16(v2)
        v4 = get_local ptr slice, __tmp_arg0
        store v1 to v4
        v5 = call len_16(v4)
        v6 = cmp eq v3 v5, !289
        v7 = const bool false, !290
        v8 = cmp eq v6 v7, !292
        v9 = const bool false, !293
        cbr v8, block2(v9), block1(), !287

        block1():
        v10 = get_local ptr slice, __tmp_arg2
        store v0 to v10
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg3
        store v1 to v12
        v13 = call as_ptr_17(v12)
        v14 = get_local ptr slice, __tmp_arg1
        store v0 to v14
        v15 = call len_16(v14)
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !294 {
            meq    r4 r1 r2 r3, !295
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn len_16(self: ptr slice) -> u64, !297 {
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(s: v0) -> { u64, u64 } s, !298 {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_2, !299
        store v1 to v2, !299
        v3 = get_local ptr { u64, u64 }, __tuple_2, !299
        v4 = load v3
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !299
        store v4 to v5, !299
        v6 = get_local ptr { u64, u64 }, __tuple_2_, !299
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7, !299
        v9 = load v8
        ret u64 v9
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !300 {
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(s: v0) -> { u64, u64 } s, !301 {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_1, !302
        store v1 to v2, !302
        v3 = get_local ptr { u64, u64 }, __tuple_1, !302
        v4 = load v3
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !302
        store v4 to v5, !302
        v6 = get_local ptr { u64, u64 }, __tuple_1_, !302
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !302
        v9 = load v8
        ret u64 v9
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !303 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !304 {
        }
        v1 = const u64 592, !305
        v2 = add v0, v1, !305
        v3 = call read_3(v2), !306
        v4 = asm(ptr: v3) -> u64 ptr, !307 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !308
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !308
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !309
        store v10 to v9, !308
        v11 = load v5
        store v11 to __ret_value
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !310: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !311 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !313
        v2 = load v1, !314
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !315
        v5 = load v4, !316
        v6 = const u64 1
        v7 = mul v6, v5, !317
        v8 = add v2, v7, !318
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !319
        v11 = load v10, !320
        v12 = const u64 32
        v13 = add v11, v12, !321
        v14 = asm(ptr: v8) -> b256 ptr, !323 {
        }
        v15 = get_local ptr b256, v, !325
        store v14 to v15, !326
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !328
        store v13 to v17, !329
        v18 = get_local ptr b256, v, !331
        v19 = load v18, !332
        store v19 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !310: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !311 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !334
        v1 = const u64 0, !335
        v2 = cmp eq v0 v1, !337
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !338

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !340
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !341
        v6 = const u64 0, !339
        store v6 to v5, !342
        v7 = call abi_decode_5(self), !344
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !345
        store v7 to v10, !346
        v11 = load v3, !58
        v12 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        store v11 to v12
        br abi_decode_29_block5(v12), !58

        abi_decode_29_block1():
        v13 = const u64 1, !347
        v14 = cmp eq v0 v13, !349
        cbr v14, abi_decode_29_block2(), abi_decode_29_block3(), !350

        abi_decode_29_block2():
        v15 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !351
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !352
        v18 = const u64 1, !339
        store v18 to v17, !353
        v19 = call abi_decode_32(self), !355
        v20 = const u64 1
        v21 = const u64 1
        v22 = get_elem_ptr v15, ptr bool, v20, v21, !356
        store v19 to v22, !357
        v23 = load v15, !58
        v24 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        store v23 to v24
        br abi_decode_29_block5(v24), !58

        abi_decode_29_block3():
        v25 = const u64 0, !358
        revert v25, !360

        abi_decode_29_block5(v26: ptr { u64, ( u64 | bool ) }):
        v27 = load v26
        store v27 to __ret_value
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !361: ptr { u64, u64 }) -> bool, !362 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !364
        v2 = load v1, !363
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !365
        v5 = load v4, !363
        v6 = const u64 1
        v7 = mul v6, v5, !366
        v8 = add v2, v7, !367
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !368
        v11 = load v10, !363
        v12 = const u64 1
        v13 = add v11, v12, !369
        v14 = asm(ptr: v8, val) -> bool val, !371 {
            lb     val ptr i0, !372
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !374
        store v13 to v16, !375
        ret bool v14
    }

    pub fn decode_35(self !310: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !311 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !376
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = load v2
        v4 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !378
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !58
        store v0 to v6, !379
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7, !58
        store v3 to v8, !380
        v9 = load v4, !58
        store v9 to __ret_value
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !381: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !382 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !384
        v1 = get_local ptr { u64 }, __anon_0, !385
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !385
        v4 = load v1
        store v4 to __ret_value
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !386 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !387
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !387
        v16 = load v13
        store v16 to __ret_value
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !388 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !96
        v5 = load v4
        v6 = asm(buffer: v5) -> { u64, u64, u64 } buffer {
        }
        v7 = get_local ptr { u64, u64, u64 }, __anon_0
        store v6 to v7
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8
        v10 = load v9
        v11 = int_to_ptr v10 to ptr u8
        v12 = const u64 2
        v13 = get_elem_ptr v7, ptr u64, v12
        v14 = load v13
        v15 = ptr_to_int v11 to u64
        v16 = get_local ptr { u64, u64 }, __anon_1
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        store v15 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19
        store v14 to v20
        v21 = asm(s: v16) -> slice s {
        }
        store v21 to __ret_value
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !389 {
        local { u64, u64 } __anon_0

        entry(self: ptr slice):
        v0 = load self
        v1 = asm(ptr: v0) -> { u64, u64 } ptr, !391 {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !392
        v5 = load v4
        v6 = const u64 1
        v7 = div v5, v6
        ret u64 v7
    }

    pub fn read_53(self !393: ptr { u64, u64 }) -> u8, !394 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !253
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !255
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !257
        v8 = add v2, v7, !257
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !255
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !261
        v14 = asm(ptr: v8, val) -> u8 val, !370 {
            lb     val ptr i0, !372
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !373
        store v13 to v16, !373
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !395: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !396 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !397
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = load v2
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !377
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u8, v5
        store v0 to v6, !377
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7
        store v3 to v8, !377
        v9 = load v4
        store v9 to __ret_value
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !398: ptr { u64, u64 }) -> u64, !399 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !400
        v1 = asm(input: v0) -> u64 input, !402 {
        }
        v2 = call read_53(buffer), !403
        v3 = asm(input: v2) -> u64 input, !405 {
        }
        v4 = call read_53(buffer), !406
        v5 = asm(input: v4) -> u64 input, !408 {
        }
        v6 = call read_53(buffer), !409
        v7 = asm(input: v6) -> u64 input, !411 {
        }
        v8 = const u64 24, !412
        v9 = lsh v1, v8, !413
        v10 = const u64 4294967295, !415
        v11 = and v9, v10, !413
        v12 = const u64 16, !416
        v13 = lsh v3, v12, !417
        v14 = and v13, v10, !417
        v15 = or v11, v14, !418
        v16 = const u64 8, !419
        v17 = lsh v5, v16, !420
        v18 = and v17, v10, !420
        v19 = or v15, v18, !421
        v20 = or v19, v7, !422
        ret u64 v20
    }
}

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = load v0
        v2 = asm() -> u64 fp, !6 {
        }
        v3 = const u64 584, !8
        v4 = add v2, v3, !9
        v5 = call read_3(v4), !11
        v6 = asm(ptr: v5) -> u64 ptr, !13 {
        }
        v7 = get_local ptr { u64, u64 }, __anon_00, !15
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !16
        store v6 to v9, !17
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10, !18
        v12 = const u64 0, !19
        store v12 to v11, !20
        v13 = load v7, !21
        v14 = get_local ptr { u64, u64 }, buffer, !23
        store v13 to v14, !24
        v15 = get_local ptr { u64, u64 }, buffer, !26
        v16 = call abi_decode_5(v15), !29
        v17 = get_local ptr slice, __ret_val
        v18 = call read_bytes_10(v15, v16, v17)
        v19 = load v18
        v20 = get_local ptr slice, data, !31
        store v19 to v20, !32
        v21 = get_local ptr slice, data, !34
        v22 = load v21, !35
        v23 = get_local ptr slice, __tmp_arg
        store v22 to v23
        v24 = call ptr_11(v23)
        v25 = get_local ptr { u64, u64 }, __anon_000, !37
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !38
        store v24 to v27, !39
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr u64, v28, !40
        store v16 to v29, !41
        v30 = asm(s: v25) -> ptr slice s {
        }
        v31 = load v30
        v32 = get_local ptr slice, _method_name, !42
        store v31 to v32, !42
        v33 = get_local ptr slice, _method_name, !43
        v34 = load v33
        v35 = ptr_to_int v0 to u64, !44
        v36 = get_local ptr { u64, u64 }, __anon_0, !44
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37
        store v35 to v38, !44
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr u64, v39
        v41 = const u64 16
        store v41 to v40, !44
        v42 = get_local ptr slice, __anon_1, !44
        mem_copy_bytes v42, v36, 16
        v43 = load v42
        v44 = get_local ptr slice, __tmp_arg4
        store v34 to v44
        v45 = get_local ptr slice, __tmp_arg5
        store v43 to v45
        v46 = call eq_13(v44, v45)
        v47 = const unit ()
        cbr v46, block0(), block2(v47), !45

        block0():
        v48 = get_local ptr { u64, u64 }, __ret_val1
        v49 = call from_second_parameter_19(v48)
        v50 = load v49
        v51 = get_local ptr { u64, u64 }, buffer0, !48
        store v50 to v51, !49
        v52 = get_local ptr { u64, u64 }, buffer0, !51
        v53 = get_local ptr b256, __ret_val4
        v54 = call decode_24(v52, v53)
        v55 = load v54
        v56 = const u64 1, !52
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v56), !57

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v57: u64):
        v58 = const u64 3, !58
        v59 = cmp lt v57 v58, !60
        cbr v59, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !61

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v60 = get_local ptr b256, __ret_val5
        v61 = call decode_24(v52, v60)
        v62 = load v61
        v63 = const u64 1, !62
        v64 = add v57, v63, !64
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v64), !65

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v65 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v66 = call decode_28(v52, v65)
        v67 = load v66
        v68 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v69 = call decode_35(v52, v68)
        v70 = load v69
        v71 = const u64 1, !66
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v71), !68

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v72: u64):
        v73 = const u64 4, !69
        v74 = cmp lt v72 v73, !71
        cbr v74, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !72

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v75 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v76 = call decode_35(v52, v75)
        v77 = load v76
        v78 = const u64 1, !73
        v79 = add v72, v78, !75
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v79), !76

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v80 = get_local ptr string<6>, __const0
        v81 = load v80
        v82 = get_local ptr slice, __ret_val0
        v83 = const u64 5, !77
        v84 = call read_bytes_10(v52, v83, v82)
        v85 = load v84
        v86 = get_local ptr slice, data0, !81
        store v85 to v86, !82
        v87 = get_local ptr slice, data0, !84
        v88 = load v87, !85
        v89 = get_local ptr slice, __tmp_arg0
        store v88 to v89
        v90 = call ptr_11(v89)
        v91 = asm(s: v90) -> ptr string<5> s {
        }
        v92 = load v91
        v93 = call abi_decode_32(v52), !87
        v94 = get_local ptr { u64 }, __ret_val9
        v95 = call abi_decode_39(v52, v94)
        v96 = load v95
        v97 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v98 = call new_42(v97)
        v99 = load v98
        v100 = ptr_to_int v98 to u64, !90
        v101 = int_to_ptr v100 to ptr { { u64, u64, u64 } }, !91
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr { u64, u64, u64 }, v102, !93
        v104 = load v103, !94
        v105 = get_local ptr { u64, u64, u64 }, __asm_arg
        store v104 to v105
        v106 = asm(buffer: v105) -> ptr { u64, u64, u64 } buffer {
        }
        v107 = load v106
        v108 = get_local ptr { u64, u64, u64 }, __anon_03, !95
        store v107 to v108, !96
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u64, v109, !97
        v111 = load v110, !98
        v112 = int_to_ptr v111 to ptr u8, !99
        v113 = const u64 1
        v114 = get_elem_ptr v108, ptr u64, v113, !100
        v115 = load v114, !101
        v116 = const u64 2
        v117 = get_elem_ptr v108, ptr u64, v116, !102
        v118 = load v117, !103
        v119 = get_local ptr string<6>, __anon_10, !104
        store v81 to v119, !105
        v120 = ptr_to_int v112 to u64, !106
        v121 = add v120, v118, !107
        v122 = int_to_ptr v121 to ptr u8, !108
        mem_copy_bytes v122, v119, 6, !109
        v123 = const u64 6
        v124 = add v118, v123, !110
        v125 = ptr_to_int v112 to u64, !111
        v126 = get_local ptr { u64, u64, u64 }, __anon_20, !112
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !113
        store v125 to v128, !114
        v129 = const u64 1
        v130 = get_elem_ptr v126, ptr u64, v129, !115
        store v115 to v130, !116
        v131 = const u64 2
        v132 = get_elem_ptr v126, ptr u64, v131, !117
        store v124 to v132, !118
        v133 = asm(buffer: v126) -> ptr { u64, u64, u64 } buffer {
        }
        v134 = load v133
        v135 = get_local ptr { { u64, u64, u64 } }, __anon_30, !120
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr { u64, u64, u64 }, v136, !121
        store v134 to v137, !122
        v138 = load v135, !123
        v139 = get_local ptr { { u64, u64, u64 } }, buffer1, !125
        store v138 to v139, !126
        v140 = get_local ptr { { u64, u64, u64 } }, buffer1, !128
        v141 = load v140, !88
        v142 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        store v141 to v142
        v143 = get_local ptr slice, __ret_val15
        v144 = call as_raw_slice_43(v142, v143)
        v145 = load v144
        v146 = get_local ptr slice, result_complex_function, !129
        store v145 to v146, !129
        v147 = get_local ptr slice, result_complex_function, !130
        v148 = load v147
        v149 = get_local ptr slice, __tmp_arg1
        store v148 to v149
        v150 = call ptr_11(v149)
        v151 = get_local ptr slice, result_complex_function, !131
        v152 = load v151
        v153 = get_local ptr slice, __tmp_arg13
        store v152 to v153
        v154 = call len_45(v153)
        retd v150 v154, !132
        v155 = const unit ()
        br block2(v155)

        block2(v156: ()):
        v157 = get_local ptr string<18>, __const1
        v158 = load v157
        v159 = get_local ptr slice, _method_name, !133
        v160 = load v159
        v161 = ptr_to_int v157 to u64, !134
        v162 = get_local ptr { u64, u64 }, __anon_2, !134
        v163 = const u64 0
        v164 = get_elem_ptr v162, ptr u64, v163
        store v161 to v164, !134
        v165 = const u64 1
        v166 = get_elem_ptr v162, ptr u64, v165
        v167 = const u64 18
        store v167 to v166, !134
        v168 = get_local ptr slice, __anon_3, !134
        mem_copy_bytes v168, v162, 16
        v169 = load v168
        v170 = get_local ptr slice, __tmp_arg6
        store v160 to v170
        v171 = get_local ptr slice, __tmp_arg7
        store v169 to v171
        v172 = call eq_13(v170, v171)
        v173 = const unit ()
        cbr v172, block3(), block5(v173), !135

        block3():
        v174 = get_local ptr { u64, u64 }, __ret_val2
        v175 = call from_second_parameter_19(v174)
        v176 = load v175
        v177 = get_local ptr { u64, u64 }, buffer2, !137
        store v176 to v177, !138
        v178 = get_local ptr { u64, u64 }, buffer2, !139
        v179 = call read_53(v178), !144
        v180 = const u64 1, !52
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v180), !145

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v181: u64):
        v182 = const u64 3, !58
        v183 = cmp lt v181 v182, !146
        cbr v183, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !147

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v184 = call read_53(v178), !149
        v185 = const u64 1, !62
        v186 = add v181, v185, !150
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v186), !151

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v187 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v188 = call abi_decode_59(v178, v187)
        v189 = load v188
        v190 = const u64 1, !152
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v190), !154

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v191: u64):
        v192 = const u64 5, !155
        v193 = cmp lt v191 v192, !157
        cbr v193, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !158

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v194 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v195 = call abi_decode_59(v178, v194)
        v196 = load v195
        v197 = const u64 1, !159
        v198 = add v191, v197, !161
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v198), !162

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v199 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v200 = call new_42(v199)
        v201 = load v200
        v202 = ptr_to_int v200 to u64, !164
        v203 = int_to_ptr v202 to ptr { { u64, u64, u64 } }, !165
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr { u64, u64, u64 }, v204, !166
        v206 = load v205, !167
        v207 = get_local ptr { u64, u64, u64 }, __asm_arg0
        store v206 to v207
        v208 = asm(buffer: v207) -> ptr { u64, u64, u64 } buffer {
        }
        v209 = load v208
        v210 = get_local ptr { u64, u64, u64 }, __anon_05, !168
        store v209 to v210, !169
        v211 = const u64 0
        v212 = get_elem_ptr v210, ptr u64, v211, !170
        v213 = load v212, !171
        v214 = int_to_ptr v213 to ptr u8, !172
        v215 = const u64 1
        v216 = get_elem_ptr v210, ptr u64, v215, !173
        v217 = load v216, !174
        v218 = const u64 2
        v219 = get_elem_ptr v210, ptr u64, v218, !175
        v220 = load v219, !176
        v221 = ptr_to_int v214 to u64, !177
        v222 = add v221, v220, !178
        v223 = int_to_ptr v222 to ptr u64, !179
        v224 = const u64 0, !181
        store v224 to v223, !182
        v225 = const u64 8
        v226 = add v220, v225, !183
        v227 = ptr_to_int v214 to u64, !184
        v228 = get_local ptr { u64, u64, u64 }, __anon_11, !185
        v229 = const u64 0
        v230 = get_elem_ptr v228, ptr u64, v229, !186
        store v227 to v230, !187
        v231 = const u64 1
        v232 = get_elem_ptr v228, ptr u64, v231, !188
        store v217 to v232, !189
        v233 = const u64 2
        v234 = get_elem_ptr v228, ptr u64, v233, !190
        store v226 to v234, !191
        v235 = asm(buffer: v228) -> ptr { u64, u64, u64 } buffer {
        }
        v236 = load v235
        v237 = get_local ptr { { u64, u64, u64 } }, __anon_21, !193
        v238 = const u64 0
        v239 = get_elem_ptr v237, ptr { u64, u64, u64 }, v238, !194
        store v236 to v239, !195
        v240 = load v237, !196
        v241 = get_local ptr { { u64, u64, u64 } }, buffer3, !197
        store v240 to v241, !198
        v242 = get_local ptr { { u64, u64, u64 } }, buffer3, !199
        v243 = load v242, !163
        v244 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        store v243 to v244
        v245 = get_local ptr slice, __ret_val16
        v246 = call as_raw_slice_43(v244, v245)
        v247 = load v246
        v248 = get_local ptr slice, result_take_generic_array, !200
        store v247 to v248, !200
        v249 = get_local ptr slice, result_take_generic_array, !201
        v250 = load v249
        v251 = get_local ptr slice, __tmp_arg2
        store v250 to v251
        v252 = call ptr_11(v251)
        v253 = get_local ptr slice, result_take_generic_array, !202
        v254 = load v253
        v255 = get_local ptr slice, __tmp_arg14
        store v254 to v255
        v256 = call len_45(v255)
        retd v252 v256, !203
        v257 = const unit ()
        br block5(v257)

        block5(v258: ()):
        v259 = get_local ptr string<36>, __const2
        v260 = load v259
        v261 = get_local ptr slice, _method_name, !204
        v262 = load v261
        v263 = ptr_to_int v259 to u64, !205
        v264 = get_local ptr { u64, u64 }, __anon_4, !205
        v265 = const u64 0
        v266 = get_elem_ptr v264, ptr u64, v265
        store v263 to v266, !205
        v267 = const u64 1
        v268 = get_elem_ptr v264, ptr u64, v267
        v269 = const u64 36
        store v269 to v268, !205
        v270 = get_local ptr slice, __anon_5, !205
        mem_copy_bytes v270, v264, 16
        v271 = load v270
        v272 = get_local ptr slice, __tmp_arg8
        store v262 to v272
        v273 = get_local ptr slice, __tmp_arg9
        store v271 to v273
        v274 = call eq_13(v272, v273)
        v275 = const unit ()
        cbr v274, block6(), block8(v275), !206

        block6():
        v276 = get_local ptr { u64, u64 }, __ret_val3
        v277 = call from_second_parameter_19(v276)
        v278 = load v277
        v279 = get_local ptr { u64, u64 }, buffer4, !208
        store v278 to v279, !209
        v280 = get_local ptr { u64, u64 }, buffer4, !210
        v281 = get_local ptr { u64 }, __ret_val10
        v282 = call abi_decode_39(v280, v281)
        v283 = load v282
        v284 = call read_53(v280), !214
        v285 = asm(input: v284) -> u64 input, !218 {
        }
        v286 = call read_53(v280), !220
        v287 = asm(input: v286) -> u64 input, !222 {
        }
        v288 = call abi_decode_74(v280), !224
        v289 = call abi_decode_74(v280), !226
        v290 = get_local ptr { u64 }, __ret_val11
        v291 = call abi_decode_39(v280, v290)
        v292 = load v291
        v293 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v294 = call new_42(v293)
        v295 = load v294
        v296 = get_local ptr { { u64, u64, u64 } }, buffer5, !228
        store v295 to v296, !229
        v297 = get_local ptr { { u64, u64, u64 } }, buffer5, !230
        v298 = load v297, !227
        v299 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        store v298 to v299
        v300 = get_local ptr slice, __ret_val17
        v301 = call as_raw_slice_43(v299, v300)
        v302 = load v301
        v303 = get_local ptr slice, result_take_generic_struct_containing_tuple, !231
        store v302 to v303, !231
        v304 = get_local ptr slice, result_take_generic_struct_containing_tuple, !232
        v305 = load v304
        v306 = get_local ptr slice, __tmp_arg3
        store v305 to v306
        v307 = call ptr_11(v306)
        v308 = get_local ptr slice, result_take_generic_struct_containing_tuple, !233
        v309 = load v308
        v310 = get_local ptr slice, __tmp_arg15
        store v309 to v310
        v311 = call len_45(v310)
        retd v307 v311, !234
        v312 = const unit ()
        br block8(v312)

        block8(v313: ()):
        v314 = const u64 123, !235
        revert v314, !236
    }

    pub fn read_3(self !238: u64) -> u64, !239 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !240 {
            lw     val ptr i0, !241
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !242: ptr { u64, u64 }) -> u64, !243 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !246
        v2 = load v1, !244
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !248
        v5 = load v4, !244
        v6 = const u64 1
        v7 = mul v6, v5, !250
        v8 = add v2, v7, !251
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !252
        v11 = load v10, !244
        v12 = const u64 8
        v13 = add v11, v12, !254
        v14 = asm(ptr: v8, val) -> u64 val, !256 {
            lw     val ptr i0, !257
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !259
        store v13 to v16, !260
        ret u64 v14
    }

    pub fn read_bytes_10(self !261: ptr { u64, u64 }, count !262: u64, __ret_value: ptr slice) -> ptr slice, !263 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !247
        v2 = load v1
        v3 = add v2, count, !264
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !245
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !247
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !265
        v12 = add v6, v11, !265
        v13 = get_local ptr { u64, u64 }, __anon_0, !266
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !266
        store v12 to v15, !266
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !266
        store count to v17, !266
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = load v18
        v20 = get_local ptr slice, slice, !267
        store v19 to v20, !267
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !268
        store v3 to v22, !268
        v23 = get_local ptr slice, slice, !269
        v24 = load v23
        store v24 to __ret_value
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !271 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        store v0 to v1
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_0
        store v3 to v4
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !272
        v7 = load v6
        ret u64 v7
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !274 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = load self
        v1 = load other
        v2 = get_local ptr slice, __tmp_arg
        store v0 to v2
        v3 = call len_16(v2)
        v4 = get_local ptr slice, __tmp_arg0
        store v1 to v4
        v5 = call len_16(v4)
        v6 = cmp eq v3 v5, !277
        v7 = const bool false, !278
        v8 = cmp eq v6 v7, !280
        v9 = const bool false, !281
        cbr v8, block2(v9), block1(), !275

        block1():
        v10 = get_local ptr slice, __tmp_arg2
        store v0 to v10
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg3
        store v1 to v12
        v13 = call as_ptr_17(v12)
        v14 = get_local ptr slice, __tmp_arg1
        store v0 to v14
        v15 = call len_16(v14)
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !282 {
            meq    r4 r1 r2 r3, !283
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn len_16(self: ptr slice) -> u64, !285 {
        local slice __asm_arg
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        store v0 to v1
        v2 = asm(s: v1) -> ptr { u64, u64 } s {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2, !286
        store v3 to v4, !286
        v5 = get_local ptr { u64, u64 }, __tuple_2, !286
        v6 = load v5
        v7 = get_local ptr { u64, u64 }, __tuple_2_, !286
        store v6 to v7, !286
        v8 = get_local ptr { u64, u64 }, __tuple_2_, !286
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !286
        v11 = load v10
        ret u64 v11
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !287 {
        local slice __asm_arg
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        store v0 to v1
        v2 = asm(s: v1) -> ptr { u64, u64 } s {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1, !288
        store v3 to v4, !288
        v5 = get_local ptr { u64, u64 }, __tuple_1, !288
        v6 = load v5
        v7 = get_local ptr { u64, u64 }, __tuple_1_, !288
        store v6 to v7, !288
        v8 = get_local ptr { u64, u64 }, __tuple_1_, !288
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !288
        v11 = load v10
        ret u64 v11
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !289 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !290 {
        }
        v1 = const u64 592, !291
        v2 = add v0, v1, !291
        v3 = call read_3(v2), !292
        v4 = asm(ptr: v3) -> u64 ptr, !293 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !294
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !294
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !295
        store v10 to v9, !294
        v11 = load v5
        store v11 to __ret_value
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !296: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !297 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !299
        v2 = load v1, !300
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !301
        v5 = load v4, !302
        v6 = const u64 1
        v7 = mul v6, v5, !303
        v8 = add v2, v7, !304
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !305
        v11 = load v10, !306
        v12 = const u64 32
        v13 = add v11, v12, !307
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = load v14
        v16 = get_local ptr b256, v, !309
        store v15 to v16, !310
        v17 = const u64 1
        v18 = get_elem_ptr self, ptr u64, v17, !312
        store v13 to v18, !313
        v19 = get_local ptr b256, v, !315
        v20 = load v19, !316
        store v20 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !296: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !297 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !318
        v1 = const u64 0, !319
        v2 = cmp eq v0 v1, !321
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !322

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !324
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !325
        v6 = const u64 0, !323
        store v6 to v5, !326
        v7 = call abi_decode_5(self), !328
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !329
        store v7 to v10, !330
        v11 = load v3, !56
        v12 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        store v11 to v12
        br abi_decode_29_block5(v12), !56

        abi_decode_29_block1():
        v13 = const u64 1, !331
        v14 = cmp eq v0 v13, !333
        cbr v14, abi_decode_29_block2(), abi_decode_29_block3(), !334

        abi_decode_29_block2():
        v15 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !335
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !336
        v18 = const u64 1, !323
        store v18 to v17, !337
        v19 = call abi_decode_32(self), !339
        v20 = const u64 1
        v21 = const u64 1
        v22 = get_elem_ptr v15, ptr bool, v20, v21, !340
        store v19 to v22, !341
        v23 = load v15, !56
        v24 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        store v23 to v24
        br abi_decode_29_block5(v24), !56

        abi_decode_29_block3():
        v25 = const u64 0, !342
        revert v25, !344

        abi_decode_29_block5(v26: ptr { u64, ( u64 | bool ) }):
        v27 = load v26
        store v27 to __ret_value
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !345: ptr { u64, u64 }) -> bool, !346 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !348
        v2 = load v1, !347
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !349
        v5 = load v4, !347
        v6 = const u64 1
        v7 = mul v6, v5, !350
        v8 = add v2, v7, !351
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !352
        v11 = load v10, !347
        v12 = const u64 1
        v13 = add v11, v12, !353
        v14 = asm(ptr: v8, val) -> bool val, !355 {
            lb     val ptr i0, !356
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !358
        store v13 to v16, !359
        ret bool v14
    }

    pub fn decode_35(self !296: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !297 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !360
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = load v2
        v4 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !362
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !56
        store v0 to v6, !363
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7, !56
        store v3 to v8, !364
        v9 = load v4, !56
        store v9 to __ret_value
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !365: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !366 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !368
        v1 = get_local ptr { u64 }, __anon_0, !369
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !369
        v4 = load v1
        store v4 to __ret_value
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !370 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = load v12
        v14 = get_local ptr { { u64, u64, u64 } }, __anon_1, !371
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64, u64 }, v15
        store v13 to v16, !371
        v17 = load v14
        store v17 to __ret_value
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !372 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !92
        v5 = load v4
        v6 = get_local ptr { u64, u64, u64 }, __asm_arg
        store v5 to v6
        v7 = asm(buffer: v6) -> ptr { u64, u64, u64 } buffer {
        }
        v8 = load v7
        v9 = get_local ptr { u64, u64, u64 }, __anon_0
        store v8 to v9
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10
        v12 = load v11
        v13 = int_to_ptr v12 to ptr u8
        v14 = const u64 2
        v15 = get_elem_ptr v9, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v13 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> ptr slice s {
        }
        v24 = load v23
        store v24 to __ret_value
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !373 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        store v0 to v1
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_0
        store v3 to v4
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr u64, v5, !374
        v7 = load v6
        v8 = const u64 1
        v9 = div v7, v8
        ret u64 v9
    }

    pub fn read_53(self !375: ptr { u64, u64 }) -> u8, !376 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !245
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !247
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !249
        v8 = add v2, v7, !249
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !247
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !253
        v14 = asm(ptr: v8, val) -> u8 val, !354 {
            lb     val ptr i0, !356
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !357
        store v13 to v16, !357
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !377: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !378 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !379
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = load v2
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !361
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u8, v5
        store v0 to v6, !361
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7
        store v3 to v8, !361
        v9 = load v4
        store v9 to __ret_value
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !380: ptr { u64, u64 }) -> u64, !381 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !382
        v1 = asm(input: v0) -> u64 input, !384 {
        }
        v2 = call read_53(buffer), !385
        v3 = asm(input: v2) -> u64 input, !387 {
        }
        v4 = call read_53(buffer), !388
        v5 = asm(input: v4) -> u64 input, !390 {
        }
        v6 = call read_53(buffer), !391
        v7 = asm(input: v6) -> u64 input, !393 {
        }
        v8 = const u64 24, !394
        v9 = lsh v1, v8, !395
        v10 = const u64 4294967295, !397
        v11 = and v9, v10, !395
        v12 = const u64 16, !398
        v13 = lsh v3, v12, !399
        v14 = and v13, v10, !399
        v15 = or v11, v14, !400
        v16 = const u64 8, !401
        v17 = lsh v5, v16, !402
        v18 = and v17, v10, !402
        v19 = or v15, v18, !403
        v20 = or v19, v7, !404
        ret u64 v20
    }
}

// IR: [memcpyopt] Optimizations related to MemCopy instructions
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local string<6> __anon_10
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local { { u64, u64, u64 } } buffer1
        local mut { u64, u64 } buffer2
        local { { u64, u64, u64 } } buffer3
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = load v0
        v2 = asm() -> u64 fp, !6 {
        }
        v3 = const u64 584, !8
        v4 = add v2, v3, !9
        v5 = call read_3(v4), !11
        v6 = asm(ptr: v5) -> u64 ptr, !13 {
        }
        v7 = get_local ptr { u64, u64 }, __anon_00, !15
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !16
        store v6 to v9, !17
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10, !18
        v12 = const u64 0, !19
        store v12 to v11, !20
        v13 = load v7, !21
        v14 = get_local ptr { u64, u64 }, buffer, !23
        mem_copy_val v14, v7
        v15 = get_local ptr { u64, u64 }, buffer, !25
        v16 = call abi_decode_5(v15), !28
        v17 = get_local ptr slice, __ret_val
        v18 = call read_bytes_10(v15, v16, v17)
        v19 = load v18
        v20 = get_local ptr slice, data, !30
        mem_copy_val v20, v18
        v21 = get_local ptr slice, data, !32
        v22 = load v21, !33
        v23 = get_local ptr slice, __tmp_arg
        mem_copy_val v23, v21
        v24 = call ptr_11(v23)
        v25 = get_local ptr { u64, u64 }, __anon_000, !35
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !36
        store v24 to v27, !37
        v28 = const u64 1
        v29 = get_elem_ptr v25, ptr u64, v28, !38
        store v16 to v29, !39
        v30 = asm(s: v25) -> ptr slice s {
        }
        v31 = load v30
        v32 = get_local ptr slice, _method_name, !40
        mem_copy_val v32, v30
        v33 = get_local ptr slice, _method_name, !41
        v34 = load v33
        v35 = ptr_to_int v0 to u64, !42
        v36 = get_local ptr { u64, u64 }, __anon_0, !42
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37
        store v35 to v38, !42
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr u64, v39
        v41 = const u64 16
        store v41 to v40, !42
        v42 = get_local ptr slice, __anon_1, !42
        mem_copy_bytes v42, v36, 16
        v43 = load v42
        v44 = get_local ptr slice, __tmp_arg4
        mem_copy_val v44, v33
        v45 = get_local ptr slice, __tmp_arg5
        mem_copy_val v45, v42
        v46 = call eq_13(v44, v45)
        v47 = const unit ()
        cbr v46, block0(), block2(v47), !43

        block0():
        v48 = get_local ptr { u64, u64 }, __ret_val1
        v49 = call from_second_parameter_19(v48)
        v50 = load v49
        v51 = get_local ptr { u64, u64 }, buffer0, !46
        mem_copy_val v51, v49
        v52 = get_local ptr { u64, u64 }, buffer0, !48
        v53 = get_local ptr b256, __ret_val4
        v54 = call decode_24(v52, v53)
        v55 = load v54
        v56 = const u64 1, !49
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v56), !54

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v57: u64):
        v58 = const u64 3, !55
        v59 = cmp lt v57 v58, !57
        cbr v59, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !58

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v60 = get_local ptr b256, __ret_val5
        v61 = call decode_24(v52, v60)
        v62 = load v61
        v63 = const u64 1, !59
        v64 = add v57, v63, !61
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v64), !62

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v65 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v66 = call decode_28(v52, v65)
        v67 = load v66
        v68 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v69 = call decode_35(v52, v68)
        v70 = load v69
        v71 = const u64 1, !63
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v71), !65

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v72: u64):
        v73 = const u64 4, !66
        v74 = cmp lt v72 v73, !68
        cbr v74, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !69

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v75 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v76 = call decode_35(v52, v75)
        v77 = load v76
        v78 = const u64 1, !70
        v79 = add v72, v78, !72
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v79), !73

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v80 = get_local ptr string<6>, __const0
        v81 = load v80
        v82 = get_local ptr slice, __ret_val0
        v83 = const u64 5, !74
        v84 = call read_bytes_10(v52, v83, v82)
        v85 = load v84
        v86 = get_local ptr slice, data0, !78
        mem_copy_val v86, v84
        v87 = get_local ptr slice, data0, !80
        v88 = load v87, !81
        v89 = get_local ptr slice, __tmp_arg0
        mem_copy_val v89, v87
        v90 = call ptr_11(v89)
        v91 = asm(s: v90) -> ptr string<5> s {
        }
        v92 = load v91
        v93 = call abi_decode_32(v52), !83
        v94 = get_local ptr { u64 }, __ret_val9
        v95 = call abi_decode_39(v52, v94)
        v96 = load v95
        v97 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v98 = call new_42(v97)
        v99 = load v98
        v100 = ptr_to_int v98 to u64, !86
        v101 = int_to_ptr v100 to ptr { { u64, u64, u64 } }, !87
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr { u64, u64, u64 }, v102, !89
        v104 = load v103, !90
        v105 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v105, v103
        v106 = asm(buffer: v105) -> ptr { u64, u64, u64 } buffer {
        }
        v107 = load v106
        v108 = get_local ptr { u64, u64, u64 }, __anon_03, !91
        mem_copy_val v108, v106
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u64, v109, !92
        v111 = load v110, !93
        v112 = int_to_ptr v111 to ptr u8, !94
        v113 = const u64 1
        v114 = get_elem_ptr v108, ptr u64, v113, !95
        v115 = load v114, !96
        v116 = const u64 2
        v117 = get_elem_ptr v108, ptr u64, v116, !97
        v118 = load v117, !98
        v119 = get_local ptr string<6>, __const0, !99
        v120 = ptr_to_int v112 to u64, !100
        v121 = add v120, v118, !101
        v122 = int_to_ptr v121 to ptr u8, !102
        mem_copy_bytes v122, v119, 6, !103
        v123 = const u64 6
        v124 = add v118, v123, !104
        v125 = ptr_to_int v112 to u64, !105
        v126 = get_local ptr { u64, u64, u64 }, __anon_20, !106
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !107
        store v125 to v128, !108
        v129 = const u64 1
        v130 = get_elem_ptr v126, ptr u64, v129, !109
        mem_copy_val v130, v114
        v131 = const u64 2
        v132 = get_elem_ptr v126, ptr u64, v131, !110
        store v124 to v132, !111
        v133 = asm(buffer: v126) -> ptr { u64, u64, u64 } buffer {
        }
        v134 = load v133
        v135 = get_local ptr { { u64, u64, u64 } }, __anon_30, !113
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr { u64, u64, u64 }, v136, !114
        mem_copy_val v137, v133
        v138 = load v135, !115
        v139 = get_local ptr { { u64, u64, u64 } }, __anon_30, !117
        v140 = get_local ptr { { u64, u64, u64 } }, __anon_30, !119
        v141 = load v140, !84
        v142 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        mem_copy_val v142, v140
        v143 = get_local ptr slice, __ret_val15
        v144 = call as_raw_slice_43(v142, v143)
        v145 = load v144
        v146 = get_local ptr slice, result_complex_function, !120
        mem_copy_val v146, v144
        v147 = get_local ptr slice, result_complex_function, !121
        v148 = load v147
        v149 = get_local ptr slice, __tmp_arg1
        mem_copy_val v149, v147
        v150 = call ptr_11(v149)
        v151 = get_local ptr slice, result_complex_function, !122
        v152 = load v151
        v153 = get_local ptr slice, __tmp_arg13
        mem_copy_val v153, v151
        v154 = call len_45(v153)
        retd v150 v154, !123
        v155 = const unit ()
        br block2(v155)

        block2(v156: ()):
        v157 = get_local ptr string<18>, __const1
        v158 = load v157
        v159 = get_local ptr slice, _method_name, !124
        v160 = load v159
        v161 = ptr_to_int v157 to u64, !125
        v162 = get_local ptr { u64, u64 }, __anon_2, !125
        v163 = const u64 0
        v164 = get_elem_ptr v162, ptr u64, v163
        store v161 to v164, !125
        v165 = const u64 1
        v166 = get_elem_ptr v162, ptr u64, v165
        v167 = const u64 18
        store v167 to v166, !125
        v168 = get_local ptr slice, __anon_3, !125
        mem_copy_bytes v168, v162, 16
        v169 = load v168
        v170 = get_local ptr slice, __tmp_arg6
        mem_copy_val v170, v159
        v171 = get_local ptr slice, __tmp_arg7
        mem_copy_val v171, v168
        v172 = call eq_13(v170, v171)
        v173 = const unit ()
        cbr v172, block3(), block5(v173), !126

        block3():
        v174 = get_local ptr { u64, u64 }, __ret_val2
        v175 = call from_second_parameter_19(v174)
        v176 = load v175
        v177 = get_local ptr { u64, u64 }, buffer2, !128
        mem_copy_val v177, v175
        v178 = get_local ptr { u64, u64 }, buffer2, !129
        v179 = call read_53(v178), !134
        v180 = const u64 1, !49
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v180), !135

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v181: u64):
        v182 = const u64 3, !55
        v183 = cmp lt v181 v182, !136
        cbr v183, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !137

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v184 = call read_53(v178), !139
        v185 = const u64 1, !59
        v186 = add v181, v185, !140
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v186), !141

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v187 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v188 = call abi_decode_59(v178, v187)
        v189 = load v188
        v190 = const u64 1, !142
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v190), !144

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v191: u64):
        v192 = const u64 5, !145
        v193 = cmp lt v191 v192, !147
        cbr v193, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !148

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v194 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v195 = call abi_decode_59(v178, v194)
        v196 = load v195
        v197 = const u64 1, !149
        v198 = add v191, v197, !151
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v198), !152

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v199 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v200 = call new_42(v199)
        v201 = load v200
        v202 = ptr_to_int v200 to u64, !154
        v203 = int_to_ptr v202 to ptr { { u64, u64, u64 } }, !155
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr { u64, u64, u64 }, v204, !156
        v206 = load v205, !157
        v207 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v207, v205
        v208 = asm(buffer: v207) -> ptr { u64, u64, u64 } buffer {
        }
        v209 = load v208
        v210 = get_local ptr { u64, u64, u64 }, __anon_05, !158
        mem_copy_val v210, v208
        v211 = const u64 0
        v212 = get_elem_ptr v210, ptr u64, v211, !159
        v213 = load v212, !160
        v214 = int_to_ptr v213 to ptr u8, !161
        v215 = const u64 1
        v216 = get_elem_ptr v210, ptr u64, v215, !162
        v217 = load v216, !163
        v218 = const u64 2
        v219 = get_elem_ptr v210, ptr u64, v218, !164
        v220 = load v219, !165
        v221 = ptr_to_int v214 to u64, !166
        v222 = add v221, v220, !167
        v223 = int_to_ptr v222 to ptr u64, !168
        v224 = const u64 0, !170
        store v224 to v223, !171
        v225 = const u64 8
        v226 = add v220, v225, !172
        v227 = ptr_to_int v214 to u64, !173
        v228 = get_local ptr { u64, u64, u64 }, __anon_11, !174
        v229 = const u64 0
        v230 = get_elem_ptr v228, ptr u64, v229, !175
        store v227 to v230, !176
        v231 = const u64 1
        v232 = get_elem_ptr v228, ptr u64, v231, !177
        mem_copy_val v232, v216
        v233 = const u64 2
        v234 = get_elem_ptr v228, ptr u64, v233, !178
        store v226 to v234, !179
        v235 = asm(buffer: v228) -> ptr { u64, u64, u64 } buffer {
        }
        v236 = load v235
        v237 = get_local ptr { { u64, u64, u64 } }, __anon_21, !181
        v238 = const u64 0
        v239 = get_elem_ptr v237, ptr { u64, u64, u64 }, v238, !182
        mem_copy_val v239, v235
        v240 = load v237, !183
        v241 = get_local ptr { { u64, u64, u64 } }, __anon_21, !184
        v242 = get_local ptr { { u64, u64, u64 } }, __anon_21, !185
        v243 = load v242, !153
        v244 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        mem_copy_val v244, v242
        v245 = get_local ptr slice, __ret_val16
        v246 = call as_raw_slice_43(v244, v245)
        v247 = load v246
        v248 = get_local ptr slice, result_take_generic_array, !186
        mem_copy_val v248, v246
        v249 = get_local ptr slice, result_take_generic_array, !187
        v250 = load v249
        v251 = get_local ptr slice, __tmp_arg2
        mem_copy_val v251, v249
        v252 = call ptr_11(v251)
        v253 = get_local ptr slice, result_take_generic_array, !188
        v254 = load v253
        v255 = get_local ptr slice, __tmp_arg14
        mem_copy_val v255, v253
        v256 = call len_45(v255)
        retd v252 v256, !189
        v257 = const unit ()
        br block5(v257)

        block5(v258: ()):
        v259 = get_local ptr string<36>, __const2
        v260 = load v259
        v261 = get_local ptr slice, _method_name, !190
        v262 = load v261
        v263 = ptr_to_int v259 to u64, !191
        v264 = get_local ptr { u64, u64 }, __anon_4, !191
        v265 = const u64 0
        v266 = get_elem_ptr v264, ptr u64, v265
        store v263 to v266, !191
        v267 = const u64 1
        v268 = get_elem_ptr v264, ptr u64, v267
        v269 = const u64 36
        store v269 to v268, !191
        v270 = get_local ptr slice, __anon_5, !191
        mem_copy_bytes v270, v264, 16
        v271 = load v270
        v272 = get_local ptr slice, __tmp_arg8
        mem_copy_val v272, v261
        v273 = get_local ptr slice, __tmp_arg9
        mem_copy_val v273, v270
        v274 = call eq_13(v272, v273)
        v275 = const unit ()
        cbr v274, block6(), block8(v275), !192

        block6():
        v276 = get_local ptr { u64, u64 }, __ret_val3
        v277 = call from_second_parameter_19(v276)
        v278 = load v277
        v279 = get_local ptr { u64, u64 }, buffer4, !194
        mem_copy_val v279, v277
        v280 = get_local ptr { u64, u64 }, buffer4, !195
        v281 = get_local ptr { u64 }, __ret_val10
        v282 = call abi_decode_39(v280, v281)
        v283 = load v282
        v284 = call read_53(v280), !199
        v285 = asm(input: v284) -> u64 input, !203 {
        }
        v286 = call read_53(v280), !205
        v287 = asm(input: v286) -> u64 input, !207 {
        }
        v288 = call abi_decode_74(v280), !209
        v289 = call abi_decode_74(v280), !211
        v290 = get_local ptr { u64 }, __ret_val11
        v291 = call abi_decode_39(v280, v290)
        v292 = load v291
        v293 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v294 = call new_42(v293)
        v295 = load v294
        v296 = get_local ptr { { u64, u64, u64 } }, buffer5, !213
        mem_copy_val v296, v294
        v297 = get_local ptr { { u64, u64, u64 } }, buffer5, !214
        v298 = load v297, !212
        v299 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        mem_copy_val v299, v297
        v300 = get_local ptr slice, __ret_val17
        v301 = call as_raw_slice_43(v299, v300)
        v302 = load v301
        v303 = get_local ptr slice, result_take_generic_struct_containing_tuple, !215
        mem_copy_val v303, v301
        v304 = get_local ptr slice, result_take_generic_struct_containing_tuple, !216
        v305 = load v304
        v306 = get_local ptr slice, __tmp_arg3
        mem_copy_val v306, v304
        v307 = call ptr_11(v306)
        v308 = get_local ptr slice, result_take_generic_struct_containing_tuple, !217
        v309 = load v308
        v310 = get_local ptr slice, __tmp_arg15
        mem_copy_val v310, v308
        v311 = call len_45(v310)
        retd v307 v311, !218
        v312 = const unit ()
        br block8(v312)

        block8(v313: ()):
        v314 = const u64 123, !219
        revert v314, !220
    }

    pub fn read_3(self !222: u64) -> u64, !223 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !224 {
            lw     val ptr i0, !225
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !226: ptr { u64, u64 }) -> u64, !227 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !230
        v2 = load v1, !228
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !232
        v5 = load v4, !228
        v6 = const u64 1
        v7 = mul v6, v5, !234
        v8 = add v2, v7, !235
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !236
        v11 = load v10, !228
        v12 = const u64 8
        v13 = add v11, v12, !238
        v14 = asm(ptr: v8, val) -> u64 val, !240 {
            lw     val ptr i0, !241
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !243
        store v13 to v16, !244
        ret u64 v14
    }

    pub fn read_bytes_10(self !245: ptr { u64, u64 }, count !246: u64, __ret_value: ptr slice) -> ptr slice, !247 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !231
        v2 = load v1
        v3 = add v2, count, !248
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !229
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !231
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !249
        v12 = add v6, v11, !249
        v13 = get_local ptr { u64, u64 }, __anon_0, !250
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !250
        store v12 to v15, !250
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !250
        store count to v17, !250
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = load v18
        v20 = get_local ptr slice, slice, !251
        mem_copy_val v20, v18
        v21 = const u64 1
        v22 = get_elem_ptr self, ptr u64, v21, !252
        store v3 to v22, !252
        v23 = get_local ptr slice, slice, !253
        v24 = load v23
        mem_copy_val __ret_value, v23
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !255 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        mem_copy_val v1, self
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v4, v2
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !256
        v7 = load v6
        ret u64 v7
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !258 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = load self
        v1 = load other
        v2 = get_local ptr slice, __tmp_arg
        mem_copy_val v2, self
        v3 = call len_16(v2)
        v4 = get_local ptr slice, __tmp_arg0
        mem_copy_val v4, other
        v5 = call len_16(v4)
        v6 = cmp eq v3 v5, !261
        v7 = const bool false, !262
        v8 = cmp eq v6 v7, !264
        v9 = const bool false, !265
        cbr v8, block2(v9), block1(), !259

        block1():
        v10 = get_local ptr slice, __tmp_arg2
        mem_copy_val v10, self
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg3
        mem_copy_val v12, other
        v13 = call as_ptr_17(v12)
        v14 = get_local ptr slice, __tmp_arg1
        mem_copy_val v14, self
        v15 = call len_16(v14)
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !266 {
            meq    r4 r1 r2 r3, !267
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn len_16(self: ptr slice) -> u64, !269 {
        local slice __asm_arg
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        mem_copy_val v1, self
        v2 = asm(s: v1) -> ptr { u64, u64 } s {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2, !270
        mem_copy_val v4, v2
        v5 = get_local ptr { u64, u64 }, __tuple_2, !270
        v6 = load v5
        v7 = get_local ptr { u64, u64 }, __tuple_2, !270
        v8 = get_local ptr { u64, u64 }, __tuple_2, !270
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !270
        v11 = load v10
        ret u64 v11
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !271 {
        local slice __asm_arg
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        mem_copy_val v1, self
        v2 = asm(s: v1) -> ptr { u64, u64 } s {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1, !272
        mem_copy_val v4, v2
        v5 = get_local ptr { u64, u64 }, __tuple_1, !272
        v6 = load v5
        v7 = get_local ptr { u64, u64 }, __tuple_1, !272
        v8 = get_local ptr { u64, u64 }, __tuple_1, !272
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !272
        v11 = load v10
        ret u64 v11
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !273 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !274 {
        }
        v1 = const u64 592, !275
        v2 = add v0, v1, !275
        v3 = call read_3(v2), !276
        v4 = asm(ptr: v3) -> u64 ptr, !277 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !278
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !278
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !279
        store v10 to v9, !278
        v11 = load v5
        mem_copy_val __ret_value, v5
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !280: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !281 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !283
        v2 = load v1, !284
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !285
        v5 = load v4, !286
        v6 = const u64 1
        v7 = mul v6, v5, !287
        v8 = add v2, v7, !288
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !289
        v11 = load v10, !290
        v12 = const u64 32
        v13 = add v11, v12, !291
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = load v14
        v16 = get_local ptr b256, v, !293
        mem_copy_val v16, v14
        v17 = const u64 1
        v18 = get_elem_ptr self, ptr u64, v17, !295
        store v13 to v18, !296
        v19 = get_local ptr b256, v, !298
        v20 = load v19, !299
        mem_copy_val __ret_value, v19
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !280: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !281 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !301
        v1 = const u64 0, !302
        v2 = cmp eq v0 v1, !304
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !305

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !307
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !308
        v6 = const u64 0, !306
        store v6 to v5, !309
        v7 = call abi_decode_5(self), !311
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !312
        store v7 to v10, !313
        v11 = load v3, !53
        v12 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v12, v3
        br abi_decode_29_block5(v12), !53

        abi_decode_29_block1():
        v13 = const u64 1, !314
        v14 = cmp eq v0 v13, !316
        cbr v14, abi_decode_29_block2(), abi_decode_29_block3(), !317

        abi_decode_29_block2():
        v15 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !318
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !319
        v18 = const u64 1, !306
        store v18 to v17, !320
        v19 = call abi_decode_32(self), !322
        v20 = const u64 1
        v21 = const u64 1
        v22 = get_elem_ptr v15, ptr bool, v20, v21, !323
        store v19 to v22, !324
        v23 = load v15, !53
        v24 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v24, v15
        br abi_decode_29_block5(v24), !53

        abi_decode_29_block3():
        v25 = const u64 0, !325
        revert v25, !327

        abi_decode_29_block5(v26: ptr { u64, ( u64 | bool ) }):
        v27 = load v26
        mem_copy_val __ret_value, v26
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !328: ptr { u64, u64 }) -> bool, !329 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !331
        v2 = load v1, !330
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !332
        v5 = load v4, !330
        v6 = const u64 1
        v7 = mul v6, v5, !333
        v8 = add v2, v7, !334
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !335
        v11 = load v10, !330
        v12 = const u64 1
        v13 = add v11, v12, !336
        v14 = asm(ptr: v8, val) -> bool val, !338 {
            lb     val ptr i0, !339
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !341
        store v13 to v16, !342
        ret bool v14
    }

    pub fn decode_35(self !280: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !281 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !343
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = load v2
        v4 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !345
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !53
        store v0 to v6, !346
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7, !53
        mem_copy_val v8, v2
        v9 = load v4, !53
        mem_copy_val __ret_value, v4
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !347: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !348 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !350
        v1 = get_local ptr { u64 }, __anon_0, !351
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !351
        v4 = load v1
        mem_copy_val __ret_value, v1
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !352 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = load v12
        v14 = get_local ptr { { u64, u64, u64 } }, __anon_1, !353
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64, u64 }, v15
        mem_copy_val v16, v12
        v17 = load v14
        mem_copy_val __ret_value, v14
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !354 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64, u64 } }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64, u64 }, v3, !88
        v5 = load v4
        v6 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v6, v4
        v7 = asm(buffer: v6) -> ptr { u64, u64, u64 } buffer {
        }
        v8 = load v7
        v9 = get_local ptr { u64, u64, u64 }, __anon_0
        mem_copy_val v9, v7
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10
        v12 = load v11
        v13 = int_to_ptr v12 to ptr u8
        v14 = const u64 2
        v15 = get_elem_ptr v9, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v13 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        mem_copy_val v22, v15
        v23 = asm(s: v18) -> ptr slice s {
        }
        v24 = load v23
        mem_copy_val __ret_value, v23
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !355 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = load self
        v1 = get_local ptr slice, __asm_arg
        mem_copy_val v1, self
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v4, v2
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr u64, v5, !356
        v7 = load v6
        v8 = const u64 1
        v9 = div v7, v8
        ret u64 v9
    }

    pub fn read_53(self !357: ptr { u64, u64 }) -> u8, !358 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !229
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !231
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !233
        v8 = add v2, v7, !233
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !231
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !237
        v14 = asm(ptr: v8, val) -> u8 val, !337 {
            lb     val ptr i0, !339
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !340
        store v13 to v16, !340
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !359: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !360 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !361
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = load v2
        v4 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !344
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u8, v5
        store v0 to v6, !344
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { u64, ( u64 | bool ) }, v7
        mem_copy_val v8, v2
        v9 = load v4
        mem_copy_val __ret_value, v4
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !362: ptr { u64, u64 }) -> u64, !363 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !364
        v1 = asm(input: v0) -> u64 input, !366 {
        }
        v2 = call read_53(buffer), !367
        v3 = asm(input: v2) -> u64 input, !369 {
        }
        v4 = call read_53(buffer), !370
        v5 = asm(input: v4) -> u64 input, !372 {
        }
        v6 = call read_53(buffer), !373
        v7 = asm(input: v6) -> u64 input, !375 {
        }
        v8 = const u64 24, !376
        v9 = lsh v1, v8, !377
        v10 = const u64 4294967295, !379
        v11 = and v9, v10, !377
        v12 = const u64 16, !380
        v13 = lsh v3, v12, !381
        v14 = and v13, v10, !381
        v15 = or v11, v14, !382
        v16 = const u64 8, !383
        v17 = lsh v5, v16, !384
        v18 = and v17, v10, !384
        v19 = or v15, v18, !385
        v20 = or v19, v7, !386
        ret u64 v20
    }
}

// IR: [dce] Dead code elimination
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local mut { u64, u64 } buffer2
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = asm() -> u64 fp, !6 {
        }
        v2 = const u64 584, !8
        v3 = add v1, v2, !9
        v4 = call read_3(v3), !11
        v5 = asm(ptr: v4) -> u64 ptr, !13 {
        }
        v6 = get_local ptr { u64, u64 }, __anon_00, !15
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !16
        store v5 to v8, !17
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !18
        v11 = const u64 0, !19
        store v11 to v10, !20
        v12 = get_local ptr { u64, u64 }, buffer, !22
        mem_copy_val v12, v6
        v13 = get_local ptr { u64, u64 }, buffer, !24
        v14 = call abi_decode_5(v13), !27
        v15 = get_local ptr slice, __ret_val
        v16 = call read_bytes_10(v13, v14, v15)
        v17 = get_local ptr slice, data, !29
        mem_copy_val v17, v16
        v18 = get_local ptr slice, data, !31
        v19 = get_local ptr slice, __tmp_arg
        mem_copy_val v19, v18
        v20 = call ptr_11(v19)
        v21 = get_local ptr { u64, u64 }, __anon_000, !33
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !34
        store v20 to v23, !35
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !36
        store v14 to v25, !37
        v26 = asm(s: v21) -> ptr slice s {
        }
        v27 = get_local ptr slice, _method_name, !38
        mem_copy_val v27, v26
        v28 = get_local ptr slice, _method_name, !39
        v29 = ptr_to_int v0 to u64, !40
        v30 = get_local ptr { u64, u64 }, __anon_0, !40
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31
        store v29 to v32, !40
        v33 = const u64 1
        v34 = get_elem_ptr v30, ptr u64, v33
        v35 = const u64 16
        store v35 to v34, !40
        v36 = get_local ptr slice, __anon_1, !40
        mem_copy_bytes v36, v30, 16
        v37 = get_local ptr slice, __tmp_arg4
        mem_copy_val v37, v28
        v38 = get_local ptr slice, __tmp_arg5
        mem_copy_val v38, v36
        v39 = call eq_13(v37, v38)
        v40 = const unit ()
        cbr v39, block0(), block2(v40), !41

        block0():
        v41 = get_local ptr { u64, u64 }, __ret_val1
        v42 = call from_second_parameter_19(v41)
        v43 = get_local ptr { u64, u64 }, buffer0, !44
        mem_copy_val v43, v42
        v44 = get_local ptr { u64, u64 }, buffer0, !46
        v45 = get_local ptr b256, __ret_val4
        v46 = call decode_24(v44, v45)
        v47 = const u64 1, !47
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v47), !52

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v48: u64):
        v49 = const u64 3, !53
        v50 = cmp lt v48 v49, !55
        cbr v50, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !56

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v51 = get_local ptr b256, __ret_val5
        v52 = call decode_24(v44, v51)
        v53 = const u64 1, !57
        v54 = add v48, v53, !59
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v54), !60

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v55 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v56 = call decode_28(v44, v55)
        v57 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v58 = call decode_35(v44, v57)
        v59 = const u64 1, !61
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v59), !63

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v60: u64):
        v61 = const u64 4, !64
        v62 = cmp lt v60 v61, !66
        cbr v62, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !67

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v63 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v64 = call decode_35(v44, v63)
        v65 = const u64 1, !68
        v66 = add v60, v65, !70
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v66), !71

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v67 = get_local ptr slice, __ret_val0
        v68 = const u64 5, !72
        v69 = call read_bytes_10(v44, v68, v67)
        v70 = get_local ptr slice, data0, !76
        mem_copy_val v70, v69
        v71 = get_local ptr slice, data0, !78
        v72 = get_local ptr slice, __tmp_arg0
        mem_copy_val v72, v71
        v73 = call ptr_11(v72)
        v74 = asm(s: v73) -> ptr string<5> s {
        }
        v75 = call abi_decode_32(v44), !80
        v76 = get_local ptr { u64 }, __ret_val9
        v77 = call abi_decode_39(v44, v76)
        v78 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v79 = call new_42(v78)
        v80 = ptr_to_int v79 to u64, !83
        v81 = int_to_ptr v80 to ptr { { u64, u64, u64 } }, !84
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { u64, u64, u64 }, v82, !86
        v84 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v84, v83
        v85 = asm(buffer: v84) -> ptr { u64, u64, u64 } buffer {
        }
        v86 = get_local ptr { u64, u64, u64 }, __anon_03, !87
        mem_copy_val v86, v85
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !88
        v89 = load v88, !89
        v90 = int_to_ptr v89 to ptr u8, !90
        v91 = const u64 1
        v92 = get_elem_ptr v86, ptr u64, v91, !91
        v93 = const u64 2
        v94 = get_elem_ptr v86, ptr u64, v93, !92
        v95 = load v94, !93
        v96 = get_local ptr string<6>, __const0, !94
        v97 = ptr_to_int v90 to u64, !95
        v98 = add v97, v95, !96
        v99 = int_to_ptr v98 to ptr u8, !97
        mem_copy_bytes v99, v96, 6, !98
        v100 = const u64 6
        v101 = add v95, v100, !99
        v102 = ptr_to_int v90 to u64, !100
        v103 = get_local ptr { u64, u64, u64 }, __anon_20, !101
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !102
        store v102 to v105, !103
        v106 = const u64 1
        v107 = get_elem_ptr v103, ptr u64, v106, !104
        mem_copy_val v107, v92
        v108 = const u64 2
        v109 = get_elem_ptr v103, ptr u64, v108, !105
        store v101 to v109, !106
        v110 = asm(buffer: v103) -> ptr { u64, u64, u64 } buffer {
        }
        v111 = get_local ptr { { u64, u64, u64 } }, __anon_30, !108
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr { u64, u64, u64 }, v112, !109
        mem_copy_val v113, v110
        v114 = get_local ptr { { u64, u64, u64 } }, __anon_30, !111
        v115 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        mem_copy_val v115, v114
        v116 = get_local ptr slice, __ret_val15
        v117 = call as_raw_slice_43(v115, v116)
        v118 = get_local ptr slice, result_complex_function, !112
        mem_copy_val v118, v117
        v119 = get_local ptr slice, result_complex_function, !113
        v120 = get_local ptr slice, __tmp_arg1
        mem_copy_val v120, v119
        v121 = call ptr_11(v120)
        v122 = get_local ptr slice, result_complex_function, !114
        v123 = get_local ptr slice, __tmp_arg13
        mem_copy_val v123, v122
        v124 = call len_45(v123)
        retd v121 v124, !115
        v125 = const unit ()
        br block2(v125)

        block2(v126: ()):
        v127 = get_local ptr string<18>, __const1
        v128 = get_local ptr slice, _method_name, !116
        v129 = ptr_to_int v127 to u64, !117
        v130 = get_local ptr { u64, u64 }, __anon_2, !117
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131
        store v129 to v132, !117
        v133 = const u64 1
        v134 = get_elem_ptr v130, ptr u64, v133
        v135 = const u64 18
        store v135 to v134, !117
        v136 = get_local ptr slice, __anon_3, !117
        mem_copy_bytes v136, v130, 16
        v137 = get_local ptr slice, __tmp_arg6
        mem_copy_val v137, v128
        v138 = get_local ptr slice, __tmp_arg7
        mem_copy_val v138, v136
        v139 = call eq_13(v137, v138)
        v140 = const unit ()
        cbr v139, block3(), block5(v140), !118

        block3():
        v141 = get_local ptr { u64, u64 }, __ret_val2
        v142 = call from_second_parameter_19(v141)
        v143 = get_local ptr { u64, u64 }, buffer2, !120
        mem_copy_val v143, v142
        v144 = get_local ptr { u64, u64 }, buffer2, !121
        v145 = call read_53(v144), !126
        v146 = const u64 1, !47
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v146), !127

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v147: u64):
        v148 = const u64 3, !53
        v149 = cmp lt v147 v148, !128
        cbr v149, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !129

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v150 = call read_53(v144), !131
        v151 = const u64 1, !57
        v152 = add v147, v151, !132
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v152), !133

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v153 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v154 = call abi_decode_59(v144, v153)
        v155 = const u64 1, !134
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v155), !136

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v156: u64):
        v157 = const u64 5, !137
        v158 = cmp lt v156 v157, !139
        cbr v158, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !140

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v159 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v160 = call abi_decode_59(v144, v159)
        v161 = const u64 1, !141
        v162 = add v156, v161, !143
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v162), !144

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v163 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v164 = call new_42(v163)
        v165 = ptr_to_int v164 to u64, !146
        v166 = int_to_ptr v165 to ptr { { u64, u64, u64 } }, !147
        v167 = const u64 0
        v168 = get_elem_ptr v166, ptr { u64, u64, u64 }, v167, !148
        v169 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v169, v168
        v170 = asm(buffer: v169) -> ptr { u64, u64, u64 } buffer {
        }
        v171 = get_local ptr { u64, u64, u64 }, __anon_05, !149
        mem_copy_val v171, v170
        v172 = const u64 0
        v173 = get_elem_ptr v171, ptr u64, v172, !150
        v174 = load v173, !151
        v175 = int_to_ptr v174 to ptr u8, !152
        v176 = const u64 1
        v177 = get_elem_ptr v171, ptr u64, v176, !153
        v178 = const u64 2
        v179 = get_elem_ptr v171, ptr u64, v178, !154
        v180 = load v179, !155
        v181 = ptr_to_int v175 to u64, !156
        v182 = add v181, v180, !157
        v183 = int_to_ptr v182 to ptr u64, !158
        v184 = const u64 0, !160
        store v184 to v183, !161
        v185 = const u64 8
        v186 = add v180, v185, !162
        v187 = ptr_to_int v175 to u64, !163
        v188 = get_local ptr { u64, u64, u64 }, __anon_11, !164
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !165
        store v187 to v190, !166
        v191 = const u64 1
        v192 = get_elem_ptr v188, ptr u64, v191, !167
        mem_copy_val v192, v177
        v193 = const u64 2
        v194 = get_elem_ptr v188, ptr u64, v193, !168
        store v186 to v194, !169
        v195 = asm(buffer: v188) -> ptr { u64, u64, u64 } buffer {
        }
        v196 = get_local ptr { { u64, u64, u64 } }, __anon_21, !171
        v197 = const u64 0
        v198 = get_elem_ptr v196, ptr { u64, u64, u64 }, v197, !172
        mem_copy_val v198, v195
        v199 = get_local ptr { { u64, u64, u64 } }, __anon_21, !173
        v200 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        mem_copy_val v200, v199
        v201 = get_local ptr slice, __ret_val16
        v202 = call as_raw_slice_43(v200, v201)
        v203 = get_local ptr slice, result_take_generic_array, !174
        mem_copy_val v203, v202
        v204 = get_local ptr slice, result_take_generic_array, !175
        v205 = get_local ptr slice, __tmp_arg2
        mem_copy_val v205, v204
        v206 = call ptr_11(v205)
        v207 = get_local ptr slice, result_take_generic_array, !176
        v208 = get_local ptr slice, __tmp_arg14
        mem_copy_val v208, v207
        v209 = call len_45(v208)
        retd v206 v209, !177
        v210 = const unit ()
        br block5(v210)

        block5(v211: ()):
        v212 = get_local ptr string<36>, __const2
        v213 = get_local ptr slice, _method_name, !178
        v214 = ptr_to_int v212 to u64, !179
        v215 = get_local ptr { u64, u64 }, __anon_4, !179
        v216 = const u64 0
        v217 = get_elem_ptr v215, ptr u64, v216
        store v214 to v217, !179
        v218 = const u64 1
        v219 = get_elem_ptr v215, ptr u64, v218
        v220 = const u64 36
        store v220 to v219, !179
        v221 = get_local ptr slice, __anon_5, !179
        mem_copy_bytes v221, v215, 16
        v222 = get_local ptr slice, __tmp_arg8
        mem_copy_val v222, v213
        v223 = get_local ptr slice, __tmp_arg9
        mem_copy_val v223, v221
        v224 = call eq_13(v222, v223)
        v225 = const unit ()
        cbr v224, block6(), block8(v225), !180

        block6():
        v226 = get_local ptr { u64, u64 }, __ret_val3
        v227 = call from_second_parameter_19(v226)
        v228 = get_local ptr { u64, u64 }, buffer4, !182
        mem_copy_val v228, v227
        v229 = get_local ptr { u64, u64 }, buffer4, !183
        v230 = get_local ptr { u64 }, __ret_val10
        v231 = call abi_decode_39(v229, v230)
        v232 = call read_53(v229), !187
        v233 = asm(input: v232) -> u64 input, !191 {
        }
        v234 = call read_53(v229), !193
        v235 = asm(input: v234) -> u64 input, !195 {
        }
        v236 = call abi_decode_74(v229), !197
        v237 = call abi_decode_74(v229), !199
        v238 = get_local ptr { u64 }, __ret_val11
        v239 = call abi_decode_39(v229, v238)
        v240 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v241 = call new_42(v240)
        v242 = get_local ptr { { u64, u64, u64 } }, buffer5, !202
        mem_copy_val v242, v241
        v243 = get_local ptr { { u64, u64, u64 } }, buffer5, !203
        v244 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        mem_copy_val v244, v243
        v245 = get_local ptr slice, __ret_val17
        v246 = call as_raw_slice_43(v244, v245)
        v247 = get_local ptr slice, result_take_generic_struct_containing_tuple, !204
        mem_copy_val v247, v246
        v248 = get_local ptr slice, result_take_generic_struct_containing_tuple, !205
        v249 = get_local ptr slice, __tmp_arg3
        mem_copy_val v249, v248
        v250 = call ptr_11(v249)
        v251 = get_local ptr slice, result_take_generic_struct_containing_tuple, !206
        v252 = get_local ptr slice, __tmp_arg15
        mem_copy_val v252, v251
        v253 = call len_45(v252)
        retd v250 v253, !207
        v254 = const unit ()
        br block8(v254)

        block8(v255: ()):
        v256 = const u64 123, !208
        revert v256, !209
    }

    pub fn read_3(self !211: u64) -> u64, !212 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !213 {
            lw     val ptr i0, !214
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !215: ptr { u64, u64 }) -> u64, !216 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !219
        v2 = load v1, !217
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !221
        v5 = load v4, !217
        v6 = const u64 1
        v7 = mul v6, v5, !223
        v8 = add v2, v7, !224
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !225
        v11 = load v10, !217
        v12 = const u64 8
        v13 = add v11, v12, !227
        v14 = asm(ptr: v8, val) -> u64 val, !229 {
            lw     val ptr i0, !230
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !232
        store v13 to v16, !233
        ret u64 v14
    }

    pub fn read_bytes_10(self !234: ptr { u64, u64 }, count !235: u64, __ret_value: ptr slice) -> ptr slice, !236 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !220
        v2 = load v1
        v3 = add v2, count, !237
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !218
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !220
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !238
        v12 = add v6, v11, !238
        v13 = get_local ptr { u64, u64 }, __anon_0, !239
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !239
        store v12 to v15, !239
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !239
        store count to v17, !239
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = get_local ptr slice, slice, !240
        mem_copy_val v19, v18
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !241
        store v3 to v21, !241
        v22 = get_local ptr slice, slice, !242
        mem_copy_val __ret_value, v22
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !244 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v2, v1
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !245
        v5 = load v4
        ret u64 v5
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !247 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, self
        v1 = call len_16(v0)
        v2 = get_local ptr slice, __tmp_arg0
        mem_copy_val v2, other
        v3 = call len_16(v2)
        v4 = cmp eq v1 v3, !250
        v5 = const bool false, !251
        v6 = cmp eq v4 v5, !253
        v7 = const bool false, !254
        cbr v6, block2(v7), block1(), !248

        block1():
        v8 = get_local ptr slice, __tmp_arg2
        mem_copy_val v8, self
        v9 = call as_ptr_17(v8)
        v10 = get_local ptr slice, __tmp_arg3
        mem_copy_val v10, other
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg1
        mem_copy_val v12, self
        v13 = call len_16(v12)
        v14 = asm(r1: v9, r2: v11, r3: v13, r4) -> bool r4, !255 {
            meq    r4 r1 r2 r3, !256
        }
        br block2(v14)

        block2(v15: bool):
        ret bool v15
    }

    pub fn len_16(self: ptr slice) -> u64, !258 {
        local slice __asm_arg
        local { u64, u64 } __tuple_2

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_2, !259
        mem_copy_val v2, v1
        v3 = get_local ptr { u64, u64 }, __tuple_2, !259
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !259
        v6 = load v5
        ret u64 v6
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !260 {
        local slice __asm_arg
        local { u64, u64 } __tuple_1

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_1, !261
        mem_copy_val v2, v1
        v3 = get_local ptr { u64, u64 }, __tuple_1, !261
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !261
        v6 = load v5
        ret u64 v6
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !262 {
        local { u64, u64 } __anon_0

        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !263 {
        }
        v1 = const u64 592, !264
        v2 = add v0, v1, !264
        v3 = call read_3(v2), !265
        v4 = asm(ptr: v3) -> u64 ptr, !266 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !267
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        store v4 to v7, !267
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr u64, v8
        v10 = const u64 0, !268
        store v10 to v9, !267
        mem_copy_val __ret_value, v5
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !269: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !270 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !272
        v2 = load v1, !273
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !274
        v5 = load v4, !275
        v6 = const u64 1
        v7 = mul v6, v5, !276
        v8 = add v2, v7, !277
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !278
        v11 = load v10, !279
        v12 = const u64 32
        v13 = add v11, v12, !280
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = get_local ptr b256, v, !282
        mem_copy_val v15, v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !284
        store v13 to v17, !285
        v18 = get_local ptr b256, v, !287
        mem_copy_val __ret_value, v18
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !269: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !270 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !289
        v1 = const u64 0, !290
        v2 = cmp eq v0 v1, !292
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !293

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !295
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !296
        v6 = const u64 0, !294
        store v6 to v5, !297
        v7 = call abi_decode_5(self), !299
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !300
        store v7 to v10, !301
        v11 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v11, v3
        br abi_decode_29_block5(v11), !51

        abi_decode_29_block1():
        v12 = const u64 1, !302
        v13 = cmp eq v0 v12, !304
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !305

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !306
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !307
        v17 = const u64 1, !294
        store v17 to v16, !308
        v18 = call abi_decode_32(self), !310
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !311
        store v18 to v21, !312
        v22 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v22, v14
        br abi_decode_29_block5(v22), !51

        abi_decode_29_block3():
        v23 = const u64 0, !313
        revert v23, !315

        abi_decode_29_block5(v24: ptr { u64, ( u64 | bool ) }):
        mem_copy_val __ret_value, v24
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !316: ptr { u64, u64 }) -> bool, !317 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !319
        v2 = load v1, !318
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !320
        v5 = load v4, !318
        v6 = const u64 1
        v7 = mul v6, v5, !321
        v8 = add v2, v7, !322
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !323
        v11 = load v10, !318
        v12 = const u64 1
        v13 = add v11, v12, !324
        v14 = asm(ptr: v8, val) -> bool val, !326 {
            lb     val ptr i0, !327
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !329
        store v13 to v16, !330
        ret bool v14
    }

    pub fn decode_35(self !269: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !270 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !331
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !333
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !51
        store v0 to v5, !334
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6, !51
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !335: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !336 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !338
        v1 = get_local ptr { u64 }, __anon_0, !339
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !339
        mem_copy_val __ret_value, v1
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !340 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !341
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        mem_copy_val v15, v12
        mem_copy_val __ret_value, v13
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !342 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !85
        v4 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v4, v3
        v5 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        mem_copy_val v6, v5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = ptr_to_int v10 to u64
        v14 = get_local ptr { u64, u64 }, __anon_1
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        mem_copy_val v18, v12
        v19 = asm(s: v14) -> ptr slice s {
        }
        mem_copy_val __ret_value, v19
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !343 {
        local { u64, u64 } __anon_0
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v2, v1
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !344
        v5 = load v4
        v6 = const u64 1
        v7 = div v5, v6
        ret u64 v7
    }

    pub fn read_53(self !345: ptr { u64, u64 }) -> u8, !346 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !218
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !220
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !222
        v8 = add v2, v7, !222
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !220
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !226
        v14 = asm(ptr: v8, val) -> u8 val, !325 {
            lb     val ptr i0, !327
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !328
        store v13 to v16, !328
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !347: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !348 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !349
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !332
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u8, v4
        store v0 to v5, !332
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !350: ptr { u64, u64 }) -> u64, !351 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !352
        v1 = asm(input: v0) -> u64 input, !354 {
        }
        v2 = call read_53(buffer), !355
        v3 = asm(input: v2) -> u64 input, !357 {
        }
        v4 = call read_53(buffer), !358
        v5 = asm(input: v4) -> u64 input, !360 {
        }
        v6 = call read_53(buffer), !361
        v7 = asm(input: v6) -> u64 input, !363 {
        }
        v8 = const u64 24, !364
        v9 = lsh v1, v8, !365
        v10 = const u64 4294967295, !367
        v11 = and v9, v10, !365
        v12 = const u64 16, !368
        v13 = lsh v3, v12, !369
        v14 = and v13, v10, !369
        v15 = or v11, v14, !370
        v16 = const u64 8, !371
        v17 = lsh v5, v16, !372
        v18 = and v17, v10, !372
        v19 = or v15, v18, !373
        v20 = or v19, v7, !374
        ret u64 v20
    }
}

// IR: [sroa] Scalar replacement of aggregates
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_008
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local u64 __anon_210
        local u64 __anon_2116
        local u64 __anon_218
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local u64 __anon_300
        local u64 __anon_3016
        local u64 __anon_308
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local mut { u64, u64 } buffer2
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local u64 buffer50
        local u64 buffer516
        local u64 buffer58
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = asm() -> u64 fp, !6 {
        }
        v2 = const u64 584, !8
        v3 = add v1, v2, !9
        v4 = call read_3(v3), !11
        v5 = asm(ptr: v4) -> u64 ptr, !13 {
        }
        v6 = get_local ptr { u64, u64 }, __anon_00, !15
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !16
        v9 = get_local ptr u64, __anon_0000
        store v5 to v9, !17
        v10 = const u64 1
        v11 = get_elem_ptr v6, ptr u64, v10, !18
        v12 = get_local ptr u64, __anon_008
        v13 = const u64 0, !19
        store v13 to v12, !20
        v14 = get_local ptr { u64, u64 }, buffer, !22
        v15 = get_local ptr u64, __anon_0000
        v16 = load v15
        v17 = get_local ptr u64, __anon_008
        v18 = load v17
        v19 = const u64 0
        v20 = get_elem_ptr v14, ptr u64, v19
        store v16 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v14, ptr u64, v21
        store v18 to v22
        v23 = get_local ptr { u64, u64 }, buffer, !24
        v24 = call abi_decode_5(v23), !27
        v25 = get_local ptr slice, __ret_val
        v26 = call read_bytes_10(v23, v24, v25)
        v27 = get_local ptr slice, data, !29
        mem_copy_val v27, v26
        v28 = get_local ptr slice, data, !31
        v29 = get_local ptr slice, __tmp_arg
        mem_copy_val v29, v28
        v30 = call ptr_11(v29)
        v31 = get_local ptr { u64, u64 }, __anon_000, !33
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !34
        store v30 to v33, !35
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr u64, v34, !36
        store v24 to v35, !37
        v36 = asm(s: v31) -> ptr slice s {
        }
        v37 = get_local ptr slice, _method_name, !38
        mem_copy_val v37, v36
        v38 = get_local ptr slice, _method_name, !39
        v39 = ptr_to_int v0 to u64, !40
        v40 = get_local ptr { u64, u64 }, __anon_0, !40
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41
        store v39 to v42, !40
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43
        v45 = const u64 16
        store v45 to v44, !40
        v46 = get_local ptr slice, __anon_1, !40
        mem_copy_bytes v46, v40, 16
        v47 = get_local ptr slice, __tmp_arg4
        mem_copy_val v47, v38
        v48 = get_local ptr slice, __tmp_arg5
        mem_copy_val v48, v46
        v49 = call eq_13(v47, v48)
        v50 = const unit ()
        cbr v49, block0(), block2(v50), !41

        block0():
        v51 = get_local ptr { u64, u64 }, __ret_val1
        v52 = call from_second_parameter_19(v51)
        v53 = get_local ptr { u64, u64 }, buffer0, !44
        mem_copy_val v53, v52
        v54 = get_local ptr { u64, u64 }, buffer0, !46
        v55 = get_local ptr b256, __ret_val4
        v56 = call decode_24(v54, v55)
        v57 = const u64 1, !47
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v57), !52

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v58: u64):
        v59 = const u64 3, !53
        v60 = cmp lt v58 v59, !55
        cbr v60, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !56

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v61 = get_local ptr b256, __ret_val5
        v62 = call decode_24(v54, v61)
        v63 = const u64 1, !57
        v64 = add v58, v63, !59
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v64), !60

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v65 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v66 = call decode_28(v54, v65)
        v67 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v68 = call decode_35(v54, v67)
        v69 = const u64 1, !61
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v69), !63

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v70: u64):
        v71 = const u64 4, !64
        v72 = cmp lt v70 v71, !66
        cbr v72, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !67

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v73 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v74 = call decode_35(v54, v73)
        v75 = const u64 1, !68
        v76 = add v70, v75, !70
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v76), !71

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v77 = get_local ptr slice, __ret_val0
        v78 = const u64 5, !72
        v79 = call read_bytes_10(v54, v78, v77)
        v80 = get_local ptr slice, data0, !76
        mem_copy_val v80, v79
        v81 = get_local ptr slice, data0, !78
        v82 = get_local ptr slice, __tmp_arg0
        mem_copy_val v82, v81
        v83 = call ptr_11(v82)
        v84 = asm(s: v83) -> ptr string<5> s {
        }
        v85 = call abi_decode_32(v54), !80
        v86 = get_local ptr { u64 }, __ret_val9
        v87 = call abi_decode_39(v54, v86)
        v88 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v89 = call new_42(v88)
        v90 = ptr_to_int v89 to u64, !83
        v91 = int_to_ptr v90 to ptr { { u64, u64, u64 } }, !84
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { u64, u64, u64 }, v92, !86
        v94 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v94, v93
        v95 = asm(buffer: v94) -> ptr { u64, u64, u64 } buffer {
        }
        v96 = get_local ptr { u64, u64, u64 }, __anon_03, !87
        mem_copy_val v96, v95
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr u64, v97, !88
        v99 = load v98, !89
        v100 = int_to_ptr v99 to ptr u8, !90
        v101 = const u64 1
        v102 = get_elem_ptr v96, ptr u64, v101, !91
        v103 = const u64 2
        v104 = get_elem_ptr v96, ptr u64, v103, !92
        v105 = load v104, !93
        v106 = get_local ptr string<6>, __const0, !94
        v107 = ptr_to_int v100 to u64, !95
        v108 = add v107, v105, !96
        v109 = int_to_ptr v108 to ptr u8, !97
        mem_copy_bytes v109, v106, 6, !98
        v110 = const u64 6
        v111 = add v105, v110, !99
        v112 = ptr_to_int v100 to u64, !100
        v113 = get_local ptr { u64, u64, u64 }, __anon_20, !101
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u64, v114, !102
        store v112 to v115, !103
        v116 = const u64 1
        v117 = get_elem_ptr v113, ptr u64, v116, !104
        mem_copy_val v117, v102
        v118 = const u64 2
        v119 = get_elem_ptr v113, ptr u64, v118, !105
        store v111 to v119, !106
        v120 = asm(buffer: v113) -> ptr { u64, u64, u64 } buffer {
        }
        v121 = get_local ptr { { u64, u64, u64 } }, __anon_30, !108
        v122 = const u64 0
        v123 = get_elem_ptr v121, ptr { u64, u64, u64 }, v122, !109
        v124 = const u64 0
        v125 = get_elem_ptr v120, ptr u64, v124
        v126 = load v125
        v127 = const u64 1
        v128 = get_elem_ptr v120, ptr u64, v127
        v129 = load v128
        v130 = const u64 2
        v131 = get_elem_ptr v120, ptr u64, v130
        v132 = load v131
        v133 = get_local ptr u64, __anon_300
        store v126 to v133
        v134 = get_local ptr u64, __anon_308
        store v129 to v134
        v135 = get_local ptr u64, __anon_3016
        store v132 to v135
        v136 = get_local ptr { { u64, u64, u64 } }, __anon_30, !111
        v137 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        v138 = get_local ptr u64, __anon_300
        v139 = load v138
        v140 = get_local ptr u64, __anon_308
        v141 = load v140
        v142 = get_local ptr u64, __anon_3016
        v143 = load v142
        v144 = const u64 0
        v145 = const u64 0
        v146 = get_elem_ptr v137, ptr u64, v144, v145
        store v139 to v146
        v147 = const u64 0
        v148 = const u64 1
        v149 = get_elem_ptr v137, ptr u64, v147, v148
        store v141 to v149
        v150 = const u64 0
        v151 = const u64 2
        v152 = get_elem_ptr v137, ptr u64, v150, v151
        store v143 to v152
        v153 = get_local ptr slice, __ret_val15
        v154 = call as_raw_slice_43(v137, v153)
        v155 = get_local ptr slice, result_complex_function, !112
        mem_copy_val v155, v154
        v156 = get_local ptr slice, result_complex_function, !113
        v157 = get_local ptr slice, __tmp_arg1
        mem_copy_val v157, v156
        v158 = call ptr_11(v157)
        v159 = get_local ptr slice, result_complex_function, !114
        v160 = get_local ptr slice, __tmp_arg13
        mem_copy_val v160, v159
        v161 = call len_45(v160)
        retd v158 v161, !115
        v162 = const unit ()
        br block2(v162)

        block2(v163: ()):
        v164 = get_local ptr string<18>, __const1
        v165 = get_local ptr slice, _method_name, !116
        v166 = ptr_to_int v164 to u64, !117
        v167 = get_local ptr { u64, u64 }, __anon_2, !117
        v168 = const u64 0
        v169 = get_elem_ptr v167, ptr u64, v168
        store v166 to v169, !117
        v170 = const u64 1
        v171 = get_elem_ptr v167, ptr u64, v170
        v172 = const u64 18
        store v172 to v171, !117
        v173 = get_local ptr slice, __anon_3, !117
        mem_copy_bytes v173, v167, 16
        v174 = get_local ptr slice, __tmp_arg6
        mem_copy_val v174, v165
        v175 = get_local ptr slice, __tmp_arg7
        mem_copy_val v175, v173
        v176 = call eq_13(v174, v175)
        v177 = const unit ()
        cbr v176, block3(), block5(v177), !118

        block3():
        v178 = get_local ptr { u64, u64 }, __ret_val2
        v179 = call from_second_parameter_19(v178)
        v180 = get_local ptr { u64, u64 }, buffer2, !120
        mem_copy_val v180, v179
        v181 = get_local ptr { u64, u64 }, buffer2, !121
        v182 = call read_53(v181), !126
        v183 = const u64 1, !47
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v183), !127

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v184: u64):
        v185 = const u64 3, !53
        v186 = cmp lt v184 v185, !128
        cbr v186, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !129

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v187 = call read_53(v181), !131
        v188 = const u64 1, !57
        v189 = add v184, v188, !132
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v189), !133

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v190 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v191 = call abi_decode_59(v181, v190)
        v192 = const u64 1, !134
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v192), !136

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v193: u64):
        v194 = const u64 5, !137
        v195 = cmp lt v193 v194, !139
        cbr v195, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !140

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v196 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v197 = call abi_decode_59(v181, v196)
        v198 = const u64 1, !141
        v199 = add v193, v198, !143
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v199), !144

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v200 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v201 = call new_42(v200)
        v202 = ptr_to_int v201 to u64, !146
        v203 = int_to_ptr v202 to ptr { { u64, u64, u64 } }, !147
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr { u64, u64, u64 }, v204, !148
        v206 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v206, v205
        v207 = asm(buffer: v206) -> ptr { u64, u64, u64 } buffer {
        }
        v208 = get_local ptr { u64, u64, u64 }, __anon_05, !149
        mem_copy_val v208, v207
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr u64, v209, !150
        v211 = load v210, !151
        v212 = int_to_ptr v211 to ptr u8, !152
        v213 = const u64 1
        v214 = get_elem_ptr v208, ptr u64, v213, !153
        v215 = const u64 2
        v216 = get_elem_ptr v208, ptr u64, v215, !154
        v217 = load v216, !155
        v218 = ptr_to_int v212 to u64, !156
        v219 = add v218, v217, !157
        v220 = int_to_ptr v219 to ptr u64, !158
        v221 = const u64 0, !160
        store v221 to v220, !161
        v222 = const u64 8
        v223 = add v217, v222, !162
        v224 = ptr_to_int v212 to u64, !163
        v225 = get_local ptr { u64, u64, u64 }, __anon_11, !164
        v226 = const u64 0
        v227 = get_elem_ptr v225, ptr u64, v226, !165
        store v224 to v227, !166
        v228 = const u64 1
        v229 = get_elem_ptr v225, ptr u64, v228, !167
        mem_copy_val v229, v214
        v230 = const u64 2
        v231 = get_elem_ptr v225, ptr u64, v230, !168
        store v223 to v231, !169
        v232 = asm(buffer: v225) -> ptr { u64, u64, u64 } buffer {
        }
        v233 = get_local ptr { { u64, u64, u64 } }, __anon_21, !171
        v234 = const u64 0
        v235 = get_elem_ptr v233, ptr { u64, u64, u64 }, v234, !172
        v236 = const u64 0
        v237 = get_elem_ptr v232, ptr u64, v236
        v238 = load v237
        v239 = const u64 1
        v240 = get_elem_ptr v232, ptr u64, v239
        v241 = load v240
        v242 = const u64 2
        v243 = get_elem_ptr v232, ptr u64, v242
        v244 = load v243
        v245 = get_local ptr u64, __anon_210
        store v238 to v245
        v246 = get_local ptr u64, __anon_218
        store v241 to v246
        v247 = get_local ptr u64, __anon_2116
        store v244 to v247
        v248 = get_local ptr { { u64, u64, u64 } }, __anon_21, !173
        v249 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        v250 = get_local ptr u64, __anon_210
        v251 = load v250
        v252 = get_local ptr u64, __anon_218
        v253 = load v252
        v254 = get_local ptr u64, __anon_2116
        v255 = load v254
        v256 = const u64 0
        v257 = const u64 0
        v258 = get_elem_ptr v249, ptr u64, v256, v257
        store v251 to v258
        v259 = const u64 0
        v260 = const u64 1
        v261 = get_elem_ptr v249, ptr u64, v259, v260
        store v253 to v261
        v262 = const u64 0
        v263 = const u64 2
        v264 = get_elem_ptr v249, ptr u64, v262, v263
        store v255 to v264
        v265 = get_local ptr slice, __ret_val16
        v266 = call as_raw_slice_43(v249, v265)
        v267 = get_local ptr slice, result_take_generic_array, !174
        mem_copy_val v267, v266
        v268 = get_local ptr slice, result_take_generic_array, !175
        v269 = get_local ptr slice, __tmp_arg2
        mem_copy_val v269, v268
        v270 = call ptr_11(v269)
        v271 = get_local ptr slice, result_take_generic_array, !176
        v272 = get_local ptr slice, __tmp_arg14
        mem_copy_val v272, v271
        v273 = call len_45(v272)
        retd v270 v273, !177
        v274 = const unit ()
        br block5(v274)

        block5(v275: ()):
        v276 = get_local ptr string<36>, __const2
        v277 = get_local ptr slice, _method_name, !178
        v278 = ptr_to_int v276 to u64, !179
        v279 = get_local ptr { u64, u64 }, __anon_4, !179
        v280 = const u64 0
        v281 = get_elem_ptr v279, ptr u64, v280
        store v278 to v281, !179
        v282 = const u64 1
        v283 = get_elem_ptr v279, ptr u64, v282
        v284 = const u64 36
        store v284 to v283, !179
        v285 = get_local ptr slice, __anon_5, !179
        mem_copy_bytes v285, v279, 16
        v286 = get_local ptr slice, __tmp_arg8
        mem_copy_val v286, v277
        v287 = get_local ptr slice, __tmp_arg9
        mem_copy_val v287, v285
        v288 = call eq_13(v286, v287)
        v289 = const unit ()
        cbr v288, block6(), block8(v289), !180

        block6():
        v290 = get_local ptr { u64, u64 }, __ret_val3
        v291 = call from_second_parameter_19(v290)
        v292 = get_local ptr { u64, u64 }, buffer4, !182
        mem_copy_val v292, v291
        v293 = get_local ptr { u64, u64 }, buffer4, !183
        v294 = get_local ptr { u64 }, __ret_val10
        v295 = call abi_decode_39(v293, v294)
        v296 = call read_53(v293), !187
        v297 = asm(input: v296) -> u64 input, !191 {
        }
        v298 = call read_53(v293), !193
        v299 = asm(input: v298) -> u64 input, !195 {
        }
        v300 = call abi_decode_74(v293), !197
        v301 = call abi_decode_74(v293), !199
        v302 = get_local ptr { u64 }, __ret_val11
        v303 = call abi_decode_39(v293, v302)
        v304 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v305 = call new_42(v304)
        v306 = get_local ptr { { u64, u64, u64 } }, buffer5, !202
        v307 = const u64 0
        v308 = const u64 0
        v309 = get_elem_ptr v305, ptr u64, v307, v308
        v310 = load v309
        v311 = const u64 0
        v312 = const u64 1
        v313 = get_elem_ptr v305, ptr u64, v311, v312
        v314 = load v313
        v315 = const u64 0
        v316 = const u64 2
        v317 = get_elem_ptr v305, ptr u64, v315, v316
        v318 = load v317
        v319 = get_local ptr u64, buffer50
        store v310 to v319
        v320 = get_local ptr u64, buffer58
        store v314 to v320
        v321 = get_local ptr u64, buffer516
        store v318 to v321
        v322 = get_local ptr { { u64, u64, u64 } }, buffer5, !203
        v323 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        v324 = get_local ptr u64, buffer50
        v325 = load v324
        v326 = get_local ptr u64, buffer58
        v327 = load v326
        v328 = get_local ptr u64, buffer516
        v329 = load v328
        v330 = const u64 0
        v331 = const u64 0
        v332 = get_elem_ptr v323, ptr u64, v330, v331
        store v325 to v332
        v333 = const u64 0
        v334 = const u64 1
        v335 = get_elem_ptr v323, ptr u64, v333, v334
        store v327 to v335
        v336 = const u64 0
        v337 = const u64 2
        v338 = get_elem_ptr v323, ptr u64, v336, v337
        store v329 to v338
        v339 = get_local ptr slice, __ret_val17
        v340 = call as_raw_slice_43(v323, v339)
        v341 = get_local ptr slice, result_take_generic_struct_containing_tuple, !204
        mem_copy_val v341, v340
        v342 = get_local ptr slice, result_take_generic_struct_containing_tuple, !205
        v343 = get_local ptr slice, __tmp_arg3
        mem_copy_val v343, v342
        v344 = call ptr_11(v343)
        v345 = get_local ptr slice, result_take_generic_struct_containing_tuple, !206
        v346 = get_local ptr slice, __tmp_arg15
        mem_copy_val v346, v345
        v347 = call len_45(v346)
        retd v344 v347, !207
        v348 = const unit ()
        br block8(v348)

        block8(v349: ()):
        v350 = const u64 123, !208
        revert v350, !209
    }

    pub fn read_3(self !211: u64) -> u64, !212 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !213 {
            lw     val ptr i0, !214
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !215: ptr { u64, u64 }) -> u64, !216 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !219
        v2 = load v1, !217
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !221
        v5 = load v4, !217
        v6 = const u64 1
        v7 = mul v6, v5, !223
        v8 = add v2, v7, !224
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !225
        v11 = load v10, !217
        v12 = const u64 8
        v13 = add v11, v12, !227
        v14 = asm(ptr: v8, val) -> u64 val, !229 {
            lw     val ptr i0, !230
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !232
        store v13 to v16, !233
        ret u64 v14
    }

    pub fn read_bytes_10(self !234: ptr { u64, u64 }, count !235: u64, __ret_value: ptr slice) -> ptr slice, !236 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !220
        v2 = load v1
        v3 = add v2, count, !237
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !218
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !220
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !238
        v12 = add v6, v11, !238
        v13 = get_local ptr { u64, u64 }, __anon_0, !239
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !239
        store v12 to v15, !239
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !239
        store count to v17, !239
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = get_local ptr slice, slice, !240
        mem_copy_val v19, v18
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !241
        store v3 to v21, !241
        v22 = get_local ptr slice, slice, !242
        mem_copy_val __ret_value, v22
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !244 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_00
        store v5 to v9
        v10 = get_local ptr u64, __anon_08
        store v8 to v10
        v11 = const u64 0
        v12 = get_elem_ptr v2, ptr u64, v11, !245
        v13 = get_local ptr u64, __anon_00
        v14 = load v13
        ret u64 v14
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !247 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, self
        v1 = call len_16(v0)
        v2 = get_local ptr slice, __tmp_arg0
        mem_copy_val v2, other
        v3 = call len_16(v2)
        v4 = cmp eq v1 v3, !250
        v5 = const bool false, !251
        v6 = cmp eq v4 v5, !253
        v7 = const bool false, !254
        cbr v6, block2(v7), block1(), !248

        block1():
        v8 = get_local ptr slice, __tmp_arg2
        mem_copy_val v8, self
        v9 = call as_ptr_17(v8)
        v10 = get_local ptr slice, __tmp_arg3
        mem_copy_val v10, other
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg1
        mem_copy_val v12, self
        v13 = call len_16(v12)
        v14 = asm(r1: v9, r2: v11, r3: v13, r4) -> bool r4, !255 {
            meq    r4 r1 r2 r3, !256
        }
        br block2(v14)

        block2(v15: bool):
        ret bool v15
    }

    pub fn len_16(self: ptr slice) -> u64, !258 {
        local slice __asm_arg
        local { u64, u64 } __tuple_2
        local u64 __tuple_20
        local u64 __tuple_28

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_2, !259
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __tuple_20
        store v5 to v9
        v10 = get_local ptr u64, __tuple_28
        store v8 to v10
        v11 = get_local ptr { u64, u64 }, __tuple_2, !259
        v12 = const u64 1
        v13 = get_elem_ptr v11, ptr u64, v12, !259
        v14 = get_local ptr u64, __tuple_28
        v15 = load v14
        ret u64 v15
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !260 {
        local slice __asm_arg
        local { u64, u64 } __tuple_1
        local u64 __tuple_10
        local u64 __tuple_18

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_1, !261
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __tuple_10
        store v5 to v9
        v10 = get_local ptr u64, __tuple_18
        store v8 to v10
        v11 = get_local ptr { u64, u64 }, __tuple_1, !261
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !261
        v14 = get_local ptr u64, __tuple_10
        v15 = load v14
        ret u64 v15
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !262 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08

        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !263 {
        }
        v1 = const u64 592, !264
        v2 = add v0, v1, !264
        v3 = call read_3(v2), !265
        v4 = asm(ptr: v3) -> u64 ptr, !266 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !267
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        v8 = get_local ptr u64, __anon_00
        store v4 to v8, !267
        v9 = const u64 1
        v10 = get_elem_ptr v5, ptr u64, v9
        v11 = get_local ptr u64, __anon_08
        v12 = const u64 0, !268
        store v12 to v11, !267
        v13 = get_local ptr u64, __anon_00
        v14 = load v13
        v15 = get_local ptr u64, __anon_08
        v16 = load v15
        v17 = const u64 0
        v18 = get_elem_ptr __ret_value, ptr u64, v17
        store v14 to v18
        v19 = const u64 1
        v20 = get_elem_ptr __ret_value, ptr u64, v19
        store v16 to v20
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !269: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !270 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !272
        v2 = load v1, !273
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !274
        v5 = load v4, !275
        v6 = const u64 1
        v7 = mul v6, v5, !276
        v8 = add v2, v7, !277
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !278
        v11 = load v10, !279
        v12 = const u64 32
        v13 = add v11, v12, !280
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = get_local ptr b256, v, !282
        mem_copy_val v15, v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !284
        store v13 to v17, !285
        v18 = get_local ptr b256, v, !287
        mem_copy_val __ret_value, v18
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !269: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !270 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !289
        v1 = const u64 0, !290
        v2 = cmp eq v0 v1, !292
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !293

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !295
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !296
        v6 = const u64 0, !294
        store v6 to v5, !297
        v7 = call abi_decode_5(self), !299
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !300
        store v7 to v10, !301
        v11 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v11, v3
        br abi_decode_29_block5(v11), !51

        abi_decode_29_block1():
        v12 = const u64 1, !302
        v13 = cmp eq v0 v12, !304
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !305

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !306
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !307
        v17 = const u64 1, !294
        store v17 to v16, !308
        v18 = call abi_decode_32(self), !310
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !311
        store v18 to v21, !312
        v22 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v22, v14
        br abi_decode_29_block5(v22), !51

        abi_decode_29_block3():
        v23 = const u64 0, !313
        revert v23, !315

        abi_decode_29_block5(v24: ptr { u64, ( u64 | bool ) }):
        mem_copy_val __ret_value, v24
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !316: ptr { u64, u64 }) -> bool, !317 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !319
        v2 = load v1, !318
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !320
        v5 = load v4, !318
        v6 = const u64 1
        v7 = mul v6, v5, !321
        v8 = add v2, v7, !322
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !323
        v11 = load v10, !318
        v12 = const u64 1
        v13 = add v11, v12, !324
        v14 = asm(ptr: v8, val) -> bool val, !326 {
            lb     val ptr i0, !327
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !329
        store v13 to v16, !330
        ret bool v14
    }

    pub fn decode_35(self !269: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !270 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !331
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !333
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !51
        store v0 to v5, !334
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6, !51
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !335: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !336 {
        local { u64 } __anon_0
        local u64 __anon_00

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !338
        v1 = get_local ptr { u64 }, __anon_0, !339
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = get_local ptr u64, __anon_00
        store v0 to v4, !339
        v5 = get_local ptr u64, __anon_00
        v6 = load v5
        v7 = const u64 0
        v8 = get_elem_ptr __ret_value, ptr u64, v7
        store v6 to v8
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !340 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1
        local u64 __anon_10
        local u64 __anon_116
        local u64 __anon_18

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !341
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        v16 = const u64 0
        v17 = get_elem_ptr v12, ptr u64, v16
        v18 = load v17
        v19 = const u64 1
        v20 = get_elem_ptr v12, ptr u64, v19
        v21 = load v20
        v22 = const u64 2
        v23 = get_elem_ptr v12, ptr u64, v22
        v24 = load v23
        v25 = get_local ptr u64, __anon_10
        store v18 to v25
        v26 = get_local ptr u64, __anon_18
        store v21 to v26
        v27 = get_local ptr u64, __anon_116
        store v24 to v27
        v28 = get_local ptr u64, __anon_10
        v29 = load v28
        v30 = get_local ptr u64, __anon_18
        v31 = load v30
        v32 = get_local ptr u64, __anon_116
        v33 = load v32
        v34 = const u64 0
        v35 = const u64 0
        v36 = get_elem_ptr __ret_value, ptr u64, v34, v35
        store v29 to v36
        v37 = const u64 0
        v38 = const u64 1
        v39 = get_elem_ptr __ret_value, ptr u64, v37, v38
        store v31 to v39
        v40 = const u64 0
        v41 = const u64 2
        v42 = get_elem_ptr __ret_value, ptr u64, v40, v41
        store v33 to v42
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !342 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !85
        v4 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v4, v3
        v5 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        mem_copy_val v6, v5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = ptr_to_int v10 to u64
        v14 = get_local ptr { u64, u64 }, __anon_1
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        mem_copy_val v18, v12
        v19 = asm(s: v14) -> ptr slice s {
        }
        mem_copy_val __ret_value, v19
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !343 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_00
        store v5 to v9
        v10 = get_local ptr u64, __anon_08
        store v8 to v10
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !344
        v13 = get_local ptr u64, __anon_08
        v14 = load v13
        v15 = const u64 1
        v16 = div v14, v15
        ret u64 v16
    }

    pub fn read_53(self !345: ptr { u64, u64 }) -> u8, !346 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !218
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !220
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !222
        v8 = add v2, v7, !222
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !220
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !226
        v14 = asm(ptr: v8, val) -> u8 val, !325 {
            lb     val ptr i0, !327
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !328
        store v13 to v16, !328
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !347: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !348 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !349
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !332
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u8, v4
        store v0 to v5, !332
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !350: ptr { u64, u64 }) -> u64, !351 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !352
        v1 = asm(input: v0) -> u64 input, !354 {
        }
        v2 = call read_53(buffer), !355
        v3 = asm(input: v2) -> u64 input, !357 {
        }
        v4 = call read_53(buffer), !358
        v5 = asm(input: v4) -> u64 input, !360 {
        }
        v6 = call read_53(buffer), !361
        v7 = asm(input: v6) -> u64 input, !363 {
        }
        v8 = const u64 24, !364
        v9 = lsh v1, v8, !365
        v10 = const u64 4294967295, !367
        v11 = and v9, v10, !365
        v12 = const u64 16, !368
        v13 = lsh v3, v12, !369
        v14 = and v13, v10, !369
        v15 = or v11, v14, !370
        v16 = const u64 8, !371
        v17 = lsh v5, v16, !372
        v18 = and v17, v10, !372
        v19 = or v15, v18, !373
        v20 = or v19, v7, !374
        ret u64 v20
    }
}

// IR: [mem2reg] Promotion of local memory to SSA registers
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_008
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local { { u64, u64, u64 } } __anon_21
        local u64 __anon_210
        local u64 __anon_2116
        local u64 __anon_218
        local slice __anon_3
        local { { u64, u64, u64 } } __anon_30
        local u64 __anon_300
        local u64 __anon_3016
        local u64 __anon_308
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local mut { u64, u64 } buffer2
        local mut { u64, u64 } buffer4
        local { { u64, u64, u64 } } buffer5
        local u64 buffer50
        local u64 buffer516
        local u64 buffer58
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = asm() -> u64 fp, !6 {
        }
        v2 = const u64 584, !8
        v3 = add v1, v2, !9
        v4 = call read_3(v3), !11
        v5 = asm(ptr: v4) -> u64 ptr, !13 {
        }
        v6 = get_local ptr { u64, u64 }, __anon_00, !15
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !16
        v9 = get_local ptr u64, __anon_0000
        v10 = const u64 1
        v11 = get_elem_ptr v6, ptr u64, v10, !17
        v12 = get_local ptr u64, __anon_008
        v13 = get_local ptr { u64, u64 }, buffer, !19
        v14 = get_local ptr u64, __anon_0000
        v15 = get_local ptr u64, __anon_008
        v16 = const u64 0
        v17 = get_elem_ptr v13, ptr u64, v16
        store v5 to v17
        v18 = const u64 1
        v19 = get_elem_ptr v13, ptr u64, v18
        v20 = const u64 0, !20
        store v20 to v19
        v21 = get_local ptr { u64, u64 }, buffer, !22
        v22 = call abi_decode_5(v21), !25
        v23 = get_local ptr slice, __ret_val
        v24 = call read_bytes_10(v21, v22, v23)
        v25 = get_local ptr slice, data, !27
        mem_copy_val v25, v24
        v26 = get_local ptr slice, data, !29
        v27 = get_local ptr slice, __tmp_arg
        mem_copy_val v27, v26
        v28 = call ptr_11(v27)
        v29 = get_local ptr { u64, u64 }, __anon_000, !31
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30, !32
        store v28 to v31, !33
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32, !34
        store v22 to v33, !35
        v34 = asm(s: v29) -> ptr slice s {
        }
        v35 = get_local ptr slice, _method_name, !36
        mem_copy_val v35, v34
        v36 = get_local ptr slice, _method_name, !37
        v37 = ptr_to_int v0 to u64, !38
        v38 = get_local ptr { u64, u64 }, __anon_0, !38
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39
        store v37 to v40, !38
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr u64, v41
        v43 = const u64 16
        store v43 to v42, !38
        v44 = get_local ptr slice, __anon_1, !38
        mem_copy_bytes v44, v38, 16
        v45 = get_local ptr slice, __tmp_arg4
        mem_copy_val v45, v36
        v46 = get_local ptr slice, __tmp_arg5
        mem_copy_val v46, v44
        v47 = call eq_13(v45, v46)
        v48 = const unit ()
        cbr v47, block0(), block2(v48), !39

        block0():
        v49 = get_local ptr { u64, u64 }, __ret_val1
        v50 = call from_second_parameter_19(v49)
        v51 = get_local ptr { u64, u64 }, buffer0, !42
        mem_copy_val v51, v50
        v52 = get_local ptr { u64, u64 }, buffer0, !44
        v53 = get_local ptr b256, __ret_val4
        v54 = call decode_24(v52, v53)
        v55 = const u64 1, !45
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v55), !50

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v56: u64):
        v57 = const u64 3, !51
        v58 = cmp lt v56 v57, !53
        cbr v58, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !54

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v59 = get_local ptr b256, __ret_val5
        v60 = call decode_24(v52, v59)
        v61 = const u64 1, !55
        v62 = add v56, v61, !57
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v62), !58

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v63 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v64 = call decode_28(v52, v63)
        v65 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v66 = call decode_35(v52, v65)
        v67 = const u64 1, !59
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v67), !61

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v68: u64):
        v69 = const u64 4, !62
        v70 = cmp lt v68 v69, !64
        cbr v70, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !65

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v71 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v72 = call decode_35(v52, v71)
        v73 = const u64 1, !66
        v74 = add v68, v73, !68
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v74), !69

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v75 = get_local ptr slice, __ret_val0
        v76 = const u64 5, !70
        v77 = call read_bytes_10(v52, v76, v75)
        v78 = get_local ptr slice, data0, !74
        mem_copy_val v78, v77
        v79 = get_local ptr slice, data0, !76
        v80 = get_local ptr slice, __tmp_arg0
        mem_copy_val v80, v79
        v81 = call ptr_11(v80)
        v82 = asm(s: v81) -> ptr string<5> s {
        }
        v83 = call abi_decode_32(v52), !78
        v84 = get_local ptr { u64 }, __ret_val9
        v85 = call abi_decode_39(v52, v84)
        v86 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v87 = call new_42(v86)
        v88 = ptr_to_int v87 to u64, !81
        v89 = int_to_ptr v88 to ptr { { u64, u64, u64 } }, !82
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr { u64, u64, u64 }, v90, !84
        v92 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v92, v91
        v93 = asm(buffer: v92) -> ptr { u64, u64, u64 } buffer {
        }
        v94 = get_local ptr { u64, u64, u64 }, __anon_03, !85
        mem_copy_val v94, v93
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95, !86
        v97 = load v96, !87
        v98 = int_to_ptr v97 to ptr u8, !88
        v99 = const u64 1
        v100 = get_elem_ptr v94, ptr u64, v99, !89
        v101 = const u64 2
        v102 = get_elem_ptr v94, ptr u64, v101, !90
        v103 = load v102, !91
        v104 = get_local ptr string<6>, __const0, !92
        v105 = ptr_to_int v98 to u64, !93
        v106 = add v105, v103, !94
        v107 = int_to_ptr v106 to ptr u8, !95
        mem_copy_bytes v107, v104, 6, !96
        v108 = const u64 6
        v109 = add v103, v108, !97
        v110 = ptr_to_int v98 to u64, !98
        v111 = get_local ptr { u64, u64, u64 }, __anon_20, !99
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !100
        store v110 to v113, !101
        v114 = const u64 1
        v115 = get_elem_ptr v111, ptr u64, v114, !102
        mem_copy_val v115, v100
        v116 = const u64 2
        v117 = get_elem_ptr v111, ptr u64, v116, !103
        store v109 to v117, !104
        v118 = asm(buffer: v111) -> ptr { u64, u64, u64 } buffer {
        }
        v119 = get_local ptr { { u64, u64, u64 } }, __anon_30, !106
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr { u64, u64, u64 }, v120, !107
        v122 = const u64 0
        v123 = get_elem_ptr v118, ptr u64, v122
        v124 = load v123
        v125 = const u64 1
        v126 = get_elem_ptr v118, ptr u64, v125
        v127 = load v126
        v128 = const u64 2
        v129 = get_elem_ptr v118, ptr u64, v128
        v130 = load v129
        v131 = get_local ptr u64, __anon_300
        v132 = get_local ptr u64, __anon_308
        v133 = get_local ptr u64, __anon_3016
        v134 = get_local ptr { { u64, u64, u64 } }, __anon_30, !109
        v135 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        v136 = get_local ptr u64, __anon_300
        v137 = get_local ptr u64, __anon_308
        v138 = get_local ptr u64, __anon_3016
        v139 = const u64 0
        v140 = const u64 0
        v141 = get_elem_ptr v135, ptr u64, v139, v140
        store v124 to v141
        v142 = const u64 0
        v143 = const u64 1
        v144 = get_elem_ptr v135, ptr u64, v142, v143
        store v127 to v144
        v145 = const u64 0
        v146 = const u64 2
        v147 = get_elem_ptr v135, ptr u64, v145, v146
        store v130 to v147
        v148 = get_local ptr slice, __ret_val15
        v149 = call as_raw_slice_43(v135, v148)
        v150 = get_local ptr slice, result_complex_function, !110
        mem_copy_val v150, v149
        v151 = get_local ptr slice, result_complex_function, !111
        v152 = get_local ptr slice, __tmp_arg1
        mem_copy_val v152, v151
        v153 = call ptr_11(v152)
        v154 = get_local ptr slice, result_complex_function, !112
        v155 = get_local ptr slice, __tmp_arg13
        mem_copy_val v155, v154
        v156 = call len_45(v155)
        retd v153 v156, !113
        v157 = const unit ()
        br block2(v157)

        block2(v158: ()):
        v159 = get_local ptr string<18>, __const1
        v160 = get_local ptr slice, _method_name, !114
        v161 = ptr_to_int v159 to u64, !115
        v162 = get_local ptr { u64, u64 }, __anon_2, !115
        v163 = const u64 0
        v164 = get_elem_ptr v162, ptr u64, v163
        store v161 to v164, !115
        v165 = const u64 1
        v166 = get_elem_ptr v162, ptr u64, v165
        v167 = const u64 18
        store v167 to v166, !115
        v168 = get_local ptr slice, __anon_3, !115
        mem_copy_bytes v168, v162, 16
        v169 = get_local ptr slice, __tmp_arg6
        mem_copy_val v169, v160
        v170 = get_local ptr slice, __tmp_arg7
        mem_copy_val v170, v168
        v171 = call eq_13(v169, v170)
        v172 = const unit ()
        cbr v171, block3(), block5(v172), !116

        block3():
        v173 = get_local ptr { u64, u64 }, __ret_val2
        v174 = call from_second_parameter_19(v173)
        v175 = get_local ptr { u64, u64 }, buffer2, !118
        mem_copy_val v175, v174
        v176 = get_local ptr { u64, u64 }, buffer2, !119
        v177 = call read_53(v176), !124
        v178 = const u64 1, !45
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v178), !125

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v179: u64):
        v180 = const u64 3, !51
        v181 = cmp lt v179 v180, !126
        cbr v181, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !127

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v182 = call read_53(v176), !129
        v183 = const u64 1, !55
        v184 = add v179, v183, !130
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v184), !131

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v185 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v186 = call abi_decode_59(v176, v185)
        v187 = const u64 1, !132
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v187), !134

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v188: u64):
        v189 = const u64 5, !135
        v190 = cmp lt v188 v189, !137
        cbr v190, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !138

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v191 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v192 = call abi_decode_59(v176, v191)
        v193 = const u64 1, !139
        v194 = add v188, v193, !141
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v194), !142

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v195 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v196 = call new_42(v195)
        v197 = ptr_to_int v196 to u64, !144
        v198 = int_to_ptr v197 to ptr { { u64, u64, u64 } }, !145
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr { u64, u64, u64 }, v199, !146
        v201 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v201, v200
        v202 = asm(buffer: v201) -> ptr { u64, u64, u64 } buffer {
        }
        v203 = get_local ptr { u64, u64, u64 }, __anon_05, !147
        mem_copy_val v203, v202
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr u64, v204, !148
        v206 = load v205, !149
        v207 = int_to_ptr v206 to ptr u8, !150
        v208 = const u64 1
        v209 = get_elem_ptr v203, ptr u64, v208, !151
        v210 = const u64 2
        v211 = get_elem_ptr v203, ptr u64, v210, !152
        v212 = load v211, !153
        v213 = ptr_to_int v207 to u64, !154
        v214 = add v213, v212, !155
        v215 = int_to_ptr v214 to ptr u64, !156
        v216 = const u64 0, !158
        store v216 to v215, !159
        v217 = const u64 8
        v218 = add v212, v217, !160
        v219 = ptr_to_int v207 to u64, !161
        v220 = get_local ptr { u64, u64, u64 }, __anon_11, !162
        v221 = const u64 0
        v222 = get_elem_ptr v220, ptr u64, v221, !163
        store v219 to v222, !164
        v223 = const u64 1
        v224 = get_elem_ptr v220, ptr u64, v223, !165
        mem_copy_val v224, v209
        v225 = const u64 2
        v226 = get_elem_ptr v220, ptr u64, v225, !166
        store v218 to v226, !167
        v227 = asm(buffer: v220) -> ptr { u64, u64, u64 } buffer {
        }
        v228 = get_local ptr { { u64, u64, u64 } }, __anon_21, !169
        v229 = const u64 0
        v230 = get_elem_ptr v228, ptr { u64, u64, u64 }, v229, !170
        v231 = const u64 0
        v232 = get_elem_ptr v227, ptr u64, v231
        v233 = load v232
        v234 = const u64 1
        v235 = get_elem_ptr v227, ptr u64, v234
        v236 = load v235
        v237 = const u64 2
        v238 = get_elem_ptr v227, ptr u64, v237
        v239 = load v238
        v240 = get_local ptr u64, __anon_210
        v241 = get_local ptr u64, __anon_218
        v242 = get_local ptr u64, __anon_2116
        v243 = get_local ptr { { u64, u64, u64 } }, __anon_21, !171
        v244 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        v245 = get_local ptr u64, __anon_210
        v246 = get_local ptr u64, __anon_218
        v247 = get_local ptr u64, __anon_2116
        v248 = const u64 0
        v249 = const u64 0
        v250 = get_elem_ptr v244, ptr u64, v248, v249
        store v233 to v250
        v251 = const u64 0
        v252 = const u64 1
        v253 = get_elem_ptr v244, ptr u64, v251, v252
        store v236 to v253
        v254 = const u64 0
        v255 = const u64 2
        v256 = get_elem_ptr v244, ptr u64, v254, v255
        store v239 to v256
        v257 = get_local ptr slice, __ret_val16
        v258 = call as_raw_slice_43(v244, v257)
        v259 = get_local ptr slice, result_take_generic_array, !172
        mem_copy_val v259, v258
        v260 = get_local ptr slice, result_take_generic_array, !173
        v261 = get_local ptr slice, __tmp_arg2
        mem_copy_val v261, v260
        v262 = call ptr_11(v261)
        v263 = get_local ptr slice, result_take_generic_array, !174
        v264 = get_local ptr slice, __tmp_arg14
        mem_copy_val v264, v263
        v265 = call len_45(v264)
        retd v262 v265, !175
        v266 = const unit ()
        br block5(v266)

        block5(v267: ()):
        v268 = get_local ptr string<36>, __const2
        v269 = get_local ptr slice, _method_name, !176
        v270 = ptr_to_int v268 to u64, !177
        v271 = get_local ptr { u64, u64 }, __anon_4, !177
        v272 = const u64 0
        v273 = get_elem_ptr v271, ptr u64, v272
        store v270 to v273, !177
        v274 = const u64 1
        v275 = get_elem_ptr v271, ptr u64, v274
        v276 = const u64 36
        store v276 to v275, !177
        v277 = get_local ptr slice, __anon_5, !177
        mem_copy_bytes v277, v271, 16
        v278 = get_local ptr slice, __tmp_arg8
        mem_copy_val v278, v269
        v279 = get_local ptr slice, __tmp_arg9
        mem_copy_val v279, v277
        v280 = call eq_13(v278, v279)
        v281 = const unit ()
        cbr v280, block6(), block8(v281), !178

        block6():
        v282 = get_local ptr { u64, u64 }, __ret_val3
        v283 = call from_second_parameter_19(v282)
        v284 = get_local ptr { u64, u64 }, buffer4, !180
        mem_copy_val v284, v283
        v285 = get_local ptr { u64, u64 }, buffer4, !181
        v286 = get_local ptr { u64 }, __ret_val10
        v287 = call abi_decode_39(v285, v286)
        v288 = call read_53(v285), !185
        v289 = asm(input: v288) -> u64 input, !189 {
        }
        v290 = call read_53(v285), !191
        v291 = asm(input: v290) -> u64 input, !193 {
        }
        v292 = call abi_decode_74(v285), !195
        v293 = call abi_decode_74(v285), !197
        v294 = get_local ptr { u64 }, __ret_val11
        v295 = call abi_decode_39(v285, v294)
        v296 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v297 = call new_42(v296)
        v298 = get_local ptr { { u64, u64, u64 } }, buffer5, !200
        v299 = const u64 0
        v300 = const u64 0
        v301 = get_elem_ptr v297, ptr u64, v299, v300
        v302 = load v301
        v303 = const u64 0
        v304 = const u64 1
        v305 = get_elem_ptr v297, ptr u64, v303, v304
        v306 = load v305
        v307 = const u64 0
        v308 = const u64 2
        v309 = get_elem_ptr v297, ptr u64, v307, v308
        v310 = load v309
        v311 = get_local ptr u64, buffer50
        v312 = get_local ptr u64, buffer58
        v313 = get_local ptr u64, buffer516
        v314 = get_local ptr { { u64, u64, u64 } }, buffer5, !201
        v315 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        v316 = get_local ptr u64, buffer50
        v317 = get_local ptr u64, buffer58
        v318 = get_local ptr u64, buffer516
        v319 = const u64 0
        v320 = const u64 0
        v321 = get_elem_ptr v315, ptr u64, v319, v320
        store v302 to v321
        v322 = const u64 0
        v323 = const u64 1
        v324 = get_elem_ptr v315, ptr u64, v322, v323
        store v306 to v324
        v325 = const u64 0
        v326 = const u64 2
        v327 = get_elem_ptr v315, ptr u64, v325, v326
        store v310 to v327
        v328 = get_local ptr slice, __ret_val17
        v329 = call as_raw_slice_43(v315, v328)
        v330 = get_local ptr slice, result_take_generic_struct_containing_tuple, !202
        mem_copy_val v330, v329
        v331 = get_local ptr slice, result_take_generic_struct_containing_tuple, !203
        v332 = get_local ptr slice, __tmp_arg3
        mem_copy_val v332, v331
        v333 = call ptr_11(v332)
        v334 = get_local ptr slice, result_take_generic_struct_containing_tuple, !204
        v335 = get_local ptr slice, __tmp_arg15
        mem_copy_val v335, v334
        v336 = call len_45(v335)
        retd v333 v336, !205
        v337 = const unit ()
        br block8(v337)

        block8(v338: ()):
        v339 = const u64 123, !206
        revert v339, !207
    }

    pub fn read_3(self !209: u64) -> u64, !210 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !211 {
            lw     val ptr i0, !212
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !213: ptr { u64, u64 }) -> u64, !214 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !217
        v2 = load v1, !215
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !219
        v5 = load v4, !215
        v6 = const u64 1
        v7 = mul v6, v5, !221
        v8 = add v2, v7, !222
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !223
        v11 = load v10, !215
        v12 = const u64 8
        v13 = add v11, v12, !225
        v14 = asm(ptr: v8, val) -> u64 val, !227 {
            lw     val ptr i0, !228
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !230
        store v13 to v16, !231
        ret u64 v14
    }

    pub fn read_bytes_10(self !232: ptr { u64, u64 }, count !233: u64, __ret_value: ptr slice) -> ptr slice, !234 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !218
        v2 = load v1
        v3 = add v2, count, !235
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !216
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !218
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !236
        v12 = add v6, v11, !236
        v13 = get_local ptr { u64, u64 }, __anon_0, !237
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !237
        store v12 to v15, !237
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !237
        store count to v17, !237
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = get_local ptr slice, slice, !238
        mem_copy_val v19, v18
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !239
        store v3 to v21, !239
        v22 = get_local ptr slice, slice, !240
        mem_copy_val __ret_value, v22
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !242 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_00
        v10 = get_local ptr u64, __anon_08
        v11 = const u64 0
        v12 = get_elem_ptr v2, ptr u64, v11, !243
        v13 = get_local ptr u64, __anon_00
        ret u64 v5
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !245 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, self
        v1 = call len_16(v0)
        v2 = get_local ptr slice, __tmp_arg0
        mem_copy_val v2, other
        v3 = call len_16(v2)
        v4 = cmp eq v1 v3, !248
        v5 = const bool false, !249
        v6 = cmp eq v4 v5, !251
        v7 = const bool false, !252
        cbr v6, block2(v7), block1(), !246

        block1():
        v8 = get_local ptr slice, __tmp_arg2
        mem_copy_val v8, self
        v9 = call as_ptr_17(v8)
        v10 = get_local ptr slice, __tmp_arg3
        mem_copy_val v10, other
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg1
        mem_copy_val v12, self
        v13 = call len_16(v12)
        v14 = asm(r1: v9, r2: v11, r3: v13, r4) -> bool r4, !253 {
            meq    r4 r1 r2 r3, !254
        }
        br block2(v14)

        block2(v15: bool):
        ret bool v15
    }

    pub fn len_16(self: ptr slice) -> u64, !256 {
        local slice __asm_arg
        local { u64, u64 } __tuple_2
        local u64 __tuple_20
        local u64 __tuple_28

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_2, !257
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __tuple_20
        v10 = get_local ptr u64, __tuple_28
        v11 = get_local ptr { u64, u64 }, __tuple_2, !257
        v12 = const u64 1
        v13 = get_elem_ptr v11, ptr u64, v12, !257
        v14 = get_local ptr u64, __tuple_28
        ret u64 v8
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !258 {
        local slice __asm_arg
        local { u64, u64 } __tuple_1
        local u64 __tuple_10
        local u64 __tuple_18

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = get_local ptr { u64, u64 }, __tuple_1, !259
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __tuple_10
        v10 = get_local ptr u64, __tuple_18
        v11 = get_local ptr { u64, u64 }, __tuple_1, !259
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !259
        v14 = get_local ptr u64, __tuple_10
        ret u64 v5
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !260 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08

        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !261 {
        }
        v1 = const u64 592, !262
        v2 = add v0, v1, !262
        v3 = call read_3(v2), !263
        v4 = asm(ptr: v3) -> u64 ptr, !264 {
        }
        v5 = get_local ptr { u64, u64 }, __anon_0, !265
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6
        v8 = get_local ptr u64, __anon_00
        v9 = const u64 1
        v10 = get_elem_ptr v5, ptr u64, v9
        v11 = get_local ptr u64, __anon_08
        v12 = get_local ptr u64, __anon_00
        v13 = get_local ptr u64, __anon_08
        v14 = const u64 0
        v15 = get_elem_ptr __ret_value, ptr u64, v14
        store v4 to v15
        v16 = const u64 1
        v17 = get_elem_ptr __ret_value, ptr u64, v16
        v18 = const u64 0, !266
        store v18 to v17
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !267: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !268 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !270
        v2 = load v1, !271
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !272
        v5 = load v4, !273
        v6 = const u64 1
        v7 = mul v6, v5, !274
        v8 = add v2, v7, !275
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !276
        v11 = load v10, !277
        v12 = const u64 32
        v13 = add v11, v12, !278
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = get_local ptr b256, v, !280
        mem_copy_val v15, v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !282
        store v13 to v17, !283
        v18 = get_local ptr b256, v, !285
        mem_copy_val __ret_value, v18
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !267: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !268 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !287
        v1 = const u64 0, !288
        v2 = cmp eq v0 v1, !290
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !291

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !293
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !294
        v6 = const u64 0, !292
        store v6 to v5, !295
        v7 = call abi_decode_5(self), !297
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !298
        store v7 to v10, !299
        v11 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v11, v3
        br abi_decode_29_block5(v11), !49

        abi_decode_29_block1():
        v12 = const u64 1, !300
        v13 = cmp eq v0 v12, !302
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !303

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !304
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !305
        v17 = const u64 1, !292
        store v17 to v16, !306
        v18 = call abi_decode_32(self), !308
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !309
        store v18 to v21, !310
        v22 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v22, v14
        br abi_decode_29_block5(v22), !49

        abi_decode_29_block3():
        v23 = const u64 0, !311
        revert v23, !313

        abi_decode_29_block5(v24: ptr { u64, ( u64 | bool ) }):
        mem_copy_val __ret_value, v24
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !314: ptr { u64, u64 }) -> bool, !315 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !317
        v2 = load v1, !316
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !318
        v5 = load v4, !316
        v6 = const u64 1
        v7 = mul v6, v5, !319
        v8 = add v2, v7, !320
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !321
        v11 = load v10, !316
        v12 = const u64 1
        v13 = add v11, v12, !322
        v14 = asm(ptr: v8, val) -> bool val, !324 {
            lb     val ptr i0, !325
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !327
        store v13 to v16, !328
        ret bool v14
    }

    pub fn decode_35(self !267: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !268 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !329
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !331
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !49
        store v0 to v5, !332
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6, !49
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !333: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !334 {
        local { u64 } __anon_0
        local u64 __anon_00

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !336
        v1 = get_local ptr { u64 }, __anon_0, !337
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = get_local ptr u64, __anon_00
        v5 = get_local ptr u64, __anon_00
        v6 = const u64 0
        v7 = get_elem_ptr __ret_value, ptr u64, v6
        store v0 to v7
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !338 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1
        local u64 __anon_10
        local u64 __anon_116
        local u64 __anon_18

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !339
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        v16 = const u64 0
        v17 = get_elem_ptr v12, ptr u64, v16
        v18 = load v17
        v19 = const u64 1
        v20 = get_elem_ptr v12, ptr u64, v19
        v21 = load v20
        v22 = const u64 2
        v23 = get_elem_ptr v12, ptr u64, v22
        v24 = load v23
        v25 = get_local ptr u64, __anon_10
        v26 = get_local ptr u64, __anon_18
        v27 = get_local ptr u64, __anon_116
        v28 = get_local ptr u64, __anon_10
        v29 = get_local ptr u64, __anon_18
        v30 = get_local ptr u64, __anon_116
        v31 = const u64 0
        v32 = const u64 0
        v33 = get_elem_ptr __ret_value, ptr u64, v31, v32
        store v18 to v33
        v34 = const u64 0
        v35 = const u64 1
        v36 = get_elem_ptr __ret_value, ptr u64, v34, v35
        store v21 to v36
        v37 = const u64 0
        v38 = const u64 2
        v39 = get_elem_ptr __ret_value, ptr u64, v37, v38
        store v24 to v39
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !340 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !83
        v4 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v4, v3
        v5 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        mem_copy_val v6, v5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = ptr_to_int v10 to u64
        v14 = get_local ptr { u64, u64 }, __anon_1
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        mem_copy_val v18, v12
        v19 = asm(s: v14) -> ptr slice s {
        }
        mem_copy_val __ret_value, v19
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !341 {
        local { u64, u64 } __anon_0
        local u64 __anon_00
        local u64 __anon_08
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = get_local ptr { u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v1, ptr u64, v3
        v5 = load v4
        v6 = const u64 1
        v7 = get_elem_ptr v1, ptr u64, v6
        v8 = load v7
        v9 = get_local ptr u64, __anon_00
        v10 = get_local ptr u64, __anon_08
        v11 = const u64 1
        v12 = get_elem_ptr v2, ptr u64, v11, !342
        v13 = get_local ptr u64, __anon_08
        v14 = const u64 1
        v15 = div v8, v14
        ret u64 v15
    }

    pub fn read_53(self !343: ptr { u64, u64 }) -> u8, !344 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !216
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !218
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !220
        v8 = add v2, v7, !220
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !218
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !224
        v14 = asm(ptr: v8, val) -> u8 val, !323 {
            lb     val ptr i0, !325
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !326
        store v13 to v16, !326
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !345: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !346 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !347
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !330
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u8, v4
        store v0 to v5, !330
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !348: ptr { u64, u64 }) -> u64, !349 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !350
        v1 = asm(input: v0) -> u64 input, !352 {
        }
        v2 = call read_53(buffer), !353
        v3 = asm(input: v2) -> u64 input, !355 {
        }
        v4 = call read_53(buffer), !356
        v5 = asm(input: v4) -> u64 input, !358 {
        }
        v6 = call read_53(buffer), !359
        v7 = asm(input: v6) -> u64 input, !361 {
        }
        v8 = const u64 24, !362
        v9 = lsh v1, v8, !363
        v10 = const u64 4294967295, !365
        v11 = and v9, v10, !363
        v12 = const u64 16, !366
        v13 = lsh v3, v12, !367
        v14 = and v13, v10, !367
        v15 = or v11, v14, !368
        v16 = const u64 8, !369
        v17 = lsh v5, v16, !370
        v18 = and v17, v10, !370
        v19 = or v15, v18, !371
        v20 = or v19, v7, !372
        ret u64 v20
    }
}

// IR: [dce] Dead code elimination
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local slice __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local mut { u64, u64 } buffer2
        local mut { u64, u64 } buffer4
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = asm() -> u64 fp, !6 {
        }
        v2 = const u64 584, !8
        v3 = add v1, v2, !9
        v4 = call read_3(v3), !11
        v5 = asm(ptr: v4) -> u64 ptr, !13 {
        }
        v6 = get_local ptr { u64, u64 }, buffer, !15
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 0, !16
        store v11 to v10
        v12 = get_local ptr { u64, u64 }, buffer, !18
        v13 = call abi_decode_5(v12), !21
        v14 = get_local ptr slice, __ret_val
        v15 = call read_bytes_10(v12, v13, v14)
        v16 = get_local ptr slice, data, !23
        mem_copy_val v16, v15
        v17 = get_local ptr slice, data, !25
        v18 = get_local ptr slice, __tmp_arg
        mem_copy_val v18, v17
        v19 = call ptr_11(v18)
        v20 = get_local ptr { u64, u64 }, __anon_000, !27
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !28
        store v19 to v22, !29
        v23 = const u64 1
        v24 = get_elem_ptr v20, ptr u64, v23, !30
        store v13 to v24, !31
        v25 = asm(s: v20) -> ptr slice s {
        }
        v26 = get_local ptr slice, _method_name, !32
        mem_copy_val v26, v25
        v27 = get_local ptr slice, _method_name, !33
        v28 = ptr_to_int v0 to u64, !34
        v29 = get_local ptr { u64, u64 }, __anon_0, !34
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v28 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        v34 = const u64 16
        store v34 to v33, !34
        v35 = get_local ptr slice, __anon_1, !34
        mem_copy_bytes v35, v29, 16
        v36 = get_local ptr slice, __tmp_arg4
        mem_copy_val v36, v27
        v37 = get_local ptr slice, __tmp_arg5
        mem_copy_val v37, v35
        v38 = call eq_13(v36, v37)
        v39 = const unit ()
        cbr v38, block0(), block2(v39), !35

        block0():
        v40 = get_local ptr { u64, u64 }, __ret_val1
        v41 = call from_second_parameter_19(v40)
        v42 = get_local ptr { u64, u64 }, buffer0, !38
        mem_copy_val v42, v41
        v43 = get_local ptr { u64, u64 }, buffer0, !40
        v44 = get_local ptr b256, __ret_val4
        v45 = call decode_24(v43, v44)
        v46 = const u64 1, !41
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v46), !46

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v47: u64):
        v48 = const u64 3, !47
        v49 = cmp lt v47 v48, !49
        cbr v49, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !50

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v50 = get_local ptr b256, __ret_val5
        v51 = call decode_24(v43, v50)
        v52 = const u64 1, !51
        v53 = add v47, v52, !53
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v53), !54

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v54 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v55 = call decode_28(v43, v54)
        v56 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v57 = call decode_35(v43, v56)
        v58 = const u64 1, !55
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v58), !57

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v59: u64):
        v60 = const u64 4, !58
        v61 = cmp lt v59 v60, !60
        cbr v61, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !61

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v62 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v63 = call decode_35(v43, v62)
        v64 = const u64 1, !62
        v65 = add v59, v64, !64
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v65), !65

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v66 = get_local ptr slice, __ret_val0
        v67 = const u64 5, !66
        v68 = call read_bytes_10(v43, v67, v66)
        v69 = get_local ptr slice, data0, !70
        mem_copy_val v69, v68
        v70 = get_local ptr slice, data0, !72
        v71 = get_local ptr slice, __tmp_arg0
        mem_copy_val v71, v70
        v72 = call ptr_11(v71)
        v73 = asm(s: v72) -> ptr string<5> s {
        }
        v74 = call abi_decode_32(v43), !74
        v75 = get_local ptr { u64 }, __ret_val9
        v76 = call abi_decode_39(v43, v75)
        v77 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v78 = call new_42(v77)
        v79 = ptr_to_int v78 to u64, !77
        v80 = int_to_ptr v79 to ptr { { u64, u64, u64 } }, !78
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr { u64, u64, u64 }, v81, !80
        v83 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v83, v82
        v84 = asm(buffer: v83) -> ptr { u64, u64, u64 } buffer {
        }
        v85 = get_local ptr { u64, u64, u64 }, __anon_03, !81
        mem_copy_val v85, v84
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !82
        v88 = load v87, !83
        v89 = int_to_ptr v88 to ptr u8, !84
        v90 = const u64 1
        v91 = get_elem_ptr v85, ptr u64, v90, !85
        v92 = const u64 2
        v93 = get_elem_ptr v85, ptr u64, v92, !86
        v94 = load v93, !87
        v95 = get_local ptr string<6>, __const0, !88
        v96 = ptr_to_int v89 to u64, !89
        v97 = add v96, v94, !90
        v98 = int_to_ptr v97 to ptr u8, !91
        mem_copy_bytes v98, v95, 6, !92
        v99 = const u64 6
        v100 = add v94, v99, !93
        v101 = ptr_to_int v89 to u64, !94
        v102 = get_local ptr { u64, u64, u64 }, __anon_20, !95
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !96
        store v101 to v104, !97
        v105 = const u64 1
        v106 = get_elem_ptr v102, ptr u64, v105, !98
        mem_copy_val v106, v91
        v107 = const u64 2
        v108 = get_elem_ptr v102, ptr u64, v107, !99
        store v100 to v108, !100
        v109 = asm(buffer: v102) -> ptr { u64, u64, u64 } buffer {
        }
        v110 = const u64 0
        v111 = get_elem_ptr v109, ptr u64, v110
        v112 = load v111
        v113 = const u64 1
        v114 = get_elem_ptr v109, ptr u64, v113
        v115 = load v114
        v116 = const u64 2
        v117 = get_elem_ptr v109, ptr u64, v116
        v118 = load v117
        v119 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        v120 = const u64 0
        v121 = const u64 0
        v122 = get_elem_ptr v119, ptr u64, v120, v121
        store v112 to v122
        v123 = const u64 0
        v124 = const u64 1
        v125 = get_elem_ptr v119, ptr u64, v123, v124
        store v115 to v125
        v126 = const u64 0
        v127 = const u64 2
        v128 = get_elem_ptr v119, ptr u64, v126, v127
        store v118 to v128
        v129 = get_local ptr slice, __ret_val15
        v130 = call as_raw_slice_43(v119, v129)
        v131 = get_local ptr slice, result_complex_function, !101
        mem_copy_val v131, v130
        v132 = get_local ptr slice, result_complex_function, !102
        v133 = get_local ptr slice, __tmp_arg1
        mem_copy_val v133, v132
        v134 = call ptr_11(v133)
        v135 = get_local ptr slice, result_complex_function, !103
        v136 = get_local ptr slice, __tmp_arg13
        mem_copy_val v136, v135
        v137 = call len_45(v136)
        retd v134 v137, !104
        v138 = const unit ()
        br block2(v138)

        block2(v139: ()):
        v140 = get_local ptr string<18>, __const1
        v141 = get_local ptr slice, _method_name, !105
        v142 = ptr_to_int v140 to u64, !106
        v143 = get_local ptr { u64, u64 }, __anon_2, !106
        v144 = const u64 0
        v145 = get_elem_ptr v143, ptr u64, v144
        store v142 to v145, !106
        v146 = const u64 1
        v147 = get_elem_ptr v143, ptr u64, v146
        v148 = const u64 18
        store v148 to v147, !106
        v149 = get_local ptr slice, __anon_3, !106
        mem_copy_bytes v149, v143, 16
        v150 = get_local ptr slice, __tmp_arg6
        mem_copy_val v150, v141
        v151 = get_local ptr slice, __tmp_arg7
        mem_copy_val v151, v149
        v152 = call eq_13(v150, v151)
        v153 = const unit ()
        cbr v152, block3(), block5(v153), !107

        block3():
        v154 = get_local ptr { u64, u64 }, __ret_val2
        v155 = call from_second_parameter_19(v154)
        v156 = get_local ptr { u64, u64 }, buffer2, !109
        mem_copy_val v156, v155
        v157 = get_local ptr { u64, u64 }, buffer2, !110
        v158 = call read_53(v157), !115
        v159 = const u64 1, !41
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v159), !116

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v160: u64):
        v161 = const u64 3, !47
        v162 = cmp lt v160 v161, !117
        cbr v162, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !118

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v163 = call read_53(v157), !120
        v164 = const u64 1, !51
        v165 = add v160, v164, !121
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v165), !122

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v166 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v167 = call abi_decode_59(v157, v166)
        v168 = const u64 1, !123
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v168), !125

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v169: u64):
        v170 = const u64 5, !126
        v171 = cmp lt v169 v170, !128
        cbr v171, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !129

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v172 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v173 = call abi_decode_59(v157, v172)
        v174 = const u64 1, !130
        v175 = add v169, v174, !132
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v175), !133

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v176 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v177 = call new_42(v176)
        v178 = ptr_to_int v177 to u64, !135
        v179 = int_to_ptr v178 to ptr { { u64, u64, u64 } }, !136
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr { u64, u64, u64 }, v180, !137
        v182 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v182, v181
        v183 = asm(buffer: v182) -> ptr { u64, u64, u64 } buffer {
        }
        v184 = get_local ptr { u64, u64, u64 }, __anon_05, !138
        mem_copy_val v184, v183
        v185 = const u64 0
        v186 = get_elem_ptr v184, ptr u64, v185, !139
        v187 = load v186, !140
        v188 = int_to_ptr v187 to ptr u8, !141
        v189 = const u64 1
        v190 = get_elem_ptr v184, ptr u64, v189, !142
        v191 = const u64 2
        v192 = get_elem_ptr v184, ptr u64, v191, !143
        v193 = load v192, !144
        v194 = ptr_to_int v188 to u64, !145
        v195 = add v194, v193, !146
        v196 = int_to_ptr v195 to ptr u64, !147
        v197 = const u64 0, !149
        store v197 to v196, !150
        v198 = const u64 8
        v199 = add v193, v198, !151
        v200 = ptr_to_int v188 to u64, !152
        v201 = get_local ptr { u64, u64, u64 }, __anon_11, !153
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !154
        store v200 to v203, !155
        v204 = const u64 1
        v205 = get_elem_ptr v201, ptr u64, v204, !156
        mem_copy_val v205, v190
        v206 = const u64 2
        v207 = get_elem_ptr v201, ptr u64, v206, !157
        store v199 to v207, !158
        v208 = asm(buffer: v201) -> ptr { u64, u64, u64 } buffer {
        }
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr u64, v209
        v211 = load v210
        v212 = const u64 1
        v213 = get_elem_ptr v208, ptr u64, v212
        v214 = load v213
        v215 = const u64 2
        v216 = get_elem_ptr v208, ptr u64, v215
        v217 = load v216
        v218 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        v219 = const u64 0
        v220 = const u64 0
        v221 = get_elem_ptr v218, ptr u64, v219, v220
        store v211 to v221
        v222 = const u64 0
        v223 = const u64 1
        v224 = get_elem_ptr v218, ptr u64, v222, v223
        store v214 to v224
        v225 = const u64 0
        v226 = const u64 2
        v227 = get_elem_ptr v218, ptr u64, v225, v226
        store v217 to v227
        v228 = get_local ptr slice, __ret_val16
        v229 = call as_raw_slice_43(v218, v228)
        v230 = get_local ptr slice, result_take_generic_array, !159
        mem_copy_val v230, v229
        v231 = get_local ptr slice, result_take_generic_array, !160
        v232 = get_local ptr slice, __tmp_arg2
        mem_copy_val v232, v231
        v233 = call ptr_11(v232)
        v234 = get_local ptr slice, result_take_generic_array, !161
        v235 = get_local ptr slice, __tmp_arg14
        mem_copy_val v235, v234
        v236 = call len_45(v235)
        retd v233 v236, !162
        v237 = const unit ()
        br block5(v237)

        block5(v238: ()):
        v239 = get_local ptr string<36>, __const2
        v240 = get_local ptr slice, _method_name, !163
        v241 = ptr_to_int v239 to u64, !164
        v242 = get_local ptr { u64, u64 }, __anon_4, !164
        v243 = const u64 0
        v244 = get_elem_ptr v242, ptr u64, v243
        store v241 to v244, !164
        v245 = const u64 1
        v246 = get_elem_ptr v242, ptr u64, v245
        v247 = const u64 36
        store v247 to v246, !164
        v248 = get_local ptr slice, __anon_5, !164
        mem_copy_bytes v248, v242, 16
        v249 = get_local ptr slice, __tmp_arg8
        mem_copy_val v249, v240
        v250 = get_local ptr slice, __tmp_arg9
        mem_copy_val v250, v248
        v251 = call eq_13(v249, v250)
        v252 = const unit ()
        cbr v251, block6(), block8(v252), !165

        block6():
        v253 = get_local ptr { u64, u64 }, __ret_val3
        v254 = call from_second_parameter_19(v253)
        v255 = get_local ptr { u64, u64 }, buffer4, !167
        mem_copy_val v255, v254
        v256 = get_local ptr { u64, u64 }, buffer4, !168
        v257 = get_local ptr { u64 }, __ret_val10
        v258 = call abi_decode_39(v256, v257)
        v259 = call read_53(v256), !172
        v260 = asm(input: v259) -> u64 input, !176 {
        }
        v261 = call read_53(v256), !178
        v262 = asm(input: v261) -> u64 input, !180 {
        }
        v263 = call abi_decode_74(v256), !182
        v264 = call abi_decode_74(v256), !184
        v265 = get_local ptr { u64 }, __ret_val11
        v266 = call abi_decode_39(v256, v265)
        v267 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v268 = call new_42(v267)
        v269 = const u64 0
        v270 = const u64 0
        v271 = get_elem_ptr v268, ptr u64, v269, v270
        v272 = load v271
        v273 = const u64 0
        v274 = const u64 1
        v275 = get_elem_ptr v268, ptr u64, v273, v274
        v276 = load v275
        v277 = const u64 0
        v278 = const u64 2
        v279 = get_elem_ptr v268, ptr u64, v277, v278
        v280 = load v279
        v281 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        v282 = const u64 0
        v283 = const u64 0
        v284 = get_elem_ptr v281, ptr u64, v282, v283
        store v272 to v284
        v285 = const u64 0
        v286 = const u64 1
        v287 = get_elem_ptr v281, ptr u64, v285, v286
        store v276 to v287
        v288 = const u64 0
        v289 = const u64 2
        v290 = get_elem_ptr v281, ptr u64, v288, v289
        store v280 to v290
        v291 = get_local ptr slice, __ret_val17
        v292 = call as_raw_slice_43(v281, v291)
        v293 = get_local ptr slice, result_take_generic_struct_containing_tuple, !185
        mem_copy_val v293, v292
        v294 = get_local ptr slice, result_take_generic_struct_containing_tuple, !186
        v295 = get_local ptr slice, __tmp_arg3
        mem_copy_val v295, v294
        v296 = call ptr_11(v295)
        v297 = get_local ptr slice, result_take_generic_struct_containing_tuple, !187
        v298 = get_local ptr slice, __tmp_arg15
        mem_copy_val v298, v297
        v299 = call len_45(v298)
        retd v296 v299, !188
        v300 = const unit ()
        br block8(v300)

        block8(v301: ()):
        v302 = const u64 123, !189
        revert v302, !190
    }

    pub fn read_3(self !192: u64) -> u64, !193 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !194 {
            lw     val ptr i0, !195
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !196: ptr { u64, u64 }) -> u64, !197 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !200
        v2 = load v1, !198
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !202
        v5 = load v4, !198
        v6 = const u64 1
        v7 = mul v6, v5, !204
        v8 = add v2, v7, !205
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !206
        v11 = load v10, !198
        v12 = const u64 8
        v13 = add v11, v12, !208
        v14 = asm(ptr: v8, val) -> u64 val, !210 {
            lw     val ptr i0, !211
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !213
        store v13 to v16, !214
        ret u64 v14
    }

    pub fn read_bytes_10(self !215: ptr { u64, u64 }, count !216: u64, __ret_value: ptr slice) -> ptr slice, !217 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !201
        v2 = load v1
        v3 = add v2, count, !218
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !199
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !201
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !219
        v12 = add v6, v11, !219
        v13 = get_local ptr { u64, u64 }, __anon_0, !220
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !220
        store v12 to v15, !220
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !220
        store count to v17, !220
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = get_local ptr slice, slice, !221
        mem_copy_val v19, v18
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !222
        store v3 to v21, !222
        v22 = get_local ptr slice, slice, !223
        mem_copy_val __ret_value, v22
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !225 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !227 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, self
        v1 = call len_16(v0)
        v2 = get_local ptr slice, __tmp_arg0
        mem_copy_val v2, other
        v3 = call len_16(v2)
        v4 = cmp eq v1 v3, !230
        v5 = const bool false, !231
        v6 = cmp eq v4 v5, !233
        v7 = const bool false, !234
        cbr v6, block2(v7), block1(), !228

        block1():
        v8 = get_local ptr slice, __tmp_arg2
        mem_copy_val v8, self
        v9 = call as_ptr_17(v8)
        v10 = get_local ptr slice, __tmp_arg3
        mem_copy_val v10, other
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg1
        mem_copy_val v12, self
        v13 = call len_16(v12)
        v14 = asm(r1: v9, r2: v11, r3: v13, r4) -> bool r4, !235 {
            meq    r4 r1 r2 r3, !236
        }
        br block2(v14)

        block2(v15: bool):
        ret bool v15
    }

    pub fn len_16(self: ptr slice) -> u64, !238 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !239 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !240 {
        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !241 {
        }
        v1 = const u64 592, !242
        v2 = add v0, v1, !242
        v3 = call read_3(v2), !243
        v4 = asm(ptr: v3) -> u64 ptr, !244 {
        }
        v5 = const u64 0
        v6 = get_elem_ptr __ret_value, ptr u64, v5
        store v4 to v6
        v7 = const u64 1
        v8 = get_elem_ptr __ret_value, ptr u64, v7
        v9 = const u64 0, !245
        store v9 to v8
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !246: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !247 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !249
        v2 = load v1, !250
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !251
        v5 = load v4, !252
        v6 = const u64 1
        v7 = mul v6, v5, !253
        v8 = add v2, v7, !254
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !255
        v11 = load v10, !256
        v12 = const u64 32
        v13 = add v11, v12, !257
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = get_local ptr b256, v, !259
        mem_copy_val v15, v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !261
        store v13 to v17, !262
        v18 = get_local ptr b256, v, !264
        mem_copy_val __ret_value, v18
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !246: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !247 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !266
        v1 = const u64 0, !267
        v2 = cmp eq v0 v1, !269
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !270

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !272
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !273
        v6 = const u64 0, !271
        store v6 to v5, !274
        v7 = call abi_decode_5(self), !276
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !277
        store v7 to v10, !278
        v11 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v11, v3
        br abi_decode_29_block5(v11), !45

        abi_decode_29_block1():
        v12 = const u64 1, !279
        v13 = cmp eq v0 v12, !281
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !282

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !283
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !284
        v17 = const u64 1, !271
        store v17 to v16, !285
        v18 = call abi_decode_32(self), !287
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !288
        store v18 to v21, !289
        v22 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v22, v14
        br abi_decode_29_block5(v22), !45

        abi_decode_29_block3():
        v23 = const u64 0, !290
        revert v23, !292

        abi_decode_29_block5(v24: ptr { u64, ( u64 | bool ) }):
        mem_copy_val __ret_value, v24
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !293: ptr { u64, u64 }) -> bool, !294 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !296
        v2 = load v1, !295
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !297
        v5 = load v4, !295
        v6 = const u64 1
        v7 = mul v6, v5, !298
        v8 = add v2, v7, !299
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !300
        v11 = load v10, !295
        v12 = const u64 1
        v13 = add v11, v12, !301
        v14 = asm(ptr: v8, val) -> bool val, !303 {
            lb     val ptr i0, !304
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !306
        store v13 to v16, !307
        ret bool v14
    }

    pub fn decode_35(self !246: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !247 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !308
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !310
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !45
        store v0 to v5, !311
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6, !45
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !312: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !313 {
        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !315
        v1 = const u64 0
        v2 = get_elem_ptr __ret_value, ptr u64, v1
        store v0 to v2
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !316 {
        local { u64, u64, u64 } __anon_0

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr v12, ptr u64, v16
        v18 = load v17
        v19 = const u64 2
        v20 = get_elem_ptr v12, ptr u64, v19
        v21 = load v20
        v22 = const u64 0
        v23 = const u64 0
        v24 = get_elem_ptr __ret_value, ptr u64, v22, v23
        store v15 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr __ret_value, ptr u64, v25, v26
        store v18 to v27
        v28 = const u64 0
        v29 = const u64 2
        v30 = get_elem_ptr __ret_value, ptr u64, v28, v29
        store v21 to v30
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !317 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !79
        v4 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v4, v3
        v5 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        mem_copy_val v6, v5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = ptr_to_int v10 to u64
        v14 = get_local ptr { u64, u64 }, __anon_1
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        mem_copy_val v18, v12
        v19 = asm(s: v14) -> ptr slice s {
        }
        mem_copy_val __ret_value, v19
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !318 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !319: ptr { u64, u64 }) -> u8, !320 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !199
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !201
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !203
        v8 = add v2, v7, !203
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !201
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !207
        v14 = asm(ptr: v8, val) -> u8 val, !302 {
            lb     val ptr i0, !304
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !305
        store v13 to v16, !305
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !321: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !322 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !323
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !309
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u8, v4
        store v0 to v5, !309
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !324: ptr { u64, u64 }) -> u64, !325 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !326
        v1 = asm(input: v0) -> u64 input, !328 {
        }
        v2 = call read_53(buffer), !329
        v3 = asm(input: v2) -> u64 input, !331 {
        }
        v4 = call read_53(buffer), !332
        v5 = asm(input: v4) -> u64 input, !334 {
        }
        v6 = call read_53(buffer), !335
        v7 = asm(input: v6) -> u64 input, !337 {
        }
        v8 = const u64 24, !338
        v9 = lsh v1, v8, !339
        v10 = const u64 4294967295, !341
        v11 = and v9, v10, !339
        v12 = const u64 16, !342
        v13 = lsh v3, v12, !343
        v14 = and v13, v10, !343
        v15 = or v11, v14, !344
        v16 = const u64 8, !345
        v17 = lsh v5, v16, !346
        v18 = and v17, v10, !346
        v19 = or v15, v18, !347
        v20 = or v19, v7, !348
        ret u64 v20
    }
}

// IR: Final
contract {
    pub entry fn __entry() -> (), !1 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_03
        local { u64, u64, u64 } __anon_05
        local slice __anon_1
        local { u64, u64, u64 } __anon_11
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } __anon_20
        local slice __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local string<16> __const = const string<16> "complex_function"
        local string<6> __const0 = const string<6> "fuel42"
        local string<18> __const1 = const string<18> "take_generic_array"
        local string<36> __const2 = const string<36> "take_generic_struct_containing_tuple"
        local slice __ret_val
        local slice __ret_val0
        local { u64, u64 } __ret_val1
        local { u64 } __ret_val10
        local { u64 } __ret_val11
        local { { u64, u64, u64 } } __ret_val12
        local { { u64, u64, u64 } } __ret_val13
        local { { u64, u64, u64 } } __ret_val14
        local slice __ret_val15
        local slice __ret_val16
        local slice __ret_val17
        local { u8, { u64, ( u64 | bool ) } } __ret_val18
        local { u8, { u64, ( u64 | bool ) } } __ret_val19
        local { u64, u64 } __ret_val2
        local { u64, u64 } __ret_val3
        local b256 __ret_val4
        local b256 __ret_val5
        local { u64, ( u64 | bool ) } __ret_val6
        local { u64, { u64, ( u64 | bool ) } } __ret_val7
        local { u64, { u64, ( u64 | bool ) } } __ret_val8
        local { u64 } __ret_val9
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local { { u64, u64, u64 } } __tmp_arg10
        local { { u64, u64, u64 } } __tmp_arg11
        local { { u64, u64, u64 } } __tmp_arg12
        local slice __tmp_arg13
        local slice __tmp_arg14
        local slice __tmp_arg15
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice __tmp_arg4
        local slice __tmp_arg5
        local slice __tmp_arg6
        local slice __tmp_arg7
        local slice __tmp_arg8
        local slice __tmp_arg9
        local slice _method_name
        local mut { u64, u64 } buffer
        local mut { u64, u64 } buffer0
        local mut { u64, u64 } buffer2
        local mut { u64, u64 } buffer4
        local slice data
        local slice data0
        local slice result_complex_function
        local slice result_take_generic_array
        local slice result_take_generic_struct_containing_tuple

        entry():
        v0 = get_local ptr string<16>, __const
        v1 = asm() -> u64 fp, !6 {
        }
        v2 = const u64 584, !8
        v3 = add v1, v2, !9
        v4 = call read_3(v3), !11
        v5 = asm(ptr: v4) -> u64 ptr, !13 {
        }
        v6 = get_local ptr { u64, u64 }, buffer, !15
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 0, !16
        store v11 to v10
        v12 = get_local ptr { u64, u64 }, buffer, !18
        v13 = call abi_decode_5(v12), !21
        v14 = get_local ptr slice, __ret_val
        v15 = call read_bytes_10(v12, v13, v14)
        v16 = get_local ptr slice, data, !23
        mem_copy_val v16, v15
        v17 = get_local ptr slice, data, !25
        v18 = get_local ptr slice, __tmp_arg
        mem_copy_val v18, v17
        v19 = call ptr_11(v18)
        v20 = get_local ptr { u64, u64 }, __anon_000, !27
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !28
        store v19 to v22, !29
        v23 = const u64 1
        v24 = get_elem_ptr v20, ptr u64, v23, !30
        store v13 to v24, !31
        v25 = asm(s: v20) -> ptr slice s {
        }
        v26 = get_local ptr slice, _method_name, !32
        mem_copy_val v26, v25
        v27 = get_local ptr slice, _method_name, !33
        v28 = ptr_to_int v0 to u64, !34
        v29 = get_local ptr { u64, u64 }, __anon_0, !34
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v28 to v31, !34
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        v34 = const u64 16
        store v34 to v33, !34
        v35 = get_local ptr slice, __anon_1, !34
        mem_copy_bytes v35, v29, 16
        v36 = get_local ptr slice, __tmp_arg4
        mem_copy_val v36, v27
        v37 = get_local ptr slice, __tmp_arg5
        mem_copy_val v37, v35
        v38 = call eq_13(v36, v37)
        v39 = const unit ()
        cbr v38, block0(), block2(v39), !35

        block0():
        v40 = get_local ptr { u64, u64 }, __ret_val1
        v41 = call from_second_parameter_19(v40)
        v42 = get_local ptr { u64, u64 }, buffer0, !38
        mem_copy_val v42, v41
        v43 = get_local ptr { u64, u64 }, buffer0, !40
        v44 = get_local ptr b256, __ret_val4
        v45 = call decode_24(v43, v44)
        v46 = const u64 1, !41
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v46), !46

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v47: u64):
        v48 = const u64 3, !47
        v49 = cmp lt v47 v48, !49
        cbr v49, decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body(), decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while(), !50

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while_body():
        v50 = get_local ptr b256, __ret_val5
        v51 = call decode_24(v43, v50)
        v52 = const u64 1, !51
        v53 = add v47, v52, !53
        br decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_while(v53), !54

        decode_second_param_18_abi_decode_20_abi_decode_21_decode_22_abi_decode_23_end_while():
        v54 = get_local ptr { u64, ( u64 | bool ) }, __ret_val6
        v55 = call decode_28(v43, v54)
        v56 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val7
        v57 = call decode_35(v43, v56)
        v58 = const u64 1, !55
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v58), !57

        decode_second_param_18_abi_decode_20_abi_decode_34_while(v59: u64):
        v60 = const u64 4, !58
        v61 = cmp lt v59 v60, !60
        cbr v61, decode_second_param_18_abi_decode_20_abi_decode_34_while_body(), decode_second_param_18_abi_decode_20_abi_decode_34_end_while(), !61

        decode_second_param_18_abi_decode_20_abi_decode_34_while_body():
        v62 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __ret_val8
        v63 = call decode_35(v43, v62)
        v64 = const u64 1, !62
        v65 = add v59, v64, !64
        br decode_second_param_18_abi_decode_20_abi_decode_34_while(v65), !65

        decode_second_param_18_abi_decode_20_abi_decode_34_end_while():
        v66 = get_local ptr slice, __ret_val0
        v67 = const u64 5, !66
        v68 = call read_bytes_10(v43, v67, v66)
        v69 = get_local ptr slice, data0, !70
        mem_copy_val v69, v68
        v70 = get_local ptr slice, data0, !72
        v71 = get_local ptr slice, __tmp_arg0
        mem_copy_val v71, v70
        v72 = call ptr_11(v71)
        v73 = asm(s: v72) -> ptr string<5> s {
        }
        v74 = call abi_decode_32(v43), !74
        v75 = get_local ptr { u64 }, __ret_val9
        v76 = call abi_decode_39(v43, v75)
        v77 = get_local ptr { { u64, u64, u64 } }, __ret_val12
        v78 = call new_42(v77)
        v79 = ptr_to_int v78 to u64, !77
        v80 = int_to_ptr v79 to ptr { { u64, u64, u64 } }, !78
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr { u64, u64, u64 }, v81, !80
        v83 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v83, v82
        v84 = asm(buffer: v83) -> ptr { u64, u64, u64 } buffer {
        }
        v85 = get_local ptr { u64, u64, u64 }, __anon_03, !81
        mem_copy_val v85, v84
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !82
        v88 = load v87, !83
        v89 = int_to_ptr v88 to ptr u8, !84
        v90 = const u64 1
        v91 = get_elem_ptr v85, ptr u64, v90, !85
        v92 = const u64 2
        v93 = get_elem_ptr v85, ptr u64, v92, !86
        v94 = load v93, !87
        v95 = get_local ptr string<6>, __const0, !88
        v96 = ptr_to_int v89 to u64, !89
        v97 = add v96, v94, !90
        v98 = int_to_ptr v97 to ptr u8, !91
        mem_copy_bytes v98, v95, 6, !92
        v99 = const u64 6
        v100 = add v94, v99, !93
        v101 = ptr_to_int v89 to u64, !94
        v102 = get_local ptr { u64, u64, u64 }, __anon_20, !95
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !96
        store v101 to v104, !97
        v105 = const u64 1
        v106 = get_elem_ptr v102, ptr u64, v105, !98
        mem_copy_val v106, v91
        v107 = const u64 2
        v108 = get_elem_ptr v102, ptr u64, v107, !99
        store v100 to v108, !100
        v109 = asm(buffer: v102) -> ptr { u64, u64, u64 } buffer {
        }
        v110 = const u64 0
        v111 = get_elem_ptr v109, ptr u64, v110
        v112 = load v111
        v113 = const u64 1
        v114 = get_elem_ptr v109, ptr u64, v113
        v115 = load v114
        v116 = const u64 2
        v117 = get_elem_ptr v109, ptr u64, v116
        v118 = load v117
        v119 = get_local ptr { { u64, u64, u64 } }, __tmp_arg10
        v120 = const u64 0
        v121 = const u64 0
        v122 = get_elem_ptr v119, ptr u64, v120, v121
        store v112 to v122
        v123 = const u64 0
        v124 = const u64 1
        v125 = get_elem_ptr v119, ptr u64, v123, v124
        store v115 to v125
        v126 = const u64 0
        v127 = const u64 2
        v128 = get_elem_ptr v119, ptr u64, v126, v127
        store v118 to v128
        v129 = get_local ptr slice, __ret_val15
        v130 = call as_raw_slice_43(v119, v129)
        v131 = get_local ptr slice, result_complex_function, !101
        mem_copy_val v131, v130
        v132 = get_local ptr slice, result_complex_function, !102
        v133 = get_local ptr slice, __tmp_arg1
        mem_copy_val v133, v132
        v134 = call ptr_11(v133)
        v135 = get_local ptr slice, result_complex_function, !103
        v136 = get_local ptr slice, __tmp_arg13
        mem_copy_val v136, v135
        v137 = call len_45(v136)
        retd v134 v137, !104
        v138 = const unit ()
        br block2(v138)

        block2(v139: ()):
        v140 = get_local ptr string<18>, __const1
        v141 = get_local ptr slice, _method_name, !105
        v142 = ptr_to_int v140 to u64, !106
        v143 = get_local ptr { u64, u64 }, __anon_2, !106
        v144 = const u64 0
        v145 = get_elem_ptr v143, ptr u64, v144
        store v142 to v145, !106
        v146 = const u64 1
        v147 = get_elem_ptr v143, ptr u64, v146
        v148 = const u64 18
        store v148 to v147, !106
        v149 = get_local ptr slice, __anon_3, !106
        mem_copy_bytes v149, v143, 16
        v150 = get_local ptr slice, __tmp_arg6
        mem_copy_val v150, v141
        v151 = get_local ptr slice, __tmp_arg7
        mem_copy_val v151, v149
        v152 = call eq_13(v150, v151)
        v153 = const unit ()
        cbr v152, block3(), block5(v153), !107

        block3():
        v154 = get_local ptr { u64, u64 }, __ret_val2
        v155 = call from_second_parameter_19(v154)
        v156 = get_local ptr { u64, u64 }, buffer2, !109
        mem_copy_val v156, v155
        v157 = get_local ptr { u64, u64 }, buffer2, !110
        v158 = call read_53(v157), !115
        v159 = const u64 1, !41
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v159), !116

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v160: u64):
        v161 = const u64 3, !47
        v162 = cmp lt v160 v161, !117
        cbr v162, decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while(), !118

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while_body():
        v163 = call read_53(v157), !120
        v164 = const u64 1, !51
        v165 = add v160, v164, !121
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_while(v165), !122

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_49_abi_decode_50_end_while():
        v166 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val18
        v167 = call abi_decode_59(v157, v166)
        v168 = const u64 1, !123
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v168), !125

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v169: u64):
        v170 = const u64 5, !126
        v171 = cmp lt v169 v170, !128
        cbr v171, decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body(), decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while(), !129

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while_body():
        v172 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __ret_val19
        v173 = call abi_decode_59(v157, v172)
        v174 = const u64 1, !130
        v175 = add v169, v174, !132
        br decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_while(v175), !133

        decode_second_param_46_abi_decode_47_abi_decode_48_decode_54_abi_decode_55_end_while():
        v176 = get_local ptr { { u64, u64, u64 } }, __ret_val13
        v177 = call new_42(v176)
        v178 = ptr_to_int v177 to u64, !135
        v179 = int_to_ptr v178 to ptr { { u64, u64, u64 } }, !136
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr { u64, u64, u64 }, v180, !137
        v182 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v182, v181
        v183 = asm(buffer: v182) -> ptr { u64, u64, u64 } buffer {
        }
        v184 = get_local ptr { u64, u64, u64 }, __anon_05, !138
        mem_copy_val v184, v183
        v185 = const u64 0
        v186 = get_elem_ptr v184, ptr u64, v185, !139
        v187 = load v186, !140
        v188 = int_to_ptr v187 to ptr u8, !141
        v189 = const u64 1
        v190 = get_elem_ptr v184, ptr u64, v189, !142
        v191 = const u64 2
        v192 = get_elem_ptr v184, ptr u64, v191, !143
        v193 = load v192, !144
        v194 = ptr_to_int v188 to u64, !145
        v195 = add v194, v193, !146
        v196 = int_to_ptr v195 to ptr u64, !147
        v197 = const u64 0, !149
        store v197 to v196, !150
        v198 = const u64 8
        v199 = add v193, v198, !151
        v200 = ptr_to_int v188 to u64, !152
        v201 = get_local ptr { u64, u64, u64 }, __anon_11, !153
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !154
        store v200 to v203, !155
        v204 = const u64 1
        v205 = get_elem_ptr v201, ptr u64, v204, !156
        mem_copy_val v205, v190
        v206 = const u64 2
        v207 = get_elem_ptr v201, ptr u64, v206, !157
        store v199 to v207, !158
        v208 = asm(buffer: v201) -> ptr { u64, u64, u64 } buffer {
        }
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr u64, v209
        v211 = load v210
        v212 = const u64 1
        v213 = get_elem_ptr v208, ptr u64, v212
        v214 = load v213
        v215 = const u64 2
        v216 = get_elem_ptr v208, ptr u64, v215
        v217 = load v216
        v218 = get_local ptr { { u64, u64, u64 } }, __tmp_arg11
        v219 = const u64 0
        v220 = const u64 0
        v221 = get_elem_ptr v218, ptr u64, v219, v220
        store v211 to v221
        v222 = const u64 0
        v223 = const u64 1
        v224 = get_elem_ptr v218, ptr u64, v222, v223
        store v214 to v224
        v225 = const u64 0
        v226 = const u64 2
        v227 = get_elem_ptr v218, ptr u64, v225, v226
        store v217 to v227
        v228 = get_local ptr slice, __ret_val16
        v229 = call as_raw_slice_43(v218, v228)
        v230 = get_local ptr slice, result_take_generic_array, !159
        mem_copy_val v230, v229
        v231 = get_local ptr slice, result_take_generic_array, !160
        v232 = get_local ptr slice, __tmp_arg2
        mem_copy_val v232, v231
        v233 = call ptr_11(v232)
        v234 = get_local ptr slice, result_take_generic_array, !161
        v235 = get_local ptr slice, __tmp_arg14
        mem_copy_val v235, v234
        v236 = call len_45(v235)
        retd v233 v236, !162
        v237 = const unit ()
        br block5(v237)

        block5(v238: ()):
        v239 = get_local ptr string<36>, __const2
        v240 = get_local ptr slice, _method_name, !163
        v241 = ptr_to_int v239 to u64, !164
        v242 = get_local ptr { u64, u64 }, __anon_4, !164
        v243 = const u64 0
        v244 = get_elem_ptr v242, ptr u64, v243
        store v241 to v244, !164
        v245 = const u64 1
        v246 = get_elem_ptr v242, ptr u64, v245
        v247 = const u64 36
        store v247 to v246, !164
        v248 = get_local ptr slice, __anon_5, !164
        mem_copy_bytes v248, v242, 16
        v249 = get_local ptr slice, __tmp_arg8
        mem_copy_val v249, v240
        v250 = get_local ptr slice, __tmp_arg9
        mem_copy_val v250, v248
        v251 = call eq_13(v249, v250)
        v252 = const unit ()
        cbr v251, block6(), block8(v252), !165

        block6():
        v253 = get_local ptr { u64, u64 }, __ret_val3
        v254 = call from_second_parameter_19(v253)
        v255 = get_local ptr { u64, u64 }, buffer4, !167
        mem_copy_val v255, v254
        v256 = get_local ptr { u64, u64 }, buffer4, !168
        v257 = get_local ptr { u64 }, __ret_val10
        v258 = call abi_decode_39(v256, v257)
        v259 = call read_53(v256), !172
        v260 = asm(input: v259) -> u64 input, !176 {
        }
        v261 = call read_53(v256), !178
        v262 = asm(input: v261) -> u64 input, !180 {
        }
        v263 = call abi_decode_74(v256), !182
        v264 = call abi_decode_74(v256), !184
        v265 = get_local ptr { u64 }, __ret_val11
        v266 = call abi_decode_39(v256, v265)
        v267 = get_local ptr { { u64, u64, u64 } }, __ret_val14
        v268 = call new_42(v267)
        v269 = const u64 0
        v270 = const u64 0
        v271 = get_elem_ptr v268, ptr u64, v269, v270
        v272 = load v271
        v273 = const u64 0
        v274 = const u64 1
        v275 = get_elem_ptr v268, ptr u64, v273, v274
        v276 = load v275
        v277 = const u64 0
        v278 = const u64 2
        v279 = get_elem_ptr v268, ptr u64, v277, v278
        v280 = load v279
        v281 = get_local ptr { { u64, u64, u64 } }, __tmp_arg12
        v282 = const u64 0
        v283 = const u64 0
        v284 = get_elem_ptr v281, ptr u64, v282, v283
        store v272 to v284
        v285 = const u64 0
        v286 = const u64 1
        v287 = get_elem_ptr v281, ptr u64, v285, v286
        store v276 to v287
        v288 = const u64 0
        v289 = const u64 2
        v290 = get_elem_ptr v281, ptr u64, v288, v289
        store v280 to v290
        v291 = get_local ptr slice, __ret_val17
        v292 = call as_raw_slice_43(v281, v291)
        v293 = get_local ptr slice, result_take_generic_struct_containing_tuple, !185
        mem_copy_val v293, v292
        v294 = get_local ptr slice, result_take_generic_struct_containing_tuple, !186
        v295 = get_local ptr slice, __tmp_arg3
        mem_copy_val v295, v294
        v296 = call ptr_11(v295)
        v297 = get_local ptr slice, result_take_generic_struct_containing_tuple, !187
        v298 = get_local ptr slice, __tmp_arg15
        mem_copy_val v298, v297
        v299 = call len_45(v298)
        retd v296 v299, !188
        v300 = const unit ()
        br block8(v300)

        block8(v301: ()):
        v302 = const u64 123, !189
        revert v302, !190
    }

    pub fn read_3(self !192: u64) -> u64, !193 {
        entry(self: u64):
        v0 = asm(ptr: self, val) -> u64 val, !194 {
            lw     val ptr i0, !195
        }
        ret u64 v0
    }

    pub fn abi_decode_5(buffer !196: ptr { u64, u64 }) -> u64, !197 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !200
        v2 = load v1, !198
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !202
        v5 = load v4, !198
        v6 = const u64 1
        v7 = mul v6, v5, !204
        v8 = add v2, v7, !205
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !206
        v11 = load v10, !198
        v12 = const u64 8
        v13 = add v11, v12, !208
        v14 = asm(ptr: v8, val) -> u64 val, !210 {
            lw     val ptr i0, !211
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !213
        store v13 to v16, !214
        ret u64 v14
    }

    pub fn read_bytes_10(self !215: ptr { u64, u64 }, count !216: u64, __ret_value: ptr slice) -> ptr slice, !217 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64, u64 }, count: u64, __ret_value: ptr slice):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !201
        v2 = load v1
        v3 = add v2, count, !218
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !199
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !201
        v9 = load v8
        v10 = const u64 1
        v11 = mul v10, v9, !219
        v12 = add v6, v11, !219
        v13 = get_local ptr { u64, u64 }, __anon_0, !220
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !220
        store v12 to v15, !220
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16, !220
        store count to v17, !220
        v18 = asm(ptr: v13) -> ptr slice ptr {
        }
        v19 = get_local ptr slice, slice, !221
        mem_copy_val v19, v18
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !222
        store v3 to v21, !222
        v22 = get_local ptr slice, slice, !223
        mem_copy_val __ret_value, v22
        ret ptr slice __ret_value
    }

    pub fn ptr_11(self: ptr slice) -> u64, !225 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn eq_13(self: ptr slice, other: ptr slice) -> bool, !227 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3

        entry(self: ptr slice, other: ptr slice):
        v0 = get_local ptr slice, __tmp_arg
        mem_copy_val v0, self
        v1 = call len_16(v0)
        v2 = get_local ptr slice, __tmp_arg0
        mem_copy_val v2, other
        v3 = call len_16(v2)
        v4 = cmp eq v1 v3, !230
        v5 = const bool false, !231
        v6 = cmp eq v4 v5, !233
        v7 = const bool false, !234
        cbr v6, block2(v7), block1(), !228

        block1():
        v8 = get_local ptr slice, __tmp_arg2
        mem_copy_val v8, self
        v9 = call as_ptr_17(v8)
        v10 = get_local ptr slice, __tmp_arg3
        mem_copy_val v10, other
        v11 = call as_ptr_17(v10)
        v12 = get_local ptr slice, __tmp_arg1
        mem_copy_val v12, self
        v13 = call len_16(v12)
        v14 = asm(r1: v9, r2: v11, r3: v13, r4) -> bool r4, !235 {
            meq    r4 r1 r2 r3, !236
        }
        br block2(v14)

        block2(v15: bool):
        ret bool v15
    }

    pub fn len_16(self: ptr slice) -> u64, !238 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn as_ptr_17(self: ptr slice) -> u64, !239 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(s: v0) -> ptr { u64, u64 } s {
        }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        ret u64 v4
    }

    pub fn from_second_parameter_19(__ret_value: ptr { u64, u64 }) -> ptr { u64, u64 }, !240 {
        entry(__ret_value: ptr { u64, u64 }):
        v0 = asm() -> u64 fp, !241 {
        }
        v1 = const u64 592, !242
        v2 = add v0, v1, !242
        v3 = call read_3(v2), !243
        v4 = asm(ptr: v3) -> u64 ptr, !244 {
        }
        v5 = const u64 0
        v6 = get_elem_ptr __ret_value, ptr u64, v5
        store v4 to v6
        v7 = const u64 1
        v8 = get_elem_ptr __ret_value, ptr u64, v7
        v9 = const u64 0, !245
        store v9 to v8
        ret ptr { u64, u64 } __ret_value
    }

    pub fn decode_24(self !246: ptr { u64, u64 }, __ret_value: ptr b256) -> ptr b256, !247 {
        local b256 v

        entry(self: ptr { u64, u64 }, __ret_value: ptr b256):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !249
        v2 = load v1, !250
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !251
        v5 = load v4, !252
        v6 = const u64 1
        v7 = mul v6, v5, !253
        v8 = add v2, v7, !254
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !255
        v11 = load v10, !256
        v12 = const u64 32
        v13 = add v11, v12, !257
        v14 = asm(ptr: v8) -> ptr b256 ptr {
        }
        v15 = get_local ptr b256, v, !259
        mem_copy_val v15, v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !261
        store v13 to v17, !262
        v18 = get_local ptr b256, v, !264
        mem_copy_val __ret_value, v18
        ret ptr b256 __ret_value
    }

    pub fn decode_28(self !246: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }) -> ptr { u64, ( u64 | bool ) }, !247 {
        local { u64, ( u64 | bool ) } __anon_0
        local { u64, ( u64 | bool ) } __anon_1
        local { u64, ( u64 | bool ) } __tmp_block_arg

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, ( u64 | bool ) }):
        v0 = call abi_decode_5(self), !266
        v1 = const u64 0, !267
        v2 = cmp eq v0 v1, !269
        cbr v2, abi_decode_29_block0(), abi_decode_29_block1(), !270

        abi_decode_29_block0():
        v3 = get_local ptr { u64, ( u64 | bool ) }, __anon_0, !272
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !273
        v6 = const u64 0, !271
        store v6 to v5, !274
        v7 = call abi_decode_5(self), !276
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr u64, v8, v9, !277
        store v7 to v10, !278
        v11 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v11, v3
        br abi_decode_29_block5(v11), !45

        abi_decode_29_block1():
        v12 = const u64 1, !279
        v13 = cmp eq v0 v12, !281
        cbr v13, abi_decode_29_block2(), abi_decode_29_block3(), !282

        abi_decode_29_block2():
        v14 = get_local ptr { u64, ( u64 | bool ) }, __anon_1, !283
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !284
        v17 = const u64 1, !271
        store v17 to v16, !285
        v18 = call abi_decode_32(self), !287
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v14, ptr bool, v19, v20, !288
        store v18 to v21, !289
        v22 = get_local ptr { u64, ( u64 | bool ) }, __tmp_block_arg
        mem_copy_val v22, v14
        br abi_decode_29_block5(v22), !45

        abi_decode_29_block3():
        v23 = const u64 0, !290
        revert v23, !292

        abi_decode_29_block5(v24: ptr { u64, ( u64 | bool ) }):
        mem_copy_val __ret_value, v24
        ret ptr { u64, ( u64 | bool ) } __ret_value
    }

    pub fn abi_decode_32(buffer !293: ptr { u64, u64 }) -> bool, !294 {
        entry(buffer: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr buffer, ptr u64, v0, !296
        v2 = load v1, !295
        v3 = const u64 1
        v4 = get_elem_ptr buffer, ptr u64, v3, !297
        v5 = load v4, !295
        v6 = const u64 1
        v7 = mul v6, v5, !298
        v8 = add v2, v7, !299
        v9 = const u64 1
        v10 = get_elem_ptr buffer, ptr u64, v9, !300
        v11 = load v10, !295
        v12 = const u64 1
        v13 = add v11, v12, !301
        v14 = asm(ptr: v8, val) -> bool val, !303 {
            lb     val ptr i0, !304
        }
        v15 = const u64 1
        v16 = get_elem_ptr buffer, ptr u64, v15, !306
        store v13 to v16, !307
        ret bool v14
    }

    pub fn decode_35(self !246: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }) -> ptr { u64, { u64, ( u64 | bool ) } }, !247 {
        local { u64, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(self: ptr { u64, u64 }, __ret_value: ptr { u64, { u64, ( u64 | bool ) } }):
        v0 = call abi_decode_5(self), !308
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(self, v1)
        v3 = get_local ptr { u64, { u64, ( u64 | bool ) } }, __anon_0, !310
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !45
        store v0 to v5, !311
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6, !45
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u64, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_39(buffer !312: ptr { u64, u64 }, __ret_value: ptr { u64 }) -> ptr { u64 }, !313 {
        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u64 }):
        v0 = call abi_decode_5(buffer), !315
        v1 = const u64 0
        v2 = get_elem_ptr __ret_value, ptr u64, v1
        store v0 to v2
        ret ptr { u64 } __ret_value
    }

    pub fn new_42(__ret_value: ptr { { u64, u64, u64 } }) -> ptr { { u64, u64, u64 } }, !316 {
        local { u64, u64, u64 } __anon_0

        entry(__ret_value: ptr { { u64, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr v12, ptr u64, v16
        v18 = load v17
        v19 = const u64 2
        v20 = get_elem_ptr v12, ptr u64, v19
        v21 = load v20
        v22 = const u64 0
        v23 = const u64 0
        v24 = get_elem_ptr __ret_value, ptr u64, v22, v23
        store v15 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr __ret_value, ptr u64, v25, v26
        store v18 to v27
        v28 = const u64 0
        v29 = const u64 2
        v30 = get_elem_ptr __ret_value, ptr u64, v28, v29
        store v21 to v30
        ret ptr { { u64, u64, u64 } } __ret_value
    }

    pub fn as_raw_slice_43(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice) -> ptr slice, !317 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64, u64 } __asm_arg

        entry(self: ptr { { u64, u64, u64 } }, __ret_value: ptr slice):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !79
        v4 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v4, v3
        v5 = asm(buffer: v4) -> ptr { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        mem_copy_val v6, v5
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = ptr_to_int v10 to u64
        v14 = get_local ptr { u64, u64 }, __anon_1
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        mem_copy_val v18, v12
        v19 = asm(s: v14) -> ptr slice s {
        }
        mem_copy_val __ret_value, v19
        ret ptr slice __ret_value
    }

    pub fn len_45(self: ptr slice) -> u64, !318 {
        local slice __asm_arg

        entry(self: ptr slice):
        v0 = get_local ptr slice, __asm_arg
        mem_copy_val v0, self
        v1 = asm(ptr: v0) -> ptr { u64, u64 } ptr {
        }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn read_53(self !319: ptr { u64, u64 }) -> u8, !320 {
        entry(self: ptr { u64, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !199
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr self, ptr u64, v3, !201
        v5 = load v4
        v6 = const u64 1
        v7 = mul v6, v5, !203
        v8 = add v2, v7, !203
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !201
        v11 = load v10
        v12 = const u64 1
        v13 = add v11, v12, !207
        v14 = asm(ptr: v8, val) -> u8 val, !302 {
            lb     val ptr i0, !304
        }
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !305
        store v13 to v16, !305
        ret u8 v14
    }

    pub fn abi_decode_59(buffer !321: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }) -> ptr { u8, { u64, ( u64 | bool ) } }, !322 {
        local { u8, { u64, ( u64 | bool ) } } __anon_0
        local { u64, ( u64 | bool ) } __ret_val

        entry(buffer: ptr { u64, u64 }, __ret_value: ptr { u8, { u64, ( u64 | bool ) } }):
        v0 = call read_53(buffer), !323
        v1 = get_local ptr { u64, ( u64 | bool ) }, __ret_val
        v2 = call decode_28(buffer, v1)
        v3 = get_local ptr { u8, { u64, ( u64 | bool ) } }, __anon_0, !309
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u8, v4
        store v0 to v5, !309
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64, ( u64 | bool ) }, v6
        mem_copy_val v7, v2
        mem_copy_val __ret_value, v3
        ret ptr { u8, { u64, ( u64 | bool ) } } __ret_value
    }

    pub fn abi_decode_74(buffer !324: ptr { u64, u64 }) -> u64, !325 {
        entry(buffer: ptr { u64, u64 }):
        v0 = call read_53(buffer), !326
        v1 = asm(input: v0) -> u64 input, !328 {
        }
        v2 = call read_53(buffer), !329
        v3 = asm(input: v2) -> u64 input, !331 {
        }
        v4 = call read_53(buffer), !332
        v5 = asm(input: v4) -> u64 input, !334 {
        }
        v6 = call read_53(buffer), !335
        v7 = asm(input: v6) -> u64 input, !337 {
        }
        v8 = const u64 24, !338
        v9 = lsh v1, v8, !339
        v10 = const u64 4294967295, !341
        v11 = and v9, v10, !339
        v12 = const u64 16, !342
        v13 = lsh v3, v12, !343
        v14 = and v13, v10, !343
        v15 = or v11, v14, !344
        v16 = const u64 8, !345
        v17 = lsh v5, v16, !346
        v18 = and v17, v10, !346
        v19 = or v15, v18, !347
        v20 = or v19, v7, !348
        ret u64 v20
    }
}

  [1;32mFinished[0m release [optimized + fuel] target(s) in 2.35s
      Bytecode size: 4128 bytes
