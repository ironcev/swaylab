// IR: Initial
library {
}

// IR: Final
library {
}

// IR: Initial
script {
    pub entry fn __entry() -> slice, !1 {
        local bool result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr bool, result, !3
        store v0 to v1, !3
        v2 = get_local ptr bool, result, !4
        v3 = load v2
        v4 = call encode_38(v3), !5
        ret slice v4
    }

    fn main_0() -> bool, !7 {
        local [u64; 3] __anon_0
        local { bool, u64 } __anon_1
        local { bool, u64, b256, u8 } __anon_2
        local u64 a
        local u64 b
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = call min_1(), !8
        v1 = get_local ptr b256, zero, !9
        store v0 to v1, !9
        v2 = get_local ptr u64, a, !10
        v3 = const u64 1, !11
        store v3 to v2, !10
        v4 = get_local ptr u64, b, !12
        v5 = const u64 1, !13
        store v5 to v4, !12
        v6 = get_local ptr u64, c, !14
        v7 = const u64 1, !15
        store v7 to v6, !14
        v8 = get_local ptr u8, d, !16
        v9 = const u8 1, !17
        store v9 to v8, !16
        v10 = get_local ptr b256, zero, !18
        v11 = load v10
        v12 = get_local ptr b256, e, !19
        store v11 to v12, !19
        v13 = get_local ptr string<11>, f, !20
        v14 = const string<11> "Fuel rocks!"
        store v14 to v13, !20
        v15 = get_local ptr [u64; 3], __anon_0, !21
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        v18 = const u64 42, !22
        store v18 to v17, !21
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr u64, v19
        v21 = const u64 42, !22
        store v21 to v20, !21
        v22 = const u64 2
        v23 = get_elem_ptr v15, ptr u64, v22
        v24 = const u64 42, !22
        store v24 to v23, !21
        v25 = load v15
        v26 = get_local ptr [u64; 3], test_array, !23
        store v25 to v26, !23
        v27 = get_local ptr { bool, u64 }, __anon_1, !24
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr bool, v28
        v30 = const bool false, !25
        store v30 to v29, !24
        v31 = const u64 1
        v32 = get_elem_ptr v27, ptr u64, v31
        v33 = const u64 11, !26
        store v33 to v32, !24
        v34 = load v27
        v35 = get_local ptr { bool, u64 }, test_struct, !27
        store v34 to v35, !27
        v36 = const u64 42, !28
        v37 = call is_ref_type_5(v36), !29
        v38 = call not_3(v37), !30
        v39 = call assert_2(v38), !31
        v40 = const u64 42, !32
        v41 = call is_ref_type_7(v40), !33
        v42 = call not_3(v41), !34
        v43 = call assert_2(v42), !35
        v44 = const u64 42, !36
        v45 = call is_ref_type_9(v44), !37
        v46 = call not_3(v45), !38
        v47 = call assert_2(v46), !39
        v48 = const u8 11, !40
        v49 = call is_ref_type_11(v48), !41
        v50 = call not_3(v49), !42
        v51 = call assert_2(v50), !43
        v52 = get_local ptr [u64; 3], test_array, !44
        v53 = load v52
        v54 = call is_ref_type_13(v53), !45
        v55 = call assert_2(v54), !46
        v56 = get_local ptr { bool, u64 }, test_struct, !47
        v57 = load v56
        v58 = call is_ref_type_15(v57), !48
        v59 = call assert_2(v58), !49
        v60 = get_local ptr b256, zero, !50
        v61 = load v60
        v62 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !51
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr bool, v63, !51
        v65 = const bool true, !52
        store v65 to v64, !51
        v66 = const u64 1
        v67 = get_elem_ptr v62, ptr u64, v66, !51
        v68 = const u64 11, !53
        store v68 to v67, !51
        v69 = const u64 2
        v70 = get_elem_ptr v62, ptr b256, v69, !51
        store v61 to v70, !51
        v71 = const u64 3
        v72 = get_elem_ptr v62, ptr u8, v71, !51
        v73 = const u8 255, !54
        store v73 to v72, !51
        v74 = load v62
        v75 = call is_ref_type_17(v74), !55
        v76 = call assert_2(v75), !56
        v77 = get_local ptr b256, e, !57
        v78 = load v77
        v79 = call is_ref_type_19(v78), !58
        v80 = call assert_2(v79), !59
        v81 = get_local ptr string<11>, f, !60
        v82 = load v81
        v83 = call is_ref_type_21(v82), !61
        v84 = call assert_2(v83), !62
        v85 = call size_of_24(), !63
        v86 = const u64 8, !64
        v87 = call eq_23(v85, v86), !65
        v88 = call assert_2(v87), !66
        v89 = call size_of_25(), !67
        v90 = const u64 8, !68
        v91 = call eq_23(v89, v90), !69
        v92 = call assert_2(v91), !70
        v93 = call size_of_26(), !71
        v94 = const u64 8, !72
        v95 = call eq_23(v93, v94), !73
        v96 = call assert_2(v95), !74
        v97 = call size_of_27(), !75
        v98 = const u64 1, !76
        v99 = call eq_23(v97, v98), !77
        v100 = call assert_2(v99), !78
        v101 = call size_of_28(), !79
        v102 = const u64 32, !80
        v103 = call eq_23(v101, v102), !81
        v104 = call assert_2(v103), !82
        v105 = call size_of_29(), !83
        v106 = const u64 16, !84
        v107 = call eq_23(v105, v106), !85
        v108 = call assert_2(v107), !86
        v109 = call size_of_30(), !87
        v110 = const u64 24, !88
        v111 = call eq_23(v109, v110), !89
        v112 = call assert_2(v111), !90
        v113 = call size_of_31(), !91
        v114 = const u64 16, !92
        v115 = call eq_23(v113, v114), !93
        v116 = call assert_2(v115), !94
        v117 = get_local ptr u64, a, !95
        v118 = load v117
        v119 = call size_of_val_32(v118), !96
        v120 = const u64 8, !97
        v121 = call eq_23(v119, v120), !98
        v122 = call assert_2(v121), !99
        v123 = get_local ptr u64, b, !100
        v124 = load v123
        v125 = call size_of_val_33(v124), !101
        v126 = const u64 8, !102
        v127 = call eq_23(v125, v126), !103
        v128 = call assert_2(v127), !104
        v129 = get_local ptr u64, c, !105
        v130 = load v129
        v131 = call size_of_val_34(v130), !106
        v132 = const u64 8, !107
        v133 = call eq_23(v131, v132), !108
        v134 = call assert_2(v133), !109
        v135 = get_local ptr u8, d, !110
        v136 = load v135
        v137 = call size_of_val_35(v136), !111
        v138 = const u64 1, !112
        v139 = call eq_23(v137, v138), !113
        v140 = call assert_2(v139), !114
        v141 = get_local ptr b256, e, !115
        v142 = load v141
        v143 = call size_of_val_36(v142), !116
        v144 = const u64 32, !117
        v145 = call eq_23(v143, v144), !118
        v146 = call assert_2(v145), !119
        v147 = get_local ptr string<11>, f, !120
        v148 = load v147
        v149 = call size_of_val_37(v148), !121
        v150 = const u64 16, !122
        v151 = call eq_23(v149, v150), !123
        v152 = call assert_2(v151), !124
        v153 = const bool true, !125
        ret bool v153
    }

    pub fn min_1() -> b256, !127 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !128
        ret b256 v0
    }

    pub fn assert_2(condition !130: bool) -> (), !131 {
        entry(condition: bool):
        v0 = call not_3(condition), !132
        cbr v0, block0(), block1(), !132

        block0():
        v1 = const u64 18446744073709486084, !134
        v2 = call revert_4(v1), !135
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn not_3(self !137: bool) -> bool, !138 {
        entry(self: bool):
        v0 = const bool false, !139
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_4(code !141: u64) -> never, !142 {
        entry(code: u64):
        revert code, !143
    }

    fn is_ref_type_5(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_6() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_7(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_8(), !146
        ret bool v0
    }

    pub fn is_reference_type_8() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_9(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_10(), !146
        ret bool v0
    }

    pub fn is_reference_type_10() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_11(_param !144: u8) -> bool, !145 {
        entry(_param: u8):
        v0 = call is_reference_type_12(), !146
        ret bool v0
    }

    pub fn is_reference_type_12() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_13(_param !144: [u64; 3]) -> bool, !145 {
        entry(_param: [u64; 3]):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_14() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_15(_param !144: { bool, u64 }) -> bool, !145 {
        entry(_param: { bool, u64 }):
        v0 = call is_reference_type_16(), !146
        ret bool v0
    }

    pub fn is_reference_type_16() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_17(_param !144: { bool, u64, b256, u8 }) -> bool, !145 {
        entry(_param: { bool, u64, b256, u8 }):
        v0 = call is_reference_type_18(), !146
        ret bool v0
    }

    pub fn is_reference_type_18() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_19(_param !144: b256) -> bool, !145 {
        entry(_param: b256):
        v0 = call is_reference_type_20(), !146
        ret bool v0
    }

    pub fn is_reference_type_20() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_21(_param !144: string<11>) -> bool, !145 {
        entry(_param: string<11>):
        v0 = call is_reference_type_22(), !146
        ret bool v0
    }

    pub fn is_reference_type_22() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    pub fn eq_23(self !149: u64, other !150: u64) -> bool, !151 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn size_of_24() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_25() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_26() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_27() -> u64, !152 {
        entry():
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_28() -> u64, !152 {
        entry():
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_29() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_30() -> u64, !152 {
        entry():
        v0 = const u64 24
        ret u64 v0
    }

    pub fn size_of_31() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_val_32(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_33(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_34(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_35(val !153: u8) -> u64, !154 {
        entry(val: u8):
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_val_36(val !153: b256) -> u64, !154 {
        entry(val: b256):
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_val_37(val !153: string<11>) -> u64, !154 {
        entry(val: string<11>):
        v0 = const u64 16
        ret u64 v0
    }

    pub fn encode_38(item !156: bool) -> slice, !157 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_40(), !158
        v1 = call abi_encode_39(item, v0), !159
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !160
        store v1 to v2, !160
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !161
        v4 = load v3
        v5 = call as_raw_slice_41(v4), !162
        ret slice v5
    }

    pub fn abi_encode_39(self !163: bool, buffer !164: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !165 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !167
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !167
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_40() -> { { u64, u64, u64 } }, !168 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !169
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !169
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_41(self !170: { { u64, u64, u64 } }) -> slice, !171 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = span !0 48 74
!4 = span !0 107 113
!5 = span !0 92 114
!6 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!7 = span !6 164 1315
!8 = span !6 199 210
!9 = span !6 188 211
!10 = span !6 216 231
!11 = span !6 229 230
!12 = span !6 236 251
!13 = span !6 249 250
!14 = span !6 256 271
!15 = span !6 269 270
!16 = span !6 276 290
!17 = span !6 288 289
!18 = span !6 309 313
!19 = span !6 295 314
!20 = span !6 319 366
!21 = span !6 389 399
!22 = span !6 390 395
!23 = span !6 372 400
!24 = span !6 424 487
!25 = span !6 454 459
!26 = span !6 478 480
!27 = span !6 406 488
!28 = span !6 514 519
!29 = span !6 502 520
!30 = span !6 501 520
!31 = span !6 494 521
!32 = span !6 547 552
!33 = span !6 535 553
!34 = span !6 534 553
!35 = span !6 527 554
!36 = span !6 580 585
!37 = span !6 568 586
!38 = span !6 567 586
!39 = span !6 560 587
!40 = span !6 613 617
!41 = span !6 601 618
!42 = span !6 600 618
!43 = span !6 593 619
!44 = span !6 644 654
!45 = span !6 632 655
!46 = span !6 625 656
!47 = span !6 681 692
!48 = span !6 669 693
!49 = span !6 662 694
!50 = span !6 730 734
!51 = span !6 719 742
!52 = span !6 720 724
!53 = span !6 726 728
!54 = span !6 736 741
!55 = span !6 707 743
!56 = span !6 700 744
!57 = span !6 769 770
!58 = span !6 757 771
!59 = span !6 750 772
!60 = span !6 797 798
!61 = span !6 785 799
!62 = span !6 778 800
!63 = span !6 814 830
!64 = span !6 834 835
!65 = span !6 814 835
!66 = span !6 807 836
!67 = span !6 849 865
!68 = span !6 869 870
!69 = span !6 849 870
!70 = span !6 842 871
!71 = span !6 884 900
!72 = span !6 904 905
!73 = span !6 884 905
!74 = span !6 877 906
!75 = span !6 919 934
!76 = span !6 938 939
!77 = span !6 919 939
!78 = span !6 912 940
!79 = span !6 953 970
!80 = span !6 974 976
!81 = span !6 953 976
!82 = span !6 946 977
!83 = span !6 990 1010
!84 = span !6 1014 1016
!85 = span !6 990 1016
!86 = span !6 983 1017
!87 = span !6 1030 1051
!88 = span !6 1055 1057
!89 = span !6 1030 1057
!90 = span !6 1023 1058
!91 = span !6 1071 1094
!92 = span !6 1098 1100
!93 = span !6 1071 1100
!94 = span !6 1064 1101
!95 = span !6 1127 1128
!96 = span !6 1115 1129
!97 = span !6 1133 1134
!98 = span !6 1115 1134
!99 = span !6 1108 1135
!100 = span !6 1160 1161
!101 = span !6 1148 1162
!102 = span !6 1166 1167
!103 = span !6 1148 1167
!104 = span !6 1141 1168
!105 = span !6 1193 1194
!106 = span !6 1181 1195
!107 = span !6 1199 1200
!108 = span !6 1181 1200
!109 = span !6 1174 1201
!110 = span !6 1226 1227
!111 = span !6 1214 1228
!112 = span !6 1232 1233
!113 = span !6 1214 1233
!114 = span !6 1207 1234
!115 = span !6 1259 1260
!116 = span !6 1247 1261
!117 = span !6 1265 1267
!118 = span !6 1247 1267
!119 = span !6 1240 1268
!120 = span !6 1293 1294
!121 = span !6 1281 1295
!122 = span !6 1299 1301
!123 = span !6 1281 1301
!124 = span !6 1274 1302
!125 = span !6 1309 1313
!126 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!127 = span !126 7873 7976
!128 = span !126 7904 7970
!129 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!130 = span !129 935 944
!131 = span !129 921 1019
!132 = span !129 961 971
!133 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!134 = span !133 1038 1059
!135 = span !129 982 1010
!136 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!137 = span !136 9956 9960
!138 = span !136 9949 10003
!139 = span !136 9991 9996
!140 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!141 = span !140 669 673
!142 = span !140 655 707
!143 = span !140 691 705
!144 = span !6 111 117
!145 = span !6 93 162
!146 = span !6 136 160
!147 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/intrinsics.sw"
!148 = span !147 397 469
!149 = span !136 12645 12649
!150 = span !136 12651 12656
!151 = span !136 12639 12705
!152 = span !147 913 964
!153 = span !147 1572 1575
!154 = span !147 1550 1618
!155 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!156 = span !155 64156 64160
!157 = span !155 64139 64280
!158 = span !155 64237 64250
!159 = span !155 64221 64251
!160 = span !155 64208 64252
!161 = span !155 64257 64263
!162 = span !155 64257 64278
!163 = span !155 3794 3798
!164 = span !155 3800 3806
!165 = span !155 3780 3925
!166 = span !155 55 82
!167 = span !155 3836 3919
!168 = span !155 128 228
!169 = span !155 159 222
!170 = span !155 281 285
!171 = span !155 265 357

// IR: [fn-dedup-debug] Function deduplication with metadata considered
script {
    pub entry fn __entry() -> slice, !1 {
        local bool result

        entry():
        v0 = call main_0(), !2
        v1 = get_local ptr bool, result, !3
        store v0 to v1, !3
        v2 = get_local ptr bool, result, !4
        v3 = load v2
        v4 = call encode_38(v3), !5
        ret slice v4
    }

    fn main_0() -> bool, !7 {
        local [u64; 3] __anon_0
        local { bool, u64 } __anon_1
        local { bool, u64, b256, u8 } __anon_2
        local u64 a
        local u64 b
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = call min_1(), !8
        v1 = get_local ptr b256, zero, !9
        store v0 to v1, !9
        v2 = get_local ptr u64, a, !10
        v3 = const u64 1, !11
        store v3 to v2, !10
        v4 = get_local ptr u64, b, !12
        v5 = const u64 1, !13
        store v5 to v4, !12
        v6 = get_local ptr u64, c, !14
        v7 = const u64 1, !15
        store v7 to v6, !14
        v8 = get_local ptr u8, d, !16
        v9 = const u8 1, !17
        store v9 to v8, !16
        v10 = get_local ptr b256, zero, !18
        v11 = load v10
        v12 = get_local ptr b256, e, !19
        store v11 to v12, !19
        v13 = get_local ptr string<11>, f, !20
        v14 = const string<11> "Fuel rocks!"
        store v14 to v13, !20
        v15 = get_local ptr [u64; 3], __anon_0, !21
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        v18 = const u64 42, !22
        store v18 to v17, !21
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr u64, v19
        v21 = const u64 42, !22
        store v21 to v20, !21
        v22 = const u64 2
        v23 = get_elem_ptr v15, ptr u64, v22
        v24 = const u64 42, !22
        store v24 to v23, !21
        v25 = load v15
        v26 = get_local ptr [u64; 3], test_array, !23
        store v25 to v26, !23
        v27 = get_local ptr { bool, u64 }, __anon_1, !24
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr bool, v28
        v30 = const bool false, !25
        store v30 to v29, !24
        v31 = const u64 1
        v32 = get_elem_ptr v27, ptr u64, v31
        v33 = const u64 11, !26
        store v33 to v32, !24
        v34 = load v27
        v35 = get_local ptr { bool, u64 }, test_struct, !27
        store v34 to v35, !27
        v36 = const u64 42, !28
        v37 = call is_ref_type_9(v36), !29
        v38 = call not_3(v37), !30
        v39 = call assert_2(v38), !31
        v40 = const u64 42, !32
        v41 = call is_ref_type_9(v40), !33
        v42 = call not_3(v41), !34
        v43 = call assert_2(v42), !35
        v44 = const u64 42, !36
        v45 = call is_ref_type_9(v44), !37
        v46 = call not_3(v45), !38
        v47 = call assert_2(v46), !39
        v48 = const u8 11, !40
        v49 = call is_ref_type_11(v48), !41
        v50 = call not_3(v49), !42
        v51 = call assert_2(v50), !43
        v52 = get_local ptr [u64; 3], test_array, !44
        v53 = load v52
        v54 = call is_ref_type_13(v53), !45
        v55 = call assert_2(v54), !46
        v56 = get_local ptr { bool, u64 }, test_struct, !47
        v57 = load v56
        v58 = call is_ref_type_15(v57), !48
        v59 = call assert_2(v58), !49
        v60 = get_local ptr b256, zero, !50
        v61 = load v60
        v62 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !51
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr bool, v63, !51
        v65 = const bool true, !52
        store v65 to v64, !51
        v66 = const u64 1
        v67 = get_elem_ptr v62, ptr u64, v66, !51
        v68 = const u64 11, !53
        store v68 to v67, !51
        v69 = const u64 2
        v70 = get_elem_ptr v62, ptr b256, v69, !51
        store v61 to v70, !51
        v71 = const u64 3
        v72 = get_elem_ptr v62, ptr u8, v71, !51
        v73 = const u8 255, !54
        store v73 to v72, !51
        v74 = load v62
        v75 = call is_ref_type_17(v74), !55
        v76 = call assert_2(v75), !56
        v77 = get_local ptr b256, e, !57
        v78 = load v77
        v79 = call is_ref_type_19(v78), !58
        v80 = call assert_2(v79), !59
        v81 = get_local ptr string<11>, f, !60
        v82 = load v81
        v83 = call is_ref_type_21(v82), !61
        v84 = call assert_2(v83), !62
        v85 = call size_of_26(), !63
        v86 = const u64 8, !64
        v87 = call eq_23(v85, v86), !65
        v88 = call assert_2(v87), !66
        v89 = call size_of_26(), !67
        v90 = const u64 8, !68
        v91 = call eq_23(v89, v90), !69
        v92 = call assert_2(v91), !70
        v93 = call size_of_26(), !71
        v94 = const u64 8, !72
        v95 = call eq_23(v93, v94), !73
        v96 = call assert_2(v95), !74
        v97 = call size_of_27(), !75
        v98 = const u64 1, !76
        v99 = call eq_23(v97, v98), !77
        v100 = call assert_2(v99), !78
        v101 = call size_of_28(), !79
        v102 = const u64 32, !80
        v103 = call eq_23(v101, v102), !81
        v104 = call assert_2(v103), !82
        v105 = call size_of_31(), !83
        v106 = const u64 16, !84
        v107 = call eq_23(v105, v106), !85
        v108 = call assert_2(v107), !86
        v109 = call size_of_30(), !87
        v110 = const u64 24, !88
        v111 = call eq_23(v109, v110), !89
        v112 = call assert_2(v111), !90
        v113 = call size_of_31(), !91
        v114 = const u64 16, !92
        v115 = call eq_23(v113, v114), !93
        v116 = call assert_2(v115), !94
        v117 = get_local ptr u64, a, !95
        v118 = load v117
        v119 = call size_of_val_34(v118), !96
        v120 = const u64 8, !97
        v121 = call eq_23(v119, v120), !98
        v122 = call assert_2(v121), !99
        v123 = get_local ptr u64, b, !100
        v124 = load v123
        v125 = call size_of_val_34(v124), !101
        v126 = const u64 8, !102
        v127 = call eq_23(v125, v126), !103
        v128 = call assert_2(v127), !104
        v129 = get_local ptr u64, c, !105
        v130 = load v129
        v131 = call size_of_val_34(v130), !106
        v132 = const u64 8, !107
        v133 = call eq_23(v131, v132), !108
        v134 = call assert_2(v133), !109
        v135 = get_local ptr u8, d, !110
        v136 = load v135
        v137 = call size_of_val_35(v136), !111
        v138 = const u64 1, !112
        v139 = call eq_23(v137, v138), !113
        v140 = call assert_2(v139), !114
        v141 = get_local ptr b256, e, !115
        v142 = load v141
        v143 = call size_of_val_36(v142), !116
        v144 = const u64 32, !117
        v145 = call eq_23(v143, v144), !118
        v146 = call assert_2(v145), !119
        v147 = get_local ptr string<11>, f, !120
        v148 = load v147
        v149 = call size_of_val_37(v148), !121
        v150 = const u64 16, !122
        v151 = call eq_23(v149, v150), !123
        v152 = call assert_2(v151), !124
        v153 = const bool true, !125
        ret bool v153
    }

    pub fn min_1() -> b256, !127 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !128
        ret b256 v0
    }

    pub fn assert_2(condition !130: bool) -> (), !131 {
        entry(condition: bool):
        v0 = call not_3(condition), !132
        cbr v0, block0(), block1(), !132

        block0():
        v1 = const u64 18446744073709486084, !134
        v2 = call revert_4(v1), !135
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn not_3(self !137: bool) -> bool, !138 {
        entry(self: bool):
        v0 = const bool false, !139
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_4(code !141: u64) -> never, !142 {
        entry(code: u64):
        revert code, !143
    }

    fn is_ref_type_5(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_6() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_7(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_8() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_9(_param !144: u64) -> bool, !145 {
        entry(_param: u64):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_10() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_11(_param !144: u8) -> bool, !145 {
        entry(_param: u8):
        v0 = call is_reference_type_6(), !146
        ret bool v0
    }

    pub fn is_reference_type_12() -> bool, !148 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_13(_param !144: [u64; 3]) -> bool, !145 {
        entry(_param: [u64; 3]):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_14() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_15(_param !144: { bool, u64 }) -> bool, !145 {
        entry(_param: { bool, u64 }):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_16() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_17(_param !144: { bool, u64, b256, u8 }) -> bool, !145 {
        entry(_param: { bool, u64, b256, u8 }):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_18() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_19(_param !144: b256) -> bool, !145 {
        entry(_param: b256):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_20() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_21(_param !144: string<11>) -> bool, !145 {
        entry(_param: string<11>):
        v0 = call is_reference_type_14(), !146
        ret bool v0
    }

    pub fn is_reference_type_22() -> bool, !148 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    pub fn eq_23(self !149: u64, other !150: u64) -> bool, !151 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn size_of_24() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_25() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_26() -> u64, !152 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_27() -> u64, !152 {
        entry():
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_28() -> u64, !152 {
        entry():
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_29() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_30() -> u64, !152 {
        entry():
        v0 = const u64 24
        ret u64 v0
    }

    pub fn size_of_31() -> u64, !152 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_val_32(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_33(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_34(val !153: u64) -> u64, !154 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_35(val !153: u8) -> u64, !154 {
        entry(val: u8):
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_val_36(val !153: b256) -> u64, !154 {
        entry(val: b256):
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_val_37(val !153: string<11>) -> u64, !154 {
        entry(val: string<11>):
        v0 = const u64 16
        ret u64 v0
    }

    pub fn encode_38(item !156: bool) -> slice, !157 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_40(), !158
        v1 = call abi_encode_39(item, v0), !159
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !160
        store v1 to v2, !160
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !161
        v4 = load v3
        v5 = call as_raw_slice_41(v4), !162
        ret slice v5
    }

    pub fn abi_encode_39(self !163: bool, buffer !164: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !165 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !167
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !167
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_40() -> { { u64, u64, u64 } }, !168 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !169
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !169
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_41(self !170: { { u64, u64, u64 } }) -> slice, !171 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !166
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = span !0 48 74
!4 = span !0 107 113
!5 = span !0 92 114
!6 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!7 = span !6 164 1315
!8 = span !6 199 210
!9 = span !6 188 211
!10 = span !6 216 231
!11 = span !6 229 230
!12 = span !6 236 251
!13 = span !6 249 250
!14 = span !6 256 271
!15 = span !6 269 270
!16 = span !6 276 290
!17 = span !6 288 289
!18 = span !6 309 313
!19 = span !6 295 314
!20 = span !6 319 366
!21 = span !6 389 399
!22 = span !6 390 395
!23 = span !6 372 400
!24 = span !6 424 487
!25 = span !6 454 459
!26 = span !6 478 480
!27 = span !6 406 488
!28 = span !6 514 519
!29 = span !6 502 520
!30 = span !6 501 520
!31 = span !6 494 521
!32 = span !6 547 552
!33 = span !6 535 553
!34 = span !6 534 553
!35 = span !6 527 554
!36 = span !6 580 585
!37 = span !6 568 586
!38 = span !6 567 586
!39 = span !6 560 587
!40 = span !6 613 617
!41 = span !6 601 618
!42 = span !6 600 618
!43 = span !6 593 619
!44 = span !6 644 654
!45 = span !6 632 655
!46 = span !6 625 656
!47 = span !6 681 692
!48 = span !6 669 693
!49 = span !6 662 694
!50 = span !6 730 734
!51 = span !6 719 742
!52 = span !6 720 724
!53 = span !6 726 728
!54 = span !6 736 741
!55 = span !6 707 743
!56 = span !6 700 744
!57 = span !6 769 770
!58 = span !6 757 771
!59 = span !6 750 772
!60 = span !6 797 798
!61 = span !6 785 799
!62 = span !6 778 800
!63 = span !6 814 830
!64 = span !6 834 835
!65 = span !6 814 835
!66 = span !6 807 836
!67 = span !6 849 865
!68 = span !6 869 870
!69 = span !6 849 870
!70 = span !6 842 871
!71 = span !6 884 900
!72 = span !6 904 905
!73 = span !6 884 905
!74 = span !6 877 906
!75 = span !6 919 934
!76 = span !6 938 939
!77 = span !6 919 939
!78 = span !6 912 940
!79 = span !6 953 970
!80 = span !6 974 976
!81 = span !6 953 976
!82 = span !6 946 977
!83 = span !6 990 1010
!84 = span !6 1014 1016
!85 = span !6 990 1016
!86 = span !6 983 1017
!87 = span !6 1030 1051
!88 = span !6 1055 1057
!89 = span !6 1030 1057
!90 = span !6 1023 1058
!91 = span !6 1071 1094
!92 = span !6 1098 1100
!93 = span !6 1071 1100
!94 = span !6 1064 1101
!95 = span !6 1127 1128
!96 = span !6 1115 1129
!97 = span !6 1133 1134
!98 = span !6 1115 1134
!99 = span !6 1108 1135
!100 = span !6 1160 1161
!101 = span !6 1148 1162
!102 = span !6 1166 1167
!103 = span !6 1148 1167
!104 = span !6 1141 1168
!105 = span !6 1193 1194
!106 = span !6 1181 1195
!107 = span !6 1199 1200
!108 = span !6 1181 1200
!109 = span !6 1174 1201
!110 = span !6 1226 1227
!111 = span !6 1214 1228
!112 = span !6 1232 1233
!113 = span !6 1214 1233
!114 = span !6 1207 1234
!115 = span !6 1259 1260
!116 = span !6 1247 1261
!117 = span !6 1265 1267
!118 = span !6 1247 1267
!119 = span !6 1240 1268
!120 = span !6 1293 1294
!121 = span !6 1281 1295
!122 = span !6 1299 1301
!123 = span !6 1281 1301
!124 = span !6 1274 1302
!125 = span !6 1309 1313
!126 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!127 = span !126 7873 7976
!128 = span !126 7904 7970
!129 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!130 = span !129 935 944
!131 = span !129 921 1019
!132 = span !129 961 971
!133 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!134 = span !133 1038 1059
!135 = span !129 982 1010
!136 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!137 = span !136 9956 9960
!138 = span !136 9949 10003
!139 = span !136 9991 9996
!140 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!141 = span !140 669 673
!142 = span !140 655 707
!143 = span !140 691 705
!144 = span !6 111 117
!145 = span !6 93 162
!146 = span !6 136 160
!147 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/intrinsics.sw"
!148 = span !147 397 469
!149 = span !136 12645 12649
!150 = span !136 12651 12656
!151 = span !136 12639 12705
!152 = span !147 913 964
!153 = span !147 1572 1575
!154 = span !147 1550 1618
!155 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!156 = span !155 64156 64160
!157 = span !155 64139 64280
!158 = span !155 64237 64250
!159 = span !155 64221 64251
!160 = span !155 64208 64252
!161 = span !155 64257 64263
!162 = span !155 64257 64278
!163 = span !155 3794 3798
!164 = span !155 3800 3806
!165 = span !155 3780 3925
!166 = span !155 55 82
!167 = span !155 3836 3919
!168 = span !155 128 228
!169 = span !155 159 222
!170 = span !155 281 285
!171 = span !155 265 357

// IR: [inline] Function inlining
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br main_0_block0(v0), !7

        main_0_block0(v1: b256):
        v2 = get_local ptr b256, zero, !9
        store v1 to v2, !10
        v3 = get_local ptr u64, a, !12
        v4 = const u64 1, !13
        store v4 to v3, !14
        v5 = get_local ptr u64, b, !16
        v6 = const u64 1, !17
        store v6 to v5, !18
        v7 = get_local ptr u64, c, !20
        v8 = const u64 1, !21
        store v8 to v7, !22
        v9 = get_local ptr u8, d, !24
        v10 = const u8 1, !25
        store v10 to v9, !26
        v11 = get_local ptr b256, zero, !28
        v12 = load v11, !4
        v13 = get_local ptr b256, e, !30
        store v12 to v13, !31
        v14 = get_local ptr string<11>, f, !33
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !34
        v16 = get_local ptr [u64; 3], __anon_0, !36
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !4
        v19 = const u64 42, !37
        store v19 to v18, !38
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20, !4
        v22 = const u64 42, !37
        store v22 to v21, !39
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23, !4
        v25 = const u64 42, !37
        store v25 to v24, !40
        v26 = load v16, !4
        v27 = get_local ptr [u64; 3], test_array, !42
        store v26 to v27, !43
        v28 = get_local ptr { bool, u64 }, __anon_1, !45
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29, !4
        v31 = const bool false, !46
        store v31 to v30, !47
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32, !4
        v34 = const u64 11, !48
        store v34 to v33, !49
        v35 = load v28, !4
        v36 = get_local ptr { bool, u64 }, test_struct, !51
        store v35 to v36, !52
        v37 = const bool false
        br main_0_is_ref_type_9_block0(v37), !55

        main_0_is_ref_type_9_block0(v38: bool):
        br main_0_block1(v38), !56

        main_0_block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !60
        br main_0_block2(v41), !61

        main_0_block2(v42: bool):
        v43 = call assert_2(v42), !63
        br main_0_is_ref_type_9_block04(v37), !65

        main_0_is_ref_type_9_block04(v44: bool):
        br main_0_block3(v44), !66

        main_0_block3(v45: bool):
        v46 = cmp eq v45 v40, !68
        br main_0_block5(v46), !69

        main_0_block5(v47: bool):
        v48 = call assert_2(v47), !71
        br main_0_is_ref_type_9_block07(v37), !73

        main_0_is_ref_type_9_block07(v49: bool):
        br main_0_block6(v49), !74

        main_0_block6(v50: bool):
        v51 = cmp eq v50 v40, !76
        br main_0_block8(v51), !77

        main_0_block8(v52: bool):
        v53 = call assert_2(v52), !79
        br main_0_is_ref_type_11_block0(v37), !81

        main_0_is_ref_type_11_block0(v54: bool):
        br main_0_block9(v54), !82

        main_0_block9(v55: bool):
        v56 = cmp eq v55 v40, !84
        br main_0_block10(v56), !85

        main_0_block10(v57: bool):
        v58 = call assert_2(v57), !87
        v59 = get_local ptr [u64; 3], test_array, !89
        v60 = load v59, !4
        v61 = const bool true
        br main_0_is_ref_type_13_block0(v61), !91

        main_0_is_ref_type_13_block0(v62: bool):
        br main_0_block11(v62), !92

        main_0_block11(v63: bool):
        v64 = call assert_2(v63), !94
        v65 = get_local ptr { bool, u64 }, test_struct, !96
        v66 = load v65, !4
        br main_0_is_ref_type_15_block0(v61), !98

        main_0_is_ref_type_15_block0(v67: bool):
        br main_0_block12(v67), !99

        main_0_block12(v68: bool):
        v69 = call assert_2(v68), !101
        v70 = get_local ptr b256, zero, !103
        v71 = load v70, !4
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !105
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !106
        v75 = const bool true, !107
        store v75 to v74, !108
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !109
        v78 = const u64 11, !110
        store v78 to v77, !111
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !112
        store v71 to v80, !113
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !114
        v83 = const u8 255, !115
        store v83 to v82, !116
        v84 = load v72, !4
        br main_0_is_ref_type_17_block0(v61), !118

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !119

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !121
        v88 = get_local ptr b256, e, !123
        v89 = load v88, !4
        br main_0_is_ref_type_19_block0(v61), !125

        main_0_is_ref_type_19_block0(v90: bool):
        br main_0_block14(v90), !126

        main_0_block14(v91: bool):
        v92 = call assert_2(v91), !128
        v93 = get_local ptr string<11>, f, !130
        v94 = load v93, !4
        br main_0_is_ref_type_21_block0(v61), !132

        main_0_is_ref_type_21_block0(v95: bool):
        br main_0_block15(v95), !133

        main_0_block15(v96: bool):
        v97 = call assert_2(v96), !135
        v98 = const u64 8
        br main_0_block16(v98), !137

        main_0_block16(v99: u64):
        v100 = const u64 8, !138
        v101 = cmp eq v99 v100, !140
        br main_0_block17(v101), !141

        main_0_block17(v102: bool):
        v103 = call assert_2(v102), !143
        br main_0_block18(v98), !145

        main_0_block18(v104: u64):
        v105 = const u64 8, !146
        v106 = cmp eq v104 v105, !148
        br main_0_block19(v106), !149

        main_0_block19(v107: bool):
        v108 = call assert_2(v107), !151
        br main_0_block20(v98), !153

        main_0_block20(v109: u64):
        v110 = const u64 8, !154
        v111 = cmp eq v109 v110, !156
        br main_0_block21(v111), !157

        main_0_block21(v112: bool):
        v113 = call assert_2(v112), !159
        v114 = const u64 1
        br main_0_block22(v114), !161

        main_0_block22(v115: u64):
        v116 = const u64 1, !162
        v117 = cmp eq v115 v116, !164
        br main_0_block23(v117), !165

        main_0_block23(v118: bool):
        v119 = call assert_2(v118), !167
        v120 = const u64 32
        br main_0_block24(v120), !169

        main_0_block24(v121: u64):
        v122 = const u64 32, !170
        v123 = cmp eq v121 v122, !172
        br main_0_block25(v123), !173

        main_0_block25(v124: bool):
        v125 = call assert_2(v124), !175
        v126 = const u64 16
        br main_0_block26(v126), !177

        main_0_block26(v127: u64):
        v128 = const u64 16, !178
        v129 = cmp eq v127 v128, !180
        br main_0_block27(v129), !181

        main_0_block27(v130: bool):
        v131 = call assert_2(v130), !183
        v132 = const u64 24
        br main_0_block28(v132), !185

        main_0_block28(v133: u64):
        v134 = const u64 24, !186
        v135 = cmp eq v133 v134, !188
        br main_0_block29(v135), !189

        main_0_block29(v136: bool):
        v137 = call assert_2(v136), !191
        br main_0_block30(v126), !193

        main_0_block30(v138: u64):
        v139 = const u64 16, !194
        v140 = cmp eq v138 v139, !196
        br main_0_block31(v140), !197

        main_0_block31(v141: bool):
        v142 = call assert_2(v141), !199
        v143 = get_local ptr u64, a, !201
        v144 = load v143, !4
        v145 = const u64 8
        br main_0_block32(v145), !203

        main_0_block32(v146: u64):
        v147 = const u64 8, !204
        v148 = cmp eq v146 v147, !206
        br main_0_block33(v148), !207

        main_0_block33(v149: bool):
        v150 = call assert_2(v149), !209
        v151 = get_local ptr u64, b, !211
        v152 = load v151, !4
        br main_0_block34(v145), !213

        main_0_block34(v153: u64):
        v154 = const u64 8, !214
        v155 = cmp eq v153 v154, !216
        br main_0_block35(v155), !217

        main_0_block35(v156: bool):
        v157 = call assert_2(v156), !219
        v158 = get_local ptr u64, c, !221
        v159 = load v158, !4
        br main_0_block36(v145), !223

        main_0_block36(v160: u64):
        v161 = const u64 8, !224
        v162 = cmp eq v160 v161, !226
        br main_0_block37(v162), !227

        main_0_block37(v163: bool):
        v164 = call assert_2(v163), !229
        v165 = get_local ptr u8, d, !231
        v166 = load v165, !4
        v167 = const u64 1
        br main_0_block38(v167), !233

        main_0_block38(v168: u64):
        v169 = const u64 1, !234
        v170 = cmp eq v168 v169, !236
        br main_0_block39(v170), !237

        main_0_block39(v171: bool):
        v172 = call assert_2(v171), !239
        v173 = get_local ptr b256, e, !241
        v174 = load v173, !4
        v175 = const u64 32
        br main_0_block40(v175), !243

        main_0_block40(v176: u64):
        v177 = const u64 32, !244
        v178 = cmp eq v176 v177, !246
        br main_0_block41(v178), !247

        main_0_block41(v179: bool):
        v180 = call assert_2(v179), !249
        v181 = get_local ptr string<11>, f, !251
        v182 = load v181, !4
        v183 = const u64 16
        br main_0_block42(v183), !253

        main_0_block42(v184: u64):
        v185 = const u64 16, !254
        v186 = cmp eq v184 v185, !256
        br main_0_block43(v186), !257

        main_0_block43(v187: bool):
        v188 = call assert_2(v187), !259
        v189 = const bool true, !260
        br block0(v189), !4

        block0(v190: bool):
        v191 = get_local ptr bool, result, !261
        store v190 to v191, !261
        v192 = get_local ptr bool, result, !262
        v193 = load v192
        v194 = const u64 1024
        v195 = asm(cap: v194) -> u64 hp, !266 {
            aloc   cap
        }
        v196 = int_to_ptr v195 to ptr u8, !267
        v197 = ptr_to_int v196 to u64, !268
        v198 = get_local ptr { u64, u64, u64 }, __anon_00, !269
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr u64, v199, !270
        store v197 to v200, !271
        v201 = const u64 1
        v202 = get_elem_ptr v198, ptr u64, v201, !272
        store v194 to v202, !273
        v203 = const u64 2
        v204 = get_elem_ptr v198, ptr u64, v203, !274
        v205 = const u64 0
        store v205 to v204, !275
        v206 = asm(buffer: v198) -> { u64, u64, u64 } buffer, !276 {
        }
        v207 = get_local ptr { { u64, u64, u64 } }, __anon_10, !278
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr { u64, u64, u64 }, v208, !279
        store v206 to v209, !280
        v210 = load v207, !281
        br encode_38_block0(v210), !282

        encode_38_block0(v211: { { u64, u64, u64 } }):
        v212 = ptr_to_int v211 to u64, !284
        v213 = int_to_ptr v212 to ptr { { u64, u64, u64 } }, !285
        v214 = const u64 0
        v215 = get_elem_ptr v213, ptr { u64, u64, u64 }, v214, !287
        v216 = load v215, !288
        v217 = asm(buffer: v216) -> { u64, u64, u64 } buffer, !289 {
        }
        v218 = get_local ptr { u64, u64, u64 }, __anon_000, !290
        store v217 to v218, !291
        v219 = const u64 0
        v220 = get_elem_ptr v218, ptr u64, v219, !292
        v221 = load v220, !293
        v222 = int_to_ptr v221 to ptr u8, !294
        v223 = const u64 1
        v224 = get_elem_ptr v218, ptr u64, v223, !295
        v225 = load v224, !296
        v226 = const u64 2
        v227 = get_elem_ptr v218, ptr u64, v226, !297
        v228 = load v227, !298
        v229 = ptr_to_int v222 to u64, !299
        v230 = add v229, v228, !300
        v231 = int_to_ptr v230 to ptr bool, !301
        store v193 to v231, !302
        v232 = const u64 1
        v233 = add v228, v232, !303
        v234 = ptr_to_int v222 to u64, !304
        v235 = get_local ptr { u64, u64, u64 }, __anon_100, !305
        v236 = const u64 0
        v237 = get_elem_ptr v235, ptr u64, v236, !306
        store v234 to v237, !307
        v238 = const u64 1
        v239 = get_elem_ptr v235, ptr u64, v238, !308
        store v225 to v239, !309
        v240 = const u64 2
        v241 = get_elem_ptr v235, ptr u64, v240, !310
        store v233 to v241, !311
        v242 = asm(buffer: v235) -> { u64, u64, u64 } buffer, !312 {
        }
        v243 = get_local ptr { { u64, u64, u64 } }, __anon_20, !314
        v244 = const u64 0
        v245 = get_elem_ptr v243, ptr { u64, u64, u64 }, v244, !315
        store v242 to v245, !316
        v246 = load v243, !317
        br encode_38_block1(v246), !318

        encode_38_block1(v247: { { u64, u64, u64 } }):
        v248 = get_local ptr { { u64, u64, u64 } }, buffer, !320
        store v247 to v248, !321
        v249 = get_local ptr { { u64, u64, u64 } }, buffer, !323
        v250 = load v249, !263
        v251 = ptr_to_int v250 to u64, !325
        v252 = int_to_ptr v251 to ptr { { u64, u64, u64 } }, !326
        v253 = const u64 0
        v254 = get_elem_ptr v252, ptr { u64, u64, u64 }, v253, !327
        v255 = load v254, !328
        v256 = asm(buffer: v255) -> { u64, u64, u64 } buffer, !329 {
        }
        v257 = get_local ptr { u64, u64, u64 }, __anon_01, !330
        store v256 to v257, !331
        v258 = const u64 0
        v259 = get_elem_ptr v257, ptr u64, v258, !332
        v260 = load v259, !333
        v261 = int_to_ptr v260 to ptr u8, !334
        v262 = const u64 1
        v263 = get_elem_ptr v257, ptr u64, v262, !335
        v264 = load v263, !336
        v265 = const u64 2
        v266 = get_elem_ptr v257, ptr u64, v265, !337
        v267 = load v266, !338
        v268 = ptr_to_int v261 to u64, !339
        v269 = get_local ptr { u64, u64 }, __anon_11, !340
        v270 = const u64 0
        v271 = get_elem_ptr v269, ptr u64, v270, !341
        store v268 to v271, !342
        v272 = const u64 1
        v273 = get_elem_ptr v269, ptr u64, v272, !343
        store v267 to v273, !344
        v274 = asm(s: v269) -> slice s, !345 {
        }
        br encode_38_block2(v274), !346

        encode_38_block2(v275: slice):
        br block1(v275), !263

        block1(v276: slice):
        ret slice v276
    }

    fn main_0() -> bool, !347 {
        local [u64; 3] __anon_0
        local { bool, u64 } __anon_1
        local { bool, u64, b256, u8 } __anon_2
        local u64 a
        local u64 b
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br block0(v0), !6

        block0(v1: b256):
        v2 = get_local ptr b256, zero, !8
        store v1 to v2, !8
        v3 = get_local ptr u64, a, !11
        v4 = const u64 1, !13
        store v4 to v3, !11
        v5 = get_local ptr u64, b, !15
        v6 = const u64 1, !17
        store v6 to v5, !15
        v7 = get_local ptr u64, c, !19
        v8 = const u64 1, !21
        store v8 to v7, !19
        v9 = get_local ptr u8, d, !23
        v10 = const u8 1, !25
        store v10 to v9, !23
        v11 = get_local ptr b256, zero, !27
        v12 = load v11
        v13 = get_local ptr b256, e, !29
        store v12 to v13, !29
        v14 = get_local ptr string<11>, f, !32
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !32
        v16 = get_local ptr [u64; 3], __anon_0, !35
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        v19 = const u64 42, !37
        store v19 to v18, !35
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20
        v22 = const u64 42, !37
        store v22 to v21, !35
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23
        v25 = const u64 42, !37
        store v25 to v24, !35
        v26 = load v16
        v27 = get_local ptr [u64; 3], test_array, !41
        store v26 to v27, !41
        v28 = get_local ptr { bool, u64 }, __anon_1, !44
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29
        v31 = const bool false, !46
        store v31 to v30, !44
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32
        v34 = const u64 11, !48
        store v34 to v33, !44
        v35 = load v28
        v36 = get_local ptr { bool, u64 }, test_struct, !50
        store v35 to v36, !50
        v37 = const bool false
        br is_ref_type_9_block0(v37), !348

        is_ref_type_9_block0(v38: bool):
        br block1(v38), !53

        block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !59
        br block2(v41), !59

        block2(v42: bool):
        v43 = call assert_2(v42), !62
        br is_ref_type_9_block04(v37), !349

        is_ref_type_9_block04(v44: bool):
        br block3(v44), !64

        block3(v45: bool):
        v46 = cmp eq v45 v40, !67
        br block5(v46), !67

        block5(v47: bool):
        v48 = call assert_2(v47), !70
        br is_ref_type_9_block07(v37), !350

        is_ref_type_9_block07(v49: bool):
        br block6(v49), !72

        block6(v50: bool):
        v51 = cmp eq v50 v40, !75
        br block8(v51), !75

        block8(v52: bool):
        v53 = call assert_2(v52), !78
        br is_ref_type_11_block0(v37), !351

        is_ref_type_11_block0(v54: bool):
        br block9(v54), !80

        block9(v55: bool):
        v56 = cmp eq v55 v40, !83
        br block10(v56), !83

        block10(v57: bool):
        v58 = call assert_2(v57), !86
        v59 = get_local ptr [u64; 3], test_array, !88
        v60 = load v59
        v61 = const bool true
        br is_ref_type_13_block0(v61), !352

        is_ref_type_13_block0(v62: bool):
        br block11(v62), !90

        block11(v63: bool):
        v64 = call assert_2(v63), !93
        v65 = get_local ptr { bool, u64 }, test_struct, !95
        v66 = load v65
        br is_ref_type_15_block0(v61), !353

        is_ref_type_15_block0(v67: bool):
        br block12(v67), !97

        block12(v68: bool):
        v69 = call assert_2(v68), !100
        v70 = get_local ptr b256, zero, !102
        v71 = load v70
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !104
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !104
        v75 = const bool true, !107
        store v75 to v74, !104
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !104
        v78 = const u64 11, !110
        store v78 to v77, !104
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !104
        store v71 to v80, !104
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !104
        v83 = const u8 255, !115
        store v83 to v82, !104
        v84 = load v72
        br is_ref_type_17_block0(v61), !354

        is_ref_type_17_block0(v85: bool):
        br block13(v85), !117

        block13(v86: bool):
        v87 = call assert_2(v86), !120
        v88 = get_local ptr b256, e, !122
        v89 = load v88
        br is_ref_type_19_block0(v61), !355

        is_ref_type_19_block0(v90: bool):
        br block14(v90), !124

        block14(v91: bool):
        v92 = call assert_2(v91), !127
        v93 = get_local ptr string<11>, f, !129
        v94 = load v93
        br is_ref_type_21_block0(v61), !356

        is_ref_type_21_block0(v95: bool):
        br block15(v95), !131

        block15(v96: bool):
        v97 = call assert_2(v96), !134
        v98 = const u64 8
        br block16(v98), !136

        block16(v99: u64):
        v100 = const u64 8, !138
        v101 = cmp eq v99 v100, !139
        br block17(v101), !139

        block17(v102: bool):
        v103 = call assert_2(v102), !142
        br block18(v98), !144

        block18(v104: u64):
        v105 = const u64 8, !146
        v106 = cmp eq v104 v105, !147
        br block19(v106), !147

        block19(v107: bool):
        v108 = call assert_2(v107), !150
        br block20(v98), !152

        block20(v109: u64):
        v110 = const u64 8, !154
        v111 = cmp eq v109 v110, !155
        br block21(v111), !155

        block21(v112: bool):
        v113 = call assert_2(v112), !158
        v114 = const u64 1
        br block22(v114), !160

        block22(v115: u64):
        v116 = const u64 1, !162
        v117 = cmp eq v115 v116, !163
        br block23(v117), !163

        block23(v118: bool):
        v119 = call assert_2(v118), !166
        v120 = const u64 32
        br block24(v120), !168

        block24(v121: u64):
        v122 = const u64 32, !170
        v123 = cmp eq v121 v122, !171
        br block25(v123), !171

        block25(v124: bool):
        v125 = call assert_2(v124), !174
        v126 = const u64 16
        br block26(v126), !176

        block26(v127: u64):
        v128 = const u64 16, !178
        v129 = cmp eq v127 v128, !179
        br block27(v129), !179

        block27(v130: bool):
        v131 = call assert_2(v130), !182
        v132 = const u64 24
        br block28(v132), !184

        block28(v133: u64):
        v134 = const u64 24, !186
        v135 = cmp eq v133 v134, !187
        br block29(v135), !187

        block29(v136: bool):
        v137 = call assert_2(v136), !190
        br block30(v126), !192

        block30(v138: u64):
        v139 = const u64 16, !194
        v140 = cmp eq v138 v139, !195
        br block31(v140), !195

        block31(v141: bool):
        v142 = call assert_2(v141), !198
        v143 = get_local ptr u64, a, !200
        v144 = load v143
        v145 = const u64 8
        br block32(v145), !202

        block32(v146: u64):
        v147 = const u64 8, !204
        v148 = cmp eq v146 v147, !205
        br block33(v148), !205

        block33(v149: bool):
        v150 = call assert_2(v149), !208
        v151 = get_local ptr u64, b, !210
        v152 = load v151
        br block34(v145), !212

        block34(v153: u64):
        v154 = const u64 8, !214
        v155 = cmp eq v153 v154, !215
        br block35(v155), !215

        block35(v156: bool):
        v157 = call assert_2(v156), !218
        v158 = get_local ptr u64, c, !220
        v159 = load v158
        br block36(v145), !222

        block36(v160: u64):
        v161 = const u64 8, !224
        v162 = cmp eq v160 v161, !225
        br block37(v162), !225

        block37(v163: bool):
        v164 = call assert_2(v163), !228
        v165 = get_local ptr u8, d, !230
        v166 = load v165
        v167 = const u64 1
        br block38(v167), !232

        block38(v168: u64):
        v169 = const u64 1, !234
        v170 = cmp eq v168 v169, !235
        br block39(v170), !235

        block39(v171: bool):
        v172 = call assert_2(v171), !238
        v173 = get_local ptr b256, e, !240
        v174 = load v173
        v175 = const u64 32
        br block40(v175), !242

        block40(v176: u64):
        v177 = const u64 32, !244
        v178 = cmp eq v176 v177, !245
        br block41(v178), !245

        block41(v179: bool):
        v180 = call assert_2(v179), !248
        v181 = get_local ptr string<11>, f, !250
        v182 = load v181
        v183 = const u64 16
        br block42(v183), !252

        block42(v184: u64):
        v185 = const u64 16, !254
        v186 = cmp eq v184 v185, !255
        br block43(v186), !255

        block43(v187: bool):
        v188 = call assert_2(v187), !258
        v189 = const bool true, !260
        ret bool v189
    }

    pub fn min_1() -> b256, !357 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        ret b256 v0
    }

    pub fn assert_2(condition !359: bool) -> (), !360 {
        entry(condition: bool):
        v0 = const bool false, !58
        v1 = cmp eq condition v0, !361
        br block3(v1), !361

        block3(v2: bool):
        cbr v2, block0(), block1(), !361

        block0():
        v3 = const u64 18446744073709486084, !363
        revert v3, !367

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }

    pub fn not_3(self !368: bool) -> bool, !369 {
        entry(self: bool):
        v0 = const bool false, !58
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn revert_4(code !370: u64) -> never, !371 {
        entry(code: u64):
        revert code, !366
    }

    fn is_ref_type_5(_param !372: u64) -> bool, !373 {
        entry(_param: u64):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_6() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_7(_param !372: u64) -> bool, !373 {
        entry(_param: u64):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_8() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_9(_param !372: u64) -> bool, !373 {
        entry(_param: u64):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_10() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_11(_param !372: u8) -> bool, !373 {
        entry(_param: u8):
        v0 = const bool false
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_12() -> bool, !375 {
        entry():
        v0 = const bool false
        ret bool v0
    }

    fn is_ref_type_13(_param !372: [u64; 3]) -> bool, !373 {
        entry(_param: [u64; 3]):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_14() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_15(_param !372: { bool, u64 }) -> bool, !373 {
        entry(_param: { bool, u64 }):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_16() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_17(_param !372: { bool, u64, b256, u8 }) -> bool, !373 {
        entry(_param: { bool, u64, b256, u8 }):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_18() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_19(_param !372: b256) -> bool, !373 {
        entry(_param: b256):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_20() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    fn is_ref_type_21(_param !372: string<11>) -> bool, !373 {
        entry(_param: string<11>):
        v0 = const bool true
        br block0(v0), !54

        block0(v1: bool):
        ret bool v1
    }

    pub fn is_reference_type_22() -> bool, !375 {
        entry():
        v0 = const bool true
        ret bool v0
    }

    pub fn eq_23(self !376: u64, other !377: u64) -> bool, !378 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn size_of_24() -> u64, !379 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_25() -> u64, !379 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_26() -> u64, !379 {
        entry():
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_27() -> u64, !379 {
        entry():
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_28() -> u64, !379 {
        entry():
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_29() -> u64, !379 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_30() -> u64, !379 {
        entry():
        v0 = const u64 24
        ret u64 v0
    }

    pub fn size_of_31() -> u64, !379 {
        entry():
        v0 = const u64 16
        ret u64 v0
    }

    pub fn size_of_val_32(val !380: u64) -> u64, !381 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_33(val !380: u64) -> u64, !381 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_34(val !380: u64) -> u64, !381 {
        entry(val: u64):
        v0 = const u64 8
        ret u64 v0
    }

    pub fn size_of_val_35(val !380: u8) -> u64, !381 {
        entry(val: u8):
        v0 = const u64 1
        ret u64 v0
    }

    pub fn size_of_val_36(val !380: b256) -> u64, !381 {
        entry(val: b256):
        v0 = const u64 32
        ret u64 v0
    }

    pub fn size_of_val_37(val !380: string<11>) -> u64, !381 {
        entry(val: string<11>):
        v0 = const u64 16
        ret u64 v0
    }

    pub fn encode_38(item !382: bool) -> slice, !383 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64, u64 } __anon_10
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_2
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp, !265 {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8, !265
        v3 = ptr_to_int v2 to u64, !265
        v4 = get_local ptr { u64, u64, u64 }, __anon_0, !265
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !265
        store v3 to v6, !265
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7, !265
        store v0 to v8, !265
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9, !265
        v11 = const u64 0
        store v11 to v10, !265
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer, !265 {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !384
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14, !265
        store v12 to v15, !385
        v16 = load v13, !265
        br block0(v16), !265

        block0(v17: { { u64, u64, u64 } }):
        v18 = ptr_to_int v17 to u64, !283
        v19 = int_to_ptr v18 to ptr { { u64, u64, u64 } }, !283
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { u64, u64, u64 }, v20, !386
        v22 = load v21, !283
        v23 = asm(buffer: v22) -> { u64, u64, u64 } buffer, !283 {
        }
        v24 = get_local ptr { u64, u64, u64 }, __anon_00, !283
        store v23 to v24, !283
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !283
        v27 = load v26, !283
        v28 = int_to_ptr v27 to ptr u8, !283
        v29 = const u64 1
        v30 = get_elem_ptr v24, ptr u64, v29, !283
        v31 = load v30, !283
        v32 = const u64 2
        v33 = get_elem_ptr v24, ptr u64, v32, !283
        v34 = load v33, !283
        v35 = ptr_to_int v28 to u64, !283
        v36 = add v35, v34, !283
        v37 = int_to_ptr v36 to ptr bool, !283
        store item to v37, !283
        v38 = const u64 1
        v39 = add v34, v38, !283
        v40 = ptr_to_int v28 to u64, !283
        v41 = get_local ptr { u64, u64, u64 }, __anon_10, !283
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !283
        store v40 to v43, !283
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr u64, v44, !283
        store v31 to v45, !283
        v46 = const u64 2
        v47 = get_elem_ptr v41, ptr u64, v46, !283
        store v39 to v47, !283
        v48 = asm(buffer: v41) -> { u64, u64, u64 } buffer, !283 {
        }
        v49 = get_local ptr { { u64, u64, u64 } }, __anon_2, !387
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { u64, u64, u64 }, v50, !283
        store v48 to v51, !388
        v52 = load v49, !283
        br block1(v52), !283

        block1(v53: { { u64, u64, u64 } }):
        v54 = get_local ptr { { u64, u64, u64 } }, buffer, !319
        store v53 to v54, !319
        v55 = get_local ptr { { u64, u64, u64 } }, buffer, !322
        v56 = load v55
        v57 = ptr_to_int v56 to u64, !324
        v58 = int_to_ptr v57 to ptr { { u64, u64, u64 } }, !324
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64, u64 }, v59, !389
        v61 = load v60, !324
        v62 = asm(buffer: v61) -> { u64, u64, u64 } buffer, !324 {
        }
        v63 = get_local ptr { u64, u64, u64 }, __anon_01, !324
        store v62 to v63, !324
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !324
        v66 = load v65, !324
        v67 = int_to_ptr v66 to ptr u8, !324
        v68 = const u64 1
        v69 = get_elem_ptr v63, ptr u64, v68, !324
        v70 = load v69, !324
        v71 = const u64 2
        v72 = get_elem_ptr v63, ptr u64, v71, !324
        v73 = load v72, !324
        v74 = ptr_to_int v67 to u64, !324
        v75 = get_local ptr { u64, u64 }, __anon_11, !324
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr u64, v76, !324
        store v74 to v77, !324
        v78 = const u64 1
        v79 = get_elem_ptr v75, ptr u64, v78, !324
        store v73 to v79, !324
        v80 = asm(s: v75) -> slice s, !324 {
        }
        br block2(v80), !324

        block2(v81: slice):
        ret slice v81
    }

    pub fn abi_encode_39(self !390: bool, buffer !391: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !392 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !286
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = add v17, v16
        v19 = int_to_ptr v18 to ptr bool
        store self to v19
        v20 = const u64 1
        v21 = add v16, v20
        v22 = ptr_to_int v10 to u64
        v23 = get_local ptr { u64, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v22 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v13 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, ptr u64, v28
        store v21 to v29
        v30 = asm(buffer: v23) -> { u64, u64, u64 } buffer {
        }
        v31 = get_local ptr { { u64, u64, u64 } }, __anon_2, !313
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { u64, u64, u64 }, v32
        store v30 to v33, !313
        v34 = load v31
        ret { { u64, u64, u64 } } v34
    }

    pub fn new_40() -> { { u64, u64, u64 } }, !393 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !277
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !277
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_41(self !394: { { u64, u64, u64 } }) -> slice, !395 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !286
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!3 = span !2 7904 7970
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 199 210
!7 = (!4 !6)
!8 = span !5 188 211
!9 = (!4 !8)
!10 = (!4 !8)
!11 = span !5 216 231
!12 = (!4 !11)
!13 = span !5 229 230
!14 = (!4 !11)
!15 = span !5 236 251
!16 = (!4 !15)
!17 = span !5 249 250
!18 = (!4 !15)
!19 = span !5 256 271
!20 = (!4 !19)
!21 = span !5 269 270
!22 = (!4 !19)
!23 = span !5 276 290
!24 = (!4 !23)
!25 = span !5 288 289
!26 = (!4 !23)
!27 = span !5 309 313
!28 = (!4 !27)
!29 = span !5 295 314
!30 = (!4 !29)
!31 = (!4 !29)
!32 = span !5 319 366
!33 = (!4 !32)
!34 = (!4 !32)
!35 = span !5 389 399
!36 = (!4 !35)
!37 = span !5 390 395
!38 = (!4 !35)
!39 = (!4 !35)
!40 = (!4 !35)
!41 = span !5 372 400
!42 = (!4 !41)
!43 = (!4 !41)
!44 = span !5 424 487
!45 = (!4 !44)
!46 = span !5 454 459
!47 = (!4 !44)
!48 = span !5 478 480
!49 = (!4 !44)
!50 = span !5 406 488
!51 = (!4 !50)
!52 = (!4 !50)
!53 = span !5 502 520
!54 = span !5 136 160
!55 = (!4 !53 !54)
!56 = (!4 !53)
!57 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!58 = span !57 9991 9996
!59 = span !5 501 520
!60 = (!4 !59)
!61 = (!4 !59)
!62 = span !5 494 521
!63 = (!4 !62)
!64 = span !5 535 553
!65 = (!4 !64 !54)
!66 = (!4 !64)
!67 = span !5 534 553
!68 = (!4 !67)
!69 = (!4 !67)
!70 = span !5 527 554
!71 = (!4 !70)
!72 = span !5 568 586
!73 = (!4 !72 !54)
!74 = (!4 !72)
!75 = span !5 567 586
!76 = (!4 !75)
!77 = (!4 !75)
!78 = span !5 560 587
!79 = (!4 !78)
!80 = span !5 601 618
!81 = (!4 !80 !54)
!82 = (!4 !80)
!83 = span !5 600 618
!84 = (!4 !83)
!85 = (!4 !83)
!86 = span !5 593 619
!87 = (!4 !86)
!88 = span !5 644 654
!89 = (!4 !88)
!90 = span !5 632 655
!91 = (!4 !90 !54)
!92 = (!4 !90)
!93 = span !5 625 656
!94 = (!4 !93)
!95 = span !5 681 692
!96 = (!4 !95)
!97 = span !5 669 693
!98 = (!4 !97 !54)
!99 = (!4 !97)
!100 = span !5 662 694
!101 = (!4 !100)
!102 = span !5 730 734
!103 = (!4 !102)
!104 = span !5 719 742
!105 = (!4 !104)
!106 = (!4 !104)
!107 = span !5 720 724
!108 = (!4 !104)
!109 = (!4 !104)
!110 = span !5 726 728
!111 = (!4 !104)
!112 = (!4 !104)
!113 = (!4 !104)
!114 = (!4 !104)
!115 = span !5 736 741
!116 = (!4 !104)
!117 = span !5 707 743
!118 = (!4 !117 !54)
!119 = (!4 !117)
!120 = span !5 700 744
!121 = (!4 !120)
!122 = span !5 769 770
!123 = (!4 !122)
!124 = span !5 757 771
!125 = (!4 !124 !54)
!126 = (!4 !124)
!127 = span !5 750 772
!128 = (!4 !127)
!129 = span !5 797 798
!130 = (!4 !129)
!131 = span !5 785 799
!132 = (!4 !131 !54)
!133 = (!4 !131)
!134 = span !5 778 800
!135 = (!4 !134)
!136 = span !5 814 830
!137 = (!4 !136)
!138 = span !5 834 835
!139 = span !5 814 835
!140 = (!4 !139)
!141 = (!4 !139)
!142 = span !5 807 836
!143 = (!4 !142)
!144 = span !5 849 865
!145 = (!4 !144)
!146 = span !5 869 870
!147 = span !5 849 870
!148 = (!4 !147)
!149 = (!4 !147)
!150 = span !5 842 871
!151 = (!4 !150)
!152 = span !5 884 900
!153 = (!4 !152)
!154 = span !5 904 905
!155 = span !5 884 905
!156 = (!4 !155)
!157 = (!4 !155)
!158 = span !5 877 906
!159 = (!4 !158)
!160 = span !5 919 934
!161 = (!4 !160)
!162 = span !5 938 939
!163 = span !5 919 939
!164 = (!4 !163)
!165 = (!4 !163)
!166 = span !5 912 940
!167 = (!4 !166)
!168 = span !5 953 970
!169 = (!4 !168)
!170 = span !5 974 976
!171 = span !5 953 976
!172 = (!4 !171)
!173 = (!4 !171)
!174 = span !5 946 977
!175 = (!4 !174)
!176 = span !5 990 1010
!177 = (!4 !176)
!178 = span !5 1014 1016
!179 = span !5 990 1016
!180 = (!4 !179)
!181 = (!4 !179)
!182 = span !5 983 1017
!183 = (!4 !182)
!184 = span !5 1030 1051
!185 = (!4 !184)
!186 = span !5 1055 1057
!187 = span !5 1030 1057
!188 = (!4 !187)
!189 = (!4 !187)
!190 = span !5 1023 1058
!191 = (!4 !190)
!192 = span !5 1071 1094
!193 = (!4 !192)
!194 = span !5 1098 1100
!195 = span !5 1071 1100
!196 = (!4 !195)
!197 = (!4 !195)
!198 = span !5 1064 1101
!199 = (!4 !198)
!200 = span !5 1127 1128
!201 = (!4 !200)
!202 = span !5 1115 1129
!203 = (!4 !202)
!204 = span !5 1133 1134
!205 = span !5 1115 1134
!206 = (!4 !205)
!207 = (!4 !205)
!208 = span !5 1108 1135
!209 = (!4 !208)
!210 = span !5 1160 1161
!211 = (!4 !210)
!212 = span !5 1148 1162
!213 = (!4 !212)
!214 = span !5 1166 1167
!215 = span !5 1148 1167
!216 = (!4 !215)
!217 = (!4 !215)
!218 = span !5 1141 1168
!219 = (!4 !218)
!220 = span !5 1193 1194
!221 = (!4 !220)
!222 = span !5 1181 1195
!223 = (!4 !222)
!224 = span !5 1199 1200
!225 = span !5 1181 1200
!226 = (!4 !225)
!227 = (!4 !225)
!228 = span !5 1174 1201
!229 = (!4 !228)
!230 = span !5 1226 1227
!231 = (!4 !230)
!232 = span !5 1214 1228
!233 = (!4 !232)
!234 = span !5 1232 1233
!235 = span !5 1214 1233
!236 = (!4 !235)
!237 = (!4 !235)
!238 = span !5 1207 1234
!239 = (!4 !238)
!240 = span !5 1259 1260
!241 = (!4 !240)
!242 = span !5 1247 1261
!243 = (!4 !242)
!244 = span !5 1265 1267
!245 = span !5 1247 1267
!246 = (!4 !245)
!247 = (!4 !245)
!248 = span !5 1240 1268
!249 = (!4 !248)
!250 = span !5 1293 1294
!251 = (!4 !250)
!252 = span !5 1281 1295
!253 = (!4 !252)
!254 = span !5 1299 1301
!255 = span !5 1281 1301
!256 = (!4 !255)
!257 = (!4 !255)
!258 = span !5 1274 1302
!259 = (!4 !258)
!260 = span !5 1309 1313
!261 = span !0 48 74
!262 = span !0 107 113
!263 = span !0 92 114
!264 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!265 = span !264 64237 64250
!266 = (!263 !265)
!267 = (!263 !265)
!268 = (!263 !265)
!269 = (!263 !265)
!270 = (!263 !265)
!271 = (!263 !265)
!272 = (!263 !265)
!273 = (!263 !265)
!274 = (!263 !265)
!275 = (!263 !265)
!276 = (!263 !265)
!277 = span !264 159 222
!278 = (!263 !265 !277)
!279 = (!263 !265)
!280 = (!263 !265 !277)
!281 = (!263 !265)
!282 = (!263 !265)
!283 = span !264 64221 64251
!284 = (!263 !283)
!285 = (!263 !283)
!286 = span !264 55 82
!287 = (!263 !283 !286)
!288 = (!263 !283)
!289 = (!263 !283)
!290 = (!263 !283)
!291 = (!263 !283)
!292 = (!263 !283)
!293 = (!263 !283)
!294 = (!263 !283)
!295 = (!263 !283)
!296 = (!263 !283)
!297 = (!263 !283)
!298 = (!263 !283)
!299 = (!263 !283)
!300 = (!263 !283)
!301 = (!263 !283)
!302 = (!263 !283)
!303 = (!263 !283)
!304 = (!263 !283)
!305 = (!263 !283)
!306 = (!263 !283)
!307 = (!263 !283)
!308 = (!263 !283)
!309 = (!263 !283)
!310 = (!263 !283)
!311 = (!263 !283)
!312 = (!263 !283)
!313 = span !264 3836 3919
!314 = (!263 !283 !313)
!315 = (!263 !283)
!316 = (!263 !283 !313)
!317 = (!263 !283)
!318 = (!263 !283)
!319 = span !264 64208 64252
!320 = (!263 !319)
!321 = (!263 !319)
!322 = span !264 64257 64263
!323 = (!263 !322)
!324 = span !264 64257 64278
!325 = (!263 !324)
!326 = (!263 !324)
!327 = (!263 !324 !286)
!328 = (!263 !324)
!329 = (!263 !324)
!330 = (!263 !324)
!331 = (!263 !324)
!332 = (!263 !324)
!333 = (!263 !324)
!334 = (!263 !324)
!335 = (!263 !324)
!336 = (!263 !324)
!337 = (!263 !324)
!338 = (!263 !324)
!339 = (!263 !324)
!340 = (!263 !324)
!341 = (!263 !324)
!342 = (!263 !324)
!343 = (!263 !324)
!344 = (!263 !324)
!345 = (!263 !324)
!346 = (!263 !324)
!347 = span !5 164 1315
!348 = (!53 !54)
!349 = (!64 !54)
!350 = (!72 !54)
!351 = (!80 !54)
!352 = (!90 !54)
!353 = (!97 !54)
!354 = (!117 !54)
!355 = (!124 !54)
!356 = (!131 !54)
!357 = span !2 7873 7976
!358 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!359 = span !358 935 944
!360 = span !358 921 1019
!361 = span !358 961 971
!362 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!363 = span !362 1038 1059
!364 = span !358 982 1010
!365 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!366 = span !365 691 705
!367 = (!364 !366)
!368 = span !57 9956 9960
!369 = span !57 9949 10003
!370 = span !365 669 673
!371 = span !365 655 707
!372 = span !5 111 117
!373 = span !5 93 162
!374 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/intrinsics.sw"
!375 = span !374 397 469
!376 = span !57 12645 12649
!377 = span !57 12651 12656
!378 = span !57 12639 12705
!379 = span !374 913 964
!380 = span !374 1572 1575
!381 = span !374 1550 1618
!382 = span !264 64156 64160
!383 = span !264 64139 64280
!384 = (!265 !277)
!385 = (!265 !277)
!386 = (!283 !286)
!387 = (!283 !313)
!388 = (!283 !313)
!389 = (!324 !286)
!390 = span !264 3794 3798
!391 = span !264 3800 3806
!392 = span !264 3780 3925
!393 = span !264 128 228
!394 = span !264 281 285
!395 = span !264 265 357

// IR: [fn-dce] Dead function elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br main_0_block0(v0), !7

        main_0_block0(v1: b256):
        v2 = get_local ptr b256, zero, !9
        store v1 to v2, !10
        v3 = get_local ptr u64, a, !12
        v4 = const u64 1, !13
        store v4 to v3, !14
        v5 = get_local ptr u64, b, !16
        v6 = const u64 1, !17
        store v6 to v5, !18
        v7 = get_local ptr u64, c, !20
        v8 = const u64 1, !21
        store v8 to v7, !22
        v9 = get_local ptr u8, d, !24
        v10 = const u8 1, !25
        store v10 to v9, !26
        v11 = get_local ptr b256, zero, !28
        v12 = load v11, !4
        v13 = get_local ptr b256, e, !30
        store v12 to v13, !31
        v14 = get_local ptr string<11>, f, !33
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !34
        v16 = get_local ptr [u64; 3], __anon_0, !36
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !4
        v19 = const u64 42, !37
        store v19 to v18, !38
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20, !4
        v22 = const u64 42, !37
        store v22 to v21, !39
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23, !4
        v25 = const u64 42, !37
        store v25 to v24, !40
        v26 = load v16, !4
        v27 = get_local ptr [u64; 3], test_array, !42
        store v26 to v27, !43
        v28 = get_local ptr { bool, u64 }, __anon_1, !45
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29, !4
        v31 = const bool false, !46
        store v31 to v30, !47
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32, !4
        v34 = const u64 11, !48
        store v34 to v33, !49
        v35 = load v28, !4
        v36 = get_local ptr { bool, u64 }, test_struct, !51
        store v35 to v36, !52
        v37 = const bool false
        br main_0_is_ref_type_9_block0(v37), !55

        main_0_is_ref_type_9_block0(v38: bool):
        br main_0_block1(v38), !56

        main_0_block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !60
        br main_0_block2(v41), !61

        main_0_block2(v42: bool):
        v43 = call assert_2(v42), !63
        br main_0_is_ref_type_9_block04(v37), !65

        main_0_is_ref_type_9_block04(v44: bool):
        br main_0_block3(v44), !66

        main_0_block3(v45: bool):
        v46 = cmp eq v45 v40, !68
        br main_0_block5(v46), !69

        main_0_block5(v47: bool):
        v48 = call assert_2(v47), !71
        br main_0_is_ref_type_9_block07(v37), !73

        main_0_is_ref_type_9_block07(v49: bool):
        br main_0_block6(v49), !74

        main_0_block6(v50: bool):
        v51 = cmp eq v50 v40, !76
        br main_0_block8(v51), !77

        main_0_block8(v52: bool):
        v53 = call assert_2(v52), !79
        br main_0_is_ref_type_11_block0(v37), !81

        main_0_is_ref_type_11_block0(v54: bool):
        br main_0_block9(v54), !82

        main_0_block9(v55: bool):
        v56 = cmp eq v55 v40, !84
        br main_0_block10(v56), !85

        main_0_block10(v57: bool):
        v58 = call assert_2(v57), !87
        v59 = get_local ptr [u64; 3], test_array, !89
        v60 = load v59, !4
        v61 = const bool true
        br main_0_is_ref_type_13_block0(v61), !91

        main_0_is_ref_type_13_block0(v62: bool):
        br main_0_block11(v62), !92

        main_0_block11(v63: bool):
        v64 = call assert_2(v63), !94
        v65 = get_local ptr { bool, u64 }, test_struct, !96
        v66 = load v65, !4
        br main_0_is_ref_type_15_block0(v61), !98

        main_0_is_ref_type_15_block0(v67: bool):
        br main_0_block12(v67), !99

        main_0_block12(v68: bool):
        v69 = call assert_2(v68), !101
        v70 = get_local ptr b256, zero, !103
        v71 = load v70, !4
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !105
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !106
        v75 = const bool true, !107
        store v75 to v74, !108
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !109
        v78 = const u64 11, !110
        store v78 to v77, !111
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !112
        store v71 to v80, !113
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !114
        v83 = const u8 255, !115
        store v83 to v82, !116
        v84 = load v72, !4
        br main_0_is_ref_type_17_block0(v61), !118

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !119

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !121
        v88 = get_local ptr b256, e, !123
        v89 = load v88, !4
        br main_0_is_ref_type_19_block0(v61), !125

        main_0_is_ref_type_19_block0(v90: bool):
        br main_0_block14(v90), !126

        main_0_block14(v91: bool):
        v92 = call assert_2(v91), !128
        v93 = get_local ptr string<11>, f, !130
        v94 = load v93, !4
        br main_0_is_ref_type_21_block0(v61), !132

        main_0_is_ref_type_21_block0(v95: bool):
        br main_0_block15(v95), !133

        main_0_block15(v96: bool):
        v97 = call assert_2(v96), !135
        v98 = const u64 8
        br main_0_block16(v98), !137

        main_0_block16(v99: u64):
        v100 = const u64 8, !138
        v101 = cmp eq v99 v100, !140
        br main_0_block17(v101), !141

        main_0_block17(v102: bool):
        v103 = call assert_2(v102), !143
        br main_0_block18(v98), !145

        main_0_block18(v104: u64):
        v105 = const u64 8, !146
        v106 = cmp eq v104 v105, !148
        br main_0_block19(v106), !149

        main_0_block19(v107: bool):
        v108 = call assert_2(v107), !151
        br main_0_block20(v98), !153

        main_0_block20(v109: u64):
        v110 = const u64 8, !154
        v111 = cmp eq v109 v110, !156
        br main_0_block21(v111), !157

        main_0_block21(v112: bool):
        v113 = call assert_2(v112), !159
        v114 = const u64 1
        br main_0_block22(v114), !161

        main_0_block22(v115: u64):
        v116 = const u64 1, !162
        v117 = cmp eq v115 v116, !164
        br main_0_block23(v117), !165

        main_0_block23(v118: bool):
        v119 = call assert_2(v118), !167
        v120 = const u64 32
        br main_0_block24(v120), !169

        main_0_block24(v121: u64):
        v122 = const u64 32, !170
        v123 = cmp eq v121 v122, !172
        br main_0_block25(v123), !173

        main_0_block25(v124: bool):
        v125 = call assert_2(v124), !175
        v126 = const u64 16
        br main_0_block26(v126), !177

        main_0_block26(v127: u64):
        v128 = const u64 16, !178
        v129 = cmp eq v127 v128, !180
        br main_0_block27(v129), !181

        main_0_block27(v130: bool):
        v131 = call assert_2(v130), !183
        v132 = const u64 24
        br main_0_block28(v132), !185

        main_0_block28(v133: u64):
        v134 = const u64 24, !186
        v135 = cmp eq v133 v134, !188
        br main_0_block29(v135), !189

        main_0_block29(v136: bool):
        v137 = call assert_2(v136), !191
        br main_0_block30(v126), !193

        main_0_block30(v138: u64):
        v139 = const u64 16, !194
        v140 = cmp eq v138 v139, !196
        br main_0_block31(v140), !197

        main_0_block31(v141: bool):
        v142 = call assert_2(v141), !199
        v143 = get_local ptr u64, a, !201
        v144 = load v143, !4
        v145 = const u64 8
        br main_0_block32(v145), !203

        main_0_block32(v146: u64):
        v147 = const u64 8, !204
        v148 = cmp eq v146 v147, !206
        br main_0_block33(v148), !207

        main_0_block33(v149: bool):
        v150 = call assert_2(v149), !209
        v151 = get_local ptr u64, b, !211
        v152 = load v151, !4
        br main_0_block34(v145), !213

        main_0_block34(v153: u64):
        v154 = const u64 8, !214
        v155 = cmp eq v153 v154, !216
        br main_0_block35(v155), !217

        main_0_block35(v156: bool):
        v157 = call assert_2(v156), !219
        v158 = get_local ptr u64, c, !221
        v159 = load v158, !4
        br main_0_block36(v145), !223

        main_0_block36(v160: u64):
        v161 = const u64 8, !224
        v162 = cmp eq v160 v161, !226
        br main_0_block37(v162), !227

        main_0_block37(v163: bool):
        v164 = call assert_2(v163), !229
        v165 = get_local ptr u8, d, !231
        v166 = load v165, !4
        v167 = const u64 1
        br main_0_block38(v167), !233

        main_0_block38(v168: u64):
        v169 = const u64 1, !234
        v170 = cmp eq v168 v169, !236
        br main_0_block39(v170), !237

        main_0_block39(v171: bool):
        v172 = call assert_2(v171), !239
        v173 = get_local ptr b256, e, !241
        v174 = load v173, !4
        v175 = const u64 32
        br main_0_block40(v175), !243

        main_0_block40(v176: u64):
        v177 = const u64 32, !244
        v178 = cmp eq v176 v177, !246
        br main_0_block41(v178), !247

        main_0_block41(v179: bool):
        v180 = call assert_2(v179), !249
        v181 = get_local ptr string<11>, f, !251
        v182 = load v181, !4
        v183 = const u64 16
        br main_0_block42(v183), !253

        main_0_block42(v184: u64):
        v185 = const u64 16, !254
        v186 = cmp eq v184 v185, !256
        br main_0_block43(v186), !257

        main_0_block43(v187: bool):
        v188 = call assert_2(v187), !259
        v189 = const bool true, !260
        br block0(v189), !4

        block0(v190: bool):
        v191 = get_local ptr bool, result, !261
        store v190 to v191, !261
        v192 = get_local ptr bool, result, !262
        v193 = load v192
        v194 = const u64 1024
        v195 = asm(cap: v194) -> u64 hp, !266 {
            aloc   cap
        }
        v196 = int_to_ptr v195 to ptr u8, !267
        v197 = ptr_to_int v196 to u64, !268
        v198 = get_local ptr { u64, u64, u64 }, __anon_00, !269
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr u64, v199, !270
        store v197 to v200, !271
        v201 = const u64 1
        v202 = get_elem_ptr v198, ptr u64, v201, !272
        store v194 to v202, !273
        v203 = const u64 2
        v204 = get_elem_ptr v198, ptr u64, v203, !274
        v205 = const u64 0
        store v205 to v204, !275
        v206 = asm(buffer: v198) -> { u64, u64, u64 } buffer, !276 {
        }
        v207 = get_local ptr { { u64, u64, u64 } }, __anon_10, !278
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr { u64, u64, u64 }, v208, !279
        store v206 to v209, !280
        v210 = load v207, !281
        br encode_38_block0(v210), !282

        encode_38_block0(v211: { { u64, u64, u64 } }):
        v212 = ptr_to_int v211 to u64, !284
        v213 = int_to_ptr v212 to ptr { { u64, u64, u64 } }, !285
        v214 = const u64 0
        v215 = get_elem_ptr v213, ptr { u64, u64, u64 }, v214, !287
        v216 = load v215, !288
        v217 = asm(buffer: v216) -> { u64, u64, u64 } buffer, !289 {
        }
        v218 = get_local ptr { u64, u64, u64 }, __anon_000, !290
        store v217 to v218, !291
        v219 = const u64 0
        v220 = get_elem_ptr v218, ptr u64, v219, !292
        v221 = load v220, !293
        v222 = int_to_ptr v221 to ptr u8, !294
        v223 = const u64 1
        v224 = get_elem_ptr v218, ptr u64, v223, !295
        v225 = load v224, !296
        v226 = const u64 2
        v227 = get_elem_ptr v218, ptr u64, v226, !297
        v228 = load v227, !298
        v229 = ptr_to_int v222 to u64, !299
        v230 = add v229, v228, !300
        v231 = int_to_ptr v230 to ptr bool, !301
        store v193 to v231, !302
        v232 = const u64 1
        v233 = add v228, v232, !303
        v234 = ptr_to_int v222 to u64, !304
        v235 = get_local ptr { u64, u64, u64 }, __anon_100, !305
        v236 = const u64 0
        v237 = get_elem_ptr v235, ptr u64, v236, !306
        store v234 to v237, !307
        v238 = const u64 1
        v239 = get_elem_ptr v235, ptr u64, v238, !308
        store v225 to v239, !309
        v240 = const u64 2
        v241 = get_elem_ptr v235, ptr u64, v240, !310
        store v233 to v241, !311
        v242 = asm(buffer: v235) -> { u64, u64, u64 } buffer, !312 {
        }
        v243 = get_local ptr { { u64, u64, u64 } }, __anon_20, !314
        v244 = const u64 0
        v245 = get_elem_ptr v243, ptr { u64, u64, u64 }, v244, !315
        store v242 to v245, !316
        v246 = load v243, !317
        br encode_38_block1(v246), !318

        encode_38_block1(v247: { { u64, u64, u64 } }):
        v248 = get_local ptr { { u64, u64, u64 } }, buffer, !320
        store v247 to v248, !321
        v249 = get_local ptr { { u64, u64, u64 } }, buffer, !323
        v250 = load v249, !263
        v251 = ptr_to_int v250 to u64, !325
        v252 = int_to_ptr v251 to ptr { { u64, u64, u64 } }, !326
        v253 = const u64 0
        v254 = get_elem_ptr v252, ptr { u64, u64, u64 }, v253, !327
        v255 = load v254, !328
        v256 = asm(buffer: v255) -> { u64, u64, u64 } buffer, !329 {
        }
        v257 = get_local ptr { u64, u64, u64 }, __anon_01, !330
        store v256 to v257, !331
        v258 = const u64 0
        v259 = get_elem_ptr v257, ptr u64, v258, !332
        v260 = load v259, !333
        v261 = int_to_ptr v260 to ptr u8, !334
        v262 = const u64 1
        v263 = get_elem_ptr v257, ptr u64, v262, !335
        v264 = load v263, !336
        v265 = const u64 2
        v266 = get_elem_ptr v257, ptr u64, v265, !337
        v267 = load v266, !338
        v268 = ptr_to_int v261 to u64, !339
        v269 = get_local ptr { u64, u64 }, __anon_11, !340
        v270 = const u64 0
        v271 = get_elem_ptr v269, ptr u64, v270, !341
        store v268 to v271, !342
        v272 = const u64 1
        v273 = get_elem_ptr v269, ptr u64, v272, !343
        store v267 to v273, !344
        v274 = asm(s: v269) -> slice s, !345 {
        }
        br encode_38_block2(v274), !346

        encode_38_block2(v275: slice):
        br block1(v275), !263

        block1(v276: slice):
        ret slice v276
    }

    pub fn assert_2(condition !348: bool) -> (), !349 {
        entry(condition: bool):
        v0 = const bool false, !58
        v1 = cmp eq condition v0, !350
        br block3(v1), !350

        block3(v2: bool):
        cbr v2, block0(), block1(), !350

        block0():
        v3 = const u64 18446744073709486084, !352
        revert v3, !356

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!3 = span !2 7904 7970
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 199 210
!7 = (!4 !6)
!8 = span !5 188 211
!9 = (!4 !8)
!10 = (!4 !8)
!11 = span !5 216 231
!12 = (!4 !11)
!13 = span !5 229 230
!14 = (!4 !11)
!15 = span !5 236 251
!16 = (!4 !15)
!17 = span !5 249 250
!18 = (!4 !15)
!19 = span !5 256 271
!20 = (!4 !19)
!21 = span !5 269 270
!22 = (!4 !19)
!23 = span !5 276 290
!24 = (!4 !23)
!25 = span !5 288 289
!26 = (!4 !23)
!27 = span !5 309 313
!28 = (!4 !27)
!29 = span !5 295 314
!30 = (!4 !29)
!31 = (!4 !29)
!32 = span !5 319 366
!33 = (!4 !32)
!34 = (!4 !32)
!35 = span !5 389 399
!36 = (!4 !35)
!37 = span !5 390 395
!38 = (!4 !35)
!39 = (!4 !35)
!40 = (!4 !35)
!41 = span !5 372 400
!42 = (!4 !41)
!43 = (!4 !41)
!44 = span !5 424 487
!45 = (!4 !44)
!46 = span !5 454 459
!47 = (!4 !44)
!48 = span !5 478 480
!49 = (!4 !44)
!50 = span !5 406 488
!51 = (!4 !50)
!52 = (!4 !50)
!53 = span !5 502 520
!54 = span !5 136 160
!55 = (!4 !53 !54)
!56 = (!4 !53)
!57 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!58 = span !57 9991 9996
!59 = span !5 501 520
!60 = (!4 !59)
!61 = (!4 !59)
!62 = span !5 494 521
!63 = (!4 !62)
!64 = span !5 535 553
!65 = (!4 !64 !54)
!66 = (!4 !64)
!67 = span !5 534 553
!68 = (!4 !67)
!69 = (!4 !67)
!70 = span !5 527 554
!71 = (!4 !70)
!72 = span !5 568 586
!73 = (!4 !72 !54)
!74 = (!4 !72)
!75 = span !5 567 586
!76 = (!4 !75)
!77 = (!4 !75)
!78 = span !5 560 587
!79 = (!4 !78)
!80 = span !5 601 618
!81 = (!4 !80 !54)
!82 = (!4 !80)
!83 = span !5 600 618
!84 = (!4 !83)
!85 = (!4 !83)
!86 = span !5 593 619
!87 = (!4 !86)
!88 = span !5 644 654
!89 = (!4 !88)
!90 = span !5 632 655
!91 = (!4 !90 !54)
!92 = (!4 !90)
!93 = span !5 625 656
!94 = (!4 !93)
!95 = span !5 681 692
!96 = (!4 !95)
!97 = span !5 669 693
!98 = (!4 !97 !54)
!99 = (!4 !97)
!100 = span !5 662 694
!101 = (!4 !100)
!102 = span !5 730 734
!103 = (!4 !102)
!104 = span !5 719 742
!105 = (!4 !104)
!106 = (!4 !104)
!107 = span !5 720 724
!108 = (!4 !104)
!109 = (!4 !104)
!110 = span !5 726 728
!111 = (!4 !104)
!112 = (!4 !104)
!113 = (!4 !104)
!114 = (!4 !104)
!115 = span !5 736 741
!116 = (!4 !104)
!117 = span !5 707 743
!118 = (!4 !117 !54)
!119 = (!4 !117)
!120 = span !5 700 744
!121 = (!4 !120)
!122 = span !5 769 770
!123 = (!4 !122)
!124 = span !5 757 771
!125 = (!4 !124 !54)
!126 = (!4 !124)
!127 = span !5 750 772
!128 = (!4 !127)
!129 = span !5 797 798
!130 = (!4 !129)
!131 = span !5 785 799
!132 = (!4 !131 !54)
!133 = (!4 !131)
!134 = span !5 778 800
!135 = (!4 !134)
!136 = span !5 814 830
!137 = (!4 !136)
!138 = span !5 834 835
!139 = span !5 814 835
!140 = (!4 !139)
!141 = (!4 !139)
!142 = span !5 807 836
!143 = (!4 !142)
!144 = span !5 849 865
!145 = (!4 !144)
!146 = span !5 869 870
!147 = span !5 849 870
!148 = (!4 !147)
!149 = (!4 !147)
!150 = span !5 842 871
!151 = (!4 !150)
!152 = span !5 884 900
!153 = (!4 !152)
!154 = span !5 904 905
!155 = span !5 884 905
!156 = (!4 !155)
!157 = (!4 !155)
!158 = span !5 877 906
!159 = (!4 !158)
!160 = span !5 919 934
!161 = (!4 !160)
!162 = span !5 938 939
!163 = span !5 919 939
!164 = (!4 !163)
!165 = (!4 !163)
!166 = span !5 912 940
!167 = (!4 !166)
!168 = span !5 953 970
!169 = (!4 !168)
!170 = span !5 974 976
!171 = span !5 953 976
!172 = (!4 !171)
!173 = (!4 !171)
!174 = span !5 946 977
!175 = (!4 !174)
!176 = span !5 990 1010
!177 = (!4 !176)
!178 = span !5 1014 1016
!179 = span !5 990 1016
!180 = (!4 !179)
!181 = (!4 !179)
!182 = span !5 983 1017
!183 = (!4 !182)
!184 = span !5 1030 1051
!185 = (!4 !184)
!186 = span !5 1055 1057
!187 = span !5 1030 1057
!188 = (!4 !187)
!189 = (!4 !187)
!190 = span !5 1023 1058
!191 = (!4 !190)
!192 = span !5 1071 1094
!193 = (!4 !192)
!194 = span !5 1098 1100
!195 = span !5 1071 1100
!196 = (!4 !195)
!197 = (!4 !195)
!198 = span !5 1064 1101
!199 = (!4 !198)
!200 = span !5 1127 1128
!201 = (!4 !200)
!202 = span !5 1115 1129
!203 = (!4 !202)
!204 = span !5 1133 1134
!205 = span !5 1115 1134
!206 = (!4 !205)
!207 = (!4 !205)
!208 = span !5 1108 1135
!209 = (!4 !208)
!210 = span !5 1160 1161
!211 = (!4 !210)
!212 = span !5 1148 1162
!213 = (!4 !212)
!214 = span !5 1166 1167
!215 = span !5 1148 1167
!216 = (!4 !215)
!217 = (!4 !215)
!218 = span !5 1141 1168
!219 = (!4 !218)
!220 = span !5 1193 1194
!221 = (!4 !220)
!222 = span !5 1181 1195
!223 = (!4 !222)
!224 = span !5 1199 1200
!225 = span !5 1181 1200
!226 = (!4 !225)
!227 = (!4 !225)
!228 = span !5 1174 1201
!229 = (!4 !228)
!230 = span !5 1226 1227
!231 = (!4 !230)
!232 = span !5 1214 1228
!233 = (!4 !232)
!234 = span !5 1232 1233
!235 = span !5 1214 1233
!236 = (!4 !235)
!237 = (!4 !235)
!238 = span !5 1207 1234
!239 = (!4 !238)
!240 = span !5 1259 1260
!241 = (!4 !240)
!242 = span !5 1247 1261
!243 = (!4 !242)
!244 = span !5 1265 1267
!245 = span !5 1247 1267
!246 = (!4 !245)
!247 = (!4 !245)
!248 = span !5 1240 1268
!249 = (!4 !248)
!250 = span !5 1293 1294
!251 = (!4 !250)
!252 = span !5 1281 1295
!253 = (!4 !252)
!254 = span !5 1299 1301
!255 = span !5 1281 1301
!256 = (!4 !255)
!257 = (!4 !255)
!258 = span !5 1274 1302
!259 = (!4 !258)
!260 = span !5 1309 1313
!261 = span !0 48 74
!262 = span !0 107 113
!263 = span !0 92 114
!264 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!265 = span !264 64237 64250
!266 = (!263 !265)
!267 = (!263 !265)
!268 = (!263 !265)
!269 = (!263 !265)
!270 = (!263 !265)
!271 = (!263 !265)
!272 = (!263 !265)
!273 = (!263 !265)
!274 = (!263 !265)
!275 = (!263 !265)
!276 = (!263 !265)
!277 = span !264 159 222
!278 = (!263 !265 !277)
!279 = (!263 !265)
!280 = (!263 !265 !277)
!281 = (!263 !265)
!282 = (!263 !265)
!283 = span !264 64221 64251
!284 = (!263 !283)
!285 = (!263 !283)
!286 = span !264 55 82
!287 = (!263 !283 !286)
!288 = (!263 !283)
!289 = (!263 !283)
!290 = (!263 !283)
!291 = (!263 !283)
!292 = (!263 !283)
!293 = (!263 !283)
!294 = (!263 !283)
!295 = (!263 !283)
!296 = (!263 !283)
!297 = (!263 !283)
!298 = (!263 !283)
!299 = (!263 !283)
!300 = (!263 !283)
!301 = (!263 !283)
!302 = (!263 !283)
!303 = (!263 !283)
!304 = (!263 !283)
!305 = (!263 !283)
!306 = (!263 !283)
!307 = (!263 !283)
!308 = (!263 !283)
!309 = (!263 !283)
!310 = (!263 !283)
!311 = (!263 !283)
!312 = (!263 !283)
!313 = span !264 3836 3919
!314 = (!263 !283 !313)
!315 = (!263 !283)
!316 = (!263 !283 !313)
!317 = (!263 !283)
!318 = (!263 !283)
!319 = span !264 64208 64252
!320 = (!263 !319)
!321 = (!263 !319)
!322 = span !264 64257 64263
!323 = (!263 !322)
!324 = span !264 64257 64278
!325 = (!263 !324)
!326 = (!263 !324)
!327 = (!263 !324 !286)
!328 = (!263 !324)
!329 = (!263 !324)
!330 = (!263 !324)
!331 = (!263 !324)
!332 = (!263 !324)
!333 = (!263 !324)
!334 = (!263 !324)
!335 = (!263 !324)
!336 = (!263 !324)
!337 = (!263 !324)
!338 = (!263 !324)
!339 = (!263 !324)
!340 = (!263 !324)
!341 = (!263 !324)
!342 = (!263 !324)
!343 = (!263 !324)
!344 = (!263 !324)
!345 = (!263 !324)
!346 = (!263 !324)
!347 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!348 = span !347 935 944
!349 = span !347 921 1019
!350 = span !347 961 971
!351 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!352 = span !351 1038 1059
!353 = span !347 982 1010
!354 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!355 = span !354 691 705
!356 = (!353 !355)

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3
        br main_0_block0(v0), !7

        main_0_block0(v1: b256):
        v2 = get_local ptr b256, zero, !9
        store v1 to v2, !10
        v3 = get_local ptr u64, a, !12
        v4 = const u64 1, !13
        store v4 to v3, !14
        v5 = get_local ptr u64, b, !16
        v6 = const u64 1, !17
        store v6 to v5, !18
        v7 = get_local ptr u64, c, !20
        v8 = const u64 1, !21
        store v8 to v7, !22
        v9 = get_local ptr u8, d, !24
        v10 = const u8 1, !25
        store v10 to v9, !26
        v11 = get_local ptr b256, zero, !28
        v12 = load v11, !4
        v13 = get_local ptr b256, e, !30
        store v12 to v13, !31
        v14 = get_local ptr string<11>, f, !33
        v15 = const string<11> "Fuel rocks!"
        store v15 to v14, !34
        v16 = get_local ptr [u64; 3], __anon_0, !36
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !4
        v19 = const u64 42, !37
        store v19 to v18, !38
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20, !4
        v22 = const u64 42, !37
        store v22 to v21, !39
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr u64, v23, !4
        v25 = const u64 42, !37
        store v25 to v24, !40
        v26 = load v16, !4
        v27 = get_local ptr [u64; 3], test_array, !42
        store v26 to v27, !43
        v28 = get_local ptr { bool, u64 }, __anon_1, !45
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr bool, v29, !4
        v31 = const bool false, !46
        store v31 to v30, !47
        v32 = const u64 1
        v33 = get_elem_ptr v28, ptr u64, v32, !4
        v34 = const u64 11, !48
        store v34 to v33, !49
        v35 = load v28, !4
        v36 = get_local ptr { bool, u64 }, test_struct, !51
        store v35 to v36, !52
        v37 = const bool false
        br main_0_is_ref_type_9_block0(v37), !55

        main_0_is_ref_type_9_block0(v38: bool):
        br main_0_block1(v38), !56

        main_0_block1(v39: bool):
        v40 = const bool false, !58
        v41 = cmp eq v39 v40, !60
        br main_0_block2(v41), !61

        main_0_block2(v42: bool):
        v43 = call assert_2(v42), !63
        br main_0_is_ref_type_9_block04(v37), !65

        main_0_is_ref_type_9_block04(v44: bool):
        br main_0_block3(v44), !66

        main_0_block3(v45: bool):
        v46 = cmp eq v45 v40, !68
        br main_0_block5(v46), !69

        main_0_block5(v47: bool):
        v48 = call assert_2(v47), !71
        br main_0_is_ref_type_9_block07(v37), !73

        main_0_is_ref_type_9_block07(v49: bool):
        br main_0_block6(v49), !74

        main_0_block6(v50: bool):
        v51 = cmp eq v50 v40, !76
        br main_0_block8(v51), !77

        main_0_block8(v52: bool):
        v53 = call assert_2(v52), !79
        br main_0_is_ref_type_11_block0(v37), !81

        main_0_is_ref_type_11_block0(v54: bool):
        br main_0_block9(v54), !82

        main_0_block9(v55: bool):
        v56 = cmp eq v55 v40, !84
        br main_0_block10(v56), !85

        main_0_block10(v57: bool):
        v58 = call assert_2(v57), !87
        v59 = const bool true
        br main_0_is_ref_type_13_block0(v59), !89

        main_0_is_ref_type_13_block0(v60: bool):
        br main_0_block11(v60), !90

        main_0_block11(v61: bool):
        v62 = call assert_2(v61), !92
        br main_0_is_ref_type_15_block0(v59), !94

        main_0_is_ref_type_15_block0(v63: bool):
        br main_0_block12(v63), !95

        main_0_block12(v64: bool):
        v65 = call assert_2(v64), !97
        v66 = get_local ptr b256, zero, !99
        v67 = load v66, !4
        v68 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !101
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr bool, v69, !102
        v71 = const bool true, !103
        store v71 to v70, !104
        v72 = const u64 1
        v73 = get_elem_ptr v68, ptr u64, v72, !105
        v74 = const u64 11, !106
        store v74 to v73, !107
        v75 = const u64 2
        v76 = get_elem_ptr v68, ptr b256, v75, !108
        store v67 to v76, !109
        v77 = const u64 3
        v78 = get_elem_ptr v68, ptr u8, v77, !110
        v79 = const u8 255, !111
        store v79 to v78, !112
        br main_0_is_ref_type_17_block0(v59), !114

        main_0_is_ref_type_17_block0(v80: bool):
        br main_0_block13(v80), !115

        main_0_block13(v81: bool):
        v82 = call assert_2(v81), !117
        br main_0_is_ref_type_19_block0(v59), !119

        main_0_is_ref_type_19_block0(v83: bool):
        br main_0_block14(v83), !120

        main_0_block14(v84: bool):
        v85 = call assert_2(v84), !122
        br main_0_is_ref_type_21_block0(v59), !124

        main_0_is_ref_type_21_block0(v86: bool):
        br main_0_block15(v86), !125

        main_0_block15(v87: bool):
        v88 = call assert_2(v87), !127
        v89 = const u64 8
        br main_0_block16(v89), !129

        main_0_block16(v90: u64):
        v91 = const u64 8, !130
        v92 = cmp eq v90 v91, !132
        br main_0_block17(v92), !133

        main_0_block17(v93: bool):
        v94 = call assert_2(v93), !135
        br main_0_block18(v89), !137

        main_0_block18(v95: u64):
        v96 = const u64 8, !138
        v97 = cmp eq v95 v96, !140
        br main_0_block19(v97), !141

        main_0_block19(v98: bool):
        v99 = call assert_2(v98), !143
        br main_0_block20(v89), !145

        main_0_block20(v100: u64):
        v101 = const u64 8, !146
        v102 = cmp eq v100 v101, !148
        br main_0_block21(v102), !149

        main_0_block21(v103: bool):
        v104 = call assert_2(v103), !151
        v105 = const u64 1
        br main_0_block22(v105), !153

        main_0_block22(v106: u64):
        v107 = const u64 1, !154
        v108 = cmp eq v106 v107, !156
        br main_0_block23(v108), !157

        main_0_block23(v109: bool):
        v110 = call assert_2(v109), !159
        v111 = const u64 32
        br main_0_block24(v111), !161

        main_0_block24(v112: u64):
        v113 = const u64 32, !162
        v114 = cmp eq v112 v113, !164
        br main_0_block25(v114), !165

        main_0_block25(v115: bool):
        v116 = call assert_2(v115), !167
        v117 = const u64 16
        br main_0_block26(v117), !169

        main_0_block26(v118: u64):
        v119 = const u64 16, !170
        v120 = cmp eq v118 v119, !172
        br main_0_block27(v120), !173

        main_0_block27(v121: bool):
        v122 = call assert_2(v121), !175
        v123 = const u64 24
        br main_0_block28(v123), !177

        main_0_block28(v124: u64):
        v125 = const u64 24, !178
        v126 = cmp eq v124 v125, !180
        br main_0_block29(v126), !181

        main_0_block29(v127: bool):
        v128 = call assert_2(v127), !183
        br main_0_block30(v117), !185

        main_0_block30(v129: u64):
        v130 = const u64 16, !186
        v131 = cmp eq v129 v130, !188
        br main_0_block31(v131), !189

        main_0_block31(v132: bool):
        v133 = call assert_2(v132), !191
        v134 = const u64 8
        br main_0_block32(v134), !193

        main_0_block32(v135: u64):
        v136 = const u64 8, !194
        v137 = cmp eq v135 v136, !196
        br main_0_block33(v137), !197

        main_0_block33(v138: bool):
        v139 = call assert_2(v138), !199
        br main_0_block34(v134), !201

        main_0_block34(v140: u64):
        v141 = const u64 8, !202
        v142 = cmp eq v140 v141, !204
        br main_0_block35(v142), !205

        main_0_block35(v143: bool):
        v144 = call assert_2(v143), !207
        br main_0_block36(v134), !209

        main_0_block36(v145: u64):
        v146 = const u64 8, !210
        v147 = cmp eq v145 v146, !212
        br main_0_block37(v147), !213

        main_0_block37(v148: bool):
        v149 = call assert_2(v148), !215
        v150 = const u64 1
        br main_0_block38(v150), !217

        main_0_block38(v151: u64):
        v152 = const u64 1, !218
        v153 = cmp eq v151 v152, !220
        br main_0_block39(v153), !221

        main_0_block39(v154: bool):
        v155 = call assert_2(v154), !223
        v156 = const u64 32
        br main_0_block40(v156), !225

        main_0_block40(v157: u64):
        v158 = const u64 32, !226
        v159 = cmp eq v157 v158, !228
        br main_0_block41(v159), !229

        main_0_block41(v160: bool):
        v161 = call assert_2(v160), !231
        v162 = const u64 16
        br main_0_block42(v162), !233

        main_0_block42(v163: u64):
        v164 = const u64 16, !234
        v165 = cmp eq v163 v164, !236
        br main_0_block43(v165), !237

        main_0_block43(v166: bool):
        v167 = call assert_2(v166), !239
        v168 = const bool true, !240
        br block0(v168), !4

        block0(v169: bool):
        v170 = get_local ptr bool, result, !241
        store v169 to v170, !241
        v171 = get_local ptr bool, result, !242
        v172 = load v171
        v173 = const u64 1024
        v174 = asm(cap: v173) -> u64 hp, !246 {
            aloc   cap
        }
        v175 = int_to_ptr v174 to ptr u8, !247
        v176 = ptr_to_int v175 to u64, !248
        v177 = get_local ptr { u64, u64, u64 }, __anon_00, !249
        v178 = const u64 0
        v179 = get_elem_ptr v177, ptr u64, v178, !250
        store v176 to v179, !251
        v180 = const u64 1
        v181 = get_elem_ptr v177, ptr u64, v180, !252
        store v173 to v181, !253
        v182 = const u64 2
        v183 = get_elem_ptr v177, ptr u64, v182, !254
        v184 = const u64 0
        store v184 to v183, !255
        v185 = asm(buffer: v177) -> { u64, u64, u64 } buffer, !256 {
        }
        v186 = get_local ptr { { u64, u64, u64 } }, __anon_10, !258
        v187 = const u64 0
        v188 = get_elem_ptr v186, ptr { u64, u64, u64 }, v187, !259
        store v185 to v188, !260
        v189 = load v186, !261
        br encode_38_block0(v189), !262

        encode_38_block0(v190: { { u64, u64, u64 } }):
        v191 = ptr_to_int v190 to u64, !264
        v192 = int_to_ptr v191 to ptr { { u64, u64, u64 } }, !265
        v193 = const u64 0
        v194 = get_elem_ptr v192, ptr { u64, u64, u64 }, v193, !267
        v195 = load v194, !268
        v196 = asm(buffer: v195) -> { u64, u64, u64 } buffer, !269 {
        }
        v197 = get_local ptr { u64, u64, u64 }, __anon_000, !270
        store v196 to v197, !271
        v198 = const u64 0
        v199 = get_elem_ptr v197, ptr u64, v198, !272
        v200 = load v199, !273
        v201 = int_to_ptr v200 to ptr u8, !274
        v202 = const u64 1
        v203 = get_elem_ptr v197, ptr u64, v202, !275
        v204 = load v203, !276
        v205 = const u64 2
        v206 = get_elem_ptr v197, ptr u64, v205, !277
        v207 = load v206, !278
        v208 = ptr_to_int v201 to u64, !279
        v209 = add v208, v207, !280
        v210 = int_to_ptr v209 to ptr bool, !281
        store v172 to v210, !282
        v211 = const u64 1
        v212 = add v207, v211, !283
        v213 = ptr_to_int v201 to u64, !284
        v214 = get_local ptr { u64, u64, u64 }, __anon_100, !285
        v215 = const u64 0
        v216 = get_elem_ptr v214, ptr u64, v215, !286
        store v213 to v216, !287
        v217 = const u64 1
        v218 = get_elem_ptr v214, ptr u64, v217, !288
        store v204 to v218, !289
        v219 = const u64 2
        v220 = get_elem_ptr v214, ptr u64, v219, !290
        store v212 to v220, !291
        v221 = asm(buffer: v214) -> { u64, u64, u64 } buffer, !292 {
        }
        v222 = get_local ptr { { u64, u64, u64 } }, __anon_20, !294
        v223 = const u64 0
        v224 = get_elem_ptr v222, ptr { u64, u64, u64 }, v223, !295
        store v221 to v224, !296
        v225 = load v222, !297
        br encode_38_block1(v225), !298

        encode_38_block1(v226: { { u64, u64, u64 } }):
        v227 = get_local ptr { { u64, u64, u64 } }, buffer, !300
        store v226 to v227, !301
        v228 = get_local ptr { { u64, u64, u64 } }, buffer, !303
        v229 = load v228, !243
        v230 = ptr_to_int v229 to u64, !305
        v231 = int_to_ptr v230 to ptr { { u64, u64, u64 } }, !306
        v232 = const u64 0
        v233 = get_elem_ptr v231, ptr { u64, u64, u64 }, v232, !307
        v234 = load v233, !308
        v235 = asm(buffer: v234) -> { u64, u64, u64 } buffer, !309 {
        }
        v236 = get_local ptr { u64, u64, u64 }, __anon_01, !310
        store v235 to v236, !311
        v237 = const u64 0
        v238 = get_elem_ptr v236, ptr u64, v237, !312
        v239 = load v238, !313
        v240 = int_to_ptr v239 to ptr u8, !314
        v241 = const u64 2
        v242 = get_elem_ptr v236, ptr u64, v241, !315
        v243 = load v242, !316
        v244 = ptr_to_int v240 to u64, !317
        v245 = get_local ptr { u64, u64 }, __anon_11, !318
        v246 = const u64 0
        v247 = get_elem_ptr v245, ptr u64, v246, !319
        store v244 to v247, !320
        v248 = const u64 1
        v249 = get_elem_ptr v245, ptr u64, v248, !321
        store v243 to v249, !322
        v250 = asm(s: v245) -> slice s, !323 {
        }
        br encode_38_block2(v250), !324

        encode_38_block2(v251: slice):
        br block1(v251), !243

        block1(v252: slice):
        ret slice v252
    }

    pub fn assert_2(condition !326: bool) -> (), !327 {
        entry(condition: bool):
        v0 = const bool false, !58
        v1 = cmp eq condition v0, !328
        br block3(v1), !328

        block3(v2: bool):
        cbr v2, block0(), block1(), !328

        block0():
        v3 = const u64 18446744073709486084, !330
        revert v3, !334

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = "/home/kebradalaonda/p/sway/sway-lib-core/src/primitives.sw"
!3 = span !2 7904 7970
!4 = span !0 67 73
!5 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!6 = span !5 199 210
!7 = (!4 !6)
!8 = span !5 188 211
!9 = (!4 !8)
!10 = (!4 !8)
!11 = span !5 216 231
!12 = (!4 !11)
!13 = span !5 229 230
!14 = (!4 !11)
!15 = span !5 236 251
!16 = (!4 !15)
!17 = span !5 249 250
!18 = (!4 !15)
!19 = span !5 256 271
!20 = (!4 !19)
!21 = span !5 269 270
!22 = (!4 !19)
!23 = span !5 276 290
!24 = (!4 !23)
!25 = span !5 288 289
!26 = (!4 !23)
!27 = span !5 309 313
!28 = (!4 !27)
!29 = span !5 295 314
!30 = (!4 !29)
!31 = (!4 !29)
!32 = span !5 319 366
!33 = (!4 !32)
!34 = (!4 !32)
!35 = span !5 389 399
!36 = (!4 !35)
!37 = span !5 390 395
!38 = (!4 !35)
!39 = (!4 !35)
!40 = (!4 !35)
!41 = span !5 372 400
!42 = (!4 !41)
!43 = (!4 !41)
!44 = span !5 424 487
!45 = (!4 !44)
!46 = span !5 454 459
!47 = (!4 !44)
!48 = span !5 478 480
!49 = (!4 !44)
!50 = span !5 406 488
!51 = (!4 !50)
!52 = (!4 !50)
!53 = span !5 502 520
!54 = span !5 136 160
!55 = (!4 !53 !54)
!56 = (!4 !53)
!57 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!58 = span !57 9991 9996
!59 = span !5 501 520
!60 = (!4 !59)
!61 = (!4 !59)
!62 = span !5 494 521
!63 = (!4 !62)
!64 = span !5 535 553
!65 = (!4 !64 !54)
!66 = (!4 !64)
!67 = span !5 534 553
!68 = (!4 !67)
!69 = (!4 !67)
!70 = span !5 527 554
!71 = (!4 !70)
!72 = span !5 568 586
!73 = (!4 !72 !54)
!74 = (!4 !72)
!75 = span !5 567 586
!76 = (!4 !75)
!77 = (!4 !75)
!78 = span !5 560 587
!79 = (!4 !78)
!80 = span !5 601 618
!81 = (!4 !80 !54)
!82 = (!4 !80)
!83 = span !5 600 618
!84 = (!4 !83)
!85 = (!4 !83)
!86 = span !5 593 619
!87 = (!4 !86)
!88 = span !5 632 655
!89 = (!4 !88 !54)
!90 = (!4 !88)
!91 = span !5 625 656
!92 = (!4 !91)
!93 = span !5 669 693
!94 = (!4 !93 !54)
!95 = (!4 !93)
!96 = span !5 662 694
!97 = (!4 !96)
!98 = span !5 730 734
!99 = (!4 !98)
!100 = span !5 719 742
!101 = (!4 !100)
!102 = (!4 !100)
!103 = span !5 720 724
!104 = (!4 !100)
!105 = (!4 !100)
!106 = span !5 726 728
!107 = (!4 !100)
!108 = (!4 !100)
!109 = (!4 !100)
!110 = (!4 !100)
!111 = span !5 736 741
!112 = (!4 !100)
!113 = span !5 707 743
!114 = (!4 !113 !54)
!115 = (!4 !113)
!116 = span !5 700 744
!117 = (!4 !116)
!118 = span !5 757 771
!119 = (!4 !118 !54)
!120 = (!4 !118)
!121 = span !5 750 772
!122 = (!4 !121)
!123 = span !5 785 799
!124 = (!4 !123 !54)
!125 = (!4 !123)
!126 = span !5 778 800
!127 = (!4 !126)
!128 = span !5 814 830
!129 = (!4 !128)
!130 = span !5 834 835
!131 = span !5 814 835
!132 = (!4 !131)
!133 = (!4 !131)
!134 = span !5 807 836
!135 = (!4 !134)
!136 = span !5 849 865
!137 = (!4 !136)
!138 = span !5 869 870
!139 = span !5 849 870
!140 = (!4 !139)
!141 = (!4 !139)
!142 = span !5 842 871
!143 = (!4 !142)
!144 = span !5 884 900
!145 = (!4 !144)
!146 = span !5 904 905
!147 = span !5 884 905
!148 = (!4 !147)
!149 = (!4 !147)
!150 = span !5 877 906
!151 = (!4 !150)
!152 = span !5 919 934
!153 = (!4 !152)
!154 = span !5 938 939
!155 = span !5 919 939
!156 = (!4 !155)
!157 = (!4 !155)
!158 = span !5 912 940
!159 = (!4 !158)
!160 = span !5 953 970
!161 = (!4 !160)
!162 = span !5 974 976
!163 = span !5 953 976
!164 = (!4 !163)
!165 = (!4 !163)
!166 = span !5 946 977
!167 = (!4 !166)
!168 = span !5 990 1010
!169 = (!4 !168)
!170 = span !5 1014 1016
!171 = span !5 990 1016
!172 = (!4 !171)
!173 = (!4 !171)
!174 = span !5 983 1017
!175 = (!4 !174)
!176 = span !5 1030 1051
!177 = (!4 !176)
!178 = span !5 1055 1057
!179 = span !5 1030 1057
!180 = (!4 !179)
!181 = (!4 !179)
!182 = span !5 1023 1058
!183 = (!4 !182)
!184 = span !5 1071 1094
!185 = (!4 !184)
!186 = span !5 1098 1100
!187 = span !5 1071 1100
!188 = (!4 !187)
!189 = (!4 !187)
!190 = span !5 1064 1101
!191 = (!4 !190)
!192 = span !5 1115 1129
!193 = (!4 !192)
!194 = span !5 1133 1134
!195 = span !5 1115 1134
!196 = (!4 !195)
!197 = (!4 !195)
!198 = span !5 1108 1135
!199 = (!4 !198)
!200 = span !5 1148 1162
!201 = (!4 !200)
!202 = span !5 1166 1167
!203 = span !5 1148 1167
!204 = (!4 !203)
!205 = (!4 !203)
!206 = span !5 1141 1168
!207 = (!4 !206)
!208 = span !5 1181 1195
!209 = (!4 !208)
!210 = span !5 1199 1200
!211 = span !5 1181 1200
!212 = (!4 !211)
!213 = (!4 !211)
!214 = span !5 1174 1201
!215 = (!4 !214)
!216 = span !5 1214 1228
!217 = (!4 !216)
!218 = span !5 1232 1233
!219 = span !5 1214 1233
!220 = (!4 !219)
!221 = (!4 !219)
!222 = span !5 1207 1234
!223 = (!4 !222)
!224 = span !5 1247 1261
!225 = (!4 !224)
!226 = span !5 1265 1267
!227 = span !5 1247 1267
!228 = (!4 !227)
!229 = (!4 !227)
!230 = span !5 1240 1268
!231 = (!4 !230)
!232 = span !5 1281 1295
!233 = (!4 !232)
!234 = span !5 1299 1301
!235 = span !5 1281 1301
!236 = (!4 !235)
!237 = (!4 !235)
!238 = span !5 1274 1302
!239 = (!4 !238)
!240 = span !5 1309 1313
!241 = span !0 48 74
!242 = span !0 107 113
!243 = span !0 92 114
!244 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!245 = span !244 64237 64250
!246 = (!243 !245)
!247 = (!243 !245)
!248 = (!243 !245)
!249 = (!243 !245)
!250 = (!243 !245)
!251 = (!243 !245)
!252 = (!243 !245)
!253 = (!243 !245)
!254 = (!243 !245)
!255 = (!243 !245)
!256 = (!243 !245)
!257 = span !244 159 222
!258 = (!243 !245 !257)
!259 = (!243 !245)
!260 = (!243 !245 !257)
!261 = (!243 !245)
!262 = (!243 !245)
!263 = span !244 64221 64251
!264 = (!243 !263)
!265 = (!243 !263)
!266 = span !244 55 82
!267 = (!243 !263 !266)
!268 = (!243 !263)
!269 = (!243 !263)
!270 = (!243 !263)
!271 = (!243 !263)
!272 = (!243 !263)
!273 = (!243 !263)
!274 = (!243 !263)
!275 = (!243 !263)
!276 = (!243 !263)
!277 = (!243 !263)
!278 = (!243 !263)
!279 = (!243 !263)
!280 = (!243 !263)
!281 = (!243 !263)
!282 = (!243 !263)
!283 = (!243 !263)
!284 = (!243 !263)
!285 = (!243 !263)
!286 = (!243 !263)
!287 = (!243 !263)
!288 = (!243 !263)
!289 = (!243 !263)
!290 = (!243 !263)
!291 = (!243 !263)
!292 = (!243 !263)
!293 = span !244 3836 3919
!294 = (!243 !263 !293)
!295 = (!243 !263)
!296 = (!243 !263 !293)
!297 = (!243 !263)
!298 = (!243 !263)
!299 = span !244 64208 64252
!300 = (!243 !299)
!301 = (!243 !299)
!302 = span !244 64257 64263
!303 = (!243 !302)
!304 = span !244 64257 64278
!305 = (!243 !304)
!306 = (!243 !304)
!307 = (!243 !304 !266)
!308 = (!243 !304)
!309 = (!243 !304)
!310 = (!243 !304)
!311 = (!243 !304)
!312 = (!243 !304)
!313 = (!243 !304)
!314 = (!243 !304)
!315 = (!243 !304)
!316 = (!243 !304)
!317 = (!243 !304)
!318 = (!243 !304)
!319 = (!243 !304)
!320 = (!243 !304)
!321 = (!243 !304)
!322 = (!243 !304)
!323 = (!243 !304)
!324 = (!243 !304)
!325 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!326 = span !325 935 944
!327 = span !325 921 1019
!328 = span !325 961 971
!329 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!330 = span !329 1038 1059
!331 = span !325 982 1010
!332 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!333 = span !332 691 705
!334 = (!331 !333)

// IR: [const-demotion] Demotion of by-value constants to by-reference
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<11> __const0 = const string<11> "Fuel rocks!"
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = get_local ptr b256, __const
        v1 = load v0
        br main_0_block0(v1), !5

        main_0_block0(v2: b256):
        v3 = get_local ptr string<11>, __const0
        v4 = load v3
        v5 = get_local ptr b256, zero, !7
        store v2 to v5, !8
        v6 = get_local ptr u64, a, !10
        v7 = const u64 1, !11
        store v7 to v6, !12
        v8 = get_local ptr u64, b, !14
        v9 = const u64 1, !15
        store v9 to v8, !16
        v10 = get_local ptr u64, c, !18
        v11 = const u64 1, !19
        store v11 to v10, !20
        v12 = get_local ptr u8, d, !22
        v13 = const u8 1, !23
        store v13 to v12, !24
        v14 = get_local ptr b256, zero, !26
        v15 = load v14, !2
        v16 = get_local ptr b256, e, !28
        store v15 to v16, !29
        v17 = get_local ptr string<11>, f, !31
        store v4 to v17, !32
        v18 = get_local ptr [u64; 3], __anon_0, !34
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !2
        v21 = const u64 42, !35
        store v21 to v20, !36
        v22 = const u64 1
        v23 = get_elem_ptr v18, ptr u64, v22, !2
        v24 = const u64 42, !35
        store v24 to v23, !37
        v25 = const u64 2
        v26 = get_elem_ptr v18, ptr u64, v25, !2
        v27 = const u64 42, !35
        store v27 to v26, !38
        v28 = load v18, !2
        v29 = get_local ptr [u64; 3], test_array, !40
        store v28 to v29, !41
        v30 = get_local ptr { bool, u64 }, __anon_1, !43
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr bool, v31, !2
        v33 = const bool false, !44
        store v33 to v32, !45
        v34 = const u64 1
        v35 = get_elem_ptr v30, ptr u64, v34, !2
        v36 = const u64 11, !46
        store v36 to v35, !47
        v37 = load v30, !2
        v38 = get_local ptr { bool, u64 }, test_struct, !49
        store v37 to v38, !50
        v39 = const bool false
        br main_0_is_ref_type_9_block0(v39), !53

        main_0_is_ref_type_9_block0(v40: bool):
        br main_0_block1(v40), !54

        main_0_block1(v41: bool):
        v42 = const bool false, !56
        v43 = cmp eq v41 v42, !58
        br main_0_block2(v43), !59

        main_0_block2(v44: bool):
        v45 = call assert_2(v44), !61
        br main_0_is_ref_type_9_block04(v39), !63

        main_0_is_ref_type_9_block04(v46: bool):
        br main_0_block3(v46), !64

        main_0_block3(v47: bool):
        v48 = cmp eq v47 v42, !66
        br main_0_block5(v48), !67

        main_0_block5(v49: bool):
        v50 = call assert_2(v49), !69
        br main_0_is_ref_type_9_block07(v39), !71

        main_0_is_ref_type_9_block07(v51: bool):
        br main_0_block6(v51), !72

        main_0_block6(v52: bool):
        v53 = cmp eq v52 v42, !74
        br main_0_block8(v53), !75

        main_0_block8(v54: bool):
        v55 = call assert_2(v54), !77
        br main_0_is_ref_type_11_block0(v39), !79

        main_0_is_ref_type_11_block0(v56: bool):
        br main_0_block9(v56), !80

        main_0_block9(v57: bool):
        v58 = cmp eq v57 v42, !82
        br main_0_block10(v58), !83

        main_0_block10(v59: bool):
        v60 = call assert_2(v59), !85
        v61 = const bool true
        br main_0_is_ref_type_13_block0(v61), !87

        main_0_is_ref_type_13_block0(v62: bool):
        br main_0_block11(v62), !88

        main_0_block11(v63: bool):
        v64 = call assert_2(v63), !90
        br main_0_is_ref_type_15_block0(v61), !92

        main_0_is_ref_type_15_block0(v65: bool):
        br main_0_block12(v65), !93

        main_0_block12(v66: bool):
        v67 = call assert_2(v66), !95
        v68 = get_local ptr b256, zero, !97
        v69 = load v68, !2
        v70 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !99
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr bool, v71, !100
        v73 = const bool true, !101
        store v73 to v72, !102
        v74 = const u64 1
        v75 = get_elem_ptr v70, ptr u64, v74, !103
        v76 = const u64 11, !104
        store v76 to v75, !105
        v77 = const u64 2
        v78 = get_elem_ptr v70, ptr b256, v77, !106
        store v69 to v78, !107
        v79 = const u64 3
        v80 = get_elem_ptr v70, ptr u8, v79, !108
        v81 = const u8 255, !109
        store v81 to v80, !110
        br main_0_is_ref_type_17_block0(v61), !112

        main_0_is_ref_type_17_block0(v82: bool):
        br main_0_block13(v82), !113

        main_0_block13(v83: bool):
        v84 = call assert_2(v83), !115
        br main_0_is_ref_type_19_block0(v61), !117

        main_0_is_ref_type_19_block0(v85: bool):
        br main_0_block14(v85), !118

        main_0_block14(v86: bool):
        v87 = call assert_2(v86), !120
        br main_0_is_ref_type_21_block0(v61), !122

        main_0_is_ref_type_21_block0(v88: bool):
        br main_0_block15(v88), !123

        main_0_block15(v89: bool):
        v90 = call assert_2(v89), !125
        v91 = const u64 8
        br main_0_block16(v91), !127

        main_0_block16(v92: u64):
        v93 = const u64 8, !128
        v94 = cmp eq v92 v93, !130
        br main_0_block17(v94), !131

        main_0_block17(v95: bool):
        v96 = call assert_2(v95), !133
        br main_0_block18(v91), !135

        main_0_block18(v97: u64):
        v98 = const u64 8, !136
        v99 = cmp eq v97 v98, !138
        br main_0_block19(v99), !139

        main_0_block19(v100: bool):
        v101 = call assert_2(v100), !141
        br main_0_block20(v91), !143

        main_0_block20(v102: u64):
        v103 = const u64 8, !144
        v104 = cmp eq v102 v103, !146
        br main_0_block21(v104), !147

        main_0_block21(v105: bool):
        v106 = call assert_2(v105), !149
        v107 = const u64 1
        br main_0_block22(v107), !151

        main_0_block22(v108: u64):
        v109 = const u64 1, !152
        v110 = cmp eq v108 v109, !154
        br main_0_block23(v110), !155

        main_0_block23(v111: bool):
        v112 = call assert_2(v111), !157
        v113 = const u64 32
        br main_0_block24(v113), !159

        main_0_block24(v114: u64):
        v115 = const u64 32, !160
        v116 = cmp eq v114 v115, !162
        br main_0_block25(v116), !163

        main_0_block25(v117: bool):
        v118 = call assert_2(v117), !165
        v119 = const u64 16
        br main_0_block26(v119), !167

        main_0_block26(v120: u64):
        v121 = const u64 16, !168
        v122 = cmp eq v120 v121, !170
        br main_0_block27(v122), !171

        main_0_block27(v123: bool):
        v124 = call assert_2(v123), !173
        v125 = const u64 24
        br main_0_block28(v125), !175

        main_0_block28(v126: u64):
        v127 = const u64 24, !176
        v128 = cmp eq v126 v127, !178
        br main_0_block29(v128), !179

        main_0_block29(v129: bool):
        v130 = call assert_2(v129), !181
        br main_0_block30(v119), !183

        main_0_block30(v131: u64):
        v132 = const u64 16, !184
        v133 = cmp eq v131 v132, !186
        br main_0_block31(v133), !187

        main_0_block31(v134: bool):
        v135 = call assert_2(v134), !189
        v136 = const u64 8
        br main_0_block32(v136), !191

        main_0_block32(v137: u64):
        v138 = const u64 8, !192
        v139 = cmp eq v137 v138, !194
        br main_0_block33(v139), !195

        main_0_block33(v140: bool):
        v141 = call assert_2(v140), !197
        br main_0_block34(v136), !199

        main_0_block34(v142: u64):
        v143 = const u64 8, !200
        v144 = cmp eq v142 v143, !202
        br main_0_block35(v144), !203

        main_0_block35(v145: bool):
        v146 = call assert_2(v145), !205
        br main_0_block36(v136), !207

        main_0_block36(v147: u64):
        v148 = const u64 8, !208
        v149 = cmp eq v147 v148, !210
        br main_0_block37(v149), !211

        main_0_block37(v150: bool):
        v151 = call assert_2(v150), !213
        v152 = const u64 1
        br main_0_block38(v152), !215

        main_0_block38(v153: u64):
        v154 = const u64 1, !216
        v155 = cmp eq v153 v154, !218
        br main_0_block39(v155), !219

        main_0_block39(v156: bool):
        v157 = call assert_2(v156), !221
        v158 = const u64 32
        br main_0_block40(v158), !223

        main_0_block40(v159: u64):
        v160 = const u64 32, !224
        v161 = cmp eq v159 v160, !226
        br main_0_block41(v161), !227

        main_0_block41(v162: bool):
        v163 = call assert_2(v162), !229
        v164 = const u64 16
        br main_0_block42(v164), !231

        main_0_block42(v165: u64):
        v166 = const u64 16, !232
        v167 = cmp eq v165 v166, !234
        br main_0_block43(v167), !235

        main_0_block43(v168: bool):
        v169 = call assert_2(v168), !237
        v170 = const bool true, !238
        br block0(v170), !2

        block0(v171: bool):
        v172 = get_local ptr bool, result, !239
        store v171 to v172, !239
        v173 = get_local ptr bool, result, !240
        v174 = load v173
        v175 = const u64 1024
        v176 = asm(cap: v175) -> u64 hp, !244 {
            aloc   cap
        }
        v177 = int_to_ptr v176 to ptr u8, !245
        v178 = ptr_to_int v177 to u64, !246
        v179 = get_local ptr { u64, u64, u64 }, __anon_00, !247
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr u64, v180, !248
        store v178 to v181, !249
        v182 = const u64 1
        v183 = get_elem_ptr v179, ptr u64, v182, !250
        store v175 to v183, !251
        v184 = const u64 2
        v185 = get_elem_ptr v179, ptr u64, v184, !252
        v186 = const u64 0
        store v186 to v185, !253
        v187 = asm(buffer: v179) -> { u64, u64, u64 } buffer, !254 {
        }
        v188 = get_local ptr { { u64, u64, u64 } }, __anon_10, !256
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr { u64, u64, u64 }, v189, !257
        store v187 to v190, !258
        v191 = load v188, !259
        br encode_38_block0(v191), !260

        encode_38_block0(v192: { { u64, u64, u64 } }):
        v193 = ptr_to_int v192 to u64, !262
        v194 = int_to_ptr v193 to ptr { { u64, u64, u64 } }, !263
        v195 = const u64 0
        v196 = get_elem_ptr v194, ptr { u64, u64, u64 }, v195, !265
        v197 = load v196, !266
        v198 = asm(buffer: v197) -> { u64, u64, u64 } buffer, !267 {
        }
        v199 = get_local ptr { u64, u64, u64 }, __anon_000, !268
        store v198 to v199, !269
        v200 = const u64 0
        v201 = get_elem_ptr v199, ptr u64, v200, !270
        v202 = load v201, !271
        v203 = int_to_ptr v202 to ptr u8, !272
        v204 = const u64 1
        v205 = get_elem_ptr v199, ptr u64, v204, !273
        v206 = load v205, !274
        v207 = const u64 2
        v208 = get_elem_ptr v199, ptr u64, v207, !275
        v209 = load v208, !276
        v210 = ptr_to_int v203 to u64, !277
        v211 = add v210, v209, !278
        v212 = int_to_ptr v211 to ptr bool, !279
        store v174 to v212, !280
        v213 = const u64 1
        v214 = add v209, v213, !281
        v215 = ptr_to_int v203 to u64, !282
        v216 = get_local ptr { u64, u64, u64 }, __anon_100, !283
        v217 = const u64 0
        v218 = get_elem_ptr v216, ptr u64, v217, !284
        store v215 to v218, !285
        v219 = const u64 1
        v220 = get_elem_ptr v216, ptr u64, v219, !286
        store v206 to v220, !287
        v221 = const u64 2
        v222 = get_elem_ptr v216, ptr u64, v221, !288
        store v214 to v222, !289
        v223 = asm(buffer: v216) -> { u64, u64, u64 } buffer, !290 {
        }
        v224 = get_local ptr { { u64, u64, u64 } }, __anon_20, !292
        v225 = const u64 0
        v226 = get_elem_ptr v224, ptr { u64, u64, u64 }, v225, !293
        store v223 to v226, !294
        v227 = load v224, !295
        br encode_38_block1(v227), !296

        encode_38_block1(v228: { { u64, u64, u64 } }):
        v229 = get_local ptr { { u64, u64, u64 } }, buffer, !298
        store v228 to v229, !299
        v230 = get_local ptr { { u64, u64, u64 } }, buffer, !301
        v231 = load v230, !241
        v232 = ptr_to_int v231 to u64, !303
        v233 = int_to_ptr v232 to ptr { { u64, u64, u64 } }, !304
        v234 = const u64 0
        v235 = get_elem_ptr v233, ptr { u64, u64, u64 }, v234, !305
        v236 = load v235, !306
        v237 = asm(buffer: v236) -> { u64, u64, u64 } buffer, !307 {
        }
        v238 = get_local ptr { u64, u64, u64 }, __anon_01, !308
        store v237 to v238, !309
        v239 = const u64 0
        v240 = get_elem_ptr v238, ptr u64, v239, !310
        v241 = load v240, !311
        v242 = int_to_ptr v241 to ptr u8, !312
        v243 = const u64 2
        v244 = get_elem_ptr v238, ptr u64, v243, !313
        v245 = load v244, !314
        v246 = ptr_to_int v242 to u64, !315
        v247 = get_local ptr { u64, u64 }, __anon_11, !316
        v248 = const u64 0
        v249 = get_elem_ptr v247, ptr u64, v248, !317
        store v246 to v249, !318
        v250 = const u64 1
        v251 = get_elem_ptr v247, ptr u64, v250, !319
        store v245 to v251, !320
        v252 = asm(s: v247) -> slice s, !321 {
        }
        br encode_38_block2(v252), !322

        encode_38_block2(v253: slice):
        br block1(v253), !241

        block1(v254: slice):
        ret slice v254
    }

    pub fn assert_2(condition !324: bool) -> (), !325 {
        entry(condition: bool):
        v0 = const bool false, !56
        v1 = cmp eq condition v0, !326
        br block3(v1), !326

        block3(v2: bool):
        cbr v2, block0(), block1(), !326

        block0():
        v3 = const u64 18446744073709486084, !328
        revert v3, !332

        block4(v4: never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 188 211
!7 = (!2 !6)
!8 = (!2 !6)
!9 = span !3 216 231
!10 = (!2 !9)
!11 = span !3 229 230
!12 = (!2 !9)
!13 = span !3 236 251
!14 = (!2 !13)
!15 = span !3 249 250
!16 = (!2 !13)
!17 = span !3 256 271
!18 = (!2 !17)
!19 = span !3 269 270
!20 = (!2 !17)
!21 = span !3 276 290
!22 = (!2 !21)
!23 = span !3 288 289
!24 = (!2 !21)
!25 = span !3 309 313
!26 = (!2 !25)
!27 = span !3 295 314
!28 = (!2 !27)
!29 = (!2 !27)
!30 = span !3 319 366
!31 = (!2 !30)
!32 = (!2 !30)
!33 = span !3 389 399
!34 = (!2 !33)
!35 = span !3 390 395
!36 = (!2 !33)
!37 = (!2 !33)
!38 = (!2 !33)
!39 = span !3 372 400
!40 = (!2 !39)
!41 = (!2 !39)
!42 = span !3 424 487
!43 = (!2 !42)
!44 = span !3 454 459
!45 = (!2 !42)
!46 = span !3 478 480
!47 = (!2 !42)
!48 = span !3 406 488
!49 = (!2 !48)
!50 = (!2 !48)
!51 = span !3 502 520
!52 = span !3 136 160
!53 = (!2 !51 !52)
!54 = (!2 !51)
!55 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!56 = span !55 9991 9996
!57 = span !3 501 520
!58 = (!2 !57)
!59 = (!2 !57)
!60 = span !3 494 521
!61 = (!2 !60)
!62 = span !3 535 553
!63 = (!2 !62 !52)
!64 = (!2 !62)
!65 = span !3 534 553
!66 = (!2 !65)
!67 = (!2 !65)
!68 = span !3 527 554
!69 = (!2 !68)
!70 = span !3 568 586
!71 = (!2 !70 !52)
!72 = (!2 !70)
!73 = span !3 567 586
!74 = (!2 !73)
!75 = (!2 !73)
!76 = span !3 560 587
!77 = (!2 !76)
!78 = span !3 601 618
!79 = (!2 !78 !52)
!80 = (!2 !78)
!81 = span !3 600 618
!82 = (!2 !81)
!83 = (!2 !81)
!84 = span !3 593 619
!85 = (!2 !84)
!86 = span !3 632 655
!87 = (!2 !86 !52)
!88 = (!2 !86)
!89 = span !3 625 656
!90 = (!2 !89)
!91 = span !3 669 693
!92 = (!2 !91 !52)
!93 = (!2 !91)
!94 = span !3 662 694
!95 = (!2 !94)
!96 = span !3 730 734
!97 = (!2 !96)
!98 = span !3 719 742
!99 = (!2 !98)
!100 = (!2 !98)
!101 = span !3 720 724
!102 = (!2 !98)
!103 = (!2 !98)
!104 = span !3 726 728
!105 = (!2 !98)
!106 = (!2 !98)
!107 = (!2 !98)
!108 = (!2 !98)
!109 = span !3 736 741
!110 = (!2 !98)
!111 = span !3 707 743
!112 = (!2 !111 !52)
!113 = (!2 !111)
!114 = span !3 700 744
!115 = (!2 !114)
!116 = span !3 757 771
!117 = (!2 !116 !52)
!118 = (!2 !116)
!119 = span !3 750 772
!120 = (!2 !119)
!121 = span !3 785 799
!122 = (!2 !121 !52)
!123 = (!2 !121)
!124 = span !3 778 800
!125 = (!2 !124)
!126 = span !3 814 830
!127 = (!2 !126)
!128 = span !3 834 835
!129 = span !3 814 835
!130 = (!2 !129)
!131 = (!2 !129)
!132 = span !3 807 836
!133 = (!2 !132)
!134 = span !3 849 865
!135 = (!2 !134)
!136 = span !3 869 870
!137 = span !3 849 870
!138 = (!2 !137)
!139 = (!2 !137)
!140 = span !3 842 871
!141 = (!2 !140)
!142 = span !3 884 900
!143 = (!2 !142)
!144 = span !3 904 905
!145 = span !3 884 905
!146 = (!2 !145)
!147 = (!2 !145)
!148 = span !3 877 906
!149 = (!2 !148)
!150 = span !3 919 934
!151 = (!2 !150)
!152 = span !3 938 939
!153 = span !3 919 939
!154 = (!2 !153)
!155 = (!2 !153)
!156 = span !3 912 940
!157 = (!2 !156)
!158 = span !3 953 970
!159 = (!2 !158)
!160 = span !3 974 976
!161 = span !3 953 976
!162 = (!2 !161)
!163 = (!2 !161)
!164 = span !3 946 977
!165 = (!2 !164)
!166 = span !3 990 1010
!167 = (!2 !166)
!168 = span !3 1014 1016
!169 = span !3 990 1016
!170 = (!2 !169)
!171 = (!2 !169)
!172 = span !3 983 1017
!173 = (!2 !172)
!174 = span !3 1030 1051
!175 = (!2 !174)
!176 = span !3 1055 1057
!177 = span !3 1030 1057
!178 = (!2 !177)
!179 = (!2 !177)
!180 = span !3 1023 1058
!181 = (!2 !180)
!182 = span !3 1071 1094
!183 = (!2 !182)
!184 = span !3 1098 1100
!185 = span !3 1071 1100
!186 = (!2 !185)
!187 = (!2 !185)
!188 = span !3 1064 1101
!189 = (!2 !188)
!190 = span !3 1115 1129
!191 = (!2 !190)
!192 = span !3 1133 1134
!193 = span !3 1115 1134
!194 = (!2 !193)
!195 = (!2 !193)
!196 = span !3 1108 1135
!197 = (!2 !196)
!198 = span !3 1148 1162
!199 = (!2 !198)
!200 = span !3 1166 1167
!201 = span !3 1148 1167
!202 = (!2 !201)
!203 = (!2 !201)
!204 = span !3 1141 1168
!205 = (!2 !204)
!206 = span !3 1181 1195
!207 = (!2 !206)
!208 = span !3 1199 1200
!209 = span !3 1181 1200
!210 = (!2 !209)
!211 = (!2 !209)
!212 = span !3 1174 1201
!213 = (!2 !212)
!214 = span !3 1214 1228
!215 = (!2 !214)
!216 = span !3 1232 1233
!217 = span !3 1214 1233
!218 = (!2 !217)
!219 = (!2 !217)
!220 = span !3 1207 1234
!221 = (!2 !220)
!222 = span !3 1247 1261
!223 = (!2 !222)
!224 = span !3 1265 1267
!225 = span !3 1247 1267
!226 = (!2 !225)
!227 = (!2 !225)
!228 = span !3 1240 1268
!229 = (!2 !228)
!230 = span !3 1281 1295
!231 = (!2 !230)
!232 = span !3 1299 1301
!233 = span !3 1281 1301
!234 = (!2 !233)
!235 = (!2 !233)
!236 = span !3 1274 1302
!237 = (!2 !236)
!238 = span !3 1309 1313
!239 = span !0 48 74
!240 = span !0 107 113
!241 = span !0 92 114
!242 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!243 = span !242 64237 64250
!244 = (!241 !243)
!245 = (!241 !243)
!246 = (!241 !243)
!247 = (!241 !243)
!248 = (!241 !243)
!249 = (!241 !243)
!250 = (!241 !243)
!251 = (!241 !243)
!252 = (!241 !243)
!253 = (!241 !243)
!254 = (!241 !243)
!255 = span !242 159 222
!256 = (!241 !243 !255)
!257 = (!241 !243)
!258 = (!241 !243 !255)
!259 = (!241 !243)
!260 = (!241 !243)
!261 = span !242 64221 64251
!262 = (!241 !261)
!263 = (!241 !261)
!264 = span !242 55 82
!265 = (!241 !261 !264)
!266 = (!241 !261)
!267 = (!241 !261)
!268 = (!241 !261)
!269 = (!241 !261)
!270 = (!241 !261)
!271 = (!241 !261)
!272 = (!241 !261)
!273 = (!241 !261)
!274 = (!241 !261)
!275 = (!241 !261)
!276 = (!241 !261)
!277 = (!241 !261)
!278 = (!241 !261)
!279 = (!241 !261)
!280 = (!241 !261)
!281 = (!241 !261)
!282 = (!241 !261)
!283 = (!241 !261)
!284 = (!241 !261)
!285 = (!241 !261)
!286 = (!241 !261)
!287 = (!241 !261)
!288 = (!241 !261)
!289 = (!241 !261)
!290 = (!241 !261)
!291 = span !242 3836 3919
!292 = (!241 !261 !291)
!293 = (!241 !261)
!294 = (!241 !261 !291)
!295 = (!241 !261)
!296 = (!241 !261)
!297 = span !242 64208 64252
!298 = (!241 !297)
!299 = (!241 !297)
!300 = span !242 64257 64263
!301 = (!241 !300)
!302 = span !242 64257 64278
!303 = (!241 !302)
!304 = (!241 !302)
!305 = (!241 !302 !264)
!306 = (!241 !302)
!307 = (!241 !302)
!308 = (!241 !302)
!309 = (!241 !302)
!310 = (!241 !302)
!311 = (!241 !302)
!312 = (!241 !302)
!313 = (!241 !302)
!314 = (!241 !302)
!315 = (!241 !302)
!316 = (!241 !302)
!317 = (!241 !302)
!318 = (!241 !302)
!319 = (!241 !302)
!320 = (!241 !302)
!321 = (!241 !302)
!322 = (!241 !302)
!323 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!324 = span !323 935 944
!325 = span !323 921 1019
!326 = span !323 961 971
!327 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!328 = span !327 1038 1059
!329 = span !323 982 1010
!330 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!331 = span !330 691 705
!332 = (!329 !331)

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
script {
    pub entry fn __entry() -> slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<11> __const0 = const string<11> "Fuel rocks!"
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = get_local ptr b256, __const
        v1 = load v0
        v2 = get_local ptr b256, __tmp_block_arg
        store v1 to v2
        br main_0_block0(v2), !5

        main_0_block0(v3: ptr b256):
        v4 = load v3
        v5 = get_local ptr string<11>, __const0
        v6 = load v5
        v7 = get_local ptr b256, zero, !7
        store v4 to v7, !8
        v8 = get_local ptr u64, a, !10
        v9 = const u64 1, !11
        store v9 to v8, !12
        v10 = get_local ptr u64, b, !14
        v11 = const u64 1, !15
        store v11 to v10, !16
        v12 = get_local ptr u64, c, !18
        v13 = const u64 1, !19
        store v13 to v12, !20
        v14 = get_local ptr u8, d, !22
        v15 = const u8 1, !23
        store v15 to v14, !24
        v16 = get_local ptr b256, zero, !26
        v17 = load v16, !2
        v18 = get_local ptr b256, e, !28
        store v17 to v18, !29
        v19 = get_local ptr string<11>, f, !31
        store v6 to v19, !32
        v20 = get_local ptr [u64; 3], __anon_0, !34
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !2
        v23 = const u64 42, !35
        store v23 to v22, !36
        v24 = const u64 1
        v25 = get_elem_ptr v20, ptr u64, v24, !2
        v26 = const u64 42, !35
        store v26 to v25, !37
        v27 = const u64 2
        v28 = get_elem_ptr v20, ptr u64, v27, !2
        v29 = const u64 42, !35
        store v29 to v28, !38
        v30 = load v20, !2
        v31 = get_local ptr [u64; 3], test_array, !40
        store v30 to v31, !41
        v32 = get_local ptr { bool, u64 }, __anon_1, !43
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr bool, v33, !2
        v35 = const bool false, !44
        store v35 to v34, !45
        v36 = const u64 1
        v37 = get_elem_ptr v32, ptr u64, v36, !2
        v38 = const u64 11, !46
        store v38 to v37, !47
        v39 = load v32, !2
        v40 = get_local ptr { bool, u64 }, test_struct, !49
        store v39 to v40, !50
        v41 = const bool false
        br main_0_is_ref_type_9_block0(v41), !53

        main_0_is_ref_type_9_block0(v42: bool):
        br main_0_block1(v42), !54

        main_0_block1(v43: bool):
        v44 = const bool false, !56
        v45 = cmp eq v43 v44, !58
        br main_0_block2(v45), !59

        main_0_block2(v46: bool):
        v47 = call assert_2(v46), !61
        br main_0_is_ref_type_9_block04(v41), !63

        main_0_is_ref_type_9_block04(v48: bool):
        br main_0_block3(v48), !64

        main_0_block3(v49: bool):
        v50 = cmp eq v49 v44, !66
        br main_0_block5(v50), !67

        main_0_block5(v51: bool):
        v52 = call assert_2(v51), !69
        br main_0_is_ref_type_9_block07(v41), !71

        main_0_is_ref_type_9_block07(v53: bool):
        br main_0_block6(v53), !72

        main_0_block6(v54: bool):
        v55 = cmp eq v54 v44, !74
        br main_0_block8(v55), !75

        main_0_block8(v56: bool):
        v57 = call assert_2(v56), !77
        br main_0_is_ref_type_11_block0(v41), !79

        main_0_is_ref_type_11_block0(v58: bool):
        br main_0_block9(v58), !80

        main_0_block9(v59: bool):
        v60 = cmp eq v59 v44, !82
        br main_0_block10(v60), !83

        main_0_block10(v61: bool):
        v62 = call assert_2(v61), !85
        v63 = const bool true
        br main_0_is_ref_type_13_block0(v63), !87

        main_0_is_ref_type_13_block0(v64: bool):
        br main_0_block11(v64), !88

        main_0_block11(v65: bool):
        v66 = call assert_2(v65), !90
        br main_0_is_ref_type_15_block0(v63), !92

        main_0_is_ref_type_15_block0(v67: bool):
        br main_0_block12(v67), !93

        main_0_block12(v68: bool):
        v69 = call assert_2(v68), !95
        v70 = get_local ptr b256, zero, !97
        v71 = load v70, !2
        v72 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !99
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr bool, v73, !100
        v75 = const bool true, !101
        store v75 to v74, !102
        v76 = const u64 1
        v77 = get_elem_ptr v72, ptr u64, v76, !103
        v78 = const u64 11, !104
        store v78 to v77, !105
        v79 = const u64 2
        v80 = get_elem_ptr v72, ptr b256, v79, !106
        store v71 to v80, !107
        v81 = const u64 3
        v82 = get_elem_ptr v72, ptr u8, v81, !108
        v83 = const u8 255, !109
        store v83 to v82, !110
        br main_0_is_ref_type_17_block0(v63), !112

        main_0_is_ref_type_17_block0(v84: bool):
        br main_0_block13(v84), !113

        main_0_block13(v85: bool):
        v86 = call assert_2(v85), !115
        br main_0_is_ref_type_19_block0(v63), !117

        main_0_is_ref_type_19_block0(v87: bool):
        br main_0_block14(v87), !118

        main_0_block14(v88: bool):
        v89 = call assert_2(v88), !120
        br main_0_is_ref_type_21_block0(v63), !122

        main_0_is_ref_type_21_block0(v90: bool):
        br main_0_block15(v90), !123

        main_0_block15(v91: bool):
        v92 = call assert_2(v91), !125
        v93 = const u64 8
        br main_0_block16(v93), !127

        main_0_block16(v94: u64):
        v95 = const u64 8, !128
        v96 = cmp eq v94 v95, !130
        br main_0_block17(v96), !131

        main_0_block17(v97: bool):
        v98 = call assert_2(v97), !133
        br main_0_block18(v93), !135

        main_0_block18(v99: u64):
        v100 = const u64 8, !136
        v101 = cmp eq v99 v100, !138
        br main_0_block19(v101), !139

        main_0_block19(v102: bool):
        v103 = call assert_2(v102), !141
        br main_0_block20(v93), !143

        main_0_block20(v104: u64):
        v105 = const u64 8, !144
        v106 = cmp eq v104 v105, !146
        br main_0_block21(v106), !147

        main_0_block21(v107: bool):
        v108 = call assert_2(v107), !149
        v109 = const u64 1
        br main_0_block22(v109), !151

        main_0_block22(v110: u64):
        v111 = const u64 1, !152
        v112 = cmp eq v110 v111, !154
        br main_0_block23(v112), !155

        main_0_block23(v113: bool):
        v114 = call assert_2(v113), !157
        v115 = const u64 32
        br main_0_block24(v115), !159

        main_0_block24(v116: u64):
        v117 = const u64 32, !160
        v118 = cmp eq v116 v117, !162
        br main_0_block25(v118), !163

        main_0_block25(v119: bool):
        v120 = call assert_2(v119), !165
        v121 = const u64 16
        br main_0_block26(v121), !167

        main_0_block26(v122: u64):
        v123 = const u64 16, !168
        v124 = cmp eq v122 v123, !170
        br main_0_block27(v124), !171

        main_0_block27(v125: bool):
        v126 = call assert_2(v125), !173
        v127 = const u64 24
        br main_0_block28(v127), !175

        main_0_block28(v128: u64):
        v129 = const u64 24, !176
        v130 = cmp eq v128 v129, !178
        br main_0_block29(v130), !179

        main_0_block29(v131: bool):
        v132 = call assert_2(v131), !181
        br main_0_block30(v121), !183

        main_0_block30(v133: u64):
        v134 = const u64 16, !184
        v135 = cmp eq v133 v134, !186
        br main_0_block31(v135), !187

        main_0_block31(v136: bool):
        v137 = call assert_2(v136), !189
        v138 = const u64 8
        br main_0_block32(v138), !191

        main_0_block32(v139: u64):
        v140 = const u64 8, !192
        v141 = cmp eq v139 v140, !194
        br main_0_block33(v141), !195

        main_0_block33(v142: bool):
        v143 = call assert_2(v142), !197
        br main_0_block34(v138), !199

        main_0_block34(v144: u64):
        v145 = const u64 8, !200
        v146 = cmp eq v144 v145, !202
        br main_0_block35(v146), !203

        main_0_block35(v147: bool):
        v148 = call assert_2(v147), !205
        br main_0_block36(v138), !207

        main_0_block36(v149: u64):
        v150 = const u64 8, !208
        v151 = cmp eq v149 v150, !210
        br main_0_block37(v151), !211

        main_0_block37(v152: bool):
        v153 = call assert_2(v152), !213
        v154 = const u64 1
        br main_0_block38(v154), !215

        main_0_block38(v155: u64):
        v156 = const u64 1, !216
        v157 = cmp eq v155 v156, !218
        br main_0_block39(v157), !219

        main_0_block39(v158: bool):
        v159 = call assert_2(v158), !221
        v160 = const u64 32
        br main_0_block40(v160), !223

        main_0_block40(v161: u64):
        v162 = const u64 32, !224
        v163 = cmp eq v161 v162, !226
        br main_0_block41(v163), !227

        main_0_block41(v164: bool):
        v165 = call assert_2(v164), !229
        v166 = const u64 16
        br main_0_block42(v166), !231

        main_0_block42(v167: u64):
        v168 = const u64 16, !232
        v169 = cmp eq v167 v168, !234
        br main_0_block43(v169), !235

        main_0_block43(v170: bool):
        v171 = call assert_2(v170), !237
        v172 = const bool true, !238
        br block0(v172), !2

        block0(v173: bool):
        v174 = get_local ptr bool, result, !239
        store v173 to v174, !239
        v175 = get_local ptr bool, result, !240
        v176 = load v175
        v177 = const u64 1024
        v178 = asm(cap: v177) -> u64 hp, !244 {
            aloc   cap
        }
        v179 = int_to_ptr v178 to ptr u8, !245
        v180 = ptr_to_int v179 to u64, !246
        v181 = get_local ptr { u64, u64, u64 }, __anon_00, !247
        v182 = const u64 0
        v183 = get_elem_ptr v181, ptr u64, v182, !248
        store v180 to v183, !249
        v184 = const u64 1
        v185 = get_elem_ptr v181, ptr u64, v184, !250
        store v177 to v185, !251
        v186 = const u64 2
        v187 = get_elem_ptr v181, ptr u64, v186, !252
        v188 = const u64 0
        store v188 to v187, !253
        v189 = asm(buffer: v181) -> { u64, u64, u64 } buffer, !254 {
        }
        v190 = get_local ptr { { u64, u64, u64 } }, __anon_10, !256
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr { u64, u64, u64 }, v191, !257
        store v189 to v192, !258
        v193 = load v190, !259
        v194 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v193 to v194
        br encode_38_block0(v194), !260

        encode_38_block0(v195: ptr { { u64, u64, u64 } }):
        v196 = load v195
        v197 = ptr_to_int v196 to u64, !262
        v198 = int_to_ptr v197 to ptr { { u64, u64, u64 } }, !263
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr { u64, u64, u64 }, v199, !265
        v201 = load v200, !266
        v202 = asm(buffer: v201) -> { u64, u64, u64 } buffer, !267 {
        }
        v203 = get_local ptr { u64, u64, u64 }, __anon_000, !268
        store v202 to v203, !269
        v204 = const u64 0
        v205 = get_elem_ptr v203, ptr u64, v204, !270
        v206 = load v205, !271
        v207 = int_to_ptr v206 to ptr u8, !272
        v208 = const u64 1
        v209 = get_elem_ptr v203, ptr u64, v208, !273
        v210 = load v209, !274
        v211 = const u64 2
        v212 = get_elem_ptr v203, ptr u64, v211, !275
        v213 = load v212, !276
        v214 = ptr_to_int v207 to u64, !277
        v215 = add v214, v213, !278
        v216 = int_to_ptr v215 to ptr bool, !279
        store v176 to v216, !280
        v217 = const u64 1
        v218 = add v213, v217, !281
        v219 = ptr_to_int v207 to u64, !282
        v220 = get_local ptr { u64, u64, u64 }, __anon_100, !283
        v221 = const u64 0
        v222 = get_elem_ptr v220, ptr u64, v221, !284
        store v219 to v222, !285
        v223 = const u64 1
        v224 = get_elem_ptr v220, ptr u64, v223, !286
        store v210 to v224, !287
        v225 = const u64 2
        v226 = get_elem_ptr v220, ptr u64, v225, !288
        store v218 to v226, !289
        v227 = asm(buffer: v220) -> { u64, u64, u64 } buffer, !290 {
        }
        v228 = get_local ptr { { u64, u64, u64 } }, __anon_20, !292
        v229 = const u64 0
        v230 = get_elem_ptr v228, ptr { u64, u64, u64 }, v229, !293
        store v227 to v230, !294
        v231 = load v228, !295
        v232 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        store v231 to v232
        br encode_38_block1(v232), !296

        encode_38_block1(v233: ptr { { u64, u64, u64 } }):
        v234 = load v233
        v235 = get_local ptr { { u64, u64, u64 } }, buffer, !298
        store v234 to v235, !299
        v236 = get_local ptr { { u64, u64, u64 } }, buffer, !301
        v237 = load v236, !241
        v238 = ptr_to_int v237 to u64, !303
        v239 = int_to_ptr v238 to ptr { { u64, u64, u64 } }, !304
        v240 = const u64 0
        v241 = get_elem_ptr v239, ptr { u64, u64, u64 }, v240, !305
        v242 = load v241, !306
        v243 = asm(buffer: v242) -> { u64, u64, u64 } buffer, !307 {
        }
        v244 = get_local ptr { u64, u64, u64 }, __anon_01, !308
        store v243 to v244, !309
        v245 = const u64 0
        v246 = get_elem_ptr v244, ptr u64, v245, !310
        v247 = load v246, !311
        v248 = int_to_ptr v247 to ptr u8, !312
        v249 = const u64 2
        v250 = get_elem_ptr v244, ptr u64, v249, !313
        v251 = load v250, !314
        v252 = ptr_to_int v248 to u64, !315
        v253 = get_local ptr { u64, u64 }, __anon_11, !316
        v254 = const u64 0
        v255 = get_elem_ptr v253, ptr u64, v254, !317
        store v252 to v255, !318
        v256 = const u64 1
        v257 = get_elem_ptr v253, ptr u64, v256, !319
        store v251 to v257, !320
        v258 = asm(s: v253) -> slice s, !321 {
        }
        v259 = get_local ptr slice, __tmp_block_arg2
        store v258 to v259
        br encode_38_block2(v259), !322

        encode_38_block2(v260: ptr slice):
        v261 = load v260
        v262 = get_local ptr slice, __tmp_block_arg3
        store v261 to v262
        br block1(v262), !241

        block1(v263: ptr slice):
        v264 = load v263
        ret slice v264
    }

    pub fn assert_2(condition !324: bool) -> (), !325 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !56
        v1 = cmp eq condition v0, !326
        br block3(v1), !326

        block3(v2: bool):
        cbr v2, block0(), block1(), !326

        block0():
        v3 = const u64 18446744073709486084, !328
        revert v3, !332

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 188 211
!7 = (!2 !6)
!8 = (!2 !6)
!9 = span !3 216 231
!10 = (!2 !9)
!11 = span !3 229 230
!12 = (!2 !9)
!13 = span !3 236 251
!14 = (!2 !13)
!15 = span !3 249 250
!16 = (!2 !13)
!17 = span !3 256 271
!18 = (!2 !17)
!19 = span !3 269 270
!20 = (!2 !17)
!21 = span !3 276 290
!22 = (!2 !21)
!23 = span !3 288 289
!24 = (!2 !21)
!25 = span !3 309 313
!26 = (!2 !25)
!27 = span !3 295 314
!28 = (!2 !27)
!29 = (!2 !27)
!30 = span !3 319 366
!31 = (!2 !30)
!32 = (!2 !30)
!33 = span !3 389 399
!34 = (!2 !33)
!35 = span !3 390 395
!36 = (!2 !33)
!37 = (!2 !33)
!38 = (!2 !33)
!39 = span !3 372 400
!40 = (!2 !39)
!41 = (!2 !39)
!42 = span !3 424 487
!43 = (!2 !42)
!44 = span !3 454 459
!45 = (!2 !42)
!46 = span !3 478 480
!47 = (!2 !42)
!48 = span !3 406 488
!49 = (!2 !48)
!50 = (!2 !48)
!51 = span !3 502 520
!52 = span !3 136 160
!53 = (!2 !51 !52)
!54 = (!2 !51)
!55 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!56 = span !55 9991 9996
!57 = span !3 501 520
!58 = (!2 !57)
!59 = (!2 !57)
!60 = span !3 494 521
!61 = (!2 !60)
!62 = span !3 535 553
!63 = (!2 !62 !52)
!64 = (!2 !62)
!65 = span !3 534 553
!66 = (!2 !65)
!67 = (!2 !65)
!68 = span !3 527 554
!69 = (!2 !68)
!70 = span !3 568 586
!71 = (!2 !70 !52)
!72 = (!2 !70)
!73 = span !3 567 586
!74 = (!2 !73)
!75 = (!2 !73)
!76 = span !3 560 587
!77 = (!2 !76)
!78 = span !3 601 618
!79 = (!2 !78 !52)
!80 = (!2 !78)
!81 = span !3 600 618
!82 = (!2 !81)
!83 = (!2 !81)
!84 = span !3 593 619
!85 = (!2 !84)
!86 = span !3 632 655
!87 = (!2 !86 !52)
!88 = (!2 !86)
!89 = span !3 625 656
!90 = (!2 !89)
!91 = span !3 669 693
!92 = (!2 !91 !52)
!93 = (!2 !91)
!94 = span !3 662 694
!95 = (!2 !94)
!96 = span !3 730 734
!97 = (!2 !96)
!98 = span !3 719 742
!99 = (!2 !98)
!100 = (!2 !98)
!101 = span !3 720 724
!102 = (!2 !98)
!103 = (!2 !98)
!104 = span !3 726 728
!105 = (!2 !98)
!106 = (!2 !98)
!107 = (!2 !98)
!108 = (!2 !98)
!109 = span !3 736 741
!110 = (!2 !98)
!111 = span !3 707 743
!112 = (!2 !111 !52)
!113 = (!2 !111)
!114 = span !3 700 744
!115 = (!2 !114)
!116 = span !3 757 771
!117 = (!2 !116 !52)
!118 = (!2 !116)
!119 = span !3 750 772
!120 = (!2 !119)
!121 = span !3 785 799
!122 = (!2 !121 !52)
!123 = (!2 !121)
!124 = span !3 778 800
!125 = (!2 !124)
!126 = span !3 814 830
!127 = (!2 !126)
!128 = span !3 834 835
!129 = span !3 814 835
!130 = (!2 !129)
!131 = (!2 !129)
!132 = span !3 807 836
!133 = (!2 !132)
!134 = span !3 849 865
!135 = (!2 !134)
!136 = span !3 869 870
!137 = span !3 849 870
!138 = (!2 !137)
!139 = (!2 !137)
!140 = span !3 842 871
!141 = (!2 !140)
!142 = span !3 884 900
!143 = (!2 !142)
!144 = span !3 904 905
!145 = span !3 884 905
!146 = (!2 !145)
!147 = (!2 !145)
!148 = span !3 877 906
!149 = (!2 !148)
!150 = span !3 919 934
!151 = (!2 !150)
!152 = span !3 938 939
!153 = span !3 919 939
!154 = (!2 !153)
!155 = (!2 !153)
!156 = span !3 912 940
!157 = (!2 !156)
!158 = span !3 953 970
!159 = (!2 !158)
!160 = span !3 974 976
!161 = span !3 953 976
!162 = (!2 !161)
!163 = (!2 !161)
!164 = span !3 946 977
!165 = (!2 !164)
!166 = span !3 990 1010
!167 = (!2 !166)
!168 = span !3 1014 1016
!169 = span !3 990 1016
!170 = (!2 !169)
!171 = (!2 !169)
!172 = span !3 983 1017
!173 = (!2 !172)
!174 = span !3 1030 1051
!175 = (!2 !174)
!176 = span !3 1055 1057
!177 = span !3 1030 1057
!178 = (!2 !177)
!179 = (!2 !177)
!180 = span !3 1023 1058
!181 = (!2 !180)
!182 = span !3 1071 1094
!183 = (!2 !182)
!184 = span !3 1098 1100
!185 = span !3 1071 1100
!186 = (!2 !185)
!187 = (!2 !185)
!188 = span !3 1064 1101
!189 = (!2 !188)
!190 = span !3 1115 1129
!191 = (!2 !190)
!192 = span !3 1133 1134
!193 = span !3 1115 1134
!194 = (!2 !193)
!195 = (!2 !193)
!196 = span !3 1108 1135
!197 = (!2 !196)
!198 = span !3 1148 1162
!199 = (!2 !198)
!200 = span !3 1166 1167
!201 = span !3 1148 1167
!202 = (!2 !201)
!203 = (!2 !201)
!204 = span !3 1141 1168
!205 = (!2 !204)
!206 = span !3 1181 1195
!207 = (!2 !206)
!208 = span !3 1199 1200
!209 = span !3 1181 1200
!210 = (!2 !209)
!211 = (!2 !209)
!212 = span !3 1174 1201
!213 = (!2 !212)
!214 = span !3 1214 1228
!215 = (!2 !214)
!216 = span !3 1232 1233
!217 = span !3 1214 1233
!218 = (!2 !217)
!219 = (!2 !217)
!220 = span !3 1207 1234
!221 = (!2 !220)
!222 = span !3 1247 1261
!223 = (!2 !222)
!224 = span !3 1265 1267
!225 = span !3 1247 1267
!226 = (!2 !225)
!227 = (!2 !225)
!228 = span !3 1240 1268
!229 = (!2 !228)
!230 = span !3 1281 1295
!231 = (!2 !230)
!232 = span !3 1299 1301
!233 = span !3 1281 1301
!234 = (!2 !233)
!235 = (!2 !233)
!236 = span !3 1274 1302
!237 = (!2 !236)
!238 = span !3 1309 1313
!239 = span !0 48 74
!240 = span !0 107 113
!241 = span !0 92 114
!242 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!243 = span !242 64237 64250
!244 = (!241 !243)
!245 = (!241 !243)
!246 = (!241 !243)
!247 = (!241 !243)
!248 = (!241 !243)
!249 = (!241 !243)
!250 = (!241 !243)
!251 = (!241 !243)
!252 = (!241 !243)
!253 = (!241 !243)
!254 = (!241 !243)
!255 = span !242 159 222
!256 = (!241 !243 !255)
!257 = (!241 !243)
!258 = (!241 !243 !255)
!259 = (!241 !243)
!260 = (!241 !243)
!261 = span !242 64221 64251
!262 = (!241 !261)
!263 = (!241 !261)
!264 = span !242 55 82
!265 = (!241 !261 !264)
!266 = (!241 !261)
!267 = (!241 !261)
!268 = (!241 !261)
!269 = (!241 !261)
!270 = (!241 !261)
!271 = (!241 !261)
!272 = (!241 !261)
!273 = (!241 !261)
!274 = (!241 !261)
!275 = (!241 !261)
!276 = (!241 !261)
!277 = (!241 !261)
!278 = (!241 !261)
!279 = (!241 !261)
!280 = (!241 !261)
!281 = (!241 !261)
!282 = (!241 !261)
!283 = (!241 !261)
!284 = (!241 !261)
!285 = (!241 !261)
!286 = (!241 !261)
!287 = (!241 !261)
!288 = (!241 !261)
!289 = (!241 !261)
!290 = (!241 !261)
!291 = span !242 3836 3919
!292 = (!241 !261 !291)
!293 = (!241 !261)
!294 = (!241 !261 !291)
!295 = (!241 !261)
!296 = (!241 !261)
!297 = span !242 64208 64252
!298 = (!241 !297)
!299 = (!241 !297)
!300 = span !242 64257 64263
!301 = (!241 !300)
!302 = span !242 64257 64278
!303 = (!241 !302)
!304 = (!241 !302)
!305 = (!241 !302 !264)
!306 = (!241 !302)
!307 = (!241 !302)
!308 = (!241 !302)
!309 = (!241 !302)
!310 = (!241 !302)
!311 = (!241 !302)
!312 = (!241 !302)
!313 = (!241 !302)
!314 = (!241 !302)
!315 = (!241 !302)
!316 = (!241 !302)
!317 = (!241 !302)
!318 = (!241 !302)
!319 = (!241 !302)
!320 = (!241 !302)
!321 = (!241 !302)
!322 = (!241 !302)
!323 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!324 = span !323 935 944
!325 = span !323 921 1019
!326 = span !323 961 971
!327 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!328 = span !327 1038 1059
!329 = span !323 982 1010
!330 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!331 = span !330 691 705
!332 = (!329 !331)

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<11> __const0 = const string<11> "Fuel rocks!"
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __tmp_block_arg
        store v2 to v3
        br main_0_block0(v3), !5

        main_0_block0(v4: ptr b256):
        v5 = load v4
        v6 = get_local ptr string<11>, __const0
        v7 = load v6
        v8 = get_local ptr b256, zero, !7
        store v5 to v8, !8
        v9 = get_local ptr u64, a, !10
        v10 = const u64 1, !11
        store v10 to v9, !12
        v11 = get_local ptr u64, b, !14
        v12 = const u64 1, !15
        store v12 to v11, !16
        v13 = get_local ptr u64, c, !18
        v14 = const u64 1, !19
        store v14 to v13, !20
        v15 = get_local ptr u8, d, !22
        v16 = const u8 1, !23
        store v16 to v15, !24
        v17 = get_local ptr b256, zero, !26
        v18 = load v17, !2
        v19 = get_local ptr b256, e, !28
        store v18 to v19, !29
        v20 = get_local ptr string<11>, f, !31
        store v7 to v20, !32
        v21 = get_local ptr [u64; 3], __anon_0, !34
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2
        v24 = const u64 42, !35
        store v24 to v23, !36
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25, !2
        v27 = const u64 42, !35
        store v27 to v26, !37
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr u64, v28, !2
        v30 = const u64 42, !35
        store v30 to v29, !38
        v31 = load v21, !2
        v32 = get_local ptr [u64; 3], test_array, !40
        store v31 to v32, !41
        v33 = get_local ptr { bool, u64 }, __anon_1, !43
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr bool, v34, !2
        v36 = const bool false, !44
        store v36 to v35, !45
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37, !2
        v39 = const u64 11, !46
        store v39 to v38, !47
        v40 = load v33, !2
        v41 = get_local ptr { bool, u64 }, test_struct, !49
        store v40 to v41, !50
        v42 = const bool false
        br main_0_is_ref_type_9_block0(v42), !53

        main_0_is_ref_type_9_block0(v43: bool):
        br main_0_block1(v43), !54

        main_0_block1(v44: bool):
        v45 = const bool false, !56
        v46 = cmp eq v44 v45, !58
        br main_0_block2(v46), !59

        main_0_block2(v47: bool):
        v48 = call assert_2(v47), !61
        br main_0_is_ref_type_9_block04(v42), !63

        main_0_is_ref_type_9_block04(v49: bool):
        br main_0_block3(v49), !64

        main_0_block3(v50: bool):
        v51 = cmp eq v50 v45, !66
        br main_0_block5(v51), !67

        main_0_block5(v52: bool):
        v53 = call assert_2(v52), !69
        br main_0_is_ref_type_9_block07(v42), !71

        main_0_is_ref_type_9_block07(v54: bool):
        br main_0_block6(v54), !72

        main_0_block6(v55: bool):
        v56 = cmp eq v55 v45, !74
        br main_0_block8(v56), !75

        main_0_block8(v57: bool):
        v58 = call assert_2(v57), !77
        br main_0_is_ref_type_11_block0(v42), !79

        main_0_is_ref_type_11_block0(v59: bool):
        br main_0_block9(v59), !80

        main_0_block9(v60: bool):
        v61 = cmp eq v60 v45, !82
        br main_0_block10(v61), !83

        main_0_block10(v62: bool):
        v63 = call assert_2(v62), !85
        v64 = const bool true
        br main_0_is_ref_type_13_block0(v64), !87

        main_0_is_ref_type_13_block0(v65: bool):
        br main_0_block11(v65), !88

        main_0_block11(v66: bool):
        v67 = call assert_2(v66), !90
        br main_0_is_ref_type_15_block0(v64), !92

        main_0_is_ref_type_15_block0(v68: bool):
        br main_0_block12(v68), !93

        main_0_block12(v69: bool):
        v70 = call assert_2(v69), !95
        v71 = get_local ptr b256, zero, !97
        v72 = load v71, !2
        v73 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !99
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr bool, v74, !100
        v76 = const bool true, !101
        store v76 to v75, !102
        v77 = const u64 1
        v78 = get_elem_ptr v73, ptr u64, v77, !103
        v79 = const u64 11, !104
        store v79 to v78, !105
        v80 = const u64 2
        v81 = get_elem_ptr v73, ptr b256, v80, !106
        store v72 to v81, !107
        v82 = const u64 3
        v83 = get_elem_ptr v73, ptr u8, v82, !108
        v84 = const u8 255, !109
        store v84 to v83, !110
        br main_0_is_ref_type_17_block0(v64), !112

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !113

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !115
        br main_0_is_ref_type_19_block0(v64), !117

        main_0_is_ref_type_19_block0(v88: bool):
        br main_0_block14(v88), !118

        main_0_block14(v89: bool):
        v90 = call assert_2(v89), !120
        br main_0_is_ref_type_21_block0(v64), !122

        main_0_is_ref_type_21_block0(v91: bool):
        br main_0_block15(v91), !123

        main_0_block15(v92: bool):
        v93 = call assert_2(v92), !125
        v94 = const u64 8
        br main_0_block16(v94), !127

        main_0_block16(v95: u64):
        v96 = const u64 8, !128
        v97 = cmp eq v95 v96, !130
        br main_0_block17(v97), !131

        main_0_block17(v98: bool):
        v99 = call assert_2(v98), !133
        br main_0_block18(v94), !135

        main_0_block18(v100: u64):
        v101 = const u64 8, !136
        v102 = cmp eq v100 v101, !138
        br main_0_block19(v102), !139

        main_0_block19(v103: bool):
        v104 = call assert_2(v103), !141
        br main_0_block20(v94), !143

        main_0_block20(v105: u64):
        v106 = const u64 8, !144
        v107 = cmp eq v105 v106, !146
        br main_0_block21(v107), !147

        main_0_block21(v108: bool):
        v109 = call assert_2(v108), !149
        v110 = const u64 1
        br main_0_block22(v110), !151

        main_0_block22(v111: u64):
        v112 = const u64 1, !152
        v113 = cmp eq v111 v112, !154
        br main_0_block23(v113), !155

        main_0_block23(v114: bool):
        v115 = call assert_2(v114), !157
        v116 = const u64 32
        br main_0_block24(v116), !159

        main_0_block24(v117: u64):
        v118 = const u64 32, !160
        v119 = cmp eq v117 v118, !162
        br main_0_block25(v119), !163

        main_0_block25(v120: bool):
        v121 = call assert_2(v120), !165
        v122 = const u64 16
        br main_0_block26(v122), !167

        main_0_block26(v123: u64):
        v124 = const u64 16, !168
        v125 = cmp eq v123 v124, !170
        br main_0_block27(v125), !171

        main_0_block27(v126: bool):
        v127 = call assert_2(v126), !173
        v128 = const u64 24
        br main_0_block28(v128), !175

        main_0_block28(v129: u64):
        v130 = const u64 24, !176
        v131 = cmp eq v129 v130, !178
        br main_0_block29(v131), !179

        main_0_block29(v132: bool):
        v133 = call assert_2(v132), !181
        br main_0_block30(v122), !183

        main_0_block30(v134: u64):
        v135 = const u64 16, !184
        v136 = cmp eq v134 v135, !186
        br main_0_block31(v136), !187

        main_0_block31(v137: bool):
        v138 = call assert_2(v137), !189
        v139 = const u64 8
        br main_0_block32(v139), !191

        main_0_block32(v140: u64):
        v141 = const u64 8, !192
        v142 = cmp eq v140 v141, !194
        br main_0_block33(v142), !195

        main_0_block33(v143: bool):
        v144 = call assert_2(v143), !197
        br main_0_block34(v139), !199

        main_0_block34(v145: u64):
        v146 = const u64 8, !200
        v147 = cmp eq v145 v146, !202
        br main_0_block35(v147), !203

        main_0_block35(v148: bool):
        v149 = call assert_2(v148), !205
        br main_0_block36(v139), !207

        main_0_block36(v150: u64):
        v151 = const u64 8, !208
        v152 = cmp eq v150 v151, !210
        br main_0_block37(v152), !211

        main_0_block37(v153: bool):
        v154 = call assert_2(v153), !213
        v155 = const u64 1
        br main_0_block38(v155), !215

        main_0_block38(v156: u64):
        v157 = const u64 1, !216
        v158 = cmp eq v156 v157, !218
        br main_0_block39(v158), !219

        main_0_block39(v159: bool):
        v160 = call assert_2(v159), !221
        v161 = const u64 32
        br main_0_block40(v161), !223

        main_0_block40(v162: u64):
        v163 = const u64 32, !224
        v164 = cmp eq v162 v163, !226
        br main_0_block41(v164), !227

        main_0_block41(v165: bool):
        v166 = call assert_2(v165), !229
        v167 = const u64 16
        br main_0_block42(v167), !231

        main_0_block42(v168: u64):
        v169 = const u64 16, !232
        v170 = cmp eq v168 v169, !234
        br main_0_block43(v170), !235

        main_0_block43(v171: bool):
        v172 = call assert_2(v171), !237
        v173 = const bool true, !238
        br block0(v173), !2

        block0(v174: bool):
        v175 = get_local ptr bool, result, !239
        store v174 to v175, !239
        v176 = get_local ptr bool, result, !240
        v177 = load v176
        v178 = const u64 1024
        v179 = asm(cap: v178) -> u64 hp, !244 {
            aloc   cap
        }
        v180 = int_to_ptr v179 to ptr u8, !245
        v181 = ptr_to_int v180 to u64, !246
        v182 = get_local ptr { u64, u64, u64 }, __anon_00, !247
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !248
        store v181 to v184, !249
        v185 = const u64 1
        v186 = get_elem_ptr v182, ptr u64, v185, !250
        store v178 to v186, !251
        v187 = const u64 2
        v188 = get_elem_ptr v182, ptr u64, v187, !252
        v189 = const u64 0
        store v189 to v188, !253
        v190 = asm(buffer: v182) -> { u64, u64, u64 } buffer, !254 {
        }
        v191 = get_local ptr { { u64, u64, u64 } }, __anon_10, !256
        v192 = const u64 0
        v193 = get_elem_ptr v191, ptr { u64, u64, u64 }, v192, !257
        store v190 to v193, !258
        v194 = load v191, !259
        v195 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v194 to v195
        br encode_38_block0(v195), !260

        encode_38_block0(v196: ptr { { u64, u64, u64 } }):
        v197 = load v196
        v198 = ptr_to_int v197 to u64, !262
        v199 = int_to_ptr v198 to ptr { { u64, u64, u64 } }, !263
        v200 = const u64 0
        v201 = get_elem_ptr v199, ptr { u64, u64, u64 }, v200, !265
        v202 = load v201, !266
        v203 = asm(buffer: v202) -> { u64, u64, u64 } buffer, !267 {
        }
        v204 = get_local ptr { u64, u64, u64 }, __anon_000, !268
        store v203 to v204, !269
        v205 = const u64 0
        v206 = get_elem_ptr v204, ptr u64, v205, !270
        v207 = load v206, !271
        v208 = int_to_ptr v207 to ptr u8, !272
        v209 = const u64 1
        v210 = get_elem_ptr v204, ptr u64, v209, !273
        v211 = load v210, !274
        v212 = const u64 2
        v213 = get_elem_ptr v204, ptr u64, v212, !275
        v214 = load v213, !276
        v215 = ptr_to_int v208 to u64, !277
        v216 = add v215, v214, !278
        v217 = int_to_ptr v216 to ptr bool, !279
        store v177 to v217, !280
        v218 = const u64 1
        v219 = add v214, v218, !281
        v220 = ptr_to_int v208 to u64, !282
        v221 = get_local ptr { u64, u64, u64 }, __anon_100, !283
        v222 = const u64 0
        v223 = get_elem_ptr v221, ptr u64, v222, !284
        store v220 to v223, !285
        v224 = const u64 1
        v225 = get_elem_ptr v221, ptr u64, v224, !286
        store v211 to v225, !287
        v226 = const u64 2
        v227 = get_elem_ptr v221, ptr u64, v226, !288
        store v219 to v227, !289
        v228 = asm(buffer: v221) -> { u64, u64, u64 } buffer, !290 {
        }
        v229 = get_local ptr { { u64, u64, u64 } }, __anon_20, !292
        v230 = const u64 0
        v231 = get_elem_ptr v229, ptr { u64, u64, u64 }, v230, !293
        store v228 to v231, !294
        v232 = load v229, !295
        v233 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        store v232 to v233
        br encode_38_block1(v233), !296

        encode_38_block1(v234: ptr { { u64, u64, u64 } }):
        v235 = load v234
        v236 = get_local ptr { { u64, u64, u64 } }, buffer, !298
        store v235 to v236, !299
        v237 = get_local ptr { { u64, u64, u64 } }, buffer, !301
        v238 = load v237, !241
        v239 = ptr_to_int v238 to u64, !303
        v240 = int_to_ptr v239 to ptr { { u64, u64, u64 } }, !304
        v241 = const u64 0
        v242 = get_elem_ptr v240, ptr { u64, u64, u64 }, v241, !305
        v243 = load v242, !306
        v244 = asm(buffer: v243) -> { u64, u64, u64 } buffer, !307 {
        }
        v245 = get_local ptr { u64, u64, u64 }, __anon_01, !308
        store v244 to v245, !309
        v246 = const u64 0
        v247 = get_elem_ptr v245, ptr u64, v246, !310
        v248 = load v247, !311
        v249 = int_to_ptr v248 to ptr u8, !312
        v250 = const u64 2
        v251 = get_elem_ptr v245, ptr u64, v250, !313
        v252 = load v251, !314
        v253 = ptr_to_int v249 to u64, !315
        v254 = get_local ptr { u64, u64 }, __anon_11, !316
        v255 = const u64 0
        v256 = get_elem_ptr v254, ptr u64, v255, !317
        store v253 to v256, !318
        v257 = const u64 1
        v258 = get_elem_ptr v254, ptr u64, v257, !319
        store v252 to v258, !320
        v259 = asm(s: v254) -> slice s, !321 {
        }
        v260 = get_local ptr slice, __tmp_block_arg2
        store v259 to v260
        br encode_38_block2(v260), !322

        encode_38_block2(v261: ptr slice):
        v262 = load v261
        v263 = get_local ptr slice, __tmp_block_arg3
        store v262 to v263
        br block1(v263), !241

        block1(v264: ptr slice):
        v265 = load v264
        store v265 to v0
        ret ptr slice v0
    }

    pub fn assert_2(condition !324: bool) -> (), !325 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !56
        v1 = cmp eq condition v0, !326
        br block3(v1), !326

        block3(v2: bool):
        cbr v2, block0(), block1(), !326

        block0():
        v3 = const u64 18446744073709486084, !328
        revert v3, !332

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 188 211
!7 = (!2 !6)
!8 = (!2 !6)
!9 = span !3 216 231
!10 = (!2 !9)
!11 = span !3 229 230
!12 = (!2 !9)
!13 = span !3 236 251
!14 = (!2 !13)
!15 = span !3 249 250
!16 = (!2 !13)
!17 = span !3 256 271
!18 = (!2 !17)
!19 = span !3 269 270
!20 = (!2 !17)
!21 = span !3 276 290
!22 = (!2 !21)
!23 = span !3 288 289
!24 = (!2 !21)
!25 = span !3 309 313
!26 = (!2 !25)
!27 = span !3 295 314
!28 = (!2 !27)
!29 = (!2 !27)
!30 = span !3 319 366
!31 = (!2 !30)
!32 = (!2 !30)
!33 = span !3 389 399
!34 = (!2 !33)
!35 = span !3 390 395
!36 = (!2 !33)
!37 = (!2 !33)
!38 = (!2 !33)
!39 = span !3 372 400
!40 = (!2 !39)
!41 = (!2 !39)
!42 = span !3 424 487
!43 = (!2 !42)
!44 = span !3 454 459
!45 = (!2 !42)
!46 = span !3 478 480
!47 = (!2 !42)
!48 = span !3 406 488
!49 = (!2 !48)
!50 = (!2 !48)
!51 = span !3 502 520
!52 = span !3 136 160
!53 = (!2 !51 !52)
!54 = (!2 !51)
!55 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!56 = span !55 9991 9996
!57 = span !3 501 520
!58 = (!2 !57)
!59 = (!2 !57)
!60 = span !3 494 521
!61 = (!2 !60)
!62 = span !3 535 553
!63 = (!2 !62 !52)
!64 = (!2 !62)
!65 = span !3 534 553
!66 = (!2 !65)
!67 = (!2 !65)
!68 = span !3 527 554
!69 = (!2 !68)
!70 = span !3 568 586
!71 = (!2 !70 !52)
!72 = (!2 !70)
!73 = span !3 567 586
!74 = (!2 !73)
!75 = (!2 !73)
!76 = span !3 560 587
!77 = (!2 !76)
!78 = span !3 601 618
!79 = (!2 !78 !52)
!80 = (!2 !78)
!81 = span !3 600 618
!82 = (!2 !81)
!83 = (!2 !81)
!84 = span !3 593 619
!85 = (!2 !84)
!86 = span !3 632 655
!87 = (!2 !86 !52)
!88 = (!2 !86)
!89 = span !3 625 656
!90 = (!2 !89)
!91 = span !3 669 693
!92 = (!2 !91 !52)
!93 = (!2 !91)
!94 = span !3 662 694
!95 = (!2 !94)
!96 = span !3 730 734
!97 = (!2 !96)
!98 = span !3 719 742
!99 = (!2 !98)
!100 = (!2 !98)
!101 = span !3 720 724
!102 = (!2 !98)
!103 = (!2 !98)
!104 = span !3 726 728
!105 = (!2 !98)
!106 = (!2 !98)
!107 = (!2 !98)
!108 = (!2 !98)
!109 = span !3 736 741
!110 = (!2 !98)
!111 = span !3 707 743
!112 = (!2 !111 !52)
!113 = (!2 !111)
!114 = span !3 700 744
!115 = (!2 !114)
!116 = span !3 757 771
!117 = (!2 !116 !52)
!118 = (!2 !116)
!119 = span !3 750 772
!120 = (!2 !119)
!121 = span !3 785 799
!122 = (!2 !121 !52)
!123 = (!2 !121)
!124 = span !3 778 800
!125 = (!2 !124)
!126 = span !3 814 830
!127 = (!2 !126)
!128 = span !3 834 835
!129 = span !3 814 835
!130 = (!2 !129)
!131 = (!2 !129)
!132 = span !3 807 836
!133 = (!2 !132)
!134 = span !3 849 865
!135 = (!2 !134)
!136 = span !3 869 870
!137 = span !3 849 870
!138 = (!2 !137)
!139 = (!2 !137)
!140 = span !3 842 871
!141 = (!2 !140)
!142 = span !3 884 900
!143 = (!2 !142)
!144 = span !3 904 905
!145 = span !3 884 905
!146 = (!2 !145)
!147 = (!2 !145)
!148 = span !3 877 906
!149 = (!2 !148)
!150 = span !3 919 934
!151 = (!2 !150)
!152 = span !3 938 939
!153 = span !3 919 939
!154 = (!2 !153)
!155 = (!2 !153)
!156 = span !3 912 940
!157 = (!2 !156)
!158 = span !3 953 970
!159 = (!2 !158)
!160 = span !3 974 976
!161 = span !3 953 976
!162 = (!2 !161)
!163 = (!2 !161)
!164 = span !3 946 977
!165 = (!2 !164)
!166 = span !3 990 1010
!167 = (!2 !166)
!168 = span !3 1014 1016
!169 = span !3 990 1016
!170 = (!2 !169)
!171 = (!2 !169)
!172 = span !3 983 1017
!173 = (!2 !172)
!174 = span !3 1030 1051
!175 = (!2 !174)
!176 = span !3 1055 1057
!177 = span !3 1030 1057
!178 = (!2 !177)
!179 = (!2 !177)
!180 = span !3 1023 1058
!181 = (!2 !180)
!182 = span !3 1071 1094
!183 = (!2 !182)
!184 = span !3 1098 1100
!185 = span !3 1071 1100
!186 = (!2 !185)
!187 = (!2 !185)
!188 = span !3 1064 1101
!189 = (!2 !188)
!190 = span !3 1115 1129
!191 = (!2 !190)
!192 = span !3 1133 1134
!193 = span !3 1115 1134
!194 = (!2 !193)
!195 = (!2 !193)
!196 = span !3 1108 1135
!197 = (!2 !196)
!198 = span !3 1148 1162
!199 = (!2 !198)
!200 = span !3 1166 1167
!201 = span !3 1148 1167
!202 = (!2 !201)
!203 = (!2 !201)
!204 = span !3 1141 1168
!205 = (!2 !204)
!206 = span !3 1181 1195
!207 = (!2 !206)
!208 = span !3 1199 1200
!209 = span !3 1181 1200
!210 = (!2 !209)
!211 = (!2 !209)
!212 = span !3 1174 1201
!213 = (!2 !212)
!214 = span !3 1214 1228
!215 = (!2 !214)
!216 = span !3 1232 1233
!217 = span !3 1214 1233
!218 = (!2 !217)
!219 = (!2 !217)
!220 = span !3 1207 1234
!221 = (!2 !220)
!222 = span !3 1247 1261
!223 = (!2 !222)
!224 = span !3 1265 1267
!225 = span !3 1247 1267
!226 = (!2 !225)
!227 = (!2 !225)
!228 = span !3 1240 1268
!229 = (!2 !228)
!230 = span !3 1281 1295
!231 = (!2 !230)
!232 = span !3 1299 1301
!233 = span !3 1281 1301
!234 = (!2 !233)
!235 = (!2 !233)
!236 = span !3 1274 1302
!237 = (!2 !236)
!238 = span !3 1309 1313
!239 = span !0 48 74
!240 = span !0 107 113
!241 = span !0 92 114
!242 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!243 = span !242 64237 64250
!244 = (!241 !243)
!245 = (!241 !243)
!246 = (!241 !243)
!247 = (!241 !243)
!248 = (!241 !243)
!249 = (!241 !243)
!250 = (!241 !243)
!251 = (!241 !243)
!252 = (!241 !243)
!253 = (!241 !243)
!254 = (!241 !243)
!255 = span !242 159 222
!256 = (!241 !243 !255)
!257 = (!241 !243)
!258 = (!241 !243 !255)
!259 = (!241 !243)
!260 = (!241 !243)
!261 = span !242 64221 64251
!262 = (!241 !261)
!263 = (!241 !261)
!264 = span !242 55 82
!265 = (!241 !261 !264)
!266 = (!241 !261)
!267 = (!241 !261)
!268 = (!241 !261)
!269 = (!241 !261)
!270 = (!241 !261)
!271 = (!241 !261)
!272 = (!241 !261)
!273 = (!241 !261)
!274 = (!241 !261)
!275 = (!241 !261)
!276 = (!241 !261)
!277 = (!241 !261)
!278 = (!241 !261)
!279 = (!241 !261)
!280 = (!241 !261)
!281 = (!241 !261)
!282 = (!241 !261)
!283 = (!241 !261)
!284 = (!241 !261)
!285 = (!241 !261)
!286 = (!241 !261)
!287 = (!241 !261)
!288 = (!241 !261)
!289 = (!241 !261)
!290 = (!241 !261)
!291 = span !242 3836 3919
!292 = (!241 !261 !291)
!293 = (!241 !261)
!294 = (!241 !261 !291)
!295 = (!241 !261)
!296 = (!241 !261)
!297 = span !242 64208 64252
!298 = (!241 !297)
!299 = (!241 !297)
!300 = span !242 64257 64263
!301 = (!241 !300)
!302 = span !242 64257 64278
!303 = (!241 !302)
!304 = (!241 !302)
!305 = (!241 !302 !264)
!306 = (!241 !302)
!307 = (!241 !302)
!308 = (!241 !302)
!309 = (!241 !302)
!310 = (!241 !302)
!311 = (!241 !302)
!312 = (!241 !302)
!313 = (!241 !302)
!314 = (!241 !302)
!315 = (!241 !302)
!316 = (!241 !302)
!317 = (!241 !302)
!318 = (!241 !302)
!319 = (!241 !302)
!320 = (!241 !302)
!321 = (!241 !302)
!322 = (!241 !302)
!323 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!324 = span !323 935 944
!325 = span !323 921 1019
!326 = span !323 961 971
!327 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!328 = span !327 1038 1059
!329 = span !323 982 1010
!330 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!331 = span !330 691 705
!332 = (!329 !331)

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<11> __const0 = const string<11> "Fuel rocks!"
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __tmp_block_arg
        store v2 to v3
        br main_0_block0(v3), !5

        main_0_block0(v4: ptr b256):
        v5 = load v4
        v6 = get_local ptr string<11>, __const0
        v7 = load v6
        v8 = get_local ptr b256, zero, !7
        store v5 to v8, !8
        v9 = get_local ptr u64, a, !10
        v10 = const u64 1, !11
        store v10 to v9, !12
        v11 = get_local ptr u64, b, !14
        v12 = const u64 1, !15
        store v12 to v11, !16
        v13 = get_local ptr u64, c, !18
        v14 = const u64 1, !19
        store v14 to v13, !20
        v15 = get_local ptr u8, d, !22
        v16 = const u8 1, !23
        store v16 to v15, !24
        v17 = get_local ptr b256, zero, !26
        v18 = load v17, !2
        v19 = get_local ptr b256, e, !28
        store v18 to v19, !29
        v20 = get_local ptr string<11>, f, !31
        store v7 to v20, !32
        v21 = get_local ptr [u64; 3], __anon_0, !34
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2
        v24 = const u64 42, !35
        store v24 to v23, !36
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25, !2
        v27 = const u64 42, !35
        store v27 to v26, !37
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr u64, v28, !2
        v30 = const u64 42, !35
        store v30 to v29, !38
        v31 = load v21, !2
        v32 = get_local ptr [u64; 3], test_array, !40
        store v31 to v32, !41
        v33 = get_local ptr { bool, u64 }, __anon_1, !43
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr bool, v34, !2
        v36 = const bool false, !44
        store v36 to v35, !45
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37, !2
        v39 = const u64 11, !46
        store v39 to v38, !47
        v40 = load v33, !2
        v41 = get_local ptr { bool, u64 }, test_struct, !49
        store v40 to v41, !50
        v42 = const bool false
        br main_0_is_ref_type_9_block0(v42), !53

        main_0_is_ref_type_9_block0(v43: bool):
        br main_0_block1(v43), !54

        main_0_block1(v44: bool):
        v45 = const bool false, !56
        v46 = cmp eq v44 v45, !58
        br main_0_block2(v46), !59

        main_0_block2(v47: bool):
        v48 = call assert_2(v47), !61
        br main_0_is_ref_type_9_block04(v42), !63

        main_0_is_ref_type_9_block04(v49: bool):
        br main_0_block3(v49), !64

        main_0_block3(v50: bool):
        v51 = cmp eq v50 v45, !66
        br main_0_block5(v51), !67

        main_0_block5(v52: bool):
        v53 = call assert_2(v52), !69
        br main_0_is_ref_type_9_block07(v42), !71

        main_0_is_ref_type_9_block07(v54: bool):
        br main_0_block6(v54), !72

        main_0_block6(v55: bool):
        v56 = cmp eq v55 v45, !74
        br main_0_block8(v56), !75

        main_0_block8(v57: bool):
        v58 = call assert_2(v57), !77
        br main_0_is_ref_type_11_block0(v42), !79

        main_0_is_ref_type_11_block0(v59: bool):
        br main_0_block9(v59), !80

        main_0_block9(v60: bool):
        v61 = cmp eq v60 v45, !82
        br main_0_block10(v61), !83

        main_0_block10(v62: bool):
        v63 = call assert_2(v62), !85
        v64 = const bool true
        br main_0_is_ref_type_13_block0(v64), !87

        main_0_is_ref_type_13_block0(v65: bool):
        br main_0_block11(v65), !88

        main_0_block11(v66: bool):
        v67 = call assert_2(v66), !90
        br main_0_is_ref_type_15_block0(v64), !92

        main_0_is_ref_type_15_block0(v68: bool):
        br main_0_block12(v68), !93

        main_0_block12(v69: bool):
        v70 = call assert_2(v69), !95
        v71 = get_local ptr b256, zero, !97
        v72 = load v71, !2
        v73 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !99
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr bool, v74, !100
        v76 = const bool true, !101
        store v76 to v75, !102
        v77 = const u64 1
        v78 = get_elem_ptr v73, ptr u64, v77, !103
        v79 = const u64 11, !104
        store v79 to v78, !105
        v80 = const u64 2
        v81 = get_elem_ptr v73, ptr b256, v80, !106
        store v72 to v81, !107
        v82 = const u64 3
        v83 = get_elem_ptr v73, ptr u8, v82, !108
        v84 = const u8 255, !109
        store v84 to v83, !110
        br main_0_is_ref_type_17_block0(v64), !112

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !113

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !115
        br main_0_is_ref_type_19_block0(v64), !117

        main_0_is_ref_type_19_block0(v88: bool):
        br main_0_block14(v88), !118

        main_0_block14(v89: bool):
        v90 = call assert_2(v89), !120
        br main_0_is_ref_type_21_block0(v64), !122

        main_0_is_ref_type_21_block0(v91: bool):
        br main_0_block15(v91), !123

        main_0_block15(v92: bool):
        v93 = call assert_2(v92), !125
        v94 = const u64 8
        br main_0_block16(v94), !127

        main_0_block16(v95: u64):
        v96 = const u64 8, !128
        v97 = cmp eq v95 v96, !130
        br main_0_block17(v97), !131

        main_0_block17(v98: bool):
        v99 = call assert_2(v98), !133
        br main_0_block18(v94), !135

        main_0_block18(v100: u64):
        v101 = const u64 8, !136
        v102 = cmp eq v100 v101, !138
        br main_0_block19(v102), !139

        main_0_block19(v103: bool):
        v104 = call assert_2(v103), !141
        br main_0_block20(v94), !143

        main_0_block20(v105: u64):
        v106 = const u64 8, !144
        v107 = cmp eq v105 v106, !146
        br main_0_block21(v107), !147

        main_0_block21(v108: bool):
        v109 = call assert_2(v108), !149
        v110 = const u64 1
        br main_0_block22(v110), !151

        main_0_block22(v111: u64):
        v112 = const u64 1, !152
        v113 = cmp eq v111 v112, !154
        br main_0_block23(v113), !155

        main_0_block23(v114: bool):
        v115 = call assert_2(v114), !157
        v116 = const u64 32
        br main_0_block24(v116), !159

        main_0_block24(v117: u64):
        v118 = const u64 32, !160
        v119 = cmp eq v117 v118, !162
        br main_0_block25(v119), !163

        main_0_block25(v120: bool):
        v121 = call assert_2(v120), !165
        v122 = const u64 16
        br main_0_block26(v122), !167

        main_0_block26(v123: u64):
        v124 = const u64 16, !168
        v125 = cmp eq v123 v124, !170
        br main_0_block27(v125), !171

        main_0_block27(v126: bool):
        v127 = call assert_2(v126), !173
        v128 = const u64 24
        br main_0_block28(v128), !175

        main_0_block28(v129: u64):
        v130 = const u64 24, !176
        v131 = cmp eq v129 v130, !178
        br main_0_block29(v131), !179

        main_0_block29(v132: bool):
        v133 = call assert_2(v132), !181
        br main_0_block30(v122), !183

        main_0_block30(v134: u64):
        v135 = const u64 16, !184
        v136 = cmp eq v134 v135, !186
        br main_0_block31(v136), !187

        main_0_block31(v137: bool):
        v138 = call assert_2(v137), !189
        v139 = const u64 8
        br main_0_block32(v139), !191

        main_0_block32(v140: u64):
        v141 = const u64 8, !192
        v142 = cmp eq v140 v141, !194
        br main_0_block33(v142), !195

        main_0_block33(v143: bool):
        v144 = call assert_2(v143), !197
        br main_0_block34(v139), !199

        main_0_block34(v145: u64):
        v146 = const u64 8, !200
        v147 = cmp eq v145 v146, !202
        br main_0_block35(v147), !203

        main_0_block35(v148: bool):
        v149 = call assert_2(v148), !205
        br main_0_block36(v139), !207

        main_0_block36(v150: u64):
        v151 = const u64 8, !208
        v152 = cmp eq v150 v151, !210
        br main_0_block37(v152), !211

        main_0_block37(v153: bool):
        v154 = call assert_2(v153), !213
        v155 = const u64 1
        br main_0_block38(v155), !215

        main_0_block38(v156: u64):
        v157 = const u64 1, !216
        v158 = cmp eq v156 v157, !218
        br main_0_block39(v158), !219

        main_0_block39(v159: bool):
        v160 = call assert_2(v159), !221
        v161 = const u64 32
        br main_0_block40(v161), !223

        main_0_block40(v162: u64):
        v163 = const u64 32, !224
        v164 = cmp eq v162 v163, !226
        br main_0_block41(v164), !227

        main_0_block41(v165: bool):
        v166 = call assert_2(v165), !229
        v167 = const u64 16
        br main_0_block42(v167), !231

        main_0_block42(v168: u64):
        v169 = const u64 16, !232
        v170 = cmp eq v168 v169, !234
        br main_0_block43(v170), !235

        main_0_block43(v171: bool):
        v172 = call assert_2(v171), !237
        v173 = const bool true, !238
        br block0(v173), !2

        block0(v174: bool):
        v175 = get_local ptr bool, result, !239
        store v174 to v175, !239
        v176 = get_local ptr bool, result, !240
        v177 = load v176
        v178 = const u64 1024
        v179 = asm(cap: v178) -> u64 hp, !244 {
            aloc   cap
        }
        v180 = int_to_ptr v179 to ptr u8, !245
        v181 = ptr_to_int v180 to u64, !246
        v182 = get_local ptr { u64, u64, u64 }, __anon_00, !247
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !248
        store v181 to v184, !249
        v185 = const u64 1
        v186 = get_elem_ptr v182, ptr u64, v185, !250
        store v178 to v186, !251
        v187 = const u64 2
        v188 = get_elem_ptr v182, ptr u64, v187, !252
        v189 = const u64 0
        store v189 to v188, !253
        v190 = asm(buffer: v182) -> ptr { u64, u64, u64 } buffer {
        }
        v191 = load v190
        v192 = get_local ptr { { u64, u64, u64 } }, __anon_10, !255
        v193 = const u64 0
        v194 = get_elem_ptr v192, ptr { u64, u64, u64 }, v193, !256
        store v191 to v194, !257
        v195 = load v192, !258
        v196 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        store v195 to v196
        br encode_38_block0(v196), !259

        encode_38_block0(v197: ptr { { u64, u64, u64 } }):
        v198 = load v197
        v199 = ptr_to_int v197 to u64, !261
        v200 = int_to_ptr v199 to ptr { { u64, u64, u64 } }, !262
        v201 = const u64 0
        v202 = get_elem_ptr v200, ptr { u64, u64, u64 }, v201, !264
        v203 = load v202, !265
        v204 = get_local ptr { u64, u64, u64 }, __asm_arg
        store v203 to v204
        v205 = asm(buffer: v204) -> ptr { u64, u64, u64 } buffer {
        }
        v206 = load v205
        v207 = get_local ptr { u64, u64, u64 }, __anon_000, !266
        store v206 to v207, !267
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr u64, v208, !268
        v210 = load v209, !269
        v211 = int_to_ptr v210 to ptr u8, !270
        v212 = const u64 1
        v213 = get_elem_ptr v207, ptr u64, v212, !271
        v214 = load v213, !272
        v215 = const u64 2
        v216 = get_elem_ptr v207, ptr u64, v215, !273
        v217 = load v216, !274
        v218 = ptr_to_int v211 to u64, !275
        v219 = add v218, v217, !276
        v220 = int_to_ptr v219 to ptr bool, !277
        store v177 to v220, !278
        v221 = const u64 1
        v222 = add v217, v221, !279
        v223 = ptr_to_int v211 to u64, !280
        v224 = get_local ptr { u64, u64, u64 }, __anon_100, !281
        v225 = const u64 0
        v226 = get_elem_ptr v224, ptr u64, v225, !282
        store v223 to v226, !283
        v227 = const u64 1
        v228 = get_elem_ptr v224, ptr u64, v227, !284
        store v214 to v228, !285
        v229 = const u64 2
        v230 = get_elem_ptr v224, ptr u64, v229, !286
        store v222 to v230, !287
        v231 = asm(buffer: v224) -> ptr { u64, u64, u64 } buffer {
        }
        v232 = load v231
        v233 = get_local ptr { { u64, u64, u64 } }, __anon_20, !289
        v234 = const u64 0
        v235 = get_elem_ptr v233, ptr { u64, u64, u64 }, v234, !290
        store v232 to v235, !291
        v236 = load v233, !292
        v237 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        store v236 to v237
        br encode_38_block1(v237), !293

        encode_38_block1(v238: ptr { { u64, u64, u64 } }):
        v239 = load v238
        v240 = get_local ptr { { u64, u64, u64 } }, buffer, !295
        store v239 to v240, !296
        v241 = get_local ptr { { u64, u64, u64 } }, buffer, !298
        v242 = load v241, !241
        v243 = ptr_to_int v241 to u64, !300
        v244 = int_to_ptr v243 to ptr { { u64, u64, u64 } }, !301
        v245 = const u64 0
        v246 = get_elem_ptr v244, ptr { u64, u64, u64 }, v245, !302
        v247 = load v246, !303
        v248 = get_local ptr { u64, u64, u64 }, __asm_arg0
        store v247 to v248
        v249 = asm(buffer: v248) -> ptr { u64, u64, u64 } buffer {
        }
        v250 = load v249
        v251 = get_local ptr { u64, u64, u64 }, __anon_01, !304
        store v250 to v251, !305
        v252 = const u64 0
        v253 = get_elem_ptr v251, ptr u64, v252, !306
        v254 = load v253, !307
        v255 = int_to_ptr v254 to ptr u8, !308
        v256 = const u64 2
        v257 = get_elem_ptr v251, ptr u64, v256, !309
        v258 = load v257, !310
        v259 = ptr_to_int v255 to u64, !311
        v260 = get_local ptr { u64, u64 }, __anon_11, !312
        v261 = const u64 0
        v262 = get_elem_ptr v260, ptr u64, v261, !313
        store v259 to v262, !314
        v263 = const u64 1
        v264 = get_elem_ptr v260, ptr u64, v263, !315
        store v258 to v264, !316
        v265 = asm(s: v260) -> ptr slice s {
        }
        v266 = load v265
        v267 = get_local ptr slice, __tmp_block_arg2
        store v266 to v267
        br encode_38_block2(v267), !317

        encode_38_block2(v268: ptr slice):
        v269 = load v268
        v270 = get_local ptr slice, __tmp_block_arg3
        store v269 to v270
        br block1(v270), !241

        block1(v271: ptr slice):
        v272 = load v271
        store v272 to v0
        ret ptr slice v0
    }

    pub fn assert_2(condition !319: bool) -> (), !320 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !56
        v1 = cmp eq condition v0, !321
        br block3(v1), !321

        block3(v2: bool):
        cbr v2, block0(), block1(), !321

        block0():
        v3 = const u64 18446744073709486084, !323
        revert v3, !327

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 188 211
!7 = (!2 !6)
!8 = (!2 !6)
!9 = span !3 216 231
!10 = (!2 !9)
!11 = span !3 229 230
!12 = (!2 !9)
!13 = span !3 236 251
!14 = (!2 !13)
!15 = span !3 249 250
!16 = (!2 !13)
!17 = span !3 256 271
!18 = (!2 !17)
!19 = span !3 269 270
!20 = (!2 !17)
!21 = span !3 276 290
!22 = (!2 !21)
!23 = span !3 288 289
!24 = (!2 !21)
!25 = span !3 309 313
!26 = (!2 !25)
!27 = span !3 295 314
!28 = (!2 !27)
!29 = (!2 !27)
!30 = span !3 319 366
!31 = (!2 !30)
!32 = (!2 !30)
!33 = span !3 389 399
!34 = (!2 !33)
!35 = span !3 390 395
!36 = (!2 !33)
!37 = (!2 !33)
!38 = (!2 !33)
!39 = span !3 372 400
!40 = (!2 !39)
!41 = (!2 !39)
!42 = span !3 424 487
!43 = (!2 !42)
!44 = span !3 454 459
!45 = (!2 !42)
!46 = span !3 478 480
!47 = (!2 !42)
!48 = span !3 406 488
!49 = (!2 !48)
!50 = (!2 !48)
!51 = span !3 502 520
!52 = span !3 136 160
!53 = (!2 !51 !52)
!54 = (!2 !51)
!55 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!56 = span !55 9991 9996
!57 = span !3 501 520
!58 = (!2 !57)
!59 = (!2 !57)
!60 = span !3 494 521
!61 = (!2 !60)
!62 = span !3 535 553
!63 = (!2 !62 !52)
!64 = (!2 !62)
!65 = span !3 534 553
!66 = (!2 !65)
!67 = (!2 !65)
!68 = span !3 527 554
!69 = (!2 !68)
!70 = span !3 568 586
!71 = (!2 !70 !52)
!72 = (!2 !70)
!73 = span !3 567 586
!74 = (!2 !73)
!75 = (!2 !73)
!76 = span !3 560 587
!77 = (!2 !76)
!78 = span !3 601 618
!79 = (!2 !78 !52)
!80 = (!2 !78)
!81 = span !3 600 618
!82 = (!2 !81)
!83 = (!2 !81)
!84 = span !3 593 619
!85 = (!2 !84)
!86 = span !3 632 655
!87 = (!2 !86 !52)
!88 = (!2 !86)
!89 = span !3 625 656
!90 = (!2 !89)
!91 = span !3 669 693
!92 = (!2 !91 !52)
!93 = (!2 !91)
!94 = span !3 662 694
!95 = (!2 !94)
!96 = span !3 730 734
!97 = (!2 !96)
!98 = span !3 719 742
!99 = (!2 !98)
!100 = (!2 !98)
!101 = span !3 720 724
!102 = (!2 !98)
!103 = (!2 !98)
!104 = span !3 726 728
!105 = (!2 !98)
!106 = (!2 !98)
!107 = (!2 !98)
!108 = (!2 !98)
!109 = span !3 736 741
!110 = (!2 !98)
!111 = span !3 707 743
!112 = (!2 !111 !52)
!113 = (!2 !111)
!114 = span !3 700 744
!115 = (!2 !114)
!116 = span !3 757 771
!117 = (!2 !116 !52)
!118 = (!2 !116)
!119 = span !3 750 772
!120 = (!2 !119)
!121 = span !3 785 799
!122 = (!2 !121 !52)
!123 = (!2 !121)
!124 = span !3 778 800
!125 = (!2 !124)
!126 = span !3 814 830
!127 = (!2 !126)
!128 = span !3 834 835
!129 = span !3 814 835
!130 = (!2 !129)
!131 = (!2 !129)
!132 = span !3 807 836
!133 = (!2 !132)
!134 = span !3 849 865
!135 = (!2 !134)
!136 = span !3 869 870
!137 = span !3 849 870
!138 = (!2 !137)
!139 = (!2 !137)
!140 = span !3 842 871
!141 = (!2 !140)
!142 = span !3 884 900
!143 = (!2 !142)
!144 = span !3 904 905
!145 = span !3 884 905
!146 = (!2 !145)
!147 = (!2 !145)
!148 = span !3 877 906
!149 = (!2 !148)
!150 = span !3 919 934
!151 = (!2 !150)
!152 = span !3 938 939
!153 = span !3 919 939
!154 = (!2 !153)
!155 = (!2 !153)
!156 = span !3 912 940
!157 = (!2 !156)
!158 = span !3 953 970
!159 = (!2 !158)
!160 = span !3 974 976
!161 = span !3 953 976
!162 = (!2 !161)
!163 = (!2 !161)
!164 = span !3 946 977
!165 = (!2 !164)
!166 = span !3 990 1010
!167 = (!2 !166)
!168 = span !3 1014 1016
!169 = span !3 990 1016
!170 = (!2 !169)
!171 = (!2 !169)
!172 = span !3 983 1017
!173 = (!2 !172)
!174 = span !3 1030 1051
!175 = (!2 !174)
!176 = span !3 1055 1057
!177 = span !3 1030 1057
!178 = (!2 !177)
!179 = (!2 !177)
!180 = span !3 1023 1058
!181 = (!2 !180)
!182 = span !3 1071 1094
!183 = (!2 !182)
!184 = span !3 1098 1100
!185 = span !3 1071 1100
!186 = (!2 !185)
!187 = (!2 !185)
!188 = span !3 1064 1101
!189 = (!2 !188)
!190 = span !3 1115 1129
!191 = (!2 !190)
!192 = span !3 1133 1134
!193 = span !3 1115 1134
!194 = (!2 !193)
!195 = (!2 !193)
!196 = span !3 1108 1135
!197 = (!2 !196)
!198 = span !3 1148 1162
!199 = (!2 !198)
!200 = span !3 1166 1167
!201 = span !3 1148 1167
!202 = (!2 !201)
!203 = (!2 !201)
!204 = span !3 1141 1168
!205 = (!2 !204)
!206 = span !3 1181 1195
!207 = (!2 !206)
!208 = span !3 1199 1200
!209 = span !3 1181 1200
!210 = (!2 !209)
!211 = (!2 !209)
!212 = span !3 1174 1201
!213 = (!2 !212)
!214 = span !3 1214 1228
!215 = (!2 !214)
!216 = span !3 1232 1233
!217 = span !3 1214 1233
!218 = (!2 !217)
!219 = (!2 !217)
!220 = span !3 1207 1234
!221 = (!2 !220)
!222 = span !3 1247 1261
!223 = (!2 !222)
!224 = span !3 1265 1267
!225 = span !3 1247 1267
!226 = (!2 !225)
!227 = (!2 !225)
!228 = span !3 1240 1268
!229 = (!2 !228)
!230 = span !3 1281 1295
!231 = (!2 !230)
!232 = span !3 1299 1301
!233 = span !3 1281 1301
!234 = (!2 !233)
!235 = (!2 !233)
!236 = span !3 1274 1302
!237 = (!2 !236)
!238 = span !3 1309 1313
!239 = span !0 48 74
!240 = span !0 107 113
!241 = span !0 92 114
!242 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!243 = span !242 64237 64250
!244 = (!241 !243)
!245 = (!241 !243)
!246 = (!241 !243)
!247 = (!241 !243)
!248 = (!241 !243)
!249 = (!241 !243)
!250 = (!241 !243)
!251 = (!241 !243)
!252 = (!241 !243)
!253 = (!241 !243)
!254 = span !242 159 222
!255 = (!241 !243 !254)
!256 = (!241 !243)
!257 = (!241 !243 !254)
!258 = (!241 !243)
!259 = (!241 !243)
!260 = span !242 64221 64251
!261 = (!241 !260)
!262 = (!241 !260)
!263 = span !242 55 82
!264 = (!241 !260 !263)
!265 = (!241 !260)
!266 = (!241 !260)
!267 = (!241 !260)
!268 = (!241 !260)
!269 = (!241 !260)
!270 = (!241 !260)
!271 = (!241 !260)
!272 = (!241 !260)
!273 = (!241 !260)
!274 = (!241 !260)
!275 = (!241 !260)
!276 = (!241 !260)
!277 = (!241 !260)
!278 = (!241 !260)
!279 = (!241 !260)
!280 = (!241 !260)
!281 = (!241 !260)
!282 = (!241 !260)
!283 = (!241 !260)
!284 = (!241 !260)
!285 = (!241 !260)
!286 = (!241 !260)
!287 = (!241 !260)
!288 = span !242 3836 3919
!289 = (!241 !260 !288)
!290 = (!241 !260)
!291 = (!241 !260 !288)
!292 = (!241 !260)
!293 = (!241 !260)
!294 = span !242 64208 64252
!295 = (!241 !294)
!296 = (!241 !294)
!297 = span !242 64257 64263
!298 = (!241 !297)
!299 = span !242 64257 64278
!300 = (!241 !299)
!301 = (!241 !299)
!302 = (!241 !299 !263)
!303 = (!241 !299)
!304 = (!241 !299)
!305 = (!241 !299)
!306 = (!241 !299)
!307 = (!241 !299)
!308 = (!241 !299)
!309 = (!241 !299)
!310 = (!241 !299)
!311 = (!241 !299)
!312 = (!241 !299)
!313 = (!241 !299)
!314 = (!241 !299)
!315 = (!241 !299)
!316 = (!241 !299)
!317 = (!241 !299)
!318 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!319 = span !318 935 944
!320 = span !318 921 1019
!321 = span !318 961 971
!322 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!323 = span !322 1038 1059
!324 = span !318 982 1010
!325 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!326 = span !325 691 705
!327 = (!324 !326)

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<11> __const0 = const string<11> "Fuel rocks!"
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local b256 e
        local string<11> f
        local bool result
        local [u64; 3] test_array
        local { bool, u64 } test_struct
        local b256 zero

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = load v1
        v3 = get_local ptr b256, __tmp_block_arg
        mem_copy_val v3, v1
        br main_0_block0(v3), !5

        main_0_block0(v4: ptr b256):
        v5 = load v4
        v6 = get_local ptr string<11>, __const0
        v7 = load v6
        v8 = get_local ptr b256, zero, !7
        mem_copy_val v8, v4
        v9 = get_local ptr u64, a, !9
        v10 = const u64 1, !10
        store v10 to v9, !11
        v11 = get_local ptr u64, b, !13
        v12 = const u64 1, !14
        store v12 to v11, !15
        v13 = get_local ptr u64, c, !17
        v14 = const u64 1, !18
        store v14 to v13, !19
        v15 = get_local ptr u8, d, !21
        v16 = const u8 1, !22
        store v16 to v15, !23
        v17 = get_local ptr b256, zero, !25
        v18 = load v17, !2
        v19 = get_local ptr b256, zero, !27
        v20 = get_local ptr string<11>, __const0, !29
        v21 = get_local ptr [u64; 3], __anon_0, !31
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2
        v24 = const u64 42, !32
        store v24 to v23, !33
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25, !2
        v27 = const u64 42, !32
        store v27 to v26, !34
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr u64, v28, !2
        v30 = const u64 42, !32
        store v30 to v29, !35
        v31 = load v21, !2
        v32 = get_local ptr [u64; 3], __anon_0, !37
        v33 = get_local ptr { bool, u64 }, __anon_1, !39
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr bool, v34, !2
        v36 = const bool false, !40
        store v36 to v35, !41
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37, !2
        v39 = const u64 11, !42
        store v39 to v38, !43
        v40 = load v33, !2
        v41 = get_local ptr { bool, u64 }, __anon_1, !45
        v42 = const bool false
        br main_0_is_ref_type_9_block0(v42), !48

        main_0_is_ref_type_9_block0(v43: bool):
        br main_0_block1(v43), !49

        main_0_block1(v44: bool):
        v45 = const bool false, !51
        v46 = cmp eq v44 v45, !53
        br main_0_block2(v46), !54

        main_0_block2(v47: bool):
        v48 = call assert_2(v47), !56
        br main_0_is_ref_type_9_block04(v42), !58

        main_0_is_ref_type_9_block04(v49: bool):
        br main_0_block3(v49), !59

        main_0_block3(v50: bool):
        v51 = cmp eq v50 v45, !61
        br main_0_block5(v51), !62

        main_0_block5(v52: bool):
        v53 = call assert_2(v52), !64
        br main_0_is_ref_type_9_block07(v42), !66

        main_0_is_ref_type_9_block07(v54: bool):
        br main_0_block6(v54), !67

        main_0_block6(v55: bool):
        v56 = cmp eq v55 v45, !69
        br main_0_block8(v56), !70

        main_0_block8(v57: bool):
        v58 = call assert_2(v57), !72
        br main_0_is_ref_type_11_block0(v42), !74

        main_0_is_ref_type_11_block0(v59: bool):
        br main_0_block9(v59), !75

        main_0_block9(v60: bool):
        v61 = cmp eq v60 v45, !77
        br main_0_block10(v61), !78

        main_0_block10(v62: bool):
        v63 = call assert_2(v62), !80
        v64 = const bool true
        br main_0_is_ref_type_13_block0(v64), !82

        main_0_is_ref_type_13_block0(v65: bool):
        br main_0_block11(v65), !83

        main_0_block11(v66: bool):
        v67 = call assert_2(v66), !85
        br main_0_is_ref_type_15_block0(v64), !87

        main_0_is_ref_type_15_block0(v68: bool):
        br main_0_block12(v68), !88

        main_0_block12(v69: bool):
        v70 = call assert_2(v69), !90
        v71 = get_local ptr b256, zero, !92
        v72 = load v71, !2
        v73 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !94
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr bool, v74, !95
        v76 = const bool true, !96
        store v76 to v75, !97
        v77 = const u64 1
        v78 = get_elem_ptr v73, ptr u64, v77, !98
        v79 = const u64 11, !99
        store v79 to v78, !100
        v80 = const u64 2
        v81 = get_elem_ptr v73, ptr b256, v80, !101
        mem_copy_val v81, v71
        v82 = const u64 3
        v83 = get_elem_ptr v73, ptr u8, v82, !102
        v84 = const u8 255, !103
        store v84 to v83, !104
        br main_0_is_ref_type_17_block0(v64), !106

        main_0_is_ref_type_17_block0(v85: bool):
        br main_0_block13(v85), !107

        main_0_block13(v86: bool):
        v87 = call assert_2(v86), !109
        br main_0_is_ref_type_19_block0(v64), !111

        main_0_is_ref_type_19_block0(v88: bool):
        br main_0_block14(v88), !112

        main_0_block14(v89: bool):
        v90 = call assert_2(v89), !114
        br main_0_is_ref_type_21_block0(v64), !116

        main_0_is_ref_type_21_block0(v91: bool):
        br main_0_block15(v91), !117

        main_0_block15(v92: bool):
        v93 = call assert_2(v92), !119
        v94 = const u64 8
        br main_0_block16(v94), !121

        main_0_block16(v95: u64):
        v96 = const u64 8, !122
        v97 = cmp eq v95 v96, !124
        br main_0_block17(v97), !125

        main_0_block17(v98: bool):
        v99 = call assert_2(v98), !127
        br main_0_block18(v94), !129

        main_0_block18(v100: u64):
        v101 = const u64 8, !130
        v102 = cmp eq v100 v101, !132
        br main_0_block19(v102), !133

        main_0_block19(v103: bool):
        v104 = call assert_2(v103), !135
        br main_0_block20(v94), !137

        main_0_block20(v105: u64):
        v106 = const u64 8, !138
        v107 = cmp eq v105 v106, !140
        br main_0_block21(v107), !141

        main_0_block21(v108: bool):
        v109 = call assert_2(v108), !143
        v110 = const u64 1
        br main_0_block22(v110), !145

        main_0_block22(v111: u64):
        v112 = const u64 1, !146
        v113 = cmp eq v111 v112, !148
        br main_0_block23(v113), !149

        main_0_block23(v114: bool):
        v115 = call assert_2(v114), !151
        v116 = const u64 32
        br main_0_block24(v116), !153

        main_0_block24(v117: u64):
        v118 = const u64 32, !154
        v119 = cmp eq v117 v118, !156
        br main_0_block25(v119), !157

        main_0_block25(v120: bool):
        v121 = call assert_2(v120), !159
        v122 = const u64 16
        br main_0_block26(v122), !161

        main_0_block26(v123: u64):
        v124 = const u64 16, !162
        v125 = cmp eq v123 v124, !164
        br main_0_block27(v125), !165

        main_0_block27(v126: bool):
        v127 = call assert_2(v126), !167
        v128 = const u64 24
        br main_0_block28(v128), !169

        main_0_block28(v129: u64):
        v130 = const u64 24, !170
        v131 = cmp eq v129 v130, !172
        br main_0_block29(v131), !173

        main_0_block29(v132: bool):
        v133 = call assert_2(v132), !175
        br main_0_block30(v122), !177

        main_0_block30(v134: u64):
        v135 = const u64 16, !178
        v136 = cmp eq v134 v135, !180
        br main_0_block31(v136), !181

        main_0_block31(v137: bool):
        v138 = call assert_2(v137), !183
        v139 = const u64 8
        br main_0_block32(v139), !185

        main_0_block32(v140: u64):
        v141 = const u64 8, !186
        v142 = cmp eq v140 v141, !188
        br main_0_block33(v142), !189

        main_0_block33(v143: bool):
        v144 = call assert_2(v143), !191
        br main_0_block34(v139), !193

        main_0_block34(v145: u64):
        v146 = const u64 8, !194
        v147 = cmp eq v145 v146, !196
        br main_0_block35(v147), !197

        main_0_block35(v148: bool):
        v149 = call assert_2(v148), !199
        br main_0_block36(v139), !201

        main_0_block36(v150: u64):
        v151 = const u64 8, !202
        v152 = cmp eq v150 v151, !204
        br main_0_block37(v152), !205

        main_0_block37(v153: bool):
        v154 = call assert_2(v153), !207
        v155 = const u64 1
        br main_0_block38(v155), !209

        main_0_block38(v156: u64):
        v157 = const u64 1, !210
        v158 = cmp eq v156 v157, !212
        br main_0_block39(v158), !213

        main_0_block39(v159: bool):
        v160 = call assert_2(v159), !215
        v161 = const u64 32
        br main_0_block40(v161), !217

        main_0_block40(v162: u64):
        v163 = const u64 32, !218
        v164 = cmp eq v162 v163, !220
        br main_0_block41(v164), !221

        main_0_block41(v165: bool):
        v166 = call assert_2(v165), !223
        v167 = const u64 16
        br main_0_block42(v167), !225

        main_0_block42(v168: u64):
        v169 = const u64 16, !226
        v170 = cmp eq v168 v169, !228
        br main_0_block43(v170), !229

        main_0_block43(v171: bool):
        v172 = call assert_2(v171), !231
        v173 = const bool true, !232
        br block0(v173), !2

        block0(v174: bool):
        v175 = get_local ptr bool, result, !233
        store v174 to v175, !233
        v176 = get_local ptr bool, result, !234
        v177 = load v176
        v178 = const u64 1024
        v179 = asm(cap: v178) -> u64 hp, !238 {
            aloc   cap
        }
        v180 = int_to_ptr v179 to ptr u8, !239
        v181 = ptr_to_int v180 to u64, !240
        v182 = get_local ptr { u64, u64, u64 }, __anon_00, !241
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !242
        store v181 to v184, !243
        v185 = const u64 1
        v186 = get_elem_ptr v182, ptr u64, v185, !244
        store v178 to v186, !245
        v187 = const u64 2
        v188 = get_elem_ptr v182, ptr u64, v187, !246
        v189 = const u64 0
        store v189 to v188, !247
        v190 = asm(buffer: v182) -> ptr { u64, u64, u64 } buffer {
        }
        v191 = load v190
        v192 = get_local ptr { { u64, u64, u64 } }, __anon_10, !249
        v193 = const u64 0
        v194 = get_elem_ptr v192, ptr { u64, u64, u64 }, v193, !250
        mem_copy_val v194, v190
        v195 = load v192, !251
        v196 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v196, v192
        br encode_38_block0(v196), !252

        encode_38_block0(v197: ptr { { u64, u64, u64 } }):
        v198 = load v197
        v199 = ptr_to_int v197 to u64, !254
        v200 = int_to_ptr v199 to ptr { { u64, u64, u64 } }, !255
        v201 = const u64 0
        v202 = get_elem_ptr v200, ptr { u64, u64, u64 }, v201, !257
        v203 = load v202, !258
        v204 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v204, v202
        v205 = asm(buffer: v204) -> ptr { u64, u64, u64 } buffer {
        }
        v206 = load v205
        v207 = get_local ptr { u64, u64, u64 }, __anon_000, !259
        mem_copy_val v207, v205
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr u64, v208, !260
        v210 = load v209, !261
        v211 = int_to_ptr v210 to ptr u8, !262
        v212 = const u64 1
        v213 = get_elem_ptr v207, ptr u64, v212, !263
        v214 = load v213, !264
        v215 = const u64 2
        v216 = get_elem_ptr v207, ptr u64, v215, !265
        v217 = load v216, !266
        v218 = ptr_to_int v211 to u64, !267
        v219 = add v218, v217, !268
        v220 = int_to_ptr v219 to ptr bool, !269
        mem_copy_val v220, v176
        v221 = const u64 1
        v222 = add v217, v221, !270
        v223 = ptr_to_int v211 to u64, !271
        v224 = get_local ptr { u64, u64, u64 }, __anon_100, !272
        v225 = const u64 0
        v226 = get_elem_ptr v224, ptr u64, v225, !273
        store v223 to v226, !274
        v227 = const u64 1
        v228 = get_elem_ptr v224, ptr u64, v227, !275
        mem_copy_val v228, v213
        v229 = const u64 2
        v230 = get_elem_ptr v224, ptr u64, v229, !276
        store v222 to v230, !277
        v231 = asm(buffer: v224) -> ptr { u64, u64, u64 } buffer {
        }
        v232 = load v231
        v233 = get_local ptr { { u64, u64, u64 } }, __anon_20, !279
        v234 = const u64 0
        v235 = get_elem_ptr v233, ptr { u64, u64, u64 }, v234, !280
        mem_copy_val v235, v231
        v236 = load v233, !281
        v237 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v237, v233
        br encode_38_block1(v237), !282

        encode_38_block1(v238: ptr { { u64, u64, u64 } }):
        v239 = load v238
        v240 = get_local ptr { { u64, u64, u64 } }, buffer, !284
        mem_copy_val v240, v238
        v241 = get_local ptr { { u64, u64, u64 } }, buffer, !286
        v242 = load v241, !235
        v243 = ptr_to_int v241 to u64, !288
        v244 = int_to_ptr v243 to ptr { { u64, u64, u64 } }, !289
        v245 = const u64 0
        v246 = get_elem_ptr v244, ptr { u64, u64, u64 }, v245, !290
        v247 = load v246, !291
        v248 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v248, v246
        v249 = asm(buffer: v248) -> ptr { u64, u64, u64 } buffer {
        }
        v250 = load v249
        v251 = get_local ptr { u64, u64, u64 }, __anon_01, !292
        mem_copy_val v251, v249
        v252 = const u64 0
        v253 = get_elem_ptr v251, ptr u64, v252, !293
        v254 = load v253, !294
        v255 = int_to_ptr v254 to ptr u8, !295
        v256 = const u64 2
        v257 = get_elem_ptr v251, ptr u64, v256, !296
        v258 = load v257, !297
        v259 = ptr_to_int v255 to u64, !298
        v260 = get_local ptr { u64, u64 }, __anon_11, !299
        v261 = const u64 0
        v262 = get_elem_ptr v260, ptr u64, v261, !300
        store v259 to v262, !301
        v263 = const u64 1
        v264 = get_elem_ptr v260, ptr u64, v263, !302
        mem_copy_val v264, v257
        v265 = asm(s: v260) -> ptr slice s {
        }
        v266 = load v265
        v267 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v267, v265
        br encode_38_block2(v267), !303

        encode_38_block2(v268: ptr slice):
        v269 = load v268
        v270 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v270, v268
        br block1(v270), !235

        block1(v271: ptr slice):
        v272 = load v271
        mem_copy_val v0, v271
        ret ptr slice v0
    }

    pub fn assert_2(condition !305: bool) -> (), !306 {
        local never __tmp_block_arg

        entry(condition: bool):
        v0 = const bool false, !51
        v1 = cmp eq condition v0, !307
        br block3(v1), !307

        block3(v2: bool):
        cbr v2, block0(), block1(), !307

        block0():
        v3 = const u64 18446744073709486084, !309
        revert v3, !313

        block4(v4: ptr never):
        v5 = load v4
        v6 = const unit ()
        br block2(v6)

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const unit ()
        ret () v9
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 188 211
!7 = (!2 !6)
!8 = span !3 216 231
!9 = (!2 !8)
!10 = span !3 229 230
!11 = (!2 !8)
!12 = span !3 236 251
!13 = (!2 !12)
!14 = span !3 249 250
!15 = (!2 !12)
!16 = span !3 256 271
!17 = (!2 !16)
!18 = span !3 269 270
!19 = (!2 !16)
!20 = span !3 276 290
!21 = (!2 !20)
!22 = span !3 288 289
!23 = (!2 !20)
!24 = span !3 309 313
!25 = (!2 !24)
!26 = span !3 295 314
!27 = (!2 !26)
!28 = span !3 319 366
!29 = (!2 !28)
!30 = span !3 389 399
!31 = (!2 !30)
!32 = span !3 390 395
!33 = (!2 !30)
!34 = (!2 !30)
!35 = (!2 !30)
!36 = span !3 372 400
!37 = (!2 !36)
!38 = span !3 424 487
!39 = (!2 !38)
!40 = span !3 454 459
!41 = (!2 !38)
!42 = span !3 478 480
!43 = (!2 !38)
!44 = span !3 406 488
!45 = (!2 !44)
!46 = span !3 502 520
!47 = span !3 136 160
!48 = (!2 !46 !47)
!49 = (!2 !46)
!50 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!51 = span !50 9991 9996
!52 = span !3 501 520
!53 = (!2 !52)
!54 = (!2 !52)
!55 = span !3 494 521
!56 = (!2 !55)
!57 = span !3 535 553
!58 = (!2 !57 !47)
!59 = (!2 !57)
!60 = span !3 534 553
!61 = (!2 !60)
!62 = (!2 !60)
!63 = span !3 527 554
!64 = (!2 !63)
!65 = span !3 568 586
!66 = (!2 !65 !47)
!67 = (!2 !65)
!68 = span !3 567 586
!69 = (!2 !68)
!70 = (!2 !68)
!71 = span !3 560 587
!72 = (!2 !71)
!73 = span !3 601 618
!74 = (!2 !73 !47)
!75 = (!2 !73)
!76 = span !3 600 618
!77 = (!2 !76)
!78 = (!2 !76)
!79 = span !3 593 619
!80 = (!2 !79)
!81 = span !3 632 655
!82 = (!2 !81 !47)
!83 = (!2 !81)
!84 = span !3 625 656
!85 = (!2 !84)
!86 = span !3 669 693
!87 = (!2 !86 !47)
!88 = (!2 !86)
!89 = span !3 662 694
!90 = (!2 !89)
!91 = span !3 730 734
!92 = (!2 !91)
!93 = span !3 719 742
!94 = (!2 !93)
!95 = (!2 !93)
!96 = span !3 720 724
!97 = (!2 !93)
!98 = (!2 !93)
!99 = span !3 726 728
!100 = (!2 !93)
!101 = (!2 !93)
!102 = (!2 !93)
!103 = span !3 736 741
!104 = (!2 !93)
!105 = span !3 707 743
!106 = (!2 !105 !47)
!107 = (!2 !105)
!108 = span !3 700 744
!109 = (!2 !108)
!110 = span !3 757 771
!111 = (!2 !110 !47)
!112 = (!2 !110)
!113 = span !3 750 772
!114 = (!2 !113)
!115 = span !3 785 799
!116 = (!2 !115 !47)
!117 = (!2 !115)
!118 = span !3 778 800
!119 = (!2 !118)
!120 = span !3 814 830
!121 = (!2 !120)
!122 = span !3 834 835
!123 = span !3 814 835
!124 = (!2 !123)
!125 = (!2 !123)
!126 = span !3 807 836
!127 = (!2 !126)
!128 = span !3 849 865
!129 = (!2 !128)
!130 = span !3 869 870
!131 = span !3 849 870
!132 = (!2 !131)
!133 = (!2 !131)
!134 = span !3 842 871
!135 = (!2 !134)
!136 = span !3 884 900
!137 = (!2 !136)
!138 = span !3 904 905
!139 = span !3 884 905
!140 = (!2 !139)
!141 = (!2 !139)
!142 = span !3 877 906
!143 = (!2 !142)
!144 = span !3 919 934
!145 = (!2 !144)
!146 = span !3 938 939
!147 = span !3 919 939
!148 = (!2 !147)
!149 = (!2 !147)
!150 = span !3 912 940
!151 = (!2 !150)
!152 = span !3 953 970
!153 = (!2 !152)
!154 = span !3 974 976
!155 = span !3 953 976
!156 = (!2 !155)
!157 = (!2 !155)
!158 = span !3 946 977
!159 = (!2 !158)
!160 = span !3 990 1010
!161 = (!2 !160)
!162 = span !3 1014 1016
!163 = span !3 990 1016
!164 = (!2 !163)
!165 = (!2 !163)
!166 = span !3 983 1017
!167 = (!2 !166)
!168 = span !3 1030 1051
!169 = (!2 !168)
!170 = span !3 1055 1057
!171 = span !3 1030 1057
!172 = (!2 !171)
!173 = (!2 !171)
!174 = span !3 1023 1058
!175 = (!2 !174)
!176 = span !3 1071 1094
!177 = (!2 !176)
!178 = span !3 1098 1100
!179 = span !3 1071 1100
!180 = (!2 !179)
!181 = (!2 !179)
!182 = span !3 1064 1101
!183 = (!2 !182)
!184 = span !3 1115 1129
!185 = (!2 !184)
!186 = span !3 1133 1134
!187 = span !3 1115 1134
!188 = (!2 !187)
!189 = (!2 !187)
!190 = span !3 1108 1135
!191 = (!2 !190)
!192 = span !3 1148 1162
!193 = (!2 !192)
!194 = span !3 1166 1167
!195 = span !3 1148 1167
!196 = (!2 !195)
!197 = (!2 !195)
!198 = span !3 1141 1168
!199 = (!2 !198)
!200 = span !3 1181 1195
!201 = (!2 !200)
!202 = span !3 1199 1200
!203 = span !3 1181 1200
!204 = (!2 !203)
!205 = (!2 !203)
!206 = span !3 1174 1201
!207 = (!2 !206)
!208 = span !3 1214 1228
!209 = (!2 !208)
!210 = span !3 1232 1233
!211 = span !3 1214 1233
!212 = (!2 !211)
!213 = (!2 !211)
!214 = span !3 1207 1234
!215 = (!2 !214)
!216 = span !3 1247 1261
!217 = (!2 !216)
!218 = span !3 1265 1267
!219 = span !3 1247 1267
!220 = (!2 !219)
!221 = (!2 !219)
!222 = span !3 1240 1268
!223 = (!2 !222)
!224 = span !3 1281 1295
!225 = (!2 !224)
!226 = span !3 1299 1301
!227 = span !3 1281 1301
!228 = (!2 !227)
!229 = (!2 !227)
!230 = span !3 1274 1302
!231 = (!2 !230)
!232 = span !3 1309 1313
!233 = span !0 48 74
!234 = span !0 107 113
!235 = span !0 92 114
!236 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!237 = span !236 64237 64250
!238 = (!235 !237)
!239 = (!235 !237)
!240 = (!235 !237)
!241 = (!235 !237)
!242 = (!235 !237)
!243 = (!235 !237)
!244 = (!235 !237)
!245 = (!235 !237)
!246 = (!235 !237)
!247 = (!235 !237)
!248 = span !236 159 222
!249 = (!235 !237 !248)
!250 = (!235 !237)
!251 = (!235 !237)
!252 = (!235 !237)
!253 = span !236 64221 64251
!254 = (!235 !253)
!255 = (!235 !253)
!256 = span !236 55 82
!257 = (!235 !253 !256)
!258 = (!235 !253)
!259 = (!235 !253)
!260 = (!235 !253)
!261 = (!235 !253)
!262 = (!235 !253)
!263 = (!235 !253)
!264 = (!235 !253)
!265 = (!235 !253)
!266 = (!235 !253)
!267 = (!235 !253)
!268 = (!235 !253)
!269 = (!235 !253)
!270 = (!235 !253)
!271 = (!235 !253)
!272 = (!235 !253)
!273 = (!235 !253)
!274 = (!235 !253)
!275 = (!235 !253)
!276 = (!235 !253)
!277 = (!235 !253)
!278 = span !236 3836 3919
!279 = (!235 !253 !278)
!280 = (!235 !253)
!281 = (!235 !253)
!282 = (!235 !253)
!283 = span !236 64208 64252
!284 = (!235 !283)
!285 = span !236 64257 64263
!286 = (!235 !285)
!287 = span !236 64257 64278
!288 = (!235 !287)
!289 = (!235 !287)
!290 = (!235 !287 !256)
!291 = (!235 !287)
!292 = (!235 !287)
!293 = (!235 !287)
!294 = (!235 !287)
!295 = (!235 !287)
!296 = (!235 !287)
!297 = (!235 !287)
!298 = (!235 !287)
!299 = (!235 !287)
!300 = (!235 !287)
!301 = (!235 !287)
!302 = (!235 !287)
!303 = (!235 !287)
!304 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!305 = span !304 935 944
!306 = span !304 921 1019
!307 = span !304 961 971
!308 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!309 = span !308 1038 1059
!310 = span !304 982 1010
!311 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!312 = span !311 691 705
!313 = (!310 !312)

// IR: [dce] Dead code elimination
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local bool result
        local b256 zero

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __tmp_block_arg
        mem_copy_val v2, v1
        br main_0_block0(v2), !5

        main_0_block0(v3: ptr b256):
        v4 = get_local ptr b256, zero, !7
        mem_copy_val v4, v3
        v5 = get_local ptr u64, a, !9
        v6 = const u64 1, !10
        store v6 to v5, !11
        v7 = get_local ptr u64, b, !13
        v8 = const u64 1, !14
        store v8 to v7, !15
        v9 = get_local ptr u64, c, !17
        v10 = const u64 1, !18
        store v10 to v9, !19
        v11 = get_local ptr u8, d, !21
        v12 = const u8 1, !22
        store v12 to v11, !23
        v13 = get_local ptr [u64; 3], __anon_0, !25
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !2
        v16 = const u64 42, !26
        store v16 to v15, !27
        v17 = const u64 1
        v18 = get_elem_ptr v13, ptr u64, v17, !2
        v19 = const u64 42, !26
        store v19 to v18, !28
        v20 = const u64 2
        v21 = get_elem_ptr v13, ptr u64, v20, !2
        v22 = const u64 42, !26
        store v22 to v21, !29
        v23 = get_local ptr { bool, u64 }, __anon_1, !31
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr bool, v24, !2
        v26 = const bool false, !32
        store v26 to v25, !33
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27, !2
        v29 = const u64 11, !34
        store v29 to v28, !35
        v30 = const bool false
        br main_0_is_ref_type_9_block0(v30), !38

        main_0_is_ref_type_9_block0(v31: bool):
        br main_0_block1(v31), !39

        main_0_block1(v32: bool):
        v33 = const bool false, !41
        v34 = cmp eq v32 v33, !43
        br main_0_block2(v34), !44

        main_0_block2(v35: bool):
        v36 = call assert_2(v35), !46
        br main_0_is_ref_type_9_block04(v30), !48

        main_0_is_ref_type_9_block04(v37: bool):
        br main_0_block3(v37), !49

        main_0_block3(v38: bool):
        v39 = cmp eq v38 v33, !51
        br main_0_block5(v39), !52

        main_0_block5(v40: bool):
        v41 = call assert_2(v40), !54
        br main_0_is_ref_type_9_block07(v30), !56

        main_0_is_ref_type_9_block07(v42: bool):
        br main_0_block6(v42), !57

        main_0_block6(v43: bool):
        v44 = cmp eq v43 v33, !59
        br main_0_block8(v44), !60

        main_0_block8(v45: bool):
        v46 = call assert_2(v45), !62
        br main_0_is_ref_type_11_block0(v30), !64

        main_0_is_ref_type_11_block0(v47: bool):
        br main_0_block9(v47), !65

        main_0_block9(v48: bool):
        v49 = cmp eq v48 v33, !67
        br main_0_block10(v49), !68

        main_0_block10(v50: bool):
        v51 = call assert_2(v50), !70
        v52 = const bool true
        br main_0_is_ref_type_13_block0(v52), !72

        main_0_is_ref_type_13_block0(v53: bool):
        br main_0_block11(v53), !73

        main_0_block11(v54: bool):
        v55 = call assert_2(v54), !75
        br main_0_is_ref_type_15_block0(v52), !77

        main_0_is_ref_type_15_block0(v56: bool):
        br main_0_block12(v56), !78

        main_0_block12(v57: bool):
        v58 = call assert_2(v57), !80
        v59 = get_local ptr b256, zero, !82
        v60 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !84
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr bool, v61, !85
        v63 = const bool true, !86
        store v63 to v62, !87
        v64 = const u64 1
        v65 = get_elem_ptr v60, ptr u64, v64, !88
        v66 = const u64 11, !89
        store v66 to v65, !90
        v67 = const u64 2
        v68 = get_elem_ptr v60, ptr b256, v67, !91
        mem_copy_val v68, v59
        v69 = const u64 3
        v70 = get_elem_ptr v60, ptr u8, v69, !92
        v71 = const u8 255, !93
        store v71 to v70, !94
        br main_0_is_ref_type_17_block0(v52), !96

        main_0_is_ref_type_17_block0(v72: bool):
        br main_0_block13(v72), !97

        main_0_block13(v73: bool):
        v74 = call assert_2(v73), !99
        br main_0_is_ref_type_19_block0(v52), !101

        main_0_is_ref_type_19_block0(v75: bool):
        br main_0_block14(v75), !102

        main_0_block14(v76: bool):
        v77 = call assert_2(v76), !104
        br main_0_is_ref_type_21_block0(v52), !106

        main_0_is_ref_type_21_block0(v78: bool):
        br main_0_block15(v78), !107

        main_0_block15(v79: bool):
        v80 = call assert_2(v79), !109
        v81 = const u64 8
        br main_0_block16(v81), !111

        main_0_block16(v82: u64):
        v83 = const u64 8, !112
        v84 = cmp eq v82 v83, !114
        br main_0_block17(v84), !115

        main_0_block17(v85: bool):
        v86 = call assert_2(v85), !117
        br main_0_block18(v81), !119

        main_0_block18(v87: u64):
        v88 = const u64 8, !120
        v89 = cmp eq v87 v88, !122
        br main_0_block19(v89), !123

        main_0_block19(v90: bool):
        v91 = call assert_2(v90), !125
        br main_0_block20(v81), !127

        main_0_block20(v92: u64):
        v93 = const u64 8, !128
        v94 = cmp eq v92 v93, !130
        br main_0_block21(v94), !131

        main_0_block21(v95: bool):
        v96 = call assert_2(v95), !133
        v97 = const u64 1
        br main_0_block22(v97), !135

        main_0_block22(v98: u64):
        v99 = const u64 1, !136
        v100 = cmp eq v98 v99, !138
        br main_0_block23(v100), !139

        main_0_block23(v101: bool):
        v102 = call assert_2(v101), !141
        v103 = const u64 32
        br main_0_block24(v103), !143

        main_0_block24(v104: u64):
        v105 = const u64 32, !144
        v106 = cmp eq v104 v105, !146
        br main_0_block25(v106), !147

        main_0_block25(v107: bool):
        v108 = call assert_2(v107), !149
        v109 = const u64 16
        br main_0_block26(v109), !151

        main_0_block26(v110: u64):
        v111 = const u64 16, !152
        v112 = cmp eq v110 v111, !154
        br main_0_block27(v112), !155

        main_0_block27(v113: bool):
        v114 = call assert_2(v113), !157
        v115 = const u64 24
        br main_0_block28(v115), !159

        main_0_block28(v116: u64):
        v117 = const u64 24, !160
        v118 = cmp eq v116 v117, !162
        br main_0_block29(v118), !163

        main_0_block29(v119: bool):
        v120 = call assert_2(v119), !165
        br main_0_block30(v109), !167

        main_0_block30(v121: u64):
        v122 = const u64 16, !168
        v123 = cmp eq v121 v122, !170
        br main_0_block31(v123), !171

        main_0_block31(v124: bool):
        v125 = call assert_2(v124), !173
        v126 = const u64 8
        br main_0_block32(v126), !175

        main_0_block32(v127: u64):
        v128 = const u64 8, !176
        v129 = cmp eq v127 v128, !178
        br main_0_block33(v129), !179

        main_0_block33(v130: bool):
        v131 = call assert_2(v130), !181
        br main_0_block34(v126), !183

        main_0_block34(v132: u64):
        v133 = const u64 8, !184
        v134 = cmp eq v132 v133, !186
        br main_0_block35(v134), !187

        main_0_block35(v135: bool):
        v136 = call assert_2(v135), !189
        br main_0_block36(v126), !191

        main_0_block36(v137: u64):
        v138 = const u64 8, !192
        v139 = cmp eq v137 v138, !194
        br main_0_block37(v139), !195

        main_0_block37(v140: bool):
        v141 = call assert_2(v140), !197
        v142 = const u64 1
        br main_0_block38(v142), !199

        main_0_block38(v143: u64):
        v144 = const u64 1, !200
        v145 = cmp eq v143 v144, !202
        br main_0_block39(v145), !203

        main_0_block39(v146: bool):
        v147 = call assert_2(v146), !205
        v148 = const u64 32
        br main_0_block40(v148), !207

        main_0_block40(v149: u64):
        v150 = const u64 32, !208
        v151 = cmp eq v149 v150, !210
        br main_0_block41(v151), !211

        main_0_block41(v152: bool):
        v153 = call assert_2(v152), !213
        v154 = const u64 16
        br main_0_block42(v154), !215

        main_0_block42(v155: u64):
        v156 = const u64 16, !216
        v157 = cmp eq v155 v156, !218
        br main_0_block43(v157), !219

        main_0_block43(v158: bool):
        v159 = call assert_2(v158), !221
        v160 = const bool true, !222
        br block0(v160), !2

        block0(v161: bool):
        v162 = get_local ptr bool, result, !223
        store v161 to v162, !223
        v163 = get_local ptr bool, result, !224
        v164 = const u64 1024
        v165 = asm(cap: v164) -> u64 hp, !228 {
            aloc   cap
        }
        v166 = int_to_ptr v165 to ptr u8, !229
        v167 = ptr_to_int v166 to u64, !230
        v168 = get_local ptr { u64, u64, u64 }, __anon_00, !231
        v169 = const u64 0
        v170 = get_elem_ptr v168, ptr u64, v169, !232
        store v167 to v170, !233
        v171 = const u64 1
        v172 = get_elem_ptr v168, ptr u64, v171, !234
        store v164 to v172, !235
        v173 = const u64 2
        v174 = get_elem_ptr v168, ptr u64, v173, !236
        v175 = const u64 0
        store v175 to v174, !237
        v176 = asm(buffer: v168) -> ptr { u64, u64, u64 } buffer {
        }
        v177 = get_local ptr { { u64, u64, u64 } }, __anon_10, !239
        v178 = const u64 0
        v179 = get_elem_ptr v177, ptr { u64, u64, u64 }, v178, !240
        mem_copy_val v179, v176
        v180 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v180, v177
        br encode_38_block0(v180), !241

        encode_38_block0(v181: ptr { { u64, u64, u64 } }):
        v182 = ptr_to_int v181 to u64, !243
        v183 = int_to_ptr v182 to ptr { { u64, u64, u64 } }, !244
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr { u64, u64, u64 }, v184, !246
        v186 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v186, v185
        v187 = asm(buffer: v186) -> ptr { u64, u64, u64 } buffer {
        }
        v188 = get_local ptr { u64, u64, u64 }, __anon_000, !247
        mem_copy_val v188, v187
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !248
        v191 = load v190, !249
        v192 = int_to_ptr v191 to ptr u8, !250
        v193 = const u64 1
        v194 = get_elem_ptr v188, ptr u64, v193, !251
        v195 = const u64 2
        v196 = get_elem_ptr v188, ptr u64, v195, !252
        v197 = load v196, !253
        v198 = ptr_to_int v192 to u64, !254
        v199 = add v198, v197, !255
        v200 = int_to_ptr v199 to ptr bool, !256
        mem_copy_val v200, v163
        v201 = const u64 1
        v202 = add v197, v201, !257
        v203 = ptr_to_int v192 to u64, !258
        v204 = get_local ptr { u64, u64, u64 }, __anon_100, !259
        v205 = const u64 0
        v206 = get_elem_ptr v204, ptr u64, v205, !260
        store v203 to v206, !261
        v207 = const u64 1
        v208 = get_elem_ptr v204, ptr u64, v207, !262
        mem_copy_val v208, v194
        v209 = const u64 2
        v210 = get_elem_ptr v204, ptr u64, v209, !263
        store v202 to v210, !264
        v211 = asm(buffer: v204) -> ptr { u64, u64, u64 } buffer {
        }
        v212 = get_local ptr { { u64, u64, u64 } }, __anon_20, !266
        v213 = const u64 0
        v214 = get_elem_ptr v212, ptr { u64, u64, u64 }, v213, !267
        mem_copy_val v214, v211
        v215 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v215, v212
        br encode_38_block1(v215), !268

        encode_38_block1(v216: ptr { { u64, u64, u64 } }):
        v217 = get_local ptr { { u64, u64, u64 } }, buffer, !270
        mem_copy_val v217, v216
        v218 = get_local ptr { { u64, u64, u64 } }, buffer, !272
        v219 = ptr_to_int v218 to u64, !274
        v220 = int_to_ptr v219 to ptr { { u64, u64, u64 } }, !275
        v221 = const u64 0
        v222 = get_elem_ptr v220, ptr { u64, u64, u64 }, v221, !276
        v223 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v223, v222
        v224 = asm(buffer: v223) -> ptr { u64, u64, u64 } buffer {
        }
        v225 = get_local ptr { u64, u64, u64 }, __anon_01, !277
        mem_copy_val v225, v224
        v226 = const u64 0
        v227 = get_elem_ptr v225, ptr u64, v226, !278
        v228 = load v227, !279
        v229 = int_to_ptr v228 to ptr u8, !280
        v230 = const u64 2
        v231 = get_elem_ptr v225, ptr u64, v230, !281
        v232 = ptr_to_int v229 to u64, !282
        v233 = get_local ptr { u64, u64 }, __anon_11, !283
        v234 = const u64 0
        v235 = get_elem_ptr v233, ptr u64, v234, !284
        store v232 to v235, !285
        v236 = const u64 1
        v237 = get_elem_ptr v233, ptr u64, v236, !286
        mem_copy_val v237, v231
        v238 = asm(s: v233) -> ptr slice s {
        }
        v239 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v239, v238
        br encode_38_block2(v239), !287

        encode_38_block2(v240: ptr slice):
        v241 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v241, v240
        br block1(v241), !225

        block1(v242: ptr slice):
        mem_copy_val v0, v242
        ret ptr slice v0
    }

    pub fn assert_2(condition !289: bool) -> (), !290 {
        entry(condition: bool):
        v0 = const bool false, !41
        v1 = cmp eq condition v0, !291
        br block3(v1), !291

        block3(v2: bool):
        cbr v2, block0(), block1(), !291

        block0():
        v3 = const u64 18446744073709486084, !293
        revert v3, !297

        block4(v4: ptr never):
        v5 = const unit ()
        br block2(v5)

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = const unit ()
        ret () v8
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 199 210
!5 = (!2 !4)
!6 = span !3 188 211
!7 = (!2 !6)
!8 = span !3 216 231
!9 = (!2 !8)
!10 = span !3 229 230
!11 = (!2 !8)
!12 = span !3 236 251
!13 = (!2 !12)
!14 = span !3 249 250
!15 = (!2 !12)
!16 = span !3 256 271
!17 = (!2 !16)
!18 = span !3 269 270
!19 = (!2 !16)
!20 = span !3 276 290
!21 = (!2 !20)
!22 = span !3 288 289
!23 = (!2 !20)
!24 = span !3 389 399
!25 = (!2 !24)
!26 = span !3 390 395
!27 = (!2 !24)
!28 = (!2 !24)
!29 = (!2 !24)
!30 = span !3 424 487
!31 = (!2 !30)
!32 = span !3 454 459
!33 = (!2 !30)
!34 = span !3 478 480
!35 = (!2 !30)
!36 = span !3 502 520
!37 = span !3 136 160
!38 = (!2 !36 !37)
!39 = (!2 !36)
!40 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!41 = span !40 9991 9996
!42 = span !3 501 520
!43 = (!2 !42)
!44 = (!2 !42)
!45 = span !3 494 521
!46 = (!2 !45)
!47 = span !3 535 553
!48 = (!2 !47 !37)
!49 = (!2 !47)
!50 = span !3 534 553
!51 = (!2 !50)
!52 = (!2 !50)
!53 = span !3 527 554
!54 = (!2 !53)
!55 = span !3 568 586
!56 = (!2 !55 !37)
!57 = (!2 !55)
!58 = span !3 567 586
!59 = (!2 !58)
!60 = (!2 !58)
!61 = span !3 560 587
!62 = (!2 !61)
!63 = span !3 601 618
!64 = (!2 !63 !37)
!65 = (!2 !63)
!66 = span !3 600 618
!67 = (!2 !66)
!68 = (!2 !66)
!69 = span !3 593 619
!70 = (!2 !69)
!71 = span !3 632 655
!72 = (!2 !71 !37)
!73 = (!2 !71)
!74 = span !3 625 656
!75 = (!2 !74)
!76 = span !3 669 693
!77 = (!2 !76 !37)
!78 = (!2 !76)
!79 = span !3 662 694
!80 = (!2 !79)
!81 = span !3 730 734
!82 = (!2 !81)
!83 = span !3 719 742
!84 = (!2 !83)
!85 = (!2 !83)
!86 = span !3 720 724
!87 = (!2 !83)
!88 = (!2 !83)
!89 = span !3 726 728
!90 = (!2 !83)
!91 = (!2 !83)
!92 = (!2 !83)
!93 = span !3 736 741
!94 = (!2 !83)
!95 = span !3 707 743
!96 = (!2 !95 !37)
!97 = (!2 !95)
!98 = span !3 700 744
!99 = (!2 !98)
!100 = span !3 757 771
!101 = (!2 !100 !37)
!102 = (!2 !100)
!103 = span !3 750 772
!104 = (!2 !103)
!105 = span !3 785 799
!106 = (!2 !105 !37)
!107 = (!2 !105)
!108 = span !3 778 800
!109 = (!2 !108)
!110 = span !3 814 830
!111 = (!2 !110)
!112 = span !3 834 835
!113 = span !3 814 835
!114 = (!2 !113)
!115 = (!2 !113)
!116 = span !3 807 836
!117 = (!2 !116)
!118 = span !3 849 865
!119 = (!2 !118)
!120 = span !3 869 870
!121 = span !3 849 870
!122 = (!2 !121)
!123 = (!2 !121)
!124 = span !3 842 871
!125 = (!2 !124)
!126 = span !3 884 900
!127 = (!2 !126)
!128 = span !3 904 905
!129 = span !3 884 905
!130 = (!2 !129)
!131 = (!2 !129)
!132 = span !3 877 906
!133 = (!2 !132)
!134 = span !3 919 934
!135 = (!2 !134)
!136 = span !3 938 939
!137 = span !3 919 939
!138 = (!2 !137)
!139 = (!2 !137)
!140 = span !3 912 940
!141 = (!2 !140)
!142 = span !3 953 970
!143 = (!2 !142)
!144 = span !3 974 976
!145 = span !3 953 976
!146 = (!2 !145)
!147 = (!2 !145)
!148 = span !3 946 977
!149 = (!2 !148)
!150 = span !3 990 1010
!151 = (!2 !150)
!152 = span !3 1014 1016
!153 = span !3 990 1016
!154 = (!2 !153)
!155 = (!2 !153)
!156 = span !3 983 1017
!157 = (!2 !156)
!158 = span !3 1030 1051
!159 = (!2 !158)
!160 = span !3 1055 1057
!161 = span !3 1030 1057
!162 = (!2 !161)
!163 = (!2 !161)
!164 = span !3 1023 1058
!165 = (!2 !164)
!166 = span !3 1071 1094
!167 = (!2 !166)
!168 = span !3 1098 1100
!169 = span !3 1071 1100
!170 = (!2 !169)
!171 = (!2 !169)
!172 = span !3 1064 1101
!173 = (!2 !172)
!174 = span !3 1115 1129
!175 = (!2 !174)
!176 = span !3 1133 1134
!177 = span !3 1115 1134
!178 = (!2 !177)
!179 = (!2 !177)
!180 = span !3 1108 1135
!181 = (!2 !180)
!182 = span !3 1148 1162
!183 = (!2 !182)
!184 = span !3 1166 1167
!185 = span !3 1148 1167
!186 = (!2 !185)
!187 = (!2 !185)
!188 = span !3 1141 1168
!189 = (!2 !188)
!190 = span !3 1181 1195
!191 = (!2 !190)
!192 = span !3 1199 1200
!193 = span !3 1181 1200
!194 = (!2 !193)
!195 = (!2 !193)
!196 = span !3 1174 1201
!197 = (!2 !196)
!198 = span !3 1214 1228
!199 = (!2 !198)
!200 = span !3 1232 1233
!201 = span !3 1214 1233
!202 = (!2 !201)
!203 = (!2 !201)
!204 = span !3 1207 1234
!205 = (!2 !204)
!206 = span !3 1247 1261
!207 = (!2 !206)
!208 = span !3 1265 1267
!209 = span !3 1247 1267
!210 = (!2 !209)
!211 = (!2 !209)
!212 = span !3 1240 1268
!213 = (!2 !212)
!214 = span !3 1281 1295
!215 = (!2 !214)
!216 = span !3 1299 1301
!217 = span !3 1281 1301
!218 = (!2 !217)
!219 = (!2 !217)
!220 = span !3 1274 1302
!221 = (!2 !220)
!222 = span !3 1309 1313
!223 = span !0 48 74
!224 = span !0 107 113
!225 = span !0 92 114
!226 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!227 = span !226 64237 64250
!228 = (!225 !227)
!229 = (!225 !227)
!230 = (!225 !227)
!231 = (!225 !227)
!232 = (!225 !227)
!233 = (!225 !227)
!234 = (!225 !227)
!235 = (!225 !227)
!236 = (!225 !227)
!237 = (!225 !227)
!238 = span !226 159 222
!239 = (!225 !227 !238)
!240 = (!225 !227)
!241 = (!225 !227)
!242 = span !226 64221 64251
!243 = (!225 !242)
!244 = (!225 !242)
!245 = span !226 55 82
!246 = (!225 !242 !245)
!247 = (!225 !242)
!248 = (!225 !242)
!249 = (!225 !242)
!250 = (!225 !242)
!251 = (!225 !242)
!252 = (!225 !242)
!253 = (!225 !242)
!254 = (!225 !242)
!255 = (!225 !242)
!256 = (!225 !242)
!257 = (!225 !242)
!258 = (!225 !242)
!259 = (!225 !242)
!260 = (!225 !242)
!261 = (!225 !242)
!262 = (!225 !242)
!263 = (!225 !242)
!264 = (!225 !242)
!265 = span !226 3836 3919
!266 = (!225 !242 !265)
!267 = (!225 !242)
!268 = (!225 !242)
!269 = span !226 64208 64252
!270 = (!225 !269)
!271 = span !226 64257 64263
!272 = (!225 !271)
!273 = span !226 64257 64278
!274 = (!225 !273)
!275 = (!225 !273)
!276 = (!225 !273 !245)
!277 = (!225 !273)
!278 = (!225 !273)
!279 = (!225 !273)
!280 = (!225 !273)
!281 = (!225 !273)
!282 = (!225 !273)
!283 = (!225 !273)
!284 = (!225 !273)
!285 = (!225 !273)
!286 = (!225 !273)
!287 = (!225 !273)
!288 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!289 = span !288 935 944
!290 = span !288 921 1019
!291 = span !288 961 971
!292 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!293 = span !292 1038 1059
!294 = span !288 982 1010
!295 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!296 = span !295 691 705
!297 = (!294 !296)

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local bool result
        local b256 zero

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __tmp_block_arg
        mem_copy_val v2, v1
        v3 = get_local ptr b256, zero, !5
        mem_copy_val v3, v2
        v4 = get_local ptr u64, a, !7
        v5 = const u64 1, !8
        store v5 to v4, !9
        v6 = get_local ptr u64, b, !11
        v7 = const u64 1, !12
        store v7 to v6, !13
        v8 = get_local ptr u64, c, !15
        v9 = const u64 1, !16
        store v9 to v8, !17
        v10 = get_local ptr u8, d, !19
        v11 = const u8 1, !20
        store v11 to v10, !21
        v12 = get_local ptr [u64; 3], __anon_0, !23
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !2
        v15 = const u64 42, !24
        store v15 to v14, !25
        v16 = const u64 1
        v17 = get_elem_ptr v12, ptr u64, v16, !2
        v18 = const u64 42, !24
        store v18 to v17, !26
        v19 = const u64 2
        v20 = get_elem_ptr v12, ptr u64, v19, !2
        v21 = const u64 42, !24
        store v21 to v20, !27
        v22 = get_local ptr { bool, u64 }, __anon_1, !29
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr bool, v23, !2
        v25 = const bool false, !30
        store v25 to v24, !31
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26, !2
        v28 = const u64 11, !32
        store v28 to v27, !33
        v29 = const bool false
        v30 = const bool false, !35
        v31 = cmp eq v29 v30, !37
        v32 = call assert_2(v31), !39
        v33 = cmp eq v29 v30, !41
        v34 = call assert_2(v33), !43
        v35 = cmp eq v29 v30, !45
        v36 = call assert_2(v35), !47
        v37 = cmp eq v29 v30, !49
        v38 = call assert_2(v37), !51
        v39 = const bool true
        v40 = call assert_2(v39), !53
        v41 = call assert_2(v39), !55
        v42 = get_local ptr b256, zero, !57
        v43 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !59
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr bool, v44, !60
        v46 = const bool true, !61
        store v46 to v45, !62
        v47 = const u64 1
        v48 = get_elem_ptr v43, ptr u64, v47, !63
        v49 = const u64 11, !64
        store v49 to v48, !65
        v50 = const u64 2
        v51 = get_elem_ptr v43, ptr b256, v50, !66
        mem_copy_val v51, v42
        v52 = const u64 3
        v53 = get_elem_ptr v43, ptr u8, v52, !67
        v54 = const u8 255, !68
        store v54 to v53, !69
        v55 = call assert_2(v39), !71
        v56 = call assert_2(v39), !73
        v57 = call assert_2(v39), !75
        v58 = const u64 8
        v59 = const u64 8, !76
        v60 = cmp eq v58 v59, !78
        v61 = call assert_2(v60), !80
        v62 = const u64 8, !81
        v63 = cmp eq v58 v62, !83
        v64 = call assert_2(v63), !85
        v65 = const u64 8, !86
        v66 = cmp eq v58 v65, !88
        v67 = call assert_2(v66), !90
        v68 = const u64 1
        v69 = const u64 1, !91
        v70 = cmp eq v68 v69, !93
        v71 = call assert_2(v70), !95
        v72 = const u64 32
        v73 = const u64 32, !96
        v74 = cmp eq v72 v73, !98
        v75 = call assert_2(v74), !100
        v76 = const u64 16
        v77 = const u64 16, !101
        v78 = cmp eq v76 v77, !103
        v79 = call assert_2(v78), !105
        v80 = const u64 24
        v81 = const u64 24, !106
        v82 = cmp eq v80 v81, !108
        v83 = call assert_2(v82), !110
        v84 = const u64 16, !111
        v85 = cmp eq v76 v84, !113
        v86 = call assert_2(v85), !115
        v87 = const u64 8
        v88 = const u64 8, !116
        v89 = cmp eq v87 v88, !118
        v90 = call assert_2(v89), !120
        v91 = const u64 8, !121
        v92 = cmp eq v87 v91, !123
        v93 = call assert_2(v92), !125
        v94 = const u64 8, !126
        v95 = cmp eq v87 v94, !128
        v96 = call assert_2(v95), !130
        v97 = const u64 1
        v98 = const u64 1, !131
        v99 = cmp eq v97 v98, !133
        v100 = call assert_2(v99), !135
        v101 = const u64 32
        v102 = const u64 32, !136
        v103 = cmp eq v101 v102, !138
        v104 = call assert_2(v103), !140
        v105 = const u64 16
        v106 = const u64 16, !141
        v107 = cmp eq v105 v106, !143
        v108 = call assert_2(v107), !145
        v109 = get_local ptr bool, result, !146
        v110 = const bool true, !147
        store v110 to v109, !146
        v111 = get_local ptr bool, result, !148
        v112 = const u64 1024
        v113 = asm(cap: v112) -> u64 hp, !152 {
            aloc   cap
        }
        v114 = int_to_ptr v113 to ptr u8, !153
        v115 = ptr_to_int v114 to u64, !154
        v116 = get_local ptr { u64, u64, u64 }, __anon_00, !155
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr u64, v117, !156
        store v115 to v118, !157
        v119 = const u64 1
        v120 = get_elem_ptr v116, ptr u64, v119, !158
        store v112 to v120, !159
        v121 = const u64 2
        v122 = get_elem_ptr v116, ptr u64, v121, !160
        v123 = const u64 0
        store v123 to v122, !161
        v124 = asm(buffer: v116) -> ptr { u64, u64, u64 } buffer {
        }
        v125 = get_local ptr { { u64, u64, u64 } }, __anon_10, !163
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr { u64, u64, u64 }, v126, !164
        mem_copy_val v127, v124
        v128 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v128, v125
        v129 = ptr_to_int v128 to u64, !166
        v130 = int_to_ptr v129 to ptr { { u64, u64, u64 } }, !167
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !169
        v133 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v133, v132
        v134 = asm(buffer: v133) -> ptr { u64, u64, u64 } buffer {
        }
        v135 = get_local ptr { u64, u64, u64 }, __anon_000, !170
        mem_copy_val v135, v134
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !171
        v138 = load v137, !172
        v139 = int_to_ptr v138 to ptr u8, !173
        v140 = const u64 1
        v141 = get_elem_ptr v135, ptr u64, v140, !174
        v142 = const u64 2
        v143 = get_elem_ptr v135, ptr u64, v142, !175
        v144 = load v143, !176
        v145 = ptr_to_int v139 to u64, !177
        v146 = add v145, v144, !178
        v147 = int_to_ptr v146 to ptr bool, !179
        mem_copy_val v147, v111
        v148 = const u64 1
        v149 = add v144, v148, !180
        v150 = ptr_to_int v139 to u64, !181
        v151 = get_local ptr { u64, u64, u64 }, __anon_100, !182
        v152 = const u64 0
        v153 = get_elem_ptr v151, ptr u64, v152, !183
        store v150 to v153, !184
        v154 = const u64 1
        v155 = get_elem_ptr v151, ptr u64, v154, !185
        mem_copy_val v155, v141
        v156 = const u64 2
        v157 = get_elem_ptr v151, ptr u64, v156, !186
        store v149 to v157, !187
        v158 = asm(buffer: v151) -> ptr { u64, u64, u64 } buffer {
        }
        v159 = get_local ptr { { u64, u64, u64 } }, __anon_20, !189
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr { u64, u64, u64 }, v160, !190
        mem_copy_val v161, v158
        v162 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v162, v159
        v163 = get_local ptr { { u64, u64, u64 } }, buffer, !192
        mem_copy_val v163, v162
        v164 = get_local ptr { { u64, u64, u64 } }, buffer, !194
        v165 = ptr_to_int v164 to u64, !196
        v166 = int_to_ptr v165 to ptr { { u64, u64, u64 } }, !197
        v167 = const u64 0
        v168 = get_elem_ptr v166, ptr { u64, u64, u64 }, v167, !198
        v169 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v169, v168
        v170 = asm(buffer: v169) -> ptr { u64, u64, u64 } buffer {
        }
        v171 = get_local ptr { u64, u64, u64 }, __anon_01, !199
        mem_copy_val v171, v170
        v172 = const u64 0
        v173 = get_elem_ptr v171, ptr u64, v172, !200
        v174 = load v173, !201
        v175 = int_to_ptr v174 to ptr u8, !202
        v176 = const u64 2
        v177 = get_elem_ptr v171, ptr u64, v176, !203
        v178 = ptr_to_int v175 to u64, !204
        v179 = get_local ptr { u64, u64 }, __anon_11, !205
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr u64, v180, !206
        store v178 to v181, !207
        v182 = const u64 1
        v183 = get_elem_ptr v179, ptr u64, v182, !208
        mem_copy_val v183, v177
        v184 = asm(s: v179) -> ptr slice s {
        }
        v185 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v185, v184
        v186 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v186, v185
        mem_copy_val v0, v186
        ret ptr slice v0
    }

    pub fn assert_2(condition !210: bool) -> (), !211 {
        entry(condition: bool):
        v0 = const bool false, !35
        v1 = cmp eq condition v0, !212
        cbr v1, block0(), block1(), !212

        block0():
        v2 = const u64 18446744073709486084, !214
        revert v2, !218

        block1():
        v3 = const unit ()
        ret () v3
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 188 211
!5 = (!2 !4)
!6 = span !3 216 231
!7 = (!2 !6)
!8 = span !3 229 230
!9 = (!2 !6)
!10 = span !3 236 251
!11 = (!2 !10)
!12 = span !3 249 250
!13 = (!2 !10)
!14 = span !3 256 271
!15 = (!2 !14)
!16 = span !3 269 270
!17 = (!2 !14)
!18 = span !3 276 290
!19 = (!2 !18)
!20 = span !3 288 289
!21 = (!2 !18)
!22 = span !3 389 399
!23 = (!2 !22)
!24 = span !3 390 395
!25 = (!2 !22)
!26 = (!2 !22)
!27 = (!2 !22)
!28 = span !3 424 487
!29 = (!2 !28)
!30 = span !3 454 459
!31 = (!2 !28)
!32 = span !3 478 480
!33 = (!2 !28)
!34 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!35 = span !34 9991 9996
!36 = span !3 501 520
!37 = (!2 !36)
!38 = span !3 494 521
!39 = (!2 !38)
!40 = span !3 534 553
!41 = (!2 !40)
!42 = span !3 527 554
!43 = (!2 !42)
!44 = span !3 567 586
!45 = (!2 !44)
!46 = span !3 560 587
!47 = (!2 !46)
!48 = span !3 600 618
!49 = (!2 !48)
!50 = span !3 593 619
!51 = (!2 !50)
!52 = span !3 625 656
!53 = (!2 !52)
!54 = span !3 662 694
!55 = (!2 !54)
!56 = span !3 730 734
!57 = (!2 !56)
!58 = span !3 719 742
!59 = (!2 !58)
!60 = (!2 !58)
!61 = span !3 720 724
!62 = (!2 !58)
!63 = (!2 !58)
!64 = span !3 726 728
!65 = (!2 !58)
!66 = (!2 !58)
!67 = (!2 !58)
!68 = span !3 736 741
!69 = (!2 !58)
!70 = span !3 700 744
!71 = (!2 !70)
!72 = span !3 750 772
!73 = (!2 !72)
!74 = span !3 778 800
!75 = (!2 !74)
!76 = span !3 834 835
!77 = span !3 814 835
!78 = (!2 !77)
!79 = span !3 807 836
!80 = (!2 !79)
!81 = span !3 869 870
!82 = span !3 849 870
!83 = (!2 !82)
!84 = span !3 842 871
!85 = (!2 !84)
!86 = span !3 904 905
!87 = span !3 884 905
!88 = (!2 !87)
!89 = span !3 877 906
!90 = (!2 !89)
!91 = span !3 938 939
!92 = span !3 919 939
!93 = (!2 !92)
!94 = span !3 912 940
!95 = (!2 !94)
!96 = span !3 974 976
!97 = span !3 953 976
!98 = (!2 !97)
!99 = span !3 946 977
!100 = (!2 !99)
!101 = span !3 1014 1016
!102 = span !3 990 1016
!103 = (!2 !102)
!104 = span !3 983 1017
!105 = (!2 !104)
!106 = span !3 1055 1057
!107 = span !3 1030 1057
!108 = (!2 !107)
!109 = span !3 1023 1058
!110 = (!2 !109)
!111 = span !3 1098 1100
!112 = span !3 1071 1100
!113 = (!2 !112)
!114 = span !3 1064 1101
!115 = (!2 !114)
!116 = span !3 1133 1134
!117 = span !3 1115 1134
!118 = (!2 !117)
!119 = span !3 1108 1135
!120 = (!2 !119)
!121 = span !3 1166 1167
!122 = span !3 1148 1167
!123 = (!2 !122)
!124 = span !3 1141 1168
!125 = (!2 !124)
!126 = span !3 1199 1200
!127 = span !3 1181 1200
!128 = (!2 !127)
!129 = span !3 1174 1201
!130 = (!2 !129)
!131 = span !3 1232 1233
!132 = span !3 1214 1233
!133 = (!2 !132)
!134 = span !3 1207 1234
!135 = (!2 !134)
!136 = span !3 1265 1267
!137 = span !3 1247 1267
!138 = (!2 !137)
!139 = span !3 1240 1268
!140 = (!2 !139)
!141 = span !3 1299 1301
!142 = span !3 1281 1301
!143 = (!2 !142)
!144 = span !3 1274 1302
!145 = (!2 !144)
!146 = span !0 48 74
!147 = span !3 1309 1313
!148 = span !0 107 113
!149 = span !0 92 114
!150 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!151 = span !150 64237 64250
!152 = (!149 !151)
!153 = (!149 !151)
!154 = (!149 !151)
!155 = (!149 !151)
!156 = (!149 !151)
!157 = (!149 !151)
!158 = (!149 !151)
!159 = (!149 !151)
!160 = (!149 !151)
!161 = (!149 !151)
!162 = span !150 159 222
!163 = (!149 !151 !162)
!164 = (!149 !151)
!165 = span !150 64221 64251
!166 = (!149 !165)
!167 = (!149 !165)
!168 = span !150 55 82
!169 = (!149 !165 !168)
!170 = (!149 !165)
!171 = (!149 !165)
!172 = (!149 !165)
!173 = (!149 !165)
!174 = (!149 !165)
!175 = (!149 !165)
!176 = (!149 !165)
!177 = (!149 !165)
!178 = (!149 !165)
!179 = (!149 !165)
!180 = (!149 !165)
!181 = (!149 !165)
!182 = (!149 !165)
!183 = (!149 !165)
!184 = (!149 !165)
!185 = (!149 !165)
!186 = (!149 !165)
!187 = (!149 !165)
!188 = span !150 3836 3919
!189 = (!149 !165 !188)
!190 = (!149 !165)
!191 = span !150 64208 64252
!192 = (!149 !191)
!193 = span !150 64257 64263
!194 = (!149 !193)
!195 = span !150 64257 64278
!196 = (!149 !195)
!197 = (!149 !195)
!198 = (!149 !195 !168)
!199 = (!149 !195)
!200 = (!149 !195)
!201 = (!149 !195)
!202 = (!149 !195)
!203 = (!149 !195)
!204 = (!149 !195)
!205 = (!149 !195)
!206 = (!149 !195)
!207 = (!149 !195)
!208 = (!149 !195)
!209 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!210 = span !209 935 944
!211 = span !209 921 1019
!212 = span !209 961 971
!213 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!214 = span !213 1038 1059
!215 = span !209 982 1010
!216 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!217 = span !216 691 705
!218 = (!215 !217)

// IR: Final
script {
    pub entry fn __entry() -> ptr slice, !1 {
        local [u64; 3] __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_000
        local { u64, u64, u64 } __anon_01
        local { bool, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_10
        local { u64, u64, u64 } __anon_100
        local { u64, u64 } __anon_11
        local { bool, u64, b256, u8 } __anon_2
        local { { u64, u64, u64 } } __anon_20
        local { u64, u64, u64 } __asm_arg
        local { u64, u64, u64 } __asm_arg0
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local slice __ret_value
        local b256 __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local { { u64, u64, u64 } } __tmp_block_arg1
        local slice __tmp_block_arg2
        local slice __tmp_block_arg3
        local u64 a
        local u64 b
        local { { u64, u64, u64 } } buffer
        local u64 c
        local u8 d
        local bool result
        local b256 zero

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = get_local ptr b256, __const
        v2 = get_local ptr b256, __tmp_block_arg
        mem_copy_val v2, v1
        v3 = get_local ptr b256, zero, !5
        mem_copy_val v3, v2
        v4 = get_local ptr u64, a, !7
        v5 = const u64 1, !8
        store v5 to v4, !9
        v6 = get_local ptr u64, b, !11
        v7 = const u64 1, !12
        store v7 to v6, !13
        v8 = get_local ptr u64, c, !15
        v9 = const u64 1, !16
        store v9 to v8, !17
        v10 = get_local ptr u8, d, !19
        v11 = const u8 1, !20
        store v11 to v10, !21
        v12 = get_local ptr [u64; 3], __anon_0, !23
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !2
        v15 = const u64 42, !24
        store v15 to v14, !25
        v16 = const u64 1
        v17 = get_elem_ptr v12, ptr u64, v16, !2
        v18 = const u64 42, !24
        store v18 to v17, !26
        v19 = const u64 2
        v20 = get_elem_ptr v12, ptr u64, v19, !2
        v21 = const u64 42, !24
        store v21 to v20, !27
        v22 = get_local ptr { bool, u64 }, __anon_1, !29
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr bool, v23, !2
        v25 = const bool false, !30
        store v25 to v24, !31
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26, !2
        v28 = const u64 11, !32
        store v28 to v27, !33
        v29 = const bool false
        v30 = const bool false, !35
        v31 = cmp eq v29 v30, !37
        v32 = call assert_2(v31), !39
        v33 = cmp eq v29 v30, !41
        v34 = call assert_2(v33), !43
        v35 = cmp eq v29 v30, !45
        v36 = call assert_2(v35), !47
        v37 = cmp eq v29 v30, !49
        v38 = call assert_2(v37), !51
        v39 = const bool true
        v40 = call assert_2(v39), !53
        v41 = call assert_2(v39), !55
        v42 = get_local ptr b256, zero, !57
        v43 = get_local ptr { bool, u64, b256, u8 }, __anon_2, !59
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr bool, v44, !60
        v46 = const bool true, !61
        store v46 to v45, !62
        v47 = const u64 1
        v48 = get_elem_ptr v43, ptr u64, v47, !63
        v49 = const u64 11, !64
        store v49 to v48, !65
        v50 = const u64 2
        v51 = get_elem_ptr v43, ptr b256, v50, !66
        mem_copy_val v51, v42
        v52 = const u64 3
        v53 = get_elem_ptr v43, ptr u8, v52, !67
        v54 = const u8 255, !68
        store v54 to v53, !69
        v55 = call assert_2(v39), !71
        v56 = call assert_2(v39), !73
        v57 = call assert_2(v39), !75
        v58 = const u64 8
        v59 = const u64 8, !76
        v60 = cmp eq v58 v59, !78
        v61 = call assert_2(v60), !80
        v62 = const u64 8, !81
        v63 = cmp eq v58 v62, !83
        v64 = call assert_2(v63), !85
        v65 = const u64 8, !86
        v66 = cmp eq v58 v65, !88
        v67 = call assert_2(v66), !90
        v68 = const u64 1
        v69 = const u64 1, !91
        v70 = cmp eq v68 v69, !93
        v71 = call assert_2(v70), !95
        v72 = const u64 32
        v73 = const u64 32, !96
        v74 = cmp eq v72 v73, !98
        v75 = call assert_2(v74), !100
        v76 = const u64 16
        v77 = const u64 16, !101
        v78 = cmp eq v76 v77, !103
        v79 = call assert_2(v78), !105
        v80 = const u64 24
        v81 = const u64 24, !106
        v82 = cmp eq v80 v81, !108
        v83 = call assert_2(v82), !110
        v84 = const u64 16, !111
        v85 = cmp eq v76 v84, !113
        v86 = call assert_2(v85), !115
        v87 = const u64 8
        v88 = const u64 8, !116
        v89 = cmp eq v87 v88, !118
        v90 = call assert_2(v89), !120
        v91 = const u64 8, !121
        v92 = cmp eq v87 v91, !123
        v93 = call assert_2(v92), !125
        v94 = const u64 8, !126
        v95 = cmp eq v87 v94, !128
        v96 = call assert_2(v95), !130
        v97 = const u64 1
        v98 = const u64 1, !131
        v99 = cmp eq v97 v98, !133
        v100 = call assert_2(v99), !135
        v101 = const u64 32
        v102 = const u64 32, !136
        v103 = cmp eq v101 v102, !138
        v104 = call assert_2(v103), !140
        v105 = const u64 16
        v106 = const u64 16, !141
        v107 = cmp eq v105 v106, !143
        v108 = call assert_2(v107), !145
        v109 = get_local ptr bool, result, !146
        v110 = const bool true, !147
        store v110 to v109, !146
        v111 = get_local ptr bool, result, !148
        v112 = const u64 1024
        v113 = asm(cap: v112) -> u64 hp, !152 {
            aloc   cap
        }
        v114 = int_to_ptr v113 to ptr u8, !153
        v115 = ptr_to_int v114 to u64, !154
        v116 = get_local ptr { u64, u64, u64 }, __anon_00, !155
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr u64, v117, !156
        store v115 to v118, !157
        v119 = const u64 1
        v120 = get_elem_ptr v116, ptr u64, v119, !158
        store v112 to v120, !159
        v121 = const u64 2
        v122 = get_elem_ptr v116, ptr u64, v121, !160
        v123 = const u64 0
        store v123 to v122, !161
        v124 = asm(buffer: v116) -> ptr { u64, u64, u64 } buffer {
        }
        v125 = get_local ptr { { u64, u64, u64 } }, __anon_10, !163
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr { u64, u64, u64 }, v126, !164
        mem_copy_val v127, v124
        v128 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v128, v125
        v129 = ptr_to_int v128 to u64, !166
        v130 = int_to_ptr v129 to ptr { { u64, u64, u64 } }, !167
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr { u64, u64, u64 }, v131, !169
        v133 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v133, v132
        v134 = asm(buffer: v133) -> ptr { u64, u64, u64 } buffer {
        }
        v135 = get_local ptr { u64, u64, u64 }, __anon_000, !170
        mem_copy_val v135, v134
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !171
        v138 = load v137, !172
        v139 = int_to_ptr v138 to ptr u8, !173
        v140 = const u64 1
        v141 = get_elem_ptr v135, ptr u64, v140, !174
        v142 = const u64 2
        v143 = get_elem_ptr v135, ptr u64, v142, !175
        v144 = load v143, !176
        v145 = ptr_to_int v139 to u64, !177
        v146 = add v145, v144, !178
        v147 = int_to_ptr v146 to ptr bool, !179
        mem_copy_val v147, v111
        v148 = const u64 1
        v149 = add v144, v148, !180
        v150 = ptr_to_int v139 to u64, !181
        v151 = get_local ptr { u64, u64, u64 }, __anon_100, !182
        v152 = const u64 0
        v153 = get_elem_ptr v151, ptr u64, v152, !183
        store v150 to v153, !184
        v154 = const u64 1
        v155 = get_elem_ptr v151, ptr u64, v154, !185
        mem_copy_val v155, v141
        v156 = const u64 2
        v157 = get_elem_ptr v151, ptr u64, v156, !186
        store v149 to v157, !187
        v158 = asm(buffer: v151) -> ptr { u64, u64, u64 } buffer {
        }
        v159 = get_local ptr { { u64, u64, u64 } }, __anon_20, !189
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr { u64, u64, u64 }, v160, !190
        mem_copy_val v161, v158
        v162 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg1
        mem_copy_val v162, v159
        v163 = get_local ptr { { u64, u64, u64 } }, buffer, !192
        mem_copy_val v163, v162
        v164 = get_local ptr { { u64, u64, u64 } }, buffer, !194
        v165 = ptr_to_int v164 to u64, !196
        v166 = int_to_ptr v165 to ptr { { u64, u64, u64 } }, !197
        v167 = const u64 0
        v168 = get_elem_ptr v166, ptr { u64, u64, u64 }, v167, !198
        v169 = get_local ptr { u64, u64, u64 }, __asm_arg0
        mem_copy_val v169, v168
        v170 = asm(buffer: v169) -> ptr { u64, u64, u64 } buffer {
        }
        v171 = get_local ptr { u64, u64, u64 }, __anon_01, !199
        mem_copy_val v171, v170
        v172 = const u64 0
        v173 = get_elem_ptr v171, ptr u64, v172, !200
        v174 = load v173, !201
        v175 = int_to_ptr v174 to ptr u8, !202
        v176 = const u64 2
        v177 = get_elem_ptr v171, ptr u64, v176, !203
        v178 = ptr_to_int v175 to u64, !204
        v179 = get_local ptr { u64, u64 }, __anon_11, !205
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr u64, v180, !206
        store v178 to v181, !207
        v182 = const u64 1
        v183 = get_elem_ptr v179, ptr u64, v182, !208
        mem_copy_val v183, v177
        v184 = asm(s: v179) -> ptr slice s {
        }
        v185 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v185, v184
        v186 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v186, v185
        mem_copy_val v0, v186
        ret ptr slice v0
    }

    pub fn assert_2(condition !210: bool) -> (), !211 {
        entry(condition: bool):
        v0 = const bool false, !35
        v1 = cmp eq condition v0, !212
        cbr v1, block0(), block1(), !212

        block0():
        v2 = const u64 18446744073709486084, !214
        revert v2, !218

        block1():
        v3 = const unit ()
        ret () v3
    }
}

!0 = "<autogenerated>"
!1 = span !0 0 128
!2 = span !0 67 73
!3 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/stdlib/intrinsics/src/main.sw"
!4 = span !3 188 211
!5 = (!2 !4)
!6 = span !3 216 231
!7 = (!2 !6)
!8 = span !3 229 230
!9 = (!2 !6)
!10 = span !3 236 251
!11 = (!2 !10)
!12 = span !3 249 250
!13 = (!2 !10)
!14 = span !3 256 271
!15 = (!2 !14)
!16 = span !3 269 270
!17 = (!2 !14)
!18 = span !3 276 290
!19 = (!2 !18)
!20 = span !3 288 289
!21 = (!2 !18)
!22 = span !3 389 399
!23 = (!2 !22)
!24 = span !3 390 395
!25 = (!2 !22)
!26 = (!2 !22)
!27 = (!2 !22)
!28 = span !3 424 487
!29 = (!2 !28)
!30 = span !3 454 459
!31 = (!2 !28)
!32 = span !3 478 480
!33 = (!2 !28)
!34 = "/home/kebradalaonda/p/sway/sway-lib-core/src/ops.sw"
!35 = span !34 9991 9996
!36 = span !3 501 520
!37 = (!2 !36)
!38 = span !3 494 521
!39 = (!2 !38)
!40 = span !3 534 553
!41 = (!2 !40)
!42 = span !3 527 554
!43 = (!2 !42)
!44 = span !3 567 586
!45 = (!2 !44)
!46 = span !3 560 587
!47 = (!2 !46)
!48 = span !3 600 618
!49 = (!2 !48)
!50 = span !3 593 619
!51 = (!2 !50)
!52 = span !3 625 656
!53 = (!2 !52)
!54 = span !3 662 694
!55 = (!2 !54)
!56 = span !3 730 734
!57 = (!2 !56)
!58 = span !3 719 742
!59 = (!2 !58)
!60 = (!2 !58)
!61 = span !3 720 724
!62 = (!2 !58)
!63 = (!2 !58)
!64 = span !3 726 728
!65 = (!2 !58)
!66 = (!2 !58)
!67 = (!2 !58)
!68 = span !3 736 741
!69 = (!2 !58)
!70 = span !3 700 744
!71 = (!2 !70)
!72 = span !3 750 772
!73 = (!2 !72)
!74 = span !3 778 800
!75 = (!2 !74)
!76 = span !3 834 835
!77 = span !3 814 835
!78 = (!2 !77)
!79 = span !3 807 836
!80 = (!2 !79)
!81 = span !3 869 870
!82 = span !3 849 870
!83 = (!2 !82)
!84 = span !3 842 871
!85 = (!2 !84)
!86 = span !3 904 905
!87 = span !3 884 905
!88 = (!2 !87)
!89 = span !3 877 906
!90 = (!2 !89)
!91 = span !3 938 939
!92 = span !3 919 939
!93 = (!2 !92)
!94 = span !3 912 940
!95 = (!2 !94)
!96 = span !3 974 976
!97 = span !3 953 976
!98 = (!2 !97)
!99 = span !3 946 977
!100 = (!2 !99)
!101 = span !3 1014 1016
!102 = span !3 990 1016
!103 = (!2 !102)
!104 = span !3 983 1017
!105 = (!2 !104)
!106 = span !3 1055 1057
!107 = span !3 1030 1057
!108 = (!2 !107)
!109 = span !3 1023 1058
!110 = (!2 !109)
!111 = span !3 1098 1100
!112 = span !3 1071 1100
!113 = (!2 !112)
!114 = span !3 1064 1101
!115 = (!2 !114)
!116 = span !3 1133 1134
!117 = span !3 1115 1134
!118 = (!2 !117)
!119 = span !3 1108 1135
!120 = (!2 !119)
!121 = span !3 1166 1167
!122 = span !3 1148 1167
!123 = (!2 !122)
!124 = span !3 1141 1168
!125 = (!2 !124)
!126 = span !3 1199 1200
!127 = span !3 1181 1200
!128 = (!2 !127)
!129 = span !3 1174 1201
!130 = (!2 !129)
!131 = span !3 1232 1233
!132 = span !3 1214 1233
!133 = (!2 !132)
!134 = span !3 1207 1234
!135 = (!2 !134)
!136 = span !3 1265 1267
!137 = span !3 1247 1267
!138 = (!2 !137)
!139 = span !3 1240 1268
!140 = (!2 !139)
!141 = span !3 1299 1301
!142 = span !3 1281 1301
!143 = (!2 !142)
!144 = span !3 1274 1302
!145 = (!2 !144)
!146 = span !0 48 74
!147 = span !3 1309 1313
!148 = span !0 107 113
!149 = span !0 92 114
!150 = "/home/kebradalaonda/p/sway/sway-lib-core/src/codec.sw"
!151 = span !150 64237 64250
!152 = (!149 !151)
!153 = (!149 !151)
!154 = (!149 !151)
!155 = (!149 !151)
!156 = (!149 !151)
!157 = (!149 !151)
!158 = (!149 !151)
!159 = (!149 !151)
!160 = (!149 !151)
!161 = (!149 !151)
!162 = span !150 159 222
!163 = (!149 !151 !162)
!164 = (!149 !151)
!165 = span !150 64221 64251
!166 = (!149 !165)
!167 = (!149 !165)
!168 = span !150 55 82
!169 = (!149 !165 !168)
!170 = (!149 !165)
!171 = (!149 !165)
!172 = (!149 !165)
!173 = (!149 !165)
!174 = (!149 !165)
!175 = (!149 !165)
!176 = (!149 !165)
!177 = (!149 !165)
!178 = (!149 !165)
!179 = (!149 !165)
!180 = (!149 !165)
!181 = (!149 !165)
!182 = (!149 !165)
!183 = (!149 !165)
!184 = (!149 !165)
!185 = (!149 !165)
!186 = (!149 !165)
!187 = (!149 !165)
!188 = span !150 3836 3919
!189 = (!149 !165 !188)
!190 = (!149 !165)
!191 = span !150 64208 64252
!192 = (!149 !191)
!193 = span !150 64257 64263
!194 = (!149 !193)
!195 = span !150 64257 64278
!196 = (!149 !195)
!197 = (!149 !195)
!198 = (!149 !195 !168)
!199 = (!149 !195)
!200 = (!149 !195)
!201 = (!149 !195)
!202 = (!149 !195)
!203 = (!149 !195)
!204 = (!149 !195)
!205 = (!149 !195)
!206 = (!149 !195)
!207 = (!149 !195)
!208 = (!149 !195)
!209 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/assert.sw"
!210 = span !209 935 944
!211 = span !209 921 1019
!212 = span !209 961 971
!213 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/error_signals.sw"
!214 = span !213 1038 1059
!215 = span !209 982 1010
!216 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-conversions/src/revert.sw"
!217 = span !216 691 705
!218 = (!215 !217)

  [1;32mFinished[0m debug [unoptimized + fuel] target(s) in 7.18s
      Bytecode size: 1320 bytes
      Bytecode hash: 0x36e36b92a1d498018a42039b36b9d8bf71c5eae10d7c94d769f81c3b9e7d1230
