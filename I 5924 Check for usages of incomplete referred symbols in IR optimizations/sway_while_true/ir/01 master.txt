script {
    pub entry fn __entry() -> ptr slice, !1 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64 } __anon_10
        local { u64, u64, u64 } __asm_arg
        local slice __ret_value
        local { { u64, u64, u64 } } buffer

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = call main_0(), !2
        v2 = const u64 1024
        v3 = asm(cap: v2) -> u64 hp, !6 {
            aloc   cap
        }
        v4 = int_to_ptr v3 to ptr u8, !7
        v5 = ptr_to_int v4 to u64, !8
        v6 = get_local ptr { u64, u64, u64 }, __anon_0, !9
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !10
        store v5 to v8, !11
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9, !12
        store v2 to v10, !13
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr u64, v11, !14
        v13 = const u64 0
        store v13 to v12, !15
        v14 = asm(buffer: v6) -> ptr { u64, u64, u64 } buffer {
        }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        v17 = load v16
        v18 = const u64 1
        v19 = get_elem_ptr v14, ptr u64, v18
        v20 = load v19
        v21 = const u64 2
        v22 = get_elem_ptr v14, ptr u64, v21
        v23 = load v22
        v24 = get_local ptr { { u64, u64, u64 } }, buffer, !17
        v25 = const u64 0
        v26 = const u64 0
        v27 = get_elem_ptr v24, ptr u64, v25, v26
        store v17 to v27
        v28 = const u64 0
        v29 = const u64 1
        v30 = get_elem_ptr v24, ptr u64, v28, v29
        store v20 to v30
        v31 = const u64 0
        v32 = const u64 2
        v33 = get_elem_ptr v24, ptr u64, v31, v32
        store v23 to v33
        v34 = get_local ptr { { u64, u64, u64 } }, buffer, !19
        v35 = ptr_to_int v34 to u64, !21
        v36 = int_to_ptr v35 to ptr { { u64, u64, u64 } }, !22
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, u64, u64 }, v37, !24
        v39 = get_local ptr { u64, u64, u64 }, __asm_arg
        mem_copy_val v39, v38
        v40 = asm(buffer: v39) -> ptr { u64, u64, u64 } buffer {
        }
        v41 = get_local ptr { u64, u64, u64 }, __anon_00, !25
        mem_copy_val v41, v40
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !26
        v44 = load v43, !27
        v45 = int_to_ptr v44 to ptr u8, !28
        v46 = const u64 2
        v47 = get_elem_ptr v41, ptr u64, v46, !29
        v48 = ptr_to_int v45 to u64, !30
        v49 = get_local ptr { u64, u64 }, __anon_10, !31
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !32
        store v48 to v51, !33
        v52 = const u64 1
        v53 = get_elem_ptr v49, ptr u64, v52, !34
        mem_copy_val v53, v47
        v54 = asm(s: v49) -> ptr slice s {
        }
        mem_copy_val v0, v54
        ret ptr slice v0
    }

    fn main_0() -> (), !38 {
        entry():
        br while()

        while():
        br while()
    }
}
