// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
script {
    entry fn main() -> (), !3 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, u64 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 111, !5
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 222, !6
        store v6 to v5, !4
        v7 = load v0
        v8 = get_local ptr { u64, u64 }, __tmp_arg
        store v7 to v8
        v9 = call f1_0(v8)
        v10 = const unit ()
        ret () v10
    }

    fn f1_0(s1: ptr { u64, u64 }) -> (), !10 {
        local { u64, u64 } __tmp_arg
        local { u64, u64 } s1_

        entry(s1: ptr { u64, u64 }):
        v0 = load s1
        v1 = get_local ptr { u64, u64 }, s1_
        store v0 to v1
        v2 = get_local ptr { u64, u64 }, s1_, !11
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        store v3 to v4
        v5 = call f2_1(v4)
        v6 = const unit ()
        ret () v6
    }

    fn f2_1(s1: ptr { u64, u64 }) -> (), !14 {
        local { u64, u64 } __tmp_arg
        local { u64, u64 } s1_

        entry(s1: ptr { u64, u64 }):
        v0 = load s1
        v1 = get_local ptr { u64, u64 }, s1_
        store v0 to v1
        v2 = get_local ptr { u64, u64 }, s1_, !15
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        store v3 to v4
        v5 = call poke_2(v4)
        v6 = const unit ()
        ret () v6
    }

    fn poke_2(_s1: ptr { u64, u64 }) -> (), !18 {
        entry(_s1: ptr { u64, u64 }):
        v0 = load _s1
        v1 = const unit ()
        ret () v1
    }
}

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    entry fn main() -> (), !3 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __tmp_arg

        entry():
        v0 = get_local ptr { u64, u64 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 111, !5
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 222, !6
        store v6 to v5, !4
        v7 = load v0
        v8 = get_local ptr { u64, u64 }, __anon_0
        v9 = call f1_0(v8)
        v10 = const unit ()
        ret () v10
    }

    fn f1_0(s1: ptr { u64, u64 }) -> (), !10 {
        local { u64, u64 } __tmp_arg
        local { u64, u64 } s1_

        entry(s1: ptr { u64, u64 }):
        v0 = load s1
        v1 = get_local ptr { u64, u64 }, s1_
        v2 = get_local ptr { u64, u64 }, s1_, !11
        v3 = load s1
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, s1
        v5 = call f2_1(v4)
        v6 = const unit ()
        ret () v6
    }

    fn f2_1(s1: ptr { u64, u64 }) -> (), !14 {
        local { u64, u64 } __tmp_arg
        local { u64, u64 } s1_

        entry(s1: ptr { u64, u64 }):
        v0 = load s1
        v1 = get_local ptr { u64, u64 }, s1_
        v2 = get_local ptr { u64, u64 }, s1_, !15
        v3 = load s1
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, s1
        v5 = call poke_2(v4)
        v6 = const unit ()
        ret () v6
    }

    fn poke_2(_s1: ptr { u64, u64 }) -> (), !18 {
        entry(_s1: ptr { u64, u64 }):
        v0 = load _s1
        v1 = const unit ()
        ret () v1
    }
}

// IR: Final
script {
    entry fn main() -> (), !3 {
        local { u64, u64 } __anon_0

        entry():
        v0 = get_local ptr { u64, u64 }, __anon_0, !4
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 111, !5
        store v3 to v2, !4
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 222, !6
        store v6 to v5, !4
        v7 = get_local ptr { u64, u64 }, __anon_0
        v8 = call f1_0(v7)
        v9 = const unit ()
        ret () v9
    }

    fn f1_0(s1: ptr { u64, u64 }) -> (), !10 {
        local { u64, u64 } __tmp_arg

        entry(s1: ptr { u64, u64 }):
        v0 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v0, s1
        v1 = call f2_1(v0)
        v2 = const unit ()
        ret () v2
    }

    fn f2_1(s1: ptr { u64, u64 }) -> (), !13 {
        local { u64, u64 } __tmp_arg

        entry(s1: ptr { u64, u64 }):
        v0 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v0, s1
        v1 = call poke_2(v0)
        v2 = const unit ()
        ret () v2
    }

    fn poke_2(_s1: ptr { u64, u64 }) -> (), !16 {
        entry(_s1: ptr { u64, u64 }):
        v0 = const unit ()
        ret () v0
    }
}
