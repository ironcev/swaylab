contract {
    DEBUG_STEP = config u64, abi_decode_in_place_0, 0x0000000000000000, !1

    pub fn abi_decode_in_place_0(ptr !3: u64, len !4: u64, target !5: u64) -> (), !9 {
        local mut { u64 } buffer
        local u64 temp

        entry(ptr: u64, len: u64, target: u64):
        v0 = call from_parts_1(ptr, len), !12
        v1 = get_local ptr { u64 }, buffer, !13
        store v0 to v1, !13
        v2 = get_local ptr { u64 }, buffer, !14
        v3 = call abi_decode_2(v2), !17
        v4 = get_local ptr u64, temp, !18
        store v3 to v4, !18
        v5 = get_local ptr u64, temp, !19
        v6 = ptr_to_int v5 to u64, !20
        v7 = const u64 8
        v8 = asm(target: target, temp: v6, size: v7) -> (), !21 {
            mcp    target temp size, !22
        }
        v9 = const unit ()
        ret () v9
    }

    pub fn from_parts_1(ptr !23: u64, _len !24: u64) -> { u64 }, !27 {
        local { u64 } __anon_0

        entry(ptr: u64, _len: u64):
        v0 = get_local ptr { u64 }, __anon_0, !28
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        store ptr to v2, !28
        v3 = load v0
        ret { u64 } v3
    }

    pub fn abi_decode_2(buffer !29: ptr { u64 }) -> u64, !32 {
        entry(buffer: ptr { u64 }):
        v0 = call read_8_bytes_3(buffer), !35
        ret u64 v0
    }

    pub fn read_8_bytes_3(self !36: ptr { u64 }) -> u64, !39 {
        local u64 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !40
        v2 = load v1
        v3 = asm(ptr: v2, val) -> u64 val, !41 {
            lw     val ptr i0, !42
        }
        v4 = get_local ptr u64, v, !43
        store v3 to v4, !43
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !40
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 8, !44
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !45
        store v11 to v13, !45
        v14 = get_local ptr u64, v, !46
        v15 = load v14
        ret u64 v15
    }

    pub entry fn __entry() -> (), !51 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64, u64 } __anon_10
        local slice __anon_11
        local { u64, u64 } __anon_12
        local slice __anon_13
        local { u64, u64 } __anon_14
        local slice __anon_15
        local { u64, u64 } __anon_16
        local slice __anon_17
        local { u64, u64 } __anon_18
        local slice __anon_19
        local { u64, u64 } __anon_2
        local { u64, u64 } __anon_20
        local slice __anon_21
        local { u64, u64 } __anon_22
        local slice __anon_23
        local { u64, u64 } __anon_24
        local slice __anon_25
        local { u64, u64 } __anon_26
        local slice __anon_27
        local { u64, u64 } __anon_28
        local slice __anon_29
        local slice __anon_3
        local { u64, u64 } __anon_30
        local slice __anon_31
        local { u64, u64 } __anon_32
        local slice __anon_33
        local { u64, u64 } __anon_34
        local slice __anon_35
        local { u64, u64 } __anon_36
        local slice __anon_37
        local { u64, u64 } __anon_38
        local slice __anon_39
        local { u64, u64 } __anon_4
        local { u64, u64 } __anon_40
        local slice __anon_41
        local { u64, u64 } __anon_42
        local slice __anon_43
        local { u64, u64 } __anon_44
        local slice __anon_45
        local { u64, u64 } __anon_46
        local slice __anon_47
        local { u64, u64 } __anon_48
        local slice __anon_49
        local slice __anon_5
        local { u64, u64 } __anon_50
        local slice __anon_51
        local { u64, u64 } __anon_52
        local slice __anon_53
        local { u64, u64 } __anon_54
        local slice __anon_55
        local { u64, u64 } __anon_56
        local slice __anon_57
        local { u64, u64 } __anon_58
        local slice __anon_59
        local { u64, u64 } __anon_6
        local { u64, u64 } __anon_60
        local slice __anon_61
        local { u64, u64 } __anon_62
        local slice __anon_63
        local { u64, u64 } __anon_64
        local slice __anon_65
        local { u64, u64 } __anon_66
        local slice __anon_67
        local { u64, u64 } __anon_68
        local slice __anon_69
        local slice __anon_7
        local { u64, u64 } __anon_70
        local slice __anon_71
        local { u64, u64 } __anon_72
        local slice __anon_73
        local { u64, u64 } __anon_74
        local slice __anon_75
        local { u64, u64 } __anon_76
        local slice __anon_77
        local { u64, u64 } __anon_78
        local slice __anon_79
        local { u64, u64 } __anon_8
        local { u64, u64 } __anon_80
        local slice __anon_81
        local { u64, u64 } __anon_82
        local slice __anon_83
        local { u64, u64 } __anon_84
        local slice __anon_85
        local { u64, u64 } __anon_86
        local slice __anon_87
        local { u64, u64 } __anon_88
        local slice __anon_89
        local slice __anon_9
        local { u64, u64 } __anon_90
        local slice __anon_91
        local mut { u64 } _buffer
        local slice _method_name
        local () _result
        local () _result_
        local () _result__
        local u256 _result___
        local slice _result____
        local u64 _result_____
        local slice _result______
        local () _result_______
        local u64 _result________
        local slice _result_________
        local () _result__________
        local { { u64, u64 }, u64 } _result___________
        local slice _result____________
        local { { u64, u64 }, u64 } _result_____________
        local slice _result______________
        local u256 _result_______________
        local slice _result________________
        local { { u64, u64 }, u64 } _result_________________
        local slice _result__________________
        local { u256 } _result___________________
        local slice _result____________________
        local { u256, u256, u256, u256, u256, u256, u256 } _result_____________________
        local slice _result______________________
        local { u256, u256, u256, u256, u256, u256, u256 } _result_______________________
        local slice _result________________________
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } _result_________________________
        local slice _result__________________________
        local { bool, bool, bool, bool } _result___________________________
        local slice _result____________________________
        local { u64, u64, u64, u64 } _result_____________________________
        local slice _result______________________________
        local { b256 } _result_______________________________
        local slice _result________________________________
        local { u256 } _result_________________________________
        local slice _result__________________________________
        local u256 _result___________________________________
        local slice _result____________________________________
        local { u256 } _result_____________________________________
        local slice _result______________________________________
        local { { u256 }, u256, u256 } _result_______________________________________
        local slice _result________________________________________
        local u64 _result_________________________________________
        local slice _result__________________________________________
        local { u256, u256 } _result___________________________________________
        local slice _result____________________________________________
        local u256 _result_____________________________________________
        local slice _result______________________________________________
        local u8 _result_______________________________________________
        local slice _result________________________________________________
        local bool _result_________________________________________________
        local slice _result__________________________________________________
        local () _result___________________________________________________
        local () _result____________________________________________________
        local u64 _result_____________________________________________________
        local slice _result______________________________________________________
        local () _result_______________________________________________________
        local () _result________________________________________________________
        local () _result_________________________________________________________
        local () _result__________________________________________________________
        local () _result___________________________________________________________
        local u64 _result____________________________________________________________
        local slice _result_____________________________________________________________
        local () _result______________________________________________________________
        local () _result_______________________________________________________________
        local u64 _result________________________________________________________________
        local slice _result_________________________________________________________________
        local () _result__________________________________________________________________
        local () _result___________________________________________________________________
        local () _result____________________________________________________________________
        local () _result_____________________________________________________________________
        local () _result______________________________________________________________________
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } _result_______________________________________________________________________
        local slice _result________________________________________________________________________
        local { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } args
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } } args_
        local { { { b256 }, b256, u64, u256, u256, u256, u64, bool } } args__
        local { { u64, ( { b256 } | { b256 } ) } } args___
        local { { b256 } } args____
        local { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } } args_____
        local { { b256 }, u64 } args______
        local { { u64, ( { b256 } | { b256 } ) } } args_______
        local { u256 } args________
        local { { b256 } } args_________
        local { b256 } args__________
        local { u256 } args___________
        local { { u64, ( { b256 } | { b256 } ) } } args____________
        local { { u64, ( { b256 } | { b256 } ) } } args_____________
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } args______________
        local { { u64, ( { b256 } | { b256 } ) } } args_______________
        local { { u64, ( { b256 } | { b256 } ) } } args________________
        local { { bool, bool, bool, bool } } args_________________
        local { { b256 } } args__________________
        local { { b256 }, u64 } args___________________
        local { { b256 } } args____________________
        local { { b256 } } args_____________________
        local { { b256 } } args______________________
        local { { u64, ( { b256 } | { b256 } ) } } args_______________________
        local { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } args________________________
        local { { { u64, u64 }, u64 } } args_________________________
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } args__________________________
        local { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } args___________________________
        local { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } args____________________________
        local { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } args_____________________________
        local { { u64, ( { b256 } | { b256 } ) }, u64 } args______________________________

        entry():
        v0 = call from_second_parameter_4(), !54
        v1 = get_local ptr { u64 }, _buffer, !55
        store v0 to v1, !55
        v2 = call decode_first_param_7(), !58
        v3 = get_local ptr slice, _method_name, !59
        store v2 to v3, !59
        v4 = get_local ptr slice, _method_name, !60
        v5 = load v4
        v6 = const string<6> "absorb"
        v7 = ptr_to_int v6 to u64, !61
        v8 = get_local ptr { u64, u64 }, __anon_0, !61
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v7 to v10, !61
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        v13 = const u64 6
        store v13 to v12, !61
        v14 = get_local ptr slice, __anon_1, !61
        mem_copy_bytes v14, v8, 16
        v15 = load v14
        v16 = call eq_13(v5, v15), !64
        cbr v16, block0(), block1(), !62

        block0():
        v17 = get_local ptr { u64 }, _buffer, !65
        v18 = call decode_19(v17), !68
        v19 = get_local ptr { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args, !69
        store v18 to v19, !69
        v20 = get_local ptr { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args, !70
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !71
        v23 = load v22
        v24 = get_local ptr { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args, !72
        v25 = const u64 1
        v26 = get_elem_ptr v24, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v25, !73
        v27 = load v26
        v28 = call absorb_93(v23, v27), !76
        v29 = get_local ptr (), _result, !77
        store v28 to v29, !77
        v30 = asm() -> u64 zero, !78 {
        }
        v31 = const u64 0, !79
        retd v30 v31, !80

        block1():
        v32 = const unit ()
        br block2(v32)

        block2(v33: ()):
        v34 = get_local ptr slice, _method_name, !81
        v35 = load v34
        v36 = const string<17> "activate_contract"
        v37 = ptr_to_int v36 to u64, !82
        v38 = get_local ptr { u64, u64 }, __anon_2, !82
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39
        store v37 to v40, !82
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr u64, v41
        v43 = const u64 17
        store v43 to v42, !82
        v44 = get_local ptr slice, __anon_3, !82
        mem_copy_bytes v44, v38, 16
        v45 = load v44
        v46 = call eq_13(v35, v45), !85
        cbr v46, block3(), block4(), !83

        block3():
        v47 = get_local ptr { u64 }, _buffer, !86
        v48 = call decode_403(v47), !89
        v49 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } }, args_, !90
        store v48 to v49, !90
        v50 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } }, args_, !91
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v51, !92
        v53 = load v52
        v54 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } }, args_, !93
        v55 = const u64 1
        v56 = get_elem_ptr v54, ptr { u64, ( { b256 } | { b256 } ) }, v55, !94
        v57 = load v56
        v58 = call activate_contract_411(v53, v57), !97
        v59 = get_local ptr (), _result_, !98
        store v58 to v59, !98
        v60 = asm() -> u64 zero, !99 {
        }
        v61 = const u64 0, !100
        retd v60 v61, !101

        block4():
        v62 = const unit ()
        br block5(v62)

        block5(v63: ()):
        v64 = get_local ptr slice, _method_name, !102
        v65 = load v64
        v66 = const string<20> "add_collateral_asset"
        v67 = ptr_to_int v66 to u64, !103
        v68 = get_local ptr { u64, u64 }, __anon_4, !103
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69
        store v67 to v70, !103
        v71 = const u64 1
        v72 = get_elem_ptr v68, ptr u64, v71
        v73 = const u64 20
        store v73 to v72, !103
        v74 = get_local ptr slice, __anon_5, !103
        mem_copy_bytes v74, v68, 16
        v75 = load v74
        v76 = call eq_13(v65, v75), !106
        cbr v76, block6(), block7(), !104

        block6():
        v77 = get_local ptr { u64 }, _buffer, !107
        v78 = call decode_461(v77), !110
        v79 = get_local ptr { { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, args__, !111
        store v78 to v79, !111
        v80 = get_local ptr { { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, args__, !112
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v81, !113
        v83 = load v82
        v84 = call add_collateral_asset_466(v83), !116
        v85 = get_local ptr (), _result__, !117
        store v84 to v85, !117
        v86 = asm() -> u64 zero, !118 {
        }
        v87 = const u64 0, !119
        retd v86 v87, !120

        block7():
        v88 = const unit ()
        br block8(v88)

        block8(v89: ()):
        v90 = get_local ptr slice, _method_name, !121
        v91 = load v90
        v92 = const string<19> "available_to_borrow"
        v93 = ptr_to_int v92 to u64, !122
        v94 = get_local ptr { u64, u64 }, __anon_6, !122
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95
        store v93 to v96, !122
        v97 = const u64 1
        v98 = get_elem_ptr v94, ptr u64, v97
        v99 = const u64 19
        store v99 to v98, !122
        v100 = get_local ptr slice, __anon_7, !122
        mem_copy_bytes v100, v94, 16
        v101 = load v100
        v102 = call eq_13(v91, v101), !125
        cbr v102, block9(), block10(), !123

        block9():
        v103 = get_local ptr { u64 }, _buffer, !126
        v104 = call decode_484(v103), !129
        v105 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args___, !130
        store v104 to v105, !130
        v106 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args___, !131
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { u64, ( { b256 } | { b256 } ) }, v107, !132
        v109 = load v108
        v110 = call available_to_borrow_486(v109), !135
        v111 = get_local ptr u256, _result___, !136
        store v110 to v111, !136
        v112 = get_local ptr u256, _result___, !137
        v113 = load v112
        v114 = call encode_488(v113), !140
        v115 = get_local ptr slice, _result____, !141
        store v114 to v115, !141
        v116 = get_local ptr slice, _result____, !142
        v117 = load v116
        v118 = call ptr_11(v117), !145
        v119 = get_local ptr slice, _result____, !146
        v120 = load v119
        v121 = call len_489(v120), !149
        retd v118 v121, !150

        block10():
        v122 = const unit ()
        br block11(v122)

        block11(v123: ()):
        v124 = get_local ptr slice, _method_name, !151
        v125 = load v124
        v126 = const string<10> "balance_of"
        v127 = ptr_to_int v126 to u64, !152
        v128 = get_local ptr { u64, u64 }, __anon_8, !152
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr u64, v129
        store v127 to v130, !152
        v131 = const u64 1
        v132 = get_elem_ptr v128, ptr u64, v131
        v133 = const u64 10
        store v133 to v132, !152
        v134 = get_local ptr slice, __anon_9, !152
        mem_copy_bytes v134, v128, 16
        v135 = load v134
        v136 = call eq_13(v125, v135), !155
        cbr v136, block12(), block13(), !153

        block12():
        v137 = get_local ptr { u64 }, _buffer, !156
        v138 = call decode_490(v137), !159
        v139 = get_local ptr { { b256 } }, args____, !160
        store v138 to v139, !160
        v140 = get_local ptr { { b256 } }, args____, !161
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr { b256 }, v141, !162
        v143 = load v142
        v144 = call balance_of_492(v143), !165
        v145 = get_local ptr u64, _result_____, !166
        store v144 to v145, !166
        v146 = get_local ptr u64, _result_____, !167
        v147 = load v146
        v148 = call encode_495(v147), !170
        v149 = get_local ptr slice, _result______, !171
        store v148 to v149, !171
        v150 = get_local ptr slice, _result______, !172
        v151 = load v150
        v152 = call ptr_11(v151), !175
        v153 = get_local ptr slice, _result______, !176
        v154 = load v153
        v155 = call len_489(v154), !179
        retd v152 v155, !180

        block13():
        v156 = const unit ()
        br block14(v156)

        block14(v157: ()):
        v158 = get_local ptr slice, _method_name, !181
        v159 = load v158
        v160 = const string<14> "buy_collateral"
        v161 = ptr_to_int v160 to u64, !182
        v162 = get_local ptr { u64, u64 }, __anon_10, !182
        v163 = const u64 0
        v164 = get_elem_ptr v162, ptr u64, v163
        store v161 to v164, !182
        v165 = const u64 1
        v166 = get_elem_ptr v162, ptr u64, v165
        v167 = const u64 14
        store v167 to v166, !182
        v168 = get_local ptr slice, __anon_11, !182
        mem_copy_bytes v168, v162, 16
        v169 = load v168
        v170 = call eq_13(v159, v169), !185
        cbr v170, block15(), block16(), !183

        block15():
        v171 = get_local ptr { u64 }, _buffer, !186
        v172 = call decode_496(v171), !189
        v173 = get_local ptr { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, args_____, !190
        store v172 to v173, !190
        v174 = get_local ptr { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, args_____, !191
        v175 = const u64 0
        v176 = get_elem_ptr v174, ptr { b256 }, v175, !192
        v177 = load v176
        v178 = get_local ptr { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, args_____, !193
        v179 = const u64 1
        v180 = get_elem_ptr v178, ptr u64, v179, !194
        v181 = load v180
        v182 = get_local ptr { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, args_____, !195
        v183 = const u64 2
        v184 = get_elem_ptr v182, ptr { u64, ( { b256 } | { b256 } ) }, v183, !196
        v185 = load v184
        v186 = call buy_collateral_498(v177, v181, v185), !199
        v187 = get_local ptr (), _result_______, !200
        store v186 to v187, !200
        v188 = asm() -> u64 zero, !201 {
        }
        v189 = const u64 0, !202
        retd v188 v189, !203

        block16():
        v190 = const unit ()
        br block17(v190)

        block17(v191: ()):
        v192 = get_local ptr slice, _method_name, !204
        v193 = load v192
        v194 = const string<24> "collateral_value_to_sell"
        v195 = ptr_to_int v194 to u64, !205
        v196 = get_local ptr { u64, u64 }, __anon_12, !205
        v197 = const u64 0
        v198 = get_elem_ptr v196, ptr u64, v197
        store v195 to v198, !205
        v199 = const u64 1
        v200 = get_elem_ptr v196, ptr u64, v199
        v201 = const u64 24
        store v201 to v200, !205
        v202 = get_local ptr slice, __anon_13, !205
        mem_copy_bytes v202, v196, 16
        v203 = load v202
        v204 = call eq_13(v193, v203), !208
        cbr v204, block18(), block19(), !206

        block18():
        v205 = get_local ptr { u64 }, _buffer, !209
        v206 = call decode_516(v205), !212
        v207 = get_local ptr { { b256 }, u64 }, args______, !213
        store v206 to v207, !213
        v208 = get_local ptr { { b256 }, u64 }, args______, !214
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr { b256 }, v209, !215
        v211 = load v210
        v212 = get_local ptr { { b256 }, u64 }, args______, !216
        v213 = const u64 1
        v214 = get_elem_ptr v212, ptr u64, v213, !217
        v215 = load v214
        v216 = call collateral_value_to_sell_518(v211, v215), !220
        v217 = get_local ptr u64, _result________, !221
        store v216 to v217, !221
        v218 = get_local ptr u64, _result________, !222
        v219 = load v218
        v220 = call encode_495(v219), !225
        v221 = get_local ptr slice, _result_________, !226
        store v220 to v221, !226
        v222 = get_local ptr slice, _result_________, !227
        v223 = load v222
        v224 = call ptr_11(v223), !230
        v225 = get_local ptr slice, _result_________, !231
        v226 = load v225
        v227 = call len_489(v226), !234
        retd v224 v227, !235

        block19():
        v228 = const unit ()
        br block20(v228)

        block20(v229: ()):
        v230 = get_local ptr slice, _method_name, !236
        v231 = load v230
        v232 = const string<25> "debug_increment_timestamp"
        v233 = ptr_to_int v232 to u64, !237
        v234 = get_local ptr { u64, u64 }, __anon_14, !237
        v235 = const u64 0
        v236 = get_elem_ptr v234, ptr u64, v235
        store v233 to v236, !237
        v237 = const u64 1
        v238 = get_elem_ptr v234, ptr u64, v237
        v239 = const u64 25
        store v239 to v238, !237
        v240 = get_local ptr slice, __anon_15, !237
        mem_copy_bytes v240, v234, 16
        v241 = load v240
        v242 = call eq_13(v231, v241), !240
        cbr v242, block21(), block22(), !238

        block21():
        v243 = call debug_increment_timestamp_519(), !243
        v244 = get_local ptr (), _result__________, !244
        store v243 to v244, !244
        v245 = asm() -> u64 zero, !245 {
        }
        v246 = const u64 0, !246
        retd v245 v246, !247

        block22():
        v247 = const unit ()
        br block23(v247)

        block23(v248: ()):
        v249 = get_local ptr slice, _method_name, !248
        v250 = load v249
        v251 = const string<25> "get_all_totals_collateral"
        v252 = ptr_to_int v251 to u64, !249
        v253 = get_local ptr { u64, u64 }, __anon_16, !249
        v254 = const u64 0
        v255 = get_elem_ptr v253, ptr u64, v254
        store v252 to v255, !249
        v256 = const u64 1
        v257 = get_elem_ptr v253, ptr u64, v256
        v258 = const u64 25
        store v258 to v257, !249
        v259 = get_local ptr slice, __anon_17, !249
        mem_copy_bytes v259, v253, 16
        v260 = load v259
        v261 = call eq_13(v250, v260), !252
        cbr v261, block24(), block25(), !250

        block24():
        v262 = call get_all_totals_collateral_521(), !255
        v263 = get_local ptr { { u64, u64 }, u64 }, _result___________, !256
        store v262 to v263, !256
        v264 = get_local ptr { { u64, u64 }, u64 }, _result___________, !257
        v265 = load v264
        v266 = call encode_533(v265), !260
        v267 = get_local ptr slice, _result____________, !261
        store v266 to v267, !261
        v268 = get_local ptr slice, _result____________, !262
        v269 = load v268
        v270 = call ptr_11(v269), !265
        v271 = get_local ptr slice, _result____________, !266
        v272 = load v271
        v273 = call len_489(v272), !269
        retd v270 v273, !270

        block25():
        v274 = const unit ()
        br block26(v274)

        block26(v275: ()):
        v276 = get_local ptr slice, _method_name, !271
        v277 = load v276
        v278 = const string<23> "get_all_user_collateral"
        v279 = ptr_to_int v278 to u64, !272
        v280 = get_local ptr { u64, u64 }, __anon_18, !272
        v281 = const u64 0
        v282 = get_elem_ptr v280, ptr u64, v281
        store v279 to v282, !272
        v283 = const u64 1
        v284 = get_elem_ptr v280, ptr u64, v283
        v285 = const u64 23
        store v285 to v284, !272
        v286 = get_local ptr slice, __anon_19, !272
        mem_copy_bytes v286, v280, 16
        v287 = load v286
        v288 = call eq_13(v277, v287), !275
        cbr v288, block27(), block28(), !273

        block27():
        v289 = get_local ptr { u64 }, _buffer, !276
        v290 = call decode_484(v289), !279
        v291 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______, !280
        store v290 to v291, !280
        v292 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______, !281
        v293 = const u64 0
        v294 = get_elem_ptr v292, ptr { u64, ( { b256 } | { b256 } ) }, v293, !282
        v295 = load v294
        v296 = call get_all_user_collateral_540(v295), !285
        v297 = get_local ptr { { u64, u64 }, u64 }, _result_____________, !286
        store v296 to v297, !286
        v298 = get_local ptr { { u64, u64 }, u64 }, _result_____________, !287
        v299 = load v298
        v300 = call encode_533(v299), !290
        v301 = get_local ptr slice, _result______________, !291
        store v300 to v301, !291
        v302 = get_local ptr slice, _result______________, !292
        v303 = load v302
        v304 = call ptr_11(v303), !295
        v305 = get_local ptr slice, _result______________, !296
        v306 = load v305
        v307 = call len_489(v306), !299
        retd v304 v307, !300

        block28():
        v308 = const unit ()
        br block29(v308)

        block29(v309: ()):
        v310 = get_local ptr slice, _method_name, !301
        v311 = load v310
        v312 = const string<15> "get_borrow_rate"
        v313 = ptr_to_int v312 to u64, !302
        v314 = get_local ptr { u64, u64 }, __anon_20, !302
        v315 = const u64 0
        v316 = get_elem_ptr v314, ptr u64, v315
        store v313 to v316, !302
        v317 = const u64 1
        v318 = get_elem_ptr v314, ptr u64, v317
        v319 = const u64 15
        store v319 to v318, !302
        v320 = get_local ptr slice, __anon_21, !302
        mem_copy_bytes v320, v314, 16
        v321 = load v320
        v322 = call eq_13(v311, v321), !305
        cbr v322, block30(), block31(), !303

        block30():
        v323 = get_local ptr { u64 }, _buffer, !306
        v324 = call decode_541(v323), !309
        v325 = get_local ptr { u256 }, args________, !310
        store v324 to v325, !310
        v326 = get_local ptr { u256 }, args________, !311
        v327 = const u64 0
        v328 = get_elem_ptr v326, ptr u256, v327, !312
        v329 = load v328
        v330 = call get_borrow_rate_543(v329), !315
        v331 = get_local ptr u256, _result_______________, !316
        store v330 to v331, !316
        v332 = get_local ptr u256, _result_______________, !317
        v333 = load v332
        v334 = call encode_488(v333), !320
        v335 = get_local ptr slice, _result________________, !321
        store v334 to v335, !321
        v336 = get_local ptr slice, _result________________, !322
        v337 = load v336
        v338 = call ptr_11(v337), !325
        v339 = get_local ptr slice, _result________________, !326
        v340 = load v339
        v341 = call len_489(v340), !329
        retd v338 v341, !330

        block31():
        v342 = const unit ()
        br block32(v342)

        block32(v343: ()):
        v344 = get_local ptr slice, _method_name, !331
        v345 = load v344
        v346 = const string<29> "get_collateral_configurations"
        v347 = ptr_to_int v346 to u64, !332
        v348 = get_local ptr { u64, u64 }, __anon_22, !332
        v349 = const u64 0
        v350 = get_elem_ptr v348, ptr u64, v349
        store v347 to v350, !332
        v351 = const u64 1
        v352 = get_elem_ptr v348, ptr u64, v351
        v353 = const u64 29
        store v353 to v352, !332
        v354 = get_local ptr slice, __anon_23, !332
        mem_copy_bytes v354, v348, 16
        v355 = load v354
        v356 = call eq_13(v345, v355), !335
        cbr v356, block33(), block34(), !333

        block33():
        v357 = call get_collateral_configurations_544(), !338
        v358 = get_local ptr { { u64, u64 }, u64 }, _result_________________, !339
        store v357 to v358, !339
        v359 = get_local ptr { { u64, u64 }, u64 }, _result_________________, !340
        v360 = load v359
        v361 = call encode_555(v360), !343
        v362 = get_local ptr slice, _result__________________, !344
        store v361 to v362, !344
        v363 = get_local ptr slice, _result__________________, !345
        v364 = load v363
        v365 = call ptr_11(v364), !348
        v366 = get_local ptr slice, _result__________________, !349
        v367 = load v366
        v368 = call len_489(v367), !352
        retd v365 v368, !353

        block34():
        v369 = const unit ()
        br block35(v369)

        block35(v370: ()):
        v371 = get_local ptr slice, _method_name, !354
        v372 = load v371
        v373 = const string<23> "get_collateral_reserves"
        v374 = ptr_to_int v373 to u64, !355
        v375 = get_local ptr { u64, u64 }, __anon_24, !355
        v376 = const u64 0
        v377 = get_elem_ptr v375, ptr u64, v376
        store v374 to v377, !355
        v378 = const u64 1
        v379 = get_elem_ptr v375, ptr u64, v378
        v380 = const u64 23
        store v380 to v379, !355
        v381 = get_local ptr slice, __anon_25, !355
        mem_copy_bytes v381, v375, 16
        v382 = load v381
        v383 = call eq_13(v372, v382), !358
        cbr v383, block36(), block37(), !356

        block36():
        v384 = get_local ptr { u64 }, _buffer, !359
        v385 = call decode_490(v384), !362
        v386 = get_local ptr { { b256 } }, args_________, !363
        store v385 to v386, !363
        v387 = get_local ptr { { b256 } }, args_________, !364
        v388 = const u64 0
        v389 = get_elem_ptr v387, ptr { b256 }, v388, !365
        v390 = load v389
        v391 = call get_collateral_reserves_559(v390), !368
        v392 = get_local ptr { u256 }, _result___________________, !369
        store v391 to v392, !369
        v393 = get_local ptr { u256 }, _result___________________, !370
        v394 = load v393
        v395 = call encode_560(v394), !373
        v396 = get_local ptr slice, _result____________________, !374
        store v395 to v396, !374
        v397 = get_local ptr slice, _result____________________, !375
        v398 = load v397
        v399 = call ptr_11(v398), !378
        v400 = get_local ptr slice, _result____________________, !379
        v401 = load v400
        v402 = call len_489(v401), !382
        retd v399 v402, !383

        block37():
        v403 = const unit ()
        br block38(v403)

        block38(v404: ()):
        v405 = get_local ptr slice, _method_name, !384
        v406 = load v405
        v407 = const string<17> "get_market_basics"
        v408 = ptr_to_int v407 to u64, !385
        v409 = get_local ptr { u64, u64 }, __anon_26, !385
        v410 = const u64 0
        v411 = get_elem_ptr v409, ptr u64, v410
        store v408 to v411, !385
        v412 = const u64 1
        v413 = get_elem_ptr v409, ptr u64, v412
        v414 = const u64 17
        store v414 to v413, !385
        v415 = get_local ptr slice, __anon_27, !385
        mem_copy_bytes v415, v409, 16
        v416 = load v415
        v417 = call eq_13(v406, v416), !388
        cbr v417, block39(), block40(), !386

        block39():
        v418 = call get_market_basics_561(), !391
        v419 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, _result_____________________, !392
        store v418 to v419, !392
        v420 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, _result_____________________, !393
        v421 = load v420
        v422 = call encode_562(v421), !396
        v423 = get_local ptr slice, _result______________________, !397
        store v422 to v423, !397
        v424 = get_local ptr slice, _result______________________, !398
        v425 = load v424
        v426 = call ptr_11(v425), !401
        v427 = get_local ptr slice, _result______________________, !402
        v428 = load v427
        v429 = call len_489(v428), !405
        retd v426 v429, !406

        block40():
        v430 = const unit ()
        br block41(v430)

        block41(v431: ()):
        v432 = get_local ptr slice, _method_name, !407
        v433 = load v432
        v434 = const string<31> "get_market_basics_with_interest"
        v435 = ptr_to_int v434 to u64, !408
        v436 = get_local ptr { u64, u64 }, __anon_28, !408
        v437 = const u64 0
        v438 = get_elem_ptr v436, ptr u64, v437
        store v435 to v438, !408
        v439 = const u64 1
        v440 = get_elem_ptr v436, ptr u64, v439
        v441 = const u64 31
        store v441 to v440, !408
        v442 = get_local ptr slice, __anon_29, !408
        mem_copy_bytes v442, v436, 16
        v443 = load v442
        v444 = call eq_13(v433, v443), !411
        cbr v444, block42(), block43(), !409

        block42():
        v445 = call get_market_basics_with_interest_563(), !414
        v446 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, _result_______________________, !415
        store v445 to v446, !415
        v447 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, _result_______________________, !416
        v448 = load v447
        v449 = call encode_562(v448), !419
        v450 = get_local ptr slice, _result________________________, !420
        store v449 to v450, !420
        v451 = get_local ptr slice, _result________________________, !421
        v452 = load v451
        v453 = call ptr_11(v452), !424
        v454 = get_local ptr slice, _result________________________, !425
        v455 = load v454
        v456 = call len_489(v455), !428
        retd v453 v456, !429

        block43():
        v457 = const unit ()
        br block44(v457)

        block44(v458: ()):
        v459 = get_local ptr slice, _method_name, !430
        v460 = load v459
        v461 = const string<24> "get_market_configuration"
        v462 = ptr_to_int v461 to u64, !431
        v463 = get_local ptr { u64, u64 }, __anon_30, !431
        v464 = const u64 0
        v465 = get_elem_ptr v463, ptr u64, v464
        store v462 to v465, !431
        v466 = const u64 1
        v467 = get_elem_ptr v463, ptr u64, v466
        v468 = const u64 24
        store v468 to v467, !431
        v469 = get_local ptr slice, __anon_31, !431
        mem_copy_bytes v469, v463, 16
        v470 = load v469
        v471 = call eq_13(v460, v470), !434
        cbr v471, block45(), block46(), !432

        block45():
        v472 = call get_market_configuration_564(), !437
        v473 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, _result_________________________, !438
        store v472 to v473, !438
        v474 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, _result_________________________, !439
        v475 = load v474
        v476 = call encode_565(v475), !442
        v477 = get_local ptr slice, _result__________________________, !443
        store v476 to v477, !443
        v478 = get_local ptr slice, _result__________________________, !444
        v479 = load v478
        v480 = call ptr_11(v479), !447
        v481 = get_local ptr slice, _result__________________________, !448
        v482 = load v481
        v483 = call len_489(v482), !451
        retd v480 v483, !452

        block46():
        v484 = const unit ()
        br block47(v484)

        block47(v485: ()):
        v486 = get_local ptr slice, _method_name, !453
        v487 = load v486
        v488 = const string<23> "get_pause_configuration"
        v489 = ptr_to_int v488 to u64, !454
        v490 = get_local ptr { u64, u64 }, __anon_32, !454
        v491 = const u64 0
        v492 = get_elem_ptr v490, ptr u64, v491
        store v489 to v492, !454
        v493 = const u64 1
        v494 = get_elem_ptr v490, ptr u64, v493
        v495 = const u64 23
        store v495 to v494, !454
        v496 = get_local ptr slice, __anon_33, !454
        mem_copy_bytes v496, v490, 16
        v497 = load v496
        v498 = call eq_13(v487, v497), !457
        cbr v498, block48(), block49(), !455

        block48():
        v499 = call get_pause_configuration_566(), !460
        v500 = get_local ptr { bool, bool, bool, bool }, _result___________________________, !461
        store v499 to v500, !461
        v501 = get_local ptr { bool, bool, bool, bool }, _result___________________________, !462
        v502 = load v501
        v503 = call encode_571(v502), !465
        v504 = get_local ptr slice, _result____________________________, !466
        store v503 to v504, !466
        v505 = get_local ptr slice, _result____________________________, !467
        v506 = load v505
        v507 = call ptr_11(v506), !470
        v508 = get_local ptr slice, _result____________________________, !471
        v509 = load v508
        v510 = call len_489(v509), !474
        retd v507 v510, !475

        block49():
        v511 = const unit ()
        br block50(v511)

        block50(v512: ()):
        v513 = get_local ptr slice, _method_name, !476
        v514 = load v513
        v515 = const string<9> "get_price"
        v516 = ptr_to_int v515 to u64, !477
        v517 = get_local ptr { u64, u64 }, __anon_34, !477
        v518 = const u64 0
        v519 = get_elem_ptr v517, ptr u64, v518
        store v516 to v519, !477
        v520 = const u64 1
        v521 = get_elem_ptr v517, ptr u64, v520
        v522 = const u64 9
        store v522 to v521, !477
        v523 = get_local ptr slice, __anon_35, !477
        mem_copy_bytes v523, v517, 16
        v524 = load v523
        v525 = call eq_13(v514, v524), !480
        cbr v525, block51(), block52(), !478

        block51():
        v526 = get_local ptr { u64 }, _buffer, !481
        v527 = call decode_572(v526), !484
        v528 = get_local ptr { b256 }, args__________, !485
        store v527 to v528, !485
        v529 = get_local ptr { b256 }, args__________, !486
        v530 = const u64 0
        v531 = get_elem_ptr v529, ptr b256, v530, !487
        v532 = load v531
        v533 = call get_price_574(v532), !490
        v534 = get_local ptr { u64, u64, u64, u64 }, _result_____________________________, !491
        store v533 to v534, !491
        v535 = get_local ptr { u64, u64, u64, u64 }, _result_____________________________, !492
        v536 = load v535
        v537 = call encode_575(v536), !495
        v538 = get_local ptr slice, _result______________________________, !496
        store v537 to v538, !496
        v539 = get_local ptr slice, _result______________________________, !497
        v540 = load v539
        v541 = call ptr_11(v540), !500
        v542 = get_local ptr slice, _result______________________________, !501
        v543 = load v542
        v544 = call len_489(v543), !504
        retd v541 v544, !505

        block52():
        v545 = const unit ()
        br block53(v545)

        block53(v546: ()):
        v547 = get_local ptr slice, _method_name, !506
        v548 = load v547
        v549 = const string<20> "get_pyth_contract_id"
        v550 = ptr_to_int v549 to u64, !507
        v551 = get_local ptr { u64, u64 }, __anon_36, !507
        v552 = const u64 0
        v553 = get_elem_ptr v551, ptr u64, v552
        store v550 to v553, !507
        v554 = const u64 1
        v555 = get_elem_ptr v551, ptr u64, v554
        v556 = const u64 20
        store v556 to v555, !507
        v557 = get_local ptr slice, __anon_37, !507
        mem_copy_bytes v557, v551, 16
        v558 = load v557
        v559 = call eq_13(v548, v558), !510
        cbr v559, block54(), block55(), !508

        block54():
        v560 = call get_pyth_contract_id_577(), !513
        v561 = get_local ptr { b256 }, _result_______________________________, !514
        store v560 to v561, !514
        v562 = get_local ptr { b256 }, _result_______________________________, !515
        v563 = load v562
        v564 = call encode_578(v563), !518
        v565 = get_local ptr slice, _result________________________________, !519
        store v564 to v565, !519
        v566 = get_local ptr slice, _result________________________________, !520
        v567 = load v566
        v568 = call ptr_11(v567), !523
        v569 = get_local ptr slice, _result________________________________, !524
        v570 = load v569
        v571 = call len_489(v570), !527
        retd v568 v571, !528

        block55():
        v572 = const unit ()
        br block56(v572)

        block56(v573: ()):
        v574 = get_local ptr slice, _method_name, !529
        v575 = load v574
        v576 = const string<12> "get_reserves"
        v577 = ptr_to_int v576 to u64, !530
        v578 = get_local ptr { u64, u64 }, __anon_38, !530
        v579 = const u64 0
        v580 = get_elem_ptr v578, ptr u64, v579
        store v577 to v580, !530
        v581 = const u64 1
        v582 = get_elem_ptr v578, ptr u64, v581
        v583 = const u64 12
        store v583 to v582, !530
        v584 = get_local ptr slice, __anon_39, !530
        mem_copy_bytes v584, v578, 16
        v585 = load v584
        v586 = call eq_13(v575, v585), !533
        cbr v586, block57(), block58(), !531

        block57():
        v587 = call get_reserves_579(), !536
        v588 = get_local ptr { u256 }, _result_________________________________, !537
        store v587 to v588, !537
        v589 = get_local ptr { u256 }, _result_________________________________, !538
        v590 = load v589
        v591 = call encode_560(v590), !541
        v592 = get_local ptr slice, _result__________________________________, !542
        store v591 to v592, !542
        v593 = get_local ptr slice, _result__________________________________, !543
        v594 = load v593
        v595 = call ptr_11(v594), !546
        v596 = get_local ptr slice, _result__________________________________, !547
        v597 = load v596
        v598 = call len_489(v597), !550
        retd v595 v598, !551

        block58():
        v599 = const unit ()
        br block59(v599)

        block59(v600: ()):
        v601 = get_local ptr slice, _method_name, !552
        v602 = load v601
        v603 = const string<15> "get_supply_rate"
        v604 = ptr_to_int v603 to u64, !553
        v605 = get_local ptr { u64, u64 }, __anon_40, !553
        v606 = const u64 0
        v607 = get_elem_ptr v605, ptr u64, v606
        store v604 to v607, !553
        v608 = const u64 1
        v609 = get_elem_ptr v605, ptr u64, v608
        v610 = const u64 15
        store v610 to v609, !553
        v611 = get_local ptr slice, __anon_41, !553
        mem_copy_bytes v611, v605, 16
        v612 = load v611
        v613 = call eq_13(v602, v612), !556
        cbr v613, block60(), block61(), !554

        block60():
        v614 = get_local ptr { u64 }, _buffer, !557
        v615 = call decode_541(v614), !560
        v616 = get_local ptr { u256 }, args___________, !561
        store v615 to v616, !561
        v617 = get_local ptr { u256 }, args___________, !562
        v618 = const u64 0
        v619 = get_elem_ptr v617, ptr u256, v618, !563
        v620 = load v619
        v621 = call get_supply_rate_580(v620), !566
        v622 = get_local ptr u256, _result___________________________________, !567
        store v621 to v622, !567
        v623 = get_local ptr u256, _result___________________________________, !568
        v624 = load v623
        v625 = call encode_488(v624), !571
        v626 = get_local ptr slice, _result____________________________________, !572
        store v625 to v626, !572
        v627 = get_local ptr slice, _result____________________________________, !573
        v628 = load v627
        v629 = call ptr_11(v628), !576
        v630 = get_local ptr slice, _result____________________________________, !577
        v631 = load v630
        v632 = call len_489(v631), !580
        retd v629 v632, !581

        block61():
        v633 = const unit ()
        br block62(v633)

        block62(v634: ()):
        v635 = get_local ptr slice, _method_name, !582
        v636 = load v635
        v637 = const string<30> "get_user_balance_with_interest"
        v638 = ptr_to_int v637 to u64, !583
        v639 = get_local ptr { u64, u64 }, __anon_42, !583
        v640 = const u64 0
        v641 = get_elem_ptr v639, ptr u64, v640
        store v638 to v641, !583
        v642 = const u64 1
        v643 = get_elem_ptr v639, ptr u64, v642
        v644 = const u64 30
        store v644 to v643, !583
        v645 = get_local ptr slice, __anon_43, !583
        mem_copy_bytes v645, v639, 16
        v646 = load v645
        v647 = call eq_13(v636, v646), !586
        cbr v647, block63(), block64(), !584

        block63():
        v648 = get_local ptr { u64 }, _buffer, !587
        v649 = call decode_484(v648), !590
        v650 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args____________, !591
        store v649 to v650, !591
        v651 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args____________, !592
        v652 = const u64 0
        v653 = get_elem_ptr v651, ptr { u64, ( { b256 } | { b256 } ) }, v652, !593
        v654 = load v653
        v655 = call get_user_balance_with_interest_581(v654), !596
        v656 = get_local ptr { u256 }, _result_____________________________________, !597
        store v655 to v656, !597
        v657 = get_local ptr { u256 }, _result_____________________________________, !598
        v658 = load v657
        v659 = call encode_560(v658), !601
        v660 = get_local ptr slice, _result______________________________________, !602
        store v659 to v660, !602
        v661 = get_local ptr slice, _result______________________________________, !603
        v662 = load v661
        v663 = call ptr_11(v662), !606
        v664 = get_local ptr slice, _result______________________________________, !607
        v665 = load v664
        v666 = call len_489(v665), !610
        retd v663 v666, !611

        block64():
        v667 = const unit ()
        br block65(v667)

        block65(v668: ()):
        v669 = get_local ptr slice, _method_name, !612
        v670 = load v669
        v671 = const string<14> "get_user_basic"
        v672 = ptr_to_int v671 to u64, !613
        v673 = get_local ptr { u64, u64 }, __anon_44, !613
        v674 = const u64 0
        v675 = get_elem_ptr v673, ptr u64, v674
        store v672 to v675, !613
        v676 = const u64 1
        v677 = get_elem_ptr v673, ptr u64, v676
        v678 = const u64 14
        store v678 to v677, !613
        v679 = get_local ptr slice, __anon_45, !613
        mem_copy_bytes v679, v673, 16
        v680 = load v679
        v681 = call eq_13(v670, v680), !616
        cbr v681, block66(), block67(), !614

        block66():
        v682 = get_local ptr { u64 }, _buffer, !617
        v683 = call decode_484(v682), !620
        v684 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_____________, !621
        store v683 to v684, !621
        v685 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_____________, !622
        v686 = const u64 0
        v687 = get_elem_ptr v685, ptr { u64, ( { b256 } | { b256 } ) }, v686, !623
        v688 = load v687
        v689 = call get_user_basic_583(v688), !626
        v690 = get_local ptr { { u256 }, u256, u256 }, _result_______________________________________, !627
        store v689 to v690, !627
        v691 = get_local ptr { { u256 }, u256, u256 }, _result_______________________________________, !628
        v692 = load v691
        v693 = call encode_584(v692), !631
        v694 = get_local ptr slice, _result________________________________________, !632
        store v693 to v694, !632
        v695 = get_local ptr slice, _result________________________________________, !633
        v696 = load v695
        v697 = call ptr_11(v696), !636
        v698 = get_local ptr slice, _result________________________________________, !637
        v699 = load v698
        v700 = call len_489(v699), !640
        retd v697 v700, !641

        block67():
        v701 = const unit ()
        br block68(v701)

        block68(v702: ()):
        v703 = get_local ptr slice, _method_name, !642
        v704 = load v703
        v705 = const string<19> "get_user_collateral"
        v706 = ptr_to_int v705 to u64, !643
        v707 = get_local ptr { u64, u64 }, __anon_46, !643
        v708 = const u64 0
        v709 = get_elem_ptr v707, ptr u64, v708
        store v706 to v709, !643
        v710 = const u64 1
        v711 = get_elem_ptr v707, ptr u64, v710
        v712 = const u64 19
        store v712 to v711, !643
        v713 = get_local ptr slice, __anon_47, !643
        mem_copy_bytes v713, v707, 16
        v714 = load v713
        v715 = call eq_13(v704, v714), !646
        cbr v715, block69(), block70(), !644

        block69():
        v716 = get_local ptr { u64 }, _buffer, !647
        v717 = call decode_585(v716), !650
        v718 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, args______________, !651
        store v717 to v718, !651
        v719 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, args______________, !652
        v720 = const u64 0
        v721 = get_elem_ptr v719, ptr { u64, ( { b256 } | { b256 } ) }, v720, !653
        v722 = load v721
        v723 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, args______________, !654
        v724 = const u64 1
        v725 = get_elem_ptr v723, ptr { b256 }, v724, !655
        v726 = load v725
        v727 = call get_user_collateral_587(v722, v726), !658
        v728 = get_local ptr u64, _result_________________________________________, !659
        store v727 to v728, !659
        v729 = get_local ptr u64, _result_________________________________________, !660
        v730 = load v729
        v731 = call encode_495(v730), !663
        v732 = get_local ptr slice, _result__________________________________________, !664
        store v731 to v732, !664
        v733 = get_local ptr slice, _result__________________________________________, !665
        v734 = load v733
        v735 = call ptr_11(v734), !668
        v736 = get_local ptr slice, _result__________________________________________, !669
        v737 = load v736
        v738 = call len_489(v737), !672
        retd v735 v738, !673

        block70():
        v739 = const unit ()
        br block71(v739)

        block71(v740: ()):
        v741 = get_local ptr slice, _method_name, !674
        v742 = load v741
        v743 = const string<22> "get_user_supply_borrow"
        v744 = ptr_to_int v743 to u64, !675
        v745 = get_local ptr { u64, u64 }, __anon_48, !675
        v746 = const u64 0
        v747 = get_elem_ptr v745, ptr u64, v746
        store v744 to v747, !675
        v748 = const u64 1
        v749 = get_elem_ptr v745, ptr u64, v748
        v750 = const u64 22
        store v750 to v749, !675
        v751 = get_local ptr slice, __anon_49, !675
        mem_copy_bytes v751, v745, 16
        v752 = load v751
        v753 = call eq_13(v742, v752), !678
        cbr v753, block72(), block73(), !676

        block72():
        v754 = get_local ptr { u64 }, _buffer, !679
        v755 = call decode_484(v754), !682
        v756 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______________, !683
        store v755 to v756, !683
        v757 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______________, !684
        v758 = const u64 0
        v759 = get_elem_ptr v757, ptr { u64, ( { b256 } | { b256 } ) }, v758, !685
        v760 = load v759
        v761 = call get_user_supply_borrow_588(v760), !688
        v762 = get_local ptr { u256, u256 }, _result___________________________________________, !689
        store v761 to v762, !689
        v763 = get_local ptr { u256, u256 }, _result___________________________________________, !690
        v764 = load v763
        v765 = call encode_589(v764), !693
        v766 = get_local ptr slice, _result____________________________________________, !694
        store v765 to v766, !694
        v767 = get_local ptr slice, _result____________________________________________, !695
        v768 = load v767
        v769 = call ptr_11(v768), !698
        v770 = get_local ptr slice, _result____________________________________________, !699
        v771 = load v770
        v772 = call len_489(v771), !702
        retd v769 v772, !703

        block73():
        v773 = const unit ()
        br block74(v773)

        block74(v774: ()):
        v775 = get_local ptr slice, _method_name, !704
        v776 = load v775
        v777 = const string<15> "get_utilization"
        v778 = ptr_to_int v777 to u64, !705
        v779 = get_local ptr { u64, u64 }, __anon_50, !705
        v780 = const u64 0
        v781 = get_elem_ptr v779, ptr u64, v780
        store v778 to v781, !705
        v782 = const u64 1
        v783 = get_elem_ptr v779, ptr u64, v782
        v784 = const u64 15
        store v784 to v783, !705
        v785 = get_local ptr slice, __anon_51, !705
        mem_copy_bytes v785, v779, 16
        v786 = load v785
        v787 = call eq_13(v776, v786), !708
        cbr v787, block75(), block76(), !706

        block75():
        v788 = call get_utilization_591(), !711
        v789 = get_local ptr u256, _result_____________________________________________, !712
        store v788 to v789, !712
        v790 = get_local ptr u256, _result_____________________________________________, !713
        v791 = load v790
        v792 = call encode_488(v791), !716
        v793 = get_local ptr slice, _result______________________________________________, !717
        store v792 to v793, !717
        v794 = get_local ptr slice, _result______________________________________________, !718
        v795 = load v794
        v796 = call ptr_11(v795), !721
        v797 = get_local ptr slice, _result______________________________________________, !722
        v798 = load v797
        v799 = call len_489(v798), !725
        retd v796 v799, !726

        block76():
        v800 = const unit ()
        br block77(v800)

        block77(v801: ()):
        v802 = get_local ptr slice, _method_name, !727
        v803 = load v802
        v804 = const string<11> "get_version"
        v805 = ptr_to_int v804 to u64, !728
        v806 = get_local ptr { u64, u64 }, __anon_52, !728
        v807 = const u64 0
        v808 = get_elem_ptr v806, ptr u64, v807
        store v805 to v808, !728
        v809 = const u64 1
        v810 = get_elem_ptr v806, ptr u64, v809
        v811 = const u64 11
        store v811 to v810, !728
        v812 = get_local ptr slice, __anon_53, !728
        mem_copy_bytes v812, v806, 16
        v813 = load v812
        v814 = call eq_13(v803, v813), !731
        cbr v814, block78(), block79(), !729

        block78():
        v815 = call get_version_592(), !734
        v816 = get_local ptr u8, _result_______________________________________________, !735
        store v815 to v816, !735
        v817 = get_local ptr u8, _result_______________________________________________, !736
        v818 = load v817
        v819 = call encode_593(v818), !739
        v820 = get_local ptr slice, _result________________________________________________, !740
        store v819 to v820, !740
        v821 = get_local ptr slice, _result________________________________________________, !741
        v822 = load v821
        v823 = call ptr_11(v822), !744
        v824 = get_local ptr slice, _result________________________________________________, !745
        v825 = load v824
        v826 = call len_489(v825), !748
        retd v823 v826, !749

        block79():
        v827 = const unit ()
        br block80(v827)

        block80(v828: ()):
        v829 = get_local ptr slice, _method_name, !750
        v830 = load v829
        v831 = const string<15> "is_liquidatable"
        v832 = ptr_to_int v831 to u64, !751
        v833 = get_local ptr { u64, u64 }, __anon_54, !751
        v834 = const u64 0
        v835 = get_elem_ptr v833, ptr u64, v834
        store v832 to v835, !751
        v836 = const u64 1
        v837 = get_elem_ptr v833, ptr u64, v836
        v838 = const u64 15
        store v838 to v837, !751
        v839 = get_local ptr slice, __anon_55, !751
        mem_copy_bytes v839, v833, 16
        v840 = load v839
        v841 = call eq_13(v830, v840), !754
        cbr v841, block81(), block82(), !752

        block81():
        v842 = get_local ptr { u64 }, _buffer, !755
        v843 = call decode_484(v842), !758
        v844 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args________________, !759
        store v843 to v844, !759
        v845 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args________________, !760
        v846 = const u64 0
        v847 = get_elem_ptr v845, ptr { u64, ( { b256 } | { b256 } ) }, v846, !761
        v848 = load v847
        v849 = call is_liquidatable_595(v848), !764
        v850 = get_local ptr bool, _result_________________________________________________, !765
        store v849 to v850, !765
        v851 = get_local ptr bool, _result_________________________________________________, !766
        v852 = load v851
        v853 = call encode_596(v852), !769
        v854 = get_local ptr slice, _result__________________________________________________, !770
        store v853 to v854, !770
        v855 = get_local ptr slice, _result__________________________________________________, !771
        v856 = load v855
        v857 = call ptr_11(v856), !774
        v858 = get_local ptr slice, _result__________________________________________________, !775
        v859 = load v858
        v860 = call len_489(v859), !778
        retd v857 v860, !779

        block82():
        v861 = const unit ()
        br block83(v861)

        block83(v862: ()):
        v863 = get_local ptr slice, _method_name, !780
        v864 = load v863
        v865 = const string<5> "pause"
        v866 = ptr_to_int v865 to u64, !781
        v867 = get_local ptr { u64, u64 }, __anon_56, !781
        v868 = const u64 0
        v869 = get_elem_ptr v867, ptr u64, v868
        store v866 to v869, !781
        v870 = const u64 1
        v871 = get_elem_ptr v867, ptr u64, v870
        v872 = const u64 5
        store v872 to v871, !781
        v873 = get_local ptr slice, __anon_57, !781
        mem_copy_bytes v873, v867, 16
        v874 = load v873
        v875 = call eq_13(v864, v874), !784
        cbr v875, block84(), block85(), !782

        block84():
        v876 = get_local ptr { u64 }, _buffer, !785
        v877 = call decode_597(v876), !788
        v878 = get_local ptr { { bool, bool, bool, bool } }, args_________________, !789
        store v877 to v878, !789
        v879 = get_local ptr { { bool, bool, bool, bool } }, args_________________, !790
        v880 = const u64 0
        v881 = get_elem_ptr v879, ptr { bool, bool, bool, bool }, v880, !791
        v882 = load v881
        v883 = call pause_600(v882), !794
        v884 = get_local ptr (), _result___________________________________________________, !795
        store v883 to v884, !795
        v885 = asm() -> u64 zero, !796 {
        }
        v886 = const u64 0, !797
        retd v885 v886, !798

        block85():
        v887 = const unit ()
        br block86(v887)

        block86(v888: ()):
        v889 = get_local ptr slice, _method_name, !799
        v890 = load v889
        v891 = const string<22> "pause_collateral_asset"
        v892 = ptr_to_int v891 to u64, !800
        v893 = get_local ptr { u64, u64 }, __anon_58, !800
        v894 = const u64 0
        v895 = get_elem_ptr v893, ptr u64, v894
        store v892 to v895, !800
        v896 = const u64 1
        v897 = get_elem_ptr v893, ptr u64, v896
        v898 = const u64 22
        store v898 to v897, !800
        v899 = get_local ptr slice, __anon_59, !800
        mem_copy_bytes v899, v893, 16
        v900 = load v899
        v901 = call eq_13(v890, v900), !803
        cbr v901, block87(), block88(), !801

        block87():
        v902 = get_local ptr { u64 }, _buffer, !804
        v903 = call decode_490(v902), !807
        v904 = get_local ptr { { b256 } }, args__________________, !808
        store v903 to v904, !808
        v905 = get_local ptr { { b256 } }, args__________________, !809
        v906 = const u64 0
        v907 = get_elem_ptr v905, ptr { b256 }, v906, !810
        v908 = load v907
        v909 = call pause_collateral_asset_601(v908), !813
        v910 = get_local ptr (), _result____________________________________________________, !814
        store v909 to v910, !814
        v911 = asm() -> u64 zero, !815 {
        }
        v912 = const u64 0, !816
        retd v911 v912, !817

        block88():
        v913 = const unit ()
        br block89(v913)

        block89(v914: ()):
        v915 = get_local ptr slice, _method_name, !818
        v916 = load v915
        v917 = const string<16> "quote_collateral"
        v918 = ptr_to_int v917 to u64, !819
        v919 = get_local ptr { u64, u64 }, __anon_60, !819
        v920 = const u64 0
        v921 = get_elem_ptr v919, ptr u64, v920
        store v918 to v921, !819
        v922 = const u64 1
        v923 = get_elem_ptr v919, ptr u64, v922
        v924 = const u64 16
        store v924 to v923, !819
        v925 = get_local ptr slice, __anon_61, !819
        mem_copy_bytes v925, v919, 16
        v926 = load v925
        v927 = call eq_13(v916, v926), !822
        cbr v927, block90(), block91(), !820

        block90():
        v928 = get_local ptr { u64 }, _buffer, !823
        v929 = call decode_516(v928), !826
        v930 = get_local ptr { { b256 }, u64 }, args___________________, !827
        store v929 to v930, !827
        v931 = get_local ptr { { b256 }, u64 }, args___________________, !828
        v932 = const u64 0
        v933 = get_elem_ptr v931, ptr { b256 }, v932, !829
        v934 = load v933
        v935 = get_local ptr { { b256 }, u64 }, args___________________, !830
        v936 = const u64 1
        v937 = get_elem_ptr v935, ptr u64, v936, !831
        v938 = load v937
        v939 = call quote_collateral_605(v934, v938), !834
        v940 = get_local ptr u64, _result_____________________________________________________, !835
        store v939 to v940, !835
        v941 = get_local ptr u64, _result_____________________________________________________, !836
        v942 = load v941
        v943 = call encode_495(v942), !839
        v944 = get_local ptr slice, _result______________________________________________________, !840
        store v943 to v944, !840
        v945 = get_local ptr slice, _result______________________________________________________, !841
        v946 = load v945
        v947 = call ptr_11(v946), !844
        v948 = get_local ptr slice, _result______________________________________________________, !845
        v949 = load v948
        v950 = call len_489(v949), !848
        retd v947 v950, !849

        block91():
        v951 = const unit ()
        br block92(v951)

        block92(v952: ()):
        v953 = get_local ptr slice, _method_name, !850
        v954 = load v953
        v955 = const string<18> "renounce_ownership"
        v956 = ptr_to_int v955 to u64, !851
        v957 = get_local ptr { u64, u64 }, __anon_62, !851
        v958 = const u64 0
        v959 = get_elem_ptr v957, ptr u64, v958
        store v956 to v959, !851
        v960 = const u64 1
        v961 = get_elem_ptr v957, ptr u64, v960
        v962 = const u64 18
        store v962 to v961, !851
        v963 = get_local ptr slice, __anon_63, !851
        mem_copy_bytes v963, v957, 16
        v964 = load v963
        v965 = call eq_13(v954, v964), !854
        cbr v965, block93(), block94(), !852

        block93():
        v966 = call renounce_ownership_606(), !857
        v967 = get_local ptr (), _result_______________________________________________________, !858
        store v966 to v967, !858
        v968 = asm() -> u64 zero, !859 {
        }
        v969 = const u64 0, !860
        retd v968 v969, !861

        block94():
        v970 = const unit ()
        br block95(v970)

        block95(v971: ()):
        v972 = get_local ptr slice, _method_name, !862
        v973 = load v972
        v974 = const string<23> "resume_collateral_asset"
        v975 = ptr_to_int v974 to u64, !863
        v976 = get_local ptr { u64, u64 }, __anon_64, !863
        v977 = const u64 0
        v978 = get_elem_ptr v976, ptr u64, v977
        store v975 to v978, !863
        v979 = const u64 1
        v980 = get_elem_ptr v976, ptr u64, v979
        v981 = const u64 23
        store v981 to v980, !863
        v982 = get_local ptr slice, __anon_65, !863
        mem_copy_bytes v982, v976, 16
        v983 = load v982
        v984 = call eq_13(v973, v983), !866
        cbr v984, block96(), block97(), !864

        block96():
        v985 = get_local ptr { u64 }, _buffer, !867
        v986 = call decode_490(v985), !870
        v987 = get_local ptr { { b256 } }, args____________________, !871
        store v986 to v987, !871
        v988 = get_local ptr { { b256 } }, args____________________, !872
        v989 = const u64 0
        v990 = get_elem_ptr v988, ptr { b256 }, v989, !873
        v991 = load v990
        v992 = call resume_collateral_asset_611(v991), !876
        v993 = get_local ptr (), _result________________________________________________________, !877
        store v992 to v993, !877
        v994 = asm() -> u64 zero, !878 {
        }
        v995 = const u64 0, !879
        retd v994 v995, !880

        block97():
        v996 = const unit ()
        br block98(v996)

        block98(v997: ()):
        v998 = get_local ptr slice, _method_name, !881
        v999 = load v998
        v1000 = const string<20> "set_pyth_contract_id"
        v1001 = ptr_to_int v1000 to u64, !882
        v1002 = get_local ptr { u64, u64 }, __anon_66, !882
        v1003 = const u64 0
        v1004 = get_elem_ptr v1002, ptr u64, v1003
        store v1001 to v1004, !882
        v1005 = const u64 1
        v1006 = get_elem_ptr v1002, ptr u64, v1005
        v1007 = const u64 20
        store v1007 to v1006, !882
        v1008 = get_local ptr slice, __anon_67, !882
        mem_copy_bytes v1008, v1002, 16
        v1009 = load v1008
        v1010 = call eq_13(v999, v1009), !885
        cbr v1010, block99(), block100(), !883

        block99():
        v1011 = get_local ptr { u64 }, _buffer, !886
        v1012 = call decode_615(v1011), !889
        v1013 = get_local ptr { { b256 } }, args_____________________, !890
        store v1012 to v1013, !890
        v1014 = get_local ptr { { b256 } }, args_____________________, !891
        v1015 = const u64 0
        v1016 = get_elem_ptr v1014, ptr { b256 }, v1015, !892
        v1017 = load v1016
        v1018 = call set_pyth_contract_id_617(v1017), !895
        v1019 = get_local ptr (), _result_________________________________________________________, !896
        store v1018 to v1019, !896
        v1020 = asm() -> u64 zero, !897 {
        }
        v1021 = const u64 0, !898
        retd v1020 v1021, !899

        block100():
        v1022 = const unit ()
        br block101(v1022)

        block101(v1023: ()):
        v1024 = get_local ptr slice, _method_name, !900
        v1025 = load v1024
        v1026 = const string<11> "supply_base"
        v1027 = ptr_to_int v1026 to u64, !901
        v1028 = get_local ptr { u64, u64 }, __anon_68, !901
        v1029 = const u64 0
        v1030 = get_elem_ptr v1028, ptr u64, v1029
        store v1027 to v1030, !901
        v1031 = const u64 1
        v1032 = get_elem_ptr v1028, ptr u64, v1031
        v1033 = const u64 11
        store v1033 to v1032, !901
        v1034 = get_local ptr slice, __anon_69, !901
        mem_copy_bytes v1034, v1028, 16
        v1035 = load v1034
        v1036 = call eq_13(v1025, v1035), !904
        cbr v1036, block102(), block103(), !902

        block102():
        v1037 = call supply_base_624(), !907
        v1038 = get_local ptr (), _result__________________________________________________________, !908
        store v1037 to v1038, !908
        v1039 = asm() -> u64 zero, !909 {
        }
        v1040 = const u64 0, !910
        retd v1039 v1040, !911

        block103():
        v1041 = const unit ()
        br block104(v1041)

        block104(v1042: ()):
        v1043 = get_local ptr slice, _method_name, !912
        v1044 = load v1043
        v1045 = const string<17> "supply_collateral"
        v1046 = ptr_to_int v1045 to u64, !913
        v1047 = get_local ptr { u64, u64 }, __anon_70, !913
        v1048 = const u64 0
        v1049 = get_elem_ptr v1047, ptr u64, v1048
        store v1046 to v1049, !913
        v1050 = const u64 1
        v1051 = get_elem_ptr v1047, ptr u64, v1050
        v1052 = const u64 17
        store v1052 to v1051, !913
        v1053 = get_local ptr slice, __anon_71, !913
        mem_copy_bytes v1053, v1047, 16
        v1054 = load v1053
        v1055 = call eq_13(v1044, v1054), !916
        cbr v1055, block105(), block106(), !914

        block105():
        v1056 = call supply_collateral_628(), !919
        v1057 = get_local ptr (), _result___________________________________________________________, !920
        store v1056 to v1057, !920
        v1058 = asm() -> u64 zero, !921 {
        }
        v1059 = const u64 0, !922
        retd v1058 v1059, !923

        block106():
        v1060 = const unit ()
        br block107(v1060)

        block107(v1061: ()):
        v1062 = get_local ptr slice, _method_name, !924
        v1063 = load v1062
        v1064 = const string<17> "totals_collateral"
        v1065 = ptr_to_int v1064 to u64, !925
        v1066 = get_local ptr { u64, u64 }, __anon_72, !925
        v1067 = const u64 0
        v1068 = get_elem_ptr v1066, ptr u64, v1067
        store v1065 to v1068, !925
        v1069 = const u64 1
        v1070 = get_elem_ptr v1066, ptr u64, v1069
        v1071 = const u64 17
        store v1071 to v1070, !925
        v1072 = get_local ptr slice, __anon_73, !925
        mem_copy_bytes v1072, v1066, 16
        v1073 = load v1072
        v1074 = call eq_13(v1063, v1073), !928
        cbr v1074, block108(), block109(), !926

        block108():
        v1075 = get_local ptr { u64 }, _buffer, !929
        v1076 = call decode_490(v1075), !932
        v1077 = get_local ptr { { b256 } }, args______________________, !933
        store v1076 to v1077, !933
        v1078 = get_local ptr { { b256 } }, args______________________, !934
        v1079 = const u64 0
        v1080 = get_elem_ptr v1078, ptr { b256 }, v1079, !935
        v1081 = load v1080
        v1082 = call totals_collateral_632(v1081), !938
        v1083 = get_local ptr u64, _result____________________________________________________________, !939
        store v1082 to v1083, !939
        v1084 = get_local ptr u64, _result____________________________________________________________, !940
        v1085 = load v1084
        v1086 = call encode_495(v1085), !943
        v1087 = get_local ptr slice, _result_____________________________________________________________, !944
        store v1086 to v1087, !944
        v1088 = get_local ptr slice, _result_____________________________________________________________, !945
        v1089 = load v1088
        v1090 = call ptr_11(v1089), !948
        v1091 = get_local ptr slice, _result_____________________________________________________________, !949
        v1092 = load v1091
        v1093 = call len_489(v1092), !952
        retd v1090 v1093, !953

        block109():
        v1094 = const unit ()
        br block110(v1094)

        block110(v1095: ()):
        v1096 = get_local ptr slice, _method_name, !954
        v1097 = load v1096
        v1098 = const string<18> "transfer_ownership"
        v1099 = ptr_to_int v1098 to u64, !955
        v1100 = get_local ptr { u64, u64 }, __anon_74, !955
        v1101 = const u64 0
        v1102 = get_elem_ptr v1100, ptr u64, v1101
        store v1099 to v1102, !955
        v1103 = const u64 1
        v1104 = get_elem_ptr v1100, ptr u64, v1103
        v1105 = const u64 18
        store v1105 to v1104, !955
        v1106 = get_local ptr slice, __anon_75, !955
        mem_copy_bytes v1106, v1100, 16
        v1107 = load v1106
        v1108 = call eq_13(v1097, v1107), !958
        cbr v1108, block111(), block112(), !956

        block111():
        v1109 = get_local ptr { u64 }, _buffer, !959
        v1110 = call decode_484(v1109), !962
        v1111 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______________________, !963
        store v1110 to v1111, !963
        v1112 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______________________, !964
        v1113 = const u64 0
        v1114 = get_elem_ptr v1112, ptr { u64, ( { b256 } | { b256 } ) }, v1113, !965
        v1115 = load v1114
        v1116 = call transfer_ownership_633(v1115), !968
        v1117 = get_local ptr (), _result______________________________________________________________, !969
        store v1116 to v1117, !969
        v1118 = asm() -> u64 zero, !970 {
        }
        v1119 = const u64 0, !971
        retd v1118 v1119, !972

        block112():
        v1120 = const unit ()
        br block113(v1120)

        block113(v1121: ()):
        v1122 = get_local ptr slice, _method_name, !973
        v1123 = load v1122
        v1124 = const string<23> "update_collateral_asset"
        v1125 = ptr_to_int v1124 to u64, !974
        v1126 = get_local ptr { u64, u64 }, __anon_76, !974
        v1127 = const u64 0
        v1128 = get_elem_ptr v1126, ptr u64, v1127
        store v1125 to v1128, !974
        v1129 = const u64 1
        v1130 = get_elem_ptr v1126, ptr u64, v1129
        v1131 = const u64 23
        store v1131 to v1130, !974
        v1132 = get_local ptr slice, __anon_77, !974
        mem_copy_bytes v1132, v1126, 16
        v1133 = load v1132
        v1134 = call eq_13(v1123, v1133), !977
        cbr v1134, block114(), block115(), !975

        block114():
        v1135 = get_local ptr { u64 }, _buffer, !978
        v1136 = call decode_638(v1135), !981
        v1137 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, args________________________, !982
        store v1136 to v1137, !982
        v1138 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, args________________________, !983
        v1139 = const u64 0
        v1140 = get_elem_ptr v1138, ptr { b256 }, v1139, !984
        v1141 = load v1140
        v1142 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, args________________________, !985
        v1143 = const u64 1
        v1144 = get_elem_ptr v1142, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v1143, !986
        v1145 = load v1144
        v1146 = call update_collateral_asset_640(v1141, v1145), !989
        v1147 = get_local ptr (), _result_______________________________________________________________, !990
        store v1146 to v1147, !990
        v1148 = asm() -> u64 zero, !991 {
        }
        v1149 = const u64 0, !992
        retd v1148 v1149, !993

        block115():
        v1150 = const unit ()
        br block116(v1150)

        block116(v1151: ()):
        v1152 = get_local ptr slice, _method_name, !994
        v1153 = load v1152
        v1154 = const string<10> "update_fee"
        v1155 = ptr_to_int v1154 to u64, !995
        v1156 = get_local ptr { u64, u64 }, __anon_78, !995
        v1157 = const u64 0
        v1158 = get_elem_ptr v1156, ptr u64, v1157
        store v1155 to v1158, !995
        v1159 = const u64 1
        v1160 = get_elem_ptr v1156, ptr u64, v1159
        v1161 = const u64 10
        store v1161 to v1160, !995
        v1162 = get_local ptr slice, __anon_79, !995
        mem_copy_bytes v1162, v1156, 16
        v1163 = load v1162
        v1164 = call eq_13(v1153, v1163), !998
        cbr v1164, block117(), block118(), !996

        block117():
        v1165 = get_local ptr { u64 }, _buffer, !999
        v1166 = call decode_645(v1165), !1002
        v1167 = get_local ptr { { { u64, u64 }, u64 } }, args_________________________, !1003
        store v1166 to v1167, !1003
        v1168 = get_local ptr { { { u64, u64 }, u64 } }, args_________________________, !1004
        v1169 = const u64 0
        v1170 = get_elem_ptr v1168, ptr { { u64, u64 }, u64 }, v1169, !1005
        v1171 = load v1170
        v1172 = call update_fee_647(v1171), !1008
        v1173 = get_local ptr u64, _result________________________________________________________________, !1009
        store v1172 to v1173, !1009
        v1174 = get_local ptr u64, _result________________________________________________________________, !1010
        v1175 = load v1174
        v1176 = call encode_495(v1175), !1013
        v1177 = get_local ptr slice, _result_________________________________________________________________, !1014
        store v1176 to v1177, !1014
        v1178 = get_local ptr slice, _result_________________________________________________________________, !1015
        v1179 = load v1178
        v1180 = call ptr_11(v1179), !1018
        v1181 = get_local ptr slice, _result_________________________________________________________________, !1019
        v1182 = load v1181
        v1183 = call len_489(v1182), !1022
        retd v1180 v1183, !1023

        block118():
        v1184 = const unit ()
        br block119(v1184)

        block119(v1185: ()):
        v1186 = get_local ptr slice, _method_name, !1024
        v1187 = load v1186
        v1188 = const string<27> "update_market_configuration"
        v1189 = ptr_to_int v1188 to u64, !1025
        v1190 = get_local ptr { u64, u64 }, __anon_80, !1025
        v1191 = const u64 0
        v1192 = get_elem_ptr v1190, ptr u64, v1191
        store v1189 to v1192, !1025
        v1193 = const u64 1
        v1194 = get_elem_ptr v1190, ptr u64, v1193
        v1195 = const u64 27
        store v1195 to v1194, !1025
        v1196 = get_local ptr slice, __anon_81, !1025
        mem_copy_bytes v1196, v1190, 16
        v1197 = load v1196
        v1198 = call eq_13(v1187, v1197), !1028
        cbr v1198, block120(), block121(), !1026

        block120():
        v1199 = get_local ptr { u64 }, _buffer, !1029
        v1200 = call decode_652(v1199), !1032
        v1201 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, args__________________________, !1033
        store v1200 to v1201, !1033
        v1202 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, args__________________________, !1034
        v1203 = const u64 0
        v1204 = get_elem_ptr v1202, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v1203, !1035
        v1205 = load v1204
        v1206 = call update_market_configuration_654(v1205), !1038
        v1207 = get_local ptr (), _result__________________________________________________________________, !1039
        store v1206 to v1207, !1039
        v1208 = asm() -> u64 zero, !1040 {
        }
        v1209 = const u64 0, !1041
        retd v1208 v1209, !1042

        block121():
        v1210 = const unit ()
        br block122(v1210)

        block122(v1211: ()):
        v1212 = get_local ptr slice, _method_name, !1043
        v1213 = load v1212
        v1214 = const string<31> "update_price_feeds_if_necessary"
        v1215 = ptr_to_int v1214 to u64, !1044
        v1216 = get_local ptr { u64, u64 }, __anon_82, !1044
        v1217 = const u64 0
        v1218 = get_elem_ptr v1216, ptr u64, v1217
        store v1215 to v1218, !1044
        v1219 = const u64 1
        v1220 = get_elem_ptr v1216, ptr u64, v1219
        v1221 = const u64 31
        store v1221 to v1220, !1044
        v1222 = get_local ptr slice, __anon_83, !1044
        mem_copy_bytes v1222, v1216, 16
        v1223 = load v1222
        v1224 = call eq_13(v1213, v1223), !1047
        cbr v1224, block123(), block124(), !1045

        block123():
        v1225 = get_local ptr { u64 }, _buffer, !1048
        v1226 = call decode_655(v1225), !1051
        v1227 = get_local ptr { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args___________________________, !1052
        store v1226 to v1227, !1052
        v1228 = get_local ptr { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args___________________________, !1053
        v1229 = const u64 0
        v1230 = get_elem_ptr v1228, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v1229, !1054
        v1231 = load v1230
        v1232 = call update_price_feeds_if_necessary_657(v1231), !1057
        v1233 = get_local ptr (), _result___________________________________________________________________, !1058
        store v1232 to v1233, !1058
        v1234 = asm() -> u64 zero, !1059 {
        }
        v1235 = const u64 0, !1060
        retd v1234 v1235, !1061

        block124():
        v1236 = const unit ()
        br block125(v1236)

        block125(v1237: ()):
        v1238 = get_local ptr slice, _method_name, !1062
        v1239 = load v1238
        v1240 = const string<13> "withdraw_base"
        v1241 = ptr_to_int v1240 to u64, !1063
        v1242 = get_local ptr { u64, u64 }, __anon_84, !1063
        v1243 = const u64 0
        v1244 = get_elem_ptr v1242, ptr u64, v1243
        store v1241 to v1244, !1063
        v1245 = const u64 1
        v1246 = get_elem_ptr v1242, ptr u64, v1245
        v1247 = const u64 13
        store v1247 to v1246, !1063
        v1248 = get_local ptr slice, __anon_85, !1063
        mem_copy_bytes v1248, v1242, 16
        v1249 = load v1248
        v1250 = call eq_13(v1239, v1249), !1066
        cbr v1250, block126(), block127(), !1064

        block126():
        v1251 = get_local ptr { u64 }, _buffer, !1067
        v1252 = call decode_658(v1251), !1070
        v1253 = get_local ptr { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args____________________________, !1071
        store v1252 to v1253, !1071
        v1254 = get_local ptr { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args____________________________, !1072
        v1255 = const u64 0
        v1256 = get_elem_ptr v1254, ptr u64, v1255, !1073
        v1257 = load v1256
        v1258 = get_local ptr { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args____________________________, !1074
        v1259 = const u64 1
        v1260 = get_elem_ptr v1258, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v1259, !1075
        v1261 = load v1260
        v1262 = call withdraw_base_660(v1257, v1261), !1078
        v1263 = get_local ptr (), _result____________________________________________________________________, !1079
        store v1262 to v1263, !1079
        v1264 = asm() -> u64 zero, !1080 {
        }
        v1265 = const u64 0, !1081
        retd v1264 v1265, !1082

        block127():
        v1266 = const unit ()
        br block128(v1266)

        block128(v1267: ()):
        v1268 = get_local ptr slice, _method_name, !1083
        v1269 = load v1268
        v1270 = const string<19> "withdraw_collateral"
        v1271 = ptr_to_int v1270 to u64, !1084
        v1272 = get_local ptr { u64, u64 }, __anon_86, !1084
        v1273 = const u64 0
        v1274 = get_elem_ptr v1272, ptr u64, v1273
        store v1271 to v1274, !1084
        v1275 = const u64 1
        v1276 = get_elem_ptr v1272, ptr u64, v1275
        v1277 = const u64 19
        store v1277 to v1276, !1084
        v1278 = get_local ptr slice, __anon_87, !1084
        mem_copy_bytes v1278, v1272, 16
        v1279 = load v1278
        v1280 = call eq_13(v1269, v1279), !1087
        cbr v1280, block129(), block130(), !1085

        block129():
        v1281 = get_local ptr { u64 }, _buffer, !1088
        v1282 = call decode_666(v1281), !1091
        v1283 = get_local ptr { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args_____________________________, !1092
        store v1282 to v1283, !1092
        v1284 = get_local ptr { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args_____________________________, !1093
        v1285 = const u64 0
        v1286 = get_elem_ptr v1284, ptr { b256 }, v1285, !1094
        v1287 = load v1286
        v1288 = get_local ptr { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args_____________________________, !1095
        v1289 = const u64 1
        v1290 = get_elem_ptr v1288, ptr u64, v1289, !1096
        v1291 = load v1290
        v1292 = get_local ptr { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, args_____________________________, !1097
        v1293 = const u64 2
        v1294 = get_elem_ptr v1292, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v1293, !1098
        v1295 = load v1294
        v1296 = call withdraw_collateral_668(v1287, v1291, v1295), !1101
        v1297 = get_local ptr (), _result_____________________________________________________________________, !1102
        store v1296 to v1297, !1102
        v1298 = asm() -> u64 zero, !1103 {
        }
        v1299 = const u64 0, !1104
        retd v1298 v1299, !1105

        block130():
        v1300 = const unit ()
        br block131(v1300)

        block131(v1301: ()):
        v1302 = get_local ptr slice, _method_name, !1106
        v1303 = load v1302
        v1304 = const string<17> "withdraw_reserves"
        v1305 = ptr_to_int v1304 to u64, !1107
        v1306 = get_local ptr { u64, u64 }, __anon_88, !1107
        v1307 = const u64 0
        v1308 = get_elem_ptr v1306, ptr u64, v1307
        store v1305 to v1308, !1107
        v1309 = const u64 1
        v1310 = get_elem_ptr v1306, ptr u64, v1309
        v1311 = const u64 17
        store v1311 to v1310, !1107
        v1312 = get_local ptr slice, __anon_89, !1107
        mem_copy_bytes v1312, v1306, 16
        v1313 = load v1312
        v1314 = call eq_13(v1303, v1313), !1110
        cbr v1314, block132(), block133(), !1108

        block132():
        v1315 = get_local ptr { u64 }, _buffer, !1111
        v1316 = call decode_672(v1315), !1114
        v1317 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u64 }, args______________________________, !1115
        store v1316 to v1317, !1115
        v1318 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u64 }, args______________________________, !1116
        v1319 = const u64 0
        v1320 = get_elem_ptr v1318, ptr { u64, ( { b256 } | { b256 } ) }, v1319, !1117
        v1321 = load v1320
        v1322 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u64 }, args______________________________, !1118
        v1323 = const u64 1
        v1324 = get_elem_ptr v1322, ptr u64, v1323, !1119
        v1325 = load v1324
        v1326 = call withdraw_reserves_674(v1321, v1325), !1122
        v1327 = get_local ptr (), _result______________________________________________________________________, !1123
        store v1326 to v1327, !1123
        v1328 = asm() -> u64 zero, !1124 {
        }
        v1329 = const u64 0, !1125
        retd v1328 v1329, !1126

        block133():
        v1330 = const unit ()
        br block134(v1330)

        block134(v1331: ()):
        v1332 = get_local ptr slice, _method_name, !1127
        v1333 = load v1332
        v1334 = const string<5> "owner"
        v1335 = ptr_to_int v1334 to u64, !1128
        v1336 = get_local ptr { u64, u64 }, __anon_90, !1128
        v1337 = const u64 0
        v1338 = get_elem_ptr v1336, ptr u64, v1337
        store v1335 to v1338, !1128
        v1339 = const u64 1
        v1340 = get_elem_ptr v1336, ptr u64, v1339
        v1341 = const u64 5
        store v1341 to v1340, !1128
        v1342 = get_local ptr slice, __anon_91, !1128
        mem_copy_bytes v1342, v1336, 16
        v1343 = load v1342
        v1344 = call eq_13(v1333, v1343), !1131
        cbr v1344, block135(), block136(), !1129

        block135():
        v1345 = call owner_678(), !1134
        v1346 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, _result_______________________________________________________________________, !1135
        store v1345 to v1346, !1135
        v1347 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, _result_______________________________________________________________________, !1136
        v1348 = load v1347
        v1349 = call encode_679(v1348), !1139
        v1350 = get_local ptr slice, _result________________________________________________________________________, !1140
        store v1349 to v1350, !1140
        v1351 = get_local ptr slice, _result________________________________________________________________________, !1141
        v1352 = load v1351
        v1353 = call ptr_11(v1352), !1144
        v1354 = get_local ptr slice, _result________________________________________________________________________, !1145
        v1355 = load v1354
        v1356 = call len_489(v1355), !1148
        retd v1353 v1356, !1149

        block136():
        v1357 = const unit ()
        br block137(v1357)

        block137(v1358: ()):
        v1359 = const u64 123, !1150
        revert v1359, !1151
    }

    pub fn from_second_parameter_4() -> { u64 }, !1154 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !1155
        v1 = const u64 74, !1156
        store v1 to v0, !1155
        v2 = asm() -> u64 fp, !1157 {
        }
        v3 = get_local ptr u64, ptr, !1158
        store v2 to v3, !1158
        v4 = get_local ptr u64, ptr, !1159
        v5 = load v4
        v6 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !1160
        v7 = load v6
        v8 = call add_5(v5, v7), !1163
        v9 = get_local ptr u64, ptr_, !1164
        store v8 to v9, !1164
        v10 = get_local ptr u64, ptr_, !1165
        v11 = load v10
        v12 = call read_6(v11), !1168
        v13 = get_local ptr u64, ptr__, !1169
        store v12 to v13, !1169
        v14 = get_local ptr u64, ptr__, !1170
        v15 = load v14
        v16 = asm(ptr: v15) -> u64 ptr, !1171 {
        }
        v17 = get_local ptr { u64 }, __anon_0, !1172
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v16 to v19, !1172
        v20 = load v17
        ret { u64 } v20
    }

    pub fn add_5(self !1174: u64, count !1175: u64) -> u64, !1178 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_6(self !1179: u64) -> u64, !1182 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn decode_first_param_7() -> slice, !1193 {
        local mut { u64 } buffer

        entry():
        v0 = call from_first_parameter_8(), !1196
        v1 = get_local ptr { u64 }, buffer, !1197
        store v0 to v1, !1197
        v2 = get_local ptr { u64 }, buffer, !1198
        v3 = call abi_decode_9(v2), !1201
        ret slice v3
    }

    pub fn from_first_parameter_8() -> { u64 }, !1204 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !1205
        v1 = const u64 73, !1206
        store v1 to v0, !1205
        v2 = asm() -> u64 fp, !1207 {
        }
        v3 = get_local ptr u64, ptr, !1208
        store v2 to v3, !1208
        v4 = get_local ptr u64, ptr, !1209
        v5 = load v4
        v6 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !1210
        v7 = load v6
        v8 = call add_5(v5, v7), !1213
        v9 = get_local ptr u64, ptr_, !1214
        store v8 to v9, !1214
        v10 = get_local ptr u64, ptr_, !1215
        v11 = load v10
        v12 = call read_6(v11), !1218
        v13 = get_local ptr u64, ptr__, !1219
        store v12 to v13, !1219
        v14 = get_local ptr u64, ptr__, !1220
        v15 = load v14
        v16 = asm(ptr: v15) -> u64 ptr, !1221 {
        }
        v17 = get_local ptr { u64 }, __anon_0, !1222
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v16 to v19, !1222
        v20 = load v17
        ret { u64 } v20
    }

    pub fn abi_decode_9(buffer !1223: ptr { u64 }) -> slice, !1226 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64 }):
        v0 = call read_8_bytes_3(buffer), !1229
        v1 = get_local ptr u64, len, !1230
        store v0 to v1, !1230
        v2 = get_local ptr u64, len, !1231
        v3 = load v2
        v4 = call read_bytes_10(buffer, v3), !1234
        v5 = get_local ptr slice, data, !1235
        store v4 to v5, !1235
        v6 = get_local ptr slice, data, !1236
        v7 = load v6
        v8 = call ptr_11(v7), !1239
        v9 = get_local ptr u64, len, !1240
        v10 = load v9
        v11 = get_local ptr { u64, u64 }, __anon_0, !1241
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !1241
        store v8 to v13, !1241
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14, !1241
        store v10 to v15, !1241
        v16 = asm(s: v11) -> slice s, !1242 {
        }
        ret slice v16
    }

    pub fn read_bytes_10(self !1243: ptr { u64 }, count !1244: u64) -> slice, !1247 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64 }, count: u64):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !40
        v2 = load v1
        v3 = get_local ptr { u64, u64 }, __anon_0, !1248
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1248
        store v2 to v5, !1248
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !1248
        store count to v7, !1248
        v8 = asm(ptr: v3) -> slice ptr, !1249 {
        }
        v9 = get_local ptr slice, slice, !1250
        store v8 to v9, !1250
        v10 = const u64 0
        v11 = get_elem_ptr self, ptr u64, v10, !40
        v12 = load v11
        v13 = const u64 1
        v14 = mul v13, count
        v15 = add v12, v14
        v16 = const u64 0
        v17 = get_elem_ptr self, ptr u64, v16, !1251
        store v15 to v17, !1251
        v18 = get_local ptr slice, slice, !1252
        v19 = load v18
        ret slice v19
    }

    pub fn ptr_11(self !1254: slice) -> u64, !1257 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !1260
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1261
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_12(slice !1262: slice) -> { u64, u64 }, !1265 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !1266 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_13(self !1268: slice, other !1269: slice) -> bool, !1272 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_17(self), !1275
        v1 = call len_17(other), !1278
        v2 = call neq_14(v0, v1), !1281
        cbr v2, block0(), block1(), !1279

        block0():
        v3 = const bool false, !1282
        br block2(v3)

        block1():
        v4 = call as_ptr_18(self), !1285
        v5 = get_local ptr u64, self_ptr, !1286
        store v4 to v5, !1286
        v6 = call as_ptr_18(other), !1289
        v7 = get_local ptr u64, other_ptr, !1290
        store v6 to v7, !1290
        v8 = call len_17(self), !1293
        v9 = get_local ptr u64, l, !1294
        store v8 to v9, !1294
        v10 = get_local ptr u64, self_ptr, !1295
        v11 = load v10
        v12 = get_local ptr u64, other_ptr, !1296
        v13 = load v12
        v14 = get_local ptr u64, l, !1297
        v15 = load v14
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !1298 {
            meq    r4 r1 r2 r3, !1299
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn neq_14(self !1300: u64, other !1301: u64) -> bool, !1304 {
        entry(self: u64, other: u64):
        v0 = call eq_16(self, other), !1307
        v1 = call not_15(v0), !1310
        ret bool v1
    }

    pub fn not_15(self !1311: bool) -> bool, !1314 {
        entry(self: bool):
        v0 = const bool false, !1315
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn eq_16(self !1316: u64, other !1317: u64) -> bool, !1320 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn len_17(self !1322: slice) -> u64, !1325 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !1326 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !1327
        store v0 to v1, !1327
        v2 = get_local ptr { u64, u64 }, __tuple_2, !1327
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !1327
        store v3 to v4, !1327
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !1327
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !1327
        v8 = load v7
        v9 = get_local ptr u64, _, !1327
        store v8 to v9, !1327
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !1327
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !1327
        v13 = load v12
        v14 = get_local ptr u64, len, !1327
        store v13 to v14, !1327
        v15 = get_local ptr u64, len, !1328
        v16 = load v15
        ret u64 v16
    }

    pub fn as_ptr_18(self !1329: slice) -> u64, !1332 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !1333 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !1334
        store v0 to v1, !1334
        v2 = get_local ptr { u64, u64 }, __tuple_1, !1334
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !1334
        store v3 to v4, !1334
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !1334
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !1334
        v8 = load v7
        v9 = get_local ptr u64, ptr, !1334
        store v8 to v9, !1334
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !1334
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !1334
        v13 = load v12
        v14 = get_local ptr u64, _, !1334
        store v13 to v14, !1334
        v15 = get_local ptr u64, ptr, !1335
        v16 = load v15
        ret u64 v16
    }

    pub fn decode_19(self !1336: ptr { u64 }) -> { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !1339 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_20(self), !1342
        ret { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v0
    }

    pub fn abi_decode_20(buffer !1343: ptr { u64 }) -> { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !1346 {
        local { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_21(buffer), !1349
        v1 = call abi_decode_46(buffer), !1352
        v2 = get_local ptr { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { { { u64, u64 }, u64 }, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v7
    }

    pub fn abi_decode_21(buffer !1355: ptr { u64 }) -> { { u64, u64 }, u64 }, !1358 {
        local mut u64 i
        local { u64, ( { b256 } | { b256 } ) } item
        local u64 len
        local mut { { u64, u64 }, u64 } v

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_2(buffer), !1361
        v1 = get_local ptr u64, len, !1362
        store v0 to v1, !1362
        v2 = get_local ptr u64, len, !1363
        v3 = load v2
        v4 = call with_capacity_22(v3), !1366
        v5 = get_local ptr { { u64, u64 }, u64 }, v, !1367
        store v4 to v5, !1367
        v6 = get_local ptr u64, i, !1368
        v7 = const u64 0, !1369
        store v7 to v6, !1368
        br while()

        while():
        v8 = get_local ptr u64, i, !1370
        v9 = load v8
        v10 = get_local ptr u64, len, !1371
        v11 = load v10
        v12 = call lt_26(v9, v11), !1374
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = call abi_decode_27(buffer), !1377
        v14 = get_local ptr { u64, ( { b256 } | { b256 } ) }, item, !1378
        store v13 to v14, !1378
        v15 = get_local ptr { { u64, u64 }, u64 }, v, !1379
        v16 = get_local ptr { u64, ( { b256 } | { b256 } ) }, item, !1380
        v17 = load v16
        v18 = call push_36(v15, v17), !1383
        v19 = get_local ptr u64, i, !1384
        v20 = load v19
        v21 = const u64 1, !1385
        v22 = call add_45(v20, v21), !1388
        v23 = get_local ptr u64, i, !1386
        store v22 to v23, !1386
        br while()

        end_while():
        v24 = get_local ptr { { u64, u64 }, u64 }, v, !1389
        v25 = load v24
        ret { { u64, u64 }, u64 } v25
    }

    pub fn with_capacity_22(capacity !1390: u64) -> { { u64, u64 }, u64 }, !1393 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_23(capacity), !1396
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !1397
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !1397
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !1398
        store v6 to v5, !1397
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_23(capacity !1399: u64) -> { u64, u64 }, !1402 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_24(capacity), !1405
        v1 = get_local ptr { u64, u64 }, __anon_0, !1406
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1406
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !1406
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn alloc_24(count !1408: u64) -> u64, !1411 {
        entry(count: u64):
        v0 = const u64 40
        v1 = call multiply_25(v0, count), !1414
        v2 = asm(size: v1, ptr) -> u64 ptr, !1415 {
            aloc   size, !1416
            move   ptr hp, !1417
        }
        ret u64 v2
    }

    pub fn multiply_25(self !1418: u64, other !1419: u64) -> u64, !1422 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn lt_26(self !1423: u64, other !1424: u64) -> bool, !1427 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn abi_decode_27(buffer !1428: ptr { u64 }) -> { u64, ( { b256 } | { b256 } ) }, !1431 {
        local { u64, ( { b256 } | { b256 } ) } __anon_0
        local { u64, ( { b256 } | { b256 } ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64 }):
        v0 = call decode_28(buffer), !1434
        v1 = get_local ptr u64, variant, !1435
        store v0 to v1, !1435
        v2 = get_local ptr u64, variant, !1436
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !1437
        store v3 to v4, !1437
        v5 = get_local ptr u64, __matched_value_1, !1436
        v6 = load v5
        v7 = const u64 0, !1438
        v8 = call eq_16(v6, v7), !1441
        cbr v8, block0(), block1(), !1439

        block0():
        v9 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_0, !1443
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1443
        v12 = const u64 0, !1443
        store v12 to v11, !1443
        v13 = call decode_29(buffer), !1446
        v14 = const u64 1
        v15 = const u64 0
        v16 = get_elem_ptr v9, ptr { b256 }, v14, v15, !1443
        store v13 to v16, !1443
        v17 = load v9
        br block5(v17)

        block1():
        v18 = get_local ptr u64, __matched_value_1, !1436
        v19 = load v18
        v20 = const u64 1, !1447
        v21 = call eq_16(v19, v20), !1450
        cbr v21, block2(), block3(), !1448

        block2():
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_1, !1443
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !1443
        v25 = const u64 1, !1443
        store v25 to v24, !1443
        v26 = call decode_34(buffer), !1453
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v22, ptr { b256 }, v27, v28, !1443
        store v26 to v29, !1443
        v30 = load v22
        br block4(v30)

        block3():
        v31 = const u64 0, !1454
        revert v31, !1455

        block4(v32: { u64, ( { b256 } | { b256 } ) }):
        br block5(v32)

        block5(v33: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v33
    }

    pub fn decode_28(self !1336: ptr { u64 }) -> u64, !1456 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_2(self), !1457
        ret u64 v0
    }

    pub fn decode_29(self !1336: ptr { u64 }) -> { b256 }, !1458 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_30(self), !1459
        ret { b256 } v0
    }

    pub fn abi_decode_30(buffer !1460: ptr { u64 }) -> { b256 }, !1463 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_31(buffer), !1466
        v1 = get_local ptr { b256 }, __anon_0, !1467
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !1467
        v4 = load v1
        ret { b256 } v4
    }

    pub fn decode_31(self !1336: ptr { u64 }) -> b256, !1468 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_32(self), !1469
        ret b256 v0
    }

    pub fn abi_decode_32(buffer !1470: ptr { u64 }) -> b256, !1473 {
        entry(buffer: ptr { u64 }):
        v0 = call read_32_bytes_33(buffer), !1476
        ret b256 v0
    }

    pub fn read_32_bytes_33(self !1477: ptr { u64 }) -> b256, !1480 {
        local b256 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !40
        v2 = load v1
        v3 = asm(ptr: v2) -> b256 ptr, !1481 {
        }
        v4 = get_local ptr b256, v, !1482
        store v3 to v4, !1482
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !40
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 32, !1483
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !1484
        store v11 to v13, !1484
        v14 = get_local ptr b256, v, !1485
        v15 = load v14
        ret b256 v15
    }

    pub fn decode_34(self !1336: ptr { u64 }) -> { b256 }, !1486 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_35(self), !1487
        ret { b256 } v0
    }

    pub fn abi_decode_35(buffer !1488: ptr { u64 }) -> { b256 }, !1491 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_31(buffer), !1494
        v1 = get_local ptr { b256 }, __anon_0, !1495
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !1495
        v4 = load v1
        ret { b256 } v4
    }

    pub fn push_36(self !1496: ptr { { u64, u64 }, u64 }, value !1497: { u64, ( { b256 } | { b256 } ) }) -> (), !1500 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: { u64, ( { b256 } | { b256 } ) }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1501
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !1502
        v5 = load v4
        v6 = call capacity_37(v5), !1505
        v7 = call eq_16(v2, v6), !1508
        cbr v7, block0(), block1(), !1506

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !1502
        v10 = call grow_38(v9), !1511
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !1502
        v16 = load v15
        v17 = call ptr_43(v16), !1514
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !1501
        v20 = load v19
        v21 = call add_42(v17, v20), !1517
        v22 = get_local ptr u64, end, !1518
        store v21 to v22, !1518
        v23 = get_local ptr u64, end, !1519
        v24 = load v23
        v25 = call write_44(v24, value), !1522
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1501
        v28 = load v27
        v29 = const u64 1, !1523
        v30 = call add_45(v28, v29), !1526
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !1524
        store v30 to v32, !1524
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_37(self !1527: { u64, u64 }) -> u64, !1530 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1531
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_38(self !1532: ptr { u64, u64 }) -> (), !1535 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1531
        v2 = load v1
        v3 = const u64 0, !1536
        v4 = call eq_16(v2, v3), !1539
        cbr v4, block0(), block1(), !1537

        block0():
        v5 = const u64 1, !1540
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !1531
        v8 = load v7
        v9 = const u64 2, !1541
        v10 = call multiply_25(v9, v8), !1544
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !1545
        store v11 to v12, !1545
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !1546
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !1531
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !1547
        v20 = load v19
        v21 = call realloc_39(v15, v18, v20), !1550
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !1551
        store v21 to v23, !1551
        v24 = get_local ptr u64, new_cap, !1552
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1553
        store v25 to v27, !1553
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_39(ptr !1554: u64, count !1555: u64, new_count !1556: u64) -> u64, !1559 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !1562
        cbr v0, block0(), block4(), !1560

        block0():
        v1 = call alloc_24(new_count), !1565
        v2 = get_local ptr u64, new_ptr, !1566
        store v1 to v2, !1566
        v3 = const u64 0, !1567
        v4 = call gt_40(count, v3), !1570
        cbr v4, block1(), block2(), !1568

        block1():
        v5 = get_local ptr u64, new_ptr, !1571
        v6 = load v5
        v7 = call copy_to_41(ptr, v6, count), !1574
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !1575
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn gt_40(self !1576: u64, other !1577: u64) -> bool, !1580 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn copy_to_41(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !1586 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 40
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_42(self !1174: u64, count !1175: u64) -> u64, !1591 {
        entry(self: u64, count: u64):
        v0 = const u64 40
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_43(self !1592: { u64, u64 }) -> u64, !1595 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn write_44(self !1596: u64, val !1597: { u64, ( { b256 } | { b256 } ) }) -> (), !1600 {
        entry(self: u64, val: { u64, ( { b256 } | { b256 } ) }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 40
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 40
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn add_45(self !1610: u64, other !1611: u64) -> u64, !1614 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn abi_decode_46(buffer !1615: ptr { u64 }) -> { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, !1618 {
        local { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_28(buffer), !1621
        v1 = call decode_47(buffer), !1624
        v2 = call decode_59(buffer), !1627
        v3 = call decode_72(buffer), !1630
        v4 = get_local ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, __anon_0, !1631
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v0 to v6, !1631
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v7
        store v1 to v8, !1631
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v9
        store v2 to v10, !1631
        v11 = const u64 3
        v12 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v11
        store v3 to v12, !1631
        v13 = load v4
        ret { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } v13
    }

    pub fn decode_47(self !1336: ptr { u64 }) -> { { u64, u64 }, u64 }, !1632 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_48(self), !1633
        ret { { u64, u64 }, u64 } v0
    }

    pub fn abi_decode_48(buffer !1355: ptr { u64 }) -> { { u64, u64 }, u64 }, !1634 {
        local mut u64 i
        local u64 item
        local u64 len
        local mut { { u64, u64 }, u64 } v

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_2(buffer), !1635
        v1 = get_local ptr u64, len, !1362
        store v0 to v1, !1362
        v2 = get_local ptr u64, len, !1363
        v3 = load v2
        v4 = call with_capacity_49(v3), !1636
        v5 = get_local ptr { { u64, u64 }, u64 }, v, !1367
        store v4 to v5, !1367
        v6 = get_local ptr u64, i, !1368
        v7 = const u64 0, !1369
        store v7 to v6, !1368
        br while()

        while():
        v8 = get_local ptr u64, i, !1370
        v9 = load v8
        v10 = get_local ptr u64, len, !1371
        v11 = load v10
        v12 = call lt_26(v9, v11), !1637
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = call abi_decode_2(buffer), !1638
        v14 = get_local ptr u64, item, !1378
        store v13 to v14, !1378
        v15 = get_local ptr { { u64, u64 }, u64 }, v, !1379
        v16 = get_local ptr u64, item, !1380
        v17 = load v16
        v18 = call push_52(v15, v17), !1639
        v19 = get_local ptr u64, i, !1384
        v20 = load v19
        v21 = const u64 1, !1385
        v22 = call add_45(v20, v21), !1640
        v23 = get_local ptr u64, i, !1386
        store v22 to v23, !1386
        br while()

        end_while():
        v24 = get_local ptr { { u64, u64 }, u64 }, v, !1389
        v25 = load v24
        ret { { u64, u64 }, u64 } v25
    }

    pub fn with_capacity_49(capacity !1390: u64) -> { { u64, u64 }, u64 }, !1641 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_50(capacity), !1642
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !1397
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !1397
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !1398
        store v6 to v5, !1397
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_50(capacity !1399: u64) -> { u64, u64 }, !1643 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_51(capacity), !1644
        v1 = get_local ptr { u64, u64 }, __anon_0, !1406
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1406
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !1406
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn alloc_51(count !1408: u64) -> u64, !1645 {
        entry(count: u64):
        v0 = const u64 8
        v1 = call multiply_25(v0, count), !1646
        v2 = asm(size: v1, ptr) -> u64 ptr, !1415 {
            aloc   size, !1416
            move   ptr hp, !1417
        }
        ret u64 v2
    }

    pub fn push_52(self !1496: ptr { { u64, u64 }, u64 }, value !1497: u64) -> (), !1647 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: u64):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1501
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !1502
        v5 = load v4
        v6 = call capacity_53(v5), !1648
        v7 = call eq_16(v2, v6), !1649
        cbr v7, block0(), block1(), !1506

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !1502
        v10 = call grow_54(v9), !1650
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !1502
        v16 = load v15
        v17 = call ptr_57(v16), !1651
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !1501
        v20 = load v19
        v21 = call add_5(v17, v20), !1652
        v22 = get_local ptr u64, end, !1518
        store v21 to v22, !1518
        v23 = get_local ptr u64, end, !1519
        v24 = load v23
        v25 = call write_58(v24, value), !1653
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1501
        v28 = load v27
        v29 = const u64 1, !1523
        v30 = call add_45(v28, v29), !1654
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !1524
        store v30 to v32, !1524
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_53(self !1527: { u64, u64 }) -> u64, !1655 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1531
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_54(self !1532: ptr { u64, u64 }) -> (), !1656 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1531
        v2 = load v1
        v3 = const u64 0, !1536
        v4 = call eq_16(v2, v3), !1657
        cbr v4, block0(), block1(), !1537

        block0():
        v5 = const u64 1, !1540
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !1531
        v8 = load v7
        v9 = const u64 2, !1541
        v10 = call multiply_25(v9, v8), !1658
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !1545
        store v11 to v12, !1545
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !1546
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !1531
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !1547
        v20 = load v19
        v21 = call realloc_55(v15, v18, v20), !1659
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !1551
        store v21 to v23, !1551
        v24 = get_local ptr u64, new_cap, !1552
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1553
        store v25 to v27, !1553
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_55(ptr !1554: u64, count !1555: u64, new_count !1556: u64) -> u64, !1660 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !1661
        cbr v0, block0(), block4(), !1560

        block0():
        v1 = call alloc_51(new_count), !1662
        v2 = get_local ptr u64, new_ptr, !1566
        store v1 to v2, !1566
        v3 = const u64 0, !1567
        v4 = call gt_40(count, v3), !1663
        cbr v4, block1(), block2(), !1568

        block1():
        v5 = get_local ptr u64, new_ptr, !1571
        v6 = load v5
        v7 = call copy_to_56(ptr, v6, count), !1664
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !1575
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_56(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !1665 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 8
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn ptr_57(self !1592: { u64, u64 }) -> u64, !1666 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn write_58(self !1596: u64, val !1597: u64) -> (), !1667 {
        entry(self: u64, val: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 8
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 8
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn decode_59(self !1336: ptr { u64 }) -> { { u64, u64 }, u64 }, !1668 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_60(self), !1669
        ret { { u64, u64 }, u64 } v0
    }

    pub fn abi_decode_60(buffer !1355: ptr { u64 }) -> { { u64, u64 }, u64 }, !1670 {
        local mut u64 i
        local b256 item
        local u64 len
        local mut { { u64, u64 }, u64 } v

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_2(buffer), !1671
        v1 = get_local ptr u64, len, !1362
        store v0 to v1, !1362
        v2 = get_local ptr u64, len, !1363
        v3 = load v2
        v4 = call with_capacity_61(v3), !1672
        v5 = get_local ptr { { u64, u64 }, u64 }, v, !1367
        store v4 to v5, !1367
        v6 = get_local ptr u64, i, !1368
        v7 = const u64 0, !1369
        store v7 to v6, !1368
        br while()

        while():
        v8 = get_local ptr u64, i, !1370
        v9 = load v8
        v10 = get_local ptr u64, len, !1371
        v11 = load v10
        v12 = call lt_26(v9, v11), !1673
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = call abi_decode_32(buffer), !1674
        v14 = get_local ptr b256, item, !1378
        store v13 to v14, !1378
        v15 = get_local ptr { { u64, u64 }, u64 }, v, !1379
        v16 = get_local ptr b256, item, !1380
        v17 = load v16
        v18 = call push_64(v15, v17), !1675
        v19 = get_local ptr u64, i, !1384
        v20 = load v19
        v21 = const u64 1, !1385
        v22 = call add_45(v20, v21), !1676
        v23 = get_local ptr u64, i, !1386
        store v22 to v23, !1386
        br while()

        end_while():
        v24 = get_local ptr { { u64, u64 }, u64 }, v, !1389
        v25 = load v24
        ret { { u64, u64 }, u64 } v25
    }

    pub fn with_capacity_61(capacity !1390: u64) -> { { u64, u64 }, u64 }, !1677 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_62(capacity), !1678
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !1397
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !1397
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !1398
        store v6 to v5, !1397
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_62(capacity !1399: u64) -> { u64, u64 }, !1679 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_63(capacity), !1680
        v1 = get_local ptr { u64, u64 }, __anon_0, !1406
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1406
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !1406
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn alloc_63(count !1408: u64) -> u64, !1681 {
        entry(count: u64):
        v0 = const u64 32
        v1 = call multiply_25(v0, count), !1682
        v2 = asm(size: v1, ptr) -> u64 ptr, !1415 {
            aloc   size, !1416
            move   ptr hp, !1417
        }
        ret u64 v2
    }

    pub fn push_64(self !1496: ptr { { u64, u64 }, u64 }, value !1497: b256) -> (), !1683 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: b256):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1501
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !1502
        v5 = load v4
        v6 = call capacity_65(v5), !1684
        v7 = call eq_16(v2, v6), !1685
        cbr v7, block0(), block1(), !1506

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !1502
        v10 = call grow_66(v9), !1686
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !1502
        v16 = load v15
        v17 = call ptr_70(v16), !1687
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !1501
        v20 = load v19
        v21 = call add_69(v17, v20), !1688
        v22 = get_local ptr u64, end, !1518
        store v21 to v22, !1518
        v23 = get_local ptr u64, end, !1519
        v24 = load v23
        v25 = call write_71(v24, value), !1689
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1501
        v28 = load v27
        v29 = const u64 1, !1523
        v30 = call add_45(v28, v29), !1690
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !1524
        store v30 to v32, !1524
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_65(self !1527: { u64, u64 }) -> u64, !1691 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1531
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_66(self !1532: ptr { u64, u64 }) -> (), !1692 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1531
        v2 = load v1
        v3 = const u64 0, !1536
        v4 = call eq_16(v2, v3), !1693
        cbr v4, block0(), block1(), !1537

        block0():
        v5 = const u64 1, !1540
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !1531
        v8 = load v7
        v9 = const u64 2, !1541
        v10 = call multiply_25(v9, v8), !1694
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !1545
        store v11 to v12, !1545
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !1546
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !1531
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !1547
        v20 = load v19
        v21 = call realloc_67(v15, v18, v20), !1695
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !1551
        store v21 to v23, !1551
        v24 = get_local ptr u64, new_cap, !1552
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1553
        store v25 to v27, !1553
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_67(ptr !1554: u64, count !1555: u64, new_count !1556: u64) -> u64, !1696 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !1697
        cbr v0, block0(), block4(), !1560

        block0():
        v1 = call alloc_63(new_count), !1698
        v2 = get_local ptr u64, new_ptr, !1566
        store v1 to v2, !1566
        v3 = const u64 0, !1567
        v4 = call gt_40(count, v3), !1699
        cbr v4, block1(), block2(), !1568

        block1():
        v5 = get_local ptr u64, new_ptr, !1571
        v6 = load v5
        v7 = call copy_to_68(ptr, v6, count), !1700
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !1575
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_68(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !1701 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 32
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_69(self !1174: u64, count !1175: u64) -> u64, !1702 {
        entry(self: u64, count: u64):
        v0 = const u64 32
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_70(self !1592: { u64, u64 }) -> u64, !1703 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn write_71(self !1596: u64, val !1597: b256) -> (), !1704 {
        entry(self: u64, val: b256):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn decode_72(self !1336: ptr { u64 }) -> { { u64, u64 }, u64 }, !1705 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_73(self), !1706
        ret { { u64, u64 }, u64 } v0
    }

    pub fn abi_decode_73(buffer !1355: ptr { u64 }) -> { { u64, u64 }, u64 }, !1707 {
        local mut u64 i
        local { { u64, u64 }, u64 } item
        local u64 len
        local mut { { u64, u64 }, u64 } v

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_2(buffer), !1708
        v1 = get_local ptr u64, len, !1362
        store v0 to v1, !1362
        v2 = get_local ptr u64, len, !1363
        v3 = load v2
        v4 = call with_capacity_74(v3), !1709
        v5 = get_local ptr { { u64, u64 }, u64 }, v, !1367
        store v4 to v5, !1367
        v6 = get_local ptr u64, i, !1368
        v7 = const u64 0, !1369
        store v7 to v6, !1368
        br while()

        while():
        v8 = get_local ptr u64, i, !1370
        v9 = load v8
        v10 = get_local ptr u64, len, !1371
        v11 = load v10
        v12 = call lt_26(v9, v11), !1710
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = call abi_decode_77(buffer), !1711
        v14 = get_local ptr { { u64, u64 }, u64 }, item, !1378
        store v13 to v14, !1378
        v15 = get_local ptr { { u64, u64 }, u64 }, v, !1379
        v16 = get_local ptr { { u64, u64 }, u64 }, item, !1380
        v17 = load v16
        v18 = call push_85(v15, v17), !1712
        v19 = get_local ptr u64, i, !1384
        v20 = load v19
        v21 = const u64 1, !1385
        v22 = call add_45(v20, v21), !1713
        v23 = get_local ptr u64, i, !1386
        store v22 to v23, !1386
        br while()

        end_while():
        v24 = get_local ptr { { u64, u64 }, u64 }, v, !1389
        v25 = load v24
        ret { { u64, u64 }, u64 } v25
    }

    pub fn with_capacity_74(capacity !1390: u64) -> { { u64, u64 }, u64 }, !1714 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_75(capacity), !1715
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !1397
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !1397
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !1398
        store v6 to v5, !1397
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_75(capacity !1399: u64) -> { u64, u64 }, !1716 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_76(capacity), !1717
        v1 = get_local ptr { u64, u64 }, __anon_0, !1406
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !1406
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !1406
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn alloc_76(count !1408: u64) -> u64, !1718 {
        entry(count: u64):
        v0 = const u64 24
        v1 = call multiply_25(v0, count), !1719
        v2 = asm(size: v1, ptr) -> u64 ptr, !1415 {
            aloc   size, !1416
            move   ptr hp, !1417
        }
        ret u64 v2
    }

    pub fn abi_decode_77(buffer !1721: ptr { u64 }) -> { { u64, u64 }, u64 }, !1724 {
        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_84(buffer), !1727
        v1 = call into_78(v0), !1730
        ret { { u64, u64 }, u64 } v1
    }

    pub fn into_78(self !1732: slice) -> { { u64, u64 }, u64 }, !1735 {
        entry(self: slice):
        v0 = call from_79(self), !1738
        ret { { u64, u64 }, u64 } v0
    }

    pub fn from_79(slice !1739: slice) -> { { u64, u64 }, u64 }, !1742 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_80(slice), !1745
        v1 = call number_of_bytes_81(slice), !1748
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !1749
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !1749
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !1749
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn from_80(slice !1750: slice) -> { u64, u64 }, !1753 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_81(slice), !1756
        v1 = get_local ptr u64, cap, !1757
        store v0 to v1, !1757
        v2 = get_local ptr u64, cap, !1758
        v3 = load v2
        v4 = call alloc_bytes_82(v3), !1761
        v5 = get_local ptr u64, ptr, !1762
        store v4 to v5, !1762
        v6 = get_local ptr u64, cap, !1763
        v7 = load v6
        v8 = const u64 0, !1764
        v9 = call gt_40(v7, v8), !1767
        cbr v9, block0(), block1(), !1765

        block0():
        v10 = call ptr_11(slice), !1770
        v11 = get_local ptr u64, ptr, !1771
        v12 = load v11
        v13 = get_local ptr u64, cap, !1772
        v14 = load v13
        v15 = call copy_to_83(v10, v12, v14), !1775
        v16 = const unit ()
        br block2(v16)

        block1():
        v17 = const unit ()
        br block2(v17)

        block2(v18: ()):
        v19 = get_local ptr u64, ptr, !1776
        v20 = load v19
        v21 = get_local ptr u64, cap, !1777
        v22 = load v21
        v23 = get_local ptr { u64, u64 }, __anon_0, !1778
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v20 to v25, !1778
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v22 to v27, !1778
        v28 = load v23
        ret { u64, u64 } v28
    }

    pub fn number_of_bytes_81(self !1779: slice) -> u64, !1782 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !1785
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1786
        v4 = load v3
        ret u64 v4
    }

    pub fn alloc_bytes_82(count !1787: u64) -> u64, !1790 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !1791 {
            aloc   size, !1792
        }
        ret u64 v0
    }

    pub fn copy_to_83(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !1793 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn abi_decode_84(buffer !1794: ptr { u64 }) -> slice, !1797 {
        local u64 len

        entry(buffer: ptr { u64 }):
        v0 = call read_8_bytes_3(buffer), !1800
        v1 = get_local ptr u64, len, !1801
        store v0 to v1, !1801
        v2 = get_local ptr u64, len, !1802
        v3 = load v2
        v4 = call read_bytes_10(buffer, v3), !1805
        ret slice v4
    }

    pub fn push_85(self !1496: ptr { { u64, u64 }, u64 }, value !1497: { { u64, u64 }, u64 }) -> (), !1806 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: { { u64, u64 }, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1501
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !1502
        v5 = load v4
        v6 = call capacity_86(v5), !1807
        v7 = call eq_16(v2, v6), !1808
        cbr v7, block0(), block1(), !1506

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !1502
        v10 = call grow_87(v9), !1809
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !1502
        v16 = load v15
        v17 = call ptr_91(v16), !1810
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !1501
        v20 = load v19
        v21 = call add_90(v17, v20), !1811
        v22 = get_local ptr u64, end, !1518
        store v21 to v22, !1518
        v23 = get_local ptr u64, end, !1519
        v24 = load v23
        v25 = call write_92(v24, value), !1812
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1501
        v28 = load v27
        v29 = const u64 1, !1523
        v30 = call add_45(v28, v29), !1813
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !1524
        store v30 to v32, !1524
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_86(self !1527: { u64, u64 }) -> u64, !1814 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1531
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_87(self !1532: ptr { u64, u64 }) -> (), !1815 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1531
        v2 = load v1
        v3 = const u64 0, !1536
        v4 = call eq_16(v2, v3), !1816
        cbr v4, block0(), block1(), !1537

        block0():
        v5 = const u64 1, !1540
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !1531
        v8 = load v7
        v9 = const u64 2, !1541
        v10 = call multiply_25(v9, v8), !1817
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !1545
        store v11 to v12, !1545
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !1546
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !1531
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !1547
        v20 = load v19
        v21 = call realloc_88(v15, v18, v20), !1818
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !1551
        store v21 to v23, !1551
        v24 = get_local ptr u64, new_cap, !1552
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1553
        store v25 to v27, !1553
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_88(ptr !1554: u64, count !1555: u64, new_count !1556: u64) -> u64, !1819 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !1820
        cbr v0, block0(), block4(), !1560

        block0():
        v1 = call alloc_76(new_count), !1821
        v2 = get_local ptr u64, new_ptr, !1566
        store v1 to v2, !1566
        v3 = const u64 0, !1567
        v4 = call gt_40(count, v3), !1822
        cbr v4, block1(), block2(), !1568

        block1():
        v5 = get_local ptr u64, new_ptr, !1571
        v6 = load v5
        v7 = call copy_to_89(ptr, v6, count), !1823
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !1575
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_89(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !1824 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 24
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_90(self !1174: u64, count !1175: u64) -> u64, !1825 {
        entry(self: u64, count: u64):
        v0 = const u64 24
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_91(self !1592: { u64, u64 }) -> u64, !1826 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn write_92(self !1596: u64, val !1597: { { u64, u64 }, u64 }) -> (), !1827 {
        entry(self: u64, val: { { u64, u64 }, u64 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 24
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 24
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn absorb_93(accounts !1828: { { u64, u64 }, u64 }, price_data_update !1829: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !1833 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local mut u64 index

        entry(accounts: { { u64, u64 }, u64 }, price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !1836
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !1837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !1837
        store v4 to v3, !1837
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 2
        store v7 to v6, !1837
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x5c761619e5f7bfc01924c4d924adecc283a0eeaf92db1b80df5a6ecbbb13f0e7, !1837
        store v10 to v9, !1837
        v11 = load v1
        v12 = call read_116(v11), !1840
        v13 = call not_15(v12), !1843
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !1848
        v20 = call accrue_internal_131(), !1851
        v21 = call update_price_feeds_if_necessary_internal_182(price_data_update), !1854
        v22 = get_local ptr u64, index, !1855
        v23 = const u64 0, !1856
        store v23 to v22, !1855
        br while()

        while():
        v24 = get_local ptr u64, index, !1857
        v25 = load v24
        v26 = call len_230(accounts), !1860
        v27 = call lt_26(v25, v26), !1863
        cbr v27, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v28 = get_local ptr u64, index, !1864
        v29 = load v28
        v30 = call get_401(accounts, v29), !1867
        v31 = call unwrap_400(v30), !1870
        v32 = call absorb_internal_231(v31), !1873
        v33 = get_local ptr u64, index, !1874
        v34 = load v33
        v35 = const u64 1, !1875
        v36 = call add_45(v34, v35), !1878
        v37 = get_local ptr u64, index, !1876
        store v36 to v37, !1876
        br while()

        end_while():
        v38 = const unit ()
        ret () v38
    }

    pub fn reentrancy_guard_94() -> (), !1882 {
        local { u64 } __anon_0

        entry():
        v0 = call is_reentrant_103(), !1885
        v1 = call not_15(v0), !1888
        v2 = get_local ptr { u64 }, __anon_0, !1890
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !1890
        v5 = const u64 0, !1890
        store v5 to v4, !1890
        v6 = load v2
        v7 = call require_95(v1, v6), !1893
        v8 = const unit ()
        ret () v8
    }

    pub fn require_95(condition !1895: bool, value !1896: { u64 }) -> (), !1899 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_15(condition), !1902
        cbr v0, block0(), block1(), !1900

        block0():
        v1 = call log_96(value), !1905
        v2 = const u64 18446744073709486080, !1907
        v3 = call revert_102(v2), !1910
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_96(value !1912: { u64 }) -> (), !1915 {
        entry(value: { u64 }):
        v0 = call encode_97(value), !1916
        v1 = const u64 5557842539076482339
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_97(item !1917: { u64 }) -> slice, !1920 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_100(), !1923
        v1 = call abi_encode_98(item, v0), !1926
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !1931
        ret slice v5
    }

    pub fn abi_encode_98(self !1932: { u64 }, buffer !1933: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1935 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !1936
        store self to v0, !1936
        v1 = get_local ptr { u64 }, __matched_value_1, !1937
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1937
        v4 = load v3
        v5 = const u64 0, !1937
        v6 = call eq_16(v4, v5), !1940
        cbr v6, block0(), block1(), !1938

        block0():
        v7 = const u64 0, !1941
        v8 = call abi_encode_99(v7, buffer), !1944
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !1936
        revert v9, !1936

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !1945
        store v10 to v11, !1945
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !1946
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn abi_encode_99(self !1947: u64, buffer !1948: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1951 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 8
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = ptr_to_int v20 to u64
        v23 = add v22, v16
        v24 = int_to_ptr v23 to ptr u64
        store self to v24
        v25 = const u64 8
        v26 = add v16, v25
        v27 = ptr_to_int v20 to u64
        v28 = get_local ptr { u64, u64, u64 }, __anon_1
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        store v21 to v32
        v33 = const u64 2
        v34 = get_elem_ptr v28, ptr u64, v33
        store v26 to v34
        v35 = asm(buffer: v28) -> { u64, u64, u64 } buffer {
        }
        v36 = get_local ptr { { u64, u64, u64 } }, __anon_2, !1953
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, u64, u64 }, v37
        store v35 to v38, !1953
        v39 = load v36
        ret { { u64, u64, u64 } } v39

        block1():
        v40 = const u64 2
        v41 = mul v13, v40
        v42 = add v41, v17
        v43 = asm(new_cap: v42, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v43, v42)

        block2():
        br block0(v10, v13)
    }

    pub fn new_100() -> { { u64, u64, u64 } }, !1956 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !1957
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !1957
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_101(self !1958: { { u64, u64, u64 } }) -> slice, !1961 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn revert_102(code !1962: u64) -> never, !1965 {
        entry(code: u64):
        revert code, !1966
    }

    pub fn is_reentrant_103() -> bool, !1969 {
        local mut u64 call_frame_pointer
        local { b256 } previous_contract_id
        local { b256 } this_id

        entry():
        v0 = call this_104(), !1972
        v1 = get_local ptr { b256 }, this_id, !1973
        store v0 to v1, !1973
        v2 = call frame_ptr_106(), !1976
        v3 = get_local ptr u64, call_frame_pointer, !1977
        store v2 to v3, !1977
        v4 = get_local ptr u64, call_frame_pointer, !1978
        v5 = load v4
        v6 = call is_null_107(v5), !1981
        v7 = call not_15(v6), !1984
        cbr v7, block0(), block1(), !1982

        block0():
        v8 = get_local ptr u64, call_frame_pointer, !1985
        v9 = load v8
        v10 = call get_previous_frame_pointer_108(v9), !1988
        v11 = get_local ptr u64, call_frame_pointer, !1989
        store v10 to v11, !1989
        v12 = const unit ()
        br block2(v12)

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        br while()

        while():
        v15 = get_local ptr u64, call_frame_pointer, !1990
        v16 = load v15
        v17 = call is_null_107(v16), !1993
        v18 = call not_15(v17), !1996
        cbr v18, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v19 = get_local ptr u64, call_frame_pointer, !1997
        v20 = load v19
        v21 = call get_contract_id_from_call_frame_109(v20), !2000
        v22 = get_local ptr { b256 }, previous_contract_id, !2001
        store v21 to v22, !2001
        v23 = get_local ptr { b256 }, previous_contract_id, !2002
        v24 = load v23
        v25 = get_local ptr { b256 }, this_id, !2003
        v26 = load v25
        v27 = call eq_110(v24, v26), !2006
        cbr v27, block3(), block4(), !2004

        block3():
        v28 = const bool true, !2007
        ret bool v28, !2008

        block4():
        v29 = const unit ()
        br block5(v29)

        block5(v30: ()):
        v31 = get_local ptr u64, call_frame_pointer, !2009
        v32 = load v31
        v33 = call get_previous_frame_pointer_108(v32), !2012
        v34 = get_local ptr u64, call_frame_pointer, !2013
        store v33 to v34, !2013
        br while()

        end_while():
        v35 = const bool false, !2014
        ret bool v35
    }

    pub fn this_104() -> { b256 }, !2018 {
        entry():
        v0 = asm() -> b256 fp, !2019 {
        }
        v1 = call from_105(v0), !2022
        ret { b256 } v1
    }

    pub fn from_105(bits !2023: b256) -> { b256 }, !2026 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !2027
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !2027
        v3 = load v0
        ret { b256 } v3
    }

    pub fn frame_ptr_106() -> u64, !2031 {
        entry():
        v0 = asm() -> u64 fp, !2032 {
        }
        ret u64 v0
    }

    pub fn is_null_107(self !2033: u64) -> bool, !2036 {
        local u64 null_ptr

        entry(self: u64):
        v0 = asm() -> u64 zero, !2037 {
        }
        v1 = get_local ptr u64, null_ptr, !2038
        store v0 to v1, !2038
        v2 = get_local ptr u64, null_ptr, !2039
        v3 = load v2
        v4 = cmp eq self v3
        ret bool v4
    }

    pub fn get_previous_frame_pointer_108(frame_pointer !2041: u64) -> u64, !2044 {
        local u64 offset

        entry(frame_pointer: u64):
        v0 = const u64 8, !2045
        v1 = const u64 6, !2046
        v2 = call add_45(v0, v1), !2049
        v3 = call add_5(frame_pointer, v2), !2052
        v4 = get_local ptr u64, offset, !2053
        store v3 to v4, !2053
        v5 = get_local ptr u64, offset, !2054
        v6 = load v5
        v7 = asm(res, ptr: v6) -> u64 res, !2055 {
            lw     res ptr i0, !2056
        }
        ret u64 v7
    }

    pub fn get_contract_id_from_call_frame_109(frame_pointer !2057: u64) -> { b256 }, !2060 {
        entry(frame_pointer: u64):
        v0 = asm(res, ptr: frame_pointer) -> b256 ptr, !2061 {
        }
        v1 = call from_105(v0), !2064
        ret { b256 } v1
    }

    pub fn eq_110(self !2065: { b256 }, other !2066: { b256 }) -> bool, !2069 {
        entry(self: { b256 }, other: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2070
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { b256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7, !2070
        v9 = load v8
        v10 = call eq_111(v4, v9), !2073
        ret bool v10
    }

    pub fn eq_111(self !2074: b256, other !2075: b256) -> bool, !2078 {
        entry(self: b256, other: b256):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn require_112(condition !1895: bool, value !1896: { u64 }) -> (), !2079 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_15(condition), !2080
        cbr v0, block0(), block1(), !1900

        block0():
        v1 = call log_113(value), !2081
        v2 = const u64 18446744073709486080, !1907
        v3 = call revert_102(v2), !2082
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_113(value !1912: { u64 }) -> (), !2083 {
        entry(value: { u64 }):
        v0 = call encode_114(value), !1916
        v1 = const u64 5650517601072614705
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_114(item !1917: { u64 }) -> slice, !2084 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_100(), !2085
        v1 = call abi_encode_115(item, v0), !2086
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !2087
        ret slice v5
    }

    pub fn abi_encode_115(self !2088: { u64 }, buffer !2089: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !2092 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !2093
        store self to v0, !2093
        v1 = get_local ptr { u64 }, __matched_value_1, !2094
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2094
        v4 = load v3
        v5 = const u64 0, !2094
        v6 = call eq_16(v4, v5), !2097
        cbr v6, block0(), block1(), !2095

        block0():
        v7 = const u64 0, !2098
        v8 = call abi_encode_99(v7, buffer), !2101
        br block53(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_1, !2094
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2094
        v12 = load v11
        v13 = const u64 1, !2094
        v14 = call eq_16(v12, v13), !2104
        cbr v14, block2(), block3(), !2102

        block2():
        v15 = const u64 1, !2105
        v16 = call abi_encode_99(v15, buffer), !2108
        br block52(v16)

        block3():
        v17 = get_local ptr { u64 }, __matched_value_1, !2094
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2094
        v20 = load v19
        v21 = const u64 2, !2094
        v22 = call eq_16(v20, v21), !2111
        cbr v22, block4(), block5(), !2109

        block4():
        v23 = const u64 2, !2112
        v24 = call abi_encode_99(v23, buffer), !2115
        br block51(v24)

        block5():
        v25 = get_local ptr { u64 }, __matched_value_1, !2094
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !2094
        v28 = load v27
        v29 = const u64 3, !2094
        v30 = call eq_16(v28, v29), !2118
        cbr v30, block6(), block7(), !2116

        block6():
        v31 = const u64 3, !2119
        v32 = call abi_encode_99(v31, buffer), !2122
        br block50(v32)

        block7():
        v33 = get_local ptr { u64 }, __matched_value_1, !2094
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !2094
        v36 = load v35
        v37 = const u64 4, !2094
        v38 = call eq_16(v36, v37), !2125
        cbr v38, block8(), block9(), !2123

        block8():
        v39 = const u64 4, !2126
        v40 = call abi_encode_99(v39, buffer), !2129
        br block49(v40)

        block9():
        v41 = get_local ptr { u64 }, __matched_value_1, !2094
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !2094
        v44 = load v43
        v45 = const u64 5, !2094
        v46 = call eq_16(v44, v45), !2132
        cbr v46, block10(), block11(), !2130

        block10():
        v47 = const u64 5, !2133
        v48 = call abi_encode_99(v47, buffer), !2136
        br block48(v48)

        block11():
        v49 = get_local ptr { u64 }, __matched_value_1, !2094
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !2094
        v52 = load v51
        v53 = const u64 6, !2094
        v54 = call eq_16(v52, v53), !2139
        cbr v54, block12(), block13(), !2137

        block12():
        v55 = const u64 6, !2140
        v56 = call abi_encode_99(v55, buffer), !2143
        br block47(v56)

        block13():
        v57 = get_local ptr { u64 }, __matched_value_1, !2094
        v58 = const u64 0
        v59 = get_elem_ptr v57, ptr u64, v58, !2094
        v60 = load v59
        v61 = const u64 7, !2094
        v62 = call eq_16(v60, v61), !2146
        cbr v62, block14(), block15(), !2144

        block14():
        v63 = const u64 7, !2147
        v64 = call abi_encode_99(v63, buffer), !2150
        br block46(v64)

        block15():
        v65 = get_local ptr { u64 }, __matched_value_1, !2094
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !2094
        v68 = load v67
        v69 = const u64 8, !2094
        v70 = call eq_16(v68, v69), !2153
        cbr v70, block16(), block17(), !2151

        block16():
        v71 = const u64 8, !2154
        v72 = call abi_encode_99(v71, buffer), !2157
        br block45(v72)

        block17():
        v73 = get_local ptr { u64 }, __matched_value_1, !2094
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !2094
        v76 = load v75
        v77 = const u64 9, !2094
        v78 = call eq_16(v76, v77), !2160
        cbr v78, block18(), block19(), !2158

        block18():
        v79 = const u64 9, !2161
        v80 = call abi_encode_99(v79, buffer), !2164
        br block44(v80)

        block19():
        v81 = get_local ptr { u64 }, __matched_value_1, !2094
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr u64, v82, !2094
        v84 = load v83
        v85 = const u64 10, !2094
        v86 = call eq_16(v84, v85), !2167
        cbr v86, block20(), block21(), !2165

        block20():
        v87 = const u64 10, !2168
        v88 = call abi_encode_99(v87, buffer), !2171
        br block43(v88)

        block21():
        v89 = get_local ptr { u64 }, __matched_value_1, !2094
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr u64, v90, !2094
        v92 = load v91
        v93 = const u64 11, !2094
        v94 = call eq_16(v92, v93), !2174
        cbr v94, block22(), block23(), !2172

        block22():
        v95 = const u64 11, !2175
        v96 = call abi_encode_99(v95, buffer), !2178
        br block42(v96)

        block23():
        v97 = get_local ptr { u64 }, __matched_value_1, !2094
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr u64, v98, !2094
        v100 = load v99
        v101 = const u64 12, !2094
        v102 = call eq_16(v100, v101), !2181
        cbr v102, block24(), block25(), !2179

        block24():
        v103 = const u64 12, !2182
        v104 = call abi_encode_99(v103, buffer), !2185
        br block41(v104)

        block25():
        v105 = get_local ptr { u64 }, __matched_value_1, !2094
        v106 = const u64 0
        v107 = get_elem_ptr v105, ptr u64, v106, !2094
        v108 = load v107
        v109 = const u64 13, !2094
        v110 = call eq_16(v108, v109), !2188
        cbr v110, block26(), block27(), !2186

        block26():
        v111 = const u64 13, !2189
        v112 = call abi_encode_99(v111, buffer), !2192
        br block40(v112)

        block27():
        v113 = get_local ptr { u64 }, __matched_value_1, !2094
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u64, v114, !2094
        v116 = load v115
        v117 = const u64 14, !2094
        v118 = call eq_16(v116, v117), !2195
        cbr v118, block28(), block29(), !2193

        block28():
        v119 = const u64 14, !2196
        v120 = call abi_encode_99(v119, buffer), !2199
        br block39(v120)

        block29():
        v121 = get_local ptr { u64 }, __matched_value_1, !2094
        v122 = const u64 0
        v123 = get_elem_ptr v121, ptr u64, v122, !2094
        v124 = load v123
        v125 = const u64 15, !2094
        v126 = call eq_16(v124, v125), !2202
        cbr v126, block30(), block31(), !2200

        block30():
        v127 = const u64 15, !2203
        v128 = call abi_encode_99(v127, buffer), !2206
        br block38(v128)

        block31():
        v129 = get_local ptr { u64 }, __matched_value_1, !2094
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr u64, v130, !2094
        v132 = load v131
        v133 = const u64 16, !2094
        v134 = call eq_16(v132, v133), !2209
        cbr v134, block32(), block33(), !2207

        block32():
        v135 = const u64 16, !2210
        v136 = call abi_encode_99(v135, buffer), !2213
        br block37(v136)

        block33():
        v137 = get_local ptr { u64 }, __matched_value_1, !2094
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !2094
        v140 = load v139
        v141 = const u64 17, !2094
        v142 = call eq_16(v140, v141), !2216
        cbr v142, block34(), block35(), !2214

        block34():
        v143 = const u64 17, !2217
        v144 = call abi_encode_99(v143, buffer), !2220
        br block36(v144)

        block35():
        v145 = const u64 14757395258967588866, !2093
        revert v145, !2093

        block36(v146: { { u64, u64, u64 } }):
        br block37(v146)

        block37(v147: { { u64, u64, u64 } }):
        br block38(v147)

        block38(v148: { { u64, u64, u64 } }):
        br block39(v148)

        block39(v149: { { u64, u64, u64 } }):
        br block40(v149)

        block40(v150: { { u64, u64, u64 } }):
        br block41(v150)

        block41(v151: { { u64, u64, u64 } }):
        br block42(v151)

        block42(v152: { { u64, u64, u64 } }):
        br block43(v152)

        block43(v153: { { u64, u64, u64 } }):
        br block44(v153)

        block44(v154: { { u64, u64, u64 } }):
        br block45(v154)

        block45(v155: { { u64, u64, u64 } }):
        br block46(v155)

        block46(v156: { { u64, u64, u64 } }):
        br block47(v156)

        block47(v157: { { u64, u64, u64 } }):
        br block48(v157)

        block48(v158: { { u64, u64, u64 } }):
        br block49(v158)

        block49(v159: { { u64, u64, u64 } }):
        br block50(v159)

        block50(v160: { { u64, u64, u64 } }):
        br block51(v160)

        block51(v161: { { u64, u64, u64 } }):
        br block52(v161)

        block52(v162: { { u64, u64, u64 } }):
        br block53(v162)

        block53(v163: { { u64, u64, u64 } }):
        v164 = get_local ptr { { u64, u64, u64 } }, buffer_, !2221
        store v163 to v164, !2221
        v165 = get_local ptr { { u64, u64, u64 } }, buffer_, !2222
        v166 = load v165
        ret { { u64, u64, u64 } } v166
    }

    pub fn read_116(self !2224: { b256, u64, b256 }) -> bool, !2228 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_129(self), !2231
        v1 = call offset_130(self), !2234
        v2 = call read_118(v0, v1), !2237
        v3 = call unwrap_117(v2), !2240
        ret bool v3
    }

    pub fn unwrap_117(self !2242: { u64, ( () | bool ) }) -> bool, !2245 {
        local { u64, ( () | bool ) } __matched_value_4
        local bool inner_value

        entry(self: { u64, ( () | bool ) }):
        v0 = get_local ptr { u64, ( () | bool ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | bool ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !2250
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | bool ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr bool, v8, v9
        v11 = load v10
        v12 = get_local ptr bool, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr bool, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !2256
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn read_118(slot !2258: b256, offset !2259: u64) -> { u64, ( () | bool ) }, !2262 {
        local { u64, ( () | bool ) } __anon_0
        local { u64, ( () | bool ) } __anon_1
        local { u64, ( () | bool ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 1
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !2266
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | bool ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | bool ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_119(slot, offset), !2271
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !2277
        v34 = call alloc_51(v33), !2280
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | bool ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !2290
        v54 = call read_128(v53), !2293
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr bool, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | bool ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | bool ) }):
        ret { u64, ( () | bool ) } v64
    }

    fn slot_calculator_119(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !2298 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 1
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !2303
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !2307
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !2311
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !2315
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !2320
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool false
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !2327
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !2332
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !2336
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !2340
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !2344
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !2348
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !2353
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !2359
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !2363
        v51 = call subtract_125(v47, v50), !2366
        v52 = call add_124(v44, v51), !2369
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !2373
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn rsh_120(self !2377: u64, other !2378: u64) -> u64, !2381 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn modulo_121(self !2382: u64, other !2383: u64) -> u64, !2386 {
        entry(self: u64, other: u64):
        v0 = mod self, other
        ret u64 v0
    }

    pub fn eq_122(self !2387: bool, other !2388: bool) -> bool, !2391 {
        entry(self: bool, other: bool):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn as_u256_123(self !2393: b256) -> u256, !2396 {
        entry(self: b256):
        v0 = asm(input: self) -> u256 input, !2397 {
        }
        ret u256 v0
    }

    pub fn add_124(self !2398: u256, other !2399: u256) -> u256, !2402 {
        entry(self: u256, other: u256):
        v0 = add self, other
        ret u256 v0
    }

    pub fn subtract_125(self !2403: u256, other !2404: u256) -> u256, !2407 {
        entry(self: u256, other: u256):
        v0 = sub self, other
        ret u256 v0
    }

    pub fn as_u256_126(self !2408: u64) -> u256, !2411 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !2412
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !2412
        v3 = const u64 0, !2413
        store v3 to v2, !2412
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !2412
        v6 = const u64 0, !2414
        store v6 to v5, !2412
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !2412
        v9 = const u64 0, !2415
        store v9 to v8, !2412
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !2412
        store self to v11, !2412
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !2416
        store v12 to v13, !2416
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !2417
        v15 = asm(input: v14) -> u256 input, !2418 {
        }
        ret u256 v15
    }

    pub fn as_b256_127(self !2419: u256) -> b256, !2422 {
        entry(self: u256):
        v0 = asm(input: self) -> b256 input, !2423 {
        }
        ret b256 v0
    }

    pub fn read_128(self !1179: u64) -> bool, !2424 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> bool ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 1
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> bool val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> bool val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: bool):
        br block5(v7)

        block5(v8: bool):
        ret bool v8
    }

    pub fn slot_129(self !2426: { b256, u64, b256 }) -> b256, !2429 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_130(self !2431: { b256, u64, b256 }) -> u64, !2434 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    fn accrue_internal_131() -> (), !2438 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_10
        local { b256, u64, b256 } __anon_11
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_8
        local { b256, u64, b256 } __anon_9
        local { u256, u256 } __tuple_7
        local { u256, u256 } __tuple_7_
        local u256 base_borrow_index
        local u256 base_scale
        local u256 base_supply_index
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 now
        local u256 time_elapsed

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !2439
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2439
        store v3 to v2, !2439
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !2439
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2439
        store v9 to v8, !2439
        v10 = load v0
        v11 = call read_132(v10), !2442
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2443
        store v11 to v12, !2443
        v13 = call timestamp_141(), !2446
        v14 = call into_139(v13), !2449
        v15 = get_local ptr u256, now, !2450
        store v14 to v15, !2450
        v16 = get_local ptr u256, now, !2451
        v17 = load v16
        v18 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2452
        v19 = const u64 6
        v20 = get_elem_ptr v18, ptr u256, v19, !2453
        v21 = load v20
        v22 = call subtract_125(v17, v21), !2456
        v23 = get_local ptr u256, time_elapsed, !2457
        store v22 to v23, !2457
        v24 = get_local ptr u256, time_elapsed, !2458
        v25 = load v24
        v26 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !2459
        v27 = call gt_151(v25, v26), !2462
        cbr v27, block0(), block10(), !2460

        block0():
        v28 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2463
        v29 = const u64 6
        v30 = get_elem_ptr v28, ptr u256, v29, !2453
        v31 = load v30
        v32 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !2464
        v33 = call neq_152(v31, v32), !2467
        cbr v33, block1(), block2(), !2465

        block1():
        v34 = get_local ptr u256, now, !2468
        v35 = load v34
        v36 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2469
        v37 = const u64 6
        v38 = get_elem_ptr v36, ptr u256, v37, !2453
        v39 = load v38
        v40 = call accrued_interest_indices_154(v35, v39), !2472
        v41 = get_local ptr { u256, u256 }, __tuple_7, !2473
        store v40 to v41, !2473
        v42 = get_local ptr { u256, u256 }, __tuple_7, !2473
        v43 = load v42
        v44 = get_local ptr { u256, u256 }, __tuple_7_, !2473
        store v43 to v44, !2473
        v45 = get_local ptr { u256, u256 }, __tuple_7_, !2473
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u256, v46, !2473
        v48 = load v47
        v49 = get_local ptr u256, base_supply_index, !2473
        store v48 to v49, !2473
        v50 = get_local ptr { u256, u256 }, __tuple_7_, !2473
        v51 = const u64 1
        v52 = get_elem_ptr v50, ptr u256, v51, !2473
        v53 = load v52
        v54 = get_local ptr u256, base_borrow_index, !2473
        store v53 to v54, !2473
        v55 = get_local ptr u256, base_supply_index, !2474
        v56 = load v55
        v57 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2475
        v58 = const u64 0
        v59 = get_elem_ptr v57, ptr u256, v58, !2475
        store v56 to v59, !2475
        v60 = get_local ptr u256, base_borrow_index, !2476
        v61 = load v60
        v62 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2477
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u256, v63, !2477
        store v61 to v64, !2477
        v65 = const unit ()
        br block3(v65)

        block2():
        v66 = const unit ()
        br block3(v66)

        block3(v67: ()):
        v68 = const u64 10, !2478
        v69 = call from_140(v68), !2481
        v70 = get_local ptr { b256, u64, b256 }, __anon_1, !2482
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr b256, v71
        v73 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2482
        store v73 to v72, !2482
        v74 = const u64 1
        v75 = get_elem_ptr v70, ptr u64, v74
        v76 = const u64 0
        store v76 to v75, !2482
        v77 = const u64 2
        v78 = get_elem_ptr v70, ptr b256, v77
        v79 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2482
        store v79 to v78, !2482
        v80 = load v70
        v81 = call read_164(v80), !2485
        v82 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_2
        store v81 to v82
        v83 = const u64 1
        v84 = get_elem_ptr v82, ptr u64, v83, !2486
        v85 = load v84
        v86 = call pow_172(v69, v85), !2489
        v87 = get_local ptr u256, base_scale, !2490
        store v86 to v87, !2490
        v88 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2491
        v89 = const u64 4
        v90 = get_elem_ptr v88, ptr u256, v89, !2492
        v91 = load v90
        v92 = get_local ptr { b256, u64, b256 }, __anon_3, !2493
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr b256, v93
        v95 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2493
        store v95 to v94, !2493
        v96 = const u64 1
        v97 = get_elem_ptr v92, ptr u64, v96
        v98 = const u64 0
        store v98 to v97, !2493
        v99 = const u64 2
        v100 = get_elem_ptr v92, ptr b256, v99
        v101 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2493
        store v101 to v100, !2493
        v102 = load v92
        v103 = call read_164(v102), !2496
        v104 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_4
        store v103 to v104
        v105 = const u64 15
        v106 = get_elem_ptr v104, ptr u256, v105, !2497
        v107 = load v106
        v108 = call ge_178(v91, v107), !2500
        cbr v108, block4(), block5(), !2498

        block4():
        v109 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2501
        v110 = const u64 2
        v111 = get_elem_ptr v109, ptr u256, v110, !2502
        v112 = load v111
        v113 = get_local ptr { b256, u64, b256 }, __anon_5, !2503
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr b256, v114
        v116 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2503
        store v116 to v115, !2503
        v117 = const u64 1
        v118 = get_elem_ptr v113, ptr u64, v117
        v119 = const u64 0
        store v119 to v118, !2503
        v120 = const u64 2
        v121 = get_elem_ptr v113, ptr b256, v120
        v122 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2503
        store v122 to v121, !2503
        v123 = load v113
        v124 = call read_164(v123), !2506
        v125 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_6
        store v124 to v125
        v126 = const u64 13
        v127 = get_elem_ptr v125, ptr u256, v126, !2507
        v128 = load v127
        v129 = get_local ptr u256, time_elapsed, !2508
        v130 = load v129
        v131 = call multiply_158(v128, v130), !2511
        v132 = get_local ptr u256, base_scale, !2512
        v133 = load v132
        v134 = call multiply_158(v131, v133), !2515
        v135 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2516
        v136 = const u64 4
        v137 = get_elem_ptr v135, ptr u256, v136, !2492
        v138 = load v137
        v139 = call divide_157(v134, v138), !2519
        v140 = call add_124(v112, v139), !2522
        v141 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2520
        v142 = const u64 2
        v143 = get_elem_ptr v141, ptr u256, v142, !2520
        store v140 to v143, !2520
        v144 = const unit ()
        br block6(v144)

        block5():
        v145 = const unit ()
        br block6(v145)

        block6(v146: ()):
        v147 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2523
        v148 = const u64 5
        v149 = get_elem_ptr v147, ptr u256, v148, !2524
        v150 = load v149
        v151 = get_local ptr { b256, u64, b256 }, __anon_7, !2525
        v152 = const u64 0
        v153 = get_elem_ptr v151, ptr b256, v152
        v154 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2525
        store v154 to v153, !2525
        v155 = const u64 1
        v156 = get_elem_ptr v151, ptr u64, v155
        v157 = const u64 0
        store v157 to v156, !2525
        v158 = const u64 2
        v159 = get_elem_ptr v151, ptr b256, v158
        v160 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2525
        store v160 to v159, !2525
        v161 = load v151
        v162 = call read_164(v161), !2528
        v163 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_8
        store v162 to v163
        v164 = const u64 15
        v165 = get_elem_ptr v163, ptr u256, v164, !2497
        v166 = load v165
        v167 = call ge_178(v150, v166), !2531
        cbr v167, block7(), block8(), !2529

        block7():
        v168 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2532
        v169 = const u64 3
        v170 = get_elem_ptr v168, ptr u256, v169, !2533
        v171 = load v170
        v172 = get_local ptr { b256, u64, b256 }, __anon_9, !2534
        v173 = const u64 0
        v174 = get_elem_ptr v172, ptr b256, v173
        v175 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2534
        store v175 to v174, !2534
        v176 = const u64 1
        v177 = get_elem_ptr v172, ptr u64, v176
        v178 = const u64 0
        store v178 to v177, !2534
        v179 = const u64 2
        v180 = get_elem_ptr v172, ptr b256, v179
        v181 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2534
        store v181 to v180, !2534
        v182 = load v172
        v183 = call read_164(v182), !2537
        v184 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_10
        store v183 to v184
        v185 = const u64 14
        v186 = get_elem_ptr v184, ptr u256, v185, !2538
        v187 = load v186
        v188 = get_local ptr u256, time_elapsed, !2539
        v189 = load v188
        v190 = call multiply_158(v187, v189), !2542
        v191 = get_local ptr u256, base_scale, !2543
        v192 = load v191
        v193 = call multiply_158(v190, v192), !2546
        v194 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2547
        v195 = const u64 5
        v196 = get_elem_ptr v194, ptr u256, v195, !2524
        v197 = load v196
        v198 = call divide_157(v193, v197), !2550
        v199 = call add_124(v171, v198), !2553
        v200 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2551
        v201 = const u64 3
        v202 = get_elem_ptr v200, ptr u256, v201, !2551
        store v199 to v202, !2551
        v203 = const unit ()
        br block9(v203)

        block8():
        v204 = const unit ()
        br block9(v204)

        block9(v205: ()):
        v206 = get_local ptr u256, now, !2554
        v207 = load v206
        v208 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2555
        v209 = const u64 6
        v210 = get_elem_ptr v208, ptr u256, v209, !2555
        store v207 to v210, !2555
        v211 = get_local ptr { b256, u64, b256 }, __anon_11, !2556
        v212 = const u64 0
        v213 = get_elem_ptr v211, ptr b256, v212
        v214 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2556
        store v214 to v213, !2556
        v215 = const u64 1
        v216 = get_elem_ptr v211, ptr u64, v215
        v217 = const u64 0
        store v217 to v216, !2556
        v218 = const u64 2
        v219 = get_elem_ptr v211, ptr b256, v218
        v220 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2556
        store v220 to v219, !2556
        v221 = load v211
        v222 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2557
        v223 = load v222
        v224 = call write_179(v221, v223), !2560
        v225 = const unit ()
        br block11(v225)

        block10():
        v226 = const unit ()
        br block11(v226)

        block11(v227: ()):
        v228 = const unit ()
        ret () v228
    }

    pub fn read_132(self !2224: { b256, u64, b256 }) -> { u256, u256, u256, u256, u256, u256, u256 }, !2561 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_137(self), !2562
        v1 = call offset_138(self), !2563
        v2 = call read_134(v0, v1), !2564
        v3 = call unwrap_133(v2), !2565
        ret { u256, u256, u256, u256, u256, u256, u256 } v3
    }

    pub fn unwrap_133(self !2242: { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }) -> { u256, u256, u256, u256, u256, u256, u256 }, !2566 {
        local { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) } __matched_value_4
        local { u256, u256, u256, u256, u256, u256, u256 } inner_value

        entry(self: { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }):
        v0 = get_local ptr { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !2567
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u256, u256, u256, u256, u256, u256, u256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !2568
        br block2(v16)

        block2(v17: { u256, u256, u256, u256, u256, u256, u256 }):
        ret { u256, u256, u256, u256, u256, u256, u256 } v17
    }

    pub fn read_134(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, !2569 {
        local { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) } __anon_0
        local { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) } __anon_1
        local { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 224
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !2570
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_135(slot, offset), !2571
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !2572
        v34 = call alloc_51(v33), !2573
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !2574
        v54 = call read_136(v53), !2575
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { u256, u256, u256, u256, u256, u256, u256 }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) }):
        ret { u64, ( () | { u256, u256, u256, u256, u256, u256, u256 } ) } v64
    }

    fn slot_calculator_135(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !2576 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 224
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !2577
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !2578
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !2579
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !2580
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !2581
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !2582
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !2583
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !2584
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !2585
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !2586
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !2587
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !2588
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !2589
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !2590
        v51 = call subtract_125(v47, v50), !2591
        v52 = call add_124(v44, v51), !2592
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !2593
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_136(self !1179: u64) -> { u256, u256, u256, u256, u256, u256, u256 }, !2594 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { u256, u256, u256, u256, u256, u256, u256 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 224
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { u256, u256, u256, u256, u256, u256, u256 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u256, u256, u256, u256, u256, u256, u256 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { u256, u256, u256, u256, u256, u256, u256 }):
        br block5(v7)

        block5(v8: { u256, u256, u256, u256, u256, u256, u256 }):
        ret { u256, u256, u256, u256, u256, u256, u256 } v8
    }

    pub fn slot_137(self !2426: { b256, u64, b256 }) -> b256, !2595 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_138(self !2431: { b256, u64, b256 }) -> u64, !2596 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn into_139(self !1732: u64) -> u256, !2597 {
        entry(self: u64):
        v0 = call from_140(self), !2598
        ret u256 v0
    }

    pub fn from_140(num !2600: u64) -> u256, !2603 {
        entry(num: u64):
        v0 = call as_u256_126(num), !2606
        ret u256 v0
    }

    fn timestamp_141() -> u64, !2609 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_config ptr u64, DEBUG_STEP, !2610
        v1 = load v0
        v2 = const u64 0, !2611
        v3 = call gt_40(v1, v2), !2614
        cbr v3, block0(), block1(), !2612

        block0():
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !2615
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !2615
        store v7 to v6, !2615
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !2615
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !2615
        store v13 to v12, !2615
        v14 = load v4
        v15 = call read_142(v14), !2618
        br block2(v15)

        block1():
        v16 = call timestamp_148(), !2621
        br block2(v16)

        block2(v17: u64):
        ret u64 v17
    }

    pub fn read_142(self !2224: { b256, u64, b256 }) -> u64, !2622 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_146(self), !2623
        v1 = call offset_147(self), !2624
        v2 = call read_144(v0, v1), !2625
        v3 = call unwrap_143(v2), !2626
        ret u64 v3
    }

    pub fn unwrap_143(self !2242: { u64, ( () | u64 ) }) -> u64, !2627 {
        local { u64, ( () | u64 ) } __matched_value_4
        local u64 inner_value

        entry(self: { u64, ( () | u64 ) }):
        v0 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !2628
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u64, v8, v9
        v11 = load v10
        v12 = get_local ptr u64, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr u64, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !2629
        br block2(v16)

        block2(v17: u64):
        ret u64 v17
    }

    pub fn read_144(slot !2258: b256, offset !2259: u64) -> { u64, ( () | u64 ) }, !2630 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, ( () | u64 ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 8
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !2631
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | u64 ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_145(slot, offset), !2632
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !2633
        v34 = call alloc_51(v33), !2634
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !2635
        v54 = call read_6(v53), !2636
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr u64, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | u64 ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v64
    }

    fn slot_calculator_145(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !2637 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 8
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !2638
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !2639
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !2640
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !2641
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !2642
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool false
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !2643
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !2644
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !2645
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !2646
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !2647
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !2648
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !2649
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !2650
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !2651
        v51 = call subtract_125(v47, v50), !2652
        v52 = call add_124(v44, v51), !2653
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !2654
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn slot_146(self !2426: { b256, u64, b256 }) -> b256, !2655 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_147(self !2431: { b256, u64, b256 }) -> u64, !2656 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn timestamp_148() -> u64, !2660 {
        entry():
        v0 = call height_150(), !2663
        v1 = call timestamp_of_block_149(v0), !2666
        ret u64 v1
    }

    pub fn timestamp_of_block_149(block_height !2667: u64) -> u64, !2670 {
        entry(block_height: u64):
        v0 = asm(timestamp, height: block_height) -> u64 timestamp, !2671 {
            time   timestamp height, !2672
        }
        ret u64 v0
    }

    pub fn height_150() -> u64, !2675 {
        entry():
        v0 = asm(height) -> u64 height, !2676 {
            bhei   height, !2677
        }
        ret u64 v0
    }

    pub fn gt_151(self !2678: u256, other !2679: u256) -> bool, !2682 {
        entry(self: u256, other: u256):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn neq_152(self !1300: u256, other !1301: u256) -> bool, !2683 {
        entry(self: u256, other: u256):
        v0 = call eq_153(self, other), !2684
        v1 = call not_15(v0), !2685
        ret bool v1
    }

    pub fn eq_153(self !2686: u256, other !2687: u256) -> bool, !2690 {
        entry(self: u256, other: u256):
        v0 = cmp eq self other
        ret bool v0
    }

    fn accrued_interest_indices_154(now !2691: u256, last_accrual_time !2692: u256) -> { u256, u256 }, !2695 {
        local { u256, u256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u256, u256 } __anon_2
        local mut u256 base_borrow_index
        local u256 base_borrow_index_delta
        local mut u256 base_supply_index
        local u256 base_supply_index_delta
        local u256 borrow_rate
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 supply_rate
        local u256 time_elapsed
        local u256 utilization

        entry(now: u256, last_accrual_time: u256):
        v0 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !2696
        v1 = call eq_153(last_accrual_time, v0), !2699
        cbr v1, block0(), block1(), !2697

        block0():
        v2 = get_local ptr { u256, u256 }, __anon_0, !2700
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u256, v3, !2700
        v5 = const u256 0x00000000000000000000000000000000000000000000000000038d7ea4c68000, !2701
        store v5 to v4, !2700
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u256, v6, !2700
        store v5 to v7, !2700
        v8 = load v2
        ret { u256, u256 } v8, !2702

        block1():
        v9 = const unit ()
        br block2(v9)

        block2(v10: ()):
        v11 = get_local ptr { b256, u64, b256 }, __anon_1, !2703
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12
        v14 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2703
        store v14 to v13, !2703
        v15 = const u64 1
        v16 = get_elem_ptr v11, ptr u64, v15
        v17 = const u64 0
        store v17 to v16, !2703
        v18 = const u64 2
        v19 = get_elem_ptr v11, ptr b256, v18
        v20 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2703
        store v20 to v19, !2703
        v21 = load v11
        v22 = call read_132(v21), !2706
        v23 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2707
        store v22 to v23, !2707
        v24 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2708
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u256, v25, !2709
        v27 = load v26
        v28 = get_local ptr u256, base_supply_index, !2710
        store v27 to v28, !2710
        v29 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2711
        v30 = const u64 1
        v31 = get_elem_ptr v29, ptr u256, v30, !2712
        v32 = load v31
        v33 = get_local ptr u256, base_borrow_index, !2713
        store v32 to v33, !2713
        v34 = call subtract_125(now, last_accrual_time), !2716
        v35 = get_local ptr u256, time_elapsed, !2717
        store v34 to v35, !2717
        v36 = get_local ptr u256, time_elapsed, !2718
        v37 = load v36
        v38 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !2719
        v39 = call gt_151(v37, v38), !2722
        cbr v39, block3(), block4(), !2720

        block3():
        v40 = call get_utilization_internal_155(), !2725
        v41 = get_local ptr u256, utilization, !2726
        store v40 to v41, !2726
        v42 = get_local ptr u256, utilization, !2727
        v43 = load v42
        v44 = call get_supply_rate_internal_161(v43), !2730
        v45 = get_local ptr u256, supply_rate, !2731
        store v44 to v45, !2731
        v46 = get_local ptr u256, utilization, !2732
        v47 = load v46
        v48 = call get_borrow_rate_internal_171(v47), !2735
        v49 = get_local ptr u256, borrow_rate, !2736
        store v48 to v49, !2736
        v50 = get_local ptr u256, base_supply_index, !2737
        v51 = load v50
        v52 = get_local ptr u256, supply_rate, !2738
        v53 = load v52
        v54 = call multiply_158(v51, v53), !2741
        v55 = get_local ptr u256, time_elapsed, !2742
        v56 = load v55
        v57 = call multiply_158(v54, v56), !2745
        v58 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v59 = call divide_157(v57, v58), !2749
        v60 = get_local ptr u256, base_supply_index_delta, !2750
        store v59 to v60, !2750
        v61 = get_local ptr u256, base_borrow_index, !2751
        v62 = load v61
        v63 = get_local ptr u256, borrow_rate, !2752
        v64 = load v63
        v65 = call multiply_158(v62, v64), !2755
        v66 = get_local ptr u256, time_elapsed, !2756
        v67 = load v66
        v68 = call multiply_158(v65, v67), !2759
        v69 = call divide_157(v68, v58), !2762
        v70 = get_local ptr u256, base_borrow_index_delta, !2763
        store v69 to v70, !2763
        v71 = get_local ptr u256, base_supply_index, !2764
        v72 = load v71
        v73 = get_local ptr u256, base_supply_index_delta, !2765
        v74 = load v73
        v75 = call add_124(v72, v74), !2768
        v76 = get_local ptr u256, base_supply_index, !2766
        store v75 to v76, !2766
        v77 = get_local ptr u256, base_borrow_index, !2769
        v78 = load v77
        v79 = get_local ptr u256, base_borrow_index_delta, !2770
        v80 = load v79
        v81 = call add_124(v78, v80), !2773
        v82 = get_local ptr u256, base_borrow_index, !2771
        store v81 to v82, !2771
        v83 = const unit ()
        br block5(v83)

        block4():
        v84 = const unit ()
        br block5(v84)

        block5(v85: ()):
        v86 = get_local ptr u256, base_supply_index, !2774
        v87 = load v86
        v88 = get_local ptr u256, base_borrow_index, !2775
        v89 = load v88
        v90 = get_local ptr { u256, u256 }, __anon_2, !2776
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u256, v91, !2776
        store v87 to v92, !2776
        v93 = const u64 1
        v94 = get_elem_ptr v90, ptr u256, v93, !2776
        store v89 to v94, !2776
        v95 = load v90
        ret { u256, u256 } v95
    }

    fn get_utilization_internal_155() -> u256, !2779 {
        local { b256, u64, b256 } __anon_0
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 total_borrow_base
        local u256 total_supply_base

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !2780
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2780
        store v3 to v2, !2780
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !2780
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !2780
        store v9 to v8, !2780
        v10 = load v0
        v11 = call read_132(v10), !2783
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2784
        store v11 to v12, !2784
        v13 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2785
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u256, v14, !2709
        v16 = load v15
        v17 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2786
        v18 = const u64 4
        v19 = get_elem_ptr v17, ptr u256, v18, !2492
        v20 = load v19
        v21 = call present_value_supply_156(v16, v20), !2789
        v22 = get_local ptr u256, total_supply_base, !2790
        store v21 to v22, !2790
        v23 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2791
        v24 = const u64 1
        v25 = get_elem_ptr v23, ptr u256, v24, !2712
        v26 = load v25
        v27 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !2792
        v28 = const u64 5
        v29 = get_elem_ptr v27, ptr u256, v28, !2524
        v30 = load v29
        v31 = call present_value_borrow_159(v26, v30), !2795
        v32 = get_local ptr u256, total_borrow_base, !2796
        store v31 to v32, !2796
        v33 = get_local ptr u256, total_supply_base, !2797
        v34 = load v33
        v35 = call zero_160(), !2800
        v36 = call eq_153(v34, v35), !2803
        cbr v36, block0(), block1(), !2801

        block0():
        v37 = call zero_160(), !2806
        br block2(v37)

        block1():
        v38 = get_local ptr u256, total_borrow_base, !2807
        v39 = load v38
        v40 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v41 = call multiply_158(v39, v40), !2810
        v42 = get_local ptr u256, total_supply_base, !2811
        v43 = load v42
        v44 = call divide_157(v41, v43), !2814
        br block2(v44)

        block2(v45: u256):
        ret u256 v45
    }

    pub fn present_value_supply_156(base_supply_index !2815: u256, principal !2816: u256) -> u256, !2819 {
        entry(base_supply_index: u256, principal: u256):
        v0 = call multiply_158(principal, base_supply_index), !2822
        v1 = const u256 0x00000000000000000000000000000000000000000000000000038d7ea4c68000, !2701
        v2 = call divide_157(v0, v1), !2825
        ret u256 v2
    }

    pub fn divide_157(self !2826: u256, other !2827: u256) -> u256, !2830 {
        entry(self: u256, other: u256):
        v0 = div self, other
        ret u256 v0
    }

    pub fn multiply_158(self !2831: u256, other !2832: u256) -> u256, !2835 {
        entry(self: u256, other: u256):
        v0 = mul self, other
        ret u256 v0
    }

    pub fn present_value_borrow_159(base_borrow_index !2836: u256, principal !2837: u256) -> u256, !2840 {
        entry(base_borrow_index: u256, principal: u256):
        v0 = call multiply_158(principal, base_borrow_index), !2843
        v1 = const u256 0x00000000000000000000000000000000000000000000000000038d7ea4c68000, !2701
        v2 = call add_124(v0, v1), !2846
        v3 = const u256 0x0000000000000000000000000000000000000000000000000000000000000001, !2847
        v4 = call subtract_125(v2, v3), !2850
        v5 = call divide_157(v4, v1), !2853
        ret u256 v5
    }

    pub fn zero_160() -> u256, !2857 {
        entry():
        v0 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !2858
        ret u256 v0
    }

    fn get_supply_rate_internal_161(utilization !2859: u256) -> u256, !2862 {
        local { b256, u64, b256 } __anon_0
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_11
        local { b256, u64, b256 } __anon_12
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_13
        local { b256, u64, b256 } __anon_14
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_15
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9

        entry(utilization: u256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !2863
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2863
        store v3 to v2, !2863
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !2863
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2863
        store v9 to v8, !2863
        v10 = load v0
        v11 = call read_164(v10), !2866
        v12 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_1
        store v11 to v12
        v13 = const u64 3
        v14 = get_elem_ptr v12, ptr u256, v13, !2867
        v15 = load v14
        v16 = call le_162(utilization, v15), !2870
        cbr v16, block0(), block1(), !2868

        block0():
        v17 = get_local ptr { b256, u64, b256 }, __anon_2, !2871
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr b256, v18
        v20 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2871
        store v20 to v19, !2871
        v21 = const u64 1
        v22 = get_elem_ptr v17, ptr u64, v21
        v23 = const u64 0
        store v23 to v22, !2871
        v24 = const u64 2
        v25 = get_elem_ptr v17, ptr b256, v24
        v26 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2871
        store v26 to v25, !2871
        v27 = load v17
        v28 = call read_164(v27), !2874
        v29 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v28 to v29
        v30 = const u64 7
        v31 = get_elem_ptr v29, ptr u256, v30, !2875
        v32 = load v31
        v33 = get_local ptr { b256, u64, b256 }, __anon_4, !2876
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2876
        store v36 to v35, !2876
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !2876
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2876
        store v42 to v41, !2876
        v43 = load v33
        v44 = call read_164(v43), !2879
        v45 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_5
        store v44 to v45
        v46 = const u64 5
        v47 = get_elem_ptr v45, ptr u256, v46, !2880
        v48 = load v47
        v49 = call multiply_158(v48, utilization), !2883
        v50 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v51 = call divide_157(v49, v50), !2886
        v52 = call add_124(v32, v51), !2889
        br block2(v52)

        block1():
        v53 = get_local ptr { b256, u64, b256 }, __anon_6, !2890
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr b256, v54
        v56 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2890
        store v56 to v55, !2890
        v57 = const u64 1
        v58 = get_elem_ptr v53, ptr u64, v57
        v59 = const u64 0
        store v59 to v58, !2890
        v60 = const u64 2
        v61 = get_elem_ptr v53, ptr b256, v60
        v62 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2890
        store v62 to v61, !2890
        v63 = load v53
        v64 = call read_164(v63), !2893
        v65 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_7
        store v64 to v65
        v66 = const u64 7
        v67 = get_elem_ptr v65, ptr u256, v66, !2875
        v68 = load v67
        v69 = get_local ptr { b256, u64, b256 }, __anon_8, !2894
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr b256, v70
        v72 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2894
        store v72 to v71, !2894
        v73 = const u64 1
        v74 = get_elem_ptr v69, ptr u64, v73
        v75 = const u64 0
        store v75 to v74, !2894
        v76 = const u64 2
        v77 = get_elem_ptr v69, ptr b256, v76
        v78 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2894
        store v78 to v77, !2894
        v79 = load v69
        v80 = call read_164(v79), !2897
        v81 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v80 to v81
        v82 = const u64 5
        v83 = get_elem_ptr v81, ptr u256, v82, !2880
        v84 = load v83
        v85 = get_local ptr { b256, u64, b256 }, __anon_10, !2898
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86
        v88 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2898
        store v88 to v87, !2898
        v89 = const u64 1
        v90 = get_elem_ptr v85, ptr u64, v89
        v91 = const u64 0
        store v91 to v90, !2898
        v92 = const u64 2
        v93 = get_elem_ptr v85, ptr b256, v92
        v94 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2898
        store v94 to v93, !2898
        v95 = load v85
        v96 = call read_164(v95), !2901
        v97 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_11
        store v96 to v97
        v98 = const u64 3
        v99 = get_elem_ptr v97, ptr u256, v98, !2867
        v100 = load v99
        v101 = call multiply_158(v84, v100), !2904
        v102 = call divide_157(v101, v50), !2907
        v103 = call add_124(v68, v102), !2910
        v104 = get_local ptr { b256, u64, b256 }, __anon_12, !2911
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr b256, v105
        v107 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2911
        store v107 to v106, !2911
        v108 = const u64 1
        v109 = get_elem_ptr v104, ptr u64, v108
        v110 = const u64 0
        store v110 to v109, !2911
        v111 = const u64 2
        v112 = get_elem_ptr v104, ptr b256, v111
        v113 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2911
        store v113 to v112, !2911
        v114 = load v104
        v115 = call read_164(v114), !2914
        v116 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_13
        store v115 to v116
        v117 = const u64 6
        v118 = get_elem_ptr v116, ptr u256, v117, !2915
        v119 = load v118
        v120 = get_local ptr { b256, u64, b256 }, __anon_14, !2916
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr b256, v121
        v123 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2916
        store v123 to v122, !2916
        v124 = const u64 1
        v125 = get_elem_ptr v120, ptr u64, v124
        v126 = const u64 0
        store v126 to v125, !2916
        v127 = const u64 2
        v128 = get_elem_ptr v120, ptr b256, v127
        v129 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2916
        store v129 to v128, !2916
        v130 = load v120
        v131 = call read_164(v130), !2919
        v132 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_15
        store v131 to v132
        v133 = const u64 3
        v134 = get_elem_ptr v132, ptr u256, v133, !2867
        v135 = load v134
        v136 = call subtract_125(utilization, v135), !2922
        v137 = call multiply_158(v119, v136), !2925
        v138 = call divide_157(v137, v50), !2928
        v139 = call add_124(v103, v138), !2931
        br block2(v139)

        block2(v140: u256):
        ret u256 v140
    }

    pub fn le_162(self !2932: u256, other !2933: u256) -> bool, !2936 {
        entry(self: u256, other: u256):
        v0 = call lt_163(self, other), !2939
        cbr v0, block1(v0), block0(), !2940

        block0():
        v1 = call eq_153(self, other), !2943
        br block1(v1), !2940

        block1(v2: bool):
        ret bool v2
    }

    pub fn lt_163(self !2944: u256, other !2945: u256) -> bool, !2948 {
        entry(self: u256, other: u256):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn read_164(self !2224: { b256, u64, b256 }) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, !2949 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_169(self), !2950
        v1 = call offset_170(self), !2951
        v2 = call read_166(v0, v1), !2952
        v3 = call unwrap_165(v2), !2953
        ret { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } v3
    }

    pub fn unwrap_165(self !2242: { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, !2954 {
        local { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) } __matched_value_4
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } inner_value

        entry(self: { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }):
        v0 = get_local ptr { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !2955
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !2956
        br block2(v16)

        block2(v17: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        ret { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } v17
    }

    pub fn read_166(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, !2957 {
        local { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) } __anon_0
        local { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) } __anon_1
        local { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 552
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !2958
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_167(slot, offset), !2959
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !2960
        v34 = call alloc_51(v33), !2961
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !2962
        v54 = call read_168(v53), !2963
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) }):
        ret { u64, ( () | { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ) } v64
    }

    fn slot_calculator_167(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !2964 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 552
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !2965
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !2966
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !2967
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !2968
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !2969
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !2970
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !2971
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !2972
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !2973
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !2974
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !2975
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !2976
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !2977
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !2978
        v51 = call subtract_125(v47, v50), !2979
        v52 = call add_124(v44, v51), !2980
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !2981
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_168(self !1179: u64) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, !2982 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 552
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        br block5(v7)

        block5(v8: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        ret { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } v8
    }

    pub fn slot_169(self !2426: { b256, u64, b256 }) -> b256, !2983 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_170(self !2431: { b256, u64, b256 }) -> u64, !2984 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    fn get_borrow_rate_internal_171(utilization !2985: u256) -> u256, !2988 {
        local { b256, u64, b256 } __anon_0
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_11
        local { b256, u64, b256 } __anon_12
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_13
        local { b256, u64, b256 } __anon_14
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_15
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9

        entry(utilization: u256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !2989
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2989
        store v3 to v2, !2989
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !2989
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2989
        store v9 to v8, !2989
        v10 = load v0
        v11 = call read_164(v10), !2992
        v12 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_1
        store v11 to v12
        v13 = const u64 4
        v14 = get_elem_ptr v12, ptr u256, v13, !2993
        v15 = load v14
        v16 = call le_162(utilization, v15), !2996
        cbr v16, block0(), block1(), !2994

        block0():
        v17 = get_local ptr { b256, u64, b256 }, __anon_2, !2997
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr b256, v18
        v20 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2997
        store v20 to v19, !2997
        v21 = const u64 1
        v22 = get_elem_ptr v17, ptr u64, v21
        v23 = const u64 0
        store v23 to v22, !2997
        v24 = const u64 2
        v25 = get_elem_ptr v17, ptr b256, v24
        v26 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !2997
        store v26 to v25, !2997
        v27 = load v17
        v28 = call read_164(v27), !3000
        v29 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v28 to v29
        v30 = const u64 10
        v31 = get_elem_ptr v29, ptr u256, v30, !3001
        v32 = load v31
        v33 = get_local ptr { b256, u64, b256 }, __anon_4, !3002
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3002
        store v36 to v35, !3002
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !3002
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3002
        store v42 to v41, !3002
        v43 = load v33
        v44 = call read_164(v43), !3005
        v45 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_5
        store v44 to v45
        v46 = const u64 8
        v47 = get_elem_ptr v45, ptr u256, v46, !3006
        v48 = load v47
        v49 = call multiply_158(v48, utilization), !3009
        v50 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v51 = call divide_157(v49, v50), !3012
        v52 = call add_124(v32, v51), !3015
        br block2(v52)

        block1():
        v53 = get_local ptr { b256, u64, b256 }, __anon_6, !3016
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr b256, v54
        v56 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3016
        store v56 to v55, !3016
        v57 = const u64 1
        v58 = get_elem_ptr v53, ptr u64, v57
        v59 = const u64 0
        store v59 to v58, !3016
        v60 = const u64 2
        v61 = get_elem_ptr v53, ptr b256, v60
        v62 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3016
        store v62 to v61, !3016
        v63 = load v53
        v64 = call read_164(v63), !3019
        v65 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_7
        store v64 to v65
        v66 = const u64 10
        v67 = get_elem_ptr v65, ptr u256, v66, !3001
        v68 = load v67
        v69 = get_local ptr { b256, u64, b256 }, __anon_8, !3020
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr b256, v70
        v72 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3020
        store v72 to v71, !3020
        v73 = const u64 1
        v74 = get_elem_ptr v69, ptr u64, v73
        v75 = const u64 0
        store v75 to v74, !3020
        v76 = const u64 2
        v77 = get_elem_ptr v69, ptr b256, v76
        v78 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3020
        store v78 to v77, !3020
        v79 = load v69
        v80 = call read_164(v79), !3023
        v81 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v80 to v81
        v82 = const u64 8
        v83 = get_elem_ptr v81, ptr u256, v82, !3006
        v84 = load v83
        v85 = get_local ptr { b256, u64, b256 }, __anon_10, !3024
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86
        v88 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3024
        store v88 to v87, !3024
        v89 = const u64 1
        v90 = get_elem_ptr v85, ptr u64, v89
        v91 = const u64 0
        store v91 to v90, !3024
        v92 = const u64 2
        v93 = get_elem_ptr v85, ptr b256, v92
        v94 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3024
        store v94 to v93, !3024
        v95 = load v85
        v96 = call read_164(v95), !3027
        v97 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_11
        store v96 to v97
        v98 = const u64 4
        v99 = get_elem_ptr v97, ptr u256, v98, !2993
        v100 = load v99
        v101 = call multiply_158(v84, v100), !3030
        v102 = call divide_157(v101, v50), !3033
        v103 = call add_124(v68, v102), !3036
        v104 = get_local ptr { b256, u64, b256 }, __anon_12, !3037
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr b256, v105
        v107 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3037
        store v107 to v106, !3037
        v108 = const u64 1
        v109 = get_elem_ptr v104, ptr u64, v108
        v110 = const u64 0
        store v110 to v109, !3037
        v111 = const u64 2
        v112 = get_elem_ptr v104, ptr b256, v111
        v113 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3037
        store v113 to v112, !3037
        v114 = load v104
        v115 = call read_164(v114), !3040
        v116 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_13
        store v115 to v116
        v117 = const u64 9
        v118 = get_elem_ptr v116, ptr u256, v117, !3041
        v119 = load v118
        v120 = get_local ptr { b256, u64, b256 }, __anon_14, !3042
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr b256, v121
        v123 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3042
        store v123 to v122, !3042
        v124 = const u64 1
        v125 = get_elem_ptr v120, ptr u64, v124
        v126 = const u64 0
        store v126 to v125, !3042
        v127 = const u64 2
        v128 = get_elem_ptr v120, ptr b256, v127
        v129 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3042
        store v129 to v128, !3042
        v130 = load v120
        v131 = call read_164(v130), !3045
        v132 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_15
        store v131 to v132
        v133 = const u64 4
        v134 = get_elem_ptr v132, ptr u256, v133, !2993
        v135 = load v134
        v136 = call subtract_125(utilization, v135), !3048
        v137 = call multiply_158(v119, v136), !3051
        v138 = call divide_157(v137, v50), !3054
        v139 = call add_124(v103, v138), !3057
        br block2(v139)

        block2(v140: u256):
        ret u256 v140
    }

    pub fn pow_172(self !3059: u256, exponent !3060: u64) -> u256, !3063 {
        local { u64, ( () | u256 ) } __matched_value_1
        local { u64, ( () | u256 ) } __matched_value_2
        local { u64, ( () | u256 ) } __matched_value_3
        local mut u256 acc
        local mut u256 base
        local mut u64 exp
        local u256 one
        local { u64, ( () | u256 ) } res
        local { u64, ( () | u256 ) } res_
        local { u64, ( () | u256 ) } res__
        local u256 val
        local u256 val_
        local u256 val__

        entry(self: u256, exponent: u64):
        v0 = get_local ptr u256, one, !3064
        v1 = const u256 0x0000000000000000000000000000000000000000000000000000000000000001, !3065
        store v1 to v0, !3064
        v2 = const u64 0, !3066
        v3 = call eq_173(exponent, v2), !3069
        cbr v3, block0(), block1(), !3067

        block0():
        v4 = get_local ptr u256, one, !3070
        v5 = load v4
        ret u256 v5, !3071

        block1():
        v6 = const unit ()
        br block2(v6)

        block2(v7: ()):
        v8 = get_local ptr u64, exp, !3072
        store exponent to v8, !3072
        v9 = get_local ptr u256, base, !3073
        store self to v9, !3073
        v10 = get_local ptr u256, one, !3074
        v11 = load v10
        v12 = get_local ptr u256, acc, !3075
        store v11 to v12, !3075
        br while()

        while():
        v13 = get_local ptr u64, exp, !3076
        v14 = load v13
        v15 = const u64 1, !3077
        v16 = call gt_174(v14, v15), !3080
        cbr v16, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v17 = get_local ptr u64, exp, !3081
        v18 = load v17
        v19 = const u64 1, !3082
        v20 = call binary_and_175(v18, v19), !3085
        v21 = const u64 1, !3086
        v22 = call eq_173(v20, v21), !3089
        cbr v22, block3(), block10(), !3087

        block3():
        v23 = get_local ptr u256, acc, !3090
        v24 = load v23
        v25 = get_local ptr u256, base, !3091
        v26 = load v25
        v27 = call u256_checked_mul_176(v24, v26), !3094
        v28 = get_local ptr { u64, ( () | u256 ) }, res, !3095
        store v27 to v28, !3095
        v29 = get_local ptr { u64, ( () | u256 ) }, res, !3096
        v30 = load v29
        v31 = get_local ptr { u64, ( () | u256 ) }, __matched_value_1, !3097
        store v30 to v31, !3097
        v32 = get_local ptr { u64, ( () | u256 ) }, __matched_value_1, !3096
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !3096
        v35 = load v34
        v36 = const u64 1, !3096
        v37 = call eq_16(v35, v36), !3100
        cbr v37, block4(), block5(), !3098

        block4():
        v38 = get_local ptr { u64, ( () | u256 ) }, __matched_value_1, !3096
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v38, ptr u256, v39, v40
        v42 = load v41
        v43 = get_local ptr u256, val, !3101
        store v42 to v43, !3101
        v44 = get_local ptr u256, val, !3102
        v45 = load v44
        br block9(v45)

        block5():
        v46 = get_local ptr { u64, ( () | u256 ) }, __matched_value_1, !3096
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr u64, v47, !3096
        v49 = load v48
        v50 = const u64 0, !3096
        v51 = call eq_16(v49, v50), !3105
        cbr v51, block6(), block7(), !3103

        block6():
        v52 = call zero_160(), !3108
        ret u256 v52, !3109

        block7():
        v53 = const u64 14757395258967588866, !3097
        revert v53, !3097

        block8():
        br block6()

        block9(v54: u256):
        v55 = get_local ptr u256, acc, !3110
        store v54 to v55, !3110
        v56 = const unit (), !3110
        br block11(v56)

        block10():
        v57 = const unit ()
        br block11(v57)

        block11(v58: ()):
        v59 = get_local ptr u64, exp, !3111
        v60 = load v59
        v61 = const u64 1, !3112
        v62 = call rsh_177(v60, v61), !3115
        v63 = get_local ptr u64, exp, !3116
        store v62 to v63, !3116
        v64 = get_local ptr u256, base, !3117
        v65 = load v64
        v66 = get_local ptr u256, base, !3118
        v67 = load v66
        v68 = call u256_checked_mul_176(v65, v67), !3121
        v69 = get_local ptr { u64, ( () | u256 ) }, res_, !3122
        store v68 to v69, !3122
        v70 = get_local ptr { u64, ( () | u256 ) }, res_, !3123
        v71 = load v70
        v72 = get_local ptr { u64, ( () | u256 ) }, __matched_value_2, !3124
        store v71 to v72, !3124
        v73 = get_local ptr { u64, ( () | u256 ) }, __matched_value_2, !3123
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !3123
        v76 = load v75
        v77 = const u64 1, !3123
        v78 = call eq_16(v76, v77), !3127
        cbr v78, block12(), block13(), !3125

        block12():
        v79 = get_local ptr { u64, ( () | u256 ) }, __matched_value_2, !3123
        v80 = const u64 1
        v81 = const u64 1
        v82 = get_elem_ptr v79, ptr u256, v80, v81
        v83 = load v82
        v84 = get_local ptr u256, val_, !3128
        store v83 to v84, !3128
        v85 = get_local ptr u256, val_, !3129
        v86 = load v85
        br block17(v86)

        block13():
        v87 = get_local ptr { u64, ( () | u256 ) }, __matched_value_2, !3123
        v88 = const u64 0
        v89 = get_elem_ptr v87, ptr u64, v88, !3123
        v90 = load v89
        v91 = const u64 0, !3123
        v92 = call eq_16(v90, v91), !3132
        cbr v92, block14(), block15(), !3130

        block14():
        v93 = call zero_160(), !3135
        ret u256 v93, !3136

        block15():
        v94 = const u64 14757395258967588866, !3124
        revert v94, !3124

        block16():
        br block14()

        block17(v95: u256):
        v96 = get_local ptr u256, base, !3137
        store v95 to v96, !3137
        br while()

        end_while():
        v97 = get_local ptr u256, acc, !3138
        v98 = load v97
        v99 = get_local ptr u256, base, !3139
        v100 = load v99
        v101 = call u256_checked_mul_176(v98, v100), !3142
        v102 = get_local ptr { u64, ( () | u256 ) }, res__, !3143
        store v101 to v102, !3143
        v103 = get_local ptr { u64, ( () | u256 ) }, res__, !3144
        v104 = load v103
        v105 = get_local ptr { u64, ( () | u256 ) }, __matched_value_3, !3145
        store v104 to v105, !3145
        v106 = get_local ptr { u64, ( () | u256 ) }, __matched_value_3, !3144
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !3144
        v109 = load v108
        v110 = const u64 1, !3144
        v111 = call eq_16(v109, v110), !3148
        cbr v111, block18(), block19(), !3146

        block18():
        v112 = get_local ptr { u64, ( () | u256 ) }, __matched_value_3, !3144
        v113 = const u64 1
        v114 = const u64 1
        v115 = get_elem_ptr v112, ptr u256, v113, v114
        v116 = load v115
        v117 = get_local ptr u256, val__, !3149
        store v116 to v117, !3149
        v118 = get_local ptr u256, val__, !3150
        v119 = load v118
        br block23(v119)

        block19():
        v120 = get_local ptr { u64, ( () | u256 ) }, __matched_value_3, !3144
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr u64, v121, !3144
        v123 = load v122
        v124 = const u64 0, !3144
        v125 = call eq_16(v123, v124), !3153
        cbr v125, block20(), block21(), !3151

        block20():
        v126 = call zero_160(), !3156
        br block22(v126)

        block21():
        v127 = const u64 14757395258967588866, !3145
        revert v127, !3145

        block22(v128: u256):
        br block23(v128)

        block23(v129: u256):
        ret u256 v129
    }

    pub fn eq_173(self !3157: u64, other !3158: u64) -> bool, !3161 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn gt_174(self !3162: u64, other !3163: u64) -> bool, !3166 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn binary_and_175(self !3167: u64, other !3168: u64) -> u64, !3171 {
        entry(self: u64, other: u64):
        v0 = and self, other
        ret u64 v0
    }

    fn u256_checked_mul_176(a !3172: u256, b !3173: u256) -> { u64, ( () | u256 ) }, !3176 {
        local { u64, ( () | u256 ) } __anon_0
        local { u64, ( () | u256 ) } __anon_1
        local u64 of
        local u256 res

        entry(a: u256, b: u256):
        v0 = call zero_160(), !3179
        v1 = get_local ptr u256, res, !3180
        store v0 to v1, !3180
        v2 = get_local ptr u256, res, !3181
        v3 = asm(res: v2, a: a, b: b) -> u64 of, !3182 {
            wqml   res a b i48, !3183
        }
        v4 = get_local ptr u64, of, !3184
        store v3 to v4, !3184
        v5 = get_local ptr u64, of, !3185
        v6 = load v5
        v7 = const u64 0, !3186
        v8 = call neq_14(v6, v7), !3189
        cbr v8, block0(), block1(), !3187

        block0():
        v9 = get_local ptr { u64, ( () | u256 ) }, __anon_0, !2267
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2267
        v12 = const u64 0, !2267
        store v12 to v11, !2267
        v13 = load v9
        ret { u64, ( () | u256 ) } v13, !3190

        block1():
        v14 = const unit ()
        br block2(v14)

        block2(v15: ()):
        v16 = get_local ptr { u64, ( () | u256 ) }, __anon_1, !2267
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !2267
        v19 = const u64 1, !2267
        store v19 to v18, !2267
        v20 = get_local ptr u256, res, !3191
        v21 = load v20
        v22 = const u64 1
        v23 = const u64 1
        v24 = get_elem_ptr v16, ptr u256, v22, v23, !2267
        store v21 to v24, !2267
        v25 = load v16
        ret { u64, ( () | u256 ) } v25
    }

    pub fn rsh_177(self !3192: u64, other !3193: u64) -> u64, !3196 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn ge_178(self !3197: u256, other !3198: u256) -> bool, !3201 {
        entry(self: u256, other: u256):
        v0 = call gt_151(self, other), !3204
        cbr v0, block1(v0), block0(), !3205

        block0():
        v1 = call eq_153(self, other), !3208
        br block1(v1), !3205

        block1(v2: bool):
        ret bool v2
    }

    pub fn write_179(self !3209: { b256, u64, b256 }, value !3210: { u256, u256, u256, u256, u256, u256, u256 }) -> (), !3213 {
        entry(self: { b256, u64, b256 }, value: { u256, u256, u256, u256, u256, u256, u256 }):
        v0 = call slot_137(self), !3216
        v1 = call offset_138(self), !3219
        v2 = call write_180(v0, v1, value), !3222
        v3 = const unit ()
        ret () v3
    }

    pub fn write_180(slot !3223: b256, offset !3224: u64, value !3225: { u256, u256, u256, u256, u256, u256, u256 }) -> (), !3228 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { u256, u256, u256, u256, u256, u256, u256 }):
        v0 = const u64 224
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !3232
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_135(slot, offset), !3236
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !3242
        v30 = call alloc_51(v29), !3245
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !3256
        v47 = call write_181(v46, value), !3259
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_181(self !1596: u64, val !1597: { u256, u256, u256, u256, u256, u256, u256 }) -> (), !3265 {
        entry(self: u64, val: { u256, u256, u256, u256, u256, u256, u256 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 224
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 224
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    fn update_price_feeds_if_necessary_internal_182(price_data_update !3266: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !3269 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_2
        local { u64, u64 } __anon_3
        local slice __anon_4
        local { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } __anon_5
        local { b256 } contract_id

        entry(price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !3270
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !3270
        store v3 to v2, !3270
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !3270
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !3270
        store v9 to v8, !3270
        v10 = load v0
        v11 = call read_183(v10), !3273
        v12 = get_local ptr { b256 }, contract_id, !3274
        store v11 to v12, !3274
        v13 = get_local ptr { b256 }, contract_id, !3275
        v14 = load v13
        v15 = call zero_191(), !3278
        v16 = call neq_190(v14, v15), !3281
        v17 = get_local ptr { u64 }, __anon_1, !1845
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1845
        v20 = const u64 16, !1845
        store v20 to v19, !1845
        v21 = load v17
        v22 = call require_112(v16, v21), !3284
        v23 = call msg_amount_194(), !3287
        v24 = ptr_to_int price_data_update to u64
        v25 = int_to_ptr v24 to ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !3288
        v28 = load v27
        v29 = call ge_193(v23, v28), !3291
        cbr v29, block0(), block1(v29), !3292

        block0():
        v30 = call msg_asset_id_197(), !3295
        v31 = call base_199(), !3298
        v32 = call eq_196(v30, v31), !3301
        br block1(v32), !3292

        block1(v33: bool):
        v34 = get_local ptr { u64 }, __anon_2, !1845
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !1845
        v37 = const u64 11, !1845
        store v37 to v36, !1845
        v38 = load v34
        v39 = call require_112(v33, v38), !3304
        v40 = get_local ptr { b256 }, contract_id, !3305
        v41 = load v40
        v42 = call bits_228(v41), !3308
        v43 = const string<31> "update_price_feeds_if_necessary"
        v44 = ptr_to_int v43 to u64, !3310
        v45 = get_local ptr { u64, u64 }, __anon_3, !3310
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46
        store v44 to v47, !3310
        v48 = const u64 1
        v49 = get_elem_ptr v45, ptr u64, v48
        v50 = const u64 31
        store v50 to v49, !3310
        v51 = get_local ptr slice, __anon_4, !3310
        mem_copy_bytes v51, v45, 16
        v52 = load v51
        v53 = ptr_to_int price_data_update to u64
        v54 = int_to_ptr v53 to ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v55 = const u64 2
        v56 = get_elem_ptr v54, ptr { { u64, u64 }, u64 }, v55, !3311
        v57 = load v56
        v58 = ptr_to_int price_data_update to u64
        v59 = int_to_ptr v58 to ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr { { u64, u64 }, u64 }, v60, !3312
        v62 = load v61
        v63 = ptr_to_int price_data_update to u64
        v64 = int_to_ptr v63 to ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v65 = const u64 3
        v66 = get_elem_ptr v64, ptr { { u64, u64 }, u64 }, v65, !3313
        v67 = load v66
        v68 = get_local ptr { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, __anon_5
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr { { u64, u64 }, u64 }, v69
        store v57 to v70
        v71 = const u64 1
        v72 = get_elem_ptr v68, ptr { { u64, u64 }, u64 }, v71
        store v62 to v72
        v73 = const u64 2
        v74 = get_elem_ptr v68, ptr { { u64, u64 }, u64 }, v73
        store v67 to v74
        v75 = load v68
        v76 = ptr_to_int price_data_update to u64
        v77 = int_to_ptr v76 to ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !3288
        v80 = load v79
        v81 = call base_199(), !3316
        v82 = call bits_229(v81), !3319
        v83 = const u64 18446744073709551615
        v84 = call contract_call_200(v42, v52, v75, v80, v82, v83), !3320
        v85 = const unit ()
        ret () v85
    }

    pub fn read_183(self !2224: { b256, u64, b256 }) -> { b256 }, !3321 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_188(self), !3322
        v1 = call offset_189(self), !3323
        v2 = call read_185(v0, v1), !3324
        v3 = call unwrap_184(v2), !3325
        ret { b256 } v3
    }

    pub fn unwrap_184(self !2242: { u64, ( () | { b256 } ) }) -> { b256 }, !3326 {
        local { u64, ( () | { b256 } ) } __matched_value_4
        local { b256 } inner_value

        entry(self: { u64, ( () | { b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !3327
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { b256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !3328
        br block2(v16)

        block2(v17: { b256 }):
        ret { b256 } v17
    }

    pub fn read_185(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { b256 } ) }, !3329 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( () | { b256 } ) } __anon_1
        local { u64, ( () | { b256 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 32
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !3330
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { b256 } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_186(slot, offset), !3331
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !3332
        v34 = call alloc_51(v33), !3333
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { b256 } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !3334
        v54 = call read_187(v53), !3335
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { b256 }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { b256 } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { b256 } ) }):
        ret { u64, ( () | { b256 } ) } v64
    }

    fn slot_calculator_186(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !3336 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 32
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !3337
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !3338
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !3339
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !3340
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !3341
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !3342
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !3343
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !3344
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !3345
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !3346
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !3347
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !3348
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !3349
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !3350
        v51 = call subtract_125(v47, v50), !3351
        v52 = call add_124(v44, v51), !3352
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !3353
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_187(self !1179: u64) -> { b256 }, !3354 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { b256 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { b256 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { b256 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { b256 }):
        br block5(v7)

        block5(v8: { b256 }):
        ret { b256 } v8
    }

    pub fn slot_188(self !2426: { b256, u64, b256 }) -> b256, !3355 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_189(self !2431: { b256, u64, b256 }) -> u64, !3356 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn neq_190(self !1300: { b256 }, other !1301: { b256 }) -> bool, !3357 {
        entry(self: { b256 }, other: { b256 }):
        v0 = call eq_110(self, other), !3358
        v1 = call not_15(v0), !3359
        ret bool v1
    }

    pub fn zero_191() -> { b256 }, !3362 {
        local { b256 } __anon_0

        entry():
        v0 = call zero_192(), !3365
        v1 = get_local ptr { b256 }, __anon_0, !3366
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !3366
        v4 = load v1
        ret { b256 } v4
    }

    pub fn zero_192() -> b256, !3369 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !3370
        ret b256 v0
    }

    pub fn ge_193(self !3197: u64, other !3198: u64) -> bool, !3371 {
        entry(self: u64, other: u64):
        v0 = call gt_40(self, other), !3372
        cbr v0, block1(v0), block0(), !3205

        block0():
        v1 = call eq_16(self, other), !3373
        br block1(v1), !3205

        block1(v2: bool):
        ret bool v2
    }

    pub fn msg_amount_194() -> u64, !3377 {
        entry():
        v0 = call balance_195(), !3380
        ret u64 v0
    }

    pub fn balance_195() -> u64, !3383 {
        entry():
        v0 = asm() -> u64 bal, !3384 {
        }
        ret u64 v0
    }

    pub fn eq_196(self !3386: { b256 }, other !3387: { b256 }) -> bool, !3390 {
        entry(self: { b256 }, other: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3391
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { b256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7, !3391
        v9 = load v8
        v10 = call eq_111(v4, v9), !3394
        ret bool v10
    }

    pub fn msg_asset_id_197() -> { b256 }, !3397 {
        entry():
        v0 = asm(asset_id) -> b256 asset_id, !3398 {
            addi   asset_id fp i32, !3399
        }
        v1 = call from_198(v0), !3402
        ret { b256 } v1
    }

    pub fn from_198(bits !3403: b256) -> { b256 }, !3406 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !3407
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !3407
        v3 = load v0
        ret { b256 } v3
    }

    pub fn base_199() -> { b256 }, !3410 {
        local { b256 } __anon_0

        entry():
        v0 = asm(r1) -> b256 r1, !3411 {
            gm     r1 i6, !3412
        }
        v1 = get_local ptr { b256 }, __anon_0, !3413
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !3413
        v4 = load v1
        ret { b256 } v4
    }

    pub fn contract_call_200(contract_id !3414: b256, method_name !3415: slice, args !3416: { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, coins !3417: u64, asset_id !3418: b256, gas !3419: u64) -> (), !3422 {
        local { b256, u64, u64 } __anon_0
        local b256 __anon_1
        local mut { u64 } buffer
        local slice first_parameter
        local u64 len
        local slice params
        local u64 ptr
        local slice second_parameter

        entry(contract_id: b256, method_name: slice, args: { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, coins: u64, asset_id: b256, gas: u64):
        v0 = call encode_201(method_name), !3425
        v1 = get_local ptr slice, first_parameter, !3426
        store v0 to v1, !3426
        v2 = call encode_203(args), !3429
        v3 = get_local ptr slice, second_parameter, !3430
        store v2 to v3, !3430
        v4 = get_local ptr slice, first_parameter, !3431
        v5 = load v4
        v6 = call ptr_11(v5), !3434
        v7 = asm(a: v6) -> u64 a, !3435 {
        }
        v8 = get_local ptr slice, second_parameter, !3436
        v9 = load v8
        v10 = call ptr_11(v9), !3439
        v11 = asm(a: v10) -> u64 a, !3440 {
        }
        v12 = get_local ptr { b256, u64, u64 }, __anon_0, !3441
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr b256, v13, !3441
        store contract_id to v14, !3441
        v15 = const u64 1
        v16 = get_elem_ptr v12, ptr u64, v15, !3441
        store v7 to v16, !3441
        v17 = const u64 2
        v18 = get_elem_ptr v12, ptr u64, v17, !3441
        store v11 to v18, !3441
        v19 = load v12
        v20 = call encode_225(v19), !3444
        v21 = get_local ptr slice, params, !3445
        store v20 to v21, !3445
        v22 = get_local ptr slice, params, !3446
        v23 = load v22
        v24 = call ptr_11(v23), !3449
        v25 = get_local ptr b256, __anon_1
        store asset_id to v25
        v26 = get_local ptr b256, __anon_1
        v27 = contract_call ptr ()  v24, coins, v26, gas, !3450
        v28 = load v27
        v29 = asm() -> u64 ret, !3451 {
        }
        v30 = get_local ptr u64, ptr, !3452
        store v29 to v30, !3452
        v31 = asm() -> u64 retl, !3453 {
        }
        v32 = get_local ptr u64, len, !3454
        store v31 to v32, !3454
        v33 = get_local ptr u64, ptr, !3455
        v34 = load v33
        v35 = get_local ptr u64, len, !3456
        v36 = load v35
        v37 = call from_parts_1(v34, v36), !3459
        v38 = get_local ptr { u64 }, buffer, !3460
        store v37 to v38, !3460
        v39 = get_local ptr { u64 }, buffer, !3461
        v40 = call abi_decode_227(v39), !3464
        v41 = const unit ()
        ret () v41
    }

    pub fn encode_201(item !1917: slice) -> slice, !3465 {
        local { { u64, u64, u64 } } buffer

        entry(item: slice):
        v0 = call new_100(), !3466
        v1 = call abi_encode_202(item, v0), !3467
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !3468
        ret slice v5
    }

    pub fn abi_encode_202(self !3469: slice, buffer !3470: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3473 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { u64, u64, u64 } __anon_3
        local { { u64, u64, u64 } } __anon_4

        entry(self: slice, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = asm(item: self) -> { u64, u64 } item {
        }
        v18 = get_local ptr { u64, u64 }, __anon_1
        store v17 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v18, ptr u64, v19
        v21 = load v20
        v22 = const u64 8
        v23 = add v21, v22
        v24 = add v16, v23
        v25 = cmp gt v24 v13
        cbr v25, block1(), block2()

        block0(v26: ptr u8, v27: u64):
        v28 = get_local ptr slice, __anon_2
        store self to v28
        v29 = ptr_to_int v26 to u64
        v30 = add v29, v16
        v31 = int_to_ptr v30 to ptr u8
        v32 = asm(item_ptr: v28, len: v16, addr: v31, data_ptr, item_len, new_len) -> u64 new_len {
            lw     item_len item_ptr i1
            sw     addr item_len i0
            addi   addr addr i8
            lw     data_ptr item_ptr i0
            mcp    addr data_ptr item_len
            addi   new_len len i8
            add    new_len new_len item_len
        }
        v33 = ptr_to_int v26 to u64
        v34 = get_local ptr { u64, u64, u64 }, __anon_3
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35
        store v33 to v36
        v37 = const u64 1
        v38 = get_elem_ptr v34, ptr u64, v37
        store v27 to v38
        v39 = const u64 2
        v40 = get_elem_ptr v34, ptr u64, v39
        store v32 to v40
        v41 = asm(buffer: v34) -> { u64, u64, u64 } buffer {
        }
        v42 = get_local ptr { { u64, u64, u64 } }, __anon_4, !3474
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr { u64, u64, u64 }, v43
        store v41 to v44, !3474
        v45 = load v42
        ret { { u64, u64, u64 } } v45

        block1():
        v46 = const u64 2
        v47 = mul v13, v46
        v48 = add v47, v23
        v49 = asm(new_cap: v48, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v49, v48)

        block2():
        br block0(v10, v13)
    }

    pub fn encode_203(item !1917: { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> slice, !3475 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call new_100(), !3476
        v1 = call abi_encode_204(item, v0), !3477
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !3478
        ret slice v5
    }

    pub fn abi_encode_204(self !3479: { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, buffer !3480: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3483 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !3484
        v4 = load v3
        v5 = call abi_encode_205(v4, buffer), !3487
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !3488
        store v5 to v6, !3488
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !3489
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !3490
        v13 = load v12
        v14 = call abi_encode_214(v11, v13), !3493
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !3494
        store v14 to v15, !3494
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { { u64, u64 }, u64 }, v18, !3495
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !3496
        v22 = load v21
        v23 = call abi_encode_217(v20, v22), !3499
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !3500
        store v23 to v24, !3500
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !3501
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn abi_encode_205(self !3502: { { u64, u64 }, u64 }, buffer !3503: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3506 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local b256 item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_206(self), !3509
        v1 = get_local ptr u64, len, !3510
        store v0 to v1, !3510
        v2 = get_local ptr u64, len, !3511
        v3 = load v2
        v4 = call abi_encode_99(v3, buffer), !3514
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !3515
        store v4 to v5, !3515
        v6 = get_local ptr u64, i, !3516
        v7 = const u64 0, !3517
        store v7 to v6, !3516
        br while()

        while():
        v8 = get_local ptr u64, i, !3518
        v9 = load v8
        v10 = get_local ptr u64, len, !3519
        v11 = load v10
        v12 = call lt_26(v9, v11), !3522
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !3523
        v14 = load v13
        v15 = call get_208(self, v14), !3526
        v16 = call unwrap_207(v15), !3529
        v17 = get_local ptr b256, item, !3530
        store v16 to v17, !3530
        v18 = get_local ptr b256, item, !3531
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !3532
        v21 = load v20
        v22 = call abi_encode_213(v19, v21), !3535
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        store v22 to v23, !3536
        v24 = get_local ptr u64, i, !3537
        v25 = load v24
        v26 = const u64 1, !3538
        v27 = call add_45(v25, v26), !3541
        v28 = get_local ptr u64, i, !3539
        store v27 to v28, !3539
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !3542
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub fn len_206(self !3543: { { u64, u64 }, u64 }) -> u64, !3546 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_207(self !2242: { u64, ( () | b256 ) }) -> b256, !3547 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !3548
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr b256, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !3549
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn get_208(self !3550: { { u64, u64 }, u64 }, index !3551: u64) -> { u64, ( () | b256 ) }, !3554 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        v5 = call le_209(v4, index), !3557
        cbr v5, block0(), block1(), !3555

        block0():
        v6 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !2267
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !2267
        v9 = const u64 0, !2267
        store v9 to v8, !2267
        v10 = load v6
        ret { u64, ( () | b256 ) } v10, !3558

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !1502
        v17 = load v16
        v18 = call ptr_211(v17), !3561
        v19 = call add_210(v18, index), !3564
        v20 = get_local ptr u64, ptr, !3565
        store v19 to v20, !3565
        v21 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr u64, ptr, !3566
        v26 = load v25
        v27 = call read_212(v26), !3569
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr b256, v28, v29, !2267
        store v27 to v30, !2267
        v31 = load v21
        ret { u64, ( () | b256 ) } v31
    }

    pub fn le_209(self !2932: u64, other !2933: u64) -> bool, !3570 {
        entry(self: u64, other: u64):
        v0 = call lt_26(self, other), !3571
        cbr v0, block1(v0), block0(), !2940

        block0():
        v1 = call eq_16(self, other), !3572
        br block1(v1), !2940

        block1(v2: bool):
        ret bool v2
    }

    pub fn add_210(self !1174: u64, count !1175: u64) -> u64, !3573 {
        entry(self: u64, count: u64):
        v0 = const u64 32
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_211(self !1592: { u64, u64 }) -> u64, !3574 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn read_212(self !1179: u64) -> b256, !3575 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> b256 ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> b256 val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> b256 val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: b256):
        br block5(v7)

        block5(v8: b256):
        ret b256 v8
    }

    pub fn abi_encode_213(self !3576: b256, buffer !3577: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3580 {
        local { u64, u64, u64 } __anon_0
        local b256 __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: b256, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 32
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = get_local ptr b256, __anon_1
        store self to v22
        v23 = ptr_to_int v20 to u64
        v24 = add v23, v16
        v25 = int_to_ptr v24 to ptr u8
        mem_copy_bytes v25, v22, 32
        v26 = const u64 32
        v27 = add v16, v26
        v28 = ptr_to_int v20 to u64
        v29 = get_local ptr { u64, u64, u64 }, __anon_2
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v28 to v31
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        store v21 to v33
        v34 = const u64 2
        v35 = get_elem_ptr v29, ptr u64, v34
        store v27 to v35
        v36 = asm(buffer: v29) -> { u64, u64, u64 } buffer {
        }
        v37 = get_local ptr { { u64, u64, u64 } }, __anon_3, !3581
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { u64, u64, u64 }, v38
        store v36 to v39, !3581
        v40 = load v37
        ret { { u64, u64, u64 } } v40

        block1():
        v41 = const u64 2
        v42 = mul v13, v41
        v43 = add v42, v17
        v44 = asm(new_cap: v43, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v44, v43)

        block2():
        br block0(v10, v13)
    }

    pub fn abi_encode_214(self !3502: { { u64, u64 }, u64 }, buffer !3503: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3582 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local u64 item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_215(self), !3583
        v1 = get_local ptr u64, len, !3510
        store v0 to v1, !3510
        v2 = get_local ptr u64, len, !3511
        v3 = load v2
        v4 = call abi_encode_99(v3, buffer), !3584
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !3515
        store v4 to v5, !3515
        v6 = get_local ptr u64, i, !3516
        v7 = const u64 0, !3517
        store v7 to v6, !3516
        br while()

        while():
        v8 = get_local ptr u64, i, !3518
        v9 = load v8
        v10 = get_local ptr u64, len, !3519
        v11 = load v10
        v12 = call lt_26(v9, v11), !3585
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !3523
        v14 = load v13
        v15 = call get_216(self, v14), !3586
        v16 = call unwrap_143(v15), !3587
        v17 = get_local ptr u64, item, !3530
        store v16 to v17, !3530
        v18 = get_local ptr u64, item, !3531
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !3532
        v21 = load v20
        v22 = call abi_encode_99(v19, v21), !3588
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        store v22 to v23, !3536
        v24 = get_local ptr u64, i, !3537
        v25 = load v24
        v26 = const u64 1, !3538
        v27 = call add_45(v25, v26), !3589
        v28 = get_local ptr u64, i, !3539
        store v27 to v28, !3539
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !3542
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub fn len_215(self !3543: { { u64, u64 }, u64 }) -> u64, !3590 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        ret u64 v4
    }

    pub fn get_216(self !3550: { { u64, u64 }, u64 }, index !3551: u64) -> { u64, ( () | u64 ) }, !3591 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        v5 = call le_209(v4, index), !3592
        cbr v5, block0(), block1(), !3555

        block0():
        v6 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !2267
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !2267
        v9 = const u64 0, !2267
        store v9 to v8, !2267
        v10 = load v6
        ret { u64, ( () | u64 ) } v10, !3558

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !1502
        v17 = load v16
        v18 = call ptr_57(v17), !3593
        v19 = call add_5(v18, index), !3594
        v20 = get_local ptr u64, ptr, !3565
        store v19 to v20, !3565
        v21 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr u64, ptr, !3566
        v26 = load v25
        v27 = call read_6(v26), !3595
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr u64, v28, v29, !2267
        store v27 to v30, !2267
        v31 = load v21
        ret { u64, ( () | u64 ) } v31
    }

    pub fn abi_encode_217(self !3502: { { u64, u64 }, u64 }, buffer !3503: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3596 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local { { u64, u64 }, u64 } item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_218(self), !3597
        v1 = get_local ptr u64, len, !3510
        store v0 to v1, !3510
        v2 = get_local ptr u64, len, !3511
        v3 = load v2
        v4 = call abi_encode_99(v3, buffer), !3598
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !3515
        store v4 to v5, !3515
        v6 = get_local ptr u64, i, !3516
        v7 = const u64 0, !3517
        store v7 to v6, !3516
        br while()

        while():
        v8 = get_local ptr u64, i, !3518
        v9 = load v8
        v10 = get_local ptr u64, len, !3519
        v11 = load v10
        v12 = call lt_26(v9, v11), !3599
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !3523
        v14 = load v13
        v15 = call get_220(self, v14), !3600
        v16 = call unwrap_219(v15), !3601
        v17 = get_local ptr { { u64, u64 }, u64 }, item, !3530
        store v16 to v17, !3530
        v18 = get_local ptr { { u64, u64 }, u64 }, item, !3531
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !3532
        v21 = load v20
        v22 = call abi_encode_222(v19, v21), !3602
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        store v22 to v23, !3536
        v24 = get_local ptr u64, i, !3537
        v25 = load v24
        v26 = const u64 1, !3538
        v27 = call add_45(v25, v26), !3603
        v28 = get_local ptr u64, i, !3539
        store v27 to v28, !3539
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !3542
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub fn len_218(self !3543: { { u64, u64 }, u64 }) -> u64, !3604 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_219(self !2242: { u64, ( () | { { u64, u64 }, u64 } ) }) -> { { u64, u64 }, u64 }, !3605 {
        local { u64, ( () | { { u64, u64 }, u64 } ) } __matched_value_4
        local { { u64, u64 }, u64 } inner_value

        entry(self: { u64, ( () | { { u64, u64 }, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { { u64, u64 }, u64 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { { u64, u64 }, u64 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !3606
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { { u64, u64 }, u64 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { u64, u64 }, u64 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { { u64, u64 }, u64 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !3607
        br block2(v16)

        block2(v17: { { u64, u64 }, u64 }):
        ret { { u64, u64 }, u64 } v17
    }

    pub fn get_220(self !3550: { { u64, u64 }, u64 }, index !3551: u64) -> { u64, ( () | { { u64, u64 }, u64 } ) }, !3608 {
        local { u64, ( () | { { u64, u64 }, u64 } ) } __anon_0
        local { u64, ( () | { { u64, u64 }, u64 } ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        v5 = call le_209(v4, index), !3609
        cbr v5, block0(), block1(), !3555

        block0():
        v6 = get_local ptr { u64, ( () | { { u64, u64 }, u64 } ) }, __anon_0, !2267
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !2267
        v9 = const u64 0, !2267
        store v9 to v8, !2267
        v10 = load v6
        ret { u64, ( () | { { u64, u64 }, u64 } ) } v10, !3558

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !1502
        v17 = load v16
        v18 = call ptr_91(v17), !3610
        v19 = call add_90(v18, index), !3611
        v20 = get_local ptr u64, ptr, !3565
        store v19 to v20, !3565
        v21 = get_local ptr { u64, ( () | { { u64, u64 }, u64 } ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr u64, ptr, !3566
        v26 = load v25
        v27 = call read_221(v26), !3612
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr { { u64, u64 }, u64 }, v28, v29, !2267
        store v27 to v30, !2267
        v31 = load v21
        ret { u64, ( () | { { u64, u64 }, u64 } ) } v31
    }

    pub fn read_221(self !1179: u64) -> { { u64, u64 }, u64 }, !3613 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { { u64, u64 }, u64 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 24
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { { u64, u64 }, u64 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { { u64, u64 }, u64 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { { u64, u64 }, u64 }):
        br block5(v7)

        block5(v8: { { u64, u64 }, u64 }):
        ret { { u64, u64 }, u64 } v8
    }

    pub fn abi_encode_222(self !3614: { { u64, u64 }, u64 }, buffer !3615: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3618 {
        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call as_raw_slice_224(self), !3621
        v1 = call abi_encode_223(v0, buffer), !3624
        ret { { u64, u64, u64 } } v1
    }

    pub fn abi_encode_223(self !3625: slice, buffer !3626: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3629 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { u64, u64, u64 } __anon_3
        local { { u64, u64, u64 } } __anon_4

        entry(self: slice, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = asm(item: self) -> { u64, u64 } item {
        }
        v18 = get_local ptr { u64, u64 }, __anon_1
        store v17 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v18, ptr u64, v19
        v21 = load v20
        v22 = const u64 8
        v23 = add v21, v22
        v24 = add v16, v23
        v25 = cmp gt v24 v13
        cbr v25, block1(), block2()

        block0(v26: ptr u8, v27: u64):
        v28 = get_local ptr slice, __anon_2
        store self to v28
        v29 = ptr_to_int v26 to u64
        v30 = add v29, v16
        v31 = int_to_ptr v30 to ptr u8
        v32 = asm(item_ptr: v28, len: v16, addr: v31, data_ptr, item_len, new_len) -> u64 new_len {
            lw     item_len item_ptr i1
            sw     addr item_len i0
            addi   addr addr i8
            lw     data_ptr item_ptr i0
            mcp    addr data_ptr item_len
            addi   new_len len i8
            add    new_len new_len item_len
        }
        v33 = ptr_to_int v26 to u64
        v34 = get_local ptr { u64, u64, u64 }, __anon_3
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35
        store v33 to v36
        v37 = const u64 1
        v38 = get_elem_ptr v34, ptr u64, v37
        store v27 to v38
        v39 = const u64 2
        v40 = get_elem_ptr v34, ptr u64, v39
        store v32 to v40
        v41 = asm(buffer: v34) -> { u64, u64, u64 } buffer {
        }
        v42 = get_local ptr { { u64, u64, u64 } }, __anon_4, !3630
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr { u64, u64, u64 }, v43
        store v41 to v44, !3630
        v45 = load v42
        ret { { u64, u64, u64 } } v45

        block1():
        v46 = const u64 2
        v47 = mul v13, v46
        v48 = add v47, v23
        v49 = asm(new_cap: v48, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v49, v48)

        block2():
        br block0(v10, v13)
    }

    pub fn as_raw_slice_224(self !3631: { { u64, u64 }, u64 }) -> slice, !3634 {
        local { u64, u64 } __anon_0

        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !3635
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !3636
        v6 = load v5
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, u64 }, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3637
        v11 = load v10
        v12 = get_local ptr { u64, u64 }, __anon_0, !3638
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !3638
        store v6 to v14, !3638
        v15 = const u64 1
        v16 = get_elem_ptr v12, ptr u64, v15, !3638
        store v11 to v16, !3638
        v17 = asm(ptr: v12) -> slice ptr, !3639 {
        }
        ret slice v17
    }

    pub fn encode_225(item !1917: { b256, u64, u64 }) -> slice, !3640 {
        local { { u64, u64, u64 } } buffer

        entry(item: { b256, u64, u64 }):
        v0 = call new_100(), !3641
        v1 = call abi_encode_226(item, v0), !3642
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !3643
        ret slice v5
    }

    pub fn abi_encode_226(self !3479: { b256, u64, u64 }, buffer !3480: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3644 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { b256, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3484
        v4 = load v3
        v5 = call abi_encode_213(v4, buffer), !3645
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !3488
        store v5 to v6, !3488
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { b256, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3489
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !3490
        v13 = load v12
        v14 = call abi_encode_99(v11, v13), !3646
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !3494
        store v14 to v15, !3494
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { b256, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !3495
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !3496
        v22 = load v21
        v23 = call abi_encode_99(v20, v22), !3647
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !3500
        store v23 to v24, !3500
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !3501
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn abi_decode_227(_buffer !3648: ptr { u64 }) -> (), !3651 {
        entry(_buffer: ptr { u64 }):
        v0 = const unit ()
        ret () v0
    }

    pub fn bits_228(self !3652: { b256 }) -> b256, !3655 {
        entry(self: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2070
        v4 = load v3
        ret b256 v4
    }

    pub fn bits_229(self !3656: { b256 }) -> b256, !3659 {
        entry(self: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3391
        v4 = load v3
        ret b256 v4
    }

    pub fn len_230(self !3543: { { u64, u64 }, u64 }) -> u64, !3660 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        ret u64 v4
    }

    fn absorb_internal_231(account !3661: { u64, ( { b256 } | { b256 } ) }) -> (), !3664 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { b256, u64, b256 } __anon_11
        local { u64 } __anon_12
        local { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 } __anon_13
        local { u64 } __anon_14
        local { b256, u64, b256 } __anon_15
        local { b256, u64, b256 } __anon_16
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_17
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 } __anon_18
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_9
        local { u256, u256 } __tuple_9
        local { u256, u256 } __tuple_9_
        local { u64, u64, u64, u64 } base_price
        local u256 base_price_
        local u64 base_price_exponent
        local u256 base_price_scale
        local u256 base_scale
        local { u64, ( { b256 } | { b256 } ) } caller
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local u256 delta_balance
        local u256 delta_balance_value
        local mut u256 delta_value
        local mut u64 index
        local u64 len
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration
        local mut { u256 } new_balance
        local { u256 } new_principal
        local { u256 } old_balance
        local { u256 } old_principal
        local { u64, u64, u64, u64 } price
        local u256 price_
        local u64 price_exponent
        local u256 price_scale
        local u256 repay_amount
        local u64 seize_amount
        local u256 seize_value
        local u256 supply_amount
        local u256 total_base
        local u256 total_base_value
        local u64 total_collateral
        local mut u256 total_value
        local { { u256 }, u256, u256 } user_basic

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !3665
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !3665
        store v3 to v2, !3665
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !3665
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !3665
        store v9 to v8, !3665
        v10 = load v0
        v11 = call get_239(v10, account), !3668
        v12 = call try_read_233(v11), !3671
        v13 = call default_270(), !3674
        v14 = call unwrap_or_232(v12, v13), !3677
        v15 = get_local ptr { { u256 }, u256, u256 }, user_basic, !3678
        store v14 to v15, !3678
        v16 = get_local ptr { { u256 }, u256, u256 }, user_basic, !3679
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { u256 }, v17, !3680
        v19 = load v18
        v20 = get_local ptr { u256 }, old_principal, !3681
        store v19 to v20, !3681
        v21 = get_local ptr { u256 }, old_principal, !3682
        v22 = load v21
        v23 = call present_value_273(v22), !3685
        v24 = get_local ptr { u256 }, old_balance, !3686
        store v23 to v24, !3686
        v25 = get_local ptr { u256 }, old_balance, !3687
        v26 = load v25
        v27 = call is_liquidatable_internal_290(account, v26), !3690
        v28 = get_local ptr { u64 }, __anon_1, !1845
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !1845
        v31 = const u64 4, !1845
        store v31 to v30, !1845
        v32 = load v28
        v33 = call require_112(v27, v32), !3693
        v34 = get_local ptr u256, delta_value, !3694
        v35 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !3695
        store v35 to v34, !3694
        v36 = get_local ptr { b256, u64, b256 }, __anon_2, !3696
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr b256, v37
        v39 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3696
        store v39 to v38, !3696
        v40 = const u64 1
        v41 = get_elem_ptr v36, ptr u64, v40
        v42 = const u64 0
        store v42 to v41, !3696
        v43 = const u64 2
        v44 = get_elem_ptr v36, ptr b256, v43
        v45 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !3696
        store v45 to v44, !3696
        v46 = load v36
        v47 = call read_164(v46), !3699
        v48 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !3700
        store v47 to v48, !3700
        v49 = call msg_sender_347(), !3703
        v50 = call unwrap_346(v49), !3706
        v51 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !3707
        store v50 to v51, !3707
        v52 = get_local ptr u256, total_value, !3708
        v53 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !3709
        store v53 to v52, !3708
        v54 = get_local ptr u64, index, !3710
        v55 = const u64 0, !3711
        store v55 to v54, !3710
        v56 = get_local ptr { b256, u64, b256 }, __anon_3, !3712
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr b256, v57
        v59 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !3712
        store v59 to v58, !3712
        v60 = const u64 1
        v61 = get_elem_ptr v56, ptr u64, v60
        v62 = const u64 0
        store v62 to v61, !3712
        v63 = const u64 2
        v64 = get_elem_ptr v56, ptr b256, v63
        v65 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !3712
        store v65 to v64, !3712
        v66 = load v56
        v67 = call len_291(v66), !3715
        v68 = get_local ptr u64, len, !3716
        store v67 to v68, !3716
        br while()

        while():
        v69 = get_local ptr u64, index, !3717
        v70 = load v69
        v71 = get_local ptr u64, len, !3718
        v72 = load v71
        v73 = call lt_26(v70, v72), !3721
        cbr v73, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v74 = get_local ptr { b256, u64, b256 }, __anon_4, !3722
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr b256, v75
        v77 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !3722
        store v77 to v76, !3722
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr u64, v78
        v80 = const u64 0
        store v80 to v79, !3722
        v81 = const u64 2
        v82 = get_elem_ptr v74, ptr b256, v81
        v83 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !3722
        store v83 to v82, !3722
        v84 = load v74
        v85 = get_local ptr { b256, u64, b256 }, __anon_5, !3723
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86
        v88 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !3723
        store v88 to v87, !3723
        v89 = const u64 1
        v90 = get_elem_ptr v85, ptr u64, v89
        v91 = const u64 0
        store v91 to v90, !3723
        v92 = const u64 2
        v93 = get_elem_ptr v85, ptr b256, v92
        v94 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !3723
        store v94 to v93, !3723
        v95 = load v85
        v96 = get_local ptr u64, index, !3724
        v97 = load v96
        v98 = call get_315(v95, v97), !3727
        v99 = call unwrap_314(v98), !3730
        v100 = call read_307(v99), !3733
        v101 = call get_301(v84, v100), !3736
        v102 = call read_294(v101), !3739
        v103 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3740
        store v102 to v103, !3740
        v104 = get_local ptr { b256, u64, b256 }, __anon_6, !3741
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr b256, v105
        v107 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !3741
        store v107 to v106, !3741
        v108 = const u64 1
        v109 = get_elem_ptr v104, ptr u64, v108
        v110 = const u64 0
        store v110 to v109, !3741
        v111 = const u64 2
        v112 = get_elem_ptr v104, ptr b256, v111
        v113 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !3741
        store v113 to v112, !3741
        v114 = load v104
        v115 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3742
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr { b256 }, v116, !3743
        v118 = load v117
        v119 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_7, !3744
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr { u64, ( { b256 } | { b256 } ) }, v120, !3744
        store account to v121, !3744
        v122 = const u64 1
        v123 = get_elem_ptr v119, ptr { b256 }, v122, !3744
        store v118 to v123, !3744
        v124 = load v119
        v125 = call get_325(v114, v124), !3747
        v126 = call try_read_324(v125), !3750
        v127 = const u64 0, !3751
        v128 = call unwrap_or_292(v126, v127), !3754
        v129 = get_local ptr u64, seize_amount, !3755
        store v128 to v129, !3755
        v130 = get_local ptr u64, seize_amount, !3756
        v131 = load v130
        v132 = const u64 0, !3757
        v133 = call eq_16(v131, v132), !3760
        cbr v133, block0(), block1(), !3758

        block0():
        v134 = get_local ptr u64, index, !3761
        v135 = load v134
        v136 = const u64 1, !3762
        v137 = call add_45(v135, v136), !3765
        v138 = get_local ptr u64, index, !3763
        store v137 to v138, !3763
        br while()

        block1():
        v139 = const unit ()
        br block2(v139)

        block2(v140: ()):
        v141 = get_local ptr { b256, u64, b256 }, __anon_8, !3766
        v142 = const u64 0
        v143 = get_elem_ptr v141, ptr b256, v142
        v144 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !3766
        store v144 to v143, !3766
        v145 = const u64 1
        v146 = get_elem_ptr v141, ptr u64, v145
        v147 = const u64 0
        store v147 to v146, !3766
        v148 = const u64 2
        v149 = get_elem_ptr v141, ptr b256, v148
        v150 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !3766
        store v150 to v149, !3766
        v151 = load v141
        v152 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3767
        v153 = const u64 0
        v154 = get_elem_ptr v152, ptr { b256 }, v153, !3743
        v155 = load v154
        v156 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_9, !3768
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr { u64, ( { b256 } | { b256 } ) }, v157, !3768
        store account to v158, !3768
        v159 = const u64 1
        v160 = get_elem_ptr v156, ptr { b256 }, v159, !3768
        store v155 to v160, !3768
        v161 = load v156
        v162 = const u64 0, !3769
        v163 = call insert_362(v151, v161, v162), !3772
        v164 = get_local ptr { b256, u64, b256 }, __anon_10, !3773
        v165 = const u64 0
        v166 = get_elem_ptr v164, ptr b256, v165
        v167 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !3773
        store v167 to v166, !3773
        v168 = const u64 1
        v169 = get_elem_ptr v164, ptr u64, v168
        v170 = const u64 0
        store v170 to v169, !3773
        v171 = const u64 2
        v172 = get_elem_ptr v164, ptr b256, v171
        v173 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !3773
        store v173 to v172, !3773
        v174 = load v164
        v175 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3774
        v176 = const u64 0
        v177 = get_elem_ptr v175, ptr { b256 }, v176, !3743
        v178 = load v177
        v179 = call get_364(v174, v178), !3777
        v180 = call try_read_324(v179), !3780
        v181 = const u64 0, !3781
        v182 = call unwrap_or_292(v180, v181), !3784
        v183 = get_local ptr u64, total_collateral, !3785
        store v182 to v183, !3785
        v184 = get_local ptr { b256, u64, b256 }, __anon_11, !3786
        v185 = const u64 0
        v186 = get_elem_ptr v184, ptr b256, v185
        v187 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !3786
        store v187 to v186, !3786
        v188 = const u64 1
        v189 = get_elem_ptr v184, ptr u64, v188
        v190 = const u64 0
        store v190 to v189, !3786
        v191 = const u64 2
        v192 = get_elem_ptr v184, ptr b256, v191
        v193 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !3786
        store v193 to v192, !3786
        v194 = load v184
        v195 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3787
        v196 = const u64 0
        v197 = get_elem_ptr v195, ptr { b256 }, v196, !3743
        v198 = load v197
        v199 = get_local ptr u64, total_collateral, !3788
        v200 = load v199
        v201 = get_local ptr u64, seize_amount, !3789
        v202 = load v201
        v203 = call subtract_318(v200, v202), !3792
        v204 = call insert_366(v194, v198, v203), !3795
        v205 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3796
        v206 = const u64 1
        v207 = get_elem_ptr v205, ptr b256, v206, !3797
        v208 = load v207
        v209 = get_local ptr { u64 }, __anon_12, !3798
        v210 = const u64 0
        v211 = get_elem_ptr v209, ptr u64, v210, !3798
        v212 = const u64 0, !3798
        store v212 to v211, !3798
        v213 = load v209
        v214 = call get_price_internal_331(v208, v213), !3801
        v215 = get_local ptr { u64, u64, u64, u64 }, price, !3802
        store v214 to v215, !3802
        v216 = get_local ptr { u64, u64, u64, u64 }, price, !3803
        v217 = const u64 1
        v218 = get_elem_ptr v216, ptr u64, v217, !3805
        v219 = load v218
        v220 = get_local ptr u64, price_exponent, !3806
        store v219 to v220, !3806
        v221 = const u64 10, !3807
        v222 = call from_140(v221), !3810
        v223 = get_local ptr { u64, u64, u64, u64 }, price, !3811
        v224 = const u64 1
        v225 = get_elem_ptr v223, ptr u64, v224, !3805
        v226 = load v225
        v227 = call pow_172(v222, v226), !3814
        v228 = get_local ptr u256, price_scale, !3815
        store v227 to v228, !3815
        v229 = get_local ptr { u64, u64, u64, u64 }, price, !3816
        v230 = const u64 2
        v231 = get_elem_ptr v229, ptr u64, v230, !3817
        v232 = load v231
        v233 = call from_140(v232), !3820
        v234 = get_local ptr u256, price_, !3821
        store v233 to v234, !3821
        v235 = const u64 10, !3822
        v236 = call from_140(v235), !3825
        v237 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3826
        v238 = const u64 2
        v239 = get_elem_ptr v237, ptr u64, v238, !3827
        v240 = load v239
        v241 = call pow_172(v236, v240), !3830
        v242 = get_local ptr u256, collateral_scale, !3831
        store v241 to v242, !3831
        v243 = get_local ptr u256, delta_value, !3832
        v244 = load v243
        v245 = get_local ptr u256, price_, !3833
        v246 = load v245
        v247 = get_local ptr u64, seize_amount, !3834
        v248 = load v247
        v249 = call into_139(v248), !3837
        v250 = call multiply_158(v246, v249), !3840
        v251 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3841
        v252 = const u64 5
        v253 = get_elem_ptr v251, ptr u256, v252, !3842
        v254 = load v253
        v255 = call multiply_158(v250, v254), !3845
        v256 = get_local ptr u256, collateral_scale, !3846
        v257 = load v256
        v258 = call divide_157(v255, v257), !3849
        v259 = get_local ptr u256, price_scale, !3850
        v260 = load v259
        v261 = call divide_157(v258, v260), !3853
        v262 = call add_124(v244, v261), !3856
        v263 = get_local ptr u256, delta_value, !3854
        store v262 to v263, !3854
        v264 = get_local ptr u64, index, !3857
        v265 = load v264
        v266 = const u64 1, !3858
        v267 = call add_45(v265, v266), !3861
        v268 = get_local ptr u64, index, !3859
        store v267 to v268, !3859
        v269 = get_local ptr u256, total_value, !3862
        v270 = load v269
        v271 = get_local ptr u256, price_, !3863
        v272 = load v271
        v273 = get_local ptr u64, seize_amount, !3864
        v274 = load v273
        v275 = call into_139(v274), !3867
        v276 = call multiply_158(v272, v275), !3870
        v277 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v278 = call multiply_158(v276, v277), !3873
        v279 = get_local ptr u256, collateral_scale, !3874
        v280 = load v279
        v281 = call divide_157(v278, v280), !3877
        v282 = get_local ptr u256, price_scale, !3878
        v283 = load v282
        v284 = call divide_157(v281, v283), !3881
        v285 = call add_124(v270, v284), !3884
        v286 = get_local ptr u256, total_value, !3882
        store v285 to v286, !3882
        v287 = get_local ptr u256, price_, !3885
        v288 = load v287
        v289 = get_local ptr u64, seize_amount, !3886
        v290 = load v289
        v291 = call into_139(v290), !3889
        v292 = call multiply_158(v288, v291), !3892
        v293 = get_local ptr u256, collateral_scale, !3893
        v294 = load v293
        v295 = call divide_157(v292, v294), !3896
        v296 = get_local ptr u256, seize_value, !3897
        store v295 to v296, !3897
        v297 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !3898
        v298 = const u64 0
        v299 = get_elem_ptr v297, ptr { b256 }, v298, !3743
        v300 = load v299
        v301 = get_local ptr u64, seize_amount, !3899
        v302 = load v301
        v303 = get_local ptr u256, seize_value, !3900
        v304 = load v303
        v305 = get_local ptr u64, price_exponent, !3901
        v306 = load v305
        v307 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }, __anon_13, !3902
        v308 = const u64 0
        v309 = get_elem_ptr v307, ptr { u64, ( { b256 } | { b256 } ) }, v308
        store account to v309, !3902
        v310 = const u64 1
        v311 = get_elem_ptr v307, ptr { b256 }, v310
        store v300 to v311, !3902
        v312 = const u64 2
        v313 = get_elem_ptr v307, ptr u64, v312
        store v302 to v313, !3902
        v314 = const u64 3
        v315 = get_elem_ptr v307, ptr u256, v314
        store v304 to v315, !3902
        v316 = const u64 4
        v317 = get_elem_ptr v307, ptr u64, v316
        store v306 to v317, !3902
        v318 = load v307
        v319 = call log_367(v318), !3905
        br while()

        end_while():
        v320 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !3906
        v321 = const u64 2
        v322 = get_elem_ptr v320, ptr b256, v321, !3907
        v323 = load v322
        v324 = get_local ptr { u64 }, __anon_14, !3798
        v325 = const u64 0
        v326 = get_elem_ptr v324, ptr u64, v325, !3798
        v327 = const u64 1, !3798
        store v327 to v326, !3798
        v328 = load v324
        v329 = call get_price_internal_331(v323, v328), !3910
        v330 = get_local ptr { u64, u64, u64, u64 }, base_price, !3911
        store v329 to v330, !3911
        v331 = get_local ptr { u64, u64, u64, u64 }, base_price, !3912
        v332 = const u64 1
        v333 = get_elem_ptr v331, ptr u64, v332, !3805
        v334 = load v333
        v335 = get_local ptr u64, base_price_exponent, !3913
        store v334 to v335, !3913
        v336 = const u64 10, !3914
        v337 = call from_140(v336), !3917
        v338 = get_local ptr { u64, u64, u64, u64 }, base_price, !3918
        v339 = const u64 1
        v340 = get_elem_ptr v338, ptr u64, v339, !3805
        v341 = load v340
        v342 = call pow_172(v337, v341), !3921
        v343 = get_local ptr u256, base_price_scale, !3922
        store v342 to v343, !3922
        v344 = get_local ptr { u64, u64, u64, u64 }, base_price, !3923
        v345 = const u64 2
        v346 = get_elem_ptr v344, ptr u64, v345, !3817
        v347 = load v346
        v348 = call from_140(v347), !3926
        v349 = get_local ptr u256, base_price_, !3927
        store v348 to v349, !3927
        v350 = const u64 10, !3928
        v351 = call from_140(v350), !3931
        v352 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !3932
        v353 = const u64 1
        v354 = get_elem_ptr v352, ptr u64, v353, !2486
        v355 = load v354
        v356 = call pow_172(v351, v355), !3935
        v357 = get_local ptr u256, base_scale, !3936
        store v356 to v357, !3936
        v358 = get_local ptr u256, delta_value, !3937
        v359 = load v358
        v360 = get_local ptr u256, base_price_scale, !3938
        v361 = load v360
        v362 = call multiply_158(v359, v361), !3941
        v363 = get_local ptr u256, base_scale, !3942
        v364 = load v363
        v365 = call multiply_158(v362, v364), !3945
        v366 = get_local ptr u256, base_price_, !3946
        v367 = load v366
        v368 = call divide_157(v365, v367), !3949
        v369 = call divide_157(v368, v277), !3952
        v370 = get_local ptr u256, delta_balance, !3953
        store v369 to v370, !3953
        v371 = get_local ptr u256, delta_balance, !3954
        v372 = load v371
        v373 = get_local ptr u256, base_price_, !3955
        v374 = load v373
        v375 = call multiply_158(v372, v374), !3958
        v376 = get_local ptr u256, base_scale, !3959
        v377 = load v376
        v378 = call divide_157(v375, v377), !3962
        v379 = get_local ptr u256, delta_balance_value, !3963
        store v378 to v379, !3963
        v380 = get_local ptr { u256 }, old_balance, !3964
        v381 = load v380
        v382 = get_local ptr u256, delta_balance, !3965
        v383 = load v382
        v384 = call try_from_282(v383), !3968
        v385 = call unwrap_281(v384), !3971
        v386 = call add_376(v381, v385), !3974
        v387 = get_local ptr { u256 }, new_balance, !3975
        store v386 to v387, !3975
        v388 = get_local ptr { u256 }, new_balance, !3976
        v389 = load v388
        v390 = call zero_277(), !3979
        v391 = call lt_377(v389, v390), !3982
        cbr v391, block3(), block4(), !3980

        block3():
        v392 = call zero_277(), !3985
        v393 = get_local ptr { u256 }, new_balance, !3986
        store v392 to v393, !3986
        v394 = const unit ()
        br block5(v394)

        block4():
        v395 = const unit ()
        br block5(v395)

        block5(v396: ()):
        v397 = get_local ptr { u256 }, new_balance, !3987
        v398 = load v397
        v399 = call principal_value_378(v398), !3990
        v400 = get_local ptr { u256 }, new_principal, !3991
        store v399 to v400, !3991
        v401 = get_local ptr { { u256 }, u256, u256 }, user_basic, !3992
        v402 = load v401
        v403 = get_local ptr { u256 }, new_principal, !3993
        v404 = load v403
        v405 = call update_base_principal_381(account, v402, v404), !3996
        v406 = get_local ptr { u256 }, old_principal, !3997
        v407 = load v406
        v408 = get_local ptr { u256 }, new_principal, !3998
        v409 = load v408
        v410 = call repay_and_supply_amount_390(v407, v409), !4001
        v411 = get_local ptr { u256, u256 }, __tuple_9, !4002
        store v410 to v411, !4002
        v412 = get_local ptr { u256, u256 }, __tuple_9, !4002
        v413 = load v412
        v414 = get_local ptr { u256, u256 }, __tuple_9_, !4002
        store v413 to v414, !4002
        v415 = get_local ptr { u256, u256 }, __tuple_9_, !4002
        v416 = const u64 0
        v417 = get_elem_ptr v415, ptr u256, v416, !4002
        v418 = load v417
        v419 = get_local ptr u256, repay_amount, !4002
        store v418 to v419, !4002
        v420 = get_local ptr { u256, u256 }, __tuple_9_, !4002
        v421 = const u64 1
        v422 = get_elem_ptr v420, ptr u256, v421, !4002
        v423 = load v422
        v424 = get_local ptr u256, supply_amount, !4002
        store v423 to v424, !4002
        v425 = get_local ptr { b256, u64, b256 }, __anon_15, !4003
        v426 = const u64 0
        v427 = get_elem_ptr v425, ptr b256, v426
        v428 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !4003
        store v428 to v427, !4003
        v429 = const u64 1
        v430 = get_elem_ptr v425, ptr u64, v429
        v431 = const u64 0
        store v431 to v430, !4003
        v432 = const u64 2
        v433 = get_elem_ptr v425, ptr b256, v432
        v434 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !4003
        store v434 to v433, !4003
        v435 = load v425
        v436 = call read_132(v435), !4006
        v437 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4007
        store v436 to v437, !4007
        v438 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4008
        v439 = const u64 4
        v440 = get_elem_ptr v438, ptr u256, v439, !2492
        v441 = load v440
        v442 = get_local ptr u256, supply_amount, !4009
        v443 = load v442
        v444 = call add_124(v441, v443), !4012
        v445 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4010
        v446 = const u64 4
        v447 = get_elem_ptr v445, ptr u256, v446, !4010
        store v444 to v447, !4010
        v448 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4013
        v449 = const u64 5
        v450 = get_elem_ptr v448, ptr u256, v449, !2524
        v451 = load v450
        v452 = get_local ptr u256, repay_amount, !4014
        v453 = load v452
        v454 = call subtract_125(v451, v453), !4017
        v455 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4015
        v456 = const u64 5
        v457 = get_elem_ptr v455, ptr u256, v456, !4015
        store v454 to v457, !4015
        v458 = get_local ptr { b256, u64, b256 }, __anon_16, !4018
        v459 = const u64 0
        v460 = get_elem_ptr v458, ptr b256, v459
        v461 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !4018
        store v461 to v460, !4018
        v462 = const u64 1
        v463 = get_elem_ptr v458, ptr u64, v462
        v464 = const u64 0
        store v464 to v463, !4018
        v465 = const u64 2
        v466 = get_elem_ptr v458, ptr b256, v465
        v467 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !4018
        store v467 to v466, !4018
        v468 = load v458
        v469 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4019
        v470 = load v469
        v471 = call write_179(v468, v470), !4022
        v472 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4023
        v473 = load v472
        v474 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_17, !4024
        v475 = const u64 0
        v476 = get_elem_ptr v474, ptr { u256, u256, u256, u256, u256, u256, u256 }, v475
        store v473 to v476, !4024
        v477 = load v474
        v478 = call log_393(v477), !4027
        v479 = get_local ptr u256, total_value, !4028
        v480 = load v479
        v481 = get_local ptr u256, base_price_scale, !4029
        v482 = load v481
        v483 = call multiply_158(v480, v482), !4032
        v484 = get_local ptr u256, base_scale, !4033
        v485 = load v484
        v486 = call multiply_158(v483, v485), !4036
        v487 = get_local ptr u256, base_price_, !4037
        v488 = load v487
        v489 = call divide_157(v486, v488), !4040
        v490 = call divide_157(v489, v277), !4043
        v491 = get_local ptr u256, total_base, !4044
        store v490 to v491, !4044
        v492 = get_local ptr u256, total_base, !4045
        v493 = load v492
        v494 = get_local ptr u256, base_price_, !4046
        v495 = load v494
        v496 = call multiply_158(v493, v495), !4049
        v497 = get_local ptr u256, base_scale, !4050
        v498 = load v497
        v499 = call divide_157(v496, v498), !4053
        v500 = get_local ptr u256, total_base_value, !4054
        store v499 to v500, !4054
        v501 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !4055
        v502 = load v501
        v503 = get_local ptr u256, delta_balance, !4056
        v504 = load v503
        v505 = get_local ptr u256, delta_balance_value, !4057
        v506 = load v505
        v507 = get_local ptr u256, total_base, !4058
        v508 = load v507
        v509 = get_local ptr u256, total_base_value, !4059
        v510 = load v509
        v511 = get_local ptr u64, base_price_exponent, !4060
        v512 = load v511
        v513 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }, __anon_18, !4061
        v514 = const u64 0
        v515 = get_elem_ptr v513, ptr { u64, ( { b256 } | { b256 } ) }, v514
        store account to v515, !4061
        v516 = const u64 1
        v517 = get_elem_ptr v513, ptr { u64, ( { b256 } | { b256 } ) }, v516
        store v502 to v517, !4061
        v518 = const u64 2
        v519 = get_elem_ptr v513, ptr u256, v518
        store v504 to v519, !4061
        v520 = const u64 3
        v521 = get_elem_ptr v513, ptr u256, v520
        store v506 to v521, !4061
        v522 = const u64 4
        v523 = get_elem_ptr v513, ptr u256, v522
        store v508 to v523, !4061
        v524 = const u64 5
        v525 = get_elem_ptr v513, ptr u256, v524
        store v510 to v525, !4061
        v526 = const u64 6
        v527 = get_elem_ptr v513, ptr u64, v526
        store v512 to v527, !4061
        v528 = load v513
        v529 = call log_397(v528), !4064
        v530 = const unit ()
        ret () v530
    }

    pub fn unwrap_or_232(self !4065: { u64, ( () | { { u256 }, u256, u256 } ) }, default !4066: { { u256 }, u256, u256 }) -> { { u256 }, u256, u256 }, !4069 {
        local { u64, ( () | { { u256 }, u256, u256 } ) } __matched_value_5
        local { { u256 }, u256, u256 } x

        entry(self: { u64, ( () | { { u256 }, u256, u256 } ) }, default: { { u256 }, u256, u256 }):
        v0 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __matched_value_5, !4070
        store self to v0, !4070
        v1 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __matched_value_5, !4071
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4071
        v4 = load v3
        v5 = const u64 1, !4071
        v6 = call eq_16(v4, v5), !4074
        cbr v6, block0(), block1(), !4072

        block0():
        v7 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __matched_value_5, !4071
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { u256 }, u256, u256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { u256 }, u256, u256 }, x, !4075
        store v11 to v12, !4075
        v13 = get_local ptr { { u256 }, u256, u256 }, x, !4076
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __matched_value_5, !4071
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !4071
        v18 = load v17
        v19 = const u64 0, !4071
        v20 = call eq_16(v18, v19), !4079
        cbr v20, block2(), block3(), !4077

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !4070
        revert v21, !4070

        block4(v22: { { u256 }, u256, u256 }):
        br block5(v22)

        block5(v23: { { u256 }, u256, u256 }):
        ret { { u256 }, u256, u256 } v23
    }

    pub fn try_read_233(self !4080: { b256, u64, b256 }) -> { u64, ( () | { { u256 }, u256, u256 } ) }, !4083 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_237(self), !4086
        v1 = call offset_238(self), !4089
        v2 = call read_234(v0, v1), !4092
        ret { u64, ( () | { { u256 }, u256, u256 } ) } v2
    }

    pub fn read_234(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { { u256 }, u256, u256 } ) }, !4093 {
        local { u64, ( () | { { u256 }, u256, u256 } ) } __anon_0
        local { u64, ( () | { { u256 }, u256, u256 } ) } __anon_1
        local { u64, ( () | { { u256 }, u256, u256 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 96
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !4094
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { { u256 }, u256, u256 } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_235(slot, offset), !4095
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !4096
        v34 = call alloc_51(v33), !4097
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !4098
        v54 = call read_236(v53), !4099
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { { u256 }, u256, u256 }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { { u256 }, u256, u256 } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { { u256 }, u256, u256 } ) }):
        ret { u64, ( () | { { u256 }, u256, u256 } ) } v64
    }

    fn slot_calculator_235(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !4100 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 96
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !4101
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !4102
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !4103
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !4104
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !4105
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !4106
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !4107
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !4108
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !4109
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !4110
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !4111
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !4112
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !4113
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !4114
        v51 = call subtract_125(v47, v50), !4115
        v52 = call add_124(v44, v51), !4116
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !4117
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_236(self !1179: u64) -> { { u256 }, u256, u256 }, !4118 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { { u256 }, u256, u256 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 96
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { { u256 }, u256, u256 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { { u256 }, u256, u256 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { { u256 }, u256, u256 }):
        br block5(v7)

        block5(v8: { { u256 }, u256, u256 }):
        ret { { u256 }, u256, u256 } v8
    }

    pub fn slot_237(self !2426: { b256, u64, b256 }) -> b256, !4119 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_238(self !2431: { b256, u64, b256 }) -> u64, !4120 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn get_239(self !4122: { b256, u64, b256 }, key !4123: { u64, ( { b256 } | { b256 } ) }) -> { b256, u64, b256 }, !4126 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }):
        v0 = call field_id_268(self), !4129
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !4130
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !4130
        store key to v3, !4130
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4130
        store v0 to v5, !4130
        v6 = load v1
        v7 = call sha256_240(v6), !4133
        v8 = get_local ptr b256, key_, !4134
        store v7 to v8, !4134
        v9 = get_local ptr b256, key_, !4135
        v10 = load v9
        v11 = get_local ptr b256, key_, !4136
        v12 = load v11
        v13 = const u64 0, !4137
        v14 = call new_269(v10, v13, v12), !4140
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_240(s !4142: { { u64, ( { b256 } | { b256 } ) }, b256 }) -> b256, !4145 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { u64, ( { b256 } | { b256 } ) }, b256 }):
        v0 = call new_241(), !4148
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4149
        store v0 to v1, !4149
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4150
        v3 = call hash_244(s, v2), !4153
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4154
        v5 = load v4
        v6 = call sha256_266(v5), !4157
        ret b256 v6
    }

    pub fn new_241() -> { { { u64, u64 }, u64 } }, !4160 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_242(), !4163
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !4164
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !4164
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_242() -> { { u64, u64 }, u64 }, !4167 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_243(), !4170
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !4171
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !4171
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !4172
        store v6 to v5, !4171
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_243() -> { u64, u64 }, !4175 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !4176
        v1 = call alloc_bytes_82(v0), !4179
        v2 = get_local ptr { u64, u64 }, __anon_0, !4180
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !4180
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !4181
        store v7 to v6, !4180
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn hash_244(self !4182: { { u64, ( { b256 } | { b256 } ) }, b256 }, state !4183: ptr { { { u64, u64 }, u64 } }) -> (), !4186 {
        entry(self: { { u64, ( { b256 } | { b256 } ) }, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !4187
        v4 = load v3
        v5 = call hash_245(v4, state), !4190
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { u64, ( { b256 } | { b256 } ) }, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !4191
        v10 = load v9
        v11 = call hash_264(v10, state), !4194
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_245(self !4195: { u64, ( { b256 } | { b256 } ) }, state !4196: ptr { { { u64, u64 }, u64 } }) -> (), !4199 {
        local { u64, ( { b256 } | { b256 } ) } __matched_value_7
        local { b256 } address
        local { b256 } id

        entry(self: { u64, ( { b256 } | { b256 } ) }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !4200
        store self to v0, !4200
        v1 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !4201
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4201
        v4 = load v3
        v5 = const u64 0, !4201
        v6 = call eq_16(v4, v5), !4204
        cbr v6, block0(), block1(), !4202

        block0():
        v7 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !4201
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, address, !4205
        store v11 to v12, !4205
        v13 = const u8 0, !4206
        v14 = call hash_246(v13, state), !4209
        v15 = get_local ptr { b256 }, address, !4210
        v16 = load v15
        v17 = call hash_263(v16, state), !4213
        v18 = const unit ()
        br block5(v18)

        block1():
        v19 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !4201
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !4201
        v22 = load v21
        v23 = const u64 1, !4201
        v24 = call eq_16(v22, v23), !4216
        cbr v24, block2(), block3(), !4214

        block2():
        v25 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !4201
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v25, ptr { b256 }, v26, v27
        v29 = load v28
        v30 = get_local ptr { b256 }, id, !4217
        store v29 to v30, !4217
        v31 = const u8 1, !4218
        v32 = call hash_246(v31, state), !4221
        v33 = get_local ptr { b256 }, id, !4222
        v34 = load v33
        v35 = call hash_265(v34, state), !4225
        v36 = const unit ()
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !4200
        revert v37, !4200

        block4(v38: ()):
        br block5(v38)

        block5(v39: ()):
        v40 = const unit ()
        ret () v40
    }

    pub fn hash_246(self !4226: u8, state !4227: ptr { { { u64, u64 }, u64 } }) -> (), !4230 {
        local mut { { u64, u64 }, u64 } bytes

        entry(self: u8, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 1, !4231
        v1 = call with_capacity_247(v0), !4234
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !4235
        store v1 to v2, !4235
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !4236
        v4 = call push_249(v3, self), !4239
        v5 = get_local ptr { { u64, u64 }, u64 }, bytes, !4240
        v6 = load v5
        v7 = call write_257(state, v6), !4243
        v8 = const unit ()
        ret () v8
    }

    pub fn with_capacity_247(capacity !4244: u64) -> { { u64, u64 }, u64 }, !4247 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_248(capacity), !4250
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !4251
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !4251
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !4252
        store v6 to v5, !4251
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_248(capacity !4253: u64) -> { u64, u64 }, !4256 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_82(capacity), !4259
        v1 = get_local ptr { u64, u64 }, __anon_0, !4260
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !4260
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !4260
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn push_249(self !4261: ptr { { u64, u64 }, u64 }, byte !4262: u8) -> (), !4265 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, byte: u8):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !3637
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !3635
        v5 = load v4
        v6 = call capacity_250(v5), !4268
        v7 = call eq_16(v2, v6), !4271
        cbr v7, block0(), block1(), !4269

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !3635
        v10 = call grow_251(v9), !4274
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !3635
        v16 = load v15
        v17 = call ptr_255(v16), !4277
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !3637
        v20 = load v19
        v21 = call add_uint_offset_254(v17, v20), !4280
        v22 = get_local ptr u64, end, !4281
        store v21 to v22, !4281
        v23 = get_local ptr u64, end, !4282
        v24 = load v23
        v25 = call write_byte_256(v24, byte), !4285
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !3637
        v28 = load v27
        v29 = const u64 1, !4286
        v30 = call add_45(v28, v29), !4289
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !4287
        store v30 to v32, !4287
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_250(self !4290: { u64, u64 }) -> u64, !4293 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !4294
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_251(self !4295: ptr { u64, u64 }) -> (), !4298 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !4294
        v2 = load v1
        v3 = const u64 0, !4299
        v4 = call eq_16(v2, v3), !4302
        cbr v4, block0(), block1(), !4300

        block0():
        v5 = const u64 1, !4303
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !4294
        v8 = load v7
        v9 = const u64 2, !4304
        v10 = call multiply_25(v9, v8), !4307
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !4308
        store v11 to v12, !4308
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !3636
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !4294
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !4309
        v20 = load v19
        v21 = call realloc_bytes_252(v15, v18, v20), !4312
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !4313
        store v21 to v23, !4313
        v24 = get_local ptr u64, new_cap, !4314
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !4315
        store v25 to v27, !4315
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_bytes_252(ptr !4316: u64, count !4317: u64, new_count !4318: u64) -> u64, !4321 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !4324
        cbr v0, block0(), block4(), !4322

        block0():
        v1 = call alloc_bytes_82(new_count), !4327
        v2 = get_local ptr u64, new_ptr, !4328
        store v1 to v2, !4328
        v3 = const u64 0, !4329
        v4 = call gt_40(count, v3), !4332
        cbr v4, block1(), block2(), !4330

        block1():
        v5 = get_local ptr u64, new_ptr, !4333
        v6 = load v5
        v7 = call copy_bytes_to_253(ptr, v6, count), !4336
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !4337
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_bytes_to_253(self !4338: u64, dst !4339: u64, count !4340: u64) -> (), !4343 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !4344 {
            mcp    dst src len, !4345
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn add_uint_offset_254(self !4346: u64, offset !4347: u64) -> u64, !4350 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !4351 {
            add    new ptr offset, !4352
        }
        ret u64 v0
    }

    pub fn ptr_255(self !4353: { u64, u64 }) -> u64, !4356 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3636
        v4 = load v3
        ret u64 v4
    }

    pub fn write_byte_256(self !4357: u64, val !4358: u8) -> (), !4361 {
        local u64 val_ptr

        entry(self: u64, val: u8):
        v0 = asm(r1: val) -> u64 r1, !4362 {
        }
        v1 = get_local ptr u64, val_ptr, !4363
        store v0 to v1, !4363
        v2 = get_local ptr u64, val_ptr, !4364
        v3 = load v2
        v4 = asm(ptr: self, val: v3) -> (), !4365 {
            sb     ptr val i0, !4366
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn write_257(self !4367: ptr { { { u64, u64 }, u64 } }, bytes !4368: { { u64, u64 }, u64 }) -> (), !4371 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !4372
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_258(v1, v3), !4375
        v5 = const unit ()
        ret () v5
    }

    pub fn append_258(self !4376: ptr { { u64, u64 }, u64 }, other !4377: ptr { { u64, u64 }, u64 }) -> (), !4380 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_259(v0), !4383
        v2 = get_local ptr u64, other_len, !4384
        store v1 to v2, !4384
        v3 = get_local ptr u64, other_len, !4385
        v4 = load v3
        v5 = const u64 0, !4386
        v6 = call eq_16(v4, v5), !4389
        cbr v6, block0(), block1(), !4387

        block0():
        v7 = const unit (), !4390
        ret () v7, !4390

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !3637
        v12 = load v11
        v13 = const u64 0, !4391
        v14 = call eq_16(v12, v13), !4394
        cbr v14, block3(), block4(), !4392

        block3():
        v15 = load other
        store v15 to self, !4395
        v16 = const unit (), !4396
        ret () v16, !4396

        block4():
        v17 = const unit ()
        br block5(v17)

        block5(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr self, ptr u64, v19, !3637
        v21 = load v20
        v22 = get_local ptr u64, other_len, !4397
        v23 = load v22
        v24 = call add_45(v21, v23), !4400
        v25 = get_local ptr u64, both_len, !4401
        store v24 to v25, !4401
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !3637
        v28 = load v27
        v29 = get_local ptr u64, other_start, !4402
        store v28 to v29, !4402
        v30 = const u64 0
        v31 = get_elem_ptr self, ptr { u64, u64 }, v30, !3635
        v32 = load v31
        v33 = call capacity_250(v32), !4405
        v34 = get_local ptr u64, both_len, !4406
        v35 = load v34
        v36 = call lt_26(v33, v35), !4409
        cbr v36, block6(), block7(), !4407

        block6():
        v37 = const u64 0
        v38 = get_elem_ptr self, ptr { u64, u64 }, v37, !3635
        v39 = load v38
        v40 = call ptr_255(v39), !4412
        v41 = const u64 0
        v42 = get_elem_ptr self, ptr { u64, u64 }, v41, !3635
        v43 = load v42
        v44 = call capacity_250(v43), !4415
        v45 = get_local ptr u64, both_len, !4416
        v46 = load v45
        v47 = call realloc_bytes_252(v40, v44, v46), !4419
        v48 = get_local ptr u64, both_len, !4420
        v49 = load v48
        v50 = call from_parts_260(v47, v49), !4423
        v51 = get_local ptr slice, new_slice, !4424
        store v50 to v51, !4424
        v52 = get_local ptr slice, new_slice, !4425
        v53 = load v52
        v54 = call from_80(v53), !4428
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !4429
        store v54 to v56, !4429
        v57 = const unit ()
        br block8(v57)

        block7():
        v58 = const unit ()
        br block8(v58)

        block8(v59: ()):
        v60 = const u64 0
        v61 = get_elem_ptr self, ptr { u64, u64 }, v60, !3635
        v62 = load v61
        v63 = call ptr_255(v62), !4432
        v64 = get_local ptr u64, other_start, !4433
        v65 = load v64
        v66 = call add_uint_offset_254(v63, v65), !4436
        v67 = get_local ptr u64, new_ptr, !4437
        store v66 to v67, !4437
        v68 = load other
        v69 = call ptr_262(v68), !4440
        v70 = get_local ptr u64, new_ptr, !4441
        v71 = load v70
        v72 = get_local ptr u64, other_len, !4442
        v73 = load v72
        v74 = call copy_bytes_to_253(v69, v71, v73), !4445
        v75 = get_local ptr u64, both_len, !4446
        v76 = load v75
        v77 = const u64 1
        v78 = get_elem_ptr self, ptr u64, v77, !4447
        store v76 to v78, !4447
        v79 = const unit ()
        ret () v79
    }

    pub fn len_259(self !4448: { { u64, u64 }, u64 }) -> u64, !4451 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !3637
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_260(ptr !4452: u64, count !4453: u64) -> slice, !4456 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !4457
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !4457
        store ptr to v4, !4457
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !4457
        store v1 to v6, !4457
        v7 = load v2
        v8 = call from_parts_261(v7), !4460
        ret slice v8
    }

    fn from_parts_261(parts !4461: { u64, u64 }) -> slice, !4464 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !4465 {
        }
        ret slice v0
    }

    pub fn ptr_262(self !4466: { { u64, u64 }, u64 }) -> u64, !4469 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !3635
        v4 = load v3
        v5 = call ptr_255(v4), !4472
        ret u64 v5
    }

    pub fn hash_263(self !4474: { b256 }, state !4475: ptr { { { u64, u64 }, u64 } }) -> (), !4478 {
        local { b256 } __destructured_struct_1
        local b256 bits

        entry(self: { b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { b256 }, __destructured_struct_1, !4479
        store self to v0, !4479
        v1 = get_local ptr { b256 }, __destructured_struct_1, !4479
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4480
        v4 = load v3
        v5 = get_local ptr b256, bits, !4479
        store v4 to v5, !4479
        v6 = get_local ptr b256, bits, !4481
        v7 = load v6
        v8 = call hash_264(v7, state), !4484
        v9 = const unit ()
        ret () v9
    }

    pub fn hash_264(self !4485: b256, state !4486: ptr { { { u64, u64 }, u64 } }) -> (), !4489 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: b256, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 32, !4490
        v1 = call alloc_bytes_82(v0), !4493
        v2 = get_local ptr u64, ptr, !4494
        store v1 to v2, !4494
        v3 = asm(r1: self) -> { u64, u64, u64, u64 } r1, !4495 {
        }
        v4 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !4496
        store v3 to v4, !4496
        v5 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !4496
        v6 = load v5
        v7 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !4496
        store v6 to v7, !4496
        v8 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !4496
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !4496
        v11 = load v10
        v12 = get_local ptr u64, word_1, !4496
        store v11 to v12, !4496
        v13 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !4496
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr u64, v14, !4496
        v16 = load v15
        v17 = get_local ptr u64, word_2, !4496
        store v16 to v17, !4496
        v18 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !4496
        v19 = const u64 2
        v20 = get_elem_ptr v18, ptr u64, v19, !4496
        v21 = load v20
        v22 = get_local ptr u64, word_3, !4496
        store v21 to v22, !4496
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !4496
        v24 = const u64 3
        v25 = get_elem_ptr v23, ptr u64, v24, !4496
        v26 = load v25
        v27 = get_local ptr u64, word_4, !4496
        store v26 to v27, !4496
        v28 = get_local ptr u64, ptr, !4497
        v29 = load v28
        v30 = get_local ptr u64, word_1, !4498
        v31 = load v30
        v32 = get_local ptr u64, word_2, !4499
        v33 = load v32
        v34 = get_local ptr u64, word_3, !4500
        v35 = load v34
        v36 = get_local ptr u64, word_4, !4501
        v37 = load v36
        v38 = asm(ptr: v29, val_1: v31, val_2: v33, val_3: v35, val_4: v37) -> (), !4502 {
            sw     ptr val_1 i0, !4503
            sw     ptr val_2 i1, !4504
            sw     ptr val_3 i2, !4505
            sw     ptr val_4 i3, !4506
        }
        v39 = get_local ptr u64, ptr, !4507
        v40 = load v39
        v41 = const u64 32, !4508
        v42 = call from_parts_260(v40, v41), !4511
        v43 = call from_79(v42), !4514
        v44 = call write_257(state, v43), !4517
        v45 = const unit ()
        ret () v45
    }

    pub fn hash_265(self !4518: { b256 }, state !4519: ptr { { { u64, u64 }, u64 } }) -> (), !4522 {
        local { b256 } __destructured_struct_1
        local b256 bits

        entry(self: { b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { b256 }, __destructured_struct_1, !4523
        store self to v0, !4523
        v1 = get_local ptr { b256 }, __destructured_struct_1, !4523
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2070
        v4 = load v3
        v5 = get_local ptr b256, bits, !4523
        store v4 to v5, !4523
        v6 = get_local ptr b256, bits, !4524
        v7 = load v6
        v8 = call hash_264(v7, state), !4527
        v9 = const unit ()
        ret () v9
    }

    pub fn sha256_266(self !4528: { { { u64, u64 }, u64 } }) -> b256, !4531 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_267(), !4534
        v1 = get_local ptr b256, result_buffer, !4535
        store v0 to v1, !4535
        v2 = get_local ptr b256, result_buffer, !4536
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !4372
        v7 = load v6
        v8 = call ptr_262(v7), !4539
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !4372
        v13 = load v12
        v14 = call len_259(v13), !4542
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !4543 {
            s256   hash ptr bytes, !4544
        }
        ret b256 v15
    }

    pub fn min_267() -> b256, !4547 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !4548
        ret b256 v0
    }

    pub fn field_id_268(self !4549: { b256, u64, b256 }) -> b256, !4552 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !4553
        v4 = load v3
        ret b256 v4
    }

    pub fn new_269(slot !4554: b256, offset !4555: u64, field_id !4556: b256) -> { b256, u64, b256 }, !4559 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4560
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !4560
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !4560
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !4560
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn default_270() -> { { u256 }, u256, u256 }, !4563 {
        local { { u256 }, u256, u256 } __anon_0

        entry():
        v0 = call new_271(), !4566
        v1 = get_local ptr { { u256 }, u256, u256 }, __anon_0, !4567
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u256 }, v2
        store v0 to v3, !4567
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u256, v4
        v6 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !4568
        store v6 to v5, !4567
        v7 = const u64 2
        v8 = get_elem_ptr v1, ptr u256, v7
        v9 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !4569
        store v9 to v8, !4567
        v10 = load v1
        ret { { u256 }, u256, u256 } v10
    }

    pub fn new_271() -> { u256 }, !4573 {
        local { u256 } __anon_0

        entry():
        v0 = call indent_272(), !4576
        v1 = get_local ptr { u256 }, __anon_0, !4577
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2
        store v0 to v3, !4577
        v4 = load v1
        ret { u256 } v4
    }

    pub fn indent_272() -> u256, !4580 {
        entry():
        v0 = const u256 0x8000000000000000000000000000000000000000000000000000000000000000, !4581
        ret u256 v0
    }

    fn present_value_273(principal !4582: { u256 }) -> { u256 }, !4585 {
        local { b256, u64, b256 } __anon_0
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 present_value
        local u256 present_value_

        entry(principal: { u256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4586
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !4586
        store v3 to v2, !4586
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4586
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !4586
        store v9 to v8, !4586
        v10 = load v0
        v11 = call read_132(v10), !4589
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4590
        store v11 to v12, !4590
        v13 = call zero_277(), !4593
        v14 = call ge_274(principal, v13), !4596
        cbr v14, block0(), block1(), !4594

        block0():
        v15 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4597
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u256, v16, !2709
        v18 = load v17
        v19 = call try_into_279(principal), !4600
        v20 = call unwrap_278(v19), !4603
        v21 = call present_value_supply_156(v18, v20), !4606
        v22 = get_local ptr u256, present_value, !4607
        store v21 to v22, !4607
        v23 = get_local ptr u256, present_value, !4608
        v24 = load v23
        v25 = call try_from_282(v24), !4611
        v26 = call unwrap_281(v25), !4614
        br block2(v26)

        block1():
        v27 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !4615
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr u256, v28, !2712
        v30 = load v29
        v31 = call wrapping_neg_284(principal), !4618
        v32 = call try_into_279(v31), !4621
        v33 = call unwrap_278(v32), !4624
        v34 = call present_value_borrow_159(v30, v33), !4627
        v35 = get_local ptr u256, present_value_, !4628
        store v34 to v35, !4628
        v36 = get_local ptr u256, present_value_, !4629
        v37 = load v36
        v38 = call neg_try_from_289(v37), !4632
        v39 = call unwrap_281(v38), !4635
        br block2(v39)

        block2(v40: { u256 }):
        ret { u256 } v40
    }

    pub fn ge_274(self !3197: { u256 }, other !3198: { u256 }) -> bool, !4636 {
        entry(self: { u256 }, other: { u256 }):
        v0 = call gt_275(self, other), !4637
        cbr v0, block1(v0), block0(), !3205

        block0():
        v1 = call eq_276(self, other), !4638
        br block1(v1), !3205

        block1(v2: bool):
        ret bool v2
    }

    pub fn gt_275(self !4639: { u256 }, other !4640: { u256 }) -> bool, !4643 {
        entry(self: { u256 }, other: { u256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !4644
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { u256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u256, v7, !4644
        v9 = load v8
        v10 = call gt_151(v4, v9), !4647
        ret bool v10
    }

    pub fn eq_276(self !4648: { u256 }, other !4649: { u256 }) -> bool, !4652 {
        entry(self: { u256 }, other: { u256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !4644
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { u256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u256, v7, !4644
        v9 = load v8
        v10 = call eq_153(v4, v9), !4655
        ret bool v10
    }

    pub fn zero_277() -> { u256 }, !4658 {
        local { u256 } __anon_0

        entry():
        v0 = call indent_272(), !4661
        v1 = get_local ptr { u256 }, __anon_0, !4662
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2
        store v0 to v3, !4662
        v4 = load v1
        ret { u256 } v4
    }

    pub fn unwrap_278(self !2242: { u64, ( () | u256 ) }) -> u256, !4663 {
        local { u64, ( () | u256 ) } __matched_value_4
        local u256 inner_value

        entry(self: { u64, ( () | u256 ) }):
        v0 = get_local ptr { u64, ( () | u256 ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | u256 ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !4664
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | u256 ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u256, v8, v9
        v11 = load v10
        v12 = get_local ptr u256, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr u256, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !4665
        br block2(v16)

        block2(v17: u256):
        ret u256 v17
    }

    pub fn try_into_279(self !4666: { u256 }) -> { u64, ( () | u256 ) }, !4669 {
        entry(self: { u256 }):
        v0 = call try_from_280(self), !4672
        ret { u64, ( () | u256 ) } v0
    }

    pub fn try_from_280(value !4673: { u256 }) -> { u64, ( () | u256 ) }, !4676 {
        local { u64, ( () | u256 ) } __anon_0
        local { u64, ( () | u256 ) } __anon_1

        entry(value: { u256 }):
        v0 = call zero_277(), !4679
        v1 = call ge_274(value, v0), !4682
        cbr v1, block0(), block1(), !4680

        block0():
        v2 = get_local ptr { u64, ( () | u256 ) }, __anon_0, !2267
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2267
        v5 = const u64 1, !2267
        store v5 to v4, !2267
        v6 = ptr_to_int value to u64
        v7 = int_to_ptr v6 to ptr { u256 }
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u256, v8, !4644
        v10 = load v9
        v11 = call indent_272(), !4685
        v12 = call subtract_125(v10, v11), !4688
        v13 = const u64 1
        v14 = const u64 1
        v15 = get_elem_ptr v2, ptr u256, v13, v14, !2267
        store v12 to v15, !2267
        v16 = load v2
        br block2(v16)

        block1():
        v17 = get_local ptr { u64, ( () | u256 ) }, __anon_1, !2267
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2267
        v20 = const u64 0, !2267
        store v20 to v19, !2267
        v21 = load v17
        br block2(v21)

        block2(v22: { u64, ( () | u256 ) }):
        ret { u64, ( () | u256 ) } v22
    }

    pub fn unwrap_281(self !2242: { u64, ( () | { u256 } ) }) -> { u256 }, !4689 {
        local { u64, ( () | { u256 } ) } __matched_value_4
        local { u256 } inner_value

        entry(self: { u64, ( () | { u256 } ) }):
        v0 = get_local ptr { u64, ( () | { u256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { u256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !4690
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { u256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { u256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !4691
        br block2(v16)

        block2(v17: { u256 }):
        ret { u256 } v17
    }

    pub fn try_from_282(value !4692: u256) -> { u64, ( () | { u256 } ) }, !4695 {
        local { u64, ( () | { u256 } ) } __anon_0
        local { u256 } __anon_1
        local { u64, ( () | { u256 } ) } __anon_2

        entry(value: u256):
        v0 = call max_283(), !4698
        v1 = call indent_272(), !4701
        v2 = call subtract_125(v0, v1), !4704
        v3 = call lt_163(value, v2), !4707
        cbr v3, block0(), block1(), !4705

        block0():
        v4 = get_local ptr { u64, ( () | { u256 } ) }, __anon_0, !2267
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !2267
        v7 = const u64 1, !2267
        store v7 to v6, !2267
        v8 = call indent_272(), !4710
        v9 = call add_124(value, v8), !4713
        v10 = get_local ptr { u256 }, __anon_1, !4714
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u256, v11
        store v9 to v12, !4714
        v13 = load v10
        v14 = const u64 1
        v15 = const u64 1
        v16 = get_elem_ptr v4, ptr { u256 }, v14, v15, !2267
        store v13 to v16, !2267
        v17 = load v4
        br block2(v17)

        block1():
        v18 = get_local ptr { u64, ( () | { u256 } ) }, __anon_2, !2267
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !2267
        v21 = const u64 0, !2267
        store v21 to v20, !2267
        v22 = load v18
        br block2(v22)

        block2(v23: { u64, ( () | { u256 } ) }):
        ret { u64, ( () | { u256 } ) } v23
    }

    pub fn max_283() -> u256, !4717 {
        entry():
        v0 = const u256 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, !4718
        ret u256 v0
    }

    pub fn wrapping_neg_284(self !4719: { u256 }) -> { u256 }, !4722 {
        entry(self: { u256 }):
        v0 = call min_285(), !4725
        v1 = call eq_276(self, v0), !4728
        cbr v1, block0(), block1(), !4726

        block0():
        v2 = call min_285(), !4731
        ret { u256 } v2, !4732

        block1():
        v3 = const unit ()
        br block2(v3)

        block2(v4: ()):
        v5 = const u256 0x0000000000000000000000000000000000000000000000000000000000000001, !4733
        v6 = call neg_try_from_289(v5), !4736
        v7 = call unwrap_281(v6), !4739
        v8 = call multiply_287(self, v7), !4742
        ret { u256 } v8
    }

    pub fn min_285() -> { u256 }, !4745 {
        local { u256 } __anon_0

        entry():
        v0 = call min_286(), !4748
        v1 = get_local ptr { u256 }, __anon_0, !4749
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2
        store v0 to v3, !4749
        v4 = load v1
        ret { u256 } v4
    }

    pub fn min_286() -> u256, !4752 {
        entry():
        v0 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !4753
        ret u256 v0
    }

    pub fn multiply_287(self !4754: { u256 }, other !4755: { u256 }) -> { u256 }, !4758 {
        local mut { u256 } res

        entry(self: { u256 }, other: { u256 }):
        v0 = call new_271(), !4761
        v1 = get_local ptr { u256 }, res, !4762
        store v0 to v1, !4762
        v2 = ptr_to_int self to u64
        v3 = int_to_ptr v2 to ptr { u256 }
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u256, v4, !4644
        v6 = load v5
        v7 = call indent_272(), !4765
        v8 = call ge_178(v6, v7), !4768
        cbr v8, block0(), block1(v8), !4769

        block0():
        v9 = ptr_to_int other to u64
        v10 = int_to_ptr v9 to ptr { u256 }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u256, v11, !4644
        v13 = load v12
        v14 = call indent_272(), !4772
        v15 = call ge_178(v13, v14), !4775
        br block1(v15), !4769

        block1(v16: bool):
        cbr v16, block2(), block3(), !4769

        block2():
        v17 = ptr_to_int self to u64
        v18 = int_to_ptr v17 to ptr { u256 }
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u256, v19, !4644
        v21 = load v20
        v22 = call indent_272(), !4778
        v23 = call subtract_125(v21, v22), !4781
        v24 = ptr_to_int other to u64
        v25 = int_to_ptr v24 to ptr { u256 }
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u256, v26, !4644
        v28 = load v27
        v29 = call indent_272(), !4784
        v30 = call subtract_125(v28, v29), !4787
        v31 = call multiply_158(v23, v30), !4790
        v32 = call indent_272(), !4793
        v33 = call add_124(v31, v32), !4796
        v34 = call from_uint_288(v33), !4799
        v35 = get_local ptr { u256 }, res, !4800
        store v34 to v35, !4800
        v36 = const unit ()
        br block19(v36)

        block3():
        v37 = ptr_to_int self to u64
        v38 = int_to_ptr v37 to ptr { u256 }
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u256, v39, !4644
        v41 = load v40
        v42 = call indent_272(), !4803
        v43 = call lt_163(v41, v42), !4806
        cbr v43, block4(), block5(v43), !4807

        block4():
        v44 = ptr_to_int other to u64
        v45 = int_to_ptr v44 to ptr { u256 }
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u256, v46, !4644
        v48 = load v47
        v49 = call indent_272(), !4810
        v50 = call lt_163(v48, v49), !4813
        br block5(v50), !4807

        block5(v51: bool):
        cbr v51, block6(), block7(), !4807

        block6():
        v52 = call indent_272(), !4816
        v53 = ptr_to_int self to u64
        v54 = int_to_ptr v53 to ptr { u256 }
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr u256, v55, !4644
        v57 = load v56
        v58 = call subtract_125(v52, v57), !4819
        v59 = call indent_272(), !4822
        v60 = ptr_to_int other to u64
        v61 = int_to_ptr v60 to ptr { u256 }
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr u256, v62, !4644
        v64 = load v63
        v65 = call subtract_125(v59, v64), !4825
        v66 = call multiply_158(v58, v65), !4828
        v67 = call indent_272(), !4831
        v68 = call add_124(v66, v67), !4834
        v69 = call from_uint_288(v68), !4837
        v70 = get_local ptr { u256 }, res, !4838
        store v69 to v70, !4838
        v71 = const unit ()
        br block18(v71)

        block7():
        v72 = ptr_to_int self to u64
        v73 = int_to_ptr v72 to ptr { u256 }
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u256, v74, !4644
        v76 = load v75
        v77 = call indent_272(), !4841
        v78 = call ge_178(v76, v77), !4844
        cbr v78, block8(), block9(v78), !4845

        block8():
        v79 = ptr_to_int other to u64
        v80 = int_to_ptr v79 to ptr { u256 }
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u256, v81, !4644
        v83 = load v82
        v84 = call indent_272(), !4848
        v85 = call lt_163(v83, v84), !4851
        br block9(v85), !4845

        block9(v86: bool):
        cbr v86, block10(), block11(), !4845

        block10():
        v87 = call indent_272(), !4854
        v88 = ptr_to_int self to u64
        v89 = int_to_ptr v88 to ptr { u256 }
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr u256, v90, !4644
        v92 = load v91
        v93 = call indent_272(), !4857
        v94 = call subtract_125(v92, v93), !4860
        v95 = call indent_272(), !4863
        v96 = ptr_to_int other to u64
        v97 = int_to_ptr v96 to ptr { u256 }
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr u256, v98, !4644
        v100 = load v99
        v101 = call subtract_125(v95, v100), !4866
        v102 = call multiply_158(v94, v101), !4869
        v103 = call subtract_125(v87, v102), !4872
        v104 = call from_uint_288(v103), !4875
        v105 = get_local ptr { u256 }, res, !4876
        store v104 to v105, !4876
        v106 = const unit ()
        br block17(v106)

        block11():
        v107 = ptr_to_int self to u64
        v108 = int_to_ptr v107 to ptr { u256 }
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u256, v109, !4644
        v111 = load v110
        v112 = call indent_272(), !4879
        v113 = call lt_163(v111, v112), !4882
        cbr v113, block12(), block13(v113), !4883

        block12():
        v114 = ptr_to_int other to u64
        v115 = int_to_ptr v114 to ptr { u256 }
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr u256, v116, !4644
        v118 = load v117
        v119 = call indent_272(), !4886
        v120 = call ge_178(v118, v119), !4889
        br block13(v120), !4883

        block13(v121: bool):
        cbr v121, block14(), block15(), !4883

        block14():
        v122 = call indent_272(), !4892
        v123 = ptr_to_int other to u64
        v124 = int_to_ptr v123 to ptr { u256 }
        v125 = const u64 0
        v126 = get_elem_ptr v124, ptr u256, v125, !4644
        v127 = load v126
        v128 = call indent_272(), !4895
        v129 = call subtract_125(v127, v128), !4898
        v130 = call indent_272(), !4901
        v131 = ptr_to_int self to u64
        v132 = int_to_ptr v131 to ptr { u256 }
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u256, v133, !4644
        v135 = load v134
        v136 = call subtract_125(v130, v135), !4904
        v137 = call multiply_158(v129, v136), !4907
        v138 = call subtract_125(v122, v137), !4910
        v139 = call from_uint_288(v138), !4913
        v140 = get_local ptr { u256 }, res, !4914
        store v139 to v140, !4914
        v141 = const unit ()
        br block16(v141)

        block15():
        v142 = const unit ()
        br block16(v142)

        block16(v143: ()):
        br block17(v143)

        block17(v144: ()):
        br block18(v144)

        block18(v145: ()):
        br block19(v145)

        block19(v146: ()):
        v147 = get_local ptr { u256 }, res, !4915
        v148 = load v147
        ret { u256 } v148
    }

    pub fn from_uint_288(underlying !4916: u256) -> { u256 }, !4919 {
        local { u256 } __anon_0

        entry(underlying: u256):
        v0 = get_local ptr { u256 }, __anon_0, !4920
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u256, v1
        store underlying to v2, !4920
        v3 = load v0
        ret { u256 } v3
    }

    pub fn neg_try_from_289(value !4921: u256) -> { u64, ( () | { u256 } ) }, !4924 {
        local { u64, ( () | { u256 } ) } __anon_0
        local { u256 } __anon_1
        local { u64, ( () | { u256 } ) } __anon_2

        entry(value: u256):
        v0 = call indent_272(), !4927
        v1 = call le_162(value, v0), !4930
        cbr v1, block0(), block1(), !4928

        block0():
        v2 = get_local ptr { u64, ( () | { u256 } ) }, __anon_0, !2267
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2267
        v5 = const u64 1, !2267
        store v5 to v4, !2267
        v6 = call indent_272(), !4933
        v7 = call subtract_125(v6, value), !4936
        v8 = get_local ptr { u256 }, __anon_1, !4937
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u256, v9
        store v7 to v10, !4937
        v11 = load v8
        v12 = const u64 1
        v13 = const u64 1
        v14 = get_elem_ptr v2, ptr { u256 }, v12, v13, !2267
        store v11 to v14, !2267
        v15 = load v2
        br block2(v15)

        block1():
        v16 = get_local ptr { u64, ( () | { u256 } ) }, __anon_2, !2267
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !2267
        v19 = const u64 0, !2267
        store v19 to v18, !2267
        v20 = load v16
        br block2(v20)

        block2(v21: { u64, ( () | { u256 } ) }):
        ret { u64, ( () | { u256 } ) } v21
    }

    fn is_liquidatable_internal_290(account !4938: { u64, ( { b256 } | { b256 } ) }, present !4939: { u256 }) -> bool, !4942 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_10
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_4
        local { u64 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9
        local u256 amount
        local u256 balance
        local u256 base_scale
        local { u64, u64, u64, u64 } base_token_price
        local u256 base_token_price_
        local u256 base_token_price_scale
        local u256 borrow_amount
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local mut u64 index
        local u64 len
        local mut u256 liquidation_treshold
        local u256 present_
        local { u64, u64, u64, u64 } price
        local u256 price_
        local u256 price_scale

        entry(account: { u64, ( { b256 } | { b256 } ) }, present: { u256 }):
        v0 = call zero_277(), !4945
        v1 = call ge_274(present, v0), !4948
        cbr v1, block0(), block1(), !4946

        block0():
        v2 = const bool false, !4949
        ret bool v2, !4950

        block1():
        v3 = const unit ()
        br block2(v3)

        block2(v4: ()):
        v5 = call wrapping_neg_284(present), !4953
        v6 = call try_into_279(v5), !4956
        v7 = call unwrap_278(v6), !4959
        v8 = get_local ptr u256, present_, !4960
        store v7 to v8, !4960
        v9 = get_local ptr u256, liquidation_treshold, !4961
        v10 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !4962
        store v10 to v9, !4961
        v11 = get_local ptr u64, index, !4963
        v12 = const u64 0, !4964
        store v12 to v11, !4963
        v13 = get_local ptr { b256, u64, b256 }, __anon_0, !4965
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr b256, v14
        v16 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !4965
        store v16 to v15, !4965
        v17 = const u64 1
        v18 = get_elem_ptr v13, ptr u64, v17
        v19 = const u64 0
        store v19 to v18, !4965
        v20 = const u64 2
        v21 = get_elem_ptr v13, ptr b256, v20
        v22 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !4965
        store v22 to v21, !4965
        v23 = load v13
        v24 = call len_291(v23), !4968
        v25 = get_local ptr u64, len, !4969
        store v24 to v25, !4969
        br while()

        while():
        v26 = get_local ptr u64, index, !4970
        v27 = load v26
        v28 = get_local ptr u64, len, !4971
        v29 = load v28
        v30 = call lt_26(v27, v29), !4974
        cbr v30, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v31 = get_local ptr { b256, u64, b256 }, __anon_1, !4975
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr b256, v32
        v34 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !4975
        store v34 to v33, !4975
        v35 = const u64 1
        v36 = get_elem_ptr v31, ptr u64, v35
        v37 = const u64 0
        store v37 to v36, !4975
        v38 = const u64 2
        v39 = get_elem_ptr v31, ptr b256, v38
        v40 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !4975
        store v40 to v39, !4975
        v41 = load v31
        v42 = get_local ptr { b256, u64, b256 }, __anon_2, !4976
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr b256, v43
        v45 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !4976
        store v45 to v44, !4976
        v46 = const u64 1
        v47 = get_elem_ptr v42, ptr u64, v46
        v48 = const u64 0
        store v48 to v47, !4976
        v49 = const u64 2
        v50 = get_elem_ptr v42, ptr b256, v49
        v51 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !4976
        store v51 to v50, !4976
        v52 = load v42
        v53 = get_local ptr u64, index, !4977
        v54 = load v53
        v55 = call get_315(v52, v54), !4980
        v56 = call unwrap_314(v55), !4983
        v57 = call read_307(v56), !4986
        v58 = call get_301(v41, v57), !4989
        v59 = call read_294(v58), !4992
        v60 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !4993
        store v59 to v60, !4993
        v61 = get_local ptr { b256, u64, b256 }, __anon_3, !4994
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !4994
        store v64 to v63, !4994
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !4994
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !4994
        store v70 to v69, !4994
        v71 = load v61
        v72 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !4995
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr { b256 }, v73, !3743
        v75 = load v74
        v76 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_4, !4996
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr { u64, ( { b256 } | { b256 } ) }, v77, !4996
        store account to v78, !4996
        v79 = const u64 1
        v80 = get_elem_ptr v76, ptr { b256 }, v79, !4996
        store v75 to v80, !4996
        v81 = load v76
        v82 = call get_325(v71, v81), !4999
        v83 = call try_read_324(v82), !5002
        v84 = const u64 0, !5003
        v85 = call unwrap_or_292(v83, v84), !5006
        v86 = call into_139(v85), !5009
        v87 = get_local ptr u256, balance, !5010
        store v86 to v87, !5010
        v88 = get_local ptr u256, balance, !5011
        v89 = load v88
        v90 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !5012
        v91 = call eq_153(v89, v90), !5015
        cbr v91, block3(), block4(), !5013

        block3():
        v92 = get_local ptr u64, index, !5016
        v93 = load v92
        v94 = const u64 1, !5017
        v95 = call add_45(v93, v94), !5020
        v96 = get_local ptr u64, index, !5018
        store v95 to v96, !5018
        br while()

        block4():
        v97 = const unit ()
        br block5(v97)

        block5(v98: ()):
        v99 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !5021
        v100 = const u64 1
        v101 = get_elem_ptr v99, ptr b256, v100, !3797
        v102 = load v101
        v103 = get_local ptr { u64 }, __anon_5, !3798
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !3798
        v106 = const u64 0, !3798
        store v106 to v105, !3798
        v107 = load v103
        v108 = call get_price_internal_331(v102, v107), !5024
        v109 = get_local ptr { u64, u64, u64, u64 }, price, !5025
        store v108 to v109, !5025
        v110 = get_local ptr { u64, u64, u64, u64 }, price, !5026
        v111 = const u64 1
        v112 = get_elem_ptr v110, ptr u64, v111, !3805
        v113 = load v112
        v114 = const u64 10, !5027
        v115 = call pow_345(v114, v113), !5030
        v116 = call from_140(v115), !5033
        v117 = get_local ptr u256, price_scale, !5034
        store v116 to v117, !5034
        v118 = get_local ptr { u64, u64, u64, u64 }, price, !5035
        v119 = const u64 2
        v120 = get_elem_ptr v118, ptr u64, v119, !3817
        v121 = load v120
        v122 = call from_140(v121), !5038
        v123 = get_local ptr u256, price_, !5039
        store v122 to v123, !5039
        v124 = const u64 10, !5040
        v125 = call from_140(v124), !5043
        v126 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !5044
        v127 = const u64 2
        v128 = get_elem_ptr v126, ptr u64, v127, !3827
        v129 = load v128
        v130 = call pow_172(v125, v129), !5047
        v131 = get_local ptr u256, collateral_scale, !5048
        store v130 to v131, !5048
        v132 = const u64 10, !5049
        v133 = call from_140(v132), !5052
        v134 = get_local ptr { b256, u64, b256 }, __anon_6, !5053
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr b256, v135
        v137 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !5053
        store v137 to v136, !5053
        v138 = const u64 1
        v139 = get_elem_ptr v134, ptr u64, v138
        v140 = const u64 0
        store v140 to v139, !5053
        v141 = const u64 2
        v142 = get_elem_ptr v134, ptr b256, v141
        v143 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !5053
        store v143 to v142, !5053
        v144 = load v134
        v145 = call read_164(v144), !5056
        v146 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_7
        store v145 to v146
        v147 = const u64 1
        v148 = get_elem_ptr v146, ptr u64, v147, !2486
        v149 = load v148
        v150 = call pow_172(v133, v149), !5059
        v151 = get_local ptr u256, base_scale, !5060
        store v150 to v151, !5060
        v152 = get_local ptr u256, balance, !5061
        v153 = load v152
        v154 = get_local ptr u256, price_, !5062
        v155 = load v154
        v156 = call multiply_158(v153, v155), !5065
        v157 = get_local ptr u256, price_scale, !5066
        v158 = load v157
        v159 = call divide_157(v156, v158), !5069
        v160 = get_local ptr u256, amount, !5070
        store v159 to v160, !5070
        v161 = get_local ptr u256, liquidation_treshold, !5071
        v162 = load v161
        v163 = get_local ptr u256, amount, !5072
        v164 = load v163
        v165 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !5073
        v166 = const u64 4
        v167 = get_elem_ptr v165, ptr u256, v166, !5074
        v168 = load v167
        v169 = call multiply_158(v164, v168), !5077
        v170 = get_local ptr u256, base_scale, !5078
        v171 = load v170
        v172 = call multiply_158(v169, v171), !5081
        v173 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v174 = call divide_157(v172, v173), !5084
        v175 = get_local ptr u256, collateral_scale, !5085
        v176 = load v175
        v177 = call divide_157(v174, v176), !5088
        v178 = call add_124(v162, v177), !5091
        v179 = get_local ptr u256, liquidation_treshold, !5089
        store v178 to v179, !5089
        v180 = get_local ptr u64, index, !5092
        v181 = load v180
        v182 = const u64 1, !5093
        v183 = call add_45(v181, v182), !5096
        v184 = get_local ptr u64, index, !5094
        store v183 to v184, !5094
        br while()

        end_while():
        v185 = get_local ptr { b256, u64, b256 }, __anon_8, !5097
        v186 = const u64 0
        v187 = get_elem_ptr v185, ptr b256, v186
        v188 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !5097
        store v188 to v187, !5097
        v189 = const u64 1
        v190 = get_elem_ptr v185, ptr u64, v189
        v191 = const u64 0
        store v191 to v190, !5097
        v192 = const u64 2
        v193 = get_elem_ptr v185, ptr b256, v192
        v194 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !5097
        store v194 to v193, !5097
        v195 = load v185
        v196 = call read_164(v195), !5100
        v197 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v196 to v197
        v198 = const u64 2
        v199 = get_elem_ptr v197, ptr b256, v198, !3907
        v200 = load v199
        v201 = get_local ptr { u64 }, __anon_10, !3798
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !3798
        v204 = const u64 1, !3798
        store v204 to v203, !3798
        v205 = load v201
        v206 = call get_price_internal_331(v200, v205), !5103
        v207 = get_local ptr { u64, u64, u64, u64 }, base_token_price, !5104
        store v206 to v207, !5104
        v208 = const u64 10, !5105
        v209 = call from_140(v208), !5108
        v210 = get_local ptr { u64, u64, u64, u64 }, base_token_price, !5109
        v211 = const u64 1
        v212 = get_elem_ptr v210, ptr u64, v211, !3805
        v213 = load v212
        v214 = call pow_172(v209, v213), !5112
        v215 = get_local ptr u256, base_token_price_scale, !5113
        store v214 to v215, !5113
        v216 = get_local ptr { u64, u64, u64, u64 }, base_token_price, !5114
        v217 = const u64 2
        v218 = get_elem_ptr v216, ptr u64, v217, !3817
        v219 = load v218
        v220 = call from_140(v219), !5117
        v221 = get_local ptr u256, base_token_price_, !5118
        store v220 to v221, !5118
        v222 = get_local ptr u256, present_, !5119
        v223 = load v222
        v224 = get_local ptr u256, base_token_price_, !5120
        v225 = load v224
        v226 = call multiply_158(v223, v225), !5123
        v227 = get_local ptr u256, base_token_price_scale, !5124
        v228 = load v227
        v229 = call divide_157(v226, v228), !5127
        v230 = get_local ptr u256, borrow_amount, !5128
        store v229 to v230, !5128
        v231 = get_local ptr u256, borrow_amount, !5129
        v232 = load v231
        v233 = get_local ptr u256, liquidation_treshold, !5130
        v234 = load v233
        v235 = call gt_151(v232, v234), !5133
        ret bool v235
    }

    pub fn len_291(self !5135: { b256, u64, b256 }) -> u64, !5138 {
        entry(self: { b256, u64, b256 }):
        v0 = call field_id_293(self), !5141
        v1 = const u64 0, !5142
        v2 = call read_144(v0, v1), !5145
        v3 = const u64 0, !5146
        v4 = call unwrap_or_292(v2, v3), !5149
        ret u64 v4
    }

    pub fn unwrap_or_292(self !4065: { u64, ( () | u64 ) }, default !4066: u64) -> u64, !5150 {
        local { u64, ( () | u64 ) } __matched_value_5
        local u64 x

        entry(self: { u64, ( () | u64 ) }, default: u64):
        v0 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !4070
        store self to v0, !4070
        v1 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !4071
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4071
        v4 = load v3
        v5 = const u64 1, !4071
        v6 = call eq_16(v4, v5), !5151
        cbr v6, block0(), block1(), !4072

        block0():
        v7 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !4071
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u64, v8, v9
        v11 = load v10
        v12 = get_local ptr u64, x, !4075
        store v11 to v12, !4075
        v13 = get_local ptr u64, x, !4076
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !4071
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !4071
        v18 = load v17
        v19 = const u64 0, !4071
        v20 = call eq_16(v18, v19), !5152
        cbr v20, block2(), block3(), !4077

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !4070
        revert v21, !4070

        block4(v22: u64):
        br block5(v22)

        block5(v23: u64):
        ret u64 v23
    }

    pub fn field_id_293(self !4549: { b256, u64, b256 }) -> b256, !5153 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !4553
        v4 = load v3
        ret b256 v4
    }

    pub fn read_294(self !2224: { b256, u64, b256 }) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool }, !5154 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_299(self), !5155
        v1 = call offset_300(self), !5156
        v2 = call read_296(v0, v1), !5157
        v3 = call unwrap_295(v2), !5158
        ret { { b256 }, b256, u64, u256, u256, u256, u64, bool } v3
    }

    pub fn unwrap_295(self !2242: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool }, !5159 {
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __matched_value_4
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } inner_value

        entry(self: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }):
        v0 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !5160
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !5161
        br block2(v16)

        block2(v17: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        ret { { b256 }, b256, u64, u256, u256, u256, u64, bool } v17
    }

    pub fn read_296(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, !5162 {
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __anon_0
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __anon_1
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 184
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !5163
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_297(slot, offset), !5164
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !5165
        v34 = call alloc_51(v33), !5166
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !5167
        v54 = call read_298(v53), !5168
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }):
        ret { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } v64
    }

    fn slot_calculator_297(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !5169 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 184
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !5170
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !5171
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !5172
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !5173
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !5174
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !5175
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !5176
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !5177
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !5178
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !5179
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !5180
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !5181
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !5182
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !5183
        v51 = call subtract_125(v47, v50), !5184
        v52 = call add_124(v44, v51), !5185
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !5186
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_298(self !1179: u64) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool }, !5187 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 184
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        br block5(v7)

        block5(v8: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        ret { { b256 }, b256, u64, u256, u256, u256, u64, bool } v8
    }

    pub fn slot_299(self !2426: { b256, u64, b256 }) -> b256, !5188 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_300(self !2431: { b256, u64, b256 }) -> u64, !5189 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn get_301(self !4122: { b256, u64, b256 }, key !4123: { b256 }) -> { b256, u64, b256 }, !5190 {
        local { { b256 }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { b256 }):
        v0 = call field_id_305(self), !5191
        v1 = get_local ptr { { b256 }, b256 }, __anon_0, !4130
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !4130
        store key to v3, !4130
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4130
        store v0 to v5, !4130
        v6 = load v1
        v7 = call sha256_302(v6), !5192
        v8 = get_local ptr b256, key_, !4134
        store v7 to v8, !4134
        v9 = get_local ptr b256, key_, !4135
        v10 = load v9
        v11 = get_local ptr b256, key_, !4136
        v12 = load v11
        v13 = const u64 0, !4137
        v14 = call new_306(v10, v13, v12), !5193
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_302(s !4142: { { b256 }, b256 }) -> b256, !5194 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { b256 }, b256 }):
        v0 = call new_241(), !5195
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4149
        store v0 to v1, !4149
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4150
        v3 = call hash_303(s, v2), !5196
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4154
        v5 = load v4
        v6 = call sha256_266(v5), !5197
        ret b256 v6
    }

    pub fn hash_303(self !4182: { { b256 }, b256 }, state !4183: ptr { { { u64, u64 }, u64 } }) -> (), !5198 {
        entry(self: { { b256 }, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !4187
        v4 = load v3
        v5 = call hash_304(v4, state), !5199
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { b256 }, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !4191
        v10 = load v9
        v11 = call hash_264(v10, state), !5200
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_304(self !5201: { b256 }, state !5202: ptr { { { u64, u64 }, u64 } }) -> (), !5205 {
        local { b256 } __destructured_struct_1
        local b256 bits

        entry(self: { b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { b256 }, __destructured_struct_1, !5206
        store self to v0, !5206
        v1 = get_local ptr { b256 }, __destructured_struct_1, !5206
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3391
        v4 = load v3
        v5 = get_local ptr b256, bits, !5206
        store v4 to v5, !5206
        v6 = get_local ptr b256, bits, !5207
        v7 = load v6
        v8 = call hash_264(v7, state), !5210
        v9 = const unit ()
        ret () v9
    }

    pub fn field_id_305(self !4549: { b256, u64, b256 }) -> b256, !5211 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !4553
        v4 = load v3
        ret b256 v4
    }

    pub fn new_306(slot !4554: b256, offset !4555: u64, field_id !4556: b256) -> { b256, u64, b256 }, !5212 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4560
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !4560
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !4560
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !4560
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn read_307(self !2224: { b256, u64, b256 }) -> { b256 }, !5213 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_312(self), !5214
        v1 = call offset_313(self), !5215
        v2 = call read_309(v0, v1), !5216
        v3 = call unwrap_308(v2), !5217
        ret { b256 } v3
    }

    pub fn unwrap_308(self !2242: { u64, ( () | { b256 } ) }) -> { b256 }, !5218 {
        local { u64, ( () | { b256 } ) } __matched_value_4
        local { b256 } inner_value

        entry(self: { u64, ( () | { b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !5219
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { b256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !5220
        br block2(v16)

        block2(v17: { b256 }):
        ret { b256 } v17
    }

    pub fn read_309(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { b256 } ) }, !5221 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( () | { b256 } ) } __anon_1
        local { u64, ( () | { b256 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 32
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !5222
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { b256 } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_310(slot, offset), !5223
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !5224
        v34 = call alloc_51(v33), !5225
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { b256 } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !5226
        v54 = call read_311(v53), !5227
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { b256 }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { b256 } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { b256 } ) }):
        ret { u64, ( () | { b256 } ) } v64
    }

    fn slot_calculator_310(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !5228 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 32
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !5229
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !5230
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !5231
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !5232
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !5233
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !5234
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !5235
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !5236
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !5237
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !5238
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !5239
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !5240
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !5241
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !5242
        v51 = call subtract_125(v47, v50), !5243
        v52 = call add_124(v44, v51), !5244
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !5245
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_311(self !1179: u64) -> { b256 }, !5246 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { b256 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { b256 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { b256 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { b256 }):
        br block5(v7)

        block5(v8: { b256 }):
        ret { b256 } v8
    }

    pub fn slot_312(self !2426: { b256, u64, b256 }) -> b256, !5247 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_313(self !2431: { b256, u64, b256 }) -> u64, !5248 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_314(self !2242: { u64, ( () | { b256, u64, b256 } ) }) -> { b256, u64, b256 }, !5249 {
        local { u64, ( () | { b256, u64, b256 } ) } __matched_value_4
        local { b256, u64, b256 } inner_value

        entry(self: { u64, ( () | { b256, u64, b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !5250
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256, u64, b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256, u64, b256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { b256, u64, b256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !5251
        br block2(v16)

        block2(v17: { b256, u64, b256 }):
        ret { b256, u64, b256 } v17
    }

    pub fn get_315(self !5252: { b256, u64, b256 }, index !5253: u64) -> { u64, ( () | { b256, u64, b256 } ) }, !5256 {
        local { u64, ( () | { b256, u64, b256 } ) } __anon_0
        local { u64, ( () | { b256, u64, b256 } ) } __anon_1
        local { u64, b256 } __anon_2
        local b256 key
        local u64 len
        local u64 offset

        entry(self: { b256, u64, b256 }, index: u64):
        v0 = call field_id_293(self), !5259
        v1 = const u64 0, !5260
        v2 = call read_144(v0, v1), !5263
        v3 = const u64 0, !5264
        v4 = call unwrap_or_292(v2, v3), !5267
        v5 = get_local ptr u64, len, !5268
        store v4 to v5, !5268
        v6 = get_local ptr u64, len, !5269
        v7 = load v6
        v8 = call le_209(v7, index), !5272
        cbr v8, block0(), block1(), !5270

        block0():
        v9 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __anon_0, !2267
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2267
        v12 = const u64 0, !2267
        store v12 to v11, !2267
        v13 = load v9
        ret { u64, ( () | { b256, u64, b256 } ) } v13, !5273

        block1():
        v14 = const unit ()
        br block2(v14)

        block2(v15: ()):
        v16 = call field_id_293(self), !5276
        v17 = call sha256_316(v16), !5279
        v18 = get_local ptr b256, key, !5280
        store v17 to v18, !5280
        v19 = call offset_calculator_317(index), !5283
        v20 = get_local ptr u64, offset, !5284
        store v19 to v20, !5284
        v21 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr b256, key, !5285
        v26 = load v25
        v27 = get_local ptr u64, offset, !5286
        v28 = load v27
        v29 = get_local ptr b256, key, !5287
        v30 = load v29
        v31 = get_local ptr { u64, b256 }, __anon_2, !5288
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !5288
        store index to v33, !5288
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr b256, v34, !5288
        store v30 to v35, !5288
        v36 = load v31
        v37 = call sha256_321(v36), !5291
        v38 = call new_320(v26, v28, v37), !5294
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v21, ptr { b256, u64, b256 }, v39, v40, !2267
        store v38 to v41, !2267
        v42 = load v21
        ret { u64, ( () | { b256, u64, b256 } ) } v42
    }

    pub fn sha256_316(s !4142: b256) -> b256, !5295 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: b256):
        v0 = call new_241(), !5296
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4149
        store v0 to v1, !4149
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4150
        v3 = call hash_264(s, v2), !5297
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4154
        v5 = load v4
        v6 = call sha256_266(v5), !5298
        ret b256 v6
    }

    fn offset_calculator_317(offset !5299: u64) -> u64, !5302 {
        local u64 size_in_bytes
        local u64 size_in_bytes_

        entry(offset: u64):
        v0 = get_local ptr u64, size_in_bytes, !5303
        v1 = const u64 32
        store v1 to v0, !5303
        v2 = get_local ptr u64, size_in_bytes, !5304
        v3 = load v2
        v4 = const u64 8, !5305
        v5 = const u64 1, !5306
        v6 = call subtract_318(v4, v5), !5309
        v7 = call add_45(v3, v6), !5312
        v8 = get_local ptr u64, size_in_bytes, !5313
        v9 = load v8
        v10 = const u64 8, !5314
        v11 = const u64 1, !5315
        v12 = call subtract_318(v10, v11), !5318
        v13 = call add_45(v9, v12), !5321
        v14 = const u64 8, !5322
        v15 = call modulo_121(v13, v14), !5325
        v16 = call subtract_318(v7, v15), !5328
        v17 = get_local ptr u64, size_in_bytes_, !5329
        store v16 to v17, !5329
        v18 = get_local ptr u64, size_in_bytes_, !5330
        v19 = load v18
        v20 = call multiply_25(offset, v19), !5333
        v21 = const u64 8, !5334
        v22 = call divide_319(v20, v21), !5337
        ret u64 v22
    }

    pub fn subtract_318(self !5338: u64, other !5339: u64) -> u64, !5342 {
        entry(self: u64, other: u64):
        v0 = sub self, other
        ret u64 v0
    }

    pub fn divide_319(self !5343: u64, other !5344: u64) -> u64, !5347 {
        entry(self: u64, other: u64):
        v0 = div self, other
        ret u64 v0
    }

    pub fn new_320(slot !4554: b256, offset !4555: u64, field_id !4556: b256) -> { b256, u64, b256 }, !5348 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4560
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !4560
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !4560
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !4560
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn sha256_321(s !4142: { u64, b256 }) -> b256, !5349 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { u64, b256 }):
        v0 = call new_241(), !5350
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4149
        store v0 to v1, !4149
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4150
        v3 = call hash_322(s, v2), !5351
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4154
        v5 = load v4
        v6 = call sha256_266(v5), !5352
        ret b256 v6
    }

    pub fn hash_322(self !4182: { u64, b256 }, state !4183: ptr { { { u64, u64 }, u64 } }) -> (), !5353 {
        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4187
        v4 = load v3
        v5 = call hash_323(v4, state), !5354
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { u64, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !4191
        v10 = load v9
        v11 = call hash_264(v10, state), !5355
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_323(self !5356: u64, state !5357: ptr { { { u64, u64 }, u64 } }) -> (), !5360 {
        local u64 ptr

        entry(self: u64, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 8, !5361
        v1 = call alloc_bytes_82(v0), !5364
        v2 = get_local ptr u64, ptr, !5365
        store v1 to v2, !5365
        v3 = get_local ptr u64, ptr, !5366
        v4 = load v3
        v5 = asm(ptr: v4, val: self) -> (), !5367 {
            sw     ptr val i0, !5368
        }
        v6 = get_local ptr u64, ptr, !5369
        v7 = load v6
        v8 = const u64 8, !5370
        v9 = call from_parts_260(v7, v8), !5373
        v10 = call from_79(v9), !5376
        v11 = call write_257(state, v10), !5379
        v12 = const unit ()
        ret () v12
    }

    pub fn try_read_324(self !4080: { b256, u64, b256 }) -> { u64, ( () | u64 ) }, !5380 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_146(self), !5381
        v1 = call offset_147(self), !5382
        v2 = call read_144(v0, v1), !5383
        ret { u64, ( () | u64 ) } v2
    }

    pub fn get_325(self !4122: { b256, u64, b256 }, key !4123: { { u64, ( { b256 } | { b256 } ) }, { b256 } }) -> { b256, u64, b256 }, !5384 {
        local { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { { u64, ( { b256 } | { b256 } ) }, { b256 } }):
        v0 = call field_id_329(self), !5385
        v1 = get_local ptr { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }, __anon_0, !4130
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, v2, !4130
        store key to v3, !4130
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4130
        store v0 to v5, !4130
        v6 = load v1
        v7 = call sha256_326(v6), !5386
        v8 = get_local ptr b256, key_, !4134
        store v7 to v8, !4134
        v9 = get_local ptr b256, key_, !4135
        v10 = load v9
        v11 = get_local ptr b256, key_, !4136
        v12 = load v11
        v13 = const u64 0, !4137
        v14 = call new_330(v10, v13, v12), !5387
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_326(s !4142: { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }) -> b256, !5388 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }):
        v0 = call new_241(), !5389
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4149
        store v0 to v1, !4149
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4150
        v3 = call hash_327(s, v2), !5390
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !4154
        v5 = load v4
        v6 = call sha256_266(v5), !5391
        ret b256 v6
    }

    pub fn hash_327(self !4182: { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }, state !4183: ptr { { { u64, u64 }, u64 } }) -> (), !5392 {
        entry(self: { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, v2, !4187
        v4 = load v3
        v5 = call hash_328(v4, state), !5393
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !4191
        v10 = load v9
        v11 = call hash_264(v10, state), !5394
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_328(self !4182: { { u64, ( { b256 } | { b256 } ) }, { b256 } }, state !4183: ptr { { { u64, u64 }, u64 } }) -> (), !5395 {
        entry(self: { { u64, ( { b256 } | { b256 } ) }, { b256 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !4187
        v4 = load v3
        v5 = call hash_245(v4, state), !5396
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr { b256 }, v8, !4191
        v10 = load v9
        v11 = call hash_304(v10, state), !5397
        v12 = const unit ()
        ret () v12
    }

    pub fn field_id_329(self !4549: { b256, u64, b256 }) -> b256, !5398 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !4553
        v4 = load v3
        ret b256 v4
    }

    pub fn new_330(slot !4554: b256, offset !4555: u64, field_id !4556: b256) -> { b256, u64, b256 }, !5399 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4560
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !4560
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !4560
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !4560
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    fn get_price_internal_331(price_feed_id !5400: b256, price_position !5401: { u64 }) -> { u64, u64, u64, u64 }, !5404 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_10
        local { u64, u64 } __anon_2
        local slice __anon_3
        local { b256 } __anon_4
        local { u64 } __anon_5
        local { u64 } __anon_6
        local { u64 } __anon_7
        local { u64 } __anon_8
        local { u64 } __anon_9
        local u64 aheadness
        local { b256 } contract_id
        local mut { u64, u64, u64, u64 } price
        local u64 staleness

        entry(price_feed_id: b256, price_position: { u64 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !5405
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !5405
        store v3 to v2, !5405
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !5405
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !5405
        store v9 to v8, !5405
        v10 = load v0
        v11 = call read_183(v10), !5408
        v12 = get_local ptr { b256 }, contract_id, !5409
        store v11 to v12, !5409
        v13 = get_local ptr { b256 }, contract_id, !5410
        v14 = load v13
        v15 = call zero_191(), !5413
        v16 = call neq_190(v14, v15), !5416
        v17 = get_local ptr { u64 }, __anon_1, !1845
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1845
        v20 = const u64 16, !1845
        store v20 to v19, !1845
        v21 = load v17
        v22 = call require_112(v16, v21), !5419
        v23 = get_local ptr { b256 }, contract_id, !5420
        v24 = load v23
        v25 = call bits_228(v24), !5423
        v26 = const string<5> "price"
        v27 = ptr_to_int v26 to u64, !5424
        v28 = get_local ptr { u64, u64 }, __anon_2, !5424
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30, !5424
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        v33 = const u64 5
        store v33 to v32, !5424
        v34 = get_local ptr slice, __anon_3, !5424
        mem_copy_bytes v34, v28, 16
        v35 = load v34
        v36 = get_local ptr { b256 }, __anon_4
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr b256, v37
        store price_feed_id to v38
        v39 = load v36
        v40 = const u64 0
        v41 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        v42 = const u64 18446744073709551615
        v43 = call contract_call_332(v25, v35, v39, v40, v41, v42), !5425
        v44 = get_local ptr { u64, u64, u64, u64 }, price, !5426
        store v43 to v44, !5426
        v45 = get_local ptr { u64, u64, u64, u64 }, price, !5427
        v46 = const u64 3
        v47 = get_elem_ptr v45, ptr u64, v46, !5428
        v48 = load v47
        v49 = call timestamp_148(), !5431
        v50 = call lt_26(v48, v49), !5434
        cbr v50, block0(), block1(), !5432

        block0():
        v51 = call timestamp_148(), !5437
        v52 = get_local ptr { u64, u64, u64, u64 }, price, !5438
        v53 = const u64 3
        v54 = get_elem_ptr v52, ptr u64, v53, !5428
        v55 = load v54
        v56 = call subtract_318(v51, v55), !5441
        v57 = get_local ptr u64, staleness, !5442
        store v56 to v57, !5442
        v58 = get_local ptr u64, staleness, !5443
        v59 = load v58
        v60 = const u64 60, !5444
        v61 = call le_209(v59, v60), !5447
        v62 = get_local ptr { u64 }, __anon_5, !1845
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr u64, v63, !1845
        v65 = const u64 17, !1845
        store v65 to v64, !1845
        v66 = load v62
        v67 = call require_112(v61, v66), !5450
        v68 = const unit ()
        br block2(v68)

        block1():
        v69 = get_local ptr { u64, u64, u64, u64 }, price, !5451
        v70 = const u64 3
        v71 = get_elem_ptr v69, ptr u64, v70, !5428
        v72 = load v71
        v73 = call timestamp_148(), !5454
        v74 = call subtract_318(v72, v73), !5457
        v75 = get_local ptr u64, aheadness, !5458
        store v74 to v75, !5458
        v76 = get_local ptr u64, aheadness, !5459
        v77 = load v76
        v78 = const u64 60, !5460
        v79 = call le_209(v77, v78), !5463
        v80 = get_local ptr { u64 }, __anon_6, !1845
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81, !1845
        v83 = const u64 17, !1845
        store v83 to v82, !1845
        v84 = load v80
        v85 = call require_112(v79, v84), !5466
        v86 = const unit ()
        br block2(v86)

        block2(v87: ()):
        v88 = get_local ptr { u64, u64, u64, u64 }, price, !5467
        v89 = const u64 2
        v90 = get_elem_ptr v88, ptr u64, v89, !3817
        v91 = load v90
        v92 = const u64 0, !5468
        v93 = call neq_14(v91, v92), !5471
        v94 = get_local ptr { u64 }, __anon_7, !1845
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95, !1845
        v97 = const u64 17, !1845
        store v97 to v96, !1845
        v98 = load v94
        v99 = call require_112(v93, v98), !5474
        v100 = get_local ptr { u64, u64, u64, u64 }, price, !5475
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr u64, v101, !5476
        v103 = load v102
        v104 = call from_140(v103), !5479
        v105 = get_local ptr { u64, u64, u64, u64 }, price, !5480
        v106 = const u64 2
        v107 = get_elem_ptr v105, ptr u64, v106, !3817
        v108 = load v107
        v109 = call from_140(v108), !5483
        v110 = const u256 0x000000000000000000000000000000000000000000000000000000000000012c, !5484
        v111 = call multiply_158(v109, v110), !5487
        v112 = const u256 0x0000000000000000000000000000000000000000000000000000000000002710, !5488
        v113 = call divide_157(v111, v112), !5491
        v114 = call le_162(v104, v113), !5494
        v115 = get_local ptr { u64 }, __anon_8, !1845
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr u64, v116, !1845
        v118 = const u64 17, !1845
        store v118 to v117, !1845
        v119 = load v115
        v120 = call require_112(v114, v119), !5497
        v121 = get_local ptr { u64 }, __anon_9, !3798
        v122 = const u64 0
        v123 = get_elem_ptr v121, ptr u64, v122, !3798
        v124 = const u64 0, !3798
        store v124 to v123, !3798
        v125 = load v121
        v126 = call eq_344(price_position, v125), !5500
        cbr v126, block3(), block4(), !5498

        block3():
        v127 = get_local ptr { u64, u64, u64, u64 }, price, !5501
        v128 = const u64 2
        v129 = get_elem_ptr v127, ptr u64, v128, !3817
        v130 = load v129
        v131 = get_local ptr { u64, u64, u64, u64 }, price, !5502
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !5476
        v134 = load v133
        v135 = call subtract_318(v130, v134), !5505
        v136 = get_local ptr { u64, u64, u64, u64 }, price, !5506
        v137 = const u64 2
        v138 = get_elem_ptr v136, ptr u64, v137, !5506
        store v135 to v138, !5506
        v139 = const unit ()
        br block8(v139)

        block4():
        v140 = get_local ptr { u64 }, __anon_10, !3798
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr u64, v141, !3798
        v143 = const u64 2, !3798
        store v143 to v142, !3798
        v144 = load v140
        v145 = call eq_344(price_position, v144), !5509
        cbr v145, block5(), block6(), !5507

        block5():
        v146 = get_local ptr { u64, u64, u64, u64 }, price, !5510
        v147 = const u64 2
        v148 = get_elem_ptr v146, ptr u64, v147, !3817
        v149 = load v148
        v150 = get_local ptr { u64, u64, u64, u64 }, price, !5511
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr u64, v151, !5476
        v153 = load v152
        v154 = call add_45(v149, v153), !5514
        v155 = get_local ptr { u64, u64, u64, u64 }, price, !5515
        v156 = const u64 2
        v157 = get_elem_ptr v155, ptr u64, v156, !5515
        store v154 to v157, !5515
        v158 = const unit ()
        br block7(v158)

        block6():
        v159 = const unit ()
        br block7(v159)

        block7(v160: ()):
        br block8(v160)

        block8(v161: ()):
        v162 = get_local ptr { u64, u64, u64, u64 }, price, !5516
        v163 = load v162
        ret { u64, u64, u64, u64 } v163
    }

    pub fn contract_call_332(contract_id !3414: b256, method_name !3415: slice, args !3416: { b256 }, coins !3417: u64, asset_id !3418: b256, gas !3419: u64) -> { u64, u64, u64, u64 }, !5517 {
        local { b256, u64, u64 } __anon_0
        local b256 __anon_1
        local mut { u64 } buffer
        local slice first_parameter
        local u64 len
        local slice params
        local u64 ptr
        local slice second_parameter

        entry(contract_id: b256, method_name: slice, args: { b256 }, coins: u64, asset_id: b256, gas: u64):
        v0 = call encode_201(method_name), !5518
        v1 = get_local ptr slice, first_parameter, !3426
        store v0 to v1, !3426
        v2 = call encode_333(args), !5519
        v3 = get_local ptr slice, second_parameter, !3430
        store v2 to v3, !3430
        v4 = get_local ptr slice, first_parameter, !3431
        v5 = load v4
        v6 = call ptr_11(v5), !5520
        v7 = asm(a: v6) -> u64 a, !3435 {
        }
        v8 = get_local ptr slice, second_parameter, !3436
        v9 = load v8
        v10 = call ptr_11(v9), !5521
        v11 = asm(a: v10) -> u64 a, !3440 {
        }
        v12 = get_local ptr { b256, u64, u64 }, __anon_0, !3441
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr b256, v13, !3441
        store contract_id to v14, !3441
        v15 = const u64 1
        v16 = get_elem_ptr v12, ptr u64, v15, !3441
        store v7 to v16, !3441
        v17 = const u64 2
        v18 = get_elem_ptr v12, ptr u64, v17, !3441
        store v11 to v18, !3441
        v19 = load v12
        v20 = call encode_225(v19), !5522
        v21 = get_local ptr slice, params, !3445
        store v20 to v21, !3445
        v22 = get_local ptr slice, params, !3446
        v23 = load v22
        v24 = call ptr_11(v23), !5523
        v25 = get_local ptr b256, __anon_1
        store asset_id to v25
        v26 = get_local ptr b256, __anon_1
        v27 = contract_call ptr ()  v24, coins, v26, gas, !3450
        v28 = load v27
        v29 = asm() -> u64 ret, !3451 {
        }
        v30 = get_local ptr u64, ptr, !3452
        store v29 to v30, !3452
        v31 = asm() -> u64 retl, !3453 {
        }
        v32 = get_local ptr u64, len, !3454
        store v31 to v32, !3454
        v33 = get_local ptr u64, ptr, !3455
        v34 = load v33
        v35 = get_local ptr u64, len, !3456
        v36 = load v35
        v37 = call from_parts_1(v34, v36), !5524
        v38 = get_local ptr { u64 }, buffer, !3460
        store v37 to v38, !3460
        v39 = get_local ptr { u64 }, buffer, !3461
        v40 = call abi_decode_335(v39), !5525
        ret { u64, u64, u64, u64 } v40
    }

    pub fn encode_333(item !1917: { b256 }) -> slice, !5526 {
        local { { u64, u64, u64 } } buffer

        entry(item: { b256 }):
        v0 = call new_100(), !5527
        v1 = call abi_encode_334(item, v0), !5528
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !5529
        ret slice v5
    }

    pub fn abi_encode_334(self !5530: { b256 }, buffer !5531: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !5534 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !5535
        v4 = load v3
        v5 = call abi_encode_213(v4, buffer), !5538
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !5539
        store v5 to v6, !5539
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !5540
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_decode_335(buffer !5541: ptr { u64 }) -> { u64, u64, u64, u64 }, !5543 {
        local { u64, u64, u64, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_28(buffer), !5546
        v1 = call decode_336(buffer), !5549
        v2 = call decode_28(buffer), !5552
        v3 = call decode_28(buffer), !5555
        v4 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !5556
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v0 to v6, !5556
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v1 to v8, !5556
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        store v2 to v10, !5556
        v11 = const u64 3
        v12 = get_elem_ptr v4, ptr u64, v11
        store v3 to v12, !5556
        v13 = load v4
        ret { u64, u64, u64, u64 } v13
    }

    pub fn decode_336(self !1336: ptr { u64 }) -> u64, !5557 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_337(self), !5558
        ret u64 v0
    }

    pub fn abi_decode_337(buffer !5559: ptr { u64 }) -> u64, !5562 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64 }):
        v0 = call read_339(buffer), !5565
        v1 = call as_u32_338(v0), !5568
        v2 = get_local ptr u64, a, !5569
        store v1 to v2, !5569
        v3 = call read_339(buffer), !5572
        v4 = call as_u32_338(v3), !5575
        v5 = get_local ptr u64, b, !5576
        store v4 to v5, !5576
        v6 = call read_339(buffer), !5579
        v7 = call as_u32_338(v6), !5582
        v8 = get_local ptr u64, c, !5583
        store v7 to v8, !5583
        v9 = call read_339(buffer), !5586
        v10 = call as_u32_338(v9), !5589
        v11 = get_local ptr u64, d, !5590
        store v10 to v11, !5590
        v12 = get_local ptr u64, a, !5591
        v13 = load v12
        v14 = const u64 24, !5592
        v15 = call lsh_342(v13, v14), !5595
        v16 = get_local ptr u64, b, !5596
        v17 = load v16
        v18 = const u64 16, !5597
        v19 = call lsh_342(v17, v18), !5600
        v20 = call binary_or_341(v15, v19), !5603
        v21 = get_local ptr u64, c, !5604
        v22 = load v21
        v23 = const u64 8, !5605
        v24 = call lsh_342(v22, v23), !5608
        v25 = call binary_or_341(v20, v24), !5611
        v26 = get_local ptr u64, d, !5612
        v27 = load v26
        v28 = call binary_or_341(v25, v27), !5615
        ret u64 v28
    }

    pub fn as_u32_338(self !5616: u8) -> u64, !5619 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !5620 {
        }
        ret u64 v0
    }

    pub fn read_339(self !5621: ptr { u64 }) -> u8, !5624 {
        local u64 size
        local u8 v
        local u8 v_

        entry(self: ptr { u64 }):
        v0 = get_local ptr u64, size, !5625
        v1 = const u64 1
        store v1 to v0, !5625
        v2 = const bool false
        cbr v2, block0(), block1(), !5626

        block0():
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr u64, v3, !40
        v5 = load v4
        v6 = asm(ptr: v5) -> u8 ptr, !5627 {
        }
        v7 = get_local ptr u8, v, !5628
        store v6 to v7, !5628
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr u64, v8, !40
        v10 = load v9
        v11 = get_local ptr u64, size, !5629
        v12 = load v11
        v13 = const u64 1
        v14 = mul v13, v12
        v15 = add v10, v14
        v16 = const u64 0
        v17 = get_elem_ptr self, ptr u64, v16, !5630
        store v15 to v17, !5630
        v18 = get_local ptr u8, v, !5631
        v19 = load v18
        br block5(v19)

        block1():
        v20 = get_local ptr u64, size, !5632
        v21 = load v20
        v22 = const u64 1, !5633
        v23 = call eq_16(v21, v22), !5636
        cbr v23, block2(), block3(), !5634

        block2():
        v24 = const u64 0
        v25 = get_elem_ptr self, ptr u64, v24, !40
        v26 = load v25
        v27 = asm(ptr: v26, val) -> u8 val, !5637 {
            lb     val ptr i0, !5638
        }
        v28 = get_local ptr u8, v_, !5639
        store v27 to v28, !5639
        v29 = const u64 0
        v30 = get_elem_ptr self, ptr u64, v29, !40
        v31 = load v30
        v32 = const u64 1
        v33 = const u64 1, !5640
        v34 = mul v32, v33
        v35 = add v31, v34
        v36 = const u64 0
        v37 = get_elem_ptr self, ptr u64, v36, !5641
        store v35 to v37, !5641
        v38 = get_local ptr u8, v_, !5642
        v39 = load v38
        br block4(v39)

        block3():
        v40 = call read_8_bytes_340(self), !5645
        br block4(v40)

        block4(v41: u8):
        br block5(v41)

        block5(v42: u8):
        ret u8 v42
    }

    pub fn read_8_bytes_340(self !36: ptr { u64 }) -> u8, !5646 {
        local u8 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !40
        v2 = load v1
        v3 = asm(ptr: v2, val) -> u8 val, !41 {
            lw     val ptr i0, !42
        }
        v4 = get_local ptr u8, v, !43
        store v3 to v4, !43
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !40
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 8, !44
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !45
        store v11 to v13, !45
        v14 = get_local ptr u8, v, !46
        v15 = load v14
        ret u8 v15
    }

    pub fn binary_or_341(self !5647: u64, other !5648: u64) -> u64, !5651 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_342(self !5652: u64, other !5653: u64) -> u64, !5656 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_343(), !5659
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_343() -> u64, !5662 {
        entry():
        v0 = const u64 4294967295, !5663
        ret u64 v0
    }

    pub fn eq_344(self !5664: { u64 }, other !5665: { u64 }) -> bool, !5668 {
        local { { u64 }, { u64 } } __anon_0
        local { { u64 }, { u64 } } __matched_value_1

        entry(self: { u64 }, other: { u64 }):
        v0 = get_local ptr { { u64 }, { u64 } }, __anon_0, !5669
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64 }, v1, !5669
        store self to v2, !5669
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64 }, v3, !5669
        store other to v4, !5669
        v5 = load v0
        v6 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5670
        store v5 to v6, !5670
        v7 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5669
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64 }, v8, !5671
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !5671
        v12 = load v11
        v13 = const u64 0, !5671
        v14 = call eq_16(v12, v13), !5674
        cbr v14, block0(), block1(v14), !5672

        block0():
        v15 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5669
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !5671
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !5671
        v20 = load v19
        v21 = const u64 0, !5671
        v22 = call eq_16(v20, v21), !5675
        br block1(v22), !5672

        block1(v23: bool):
        cbr v23, block2(), block3(), !5672

        block2():
        v24 = const bool true, !5676
        br block14(v24)

        block3():
        v25 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5669
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { u64 }, v26, !5677
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !5677
        v30 = load v29
        v31 = const u64 1, !5677
        v32 = call eq_16(v30, v31), !5680
        cbr v32, block4(), block5(v32), !5678

        block4():
        v33 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5669
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr { u64 }, v34, !5677
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !5677
        v38 = load v37
        v39 = const u64 1, !5677
        v40 = call eq_16(v38, v39), !5681
        br block5(v40), !5678

        block5(v41: bool):
        cbr v41, block6(), block7(), !5678

        block6():
        v42 = const bool true, !5682
        br block13(v42)

        block7():
        v43 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5669
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr { u64 }, v44, !5683
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !5683
        v48 = load v47
        v49 = const u64 2, !5683
        v50 = call eq_16(v48, v49), !5686
        cbr v50, block8(), block9(v50), !5684

        block8():
        v51 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !5669
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr { u64 }, v52, !5683
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54, !5683
        v56 = load v55
        v57 = const u64 2, !5683
        v58 = call eq_16(v56, v57), !5687
        br block9(v58), !5684

        block9(v59: bool):
        cbr v59, block10(), block11(), !5684

        block10():
        v60 = const bool true, !5688
        br block12(v60)

        block11():
        v61 = const bool false, !5689
        br block12(v61)

        block12(v62: bool):
        br block13(v62)

        block13(v63: bool):
        br block14(v63)

        block14(v64: bool):
        ret bool v64
    }

    pub fn pow_345(self !5690: u64, exponent !5691: u64) -> u64, !5694 {
        entry(self: u64, exponent: u64):
        v0 = asm(r1: self, r2: exponent, r3) -> u64 r3, !5695 {
            exp    r3 r1 r2, !5696
        }
        ret u64 v0
    }

    pub fn unwrap_346(self !5698: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }) -> { u64, ( { b256 } | { b256 } ) }, !5701 {
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __matched_value_3
        local { u64, ( { b256 } | { b256 } ) } inner_value

        entry(self: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __matched_value_3, !5702
        store self to v0, !5702
        v1 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __matched_value_3, !5703
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !5703
        v4 = load v3
        v5 = const u64 0, !5703
        v6 = call eq_16(v4, v5), !5706
        cbr v6, block0(), block1(), !5704

        block0():
        v7 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __matched_value_3, !5703
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, ( { b256 } | { b256 } ) }, inner_value, !5707
        store v11 to v12, !5707
        v13 = get_local ptr { u64, ( { b256 } | { b256 } ) }, inner_value, !5708
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !5709
        v16 = call revert_102(v15), !5712
        br block2(v16)

        block2(v17: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v17
    }

    pub fn msg_sender_347() -> { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, !5716 {
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __anon_0
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __anon_1
        local { u64, ( { b256 } | { b256 } ) } __anon_2
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __anon_3
        local { u64, ( { b256 } | { b256 } ) } __anon_4
        local { u64, ( { b256 } | { u64 } ) } __matched_value_1
        local { u64 } err
        local { b256 } owner

        entry():
        v0 = call caller_is_external_348(), !5719
        cbr v0, block0(), block7(), !5717

        block0():
        v1 = call caller_address_349(), !5722
        v2 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !5723
        store v1 to v2, !5723
        v3 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !5720
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5720
        v6 = load v5
        v7 = const u64 1, !5720
        v8 = call eq_16(v6, v7), !5726
        cbr v8, block1(), block2(), !5724

        block1():
        v9 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !5720
        v10 = const u64 1
        v11 = const u64 1
        v12 = get_elem_ptr v9, ptr { u64 }, v10, v11
        v13 = load v12
        v14 = get_local ptr { u64 }, err, !5727
        store v13 to v14, !5727
        v15 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __anon_0, !5728
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !5728
        v18 = const u64 1, !5728
        store v18 to v17, !5728
        v19 = get_local ptr { u64 }, err, !5729
        v20 = load v19
        v21 = const u64 1
        v22 = const u64 1
        v23 = get_elem_ptr v15, ptr { u64 }, v21, v22, !5728
        store v20 to v23, !5728
        v24 = load v15
        br block6(v24)

        block2():
        v25 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !5720
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !5720
        v28 = load v27
        v29 = const u64 0, !5720
        v30 = call eq_16(v28, v29), !5732
        cbr v30, block3(), block4(), !5730

        block3():
        v31 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !5720
        v32 = const u64 1
        v33 = const u64 0
        v34 = get_elem_ptr v31, ptr { b256 }, v32, v33
        v35 = load v34
        v36 = get_local ptr { b256 }, owner, !5733
        store v35 to v36, !5733
        v37 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __anon_1, !5728
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr u64, v38, !5728
        v40 = const u64 0, !5728
        store v40 to v39, !5728
        v41 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_2, !1443
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !1443
        v44 = const u64 0, !1443
        store v44 to v43, !1443
        v45 = get_local ptr { b256 }, owner, !5734
        v46 = load v45
        v47 = const u64 1
        v48 = const u64 0
        v49 = get_elem_ptr v41, ptr { b256 }, v47, v48, !1443
        store v46 to v49, !1443
        v50 = load v41
        v51 = const u64 1
        v52 = const u64 0
        v53 = get_elem_ptr v37, ptr { u64, ( { b256 } | { b256 } ) }, v51, v52, !5728
        store v50 to v53, !5728
        v54 = load v37
        br block5(v54)

        block4():
        v55 = const u64 14757395258967588866, !5723
        revert v55, !5723

        block5(v56: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        br block6(v56)

        block6(v57: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        br block8(v57)

        block7():
        v58 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __anon_3, !5728
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr u64, v59, !5728
        v61 = const u64 0, !5728
        store v61 to v60, !5728
        v62 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_4, !1443
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr u64, v63, !1443
        v65 = const u64 1, !1443
        store v65 to v64, !1443
        v66 = call caller_contract_id_361(), !5737
        v67 = const u64 1
        v68 = const u64 1
        v69 = get_elem_ptr v62, ptr { b256 }, v67, v68, !1443
        store v66 to v69, !1443
        v70 = load v62
        v71 = const u64 1
        v72 = const u64 0
        v73 = get_elem_ptr v58, ptr { u64, ( { b256 } | { b256 } ) }, v71, v72, !5728
        store v70 to v73, !5728
        v74 = load v58
        br block8(v74)

        block8(v75: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        ret { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } v75
    }

    pub fn caller_is_external_348() -> bool, !5740 {
        entry():
        v0 = asm(r1) -> bool r1, !5741 {
            gm     r1 i1, !5742
        }
        ret bool v0
    }

    pub fn caller_address_349() -> { u64, ( { b256 } | { u64 } ) }, !5745 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64 } __anon_2
        local { u64, ( { b256 } | { u64 } ) } __anon_3
        local { u64, ( { b256 } | { u64 } ) } __anon_4
        local { u64 } __anon_5
        local { u64, ( () | { u64 } ) } __matched_value_2
        local { u64, ( () | { u64 } ) } __matched_value_3
        local { u64, ( () | { b256 } ) } __matched_value_4
        local { b256 } address
        local mut { u64, ( () | { b256 } ) } candidate
        local u64 inputs
        local mut u64 iter
        local { u64, ( () | { b256 } ) } owner_of_input
        local { u64, ( () | { u64 } ) } type_of_input

        entry():
        v0 = call input_count_351(), !5748
        v1 = call as_u64_350(v0), !5751
        v2 = get_local ptr u64, inputs, !5752
        store v1 to v2, !5752
        v3 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        v8 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !5753
        store v7 to v8, !5753
        v9 = get_local ptr u64, iter, !5754
        v10 = const u64 0, !5755
        store v10 to v9, !5754
        br while()

        while():
        v11 = get_local ptr u64, iter, !5756
        v12 = load v11
        v13 = get_local ptr u64, inputs, !5757
        v14 = load v13
        v15 = call lt_26(v12, v14), !5760
        cbr v15, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v16 = get_local ptr u64, iter, !5761
        v17 = load v16
        v18 = call input_type_354(v17), !5764
        v19 = get_local ptr { u64, ( () | { u64 } ) }, type_of_input, !5765
        store v18 to v19, !5765
        v20 = get_local ptr { u64, ( () | { u64 } ) }, type_of_input, !5766
        v21 = load v20
        v22 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !5767
        store v21 to v22, !5767
        v23 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !5766
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !5766
        v26 = load v25
        v27 = const u64 1, !5766
        v28 = call eq_16(v26, v27), !5770
        cbr v28, block0(), block1(v28), !5768

        block0():
        v29 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !5766
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v29, ptr { u64 }, v30, v31
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !5771
        v35 = load v34
        v36 = const u64 0, !5771
        v37 = call eq_16(v35, v36), !5772
        br block1(v37), !5768

        block1(v38: bool):
        cbr v38, block2(), block3(), !5768

        block2():
        v39 = const unit (), !5773
        br block9(v39)

        block3():
        v40 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !5766
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !5766
        v43 = load v42
        v44 = const u64 1, !5766
        v45 = call eq_16(v43, v44), !5776
        cbr v45, block4(), block5(v45), !5774

        block4():
        v46 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !5766
        v47 = const u64 1
        v48 = const u64 1
        v49 = get_elem_ptr v46, ptr { u64 }, v47, v48
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !5777
        v52 = load v51
        v53 = const u64 2, !5777
        v54 = call eq_16(v52, v53), !5778
        br block5(v54), !5774

        block5(v55: bool):
        cbr v55, block6(), block7(), !5774

        block6():
        v56 = const unit (), !5779
        br block8(v56)

        block7():
        v57 = get_local ptr u64, iter, !5780
        v58 = load v57
        v59 = const u64 1, !5781
        v60 = call add_45(v58, v59), !5784
        v61 = get_local ptr u64, iter, !5782
        store v60 to v61, !5782
        br while()

        block8(v62: ()):
        br block9(v62)

        block9(v63: ()):
        v64 = get_local ptr { u64, ( () | { u64 } ) }, type_of_input, !5785
        v65 = load v64
        v66 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !5786
        store v65 to v66, !5786
        v67 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !5785
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !5785
        v70 = load v69
        v71 = const u64 1, !5785
        v72 = call eq_16(v70, v71), !5789
        cbr v72, block10(), block11(v72), !5787

        block10():
        v73 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !5785
        v74 = const u64 1
        v75 = const u64 1
        v76 = get_elem_ptr v73, ptr { u64 }, v74, v75
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !5790
        v79 = load v78
        v80 = const u64 0, !5790
        v81 = call eq_16(v79, v80), !5791
        br block11(v81), !5787

        block11(v82: bool):
        cbr v82, block12(), block13(), !5787

        block12():
        v83 = get_local ptr u64, iter, !5792
        v84 = load v83
        v85 = call input_coin_owner_355(v84), !5795
        br block19(v85)

        block13():
        v86 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !5785
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !5785
        v89 = load v88
        v90 = const u64 1, !5785
        v91 = call eq_16(v89, v90), !5798
        cbr v91, block14(), block15(v91), !5796

        block14():
        v92 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !5785
        v93 = const u64 1
        v94 = const u64 1
        v95 = get_elem_ptr v92, ptr { u64 }, v93, v94
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !5799
        v98 = load v97
        v99 = const u64 2, !5799
        v100 = call eq_16(v98, v99), !5800
        br block15(v100), !5796

        block15(v101: bool):
        cbr v101, block16(), block17(), !5796

        block16():
        v102 = get_local ptr u64, iter, !5801
        v103 = load v102
        v104 = call input_message_recipient_357(v103), !5804
        br block18(v104)

        block17():
        v105 = get_local ptr u64, iter, !5805
        v106 = load v105
        v107 = const u64 1, !5806
        v108 = call add_45(v106, v107), !5809
        v109 = get_local ptr u64, iter, !5807
        store v108 to v109, !5807
        br while()

        block18(v110: { u64, ( () | { b256 } ) }):
        br block19(v110)

        block19(v111: { u64, ( () | { b256 } ) }):
        v112 = get_local ptr { u64, ( () | { b256 } ) }, owner_of_input, !5810
        store v111 to v112, !5810
        v113 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !5811
        v114 = load v113
        v115 = call is_none_358(v114), !5814
        cbr v115, block20(), block21(), !5812

        block20():
        v116 = get_local ptr { u64, ( () | { b256 } ) }, owner_of_input, !5815
        v117 = load v116
        v118 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !5816
        store v117 to v118, !5816
        v119 = get_local ptr u64, iter, !5817
        v120 = load v119
        v121 = const u64 1, !5818
        v122 = call add_45(v120, v121), !5821
        v123 = get_local ptr u64, iter, !5819
        store v122 to v123, !5819
        br while()

        block21():
        v124 = const unit ()
        br block22(v124)

        block22(v125: ()):
        v126 = get_local ptr { u64, ( () | { b256 } ) }, owner_of_input, !5822
        v127 = load v126
        v128 = call unwrap_360(v127), !5825
        v129 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !5826
        v130 = load v129
        v131 = call unwrap_360(v130), !5829
        v132 = call eq_359(v128, v131), !5832
        cbr v132, block23(), block24(), !5830

        block23():
        v133 = get_local ptr u64, iter, !5833
        v134 = load v133
        v135 = const u64 1, !5834
        v136 = call add_45(v134, v135), !5837
        v137 = get_local ptr u64, iter, !5835
        store v136 to v137, !5835
        br while()

        block24():
        v138 = const unit ()
        br block25(v138)

        block25(v139: ()):
        v140 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !5728
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr u64, v141, !5728
        v143 = const u64 1, !5728
        store v143 to v142, !5728
        v144 = get_local ptr { u64 }, __anon_2, !5838
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr u64, v145, !5838
        v147 = const u64 0, !5838
        store v147 to v146, !5838
        v148 = load v144
        v149 = const u64 1
        v150 = const u64 1
        v151 = get_elem_ptr v140, ptr { u64 }, v149, v150, !5728
        store v148 to v151, !5728
        v152 = load v140
        ret { u64, ( { b256 } | { u64 } ) } v152, !5839

        end_while():
        v153 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !5840
        v154 = load v153
        v155 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !5841
        store v154 to v155, !5841
        v156 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !5840
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr u64, v157, !5840
        v159 = load v158
        v160 = const u64 1, !5840
        v161 = call eq_16(v159, v160), !5844
        cbr v161, block26(), block27(), !5842

        block26():
        v162 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !5840
        v163 = const u64 1
        v164 = const u64 1
        v165 = get_elem_ptr v162, ptr { b256 }, v163, v164
        v166 = load v165
        v167 = get_local ptr { b256 }, address, !5845
        store v166 to v167, !5845
        v168 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_3, !5728
        v169 = const u64 0
        v170 = get_elem_ptr v168, ptr u64, v169, !5728
        v171 = const u64 0, !5728
        store v171 to v170, !5728
        v172 = get_local ptr { b256 }, address, !5846
        v173 = load v172
        v174 = const u64 1
        v175 = const u64 0
        v176 = get_elem_ptr v168, ptr { b256 }, v174, v175, !5728
        store v173 to v176, !5728
        v177 = load v168
        br block31(v177)

        block27():
        v178 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !5840
        v179 = const u64 0
        v180 = get_elem_ptr v178, ptr u64, v179, !5840
        v181 = load v180
        v182 = const u64 0, !5840
        v183 = call eq_16(v181, v182), !5849
        cbr v183, block28(), block29(), !5847

        block28():
        v184 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_4, !5728
        v185 = const u64 0
        v186 = get_elem_ptr v184, ptr u64, v185, !5728
        v187 = const u64 1, !5728
        store v187 to v186, !5728
        v188 = get_local ptr { u64 }, __anon_5, !5838
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !5838
        v191 = const u64 1, !5838
        store v191 to v190, !5838
        v192 = load v188
        v193 = const u64 1
        v194 = const u64 1
        v195 = get_elem_ptr v184, ptr { u64 }, v193, v194, !5728
        store v192 to v195, !5728
        v196 = load v184
        br block30(v196)

        block29():
        v197 = const u64 14757395258967588866, !5841
        revert v197, !5841

        block30(v198: { u64, ( { b256 } | { u64 } ) }):
        br block31(v198)

        block31(v199: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v199
    }

    pub fn as_u64_350(self !5850: u64) -> u64, !5853 {
        entry(self: u64):
        v0 = asm(input: self) -> u64 input, !5854 {
        }
        ret u64 v0
    }

    pub fn input_count_351() -> u64, !5858 {
        local { u64 } __matched_value_3

        entry():
        v0 = call tx_type_352(), !5861
        v1 = get_local ptr { u64 }, __matched_value_3, !5862
        store v0 to v1, !5862
        v2 = get_local ptr { u64 }, __matched_value_3, !5859
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !5859
        v5 = load v4
        v6 = const u64 0, !5859
        v7 = call eq_16(v5, v6), !5865
        cbr v7, block0(), block1(), !5863

        block0():
        v8 = const u64 0, !5866
        v9 = gtf v8, 5, !5867
        v10 = bitcast v9 to u64, !5867
        br block14(v10)

        block1():
        v11 = get_local ptr { u64 }, __matched_value_3, !5859
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !5859
        v14 = load v13
        v15 = const u64 1, !5859
        v16 = call eq_16(v14, v15), !5870
        cbr v16, block2(), block3(), !5868

        block2():
        v17 = const u64 0, !5871
        v18 = gtf v17, 259, !5872
        v19 = bitcast v18 to u64, !5872
        br block13(v19)

        block3():
        v20 = get_local ptr { u64 }, __matched_value_3, !5859
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !5859
        v23 = load v22
        v24 = const u64 3, !5859
        v25 = call eq_16(v23, v24), !5875
        cbr v25, block4(), block5(), !5873

        block4():
        v26 = const u64 0, !5876
        v27 = gtf v26, 5, !5877
        v28 = bitcast v27 to u64, !5877
        br block12(v28)

        block5():
        v29 = get_local ptr { u64 }, __matched_value_3, !5859
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30, !5859
        v32 = load v31
        v33 = const u64 4, !5859
        v34 = call eq_16(v32, v33), !5880
        cbr v34, block6(), block7(), !5878

        block6():
        v35 = const u64 0, !5881
        v36 = gtf v35, 5, !5882
        v37 = bitcast v36 to u64, !5882
        br block11(v37)

        block7():
        v38 = get_local ptr { u64 }, __matched_value_3, !5859
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !5859
        v41 = load v40
        v42 = const u64 5, !5859
        v43 = call eq_16(v41, v42), !5885
        cbr v43, block8(), block9(), !5883

        block8():
        v44 = const u64 0, !5886
        v45 = gtf v44, 5, !5887
        v46 = bitcast v45 to u64, !5887
        br block10(v46)

        block9():
        v47 = const u64 0, !5888
        v48 = call revert_102(v47), !5891
        br block10(v48)

        block10(v49: u64):
        br block11(v49)

        block11(v50: u64):
        br block12(v50)

        block12(v51: u64):
        br block13(v51)

        block13(v52: u64):
        br block14(v52)

        block14(v53: u64):
        ret u64 v53
    }

    pub fn tx_type_352() -> { u64 }, !5895 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { u64 } __anon_4
        local u8 __matched_value_2

        entry():
        v0 = const u64 0, !5896
        v1 = gtf v0, 1, !5897
        v2 = bitcast v1 to u8, !5897
        v3 = get_local ptr u8, __matched_value_2, !5898
        store v2 to v3, !5898
        v4 = get_local ptr u8, __matched_value_2, !5897
        v5 = load v4
        v6 = const u8 0, !5899
        v7 = call eq_353(v5, v6), !5902
        cbr v7, block0(), block1(), !5900

        block0():
        v8 = get_local ptr { u64 }, __anon_0, !5903
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !5903
        v11 = const u64 0, !5903
        store v11 to v10, !5903
        v12 = load v8
        br block14(v12)

        block1():
        v13 = get_local ptr u8, __matched_value_2, !5897
        v14 = load v13
        v15 = const u8 1, !5904
        v16 = call eq_353(v14, v15), !5907
        cbr v16, block2(), block3(), !5905

        block2():
        v17 = get_local ptr { u64 }, __anon_1, !5903
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !5903
        v20 = const u64 1, !5903
        store v20 to v19, !5903
        v21 = load v17
        br block13(v21)

        block3():
        v22 = get_local ptr u8, __matched_value_2, !5897
        v23 = load v22
        v24 = const u8 3, !5908
        v25 = call eq_353(v23, v24), !5911
        cbr v25, block4(), block5(), !5909

        block4():
        v26 = get_local ptr { u64 }, __anon_2, !5903
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !5903
        v29 = const u64 3, !5903
        store v29 to v28, !5903
        v30 = load v26
        br block12(v30)

        block5():
        v31 = get_local ptr u8, __matched_value_2, !5897
        v32 = load v31
        v33 = const u8 4, !5912
        v34 = call eq_353(v32, v33), !5915
        cbr v34, block6(), block7(), !5913

        block6():
        v35 = get_local ptr { u64 }, __anon_3, !5903
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !5903
        v38 = const u64 4, !5903
        store v38 to v37, !5903
        v39 = load v35
        br block11(v39)

        block7():
        v40 = get_local ptr u8, __matched_value_2, !5897
        v41 = load v40
        v42 = const u8 5, !5916
        v43 = call eq_353(v41, v42), !5919
        cbr v43, block8(), block9(), !5917

        block8():
        v44 = get_local ptr { u64 }, __anon_4, !5903
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45, !5903
        v47 = const u64 5, !5903
        store v47 to v46, !5903
        v48 = load v44
        br block10(v48)

        block9():
        v49 = const u64 0, !5920
        v50 = call revert_102(v49), !5923
        br block10(v50)

        block10(v51: { u64 }):
        br block11(v51)

        block11(v52: { u64 }):
        br block12(v52)

        block12(v53: { u64 }):
        br block13(v53)

        block13(v54: { u64 }):
        br block14(v54)

        block14(v55: { u64 }):
        ret { u64 } v55
    }

    pub fn eq_353(self !5924: u8, other !5925: u8) -> bool, !5928 {
        entry(self: u8, other: u8):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn input_type_354(index !5929: u64) -> { u64, ( () | { u64 } ) }, !5932 {
        local { u64, ( () | { u64 } ) } __anon_0
        local { u64, ( () | { u64 } ) } __anon_1
        local { u64 } __anon_2
        local { u64, ( () | { u64 } ) } __anon_3
        local { u64 } __anon_4
        local { u64, ( () | { u64 } ) } __anon_5
        local { u64 } __anon_6
        local { u64, ( () | { u64 } ) } __anon_7
        local u8 __matched_value_2

        entry(index: u64):
        v0 = call input_count_351(), !5935
        v1 = call as_u64_350(v0), !5938
        v2 = call ge_193(index, v1), !5941
        cbr v2, block0(), block1(), !5939

        block0():
        v3 = get_local ptr { u64, ( () | { u64 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { u64 } ) } v7, !5942

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = gtf index, 512, !5943
        v11 = bitcast v10 to u8, !5943
        v12 = get_local ptr u8, __matched_value_2, !5944
        store v11 to v12, !5944
        v13 = get_local ptr u8, __matched_value_2, !5943
        v14 = load v13
        v15 = const u8 0, !5945
        v16 = call eq_353(v14, v15), !5948
        cbr v16, block3(), block4(), !5946

        block3():
        v17 = get_local ptr { u64, ( () | { u64 } ) }, __anon_1, !2267
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2267
        v20 = const u64 1, !2267
        store v20 to v19, !2267
        v21 = get_local ptr { u64 }, __anon_2, !5949
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !5949
        v24 = const u64 0, !5949
        store v24 to v23, !5949
        v25 = load v21
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v17, ptr { u64 }, v26, v27, !2267
        store v25 to v28, !2267
        v29 = load v17
        br block11(v29)

        block4():
        v30 = get_local ptr u8, __matched_value_2, !5943
        v31 = load v30
        v32 = const u8 1, !5950
        v33 = call eq_353(v31, v32), !5953
        cbr v33, block5(), block6(), !5951

        block5():
        v34 = get_local ptr { u64, ( () | { u64 } ) }, __anon_3, !2267
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !2267
        v37 = const u64 1, !2267
        store v37 to v36, !2267
        v38 = get_local ptr { u64 }, __anon_4, !5949
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !5949
        v41 = const u64 1, !5949
        store v41 to v40, !5949
        v42 = load v38
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v34, ptr { u64 }, v43, v44, !2267
        store v42 to v45, !2267
        v46 = load v34
        br block10(v46)

        block6():
        v47 = get_local ptr u8, __matched_value_2, !5943
        v48 = load v47
        v49 = const u8 2, !5954
        v50 = call eq_353(v48, v49), !5957
        cbr v50, block7(), block8(), !5955

        block7():
        v51 = get_local ptr { u64, ( () | { u64 } ) }, __anon_5, !2267
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !2267
        v54 = const u64 1, !2267
        store v54 to v53, !2267
        v55 = get_local ptr { u64 }, __anon_6, !5949
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !5949
        v58 = const u64 2, !5949
        store v58 to v57, !5949
        v59 = load v55
        v60 = const u64 1
        v61 = const u64 1
        v62 = get_elem_ptr v51, ptr { u64 }, v60, v61, !2267
        store v59 to v62, !2267
        v63 = load v51
        br block9(v63)

        block8():
        v64 = get_local ptr { u64, ( () | { u64 } ) }, __anon_7, !2267
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !2267
        v67 = const u64 0, !2267
        store v67 to v66, !2267
        v68 = load v64
        br block9(v68)

        block9(v69: { u64, ( () | { u64 } ) }):
        br block10(v69)

        block10(v70: { u64, ( () | { u64 } ) }):
        br block11(v70)

        block11(v71: { u64, ( () | { u64 } ) }):
        ret { u64, ( () | { u64 } ) } v71
    }

    pub fn input_coin_owner_355(index !5958: u64) -> { u64, ( () | { b256 } ) }, !5961 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( () | { b256 } ) } __anon_1
        local { u64, ( () | { u64 } ) } __matched_value_6

        entry(index: u64):
        v0 = call input_type_354(index), !5964
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_6, !5965
        store v0 to v1, !5965
        v2 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_6, !5962
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !5962
        v5 = load v4
        v6 = const u64 1, !5962
        v7 = call eq_16(v5, v6), !5968
        cbr v7, block0(), block1(v7), !5966

        block0():
        v8 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_6, !5962
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64 }, v9, v10
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !5969
        v14 = load v13
        v15 = const u64 0, !5969
        v16 = call eq_16(v14, v15), !5970
        br block1(v16), !5966

        block1(v17: bool):
        cbr v17, block2(), block3(), !5966

        block2():
        v18 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !2267
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !2267
        v21 = const u64 1, !2267
        store v21 to v20, !2267
        v22 = gtf index, 515, !5971
        v23 = int_to_ptr v22 to ptr b256, !5971
        v24 = load v23
        v25 = call from_356(v24), !5974
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v18, ptr { b256 }, v26, v27, !2267
        store v25 to v28, !2267
        v29 = load v18
        br block4(v29)

        block3():
        v30 = get_local ptr { u64, ( () | { b256 } ) }, __anon_1, !2267
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !2267
        v33 = const u64 0, !2267
        store v33 to v32, !2267
        v34 = load v30
        br block4(v34)

        block4(v35: { u64, ( () | { b256 } ) }):
        ret { u64, ( () | { b256 } ) } v35
    }

    pub fn from_356(bits !5975: b256) -> { b256 }, !5978 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !5979
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !5979
        v3 = load v0
        ret { b256 } v3
    }

    pub fn input_message_recipient_357(index !5980: u64) -> { u64, ( () | { b256 } ) }, !5983 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( () | { b256 } ) } __anon_1
        local { u64, ( () | { u64 } ) } __matched_value_16

        entry(index: u64):
        v0 = call input_type_354(index), !5986
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_16, !5987
        store v0 to v1, !5987
        v2 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_16, !5984
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !5984
        v5 = load v4
        v6 = const u64 1, !5984
        v7 = call eq_16(v5, v6), !5990
        cbr v7, block0(), block1(v7), !5988

        block0():
        v8 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_16, !5984
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64 }, v9, v10
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !5991
        v14 = load v13
        v15 = const u64 2, !5991
        v16 = call eq_16(v14, v15), !5992
        br block1(v16), !5988

        block1(v17: bool):
        cbr v17, block2(), block3(), !5988

        block2():
        v18 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !2267
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !2267
        v21 = const u64 1, !2267
        store v21 to v20, !2267
        v22 = gtf index, 577, !5993
        v23 = int_to_ptr v22 to ptr b256, !5993
        v24 = load v23
        v25 = call from_356(v24), !5996
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v18, ptr { b256 }, v26, v27, !2267
        store v25 to v28, !2267
        v29 = load v18
        br block4(v29)

        block3():
        v30 = get_local ptr { u64, ( () | { b256 } ) }, __anon_1, !2267
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !2267
        v33 = const u64 0, !2267
        store v33 to v32, !2267
        v34 = load v30
        br block4(v34)

        block4(v35: { u64, ( () | { b256 } ) }):
        ret { u64, ( () | { b256 } ) } v35
    }

    pub fn is_none_358(self !5997: { u64, ( () | { b256 } ) }) -> bool, !6000 {
        local { u64, ( () | { b256 } ) } __matched_value_3

        entry(self: { u64, ( () | { b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_3, !6001
        store self to v0, !6001
        v1 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_3, !6002
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6002
        v4 = load v3
        v5 = const u64 1, !6002
        v6 = call eq_16(v4, v5), !6005
        cbr v6, block0(), block1(), !6003

        block0():
        v7 = const bool false, !6006
        br block2(v7)

        block1():
        v8 = const bool true, !6007
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn eq_359(self !6008: { b256 }, other !6009: { b256 }) -> bool, !6012 {
        entry(self: { b256 }, other: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4480
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { b256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7, !4480
        v9 = load v8
        v10 = call eq_111(v4, v9), !6015
        ret bool v10
    }

    pub fn unwrap_360(self !2242: { u64, ( () | { b256 } ) }) -> { b256 }, !6016 {
        local { u64, ( () | { b256 } ) } __matched_value_4
        local { b256 } inner_value

        entry(self: { u64, ( () | { b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !6017
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { b256 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !6018
        br block2(v16)

        block2(v17: { b256 }):
        ret { b256 } v17
    }

    pub fn caller_contract_id_361() -> { b256 }, !6021 {
        entry():
        v0 = asm(r1) -> b256 r1, !6022 {
            gm     r1 i2, !6023
        }
        v1 = call from_105(v0), !6026
        ret { b256 } v1
    }

    pub fn insert_362(self !6027: { b256, u64, b256 }, key !6028: { { u64, ( { b256 } | { b256 } ) }, { b256 } }, value !6029: u64) -> (), !6032 {
        local { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { { u64, ( { b256 } | { b256 } ) }, { b256 } }, value: u64):
        v0 = call field_id_329(self), !6035
        v1 = get_local ptr { { { u64, ( { b256 } | { b256 } ) }, { b256 } }, b256 }, __anon_0, !6036
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, v2, !6036
        store key to v3, !6036
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !6036
        store v0 to v5, !6036
        v6 = load v1
        v7 = call sha256_326(v6), !6039
        v8 = get_local ptr b256, key_, !6040
        store v7 to v8, !6040
        v9 = get_local ptr b256, key_, !6041
        v10 = load v9
        v11 = const u64 0, !6042
        v12 = call write_363(v10, v11, value), !6045
        v13 = const unit ()
        ret () v13
    }

    pub fn write_363(slot !3223: b256, offset !3224: u64, value !3225: u64) -> (), !6046 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: u64):
        v0 = const u64 8
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !6047
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_145(slot, offset), !6048
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !6049
        v30 = call alloc_51(v29), !6050
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !6051
        v47 = call write_58(v46, value), !6052
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn get_364(self !4122: { b256, u64, b256 }, key !4123: { b256 }) -> { b256, u64, b256 }, !6053 {
        local { { b256 }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { b256 }):
        v0 = call field_id_365(self), !6054
        v1 = get_local ptr { { b256 }, b256 }, __anon_0, !4130
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !4130
        store key to v3, !4130
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4130
        store v0 to v5, !4130
        v6 = load v1
        v7 = call sha256_302(v6), !6055
        v8 = get_local ptr b256, key_, !4134
        store v7 to v8, !4134
        v9 = get_local ptr b256, key_, !4135
        v10 = load v9
        v11 = get_local ptr b256, key_, !4136
        v12 = load v11
        v13 = const u64 0, !4137
        v14 = call new_330(v10, v13, v12), !6056
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_365(self !4549: { b256, u64, b256 }) -> b256, !6057 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !4553
        v4 = load v3
        ret b256 v4
    }

    pub fn insert_366(self !6027: { b256, u64, b256 }, key !6028: { b256 }, value !6029: u64) -> (), !6058 {
        local { { b256 }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { b256 }, value: u64):
        v0 = call field_id_365(self), !6059
        v1 = get_local ptr { { b256 }, b256 }, __anon_0, !6036
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !6036
        store key to v3, !6036
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !6036
        store v0 to v5, !6036
        v6 = load v1
        v7 = call sha256_302(v6), !6060
        v8 = get_local ptr b256, key_, !6040
        store v7 to v8, !6040
        v9 = get_local ptr b256, key_, !6041
        v10 = load v9
        v11 = const u64 0, !6042
        v12 = call write_363(v10, v11, value), !6061
        v13 = const unit ()
        ret () v13
    }

    pub fn log_367(value !1912: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }) -> (), !6062 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }):
        v0 = call encode_368(value), !1916
        v1 = const u64 3591203286967623281
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_368(item !1917: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }) -> slice, !6063 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }):
        v0 = call new_100(), !6064
        v1 = call abi_encode_369(item, v0), !6065
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !6066
        ret slice v5
    }

    pub fn abi_encode_369(self !6067: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }, buffer !6068: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6071 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !6073
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !6076
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6077
        store v5 to v6, !6077
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !6078
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6079
        v13 = load v12
        v14 = call abi_encode_373(v11, v13), !6082
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !6083
        store v14 to v15, !6083
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !6084
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !6085
        v22 = load v21
        v23 = call abi_encode_99(v20, v22), !6088
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !6089
        store v23 to v24, !6089
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u256, v27, !6090
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !6091
        v31 = load v30
        v32 = call abi_encode_374(v29, v31), !6094
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !6095
        store v32 to v33, !6095
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u256, u64 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u64, v36, !6096
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !6097
        v40 = load v39
        v41 = call abi_encode_375(v38, v40), !6100
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6101
        store v41 to v42, !6101
        v43 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6102
        v44 = load v43
        ret { { u64, u64, u64 } } v44
    }

    pub fn abi_encode_370(self !6103: { u64, ( { b256 } | { b256 } ) }, buffer !6104: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6106 {
        local { u64, ( { b256 } | { b256 } ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { b256 } value
        local { b256 } value_

        entry(self: { u64, ( { b256 } | { b256 } ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !6107
        store self to v0, !6107
        v1 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !6108
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6108
        v4 = load v3
        v5 = const u64 0, !6108
        v6 = call eq_16(v4, v5), !6111
        cbr v6, block0(), block1(), !6109

        block0():
        v7 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !6108
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, value, !6112
        store v11 to v12, !6112
        v13 = const u64 0, !6113
        v14 = call abi_encode_99(v13, buffer), !6116
        v15 = get_local ptr { { u64, u64, u64 } }, buffer_, !6117
        store v14 to v15, !6117
        v16 = get_local ptr { b256 }, value, !6118
        v17 = load v16
        v18 = get_local ptr { { u64, u64, u64 } }, buffer_, !6119
        v19 = load v18
        v20 = call abi_encode_371(v17, v19), !6122
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !6123
        store v20 to v21, !6123
        v22 = get_local ptr { { u64, u64, u64 } }, buffer__, !6124
        v23 = load v22
        br block5(v23)

        block1():
        v24 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !6108
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !6108
        v27 = load v26
        v28 = const u64 1, !6108
        v29 = call eq_16(v27, v28), !6127
        cbr v29, block2(), block3(), !6125

        block2():
        v30 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !6108
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v30, ptr { b256 }, v31, v32
        v34 = load v33
        v35 = get_local ptr { b256 }, value_, !6128
        store v34 to v35, !6128
        v36 = const u64 1, !6129
        v37 = call abi_encode_99(v36, buffer), !6132
        v38 = get_local ptr { { u64, u64, u64 } }, buffer___, !6133
        store v37 to v38, !6133
        v39 = get_local ptr { b256 }, value_, !6134
        v40 = load v39
        v41 = get_local ptr { { u64, u64, u64 } }, buffer___, !6135
        v42 = load v41
        v43 = call abi_encode_372(v40, v42), !6138
        v44 = get_local ptr { { u64, u64, u64 } }, buffer____, !6139
        store v43 to v44, !6139
        v45 = get_local ptr { { u64, u64, u64 } }, buffer____, !6140
        v46 = load v45
        br block4(v46)

        block3():
        v47 = const u64 14757395258967588866, !6107
        revert v47, !6107

        block4(v48: { { u64, u64, u64 } }):
        br block5(v48)

        block5(v49: { { u64, u64, u64 } }):
        v50 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6141
        store v49 to v50, !6141
        v51 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6142
        v52 = load v51
        ret { { u64, u64, u64 } } v52
    }

    pub fn abi_encode_371(self !6143: { b256 }, buffer !5541: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6145 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4480
        v4 = load v3
        v5 = call abi_encode_213(v4, buffer), !6148
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6149
        store v5 to v6, !6149
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !6150
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_372(self !6151: { b256 }, buffer !1428: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6153 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2070
        v4 = load v3
        v5 = call abi_encode_213(v4, buffer), !6156
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6157
        store v5 to v6, !6157
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !6158
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_373(self !6143: { b256 }, buffer !5541: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6159 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3391
        v4 = load v3
        v5 = call abi_encode_213(v4, buffer), !6160
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6149
        store v5 to v6, !6149
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !6150
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_374(self !6161: u256, buffer !6162: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6165 {
        local { u64, u64, u64 } __anon_0
        local u256 __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: u256, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 32
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = get_local ptr u256, __anon_1
        store self to v22
        v23 = ptr_to_int v20 to u64
        v24 = add v23, v16
        v25 = int_to_ptr v24 to ptr u8
        mem_copy_bytes v25, v22, 32
        v26 = const u64 32
        v27 = add v16, v26
        v28 = ptr_to_int v20 to u64
        v29 = get_local ptr { u64, u64, u64 }, __anon_2
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v28 to v31
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        store v21 to v33
        v34 = const u64 2
        v35 = get_elem_ptr v29, ptr u64, v34
        store v27 to v35
        v36 = asm(buffer: v29) -> { u64, u64, u64 } buffer {
        }
        v37 = get_local ptr { { u64, u64, u64 } }, __anon_3, !6166
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { u64, u64, u64 }, v38
        store v36 to v39, !6166
        v40 = load v37
        ret { { u64, u64, u64 } } v40

        block1():
        v41 = const u64 2
        v42 = mul v13, v41
        v43 = add v42, v17
        v44 = asm(new_cap: v43, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v44, v43)

        block2():
        br block0(v10, v13)
    }

    pub fn abi_encode_375(self !6167: u64, buffer !6168: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6171 {
        local { u64, u64, u64 } __anon_0
        local u64 __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 4
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = get_local ptr u64, __anon_1
        store self to v22
        v23 = ptr_to_int v22 to u64
        v24 = const u64 4
        v25 = add v23, v24
        v26 = int_to_ptr v25 to ptr u8
        v27 = ptr_to_int v20 to u64
        v28 = add v27, v16
        v29 = int_to_ptr v28 to ptr u8
        mem_copy_bytes v29, v26, 4
        v30 = const u64 4
        v31 = add v16, v30
        v32 = ptr_to_int v20 to u64
        v33 = get_local ptr { u64, u64, u64 }, __anon_2
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        store v32 to v35
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36
        store v21 to v37
        v38 = const u64 2
        v39 = get_elem_ptr v33, ptr u64, v38
        store v31 to v39
        v40 = asm(buffer: v33) -> { u64, u64, u64 } buffer {
        }
        v41 = get_local ptr { { u64, u64, u64 } }, __anon_3, !6172
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { u64, u64, u64 }, v42
        store v40 to v43, !6172
        v44 = load v41
        ret { { u64, u64, u64 } } v44

        block1():
        v45 = const u64 2
        v46 = mul v13, v45
        v47 = add v46, v17
        v48 = asm(new_cap: v47, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v48, v47)

        block2():
        br block0(v10, v13)
    }

    pub fn add_376(self !6173: { u256 }, other !6174: { u256 }) -> { u256 }, !6177 {
        local u256 indent
        local mut { u256 } res

        entry(self: { u256 }, other: { u256 }):
        v0 = call indent_272(), !6180
        v1 = get_local ptr u256, indent, !6181
        store v0 to v1, !6181
        v2 = call new_271(), !6184
        v3 = get_local ptr { u256 }, res, !6185
        store v2 to v3, !6185
        v4 = ptr_to_int self to u64
        v5 = int_to_ptr v4 to ptr { u256 }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u256, v6, !4644
        v8 = load v7
        v9 = get_local ptr u256, indent, !6186
        v10 = load v9
        v11 = call gt_151(v8, v10), !6189
        cbr v11, block1(v11), block0(), !6190

        block0():
        v12 = ptr_to_int self to u64
        v13 = int_to_ptr v12 to ptr { u256 }
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u256, v14, !4644
        v16 = load v15
        v17 = get_local ptr u256, indent, !6191
        v18 = load v17
        v19 = call eq_153(v16, v18), !6194
        br block1(v19), !6190

        block1(v20: bool):
        cbr v20, block2(), block3(), !6190

        block2():
        v21 = ptr_to_int self to u64
        v22 = int_to_ptr v21 to ptr { u256 }
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u256, v23, !4644
        v25 = load v24
        v26 = get_local ptr u256, indent, !6195
        v27 = load v26
        v28 = call subtract_125(v25, v27), !6198
        v29 = ptr_to_int other to u64
        v30 = int_to_ptr v29 to ptr { u256 }
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u256, v31, !4644
        v33 = load v32
        v34 = call add_124(v28, v33), !6201
        v35 = call from_uint_288(v34), !6204
        v36 = get_local ptr { u256 }, res, !6205
        store v35 to v36, !6205
        v37 = const unit (), !6205
        br block16(v37)

        block3():
        v38 = ptr_to_int self to u64
        v39 = int_to_ptr v38 to ptr { u256 }
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u256, v40, !4644
        v42 = load v41
        v43 = get_local ptr u256, indent, !6206
        v44 = load v43
        v45 = call lt_163(v42, v44), !6209
        cbr v45, block4(), block5(v45), !6210

        block4():
        v46 = ptr_to_int other to u64
        v47 = int_to_ptr v46 to ptr { u256 }
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u256, v48, !4644
        v50 = load v49
        v51 = get_local ptr u256, indent, !6211
        v52 = load v51
        v53 = call lt_163(v50, v52), !6214
        br block5(v53), !6210

        block5(v54: bool):
        cbr v54, block6(), block7(), !6210

        block6():
        v55 = ptr_to_int self to u64
        v56 = int_to_ptr v55 to ptr { u256 }
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u256, v57, !4644
        v59 = load v58
        v60 = ptr_to_int other to u64
        v61 = int_to_ptr v60 to ptr { u256 }
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr u256, v62, !4644
        v64 = load v63
        v65 = call add_124(v59, v64), !6217
        v66 = get_local ptr u256, indent, !6218
        v67 = load v66
        v68 = call subtract_125(v65, v67), !6221
        v69 = call from_uint_288(v68), !6224
        v70 = get_local ptr { u256 }, res, !6225
        store v69 to v70, !6225
        v71 = const unit ()
        br block15(v71)

        block7():
        v72 = ptr_to_int self to u64
        v73 = int_to_ptr v72 to ptr { u256 }
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u256, v74, !4644
        v76 = load v75
        v77 = get_local ptr u256, indent, !6226
        v78 = load v77
        v79 = call lt_163(v76, v78), !6229
        cbr v79, block8(), block9(v79), !6230

        block8():
        v80 = ptr_to_int other to u64
        v81 = int_to_ptr v80 to ptr { u256 }
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr u256, v82, !4644
        v84 = load v83
        v85 = get_local ptr u256, indent, !6231
        v86 = load v85
        v87 = call gt_151(v84, v86), !6234
        cbr v87, block11(v87), block10(), !6235

        block9(v88: bool):
        cbr v88, block12(), block13(), !6230

        block10():
        v89 = ptr_to_int other to u64
        v90 = int_to_ptr v89 to ptr { u256 }
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u256, v91, !4644
        v93 = load v92
        v94 = get_local ptr u256, indent, !6236
        v95 = load v94
        v96 = call eq_153(v93, v95), !6239
        br block11(v96), !6235

        block11(v97: bool):
        br block9(v97), !6230

        block12():
        v98 = ptr_to_int other to u64
        v99 = int_to_ptr v98 to ptr { u256 }
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u256, v100, !4644
        v102 = load v101
        v103 = get_local ptr u256, indent, !6240
        v104 = load v103
        v105 = call subtract_125(v102, v104), !6243
        v106 = ptr_to_int self to u64
        v107 = int_to_ptr v106 to ptr { u256 }
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr u256, v108, !4644
        v110 = load v109
        v111 = call add_124(v105, v110), !6246
        v112 = call from_uint_288(v111), !6249
        v113 = get_local ptr { u256 }, res, !6250
        store v112 to v113, !6250
        v114 = const unit ()
        br block14(v114)

        block13():
        v115 = const unit ()
        br block14(v115)

        block14(v116: ()):
        br block15(v116)

        block15(v117: ()):
        br block16(v117)

        block16(v118: ()):
        v119 = get_local ptr { u256 }, res, !6251
        v120 = load v119
        ret { u256 } v120
    }

    pub fn lt_377(self !6252: { u256 }, other !6253: { u256 }) -> bool, !6256 {
        entry(self: { u256 }, other: { u256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !4644
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { u256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u256, v7, !4644
        v9 = load v8
        v10 = call lt_163(v4, v9), !6259
        ret bool v10
    }

    fn principal_value_378(present_value !6260: { u256 }) -> { u256 }, !6263 {
        local { b256, u64, b256 } __anon_0
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 principal_value
        local u256 principal_value_

        entry(present_value: { u256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6264
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6264
        store v3 to v2, !6264
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6264
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6264
        store v9 to v8, !6264
        v10 = load v0
        v11 = call read_132(v10), !6267
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6268
        store v11 to v12, !6268
        v13 = call zero_277(), !6271
        v14 = call ge_274(present_value, v13), !6274
        cbr v14, block0(), block1(), !6272

        block0():
        v15 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6275
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u256, v16, !2709
        v18 = load v17
        v19 = call try_into_279(present_value), !6278
        v20 = call unwrap_278(v19), !6281
        v21 = call principal_value_supply_379(v18, v20), !6284
        v22 = get_local ptr u256, principal_value, !6285
        store v21 to v22, !6285
        v23 = get_local ptr u256, principal_value, !6286
        v24 = load v23
        v25 = call try_from_282(v24), !6289
        v26 = call unwrap_281(v25), !6292
        br block2(v26)

        block1():
        v27 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6293
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr u256, v28, !2712
        v30 = load v29
        v31 = call wrapping_neg_284(present_value), !6296
        v32 = call try_into_279(v31), !6299
        v33 = call unwrap_278(v32), !6302
        v34 = call principal_value_borrow_380(v30, v33), !6305
        v35 = get_local ptr u256, principal_value_, !6306
        store v34 to v35, !6306
        v36 = get_local ptr u256, principal_value_, !6307
        v37 = load v36
        v38 = call neg_try_from_289(v37), !6310
        v39 = call unwrap_281(v38), !6313
        br block2(v39)

        block2(v40: { u256 }):
        ret { u256 } v40
    }

    pub fn principal_value_supply_379(base_supply_index !6314: u256, present !6315: u256) -> u256, !6318 {
        entry(base_supply_index: u256, present: u256):
        v0 = const u256 0x00000000000000000000000000000000000000000000000000038d7ea4c68000, !2701
        v1 = call multiply_158(present, v0), !6321
        v2 = call divide_157(v1, base_supply_index), !6324
        ret u256 v2
    }

    pub fn principal_value_borrow_380(base_borrow_index !6325: u256, present !6326: u256) -> u256, !6329 {
        entry(base_borrow_index: u256, present: u256):
        v0 = const u256 0x00000000000000000000000000000000000000000000000000038d7ea4c68000, !2701
        v1 = call multiply_158(present, v0), !6332
        v2 = call add_124(v1, base_borrow_index), !6335
        v3 = const u256 0x0000000000000000000000000000000000000000000000000000000000000001, !6336
        v4 = call subtract_125(v2, v3), !6339
        v5 = call divide_157(v4, base_borrow_index), !6342
        ret u256 v5
    }

    fn update_base_principal_381(account !6343: { u64, ( { b256 } | { b256 } ) }, basic !6344: { { u256 }, u256, u256 }, principal_new !6345: { u256 }) -> (), !6348 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } } __anon_3
        local u256 accrual_descale_factor
        local u256 base_tracking_accrued_delta
        local u256 base_tracking_accrued_delta_
        local mut { { u256 }, u256, u256 } basic_
        local u256 index_delta
        local u256 index_delta_
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration
        local { u256 } principal

        entry(account: { u64, ( { b256 } | { b256 } ) }, basic: { { u256 }, u256, u256 }, principal_new: { u256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6349
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6349
        store v3 to v2, !6349
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6349
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6349
        store v9 to v8, !6349
        v10 = load v0
        v11 = call read_132(v10), !6352
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6353
        store v11 to v12, !6353
        v13 = get_local ptr { b256, u64, b256 }, __anon_1, !6354
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr b256, v14
        v16 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !6354
        store v16 to v15, !6354
        v17 = const u64 1
        v18 = get_elem_ptr v13, ptr u64, v17
        v19 = const u64 0
        store v19 to v18, !6354
        v20 = const u64 2
        v21 = get_elem_ptr v13, ptr b256, v20
        v22 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !6354
        store v22 to v21, !6354
        v23 = load v13
        v24 = call read_164(v23), !6357
        v25 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !6358
        store v24 to v25, !6358
        v26 = ptr_to_int basic to u64
        v27 = int_to_ptr v26 to ptr { { u256 }, u256, u256 }
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr { u256 }, v28, !3680
        v30 = load v29
        v31 = get_local ptr { u256 }, principal, !6359
        store v30 to v31, !6359
        v32 = get_local ptr { { u256 }, u256, u256 }, basic_, !6360
        store basic to v32, !6360
        v33 = get_local ptr { { u256 }, u256, u256 }, basic_, !6361
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { u256 }, v34, !6361
        store principal_new to v35, !6361
        v36 = const u64 10, !6362
        v37 = call from_140(v36), !6365
        v38 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !6366
        v39 = const u64 1
        v40 = get_elem_ptr v38, ptr u64, v39, !2486
        v41 = load v40
        v42 = call pow_172(v37, v41), !6369
        v43 = const u256 0x00000000000000000000000000000000000000000000000000000000000f4240, !6370
        v44 = call divide_157(v42, v43), !6373
        v45 = get_local ptr u256, accrual_descale_factor, !6374
        store v44 to v45, !6374
        v46 = get_local ptr { u256 }, principal, !6375
        v47 = load v46
        v48 = call zero_277(), !6378
        v49 = call ge_274(v47, v48), !6381
        cbr v49, block0(), block1(), !6379

        block0():
        v50 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6382
        v51 = const u64 2
        v52 = get_elem_ptr v50, ptr u256, v51, !2502
        v53 = load v52
        v54 = get_local ptr { { u256 }, u256, u256 }, basic_, !6383
        v55 = const u64 1
        v56 = get_elem_ptr v54, ptr u256, v55, !6384
        v57 = load v56
        v58 = call subtract_125(v53, v57), !6387
        v59 = get_local ptr u256, index_delta, !6388
        store v58 to v59, !6388
        v60 = get_local ptr u256, index_delta, !6389
        v61 = load v60
        v62 = get_local ptr { u256 }, principal, !6390
        v63 = load v62
        v64 = call try_into_279(v63), !6393
        v65 = call unwrap_278(v64), !6396
        v66 = call multiply_158(v61, v65), !6399
        v67 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !6400
        v68 = const u64 12
        v69 = get_elem_ptr v67, ptr u256, v68, !6401
        v70 = load v69
        v71 = call divide_157(v66, v70), !6404
        v72 = get_local ptr u256, accrual_descale_factor, !6405
        v73 = load v72
        v74 = call divide_157(v71, v73), !6408
        v75 = get_local ptr u256, base_tracking_accrued_delta, !6409
        store v74 to v75, !6409
        v76 = get_local ptr { { u256 }, u256, u256 }, basic_, !6410
        v77 = const u64 2
        v78 = get_elem_ptr v76, ptr u256, v77, !6411
        v79 = load v78
        v80 = get_local ptr u256, base_tracking_accrued_delta, !6412
        v81 = load v80
        v82 = call add_124(v79, v81), !6415
        v83 = get_local ptr { { u256 }, u256, u256 }, basic_, !6413
        v84 = const u64 2
        v85 = get_elem_ptr v83, ptr u256, v84, !6413
        store v82 to v85, !6413
        v86 = const unit ()
        br block2(v86)

        block1():
        v87 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6416
        v88 = const u64 3
        v89 = get_elem_ptr v87, ptr u256, v88, !2533
        v90 = load v89
        v91 = get_local ptr { { u256 }, u256, u256 }, basic_, !6417
        v92 = const u64 1
        v93 = get_elem_ptr v91, ptr u256, v92, !6384
        v94 = load v93
        v95 = call subtract_125(v90, v94), !6420
        v96 = get_local ptr u256, index_delta_, !6421
        store v95 to v96, !6421
        v97 = get_local ptr u256, index_delta_, !6422
        v98 = load v97
        v99 = get_local ptr { u256 }, principal, !6423
        v100 = load v99
        v101 = call wrapping_neg_284(v100), !6426
        v102 = call try_into_279(v101), !6429
        v103 = call unwrap_278(v102), !6432
        v104 = call multiply_158(v98, v103), !6435
        v105 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !6436
        v106 = const u64 12
        v107 = get_elem_ptr v105, ptr u256, v106, !6401
        v108 = load v107
        v109 = call divide_157(v104, v108), !6439
        v110 = get_local ptr u256, accrual_descale_factor, !6440
        v111 = load v110
        v112 = call divide_157(v109, v111), !6443
        v113 = get_local ptr u256, base_tracking_accrued_delta_, !6444
        store v112 to v113, !6444
        v114 = get_local ptr { { u256 }, u256, u256 }, basic_, !6445
        v115 = const u64 2
        v116 = get_elem_ptr v114, ptr u256, v115, !6411
        v117 = load v116
        v118 = get_local ptr u256, base_tracking_accrued_delta_, !6446
        v119 = load v118
        v120 = call add_124(v117, v119), !6449
        v121 = get_local ptr { { u256 }, u256, u256 }, basic_, !6447
        v122 = const u64 2
        v123 = get_elem_ptr v121, ptr u256, v122, !6447
        store v120 to v123, !6447
        v124 = const unit ()
        br block2(v124)

        block2(v125: ()):
        v126 = call zero_277(), !6452
        v127 = call ge_274(principal_new, v126), !6455
        cbr v127, block3(), block4(), !6453

        block3():
        v128 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6456
        v129 = const u64 2
        v130 = get_elem_ptr v128, ptr u256, v129, !2502
        v131 = load v130
        v132 = get_local ptr { { u256 }, u256, u256 }, basic_, !6457
        v133 = const u64 1
        v134 = get_elem_ptr v132, ptr u256, v133, !6457
        store v131 to v134, !6457
        v135 = const unit ()
        br block5(v135)

        block4():
        v136 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6458
        v137 = const u64 3
        v138 = get_elem_ptr v136, ptr u256, v137, !2533
        v139 = load v138
        v140 = get_local ptr { { u256 }, u256, u256 }, basic_, !6459
        v141 = const u64 1
        v142 = get_elem_ptr v140, ptr u256, v141, !6459
        store v139 to v142, !6459
        v143 = const unit ()
        br block5(v143)

        block5(v144: ()):
        v145 = get_local ptr { b256, u64, b256 }, __anon_2, !6460
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr b256, v146
        v148 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !6460
        store v148 to v147, !6460
        v149 = const u64 1
        v150 = get_elem_ptr v145, ptr u64, v149
        v151 = const u64 0
        store v151 to v150, !6460
        v152 = const u64 2
        v153 = get_elem_ptr v145, ptr b256, v152
        v154 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !6460
        store v154 to v153, !6460
        v155 = load v145
        v156 = get_local ptr { { u256 }, u256, u256 }, basic_, !6461
        v157 = load v156
        v158 = call insert_382(v155, account, v157), !6464
        v159 = get_local ptr { { u256 }, u256, u256 }, basic_, !6465
        v160 = load v159
        v161 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }, __anon_3, !6466
        v162 = const u64 0
        v163 = get_elem_ptr v161, ptr { u64, ( { b256 } | { b256 } ) }, v162
        store account to v163, !6466
        v164 = const u64 1
        v165 = get_elem_ptr v161, ptr { { u256 }, u256, u256 }, v164
        store v160 to v165, !6466
        v166 = load v161
        v167 = call log_385(v166), !6469
        v168 = const unit ()
        ret () v168
    }

    pub fn insert_382(self !6027: { b256, u64, b256 }, key !6028: { u64, ( { b256 } | { b256 } ) }, value !6029: { { u256 }, u256, u256 }) -> (), !6470 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }, value: { { u256 }, u256, u256 }):
        v0 = call field_id_268(self), !6471
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !6036
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !6036
        store key to v3, !6036
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !6036
        store v0 to v5, !6036
        v6 = load v1
        v7 = call sha256_240(v6), !6472
        v8 = get_local ptr b256, key_, !6040
        store v7 to v8, !6040
        v9 = get_local ptr b256, key_, !6041
        v10 = load v9
        v11 = const u64 0, !6042
        v12 = call write_383(v10, v11, value), !6473
        v13 = const unit ()
        ret () v13
    }

    pub fn write_383(slot !3223: b256, offset !3224: u64, value !3225: { { u256 }, u256, u256 }) -> (), !6474 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { { u256 }, u256, u256 }):
        v0 = const u64 96
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !6475
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_235(slot, offset), !6476
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !6477
        v30 = call alloc_51(v29), !6478
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !6479
        v47 = call write_384(v46, value), !6480
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_384(self !1596: u64, val !1597: { { u256 }, u256, u256 }) -> (), !6481 {
        entry(self: u64, val: { { u256 }, u256, u256 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 96
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 96
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn log_385(value !1912: { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }) -> (), !6482 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }):
        v0 = call encode_386(value), !1916
        v1 = const u64 5291237237808257645
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_386(item !1917: { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }) -> slice, !6483 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }):
        v0 = call new_100(), !6484
        v1 = call abi_encode_387(item, v0), !6485
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !6486
        ret slice v5
    }

    pub fn abi_encode_387(self !6487: { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }, buffer !6488: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6491 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !6492
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !6495
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6496
        store v5 to v6, !6496
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { { u256 }, u256, u256 } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { { u256 }, u256, u256 }, v9, !6497
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6498
        v13 = load v12
        v14 = call abi_encode_388(v11, v13), !6501
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !6502
        store v14 to v15, !6502
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !6503
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn abi_encode_388(self !6504: { { u256 }, u256, u256 }, buffer !1460: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6507 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { u256 }, u256, u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u256 }, u256, u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u256 }, v2, !3680
        v4 = load v3
        v5 = call abi_encode_389(v4, buffer), !6510
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6511
        store v5 to v6, !6511
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u256 }, u256, u256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u256, v9, !6384
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6512
        v13 = load v12
        v14 = call abi_encode_374(v11, v13), !6515
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !6516
        store v14 to v15, !6516
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u256 }, u256, u256 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u256, v18, !6411
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !6517
        v22 = load v21
        v23 = call abi_encode_374(v20, v22), !6520
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !6521
        store v23 to v24, !6521
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !6522
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn abi_encode_389(self !6523: { u256 }, buffer !6524: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6527 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !4644
        v4 = load v3
        v5 = call abi_encode_374(v4, buffer), !6529
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6530
        store v5 to v6, !6530
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !6158
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    fn repay_and_supply_amount_390(old_principal !6531: { u256 }, new_principal !6532: { u256 }) -> { u256, u256 }, !6535 {
        local { u256, u256 } __anon_0
        local { u256, u256 } __anon_1
        local { u256, u256 } __anon_2
        local { u256, u256 } __anon_3

        entry(old_principal: { u256 }, new_principal: { u256 }):
        v0 = call lt_377(new_principal, old_principal), !6538
        cbr v0, block0(), block1(), !6536

        block0():
        v1 = call zero_160(), !6541
        v2 = call zero_160(), !6544
        v3 = get_local ptr { u256, u256 }, __anon_0, !6545
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u256, v4, !6545
        store v1 to v5, !6545
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u256, v6, !6545
        store v2 to v7, !6545
        v8 = load v3
        ret { u256, u256 } v8, !6546

        block1():
        v9 = const unit ()
        br block2(v9)

        block2(v10: ()):
        v11 = call zero_277(), !6549
        v12 = call le_391(new_principal, v11), !6552
        cbr v12, block3(), block4(), !6550

        block3():
        v13 = call subtract_392(new_principal, old_principal), !6555
        v14 = call try_into_279(v13), !6558
        v15 = call unwrap_278(v14), !6561
        v16 = call zero_160(), !6564
        v17 = get_local ptr { u256, u256 }, __anon_1, !6565
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u256, v18, !6565
        store v15 to v19, !6565
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u256, v20, !6565
        store v16 to v21, !6565
        v22 = load v17
        ret { u256, u256 } v22, !6566

        block4():
        v23 = call zero_277(), !6569
        v24 = call ge_274(old_principal, v23), !6572
        cbr v24, block5(), block6(), !6570

        block5():
        v25 = call zero_160(), !6575
        v26 = call subtract_392(new_principal, old_principal), !6578
        v27 = call try_into_279(v26), !6581
        v28 = call unwrap_278(v27), !6584
        v29 = get_local ptr { u256, u256 }, __anon_2, !6585
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u256, v30, !6585
        store v25 to v31, !6585
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u256, v32, !6585
        store v28 to v33, !6585
        v34 = load v29
        ret { u256, u256 } v34, !6586

        block6():
        v35 = call wrapping_neg_284(old_principal), !6589
        v36 = call try_into_279(v35), !6592
        v37 = call unwrap_278(v36), !6595
        v38 = call try_into_279(new_principal), !6598
        v39 = call unwrap_278(v38), !6601
        v40 = get_local ptr { u256, u256 }, __anon_3, !6602
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u256, v41, !6602
        store v37 to v42, !6602
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u256, v43, !6602
        store v39 to v44, !6602
        v45 = load v40
        ret { u256, u256 } v45, !6603

        block7():
        br block5()

        block8():
        br block3()
    }

    pub fn le_391(self !2932: { u256 }, other !2933: { u256 }) -> bool, !6604 {
        entry(self: { u256 }, other: { u256 }):
        v0 = call lt_377(self, other), !6605
        cbr v0, block1(v0), block0(), !2940

        block0():
        v1 = call eq_276(self, other), !6606
        br block1(v1), !2940

        block1(v2: bool):
        ret bool v2
    }

    pub fn subtract_392(self !6607: { u256 }, other !6608: { u256 }) -> { u256 }, !6611 {
        local mut { u256 } res

        entry(self: { u256 }, other: { u256 }):
        v0 = call new_271(), !6614
        v1 = get_local ptr { u256 }, res, !6615
        store v0 to v1, !6615
        v2 = ptr_to_int self to u64
        v3 = int_to_ptr v2 to ptr { u256 }
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u256, v4, !4644
        v6 = load v5
        v7 = call indent_272(), !6618
        v8 = call ge_178(v6, v7), !6621
        cbr v8, block0(), block1(v8), !6622

        block0():
        v9 = ptr_to_int other to u64
        v10 = int_to_ptr v9 to ptr { u256 }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u256, v11, !4644
        v13 = load v12
        v14 = call indent_272(), !6625
        v15 = call ge_178(v13, v14), !6628
        br block1(v15), !6622

        block1(v16: bool):
        cbr v16, block2(), block6(), !6622

        block2():
        v17 = ptr_to_int self to u64
        v18 = int_to_ptr v17 to ptr { u256 }
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u256, v19, !4644
        v21 = load v20
        v22 = ptr_to_int other to u64
        v23 = int_to_ptr v22 to ptr { u256 }
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u256, v24, !4644
        v26 = load v25
        v27 = call gt_151(v21, v26), !6631
        cbr v27, block3(), block4(), !6629

        block3():
        v28 = ptr_to_int self to u64
        v29 = int_to_ptr v28 to ptr { u256 }
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u256, v30, !4644
        v32 = load v31
        v33 = ptr_to_int other to u64
        v34 = int_to_ptr v33 to ptr { u256 }
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u256, v35, !4644
        v37 = load v36
        v38 = call subtract_125(v32, v37), !6634
        v39 = call indent_272(), !6637
        v40 = call add_124(v38, v39), !6640
        v41 = call from_uint_288(v40), !6643
        v42 = get_local ptr { u256 }, res, !6644
        store v41 to v42, !6644
        v43 = const unit ()
        br block5(v43)

        block4():
        v44 = ptr_to_int self to u64
        v45 = int_to_ptr v44 to ptr { u256 }
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u256, v46, !4644
        v48 = load v47
        v49 = ptr_to_int other to u64
        v50 = int_to_ptr v49 to ptr { u256 }
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr u256, v51, !4644
        v53 = load v52
        v54 = call indent_272(), !6647
        v55 = call subtract_125(v53, v54), !6650
        v56 = call subtract_125(v48, v55), !6653
        v57 = call from_uint_288(v56), !6656
        v58 = get_local ptr { u256 }, res, !6657
        store v57 to v58, !6657
        v59 = const unit ()
        br block5(v59)

        block5(v60: ()):
        br block25(v60)

        block6():
        v61 = ptr_to_int self to u64
        v62 = int_to_ptr v61 to ptr { u256 }
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr u256, v63, !4644
        v65 = load v64
        v66 = call indent_272(), !6660
        v67 = call ge_178(v65, v66), !6663
        cbr v67, block7(), block8(v67), !6664

        block7():
        v68 = ptr_to_int other to u64
        v69 = int_to_ptr v68 to ptr { u256 }
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u256, v70, !4644
        v72 = load v71
        v73 = call indent_272(), !6667
        v74 = call lt_163(v72, v73), !6670
        br block8(v74), !6664

        block8(v75: bool):
        cbr v75, block9(), block10(), !6664

        block9():
        v76 = ptr_to_int self to u64
        v77 = int_to_ptr v76 to ptr { u256 }
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u256, v78, !4644
        v80 = load v79
        v81 = ptr_to_int other to u64
        v82 = int_to_ptr v81 to ptr { u256 }
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u256, v83, !4644
        v85 = load v84
        v86 = call subtract_125(v80, v85), !6673
        v87 = call indent_272(), !6676
        v88 = call add_124(v86, v87), !6679
        v89 = call from_uint_288(v88), !6682
        v90 = get_local ptr { u256 }, res, !6683
        store v89 to v90, !6683
        v91 = const unit ()
        br block24(v91)

        block10():
        v92 = ptr_to_int self to u64
        v93 = int_to_ptr v92 to ptr { u256 }
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u256, v94, !4644
        v96 = load v95
        v97 = call indent_272(), !6686
        v98 = call lt_163(v96, v97), !6689
        cbr v98, block11(), block12(v98), !6690

        block11():
        v99 = ptr_to_int other to u64
        v100 = int_to_ptr v99 to ptr { u256 }
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr u256, v101, !4644
        v103 = load v102
        v104 = call indent_272(), !6693
        v105 = call ge_178(v103, v104), !6696
        br block12(v105), !6690

        block12(v106: bool):
        cbr v106, block13(), block14(), !6690

        block13():
        v107 = ptr_to_int self to u64
        v108 = int_to_ptr v107 to ptr { u256 }
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u256, v109, !4644
        v111 = load v110
        v112 = ptr_to_int other to u64
        v113 = int_to_ptr v112 to ptr { u256 }
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u256, v114, !4644
        v116 = load v115
        v117 = call indent_272(), !6699
        v118 = call subtract_125(v116, v117), !6702
        v119 = call subtract_125(v111, v118), !6705
        v120 = call from_uint_288(v119), !6708
        v121 = get_local ptr { u256 }, res, !6709
        store v120 to v121, !6709
        v122 = const unit ()
        br block23(v122)

        block14():
        v123 = ptr_to_int self to u64
        v124 = int_to_ptr v123 to ptr { u256 }
        v125 = const u64 0
        v126 = get_elem_ptr v124, ptr u256, v125, !4644
        v127 = load v126
        v128 = call indent_272(), !6712
        v129 = call lt_163(v127, v128), !6715
        cbr v129, block15(), block16(v129), !6716

        block15():
        v130 = ptr_to_int other to u64
        v131 = int_to_ptr v130 to ptr { u256 }
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u256, v132, !4644
        v134 = load v133
        v135 = call indent_272(), !6719
        v136 = call lt_163(v134, v135), !6722
        br block16(v136), !6716

        block16(v137: bool):
        cbr v137, block17(), block21(), !6716

        block17():
        v138 = ptr_to_int self to u64
        v139 = int_to_ptr v138 to ptr { u256 }
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr u256, v140, !4644
        v142 = load v141
        v143 = ptr_to_int other to u64
        v144 = int_to_ptr v143 to ptr { u256 }
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr u256, v145, !4644
        v147 = load v146
        v148 = call gt_151(v142, v147), !6725
        cbr v148, block18(), block19(), !6723

        block18():
        v149 = ptr_to_int self to u64
        v150 = int_to_ptr v149 to ptr { u256 }
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr u256, v151, !4644
        v153 = load v152
        v154 = ptr_to_int other to u64
        v155 = int_to_ptr v154 to ptr { u256 }
        v156 = const u64 0
        v157 = get_elem_ptr v155, ptr u256, v156, !4644
        v158 = load v157
        v159 = call subtract_125(v153, v158), !6728
        v160 = call indent_272(), !6731
        v161 = call add_124(v159, v160), !6734
        v162 = call from_uint_288(v161), !6737
        v163 = get_local ptr { u256 }, res, !6738
        store v162 to v163, !6738
        v164 = const unit ()
        br block20(v164)

        block19():
        v165 = ptr_to_int self to u64
        v166 = int_to_ptr v165 to ptr { u256 }
        v167 = const u64 0
        v168 = get_elem_ptr v166, ptr u256, v167, !4644
        v169 = load v168
        v170 = call indent_272(), !6741
        v171 = call add_124(v169, v170), !6744
        v172 = ptr_to_int other to u64
        v173 = int_to_ptr v172 to ptr { u256 }
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr u256, v174, !4644
        v176 = load v175
        v177 = call subtract_125(v171, v176), !6747
        v178 = call from_uint_288(v177), !6750
        v179 = get_local ptr { u256 }, res, !6751
        store v178 to v179, !6751
        v180 = const unit ()
        br block20(v180)

        block20(v181: ()):
        br block22(v181)

        block21():
        v182 = const unit ()
        br block22(v182)

        block22(v183: ()):
        br block23(v183)

        block23(v184: ()):
        br block24(v184)

        block24(v185: ()):
        br block25(v185)

        block25(v186: ()):
        v187 = get_local ptr { u256 }, res, !6752
        v188 = load v187
        ret { u256 } v188
    }

    pub fn log_393(value !1912: { { u256, u256, u256, u256, u256, u256, u256 } }) -> (), !6753 {
        entry(value: { { u256, u256, u256, u256, u256, u256, u256 } }):
        v0 = call encode_394(value), !1916
        v1 = const u64 7659206549590130669
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_394(item !1917: { { u256, u256, u256, u256, u256, u256, u256 } }) -> slice, !6754 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u256, u256, u256, u256, u256, u256, u256 } }):
        v0 = call new_100(), !6755
        v1 = call abi_encode_395(item, v0), !6756
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !6757
        ret slice v5
    }

    pub fn abi_encode_395(self !6758: { { u256, u256, u256, u256, u256, u256, u256 } }, buffer !6759: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6762 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { u256, u256, u256, u256, u256, u256, u256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u256, u256, u256, u256, u256, u256, u256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u256, u256, u256, u256, u256, u256, u256 }, v2, !6763
        v4 = load v3
        v5 = call abi_encode_396(v4, buffer), !6765
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6766
        store v5 to v6, !6766
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !6767
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_396(self !6768: { u256, u256, u256, u256, u256, u256, u256 }, buffer !1488: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6771 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______

        entry(self: { u256, u256, u256, u256, u256, u256, u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !2709
        v4 = load v3
        v5 = call abi_encode_374(v4, buffer), !6774
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6775
        store v5 to v6, !6775
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u256, v9, !2712
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6776
        v13 = load v12
        v14 = call abi_encode_374(v11, v13), !6779
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !6780
        store v14 to v15, !6780
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u256, v18, !2502
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !6781
        v22 = load v21
        v23 = call abi_encode_374(v20, v22), !6784
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !6785
        store v23 to v24, !6785
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u256, v27, !2533
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !6786
        v31 = load v30
        v32 = call abi_encode_374(v29, v31), !6789
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !6790
        store v32 to v33, !6790
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u256, v36, !2492
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !6791
        v40 = load v39
        v41 = call abi_encode_374(v38, v40), !6794
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6795
        store v41 to v42, !6795
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u256, v45, !2524
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6796
        v49 = load v48
        v50 = call abi_encode_374(v47, v49), !6799
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !6800
        store v50 to v51, !6800
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { u256, u256, u256, u256, u256, u256, u256 }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u256, v54, !2453
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !6801
        v58 = load v57
        v59 = call abi_encode_374(v56, v58), !6804
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !6805
        store v59 to v60, !6805
        v61 = get_local ptr { { u64, u64, u64 } }, buffer_______, !6806
        v62 = load v61
        ret { { u64, u64, u64 } } v62
    }

    pub fn log_397(value !1912: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }) -> (), !6807 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }):
        v0 = call encode_398(value), !1916
        v1 = const u64 10580804319558431108
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_398(item !1917: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }) -> slice, !6808 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }):
        v0 = call new_100(), !6809
        v1 = call abi_encode_399(item, v0), !6810
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !6811
        ret slice v5
    }

    pub fn abi_encode_399(self !6812: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }, buffer !6813: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6816 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !6817
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !6820
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6821
        store v5 to v6, !6821
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !6822
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6079
        v13 = load v12
        v14 = call abi_encode_370(v11, v13), !6824
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !6825
        store v14 to v15, !6825
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u256, v18, !6826
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !6827
        v22 = load v21
        v23 = call abi_encode_374(v20, v22), !6830
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !6831
        store v23 to v24, !6831
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u256, v27, !6832
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !6833
        v31 = load v30
        v32 = call abi_encode_374(v29, v31), !6836
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !6837
        store v32 to v33, !6837
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u256, v36, !6838
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !6839
        v40 = load v39
        v41 = call abi_encode_374(v38, v40), !6842
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6843
        store v41 to v42, !6843
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u256, v45, !6844
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6845
        v49 = load v48
        v50 = call abi_encode_374(v47, v49), !6848
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !6849
        store v50 to v51, !6849
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u256, u256, u256, u256, u64 }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u64, v54, !6850
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !6851
        v58 = load v57
        v59 = call abi_encode_375(v56, v58), !6854
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !6855
        store v59 to v60, !6855
        v61 = get_local ptr { { u64, u64, u64 } }, buffer_______, !6856
        v62 = load v61
        ret { { u64, u64, u64 } } v62
    }

    pub fn unwrap_400(self !2242: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }) -> { u64, ( { b256 } | { b256 } ) }, !6857 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __matched_value_4
        local { u64, ( { b256 } | { b256 } ) } inner_value

        entry(self: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }):
        v0 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !6858
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, ( { b256 } | { b256 } ) }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { u64, ( { b256 } | { b256 } ) }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !6859
        br block2(v16)

        block2(v17: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v17
    }

    pub fn get_401(self !3550: { { u64, u64 }, u64 }, index !3551: u64) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, !6860 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __anon_0
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        v5 = call le_209(v4, index), !6861
        cbr v5, block0(), block1(), !3555

        block0():
        v6 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __anon_0, !2267
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !2267
        v9 = const u64 0, !2267
        store v9 to v8, !2267
        v10 = load v6
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } v10, !3558

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !1502
        v17 = load v16
        v18 = call ptr_43(v17), !6862
        v19 = call add_42(v18, index), !6863
        v20 = get_local ptr u64, ptr, !3565
        store v19 to v20, !3565
        v21 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr u64, ptr, !3566
        v26 = load v25
        v27 = call read_402(v26), !6864
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr { u64, ( { b256 } | { b256 } ) }, v28, v29, !2267
        store v27 to v30, !2267
        v31 = load v21
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } v31
    }

    pub fn read_402(self !1179: u64) -> { u64, ( { b256 } | { b256 } ) }, !6865 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { u64, ( { b256 } | { b256 } ) } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 40
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { u64, ( { b256 } | { b256 } ) } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u64, ( { b256 } | { b256 } ) } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { u64, ( { b256 } | { b256 } ) }):
        br block5(v7)

        block5(v8: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v8
    }

    pub fn decode_403(self !1336: ptr { u64 }) -> { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } }, !6866 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_404(self), !6867
        ret { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } } v0
    }

    pub fn abi_decode_404(buffer !1343: ptr { u64 }) -> { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } }, !6868 {
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_405(buffer), !6869
        v1 = call abi_decode_27(buffer), !6870
        v2 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( { b256 } | { b256 } ) }, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, { u64, ( { b256 } | { b256 } ) } } v7
    }

    pub fn abi_decode_405(buffer !6068: ptr { u64 }) -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, !6872 {
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_406(buffer), !6875
        v1 = call decode_336(buffer), !6878
        v2 = call decode_31(buffer), !6881
        v3 = call decode_408(buffer), !6884
        v4 = call decode_408(buffer), !6887
        v5 = call decode_408(buffer), !6890
        v6 = call decode_408(buffer), !6893
        v7 = call decode_408(buffer), !6896
        v8 = call decode_408(buffer), !6898
        v9 = call decode_408(buffer), !6901
        v10 = call decode_408(buffer), !6904
        v11 = call decode_408(buffer), !6907
        v12 = call decode_408(buffer), !6910
        v13 = call decode_408(buffer), !6913
        v14 = call decode_408(buffer), !6916
        v15 = call decode_408(buffer), !6919
        v16 = call decode_408(buffer), !6922
        v17 = call decode_408(buffer), !6925
        v18 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_0, !6926
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { b256 }, v19
        store v0 to v20, !6926
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v1 to v22, !6926
        v23 = const u64 2
        v24 = get_elem_ptr v18, ptr b256, v23
        store v2 to v24, !6926
        v25 = const u64 3
        v26 = get_elem_ptr v18, ptr u256, v25
        store v3 to v26, !6926
        v27 = const u64 4
        v28 = get_elem_ptr v18, ptr u256, v27
        store v4 to v28, !6926
        v29 = const u64 5
        v30 = get_elem_ptr v18, ptr u256, v29
        store v5 to v30, !6926
        v31 = const u64 6
        v32 = get_elem_ptr v18, ptr u256, v31
        store v6 to v32, !6926
        v33 = const u64 7
        v34 = get_elem_ptr v18, ptr u256, v33
        store v7 to v34, !6926
        v35 = const u64 8
        v36 = get_elem_ptr v18, ptr u256, v35
        store v8 to v36, !6926
        v37 = const u64 9
        v38 = get_elem_ptr v18, ptr u256, v37
        store v9 to v38, !6926
        v39 = const u64 10
        v40 = get_elem_ptr v18, ptr u256, v39
        store v10 to v40, !6926
        v41 = const u64 11
        v42 = get_elem_ptr v18, ptr u256, v41
        store v11 to v42, !6926
        v43 = const u64 12
        v44 = get_elem_ptr v18, ptr u256, v43
        store v12 to v44, !6926
        v45 = const u64 13
        v46 = get_elem_ptr v18, ptr u256, v45
        store v13 to v46, !6926
        v47 = const u64 14
        v48 = get_elem_ptr v18, ptr u256, v47
        store v14 to v48, !6926
        v49 = const u64 15
        v50 = get_elem_ptr v18, ptr u256, v49
        store v15 to v50, !6926
        v51 = const u64 16
        v52 = get_elem_ptr v18, ptr u256, v51
        store v16 to v52, !6926
        v53 = const u64 17
        v54 = get_elem_ptr v18, ptr u256, v53
        store v17 to v54, !6926
        v55 = load v18
        ret { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } v55
    }

    pub fn decode_406(self !1336: ptr { u64 }) -> { b256 }, !6927 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_407(self), !6928
        ret { b256 } v0
    }

    pub fn abi_decode_407(buffer !1460: ptr { u64 }) -> { b256 }, !6929 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_31(buffer), !6930
        v1 = get_local ptr { b256 }, __anon_0, !1467
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !1467
        v4 = load v1
        ret { b256 } v4
    }

    pub fn decode_408(self !1336: ptr { u64 }) -> u256, !6931 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_409(self), !6932
        ret u256 v0
    }

    pub fn abi_decode_409(buffer !6933: ptr { u64 }) -> u256, !6936 {
        entry(buffer: ptr { u64 }):
        v0 = call read_32_bytes_410(buffer), !6939
        ret u256 v0
    }

    pub fn read_32_bytes_410(self !1477: ptr { u64 }) -> u256, !6940 {
        local u256 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !40
        v2 = load v1
        v3 = asm(ptr: v2) -> u256 ptr, !1481 {
        }
        v4 = get_local ptr u256, v, !1482
        store v3 to v4, !1482
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !40
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 32, !1483
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !1484
        store v11 to v13, !1484
        v14 = get_local ptr u256, v, !1485
        v15 = load v14
        ret u256 v15
    }

    pub fn activate_contract_411(market_configuration !6941: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, owner !6942: { u64, ( { b256 } | { b256 } ) }) -> (), !6945 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { bool, bool, bool, bool } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { bool, bool, bool, bool } } __anon_7
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } __anon_8
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_9
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local { bool, bool, bool, bool } pause_config

        entry(market_configuration: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6946
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddcec0, !6946
        store v3 to v2, !6946
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6946
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x79aa7ec830984eccffac9ed69968fe5497be089ff4398ccc492d7ba16d41ff60, !6946
        store v9 to v8, !6946
        v10 = load v0
        v11 = call read_412(v10), !6949
        v12 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !6950
        v13 = call eq_153(v11, v12), !6953
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 15, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !6956
        v20 = call initialize_ownership_418(owner), !6959
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !6960
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !6960
        store v24 to v23, !6960
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !6960
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !6960
        store v30 to v29, !6960
        v31 = load v21
        v32 = call write_440(v31, market_configuration), !6963
        v33 = get_local ptr { b256, u64, b256 }, __anon_3, !6964
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddcec0, !6964
        store v36 to v35, !6964
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !6964
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x79aa7ec830984eccffac9ed69968fe5497be089ff4398ccc492d7ba16d41ff60, !6964
        store v42 to v41, !6964
        v43 = load v33
        v44 = call timestamp_141(), !6967
        v45 = call into_139(v44), !6970
        v46 = call write_443(v43, v45), !6973
        v47 = get_local ptr { b256, u64, b256 }, __anon_4, !6974
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr b256, v48
        v50 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6974
        store v50 to v49, !6974
        v51 = const u64 1
        v52 = get_elem_ptr v47, ptr u64, v51
        v53 = const u64 0
        store v53 to v52, !6974
        v54 = const u64 2
        v55 = get_elem_ptr v47, ptr b256, v54
        v56 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6974
        store v56 to v55, !6974
        v57 = load v47
        v58 = call read_132(v57), !6977
        v59 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6978
        store v58 to v59, !6978
        v60 = get_local ptr { bool, bool, bool, bool }, __anon_5, !6979
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr bool, v61
        v63 = const bool false, !6980
        store v63 to v62, !6979
        v64 = const u64 1
        v65 = get_elem_ptr v60, ptr bool, v64
        v66 = const bool false, !6981
        store v66 to v65, !6979
        v67 = const u64 2
        v68 = get_elem_ptr v60, ptr bool, v67
        v69 = const bool false, !6982
        store v69 to v68, !6979
        v70 = const u64 3
        v71 = get_elem_ptr v60, ptr bool, v70
        v72 = const bool false, !6983
        store v72 to v71, !6979
        v73 = load v60
        v74 = get_local ptr { bool, bool, bool, bool }, pause_config, !6984
        store v73 to v74, !6984
        v75 = get_local ptr { b256, u64, b256 }, __anon_6, !6985
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr b256, v76
        v78 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !6985
        store v78 to v77, !6985
        v79 = const u64 1
        v80 = get_elem_ptr v75, ptr u64, v79
        v81 = const u64 0
        store v81 to v80, !6985
        v82 = const u64 2
        v83 = get_elem_ptr v75, ptr b256, v82
        v84 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !6985
        store v84 to v83, !6985
        v85 = load v75
        v86 = get_local ptr { bool, bool, bool, bool }, pause_config, !6986
        v87 = load v86
        v88 = call write_446(v85, v87), !6989
        v89 = get_local ptr { bool, bool, bool, bool }, pause_config, !6990
        v90 = load v89
        v91 = get_local ptr { { bool, bool, bool, bool } }, __anon_7, !6991
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { bool, bool, bool, bool }, v92
        store v90 to v93, !6991
        v94 = load v91
        v95 = call log_452(v94), !6994
        v96 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, __anon_8, !6995
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v97
        store market_configuration to v98, !6995
        v99 = load v96
        v100 = call log_457(v99), !6998
        v101 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6999
        v102 = load v101
        v103 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_9, !7000
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr { u256, u256, u256, u256, u256, u256, u256 }, v104
        store v102 to v105, !7000
        v106 = load v103
        v107 = call log_393(v106), !7003
        v108 = const unit ()
        ret () v108
    }

    pub fn read_412(self !2224: { b256, u64, b256 }) -> u256, !7004 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_416(self), !7005
        v1 = call offset_417(self), !7006
        v2 = call read_413(v0, v1), !7007
        v3 = call unwrap_278(v2), !7008
        ret u256 v3
    }

    pub fn read_413(slot !2258: b256, offset !2259: u64) -> { u64, ( () | u256 ) }, !7009 {
        local { u64, ( () | u256 ) } __anon_0
        local { u64, ( () | u256 ) } __anon_1
        local { u64, ( () | u256 ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 32
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !7010
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | u256 ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | u256 ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_414(slot, offset), !7011
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !7012
        v34 = call alloc_51(v33), !7013
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | u256 ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !7014
        v54 = call read_415(v53), !7015
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr u256, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | u256 ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | u256 ) }):
        ret { u64, ( () | u256 ) } v64
    }

    fn slot_calculator_414(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !7016 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 32
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !7017
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !7018
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !7019
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !7020
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !7021
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !7022
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !7023
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !7024
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !7025
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !7026
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !7027
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !7028
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !7029
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !7030
        v51 = call subtract_125(v47, v50), !7031
        v52 = call add_124(v44, v51), !7032
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !7033
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_415(self !1179: u64) -> u256, !7034 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> u256 ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> u256 val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u256 val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: u256):
        br block5(v7)

        block5(v8: u256):
        ret u256 v8
    }

    pub fn slot_416(self !2426: { b256, u64, b256 }) -> b256, !7035 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_417(self !2431: { b256, u64, b256 }) -> u64, !7036 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn initialize_ownership_418(new_owner !7038: { u64, ( { b256 } | { b256 } ) }) -> (), !7041 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { u64 } __anon_1
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_2
        local { { u64, ( { b256 } | { b256 } ) } } __anon_3
        local { b256, u64, b256 } owner_key

        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call _owner_425(), !7044
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !7046
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !7046
        v4 = const u64 0, !7046
        store v4 to v3, !7046
        v5 = load v1
        v6 = call eq_423(v0, v5), !7049
        v7 = get_local ptr { u64 }, __anon_1, !7051
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !7051
        v10 = const u64 0, !7051
        store v10 to v9, !7051
        v11 = load v7
        v12 = call require_419(v6, v11), !7054
        v13 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !7055
        v14 = const u64 0, !7056
        v15 = call new_426(v13, v14, v13), !7059
        v16 = get_local ptr { b256, u64, b256 }, owner_key, !7060
        store v15 to v16, !7060
        v17 = get_local ptr { b256, u64, b256 }, owner_key, !7061
        v18 = load v17
        v19 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_2, !7046
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !7046
        v22 = const u64 1, !7046
        store v22 to v21, !7046
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v19, ptr { u64, ( { b256 } | { b256 } ) }, v23, v24, !7046
        store new_owner to v25, !7046
        v26 = load v19
        v27 = call write_434(v18, v26), !7064
        v28 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_3, !7065
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr { u64, ( { b256 } | { b256 } ) }, v29
        store new_owner to v30, !7065
        v31 = load v28
        v32 = call log_437(v31), !7068
        v33 = const unit ()
        ret () v33
    }

    pub fn require_419(condition !1895: bool, value !1896: { u64 }) -> (), !7069 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_15(condition), !7070
        cbr v0, block0(), block1(), !1900

        block0():
        v1 = call log_420(value), !7071
        v2 = const u64 18446744073709486080, !1907
        v3 = call revert_102(v2), !7072
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_420(value !1912: { u64 }) -> (), !7073 {
        entry(value: { u64 }):
        v0 = call encode_421(value), !1916
        v1 = const u64 2161305517876418151
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_421(item !1917: { u64 }) -> slice, !7074 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_100(), !7075
        v1 = call abi_encode_422(item, v0), !7076
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7077
        ret slice v5
    }

    pub fn abi_encode_422(self !6812: { u64 }, buffer !6813: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7079 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !7080
        store self to v0, !7080
        v1 = get_local ptr { u64 }, __matched_value_1, !7081
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !7081
        v4 = load v3
        v5 = const u64 0, !7081
        v6 = call eq_16(v4, v5), !7084
        cbr v6, block0(), block1(), !7082

        block0():
        v7 = const u64 0, !7085
        v8 = call abi_encode_99(v7, buffer), !7088
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !7080
        revert v9, !7080

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !7089
        store v10 to v11, !7089
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7090
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn eq_423(self !7091: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, other !7092: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> bool, !7095 {
        local { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } } __anon_0
        local { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } } __matched_value_1
        local { u64, ( { b256 } | { b256 } ) } owner1
        local { u64, ( { b256 } | { b256 } ) } owner2

        entry(self: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, other: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __anon_0, !7096
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v1, !7096
        store self to v2, !7096
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v3, !7096
        store other to v4, !7096
        v5 = load v0
        v6 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7097
        store v5 to v6, !7097
        v7 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v8, !7098
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !7098
        v12 = load v11
        v13 = const u64 1, !7098
        v14 = call eq_16(v12, v13), !7101
        cbr v14, block0(), block1(v14), !7099

        block0():
        v15 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v16, !7098
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !7098
        v20 = load v19
        v21 = const u64 1, !7098
        v22 = call eq_16(v20, v21), !7102
        br block1(v22), !7099

        block1(v23: bool):
        cbr v23, block2(), block3(), !7099

        block2():
        v24 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v25, !7098
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v26, ptr { u64, ( { b256 } | { b256 } ) }, v27, v28
        v30 = load v29
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner1, !7103
        store v30 to v31, !7103
        v32 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v33, !7098
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v34, ptr { u64, ( { b256 } | { b256 } ) }, v35, v36
        v38 = load v37
        v39 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner2, !7104
        store v38 to v39, !7104
        v40 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner1, !7105
        v41 = load v40
        v42 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner2, !7106
        v43 = load v42
        v44 = call eq_424(v41, v43), !7109
        br block14(v44)

        block3():
        v45 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v46, !7110
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !7110
        v50 = load v49
        v51 = const u64 0, !7110
        v52 = call eq_16(v50, v51), !7113
        cbr v52, block4(), block5(v52), !7111

        block4():
        v53 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v54, !7110
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !7110
        v58 = load v57
        v59 = const u64 0, !7110
        v60 = call eq_16(v58, v59), !7114
        br block5(v60), !7111

        block5(v61: bool):
        cbr v61, block6(), block7(), !7111

        block6():
        v62 = const bool true, !7115
        br block13(v62)

        block7():
        v63 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v64, !7116
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !7116
        v68 = load v67
        v69 = const u64 2, !7116
        v70 = call eq_16(v68, v69), !7119
        cbr v70, block8(), block9(v70), !7117

        block8():
        v71 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !7096
        v72 = const u64 1
        v73 = get_elem_ptr v71, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v72, !7116
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !7116
        v76 = load v75
        v77 = const u64 2, !7116
        v78 = call eq_16(v76, v77), !7120
        br block9(v78), !7117

        block9(v79: bool):
        cbr v79, block10(), block11(), !7117

        block10():
        v80 = const bool true, !7121
        br block12(v80)

        block11():
        v81 = const bool false, !7122
        br block12(v81)

        block12(v82: bool):
        br block13(v82)

        block13(v83: bool):
        br block14(v83)

        block14(v84: bool):
        ret bool v84
    }

    pub fn eq_424(self !7123: { u64, ( { b256 } | { b256 } ) }, other !7124: { u64, ( { b256 } | { b256 } ) }) -> bool, !7127 {
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } } __matched_value_1
        local { b256 } addr1
        local { b256 } addr2
        local { b256 } id1
        local { b256 } id2

        entry(self: { u64, ( { b256 } | { b256 } ) }, other: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !7128
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64, ( { b256 } | { b256 } ) }, v1, !7128
        store self to v2, !7128
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64, ( { b256 } | { b256 } ) }, v3, !7128
        store other to v4, !7128
        v5 = load v0
        v6 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7129
        store v5 to v6, !7129
        v7 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, !7130
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !7130
        v12 = load v11
        v13 = const u64 0, !7130
        v14 = call eq_16(v12, v13), !7133
        cbr v14, block0(), block1(v14), !7131

        block0():
        v15 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64, ( { b256 } | { b256 } ) }, v16, !7130
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !7130
        v20 = load v19
        v21 = const u64 0, !7130
        v22 = call eq_16(v20, v21), !7134
        br block1(v22), !7131

        block1(v23: bool):
        cbr v23, block2(), block3(), !7131

        block2():
        v24 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, ( { b256 } | { b256 } ) }, v25, !7130
        v27 = const u64 1
        v28 = const u64 0
        v29 = get_elem_ptr v26, ptr { b256 }, v27, v28
        v30 = load v29
        v31 = get_local ptr { b256 }, addr1, !7135
        store v30 to v31, !7135
        v32 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr { u64, ( { b256 } | { b256 } ) }, v33, !7130
        v35 = const u64 1
        v36 = const u64 0
        v37 = get_elem_ptr v34, ptr { b256 }, v35, v36
        v38 = load v37
        v39 = get_local ptr { b256 }, addr2, !7136
        store v38 to v39, !7136
        v40 = get_local ptr { b256 }, addr1, !7137
        v41 = load v40
        v42 = get_local ptr { b256 }, addr2, !7138
        v43 = load v42
        v44 = call eq_359(v41, v43), !7141
        br block9(v44)

        block3():
        v45 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr { u64, ( { b256 } | { b256 } ) }, v46, !7142
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !7142
        v50 = load v49
        v51 = const u64 1, !7142
        v52 = call eq_16(v50, v51), !7145
        cbr v52, block4(), block5(v52), !7143

        block4():
        v53 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr { u64, ( { b256 } | { b256 } ) }, v54, !7142
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !7142
        v58 = load v57
        v59 = const u64 1, !7142
        v60 = call eq_16(v58, v59), !7146
        br block5(v60), !7143

        block5(v61: bool):
        cbr v61, block6(), block7(), !7143

        block6():
        v62 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr { u64, ( { b256 } | { b256 } ) }, v63, !7142
        v65 = const u64 1
        v66 = const u64 1
        v67 = get_elem_ptr v64, ptr { b256 }, v65, v66
        v68 = load v67
        v69 = get_local ptr { b256 }, id1, !7147
        store v68 to v69, !7147
        v70 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !7128
        v71 = const u64 1
        v72 = get_elem_ptr v70, ptr { u64, ( { b256 } | { b256 } ) }, v71, !7142
        v73 = const u64 1
        v74 = const u64 1
        v75 = get_elem_ptr v72, ptr { b256 }, v73, v74
        v76 = load v75
        v77 = get_local ptr { b256 }, id2, !7148
        store v76 to v77, !7148
        v78 = get_local ptr { b256 }, id1, !7149
        v79 = load v78
        v80 = get_local ptr { b256 }, id2, !7150
        v81 = load v80
        v82 = call eq_110(v79, v81), !7153
        br block8(v82)

        block7():
        v83 = const bool false, !7154
        br block8(v83)

        block8(v84: bool):
        br block9(v84)

        block9(v85: bool):
        ret bool v85
    }

    pub fn _owner_425() -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !7157 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { b256, u64, b256 } owner_key

        entry():
        v0 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !7055
        v1 = const u64 0, !7158
        v2 = call new_426(v0, v1, v0), !7161
        v3 = get_local ptr { b256, u64, b256 }, owner_key, !7162
        store v2 to v3, !7162
        v4 = get_local ptr { b256, u64, b256 }, owner_key, !7163
        v5 = load v4
        v6 = call try_read_428(v5), !7166
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !7046
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !7046
        v10 = const u64 0, !7046
        store v10 to v9, !7046
        v11 = load v7
        v12 = call unwrap_or_427(v6, v11), !7169
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v12
    }

    pub fn new_426(slot !4554: b256, offset !4555: u64, field_id !4556: b256) -> { b256, u64, b256 }, !7170 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4560
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !4560
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !4560
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !4560
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn unwrap_or_427(self !4065: { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, default !4066: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !7171 {
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __matched_value_5
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } x

        entry(self: { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, default: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !4070
        store self to v0, !4070
        v1 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !4071
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4071
        v4 = load v3
        v5 = const u64 1, !4071
        v6 = call eq_16(v4, v5), !7172
        cbr v6, block0(), block1(), !4072

        block0():
        v7 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !4071
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, x, !4075
        store v11 to v12, !4075
        v13 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, x, !4076
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !4071
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !4071
        v18 = load v17
        v19 = const u64 0, !4071
        v20 = call eq_16(v18, v19), !7173
        cbr v20, block2(), block3(), !4077

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !4070
        revert v21, !4070

        block4(v22: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        br block5(v22)

        block5(v23: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v23
    }

    pub fn try_read_428(self !4080: { b256, u64, b256 }) -> { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, !7174 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_432(self), !7175
        v1 = call offset_433(self), !7176
        v2 = call read_429(v0, v1), !7177
        ret { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } v2
    }

    pub fn read_429(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, !7178 {
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __anon_0
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __anon_1
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 48
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !7179
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_430(slot, offset), !7180
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !7181
        v34 = call alloc_51(v33), !7182
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !7183
        v54 = call read_431(v53), !7184
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }):
        ret { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } v64
    }

    fn slot_calculator_430(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !7185 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 48
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !7186
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !7187
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !7188
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !7189
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !7190
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !7191
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !7192
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !7193
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !7194
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !7195
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !7196
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !7197
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !7198
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !7199
        v51 = call subtract_125(v47, v50), !7200
        v52 = call add_124(v44, v51), !7201
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !7202
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_431(self !1179: u64) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !7203 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 48
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        br block5(v7)

        block5(v8: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v8
    }

    pub fn slot_432(self !2426: { b256, u64, b256 }) -> b256, !7204 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_433(self !2431: { b256, u64, b256 }) -> u64, !7205 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn write_434(self !3209: { b256, u64, b256 }, value !3210: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> (), !7206 {
        entry(self: { b256, u64, b256 }, value: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = call slot_432(self), !7207
        v1 = call offset_433(self), !7208
        v2 = call write_435(v0, v1, value), !7209
        v3 = const unit ()
        ret () v3
    }

    pub fn write_435(slot !3223: b256, offset !3224: u64, value !3225: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> (), !7210 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = const u64 48
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !7211
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_430(slot, offset), !7212
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !7213
        v30 = call alloc_51(v29), !7214
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !7215
        v47 = call write_436(v46, value), !7216
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_436(self !1596: u64, val !1597: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> (), !7217 {
        entry(self: u64, val: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 48
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 48
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn log_437(value !1912: { { u64, ( { b256 } | { b256 } ) } }) -> (), !7218 {
        entry(value: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call encode_438(value), !1916
        v1 = const u64 16280289466020123285
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_438(item !1917: { { u64, ( { b256 } | { b256 } ) } }) -> slice, !7219 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_100(), !7220
        v1 = call abi_encode_439(item, v0), !7221
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7222
        ret slice v5
    }

    pub fn abi_encode_439(self !6768: { { u64, ( { b256 } | { b256 } ) } }, buffer !1488: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7224 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !7226
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !7228
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7229
        store v5 to v6, !7229
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !7230
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn write_440(self !3209: { b256, u64, b256 }, value !3210: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }) -> (), !7231 {
        entry(self: { b256, u64, b256 }, value: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        v0 = call slot_169(self), !7232
        v1 = call offset_170(self), !7233
        v2 = call write_441(v0, v1, value), !7234
        v3 = const unit ()
        ret () v3
    }

    pub fn write_441(slot !3223: b256, offset !3224: u64, value !3225: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }) -> (), !7235 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        v0 = const u64 552
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !7236
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_167(slot, offset), !7237
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !7238
        v30 = call alloc_51(v29), !7239
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !7240
        v47 = call write_442(v46, value), !7241
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_442(self !1596: u64, val !1597: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }) -> (), !7242 {
        entry(self: u64, val: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 552
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 552
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn write_443(self !3209: { b256, u64, b256 }, value !3210: u256) -> (), !7243 {
        entry(self: { b256, u64, b256 }, value: u256):
        v0 = call slot_416(self), !7244
        v1 = call offset_417(self), !7245
        v2 = call write_444(v0, v1, value), !7246
        v3 = const unit ()
        ret () v3
    }

    pub fn write_444(slot !3223: b256, offset !3224: u64, value !3225: u256) -> (), !7247 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: u256):
        v0 = const u64 32
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !7248
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_414(slot, offset), !7249
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !7250
        v30 = call alloc_51(v29), !7251
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !7252
        v47 = call write_445(v46, value), !7253
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_445(self !1596: u64, val !1597: u256) -> (), !7254 {
        entry(self: u64, val: u256):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn write_446(self !3209: { b256, u64, b256 }, value !3210: { bool, bool, bool, bool }) -> (), !7255 {
        entry(self: { b256, u64, b256 }, value: { bool, bool, bool, bool }):
        v0 = call slot_450(self), !7256
        v1 = call offset_451(self), !7257
        v2 = call write_447(v0, v1, value), !7258
        v3 = const unit ()
        ret () v3
    }

    pub fn write_447(slot !3223: b256, offset !3224: u64, value !3225: { bool, bool, bool, bool }) -> (), !7259 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { bool, bool, bool, bool }):
        v0 = const u64 32
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !7260
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_448(slot, offset), !7261
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !7262
        v30 = call alloc_51(v29), !7263
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !7264
        v47 = call write_449(v46, value), !7265
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    fn slot_calculator_448(slot !2294: b256, offset !2295: u64) -> { b256, u64, u64 }, !7266 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !2299
        v1 = const u64 32
        store v1 to v0, !2299
        v2 = const u64 8, !2300
        v3 = call multiply_25(offset, v2), !7267
        v4 = get_local ptr u64, size_of_t, !2304
        v5 = load v4
        v6 = call add_45(v3, v5), !7268
        v7 = const u64 31, !2308
        v8 = call add_45(v6, v7), !7269
        v9 = const u64 5, !2312
        v10 = call rsh_120(v8, v9), !7270
        v11 = get_local ptr u64, last_slot, !2316
        store v10 to v11, !2316
        v12 = const u64 4, !2317
        v13 = call modulo_121(offset, v12), !7271
        v14 = get_local ptr u64, place_in_slot, !2321
        store v13 to v14, !2321
        v15 = get_local ptr bool, __matched_value_1, !2322
        v16 = const bool true
        store v16 to v15, !2322
        v17 = get_local ptr bool, __matched_value_1, !2323
        v18 = load v17
        v19 = const bool true, !2324
        v20 = call eq_122(v18, v19), !7272
        cbr v20, block0(), block1(), !2325

        block0():
        v21 = get_local ptr u64, place_in_slot, !2328
        v22 = load v21
        v23 = const u64 8, !2329
        v24 = call multiply_25(v22, v23), !7273
        v25 = get_local ptr u64, size_of_t, !2333
        v26 = load v25
        v27 = call add_45(v24, v26), !7274
        v28 = const u64 31, !2337
        v29 = call add_45(v27, v28), !7275
        v30 = const u64 5, !2341
        v31 = call rsh_120(v29, v30), !7276
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !2323
        v33 = load v32
        v34 = const bool false, !2345
        v35 = call eq_122(v33, v34), !7277
        cbr v35, block2(), block3(), !2346

        block2():
        v36 = const u64 1, !2349
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !2322
        revert v37, !2322

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !2350
        store v39 to v40, !2350
        v41 = call as_u256_123(slot), !7278
        v42 = get_local ptr u256, offset_slot, !2354
        store v41 to v42, !2354
        v43 = get_local ptr u256, offset_slot, !2355
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !2356
        v46 = load v45
        v47 = call as_u256_126(v46), !7279
        v48 = get_local ptr u64, number_of_slots, !2360
        v49 = load v48
        v50 = call as_u256_126(v49), !7280
        v51 = call subtract_125(v47, v50), !7281
        v52 = call add_124(v44, v51), !7282
        v53 = get_local ptr u256, offset_slot, !2367
        store v52 to v53, !2367
        v54 = get_local ptr u256, offset_slot, !2370
        v55 = load v54
        v56 = call as_b256_127(v55), !7283
        v57 = get_local ptr u64, number_of_slots, !2374
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !2375
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !2376
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !2376
        store v56 to v63, !2376
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !2376
        store v58 to v65, !2376
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !2376
        store v60 to v67, !2376
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn write_449(self !1596: u64, val !1597: { bool, bool, bool, bool }) -> (), !7284 {
        entry(self: u64, val: { bool, bool, bool, bool }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn slot_450(self !2426: { b256, u64, b256 }) -> b256, !7285 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2430
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_451(self !2431: { b256, u64, b256 }) -> u64, !7286 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2435
        v4 = load v3
        ret u64 v4
    }

    pub fn log_452(value !1912: { { bool, bool, bool, bool } }) -> (), !7287 {
        entry(value: { { bool, bool, bool, bool } }):
        v0 = call encode_453(value), !1916
        v1 = const u64 17075205356227152605
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_453(item !1917: { { bool, bool, bool, bool } }) -> slice, !7288 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { bool, bool, bool, bool } }):
        v0 = call new_100(), !7289
        v1 = call abi_encode_454(item, v0), !7290
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7291
        ret slice v5
    }

    pub fn abi_encode_454(self !7292: { { bool, bool, bool, bool } }, buffer !7293: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7296 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { bool, bool, bool, bool } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { bool, bool, bool, bool } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { bool, bool, bool, bool }, v2, !7297
        v4 = load v3
        v5 = call abi_encode_455(v4, buffer), !7300
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7301
        store v5 to v6, !7301
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !7302
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_455(self !7303: { bool, bool, bool, bool }, buffer !7304: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7307 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____

        entry(self: { bool, bool, bool, bool }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { bool, bool, bool, bool }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr bool, v2, !7308
        v4 = load v3
        v5 = call abi_encode_456(v4, buffer), !7311
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7312
        store v5 to v6, !7312
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { bool, bool, bool, bool }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr bool, v9, !7313
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6776
        v13 = load v12
        v14 = call abi_encode_456(v11, v13), !7315
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !7316
        store v14 to v15, !7316
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { bool, bool, bool, bool }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr bool, v18, !7317
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !7318
        v22 = load v21
        v23 = call abi_encode_456(v20, v22), !7321
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !7322
        store v23 to v24, !7322
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { bool, bool, bool, bool }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr bool, v27, !7323
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !7324
        v31 = load v30
        v32 = call abi_encode_456(v29, v31), !7327
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !7328
        store v32 to v33, !7328
        v34 = get_local ptr { { u64, u64, u64 } }, buffer____, !7329
        v35 = load v34
        ret { { u64, u64, u64 } } v35
    }

    pub fn abi_encode_456(self !7330: bool, buffer !7331: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7334 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 1
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = ptr_to_int v20 to u64
        v23 = add v22, v16
        v24 = int_to_ptr v23 to ptr bool
        store self to v24
        v25 = const u64 1
        v26 = add v16, v25
        v27 = ptr_to_int v20 to u64
        v28 = get_local ptr { u64, u64, u64 }, __anon_1
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        store v21 to v32
        v33 = const u64 2
        v34 = get_elem_ptr v28, ptr u64, v33
        store v26 to v34
        v35 = asm(buffer: v28) -> { u64, u64, u64 } buffer {
        }
        v36 = get_local ptr { { u64, u64, u64 } }, __anon_2, !7335
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, u64, u64 }, v37
        store v35 to v38, !7335
        v39 = load v36
        ret { { u64, u64, u64 } } v39

        block1():
        v40 = const u64 2
        v41 = mul v13, v40
        v42 = add v41, v17
        v43 = asm(new_cap: v42, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v43, v42)

        block2():
        br block0(v10, v13)
    }

    pub fn log_457(value !1912: { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }) -> (), !7336 {
        entry(value: { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }):
        v0 = call encode_458(value), !1916
        v1 = const u64 7048493221525582492
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_458(item !1917: { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }) -> slice, !7337 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }):
        v0 = call new_100(), !7338
        v1 = call abi_encode_459(item, v0), !7339
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7340
        ret slice v5
    }

    pub fn abi_encode_459(self !7341: { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, buffer !7342: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7345 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v2, !7346
        v4 = load v3
        v5 = call abi_encode_460(v4, buffer), !7349
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7350
        store v5 to v6, !7350
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !7351
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_460(self !6812: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, buffer !6813: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7353 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______
        local { { u64, u64, u64 } } buffer________
        local { { u64, u64, u64 } } buffer_________
        local { { u64, u64, u64 } } buffer__________
        local { { u64, u64, u64 } } buffer___________
        local { { u64, u64, u64 } } buffer____________
        local { { u64, u64, u64 } } buffer_____________
        local { { u64, u64, u64 } } buffer______________
        local { { u64, u64, u64 } } buffer_______________
        local { { u64, u64, u64 } } buffer________________
        local { { u64, u64, u64 } } buffer_________________
        local { { u64, u64, u64 } } buffer__________________

        entry(self: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !7354
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !7356
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7357
        store v5 to v6, !7357
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !2486
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7358
        v13 = load v12
        v14 = call abi_encode_375(v11, v13), !7360
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !7361
        store v14 to v15, !7361
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr b256, v18, !3907
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !6119
        v22 = load v21
        v23 = call abi_encode_213(v20, v22), !7363
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !7364
        store v23 to v24, !7364
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u256, v27, !2867
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !7365
        v31 = load v30
        v32 = call abi_encode_374(v29, v31), !7368
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !7369
        store v32 to v33, !7369
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u256, v36, !2993
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !7370
        v40 = load v39
        v41 = call abi_encode_374(v38, v40), !7373
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !7374
        store v41 to v42, !7374
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u256, v45, !2880
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !7375
        v49 = load v48
        v50 = call abi_encode_374(v47, v49), !7378
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !7379
        store v50 to v51, !7379
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u256, v54, !2915
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !7380
        v58 = load v57
        v59 = call abi_encode_374(v56, v58), !7383
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !7384
        store v59 to v60, !7384
        v61 = ptr_to_int self to u64
        v62 = int_to_ptr v61 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v63 = const u64 7
        v64 = get_elem_ptr v62, ptr u256, v63, !2875
        v65 = load v64
        v66 = get_local ptr { { u64, u64, u64 } }, buffer_______, !7385
        v67 = load v66
        v68 = call abi_encode_374(v65, v67), !7388
        v69 = get_local ptr { { u64, u64, u64 } }, buffer________, !7389
        store v68 to v69, !7389
        v70 = ptr_to_int self to u64
        v71 = int_to_ptr v70 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v72 = const u64 8
        v73 = get_elem_ptr v71, ptr u256, v72, !3006
        v74 = load v73
        v75 = get_local ptr { { u64, u64, u64 } }, buffer________, !7390
        v76 = load v75
        v77 = call abi_encode_374(v74, v76), !7393
        v78 = get_local ptr { { u64, u64, u64 } }, buffer_________, !7394
        store v77 to v78, !7394
        v79 = ptr_to_int self to u64
        v80 = int_to_ptr v79 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v81 = const u64 9
        v82 = get_elem_ptr v80, ptr u256, v81, !3041
        v83 = load v82
        v84 = get_local ptr { { u64, u64, u64 } }, buffer_________, !7395
        v85 = load v84
        v86 = call abi_encode_374(v83, v85), !7398
        v87 = get_local ptr { { u64, u64, u64 } }, buffer__________, !7399
        store v86 to v87, !7399
        v88 = ptr_to_int self to u64
        v89 = int_to_ptr v88 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v90 = const u64 10
        v91 = get_elem_ptr v89, ptr u256, v90, !3001
        v92 = load v91
        v93 = get_local ptr { { u64, u64, u64 } }, buffer__________, !7400
        v94 = load v93
        v95 = call abi_encode_374(v92, v94), !7403
        v96 = get_local ptr { { u64, u64, u64 } }, buffer___________, !7404
        store v95 to v96, !7404
        v97 = ptr_to_int self to u64
        v98 = int_to_ptr v97 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v99 = const u64 11
        v100 = get_elem_ptr v98, ptr u256, v99, !7405
        v101 = load v100
        v102 = get_local ptr { { u64, u64, u64 } }, buffer___________, !7406
        v103 = load v102
        v104 = call abi_encode_374(v101, v103), !7409
        v105 = get_local ptr { { u64, u64, u64 } }, buffer____________, !7410
        store v104 to v105, !7410
        v106 = ptr_to_int self to u64
        v107 = int_to_ptr v106 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v108 = const u64 12
        v109 = get_elem_ptr v107, ptr u256, v108, !6401
        v110 = load v109
        v111 = get_local ptr { { u64, u64, u64 } }, buffer____________, !7411
        v112 = load v111
        v113 = call abi_encode_374(v110, v112), !7414
        v114 = get_local ptr { { u64, u64, u64 } }, buffer_____________, !7415
        store v113 to v114, !7415
        v115 = ptr_to_int self to u64
        v116 = int_to_ptr v115 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v117 = const u64 13
        v118 = get_elem_ptr v116, ptr u256, v117, !2507
        v119 = load v118
        v120 = get_local ptr { { u64, u64, u64 } }, buffer_____________, !7416
        v121 = load v120
        v122 = call abi_encode_374(v119, v121), !7419
        v123 = get_local ptr { { u64, u64, u64 } }, buffer______________, !7420
        store v122 to v123, !7420
        v124 = ptr_to_int self to u64
        v125 = int_to_ptr v124 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v126 = const u64 14
        v127 = get_elem_ptr v125, ptr u256, v126, !2538
        v128 = load v127
        v129 = get_local ptr { { u64, u64, u64 } }, buffer______________, !7421
        v130 = load v129
        v131 = call abi_encode_374(v128, v130), !7424
        v132 = get_local ptr { { u64, u64, u64 } }, buffer_______________, !7425
        store v131 to v132, !7425
        v133 = ptr_to_int self to u64
        v134 = int_to_ptr v133 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v135 = const u64 15
        v136 = get_elem_ptr v134, ptr u256, v135, !2497
        v137 = load v136
        v138 = get_local ptr { { u64, u64, u64 } }, buffer_______________, !7426
        v139 = load v138
        v140 = call abi_encode_374(v137, v139), !7429
        v141 = get_local ptr { { u64, u64, u64 } }, buffer________________, !7430
        store v140 to v141, !7430
        v142 = ptr_to_int self to u64
        v143 = int_to_ptr v142 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v144 = const u64 16
        v145 = get_elem_ptr v143, ptr u256, v144, !7431
        v146 = load v145
        v147 = get_local ptr { { u64, u64, u64 } }, buffer________________, !7432
        v148 = load v147
        v149 = call abi_encode_374(v146, v148), !7435
        v150 = get_local ptr { { u64, u64, u64 } }, buffer_________________, !7436
        store v149 to v150, !7436
        v151 = ptr_to_int self to u64
        v152 = int_to_ptr v151 to ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }
        v153 = const u64 17
        v154 = get_elem_ptr v152, ptr u256, v153, !7437
        v155 = load v154
        v156 = get_local ptr { { u64, u64, u64 } }, buffer_________________, !7438
        v157 = load v156
        v158 = call abi_encode_374(v155, v157), !7441
        v159 = get_local ptr { { u64, u64, u64 } }, buffer__________________, !7442
        store v158 to v159, !7442
        v160 = get_local ptr { { u64, u64, u64 } }, buffer__________________, !7443
        v161 = load v160
        ret { { u64, u64, u64 } } v161
    }

    pub fn decode_461(self !1336: ptr { u64 }) -> { { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, !7444 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_462(self), !7445
        ret { { { b256 }, b256, u64, u256, u256, u256, u64, bool } } v0
    }

    pub fn abi_decode_462(buffer !7446: ptr { u64 }) -> { { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, !7449 {
        local { { { b256 }, b256, u64, u256, u256, u256, u64, bool } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_463(buffer), !7452
        v1 = get_local ptr { { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { { b256 }, b256, u64, u256, u256, u256, u64, bool } } v4
    }

    pub fn abi_decode_463(buffer !7454: ptr { u64 }) -> { { b256 }, b256, u64, u256, u256, u256, u64, bool }, !7456 {
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_406(buffer), !7459
        v1 = call decode_31(buffer), !7462
        v2 = call decode_336(buffer), !7464
        v3 = call decode_408(buffer), !7466
        v4 = call decode_408(buffer), !7469
        v5 = call decode_408(buffer), !7472
        v6 = call decode_28(buffer), !7475
        v7 = call decode_464(buffer), !7478
        v8 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, __anon_0, !7479
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { b256 }, v9
        store v0 to v10, !7479
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr b256, v11
        store v1 to v12, !7479
        v13 = const u64 2
        v14 = get_elem_ptr v8, ptr u64, v13
        store v2 to v14, !7479
        v15 = const u64 3
        v16 = get_elem_ptr v8, ptr u256, v15
        store v3 to v16, !7479
        v17 = const u64 4
        v18 = get_elem_ptr v8, ptr u256, v17
        store v4 to v18, !7479
        v19 = const u64 5
        v20 = get_elem_ptr v8, ptr u256, v19
        store v5 to v20, !7479
        v21 = const u64 6
        v22 = get_elem_ptr v8, ptr u64, v21
        store v6 to v22, !7479
        v23 = const u64 7
        v24 = get_elem_ptr v8, ptr bool, v23
        store v7 to v24, !7479
        v25 = load v8
        ret { { b256 }, b256, u64, u256, u256, u256, u64, bool } v25
    }

    pub fn decode_464(self !1336: ptr { u64 }) -> bool, !7480 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_465(self), !7481
        ret bool v0
    }

    pub fn abi_decode_465(buffer !7482: ptr { u64 }) -> bool, !7485 {
        local u8 __matched_value_2

        entry(buffer: ptr { u64 }):
        v0 = call read_339(buffer), !7488
        v1 = get_local ptr u8, __matched_value_2, !7489
        store v0 to v1, !7489
        v2 = get_local ptr u8, __matched_value_2, !7486
        v3 = load v2
        v4 = const u8 0, !7490
        v5 = call eq_353(v3, v4), !7493
        cbr v5, block0(), block1(), !7491

        block0():
        v6 = const bool false, !7494
        br block5(v6)

        block1():
        v7 = get_local ptr u8, __matched_value_2, !7486
        v8 = load v7
        v9 = const u8 1, !7495
        v10 = call eq_353(v8, v9), !7498
        cbr v10, block2(), block3(), !7496

        block2():
        v11 = const bool true, !7499
        br block4(v11)

        block3():
        v12 = const u64 0, !7500
        revert v12, !7501

        block4(v13: bool):
        br block5(v13)

        block5(v14: bool):
        ret bool v14
    }

    pub fn add_collateral_asset_466(configuration !7502: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !7505 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } __anon_4

        entry(configuration: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = call only_owner_467(), !7508
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !7509
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7509
        store v4 to v3, !7509
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !7509
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7509
        store v10 to v9, !7509
        v11 = load v1
        v12 = ptr_to_int configuration to u64
        v13 = int_to_ptr v12 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { b256 }, v14, !3743
        v16 = load v15
        v17 = call get_301(v11, v16), !7512
        v18 = call try_read_473(v17), !7515
        v19 = call is_none_472(v18), !7518
        v20 = get_local ptr { u64 }, __anon_1, !1845
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !1845
        v23 = const u64 12, !1845
        store v23 to v22, !1845
        v24 = load v20
        v25 = call require_112(v19, v24), !7521
        v26 = get_local ptr { b256, u64, b256 }, __anon_2, !7522
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr b256, v27
        v29 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7522
        store v29 to v28, !7522
        v30 = const u64 1
        v31 = get_elem_ptr v26, ptr u64, v30
        v32 = const u64 0
        store v32 to v31, !7522
        v33 = const u64 2
        v34 = get_elem_ptr v26, ptr b256, v33
        v35 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7522
        store v35 to v34, !7522
        v36 = load v26
        v37 = ptr_to_int configuration to u64
        v38 = int_to_ptr v37 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr { b256 }, v39, !3743
        v41 = load v40
        v42 = call insert_474(v36, v41, configuration), !7525
        v43 = get_local ptr { b256, u64, b256 }, __anon_3, !7526
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr b256, v44
        v46 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7526
        store v46 to v45, !7526
        v47 = const u64 1
        v48 = get_elem_ptr v43, ptr u64, v47
        v49 = const u64 0
        store v49 to v48, !7526
        v50 = const u64 2
        v51 = get_elem_ptr v43, ptr b256, v50
        v52 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7526
        store v52 to v51, !7526
        v53 = load v43
        v54 = ptr_to_int configuration to u64
        v55 = int_to_ptr v54 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr { b256 }, v56, !3743
        v58 = load v57
        v59 = call push_477(v53, v58), !7529
        v60 = ptr_to_int configuration to u64
        v61 = int_to_ptr v60 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { b256 }, v62, !3743
        v64 = load v63
        v65 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, __anon_4, !7530
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr { b256 }, v66
        store v64 to v67, !7530
        v68 = const u64 1
        v69 = get_elem_ptr v65, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v68
        store configuration to v69, !7530
        v70 = load v65
        v71 = call log_480(v70), !7533
        v72 = const unit ()
        ret () v72
    }

    pub fn only_owner_467() -> (), !7536 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { u64 } __anon_1

        entry():
        v0 = call _owner_425(), !7539
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !7046
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !7046
        v4 = const u64 1, !7046
        store v4 to v3, !7046
        v5 = call msg_sender_347(), !7542
        v6 = call unwrap_346(v5), !7545
        v7 = const u64 1
        v8 = const u64 1
        v9 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v7, v8, !7046
        store v6 to v9, !7046
        v10 = load v1
        v11 = call eq_423(v0, v10), !7548
        v12 = get_local ptr { u64 }, __anon_1, !7549
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !7549
        v15 = const u64 0, !7549
        store v15 to v14, !7549
        v16 = load v12
        v17 = call require_468(v11, v16), !7552
        v18 = const unit ()
        ret () v18
    }

    pub fn require_468(condition !1895: bool, value !1896: { u64 }) -> (), !7553 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_15(condition), !7554
        cbr v0, block0(), block1(), !1900

        block0():
        v1 = call log_469(value), !7555
        v2 = const u64 18446744073709486080, !1907
        v3 = call revert_102(v2), !7556
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_469(value !1912: { u64 }) -> (), !7557 {
        entry(value: { u64 }):
        v0 = call encode_470(value), !1916
        v1 = const u64 4571204900286667806
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_470(item !1917: { u64 }) -> slice, !7558 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_100(), !7559
        v1 = call abi_encode_471(item, v0), !7560
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7561
        ret slice v5
    }

    pub fn abi_encode_471(self !7562: { u64 }, buffer !7563: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7566 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !7567
        store self to v0, !7567
        v1 = get_local ptr { u64 }, __matched_value_1, !7568
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !7568
        v4 = load v3
        v5 = const u64 0, !7568
        v6 = call eq_16(v4, v5), !7571
        cbr v6, block0(), block1(), !7569

        block0():
        v7 = const u64 0, !7572
        v8 = call abi_encode_99(v7, buffer), !7574
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !7567
        revert v9, !7567

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !7575
        store v10 to v11, !7575
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7576
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn is_none_472(self !5997: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }) -> bool, !7577 {
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __matched_value_3

        entry(self: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }):
        v0 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_3, !6001
        store self to v0, !6001
        v1 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_3, !6002
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6002
        v4 = load v3
        v5 = const u64 1, !6002
        v6 = call eq_16(v4, v5), !7578
        cbr v6, block0(), block1(), !6003

        block0():
        v7 = const bool false, !6006
        br block2(v7)

        block1():
        v8 = const bool true, !6007
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn try_read_473(self !4080: { b256, u64, b256 }) -> { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, !7579 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_299(self), !7580
        v1 = call offset_300(self), !7581
        v2 = call read_296(v0, v1), !7582
        ret { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } v2
    }

    pub fn insert_474(self !6027: { b256, u64, b256 }, key !6028: { b256 }, value !6029: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !7583 {
        local { { b256 }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { b256 }, value: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = call field_id_305(self), !7584
        v1 = get_local ptr { { b256 }, b256 }, __anon_0, !6036
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !6036
        store key to v3, !6036
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !6036
        store v0 to v5, !6036
        v6 = load v1
        v7 = call sha256_302(v6), !7585
        v8 = get_local ptr b256, key_, !6040
        store v7 to v8, !6040
        v9 = get_local ptr b256, key_, !6041
        v10 = load v9
        v11 = const u64 0, !6042
        v12 = call write_475(v10, v11, value), !7586
        v13 = const unit ()
        ret () v13
    }

    pub fn write_475(slot !3223: b256, offset !3224: u64, value !3225: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !7587 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = const u64 184
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !7588
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_297(slot, offset), !7589
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !7590
        v30 = call alloc_51(v29), !7591
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !7592
        v47 = call write_476(v46, value), !7593
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_476(self !1596: u64, val !1597: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !7594 {
        entry(self: u64, val: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 184
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 184
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn push_477(self !7595: { b256, u64, b256 }, value !7596: { b256 }) -> (), !7599 {
        local b256 key
        local u64 len
        local u64 offset

        entry(self: { b256, u64, b256 }, value: { b256 }):
        v0 = call field_id_293(self), !7602
        v1 = const u64 0, !7603
        v2 = call read_144(v0, v1), !7606
        v3 = const u64 0, !7607
        v4 = call unwrap_or_292(v2, v3), !7610
        v5 = get_local ptr u64, len, !7611
        store v4 to v5, !7611
        v6 = call field_id_293(self), !7614
        v7 = call sha256_316(v6), !7617
        v8 = get_local ptr b256, key, !7618
        store v7 to v8, !7618
        v9 = get_local ptr u64, len, !7619
        v10 = load v9
        v11 = call offset_calculator_317(v10), !7622
        v12 = get_local ptr u64, offset, !7623
        store v11 to v12, !7623
        v13 = get_local ptr b256, key, !7624
        v14 = load v13
        v15 = get_local ptr u64, offset, !7625
        v16 = load v15
        v17 = call write_478(v14, v16, value), !7628
        v18 = call field_id_293(self), !7631
        v19 = get_local ptr u64, len, !7632
        v20 = load v19
        v21 = const u64 1, !7633
        v22 = call add_45(v20, v21), !7636
        v23 = const u64 0, !7637
        v24 = call write_363(v18, v23, v22), !7640
        v25 = const unit ()
        ret () v25
    }

    pub fn write_478(slot !3223: b256, offset !3224: u64, value !3225: { b256 }) -> (), !7641 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { b256 }):
        v0 = const u64 32
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !7642
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_310(slot, offset), !7643
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !7644
        v30 = call alloc_51(v29), !7645
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !7646
        v47 = call write_479(v46, value), !7647
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_479(self !1596: u64, val !1597: { b256 }) -> (), !7648 {
        entry(self: u64, val: { b256 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn log_480(value !1912: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }) -> (), !7649 {
        entry(value: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }):
        v0 = call encode_481(value), !1916
        v1 = const u64 16873461032230770227
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_481(item !1917: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }) -> slice, !7650 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }):
        v0 = call new_100(), !7651
        v1 = call abi_encode_482(item, v0), !7652
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7653
        ret slice v5
    }

    pub fn abi_encode_482(self !7654: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, buffer !7655: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7658 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !7659
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !7661
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7662
        store v5 to v6, !7662
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v9, !7663
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7664
        v13 = load v12
        v14 = call abi_encode_483(v11, v13), !7667
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !7668
        store v14 to v15, !7668
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !7669
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn abi_encode_483(self !7292: { { b256 }, b256, u64, u256, u256, u256, u64, bool }, buffer !7293: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7671 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______
        local { { u64, u64, u64 } } buffer________

        entry(self: { { b256 }, b256, u64, u256, u256, u256, u64, bool }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !3743
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !7673
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7674
        store v5 to v6, !7674
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr b256, v9, !3797
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7675
        v13 = load v12
        v14 = call abi_encode_213(v11, v13), !7678
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !7679
        store v14 to v15, !7679
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !3827
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !7576
        v22 = load v21
        v23 = call abi_encode_375(v20, v22), !7682
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !7683
        store v23 to v24, !7683
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u256, v27, !7684
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !7685
        v31 = load v30
        v32 = call abi_encode_374(v29, v31), !7688
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !7689
        store v32 to v33, !7689
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u256, v36, !5074
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !7690
        v40 = load v39
        v41 = call abi_encode_374(v38, v40), !7693
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !7694
        store v41 to v42, !7694
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u256, v45, !3842
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6796
        v49 = load v48
        v50 = call abi_encode_374(v47, v49), !7696
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !7697
        store v50 to v51, !7697
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u64, v54, !7698
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !6856
        v58 = load v57
        v59 = call abi_encode_99(v56, v58), !7701
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !7702
        store v59 to v60, !7702
        v61 = ptr_to_int self to u64
        v62 = int_to_ptr v61 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v63 = const u64 7
        v64 = get_elem_ptr v62, ptr bool, v63, !7703
        v65 = load v64
        v66 = get_local ptr { { u64, u64, u64 } }, buffer_______, !7380
        v67 = load v66
        v68 = call abi_encode_456(v65, v67), !7705
        v69 = get_local ptr { { u64, u64, u64 } }, buffer________, !7706
        store v68 to v69, !7706
        v70 = get_local ptr { { u64, u64, u64 } }, buffer________, !7707
        v71 = load v70
        ret { { u64, u64, u64 } } v71
    }

    pub fn decode_484(self !1336: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) } }, !7708 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_485(self), !7709
        ret { { u64, ( { b256 } | { b256 } ) } } v0
    }

    pub fn abi_decode_485(buffer !7446: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) } }, !7710 {
        local { { u64, ( { b256 } | { b256 } ) } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_27(buffer), !7711
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { u64, ( { b256 } | { b256 } ) } } v4
    }

    pub fn available_to_borrow_486(account !7712: { u64, ( { b256 } | { b256 } ) }) -> u256, !7715 {
        local u256 _
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_5
        local { u64 } __anon_6
        local { u64 } __anon_7
        local { u256, u256 } __tuple_3
        local { u256, u256 } __tuple_3_
        local u256 amount
        local u256 balance
        local u256 base_asset_scale
        local { u64, u64, u64, u64 } base_price
        local u256 base_price_
        local u256 base_price_scale
        local u256 borrow
        local mut u256 borrow_limit
        local u256 borrow_limit_
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local mut u64 index
        local u64 len
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration
        local { u64, u64, u64, u64 } price
        local u256 price_
        local u64 price_exponent
        local u256 price_scale

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_supply_borrow_internal_487(account), !7718
        v1 = get_local ptr { u256, u256 }, __tuple_3, !7719
        store v0 to v1, !7719
        v2 = get_local ptr { u256, u256 }, __tuple_3, !7719
        v3 = load v2
        v4 = get_local ptr { u256, u256 }, __tuple_3_, !7719
        store v3 to v4, !7719
        v5 = get_local ptr { u256, u256 }, __tuple_3_, !7719
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u256, v6, !7719
        v8 = load v7
        v9 = get_local ptr u256, _, !7719
        store v8 to v9, !7719
        v10 = get_local ptr { u256, u256 }, __tuple_3_, !7719
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u256, v11, !7719
        v13 = load v12
        v14 = get_local ptr u256, borrow, !7719
        store v13 to v14, !7719
        v15 = get_local ptr u256, borrow_limit, !7720
        v16 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !7721
        store v16 to v15, !7720
        v17 = get_local ptr u64, index, !7722
        v18 = const u64 0, !7723
        store v18 to v17, !7722
        v19 = get_local ptr { b256, u64, b256 }, __anon_0, !7724
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr b256, v20
        v22 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7724
        store v22 to v21, !7724
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr u64, v23
        v25 = const u64 0
        store v25 to v24, !7724
        v26 = const u64 2
        v27 = get_elem_ptr v19, ptr b256, v26
        v28 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7724
        store v28 to v27, !7724
        v29 = load v19
        v30 = call len_291(v29), !7727
        v31 = get_local ptr u64, len, !7728
        store v30 to v31, !7728
        v32 = get_local ptr { b256, u64, b256 }, __anon_1, !7729
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr b256, v33
        v35 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !7729
        store v35 to v34, !7729
        v36 = const u64 1
        v37 = get_elem_ptr v32, ptr u64, v36
        v38 = const u64 0
        store v38 to v37, !7729
        v39 = const u64 2
        v40 = get_elem_ptr v32, ptr b256, v39
        v41 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !7729
        store v41 to v40, !7729
        v42 = load v32
        v43 = call read_164(v42), !7732
        v44 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !7733
        store v43 to v44, !7733
        br while()

        while():
        v45 = get_local ptr u64, index, !7734
        v46 = load v45
        v47 = get_local ptr u64, len, !7735
        v48 = load v47
        v49 = call lt_26(v46, v48), !7738
        cbr v49, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v50 = get_local ptr { b256, u64, b256 }, __anon_2, !7739
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr b256, v51
        v53 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7739
        store v53 to v52, !7739
        v54 = const u64 1
        v55 = get_elem_ptr v50, ptr u64, v54
        v56 = const u64 0
        store v56 to v55, !7739
        v57 = const u64 2
        v58 = get_elem_ptr v50, ptr b256, v57
        v59 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7739
        store v59 to v58, !7739
        v60 = load v50
        v61 = get_local ptr { b256, u64, b256 }, __anon_3, !7740
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7740
        store v64 to v63, !7740
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !7740
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7740
        store v70 to v69, !7740
        v71 = load v61
        v72 = get_local ptr u64, index, !7741
        v73 = load v72
        v74 = call get_315(v71, v73), !7744
        v75 = call unwrap_314(v74), !7747
        v76 = call read_307(v75), !7750
        v77 = call get_301(v60, v76), !7753
        v78 = call read_294(v77), !7756
        v79 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7757
        store v78 to v79, !7757
        v80 = get_local ptr { b256, u64, b256 }, __anon_4, !7758
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr b256, v81
        v83 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !7758
        store v83 to v82, !7758
        v84 = const u64 1
        v85 = get_elem_ptr v80, ptr u64, v84
        v86 = const u64 0
        store v86 to v85, !7758
        v87 = const u64 2
        v88 = get_elem_ptr v80, ptr b256, v87
        v89 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !7758
        store v89 to v88, !7758
        v90 = load v80
        v91 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7759
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { b256 }, v92, !3743
        v94 = load v93
        v95 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_5, !7760
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr { u64, ( { b256 } | { b256 } ) }, v96, !7760
        store account to v97, !7760
        v98 = const u64 1
        v99 = get_elem_ptr v95, ptr { b256 }, v98, !7760
        store v94 to v99, !7760
        v100 = load v95
        v101 = call get_325(v90, v100), !7763
        v102 = call try_read_324(v101), !7766
        v103 = const u64 0, !7767
        v104 = call unwrap_or_292(v102, v103), !7770
        v105 = call into_139(v104), !7773
        v106 = get_local ptr u256, balance, !7774
        store v105 to v106, !7774
        v107 = get_local ptr u256, balance, !7775
        v108 = load v107
        v109 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !7776
        v110 = call eq_153(v108, v109), !7779
        cbr v110, block0(), block1(), !7777

        block0():
        v111 = get_local ptr u64, index, !7780
        v112 = load v111
        v113 = const u64 1, !7781
        v114 = call add_45(v112, v113), !7784
        v115 = get_local ptr u64, index, !7782
        store v114 to v115, !7782
        br while()

        block1():
        v116 = const unit ()
        br block2(v116)

        block2(v117: ()):
        v118 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7785
        v119 = const u64 1
        v120 = get_elem_ptr v118, ptr b256, v119, !3797
        v121 = load v120
        v122 = get_local ptr { u64 }, __anon_6, !3798
        v123 = const u64 0
        v124 = get_elem_ptr v122, ptr u64, v123, !3798
        v125 = const u64 0, !3798
        store v125 to v124, !3798
        v126 = load v122
        v127 = call get_price_internal_331(v121, v126), !7788
        v128 = get_local ptr { u64, u64, u64, u64 }, price, !7789
        store v127 to v128, !7789
        v129 = get_local ptr { u64, u64, u64, u64 }, price, !7790
        v130 = const u64 1
        v131 = get_elem_ptr v129, ptr u64, v130, !3805
        v132 = load v131
        v133 = get_local ptr u64, price_exponent, !7791
        store v132 to v133, !7791
        v134 = const u64 10, !7792
        v135 = call from_140(v134), !7795
        v136 = get_local ptr { u64, u64, u64, u64 }, price, !7796
        v137 = const u64 1
        v138 = get_elem_ptr v136, ptr u64, v137, !3805
        v139 = load v138
        v140 = call pow_172(v135, v139), !7799
        v141 = get_local ptr u256, price_scale, !7800
        store v140 to v141, !7800
        v142 = get_local ptr { u64, u64, u64, u64 }, price, !7801
        v143 = const u64 2
        v144 = get_elem_ptr v142, ptr u64, v143, !3817
        v145 = load v144
        v146 = call from_140(v145), !7804
        v147 = get_local ptr u256, price_, !7805
        store v146 to v147, !7805
        v148 = get_local ptr u256, balance, !7806
        v149 = load v148
        v150 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7807
        v151 = const u64 3
        v152 = get_elem_ptr v150, ptr u256, v151, !7684
        v153 = load v152
        v154 = call multiply_158(v149, v153), !7810
        v155 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v156 = call divide_157(v154, v155), !7813
        v157 = get_local ptr u256, amount, !7814
        store v156 to v157, !7814
        v158 = const u64 10, !7815
        v159 = call from_140(v158), !7818
        v160 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7819
        v161 = const u64 2
        v162 = get_elem_ptr v160, ptr u64, v161, !3827
        v163 = load v162
        v164 = call pow_172(v159, v163), !7822
        v165 = get_local ptr u256, collateral_scale, !7823
        store v164 to v165, !7823
        v166 = const u64 10, !7824
        v167 = call from_140(v166), !7827
        v168 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !7828
        v169 = const u64 1
        v170 = get_elem_ptr v168, ptr u64, v169, !2486
        v171 = load v170
        v172 = call pow_172(v167, v171), !7831
        v173 = get_local ptr u256, base_asset_scale, !7832
        store v172 to v173, !7832
        v174 = get_local ptr u256, borrow_limit, !7833
        v175 = load v174
        v176 = get_local ptr u256, amount, !7834
        v177 = load v176
        v178 = get_local ptr u256, price_, !7835
        v179 = load v178
        v180 = call multiply_158(v177, v179), !7838
        v181 = get_local ptr u256, base_asset_scale, !7839
        v182 = load v181
        v183 = call multiply_158(v180, v182), !7842
        v184 = get_local ptr u256, collateral_scale, !7843
        v185 = load v184
        v186 = call divide_157(v183, v185), !7846
        v187 = get_local ptr u256, price_scale, !7847
        v188 = load v187
        v189 = call divide_157(v186, v188), !7850
        v190 = call add_124(v175, v189), !7853
        v191 = get_local ptr u256, borrow_limit, !7851
        store v190 to v191, !7851
        v192 = get_local ptr u64, index, !7854
        v193 = load v192
        v194 = const u64 1, !7855
        v195 = call add_45(v193, v194), !7858
        v196 = get_local ptr u64, index, !7856
        store v195 to v196, !7856
        br while()

        end_while():
        v197 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !7859
        v198 = const u64 2
        v199 = get_elem_ptr v197, ptr b256, v198, !3907
        v200 = load v199
        v201 = get_local ptr { u64 }, __anon_7, !3798
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !3798
        v204 = const u64 1, !3798
        store v204 to v203, !3798
        v205 = load v201
        v206 = call get_price_internal_331(v200, v205), !7862
        v207 = get_local ptr { u64, u64, u64, u64 }, base_price, !7863
        store v206 to v207, !7863
        v208 = const u64 10, !7864
        v209 = call from_140(v208), !7867
        v210 = get_local ptr { u64, u64, u64, u64 }, base_price, !7868
        v211 = const u64 1
        v212 = get_elem_ptr v210, ptr u64, v211, !3805
        v213 = load v212
        v214 = call pow_172(v209, v213), !7871
        v215 = get_local ptr u256, base_price_scale, !7872
        store v214 to v215, !7872
        v216 = get_local ptr { u64, u64, u64, u64 }, base_price, !7873
        v217 = const u64 2
        v218 = get_elem_ptr v216, ptr u64, v217, !3817
        v219 = load v218
        v220 = call from_140(v219), !7876
        v221 = get_local ptr u256, base_price_, !7877
        store v220 to v221, !7877
        v222 = get_local ptr u256, borrow_limit, !7878
        v223 = load v222
        v224 = get_local ptr u256, base_price_scale, !7879
        v225 = load v224
        v226 = call multiply_158(v223, v225), !7882
        v227 = get_local ptr u256, base_price_, !7883
        v228 = load v227
        v229 = call divide_157(v226, v228), !7886
        v230 = get_local ptr u256, borrow_limit_, !7887
        store v229 to v230, !7887
        v231 = get_local ptr u256, borrow_limit_, !7888
        v232 = load v231
        v233 = get_local ptr u256, borrow, !7889
        v234 = load v233
        v235 = call lt_163(v232, v234), !7892
        cbr v235, block3(), block4(), !7890

        block3():
        v236 = call zero_160(), !7895
        br block5(v236)

        block4():
        v237 = get_local ptr u256, borrow_limit_, !7896
        v238 = load v237
        v239 = get_local ptr u256, borrow, !7897
        v240 = load v239
        v241 = call subtract_125(v238, v240), !7900
        br block5(v241)

        block5(v242: u256):
        ret u256 v242
    }

    fn get_user_supply_borrow_internal_487(account !7901: { u64, ( { b256 } | { b256 } ) }) -> { u256, u256 }, !7904 {
        local { b256, u64, b256 } __anon_0
        local { { u256 }, u256, u256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { u256, u256 } __anon_3
        local { u256, u256 } __anon_4
        local { u256, u256 } __tuple_5
        local { u256, u256 } __tuple_5_
        local u256 borrow
        local u256 borrow_index
        local u256 last_accrual_time
        local { u256 } principal
        local u256 supply
        local u256 supply_index

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !7905
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !7905
        store v3 to v2, !7905
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !7905
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !7905
        store v9 to v8, !7905
        v10 = load v0
        v11 = call get_239(v10, account), !7908
        v12 = call try_read_233(v11), !7911
        v13 = call default_270(), !7914
        v14 = call unwrap_or_232(v12, v13), !7917
        v15 = get_local ptr { { u256 }, u256, u256 }, __anon_1
        store v14 to v15
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u256 }, v16, !3680
        v18 = load v17
        v19 = get_local ptr { u256 }, principal, !7918
        store v18 to v19, !7918
        v20 = get_local ptr { b256, u64, b256 }, __anon_2, !7919
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr b256, v21
        v23 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddcec0, !7919
        store v23 to v22, !7919
        v24 = const u64 1
        v25 = get_elem_ptr v20, ptr u64, v24
        v26 = const u64 0
        store v26 to v25, !7919
        v27 = const u64 2
        v28 = get_elem_ptr v20, ptr b256, v27
        v29 = const b256 0x79aa7ec830984eccffac9ed69968fe5497be089ff4398ccc492d7ba16d41ff60, !7919
        store v29 to v28, !7919
        v30 = load v20
        v31 = call read_412(v30), !7922
        v32 = get_local ptr u256, last_accrual_time, !7923
        store v31 to v32, !7923
        v33 = call timestamp_141(), !7926
        v34 = call into_139(v33), !7929
        v35 = get_local ptr u256, last_accrual_time, !7930
        v36 = load v35
        v37 = call accrued_interest_indices_154(v34, v36), !7933
        v38 = get_local ptr { u256, u256 }, __tuple_5, !7934
        store v37 to v38, !7934
        v39 = get_local ptr { u256, u256 }, __tuple_5, !7934
        v40 = load v39
        v41 = get_local ptr { u256, u256 }, __tuple_5_, !7934
        store v40 to v41, !7934
        v42 = get_local ptr { u256, u256 }, __tuple_5_, !7934
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr u256, v43, !7934
        v45 = load v44
        v46 = get_local ptr u256, supply_index, !7934
        store v45 to v46, !7934
        v47 = get_local ptr { u256, u256 }, __tuple_5_, !7934
        v48 = const u64 1
        v49 = get_elem_ptr v47, ptr u256, v48, !7934
        v50 = load v49
        v51 = get_local ptr u256, borrow_index, !7934
        store v50 to v51, !7934
        v52 = get_local ptr { u256 }, principal, !7935
        v53 = load v52
        v54 = call zero_277(), !7938
        v55 = call ge_274(v53, v54), !7941
        cbr v55, block0(), block1(), !7939

        block0():
        v56 = get_local ptr u256, supply_index, !7942
        v57 = load v56
        v58 = get_local ptr { u256 }, principal, !7943
        v59 = load v58
        v60 = call try_into_279(v59), !7946
        v61 = call unwrap_278(v60), !7949
        v62 = call present_value_supply_156(v57, v61), !7952
        v63 = get_local ptr u256, supply, !7953
        store v62 to v63, !7953
        v64 = get_local ptr u256, supply, !7954
        v65 = load v64
        v66 = get_local ptr { u256, u256 }, __anon_3, !7955
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u256, v67, !7955
        store v65 to v68, !7955
        v69 = const u64 1
        v70 = get_elem_ptr v66, ptr u256, v69, !7955
        v71 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !7956
        store v71 to v70, !7955
        v72 = load v66
        br block2(v72)

        block1():
        v73 = get_local ptr u256, borrow_index, !7957
        v74 = load v73
        v75 = get_local ptr { u256 }, principal, !7958
        v76 = load v75
        v77 = call wrapping_neg_284(v76), !7961
        v78 = call try_into_279(v77), !7964
        v79 = call unwrap_278(v78), !7967
        v80 = call present_value_borrow_159(v74, v79), !7970
        v81 = get_local ptr u256, borrow, !7971
        store v80 to v81, !7971
        v82 = get_local ptr u256, borrow, !7972
        v83 = load v82
        v84 = get_local ptr { u256, u256 }, __anon_4, !7973
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u256, v85, !7973
        v87 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !7974
        store v87 to v86, !7973
        v88 = const u64 1
        v89 = get_elem_ptr v84, ptr u256, v88, !7973
        store v83 to v89, !7973
        v90 = load v84
        br block2(v90)

        block2(v91: { u256, u256 }):
        ret { u256, u256 } v91
    }

    pub fn encode_488(item !1917: u256) -> slice, !7975 {
        local { { u64, u64, u64 } } buffer

        entry(item: u256):
        v0 = call new_100(), !7976
        v1 = call abi_encode_374(item, v0), !7977
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !7978
        ret slice v5
    }

    pub fn len_489(self !7979: slice) -> u64, !7982 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_12(self), !7985
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !7986
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn decode_490(self !1336: ptr { u64 }) -> { { b256 } }, !7987 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_491(self), !7988
        ret { { b256 } } v0
    }

    pub fn abi_decode_491(buffer !7446: ptr { u64 }) -> { { b256 } }, !7989 {
        local { { b256 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_407(buffer), !7990
        v1 = get_local ptr { { b256 } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { b256 } } v4
    }

    pub fn balance_of_492(asset_id !7991: { b256 }) -> u64, !7994 {
        entry(asset_id: { b256 }):
        v0 = call this_balance_493(asset_id), !7997
        ret u64 v0
    }

    pub fn this_balance_493(asset_id !7998: { b256 }) -> u64, !8001 {
        entry(asset_id: { b256 }):
        v0 = call this_104(), !8004
        v1 = call balance_of_494(v0, asset_id), !8007
        ret u64 v1
    }

    pub fn balance_of_494(target !8008: { b256 }, asset_id !8009: { b256 }) -> u64, !8012 {
        entry(target: { b256 }, asset_id: { b256 }):
        v0 = call bits_229(asset_id), !8015
        v1 = call bits_228(target), !8018
        v2 = asm(balance, asset: v0, id: v1) -> u64 balance, !8019 {
            bal    balance asset id, !8020
        }
        ret u64 v2
    }

    pub fn encode_495(item !1917: u64) -> slice, !8021 {
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_100(), !8022
        v1 = call abi_encode_99(item, v0), !8023
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !8024
        ret slice v5
    }

    pub fn decode_496(self !1336: ptr { u64 }) -> { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, !8025 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_497(self), !8026
        ret { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } } v0
    }

    pub fn abi_decode_497(buffer !8027: ptr { u64 }) -> { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, !8030 {
        local { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_407(buffer), !8033
        v1 = call abi_decode_2(buffer), !8036
        v2 = call abi_decode_27(buffer), !8039
        v3 = get_local ptr { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !8040
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { b256 }, v4, !8040
        store v0 to v5, !8040
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !8040
        store v1 to v7, !8040
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr { u64, ( { b256 } | { b256 } ) }, v8, !8040
        store v2 to v9, !8040
        v10 = load v3
        ret { { b256 }, u64, { u64, ( { b256 } | { b256 } ) } } v10
    }

    pub fn buy_collateral_498(asset_id !8041: { b256 }, min_amount !8042: u64, recipient !8043: { u64, ( { b256 } | { b256 } ) }) -> (), !8046 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 } __anon_10
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { u64 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_6
        local { u64 } __anon_7
        local { u64 } __anon_8
        local { u64 } __anon_9
        local { u64, ( { b256 } | { b256 } ) } caller
        local u64 collateral_amount
        local u64 payment_amount
        local { u256 } reserves
        local { u256 } reserves_

        entry(asset_id: { b256 }, min_amount: u64, recipient: { u64, ( { b256 } | { b256 } ) }):
        v0 = call reentrancy_guard_94(), !8049
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !8050
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !8050
        store v4 to v3, !8050
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 3
        store v7 to v6, !8050
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x510e6328dda277aa87d250765c99d797d52807a192c43c4402482c421c01c6f5, !8050
        store v10 to v9, !8050
        v11 = load v1
        v12 = call read_116(v11), !8053
        v13 = call not_15(v12), !8056
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !8059
        v20 = call msg_amount_194(), !8062
        v21 = get_local ptr u64, payment_amount, !8063
        store v20 to v21, !8063
        v22 = call msg_asset_id_197(), !8066
        v23 = get_local ptr { b256, u64, b256 }, __anon_2, !8067
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr b256, v24
        v26 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8067
        store v26 to v25, !8067
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27
        v29 = const u64 0
        store v29 to v28, !8067
        v30 = const u64 2
        v31 = get_elem_ptr v23, ptr b256, v30
        v32 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8067
        store v32 to v31, !8067
        v33 = load v23
        v34 = call read_164(v33), !8070
        v35 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v34 to v35
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr { b256 }, v36, !7354
        v38 = load v37
        v39 = call eq_196(v22, v38), !8073
        cbr v39, block0(), block1(v39), !8074

        block0():
        v40 = get_local ptr u64, payment_amount, !8075
        v41 = load v40
        v42 = const u64 0, !8076
        v43 = call gt_40(v41, v42), !8079
        br block1(v43), !8074

        block1(v44: bool):
        v45 = get_local ptr { u64 }, __anon_4, !1845
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1845
        v48 = const u64 11, !1845
        store v48 to v47, !1845
        v49 = load v45
        v50 = call require_112(v44, v49), !8082
        v51 = call get_reserves_internal_499(), !8085
        v52 = get_local ptr u64, payment_amount, !8086
        v53 = load v52
        v54 = call from_140(v53), !8089
        v55 = call try_from_282(v54), !8092
        v56 = call unwrap_281(v55), !8095
        v57 = call subtract_392(v51, v56), !8098
        v58 = get_local ptr { u256 }, reserves, !8099
        store v57 to v58, !8099
        v59 = get_local ptr { u256 }, reserves, !8100
        v60 = load v59
        v61 = get_local ptr { b256, u64, b256 }, __anon_5, !8101
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8101
        store v64 to v63, !8101
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !8101
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8101
        store v70 to v69, !8101
        v71 = load v61
        v72 = call read_164(v71), !8104
        v73 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_6
        store v72 to v73
        v74 = const u64 17
        v75 = get_elem_ptr v73, ptr u256, v74, !7437
        v76 = load v75
        v77 = call try_from_282(v76), !8107
        v78 = call unwrap_281(v77), !8110
        v79 = call lt_377(v60, v78), !8113
        v80 = get_local ptr { u64 }, __anon_7, !1845
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81, !1845
        v83 = const u64 5, !1845
        store v83 to v82, !1845
        v84 = load v80
        v85 = call require_112(v79, v84), !8116
        v86 = call get_collateral_reserves_internal_500(asset_id), !8119
        v87 = get_local ptr { u256 }, reserves_, !8120
        store v86 to v87, !8120
        v88 = get_local ptr u64, payment_amount, !8121
        v89 = load v88
        v90 = call quote_collateral_internal_501(asset_id, v89), !8124
        v91 = get_local ptr u64, collateral_amount, !8125
        store v90 to v91, !8125
        v92 = get_local ptr u64, collateral_amount, !8126
        v93 = load v92
        v94 = call ge_193(v93, min_amount), !8129
        v95 = get_local ptr { u64 }, __anon_8, !1845
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !1845
        v98 = const u64 6, !1845
        store v98 to v97, !1845
        v99 = load v95
        v100 = call require_112(v94, v99), !8132
        v101 = get_local ptr u64, collateral_amount, !8133
        v102 = load v101
        v103 = call from_140(v102), !8136
        v104 = call try_from_282(v103), !8139
        v105 = call unwrap_281(v104), !8142
        v106 = get_local ptr { u256 }, reserves_, !8143
        v107 = load v106
        v108 = call le_391(v105, v107), !8146
        v109 = get_local ptr { u64 }, __anon_9, !1845
        v110 = const u64 0
        v111 = get_elem_ptr v109, ptr u64, v110, !1845
        v112 = const u64 3, !1845
        store v112 to v111, !1845
        v113 = load v109
        v114 = call require_112(v108, v113), !8149
        v115 = call msg_sender_347(), !8152
        v116 = call unwrap_346(v115), !8155
        v117 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !8156
        store v116 to v117, !8156
        v118 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !8157
        v119 = load v118
        v120 = get_local ptr u64, collateral_amount, !8158
        v121 = load v120
        v122 = get_local ptr u64, payment_amount, !8159
        v123 = load v122
        v124 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }, __anon_10, !8160
        v125 = const u64 0
        v126 = get_elem_ptr v124, ptr { u64, ( { b256 } | { b256 } ) }, v125
        store v119 to v126, !8160
        v127 = const u64 1
        v128 = get_elem_ptr v124, ptr { u64, ( { b256 } | { b256 } ) }, v127
        store recipient to v128, !8160
        v129 = const u64 2
        v130 = get_elem_ptr v124, ptr { b256 }, v129
        store asset_id to v130, !8160
        v131 = const u64 3
        v132 = get_elem_ptr v124, ptr u64, v131
        store v121 to v132, !8160
        v133 = const u64 4
        v134 = get_elem_ptr v124, ptr u64, v133
        store v123 to v134, !8160
        v135 = load v124
        v136 = call log_503(v135), !8163
        v137 = get_local ptr u64, collateral_amount, !8164
        v138 = load v137
        v139 = call transfer_506(recipient, asset_id, v138), !8167
        v140 = const unit ()
        ret () v140
    }

    fn get_reserves_internal_499() -> { u256 }, !8170 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_2
        local { u256, u256 } __tuple_6
        local { u256, u256 } __tuple_6_
        local u64 balance
        local u256 base_borrow_index
        local u256 base_supply_index
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 total_borrow
        local u256 total_supply

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !8171
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !8171
        store v3 to v2, !8171
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !8171
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !8171
        store v9 to v8, !8171
        v10 = load v0
        v11 = call read_132(v10), !8174
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !8175
        store v11 to v12, !8175
        v13 = call timestamp_141(), !8178
        v14 = call into_139(v13), !8181
        v15 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !8182
        v16 = const u64 6
        v17 = get_elem_ptr v15, ptr u256, v16, !2453
        v18 = load v17
        v19 = call accrued_interest_indices_154(v14, v18), !8185
        v20 = get_local ptr { u256, u256 }, __tuple_6, !8186
        store v19 to v20, !8186
        v21 = get_local ptr { u256, u256 }, __tuple_6, !8186
        v22 = load v21
        v23 = get_local ptr { u256, u256 }, __tuple_6_, !8186
        store v22 to v23, !8186
        v24 = get_local ptr { u256, u256 }, __tuple_6_, !8186
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u256, v25, !8186
        v27 = load v26
        v28 = get_local ptr u256, base_supply_index, !8186
        store v27 to v28, !8186
        v29 = get_local ptr { u256, u256 }, __tuple_6_, !8186
        v30 = const u64 1
        v31 = get_elem_ptr v29, ptr u256, v30, !8186
        v32 = load v31
        v33 = get_local ptr u256, base_borrow_index, !8186
        store v32 to v33, !8186
        v34 = get_local ptr { b256, u64, b256 }, __anon_1, !8187
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr b256, v35
        v37 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8187
        store v37 to v36, !8187
        v38 = const u64 1
        v39 = get_elem_ptr v34, ptr u64, v38
        v40 = const u64 0
        store v40 to v39, !8187
        v41 = const u64 2
        v42 = get_elem_ptr v34, ptr b256, v41
        v43 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8187
        store v43 to v42, !8187
        v44 = load v34
        v45 = call read_164(v44), !8190
        v46 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_2
        store v45 to v46
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr { b256 }, v47, !7354
        v49 = load v48
        v50 = call this_balance_493(v49), !8193
        v51 = get_local ptr u64, balance, !8194
        store v50 to v51, !8194
        v52 = get_local ptr u256, base_supply_index, !8195
        v53 = load v52
        v54 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !8196
        v55 = const u64 4
        v56 = get_elem_ptr v54, ptr u256, v55, !2492
        v57 = load v56
        v58 = call present_value_supply_156(v53, v57), !8199
        v59 = get_local ptr u256, total_supply, !8200
        store v58 to v59, !8200
        v60 = get_local ptr u256, base_borrow_index, !8201
        v61 = load v60
        v62 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !8202
        v63 = const u64 5
        v64 = get_elem_ptr v62, ptr u256, v63, !2524
        v65 = load v64
        v66 = call present_value_borrow_159(v61, v65), !8205
        v67 = get_local ptr u256, total_borrow, !8206
        store v66 to v67, !8206
        v68 = get_local ptr u64, balance, !8207
        v69 = load v68
        v70 = call from_140(v69), !8210
        v71 = call try_from_282(v70), !8213
        v72 = call unwrap_281(v71), !8216
        v73 = get_local ptr u256, total_supply, !8217
        v74 = load v73
        v75 = call try_from_282(v74), !8220
        v76 = call unwrap_281(v75), !8223
        v77 = call subtract_392(v72, v76), !8226
        v78 = get_local ptr u256, total_borrow, !8227
        v79 = load v78
        v80 = call try_from_282(v79), !8230
        v81 = call unwrap_281(v80), !8233
        v82 = call add_376(v77, v81), !8236
        ret { u256 } v82
    }

    fn get_collateral_reserves_internal_500(asset_id !8237: { b256 }) -> { u256 }, !8240 {
        local { b256, u64, b256 } __anon_0

        entry(asset_id: { b256 }):
        v0 = call this_balance_493(asset_id), !8243
        v1 = call from_140(v0), !8246
        v2 = call try_from_282(v1), !8249
        v3 = call unwrap_281(v2), !8252
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !8253
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !8253
        store v7 to v6, !8253
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !8253
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !8253
        store v13 to v12, !8253
        v14 = load v4
        v15 = call get_364(v14, asset_id), !8256
        v16 = call try_read_324(v15), !8259
        v17 = const u64 0, !8260
        v18 = call unwrap_or_292(v16, v17), !8263
        v19 = call from_140(v18), !8266
        v20 = call try_from_282(v19), !8269
        v21 = call unwrap_281(v20), !8272
        v22 = call subtract_392(v3, v21), !8275
        ret { u256 } v22
    }

    fn quote_collateral_internal_501(asset_id !8276: { b256 }, base_amount !8277: u64) -> u64, !8280 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { u64, u64, u64, u64 } asset_price
        local u256 asset_price_
        local u256 asset_price_discounted
        local u256 asset_price_scale
        local { u64, u64, u64, u64 } base_price
        local u256 base_price_
        local u256 base_price_scale
        local u256 base_scale
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local u256 discount_factor
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration
        local u256 quote
        local u256 value

        entry(asset_id: { b256 }, base_amount: u64):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !8281
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !8281
        store v3 to v2, !8281
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !8281
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !8281
        store v9 to v8, !8281
        v10 = load v0
        v11 = call get_301(v10, asset_id), !8284
        v12 = call read_294(v11), !8287
        v13 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8288
        store v12 to v13, !8288
        v14 = get_local ptr { b256, u64, b256 }, __anon_1, !8289
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr b256, v15
        v17 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8289
        store v17 to v16, !8289
        v18 = const u64 1
        v19 = get_elem_ptr v14, ptr u64, v18
        v20 = const u64 0
        store v20 to v19, !8289
        v21 = const u64 2
        v22 = get_elem_ptr v14, ptr b256, v21
        v23 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8289
        store v23 to v22, !8289
        v24 = load v14
        v25 = call read_164(v24), !8292
        v26 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8293
        store v25 to v26, !8293
        v27 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8294
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr b256, v28, !3797
        v30 = load v29
        v31 = get_local ptr { u64 }, __anon_2, !3798
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !3798
        v34 = const u64 2, !3798
        store v34 to v33, !3798
        v35 = load v31
        v36 = call get_price_internal_331(v30, v35), !8297
        v37 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8298
        store v36 to v37, !8298
        v38 = const u64 10, !8299
        v39 = call from_140(v38), !8302
        v40 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8303
        v41 = const u64 1
        v42 = get_elem_ptr v40, ptr u64, v41, !3805
        v43 = load v42
        v44 = call pow_172(v39, v43), !8306
        v45 = get_local ptr u256, asset_price_scale, !8307
        store v44 to v45, !8307
        v46 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8308
        v47 = const u64 2
        v48 = get_elem_ptr v46, ptr u64, v47, !3817
        v49 = load v48
        v50 = call from_140(v49), !8311
        v51 = get_local ptr u256, asset_price_, !8312
        store v50 to v51, !8312
        v52 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8313
        v53 = const u64 2
        v54 = get_elem_ptr v52, ptr b256, v53, !3907
        v55 = load v54
        v56 = get_local ptr { u64 }, __anon_3, !3798
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u64, v57, !3798
        v59 = const u64 1, !3798
        store v59 to v58, !3798
        v60 = load v56
        v61 = call get_price_internal_331(v55, v60), !8316
        v62 = get_local ptr { u64, u64, u64, u64 }, base_price, !8317
        store v61 to v62, !8317
        v63 = const u64 10, !8318
        v64 = call from_140(v63), !8321
        v65 = get_local ptr { u64, u64, u64, u64 }, base_price, !8322
        v66 = const u64 1
        v67 = get_elem_ptr v65, ptr u64, v66, !3805
        v68 = load v67
        v69 = call pow_172(v64, v68), !8325
        v70 = get_local ptr u256, base_price_scale, !8326
        store v69 to v70, !8326
        v71 = get_local ptr { u64, u64, u64, u64 }, base_price, !8327
        v72 = const u64 2
        v73 = get_elem_ptr v71, ptr u64, v72, !3817
        v74 = load v73
        v75 = call from_140(v74), !8330
        v76 = get_local ptr u256, base_price_, !8331
        store v75 to v76, !8331
        v77 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8332
        v78 = const u64 11
        v79 = get_elem_ptr v77, ptr u256, v78, !7405
        v80 = load v79
        v81 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8333
        v82 = const u64 5
        v83 = get_elem_ptr v81, ptr u256, v82, !3842
        v84 = load v83
        v85 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v86 = call subtract_125(v85, v84), !8336
        v87 = call multiply_158(v80, v86), !8339
        v88 = call divide_157(v87, v85), !8342
        v89 = get_local ptr u256, discount_factor, !8343
        store v88 to v89, !8343
        v90 = get_local ptr u256, asset_price_, !8344
        v91 = load v90
        v92 = get_local ptr u256, discount_factor, !8345
        v93 = load v92
        v94 = call subtract_125(v85, v93), !8348
        v95 = call multiply_158(v91, v94), !8351
        v96 = call divide_157(v95, v85), !8354
        v97 = get_local ptr u256, asset_price_discounted, !8355
        store v96 to v97, !8355
        v98 = const u64 10, !8356
        v99 = call from_140(v98), !8359
        v100 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8360
        v101 = const u64 2
        v102 = get_elem_ptr v100, ptr u64, v101, !3827
        v103 = load v102
        v104 = call pow_172(v99, v103), !8363
        v105 = get_local ptr u256, collateral_scale, !8364
        store v104 to v105, !8364
        v106 = const u64 10, !8365
        v107 = call from_140(v106), !8368
        v108 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8369
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u64, v109, !2486
        v111 = load v110
        v112 = call pow_172(v107, v111), !8372
        v113 = get_local ptr u256, base_scale, !8373
        store v112 to v113, !8373
        v114 = get_local ptr u256, base_price_, !8374
        v115 = load v114
        v116 = call into_139(base_amount), !8377
        v117 = call multiply_158(v115, v116), !8380
        v118 = get_local ptr u256, base_scale, !8381
        v119 = load v118
        v120 = call divide_157(v117, v119), !8384
        v121 = get_local ptr u256, value, !8385
        store v120 to v121, !8385
        v122 = get_local ptr u256, value, !8386
        v123 = load v122
        v124 = get_local ptr u256, asset_price_scale, !8387
        v125 = load v124
        v126 = call multiply_158(v123, v125), !8390
        v127 = get_local ptr u256, collateral_scale, !8391
        v128 = load v127
        v129 = call multiply_158(v126, v128), !8394
        v130 = get_local ptr u256, asset_price_discounted, !8395
        v131 = load v130
        v132 = call divide_157(v129, v131), !8398
        v133 = get_local ptr u256, base_price_scale, !8399
        v134 = load v133
        v135 = call divide_157(v132, v134), !8402
        v136 = get_local ptr u256, quote, !8403
        store v135 to v136, !8403
        v137 = get_local ptr u256, quote, !8404
        v138 = load v137
        v139 = call try_from_502(v138), !8407
        v140 = call unwrap_143(v139), !8410
        ret u64 v140
    }

    pub fn try_from_502(u !8412: u256) -> { u64, ( () | u64 ) }, !8415 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, u64, u64, u64 } parts

        entry(u: u256):
        v0 = asm(r1: u) -> { u64, u64, u64, u64 } r1, !8416 {
        }
        v1 = get_local ptr { u64, u64, u64, u64 }, parts, !8417
        store v0 to v1, !8417
        v2 = get_local ptr { u64, u64, u64, u64 }, parts, !8418
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !8419
        v5 = load v4
        v6 = const u64 0, !8420
        v7 = call neq_14(v5, v6), !8423
        cbr v7, block1(v7), block0(), !8424

        block0():
        v8 = get_local ptr { u64, u64, u64, u64 }, parts, !8425
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !8426
        v11 = load v10
        v12 = const u64 0, !8427
        v13 = call neq_14(v11, v12), !8430
        br block1(v13), !8424

        block1(v14: bool):
        cbr v14, block3(v14), block2(), !8431

        block2():
        v15 = get_local ptr { u64, u64, u64, u64 }, parts, !8432
        v16 = const u64 2
        v17 = get_elem_ptr v15, ptr u64, v16, !8433
        v18 = load v17
        v19 = const u64 0, !8434
        v20 = call neq_14(v18, v19), !8437
        br block3(v20), !8431

        block3(v21: bool):
        cbr v21, block4(), block5(), !8431

        block4():
        v22 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !2267
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !2267
        v25 = const u64 0, !2267
        store v25 to v24, !2267
        v26 = load v22
        br block6(v26)

        block5():
        v27 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !2267
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !2267
        v30 = const u64 1, !2267
        store v30 to v29, !2267
        v31 = get_local ptr { u64, u64, u64, u64 }, parts, !8438
        v32 = const u64 3
        v33 = get_elem_ptr v31, ptr u64, v32, !8439
        v34 = load v33
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v27, ptr u64, v35, v36, !2267
        store v34 to v37, !2267
        v38 = load v27
        br block6(v38)

        block6(v39: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v39
    }

    pub fn log_503(value !1912: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }) -> (), !8440 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }):
        v0 = call encode_504(value), !1916
        v1 = const u64 12201150593867749328
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_504(item !1917: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }) -> slice, !8441 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }):
        v0 = call new_100(), !8442
        v1 = call abi_encode_505(item, v0), !8443
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !8444
        ret slice v5
    }

    pub fn abi_encode_505(self !7303: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }, buffer !7304: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8446 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !8447
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !8450
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8451
        store v5 to v6, !8451
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !8452
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !8453
        v13 = load v12
        v14 = call abi_encode_370(v11, v13), !8455
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !8456
        store v14 to v15, !8456
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { b256 }, v18, !8457
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !8458
        v22 = load v21
        v23 = call abi_encode_373(v20, v22), !8461
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !8462
        store v23 to v24, !8462
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u64, v27, !8463
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !8464
        v31 = load v30
        v32 = call abi_encode_99(v29, v31), !8467
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !8468
        store v32 to v33, !8468
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u64, v36, !8469
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !8470
        v40 = load v39
        v41 = call abi_encode_99(v38, v40), !8473
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !8474
        store v41 to v42, !8474
        v43 = get_local ptr { { u64, u64, u64 } }, buffer_____, !8475
        v44 = load v43
        ret { { u64, u64, u64 } } v44
    }

    pub fn transfer_506(to !8477: { u64, ( { b256 } | { b256 } ) }, asset_id !8478: { b256 }, amount !8479: u64) -> (), !8482 {
        local { u64, ( { b256 } | { b256 } ) } __matched_value_1
        local { b256 } addr
        local { b256 } id

        entry(to: { u64, ( { b256 } | { b256 } ) }, asset_id: { b256 }, amount: u64):
        v0 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !8483
        store to to v0, !8483
        v1 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !8484
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !8484
        v4 = load v3
        v5 = const u64 0, !8484
        v6 = call eq_16(v4, v5), !8487
        cbr v6, block0(), block1(), !8485

        block0():
        v7 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !8484
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, addr, !8488
        store v11 to v12, !8488
        v13 = get_local ptr { b256 }, addr, !8489
        v14 = load v13
        v15 = call transfer_to_address_507(v14, asset_id, amount), !8492
        br block5(v15)

        block1():
        v16 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !8484
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !8484
        v19 = load v18
        v20 = const u64 1, !8484
        v21 = call eq_16(v19, v20), !8495
        cbr v21, block2(), block3(), !8493

        block2():
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !8484
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v22, ptr { b256 }, v23, v24
        v26 = load v25
        v27 = get_local ptr { b256 }, id, !8496
        store v26 to v27, !8496
        v28 = get_local ptr { b256 }, id, !8497
        v29 = load v28
        v30 = call force_transfer_to_contract_515(v29, asset_id, amount), !8500
        br block4(v30)

        block3():
        v31 = const u64 14757395258967588866, !8483
        revert v31, !8483

        block4(v32: ()):
        br block5(v32)

        block5(v33: ()):
        v34 = const unit ()
        ret () v34
    }

    fn transfer_to_address_507(to !8501: { b256 }, asset_id !8502: { b256 }, amount !8503: u64) -> (), !8506 {
        local { u64, ( () | u64 ) } __matched_value_2
        local { u64, ( () | { u64 } ) } __matched_value_3
        local mut u64 index
        local u64 number_of_outputs

        entry(to: { b256 }, asset_id: { b256 }, amount: u64):
        v0 = get_local ptr u64, index, !8507
        v1 = const u64 0, !8508
        store v1 to v0, !8507
        v2 = call output_count_508(), !8511
        v3 = call as_u64_350(v2), !8514
        v4 = get_local ptr u64, number_of_outputs, !8515
        store v3 to v4, !8515
        br while()

        while():
        v5 = get_local ptr u64, index, !8516
        v6 = load v5
        v7 = get_local ptr u64, number_of_outputs, !8517
        v8 = load v7
        v9 = call lt_26(v6, v8), !8520
        cbr v9, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v10 = get_local ptr u64, index, !8521
        v11 = load v10
        v12 = call output_type_509(v11), !8524
        v13 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !8525
        store v12 to v13, !8525
        v14 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !8522
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !8522
        v17 = load v16
        v18 = const u64 1, !8522
        v19 = call eq_16(v17, v18), !8528
        cbr v19, block0(), block1(v19), !8526

        block0():
        v20 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !8522
        v21 = const u64 1
        v22 = const u64 1
        v23 = get_elem_ptr v20, ptr { u64 }, v21, v22
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !8529
        v26 = load v25
        v27 = const u64 3, !8529
        v28 = call eq_16(v26, v27), !8530
        br block1(v28), !8526

        block1(v29: bool):
        cbr v29, block2(), block8(), !8526

        block2():
        v30 = get_local ptr u64, index, !8531
        v31 = load v30
        v32 = call output_amount_510(v31), !8534
        v33 = get_local ptr { u64, ( () | u64 ) }, __matched_value_2, !8535
        store v32 to v33, !8535
        v34 = get_local ptr { u64, ( () | u64 ) }, __matched_value_2, !8532
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !8532
        v37 = load v36
        v38 = const u64 1, !8532
        v39 = call eq_16(v37, v38), !8538
        cbr v39, block3(), block4(v39), !8536

        block3():
        v40 = get_local ptr { u64, ( () | u64 ) }, __matched_value_2, !8532
        v41 = const u64 1
        v42 = const u64 1
        v43 = get_elem_ptr v40, ptr u64, v41, v42
        v44 = load v43
        v45 = const u64 0, !8539
        v46 = call eq_16(v44, v45), !8540
        br block4(v46), !8536

        block4(v47: bool):
        cbr v47, block5(), block6(), !8536

        block5():
        v48 = call bits_514(to), !8543
        v49 = get_local ptr u64, index, !8544
        v50 = load v49
        v51 = asm(r1: v48, r2: v50, r3: amount, r4: asset_id) -> (), !8545 {
            tro    r1 r2 r3 r4, !8546
        }
        v52 = const unit (), !8547
        ret () v52, !8547

        block6():
        v53 = const unit ()
        br block7(v53)

        block7(v54: ()):
        br block9(v54)

        block8():
        v55 = const unit ()
        br block9(v55)

        block9(v56: ()):
        v57 = get_local ptr u64, index, !8548
        v58 = load v57
        v59 = const u64 1, !8549
        v60 = call add_45(v58, v59), !8552
        v61 = get_local ptr u64, index, !8550
        store v60 to v61, !8550
        br while()

        end_while():
        v62 = const u64 18446744073709486081, !8553
        v63 = call revert_102(v62), !8556
        v64 = const unit ()
        ret () v64
    }

    pub fn output_count_508() -> u64, !8560 {
        local { u64 } __matched_value_3

        entry():
        v0 = call tx_type_352(), !8563
        v1 = get_local ptr { u64 }, __matched_value_3, !8564
        store v0 to v1, !8564
        v2 = get_local ptr { u64 }, __matched_value_3, !8561
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !8561
        v5 = load v4
        v6 = const u64 0, !8561
        v7 = call eq_16(v5, v6), !8567
        cbr v7, block0(), block1(), !8565

        block0():
        v8 = const u64 0, !8568
        v9 = gtf v8, 6, !8569
        v10 = bitcast v9 to u64, !8569
        br block14(v10)

        block1():
        v11 = get_local ptr { u64 }, __matched_value_3, !8561
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !8561
        v14 = load v13
        v15 = const u64 1, !8561
        v16 = call eq_16(v14, v15), !8572
        cbr v16, block2(), block3(), !8570

        block2():
        v17 = const u64 0, !8573
        v18 = gtf v17, 260, !8574
        v19 = bitcast v18 to u64, !8574
        br block13(v19)

        block3():
        v20 = get_local ptr { u64 }, __matched_value_3, !8561
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !8561
        v23 = load v22
        v24 = const u64 3, !8561
        v25 = call eq_16(v23, v24), !8577
        cbr v25, block4(), block5(), !8575

        block4():
        v26 = const u64 0, !8578
        v27 = gtf v26, 6, !8579
        v28 = bitcast v27 to u64, !8579
        br block12(v28)

        block5():
        v29 = get_local ptr { u64 }, __matched_value_3, !8561
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30, !8561
        v32 = load v31
        v33 = const u64 4, !8561
        v34 = call eq_16(v32, v33), !8582
        cbr v34, block6(), block7(), !8580

        block6():
        v35 = const u64 0, !8583
        v36 = gtf v35, 6, !8584
        v37 = bitcast v36 to u64, !8584
        br block11(v37)

        block7():
        v38 = get_local ptr { u64 }, __matched_value_3, !8561
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !8561
        v41 = load v40
        v42 = const u64 5, !8561
        v43 = call eq_16(v41, v42), !8587
        cbr v43, block8(), block9(), !8585

        block8():
        v44 = const u64 0, !8588
        v45 = gtf v44, 6, !8589
        v46 = bitcast v45 to u64, !8589
        br block10(v46)

        block9():
        v47 = const u64 0, !8590
        v48 = call revert_102(v47), !8593
        br block10(v48)

        block10(v49: u64):
        br block11(v49)

        block11(v50: u64):
        br block12(v50)

        block12(v51: u64):
        br block13(v51)

        block13(v52: u64):
        br block14(v52)

        block14(v53: u64):
        ret u64 v53
    }

    pub fn output_type_509(index !8594: u64) -> { u64, ( () | { u64 } ) }, !8597 {
        local { u64, ( () | { u64 } ) } __anon_0
        local { u64, ( () | { u64 } ) } __anon_1
        local { u64 } __anon_10
        local { u64, ( () | { u64 } ) } __anon_11
        local { u64 } __anon_2
        local { u64, ( () | { u64 } ) } __anon_3
        local { u64 } __anon_4
        local { u64, ( () | { u64 } ) } __anon_5
        local { u64 } __anon_6
        local { u64, ( () | { u64 } ) } __anon_7
        local { u64 } __anon_8
        local { u64, ( () | { u64 } ) } __anon_9
        local u8 __matched_value_1

        entry(index: u64):
        v0 = call output_count_508(), !8600
        v1 = call as_u64_350(v0), !8603
        v2 = call ge_193(index, v1), !8606
        cbr v2, block0(), block1(), !8604

        block0():
        v3 = get_local ptr { u64, ( () | { u64 } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { u64 } ) } v7, !8607

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = gtf index, 768, !8608
        v11 = bitcast v10 to u8, !8608
        v12 = get_local ptr u8, __matched_value_1, !8609
        store v11 to v12, !8609
        v13 = get_local ptr u8, __matched_value_1, !8608
        v14 = load v13
        v15 = const u8 0, !8610
        v16 = call eq_353(v14, v15), !8613
        cbr v16, block3(), block4(), !8611

        block3():
        v17 = get_local ptr { u64, ( () | { u64 } ) }, __anon_1, !2267
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2267
        v20 = const u64 1, !2267
        store v20 to v19, !2267
        v21 = get_local ptr { u64 }, __anon_2, !8614
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !8614
        v24 = const u64 0, !8614
        store v24 to v23, !8614
        v25 = load v21
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v17, ptr { u64 }, v26, v27, !2267
        store v25 to v28, !2267
        v29 = load v17
        br block17(v29)

        block4():
        v30 = get_local ptr u8, __matched_value_1, !8608
        v31 = load v30
        v32 = const u8 1, !8615
        v33 = call eq_353(v31, v32), !8618
        cbr v33, block5(), block6(), !8616

        block5():
        v34 = get_local ptr { u64, ( () | { u64 } ) }, __anon_3, !2267
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !2267
        v37 = const u64 1, !2267
        store v37 to v36, !2267
        v38 = get_local ptr { u64 }, __anon_4, !8614
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !8614
        v41 = const u64 1, !8614
        store v41 to v40, !8614
        v42 = load v38
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v34, ptr { u64 }, v43, v44, !2267
        store v42 to v45, !2267
        v46 = load v34
        br block16(v46)

        block6():
        v47 = get_local ptr u8, __matched_value_1, !8608
        v48 = load v47
        v49 = const u8 2, !8619
        v50 = call eq_353(v48, v49), !8622
        cbr v50, block7(), block8(), !8620

        block7():
        v51 = get_local ptr { u64, ( () | { u64 } ) }, __anon_5, !2267
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !2267
        v54 = const u64 1, !2267
        store v54 to v53, !2267
        v55 = get_local ptr { u64 }, __anon_6, !8614
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !8614
        v58 = const u64 2, !8614
        store v58 to v57, !8614
        v59 = load v55
        v60 = const u64 1
        v61 = const u64 1
        v62 = get_elem_ptr v51, ptr { u64 }, v60, v61, !2267
        store v59 to v62, !2267
        v63 = load v51
        br block15(v63)

        block8():
        v64 = get_local ptr u8, __matched_value_1, !8608
        v65 = load v64
        v66 = const u8 3, !8623
        v67 = call eq_353(v65, v66), !8626
        cbr v67, block9(), block10(), !8624

        block9():
        v68 = get_local ptr { u64, ( () | { u64 } ) }, __anon_7, !2267
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !2267
        v71 = const u64 1, !2267
        store v71 to v70, !2267
        v72 = get_local ptr { u64 }, __anon_8, !8614
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !8614
        v75 = const u64 3, !8614
        store v75 to v74, !8614
        v76 = load v72
        v77 = const u64 1
        v78 = const u64 1
        v79 = get_elem_ptr v68, ptr { u64 }, v77, v78, !2267
        store v76 to v79, !2267
        v80 = load v68
        br block14(v80)

        block10():
        v81 = get_local ptr u8, __matched_value_1, !8608
        v82 = load v81
        v83 = const u8 4, !8627
        v84 = call eq_353(v82, v83), !8630
        cbr v84, block11(), block12(), !8628

        block11():
        v85 = get_local ptr { u64, ( () | { u64 } ) }, __anon_9, !2267
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !2267
        v88 = const u64 1, !2267
        store v88 to v87, !2267
        v89 = get_local ptr { u64 }, __anon_10, !8614
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr u64, v90, !8614
        v92 = const u64 4, !8614
        store v92 to v91, !8614
        v93 = load v89
        v94 = const u64 1
        v95 = const u64 1
        v96 = get_elem_ptr v85, ptr { u64 }, v94, v95, !2267
        store v93 to v96, !2267
        v97 = load v85
        br block13(v97)

        block12():
        v98 = get_local ptr { u64, ( () | { u64 } ) }, __anon_11, !2267
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr u64, v99, !2267
        v101 = const u64 0, !2267
        store v101 to v100, !2267
        v102 = load v98
        br block13(v102)

        block13(v103: { u64, ( () | { u64 } ) }):
        br block14(v103)

        block14(v104: { u64, ( () | { u64 } ) }):
        br block15(v104)

        block15(v105: { u64, ( () | { u64 } ) }):
        br block16(v105)

        block16(v106: { u64, ( () | { u64 } ) }):
        br block17(v106)

        block17(v107: { u64, ( () | { u64 } ) }):
        ret { u64, ( () | { u64 } ) } v107
    }

    pub fn output_amount_510(index !8631: u64) -> { u64, ( () | u64 ) }, !8634 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, ( () | u64 ) } __anon_2
        local { u64, ( () | u64 ) } __anon_3
        local { u64, ( () | u64 ) } __anon_4
        local { u64, ( () | u64 ) } __anon_5
        local { u64, ( () | { u64 } ) } __matched_value_4
        local u64 ptr

        entry(index: u64):
        v0 = call output_type_509(index), !8637
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8638
        store v0 to v1, !8638
        v2 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !8635
        v5 = load v4
        v6 = const u64 1, !8635
        v7 = call eq_16(v5, v6), !8641
        cbr v7, block0(), block1(v7), !8639

        block0():
        v8 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64 }, v9, v10
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !8642
        v14 = load v13
        v15 = const u64 0, !8642
        v16 = call eq_16(v14, v15), !8643
        br block1(v16), !8639

        block1(v17: bool):
        cbr v17, block2(), block3(), !8639

        block2():
        v18 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !2267
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !2267
        v21 = const u64 1, !2267
        store v21 to v20, !2267
        v22 = gtf index, 770, !8644
        v23 = bitcast v22 to u64, !8644
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v18, ptr u64, v24, v25, !2267
        store v23 to v26, !2267
        v27 = load v18
        br block27(v27)

        block3():
        v28 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !8635
        v31 = load v30
        v32 = const u64 1, !8635
        v33 = call eq_16(v31, v32), !8647
        cbr v33, block4(), block5(v33), !8645

        block4():
        v34 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v34, ptr { u64 }, v35, v36
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr u64, v38, !8648
        v40 = load v39
        v41 = const u64 1, !8648
        v42 = call eq_16(v40, v41), !8649
        br block5(v42), !8645

        block5(v43: bool):
        cbr v43, block6(), block7(), !8645

        block6():
        v44 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !2267
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45, !2267
        v47 = const u64 0, !2267
        store v47 to v46, !2267
        v48 = load v44
        br block26(v48)

        block7():
        v49 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !8635
        v52 = load v51
        v53 = const u64 1, !8635
        v54 = call eq_16(v52, v53), !8652
        cbr v54, block8(), block9(v54), !8650

        block8():
        v55 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v56 = const u64 1
        v57 = const u64 1
        v58 = get_elem_ptr v55, ptr { u64 }, v56, v57
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr u64, v59, !8653
        v61 = load v60
        v62 = const u64 2, !8653
        v63 = call eq_16(v61, v62), !8654
        br block9(v63), !8650

        block9(v64: bool):
        cbr v64, block10(), block11(), !8650

        block10():
        v65 = get_local ptr { u64, ( () | u64 ) }, __anon_2, !2267
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !2267
        v68 = const u64 1, !2267
        store v68 to v67, !2267
        v69 = const u64 1
        v70 = const u64 1
        v71 = get_elem_ptr v65, ptr u64, v69, v70, !2267
        v72 = const u64 0, !8655
        store v72 to v71, !2267
        v73 = load v65
        br block25(v73)

        block11():
        v74 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr u64, v75, !8635
        v77 = load v76
        v78 = const u64 1, !8635
        v79 = call eq_16(v77, v78), !8658
        cbr v79, block12(), block13(v79), !8656

        block12():
        v80 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v81 = const u64 1
        v82 = const u64 1
        v83 = get_elem_ptr v80, ptr { u64 }, v81, v82
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !8659
        v86 = load v85
        v87 = const u64 3, !8659
        v88 = call eq_16(v86, v87), !8660
        br block13(v88), !8656

        block13(v89: bool):
        cbr v89, block14(), block15(), !8656

        block14():
        v90 = call output_pointer_512(index), !8663
        v91 = call unwrap_511(v90), !8666
        v92 = get_local ptr u64, ptr, !8667
        store v91 to v92, !8667
        v93 = get_local ptr { u64, ( () | u64 ) }, __anon_3, !2267
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !2267
        v96 = const u64 1, !2267
        store v96 to v95, !2267
        v97 = get_local ptr u64, ptr, !8668
        v98 = load v97
        v99 = asm(r1, r2, r3: v98) -> u64 r1, !8669 {
            addi   r2 r3 i40, !8670
            lw     r1 r2 i0, !8671
        }
        v100 = const u64 1
        v101 = const u64 1
        v102 = get_elem_ptr v93, ptr u64, v100, v101, !2267
        store v99 to v102, !2267
        v103 = load v93
        br block24(v103)

        block15():
        v104 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105, !8635
        v107 = load v106
        v108 = const u64 1, !8635
        v109 = call eq_16(v107, v108), !8674
        cbr v109, block16(), block17(v109), !8672

        block16():
        v110 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v111 = const u64 1
        v112 = const u64 1
        v113 = get_elem_ptr v110, ptr { u64 }, v111, v112
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u64, v114, !8675
        v116 = load v115
        v117 = const u64 4, !8675
        v118 = call eq_16(v116, v117), !8676
        br block17(v118), !8672

        block17(v119: bool):
        cbr v119, block18(), block19(), !8672

        block18():
        v120 = get_local ptr { u64, ( () | u64 ) }, __anon_4, !2267
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr u64, v121, !2267
        v123 = const u64 0, !2267
        store v123 to v122, !2267
        v124 = load v120
        br block23(v124)

        block19():
        v125 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !8635
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126, !8635
        v128 = load v127
        v129 = const u64 0, !8635
        v130 = call eq_16(v128, v129), !8679
        cbr v130, block20(), block21(), !8677

        block20():
        v131 = get_local ptr { u64, ( () | u64 ) }, __anon_5, !2267
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !2267
        v134 = const u64 0, !2267
        store v134 to v133, !2267
        v135 = load v131
        br block22(v135)

        block21():
        v136 = const u64 14757395258967588866, !8638
        revert v136, !8638

        block22(v137: { u64, ( () | u64 ) }):
        br block23(v137)

        block23(v138: { u64, ( () | u64 ) }):
        br block24(v138)

        block24(v139: { u64, ( () | u64 ) }):
        br block25(v139)

        block25(v140: { u64, ( () | u64 ) }):
        br block26(v140)

        block26(v141: { u64, ( () | u64 ) }):
        br block27(v141)

        block27(v142: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v142
    }

    pub fn unwrap_511(self !2242: { u64, ( () | u64 ) }) -> u64, !8680 {
        local { u64, ( () | u64 ) } __matched_value_4
        local u64 inner_value

        entry(self: { u64, ( () | u64 ) }):
        v0 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !8681
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u64, v8, v9
        v11 = load v10
        v12 = get_local ptr u64, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr u64, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !8682
        br block2(v16)

        block2(v17: u64):
        ret u64 v17
    }

    fn output_pointer_512(index !8683: u64) -> { u64, ( () | u64 ) }, !8686 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, ( () | u64 ) } __anon_2
        local { u64, ( () | u64 ) } __anon_3
        local { u64, ( () | u64 ) } __anon_4
        local { u64, ( () | u64 ) } __anon_5
        local { u64, ( () | u64 ) } __anon_6
        local { u64 } __matched_value_2

        entry(index: u64):
        v0 = call output_type_509(index), !8689
        v1 = call is_none_513(v0), !8692
        cbr v1, block0(), block1(), !8690

        block0():
        v2 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !2267
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2267
        v5 = const u64 0, !2267
        store v5 to v4, !2267
        v6 = load v2
        ret { u64, ( () | u64 ) } v6, !8693

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = call tx_type_352(), !8696
        v10 = get_local ptr { u64 }, __matched_value_2, !8697
        store v9 to v10, !8697
        v11 = get_local ptr { u64 }, __matched_value_2, !8694
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !8694
        v14 = load v13
        v15 = const u64 0, !8694
        v16 = call eq_16(v14, v15), !8700
        cbr v16, block3(), block4(), !8698

        block3():
        v17 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !2267
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2267
        v20 = const u64 1, !2267
        store v20 to v19, !2267
        v21 = gtf index, 12, !8701
        v22 = bitcast v21 to u64, !8701
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v17, ptr u64, v23, v24, !2267
        store v22 to v25, !2267
        v26 = load v17
        br block17(v26)

        block4():
        v27 = get_local ptr { u64 }, __matched_value_2, !8694
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !8694
        v30 = load v29
        v31 = const u64 1, !8694
        v32 = call eq_16(v30, v31), !8704
        cbr v32, block5(), block6(), !8702

        block5():
        v33 = get_local ptr { u64, ( () | u64 ) }, __anon_2, !2267
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !2267
        v36 = const u64 1, !2267
        store v36 to v35, !2267
        v37 = gtf index, 265, !8705
        v38 = bitcast v37 to u64, !8705
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v33, ptr u64, v39, v40, !2267
        store v38 to v41, !2267
        v42 = load v33
        br block16(v42)

        block6():
        v43 = get_local ptr { u64 }, __matched_value_2, !8694
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr u64, v44, !8694
        v46 = load v45
        v47 = const u64 3, !8694
        v48 = call eq_16(v46, v47), !8708
        cbr v48, block7(), block8(), !8706

        block7():
        v49 = get_local ptr { u64, ( () | u64 ) }, __anon_3, !2267
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !2267
        v52 = const u64 1, !2267
        store v52 to v51, !2267
        v53 = gtf index, 12, !8709
        v54 = bitcast v53 to u64, !8709
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v49, ptr u64, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v49
        br block15(v58)

        block8():
        v59 = get_local ptr { u64 }, __matched_value_2, !8694
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !8694
        v62 = load v61
        v63 = const u64 4, !8694
        v64 = call eq_16(v62, v63), !8712
        cbr v64, block9(), block10(), !8710

        block9():
        v65 = get_local ptr { u64, ( () | u64 ) }, __anon_4, !2267
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !2267
        v68 = const u64 1, !2267
        store v68 to v67, !2267
        v69 = gtf index, 12, !8713
        v70 = bitcast v69 to u64, !8713
        v71 = const u64 1
        v72 = const u64 1
        v73 = get_elem_ptr v65, ptr u64, v71, v72, !2267
        store v70 to v73, !2267
        v74 = load v65
        br block14(v74)

        block10():
        v75 = get_local ptr { u64 }, __matched_value_2, !8694
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr u64, v76, !8694
        v78 = load v77
        v79 = const u64 5, !8694
        v80 = call eq_16(v78, v79), !8716
        cbr v80, block11(), block12(), !8714

        block11():
        v81 = get_local ptr { u64, ( () | u64 ) }, __anon_5, !2267
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr u64, v82, !2267
        v84 = const u64 1, !2267
        store v84 to v83, !2267
        v85 = gtf index, 12, !8717
        v86 = bitcast v85 to u64, !8717
        v87 = const u64 1
        v88 = const u64 1
        v89 = get_elem_ptr v81, ptr u64, v87, v88, !2267
        store v86 to v89, !2267
        v90 = load v81
        br block13(v90)

        block12():
        v91 = get_local ptr { u64, ( () | u64 ) }, __anon_6, !2267
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !2267
        v94 = const u64 0, !2267
        store v94 to v93, !2267
        v95 = load v91
        br block13(v95)

        block13(v96: { u64, ( () | u64 ) }):
        br block14(v96)

        block14(v97: { u64, ( () | u64 ) }):
        br block15(v97)

        block15(v98: { u64, ( () | u64 ) }):
        br block16(v98)

        block16(v99: { u64, ( () | u64 ) }):
        br block17(v99)

        block17(v100: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v100
    }

    pub fn is_none_513(self !5997: { u64, ( () | { u64 } ) }) -> bool, !8718 {
        local { u64, ( () | { u64 } ) } __matched_value_3

        entry(self: { u64, ( () | { u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !6001
        store self to v0, !6001
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !6002
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6002
        v4 = load v3
        v5 = const u64 1, !6002
        v6 = call eq_16(v4, v5), !8719
        cbr v6, block0(), block1(), !6003

        block0():
        v7 = const bool false, !6006
        br block2(v7)

        block1():
        v8 = const bool true, !6007
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn bits_514(self !8720: { b256 }) -> b256, !8723 {
        entry(self: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4480
        v4 = load v3
        ret b256 v4
    }

    fn force_transfer_to_contract_515(to !8724: { b256 }, asset_id !8725: { b256 }, amount !8726: u64) -> (), !8729 {
        entry(to: { b256 }, asset_id: { b256 }, amount: u64):
        v0 = call bits_228(to), !8732
        v1 = asm(r1: amount, r2: asset_id, r3: v0) -> (), !8733 {
            tr     r3 r1 r2, !8734
        }
        v2 = const unit ()
        ret () v2
    }

    pub fn decode_516(self !1336: ptr { u64 }) -> { { b256 }, u64 }, !8735 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_517(self), !8736
        ret { { b256 }, u64 } v0
    }

    pub fn abi_decode_517(buffer !1343: ptr { u64 }) -> { { b256 }, u64 }, !8737 {
        local { { b256 }, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_407(buffer), !8738
        v1 = call abi_decode_2(buffer), !8739
        v2 = get_local ptr { { b256 }, u64 }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { b256 }, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { { b256 }, u64 } v7
    }

    pub fn collateral_value_to_sell_518(asset_id !8740: { b256 }, collateral_amount !8741: u64) -> u64, !8744 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local u256 asset_discounted
        local { u64, u64, u64, u64 } asset_price
        local u256 asset_price_
        local u256 asset_price_discounted
        local u256 asset_price_scale
        local u256 base_asset_scale
        local { u64, u64, u64, u64 } base_price
        local u256 base_price_
        local u256 base_price_scale
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local u256 collateral_value
        local u256 discount_factor
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration

        entry(asset_id: { b256 }, collateral_amount: u64):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !8745
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !8745
        store v3 to v2, !8745
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !8745
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !8745
        store v9 to v8, !8745
        v10 = load v0
        v11 = call get_301(v10, asset_id), !8748
        v12 = call read_294(v11), !8751
        v13 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8752
        store v12 to v13, !8752
        v14 = get_local ptr { b256, u64, b256 }, __anon_1, !8753
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr b256, v15
        v17 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8753
        store v17 to v16, !8753
        v18 = const u64 1
        v19 = get_elem_ptr v14, ptr u64, v18
        v20 = const u64 0
        store v20 to v19, !8753
        v21 = const u64 2
        v22 = get_elem_ptr v14, ptr b256, v21
        v23 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8753
        store v23 to v22, !8753
        v24 = load v14
        v25 = call read_164(v24), !8756
        v26 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8757
        store v25 to v26, !8757
        v27 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8758
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr b256, v28, !3797
        v30 = load v29
        v31 = get_local ptr { u64 }, __anon_2, !3798
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !3798
        v34 = const u64 2, !3798
        store v34 to v33, !3798
        v35 = load v31
        v36 = call get_price_internal_331(v30, v35), !8761
        v37 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8762
        store v36 to v37, !8762
        v38 = const u64 10, !8763
        v39 = call from_140(v38), !8766
        v40 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8767
        v41 = const u64 1
        v42 = get_elem_ptr v40, ptr u64, v41, !3805
        v43 = load v42
        v44 = call pow_172(v39, v43), !8770
        v45 = get_local ptr u256, asset_price_scale, !8771
        store v44 to v45, !8771
        v46 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8772
        v47 = const u64 2
        v48 = get_elem_ptr v46, ptr u64, v47, !3817
        v49 = load v48
        v50 = call from_140(v49), !8775
        v51 = get_local ptr u256, asset_price_, !8776
        store v50 to v51, !8776
        v52 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8777
        v53 = const u64 11
        v54 = get_elem_ptr v52, ptr u256, v53, !7405
        v55 = load v54
        v56 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8778
        v57 = const u64 5
        v58 = get_elem_ptr v56, ptr u256, v57, !3842
        v59 = load v58
        v60 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v61 = call subtract_125(v60, v59), !8781
        v62 = call multiply_158(v55, v61), !8784
        v63 = call divide_157(v62, v60), !8787
        v64 = get_local ptr u256, discount_factor, !8788
        store v63 to v64, !8788
        v65 = get_local ptr u256, asset_price_, !8789
        v66 = load v65
        v67 = get_local ptr u256, discount_factor, !8790
        v68 = load v67
        v69 = call subtract_125(v60, v68), !8793
        v70 = call multiply_158(v66, v69), !8796
        v71 = call divide_157(v70, v60), !8799
        v72 = get_local ptr u256, asset_price_discounted, !8800
        store v71 to v72, !8800
        v73 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8801
        v74 = const u64 2
        v75 = get_elem_ptr v73, ptr b256, v74, !3907
        v76 = load v75
        v77 = get_local ptr { u64 }, __anon_3, !3798
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !3798
        v80 = const u64 1, !3798
        store v80 to v79, !3798
        v81 = load v77
        v82 = call get_price_internal_331(v76, v81), !8804
        v83 = get_local ptr { u64, u64, u64, u64 }, base_price, !8805
        store v82 to v83, !8805
        v84 = const u64 10, !8806
        v85 = call from_140(v84), !8809
        v86 = get_local ptr { u64, u64, u64, u64 }, base_price, !8810
        v87 = const u64 1
        v88 = get_elem_ptr v86, ptr u64, v87, !3805
        v89 = load v88
        v90 = call pow_172(v85, v89), !8813
        v91 = get_local ptr u256, base_price_scale, !8814
        store v90 to v91, !8814
        v92 = get_local ptr { u64, u64, u64, u64 }, base_price, !8815
        v93 = const u64 2
        v94 = get_elem_ptr v92, ptr u64, v93, !3817
        v95 = load v94
        v96 = call from_140(v95), !8818
        v97 = get_local ptr u256, base_price_, !8819
        store v96 to v97, !8819
        v98 = const u64 10, !8820
        v99 = call from_140(v98), !8823
        v100 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8824
        v101 = const u64 2
        v102 = get_elem_ptr v100, ptr u64, v101, !3827
        v103 = load v102
        v104 = call pow_172(v99, v103), !8827
        v105 = get_local ptr u256, collateral_scale, !8828
        store v104 to v105, !8828
        v106 = const u64 10, !8829
        v107 = call from_140(v106), !8832
        v108 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8833
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u64, v109, !2486
        v111 = load v110
        v112 = call pow_172(v107, v111), !8836
        v113 = get_local ptr u256, base_asset_scale, !8837
        store v112 to v113, !8837
        v114 = get_local ptr u256, asset_price_discounted, !8838
        v115 = load v114
        v116 = call into_139(collateral_amount), !8841
        v117 = call multiply_158(v115, v116), !8844
        v118 = get_local ptr u256, asset_price_scale, !8845
        v119 = load v118
        v120 = call divide_157(v117, v119), !8848
        v121 = get_local ptr u256, asset_discounted, !8849
        store v120 to v121, !8849
        v122 = get_local ptr u256, asset_discounted, !8850
        v123 = load v122
        v124 = get_local ptr u256, base_asset_scale, !8851
        v125 = load v124
        v126 = call multiply_158(v123, v125), !8854
        v127 = get_local ptr u256, base_price_scale, !8855
        v128 = load v127
        v129 = call multiply_158(v126, v128), !8858
        v130 = get_local ptr u256, base_price_, !8859
        v131 = load v130
        v132 = call divide_157(v129, v131), !8862
        v133 = get_local ptr u256, collateral_scale, !8863
        v134 = load v133
        v135 = call divide_157(v132, v134), !8866
        v136 = get_local ptr u256, collateral_value, !8867
        store v135 to v136, !8867
        v137 = get_local ptr u256, collateral_value, !8868
        v138 = load v137
        v139 = call try_from_502(v138), !8871
        v140 = call unwrap_143(v139), !8874
        ret u64 v140
    }

    pub fn debug_increment_timestamp_519() -> (), !8877 {
        local { u64 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2

        entry():
        v0 = get_config ptr u64, DEBUG_STEP, !8878
        v1 = load v0
        v2 = const u64 0, !8879
        v3 = call gt_40(v1, v2), !8882
        v4 = get_local ptr { u64 }, __anon_0, !1845
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !1845
        v7 = const u64 13, !1845
        store v7 to v6, !1845
        v8 = load v4
        v9 = call require_112(v3, v8), !8885
        v10 = get_local ptr { b256, u64, b256 }, __anon_1, !8886
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr b256, v11
        v13 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8886
        store v13 to v12, !8886
        v14 = const u64 1
        v15 = get_elem_ptr v10, ptr u64, v14
        v16 = const u64 0
        store v16 to v15, !8886
        v17 = const u64 2
        v18 = get_elem_ptr v10, ptr b256, v17
        v19 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8886
        store v19 to v18, !8886
        v20 = load v10
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !8887
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8887
        store v24 to v23, !8887
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !8887
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8887
        store v30 to v29, !8887
        v31 = load v21
        v32 = call read_142(v31), !8890
        v33 = get_config ptr u64, DEBUG_STEP, !8891
        v34 = load v33
        v35 = call add_45(v32, v34), !8894
        v36 = call write_520(v20, v35), !8897
        v37 = const unit ()
        ret () v37
    }

    pub fn write_520(self !3209: { b256, u64, b256 }, value !3210: u64) -> (), !8898 {
        entry(self: { b256, u64, b256 }, value: u64):
        v0 = call slot_146(self), !8899
        v1 = call offset_147(self), !8900
        v2 = call write_363(v0, v1, value), !8901
        v3 = const unit ()
        ret () v3
    }

    pub fn get_all_totals_collateral_521() -> { { u64, u64 }, u64 }, !8904 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64 } __anon_3
        local { b256 } asset_id
        local mut u64 index
        local u64 len
        local mut { { u64, u64 }, u64 } result

        entry():
        v0 = call new_522(), !8907
        v1 = get_local ptr { { u64, u64 }, u64 }, result, !8908
        store v0 to v1, !8908
        v2 = get_local ptr u64, index, !8909
        v3 = const u64 0, !8910
        store v3 to v2, !8909
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !8911
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8911
        store v7 to v6, !8911
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !8911
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8911
        store v13 to v12, !8911
        v14 = load v4
        v15 = call len_291(v14), !8914
        v16 = get_local ptr u64, len, !8915
        store v15 to v16, !8915
        br while()

        while():
        v17 = get_local ptr u64, index, !8916
        v18 = load v17
        v19 = get_local ptr u64, len, !8917
        v20 = load v19
        v21 = call lt_26(v18, v20), !8920
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr { b256, u64, b256 }, __anon_1, !8921
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr b256, v23
        v25 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8921
        store v25 to v24, !8921
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26
        v28 = const u64 0
        store v28 to v27, !8921
        v29 = const u64 2
        v30 = get_elem_ptr v22, ptr b256, v29
        v31 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8921
        store v31 to v30, !8921
        v32 = load v22
        v33 = get_local ptr u64, index, !8922
        v34 = load v33
        v35 = call get_315(v32, v34), !8925
        v36 = call unwrap_314(v35), !8928
        v37 = call read_307(v36), !8931
        v38 = get_local ptr { b256 }, asset_id, !8932
        store v37 to v38, !8932
        v39 = get_local ptr { { u64, u64 }, u64 }, result, !8933
        v40 = get_local ptr { b256 }, asset_id, !8934
        v41 = load v40
        v42 = get_local ptr { b256, u64, b256 }, __anon_2, !8935
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr b256, v43
        v45 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !8935
        store v45 to v44, !8935
        v46 = const u64 1
        v47 = get_elem_ptr v42, ptr u64, v46
        v48 = const u64 0
        store v48 to v47, !8935
        v49 = const u64 2
        v50 = get_elem_ptr v42, ptr b256, v49
        v51 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !8935
        store v51 to v50, !8935
        v52 = load v42
        v53 = get_local ptr { b256 }, asset_id, !8936
        v54 = load v53
        v55 = call get_364(v52, v54), !8939
        v56 = call try_read_324(v55), !8942
        v57 = const u64 0, !8943
        v58 = call unwrap_or_292(v56, v57), !8946
        v59 = get_local ptr { { b256 }, u64 }, __anon_3, !8947
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr { b256 }, v60, !8947
        store v41 to v61, !8947
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !8947
        store v58 to v63, !8947
        v64 = load v59
        v65 = call push_525(v39, v64), !8950
        v66 = get_local ptr u64, index, !8951
        v67 = load v66
        v68 = const u64 1, !8952
        v69 = call add_45(v67, v68), !8955
        v70 = get_local ptr u64, index, !8953
        store v69 to v70, !8953
        br while()

        end_while():
        v71 = get_local ptr { { u64, u64 }, u64 }, result, !8956
        v72 = load v71
        ret { { u64, u64 }, u64 } v72
    }

    pub fn new_522() -> { { u64, u64 }, u64 }, !8959 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_523(), !8962
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !8963
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !8963
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !8964
        store v6 to v5, !8963
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_523() -> { u64, u64 }, !8967 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !8968
        v1 = call alloc_524(v0), !8971
        v2 = get_local ptr { u64, u64 }, __anon_0, !8972
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !8972
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !8973
        store v7 to v6, !8972
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_524(count !1408: u64) -> u64, !8974 {
        entry(count: u64):
        v0 = const u64 40
        v1 = call multiply_25(v0, count), !8975
        v2 = asm(size: v1, ptr) -> u64 ptr, !1415 {
            aloc   size, !1416
            move   ptr hp, !1417
        }
        ret u64 v2
    }

    pub fn push_525(self !1496: ptr { { u64, u64 }, u64 }, value !1497: { { b256 }, u64 }) -> (), !8976 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: { { b256 }, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1501
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !1502
        v5 = load v4
        v6 = call capacity_526(v5), !8977
        v7 = call eq_16(v2, v6), !8978
        cbr v7, block0(), block1(), !1506

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !1502
        v10 = call grow_527(v9), !8979
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !1502
        v16 = load v15
        v17 = call ptr_531(v16), !8980
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !1501
        v20 = load v19
        v21 = call add_530(v17, v20), !8981
        v22 = get_local ptr u64, end, !1518
        store v21 to v22, !1518
        v23 = get_local ptr u64, end, !1519
        v24 = load v23
        v25 = call write_532(v24, value), !8982
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1501
        v28 = load v27
        v29 = const u64 1, !1523
        v30 = call add_45(v28, v29), !8983
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !1524
        store v30 to v32, !1524
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_526(self !1527: { u64, u64 }) -> u64, !8984 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1531
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_527(self !1532: ptr { u64, u64 }) -> (), !8985 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1531
        v2 = load v1
        v3 = const u64 0, !1536
        v4 = call eq_16(v2, v3), !8986
        cbr v4, block0(), block1(), !1537

        block0():
        v5 = const u64 1, !1540
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !1531
        v8 = load v7
        v9 = const u64 2, !1541
        v10 = call multiply_25(v9, v8), !8987
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !1545
        store v11 to v12, !1545
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !1546
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !1531
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !1547
        v20 = load v19
        v21 = call realloc_528(v15, v18, v20), !8988
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !1551
        store v21 to v23, !1551
        v24 = get_local ptr u64, new_cap, !1552
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1553
        store v25 to v27, !1553
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_528(ptr !1554: u64, count !1555: u64, new_count !1556: u64) -> u64, !8989 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !8990
        cbr v0, block0(), block4(), !1560

        block0():
        v1 = call alloc_524(new_count), !8991
        v2 = get_local ptr u64, new_ptr, !1566
        store v1 to v2, !1566
        v3 = const u64 0, !1567
        v4 = call gt_40(count, v3), !8992
        cbr v4, block1(), block2(), !1568

        block1():
        v5 = get_local ptr u64, new_ptr, !1571
        v6 = load v5
        v7 = call copy_to_529(ptr, v6, count), !8993
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !1575
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_529(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !8994 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 40
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_530(self !1174: u64, count !1175: u64) -> u64, !8995 {
        entry(self: u64, count: u64):
        v0 = const u64 40
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_531(self !1592: { u64, u64 }) -> u64, !8996 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn write_532(self !1596: u64, val !1597: { { b256 }, u64 }) -> (), !8997 {
        entry(self: u64, val: { { b256 }, u64 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 40
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 40
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn encode_533(item !1917: { { u64, u64 }, u64 }) -> slice, !8998 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, u64 }, u64 }):
        v0 = call new_100(), !8999
        v1 = call abi_encode_534(item, v0), !9000
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9001
        ret slice v5
    }

    pub fn abi_encode_534(self !3502: { { u64, u64 }, u64 }, buffer !3503: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9002 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local { { b256 }, u64 } item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_535(self), !9003
        v1 = get_local ptr u64, len, !3510
        store v0 to v1, !3510
        v2 = get_local ptr u64, len, !3511
        v3 = load v2
        v4 = call abi_encode_99(v3, buffer), !9004
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !3515
        store v4 to v5, !3515
        v6 = get_local ptr u64, i, !3516
        v7 = const u64 0, !3517
        store v7 to v6, !3516
        br while()

        while():
        v8 = get_local ptr u64, i, !3518
        v9 = load v8
        v10 = get_local ptr u64, len, !3519
        v11 = load v10
        v12 = call lt_26(v9, v11), !9005
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !3523
        v14 = load v13
        v15 = call get_537(self, v14), !9006
        v16 = call unwrap_536(v15), !9007
        v17 = get_local ptr { { b256 }, u64 }, item, !3530
        store v16 to v17, !3530
        v18 = get_local ptr { { b256 }, u64 }, item, !3531
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !3532
        v21 = load v20
        v22 = call abi_encode_539(v19, v21), !9008
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        store v22 to v23, !3536
        v24 = get_local ptr u64, i, !3537
        v25 = load v24
        v26 = const u64 1, !3538
        v27 = call add_45(v25, v26), !9009
        v28 = get_local ptr u64, i, !3539
        store v27 to v28, !3539
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !3542
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub fn len_535(self !3543: { { u64, u64 }, u64 }) -> u64, !9010 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_536(self !2242: { u64, ( () | { { b256 }, u64 } ) }) -> { { b256 }, u64 }, !9011 {
        local { u64, ( () | { { b256 }, u64 } ) } __matched_value_4
        local { { b256 }, u64 } inner_value

        entry(self: { u64, ( () | { { b256 }, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { { b256 }, u64 } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { { b256 }, u64 } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !9012
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { { b256 }, u64 } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { b256 }, u64 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { b256 }, u64 }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { { b256 }, u64 }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !9013
        br block2(v16)

        block2(v17: { { b256 }, u64 }):
        ret { { b256 }, u64 } v17
    }

    pub fn get_537(self !3550: { { u64, u64 }, u64 }, index !3551: u64) -> { u64, ( () | { { b256 }, u64 } ) }, !9014 {
        local { u64, ( () | { { b256 }, u64 } ) } __anon_0
        local { u64, ( () | { { b256 }, u64 } ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        v5 = call le_209(v4, index), !9015
        cbr v5, block0(), block1(), !3555

        block0():
        v6 = get_local ptr { u64, ( () | { { b256 }, u64 } ) }, __anon_0, !2267
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !2267
        v9 = const u64 0, !2267
        store v9 to v8, !2267
        v10 = load v6
        ret { u64, ( () | { { b256 }, u64 } ) } v10, !3558

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !1502
        v17 = load v16
        v18 = call ptr_531(v17), !9016
        v19 = call add_530(v18, index), !9017
        v20 = get_local ptr u64, ptr, !3565
        store v19 to v20, !3565
        v21 = get_local ptr { u64, ( () | { { b256 }, u64 } ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr u64, ptr, !3566
        v26 = load v25
        v27 = call read_538(v26), !9018
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr { { b256 }, u64 }, v28, v29, !2267
        store v27 to v30, !2267
        v31 = load v21
        ret { u64, ( () | { { b256 }, u64 } ) } v31
    }

    pub fn read_538(self !1179: u64) -> { { b256 }, u64 }, !9019 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { { b256 }, u64 } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 40
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { { b256 }, u64 } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { { b256 }, u64 } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { { b256 }, u64 }):
        br block5(v7)

        block5(v8: { { b256 }, u64 }):
        ret { { b256 }, u64 } v8
    }

    pub fn abi_encode_539(self !9020: { { b256 }, u64 }, buffer !9021: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9024 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { b256 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !9025
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !9028
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9029
        store v5 to v6, !9029
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { b256 }, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !9030
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9031
        v13 = load v12
        v14 = call abi_encode_99(v11, v13), !9034
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9035
        store v14 to v15, !9035
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !9036
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn get_all_user_collateral_540(account !9037: { u64, ( { b256 } | { b256 } ) }) -> { { u64, u64 }, u64 }, !9040 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_4
        local { { b256 }, u64 } __anon_5
        local u64 collateral_amount
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local mut u64 index
        local u64 len
        local mut { { u64, u64 }, u64 } result

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call new_522(), !9043
        v1 = get_local ptr { { u64, u64 }, u64 }, result, !9044
        store v0 to v1, !9044
        v2 = get_local ptr u64, index, !9045
        v3 = const u64 0, !9046
        store v3 to v2, !9045
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !9047
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9047
        store v7 to v6, !9047
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !9047
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9047
        store v13 to v12, !9047
        v14 = load v4
        v15 = call len_291(v14), !9050
        v16 = get_local ptr u64, len, !9051
        store v15 to v16, !9051
        br while()

        while():
        v17 = get_local ptr u64, index, !9052
        v18 = load v17
        v19 = get_local ptr u64, len, !9053
        v20 = load v19
        v21 = call lt_26(v18, v20), !9056
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr { b256, u64, b256 }, __anon_1, !9057
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr b256, v23
        v25 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9057
        store v25 to v24, !9057
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26
        v28 = const u64 0
        store v28 to v27, !9057
        v29 = const u64 2
        v30 = get_elem_ptr v22, ptr b256, v29
        v31 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9057
        store v31 to v30, !9057
        v32 = load v22
        v33 = get_local ptr { b256, u64, b256 }, __anon_2, !9058
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9058
        store v36 to v35, !9058
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9058
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9058
        store v42 to v41, !9058
        v43 = load v33
        v44 = get_local ptr u64, index, !9059
        v45 = load v44
        v46 = call get_315(v43, v45), !9062
        v47 = call unwrap_314(v46), !9065
        v48 = call read_307(v47), !9068
        v49 = call get_301(v32, v48), !9071
        v50 = call read_294(v49), !9074
        v51 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9075
        store v50 to v51, !9075
        v52 = get_local ptr { b256, u64, b256 }, __anon_3, !9076
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr b256, v53
        v55 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9076
        store v55 to v54, !9076
        v56 = const u64 1
        v57 = get_elem_ptr v52, ptr u64, v56
        v58 = const u64 0
        store v58 to v57, !9076
        v59 = const u64 2
        v60 = get_elem_ptr v52, ptr b256, v59
        v61 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9076
        store v61 to v60, !9076
        v62 = load v52
        v63 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9077
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr { b256 }, v64, !3743
        v66 = load v65
        v67 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_4, !9078
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u64, ( { b256 } | { b256 } ) }, v68, !9078
        store account to v69, !9078
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr { b256 }, v70, !9078
        store v66 to v71, !9078
        v72 = load v67
        v73 = call get_325(v62, v72), !9081
        v74 = call try_read_324(v73), !9084
        v75 = const u64 0, !9085
        v76 = call unwrap_or_292(v74, v75), !9088
        v77 = get_local ptr u64, collateral_amount, !9089
        store v76 to v77, !9089
        v78 = get_local ptr { { u64, u64 }, u64 }, result, !9090
        v79 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9091
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr { b256 }, v80, !3743
        v82 = load v81
        v83 = get_local ptr u64, collateral_amount, !9092
        v84 = load v83
        v85 = get_local ptr { { b256 }, u64 }, __anon_5, !9093
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { b256 }, v86, !9093
        store v82 to v87, !9093
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr u64, v88, !9093
        store v84 to v89, !9093
        v90 = load v85
        v91 = call push_525(v78, v90), !9096
        v92 = get_local ptr u64, index, !9097
        v93 = load v92
        v94 = const u64 1, !9098
        v95 = call add_45(v93, v94), !9101
        v96 = get_local ptr u64, index, !9099
        store v95 to v96, !9099
        br while()

        end_while():
        v97 = get_local ptr { { u64, u64 }, u64 }, result, !9102
        v98 = load v97
        ret { { u64, u64 }, u64 } v98
    }

    pub fn decode_541(self !1336: ptr { u64 }) -> { u256 }, !9103 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_542(self), !9104
        ret { u256 } v0
    }

    pub fn abi_decode_542(buffer !7446: ptr { u64 }) -> { u256 }, !9105 {
        local { u256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_409(buffer), !9106
        v1 = get_local ptr { u256 }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { u256 } v4
    }

    pub fn get_borrow_rate_543(utilization !9107: u256) -> u256, !9110 {
        entry(utilization: u256):
        v0 = call get_borrow_rate_internal_171(utilization), !9113
        ret u256 v0
    }

    pub fn get_collateral_configurations_544() -> { { u64, u64 }, u64 }, !9116 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local mut u64 index
        local u64 len
        local mut { { u64, u64 }, u64 } result

        entry():
        v0 = call new_545(), !9119
        v1 = get_local ptr { { u64, u64 }, u64 }, result, !9120
        store v0 to v1, !9120
        v2 = get_local ptr u64, index, !9121
        v3 = const u64 0, !9122
        store v3 to v2, !9121
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !9123
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9123
        store v7 to v6, !9123
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !9123
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9123
        store v13 to v12, !9123
        v14 = load v4
        v15 = call len_291(v14), !9126
        v16 = get_local ptr u64, len, !9127
        store v15 to v16, !9127
        br while()

        while():
        v17 = get_local ptr u64, index, !9128
        v18 = load v17
        v19 = get_local ptr u64, len, !9129
        v20 = load v19
        v21 = call lt_26(v18, v20), !9132
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr { b256, u64, b256 }, __anon_1, !9133
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr b256, v23
        v25 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9133
        store v25 to v24, !9133
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26
        v28 = const u64 0
        store v28 to v27, !9133
        v29 = const u64 2
        v30 = get_elem_ptr v22, ptr b256, v29
        v31 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9133
        store v31 to v30, !9133
        v32 = load v22
        v33 = get_local ptr { b256, u64, b256 }, __anon_2, !9134
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9134
        store v36 to v35, !9134
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9134
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9134
        store v42 to v41, !9134
        v43 = load v33
        v44 = get_local ptr u64, index, !9135
        v45 = load v44
        v46 = call get_315(v43, v45), !9138
        v47 = call unwrap_314(v46), !9141
        v48 = call read_307(v47), !9144
        v49 = call get_301(v32, v48), !9147
        v50 = call read_294(v49), !9150
        v51 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9151
        store v50 to v51, !9151
        v52 = get_local ptr { { u64, u64 }, u64 }, result, !9152
        v53 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9153
        v54 = load v53
        v55 = call push_548(v52, v54), !9156
        v56 = get_local ptr u64, index, !9157
        v57 = load v56
        v58 = const u64 1, !9158
        v59 = call add_45(v57, v58), !9161
        v60 = get_local ptr u64, index, !9159
        store v59 to v60, !9159
        br while()

        end_while():
        v61 = get_local ptr { { u64, u64 }, u64 }, result, !9162
        v62 = load v61
        ret { { u64, u64 }, u64 } v62
    }

    pub fn new_545() -> { { u64, u64 }, u64 }, !9163 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_546(), !9164
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !8963
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !8963
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !8964
        store v6 to v5, !8963
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_546() -> { u64, u64 }, !9165 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !8968
        v1 = call alloc_547(v0), !9166
        v2 = get_local ptr { u64, u64 }, __anon_0, !8972
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !8972
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !8973
        store v7 to v6, !8972
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_547(count !1408: u64) -> u64, !9167 {
        entry(count: u64):
        v0 = const u64 184
        v1 = call multiply_25(v0, count), !9168
        v2 = asm(size: v1, ptr) -> u64 ptr, !1415 {
            aloc   size, !1416
            move   ptr hp, !1417
        }
        ret u64 v2
    }

    pub fn push_548(self !1496: ptr { { u64, u64 }, u64 }, value !1497: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !9169 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1501
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !1502
        v5 = load v4
        v6 = call capacity_549(v5), !9170
        v7 = call eq_16(v2, v6), !9171
        cbr v7, block0(), block1(), !1506

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !1502
        v10 = call grow_550(v9), !9172
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !1502
        v16 = load v15
        v17 = call ptr_554(v16), !9173
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !1501
        v20 = load v19
        v21 = call add_553(v17, v20), !9174
        v22 = get_local ptr u64, end, !1518
        store v21 to v22, !1518
        v23 = get_local ptr u64, end, !1519
        v24 = load v23
        v25 = call write_476(v24, value), !9175
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1501
        v28 = load v27
        v29 = const u64 1, !1523
        v30 = call add_45(v28, v29), !9176
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !1524
        store v30 to v32, !1524
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_549(self !1527: { u64, u64 }) -> u64, !9177 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1531
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_550(self !1532: ptr { u64, u64 }) -> (), !9178 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !1531
        v2 = load v1
        v3 = const u64 0, !1536
        v4 = call eq_16(v2, v3), !9179
        cbr v4, block0(), block1(), !1537

        block0():
        v5 = const u64 1, !1540
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !1531
        v8 = load v7
        v9 = const u64 2, !1541
        v10 = call multiply_25(v9, v8), !9180
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !1545
        store v11 to v12, !1545
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !1546
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !1531
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !1547
        v20 = load v19
        v21 = call realloc_551(v15, v18, v20), !9181
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !1551
        store v21 to v23, !1551
        v24 = get_local ptr u64, new_cap, !1552
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !1553
        store v25 to v27, !1553
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_551(ptr !1554: u64, count !1555: u64, new_count !1556: u64) -> u64, !9182 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_40(new_count, count), !9183
        cbr v0, block0(), block4(), !1560

        block0():
        v1 = call alloc_547(new_count), !9184
        v2 = get_local ptr u64, new_ptr, !1566
        store v1 to v2, !1566
        v3 = const u64 0, !1567
        v4 = call gt_40(count, v3), !9185
        cbr v4, block1(), block2(), !1568

        block1():
        v5 = get_local ptr u64, new_ptr, !1571
        v6 = load v5
        v7 = call copy_to_552(ptr, v6, count), !9186
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !1575
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_552(self !1581: u64, dst !1582: u64, count !1583: u64) -> (), !9187 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 184
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !1587
        store v1 to v2, !1587
        v3 = get_local ptr u64, len, !1588
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !1589 {
            mcp    dst src len, !1590
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_553(self !1174: u64, count !1175: u64) -> u64, !9188 {
        entry(self: u64, count: u64):
        v0 = const u64 184
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_554(self !1592: { u64, u64 }) -> u64, !9189 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1546
        v4 = load v3
        ret u64 v4
    }

    pub fn encode_555(item !1917: { { u64, u64 }, u64 }) -> slice, !9190 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, u64 }, u64 }):
        v0 = call new_100(), !9191
        v1 = call abi_encode_556(item, v0), !9192
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9193
        ret slice v5
    }

    pub fn abi_encode_556(self !3502: { { u64, u64 }, u64 }, buffer !3503: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9194 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_557(self), !9195
        v1 = get_local ptr u64, len, !3510
        store v0 to v1, !3510
        v2 = get_local ptr u64, len, !3511
        v3 = load v2
        v4 = call abi_encode_99(v3, buffer), !9196
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !3515
        store v4 to v5, !3515
        v6 = get_local ptr u64, i, !3516
        v7 = const u64 0, !3517
        store v7 to v6, !3516
        br while()

        while():
        v8 = get_local ptr u64, i, !3518
        v9 = load v8
        v10 = get_local ptr u64, len, !3519
        v11 = load v10
        v12 = call lt_26(v9, v11), !9197
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !3523
        v14 = load v13
        v15 = call get_558(self, v14), !9198
        v16 = call unwrap_295(v15), !9199
        v17 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, item, !3530
        store v16 to v17, !3530
        v18 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, item, !3531
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !3532
        v21 = load v20
        v22 = call abi_encode_483(v19, v21), !9200
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        store v22 to v23, !3536
        v24 = get_local ptr u64, i, !3537
        v25 = load v24
        v26 = const u64 1, !3538
        v27 = call add_45(v25, v26), !9201
        v28 = get_local ptr u64, i, !3539
        store v27 to v28, !3539
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !3542
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub fn len_557(self !3543: { { u64, u64 }, u64 }) -> u64, !9202 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        ret u64 v4
    }

    pub fn get_558(self !3550: { { u64, u64 }, u64 }, index !3551: u64) -> { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, !9203 {
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __anon_0
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1501
        v4 = load v3
        v5 = call le_209(v4, index), !9204
        cbr v5, block0(), block1(), !3555

        block0():
        v6 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __anon_0, !2267
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !2267
        v9 = const u64 0, !2267
        store v9 to v8, !2267
        v10 = load v6
        ret { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } v10, !3558

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !1502
        v17 = load v16
        v18 = call ptr_554(v17), !9205
        v19 = call add_553(v18, index), !9206
        v20 = get_local ptr u64, ptr, !3565
        store v19 to v20, !3565
        v21 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __anon_1, !2267
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2267
        v24 = const u64 1, !2267
        store v24 to v23, !2267
        v25 = get_local ptr u64, ptr, !3566
        v26 = load v25
        v27 = call read_298(v26), !9207
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v28, v29, !2267
        store v27 to v30, !2267
        v31 = load v21
        ret { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } v31
    }

    pub fn get_collateral_reserves_559(asset_id !9208: { b256 }) -> { u256 }, !9211 {
        entry(asset_id: { b256 }):
        v0 = call get_collateral_reserves_internal_500(asset_id), !9214
        ret { u256 } v0
    }

    pub fn encode_560(item !1917: { u256 }) -> slice, !9215 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u256 }):
        v0 = call new_100(), !9216
        v1 = call abi_encode_389(item, v0), !9217
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9218
        ret slice v5
    }

    pub fn get_market_basics_561() -> { u256, u256, u256, u256, u256, u256, u256 }, !9221 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9222
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9222
        store v3 to v2, !9222
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9222
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9222
        store v9 to v8, !9222
        v10 = load v0
        v11 = call read_132(v10), !9225
        ret { u256, u256, u256, u256, u256, u256, u256 } v11
    }

    pub fn encode_562(item !1917: { u256, u256, u256, u256, u256, u256, u256 }) -> slice, !9226 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u256, u256, u256, u256, u256, u256, u256 }):
        v0 = call new_100(), !9227
        v1 = call abi_encode_396(item, v0), !9228
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9229
        ret slice v5
    }

    pub fn get_market_basics_with_interest_563() -> { u256, u256, u256, u256, u256, u256, u256 }, !9232 {
        local { b256, u64, b256 } __anon_0
        local { u256, u256 } __tuple_4
        local { u256, u256 } __tuple_4_
        local u256 borrow_index
        local u64 current_time
        local u256 last_accrual_time
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 supply_index

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9233
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9233
        store v3 to v2, !9233
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9233
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9233
        store v9 to v8, !9233
        v10 = load v0
        v11 = call read_132(v10), !9236
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9237
        store v11 to v12, !9237
        v13 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9238
        v14 = const u64 6
        v15 = get_elem_ptr v13, ptr u256, v14, !2453
        v16 = load v15
        v17 = get_local ptr u256, last_accrual_time, !9239
        store v16 to v17, !9239
        v18 = call timestamp_141(), !9242
        v19 = get_local ptr u64, current_time, !9243
        store v18 to v19, !9243
        v20 = get_local ptr u64, current_time, !9244
        v21 = load v20
        v22 = call into_139(v21), !9247
        v23 = get_local ptr u256, last_accrual_time, !9248
        v24 = load v23
        v25 = call accrued_interest_indices_154(v22, v24), !9251
        v26 = get_local ptr { u256, u256 }, __tuple_4, !9252
        store v25 to v26, !9252
        v27 = get_local ptr { u256, u256 }, __tuple_4, !9252
        v28 = load v27
        v29 = get_local ptr { u256, u256 }, __tuple_4_, !9252
        store v28 to v29, !9252
        v30 = get_local ptr { u256, u256 }, __tuple_4_, !9252
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u256, v31, !9252
        v33 = load v32
        v34 = get_local ptr u256, supply_index, !9252
        store v33 to v34, !9252
        v35 = get_local ptr { u256, u256 }, __tuple_4_, !9252
        v36 = const u64 1
        v37 = get_elem_ptr v35, ptr u256, v36, !9252
        v38 = load v37
        v39 = get_local ptr u256, borrow_index, !9252
        store v38 to v39, !9252
        v40 = get_local ptr u64, current_time, !9253
        v41 = load v40
        v42 = call into_139(v41), !9256
        v43 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9257
        v44 = const u64 6
        v45 = get_elem_ptr v43, ptr u256, v44, !9257
        store v42 to v45, !9257
        v46 = get_local ptr u256, supply_index, !9258
        v47 = load v46
        v48 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9259
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u256, v49, !9259
        store v47 to v50, !9259
        v51 = get_local ptr u256, borrow_index, !9260
        v52 = load v51
        v53 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9261
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr u256, v54, !9261
        store v52 to v55, !9261
        v56 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9262
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u256, v57, !2709
        v59 = load v58
        v60 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9263
        v61 = const u64 4
        v62 = get_elem_ptr v60, ptr u256, v61, !2492
        v63 = load v62
        v64 = call present_value_supply_156(v59, v63), !9266
        v65 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9267
        v66 = const u64 4
        v67 = get_elem_ptr v65, ptr u256, v66, !9267
        store v64 to v67, !9267
        v68 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9268
        v69 = const u64 1
        v70 = get_elem_ptr v68, ptr u256, v69, !2712
        v71 = load v70
        v72 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9269
        v73 = const u64 5
        v74 = get_elem_ptr v72, ptr u256, v73, !2524
        v75 = load v74
        v76 = call present_value_borrow_159(v71, v75), !9272
        v77 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9273
        v78 = const u64 5
        v79 = get_elem_ptr v77, ptr u256, v78, !9273
        store v76 to v79, !9273
        v80 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9274
        v81 = load v80
        ret { u256, u256, u256, u256, u256, u256, u256 } v81
    }

    pub fn get_market_configuration_564() -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, !9277 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9278
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9278
        store v3 to v2, !9278
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9278
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9278
        store v9 to v8, !9278
        v10 = load v0
        v11 = call read_164(v10), !9281
        ret { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } v11
    }

    pub fn encode_565(item !1917: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }) -> slice, !9282 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        v0 = call new_100(), !9283
        v1 = call abi_encode_460(item, v0), !9284
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9285
        ret slice v5
    }

    pub fn get_pause_configuration_566() -> { bool, bool, bool, bool }, !9288 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9289
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9289
        store v3 to v2, !9289
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9289
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9289
        store v9 to v8, !9289
        v10 = load v0
        v11 = call read_567(v10), !9292
        ret { bool, bool, bool, bool } v11
    }

    pub fn read_567(self !2224: { b256, u64, b256 }) -> { bool, bool, bool, bool }, !9293 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_450(self), !9294
        v1 = call offset_451(self), !9295
        v2 = call read_569(v0, v1), !9296
        v3 = call unwrap_568(v2), !9297
        ret { bool, bool, bool, bool } v3
    }

    pub fn unwrap_568(self !2242: { u64, ( () | { bool, bool, bool, bool } ) }) -> { bool, bool, bool, bool }, !9298 {
        local { u64, ( () | { bool, bool, bool, bool } ) } __matched_value_4
        local { bool, bool, bool, bool } inner_value

        entry(self: { u64, ( () | { bool, bool, bool, bool } ) }):
        v0 = get_local ptr { u64, ( () | { bool, bool, bool, bool } ) }, __matched_value_4, !2246
        store self to v0, !2246
        v1 = get_local ptr { u64, ( () | { bool, bool, bool, bool } ) }, __matched_value_4, !2247
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2247
        v4 = load v3
        v5 = const u64 1, !2247
        v6 = call eq_16(v4, v5), !9299
        cbr v6, block0(), block1(), !2248

        block0():
        v7 = get_local ptr { u64, ( () | { bool, bool, bool, bool } ) }, __matched_value_4, !2247
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { bool, bool, bool, bool }, v8, v9
        v11 = load v10
        v12 = get_local ptr { bool, bool, bool, bool }, inner_value, !2251
        store v11 to v12, !2251
        v13 = get_local ptr { bool, bool, bool, bool }, inner_value, !2252
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2253
        v16 = call revert_102(v15), !9300
        br block2(v16)

        block2(v17: { bool, bool, bool, bool }):
        ret { bool, bool, bool, bool } v17
    }

    pub fn read_569(slot !2258: b256, offset !2259: u64) -> { u64, ( () | { bool, bool, bool, bool } ) }, !9301 {
        local { u64, ( () | { bool, bool, bool, bool } ) } __anon_0
        local { u64, ( () | { bool, bool, bool, bool } ) } __anon_1
        local { u64, ( () | { bool, bool, bool, bool } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 32
        v1 = const u64 0, !2263
        v2 = call eq_16(v0, v1), !9302
        cbr v2, block0(), block1(), !2264

        block0():
        v3 = get_local ptr { u64, ( () | { bool, bool, bool, bool } ) }, __anon_0, !2267
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !2267
        v6 = const u64 0, !2267
        store v6 to v5, !2267
        v7 = load v3
        ret { u64, ( () | { bool, bool, bool, bool } ) } v7, !2268

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_448(slot, offset), !9303
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        store v10 to v11, !2272
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !2272
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        store v13 to v14, !2272
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !2272
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !2272
        store v18 to v19, !2272
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !2272
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !2272
        store v23 to v24, !2272
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !2272
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !2272
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !2272
        store v28 to v29, !2272
        v30 = get_local ptr u64, number_of_slots, !2273
        v31 = load v30
        v32 = const u64 32, !2274
        v33 = call multiply_25(v31, v32), !9304
        v34 = call alloc_51(v33), !9305
        v35 = get_local ptr u64, result_ptr, !2281
        store v34 to v35, !2281
        v36 = get_local ptr b256, offset_slot, !2282
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !2283
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !2284
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !2285
        store v37 to v42, !2285
        v43 = int_to_ptr v39 to ptr b256, !2285
        v44 = state_load_quad_word v43, key v42, v41, !2285
        cbr v44, block3(), block4(), !2285

        block3():
        v45 = get_local ptr { u64, ( () | { bool, bool, bool, bool } ) }, __anon_1, !2267
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !2267
        v48 = const u64 1, !2267
        store v48 to v47, !2267
        v49 = get_local ptr u64, result_ptr, !2286
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !2287
        v52 = load v51
        v53 = call add_5(v50, v52), !9306
        v54 = call read_570(v53), !9307
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { bool, bool, bool, bool }, v55, v56, !2267
        store v54 to v57, !2267
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { bool, bool, bool, bool } ) }, __anon_2, !2267
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !2267
        v62 = const u64 0, !2267
        store v62 to v61, !2267
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { bool, bool, bool, bool } ) }):
        ret { u64, ( () | { bool, bool, bool, bool } ) } v64
    }

    pub fn read_570(self !1179: u64) -> { bool, bool, bool, bool }, !9308 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1183

        block0():
        v1 = asm(ptr: self) -> { bool, bool, bool, bool } ptr, !1184 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1185
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1186

        block2():
        v5 = asm(ptr: self, val) -> { bool, bool, bool, bool } val, !1187 {
            lb     val ptr i0, !1188
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { bool, bool, bool, bool } val, !1189 {
            lw     val ptr i0, !1190
        }
        br block4(v6)

        block4(v7: { bool, bool, bool, bool }):
        br block5(v7)

        block5(v8: { bool, bool, bool, bool }):
        ret { bool, bool, bool, bool } v8
    }

    pub fn encode_571(item !1917: { bool, bool, bool, bool }) -> slice, !9309 {
        local { { u64, u64, u64 } } buffer

        entry(item: { bool, bool, bool, bool }):
        v0 = call new_100(), !9310
        v1 = call abi_encode_455(item, v0), !9311
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9312
        ret slice v5
    }

    pub fn decode_572(self !1336: ptr { u64 }) -> { b256 }, !9313 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_573(self), !9314
        ret { b256 } v0
    }

    pub fn abi_decode_573(buffer !7446: ptr { u64 }) -> { b256 }, !9315 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_32(buffer), !9316
        v1 = get_local ptr { b256 }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { b256 } v4
    }

    pub fn get_price_574(price_feed_id !9317: b256) -> { u64, u64, u64, u64 }, !9320 {
        local { u64 } __anon_0

        entry(price_feed_id: b256):
        v0 = get_local ptr { u64 }, __anon_0, !3798
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !3798
        v3 = const u64 1, !3798
        store v3 to v2, !3798
        v4 = load v0
        v5 = call get_price_internal_331(price_feed_id, v4), !9323
        ret { u64, u64, u64, u64 } v5
    }

    pub fn encode_575(item !1917: { u64, u64, u64, u64 }) -> slice, !9324 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, u64, u64, u64 }):
        v0 = call new_100(), !9325
        v1 = call abi_encode_576(item, v0), !9326
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9327
        ret slice v5
    }

    pub fn abi_encode_576(self !2088: { u64, u64, u64, u64 }, buffer !2089: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9329 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____

        entry(self: { u64, u64, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !5476
        v4 = load v3
        v5 = call abi_encode_99(v4, buffer), !9332
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9333
        store v5 to v6, !9333
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3805
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9334
        v13 = load v12
        v14 = call abi_encode_375(v11, v13), !9337
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9338
        store v14 to v15, !9338
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, u64, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !3817
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !9339
        v22 = load v21
        v23 = call abi_encode_99(v20, v22), !9342
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !9343
        store v23 to v24, !9343
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, u64, u64, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u64, v27, !5428
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !7090
        v31 = load v30
        v32 = call abi_encode_99(v29, v31), !9346
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !9347
        store v32 to v33, !9347
        v34 = get_local ptr { { u64, u64, u64 } }, buffer____, !9348
        v35 = load v34
        ret { { u64, u64, u64 } } v35
    }

    pub fn get_pyth_contract_id_577() -> { b256 }, !9351 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9352
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9352
        store v3 to v2, !9352
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9352
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9352
        store v9 to v8, !9352
        v10 = load v0
        v11 = call read_183(v10), !9355
        ret { b256 } v11
    }

    pub fn encode_578(item !1917: { b256 }) -> slice, !9356 {
        local { { u64, u64, u64 } } buffer

        entry(item: { b256 }):
        v0 = call new_100(), !9357
        v1 = call abi_encode_372(item, v0), !9358
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9359
        ret slice v5
    }

    pub fn get_reserves_579() -> { u256 }, !9362 {
        entry():
        v0 = call get_reserves_internal_499(), !9365
        ret { u256 } v0
    }

    pub fn get_supply_rate_580(utilization !9366: u256) -> u256, !9369 {
        entry(utilization: u256):
        v0 = call get_supply_rate_internal_161(utilization), !9372
        ret u256 v0
    }

    pub fn get_user_balance_with_interest_581(account !9373: { u64, ( { b256 } | { b256 } ) }) -> { u256 }, !9376 {
        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_balance_with_interest_internal_582(account), !9379
        ret { u256 } v0
    }

    fn get_user_balance_with_interest_internal_582(account !9380: { u64, ( { b256 } | { b256 } ) }) -> { u256 }, !9383 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u256, u256 } __tuple_8
        local { u256, u256 } __tuple_8_
        local u256 borrow_index
        local u256 last_accrual_time
        local u256 supply_index
        local mut { { u256 }, u256, u256 } user_basic

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9384
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9384
        store v3 to v2, !9384
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9384
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9384
        store v9 to v8, !9384
        v10 = load v0
        v11 = call get_239(v10, account), !9387
        v12 = call try_read_233(v11), !9390
        v13 = call default_270(), !9393
        v14 = call unwrap_or_232(v12, v13), !9396
        v15 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9397
        store v14 to v15, !9397
        v16 = get_local ptr { b256, u64, b256 }, __anon_1, !9398
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr b256, v17
        v19 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddcec0, !9398
        store v19 to v18, !9398
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20
        v22 = const u64 0
        store v22 to v21, !9398
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr b256, v23
        v25 = const b256 0x79aa7ec830984eccffac9ed69968fe5497be089ff4398ccc492d7ba16d41ff60, !9398
        store v25 to v24, !9398
        v26 = load v16
        v27 = call read_412(v26), !9401
        v28 = get_local ptr u256, last_accrual_time, !9402
        store v27 to v28, !9402
        v29 = call timestamp_141(), !9405
        v30 = call into_139(v29), !9408
        v31 = get_local ptr u256, last_accrual_time, !9409
        v32 = load v31
        v33 = call accrued_interest_indices_154(v30, v32), !9412
        v34 = get_local ptr { u256, u256 }, __tuple_8, !9413
        store v33 to v34, !9413
        v35 = get_local ptr { u256, u256 }, __tuple_8, !9413
        v36 = load v35
        v37 = get_local ptr { u256, u256 }, __tuple_8_, !9413
        store v36 to v37, !9413
        v38 = get_local ptr { u256, u256 }, __tuple_8_, !9413
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u256, v39, !9413
        v41 = load v40
        v42 = get_local ptr u256, supply_index, !9413
        store v41 to v42, !9413
        v43 = get_local ptr { u256, u256 }, __tuple_8_, !9413
        v44 = const u64 1
        v45 = get_elem_ptr v43, ptr u256, v44, !9413
        v46 = load v45
        v47 = get_local ptr u256, borrow_index, !9413
        store v46 to v47, !9413
        v48 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9414
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr { u256 }, v49, !3680
        v51 = load v50
        v52 = call zero_277(), !9417
        v53 = call ge_274(v51, v52), !9420
        cbr v53, block0(), block1(), !9418

        block0():
        v54 = get_local ptr u256, supply_index, !9421
        v55 = load v54
        v56 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9422
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr { u256 }, v57, !3680
        v59 = load v58
        v60 = call try_into_279(v59), !9425
        v61 = call unwrap_278(v60), !9428
        v62 = call present_value_supply_156(v55, v61), !9431
        v63 = call try_from_282(v62), !9434
        v64 = call unwrap_281(v63), !9437
        br block2(v64)

        block1():
        v65 = get_local ptr u256, borrow_index, !9438
        v66 = load v65
        v67 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9439
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u256 }, v68, !3680
        v70 = load v69
        v71 = call wrapping_neg_284(v70), !9442
        v72 = call try_into_279(v71), !9445
        v73 = call unwrap_278(v72), !9448
        v74 = call present_value_borrow_159(v66, v73), !9451
        v75 = call try_from_282(v74), !9454
        v76 = call unwrap_281(v75), !9457
        v77 = call wrapping_neg_284(v76), !9460
        br block2(v77)

        block2(v78: { u256 }):
        ret { u256 } v78
    }

    pub fn get_user_basic_583(account !9461: { u64, ( { b256 } | { b256 } ) }) -> { { u256 }, u256, u256 }, !9464 {
        local { b256, u64, b256 } __anon_0

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9465
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9465
        store v3 to v2, !9465
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9465
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9465
        store v9 to v8, !9465
        v10 = load v0
        v11 = call get_239(v10, account), !9468
        v12 = call try_read_233(v11), !9471
        v13 = call default_270(), !9474
        v14 = call unwrap_or_232(v12, v13), !9477
        ret { { u256 }, u256, u256 } v14
    }

    pub fn encode_584(item !1917: { { u256 }, u256, u256 }) -> slice, !9478 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u256 }, u256, u256 }):
        v0 = call new_100(), !9479
        v1 = call abi_encode_388(item, v0), !9480
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9481
        ret slice v5
    }

    pub fn decode_585(self !1336: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) }, { b256 } }, !9482 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_586(self), !9483
        ret { { u64, ( { b256 } | { b256 } ) }, { b256 } } v0
    }

    pub fn abi_decode_586(buffer !1343: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) }, { b256 } }, !9484 {
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_27(buffer), !9485
        v1 = call abi_decode_407(buffer), !9486
        v2 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, ( { b256 } | { b256 } ) }, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { b256 }, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { { u64, ( { b256 } | { b256 } ) }, { b256 } } v7
    }

    pub fn get_user_collateral_587(account !9487: { u64, ( { b256 } | { b256 } ) }, asset_id !9488: { b256 }) -> u64, !9491 {
        local { b256, u64, b256 } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_1

        entry(account: { u64, ( { b256 } | { b256 } ) }, asset_id: { b256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9492
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9492
        store v3 to v2, !9492
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9492
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9492
        store v9 to v8, !9492
        v10 = load v0
        v11 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_1, !9493
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { u64, ( { b256 } | { b256 } ) }, v12, !9493
        store account to v13, !9493
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr { b256 }, v14, !9493
        store asset_id to v15, !9493
        v16 = load v11
        v17 = call get_325(v10, v16), !9496
        v18 = call try_read_324(v17), !9499
        v19 = const u64 0, !9500
        v20 = call unwrap_or_292(v18, v19), !9503
        ret u64 v20
    }

    pub fn get_user_supply_borrow_588(account !9504: { u64, ( { b256 } | { b256 } ) }) -> { u256, u256 }, !9507 {
        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_supply_borrow_internal_487(account), !9510
        ret { u256, u256 } v0
    }

    pub fn encode_589(item !1917: { u256, u256 }) -> slice, !9511 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u256, u256 }):
        v0 = call new_100(), !9512
        v1 = call abi_encode_590(item, v0), !9513
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9514
        ret slice v5
    }

    pub fn abi_encode_590(self !9020: { u256, u256 }, buffer !9021: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9515 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { u256, u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u256, u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u256, v2, !9025
        v4 = load v3
        v5 = call abi_encode_374(v4, buffer), !9516
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9029
        store v5 to v6, !9029
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u256, u256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u256, v9, !9030
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9031
        v13 = load v12
        v14 = call abi_encode_374(v11, v13), !9517
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9035
        store v14 to v15, !9035
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !9036
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn get_utilization_591() -> u256, !9520 {
        entry():
        v0 = call get_utilization_internal_155(), !9523
        ret u256 v0
    }

    pub fn get_version_592() -> u8, !9526 {
        entry():
        v0 = const u8 5, !9527
        ret u8 v0
    }

    pub fn encode_593(item !1917: u8) -> slice, !9528 {
        local { { u64, u64, u64 } } buffer

        entry(item: u8):
        v0 = call new_100(), !9529
        v1 = call abi_encode_594(item, v0), !9530
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9531
        ret slice v5
    }

    pub fn abi_encode_594(self !9532: u8, buffer !9533: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9536 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u8, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1952
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 1
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = ptr_to_int v20 to u64
        v23 = add v22, v16
        v24 = int_to_ptr v23 to ptr u8
        store self to v24
        v25 = const u64 1
        v26 = add v16, v25
        v27 = ptr_to_int v20 to u64
        v28 = get_local ptr { u64, u64, u64 }, __anon_1
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        store v21 to v32
        v33 = const u64 2
        v34 = get_elem_ptr v28, ptr u64, v33
        store v26 to v34
        v35 = asm(buffer: v28) -> { u64, u64, u64 } buffer {
        }
        v36 = get_local ptr { { u64, u64, u64 } }, __anon_2, !9537
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, u64, u64 }, v37
        store v35 to v38, !9537
        v39 = load v36
        ret { { u64, u64, u64 } } v39

        block1():
        v40 = const u64 2
        v41 = mul v13, v40
        v42 = add v41, v17
        v43 = asm(new_cap: v42, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v43, v42)

        block2():
        br block0(v10, v13)
    }

    pub fn is_liquidatable_595(account !9538: { u64, ( { b256 } | { b256 } ) }) -> bool, !9541 {
        local { u256 } present

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_balance_with_interest_internal_582(account), !9544
        v1 = get_local ptr { u256 }, present, !9545
        store v0 to v1, !9545
        v2 = get_local ptr { u256 }, present, !9546
        v3 = load v2
        v4 = call is_liquidatable_internal_290(account, v3), !9549
        ret bool v4
    }

    pub fn encode_596(item !1917: bool) -> slice, !9550 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_100(), !9551
        v1 = call abi_encode_456(item, v0), !9552
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9553
        ret slice v5
    }

    pub fn decode_597(self !1336: ptr { u64 }) -> { { bool, bool, bool, bool } }, !9554 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_598(self), !9555
        ret { { bool, bool, bool, bool } } v0
    }

    pub fn abi_decode_598(buffer !7446: ptr { u64 }) -> { { bool, bool, bool, bool } }, !9556 {
        local { { bool, bool, bool, bool } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_599(buffer), !9557
        v1 = get_local ptr { { bool, bool, bool, bool } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { bool, bool, bool, bool }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { bool, bool, bool, bool } } v4
    }

    pub fn abi_decode_599(buffer !7655: ptr { u64 }) -> { bool, bool, bool, bool }, !9559 {
        local { bool, bool, bool, bool } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_464(buffer), !9561
        v1 = call decode_464(buffer), !9564
        v2 = call decode_464(buffer), !9567
        v3 = call decode_464(buffer), !9570
        v4 = get_local ptr { bool, bool, bool, bool }, __anon_0, !9571
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr bool, v5
        store v0 to v6, !9571
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr bool, v7
        store v1 to v8, !9571
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr bool, v9
        store v2 to v10, !9571
        v11 = const u64 3
        v12 = get_elem_ptr v4, ptr bool, v11
        store v3 to v12, !9571
        v13 = load v4
        ret { bool, bool, bool, bool } v13
    }

    pub fn pause_600(pause_config !9572: { bool, bool, bool, bool }) -> (), !9575 {
        local { { bool, bool, bool, bool } } __anon_0
        local { b256, u64, b256 } __anon_1

        entry(pause_config: { bool, bool, bool, bool }):
        v0 = call only_owner_467(), !9578
        v1 = get_local ptr { { bool, bool, bool, bool } }, __anon_0, !9579
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { bool, bool, bool, bool }, v2
        store pause_config to v3, !9579
        v4 = load v1
        v5 = call log_452(v4), !9582
        v6 = get_local ptr { b256, u64, b256 }, __anon_1, !9583
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7
        v9 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9583
        store v9 to v8, !9583
        v10 = const u64 1
        v11 = get_elem_ptr v6, ptr u64, v10
        v12 = const u64 0
        store v12 to v11, !9583
        v13 = const u64 2
        v14 = get_elem_ptr v6, ptr b256, v13
        v15 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9583
        store v15 to v14, !9583
        v16 = load v6
        v17 = call write_446(v16, pause_config), !9586
        v18 = const unit ()
        ret () v18
    }

    pub fn pause_collateral_asset_601(asset_id !9587: { b256 }) -> (), !9590 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { { b256 } } __anon_2
        local mut { { b256 }, b256, u64, u256, u256, u256, u64, bool } configuration

        entry(asset_id: { b256 }):
        v0 = call only_owner_467(), !9593
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !9594
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9594
        store v4 to v3, !9594
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !9594
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9594
        store v10 to v9, !9594
        v11 = load v1
        v12 = call get_301(v11, asset_id), !9597
        v13 = call read_294(v12), !9600
        v14 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9601
        store v13 to v14, !9601
        v15 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9602
        v16 = const u64 7
        v17 = get_elem_ptr v15, ptr bool, v16, !9602
        v18 = const bool true, !9603
        store v18 to v17, !9602
        v19 = get_local ptr { b256, u64, b256 }, __anon_1, !9604
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr b256, v20
        v22 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9604
        store v22 to v21, !9604
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr u64, v23
        v25 = const u64 0
        store v25 to v24, !9604
        v26 = const u64 2
        v27 = get_elem_ptr v19, ptr b256, v26
        v28 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9604
        store v28 to v27, !9604
        v29 = load v19
        v30 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9605
        v31 = load v30
        v32 = call insert_474(v29, asset_id, v31), !9608
        v33 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9609
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34, !3743
        v36 = load v35
        v37 = get_local ptr { { b256 } }, __anon_2, !9610
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { b256 }, v38
        store v36 to v39, !9610
        v40 = load v37
        v41 = call log_602(v40), !9613
        v42 = const unit ()
        ret () v42
    }

    pub fn log_602(value !1912: { { b256 } }) -> (), !9614 {
        entry(value: { { b256 } }):
        v0 = call encode_603(value), !1916
        v1 = const u64 5007089152005991246
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_603(item !1917: { { b256 } }) -> slice, !9615 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 } }):
        v0 = call new_100(), !9616
        v1 = call abi_encode_604(item, v0), !9617
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9618
        ret slice v5
    }

    pub fn abi_encode_604(self !6067: { { b256 } }, buffer !6068: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9620 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { b256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !9621
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !9623
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9624
        store v5 to v6, !9624
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !9625
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn quote_collateral_605(asset_id !9626: { b256 }, base_amount !9627: u64) -> u64, !9630 {
        entry(asset_id: { b256 }, base_amount: u64):
        v0 = call quote_collateral_internal_501(asset_id, base_amount), !9633
        ret u64 v0
    }

    pub fn renounce_ownership_606() -> (), !9636 {
        entry():
        v0 = call renounce_ownership_607(), !9639
        v1 = const unit ()
        ret () v1
    }

    pub fn renounce_ownership_607() -> (), !9642 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { { u64, ( { b256 } | { b256 } ) } } __anon_1
        local { b256, u64, b256 } owner_key

        entry():
        v0 = call only_owner_467(), !9645
        v1 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !7055
        v2 = const u64 0, !9646
        v3 = call new_426(v1, v2, v1), !9649
        v4 = get_local ptr { b256, u64, b256 }, owner_key, !9650
        store v3 to v4, !9650
        v5 = get_local ptr { b256, u64, b256 }, owner_key, !9651
        v6 = load v5
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !7046
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !7046
        v10 = const u64 2, !7046
        store v10 to v9, !7046
        v11 = load v7
        v12 = call write_434(v6, v11), !9654
        v13 = call msg_sender_347(), !9657
        v14 = call unwrap_346(v13), !9660
        v15 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_1, !9661
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u64, ( { b256 } | { b256 } ) }, v16
        store v14 to v17, !9661
        v18 = load v15
        v19 = call log_608(v18), !9664
        v20 = const unit ()
        ret () v20
    }

    pub fn log_608(value !1912: { { u64, ( { b256 } | { b256 } ) } }) -> (), !9665 {
        entry(value: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call encode_609(value), !1916
        v1 = const u64 4883303303013154842
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_609(item !1917: { { u64, ( { b256 } | { b256 } ) } }) -> slice, !9666 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_100(), !9667
        v1 = call abi_encode_610(item, v0), !9668
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9669
        ret slice v5
    }

    pub fn abi_encode_610(self !7303: { { u64, ( { b256 } | { b256 } ) } }, buffer !7304: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9671 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !9672
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !9675
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9676
        store v5 to v6, !9676
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !9334
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn resume_collateral_asset_611(asset_id !9677: { b256 }) -> (), !9680 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { { b256 } } __anon_2
        local mut { { b256 }, b256, u64, u256, u256, u256, u64, bool } configuration

        entry(asset_id: { b256 }):
        v0 = call only_owner_467(), !9683
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !9684
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9684
        store v4 to v3, !9684
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !9684
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9684
        store v10 to v9, !9684
        v11 = load v1
        v12 = call get_301(v11, asset_id), !9687
        v13 = call read_294(v12), !9690
        v14 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9691
        store v13 to v14, !9691
        v15 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9692
        v16 = const u64 7
        v17 = get_elem_ptr v15, ptr bool, v16, !9692
        v18 = const bool false, !9693
        store v18 to v17, !9692
        v19 = get_local ptr { b256, u64, b256 }, __anon_1, !9694
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr b256, v20
        v22 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9694
        store v22 to v21, !9694
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr u64, v23
        v25 = const u64 0
        store v25 to v24, !9694
        v26 = const u64 2
        v27 = get_elem_ptr v19, ptr b256, v26
        v28 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9694
        store v28 to v27, !9694
        v29 = load v19
        v30 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9695
        v31 = load v30
        v32 = call insert_474(v29, asset_id, v31), !9698
        v33 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9699
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34, !3743
        v36 = load v35
        v37 = get_local ptr { { b256 } }, __anon_2, !9700
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { b256 }, v38
        store v36 to v39, !9700
        v40 = load v37
        v41 = call log_612(v40), !9703
        v42 = const unit ()
        ret () v42
    }

    pub fn log_612(value !1912: { { b256 } }) -> (), !9704 {
        entry(value: { { b256 } }):
        v0 = call encode_613(value), !1916
        v1 = const u64 9366109880057078281
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_613(item !1917: { { b256 } }) -> slice, !9705 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 } }):
        v0 = call new_100(), !9706
        v1 = call abi_encode_614(item, v0), !9707
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9708
        ret slice v5
    }

    pub fn abi_encode_614(self !9709: { { b256 } }, buffer !9710: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9713 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { b256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !9714
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !9717
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9718
        store v5 to v6, !9718
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !9719
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn decode_615(self !1336: ptr { u64 }) -> { { b256 } }, !9720 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_616(self), !9721
        ret { { b256 } } v0
    }

    pub fn abi_decode_616(buffer !7446: ptr { u64 }) -> { { b256 } }, !9722 {
        local { { b256 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_35(buffer), !9723
        v1 = get_local ptr { { b256 } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { b256 } } v4
    }

    pub fn set_pyth_contract_id_617(contract_id !9724: { b256 }) -> (), !9727 {
        local { b256, u64, b256 } __anon_0
        local { { b256 } } __anon_1

        entry(contract_id: { b256 }):
        v0 = call only_owner_467(), !9730
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !9731
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9731
        store v4 to v3, !9731
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !9731
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9731
        store v10 to v9, !9731
        v11 = load v1
        v12 = call write_618(v11, contract_id), !9734
        v13 = get_local ptr { { b256 } }, __anon_1, !9735
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { b256 }, v14
        store contract_id to v15, !9735
        v16 = load v13
        v17 = call log_621(v16), !9738
        v18 = const unit ()
        ret () v18
    }

    pub fn write_618(self !3209: { b256, u64, b256 }, value !3210: { b256 }) -> (), !9739 {
        entry(self: { b256, u64, b256 }, value: { b256 }):
        v0 = call slot_188(self), !9740
        v1 = call offset_189(self), !9741
        v2 = call write_619(v0, v1, value), !9742
        v3 = const unit ()
        ret () v3
    }

    pub fn write_619(slot !3223: b256, offset !3224: u64, value !3225: { b256 }) -> (), !9743 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { b256 }):
        v0 = const u64 32
        v1 = const u64 0, !3229
        v2 = call eq_16(v0, v1), !9744
        cbr v2, block0(), block1(), !3230

        block0():
        v3 = const unit (), !3233
        ret () v3, !3233

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_186(slot, offset), !9745
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        store v6 to v7, !3237
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !3237
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        store v9 to v10, !3237
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !3237
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !3237
        store v14 to v15, !3237
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !3237
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !3237
        store v19 to v20, !3237
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !3237
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !3237
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !3237
        store v24 to v25, !3237
        v26 = get_local ptr u64, number_of_slots, !3238
        v27 = load v26
        v28 = const u64 32, !3239
        v29 = call multiply_25(v27, v28), !9746
        v30 = call alloc_51(v29), !9747
        v31 = get_local ptr u64, padded_value, !3246
        store v30 to v31, !3246
        v32 = get_local ptr b256, offset_slot, !3247
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !3248
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !3249
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !3250
        store v33 to v38, !3250
        v39 = int_to_ptr v35 to ptr b256, !3250
        v40 = state_load_quad_word v39, key v38, v37, !3250
        v41 = get_local ptr bool, _, !3251
        store v40 to v41, !3251
        v42 = get_local ptr u64, padded_value, !3252
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !3253
        v45 = load v44
        v46 = call add_5(v43, v45), !9748
        v47 = call write_620(v46, value), !9749
        v48 = get_local ptr b256, offset_slot, !3260
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !3261
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !3262
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !3263
        store v49 to v54, !3263
        v55 = int_to_ptr v51 to ptr b256, !3263
        v56 = state_store_quad_word v55, key v54, v53, !3263
        v57 = get_local ptr bool, __, !3264
        store v56 to v57, !3264
        v58 = const unit ()
        ret () v58
    }

    pub fn write_620(self !1596: u64, val !1597: { b256 }) -> (), !9750 {
        entry(self: u64, val: { b256 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !1601

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !1602 {
            mcp    dst src count, !1603
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !1604
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !1605

        block2():
        v7 = asm(ptr: self, val: val) -> (), !1606 {
            sb     ptr val i0, !1607
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !1608 {
            sw     ptr val i0, !1609
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn log_621(value !1912: { { b256 } }) -> (), !9751 {
        entry(value: { { b256 } }):
        v0 = call encode_622(value), !1916
        v1 = const u64 15118137377144155992
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_622(item !1917: { { b256 } }) -> slice, !9752 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 } }):
        v0 = call new_100(), !9753
        v1 = call abi_encode_623(item, v0), !9754
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9755
        ret slice v5
    }

    pub fn abi_encode_623(self !9709: { { b256 } }, buffer !9710: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9757 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { b256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !9758
        v4 = load v3
        v5 = call abi_encode_372(v4, buffer), !9761
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9762
        store v5 to v6, !9762
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !9763
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn supply_base_624() -> (), !9766 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_10
        local { { u64, ( { b256 } | { b256 } ) }, u256, u256 } __anon_11
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_12
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { u64 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9
        local { u256, u256 } __tuple_1
        local { u256, u256 } __tuple_1_
        local u64 amount
        local { b256 } base_asset_id
        local { u64, ( { b256 } | { b256 } ) } caller
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 repay_amount
        local u256 supply_amount
        local { u256 } user_balance
        local { { u256 }, u256, u256 } user_basic
        local { u256 } user_principal
        local { u256 } user_principal_new

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9767
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9767
        store v3 to v2, !9767
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9767
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xec66306616d418a86169bf444e52fce3f5f320381ecf4fbfb9d6a1d21c15827e, !9767
        store v9 to v8, !9767
        v10 = load v0
        v11 = call read_116(v10), !9770
        v12 = call not_15(v11), !9773
        v13 = get_local ptr { u64 }, __anon_1, !1845
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !1845
        v16 = const u64 1, !1845
        store v16 to v15, !1845
        v17 = load v13
        v18 = call require_112(v12, v17), !9776
        v19 = call msg_amount_194(), !9779
        v20 = get_local ptr u64, amount, !9780
        store v19 to v20, !9780
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !9781
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9781
        store v24 to v23, !9781
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !9781
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9781
        store v30 to v29, !9781
        v31 = load v21
        v32 = call read_164(v31), !9784
        v33 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v32 to v33
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34, !7354
        v36 = load v35
        v37 = get_local ptr { b256 }, base_asset_id, !9785
        store v36 to v37, !9785
        v38 = get_local ptr u64, amount, !9786
        v39 = load v38
        v40 = const u64 0, !9787
        v41 = call gt_40(v39, v40), !9790
        cbr v41, block0(), block1(v41), !9791

        block0():
        v42 = call msg_asset_id_197(), !9794
        v43 = get_local ptr { b256 }, base_asset_id, !9795
        v44 = load v43
        v45 = call eq_196(v42, v44), !9798
        br block1(v45), !9791

        block1(v46: bool):
        v47 = get_local ptr { u64 }, __anon_4, !1845
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !1845
        v50 = const u64 11, !1845
        store v50 to v49, !1845
        v51 = load v47
        v52 = call require_112(v46, v51), !9801
        v53 = call accrue_internal_131(), !9804
        v54 = call msg_sender_347(), !9807
        v55 = call unwrap_346(v54), !9810
        v56 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9811
        store v55 to v56, !9811
        v57 = get_local ptr { b256, u64, b256 }, __anon_5, !9812
        v58 = const u64 0
        v59 = get_elem_ptr v57, ptr b256, v58
        v60 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9812
        store v60 to v59, !9812
        v61 = const u64 1
        v62 = get_elem_ptr v57, ptr u64, v61
        v63 = const u64 0
        store v63 to v62, !9812
        v64 = const u64 2
        v65 = get_elem_ptr v57, ptr b256, v64
        v66 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9812
        store v66 to v65, !9812
        v67 = load v57
        v68 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9813
        v69 = load v68
        v70 = call get_239(v67, v69), !9816
        v71 = call try_read_233(v70), !9819
        v72 = call default_270(), !9822
        v73 = call unwrap_or_232(v71, v72), !9825
        v74 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9826
        store v73 to v74, !9826
        v75 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9827
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr { u256 }, v76, !3680
        v78 = load v77
        v79 = get_local ptr { u256 }, user_principal, !9828
        store v78 to v79, !9828
        v80 = get_local ptr { u256 }, user_principal, !9829
        v81 = load v80
        v82 = call present_value_273(v81), !9832
        v83 = get_local ptr u64, amount, !9833
        v84 = load v83
        v85 = call from_140(v84), !9836
        v86 = call try_from_282(v85), !9839
        v87 = call unwrap_281(v86), !9842
        v88 = call add_376(v82, v87), !9845
        v89 = get_local ptr { u256 }, user_balance, !9846
        store v88 to v89, !9846
        v90 = get_local ptr { u256 }, user_balance, !9847
        v91 = load v90
        v92 = call principal_value_378(v91), !9850
        v93 = get_local ptr { u256 }, user_principal_new, !9851
        store v92 to v93, !9851
        v94 = get_local ptr { u256 }, user_principal, !9852
        v95 = load v94
        v96 = get_local ptr { u256 }, user_principal_new, !9853
        v97 = load v96
        v98 = call repay_and_supply_amount_390(v95, v97), !9856
        v99 = get_local ptr { u256, u256 }, __tuple_1, !9857
        store v98 to v99, !9857
        v100 = get_local ptr { u256, u256 }, __tuple_1, !9857
        v101 = load v100
        v102 = get_local ptr { u256, u256 }, __tuple_1_, !9857
        store v101 to v102, !9857
        v103 = get_local ptr { u256, u256 }, __tuple_1_, !9857
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u256, v104, !9857
        v106 = load v105
        v107 = get_local ptr u256, repay_amount, !9857
        store v106 to v107, !9857
        v108 = get_local ptr { u256, u256 }, __tuple_1_, !9857
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u256, v109, !9857
        v111 = load v110
        v112 = get_local ptr u256, supply_amount, !9857
        store v111 to v112, !9857
        v113 = get_local ptr { b256, u64, b256 }, __anon_6, !9858
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr b256, v114
        v116 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9858
        store v116 to v115, !9858
        v117 = const u64 1
        v118 = get_elem_ptr v113, ptr u64, v117
        v119 = const u64 0
        store v119 to v118, !9858
        v120 = const u64 2
        v121 = get_elem_ptr v113, ptr b256, v120
        v122 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9858
        store v122 to v121, !9858
        v123 = load v113
        v124 = call read_132(v123), !9861
        v125 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9862
        store v124 to v125, !9862
        v126 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9863
        v127 = const u64 4
        v128 = get_elem_ptr v126, ptr u256, v127, !2492
        v129 = load v128
        v130 = get_local ptr u256, supply_amount, !9864
        v131 = load v130
        v132 = call add_124(v129, v131), !9867
        v133 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9865
        v134 = const u64 4
        v135 = get_elem_ptr v133, ptr u256, v134, !9865
        store v132 to v135, !9865
        v136 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9868
        v137 = const u64 5
        v138 = get_elem_ptr v136, ptr u256, v137, !2524
        v139 = load v138
        v140 = get_local ptr u256, repay_amount, !9869
        v141 = load v140
        v142 = call subtract_125(v139, v141), !9872
        v143 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9870
        v144 = const u64 5
        v145 = get_elem_ptr v143, ptr u256, v144, !9870
        store v142 to v145, !9870
        v146 = get_local ptr { b256, u64, b256 }, __anon_7, !9873
        v147 = const u64 0
        v148 = get_elem_ptr v146, ptr b256, v147
        v149 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9873
        store v149 to v148, !9873
        v150 = const u64 1
        v151 = get_elem_ptr v146, ptr u64, v150
        v152 = const u64 0
        store v152 to v151, !9873
        v153 = const u64 2
        v154 = get_elem_ptr v146, ptr b256, v153
        v155 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9873
        store v155 to v154, !9873
        v156 = load v146
        v157 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9874
        v158 = load v157
        v159 = call write_179(v156, v158), !9877
        v160 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9878
        v161 = load v160
        v162 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9879
        v163 = load v162
        v164 = get_local ptr { u256 }, user_principal_new, !9880
        v165 = load v164
        v166 = call update_base_principal_381(v161, v163, v165), !9883
        v167 = get_local ptr { u256 }, user_balance, !9884
        v168 = load v167
        v169 = call zero_277(), !9887
        v170 = call lt_377(v168, v169), !9890
        cbr v170, block2(), block3(), !9888

        block2():
        v171 = get_local ptr { u256 }, user_balance, !9891
        v172 = load v171
        v173 = call wrapping_neg_284(v172), !9894
        v174 = call try_from_280(v173), !9897
        v175 = call unwrap_278(v174), !9900
        v176 = get_local ptr { b256, u64, b256 }, __anon_8, !9901
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr b256, v177
        v179 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9901
        store v179 to v178, !9901
        v180 = const u64 1
        v181 = get_elem_ptr v176, ptr u64, v180
        v182 = const u64 0
        store v182 to v181, !9901
        v183 = const u64 2
        v184 = get_elem_ptr v176, ptr b256, v183
        v185 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9901
        store v185 to v184, !9901
        v186 = load v176
        v187 = call read_164(v186), !9904
        v188 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v187 to v188
        v189 = const u64 16
        v190 = get_elem_ptr v188, ptr u256, v189, !7431
        v191 = load v190
        v192 = call ge_178(v175, v191), !9907
        v193 = get_local ptr { u64 }, __anon_10, !1845
        v194 = const u64 0
        v195 = get_elem_ptr v193, ptr u64, v194, !1845
        v196 = const u64 9, !1845
        store v196 to v195, !1845
        v197 = load v193
        v198 = call require_112(v192, v197), !9910
        v199 = const unit ()
        br block4(v199)

        block3():
        v200 = const unit ()
        br block4(v200)

        block4(v201: ()):
        v202 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9911
        v203 = load v202
        v204 = get_local ptr u256, supply_amount, !9912
        v205 = load v204
        v206 = get_local ptr u256, repay_amount, !9913
        v207 = load v206
        v208 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, __anon_11, !9914
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr { u64, ( { b256 } | { b256 } ) }, v209
        store v203 to v210, !9914
        v211 = const u64 1
        v212 = get_elem_ptr v208, ptr u256, v211
        store v205 to v212, !9914
        v213 = const u64 2
        v214 = get_elem_ptr v208, ptr u256, v213
        store v207 to v214, !9914
        v215 = load v208
        v216 = call log_625(v215), !9917
        v217 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9918
        v218 = load v217
        v219 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_12, !9919
        v220 = const u64 0
        v221 = get_elem_ptr v219, ptr { u256, u256, u256, u256, u256, u256, u256 }, v220
        store v218 to v221, !9919
        v222 = load v219
        v223 = call log_393(v222), !9922
        v224 = const unit ()
        ret () v224
    }

    pub fn log_625(value !1912: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }) -> (), !9923 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }):
        v0 = call encode_626(value), !1916
        v1 = const u64 1940341185534100254
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_626(item !1917: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }) -> slice, !9924 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }):
        v0 = call new_100(), !9925
        v1 = call abi_encode_627(item, v0), !9926
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !9927
        ret slice v5
    }

    pub fn abi_encode_627(self !6812: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, buffer !6813: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9929 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !9930
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !9931
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6821
        store v5 to v6, !6821
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u256, v9, !9932
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9933
        v13 = load v12
        v14 = call abi_encode_374(v11, v13), !9936
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9937
        store v14 to v15, !9937
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u256, v18, !9938
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !9939
        v22 = load v21
        v23 = call abi_encode_374(v20, v22), !9942
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !9943
        store v23 to v24, !9943
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !9944
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn supply_collateral_628() -> (), !9947 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_11
        local { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 } __anon_12
        local { u64 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { u64 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { u64 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_8
        local { b256, u64, b256 } __anon_9
        local u64 amount
        local { b256 } asset_id
        local { u64, ( { b256 } | { b256 } ) } caller
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u64 total_collateral
        local u64 user_collateral

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9948
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9948
        store v3 to v2, !9948
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9948
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xec66306616d418a86169bf444e52fce3f5f320381ecf4fbfb9d6a1d21c15827e, !9948
        store v9 to v8, !9948
        v10 = load v0
        v11 = call read_116(v10), !9951
        v12 = call not_15(v11), !9954
        v13 = get_local ptr { u64 }, __anon_1, !1845
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !1845
        v16 = const u64 1, !1845
        store v16 to v15, !1845
        v17 = load v13
        v18 = call require_112(v12, v17), !9957
        v19 = call msg_amount_194(), !9960
        v20 = get_local ptr u64, amount, !9961
        store v19 to v20, !9961
        v21 = get_local ptr u64, amount, !9962
        v22 = load v21
        v23 = const u64 0, !9963
        v24 = call gt_40(v22, v23), !9966
        v25 = get_local ptr { u64 }, __anon_2, !1845
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !1845
        v28 = const u64 11, !1845
        store v28 to v27, !1845
        v29 = load v25
        v30 = call require_112(v24, v29), !9969
        v31 = call msg_asset_id_197(), !9972
        v32 = get_local ptr { b256 }, asset_id, !9973
        store v31 to v32, !9973
        v33 = get_local ptr { b256, u64, b256 }, __anon_3, !9974
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9974
        store v36 to v35, !9974
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9974
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9974
        store v42 to v41, !9974
        v43 = load v33
        v44 = get_local ptr { b256 }, asset_id, !9975
        v45 = load v44
        v46 = call get_301(v43, v45), !9978
        v47 = call read_294(v46), !9981
        v48 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9982
        store v47 to v48, !9982
        v49 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9983
        v50 = const u64 7
        v51 = get_elem_ptr v49, ptr bool, v50, !7703
        v52 = load v51
        v53 = call not_15(v52), !9986
        v54 = get_local ptr { u64 }, __anon_4, !1845
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr u64, v55, !1845
        v57 = const u64 1, !1845
        store v57 to v56, !1845
        v58 = load v54
        v59 = call require_112(v53, v58), !9989
        v60 = get_local ptr { b256, u64, b256 }, __anon_5, !9990
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr b256, v61
        v63 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !9990
        store v63 to v62, !9990
        v64 = const u64 1
        v65 = get_elem_ptr v60, ptr u64, v64
        v66 = const u64 0
        store v66 to v65, !9990
        v67 = const u64 2
        v68 = get_elem_ptr v60, ptr b256, v67
        v69 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !9990
        store v69 to v68, !9990
        v70 = load v60
        v71 = get_local ptr { b256 }, asset_id, !9991
        v72 = load v71
        v73 = call get_364(v70, v72), !9994
        v74 = call try_read_324(v73), !9997
        v75 = const u64 0, !9998
        v76 = call unwrap_or_292(v74, v75), !10001
        v77 = get_local ptr u64, amount, !10002
        v78 = load v77
        v79 = call add_45(v76, v78), !10005
        v80 = get_local ptr u64, total_collateral, !10006
        store v79 to v80, !10006
        v81 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10007
        v82 = const u64 6
        v83 = get_elem_ptr v81, ptr u64, v82, !7698
        v84 = load v83
        v85 = get_local ptr u64, total_collateral, !10008
        v86 = load v85
        v87 = call ge_193(v84, v86), !10011
        v88 = get_local ptr { u64 }, __anon_6, !1845
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr u64, v89, !1845
        v91 = const u64 7, !1845
        store v91 to v90, !1845
        v92 = load v88
        v93 = call require_112(v87, v92), !10014
        v94 = call msg_sender_347(), !10017
        v95 = call unwrap_346(v94), !10020
        v96 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10021
        store v95 to v96, !10021
        v97 = get_local ptr { b256, u64, b256 }, __anon_7, !10022
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr b256, v98
        v100 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10022
        store v100 to v99, !10022
        v101 = const u64 1
        v102 = get_elem_ptr v97, ptr u64, v101
        v103 = const u64 0
        store v103 to v102, !10022
        v104 = const u64 2
        v105 = get_elem_ptr v97, ptr b256, v104
        v106 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10022
        store v106 to v105, !10022
        v107 = load v97
        v108 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10023
        v109 = load v108
        v110 = get_local ptr { b256 }, asset_id, !10024
        v111 = load v110
        v112 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_8, !10025
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr { u64, ( { b256 } | { b256 } ) }, v113, !10025
        store v109 to v114, !10025
        v115 = const u64 1
        v116 = get_elem_ptr v112, ptr { b256 }, v115, !10025
        store v111 to v116, !10025
        v117 = load v112
        v118 = call get_325(v107, v117), !10028
        v119 = call try_read_324(v118), !10031
        v120 = const u64 0, !10032
        v121 = call unwrap_or_292(v119, v120), !10035
        v122 = get_local ptr u64, amount, !10036
        v123 = load v122
        v124 = call add_45(v121, v123), !10039
        v125 = get_local ptr u64, user_collateral, !10040
        store v124 to v125, !10040
        v126 = get_local ptr { b256, u64, b256 }, __anon_9, !10041
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr b256, v127
        v129 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10041
        store v129 to v128, !10041
        v130 = const u64 1
        v131 = get_elem_ptr v126, ptr u64, v130
        v132 = const u64 0
        store v132 to v131, !10041
        v133 = const u64 2
        v134 = get_elem_ptr v126, ptr b256, v133
        v135 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10041
        store v135 to v134, !10041
        v136 = load v126
        v137 = get_local ptr { b256 }, asset_id, !10042
        v138 = load v137
        v139 = get_local ptr u64, total_collateral, !10043
        v140 = load v139
        v141 = call insert_366(v136, v138, v140), !10046
        v142 = get_local ptr { b256, u64, b256 }, __anon_10, !10047
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr b256, v143
        v145 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10047
        store v145 to v144, !10047
        v146 = const u64 1
        v147 = get_elem_ptr v142, ptr u64, v146
        v148 = const u64 0
        store v148 to v147, !10047
        v149 = const u64 2
        v150 = get_elem_ptr v142, ptr b256, v149
        v151 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10047
        store v151 to v150, !10047
        v152 = load v142
        v153 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10048
        v154 = load v153
        v155 = get_local ptr { b256 }, asset_id, !10049
        v156 = load v155
        v157 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_11, !10050
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr { u64, ( { b256 } | { b256 } ) }, v158, !10050
        store v154 to v159, !10050
        v160 = const u64 1
        v161 = get_elem_ptr v157, ptr { b256 }, v160, !10050
        store v156 to v161, !10050
        v162 = load v157
        v163 = get_local ptr u64, user_collateral, !10051
        v164 = load v163
        v165 = call insert_362(v152, v162, v164), !10054
        v166 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10055
        v167 = load v166
        v168 = get_local ptr { b256 }, asset_id, !10056
        v169 = load v168
        v170 = get_local ptr u64, amount, !10057
        v171 = load v170
        v172 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, __anon_12, !10058
        v173 = const u64 0
        v174 = get_elem_ptr v172, ptr { u64, ( { b256 } | { b256 } ) }, v173
        store v167 to v174, !10058
        v175 = const u64 1
        v176 = get_elem_ptr v172, ptr { b256 }, v175
        store v169 to v176, !10058
        v177 = const u64 2
        v178 = get_elem_ptr v172, ptr u64, v177
        store v171 to v178, !10058
        v179 = load v172
        v180 = call log_629(v179), !10061
        v181 = const unit ()
        ret () v181
    }

    pub fn log_629(value !1912: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }) -> (), !10062 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }):
        v0 = call encode_630(value), !1916
        v1 = const u64 7026281871582427040
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_630(item !1917: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }) -> slice, !10063 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }):
        v0 = call new_100(), !10064
        v1 = call abi_encode_631(item, v0), !10065
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10066
        ret slice v5
    }

    pub fn abi_encode_631(self !10067: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, buffer !7454: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10070 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !10071
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !10073
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !10074
        store v5 to v6, !10074
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !10075
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !10076
        v13 = load v12
        v14 = call abi_encode_373(v11, v13), !10079
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !10080
        store v14 to v15, !10080
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !10081
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !10082
        v22 = load v21
        v23 = call abi_encode_99(v20, v22), !10085
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !10086
        store v23 to v24, !10086
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !10087
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn totals_collateral_632(asset_id !10088: { b256 }) -> u64, !10091 {
        local { b256, u64, b256 } __anon_0

        entry(asset_id: { b256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10092
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10092
        store v3 to v2, !10092
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10092
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10092
        store v9 to v8, !10092
        v10 = load v0
        v11 = call get_364(v10, asset_id), !10095
        v12 = call try_read_324(v11), !10098
        v13 = const u64 0, !10099
        v14 = call unwrap_or_292(v12, v13), !10102
        ret u64 v14
    }

    pub fn transfer_ownership_633(new_owner !10103: { u64, ( { b256 } | { b256 } ) }) -> (), !10106 {
        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call transfer_ownership_634(new_owner), !10109
        v1 = const unit ()
        ret () v1
    }

    pub fn transfer_ownership_634(new_owner !10110: { u64, ( { b256 } | { b256 } ) }) -> (), !10113 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } } __anon_1
        local { b256, u64, b256 } owner_key

        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call only_owner_467(), !10116
        v1 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !7055
        v2 = const u64 0, !10117
        v3 = call new_426(v1, v2, v1), !10120
        v4 = get_local ptr { b256, u64, b256 }, owner_key, !10121
        store v3 to v4, !10121
        v5 = get_local ptr { b256, u64, b256 }, owner_key, !10122
        v6 = load v5
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !7046
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !7046
        v10 = const u64 1, !7046
        store v10 to v9, !7046
        v11 = const u64 1
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v11, v12, !7046
        store new_owner to v13, !7046
        v14 = load v7
        v15 = call write_434(v6, v14), !10125
        v16 = call msg_sender_347(), !10128
        v17 = call unwrap_346(v16), !10131
        v18 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __anon_1, !10132
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { u64, ( { b256 } | { b256 } ) }, v19
        store new_owner to v20, !10132
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr { u64, ( { b256 } | { b256 } ) }, v21
        store v17 to v22, !10132
        v23 = load v18
        v24 = call log_635(v23), !10135
        v25 = const unit ()
        ret () v25
    }

    pub fn log_635(value !1912: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }) -> (), !10136 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call encode_636(value), !1916
        v1 = const u64 12970362301975156672
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_636(item !1917: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }) -> slice, !10137 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_100(), !10138
        v1 = call abi_encode_637(item, v0), !10139
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10140
        ret slice v5
    }

    pub fn abi_encode_637(self !7654: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, buffer !7655: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10142 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !10143
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !10145
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !10146
        store v5 to v6, !10146
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !10147
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !10148
        v13 = load v12
        v14 = call abi_encode_370(v11, v13), !10151
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !10152
        store v14 to v15, !10152
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !10153
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn decode_638(self !1336: ptr { u64 }) -> { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, !10154 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_639(self), !10155
        ret { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } v0
    }

    pub fn abi_decode_639(buffer !1343: ptr { u64 }) -> { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, !10156 {
        local { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_407(buffer), !10157
        v1 = call abi_decode_463(buffer), !10158
        v2 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { b256 }, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } v7
    }

    pub fn update_collateral_asset_640(asset_id !10159: { b256 }, configuration !10160: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !10163 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } __anon_3

        entry(asset_id: { b256 }, configuration: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = call only_owner_467(), !10166
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !10167
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10167
        store v4 to v3, !10167
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !10167
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10167
        store v10 to v9, !10167
        v11 = load v1
        v12 = call get_301(v11, asset_id), !10170
        v13 = call try_read_473(v12), !10173
        v14 = call is_some_641(v13), !10176
        v15 = get_local ptr { u64 }, __anon_1, !1845
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1845
        v18 = const u64 12, !1845
        store v18 to v17, !1845
        v19 = load v15
        v20 = call require_112(v14, v19), !10179
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !10180
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10180
        store v24 to v23, !10180
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !10180
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10180
        store v30 to v29, !10180
        v31 = load v21
        v32 = call insert_474(v31, asset_id, configuration), !10183
        v33 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, __anon_3, !10184
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34
        store asset_id to v35, !10184
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v36
        store configuration to v37, !10184
        v38 = load v33
        v39 = call log_642(v38), !10187
        v40 = const unit ()
        ret () v40
    }

    pub fn is_some_641(self !10188: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }) -> bool, !10191 {
        local { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) } __matched_value_2

        entry(self: { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }):
        v0 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_2, !10192
        store self to v0, !10192
        v1 = get_local ptr { u64, ( () | { { b256 }, b256, u64, u256, u256, u256, u64, bool } ) }, __matched_value_2, !10193
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !10193
        v4 = load v3
        v5 = const u64 1, !10193
        v6 = call eq_16(v4, v5), !10196
        cbr v6, block0(), block1(), !10194

        block0():
        v7 = const bool true, !10197
        br block2(v7)

        block1():
        v8 = const bool false, !10198
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn log_642(value !1912: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }) -> (), !10199 {
        entry(value: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }):
        v0 = call encode_643(value), !1916
        v1 = const u64 7739866021742362880
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_643(item !1917: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }) -> slice, !10200 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }):
        v0 = call new_100(), !10201
        v1 = call abi_encode_644(item, v0), !10202
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10203
        ret slice v5
    }

    pub fn abi_encode_644(self !9709: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, buffer !9710: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10205 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !10206
        v4 = load v3
        v5 = call abi_encode_373(v4, buffer), !10207
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9718
        store v5 to v6, !9718
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v9, !10208
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !10148
        v13 = load v12
        v14 = call abi_encode_483(v11, v13), !10210
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !10211
        store v14 to v15, !10211
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !10153
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn decode_645(self !1336: ptr { u64 }) -> { { { u64, u64 }, u64 } }, !10212 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_646(self), !10213
        ret { { { u64, u64 }, u64 } } v0
    }

    pub fn abi_decode_646(buffer !7446: ptr { u64 }) -> { { { u64, u64 }, u64 } }, !10214 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_73(buffer), !10215
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn update_fee_647(update_data !10216: { { u64, u64 }, u64 }) -> u64, !10219 {
        entry(update_data: { { u64, u64 }, u64 }):
        v0 = call update_fee_internal_648(update_data), !10222
        ret u64 v0
    }

    fn update_fee_internal_648(update_data !10223: { { u64, u64 }, u64 }) -> u64, !10226 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64, u64 } __anon_2
        local slice __anon_3
        local { { { u64, u64 }, u64 } } __anon_4
        local { b256 } contract_id
        local u64 fee

        entry(update_data: { { u64, u64 }, u64 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !10227
        store v3 to v2, !10227
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10227
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !10227
        store v9 to v8, !10227
        v10 = load v0
        v11 = call read_183(v10), !10230
        v12 = get_local ptr { b256 }, contract_id, !10231
        store v11 to v12, !10231
        v13 = get_local ptr { b256 }, contract_id, !10232
        v14 = load v13
        v15 = call zero_191(), !10235
        v16 = call neq_190(v14, v15), !10238
        v17 = get_local ptr { u64 }, __anon_1, !1845
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1845
        v20 = const u64 16, !1845
        store v20 to v19, !1845
        v21 = load v17
        v22 = call require_112(v16, v21), !10241
        v23 = get_local ptr { b256 }, contract_id, !10242
        v24 = load v23
        v25 = call bits_228(v24), !10245
        v26 = const string<10> "update_fee"
        v27 = ptr_to_int v26 to u64, !10246
        v28 = get_local ptr { u64, u64 }, __anon_2, !10246
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30, !10246
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        v33 = const u64 10
        store v33 to v32, !10246
        v34 = get_local ptr slice, __anon_3, !10246
        mem_copy_bytes v34, v28, 16
        v35 = load v34
        v36 = get_local ptr { { { u64, u64 }, u64 } }, __anon_4
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { { u64, u64 }, u64 }, v37
        store update_data to v38
        v39 = load v36
        v40 = const u64 0
        v41 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        v42 = const u64 18446744073709551615
        v43 = call contract_call_649(v25, v35, v39, v40, v41, v42), !10247
        v44 = get_local ptr u64, fee, !10248
        store v43 to v44, !10248
        v45 = get_local ptr u64, fee, !10249
        v46 = load v45
        ret u64 v46
    }

    pub fn contract_call_649(contract_id !3414: b256, method_name !3415: slice, args !3416: { { { u64, u64 }, u64 } }, coins !3417: u64, asset_id !3418: b256, gas !3419: u64) -> u64, !10250 {
        local { b256, u64, u64 } __anon_0
        local b256 __anon_1
        local mut { u64 } buffer
        local slice first_parameter
        local u64 len
        local slice params
        local u64 ptr
        local slice second_parameter

        entry(contract_id: b256, method_name: slice, args: { { { u64, u64 }, u64 } }, coins: u64, asset_id: b256, gas: u64):
        v0 = call encode_201(method_name), !10251
        v1 = get_local ptr slice, first_parameter, !3426
        store v0 to v1, !3426
        v2 = call encode_650(args), !10252
        v3 = get_local ptr slice, second_parameter, !3430
        store v2 to v3, !3430
        v4 = get_local ptr slice, first_parameter, !3431
        v5 = load v4
        v6 = call ptr_11(v5), !10253
        v7 = asm(a: v6) -> u64 a, !3435 {
        }
        v8 = get_local ptr slice, second_parameter, !3436
        v9 = load v8
        v10 = call ptr_11(v9), !10254
        v11 = asm(a: v10) -> u64 a, !3440 {
        }
        v12 = get_local ptr { b256, u64, u64 }, __anon_0, !3441
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr b256, v13, !3441
        store contract_id to v14, !3441
        v15 = const u64 1
        v16 = get_elem_ptr v12, ptr u64, v15, !3441
        store v7 to v16, !3441
        v17 = const u64 2
        v18 = get_elem_ptr v12, ptr u64, v17, !3441
        store v11 to v18, !3441
        v19 = load v12
        v20 = call encode_225(v19), !10255
        v21 = get_local ptr slice, params, !3445
        store v20 to v21, !3445
        v22 = get_local ptr slice, params, !3446
        v23 = load v22
        v24 = call ptr_11(v23), !10256
        v25 = get_local ptr b256, __anon_1
        store asset_id to v25
        v26 = get_local ptr b256, __anon_1
        v27 = contract_call ptr ()  v24, coins, v26, gas, !3450
        v28 = load v27
        v29 = asm() -> u64 ret, !3451 {
        }
        v30 = get_local ptr u64, ptr, !3452
        store v29 to v30, !3452
        v31 = asm() -> u64 retl, !3453 {
        }
        v32 = get_local ptr u64, len, !3454
        store v31 to v32, !3454
        v33 = get_local ptr u64, ptr, !3455
        v34 = load v33
        v35 = get_local ptr u64, len, !3456
        v36 = load v35
        v37 = call from_parts_1(v34, v36), !10257
        v38 = get_local ptr { u64 }, buffer, !3460
        store v37 to v38, !3460
        v39 = get_local ptr { u64 }, buffer, !3461
        v40 = call abi_decode_2(v39), !10258
        ret u64 v40
    }

    pub fn encode_650(item !1917: { { { u64, u64 }, u64 } }) -> slice, !10259 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { { u64, u64 }, u64 } }):
        v0 = call new_100(), !10260
        v1 = call abi_encode_651(item, v0), !10261
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10262
        ret slice v5
    }

    pub fn abi_encode_651(self !5530: { { { u64, u64 }, u64 } }, buffer !5531: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10263 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { { u64, u64 }, u64 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !5535
        v4 = load v3
        v5 = call abi_encode_217(v4, buffer), !10264
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !5539
        store v5 to v6, !5539
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !5540
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn decode_652(self !1336: ptr { u64 }) -> { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, !10265 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_653(self), !10266
        ret { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } v0
    }

    pub fn abi_decode_653(buffer !7446: ptr { u64 }) -> { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, !10267 {
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_405(buffer), !10268
        v1 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } v4
    }

    pub fn update_market_configuration_654(configuration !10269: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }) -> (), !10272 {
        local { b256, u64, b256 } __anon_0
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } __anon_5
        local mut { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } configuration_

        entry(configuration: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        v0 = call only_owner_467(), !10275
        v1 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10276
        store configuration to v1, !10276
        v2 = get_local ptr { b256, u64, b256 }, __anon_0, !10277
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr b256, v3
        v5 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10277
        store v5 to v4, !10277
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !10277
        v9 = const u64 2
        v10 = get_elem_ptr v2, ptr b256, v9
        v11 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10277
        store v11 to v10, !10277
        v12 = load v2
        v13 = call read_164(v12), !10280
        v14 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_1
        store v13 to v14
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { b256 }, v15, !7354
        v17 = load v16
        v18 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10281
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { b256 }, v19, !10281
        store v17 to v20, !10281
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !10282
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10282
        store v24 to v23, !10282
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !10282
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10282
        store v30 to v29, !10282
        v31 = load v21
        v32 = call read_164(v31), !10285
        v33 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v32 to v33
        v34 = const u64 12
        v35 = get_elem_ptr v33, ptr u256, v34, !6401
        v36 = load v35
        v37 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10286
        v38 = const u64 12
        v39 = get_elem_ptr v37, ptr u256, v38, !10286
        store v36 to v39, !10286
        v40 = get_local ptr { b256, u64, b256 }, __anon_4, !10287
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr b256, v41
        v43 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10287
        store v43 to v42, !10287
        v44 = const u64 1
        v45 = get_elem_ptr v40, ptr u64, v44
        v46 = const u64 0
        store v46 to v45, !10287
        v47 = const u64 2
        v48 = get_elem_ptr v40, ptr b256, v47
        v49 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10287
        store v49 to v48, !10287
        v50 = load v40
        v51 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10288
        v52 = load v51
        v53 = call write_440(v50, v52), !10291
        v54 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10292
        v55 = load v54
        v56 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, __anon_5, !10293
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v57
        store v55 to v58, !10293
        v59 = load v56
        v60 = call log_457(v59), !10296
        v61 = const unit ()
        ret () v61
    }

    pub fn decode_655(self !1336: ptr { u64 }) -> { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !10297 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_656(self), !10298
        ret { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v0
    }

    pub fn abi_decode_656(buffer !7446: ptr { u64 }) -> { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !10299 {
        local { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_46(buffer), !10300
        v1 = get_local ptr { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, __anon_0, !7453
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v2, !7453
        store v0 to v3, !7453
        v4 = load v1
        ret { { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v4
    }

    pub fn update_price_feeds_if_necessary_657(price_data_update !10301: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !10304 {
        entry(price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !10307
        v1 = call update_price_feeds_if_necessary_internal_182(price_data_update), !10310
        v2 = const unit ()
        ret () v2
    }

    pub fn decode_658(self !1336: ptr { u64 }) -> { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !10311 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_659(self), !10312
        ret { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v0
    }

    pub fn abi_decode_659(buffer !1343: ptr { u64 }) -> { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !10313 {
        local { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_2(buffer), !10314
        v1 = call abi_decode_46(buffer), !10315
        v2 = get_local ptr { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v7
    }

    pub fn withdraw_base_660(amount !10316: u64, price_data_update !10317: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !10320 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_10
        local { u64 } __anon_11
        local { b256, u64, b256 } __anon_12
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_13
        local { u64 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { u64, ( { b256 } | { b256 } ) }, u256, u256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9
        local { u256, u256 } __tuple_2
        local { u256, u256 } __tuple_2_
        local u256 borrow_amount
        local { u64, ( { b256 } | { b256 } ) } caller
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local { u256 } user_balance
        local { { u256 }, u256, u256 } user_basic
        local { u256 } user_principal
        local { u256 } user_principal_new
        local u256 withdraw_amount

        entry(amount: u64, price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !10323
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !10324
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !10324
        store v4 to v3, !10324
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 1
        store v7 to v6, !10324
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x06e9c1c2a569f4cd31c43ea64b51b66948b0090a8ba8d8d5b0a61bf54b1f4f78, !10324
        store v10 to v9, !10324
        v11 = load v1
        v12 = call read_116(v11), !10327
        v13 = call not_15(v12), !10330
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !10333
        v20 = const u64 0, !10334
        v21 = call gt_40(amount, v20), !10337
        v22 = get_local ptr { u64 }, __anon_2, !1845
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !1845
        v25 = const u64 11, !1845
        store v25 to v24, !1845
        v26 = load v22
        v27 = call require_112(v21, v26), !10340
        v28 = call accrue_internal_131(), !10343
        v29 = call msg_sender_347(), !10346
        v30 = call unwrap_346(v29), !10349
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10350
        store v30 to v31, !10350
        v32 = get_local ptr { b256, u64, b256 }, __anon_3, !10351
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr b256, v33
        v35 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !10351
        store v35 to v34, !10351
        v36 = const u64 1
        v37 = get_elem_ptr v32, ptr u64, v36
        v38 = const u64 0
        store v38 to v37, !10351
        v39 = const u64 2
        v40 = get_elem_ptr v32, ptr b256, v39
        v41 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !10351
        store v41 to v40, !10351
        v42 = load v32
        v43 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10352
        v44 = load v43
        v45 = call get_239(v42, v44), !10355
        v46 = call try_read_233(v45), !10358
        v47 = call default_270(), !10361
        v48 = call unwrap_or_232(v46, v47), !10364
        v49 = get_local ptr { { u256 }, u256, u256 }, user_basic, !10365
        store v48 to v49, !10365
        v50 = get_local ptr { { u256 }, u256, u256 }, user_basic, !10366
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr { u256 }, v51, !3680
        v53 = load v52
        v54 = get_local ptr { u256 }, user_principal, !10367
        store v53 to v54, !10367
        v55 = get_local ptr { u256 }, user_principal, !10368
        v56 = load v55
        v57 = call present_value_273(v56), !10371
        v58 = call from_140(amount), !10374
        v59 = call try_from_282(v58), !10377
        v60 = call unwrap_281(v59), !10380
        v61 = call subtract_392(v57, v60), !10383
        v62 = get_local ptr { u256 }, user_balance, !10384
        store v61 to v62, !10384
        v63 = get_local ptr { u256 }, user_balance, !10385
        v64 = load v63
        v65 = call principal_value_378(v64), !10388
        v66 = get_local ptr { u256 }, user_principal_new, !10389
        store v65 to v66, !10389
        v67 = get_local ptr { u256 }, user_principal, !10390
        v68 = load v67
        v69 = get_local ptr { u256 }, user_principal_new, !10391
        v70 = load v69
        v71 = call withdraw_and_borrow_amount_661(v68, v70), !10394
        v72 = get_local ptr { u256, u256 }, __tuple_2, !10395
        store v71 to v72, !10395
        v73 = get_local ptr { u256, u256 }, __tuple_2, !10395
        v74 = load v73
        v75 = get_local ptr { u256, u256 }, __tuple_2_, !10395
        store v74 to v75, !10395
        v76 = get_local ptr { u256, u256 }, __tuple_2_, !10395
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u256, v77, !10395
        v79 = load v78
        v80 = get_local ptr u256, withdraw_amount, !10395
        store v79 to v80, !10395
        v81 = get_local ptr { u256, u256 }, __tuple_2_, !10395
        v82 = const u64 1
        v83 = get_elem_ptr v81, ptr u256, v82, !10395
        v84 = load v83
        v85 = get_local ptr u256, borrow_amount, !10395
        store v84 to v85, !10395
        v86 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10396
        v87 = load v86
        v88 = get_local ptr u256, withdraw_amount, !10397
        v89 = load v88
        v90 = get_local ptr u256, borrow_amount, !10398
        v91 = load v90
        v92 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, __anon_4, !10399
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { u64, ( { b256 } | { b256 } ) }, v93
        store v87 to v94, !10399
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr u256, v95
        store v89 to v96, !10399
        v97 = const u64 2
        v98 = get_elem_ptr v92, ptr u256, v97
        store v91 to v98, !10399
        v99 = load v92
        v100 = call log_662(v99), !10402
        v101 = get_local ptr { b256, u64, b256 }, __anon_5, !10403
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr b256, v102
        v104 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10403
        store v104 to v103, !10403
        v105 = const u64 1
        v106 = get_elem_ptr v101, ptr u64, v105
        v107 = const u64 0
        store v107 to v106, !10403
        v108 = const u64 2
        v109 = get_elem_ptr v101, ptr b256, v108
        v110 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10403
        store v110 to v109, !10403
        v111 = load v101
        v112 = call read_132(v111), !10406
        v113 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10407
        store v112 to v113, !10407
        v114 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10408
        v115 = const u64 4
        v116 = get_elem_ptr v114, ptr u256, v115, !2492
        v117 = load v116
        v118 = get_local ptr u256, withdraw_amount, !10409
        v119 = load v118
        v120 = call subtract_125(v117, v119), !10412
        v121 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10410
        v122 = const u64 4
        v123 = get_elem_ptr v121, ptr u256, v122, !10410
        store v120 to v123, !10410
        v124 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10413
        v125 = const u64 5
        v126 = get_elem_ptr v124, ptr u256, v125, !2524
        v127 = load v126
        v128 = get_local ptr u256, borrow_amount, !10414
        v129 = load v128
        v130 = call add_124(v127, v129), !10417
        v131 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10415
        v132 = const u64 5
        v133 = get_elem_ptr v131, ptr u256, v132, !10415
        store v130 to v133, !10415
        v134 = get_local ptr { b256, u64, b256 }, __anon_6, !10418
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr b256, v135
        v137 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10418
        store v137 to v136, !10418
        v138 = const u64 1
        v139 = get_elem_ptr v134, ptr u64, v138
        v140 = const u64 0
        store v140 to v139, !10418
        v141 = const u64 2
        v142 = get_elem_ptr v134, ptr b256, v141
        v143 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10418
        store v143 to v142, !10418
        v144 = load v134
        v145 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10419
        v146 = load v145
        v147 = call write_179(v144, v146), !10422
        v148 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10423
        v149 = load v148
        v150 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_7, !10424
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr { u256, u256, u256, u256, u256, u256, u256 }, v151
        store v149 to v152, !10424
        v153 = load v150
        v154 = call log_393(v153), !10427
        v155 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10428
        v156 = load v155
        v157 = get_local ptr { { u256 }, u256, u256 }, user_basic, !10429
        v158 = load v157
        v159 = get_local ptr { u256 }, user_principal_new, !10430
        v160 = load v159
        v161 = call update_base_principal_381(v156, v158, v160), !10433
        v162 = get_local ptr { u256 }, user_balance, !10434
        v163 = load v162
        v164 = call zero_277(), !10437
        v165 = call lt_377(v163, v164), !10440
        cbr v165, block0(), block1(), !10438

        block0():
        v166 = get_local ptr { u256 }, user_balance, !10441
        v167 = load v166
        v168 = call wrapping_neg_284(v167), !10444
        v169 = call try_from_280(v168), !10447
        v170 = call unwrap_278(v169), !10450
        v171 = get_local ptr { b256, u64, b256 }, __anon_8, !10451
        v172 = const u64 0
        v173 = get_elem_ptr v171, ptr b256, v172
        v174 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10451
        store v174 to v173, !10451
        v175 = const u64 1
        v176 = get_elem_ptr v171, ptr u64, v175
        v177 = const u64 0
        store v177 to v176, !10451
        v178 = const u64 2
        v179 = get_elem_ptr v171, ptr b256, v178
        v180 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10451
        store v180 to v179, !10451
        v181 = load v171
        v182 = call read_164(v181), !10454
        v183 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v182 to v183
        v184 = const u64 16
        v185 = get_elem_ptr v183, ptr u256, v184, !7431
        v186 = load v185
        v187 = call ge_178(v170, v186), !10457
        v188 = get_local ptr { u64 }, __anon_10, !1845
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !1845
        v191 = const u64 9, !1845
        store v191 to v190, !1845
        v192 = load v188
        v193 = call require_112(v187, v192), !10460
        v194 = call update_price_feeds_if_necessary_internal_182(price_data_update), !10463
        v195 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10464
        v196 = load v195
        v197 = call is_borrow_collateralized_665(v196), !10467
        v198 = get_local ptr { u64 }, __anon_11, !1845
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr u64, v199, !1845
        v201 = const u64 8, !1845
        store v201 to v200, !1845
        v202 = load v198
        v203 = call require_112(v197, v202), !10470
        v204 = const unit ()
        br block2(v204)

        block1():
        v205 = const unit ()
        br block2(v205)

        block2(v206: ()):
        v207 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10471
        v208 = load v207
        v209 = get_local ptr { b256, u64, b256 }, __anon_12, !10472
        v210 = const u64 0
        v211 = get_elem_ptr v209, ptr b256, v210
        v212 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10472
        store v212 to v211, !10472
        v213 = const u64 1
        v214 = get_elem_ptr v209, ptr u64, v213
        v215 = const u64 0
        store v215 to v214, !10472
        v216 = const u64 2
        v217 = get_elem_ptr v209, ptr b256, v216
        v218 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10472
        store v218 to v217, !10472
        v219 = load v209
        v220 = call read_164(v219), !10475
        v221 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_13
        store v220 to v221
        v222 = const u64 0
        v223 = get_elem_ptr v221, ptr { b256 }, v222, !7354
        v224 = load v223
        v225 = call transfer_506(v208, v224, amount), !10478
        v226 = const unit ()
        ret () v226
    }

    fn withdraw_and_borrow_amount_661(old_principal !10479: { u256 }, new_principal !10480: { u256 }) -> { u256, u256 }, !10483 {
        local { u256, u256 } __anon_0
        local { u256, u256 } __anon_1
        local { u256, u256 } __anon_2
        local { u256, u256 } __anon_3

        entry(old_principal: { u256 }, new_principal: { u256 }):
        v0 = call gt_275(new_principal, old_principal), !10486
        cbr v0, block0(), block1(), !10484

        block0():
        v1 = call zero_160(), !10489
        v2 = call zero_160(), !10492
        v3 = get_local ptr { u256, u256 }, __anon_0, !10493
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u256, v4, !10493
        store v1 to v5, !10493
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u256, v6, !10493
        store v2 to v7, !10493
        v8 = load v3
        ret { u256, u256 } v8, !10494

        block1():
        v9 = const unit ()
        br block2(v9)

        block2(v10: ()):
        v11 = call zero_277(), !10497
        v12 = call ge_274(new_principal, v11), !10500
        cbr v12, block3(), block4(), !10498

        block3():
        v13 = call subtract_392(old_principal, new_principal), !10503
        v14 = call try_into_279(v13), !10506
        v15 = call unwrap_278(v14), !10509
        v16 = call zero_160(), !10512
        v17 = get_local ptr { u256, u256 }, __anon_1, !10513
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u256, v18, !10513
        store v15 to v19, !10513
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u256, v20, !10513
        store v16 to v21, !10513
        v22 = load v17
        ret { u256, u256 } v22, !10514

        block4():
        v23 = call zero_277(), !10517
        v24 = call le_391(old_principal, v23), !10520
        cbr v24, block5(), block6(), !10518

        block5():
        v25 = call zero_160(), !10523
        v26 = call subtract_392(old_principal, new_principal), !10526
        v27 = call try_into_279(v26), !10529
        v28 = call unwrap_278(v27), !10532
        v29 = get_local ptr { u256, u256 }, __anon_2, !10533
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u256, v30, !10533
        store v25 to v31, !10533
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u256, v32, !10533
        store v28 to v33, !10533
        v34 = load v29
        ret { u256, u256 } v34, !10534

        block6():
        v35 = call try_into_279(old_principal), !10537
        v36 = call unwrap_278(v35), !10540
        v37 = call wrapping_neg_284(new_principal), !10543
        v38 = call try_into_279(v37), !10546
        v39 = call unwrap_278(v38), !10549
        v40 = get_local ptr { u256, u256 }, __anon_3, !10550
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u256, v41, !10550
        store v36 to v42, !10550
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u256, v43, !10550
        store v39 to v44, !10550
        v45 = load v40
        ret { u256, u256 } v45, !10551

        block7():
        br block5()

        block8():
        br block3()
    }

    pub fn log_662(value !1912: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }) -> (), !10552 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }):
        v0 = call encode_663(value), !1916
        v1 = const u64 4305272899477449480
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_663(item !1917: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }) -> slice, !10553 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }):
        v0 = call new_100(), !10554
        v1 = call abi_encode_664(item, v0), !10555
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10556
        ret slice v5
    }

    pub fn abi_encode_664(self !6067: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, buffer !6068: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10558 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !10559
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !10560
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6077
        store v5 to v6, !6077
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u256, v9, !10561
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !10148
        v13 = load v12
        v14 = call abi_encode_374(v11, v13), !10563
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !10564
        store v14 to v15, !10564
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u256, v18, !10565
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !10566
        v22 = load v21
        v23 = call abi_encode_374(v20, v22), !10569
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !10570
        store v23 to v24, !10570
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !8464
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    fn is_borrow_collateralized_665(account !10571: { u64, ( { b256 } | { b256 } ) }) -> bool, !10574 {
        local { b256, u64, b256 } __anon_0
        local { { u256 }, u256, u256 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_11
        local { u64 } __anon_12
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_6
        local { u64 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9
        local u256 amount
        local u256 balance
        local u256 base_scale
        local { u64, u64, u64, u64 } base_token_price
        local u256 base_token_price_
        local u256 base_token_price_scale
        local u256 borrow_amount
        local mut u256 borrow_limit
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local mut u64 index
        local u64 len
        local { u256 } present
        local { u64, u64, u64, u64 } price
        local u256 price_
        local u256 price_scale
        local { u256 } principal

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10575
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !10575
        store v3 to v2, !10575
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10575
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !10575
        store v9 to v8, !10575
        v10 = load v0
        v11 = call get_239(v10, account), !10578
        v12 = call try_read_233(v11), !10581
        v13 = call default_270(), !10584
        v14 = call unwrap_or_232(v12, v13), !10587
        v15 = get_local ptr { { u256 }, u256, u256 }, __anon_1
        store v14 to v15
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr { u256 }, v16, !3680
        v18 = load v17
        v19 = get_local ptr { u256 }, principal, !10588
        store v18 to v19, !10588
        v20 = get_local ptr { u256 }, principal, !10589
        v21 = load v20
        v22 = call zero_277(), !10592
        v23 = call ge_274(v21, v22), !10595
        cbr v23, block0(), block1(), !10593

        block0():
        v24 = const bool true, !10596
        ret bool v24, !10597

        block1():
        v25 = const unit ()
        br block2(v25)

        block2(v26: ()):
        v27 = get_local ptr { u256 }, principal, !10598
        v28 = load v27
        v29 = call present_value_273(v28), !10601
        v30 = get_local ptr { u256 }, present, !10602
        store v29 to v30, !10602
        v31 = get_local ptr u256, borrow_limit, !10603
        v32 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !10604
        store v32 to v31, !10603
        v33 = get_local ptr u64, index, !10605
        v34 = const u64 0, !10606
        store v34 to v33, !10605
        v35 = get_local ptr { b256, u64, b256 }, __anon_2, !10607
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr b256, v36
        v38 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !10607
        store v38 to v37, !10607
        v39 = const u64 1
        v40 = get_elem_ptr v35, ptr u64, v39
        v41 = const u64 0
        store v41 to v40, !10607
        v42 = const u64 2
        v43 = get_elem_ptr v35, ptr b256, v42
        v44 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !10607
        store v44 to v43, !10607
        v45 = load v35
        v46 = call len_291(v45), !10610
        v47 = get_local ptr u64, len, !10611
        store v46 to v47, !10611
        br while()

        while():
        v48 = get_local ptr u64, index, !10612
        v49 = load v48
        v50 = get_local ptr u64, len, !10613
        v51 = load v50
        v52 = call lt_26(v49, v51), !10616
        cbr v52, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v53 = get_local ptr { b256, u64, b256 }, __anon_3, !10617
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr b256, v54
        v56 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10617
        store v56 to v55, !10617
        v57 = const u64 1
        v58 = get_elem_ptr v53, ptr u64, v57
        v59 = const u64 0
        store v59 to v58, !10617
        v60 = const u64 2
        v61 = get_elem_ptr v53, ptr b256, v60
        v62 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10617
        store v62 to v61, !10617
        v63 = load v53
        v64 = get_local ptr { b256, u64, b256 }, __anon_4, !10618
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr b256, v65
        v67 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !10618
        store v67 to v66, !10618
        v68 = const u64 1
        v69 = get_elem_ptr v64, ptr u64, v68
        v70 = const u64 0
        store v70 to v69, !10618
        v71 = const u64 2
        v72 = get_elem_ptr v64, ptr b256, v71
        v73 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !10618
        store v73 to v72, !10618
        v74 = load v64
        v75 = get_local ptr u64, index, !10619
        v76 = load v75
        v77 = call get_315(v74, v76), !10622
        v78 = call unwrap_314(v77), !10625
        v79 = call read_307(v78), !10628
        v80 = call get_301(v63, v79), !10631
        v81 = call read_294(v80), !10634
        v82 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10635
        store v81 to v82, !10635
        v83 = get_local ptr { b256, u64, b256 }, __anon_5, !10636
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr b256, v84
        v86 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10636
        store v86 to v85, !10636
        v87 = const u64 1
        v88 = get_elem_ptr v83, ptr u64, v87
        v89 = const u64 0
        store v89 to v88, !10636
        v90 = const u64 2
        v91 = get_elem_ptr v83, ptr b256, v90
        v92 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10636
        store v92 to v91, !10636
        v93 = load v83
        v94 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10637
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr { b256 }, v95, !3743
        v97 = load v96
        v98 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_6, !10638
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr { u64, ( { b256 } | { b256 } ) }, v99, !10638
        store account to v100, !10638
        v101 = const u64 1
        v102 = get_elem_ptr v98, ptr { b256 }, v101, !10638
        store v97 to v102, !10638
        v103 = load v98
        v104 = call get_325(v93, v103), !10641
        v105 = call try_read_324(v104), !10644
        v106 = const u64 0, !10645
        v107 = call unwrap_or_292(v105, v106), !10648
        v108 = call into_139(v107), !10651
        v109 = get_local ptr u256, balance, !10652
        store v108 to v109, !10652
        v110 = get_local ptr u256, balance, !10653
        v111 = load v110
        v112 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !10654
        v113 = call eq_153(v111, v112), !10657
        cbr v113, block3(), block4(), !10655

        block3():
        v114 = get_local ptr u64, index, !10658
        v115 = load v114
        v116 = const u64 1, !10659
        v117 = call add_45(v115, v116), !10662
        v118 = get_local ptr u64, index, !10660
        store v117 to v118, !10660
        br while()

        block4():
        v119 = const unit ()
        br block5(v119)

        block5(v120: ()):
        v121 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10663
        v122 = const u64 1
        v123 = get_elem_ptr v121, ptr b256, v122, !3797
        v124 = load v123
        v125 = get_local ptr { u64 }, __anon_7, !3798
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126, !3798
        v128 = const u64 0, !3798
        store v128 to v127, !3798
        v129 = load v125
        v130 = call get_price_internal_331(v124, v129), !10666
        v131 = get_local ptr { u64, u64, u64, u64 }, price, !10667
        store v130 to v131, !10667
        v132 = const u64 10, !10668
        v133 = call from_140(v132), !10671
        v134 = get_local ptr { u64, u64, u64, u64 }, price, !10672
        v135 = const u64 1
        v136 = get_elem_ptr v134, ptr u64, v135, !3805
        v137 = load v136
        v138 = call pow_172(v133, v137), !10675
        v139 = get_local ptr u256, price_scale, !10676
        store v138 to v139, !10676
        v140 = get_local ptr { u64, u64, u64, u64 }, price, !10677
        v141 = const u64 2
        v142 = get_elem_ptr v140, ptr u64, v141, !3817
        v143 = load v142
        v144 = call from_140(v143), !10680
        v145 = get_local ptr u256, price_, !10681
        store v144 to v145, !10681
        v146 = const u64 10, !10682
        v147 = call from_140(v146), !10685
        v148 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10686
        v149 = const u64 2
        v150 = get_elem_ptr v148, ptr u64, v149, !3827
        v151 = load v150
        v152 = call pow_172(v147, v151), !10689
        v153 = get_local ptr u256, collateral_scale, !10690
        store v152 to v153, !10690
        v154 = const u64 10, !10691
        v155 = call from_140(v154), !10694
        v156 = get_local ptr { b256, u64, b256 }, __anon_8, !10695
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr b256, v157
        v159 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10695
        store v159 to v158, !10695
        v160 = const u64 1
        v161 = get_elem_ptr v156, ptr u64, v160
        v162 = const u64 0
        store v162 to v161, !10695
        v163 = const u64 2
        v164 = get_elem_ptr v156, ptr b256, v163
        v165 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10695
        store v165 to v164, !10695
        v166 = load v156
        v167 = call read_164(v166), !10698
        v168 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v167 to v168
        v169 = const u64 1
        v170 = get_elem_ptr v168, ptr u64, v169, !2486
        v171 = load v170
        v172 = call pow_172(v155, v171), !10701
        v173 = get_local ptr u256, base_scale, !10702
        store v172 to v173, !10702
        v174 = get_local ptr u256, balance, !10703
        v175 = load v174
        v176 = get_local ptr u256, price_, !10704
        v177 = load v176
        v178 = call multiply_158(v175, v177), !10707
        v179 = get_local ptr u256, price_scale, !10708
        v180 = load v179
        v181 = call divide_157(v178, v180), !10711
        v182 = get_local ptr u256, amount, !10712
        store v181 to v182, !10712
        v183 = get_local ptr u256, borrow_limit, !10713
        v184 = load v183
        v185 = get_local ptr u256, amount, !10714
        v186 = load v185
        v187 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10715
        v188 = const u64 3
        v189 = get_elem_ptr v187, ptr u256, v188, !7684
        v190 = load v189
        v191 = call multiply_158(v186, v190), !10718
        v192 = get_local ptr u256, base_scale, !10719
        v193 = load v192
        v194 = call multiply_158(v191, v193), !10722
        v195 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v196 = call divide_157(v194, v195), !10725
        v197 = get_local ptr u256, collateral_scale, !10726
        v198 = load v197
        v199 = call divide_157(v196, v198), !10729
        v200 = call add_124(v184, v199), !10732
        v201 = get_local ptr u256, borrow_limit, !10730
        store v200 to v201, !10730
        v202 = get_local ptr u64, index, !10733
        v203 = load v202
        v204 = const u64 1, !10734
        v205 = call add_45(v203, v204), !10737
        v206 = get_local ptr u64, index, !10735
        store v205 to v206, !10735
        br while()

        end_while():
        v207 = get_local ptr { b256, u64, b256 }, __anon_10, !10738
        v208 = const u64 0
        v209 = get_elem_ptr v207, ptr b256, v208
        v210 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10738
        store v210 to v209, !10738
        v211 = const u64 1
        v212 = get_elem_ptr v207, ptr u64, v211
        v213 = const u64 0
        store v213 to v212, !10738
        v214 = const u64 2
        v215 = get_elem_ptr v207, ptr b256, v214
        v216 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10738
        store v216 to v215, !10738
        v217 = load v207
        v218 = call read_164(v217), !10741
        v219 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_11
        store v218 to v219
        v220 = const u64 2
        v221 = get_elem_ptr v219, ptr b256, v220, !3907
        v222 = load v221
        v223 = get_local ptr { u64 }, __anon_12, !3798
        v224 = const u64 0
        v225 = get_elem_ptr v223, ptr u64, v224, !3798
        v226 = const u64 1, !3798
        store v226 to v225, !3798
        v227 = load v223
        v228 = call get_price_internal_331(v222, v227), !10744
        v229 = get_local ptr { u64, u64, u64, u64 }, base_token_price, !10745
        store v228 to v229, !10745
        v230 = const u64 10, !10746
        v231 = call from_140(v230), !10749
        v232 = get_local ptr { u64, u64, u64, u64 }, base_token_price, !10750
        v233 = const u64 1
        v234 = get_elem_ptr v232, ptr u64, v233, !3805
        v235 = load v234
        v236 = call pow_172(v231, v235), !10753
        v237 = get_local ptr u256, base_token_price_scale, !10754
        store v236 to v237, !10754
        v238 = get_local ptr { u64, u64, u64, u64 }, base_token_price, !10755
        v239 = const u64 2
        v240 = get_elem_ptr v238, ptr u64, v239, !3817
        v241 = load v240
        v242 = call from_140(v241), !10758
        v243 = get_local ptr u256, base_token_price_, !10759
        store v242 to v243, !10759
        v244 = get_local ptr { u256 }, present, !10760
        v245 = load v244
        v246 = call wrapping_neg_284(v245), !10763
        v247 = call try_from_280(v246), !10766
        v248 = call unwrap_278(v247), !10769
        v249 = get_local ptr u256, base_token_price_, !10770
        v250 = load v249
        v251 = call multiply_158(v248, v250), !10773
        v252 = get_local ptr u256, base_token_price_scale, !10774
        v253 = load v252
        v254 = call divide_157(v251, v253), !10777
        v255 = get_local ptr u256, borrow_amount, !10778
        store v254 to v255, !10778
        v256 = get_local ptr u256, borrow_amount, !10779
        v257 = load v256
        v258 = get_local ptr u256, borrow_limit, !10780
        v259 = load v258
        v260 = call le_162(v257, v259), !10783
        ret bool v260
    }

    pub fn decode_666(self !1336: ptr { u64 }) -> { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !10784 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_667(self), !10785
        ret { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v0
    }

    pub fn abi_decode_667(buffer !8027: ptr { u64 }) -> { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, !10786 {
        local { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_407(buffer), !10787
        v1 = call abi_decode_2(buffer), !10788
        v2 = call abi_decode_46(buffer), !10789
        v3 = get_local ptr { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } }, __anon_0, !8040
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr { b256 }, v4, !8040
        store v0 to v5, !8040
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !8040
        store v1 to v7, !8040
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }, v8, !8040
        store v2 to v9, !8040
        v10 = load v3
        ret { { b256 }, u64, { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } } } v10
    }

    pub fn withdraw_collateral_668(asset_id !10790: { b256 }, amount !10791: u64, price_data_update !10792: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !10795 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_3
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_7
        local { u64 } __anon_8
        local { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 } __anon_9
        local { u64, ( { b256 } | { b256 } ) } caller
        local u64 total_collateral
        local u64 user_collateral

        entry(asset_id: { b256 }, amount: u64, price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !10798
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !10799
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !10799
        store v4 to v3, !10799
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 1
        store v7 to v6, !10799
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x06e9c1c2a569f4cd31c43ea64b51b66948b0090a8ba8d8d5b0a61bf54b1f4f78, !10799
        store v10 to v9, !10799
        v11 = load v1
        v12 = call read_116(v11), !10802
        v13 = call not_15(v12), !10805
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !10808
        v20 = call msg_sender_347(), !10811
        v21 = call unwrap_346(v20), !10814
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10815
        store v21 to v22, !10815
        v23 = get_local ptr { b256, u64, b256 }, __anon_2, !10816
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr b256, v24
        v26 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10816
        store v26 to v25, !10816
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27
        v29 = const u64 0
        store v29 to v28, !10816
        v30 = const u64 2
        v31 = get_elem_ptr v23, ptr b256, v30
        v32 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10816
        store v32 to v31, !10816
        v33 = load v23
        v34 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10817
        v35 = load v34
        v36 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_3, !10818
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, ( { b256 } | { b256 } ) }, v37, !10818
        store v35 to v38, !10818
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr { b256 }, v39, !10818
        store asset_id to v40, !10818
        v41 = load v36
        v42 = call get_325(v33, v41), !10821
        v43 = call try_read_324(v42), !10824
        v44 = const u64 0, !10825
        v45 = call unwrap_or_292(v43, v44), !10828
        v46 = call subtract_318(v45, amount), !10831
        v47 = get_local ptr u64, user_collateral, !10832
        store v46 to v47, !10832
        v48 = get_local ptr { b256, u64, b256 }, __anon_4, !10833
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr b256, v49
        v51 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10833
        store v51 to v50, !10833
        v52 = const u64 1
        v53 = get_elem_ptr v48, ptr u64, v52
        v54 = const u64 0
        store v54 to v53, !10833
        v55 = const u64 2
        v56 = get_elem_ptr v48, ptr b256, v55
        v57 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10833
        store v57 to v56, !10833
        v58 = load v48
        v59 = call get_364(v58, asset_id), !10836
        v60 = call try_read_324(v59), !10839
        v61 = const u64 0, !10840
        v62 = call unwrap_or_292(v60, v61), !10843
        v63 = call subtract_318(v62, amount), !10846
        v64 = get_local ptr u64, total_collateral, !10847
        store v63 to v64, !10847
        v65 = get_local ptr { b256, u64, b256 }, __anon_5, !10848
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr b256, v66
        v68 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10848
        store v68 to v67, !10848
        v69 = const u64 1
        v70 = get_elem_ptr v65, ptr u64, v69
        v71 = const u64 0
        store v71 to v70, !10848
        v72 = const u64 2
        v73 = get_elem_ptr v65, ptr b256, v72
        v74 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10848
        store v74 to v73, !10848
        v75 = load v65
        v76 = get_local ptr u64, total_collateral, !10849
        v77 = load v76
        v78 = call insert_366(v75, asset_id, v77), !10852
        v79 = get_local ptr { b256, u64, b256 }, __anon_6, !10853
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr b256, v80
        v82 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10853
        store v82 to v81, !10853
        v83 = const u64 1
        v84 = get_elem_ptr v79, ptr u64, v83
        v85 = const u64 0
        store v85 to v84, !10853
        v86 = const u64 2
        v87 = get_elem_ptr v79, ptr b256, v86
        v88 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10853
        store v88 to v87, !10853
        v89 = load v79
        v90 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10854
        v91 = load v90
        v92 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_7, !10855
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { u64, ( { b256 } | { b256 } ) }, v93, !10855
        store v91 to v94, !10855
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr { b256 }, v95, !10855
        store asset_id to v96, !10855
        v97 = load v92
        v98 = get_local ptr u64, user_collateral, !10856
        v99 = load v98
        v100 = call insert_362(v89, v97, v99), !10859
        v101 = call update_price_feeds_if_necessary_internal_182(price_data_update), !10862
        v102 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10863
        v103 = load v102
        v104 = call is_borrow_collateralized_665(v103), !10866
        v105 = get_local ptr { u64 }, __anon_8, !1845
        v106 = const u64 0
        v107 = get_elem_ptr v105, ptr u64, v106, !1845
        v108 = const u64 8, !1845
        store v108 to v107, !1845
        v109 = load v105
        v110 = call require_112(v104, v109), !10869
        v111 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10870
        v112 = load v111
        v113 = call transfer_506(v112, asset_id, amount), !10873
        v114 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10874
        v115 = load v114
        v116 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, __anon_9, !10875
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr { u64, ( { b256 } | { b256 } ) }, v117
        store v115 to v118, !10875
        v119 = const u64 1
        v120 = get_elem_ptr v116, ptr { b256 }, v119
        store asset_id to v120, !10875
        v121 = const u64 2
        v122 = get_elem_ptr v116, ptr u64, v121
        store amount to v122, !10875
        v123 = load v116
        v124 = call log_669(v123), !10878
        v125 = const unit ()
        ret () v125
    }

    pub fn log_669(value !1912: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }) -> (), !10879 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }):
        v0 = call encode_670(value), !1916
        v1 = const u64 8551298967468744576
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_670(item !1917: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }) -> slice, !10880 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }):
        v0 = call new_100(), !10881
        v1 = call abi_encode_671(item, v0), !10882
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10883
        ret slice v5
    }

    pub fn abi_encode_671(self !10884: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, buffer !10885: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10888 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !10889
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !10892
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !10893
        store v5 to v6, !10893
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !10894
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !10895
        v13 = load v12
        v14 = call abi_encode_373(v11, v13), !10898
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !10899
        store v14 to v15, !10899
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !10900
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !10901
        v22 = load v21
        v23 = call abi_encode_99(v20, v22), !10904
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !10905
        store v23 to v24, !10905
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !10906
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn decode_672(self !1336: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) }, u64 }, !10907 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_673(self), !10908
        ret { { u64, ( { b256 } | { b256 } ) }, u64 } v0
    }

    pub fn abi_decode_673(buffer !1343: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) }, u64 }, !10909 {
        local { { u64, ( { b256 } | { b256 } ) }, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_27(buffer), !10910
        v1 = call abi_decode_2(buffer), !10911
        v2 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u64 }, __anon_0, !1353
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, ( { b256 } | { b256 } ) }, v3, !1353
        store v0 to v4, !1353
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !1353
        store v1 to v6, !1353
        v7 = load v2
        ret { { u64, ( { b256 } | { b256 } ) }, u64 } v7
    }

    pub fn withdraw_reserves_674(to !10912: { u64, ( { b256 } | { b256 } ) }, amount !10913: u64) -> (), !10916 {
        local { u64 } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { u64, ( { b256 } | { b256 } ) } caller
        local { u256 } reserves

        entry(to: { u64, ( { b256 } | { b256 } ) }, amount: u64):
        v0 = call only_owner_467(), !10919
        v1 = call msg_sender_347(), !10922
        v2 = call unwrap_346(v1), !10925
        v3 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10926
        store v2 to v3, !10926
        v4 = call get_reserves_internal_499(), !10929
        v5 = get_local ptr { u256 }, reserves, !10930
        store v4 to v5, !10930
        v6 = get_local ptr { u256 }, reserves, !10931
        v7 = load v6
        v8 = call from_140(amount), !10934
        v9 = call try_from_282(v8), !10937
        v10 = call unwrap_281(v9), !10940
        v11 = call ge_274(v7, v10), !10943
        v12 = get_local ptr { u64 }, __anon_0, !1845
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !1845
        v15 = const u64 3, !1845
        store v15 to v14, !1845
        v16 = load v12
        v17 = call require_112(v11, v16), !10946
        v18 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10947
        v19 = load v18
        v20 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }, __anon_1, !10948
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, ( { b256 } | { b256 } ) }, v21
        store v19 to v22, !10948
        v23 = const u64 1
        v24 = get_elem_ptr v20, ptr { u64, ( { b256 } | { b256 } ) }, v23
        store to to v24, !10948
        v25 = const u64 2
        v26 = get_elem_ptr v20, ptr u64, v25
        store amount to v26, !10948
        v27 = load v20
        v28 = call log_675(v27), !10951
        v29 = get_local ptr { b256, u64, b256 }, __anon_2, !10952
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30
        v32 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10952
        store v32 to v31, !10952
        v33 = const u64 1
        v34 = get_elem_ptr v29, ptr u64, v33
        v35 = const u64 0
        store v35 to v34, !10952
        v36 = const u64 2
        v37 = get_elem_ptr v29, ptr b256, v36
        v38 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10952
        store v38 to v37, !10952
        v39 = load v29
        v40 = call read_164(v39), !10955
        v41 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v40 to v41
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { b256 }, v42, !7354
        v44 = load v43
        v45 = call transfer_506(to, v44, amount), !10958
        v46 = const unit ()
        ret () v46
    }

    pub fn log_675(value !1912: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }) -> (), !10959 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }):
        v0 = call encode_676(value), !1916
        v1 = const u64 2861643217579627023
        log slice v0, v1, !1916
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_676(item !1917: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }) -> slice, !10960 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }):
        v0 = call new_100(), !10961
        v1 = call abi_encode_677(item, v0), !10962
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10963
        ret slice v5
    }

    pub fn abi_encode_677(self !9709: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }, buffer !9710: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10965 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !10966
        v4 = load v3
        v5 = call abi_encode_370(v4, buffer), !10968
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !10969
        store v5 to v6, !10969
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !10970
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !10971
        v13 = load v12
        v14 = call abi_encode_370(v11, v13), !10974
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !10975
        store v14 to v15, !10975
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !10976
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !10977
        v22 = load v21
        v23 = call abi_encode_99(v20, v22), !10980
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !10981
        store v23 to v24, !10981
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !10982
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn owner_678() -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !10985 {
        entry():
        v0 = call _owner_425(), !10988
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v0
    }

    pub fn encode_679(item !1917: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> slice, !10989 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = call new_100(), !10990
        v1 = call abi_encode_680(item, v0), !10991
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1927
        store v1 to v2, !1927
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1928
        v4 = load v3
        v5 = call as_raw_slice_101(v4), !10992
        ret slice v5
    }

    pub fn abi_encode_680(self !2088: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, buffer !2089: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10994 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { u64, ( { b256 } | { b256 } ) } value

        entry(self: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_1, !10995
        store self to v0, !10995
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_1, !2094
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2094
        v4 = load v3
        v5 = const u64 0, !2094
        v6 = call eq_16(v4, v5), !10998
        cbr v6, block0(), block1(), !10996

        block0():
        v7 = const u64 0, !10999
        v8 = call abi_encode_99(v7, buffer), !11002
        br block8(v8)

        block1():
        v9 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_1, !2094
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2094
        v12 = load v11
        v13 = const u64 1, !2094
        v14 = call eq_16(v12, v13), !11005
        cbr v14, block2(), block3(), !11003

        block2():
        v15 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_1, !2094
        v16 = const u64 1
        v17 = const u64 1
        v18 = get_elem_ptr v15, ptr { u64, ( { b256 } | { b256 } ) }, v16, v17
        v19 = load v18
        v20 = get_local ptr { u64, ( { b256 } | { b256 } ) }, value, !11006
        store v19 to v20, !11006
        v21 = const u64 1, !11007
        v22 = call abi_encode_99(v21, buffer), !11010
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !11011
        store v22 to v23, !11011
        v24 = get_local ptr { u64, ( { b256 } | { b256 } ) }, value, !11012
        v25 = load v24
        v26 = get_local ptr { { u64, u64, u64 } }, buffer_, !11013
        v27 = load v26
        v28 = call abi_encode_370(v25, v27), !11016
        v29 = get_local ptr { { u64, u64, u64 } }, buffer__, !11017
        store v28 to v29, !11017
        v30 = get_local ptr { { u64, u64, u64 } }, buffer__, !11018
        v31 = load v30
        br block7(v31)

        block3():
        v32 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_1, !2094
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !2094
        v35 = load v34
        v36 = const u64 2, !2094
        v37 = call eq_16(v35, v36), !11021
        cbr v37, block4(), block5(), !11019

        block4():
        v38 = const u64 2, !11022
        v39 = call abi_encode_99(v38, buffer), !11025
        br block6(v39)

        block5():
        v40 = const u64 14757395258967588866, !10995
        revert v40, !10995

        block6(v41: { { u64, u64, u64 } }):
        br block7(v41)

        block7(v42: { { u64, u64, u64 } }):
        br block8(v42)

        block8(v43: { { u64, u64, u64 } }):
        v44 = get_local ptr { { u64, u64, u64 } }, buffer___, !11026
        store v43 to v44, !11026
        v45 = get_local ptr { { u64, u64, u64 } }, buffer___, !11027
        v46 = load v45
        ret { { u64, u64, u64 } } v46
    }

    pub entry_orig fn absorb(accounts !1828: { { u64, u64 }, u64 }, price_data_update !1829: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !11028 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local mut u64 index

        entry(accounts: { { u64, u64 }, u64 }, price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !11029
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !1837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !1837
        store v4 to v3, !1837
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 2
        store v7 to v6, !1837
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x5c761619e5f7bfc01924c4d924adecc283a0eeaf92db1b80df5a6ecbbb13f0e7, !1837
        store v10 to v9, !1837
        v11 = load v1
        v12 = call read_116(v11), !11030
        v13 = call not_15(v12), !11031
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !11032
        v20 = call accrue_internal_131(), !11033
        v21 = call update_price_feeds_if_necessary_internal_182(price_data_update), !11034
        v22 = get_local ptr u64, index, !1855
        v23 = const u64 0, !1856
        store v23 to v22, !1855
        br while()

        while():
        v24 = get_local ptr u64, index, !1857
        v25 = load v24
        v26 = call len_230(accounts), !11035
        v27 = call lt_26(v25, v26), !11036
        cbr v27, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v28 = get_local ptr u64, index, !1864
        v29 = load v28
        v30 = call get_401(accounts, v29), !11037
        v31 = call unwrap_400(v30), !11038
        v32 = call absorb_internal_231(v31), !11039
        v33 = get_local ptr u64, index, !1874
        v34 = load v33
        v35 = const u64 1, !1875
        v36 = call add_45(v34, v35), !11040
        v37 = get_local ptr u64, index, !1876
        store v36 to v37, !1876
        br while()

        end_while():
        v38 = const unit ()
        ret () v38
    }

    pub entry_orig fn activate_contract(market_configuration !6941: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, owner !6942: { u64, ( { b256 } | { b256 } ) }) -> (), !11041 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { bool, bool, bool, bool } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { bool, bool, bool, bool } } __anon_7
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } __anon_8
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_9
        local { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local { bool, bool, bool, bool } pause_config

        entry(market_configuration: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6946
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddcec0, !6946
        store v3 to v2, !6946
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6946
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x79aa7ec830984eccffac9ed69968fe5497be089ff4398ccc492d7ba16d41ff60, !6946
        store v9 to v8, !6946
        v10 = load v0
        v11 = call read_412(v10), !11042
        v12 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !6950
        v13 = call eq_153(v11, v12), !11043
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 15, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !11044
        v20 = call initialize_ownership_418(owner), !11045
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !6960
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !6960
        store v24 to v23, !6960
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !6960
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !6960
        store v30 to v29, !6960
        v31 = load v21
        v32 = call write_440(v31, market_configuration), !11046
        v33 = get_local ptr { b256, u64, b256 }, __anon_3, !6964
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddcec0, !6964
        store v36 to v35, !6964
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !6964
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x79aa7ec830984eccffac9ed69968fe5497be089ff4398ccc492d7ba16d41ff60, !6964
        store v42 to v41, !6964
        v43 = load v33
        v44 = call timestamp_141(), !11047
        v45 = call into_139(v44), !11048
        v46 = call write_443(v43, v45), !11049
        v47 = get_local ptr { b256, u64, b256 }, __anon_4, !6974
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr b256, v48
        v50 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6974
        store v50 to v49, !6974
        v51 = const u64 1
        v52 = get_elem_ptr v47, ptr u64, v51
        v53 = const u64 0
        store v53 to v52, !6974
        v54 = const u64 2
        v55 = get_elem_ptr v47, ptr b256, v54
        v56 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !6974
        store v56 to v55, !6974
        v57 = load v47
        v58 = call read_132(v57), !11050
        v59 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6978
        store v58 to v59, !6978
        v60 = get_local ptr { bool, bool, bool, bool }, __anon_5, !6979
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr bool, v61
        v63 = const bool false, !6980
        store v63 to v62, !6979
        v64 = const u64 1
        v65 = get_elem_ptr v60, ptr bool, v64
        v66 = const bool false, !6981
        store v66 to v65, !6979
        v67 = const u64 2
        v68 = get_elem_ptr v60, ptr bool, v67
        v69 = const bool false, !6982
        store v69 to v68, !6979
        v70 = const u64 3
        v71 = get_elem_ptr v60, ptr bool, v70
        v72 = const bool false, !6983
        store v72 to v71, !6979
        v73 = load v60
        v74 = get_local ptr { bool, bool, bool, bool }, pause_config, !6984
        store v73 to v74, !6984
        v75 = get_local ptr { b256, u64, b256 }, __anon_6, !6985
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr b256, v76
        v78 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !6985
        store v78 to v77, !6985
        v79 = const u64 1
        v80 = get_elem_ptr v75, ptr u64, v79
        v81 = const u64 0
        store v81 to v80, !6985
        v82 = const u64 2
        v83 = get_elem_ptr v75, ptr b256, v82
        v84 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !6985
        store v84 to v83, !6985
        v85 = load v75
        v86 = get_local ptr { bool, bool, bool, bool }, pause_config, !6986
        v87 = load v86
        v88 = call write_446(v85, v87), !11051
        v89 = get_local ptr { bool, bool, bool, bool }, pause_config, !6990
        v90 = load v89
        v91 = get_local ptr { { bool, bool, bool, bool } }, __anon_7, !6991
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { bool, bool, bool, bool }, v92
        store v90 to v93, !6991
        v94 = load v91
        v95 = call log_452(v94), !11052
        v96 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, __anon_8, !6995
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v97
        store market_configuration to v98, !6995
        v99 = load v96
        v100 = call log_457(v99), !11053
        v101 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !6999
        v102 = load v101
        v103 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_9, !7000
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr { u256, u256, u256, u256, u256, u256, u256 }, v104
        store v102 to v105, !7000
        v106 = load v103
        v107 = call log_393(v106), !11054
        v108 = const unit ()
        ret () v108
    }

    pub entry_orig fn add_collateral_asset(configuration !7502: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !11055 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } __anon_4

        entry(configuration: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = call only_owner_467(), !11056
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !7509
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7509
        store v4 to v3, !7509
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !7509
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7509
        store v10 to v9, !7509
        v11 = load v1
        v12 = ptr_to_int configuration to u64
        v13 = int_to_ptr v12 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { b256 }, v14, !3743
        v16 = load v15
        v17 = call get_301(v11, v16), !11057
        v18 = call try_read_473(v17), !11058
        v19 = call is_none_472(v18), !11059
        v20 = get_local ptr { u64 }, __anon_1, !1845
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !1845
        v23 = const u64 12, !1845
        store v23 to v22, !1845
        v24 = load v20
        v25 = call require_112(v19, v24), !11060
        v26 = get_local ptr { b256, u64, b256 }, __anon_2, !7522
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr b256, v27
        v29 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7522
        store v29 to v28, !7522
        v30 = const u64 1
        v31 = get_elem_ptr v26, ptr u64, v30
        v32 = const u64 0
        store v32 to v31, !7522
        v33 = const u64 2
        v34 = get_elem_ptr v26, ptr b256, v33
        v35 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7522
        store v35 to v34, !7522
        v36 = load v26
        v37 = ptr_to_int configuration to u64
        v38 = int_to_ptr v37 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr { b256 }, v39, !3743
        v41 = load v40
        v42 = call insert_474(v36, v41, configuration), !11061
        v43 = get_local ptr { b256, u64, b256 }, __anon_3, !7526
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr b256, v44
        v46 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7526
        store v46 to v45, !7526
        v47 = const u64 1
        v48 = get_elem_ptr v43, ptr u64, v47
        v49 = const u64 0
        store v49 to v48, !7526
        v50 = const u64 2
        v51 = get_elem_ptr v43, ptr b256, v50
        v52 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7526
        store v52 to v51, !7526
        v53 = load v43
        v54 = ptr_to_int configuration to u64
        v55 = int_to_ptr v54 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr { b256 }, v56, !3743
        v58 = load v57
        v59 = call push_477(v53, v58), !11062
        v60 = ptr_to_int configuration to u64
        v61 = int_to_ptr v60 to ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { b256 }, v62, !3743
        v64 = load v63
        v65 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, __anon_4, !7530
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr { b256 }, v66
        store v64 to v67, !7530
        v68 = const u64 1
        v69 = get_elem_ptr v65, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v68
        store configuration to v69, !7530
        v70 = load v65
        v71 = call log_480(v70), !11063
        v72 = const unit ()
        ret () v72
    }

    pub entry_orig fn available_to_borrow(account !7712: { u64, ( { b256 } | { b256 } ) }) -> u256, !11064 {
        local u256 _
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_5
        local { u64 } __anon_6
        local { u64 } __anon_7
        local { u256, u256 } __tuple_3
        local { u256, u256 } __tuple_3_
        local u256 amount
        local u256 balance
        local u256 base_asset_scale
        local { u64, u64, u64, u64 } base_price
        local u256 base_price_
        local u256 base_price_scale
        local u256 borrow
        local mut u256 borrow_limit
        local u256 borrow_limit_
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local mut u64 index
        local u64 len
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration
        local { u64, u64, u64, u64 } price
        local u256 price_
        local u64 price_exponent
        local u256 price_scale

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_supply_borrow_internal_487(account), !11065
        v1 = get_local ptr { u256, u256 }, __tuple_3, !7719
        store v0 to v1, !7719
        v2 = get_local ptr { u256, u256 }, __tuple_3, !7719
        v3 = load v2
        v4 = get_local ptr { u256, u256 }, __tuple_3_, !7719
        store v3 to v4, !7719
        v5 = get_local ptr { u256, u256 }, __tuple_3_, !7719
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u256, v6, !7719
        v8 = load v7
        v9 = get_local ptr u256, _, !7719
        store v8 to v9, !7719
        v10 = get_local ptr { u256, u256 }, __tuple_3_, !7719
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u256, v11, !7719
        v13 = load v12
        v14 = get_local ptr u256, borrow, !7719
        store v13 to v14, !7719
        v15 = get_local ptr u256, borrow_limit, !7720
        v16 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !7721
        store v16 to v15, !7720
        v17 = get_local ptr u64, index, !7722
        v18 = const u64 0, !7723
        store v18 to v17, !7722
        v19 = get_local ptr { b256, u64, b256 }, __anon_0, !7724
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr b256, v20
        v22 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7724
        store v22 to v21, !7724
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr u64, v23
        v25 = const u64 0
        store v25 to v24, !7724
        v26 = const u64 2
        v27 = get_elem_ptr v19, ptr b256, v26
        v28 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7724
        store v28 to v27, !7724
        v29 = load v19
        v30 = call len_291(v29), !11066
        v31 = get_local ptr u64, len, !7728
        store v30 to v31, !7728
        v32 = get_local ptr { b256, u64, b256 }, __anon_1, !7729
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr b256, v33
        v35 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !7729
        store v35 to v34, !7729
        v36 = const u64 1
        v37 = get_elem_ptr v32, ptr u64, v36
        v38 = const u64 0
        store v38 to v37, !7729
        v39 = const u64 2
        v40 = get_elem_ptr v32, ptr b256, v39
        v41 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !7729
        store v41 to v40, !7729
        v42 = load v32
        v43 = call read_164(v42), !11067
        v44 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !7733
        store v43 to v44, !7733
        br while()

        while():
        v45 = get_local ptr u64, index, !7734
        v46 = load v45
        v47 = get_local ptr u64, len, !7735
        v48 = load v47
        v49 = call lt_26(v46, v48), !11068
        cbr v49, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v50 = get_local ptr { b256, u64, b256 }, __anon_2, !7739
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr b256, v51
        v53 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7739
        store v53 to v52, !7739
        v54 = const u64 1
        v55 = get_elem_ptr v50, ptr u64, v54
        v56 = const u64 0
        store v56 to v55, !7739
        v57 = const u64 2
        v58 = get_elem_ptr v50, ptr b256, v57
        v59 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !7739
        store v59 to v58, !7739
        v60 = load v50
        v61 = get_local ptr { b256, u64, b256 }, __anon_3, !7740
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7740
        store v64 to v63, !7740
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !7740
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !7740
        store v70 to v69, !7740
        v71 = load v61
        v72 = get_local ptr u64, index, !7741
        v73 = load v72
        v74 = call get_315(v71, v73), !11069
        v75 = call unwrap_314(v74), !11070
        v76 = call read_307(v75), !11071
        v77 = call get_301(v60, v76), !11072
        v78 = call read_294(v77), !11073
        v79 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7757
        store v78 to v79, !7757
        v80 = get_local ptr { b256, u64, b256 }, __anon_4, !7758
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr b256, v81
        v83 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !7758
        store v83 to v82, !7758
        v84 = const u64 1
        v85 = get_elem_ptr v80, ptr u64, v84
        v86 = const u64 0
        store v86 to v85, !7758
        v87 = const u64 2
        v88 = get_elem_ptr v80, ptr b256, v87
        v89 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !7758
        store v89 to v88, !7758
        v90 = load v80
        v91 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7759
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr { b256 }, v92, !3743
        v94 = load v93
        v95 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_5, !7760
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr { u64, ( { b256 } | { b256 } ) }, v96, !7760
        store account to v97, !7760
        v98 = const u64 1
        v99 = get_elem_ptr v95, ptr { b256 }, v98, !7760
        store v94 to v99, !7760
        v100 = load v95
        v101 = call get_325(v90, v100), !11074
        v102 = call try_read_324(v101), !11075
        v103 = const u64 0, !7767
        v104 = call unwrap_or_292(v102, v103), !11076
        v105 = call into_139(v104), !11077
        v106 = get_local ptr u256, balance, !7774
        store v105 to v106, !7774
        v107 = get_local ptr u256, balance, !7775
        v108 = load v107
        v109 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000, !7776
        v110 = call eq_153(v108, v109), !11078
        cbr v110, block0(), block1(), !7777

        block0():
        v111 = get_local ptr u64, index, !7780
        v112 = load v111
        v113 = const u64 1, !7781
        v114 = call add_45(v112, v113), !11079
        v115 = get_local ptr u64, index, !7782
        store v114 to v115, !7782
        br while()

        block1():
        v116 = const unit ()
        br block2(v116)

        block2(v117: ()):
        v118 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7785
        v119 = const u64 1
        v120 = get_elem_ptr v118, ptr b256, v119, !3797
        v121 = load v120
        v122 = get_local ptr { u64 }, __anon_6, !3798
        v123 = const u64 0
        v124 = get_elem_ptr v122, ptr u64, v123, !3798
        v125 = const u64 0, !3798
        store v125 to v124, !3798
        v126 = load v122
        v127 = call get_price_internal_331(v121, v126), !11080
        v128 = get_local ptr { u64, u64, u64, u64 }, price, !7789
        store v127 to v128, !7789
        v129 = get_local ptr { u64, u64, u64, u64 }, price, !7790
        v130 = const u64 1
        v131 = get_elem_ptr v129, ptr u64, v130, !3805
        v132 = load v131
        v133 = get_local ptr u64, price_exponent, !7791
        store v132 to v133, !7791
        v134 = const u64 10, !7792
        v135 = call from_140(v134), !11081
        v136 = get_local ptr { u64, u64, u64, u64 }, price, !7796
        v137 = const u64 1
        v138 = get_elem_ptr v136, ptr u64, v137, !3805
        v139 = load v138
        v140 = call pow_172(v135, v139), !11082
        v141 = get_local ptr u256, price_scale, !7800
        store v140 to v141, !7800
        v142 = get_local ptr { u64, u64, u64, u64 }, price, !7801
        v143 = const u64 2
        v144 = get_elem_ptr v142, ptr u64, v143, !3817
        v145 = load v144
        v146 = call from_140(v145), !11083
        v147 = get_local ptr u256, price_, !7805
        store v146 to v147, !7805
        v148 = get_local ptr u256, balance, !7806
        v149 = load v148
        v150 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7807
        v151 = const u64 3
        v152 = get_elem_ptr v150, ptr u256, v151, !7684
        v153 = load v152
        v154 = call multiply_158(v149, v153), !11084
        v155 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v156 = call divide_157(v154, v155), !11085
        v157 = get_local ptr u256, amount, !7814
        store v156 to v157, !7814
        v158 = const u64 10, !7815
        v159 = call from_140(v158), !11086
        v160 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !7819
        v161 = const u64 2
        v162 = get_elem_ptr v160, ptr u64, v161, !3827
        v163 = load v162
        v164 = call pow_172(v159, v163), !11087
        v165 = get_local ptr u256, collateral_scale, !7823
        store v164 to v165, !7823
        v166 = const u64 10, !7824
        v167 = call from_140(v166), !11088
        v168 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !7828
        v169 = const u64 1
        v170 = get_elem_ptr v168, ptr u64, v169, !2486
        v171 = load v170
        v172 = call pow_172(v167, v171), !11089
        v173 = get_local ptr u256, base_asset_scale, !7832
        store v172 to v173, !7832
        v174 = get_local ptr u256, borrow_limit, !7833
        v175 = load v174
        v176 = get_local ptr u256, amount, !7834
        v177 = load v176
        v178 = get_local ptr u256, price_, !7835
        v179 = load v178
        v180 = call multiply_158(v177, v179), !11090
        v181 = get_local ptr u256, base_asset_scale, !7839
        v182 = load v181
        v183 = call multiply_158(v180, v182), !11091
        v184 = get_local ptr u256, collateral_scale, !7843
        v185 = load v184
        v186 = call divide_157(v183, v185), !11092
        v187 = get_local ptr u256, price_scale, !7847
        v188 = load v187
        v189 = call divide_157(v186, v188), !11093
        v190 = call add_124(v175, v189), !11094
        v191 = get_local ptr u256, borrow_limit, !7851
        store v190 to v191, !7851
        v192 = get_local ptr u64, index, !7854
        v193 = load v192
        v194 = const u64 1, !7855
        v195 = call add_45(v193, v194), !11095
        v196 = get_local ptr u64, index, !7856
        store v195 to v196, !7856
        br while()

        end_while():
        v197 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !7859
        v198 = const u64 2
        v199 = get_elem_ptr v197, ptr b256, v198, !3907
        v200 = load v199
        v201 = get_local ptr { u64 }, __anon_7, !3798
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr u64, v202, !3798
        v204 = const u64 1, !3798
        store v204 to v203, !3798
        v205 = load v201
        v206 = call get_price_internal_331(v200, v205), !11096
        v207 = get_local ptr { u64, u64, u64, u64 }, base_price, !7863
        store v206 to v207, !7863
        v208 = const u64 10, !7864
        v209 = call from_140(v208), !11097
        v210 = get_local ptr { u64, u64, u64, u64 }, base_price, !7868
        v211 = const u64 1
        v212 = get_elem_ptr v210, ptr u64, v211, !3805
        v213 = load v212
        v214 = call pow_172(v209, v213), !11098
        v215 = get_local ptr u256, base_price_scale, !7872
        store v214 to v215, !7872
        v216 = get_local ptr { u64, u64, u64, u64 }, base_price, !7873
        v217 = const u64 2
        v218 = get_elem_ptr v216, ptr u64, v217, !3817
        v219 = load v218
        v220 = call from_140(v219), !11099
        v221 = get_local ptr u256, base_price_, !7877
        store v220 to v221, !7877
        v222 = get_local ptr u256, borrow_limit, !7878
        v223 = load v222
        v224 = get_local ptr u256, base_price_scale, !7879
        v225 = load v224
        v226 = call multiply_158(v223, v225), !11100
        v227 = get_local ptr u256, base_price_, !7883
        v228 = load v227
        v229 = call divide_157(v226, v228), !11101
        v230 = get_local ptr u256, borrow_limit_, !7887
        store v229 to v230, !7887
        v231 = get_local ptr u256, borrow_limit_, !7888
        v232 = load v231
        v233 = get_local ptr u256, borrow, !7889
        v234 = load v233
        v235 = call lt_163(v232, v234), !11102
        cbr v235, block3(), block4(), !7890

        block3():
        v236 = call zero_160(), !11103
        br block5(v236)

        block4():
        v237 = get_local ptr u256, borrow_limit_, !7896
        v238 = load v237
        v239 = get_local ptr u256, borrow, !7897
        v240 = load v239
        v241 = call subtract_125(v238, v240), !11104
        br block5(v241)

        block5(v242: u256):
        ret u256 v242
    }

    pub entry_orig fn balance_of(asset_id !7991: { b256 }) -> u64, !11105 {
        entry(asset_id: { b256 }):
        v0 = call this_balance_493(asset_id), !11106
        ret u64 v0
    }

    pub entry_orig fn buy_collateral(asset_id !8041: { b256 }, min_amount !8042: u64, recipient !8043: { u64, ( { b256 } | { b256 } ) }) -> (), !11107 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 } __anon_10
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { u64 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_6
        local { u64 } __anon_7
        local { u64 } __anon_8
        local { u64 } __anon_9
        local { u64, ( { b256 } | { b256 } ) } caller
        local u64 collateral_amount
        local u64 payment_amount
        local { u256 } reserves
        local { u256 } reserves_

        entry(asset_id: { b256 }, min_amount: u64, recipient: { u64, ( { b256 } | { b256 } ) }):
        v0 = call reentrancy_guard_94(), !11108
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !8050
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !8050
        store v4 to v3, !8050
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 3
        store v7 to v6, !8050
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x510e6328dda277aa87d250765c99d797d52807a192c43c4402482c421c01c6f5, !8050
        store v10 to v9, !8050
        v11 = load v1
        v12 = call read_116(v11), !11109
        v13 = call not_15(v12), !11110
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !11111
        v20 = call msg_amount_194(), !11112
        v21 = get_local ptr u64, payment_amount, !8063
        store v20 to v21, !8063
        v22 = call msg_asset_id_197(), !11113
        v23 = get_local ptr { b256, u64, b256 }, __anon_2, !8067
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr b256, v24
        v26 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8067
        store v26 to v25, !8067
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27
        v29 = const u64 0
        store v29 to v28, !8067
        v30 = const u64 2
        v31 = get_elem_ptr v23, ptr b256, v30
        v32 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8067
        store v32 to v31, !8067
        v33 = load v23
        v34 = call read_164(v33), !11114
        v35 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v34 to v35
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr { b256 }, v36, !7354
        v38 = load v37
        v39 = call eq_196(v22, v38), !11115
        cbr v39, block0(), block1(v39), !8074

        block0():
        v40 = get_local ptr u64, payment_amount, !8075
        v41 = load v40
        v42 = const u64 0, !8076
        v43 = call gt_40(v41, v42), !11116
        br block1(v43), !8074

        block1(v44: bool):
        v45 = get_local ptr { u64 }, __anon_4, !1845
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1845
        v48 = const u64 11, !1845
        store v48 to v47, !1845
        v49 = load v45
        v50 = call require_112(v44, v49), !11117
        v51 = call get_reserves_internal_499(), !11118
        v52 = get_local ptr u64, payment_amount, !8086
        v53 = load v52
        v54 = call from_140(v53), !11119
        v55 = call try_from_282(v54), !11120
        v56 = call unwrap_281(v55), !11121
        v57 = call subtract_392(v51, v56), !11122
        v58 = get_local ptr { u256 }, reserves, !8099
        store v57 to v58, !8099
        v59 = get_local ptr { u256 }, reserves, !8100
        v60 = load v59
        v61 = get_local ptr { b256, u64, b256 }, __anon_5, !8101
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8101
        store v64 to v63, !8101
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !8101
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8101
        store v70 to v69, !8101
        v71 = load v61
        v72 = call read_164(v71), !11123
        v73 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_6
        store v72 to v73
        v74 = const u64 17
        v75 = get_elem_ptr v73, ptr u256, v74, !7437
        v76 = load v75
        v77 = call try_from_282(v76), !11124
        v78 = call unwrap_281(v77), !11125
        v79 = call lt_377(v60, v78), !11126
        v80 = get_local ptr { u64 }, __anon_7, !1845
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81, !1845
        v83 = const u64 5, !1845
        store v83 to v82, !1845
        v84 = load v80
        v85 = call require_112(v79, v84), !11127
        v86 = call get_collateral_reserves_internal_500(asset_id), !11128
        v87 = get_local ptr { u256 }, reserves_, !8120
        store v86 to v87, !8120
        v88 = get_local ptr u64, payment_amount, !8121
        v89 = load v88
        v90 = call quote_collateral_internal_501(asset_id, v89), !11129
        v91 = get_local ptr u64, collateral_amount, !8125
        store v90 to v91, !8125
        v92 = get_local ptr u64, collateral_amount, !8126
        v93 = load v92
        v94 = call ge_193(v93, min_amount), !11130
        v95 = get_local ptr { u64 }, __anon_8, !1845
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !1845
        v98 = const u64 6, !1845
        store v98 to v97, !1845
        v99 = load v95
        v100 = call require_112(v94, v99), !11131
        v101 = get_local ptr u64, collateral_amount, !8133
        v102 = load v101
        v103 = call from_140(v102), !11132
        v104 = call try_from_282(v103), !11133
        v105 = call unwrap_281(v104), !11134
        v106 = get_local ptr { u256 }, reserves_, !8143
        v107 = load v106
        v108 = call le_391(v105, v107), !11135
        v109 = get_local ptr { u64 }, __anon_9, !1845
        v110 = const u64 0
        v111 = get_elem_ptr v109, ptr u64, v110, !1845
        v112 = const u64 3, !1845
        store v112 to v111, !1845
        v113 = load v109
        v114 = call require_112(v108, v113), !11136
        v115 = call msg_sender_347(), !11137
        v116 = call unwrap_346(v115), !11138
        v117 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !8156
        store v116 to v117, !8156
        v118 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !8157
        v119 = load v118
        v120 = get_local ptr u64, collateral_amount, !8158
        v121 = load v120
        v122 = get_local ptr u64, payment_amount, !8159
        v123 = load v122
        v124 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { b256 }, u64, u64 }, __anon_10, !8160
        v125 = const u64 0
        v126 = get_elem_ptr v124, ptr { u64, ( { b256 } | { b256 } ) }, v125
        store v119 to v126, !8160
        v127 = const u64 1
        v128 = get_elem_ptr v124, ptr { u64, ( { b256 } | { b256 } ) }, v127
        store recipient to v128, !8160
        v129 = const u64 2
        v130 = get_elem_ptr v124, ptr { b256 }, v129
        store asset_id to v130, !8160
        v131 = const u64 3
        v132 = get_elem_ptr v124, ptr u64, v131
        store v121 to v132, !8160
        v133 = const u64 4
        v134 = get_elem_ptr v124, ptr u64, v133
        store v123 to v134, !8160
        v135 = load v124
        v136 = call log_503(v135), !11139
        v137 = get_local ptr u64, collateral_amount, !8164
        v138 = load v137
        v139 = call transfer_506(recipient, asset_id, v138), !11140
        v140 = const unit ()
        ret () v140
    }

    pub entry_orig fn collateral_value_to_sell(asset_id !8740: { b256 }, collateral_amount !8741: u64) -> u64, !11141 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local u256 asset_discounted
        local { u64, u64, u64, u64 } asset_price
        local u256 asset_price_
        local u256 asset_price_discounted
        local u256 asset_price_scale
        local u256 base_asset_scale
        local { u64, u64, u64, u64 } base_price
        local u256 base_price_
        local u256 base_price_scale
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u256 collateral_scale
        local u256 collateral_value
        local u256 discount_factor
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } market_configuration

        entry(asset_id: { b256 }, collateral_amount: u64):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !8745
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !8745
        store v3 to v2, !8745
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !8745
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !8745
        store v9 to v8, !8745
        v10 = load v0
        v11 = call get_301(v10, asset_id), !11142
        v12 = call read_294(v11), !11143
        v13 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8752
        store v12 to v13, !8752
        v14 = get_local ptr { b256, u64, b256 }, __anon_1, !8753
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr b256, v15
        v17 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8753
        store v17 to v16, !8753
        v18 = const u64 1
        v19 = get_elem_ptr v14, ptr u64, v18
        v20 = const u64 0
        store v20 to v19, !8753
        v21 = const u64 2
        v22 = get_elem_ptr v14, ptr b256, v21
        v23 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !8753
        store v23 to v22, !8753
        v24 = load v14
        v25 = call read_164(v24), !11144
        v26 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8757
        store v25 to v26, !8757
        v27 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8758
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr b256, v28, !3797
        v30 = load v29
        v31 = get_local ptr { u64 }, __anon_2, !3798
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !3798
        v34 = const u64 2, !3798
        store v34 to v33, !3798
        v35 = load v31
        v36 = call get_price_internal_331(v30, v35), !11145
        v37 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8762
        store v36 to v37, !8762
        v38 = const u64 10, !8763
        v39 = call from_140(v38), !11146
        v40 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8767
        v41 = const u64 1
        v42 = get_elem_ptr v40, ptr u64, v41, !3805
        v43 = load v42
        v44 = call pow_172(v39, v43), !11147
        v45 = get_local ptr u256, asset_price_scale, !8771
        store v44 to v45, !8771
        v46 = get_local ptr { u64, u64, u64, u64 }, asset_price, !8772
        v47 = const u64 2
        v48 = get_elem_ptr v46, ptr u64, v47, !3817
        v49 = load v48
        v50 = call from_140(v49), !11148
        v51 = get_local ptr u256, asset_price_, !8776
        store v50 to v51, !8776
        v52 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8777
        v53 = const u64 11
        v54 = get_elem_ptr v52, ptr u256, v53, !7405
        v55 = load v54
        v56 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8778
        v57 = const u64 5
        v58 = get_elem_ptr v56, ptr u256, v57, !3842
        v59 = load v58
        v60 = const u256 0x0000000000000000000000000000000000000000000000000de0b6b3a7640000, !2746
        v61 = call subtract_125(v60, v59), !11149
        v62 = call multiply_158(v55, v61), !11150
        v63 = call divide_157(v62, v60), !11151
        v64 = get_local ptr u256, discount_factor, !8788
        store v63 to v64, !8788
        v65 = get_local ptr u256, asset_price_, !8789
        v66 = load v65
        v67 = get_local ptr u256, discount_factor, !8790
        v68 = load v67
        v69 = call subtract_125(v60, v68), !11152
        v70 = call multiply_158(v66, v69), !11153
        v71 = call divide_157(v70, v60), !11154
        v72 = get_local ptr u256, asset_price_discounted, !8800
        store v71 to v72, !8800
        v73 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8801
        v74 = const u64 2
        v75 = get_elem_ptr v73, ptr b256, v74, !3907
        v76 = load v75
        v77 = get_local ptr { u64 }, __anon_3, !3798
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !3798
        v80 = const u64 1, !3798
        store v80 to v79, !3798
        v81 = load v77
        v82 = call get_price_internal_331(v76, v81), !11155
        v83 = get_local ptr { u64, u64, u64, u64 }, base_price, !8805
        store v82 to v83, !8805
        v84 = const u64 10, !8806
        v85 = call from_140(v84), !11156
        v86 = get_local ptr { u64, u64, u64, u64 }, base_price, !8810
        v87 = const u64 1
        v88 = get_elem_ptr v86, ptr u64, v87, !3805
        v89 = load v88
        v90 = call pow_172(v85, v89), !11157
        v91 = get_local ptr u256, base_price_scale, !8814
        store v90 to v91, !8814
        v92 = get_local ptr { u64, u64, u64, u64 }, base_price, !8815
        v93 = const u64 2
        v94 = get_elem_ptr v92, ptr u64, v93, !3817
        v95 = load v94
        v96 = call from_140(v95), !11158
        v97 = get_local ptr u256, base_price_, !8819
        store v96 to v97, !8819
        v98 = const u64 10, !8820
        v99 = call from_140(v98), !11159
        v100 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !8824
        v101 = const u64 2
        v102 = get_elem_ptr v100, ptr u64, v101, !3827
        v103 = load v102
        v104 = call pow_172(v99, v103), !11160
        v105 = get_local ptr u256, collateral_scale, !8828
        store v104 to v105, !8828
        v106 = const u64 10, !8829
        v107 = call from_140(v106), !11161
        v108 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, market_configuration, !8833
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u64, v109, !2486
        v111 = load v110
        v112 = call pow_172(v107, v111), !11162
        v113 = get_local ptr u256, base_asset_scale, !8837
        store v112 to v113, !8837
        v114 = get_local ptr u256, asset_price_discounted, !8838
        v115 = load v114
        v116 = call into_139(collateral_amount), !11163
        v117 = call multiply_158(v115, v116), !11164
        v118 = get_local ptr u256, asset_price_scale, !8845
        v119 = load v118
        v120 = call divide_157(v117, v119), !11165
        v121 = get_local ptr u256, asset_discounted, !8849
        store v120 to v121, !8849
        v122 = get_local ptr u256, asset_discounted, !8850
        v123 = load v122
        v124 = get_local ptr u256, base_asset_scale, !8851
        v125 = load v124
        v126 = call multiply_158(v123, v125), !11166
        v127 = get_local ptr u256, base_price_scale, !8855
        v128 = load v127
        v129 = call multiply_158(v126, v128), !11167
        v130 = get_local ptr u256, base_price_, !8859
        v131 = load v130
        v132 = call divide_157(v129, v131), !11168
        v133 = get_local ptr u256, collateral_scale, !8863
        v134 = load v133
        v135 = call divide_157(v132, v134), !11169
        v136 = get_local ptr u256, collateral_value, !8867
        store v135 to v136, !8867
        v137 = get_local ptr u256, collateral_value, !8868
        v138 = load v137
        v139 = call try_from_502(v138), !11170
        v140 = call unwrap_143(v139), !11171
        ret u64 v140
    }

    pub entry_orig fn debug_increment_timestamp() -> (), !11172 {
        local { u64 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2

        entry():
        v0 = get_config ptr u64, DEBUG_STEP, !8878
        v1 = load v0
        v2 = const u64 0, !8879
        v3 = call gt_40(v1, v2), !11173
        v4 = get_local ptr { u64 }, __anon_0, !1845
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !1845
        v7 = const u64 13, !1845
        store v7 to v6, !1845
        v8 = load v4
        v9 = call require_112(v3, v8), !11174
        v10 = get_local ptr { b256, u64, b256 }, __anon_1, !8886
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr b256, v11
        v13 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8886
        store v13 to v12, !8886
        v14 = const u64 1
        v15 = get_elem_ptr v10, ptr u64, v14
        v16 = const u64 0
        store v16 to v15, !8886
        v17 = const u64 2
        v18 = get_elem_ptr v10, ptr b256, v17
        v19 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8886
        store v19 to v18, !8886
        v20 = load v10
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !8887
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8887
        store v24 to v23, !8887
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !8887
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x9e39cce573e16c4eb034ec33f6641ef797822070b45760ef0edafbb57a145b1d, !8887
        store v30 to v29, !8887
        v31 = load v21
        v32 = call read_142(v31), !11175
        v33 = get_config ptr u64, DEBUG_STEP, !8891
        v34 = load v33
        v35 = call add_45(v32, v34), !11176
        v36 = call write_520(v20, v35), !11177
        v37 = const unit ()
        ret () v37
    }

    pub entry_orig fn get_all_totals_collateral() -> { { u64, u64 }, u64 }, !11178 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64 } __anon_3
        local { b256 } asset_id
        local mut u64 index
        local u64 len
        local mut { { u64, u64 }, u64 } result

        entry():
        v0 = call new_522(), !11179
        v1 = get_local ptr { { u64, u64 }, u64 }, result, !8908
        store v0 to v1, !8908
        v2 = get_local ptr u64, index, !8909
        v3 = const u64 0, !8910
        store v3 to v2, !8909
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !8911
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8911
        store v7 to v6, !8911
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !8911
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8911
        store v13 to v12, !8911
        v14 = load v4
        v15 = call len_291(v14), !11180
        v16 = get_local ptr u64, len, !8915
        store v15 to v16, !8915
        br while()

        while():
        v17 = get_local ptr u64, index, !8916
        v18 = load v17
        v19 = get_local ptr u64, len, !8917
        v20 = load v19
        v21 = call lt_26(v18, v20), !11181
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr { b256, u64, b256 }, __anon_1, !8921
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr b256, v23
        v25 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8921
        store v25 to v24, !8921
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26
        v28 = const u64 0
        store v28 to v27, !8921
        v29 = const u64 2
        v30 = get_elem_ptr v22, ptr b256, v29
        v31 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !8921
        store v31 to v30, !8921
        v32 = load v22
        v33 = get_local ptr u64, index, !8922
        v34 = load v33
        v35 = call get_315(v32, v34), !11182
        v36 = call unwrap_314(v35), !11183
        v37 = call read_307(v36), !11184
        v38 = get_local ptr { b256 }, asset_id, !8932
        store v37 to v38, !8932
        v39 = get_local ptr { { u64, u64 }, u64 }, result, !8933
        v40 = get_local ptr { b256 }, asset_id, !8934
        v41 = load v40
        v42 = get_local ptr { b256, u64, b256 }, __anon_2, !8935
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr b256, v43
        v45 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !8935
        store v45 to v44, !8935
        v46 = const u64 1
        v47 = get_elem_ptr v42, ptr u64, v46
        v48 = const u64 0
        store v48 to v47, !8935
        v49 = const u64 2
        v50 = get_elem_ptr v42, ptr b256, v49
        v51 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !8935
        store v51 to v50, !8935
        v52 = load v42
        v53 = get_local ptr { b256 }, asset_id, !8936
        v54 = load v53
        v55 = call get_364(v52, v54), !11185
        v56 = call try_read_324(v55), !11186
        v57 = const u64 0, !8943
        v58 = call unwrap_or_292(v56, v57), !11187
        v59 = get_local ptr { { b256 }, u64 }, __anon_3, !8947
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr { b256 }, v60, !8947
        store v41 to v61, !8947
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !8947
        store v58 to v63, !8947
        v64 = load v59
        v65 = call push_525(v39, v64), !11188
        v66 = get_local ptr u64, index, !8951
        v67 = load v66
        v68 = const u64 1, !8952
        v69 = call add_45(v67, v68), !11189
        v70 = get_local ptr u64, index, !8953
        store v69 to v70, !8953
        br while()

        end_while():
        v71 = get_local ptr { { u64, u64 }, u64 }, result, !8956
        v72 = load v71
        ret { { u64, u64 }, u64 } v72
    }

    pub entry_orig fn get_all_user_collateral(account !9037: { u64, ( { b256 } | { b256 } ) }) -> { { u64, u64 }, u64 }, !11190 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_4
        local { { b256 }, u64 } __anon_5
        local u64 collateral_amount
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local mut u64 index
        local u64 len
        local mut { { u64, u64 }, u64 } result

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call new_522(), !11191
        v1 = get_local ptr { { u64, u64 }, u64 }, result, !9044
        store v0 to v1, !9044
        v2 = get_local ptr u64, index, !9045
        v3 = const u64 0, !9046
        store v3 to v2, !9045
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !9047
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9047
        store v7 to v6, !9047
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !9047
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9047
        store v13 to v12, !9047
        v14 = load v4
        v15 = call len_291(v14), !11192
        v16 = get_local ptr u64, len, !9051
        store v15 to v16, !9051
        br while()

        while():
        v17 = get_local ptr u64, index, !9052
        v18 = load v17
        v19 = get_local ptr u64, len, !9053
        v20 = load v19
        v21 = call lt_26(v18, v20), !11193
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr { b256, u64, b256 }, __anon_1, !9057
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr b256, v23
        v25 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9057
        store v25 to v24, !9057
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26
        v28 = const u64 0
        store v28 to v27, !9057
        v29 = const u64 2
        v30 = get_elem_ptr v22, ptr b256, v29
        v31 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9057
        store v31 to v30, !9057
        v32 = load v22
        v33 = get_local ptr { b256, u64, b256 }, __anon_2, !9058
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9058
        store v36 to v35, !9058
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9058
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9058
        store v42 to v41, !9058
        v43 = load v33
        v44 = get_local ptr u64, index, !9059
        v45 = load v44
        v46 = call get_315(v43, v45), !11194
        v47 = call unwrap_314(v46), !11195
        v48 = call read_307(v47), !11196
        v49 = call get_301(v32, v48), !11197
        v50 = call read_294(v49), !11198
        v51 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9075
        store v50 to v51, !9075
        v52 = get_local ptr { b256, u64, b256 }, __anon_3, !9076
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr b256, v53
        v55 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9076
        store v55 to v54, !9076
        v56 = const u64 1
        v57 = get_elem_ptr v52, ptr u64, v56
        v58 = const u64 0
        store v58 to v57, !9076
        v59 = const u64 2
        v60 = get_elem_ptr v52, ptr b256, v59
        v61 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9076
        store v61 to v60, !9076
        v62 = load v52
        v63 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9077
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr { b256 }, v64, !3743
        v66 = load v65
        v67 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_4, !9078
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u64, ( { b256 } | { b256 } ) }, v68, !9078
        store account to v69, !9078
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr { b256 }, v70, !9078
        store v66 to v71, !9078
        v72 = load v67
        v73 = call get_325(v62, v72), !11199
        v74 = call try_read_324(v73), !11200
        v75 = const u64 0, !9085
        v76 = call unwrap_or_292(v74, v75), !11201
        v77 = get_local ptr u64, collateral_amount, !9089
        store v76 to v77, !9089
        v78 = get_local ptr { { u64, u64 }, u64 }, result, !9090
        v79 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9091
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr { b256 }, v80, !3743
        v82 = load v81
        v83 = get_local ptr u64, collateral_amount, !9092
        v84 = load v83
        v85 = get_local ptr { { b256 }, u64 }, __anon_5, !9093
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { b256 }, v86, !9093
        store v82 to v87, !9093
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr u64, v88, !9093
        store v84 to v89, !9093
        v90 = load v85
        v91 = call push_525(v78, v90), !11202
        v92 = get_local ptr u64, index, !9097
        v93 = load v92
        v94 = const u64 1, !9098
        v95 = call add_45(v93, v94), !11203
        v96 = get_local ptr u64, index, !9099
        store v95 to v96, !9099
        br while()

        end_while():
        v97 = get_local ptr { { u64, u64 }, u64 }, result, !9102
        v98 = load v97
        ret { { u64, u64 }, u64 } v98
    }

    pub entry_orig fn get_borrow_rate(utilization !9107: u256) -> u256, !11204 {
        entry(utilization: u256):
        v0 = call get_borrow_rate_internal_171(utilization), !11205
        ret u256 v0
    }

    pub entry_orig fn get_collateral_configurations() -> { { u64, u64 }, u64 }, !11206 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local mut u64 index
        local u64 len
        local mut { { u64, u64 }, u64 } result

        entry():
        v0 = call new_545(), !11207
        v1 = get_local ptr { { u64, u64 }, u64 }, result, !9120
        store v0 to v1, !9120
        v2 = get_local ptr u64, index, !9121
        v3 = const u64 0, !9122
        store v3 to v2, !9121
        v4 = get_local ptr { b256, u64, b256 }, __anon_0, !9123
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr b256, v5
        v7 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9123
        store v7 to v6, !9123
        v8 = const u64 1
        v9 = get_elem_ptr v4, ptr u64, v8
        v10 = const u64 0
        store v10 to v9, !9123
        v11 = const u64 2
        v12 = get_elem_ptr v4, ptr b256, v11
        v13 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9123
        store v13 to v12, !9123
        v14 = load v4
        v15 = call len_291(v14), !11208
        v16 = get_local ptr u64, len, !9127
        store v15 to v16, !9127
        br while()

        while():
        v17 = get_local ptr u64, index, !9128
        v18 = load v17
        v19 = get_local ptr u64, len, !9129
        v20 = load v19
        v21 = call lt_26(v18, v20), !11209
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr { b256, u64, b256 }, __anon_1, !9133
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr b256, v23
        v25 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9133
        store v25 to v24, !9133
        v26 = const u64 1
        v27 = get_elem_ptr v22, ptr u64, v26
        v28 = const u64 0
        store v28 to v27, !9133
        v29 = const u64 2
        v30 = get_elem_ptr v22, ptr b256, v29
        v31 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9133
        store v31 to v30, !9133
        v32 = load v22
        v33 = get_local ptr { b256, u64, b256 }, __anon_2, !9134
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9134
        store v36 to v35, !9134
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9134
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x9df2a06484efcf637a1639d6fcd4eee1c6221a329d5634bbb6ec1001372ecbd4, !9134
        store v42 to v41, !9134
        v43 = load v33
        v44 = get_local ptr u64, index, !9135
        v45 = load v44
        v46 = call get_315(v43, v45), !11210
        v47 = call unwrap_314(v46), !11211
        v48 = call read_307(v47), !11212
        v49 = call get_301(v32, v48), !11213
        v50 = call read_294(v49), !11214
        v51 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9151
        store v50 to v51, !9151
        v52 = get_local ptr { { u64, u64 }, u64 }, result, !9152
        v53 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9153
        v54 = load v53
        v55 = call push_548(v52, v54), !11215
        v56 = get_local ptr u64, index, !9157
        v57 = load v56
        v58 = const u64 1, !9158
        v59 = call add_45(v57, v58), !11216
        v60 = get_local ptr u64, index, !9159
        store v59 to v60, !9159
        br while()

        end_while():
        v61 = get_local ptr { { u64, u64 }, u64 }, result, !9162
        v62 = load v61
        ret { { u64, u64 }, u64 } v62
    }

    pub entry_orig fn get_collateral_reserves(asset_id !9208: { b256 }) -> { u256 }, !11217 {
        entry(asset_id: { b256 }):
        v0 = call get_collateral_reserves_internal_500(asset_id), !11218
        ret { u256 } v0
    }

    pub entry_orig fn get_market_basics() -> { u256, u256, u256, u256, u256, u256, u256 }, !11219 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9222
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9222
        store v3 to v2, !9222
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9222
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9222
        store v9 to v8, !9222
        v10 = load v0
        v11 = call read_132(v10), !11220
        ret { u256, u256, u256, u256, u256, u256, u256 } v11
    }

    pub entry_orig fn get_market_basics_with_interest() -> { u256, u256, u256, u256, u256, u256, u256 }, !11221 {
        local { b256, u64, b256 } __anon_0
        local { u256, u256 } __tuple_4
        local { u256, u256 } __tuple_4_
        local u256 borrow_index
        local u64 current_time
        local u256 last_accrual_time
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 supply_index

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9233
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9233
        store v3 to v2, !9233
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9233
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9233
        store v9 to v8, !9233
        v10 = load v0
        v11 = call read_132(v10), !11222
        v12 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9237
        store v11 to v12, !9237
        v13 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9238
        v14 = const u64 6
        v15 = get_elem_ptr v13, ptr u256, v14, !2453
        v16 = load v15
        v17 = get_local ptr u256, last_accrual_time, !9239
        store v16 to v17, !9239
        v18 = call timestamp_141(), !11223
        v19 = get_local ptr u64, current_time, !9243
        store v18 to v19, !9243
        v20 = get_local ptr u64, current_time, !9244
        v21 = load v20
        v22 = call into_139(v21), !11224
        v23 = get_local ptr u256, last_accrual_time, !9248
        v24 = load v23
        v25 = call accrued_interest_indices_154(v22, v24), !11225
        v26 = get_local ptr { u256, u256 }, __tuple_4, !9252
        store v25 to v26, !9252
        v27 = get_local ptr { u256, u256 }, __tuple_4, !9252
        v28 = load v27
        v29 = get_local ptr { u256, u256 }, __tuple_4_, !9252
        store v28 to v29, !9252
        v30 = get_local ptr { u256, u256 }, __tuple_4_, !9252
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u256, v31, !9252
        v33 = load v32
        v34 = get_local ptr u256, supply_index, !9252
        store v33 to v34, !9252
        v35 = get_local ptr { u256, u256 }, __tuple_4_, !9252
        v36 = const u64 1
        v37 = get_elem_ptr v35, ptr u256, v36, !9252
        v38 = load v37
        v39 = get_local ptr u256, borrow_index, !9252
        store v38 to v39, !9252
        v40 = get_local ptr u64, current_time, !9253
        v41 = load v40
        v42 = call into_139(v41), !11226
        v43 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9257
        v44 = const u64 6
        v45 = get_elem_ptr v43, ptr u256, v44, !9257
        store v42 to v45, !9257
        v46 = get_local ptr u256, supply_index, !9258
        v47 = load v46
        v48 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9259
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u256, v49, !9259
        store v47 to v50, !9259
        v51 = get_local ptr u256, borrow_index, !9260
        v52 = load v51
        v53 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9261
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr u256, v54, !9261
        store v52 to v55, !9261
        v56 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9262
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u256, v57, !2709
        v59 = load v58
        v60 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9263
        v61 = const u64 4
        v62 = get_elem_ptr v60, ptr u256, v61, !2492
        v63 = load v62
        v64 = call present_value_supply_156(v59, v63), !11227
        v65 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9267
        v66 = const u64 4
        v67 = get_elem_ptr v65, ptr u256, v66, !9267
        store v64 to v67, !9267
        v68 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9268
        v69 = const u64 1
        v70 = get_elem_ptr v68, ptr u256, v69, !2712
        v71 = load v70
        v72 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9269
        v73 = const u64 5
        v74 = get_elem_ptr v72, ptr u256, v73, !2524
        v75 = load v74
        v76 = call present_value_borrow_159(v71, v75), !11228
        v77 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9273
        v78 = const u64 5
        v79 = get_elem_ptr v77, ptr u256, v78, !9273
        store v76 to v79, !9273
        v80 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9274
        v81 = load v80
        ret { u256, u256, u256, u256, u256, u256, u256 } v81
    }

    pub entry_orig fn get_market_configuration() -> { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, !11229 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9278
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9278
        store v3 to v2, !9278
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9278
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9278
        store v9 to v8, !9278
        v10 = load v0
        v11 = call read_164(v10), !11230
        ret { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } v11
    }

    pub entry_orig fn get_pause_configuration() -> { bool, bool, bool, bool }, !11231 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9289
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9289
        store v3 to v2, !9289
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9289
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9289
        store v9 to v8, !9289
        v10 = load v0
        v11 = call read_567(v10), !11232
        ret { bool, bool, bool, bool } v11
    }

    pub entry_orig fn get_price(price_feed_id !9317: b256) -> { u64, u64, u64, u64 }, !11233 {
        local { u64 } __anon_0

        entry(price_feed_id: b256):
        v0 = get_local ptr { u64 }, __anon_0, !3798
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !3798
        v3 = const u64 1, !3798
        store v3 to v2, !3798
        v4 = load v0
        v5 = call get_price_internal_331(price_feed_id, v4), !11234
        ret { u64, u64, u64, u64 } v5
    }

    pub entry_orig fn get_pyth_contract_id() -> { b256 }, !11235 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9352
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9352
        store v3 to v2, !9352
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9352
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9352
        store v9 to v8, !9352
        v10 = load v0
        v11 = call read_183(v10), !11236
        ret { b256 } v11
    }

    pub entry_orig fn get_reserves() -> { u256 }, !11237 {
        entry():
        v0 = call get_reserves_internal_499(), !11238
        ret { u256 } v0
    }

    pub entry_orig fn get_supply_rate(utilization !9366: u256) -> u256, !11239 {
        entry(utilization: u256):
        v0 = call get_supply_rate_internal_161(utilization), !11240
        ret u256 v0
    }

    pub entry_orig fn get_user_balance_with_interest(account !9373: { u64, ( { b256 } | { b256 } ) }) -> { u256 }, !11241 {
        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_balance_with_interest_internal_582(account), !11242
        ret { u256 } v0
    }

    pub entry_orig fn get_user_basic(account !9461: { u64, ( { b256 } | { b256 } ) }) -> { { u256 }, u256, u256 }, !11243 {
        local { b256, u64, b256 } __anon_0

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9465
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9465
        store v3 to v2, !9465
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9465
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9465
        store v9 to v8, !9465
        v10 = load v0
        v11 = call get_239(v10, account), !11244
        v12 = call try_read_233(v11), !11245
        v13 = call default_270(), !11246
        v14 = call unwrap_or_232(v12, v13), !11247
        ret { { u256 }, u256, u256 } v14
    }

    pub entry_orig fn get_user_collateral(account !9487: { u64, ( { b256 } | { b256 } ) }, asset_id !9488: { b256 }) -> u64, !11248 {
        local { b256, u64, b256 } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_1

        entry(account: { u64, ( { b256 } | { b256 } ) }, asset_id: { b256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9492
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9492
        store v3 to v2, !9492
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9492
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !9492
        store v9 to v8, !9492
        v10 = load v0
        v11 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_1, !9493
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { u64, ( { b256 } | { b256 } ) }, v12, !9493
        store account to v13, !9493
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr { b256 }, v14, !9493
        store asset_id to v15, !9493
        v16 = load v11
        v17 = call get_325(v10, v16), !11249
        v18 = call try_read_324(v17), !11250
        v19 = const u64 0, !9500
        v20 = call unwrap_or_292(v18, v19), !11251
        ret u64 v20
    }

    pub entry_orig fn get_user_supply_borrow(account !9504: { u64, ( { b256 } | { b256 } ) }) -> { u256, u256 }, !11252 {
        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_supply_borrow_internal_487(account), !11253
        ret { u256, u256 } v0
    }

    pub entry_orig fn get_utilization() -> u256, !11254 {
        entry():
        v0 = call get_utilization_internal_155(), !11255
        ret u256 v0
    }

    pub entry_orig fn get_version() -> u8, !11256 {
        entry():
        v0 = const u8 5, !9527
        ret u8 v0
    }

    pub entry_orig fn is_liquidatable(account !9538: { u64, ( { b256 } | { b256 } ) }) -> bool, !11257 {
        local { u256 } present

        entry(account: { u64, ( { b256 } | { b256 } ) }):
        v0 = call get_user_balance_with_interest_internal_582(account), !11258
        v1 = get_local ptr { u256 }, present, !9545
        store v0 to v1, !9545
        v2 = get_local ptr { u256 }, present, !9546
        v3 = load v2
        v4 = call is_liquidatable_internal_290(account, v3), !11259
        ret bool v4
    }

    pub entry_orig fn pause(pause_config !9572: { bool, bool, bool, bool }) -> (), !11260 {
        local { { bool, bool, bool, bool } } __anon_0
        local { b256, u64, b256 } __anon_1

        entry(pause_config: { bool, bool, bool, bool }):
        v0 = call only_owner_467(), !11261
        v1 = get_local ptr { { bool, bool, bool, bool } }, __anon_0, !9579
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { bool, bool, bool, bool }, v2
        store pause_config to v3, !9579
        v4 = load v1
        v5 = call log_452(v4), !11262
        v6 = get_local ptr { b256, u64, b256 }, __anon_1, !9583
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7
        v9 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9583
        store v9 to v8, !9583
        v10 = const u64 1
        v11 = get_elem_ptr v6, ptr u64, v10
        v12 = const u64 0
        store v12 to v11, !9583
        v13 = const u64 2
        v14 = get_elem_ptr v6, ptr b256, v13
        v15 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9583
        store v15 to v14, !9583
        v16 = load v6
        v17 = call write_446(v16, pause_config), !11263
        v18 = const unit ()
        ret () v18
    }

    pub entry_orig fn pause_collateral_asset(asset_id !9587: { b256 }) -> (), !11264 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { { b256 } } __anon_2
        local mut { { b256 }, b256, u64, u256, u256, u256, u64, bool } configuration

        entry(asset_id: { b256 }):
        v0 = call only_owner_467(), !11265
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !9594
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9594
        store v4 to v3, !9594
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !9594
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9594
        store v10 to v9, !9594
        v11 = load v1
        v12 = call get_301(v11, asset_id), !11266
        v13 = call read_294(v12), !11267
        v14 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9601
        store v13 to v14, !9601
        v15 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9602
        v16 = const u64 7
        v17 = get_elem_ptr v15, ptr bool, v16, !9602
        v18 = const bool true, !9603
        store v18 to v17, !9602
        v19 = get_local ptr { b256, u64, b256 }, __anon_1, !9604
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr b256, v20
        v22 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9604
        store v22 to v21, !9604
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr u64, v23
        v25 = const u64 0
        store v25 to v24, !9604
        v26 = const u64 2
        v27 = get_elem_ptr v19, ptr b256, v26
        v28 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9604
        store v28 to v27, !9604
        v29 = load v19
        v30 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9605
        v31 = load v30
        v32 = call insert_474(v29, asset_id, v31), !11268
        v33 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9609
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34, !3743
        v36 = load v35
        v37 = get_local ptr { { b256 } }, __anon_2, !9610
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { b256 }, v38
        store v36 to v39, !9610
        v40 = load v37
        v41 = call log_602(v40), !11269
        v42 = const unit ()
        ret () v42
    }

    pub entry_orig fn quote_collateral(asset_id !9626: { b256 }, base_amount !9627: u64) -> u64, !11270 {
        entry(asset_id: { b256 }, base_amount: u64):
        v0 = call quote_collateral_internal_501(asset_id, base_amount), !11271
        ret u64 v0
    }

    pub entry_orig fn renounce_ownership() -> (), !11272 {
        entry():
        v0 = call renounce_ownership_607(), !11273
        v1 = const unit ()
        ret () v1
    }

    pub entry_orig fn resume_collateral_asset(asset_id !9677: { b256 }) -> (), !11274 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { { b256 } } __anon_2
        local mut { { b256 }, b256, u64, u256, u256, u256, u64, bool } configuration

        entry(asset_id: { b256 }):
        v0 = call only_owner_467(), !11275
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !9684
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9684
        store v4 to v3, !9684
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !9684
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9684
        store v10 to v9, !9684
        v11 = load v1
        v12 = call get_301(v11, asset_id), !11276
        v13 = call read_294(v12), !11277
        v14 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9691
        store v13 to v14, !9691
        v15 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9692
        v16 = const u64 7
        v17 = get_elem_ptr v15, ptr bool, v16, !9692
        v18 = const bool false, !9693
        store v18 to v17, !9692
        v19 = get_local ptr { b256, u64, b256 }, __anon_1, !9694
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr b256, v20
        v22 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9694
        store v22 to v21, !9694
        v23 = const u64 1
        v24 = get_elem_ptr v19, ptr u64, v23
        v25 = const u64 0
        store v25 to v24, !9694
        v26 = const u64 2
        v27 = get_elem_ptr v19, ptr b256, v26
        v28 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9694
        store v28 to v27, !9694
        v29 = load v19
        v30 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9695
        v31 = load v30
        v32 = call insert_474(v29, asset_id, v31), !11278
        v33 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, configuration, !9699
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34, !3743
        v36 = load v35
        v37 = get_local ptr { { b256 } }, __anon_2, !9700
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { b256 }, v38
        store v36 to v39, !9700
        v40 = load v37
        v41 = call log_612(v40), !11279
        v42 = const unit ()
        ret () v42
    }

    pub entry_orig fn set_pyth_contract_id(contract_id !9724: { b256 }) -> (), !11280 {
        local { b256, u64, b256 } __anon_0
        local { { b256 } } __anon_1

        entry(contract_id: { b256 }):
        v0 = call only_owner_467(), !11281
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !9731
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9731
        store v4 to v3, !9731
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !9731
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0xc9f05e40a03436c822e78a416687947db653880f61c7e4a00ec4059ee20c3cbd, !9731
        store v10 to v9, !9731
        v11 = load v1
        v12 = call write_618(v11, contract_id), !11282
        v13 = get_local ptr { { b256 } }, __anon_1, !9735
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { b256 }, v14
        store contract_id to v15, !9735
        v16 = load v13
        v17 = call log_621(v16), !11283
        v18 = const unit ()
        ret () v18
    }

    pub entry_orig fn supply_base() -> (), !11284 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_10
        local { { u64, ( { b256 } | { b256 } ) }, u256, u256 } __anon_11
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_12
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { u64 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9
        local { u256, u256 } __tuple_1
        local { u256, u256 } __tuple_1_
        local u64 amount
        local { b256 } base_asset_id
        local { u64, ( { b256 } | { b256 } ) } caller
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local u256 repay_amount
        local u256 supply_amount
        local { u256 } user_balance
        local { { u256 }, u256, u256 } user_basic
        local { u256 } user_principal
        local { u256 } user_principal_new

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9767
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9767
        store v3 to v2, !9767
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9767
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xec66306616d418a86169bf444e52fce3f5f320381ecf4fbfb9d6a1d21c15827e, !9767
        store v9 to v8, !9767
        v10 = load v0
        v11 = call read_116(v10), !11285
        v12 = call not_15(v11), !11286
        v13 = get_local ptr { u64 }, __anon_1, !1845
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !1845
        v16 = const u64 1, !1845
        store v16 to v15, !1845
        v17 = load v13
        v18 = call require_112(v12, v17), !11287
        v19 = call msg_amount_194(), !11288
        v20 = get_local ptr u64, amount, !9780
        store v19 to v20, !9780
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !9781
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9781
        store v24 to v23, !9781
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !9781
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9781
        store v30 to v29, !9781
        v31 = load v21
        v32 = call read_164(v31), !11289
        v33 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v32 to v33
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34, !7354
        v36 = load v35
        v37 = get_local ptr { b256 }, base_asset_id, !9785
        store v36 to v37, !9785
        v38 = get_local ptr u64, amount, !9786
        v39 = load v38
        v40 = const u64 0, !9787
        v41 = call gt_40(v39, v40), !11290
        cbr v41, block0(), block1(v41), !9791

        block0():
        v42 = call msg_asset_id_197(), !11291
        v43 = get_local ptr { b256 }, base_asset_id, !9795
        v44 = load v43
        v45 = call eq_196(v42, v44), !11292
        br block1(v45), !9791

        block1(v46: bool):
        v47 = get_local ptr { u64 }, __anon_4, !1845
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !1845
        v50 = const u64 11, !1845
        store v50 to v49, !1845
        v51 = load v47
        v52 = call require_112(v46, v51), !11293
        v53 = call accrue_internal_131(), !11294
        v54 = call msg_sender_347(), !11295
        v55 = call unwrap_346(v54), !11296
        v56 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9811
        store v55 to v56, !9811
        v57 = get_local ptr { b256, u64, b256 }, __anon_5, !9812
        v58 = const u64 0
        v59 = get_elem_ptr v57, ptr b256, v58
        v60 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9812
        store v60 to v59, !9812
        v61 = const u64 1
        v62 = get_elem_ptr v57, ptr u64, v61
        v63 = const u64 0
        store v63 to v62, !9812
        v64 = const u64 2
        v65 = get_elem_ptr v57, ptr b256, v64
        v66 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !9812
        store v66 to v65, !9812
        v67 = load v57
        v68 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9813
        v69 = load v68
        v70 = call get_239(v67, v69), !11297
        v71 = call try_read_233(v70), !11298
        v72 = call default_270(), !11299
        v73 = call unwrap_or_232(v71, v72), !11300
        v74 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9826
        store v73 to v74, !9826
        v75 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9827
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr { u256 }, v76, !3680
        v78 = load v77
        v79 = get_local ptr { u256 }, user_principal, !9828
        store v78 to v79, !9828
        v80 = get_local ptr { u256 }, user_principal, !9829
        v81 = load v80
        v82 = call present_value_273(v81), !11301
        v83 = get_local ptr u64, amount, !9833
        v84 = load v83
        v85 = call from_140(v84), !11302
        v86 = call try_from_282(v85), !11303
        v87 = call unwrap_281(v86), !11304
        v88 = call add_376(v82, v87), !11305
        v89 = get_local ptr { u256 }, user_balance, !9846
        store v88 to v89, !9846
        v90 = get_local ptr { u256 }, user_balance, !9847
        v91 = load v90
        v92 = call principal_value_378(v91), !11306
        v93 = get_local ptr { u256 }, user_principal_new, !9851
        store v92 to v93, !9851
        v94 = get_local ptr { u256 }, user_principal, !9852
        v95 = load v94
        v96 = get_local ptr { u256 }, user_principal_new, !9853
        v97 = load v96
        v98 = call repay_and_supply_amount_390(v95, v97), !11307
        v99 = get_local ptr { u256, u256 }, __tuple_1, !9857
        store v98 to v99, !9857
        v100 = get_local ptr { u256, u256 }, __tuple_1, !9857
        v101 = load v100
        v102 = get_local ptr { u256, u256 }, __tuple_1_, !9857
        store v101 to v102, !9857
        v103 = get_local ptr { u256, u256 }, __tuple_1_, !9857
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u256, v104, !9857
        v106 = load v105
        v107 = get_local ptr u256, repay_amount, !9857
        store v106 to v107, !9857
        v108 = get_local ptr { u256, u256 }, __tuple_1_, !9857
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u256, v109, !9857
        v111 = load v110
        v112 = get_local ptr u256, supply_amount, !9857
        store v111 to v112, !9857
        v113 = get_local ptr { b256, u64, b256 }, __anon_6, !9858
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr b256, v114
        v116 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9858
        store v116 to v115, !9858
        v117 = const u64 1
        v118 = get_elem_ptr v113, ptr u64, v117
        v119 = const u64 0
        store v119 to v118, !9858
        v120 = const u64 2
        v121 = get_elem_ptr v113, ptr b256, v120
        v122 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9858
        store v122 to v121, !9858
        v123 = load v113
        v124 = call read_132(v123), !11308
        v125 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9862
        store v124 to v125, !9862
        v126 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9863
        v127 = const u64 4
        v128 = get_elem_ptr v126, ptr u256, v127, !2492
        v129 = load v128
        v130 = get_local ptr u256, supply_amount, !9864
        v131 = load v130
        v132 = call add_124(v129, v131), !11309
        v133 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9865
        v134 = const u64 4
        v135 = get_elem_ptr v133, ptr u256, v134, !9865
        store v132 to v135, !9865
        v136 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9868
        v137 = const u64 5
        v138 = get_elem_ptr v136, ptr u256, v137, !2524
        v139 = load v138
        v140 = get_local ptr u256, repay_amount, !9869
        v141 = load v140
        v142 = call subtract_125(v139, v141), !11310
        v143 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9870
        v144 = const u64 5
        v145 = get_elem_ptr v143, ptr u256, v144, !9870
        store v142 to v145, !9870
        v146 = get_local ptr { b256, u64, b256 }, __anon_7, !9873
        v147 = const u64 0
        v148 = get_elem_ptr v146, ptr b256, v147
        v149 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9873
        store v149 to v148, !9873
        v150 = const u64 1
        v151 = get_elem_ptr v146, ptr u64, v150
        v152 = const u64 0
        store v152 to v151, !9873
        v153 = const u64 2
        v154 = get_elem_ptr v146, ptr b256, v153
        v155 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !9873
        store v155 to v154, !9873
        v156 = load v146
        v157 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9874
        v158 = load v157
        v159 = call write_179(v156, v158), !11311
        v160 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9878
        v161 = load v160
        v162 = get_local ptr { { u256 }, u256, u256 }, user_basic, !9879
        v163 = load v162
        v164 = get_local ptr { u256 }, user_principal_new, !9880
        v165 = load v164
        v166 = call update_base_principal_381(v161, v163, v165), !11312
        v167 = get_local ptr { u256 }, user_balance, !9884
        v168 = load v167
        v169 = call zero_277(), !11313
        v170 = call lt_377(v168, v169), !11314
        cbr v170, block2(), block3(), !9888

        block2():
        v171 = get_local ptr { u256 }, user_balance, !9891
        v172 = load v171
        v173 = call wrapping_neg_284(v172), !11315
        v174 = call try_from_280(v173), !11316
        v175 = call unwrap_278(v174), !11317
        v176 = get_local ptr { b256, u64, b256 }, __anon_8, !9901
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr b256, v177
        v179 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9901
        store v179 to v178, !9901
        v180 = const u64 1
        v181 = get_elem_ptr v176, ptr u64, v180
        v182 = const u64 0
        store v182 to v181, !9901
        v183 = const u64 2
        v184 = get_elem_ptr v176, ptr b256, v183
        v185 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !9901
        store v185 to v184, !9901
        v186 = load v176
        v187 = call read_164(v186), !11318
        v188 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v187 to v188
        v189 = const u64 16
        v190 = get_elem_ptr v188, ptr u256, v189, !7431
        v191 = load v190
        v192 = call ge_178(v175, v191), !11319
        v193 = get_local ptr { u64 }, __anon_10, !1845
        v194 = const u64 0
        v195 = get_elem_ptr v193, ptr u64, v194, !1845
        v196 = const u64 9, !1845
        store v196 to v195, !1845
        v197 = load v193
        v198 = call require_112(v192, v197), !11320
        v199 = const unit ()
        br block4(v199)

        block3():
        v200 = const unit ()
        br block4(v200)

        block4(v201: ()):
        v202 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !9911
        v203 = load v202
        v204 = get_local ptr u256, supply_amount, !9912
        v205 = load v204
        v206 = get_local ptr u256, repay_amount, !9913
        v207 = load v206
        v208 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, __anon_11, !9914
        v209 = const u64 0
        v210 = get_elem_ptr v208, ptr { u64, ( { b256 } | { b256 } ) }, v209
        store v203 to v210, !9914
        v211 = const u64 1
        v212 = get_elem_ptr v208, ptr u256, v211
        store v205 to v212, !9914
        v213 = const u64 2
        v214 = get_elem_ptr v208, ptr u256, v213
        store v207 to v214, !9914
        v215 = load v208
        v216 = call log_625(v215), !11321
        v217 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !9918
        v218 = load v217
        v219 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_12, !9919
        v220 = const u64 0
        v221 = get_elem_ptr v219, ptr { u256, u256, u256, u256, u256, u256, u256 }, v220
        store v218 to v221, !9919
        v222 = load v219
        v223 = call log_393(v222), !11322
        v224 = const unit ()
        ret () v224
    }

    pub entry_orig fn supply_collateral() -> (), !11323 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_11
        local { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 } __anon_12
        local { u64 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { u64 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { u64 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_8
        local { b256, u64, b256 } __anon_9
        local u64 amount
        local { b256 } asset_id
        local { u64, ( { b256 } | { b256 } ) } caller
        local { { b256 }, b256, u64, u256, u256, u256, u64, bool } collateral_configuration
        local u64 total_collateral
        local u64 user_collateral

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9948
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !9948
        store v3 to v2, !9948
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9948
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xec66306616d418a86169bf444e52fce3f5f320381ecf4fbfb9d6a1d21c15827e, !9948
        store v9 to v8, !9948
        v10 = load v0
        v11 = call read_116(v10), !11324
        v12 = call not_15(v11), !11325
        v13 = get_local ptr { u64 }, __anon_1, !1845
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !1845
        v16 = const u64 1, !1845
        store v16 to v15, !1845
        v17 = load v13
        v18 = call require_112(v12, v17), !11326
        v19 = call msg_amount_194(), !11327
        v20 = get_local ptr u64, amount, !9961
        store v19 to v20, !9961
        v21 = get_local ptr u64, amount, !9962
        v22 = load v21
        v23 = const u64 0, !9963
        v24 = call gt_40(v22, v23), !11328
        v25 = get_local ptr { u64 }, __anon_2, !1845
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !1845
        v28 = const u64 11, !1845
        store v28 to v27, !1845
        v29 = load v25
        v30 = call require_112(v24, v29), !11329
        v31 = call msg_asset_id_197(), !11330
        v32 = get_local ptr { b256 }, asset_id, !9973
        store v31 to v32, !9973
        v33 = get_local ptr { b256, u64, b256 }, __anon_3, !9974
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9974
        store v36 to v35, !9974
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9974
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !9974
        store v42 to v41, !9974
        v43 = load v33
        v44 = get_local ptr { b256 }, asset_id, !9975
        v45 = load v44
        v46 = call get_301(v43, v45), !11331
        v47 = call read_294(v46), !11332
        v48 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9982
        store v47 to v48, !9982
        v49 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !9983
        v50 = const u64 7
        v51 = get_elem_ptr v49, ptr bool, v50, !7703
        v52 = load v51
        v53 = call not_15(v52), !11333
        v54 = get_local ptr { u64 }, __anon_4, !1845
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr u64, v55, !1845
        v57 = const u64 1, !1845
        store v57 to v56, !1845
        v58 = load v54
        v59 = call require_112(v53, v58), !11334
        v60 = get_local ptr { b256, u64, b256 }, __anon_5, !9990
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr b256, v61
        v63 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !9990
        store v63 to v62, !9990
        v64 = const u64 1
        v65 = get_elem_ptr v60, ptr u64, v64
        v66 = const u64 0
        store v66 to v65, !9990
        v67 = const u64 2
        v68 = get_elem_ptr v60, ptr b256, v67
        v69 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !9990
        store v69 to v68, !9990
        v70 = load v60
        v71 = get_local ptr { b256 }, asset_id, !9991
        v72 = load v71
        v73 = call get_364(v70, v72), !11335
        v74 = call try_read_324(v73), !11336
        v75 = const u64 0, !9998
        v76 = call unwrap_or_292(v74, v75), !11337
        v77 = get_local ptr u64, amount, !10002
        v78 = load v77
        v79 = call add_45(v76, v78), !11338
        v80 = get_local ptr u64, total_collateral, !10006
        store v79 to v80, !10006
        v81 = get_local ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, collateral_configuration, !10007
        v82 = const u64 6
        v83 = get_elem_ptr v81, ptr u64, v82, !7698
        v84 = load v83
        v85 = get_local ptr u64, total_collateral, !10008
        v86 = load v85
        v87 = call ge_193(v84, v86), !11339
        v88 = get_local ptr { u64 }, __anon_6, !1845
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr u64, v89, !1845
        v91 = const u64 7, !1845
        store v91 to v90, !1845
        v92 = load v88
        v93 = call require_112(v87, v92), !11340
        v94 = call msg_sender_347(), !11341
        v95 = call unwrap_346(v94), !11342
        v96 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10021
        store v95 to v96, !10021
        v97 = get_local ptr { b256, u64, b256 }, __anon_7, !10022
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr b256, v98
        v100 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10022
        store v100 to v99, !10022
        v101 = const u64 1
        v102 = get_elem_ptr v97, ptr u64, v101
        v103 = const u64 0
        store v103 to v102, !10022
        v104 = const u64 2
        v105 = get_elem_ptr v97, ptr b256, v104
        v106 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10022
        store v106 to v105, !10022
        v107 = load v97
        v108 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10023
        v109 = load v108
        v110 = get_local ptr { b256 }, asset_id, !10024
        v111 = load v110
        v112 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_8, !10025
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr { u64, ( { b256 } | { b256 } ) }, v113, !10025
        store v109 to v114, !10025
        v115 = const u64 1
        v116 = get_elem_ptr v112, ptr { b256 }, v115, !10025
        store v111 to v116, !10025
        v117 = load v112
        v118 = call get_325(v107, v117), !11343
        v119 = call try_read_324(v118), !11344
        v120 = const u64 0, !10032
        v121 = call unwrap_or_292(v119, v120), !11345
        v122 = get_local ptr u64, amount, !10036
        v123 = load v122
        v124 = call add_45(v121, v123), !11346
        v125 = get_local ptr u64, user_collateral, !10040
        store v124 to v125, !10040
        v126 = get_local ptr { b256, u64, b256 }, __anon_9, !10041
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr b256, v127
        v129 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10041
        store v129 to v128, !10041
        v130 = const u64 1
        v131 = get_elem_ptr v126, ptr u64, v130
        v132 = const u64 0
        store v132 to v131, !10041
        v133 = const u64 2
        v134 = get_elem_ptr v126, ptr b256, v133
        v135 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10041
        store v135 to v134, !10041
        v136 = load v126
        v137 = get_local ptr { b256 }, asset_id, !10042
        v138 = load v137
        v139 = get_local ptr u64, total_collateral, !10043
        v140 = load v139
        v141 = call insert_366(v136, v138, v140), !11347
        v142 = get_local ptr { b256, u64, b256 }, __anon_10, !10047
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr b256, v143
        v145 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10047
        store v145 to v144, !10047
        v146 = const u64 1
        v147 = get_elem_ptr v142, ptr u64, v146
        v148 = const u64 0
        store v148 to v147, !10047
        v149 = const u64 2
        v150 = get_elem_ptr v142, ptr b256, v149
        v151 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10047
        store v151 to v150, !10047
        v152 = load v142
        v153 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10048
        v154 = load v153
        v155 = get_local ptr { b256 }, asset_id, !10049
        v156 = load v155
        v157 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_11, !10050
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr { u64, ( { b256 } | { b256 } ) }, v158, !10050
        store v154 to v159, !10050
        v160 = const u64 1
        v161 = get_elem_ptr v157, ptr { b256 }, v160, !10050
        store v156 to v161, !10050
        v162 = load v157
        v163 = get_local ptr u64, user_collateral, !10051
        v164 = load v163
        v165 = call insert_362(v152, v162, v164), !11348
        v166 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10055
        v167 = load v166
        v168 = get_local ptr { b256 }, asset_id, !10056
        v169 = load v168
        v170 = get_local ptr u64, amount, !10057
        v171 = load v170
        v172 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, __anon_12, !10058
        v173 = const u64 0
        v174 = get_elem_ptr v172, ptr { u64, ( { b256 } | { b256 } ) }, v173
        store v167 to v174, !10058
        v175 = const u64 1
        v176 = get_elem_ptr v172, ptr { b256 }, v175
        store v169 to v176, !10058
        v177 = const u64 2
        v178 = get_elem_ptr v172, ptr u64, v177
        store v171 to v178, !10058
        v179 = load v172
        v180 = call log_629(v179), !11349
        v181 = const unit ()
        ret () v181
    }

    pub entry_orig fn totals_collateral(asset_id !10088: { b256 }) -> u64, !11350 {
        local { b256, u64, b256 } __anon_0

        entry(asset_id: { b256 }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10092
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10092
        store v3 to v2, !10092
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10092
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10092
        store v9 to v8, !10092
        v10 = load v0
        v11 = call get_364(v10, asset_id), !11351
        v12 = call try_read_324(v11), !11352
        v13 = const u64 0, !10099
        v14 = call unwrap_or_292(v12, v13), !11353
        ret u64 v14
    }

    pub entry_orig fn transfer_ownership(new_owner !10103: { u64, ( { b256 } | { b256 } ) }) -> (), !11354 {
        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call transfer_ownership_634(new_owner), !11355
        v1 = const unit ()
        ret () v1
    }

    pub entry_orig fn update_collateral_asset(asset_id !10159: { b256 }, configuration !10160: { { b256 }, b256, u64, u256, u256, u256, u64, bool }) -> (), !11356 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } } __anon_3

        entry(asset_id: { b256 }, configuration: { { b256 }, b256, u64, u256, u256, u256, u64, bool }):
        v0 = call only_owner_467(), !11357
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !10167
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10167
        store v4 to v3, !10167
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !10167
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10167
        store v10 to v9, !10167
        v11 = load v1
        v12 = call get_301(v11, asset_id), !11358
        v13 = call try_read_473(v12), !11359
        v14 = call is_some_641(v13), !11360
        v15 = get_local ptr { u64 }, __anon_1, !1845
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1845
        v18 = const u64 12, !1845
        store v18 to v17, !1845
        v19 = load v15
        v20 = call require_112(v14, v19), !11361
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !10180
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10180
        store v24 to v23, !10180
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !10180
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x888b34af1434effbaa9023a20acf7d887a0fadddb9380185e1512b731ffc255e, !10180
        store v30 to v29, !10180
        v31 = load v21
        v32 = call insert_474(v31, asset_id, configuration), !11362
        v33 = get_local ptr { { b256 }, { { b256 }, b256, u64, u256, u256, u256, u64, bool } }, __anon_3, !10184
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr { b256 }, v34
        store asset_id to v35, !10184
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { { b256 }, b256, u64, u256, u256, u256, u64, bool }, v36
        store configuration to v37, !10184
        v38 = load v33
        v39 = call log_642(v38), !11363
        v40 = const unit ()
        ret () v40
    }

    pub entry_orig fn update_fee(update_data !10216: { { u64, u64 }, u64 }) -> u64, !11364 {
        entry(update_data: { { u64, u64 }, u64 }):
        v0 = call update_fee_internal_648(update_data), !11365
        ret u64 v0
    }

    pub entry_orig fn update_market_configuration(configuration !10269: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }) -> (), !11366 {
        local { b256, u64, b256 } __anon_0
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } } __anon_5
        local mut { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } configuration_

        entry(configuration: { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }):
        v0 = call only_owner_467(), !11367
        v1 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10276
        store configuration to v1, !10276
        v2 = get_local ptr { b256, u64, b256 }, __anon_0, !10277
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr b256, v3
        v5 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10277
        store v5 to v4, !10277
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = const u64 0
        store v8 to v7, !10277
        v9 = const u64 2
        v10 = get_elem_ptr v2, ptr b256, v9
        v11 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10277
        store v11 to v10, !10277
        v12 = load v2
        v13 = call read_164(v12), !11368
        v14 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_1
        store v13 to v14
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { b256 }, v15, !7354
        v17 = load v16
        v18 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10281
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { b256 }, v19, !10281
        store v17 to v20, !10281
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !10282
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10282
        store v24 to v23, !10282
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !10282
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10282
        store v30 to v29, !10282
        v31 = load v21
        v32 = call read_164(v31), !11369
        v33 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v32 to v33
        v34 = const u64 12
        v35 = get_elem_ptr v33, ptr u256, v34, !6401
        v36 = load v35
        v37 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10286
        v38 = const u64 12
        v39 = get_elem_ptr v37, ptr u256, v38, !10286
        store v36 to v39, !10286
        v40 = get_local ptr { b256, u64, b256 }, __anon_4, !10287
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr b256, v41
        v43 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10287
        store v43 to v42, !10287
        v44 = const u64 1
        v45 = get_elem_ptr v40, ptr u64, v44
        v46 = const u64 0
        store v46 to v45, !10287
        v47 = const u64 2
        v48 = get_elem_ptr v40, ptr b256, v47
        v49 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10287
        store v49 to v48, !10287
        v50 = load v40
        v51 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10288
        v52 = load v51
        v53 = call write_440(v50, v52), !11370
        v54 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, configuration_, !10292
        v55 = load v54
        v56 = get_local ptr { { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } }, __anon_5, !10293
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, v57
        store v55 to v58, !10293
        v59 = load v56
        v60 = call log_457(v59), !11371
        v61 = const unit ()
        ret () v61
    }

    pub entry_orig fn update_price_feeds_if_necessary(price_data_update !10301: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !11372 {
        entry(price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !11373
        v1 = call update_price_feeds_if_necessary_internal_182(price_data_update), !11374
        v2 = const unit ()
        ret () v2
    }

    pub entry_orig fn withdraw_base(amount !10316: u64, price_data_update !10317: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !11375 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_10
        local { u64 } __anon_11
        local { b256, u64, b256 } __anon_12
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_13
        local { u64 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { u64, ( { b256 } | { b256 } ) }, u256, u256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { u256, u256, u256, u256, u256, u256, u256 } } __anon_7
        local { b256, u64, b256 } __anon_8
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_9
        local { u256, u256 } __tuple_2
        local { u256, u256 } __tuple_2_
        local u256 borrow_amount
        local { u64, ( { b256 } | { b256 } ) } caller
        local mut { u256, u256, u256, u256, u256, u256, u256 } market_basic
        local { u256 } user_balance
        local { { u256 }, u256, u256 } user_basic
        local { u256 } user_principal
        local { u256 } user_principal_new
        local u256 withdraw_amount

        entry(amount: u64, price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !11376
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !10324
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !10324
        store v4 to v3, !10324
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 1
        store v7 to v6, !10324
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x06e9c1c2a569f4cd31c43ea64b51b66948b0090a8ba8d8d5b0a61bf54b1f4f78, !10324
        store v10 to v9, !10324
        v11 = load v1
        v12 = call read_116(v11), !11377
        v13 = call not_15(v12), !11378
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !11379
        v20 = const u64 0, !10334
        v21 = call gt_40(amount, v20), !11380
        v22 = get_local ptr { u64 }, __anon_2, !1845
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !1845
        v25 = const u64 11, !1845
        store v25 to v24, !1845
        v26 = load v22
        v27 = call require_112(v21, v26), !11381
        v28 = call accrue_internal_131(), !11382
        v29 = call msg_sender_347(), !11383
        v30 = call unwrap_346(v29), !11384
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10350
        store v30 to v31, !10350
        v32 = get_local ptr { b256, u64, b256 }, __anon_3, !10351
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr b256, v33
        v35 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !10351
        store v35 to v34, !10351
        v36 = const u64 1
        v37 = get_elem_ptr v32, ptr u64, v36
        v38 = const u64 0
        store v38 to v37, !10351
        v39 = const u64 2
        v40 = get_elem_ptr v32, ptr b256, v39
        v41 = const b256 0x866f6db6a3fcbb4009947872e5712aa15d1cf1a9a44830ab07cc357481c6d0e7, !10351
        store v41 to v40, !10351
        v42 = load v32
        v43 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10352
        v44 = load v43
        v45 = call get_239(v42, v44), !11385
        v46 = call try_read_233(v45), !11386
        v47 = call default_270(), !11387
        v48 = call unwrap_or_232(v46, v47), !11388
        v49 = get_local ptr { { u256 }, u256, u256 }, user_basic, !10365
        store v48 to v49, !10365
        v50 = get_local ptr { { u256 }, u256, u256 }, user_basic, !10366
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr { u256 }, v51, !3680
        v53 = load v52
        v54 = get_local ptr { u256 }, user_principal, !10367
        store v53 to v54, !10367
        v55 = get_local ptr { u256 }, user_principal, !10368
        v56 = load v55
        v57 = call present_value_273(v56), !11389
        v58 = call from_140(amount), !11390
        v59 = call try_from_282(v58), !11391
        v60 = call unwrap_281(v59), !11392
        v61 = call subtract_392(v57, v60), !11393
        v62 = get_local ptr { u256 }, user_balance, !10384
        store v61 to v62, !10384
        v63 = get_local ptr { u256 }, user_balance, !10385
        v64 = load v63
        v65 = call principal_value_378(v64), !11394
        v66 = get_local ptr { u256 }, user_principal_new, !10389
        store v65 to v66, !10389
        v67 = get_local ptr { u256 }, user_principal, !10390
        v68 = load v67
        v69 = get_local ptr { u256 }, user_principal_new, !10391
        v70 = load v69
        v71 = call withdraw_and_borrow_amount_661(v68, v70), !11395
        v72 = get_local ptr { u256, u256 }, __tuple_2, !10395
        store v71 to v72, !10395
        v73 = get_local ptr { u256, u256 }, __tuple_2, !10395
        v74 = load v73
        v75 = get_local ptr { u256, u256 }, __tuple_2_, !10395
        store v74 to v75, !10395
        v76 = get_local ptr { u256, u256 }, __tuple_2_, !10395
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u256, v77, !10395
        v79 = load v78
        v80 = get_local ptr u256, withdraw_amount, !10395
        store v79 to v80, !10395
        v81 = get_local ptr { u256, u256 }, __tuple_2_, !10395
        v82 = const u64 1
        v83 = get_elem_ptr v81, ptr u256, v82, !10395
        v84 = load v83
        v85 = get_local ptr u256, borrow_amount, !10395
        store v84 to v85, !10395
        v86 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10396
        v87 = load v86
        v88 = get_local ptr u256, withdraw_amount, !10397
        v89 = load v88
        v90 = get_local ptr u256, borrow_amount, !10398
        v91 = load v90
        v92 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, u256, u256 }, __anon_4, !10399
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { u64, ( { b256 } | { b256 } ) }, v93
        store v87 to v94, !10399
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr u256, v95
        store v89 to v96, !10399
        v97 = const u64 2
        v98 = get_elem_ptr v92, ptr u256, v97
        store v91 to v98, !10399
        v99 = load v92
        v100 = call log_662(v99), !11396
        v101 = get_local ptr { b256, u64, b256 }, __anon_5, !10403
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr b256, v102
        v104 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10403
        store v104 to v103, !10403
        v105 = const u64 1
        v106 = get_elem_ptr v101, ptr u64, v105
        v107 = const u64 0
        store v107 to v106, !10403
        v108 = const u64 2
        v109 = get_elem_ptr v101, ptr b256, v108
        v110 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10403
        store v110 to v109, !10403
        v111 = load v101
        v112 = call read_132(v111), !11397
        v113 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10407
        store v112 to v113, !10407
        v114 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10408
        v115 = const u64 4
        v116 = get_elem_ptr v114, ptr u256, v115, !2492
        v117 = load v116
        v118 = get_local ptr u256, withdraw_amount, !10409
        v119 = load v118
        v120 = call subtract_125(v117, v119), !11398
        v121 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10410
        v122 = const u64 4
        v123 = get_elem_ptr v121, ptr u256, v122, !10410
        store v120 to v123, !10410
        v124 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10413
        v125 = const u64 5
        v126 = get_elem_ptr v124, ptr u256, v125, !2524
        v127 = load v126
        v128 = get_local ptr u256, borrow_amount, !10414
        v129 = load v128
        v130 = call add_124(v127, v129), !11399
        v131 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10415
        v132 = const u64 5
        v133 = get_elem_ptr v131, ptr u256, v132, !10415
        store v130 to v133, !10415
        v134 = get_local ptr { b256, u64, b256 }, __anon_6, !10418
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr b256, v135
        v137 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10418
        store v137 to v136, !10418
        v138 = const u64 1
        v139 = get_elem_ptr v134, ptr u64, v138
        v140 = const u64 0
        store v140 to v139, !10418
        v141 = const u64 2
        v142 = get_elem_ptr v134, ptr b256, v141
        v143 = const b256 0x411f67b1bf136f1748de53161729ada89f0b6972b8783bcd860925d7cfddceba, !10418
        store v143 to v142, !10418
        v144 = load v134
        v145 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10419
        v146 = load v145
        v147 = call write_179(v144, v146), !11400
        v148 = get_local ptr { u256, u256, u256, u256, u256, u256, u256 }, market_basic, !10423
        v149 = load v148
        v150 = get_local ptr { { u256, u256, u256, u256, u256, u256, u256 } }, __anon_7, !10424
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr { u256, u256, u256, u256, u256, u256, u256 }, v151
        store v149 to v152, !10424
        v153 = load v150
        v154 = call log_393(v153), !11401
        v155 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10428
        v156 = load v155
        v157 = get_local ptr { { u256 }, u256, u256 }, user_basic, !10429
        v158 = load v157
        v159 = get_local ptr { u256 }, user_principal_new, !10430
        v160 = load v159
        v161 = call update_base_principal_381(v156, v158, v160), !11402
        v162 = get_local ptr { u256 }, user_balance, !10434
        v163 = load v162
        v164 = call zero_277(), !11403
        v165 = call lt_377(v163, v164), !11404
        cbr v165, block0(), block1(), !10438

        block0():
        v166 = get_local ptr { u256 }, user_balance, !10441
        v167 = load v166
        v168 = call wrapping_neg_284(v167), !11405
        v169 = call try_from_280(v168), !11406
        v170 = call unwrap_278(v169), !11407
        v171 = get_local ptr { b256, u64, b256 }, __anon_8, !10451
        v172 = const u64 0
        v173 = get_elem_ptr v171, ptr b256, v172
        v174 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10451
        store v174 to v173, !10451
        v175 = const u64 1
        v176 = get_elem_ptr v171, ptr u64, v175
        v177 = const u64 0
        store v177 to v176, !10451
        v178 = const u64 2
        v179 = get_elem_ptr v171, ptr b256, v178
        v180 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10451
        store v180 to v179, !10451
        v181 = load v171
        v182 = call read_164(v181), !11408
        v183 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_9
        store v182 to v183
        v184 = const u64 16
        v185 = get_elem_ptr v183, ptr u256, v184, !7431
        v186 = load v185
        v187 = call ge_178(v170, v186), !11409
        v188 = get_local ptr { u64 }, __anon_10, !1845
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !1845
        v191 = const u64 9, !1845
        store v191 to v190, !1845
        v192 = load v188
        v193 = call require_112(v187, v192), !11410
        v194 = call update_price_feeds_if_necessary_internal_182(price_data_update), !11411
        v195 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10464
        v196 = load v195
        v197 = call is_borrow_collateralized_665(v196), !11412
        v198 = get_local ptr { u64 }, __anon_11, !1845
        v199 = const u64 0
        v200 = get_elem_ptr v198, ptr u64, v199, !1845
        v201 = const u64 8, !1845
        store v201 to v200, !1845
        v202 = load v198
        v203 = call require_112(v197, v202), !11413
        v204 = const unit ()
        br block2(v204)

        block1():
        v205 = const unit ()
        br block2(v205)

        block2(v206: ()):
        v207 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10471
        v208 = load v207
        v209 = get_local ptr { b256, u64, b256 }, __anon_12, !10472
        v210 = const u64 0
        v211 = get_elem_ptr v209, ptr b256, v210
        v212 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10472
        store v212 to v211, !10472
        v213 = const u64 1
        v214 = get_elem_ptr v209, ptr u64, v213
        v215 = const u64 0
        store v215 to v214, !10472
        v216 = const u64 2
        v217 = get_elem_ptr v209, ptr b256, v216
        v218 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10472
        store v218 to v217, !10472
        v219 = load v209
        v220 = call read_164(v219), !11414
        v221 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_13
        store v220 to v221
        v222 = const u64 0
        v223 = get_elem_ptr v221, ptr { b256 }, v222, !7354
        v224 = load v223
        v225 = call transfer_506(v208, v224, amount), !11415
        v226 = const unit ()
        ret () v226
    }

    pub entry_orig fn withdraw_collateral(asset_id !10790: { b256 }, amount !10791: u64, price_data_update !10792: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }) -> (), !11416 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_3
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { { u64, ( { b256 } | { b256 } ) }, { b256 } } __anon_7
        local { u64 } __anon_8
        local { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 } __anon_9
        local { u64, ( { b256 } | { b256 } ) } caller
        local u64 total_collateral
        local u64 user_collateral

        entry(asset_id: { b256 }, amount: u64, price_data_update: { u64, { { u64, u64 }, u64 }, { { u64, u64 }, u64 }, { { u64, u64 }, u64 } }):
        v0 = call reentrancy_guard_94(), !11417
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !10799
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xe4e26847100238d6956b2dc2c3f81418d1c06748ea6e7f97bc1c1adb91925ecc, !10799
        store v4 to v3, !10799
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 1
        store v7 to v6, !10799
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0x06e9c1c2a569f4cd31c43ea64b51b66948b0090a8ba8d8d5b0a61bf54b1f4f78, !10799
        store v10 to v9, !10799
        v11 = load v1
        v12 = call read_116(v11), !11418
        v13 = call not_15(v12), !11419
        v14 = get_local ptr { u64 }, __anon_1, !1845
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1845
        v17 = const u64 1, !1845
        store v17 to v16, !1845
        v18 = load v14
        v19 = call require_112(v13, v18), !11420
        v20 = call msg_sender_347(), !11421
        v21 = call unwrap_346(v20), !11422
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10815
        store v21 to v22, !10815
        v23 = get_local ptr { b256, u64, b256 }, __anon_2, !10816
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr b256, v24
        v26 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10816
        store v26 to v25, !10816
        v27 = const u64 1
        v28 = get_elem_ptr v23, ptr u64, v27
        v29 = const u64 0
        store v29 to v28, !10816
        v30 = const u64 2
        v31 = get_elem_ptr v23, ptr b256, v30
        v32 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10816
        store v32 to v31, !10816
        v33 = load v23
        v34 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10817
        v35 = load v34
        v36 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_3, !10818
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, ( { b256 } | { b256 } ) }, v37, !10818
        store v35 to v38, !10818
        v39 = const u64 1
        v40 = get_elem_ptr v36, ptr { b256 }, v39, !10818
        store asset_id to v40, !10818
        v41 = load v36
        v42 = call get_325(v33, v41), !11423
        v43 = call try_read_324(v42), !11424
        v44 = const u64 0, !10825
        v45 = call unwrap_or_292(v43, v44), !11425
        v46 = call subtract_318(v45, amount), !11426
        v47 = get_local ptr u64, user_collateral, !10832
        store v46 to v47, !10832
        v48 = get_local ptr { b256, u64, b256 }, __anon_4, !10833
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr b256, v49
        v51 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10833
        store v51 to v50, !10833
        v52 = const u64 1
        v53 = get_elem_ptr v48, ptr u64, v52
        v54 = const u64 0
        store v54 to v53, !10833
        v55 = const u64 2
        v56 = get_elem_ptr v48, ptr b256, v55
        v57 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10833
        store v57 to v56, !10833
        v58 = load v48
        v59 = call get_364(v58, asset_id), !11427
        v60 = call try_read_324(v59), !11428
        v61 = const u64 0, !10840
        v62 = call unwrap_or_292(v60, v61), !11429
        v63 = call subtract_318(v62, amount), !11430
        v64 = get_local ptr u64, total_collateral, !10847
        store v63 to v64, !10847
        v65 = get_local ptr { b256, u64, b256 }, __anon_5, !10848
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr b256, v66
        v68 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10848
        store v68 to v67, !10848
        v69 = const u64 1
        v70 = get_elem_ptr v65, ptr u64, v69
        v71 = const u64 0
        store v71 to v70, !10848
        v72 = const u64 2
        v73 = get_elem_ptr v65, ptr b256, v72
        v74 = const b256 0xc80317c01a3d794e8d713b45d832df6015340a6b8255d4510fac8ff8412515a8, !10848
        store v74 to v73, !10848
        v75 = load v65
        v76 = get_local ptr u64, total_collateral, !10849
        v77 = load v76
        v78 = call insert_366(v75, asset_id, v77), !11431
        v79 = get_local ptr { b256, u64, b256 }, __anon_6, !10853
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr b256, v80
        v82 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10853
        store v82 to v81, !10853
        v83 = const u64 1
        v84 = get_elem_ptr v79, ptr u64, v83
        v85 = const u64 0
        store v85 to v84, !10853
        v86 = const u64 2
        v87 = get_elem_ptr v79, ptr b256, v86
        v88 = const b256 0x3d833e8e4e57b20c539842f98f8d0123d1a9ccd51c2c8ce101744189a4ce8df5, !10853
        store v88 to v87, !10853
        v89 = load v79
        v90 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10854
        v91 = load v90
        v92 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 } }, __anon_7, !10855
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { u64, ( { b256 } | { b256 } ) }, v93, !10855
        store v91 to v94, !10855
        v95 = const u64 1
        v96 = get_elem_ptr v92, ptr { b256 }, v95, !10855
        store asset_id to v96, !10855
        v97 = load v92
        v98 = get_local ptr u64, user_collateral, !10856
        v99 = load v98
        v100 = call insert_362(v89, v97, v99), !11432
        v101 = call update_price_feeds_if_necessary_internal_182(price_data_update), !11433
        v102 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10863
        v103 = load v102
        v104 = call is_borrow_collateralized_665(v103), !11434
        v105 = get_local ptr { u64 }, __anon_8, !1845
        v106 = const u64 0
        v107 = get_elem_ptr v105, ptr u64, v106, !1845
        v108 = const u64 8, !1845
        store v108 to v107, !1845
        v109 = load v105
        v110 = call require_112(v104, v109), !11435
        v111 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10870
        v112 = load v111
        v113 = call transfer_506(v112, asset_id, amount), !11436
        v114 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10874
        v115 = load v114
        v116 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { b256 }, u64 }, __anon_9, !10875
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr { u64, ( { b256 } | { b256 } ) }, v117
        store v115 to v118, !10875
        v119 = const u64 1
        v120 = get_elem_ptr v116, ptr { b256 }, v119
        store asset_id to v120, !10875
        v121 = const u64 2
        v122 = get_elem_ptr v116, ptr u64, v121
        store amount to v122, !10875
        v123 = load v116
        v124 = call log_669(v123), !11437
        v125 = const unit ()
        ret () v125
    }

    pub entry_orig fn withdraw_reserves(to !10912: { u64, ( { b256 } | { b256 } ) }, amount !10913: u64) -> (), !11438 {
        local { u64 } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 } __anon_3
        local { u64, ( { b256 } | { b256 } ) } caller
        local { u256 } reserves

        entry(to: { u64, ( { b256 } | { b256 } ) }, amount: u64):
        v0 = call only_owner_467(), !11439
        v1 = call msg_sender_347(), !11440
        v2 = call unwrap_346(v1), !11441
        v3 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10926
        store v2 to v3, !10926
        v4 = call get_reserves_internal_499(), !11442
        v5 = get_local ptr { u256 }, reserves, !10930
        store v4 to v5, !10930
        v6 = get_local ptr { u256 }, reserves, !10931
        v7 = load v6
        v8 = call from_140(amount), !11443
        v9 = call try_from_282(v8), !11444
        v10 = call unwrap_281(v9), !11445
        v11 = call ge_274(v7, v10), !11446
        v12 = get_local ptr { u64 }, __anon_0, !1845
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !1845
        v15 = const u64 3, !1845
        store v15 to v14, !1845
        v16 = load v12
        v17 = call require_112(v11, v16), !11447
        v18 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !10947
        v19 = load v18
        v20 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, u64 }, __anon_1, !10948
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, ( { b256 } | { b256 } ) }, v21
        store v19 to v22, !10948
        v23 = const u64 1
        v24 = get_elem_ptr v20, ptr { u64, ( { b256 } | { b256 } ) }, v23
        store to to v24, !10948
        v25 = const u64 2
        v26 = get_elem_ptr v20, ptr u64, v25
        store amount to v26, !10948
        v27 = load v20
        v28 = call log_675(v27), !11448
        v29 = get_local ptr { b256, u64, b256 }, __anon_2, !10952
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30
        v32 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10952
        store v32 to v31, !10952
        v33 = const u64 1
        v34 = get_elem_ptr v29, ptr u64, v33
        v35 = const u64 0
        store v35 to v34, !10952
        v36 = const u64 2
        v37 = get_elem_ptr v29, ptr b256, v36
        v38 = const b256 0x7b867e531e60dfad72c6b3543afcdc72cf783abc1c4f59c0c55ab5aec5f9d432, !10952
        store v38 to v37, !10952
        v39 = load v29
        v40 = call read_164(v39), !11449
        v41 = get_local ptr { { b256 }, u64, b256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, u256 }, __anon_3
        store v40 to v41
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { b256 }, v42, !7354
        v44 = load v43
        v45 = call transfer_506(to, v44, amount), !11450
        v46 = const unit ()
        ret () v46
    }

    pub entry_orig fn owner() -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !11451 {
        entry():
        v0 = call _owner_425(), !11452
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v0
    }
}

