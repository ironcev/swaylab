    [1;32mBuilding[0m /home/kebradalaonda/p/compolabs-orderbook-contract/spark-market
   [1;32mCompiling[0m library [1mcore[0m (/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core)
   [1;32mCompiling[0m library [1mstd[0m (git+https://github.com/fuellabs/sway?tag=v0.66.4#d7dd104dac4394aa7af56f05b720c975744db853)
// IR: Initial
library {
}

   [1;32mCompiling[0m library [1mstandards[0m (git+https://github.com/FuelLabs/sway-standards?tag=v0.6.0#65e09f95ea8b9476b171a66c8a47108f352fa32c)
// IR: Initial
library {
}

   [1;32mCompiling[0m library [1msway_libs[0m (git+https://github.com/FuelLabs/sway-libs?tag=v0.24.0#e19f96f85ae12426d20adc176b70aa38fd9a2a5b)
// IR: Initial
library {
}

   [1;32mCompiling[0m library [1mstandards[0m (git+https://github.com/FuelLabs/sway-standards?tag=v0.6.1#792639cdf391565e6e6a02482ea8a46d9604a6f5)
// IR: Initial
library {
}

   [1;32mCompiling[0m contract [1mspark-market[0m (/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market)
// IR: Initial
contract {
    BASE_ASSET = config { b256 }, abi_decode_in_place_0, 0x0000000000000000000000000000000000000000000000000000000000000000, !1
    BASE_ASSET_DECIMALS = config u64, abi_decode_in_place_6, 0x00000009, !2
    PRICE_DECIMALS = config u64, abi_decode_in_place_6, 0x00000009, !3
    QUOTE_ASSET = config { b256 }, abi_decode_in_place_0, 0x0000000000000000000000000000000000000000000000000000000000000000, !4
    QUOTE_ASSET_DECIMALS = config u64, abi_decode_in_place_6, 0x00000009, !5
    VERSION = config u64, abi_decode_in_place_6, 0x00000000, !6

    pub fn abi_decode_in_place_0(ptr !8: u64, len !9: u64, target !10: u64) -> (), !14 {
        local mut { u64 } buffer
        local { b256 } temp

        entry(ptr: u64, len: u64, target: u64):
        v0 = call from_parts_1(ptr, len), !17
        v1 = get_local ptr { u64 }, buffer, !18
        store v0 to v1, !18
        v2 = get_local ptr { u64 }, buffer, !19
        v3 = call abi_decode_2(v2), !22
        v4 = get_local ptr { b256 }, temp, !23
        store v3 to v4, !23
        v5 = get_local ptr { b256 }, temp, !24
        v6 = ptr_to_int v5 to u64, !25
        v7 = const u64 32
        v8 = asm(target: target, temp: v6, size: v7) -> (), !26 {
            mcp    target temp size, !27
        }
        v9 = const unit ()
        ret () v9
    }

    pub fn from_parts_1(ptr !28: u64, _len !29: u64) -> { u64 }, !32 {
        local { u64 } __anon_0

        entry(ptr: u64, _len: u64):
        v0 = get_local ptr { u64 }, __anon_0, !33
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        store ptr to v2, !33
        v3 = load v0
        ret { u64 } v3
    }

    pub fn abi_decode_2(buffer !35: ptr { u64 }) -> { b256 }, !38 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_3(buffer), !41
        v1 = get_local ptr { b256 }, __anon_0, !42
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !42
        v4 = load v1
        ret { b256 } v4
    }

    pub fn decode_3(self !43: ptr { u64 }) -> b256, !46 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_4(self), !49
        ret b256 v0
    }

    pub fn abi_decode_4(buffer !50: ptr { u64 }) -> b256, !53 {
        entry(buffer: ptr { u64 }):
        v0 = call read_32_bytes_5(buffer), !56
        ret b256 v0
    }

    pub fn read_32_bytes_5(self !57: ptr { u64 }) -> b256, !60 {
        local b256 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !61
        v2 = load v1
        v3 = asm(ptr: v2) -> b256 ptr, !62 {
        }
        v4 = get_local ptr b256, v, !63
        store v3 to v4, !63
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !61
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 32, !64
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !65
        store v11 to v13, !65
        v14 = get_local ptr b256, v, !66
        v15 = load v14
        ret b256 v15
    }

    pub fn abi_decode_in_place_6(ptr !8: u64, len !9: u64, target !10: u64) -> (), !67 {
        local mut { u64 } buffer
        local u64 temp

        entry(ptr: u64, len: u64, target: u64):
        v0 = call from_parts_1(ptr, len), !68
        v1 = get_local ptr { u64 }, buffer, !18
        store v0 to v1, !18
        v2 = get_local ptr { u64 }, buffer, !19
        v3 = call abi_decode_7(v2), !69
        v4 = get_local ptr u64, temp, !23
        store v3 to v4, !23
        v5 = get_local ptr u64, temp, !24
        v6 = ptr_to_int v5 to u64, !25
        v7 = const u64 8
        v8 = asm(target: target, temp: v6, size: v7) -> (), !26 {
            mcp    target temp size, !27
        }
        v9 = const unit ()
        ret () v9
    }

    pub fn abi_decode_7(buffer !70: ptr { u64 }) -> u64, !73 {
        local u64 a
        local u64 b
        local u64 c
        local u64 d

        entry(buffer: ptr { u64 }):
        v0 = call read_9(buffer), !76
        v1 = call as_u32_8(v0), !79
        v2 = get_local ptr u64, a, !80
        store v1 to v2, !80
        v3 = call read_9(buffer), !83
        v4 = call as_u32_8(v3), !86
        v5 = get_local ptr u64, b, !87
        store v4 to v5, !87
        v6 = call read_9(buffer), !90
        v7 = call as_u32_8(v6), !93
        v8 = get_local ptr u64, c, !94
        store v7 to v8, !94
        v9 = call read_9(buffer), !97
        v10 = call as_u32_8(v9), !100
        v11 = get_local ptr u64, d, !101
        store v10 to v11, !101
        v12 = get_local ptr u64, a, !102
        v13 = load v12
        v14 = const u64 24, !103
        v15 = call lsh_13(v13, v14), !106
        v16 = get_local ptr u64, b, !107
        v17 = load v16
        v18 = const u64 16, !108
        v19 = call lsh_13(v17, v18), !111
        v20 = call binary_or_12(v15, v19), !114
        v21 = get_local ptr u64, c, !115
        v22 = load v21
        v23 = const u64 8, !116
        v24 = call lsh_13(v22, v23), !119
        v25 = call binary_or_12(v20, v24), !122
        v26 = get_local ptr u64, d, !123
        v27 = load v26
        v28 = call binary_or_12(v25, v27), !126
        ret u64 v28
    }

    pub fn as_u32_8(self !128: u8) -> u64, !131 {
        entry(self: u8):
        v0 = asm(input: self) -> u64 input, !132 {
        }
        ret u64 v0
    }

    pub fn read_9(self !133: ptr { u64 }) -> u8, !136 {
        local u64 size
        local u8 v
        local u8 v_

        entry(self: ptr { u64 }):
        v0 = get_local ptr u64, size, !137
        v1 = const u64 1
        store v1 to v0, !137
        v2 = const bool false
        cbr v2, block0(), block1(), !138

        block0():
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr u64, v3, !61
        v5 = load v4
        v6 = asm(ptr: v5) -> u8 ptr, !139 {
        }
        v7 = get_local ptr u8, v, !140
        store v6 to v7, !140
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr u64, v8, !61
        v10 = load v9
        v11 = get_local ptr u64, size, !141
        v12 = load v11
        v13 = const u64 1
        v14 = mul v13, v12
        v15 = add v10, v14
        v16 = const u64 0
        v17 = get_elem_ptr self, ptr u64, v16, !142
        store v15 to v17, !142
        v18 = get_local ptr u8, v, !143
        v19 = load v18
        br block5(v19)

        block1():
        v20 = get_local ptr u64, size, !144
        v21 = load v20
        v22 = const u64 1, !145
        v23 = call eq_10(v21, v22), !148
        cbr v23, block2(), block3(), !146

        block2():
        v24 = const u64 0
        v25 = get_elem_ptr self, ptr u64, v24, !61
        v26 = load v25
        v27 = asm(ptr: v26, val) -> u8 val, !149 {
            lb     val ptr i0, !150
        }
        v28 = get_local ptr u8, v_, !151
        store v27 to v28, !151
        v29 = const u64 0
        v30 = get_elem_ptr self, ptr u64, v29, !61
        v31 = load v30
        v32 = const u64 1
        v33 = const u64 1, !152
        v34 = mul v32, v33
        v35 = add v31, v34
        v36 = const u64 0
        v37 = get_elem_ptr self, ptr u64, v36, !153
        store v35 to v37, !153
        v38 = get_local ptr u8, v_, !154
        v39 = load v38
        br block4(v39)

        block3():
        v40 = call read_8_bytes_11(self), !157
        br block4(v40)

        block4(v41: u8):
        br block5(v41)

        block5(v42: u8):
        ret u8 v42
    }

    pub fn eq_10(self !159: u64, other !160: u64) -> bool, !163 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn read_8_bytes_11(self !164: ptr { u64 }) -> u8, !167 {
        local u8 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !61
        v2 = load v1
        v3 = asm(ptr: v2, val) -> u8 val, !168 {
            lw     val ptr i0, !169
        }
        v4 = get_local ptr u8, v, !170
        store v3 to v4, !170
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !61
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 8, !171
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !172
        store v11 to v13, !172
        v14 = get_local ptr u8, v, !173
        v15 = load v14
        ret u8 v15
    }

    pub fn binary_or_12(self !174: u64, other !175: u64) -> u64, !178 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn lsh_13(self !179: u64, other !180: u64) -> u64, !183 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        v1 = call max_14(), !186
        v2 = and v0, v1
        ret u64 v2
    }

    pub fn max_14() -> u64, !190 {
        entry():
        v0 = const u64 4294967295, !191
        ret u64 v0
    }

    pub entry fn __entry() -> (), !195 {
        local { u64, u64 } __anon_0
        local slice __anon_1
        local { u64, u64 } __anon_10
        local slice __anon_11
        local { u64, u64 } __anon_12
        local slice __anon_13
        local { u64, u64 } __anon_14
        local slice __anon_15
        local { u64, u64 } __anon_16
        local slice __anon_17
        local { u64, u64 } __anon_18
        local slice __anon_19
        local { u64, u64 } __anon_2
        local { u64, u64 } __anon_20
        local slice __anon_21
        local { u64, u64 } __anon_22
        local slice __anon_23
        local { u64, u64 } __anon_24
        local slice __anon_25
        local { u64, u64 } __anon_26
        local slice __anon_27
        local { u64, u64 } __anon_28
        local slice __anon_29
        local slice __anon_3
        local { u64, u64 } __anon_30
        local slice __anon_31
        local { u64, u64 } __anon_32
        local slice __anon_33
        local { u64, u64 } __anon_34
        local slice __anon_35
        local { u64, u64 } __anon_36
        local slice __anon_37
        local { u64, u64 } __anon_38
        local slice __anon_39
        local { u64, u64 } __anon_4
        local { u64, u64 } __anon_40
        local slice __anon_41
        local { u64, u64 } __anon_42
        local slice __anon_43
        local { u64, u64 } __anon_44
        local slice __anon_45
        local { u64, u64 } __anon_46
        local slice __anon_47
        local { u64, u64 } __anon_48
        local slice __anon_49
        local slice __anon_5
        local { u64, u64 } __anon_50
        local slice __anon_51
        local { u64, u64 } __anon_52
        local slice __anon_53
        local { u64, u64 } __anon_54
        local slice __anon_55
        local { u64, u64 } __anon_56
        local slice __anon_57
        local { u64, u64 } __anon_58
        local slice __anon_59
        local { u64, u64 } __anon_6
        local { u64, u64 } __anon_60
        local slice __anon_61
        local { u64, u64 } __anon_62
        local slice __anon_63
        local { u64, u64 } __anon_64
        local slice __anon_65
        local { u64, u64 } __anon_66
        local slice __anon_67
        local slice __anon_7
        local { u64, u64 } __anon_8
        local slice __anon_9
        local mut { u64 } _buffer
        local slice _method_name
        local bool _result
        local slice _result_
        local () _result__
        local () _result___
        local () _result____
        local () _result_____
        local () _result______
        local () _result_______
        local b256 _result________
        local slice _result_________
        local () _result__________
        local () _result___________
        local b256 _result____________
        local slice _result_____________
        local b256 _result______________
        local slice _result_______________
        local () _result________________
        local () _result_________________
        local () _result__________________
        local () _result___________________
        local () _result____________________
        local () _result_____________________
        local () _result______________________
        local () _result_______________________
        local { { u64, u64 }, { u64, u64 } } _result________________________
        local slice _result_________________________
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } _result__________________________
        local slice _result___________________________
        local { u64, u64 } _result____________________________
        local slice _result_____________________________
        local { u64, ( () | bool ) } _result______________________________
        local slice _result_______________________________
        local u64 _result________________________________
        local slice _result_________________________________
        local u64 _result__________________________________
        local slice _result___________________________________
        local u64 _result____________________________________
        local slice _result_____________________________________
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } _result______________________________________
        local slice _result_______________________________________
        local b256 _result________________________________________
        local slice _result_________________________________________
        local { { u64, u64 }, u64 } _result__________________________________________
        local slice _result___________________________________________
        local { u64, u64 } _result____________________________________________
        local slice _result_____________________________________________
        local { u64, u64 } _result______________________________________________
        local slice _result_______________________________________________
        local u64 _result________________________________________________
        local slice _result_________________________________________________
        local { { u64, u64 }, u64 } _result__________________________________________________
        local slice _result___________________________________________________
        local { b256 } args
        local { b256 } args_
        local { { u64, ( { b256 } | { b256 } ) } } args__
        local { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } } args___
        local { { u64, ( { b256 } | { b256 } ) } } args____
        local { { { u64, u64 }, u64 } } args_____
        local { u64, { u64 }, u64 } args______
        local { u64, { u64 }, u64 } args_______
        local { u64, u64 } args________
        local { u64 } args_________
        local { u64 } args__________
        local { u64 } args___________
        local { { { u64, u64 }, u64 } } args____________
        local { { u64, ( { b256 } | { b256 } ) } } args_____________
        local { u64, { u64 } } args______________
        local { u64, { u64 }, { b256 } } args_______________
        local { { u64, ( { b256 } | { b256 } ) } } args________________
        local { b256 } args_________________
        local { b256 } args__________________
        local { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 } args___________________
        local { { u64, ( { b256 } | { b256 } ) } } args____________________
        local { u64, { u64, ( { b256 } | { b256 } ) } } args_____________________
        local { { u64, ( { b256 } | { b256 } ) } } args______________________
        local { { u64, ( { b256 } | { b256 } ) } } args_______________________

        entry():
        v0 = call from_second_parameter_15(), !198
        v1 = get_local ptr { u64 }, _buffer, !199
        store v0 to v1, !199
        v2 = call decode_first_param_18(), !202
        v3 = get_local ptr slice, _method_name, !203
        store v2 to v3, !203
        v4 = get_local ptr slice, _method_name, !204
        v5 = load v4
        v6 = const string<9> "is_paused"
        v7 = ptr_to_int v6 to u64, !205
        v8 = get_local ptr { u64, u64 }, __anon_0, !205
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v7 to v10, !205
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        v13 = const u64 9
        store v13 to v12, !205
        v14 = get_local ptr slice, __anon_1, !205
        mem_copy_bytes v14, v8, 16
        v15 = load v14
        v16 = call eq_25(v5, v15), !208
        cbr v16, block0(), block1(), !206

        block0():
        v17 = call is_paused_30(), !211
        v18 = get_local ptr bool, _result, !212
        store v17 to v18, !212
        v19 = get_local ptr bool, _result, !213
        v20 = load v19
        v21 = call encode_51(v20), !216
        v22 = get_local ptr slice, _result_, !217
        store v21 to v22, !217
        v23 = get_local ptr slice, _result_, !218
        v24 = load v23
        v25 = call ptr_23(v24), !221
        v26 = get_local ptr slice, _result_, !222
        v27 = load v26
        v28 = call len_55(v27), !225
        retd v25 v28, !226

        block1():
        v29 = const unit ()
        br block2(v29)

        block2(v30: ()):
        v31 = get_local ptr slice, _method_name, !227
        v32 = load v31
        v33 = const string<5> "pause"
        v34 = ptr_to_int v33 to u64, !228
        v35 = get_local ptr { u64, u64 }, __anon_2, !228
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36
        store v34 to v37, !228
        v38 = const u64 1
        v39 = get_elem_ptr v35, ptr u64, v38
        v40 = const u64 5
        store v40 to v39, !228
        v41 = get_local ptr slice, __anon_3, !228
        mem_copy_bytes v41, v35, 16
        v42 = load v41
        v43 = call eq_25(v32, v42), !231
        cbr v43, block3(), block4(), !229

        block3():
        v44 = call pause_56(), !234
        v45 = get_local ptr (), _result__, !235
        store v44 to v45, !235
        v46 = asm() -> u64 zero, !236 {
        }
        v47 = const u64 0, !237
        retd v46 v47, !238

        block4():
        v48 = const unit ()
        br block5(v48)

        block5(v49: ()):
        v50 = get_local ptr slice, _method_name, !239
        v51 = load v50
        v52 = const string<7> "unpause"
        v53 = ptr_to_int v52 to u64, !240
        v54 = get_local ptr { u64, u64 }, __anon_4, !240
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr u64, v55
        store v53 to v56, !240
        v57 = const u64 1
        v58 = get_elem_ptr v54, ptr u64, v57
        v59 = const u64 7
        store v59 to v58, !240
        v60 = get_local ptr slice, __anon_5, !240
        mem_copy_bytes v60, v54, 16
        v61 = load v60
        v62 = call eq_25(v51, v61), !243
        cbr v62, block6(), block7(), !241

        block6():
        v63 = call unpause_106(), !246
        v64 = get_local ptr (), _result___, !247
        store v63 to v64, !247
        v65 = asm() -> u64 zero, !248 {
        }
        v66 = const u64 0, !249
        retd v65 v66, !250

        block7():
        v67 = const unit ()
        br block8(v67)

        block8(v68: ()):
        v69 = get_local ptr slice, _method_name, !251
        v70 = load v69
        v71 = const string<12> "cancel_order"
        v72 = ptr_to_int v71 to u64, !252
        v73 = get_local ptr { u64, u64 }, __anon_6, !252
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74
        store v72 to v75, !252
        v76 = const u64 1
        v77 = get_elem_ptr v73, ptr u64, v76
        v78 = const u64 12
        store v78 to v77, !252
        v79 = get_local ptr slice, __anon_7, !252
        mem_copy_bytes v79, v73, 16
        v80 = load v79
        v81 = call eq_25(v70, v80), !255
        cbr v81, block9(), block10(), !253

        block9():
        v82 = get_local ptr { u64 }, _buffer, !256
        v83 = call decode_109(v82), !259
        v84 = get_local ptr { b256 }, args, !260
        store v83 to v84, !260
        v85 = get_local ptr { b256 }, args, !261
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86, !262
        v88 = load v87
        v89 = call cancel_order_111(v88), !265
        v90 = get_local ptr (), _result____, !266
        store v89 to v90, !266
        v91 = asm() -> u64 zero, !267 {
        }
        v92 = const u64 0, !268
        retd v91 v92, !269

        block10():
        v93 = const unit ()
        br block11(v93)

        block11(v94: ()):
        v95 = get_local ptr slice, _method_name, !270
        v96 = load v95
        v97 = const string<18> "cancel_small_order"
        v98 = ptr_to_int v97 to u64, !271
        v99 = get_local ptr { u64, u64 }, __anon_8, !271
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100
        store v98 to v101, !271
        v102 = const u64 1
        v103 = get_elem_ptr v99, ptr u64, v102
        v104 = const u64 18
        store v104 to v103, !271
        v105 = get_local ptr slice, __anon_9, !271
        mem_copy_bytes v105, v99, 16
        v106 = load v105
        v107 = call eq_25(v96, v106), !274
        cbr v107, block12(), block13(), !272

        block12():
        v108 = get_local ptr { u64 }, _buffer, !275
        v109 = call decode_109(v108), !278
        v110 = get_local ptr { b256 }, args_, !279
        store v109 to v110, !279
        v111 = get_local ptr { b256 }, args_, !280
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr b256, v112, !281
        v114 = load v113
        v115 = call cancel_small_order_308(v114), !284
        v116 = get_local ptr (), _result_____, !285
        store v115 to v116, !285
        v117 = asm() -> u64 zero, !286 {
        }
        v118 = const u64 0, !287
        retd v117 v118, !288

        block13():
        v119 = const unit ()
        br block14(v119)

        block14(v120: ()):
        v121 = get_local ptr slice, _method_name, !289
        v122 = load v121
        v123 = const string<7> "deposit"
        v124 = ptr_to_int v123 to u64, !290
        v125 = get_local ptr { u64, u64 }, __anon_10, !290
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126
        store v124 to v127, !290
        v128 = const u64 1
        v129 = get_elem_ptr v125, ptr u64, v128
        v130 = const u64 7
        store v130 to v129, !290
        v131 = get_local ptr slice, __anon_11, !290
        mem_copy_bytes v131, v125, 16
        v132 = load v131
        v133 = call eq_25(v122, v132), !293
        cbr v133, block15(), block16(), !291

        block15():
        v134 = call deposit_313(), !296
        v135 = get_local ptr (), _result______, !297
        store v134 to v135, !297
        v136 = asm() -> u64 zero, !298 {
        }
        v137 = const u64 0, !299
        retd v136 v137, !300

        block16():
        v138 = const unit ()
        br block17(v138)

        block17(v139: ()):
        v140 = get_local ptr slice, _method_name, !301
        v141 = load v140
        v142 = const string<11> "deposit_for"
        v143 = ptr_to_int v142 to u64, !302
        v144 = get_local ptr { u64, u64 }, __anon_12, !302
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr u64, v145
        store v143 to v146, !302
        v147 = const u64 1
        v148 = get_elem_ptr v144, ptr u64, v147
        v149 = const u64 11
        store v149 to v148, !302
        v150 = get_local ptr slice, __anon_13, !302
        mem_copy_bytes v150, v144, 16
        v151 = load v150
        v152 = call eq_25(v141, v151), !305
        cbr v152, block18(), block19(), !303

        block18():
        v153 = get_local ptr { u64 }, _buffer, !306
        v154 = call decode_337(v153), !309
        v155 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args__, !310
        store v154 to v155, !310
        v156 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args__, !311
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr { u64, ( { b256 } | { b256 } ) }, v157, !312
        v159 = load v158
        v160 = call deposit_for_346(v159), !315
        v161 = get_local ptr (), _result_______, !316
        store v160 to v161, !316
        v162 = asm() -> u64 zero, !317 {
        }
        v163 = const u64 0, !318
        retd v162 v163, !319

        block19():
        v164 = const unit ()
        br block20(v164)

        block20(v165: ()):
        v166 = get_local ptr slice, _method_name, !320
        v167 = load v166
        v168 = const string<18> "fulfill_order_many"
        v169 = ptr_to_int v168 to u64, !321
        v170 = get_local ptr { u64, u64 }, __anon_14, !321
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171
        store v169 to v172, !321
        v173 = const u64 1
        v174 = get_elem_ptr v170, ptr u64, v173
        v175 = const u64 18
        store v175 to v174, !321
        v176 = get_local ptr slice, __anon_15, !321
        mem_copy_bytes v176, v170, 16
        v177 = load v176
        v178 = call eq_25(v167, v177), !324
        cbr v178, block21(), block22(), !322

        block21():
        v179 = get_local ptr { u64 }, _buffer, !325
        v180 = call decode_347(v179), !328
        v181 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !329
        store v180 to v181, !329
        v182 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !330
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !331
        v185 = load v184
        v186 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !332
        v187 = const u64 1
        v188 = get_elem_ptr v186, ptr { u64 }, v187, !333
        v189 = load v188
        v190 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !334
        v191 = const u64 2
        v192 = get_elem_ptr v190, ptr { u64 }, v191, !335
        v193 = load v192
        v194 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !336
        v195 = const u64 3
        v196 = get_elem_ptr v194, ptr u64, v195, !337
        v197 = load v196
        v198 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !338
        v199 = const u64 4
        v200 = get_elem_ptr v198, ptr u64, v199, !339
        v201 = load v200
        v202 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, args___, !340
        v203 = const u64 5
        v204 = get_elem_ptr v202, ptr { { u64, u64 }, u64 }, v203, !341
        v205 = load v204
        v206 = call fulfill_order_many_362(v185, v189, v193, v197, v201, v205), !344
        v207 = get_local ptr b256, _result________, !345
        store v206 to v207, !345
        v208 = get_local ptr b256, _result________, !346
        v209 = load v208
        v210 = call encode_465(v209), !349
        v211 = get_local ptr slice, _result_________, !350
        store v210 to v211, !350
        v212 = get_local ptr slice, _result_________, !351
        v213 = load v212
        v214 = call ptr_23(v213), !354
        v215 = get_local ptr slice, _result_________, !355
        v216 = load v215
        v217 = call len_55(v216), !358
        retd v214 v217, !359

        block22():
        v218 = const unit ()
        br block23(v218)

        block23(v219: ()):
        v220 = get_local ptr slice, _method_name, !360
        v221 = load v220
        v222 = const string<20> "initialize_ownership"
        v223 = ptr_to_int v222 to u64, !361
        v224 = get_local ptr { u64, u64 }, __anon_16, !361
        v225 = const u64 0
        v226 = get_elem_ptr v224, ptr u64, v225
        store v223 to v226, !361
        v227 = const u64 1
        v228 = get_elem_ptr v224, ptr u64, v227
        v229 = const u64 20
        store v229 to v228, !361
        v230 = get_local ptr slice, __anon_17, !361
        mem_copy_bytes v230, v224, 16
        v231 = load v230
        v232 = call eq_25(v221, v231), !364
        cbr v232, block24(), block25(), !362

        block24():
        v233 = get_local ptr { u64 }, _buffer, !365
        v234 = call decode_337(v233), !368
        v235 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args____, !369
        store v234 to v235, !369
        v236 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args____, !370
        v237 = const u64 0
        v238 = get_elem_ptr v236, ptr { u64, ( { b256 } | { b256 } ) }, v237, !371
        v239 = load v238
        v240 = call initialize_ownership_466(v239), !374
        v241 = get_local ptr (), _result__________, !375
        store v240 to v241, !375
        v242 = asm() -> u64 zero, !376 {
        }
        v243 = const u64 0, !377
        retd v242 v243, !378

        block25():
        v244 = const unit ()
        br block26(v244)

        block26(v245: ()):
        v246 = get_local ptr slice, _method_name, !379
        v247 = load v246
        v248 = const string<16> "match_order_many"
        v249 = ptr_to_int v248 to u64, !380
        v250 = get_local ptr { u64, u64 }, __anon_18, !380
        v251 = const u64 0
        v252 = get_elem_ptr v250, ptr u64, v251
        store v249 to v252, !380
        v253 = const u64 1
        v254 = get_elem_ptr v250, ptr u64, v253
        v255 = const u64 16
        store v255 to v254, !380
        v256 = get_local ptr slice, __anon_19, !380
        mem_copy_bytes v256, v250, 16
        v257 = load v256
        v258 = call eq_25(v247, v257), !383
        cbr v258, block27(), block28(), !381

        block27():
        v259 = get_local ptr { u64 }, _buffer, !384
        v260 = call decode_478(v259), !387
        v261 = get_local ptr { { { u64, u64 }, u64 } }, args_____, !388
        store v260 to v261, !388
        v262 = get_local ptr { { { u64, u64 }, u64 } }, args_____, !389
        v263 = const u64 0
        v264 = get_elem_ptr v262, ptr { { u64, u64 }, u64 }, v263, !390
        v265 = load v264
        v266 = call match_order_many_480(v265), !393
        v267 = get_local ptr (), _result___________, !394
        store v266 to v267, !394
        v268 = asm() -> u64 zero, !395 {
        }
        v269 = const u64 0, !396
        retd v268 v269, !397

        block28():
        v270 = const unit ()
        br block29(v270)

        block29(v271: ()):
        v272 = get_local ptr slice, _method_name, !398
        v273 = load v272
        v274 = const string<17> "open_market_order"
        v275 = ptr_to_int v274 to u64, !399
        v276 = get_local ptr { u64, u64 }, __anon_20, !399
        v277 = const u64 0
        v278 = get_elem_ptr v276, ptr u64, v277
        store v275 to v278, !399
        v279 = const u64 1
        v280 = get_elem_ptr v276, ptr u64, v279
        v281 = const u64 17
        store v281 to v280, !399
        v282 = get_local ptr slice, __anon_21, !399
        mem_copy_bytes v282, v276, 16
        v283 = load v282
        v284 = call eq_25(v273, v283), !402
        cbr v284, block30(), block31(), !400

        block30():
        v285 = get_local ptr { u64 }, _buffer, !403
        v286 = call decode_482(v285), !406
        v287 = get_local ptr { u64, { u64 }, u64 }, args______, !407
        store v286 to v287, !407
        v288 = get_local ptr { u64, { u64 }, u64 }, args______, !408
        v289 = const u64 0
        v290 = get_elem_ptr v288, ptr u64, v289, !409
        v291 = load v290
        v292 = get_local ptr { u64, { u64 }, u64 }, args______, !410
        v293 = const u64 1
        v294 = get_elem_ptr v292, ptr { u64 }, v293, !411
        v295 = load v294
        v296 = get_local ptr { u64, { u64 }, u64 }, args______, !412
        v297 = const u64 2
        v298 = get_elem_ptr v296, ptr u64, v297, !413
        v299 = load v298
        v300 = call open_market_order_484(v291, v295, v299), !416
        v301 = get_local ptr b256, _result____________, !417
        store v300 to v301, !417
        v302 = get_local ptr b256, _result____________, !418
        v303 = load v302
        v304 = call encode_465(v303), !421
        v305 = get_local ptr slice, _result_____________, !422
        store v304 to v305, !422
        v306 = get_local ptr slice, _result_____________, !423
        v307 = load v306
        v308 = call ptr_23(v307), !426
        v309 = get_local ptr slice, _result_____________, !427
        v310 = load v309
        v311 = call len_55(v310), !430
        retd v308 v311, !431

        block31():
        v312 = const unit ()
        br block32(v312)

        block32(v313: ()):
        v314 = get_local ptr slice, _method_name, !432
        v315 = load v314
        v316 = const string<10> "open_order"
        v317 = ptr_to_int v316 to u64, !433
        v318 = get_local ptr { u64, u64 }, __anon_22, !433
        v319 = const u64 0
        v320 = get_elem_ptr v318, ptr u64, v319
        store v317 to v320, !433
        v321 = const u64 1
        v322 = get_elem_ptr v318, ptr u64, v321
        v323 = const u64 10
        store v323 to v322, !433
        v324 = get_local ptr slice, __anon_23, !433
        mem_copy_bytes v324, v318, 16
        v325 = load v324
        v326 = call eq_25(v315, v325), !436
        cbr v326, block33(), block34(), !434

        block33():
        v327 = get_local ptr { u64 }, _buffer, !437
        v328 = call decode_482(v327), !440
        v329 = get_local ptr { u64, { u64 }, u64 }, args_______, !441
        store v328 to v329, !441
        v330 = get_local ptr { u64, { u64 }, u64 }, args_______, !442
        v331 = const u64 0
        v332 = get_elem_ptr v330, ptr u64, v331, !443
        v333 = load v332
        v334 = get_local ptr { u64, { u64 }, u64 }, args_______, !444
        v335 = const u64 1
        v336 = get_elem_ptr v334, ptr { u64 }, v335, !445
        v337 = load v336
        v338 = get_local ptr { u64, { u64 }, u64 }, args_______, !446
        v339 = const u64 2
        v340 = get_elem_ptr v338, ptr u64, v339, !447
        v341 = load v340
        v342 = call open_order_487(v333, v337, v341), !450
        v343 = get_local ptr b256, _result______________, !451
        store v342 to v343, !451
        v344 = get_local ptr b256, _result______________, !452
        v345 = load v344
        v346 = call encode_465(v345), !455
        v347 = get_local ptr slice, _result_______________, !456
        store v346 to v347, !456
        v348 = get_local ptr slice, _result_______________, !457
        v349 = load v348
        v350 = call ptr_23(v349), !460
        v351 = get_local ptr slice, _result_______________, !461
        v352 = load v351
        v353 = call len_55(v352), !464
        retd v350 v353, !465

        block34():
        v354 = const unit ()
        br block35(v354)

        block35(v355: ()):
        v356 = get_local ptr slice, _method_name, !466
        v357 = load v356
        v358 = const string<9> "set_epoch"
        v359 = ptr_to_int v358 to u64, !467
        v360 = get_local ptr { u64, u64 }, __anon_24, !467
        v361 = const u64 0
        v362 = get_elem_ptr v360, ptr u64, v361
        store v359 to v362, !467
        v363 = const u64 1
        v364 = get_elem_ptr v360, ptr u64, v363
        v365 = const u64 9
        store v365 to v364, !467
        v366 = get_local ptr slice, __anon_25, !467
        mem_copy_bytes v366, v360, 16
        v367 = load v366
        v368 = call eq_25(v357, v367), !470
        cbr v368, block36(), block37(), !468

        block36():
        v369 = get_local ptr { u64 }, _buffer, !471
        v370 = call decode_488(v369), !474
        v371 = get_local ptr { u64, u64 }, args________, !475
        store v370 to v371, !475
        v372 = get_local ptr { u64, u64 }, args________, !476
        v373 = const u64 0
        v374 = get_elem_ptr v372, ptr u64, v373, !477
        v375 = load v374
        v376 = get_local ptr { u64, u64 }, args________, !478
        v377 = const u64 1
        v378 = get_elem_ptr v376, ptr u64, v377, !479
        v379 = load v378
        v380 = call set_epoch_490(v375, v379), !482
        v381 = get_local ptr (), _result________________, !483
        store v380 to v381, !483
        v382 = asm() -> u64 zero, !484 {
        }
        v383 = const u64 0, !485
        retd v382 v383, !486

        block37():
        v384 = const unit ()
        br block38(v384)

        block38(v385: ()):
        v386 = get_local ptr slice, _method_name, !487
        v387 = load v386
        v388 = const string<15> "set_matcher_fee"
        v389 = ptr_to_int v388 to u64, !488
        v390 = get_local ptr { u64, u64 }, __anon_26, !488
        v391 = const u64 0
        v392 = get_elem_ptr v390, ptr u64, v391
        store v389 to v392, !488
        v393 = const u64 1
        v394 = get_elem_ptr v390, ptr u64, v393
        v395 = const u64 15
        store v395 to v394, !488
        v396 = get_local ptr slice, __anon_27, !488
        mem_copy_bytes v396, v390, 16
        v397 = load v396
        v398 = call eq_25(v387, v397), !491
        cbr v398, block39(), block40(), !489

        block39():
        v399 = get_local ptr { u64 }, _buffer, !492
        v400 = call decode_491(v399), !495
        v401 = get_local ptr { u64 }, args_________, !496
        store v400 to v401, !496
        v402 = get_local ptr { u64 }, args_________, !497
        v403 = const u64 0
        v404 = get_elem_ptr v402, ptr u64, v403, !498
        v405 = load v404
        v406 = call set_matcher_fee_493(v405), !501
        v407 = get_local ptr (), _result_________________, !502
        store v406 to v407, !502
        v408 = asm() -> u64 zero, !503 {
        }
        v409 = const u64 0, !504
        retd v408 v409, !505

        block40():
        v410 = const unit ()
        br block41(v410)

        block41(v411: ()):
        v412 = get_local ptr slice, _method_name, !506
        v413 = load v412
        v414 = const string<19> "set_min_order_price"
        v415 = ptr_to_int v414 to u64, !507
        v416 = get_local ptr { u64, u64 }, __anon_28, !507
        v417 = const u64 0
        v418 = get_elem_ptr v416, ptr u64, v417
        store v415 to v418, !507
        v419 = const u64 1
        v420 = get_elem_ptr v416, ptr u64, v419
        v421 = const u64 19
        store v421 to v420, !507
        v422 = get_local ptr slice, __anon_29, !507
        mem_copy_bytes v422, v416, 16
        v423 = load v422
        v424 = call eq_25(v413, v423), !510
        cbr v424, block42(), block43(), !508

        block42():
        v425 = get_local ptr { u64 }, _buffer, !511
        v426 = call decode_491(v425), !514
        v427 = get_local ptr { u64 }, args__________, !515
        store v426 to v427, !515
        v428 = get_local ptr { u64 }, args__________, !516
        v429 = const u64 0
        v430 = get_elem_ptr v428, ptr u64, v429, !517
        v431 = load v430
        v432 = call set_min_order_price_497(v431), !520
        v433 = get_local ptr (), _result__________________, !521
        store v432 to v433, !521
        v434 = asm() -> u64 zero, !522 {
        }
        v435 = const u64 0, !523
        retd v434 v435, !524

        block43():
        v436 = const unit ()
        br block44(v436)

        block44(v437: ()):
        v438 = get_local ptr slice, _method_name, !525
        v439 = load v438
        v440 = const string<18> "set_min_order_size"
        v441 = ptr_to_int v440 to u64, !526
        v442 = get_local ptr { u64, u64 }, __anon_30, !526
        v443 = const u64 0
        v444 = get_elem_ptr v442, ptr u64, v443
        store v441 to v444, !526
        v445 = const u64 1
        v446 = get_elem_ptr v442, ptr u64, v445
        v447 = const u64 18
        store v447 to v446, !526
        v448 = get_local ptr slice, __anon_31, !526
        mem_copy_bytes v448, v442, 16
        v449 = load v448
        v450 = call eq_25(v439, v449), !529
        cbr v450, block45(), block46(), !527

        block45():
        v451 = get_local ptr { u64 }, _buffer, !530
        v452 = call decode_491(v451), !533
        v453 = get_local ptr { u64 }, args___________, !534
        store v452 to v453, !534
        v454 = get_local ptr { u64 }, args___________, !535
        v455 = const u64 0
        v456 = get_elem_ptr v454, ptr u64, v455, !536
        v457 = load v456
        v458 = call set_min_order_size_501(v457), !539
        v459 = get_local ptr (), _result___________________, !540
        store v458 to v459, !540
        v460 = asm() -> u64 zero, !541 {
        }
        v461 = const u64 0, !542
        retd v460 v461, !543

        block46():
        v462 = const unit ()
        br block47(v462)

        block47(v463: ()):
        v464 = get_local ptr slice, _method_name, !544
        v465 = load v464
        v466 = const string<16> "set_protocol_fee"
        v467 = ptr_to_int v466 to u64, !545
        v468 = get_local ptr { u64, u64 }, __anon_32, !545
        v469 = const u64 0
        v470 = get_elem_ptr v468, ptr u64, v469
        store v467 to v470, !545
        v471 = const u64 1
        v472 = get_elem_ptr v468, ptr u64, v471
        v473 = const u64 16
        store v473 to v472, !545
        v474 = get_local ptr slice, __anon_33, !545
        mem_copy_bytes v474, v468, 16
        v475 = load v474
        v476 = call eq_25(v465, v475), !548
        cbr v476, block48(), block49(), !546

        block48():
        v477 = get_local ptr { u64 }, _buffer, !549
        v478 = call decode_505(v477), !552
        v479 = get_local ptr { { { u64, u64 }, u64 } }, args____________, !553
        store v478 to v479, !553
        v480 = get_local ptr { { { u64, u64 }, u64 } }, args____________, !554
        v481 = const u64 0
        v482 = get_elem_ptr v480, ptr { { u64, u64 }, u64 }, v481, !555
        v483 = load v482
        v484 = call set_protocol_fee_520(v483), !558
        v485 = get_local ptr (), _result____________________, !559
        store v484 to v485, !559
        v486 = asm() -> u64 zero, !560 {
        }
        v487 = const u64 0, !561
        retd v486 v487, !562

        block49():
        v488 = const unit ()
        br block50(v488)

        block50(v489: ()):
        v490 = get_local ptr slice, _method_name, !563
        v491 = load v490
        v492 = const string<18> "transfer_ownership"
        v493 = ptr_to_int v492 to u64, !564
        v494 = get_local ptr { u64, u64 }, __anon_34, !564
        v495 = const u64 0
        v496 = get_elem_ptr v494, ptr u64, v495
        store v493 to v496, !564
        v497 = const u64 1
        v498 = get_elem_ptr v494, ptr u64, v497
        v499 = const u64 18
        store v499 to v498, !564
        v500 = get_local ptr slice, __anon_35, !564
        mem_copy_bytes v500, v494, 16
        v501 = load v500
        v502 = call eq_25(v491, v501), !567
        cbr v502, block51(), block52(), !565

        block51():
        v503 = get_local ptr { u64 }, _buffer, !568
        v504 = call decode_337(v503), !571
        v505 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_____________, !572
        store v504 to v505, !572
        v506 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_____________, !573
        v507 = const u64 0
        v508 = get_elem_ptr v506, ptr { u64, ( { b256 } | { b256 } ) }, v507, !574
        v509 = load v508
        v510 = call transfer_ownership_535(v509), !577
        v511 = get_local ptr (), _result_____________________, !578
        store v510 to v511, !578
        v512 = asm() -> u64 zero, !579 {
        }
        v513 = const u64 0, !580
        retd v512 v513, !581

        block52():
        v514 = const unit ()
        br block53(v514)

        block53(v515: ()):
        v516 = get_local ptr slice, _method_name, !582
        v517 = load v516
        v518 = const string<8> "withdraw"
        v519 = ptr_to_int v518 to u64, !583
        v520 = get_local ptr { u64, u64 }, __anon_36, !583
        v521 = const u64 0
        v522 = get_elem_ptr v520, ptr u64, v521
        store v519 to v522, !583
        v523 = const u64 1
        v524 = get_elem_ptr v520, ptr u64, v523
        v525 = const u64 8
        store v525 to v524, !583
        v526 = get_local ptr slice, __anon_37, !583
        mem_copy_bytes v526, v520, 16
        v527 = load v526
        v528 = call eq_25(v517, v527), !586
        cbr v528, block54(), block55(), !584

        block54():
        v529 = get_local ptr { u64 }, _buffer, !587
        v530 = call decode_540(v529), !590
        v531 = get_local ptr { u64, { u64 } }, args______________, !591
        store v530 to v531, !591
        v532 = get_local ptr { u64, { u64 } }, args______________, !592
        v533 = const u64 0
        v534 = get_elem_ptr v532, ptr u64, v533, !593
        v535 = load v534
        v536 = get_local ptr { u64, { u64 } }, args______________, !594
        v537 = const u64 1
        v538 = get_elem_ptr v536, ptr { u64 }, v537, !595
        v539 = load v538
        v540 = call withdraw_543(v535, v539), !598
        v541 = get_local ptr (), _result______________________, !599
        store v540 to v541, !599
        v542 = asm() -> u64 zero, !600 {
        }
        v543 = const u64 0, !601
        retd v542 v543, !602

        block55():
        v544 = const unit ()
        br block56(v544)

        block56(v545: ()):
        v546 = get_local ptr slice, _method_name, !603
        v547 = load v546
        v548 = const string<18> "withdraw_to_market"
        v549 = ptr_to_int v548 to u64, !604
        v550 = get_local ptr { u64, u64 }, __anon_38, !604
        v551 = const u64 0
        v552 = get_elem_ptr v550, ptr u64, v551
        store v549 to v552, !604
        v553 = const u64 1
        v554 = get_elem_ptr v550, ptr u64, v553
        v555 = const u64 18
        store v555 to v554, !604
        v556 = get_local ptr slice, __anon_39, !604
        mem_copy_bytes v556, v550, 16
        v557 = load v556
        v558 = call eq_25(v547, v557), !607
        cbr v558, block57(), block58(), !605

        block57():
        v559 = get_local ptr { u64 }, _buffer, !608
        v560 = call decode_560(v559), !611
        v561 = get_local ptr { u64, { u64 }, { b256 } }, args_______________, !612
        store v560 to v561, !612
        v562 = get_local ptr { u64, { u64 }, { b256 } }, args_______________, !613
        v563 = const u64 0
        v564 = get_elem_ptr v562, ptr u64, v563, !614
        v565 = load v564
        v566 = get_local ptr { u64, { u64 }, { b256 } }, args_______________, !615
        v567 = const u64 1
        v568 = get_elem_ptr v566, ptr { u64 }, v567, !616
        v569 = load v568
        v570 = get_local ptr { u64, { u64 }, { b256 } }, args_______________, !617
        v571 = const u64 2
        v572 = get_elem_ptr v570, ptr { b256 }, v571, !618
        v573 = load v572
        v574 = call withdraw_to_market_562(v565, v569, v573), !621
        v575 = get_local ptr (), _result_______________________, !622
        store v574 to v575, !622
        v576 = asm() -> u64 zero, !623 {
        }
        v577 = const u64 0, !624
        retd v576 v577, !625

        block58():
        v578 = const unit ()
        br block59(v578)

        block59(v579: ()):
        v580 = get_local ptr slice, _method_name, !626
        v581 = load v580
        v582 = const string<7> "account"
        v583 = ptr_to_int v582 to u64, !627
        v584 = get_local ptr { u64, u64 }, __anon_40, !627
        v585 = const u64 0
        v586 = get_elem_ptr v584, ptr u64, v585
        store v583 to v586, !627
        v587 = const u64 1
        v588 = get_elem_ptr v584, ptr u64, v587
        v589 = const u64 7
        store v589 to v588, !627
        v590 = get_local ptr slice, __anon_41, !627
        mem_copy_bytes v590, v584, 16
        v591 = load v590
        v592 = call eq_25(v581, v591), !630
        cbr v592, block60(), block61(), !628

        block60():
        v593 = get_local ptr { u64 }, _buffer, !631
        v594 = call decode_337(v593), !634
        v595 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args________________, !635
        store v594 to v595, !635
        v596 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args________________, !636
        v597 = const u64 0
        v598 = get_elem_ptr v596, ptr { u64, ( { b256 } | { b256 } ) }, v597, !637
        v599 = load v598
        v600 = call account_586(v599), !640
        v601 = get_local ptr { { u64, u64 }, { u64, u64 } }, _result________________________, !641
        store v600 to v601, !641
        v602 = get_local ptr { { u64, u64 }, { u64, u64 } }, _result________________________, !642
        v603 = load v602
        v604 = call encode_587(v603), !645
        v605 = get_local ptr slice, _result_________________________, !646
        store v604 to v605, !646
        v606 = get_local ptr slice, _result_________________________, !647
        v607 = load v606
        v608 = call ptr_23(v607), !650
        v609 = get_local ptr slice, _result_________________________, !651
        v610 = load v609
        v611 = call len_55(v610), !654
        retd v608 v611, !655

        block61():
        v612 = const unit ()
        br block62(v612)

        block62(v613: ()):
        v614 = get_local ptr slice, _method_name, !656
        v615 = load v614
        v616 = const string<6> "config"
        v617 = ptr_to_int v616 to u64, !657
        v618 = get_local ptr { u64, u64 }, __anon_42, !657
        v619 = const u64 0
        v620 = get_elem_ptr v618, ptr u64, v619
        store v617 to v620, !657
        v621 = const u64 1
        v622 = get_elem_ptr v618, ptr u64, v621
        v623 = const u64 6
        store v623 to v622, !657
        v624 = get_local ptr slice, __anon_43, !657
        mem_copy_bytes v624, v618, 16
        v625 = load v624
        v626 = call eq_25(v615, v625), !660
        cbr v626, block63(), block64(), !658

        block63():
        v627 = call config_588(), !663
        v628 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, _result__________________________, !664
        store v627 to v628, !664
        v629 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, _result__________________________, !665
        v630 = load v629
        v631 = call encode_590(v630), !668
        v632 = get_local ptr slice, _result___________________________, !669
        store v631 to v632, !669
        v633 = get_local ptr slice, _result___________________________, !670
        v634 = load v633
        v635 = call ptr_23(v634), !673
        v636 = get_local ptr slice, _result___________________________, !674
        v637 = load v636
        v638 = call len_55(v637), !677
        retd v635 v638, !678

        block64():
        v639 = const unit ()
        br block65(v639)

        block65(v640: ()):
        v641 = get_local ptr slice, _method_name, !679
        v642 = load v641
        v643 = const string<9> "get_epoch"
        v644 = ptr_to_int v643 to u64, !680
        v645 = get_local ptr { u64, u64 }, __anon_44, !680
        v646 = const u64 0
        v647 = get_elem_ptr v645, ptr u64, v646
        store v644 to v647, !680
        v648 = const u64 1
        v649 = get_elem_ptr v645, ptr u64, v648
        v650 = const u64 9
        store v650 to v649, !680
        v651 = get_local ptr slice, __anon_45, !680
        mem_copy_bytes v651, v645, 16
        v652 = load v651
        v653 = call eq_25(v642, v652), !683
        cbr v653, block66(), block67(), !681

        block66():
        v654 = call get_epoch_593(), !686
        v655 = get_local ptr { u64, u64 }, _result____________________________, !687
        store v654 to v655, !687
        v656 = get_local ptr { u64, u64 }, _result____________________________, !688
        v657 = load v656
        v658 = call encode_594(v657), !691
        v659 = get_local ptr slice, _result_____________________________, !692
        store v658 to v659, !692
        v660 = get_local ptr slice, _result_____________________________, !693
        v661 = load v660
        v662 = call ptr_23(v661), !696
        v663 = get_local ptr slice, _result_____________________________, !697
        v664 = load v663
        v665 = call len_55(v664), !700
        retd v662 v665, !701

        block67():
        v666 = const unit ()
        br block68(v666)

        block68(v667: ()):
        v668 = get_local ptr slice, _method_name, !702
        v669 = load v668
        v670 = const string<12> "market_order"
        v671 = ptr_to_int v670 to u64, !703
        v672 = get_local ptr { u64, u64 }, __anon_46, !703
        v673 = const u64 0
        v674 = get_elem_ptr v672, ptr u64, v673
        store v671 to v674, !703
        v675 = const u64 1
        v676 = get_elem_ptr v672, ptr u64, v675
        v677 = const u64 12
        store v677 to v676, !703
        v678 = get_local ptr slice, __anon_47, !703
        mem_copy_bytes v678, v672, 16
        v679 = load v678
        v680 = call eq_25(v669, v679), !706
        cbr v680, block69(), block70(), !704

        block69():
        v681 = get_local ptr { u64 }, _buffer, !707
        v682 = call decode_109(v681), !710
        v683 = get_local ptr { b256 }, args_________________, !711
        store v682 to v683, !711
        v684 = get_local ptr { b256 }, args_________________, !712
        v685 = const u64 0
        v686 = get_elem_ptr v684, ptr b256, v685, !713
        v687 = load v686
        v688 = call market_order_595(v687), !716
        v689 = get_local ptr { u64, ( () | bool ) }, _result______________________________, !717
        store v688 to v689, !717
        v690 = get_local ptr { u64, ( () | bool ) }, _result______________________________, !718
        v691 = load v690
        v692 = call encode_596(v691), !721
        v693 = get_local ptr slice, _result_______________________________, !722
        store v692 to v693, !722
        v694 = get_local ptr slice, _result_______________________________, !723
        v695 = load v694
        v696 = call ptr_23(v695), !726
        v697 = get_local ptr slice, _result_______________________________, !727
        v698 = load v697
        v699 = call len_55(v698), !730
        retd v696 v699, !731

        block70():
        v700 = const unit ()
        br block71(v700)

        block71(v701: ()):
        v702 = get_local ptr slice, _method_name, !732
        v703 = load v702
        v704 = const string<11> "matcher_fee"
        v705 = ptr_to_int v704 to u64, !733
        v706 = get_local ptr { u64, u64 }, __anon_48, !733
        v707 = const u64 0
        v708 = get_elem_ptr v706, ptr u64, v707
        store v705 to v708, !733
        v709 = const u64 1
        v710 = get_elem_ptr v706, ptr u64, v709
        v711 = const u64 11
        store v711 to v710, !733
        v712 = get_local ptr slice, __anon_49, !733
        mem_copy_bytes v712, v706, 16
        v713 = load v712
        v714 = call eq_25(v703, v713), !736
        cbr v714, block72(), block73(), !734

        block72():
        v715 = call matcher_fee_598(), !739
        v716 = get_local ptr u64, _result________________________________, !740
        store v715 to v716, !740
        v717 = get_local ptr u64, _result________________________________, !741
        v718 = load v717
        v719 = call encode_599(v718), !744
        v720 = get_local ptr slice, _result_________________________________, !745
        store v719 to v720, !745
        v721 = get_local ptr slice, _result_________________________________, !746
        v722 = load v721
        v723 = call ptr_23(v722), !749
        v724 = get_local ptr slice, _result_________________________________, !750
        v725 = load v724
        v726 = call len_55(v725), !753
        retd v723 v726, !754

        block73():
        v727 = const unit ()
        br block74(v727)

        block74(v728: ()):
        v729 = get_local ptr slice, _method_name, !755
        v730 = load v729
        v731 = const string<15> "min_order_price"
        v732 = ptr_to_int v731 to u64, !756
        v733 = get_local ptr { u64, u64 }, __anon_50, !756
        v734 = const u64 0
        v735 = get_elem_ptr v733, ptr u64, v734
        store v732 to v735, !756
        v736 = const u64 1
        v737 = get_elem_ptr v733, ptr u64, v736
        v738 = const u64 15
        store v738 to v737, !756
        v739 = get_local ptr slice, __anon_51, !756
        mem_copy_bytes v739, v733, 16
        v740 = load v739
        v741 = call eq_25(v730, v740), !759
        cbr v741, block75(), block76(), !757

        block75():
        v742 = call min_order_price_600(), !762
        v743 = get_local ptr u64, _result__________________________________, !763
        store v742 to v743, !763
        v744 = get_local ptr u64, _result__________________________________, !764
        v745 = load v744
        v746 = call encode_599(v745), !767
        v747 = get_local ptr slice, _result___________________________________, !768
        store v746 to v747, !768
        v748 = get_local ptr slice, _result___________________________________, !769
        v749 = load v748
        v750 = call ptr_23(v749), !772
        v751 = get_local ptr slice, _result___________________________________, !773
        v752 = load v751
        v753 = call len_55(v752), !776
        retd v750 v753, !777

        block76():
        v754 = const unit ()
        br block77(v754)

        block77(v755: ()):
        v756 = get_local ptr slice, _method_name, !778
        v757 = load v756
        v758 = const string<14> "min_order_size"
        v759 = ptr_to_int v758 to u64, !779
        v760 = get_local ptr { u64, u64 }, __anon_52, !779
        v761 = const u64 0
        v762 = get_elem_ptr v760, ptr u64, v761
        store v759 to v762, !779
        v763 = const u64 1
        v764 = get_elem_ptr v760, ptr u64, v763
        v765 = const u64 14
        store v765 to v764, !779
        v766 = get_local ptr slice, __anon_53, !779
        mem_copy_bytes v766, v760, 16
        v767 = load v766
        v768 = call eq_25(v757, v767), !782
        cbr v768, block78(), block79(), !780

        block78():
        v769 = call min_order_size_601(), !785
        v770 = get_local ptr u64, _result____________________________________, !786
        store v769 to v770, !786
        v771 = get_local ptr u64, _result____________________________________, !787
        v772 = load v771
        v773 = call encode_599(v772), !790
        v774 = get_local ptr slice, _result_____________________________________, !791
        store v773 to v774, !791
        v775 = get_local ptr slice, _result_____________________________________, !792
        v776 = load v775
        v777 = call ptr_23(v776), !795
        v778 = get_local ptr slice, _result_____________________________________, !796
        v779 = load v778
        v780 = call len_55(v779), !799
        retd v777 v780, !800

        block79():
        v781 = const unit ()
        br block80(v781)

        block80(v782: ()):
        v783 = get_local ptr slice, _method_name, !801
        v784 = load v783
        v785 = const string<5> "order"
        v786 = ptr_to_int v785 to u64, !802
        v787 = get_local ptr { u64, u64 }, __anon_54, !802
        v788 = const u64 0
        v789 = get_elem_ptr v787, ptr u64, v788
        store v786 to v789, !802
        v790 = const u64 1
        v791 = get_elem_ptr v787, ptr u64, v790
        v792 = const u64 5
        store v792 to v791, !802
        v793 = get_local ptr slice, __anon_55, !802
        mem_copy_bytes v793, v787, 16
        v794 = load v793
        v795 = call eq_25(v784, v794), !805
        cbr v795, block81(), block82(), !803

        block81():
        v796 = get_local ptr { u64 }, _buffer, !806
        v797 = call decode_109(v796), !809
        v798 = get_local ptr { b256 }, args__________________, !810
        store v797 to v798, !810
        v799 = get_local ptr { b256 }, args__________________, !811
        v800 = const u64 0
        v801 = get_elem_ptr v799, ptr b256, v800, !812
        v802 = load v801
        v803 = call order_602(v802), !815
        v804 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, _result______________________________________, !816
        store v803 to v804, !816
        v805 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, _result______________________________________, !817
        v806 = load v805
        v807 = call encode_603(v806), !820
        v808 = get_local ptr slice, _result_______________________________________, !821
        store v807 to v808, !821
        v809 = get_local ptr slice, _result_______________________________________, !822
        v810 = load v809
        v811 = call ptr_23(v810), !825
        v812 = get_local ptr slice, _result_______________________________________, !826
        v813 = load v812
        v814 = call len_55(v813), !829
        retd v811 v814, !830

        block82():
        v815 = const unit ()
        br block83(v815)

        block83(v816: ()):
        v817 = get_local ptr slice, _method_name, !831
        v818 = load v817
        v819 = const string<8> "order_id"
        v820 = ptr_to_int v819 to u64, !832
        v821 = get_local ptr { u64, u64 }, __anon_56, !832
        v822 = const u64 0
        v823 = get_elem_ptr v821, ptr u64, v822
        store v820 to v823, !832
        v824 = const u64 1
        v825 = get_elem_ptr v821, ptr u64, v824
        v826 = const u64 8
        store v826 to v825, !832
        v827 = get_local ptr slice, __anon_57, !832
        mem_copy_bytes v827, v821, 16
        v828 = load v827
        v829 = call eq_25(v818, v828), !835
        cbr v829, block84(), block85(), !833

        block84():
        v830 = get_local ptr { u64 }, _buffer, !836
        v831 = call decode_607(v830), !839
        v832 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, args___________________, !840
        store v831 to v832, !840
        v833 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, args___________________, !841
        v834 = const u64 0
        v835 = get_elem_ptr v833, ptr { u64 }, v834, !842
        v836 = load v835
        v837 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, args___________________, !843
        v838 = const u64 1
        v839 = get_elem_ptr v837, ptr { u64, ( { b256 } | { b256 } ) }, v838, !844
        v840 = load v839
        v841 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, args___________________, !845
        v842 = const u64 2
        v843 = get_elem_ptr v841, ptr u64, v842, !846
        v844 = load v843
        v845 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, args___________________, !847
        v846 = const u64 3
        v847 = get_elem_ptr v845, ptr u64, v846, !848
        v848 = load v847
        v849 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, args___________________, !849
        v850 = const u64 4
        v851 = get_elem_ptr v849, ptr u64, v850, !850
        v852 = load v851
        v853 = call order_id_609(v836, v840, v844, v848, v852), !853
        v854 = get_local ptr b256, _result________________________________________, !854
        store v853 to v854, !854
        v855 = get_local ptr b256, _result________________________________________, !855
        v856 = load v855
        v857 = call encode_465(v856), !858
        v858 = get_local ptr slice, _result_________________________________________, !859
        store v857 to v858, !859
        v859 = get_local ptr slice, _result_________________________________________, !860
        v860 = load v859
        v861 = call ptr_23(v860), !863
        v862 = get_local ptr slice, _result_________________________________________, !864
        v863 = load v862
        v864 = call len_55(v863), !867
        retd v861 v864, !868

        block85():
        v865 = const unit ()
        br block86(v865)

        block86(v866: ()):
        v867 = get_local ptr slice, _method_name, !869
        v868 = load v867
        v869 = const string<12> "protocol_fee"
        v870 = ptr_to_int v869 to u64, !870
        v871 = get_local ptr { u64, u64 }, __anon_58, !870
        v872 = const u64 0
        v873 = get_elem_ptr v871, ptr u64, v872
        store v870 to v873, !870
        v874 = const u64 1
        v875 = get_elem_ptr v871, ptr u64, v874
        v876 = const u64 12
        store v876 to v875, !870
        v877 = get_local ptr slice, __anon_59, !870
        mem_copy_bytes v877, v871, 16
        v878 = load v877
        v879 = call eq_25(v868, v878), !873
        cbr v879, block87(), block88(), !871

        block87():
        v880 = call protocol_fee_610(), !876
        v881 = get_local ptr { { u64, u64 }, u64 }, _result__________________________________________, !877
        store v880 to v881, !877
        v882 = get_local ptr { { u64, u64 }, u64 }, _result__________________________________________, !878
        v883 = load v882
        v884 = call encode_617(v883), !881
        v885 = get_local ptr slice, _result___________________________________________, !882
        store v884 to v885, !882
        v886 = get_local ptr slice, _result___________________________________________, !883
        v887 = load v886
        v888 = call ptr_23(v887), !886
        v889 = get_local ptr slice, _result___________________________________________, !887
        v890 = load v889
        v891 = call len_55(v890), !890
        retd v888 v891, !891

        block88():
        v892 = const unit ()
        br block89(v892)

        block89(v893: ()):
        v894 = get_local ptr slice, _method_name, !892
        v895 = load v894
        v896 = const string<17> "protocol_fee_user"
        v897 = ptr_to_int v896 to u64, !893
        v898 = get_local ptr { u64, u64 }, __anon_60, !893
        v899 = const u64 0
        v900 = get_elem_ptr v898, ptr u64, v899
        store v897 to v900, !893
        v901 = const u64 1
        v902 = get_elem_ptr v898, ptr u64, v901
        v903 = const u64 17
        store v903 to v902, !893
        v904 = get_local ptr slice, __anon_61, !893
        mem_copy_bytes v904, v898, 16
        v905 = load v904
        v906 = call eq_25(v895, v905), !896
        cbr v906, block90(), block91(), !894

        block90():
        v907 = get_local ptr { u64 }, _buffer, !897
        v908 = call decode_337(v907), !900
        v909 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args____________________, !901
        store v908 to v909, !901
        v910 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args____________________, !902
        v911 = const u64 0
        v912 = get_elem_ptr v910, ptr { u64, ( { b256 } | { b256 } ) }, v911, !903
        v913 = load v912
        v914 = call protocol_fee_user_618(v913), !906
        v915 = get_local ptr { u64, u64 }, _result____________________________________________, !907
        store v914 to v915, !907
        v916 = get_local ptr { u64, u64 }, _result____________________________________________, !908
        v917 = load v916
        v918 = call encode_594(v917), !911
        v919 = get_local ptr slice, _result_____________________________________________, !912
        store v918 to v919, !912
        v920 = get_local ptr slice, _result_____________________________________________, !913
        v921 = load v920
        v922 = call ptr_23(v921), !916
        v923 = get_local ptr slice, _result_____________________________________________, !917
        v924 = load v923
        v925 = call len_55(v924), !920
        retd v922 v925, !921

        block91():
        v926 = const unit ()
        br block92(v926)

        block92(v927: ()):
        v928 = get_local ptr slice, _method_name, !922
        v929 = load v928
        v930 = const string<24> "protocol_fee_user_amount"
        v931 = ptr_to_int v930 to u64, !923
        v932 = get_local ptr { u64, u64 }, __anon_62, !923
        v933 = const u64 0
        v934 = get_elem_ptr v932, ptr u64, v933
        store v931 to v934, !923
        v935 = const u64 1
        v936 = get_elem_ptr v932, ptr u64, v935
        v937 = const u64 24
        store v937 to v936, !923
        v938 = get_local ptr slice, __anon_63, !923
        mem_copy_bytes v938, v932, 16
        v939 = load v938
        v940 = call eq_25(v929, v939), !926
        cbr v940, block93(), block94(), !924

        block93():
        v941 = get_local ptr { u64 }, _buffer, !927
        v942 = call decode_619(v941), !930
        v943 = get_local ptr { u64, { u64, ( { b256 } | { b256 } ) } }, args_____________________, !931
        store v942 to v943, !931
        v944 = get_local ptr { u64, { u64, ( { b256 } | { b256 } ) } }, args_____________________, !932
        v945 = const u64 0
        v946 = get_elem_ptr v944, ptr u64, v945, !933
        v947 = load v946
        v948 = get_local ptr { u64, { u64, ( { b256 } | { b256 } ) } }, args_____________________, !934
        v949 = const u64 1
        v950 = get_elem_ptr v948, ptr { u64, ( { b256 } | { b256 } ) }, v949, !935
        v951 = load v950
        v952 = call protocol_fee_user_amount_621(v947, v951), !938
        v953 = get_local ptr { u64, u64 }, _result______________________________________________, !939
        store v952 to v953, !939
        v954 = get_local ptr { u64, u64 }, _result______________________________________________, !940
        v955 = load v954
        v956 = call encode_594(v955), !943
        v957 = get_local ptr slice, _result_______________________________________________, !944
        store v956 to v957, !944
        v958 = get_local ptr slice, _result_______________________________________________, !945
        v959 = load v958
        v960 = call ptr_23(v959), !948
        v961 = get_local ptr slice, _result_______________________________________________, !949
        v962 = load v961
        v963 = call len_55(v962), !952
        retd v960 v963, !953

        block94():
        v964 = const unit ()
        br block95(v964)

        block95(v965: ()):
        v966 = get_local ptr slice, _method_name, !954
        v967 = load v966
        v968 = const string<17> "user_order_height"
        v969 = ptr_to_int v968 to u64, !955
        v970 = get_local ptr { u64, u64 }, __anon_64, !955
        v971 = const u64 0
        v972 = get_elem_ptr v970, ptr u64, v971
        store v969 to v972, !955
        v973 = const u64 1
        v974 = get_elem_ptr v970, ptr u64, v973
        v975 = const u64 17
        store v975 to v974, !955
        v976 = get_local ptr slice, __anon_65, !955
        mem_copy_bytes v976, v970, 16
        v977 = load v976
        v978 = call eq_25(v967, v977), !958
        cbr v978, block96(), block97(), !956

        block96():
        v979 = get_local ptr { u64 }, _buffer, !959
        v980 = call decode_337(v979), !962
        v981 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args______________________, !963
        store v980 to v981, !963
        v982 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args______________________, !964
        v983 = const u64 0
        v984 = get_elem_ptr v982, ptr { u64, ( { b256 } | { b256 } ) }, v983, !965
        v985 = load v984
        v986 = call user_order_height_623(v985), !968
        v987 = get_local ptr u64, _result________________________________________________, !969
        store v986 to v987, !969
        v988 = get_local ptr u64, _result________________________________________________, !970
        v989 = load v988
        v990 = call encode_599(v989), !973
        v991 = get_local ptr slice, _result_________________________________________________, !974
        store v990 to v991, !974
        v992 = get_local ptr slice, _result_________________________________________________, !975
        v993 = load v992
        v994 = call ptr_23(v993), !978
        v995 = get_local ptr slice, _result_________________________________________________, !979
        v996 = load v995
        v997 = call len_55(v996), !982
        retd v994 v997, !983

        block97():
        v998 = const unit ()
        br block98(v998)

        block98(v999: ()):
        v1000 = get_local ptr slice, _method_name, !984
        v1001 = load v1000
        v1002 = const string<11> "user_orders"
        v1003 = ptr_to_int v1002 to u64, !985
        v1004 = get_local ptr { u64, u64 }, __anon_66, !985
        v1005 = const u64 0
        v1006 = get_elem_ptr v1004, ptr u64, v1005
        store v1003 to v1006, !985
        v1007 = const u64 1
        v1008 = get_elem_ptr v1004, ptr u64, v1007
        v1009 = const u64 11
        store v1009 to v1008, !985
        v1010 = get_local ptr slice, __anon_67, !985
        mem_copy_bytes v1010, v1004, 16
        v1011 = load v1010
        v1012 = call eq_25(v1001, v1011), !988
        cbr v1012, block99(), block100(), !986

        block99():
        v1013 = get_local ptr { u64 }, _buffer, !989
        v1014 = call decode_337(v1013), !992
        v1015 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______________________, !993
        store v1014 to v1015, !993
        v1016 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, args_______________________, !994
        v1017 = const u64 0
        v1018 = get_elem_ptr v1016, ptr { u64, ( { b256 } | { b256 } ) }, v1017, !995
        v1019 = load v1018
        v1020 = call user_orders_624(v1019), !998
        v1021 = get_local ptr { { u64, u64 }, u64 }, _result__________________________________________________, !999
        store v1020 to v1021, !999
        v1022 = get_local ptr { { u64, u64 }, u64 }, _result__________________________________________________, !1000
        v1023 = load v1022
        v1024 = call encode_631(v1023), !1003
        v1025 = get_local ptr slice, _result___________________________________________________, !1004
        store v1024 to v1025, !1004
        v1026 = get_local ptr slice, _result___________________________________________________, !1005
        v1027 = load v1026
        v1028 = call ptr_23(v1027), !1008
        v1029 = get_local ptr slice, _result___________________________________________________, !1009
        v1030 = load v1029
        v1031 = call len_55(v1030), !1012
        retd v1028 v1031, !1013

        block100():
        v1032 = const unit ()
        br block101(v1032)

        block101(v1033: ()):
        v1034 = const u64 123, !1014
        revert v1034, !1015
    }

    pub fn from_second_parameter_15() -> { u64 }, !1018 {
        local u64 SECOND_PARAMETER_OFFSET
        local { u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !1019
        v1 = const u64 74, !1020
        store v1 to v0, !1019
        v2 = asm() -> u64 fp, !1021 {
        }
        v3 = get_local ptr u64, ptr, !1022
        store v2 to v3, !1022
        v4 = get_local ptr u64, ptr, !1023
        v5 = load v4
        v6 = get_local ptr u64, SECOND_PARAMETER_OFFSET, !1024
        v7 = load v6
        v8 = call add_16(v5, v7), !1027
        v9 = get_local ptr u64, ptr_, !1028
        store v8 to v9, !1028
        v10 = get_local ptr u64, ptr_, !1029
        v11 = load v10
        v12 = call read_17(v11), !1032
        v13 = get_local ptr u64, ptr__, !1033
        store v12 to v13, !1033
        v14 = get_local ptr u64, ptr__, !1034
        v15 = load v14
        v16 = asm(ptr: v15) -> u64 ptr, !1035 {
        }
        v17 = get_local ptr { u64 }, __anon_0, !1036
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v16 to v19, !1036
        v20 = load v17
        ret { u64 } v20
    }

    pub fn add_16(self !1038: u64, count !1039: u64) -> u64, !1042 {
        entry(self: u64, count: u64):
        v0 = const u64 8
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn read_17(self !1043: u64) -> u64, !1046 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> u64 ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 8
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> u64 val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> u64 val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: u64):
        br block5(v7)

        block5(v8: u64):
        ret u64 v8
    }

    pub fn decode_first_param_18() -> slice, !1057 {
        local mut { u64 } buffer

        entry():
        v0 = call from_first_parameter_19(), !1060
        v1 = get_local ptr { u64 }, buffer, !1061
        store v0 to v1, !1061
        v2 = get_local ptr { u64 }, buffer, !1062
        v3 = call abi_decode_20(v2), !1065
        ret slice v3
    }

    pub fn from_first_parameter_19() -> { u64 }, !1068 {
        local u64 FIRST_PARAMETER_OFFSET
        local { u64 } __anon_0
        local u64 ptr
        local u64 ptr_
        local u64 ptr__

        entry():
        v0 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !1069
        v1 = const u64 73, !1070
        store v1 to v0, !1069
        v2 = asm() -> u64 fp, !1071 {
        }
        v3 = get_local ptr u64, ptr, !1072
        store v2 to v3, !1072
        v4 = get_local ptr u64, ptr, !1073
        v5 = load v4
        v6 = get_local ptr u64, FIRST_PARAMETER_OFFSET, !1074
        v7 = load v6
        v8 = call add_16(v5, v7), !1077
        v9 = get_local ptr u64, ptr_, !1078
        store v8 to v9, !1078
        v10 = get_local ptr u64, ptr_, !1079
        v11 = load v10
        v12 = call read_17(v11), !1082
        v13 = get_local ptr u64, ptr__, !1083
        store v12 to v13, !1083
        v14 = get_local ptr u64, ptr__, !1084
        v15 = load v14
        v16 = asm(ptr: v15) -> u64 ptr, !1085 {
        }
        v17 = get_local ptr { u64 }, __anon_0, !1086
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v16 to v19, !1086
        v20 = load v17
        ret { u64 } v20
    }

    pub fn abi_decode_20(buffer !1087: ptr { u64 }) -> slice, !1090 {
        local { u64, u64 } __anon_0
        local slice data
        local u64 len

        entry(buffer: ptr { u64 }):
        v0 = call read_8_bytes_21(buffer), !1093
        v1 = get_local ptr u64, len, !1094
        store v0 to v1, !1094
        v2 = get_local ptr u64, len, !1095
        v3 = load v2
        v4 = call read_bytes_22(buffer, v3), !1098
        v5 = get_local ptr slice, data, !1099
        store v4 to v5, !1099
        v6 = get_local ptr slice, data, !1100
        v7 = load v6
        v8 = call ptr_23(v7), !1103
        v9 = get_local ptr u64, len, !1104
        v10 = load v9
        v11 = get_local ptr { u64, u64 }, __anon_0, !1105
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !1105
        store v8 to v13, !1105
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14, !1105
        store v10 to v15, !1105
        v16 = asm(s: v11) -> slice s, !1106 {
        }
        ret slice v16
    }

    pub fn read_8_bytes_21(self !164: ptr { u64 }) -> u64, !1107 {
        local u64 v

        entry(self: ptr { u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !61
        v2 = load v1
        v3 = asm(ptr: v2, val) -> u64 val, !168 {
            lw     val ptr i0, !169
        }
        v4 = get_local ptr u64, v, !170
        store v3 to v4, !170
        v5 = const u64 0
        v6 = get_elem_ptr self, ptr u64, v5, !61
        v7 = load v6
        v8 = const u64 1
        v9 = const u64 8, !171
        v10 = mul v8, v9
        v11 = add v7, v10
        v12 = const u64 0
        v13 = get_elem_ptr self, ptr u64, v12, !172
        store v11 to v13, !172
        v14 = get_local ptr u64, v, !173
        v15 = load v14
        ret u64 v15
    }

    pub fn read_bytes_22(self !1108: ptr { u64 }, count !1109: u64) -> slice, !1112 {
        local { u64, u64 } __anon_0
        local slice slice

        entry(self: ptr { u64 }, count: u64):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !61
        v2 = load v1
        v3 = get_local ptr { u64, u64 }, __anon_0, !1113
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1113
        store v2 to v5, !1113
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !1113
        store count to v7, !1113
        v8 = asm(ptr: v3) -> slice ptr, !1114 {
        }
        v9 = get_local ptr slice, slice, !1115
        store v8 to v9, !1115
        v10 = const u64 0
        v11 = get_elem_ptr self, ptr u64, v10, !61
        v12 = load v11
        v13 = const u64 1
        v14 = mul v13, count
        v15 = add v12, v14
        v16 = const u64 0
        v17 = get_elem_ptr self, ptr u64, v16, !1116
        store v15 to v17, !1116
        v18 = get_local ptr slice, slice, !1117
        v19 = load v18
        ret slice v19
    }

    pub fn ptr_23(self !1119: slice) -> u64, !1122 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_24(self), !1125
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1126
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_24(slice !1127: slice) -> { u64, u64 }, !1130 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !1131 {
        }
        ret { u64, u64 } v0
    }

    pub fn eq_25(self !1132: slice, other !1133: slice) -> bool, !1136 {
        local u64 l
        local u64 other_ptr
        local u64 self_ptr

        entry(self: slice, other: slice):
        v0 = call len_28(self), !1139
        v1 = call len_28(other), !1142
        v2 = call neq_26(v0, v1), !1145
        cbr v2, block0(), block1(), !1143

        block0():
        v3 = const bool false, !1146
        br block2(v3)

        block1():
        v4 = call as_ptr_29(self), !1149
        v5 = get_local ptr u64, self_ptr, !1150
        store v4 to v5, !1150
        v6 = call as_ptr_29(other), !1153
        v7 = get_local ptr u64, other_ptr, !1154
        store v6 to v7, !1154
        v8 = call len_28(self), !1157
        v9 = get_local ptr u64, l, !1158
        store v8 to v9, !1158
        v10 = get_local ptr u64, self_ptr, !1159
        v11 = load v10
        v12 = get_local ptr u64, other_ptr, !1160
        v13 = load v12
        v14 = get_local ptr u64, l, !1161
        v15 = load v14
        v16 = asm(r1: v11, r2: v13, r3: v15, r4) -> bool r4, !1162 {
            meq    r4 r1 r2 r3, !1163
        }
        br block2(v16)

        block2(v17: bool):
        ret bool v17
    }

    pub fn neq_26(self !1164: u64, other !1165: u64) -> bool, !1168 {
        entry(self: u64, other: u64):
        v0 = call eq_10(self, other), !1171
        v1 = call not_27(v0), !1174
        ret bool v1
    }

    pub fn not_27(self !1175: bool) -> bool, !1178 {
        entry(self: bool):
        v0 = const bool false, !1179
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_28(self !1181: slice) -> u64, !1184 {
        local u64 _
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local u64 len

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !1185 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_2, !1186
        store v0 to v1, !1186
        v2 = get_local ptr { u64, u64 }, __tuple_2, !1186
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_2_, !1186
        store v3 to v4, !1186
        v5 = get_local ptr { u64, u64 }, __tuple_2_, !1186
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !1186
        v8 = load v7
        v9 = get_local ptr u64, _, !1186
        store v8 to v9, !1186
        v10 = get_local ptr { u64, u64 }, __tuple_2_, !1186
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !1186
        v13 = load v12
        v14 = get_local ptr u64, len, !1186
        store v13 to v14, !1186
        v15 = get_local ptr u64, len, !1187
        v16 = load v15
        ret u64 v16
    }

    pub fn as_ptr_29(self !1188: slice) -> u64, !1191 {
        local u64 _
        local { u64, u64 } __tuple_1
        local { u64, u64 } __tuple_1_
        local u64 ptr

        entry(self: slice):
        v0 = asm(s: self) -> { u64, u64 } s, !1192 {
        }
        v1 = get_local ptr { u64, u64 }, __tuple_1, !1193
        store v0 to v1, !1193
        v2 = get_local ptr { u64, u64 }, __tuple_1, !1193
        v3 = load v2
        v4 = get_local ptr { u64, u64 }, __tuple_1_, !1193
        store v3 to v4, !1193
        v5 = get_local ptr { u64, u64 }, __tuple_1_, !1193
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !1193
        v8 = load v7
        v9 = get_local ptr u64, ptr, !1193
        store v8 to v9, !1193
        v10 = get_local ptr { u64, u64 }, __tuple_1_, !1193
        v11 = const u64 1
        v12 = get_elem_ptr v10, ptr u64, v11, !1193
        v13 = load v12
        v14 = get_local ptr u64, _, !1193
        store v13 to v14, !1193
        v15 = get_local ptr u64, ptr, !1194
        v16 = load v15
        ret u64 v16
    }

    pub fn is_paused_30() -> bool, !1198 {
        entry():
        v0 = call _is_paused_31(), !1201
        ret bool v0
    }

    pub fn _is_paused_31() -> bool, !1205 {
        local { b256, u64, b256 } paused_key

        entry():
        v0 = const b256 0xd987cda398e9af257cbcf8a8995c5dccb19833cadc727ba56b0fec60ccf8944c, !1206
        v1 = const u64 0, !1207
        v2 = call new_32(v0, v1, v0), !1210
        v3 = get_local ptr { b256, u64, b256 }, paused_key, !1211
        store v2 to v3, !1211
        v4 = get_local ptr { b256, u64, b256 }, paused_key, !1212
        v5 = load v4
        v6 = call try_read_34(v5), !1215
        v7 = const bool false, !1216
        v8 = call unwrap_or_33(v6, v7), !1219
        ret bool v8
    }

    pub fn new_32(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !1226 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn unwrap_or_33(self !1229: { u64, ( () | bool ) }, default !1230: bool) -> bool, !1233 {
        local { u64, ( () | bool ) } __matched_value_5
        local bool x

        entry(self: { u64, ( () | bool ) }, default: bool):
        v0 = get_local ptr { u64, ( () | bool ) }, __matched_value_5, !1234
        store self to v0, !1234
        v1 = get_local ptr { u64, ( () | bool ) }, __matched_value_5, !1235
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1235
        v4 = load v3
        v5 = const u64 1, !1235
        v6 = call eq_10(v4, v5), !1238
        cbr v6, block0(), block1(), !1236

        block0():
        v7 = get_local ptr { u64, ( () | bool ) }, __matched_value_5, !1235
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr bool, v8, v9
        v11 = load v10
        v12 = get_local ptr bool, x, !1239
        store v11 to v12, !1239
        v13 = get_local ptr bool, x, !1240
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | bool ) }, __matched_value_5, !1235
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1235
        v18 = load v17
        v19 = const u64 0, !1235
        v20 = call eq_10(v18, v19), !1243
        cbr v20, block2(), block3(), !1241

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !1234
        revert v21, !1234

        block4(v22: bool):
        br block5(v22)

        block5(v23: bool):
        ret bool v23
    }

    pub fn try_read_34(self !1245: { b256, u64, b256 }) -> { u64, ( () | bool ) }, !1248 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_49(self), !1251
        v1 = call offset_50(self), !1254
        v2 = call read_35(v0, v1), !1257
        ret { u64, ( () | bool ) } v2
    }

    pub fn read_35(slot !1259: b256, offset !1260: u64) -> { u64, ( () | bool ) }, !1263 {
        local { u64, ( () | bool ) } __anon_0
        local { u64, ( () | bool ) } __anon_1
        local { u64, ( () | bool ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 1
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !1267
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | bool ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | bool ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_36(slot, offset), !1272
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !1278
        v34 = call alloc_47(v33), !1281
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | bool ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !1291
        v54 = call read_48(v53), !1294
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr bool, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | bool ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | bool ) }):
        ret { u64, ( () | bool ) } v64
    }

    fn slot_calculator_36(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !1299 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 1
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !1304
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !1308
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !1312
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !1316
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !1321
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool false
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !1328
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !1333
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !1337
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !1341
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !1345
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !1349
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !1354
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !1360
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !1364
        v51 = call subtract_44(v47, v50), !1367
        v52 = call add_43(v44, v51), !1370
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !1374
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn rsh_37(self !1378: u64, other !1379: u64) -> u64, !1382 {
        entry(self: u64, other: u64):
        v0 = rsh self, other
        ret u64 v0
    }

    pub fn add_38(self !1383: u64, other !1384: u64) -> u64, !1387 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn multiply_39(self !1388: u64, other !1389: u64) -> u64, !1392 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn modulo_40(self !1393: u64, other !1394: u64) -> u64, !1397 {
        entry(self: u64, other: u64):
        v0 = mod self, other
        ret u64 v0
    }

    pub fn eq_41(self !1398: bool, other !1399: bool) -> bool, !1402 {
        entry(self: bool, other: bool):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn as_u256_42(self !1403: b256) -> u256, !1406 {
        entry(self: b256):
        v0 = asm(input: self) -> u256 input, !1407 {
        }
        ret u256 v0
    }

    pub fn add_43(self !1408: u256, other !1409: u256) -> u256, !1412 {
        entry(self: u256, other: u256):
        v0 = add self, other
        ret u256 v0
    }

    pub fn subtract_44(self !1413: u256, other !1414: u256) -> u256, !1417 {
        entry(self: u256, other: u256):
        v0 = sub self, other
        ret u256 v0
    }

    pub fn as_u256_45(self !1418: u64) -> u256, !1421 {
        local { u64, u64, u64, u64 } __anon_0
        local { u64, u64, u64, u64 } input

        entry(self: u64):
        v0 = get_local ptr { u64, u64, u64, u64 }, __anon_0, !1422
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !1422
        v3 = const u64 0, !1423
        store v3 to v2, !1422
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !1422
        v6 = const u64 0, !1424
        store v6 to v5, !1422
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7, !1422
        v9 = const u64 0, !1425
        store v9 to v8, !1422
        v10 = const u64 3
        v11 = get_elem_ptr v0, ptr u64, v10, !1422
        store self to v11, !1422
        v12 = load v0
        v13 = get_local ptr { u64, u64, u64, u64 }, input, !1426
        store v12 to v13, !1426
        v14 = get_local ptr { u64, u64, u64, u64 }, input, !1427
        v15 = asm(input: v14) -> u256 input, !1428 {
        }
        ret u256 v15
    }

    pub fn as_b256_46(self !1429: u256) -> b256, !1432 {
        entry(self: u256):
        v0 = asm(input: self) -> b256 input, !1433 {
        }
        ret b256 v0
    }

    pub fn alloc_47(count !1435: u64) -> u64, !1438 {
        entry(count: u64):
        v0 = const u64 8
        v1 = call multiply_39(v0, count), !1441
        v2 = asm(size: v1, ptr) -> u64 ptr, !1442 {
            aloc   size, !1443
            move   ptr hp, !1444
        }
        ret u64 v2
    }

    pub fn read_48(self !1043: u64) -> bool, !1445 {
        entry(self: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> bool ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 1
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> bool val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> bool val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: bool):
        br block5(v7)

        block5(v8: bool):
        ret bool v8
    }

    pub fn slot_49(self !1446: { b256, u64, b256 }) -> b256, !1449 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_50(self !1451: { b256, u64, b256 }) -> u64, !1454 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn encode_51(item !1456: bool) -> slice, !1459 {
        local { { u64, u64, u64 } } buffer

        entry(item: bool):
        v0 = call new_53(), !1462
        v1 = call abi_encode_52(item, v0), !1465
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !1470
        ret slice v5
    }

    pub fn abi_encode_52(self !1471: bool, buffer !1472: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1475 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: bool, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1476
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 1
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = ptr_to_int v20 to u64
        v23 = add v22, v16
        v24 = int_to_ptr v23 to ptr bool
        store self to v24
        v25 = const u64 1
        v26 = add v16, v25
        v27 = ptr_to_int v20 to u64
        v28 = get_local ptr { u64, u64, u64 }, __anon_1
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        store v21 to v32
        v33 = const u64 2
        v34 = get_elem_ptr v28, ptr u64, v33
        store v26 to v34
        v35 = asm(buffer: v28) -> { u64, u64, u64 } buffer {
        }
        v36 = get_local ptr { { u64, u64, u64 } }, __anon_2, !1477
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, u64, u64 }, v37
        store v35 to v38, !1477
        v39 = load v36
        ret { { u64, u64, u64 } } v39

        block1():
        v40 = const u64 2
        v41 = mul v13, v40
        v42 = add v41, v17
        v43 = asm(new_cap: v42, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v43, v42)

        block2():
        br block0(v10, v13)
    }

    pub fn new_53() -> { { u64, u64, u64 } }, !1480 {
        local { u64, u64, u64 } __anon_0
        local { { u64, u64, u64 } } __anon_1

        entry():
        v0 = const u64 1024
        v1 = asm(cap: v0) -> u64 hp {
            aloc   cap
        }
        v2 = int_to_ptr v1 to ptr u8
        v3 = ptr_to_int v2 to u64
        v4 = get_local ptr { u64, u64, u64 }, __anon_0
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5
        store v3 to v6
        v7 = const u64 1
        v8 = get_elem_ptr v4, ptr u64, v7
        store v0 to v8
        v9 = const u64 2
        v10 = get_elem_ptr v4, ptr u64, v9
        v11 = const u64 0
        store v11 to v10
        v12 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v13 = get_local ptr { { u64, u64, u64 } }, __anon_1, !1481
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr { u64, u64, u64 }, v14
        store v12 to v15, !1481
        v16 = load v13
        ret { { u64, u64, u64 } } v16
    }

    pub fn as_raw_slice_54(self !1482: { { u64, u64, u64 } }) -> slice, !1485 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1

        entry(self: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1476
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = ptr_to_int v10 to u64
        v18 = get_local ptr { u64, u64 }, __anon_1
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19
        store v17 to v20
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21
        store v16 to v22
        v23 = asm(s: v18) -> slice s {
        }
        ret slice v23
    }

    pub fn len_55(self !1486: slice) -> u64, !1489 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_24(self), !1492
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1493
        v4 = load v3
        v5 = const u64 1
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn pause_56() -> (), !1497 {
        entry():
        v0 = call only_owner_57(), !1500
        v1 = call require_not_paused_97(), !1503
        v2 = call _pause_102(), !1506
        v3 = const unit ()
        ret () v3
    }

    pub fn only_owner_57() -> (), !1510 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { u64 } __anon_1

        entry():
        v0 = call _owner_69(), !1513
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !1515
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1515
        v4 = const u64 1, !1515
        store v4 to v3, !1515
        v5 = call msg_sender_79(), !1518
        v6 = call unwrap_78(v5), !1521
        v7 = const u64 1
        v8 = const u64 1
        v9 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v7, v8, !1515
        store v6 to v9, !1515
        v10 = load v1
        v11 = call eq_64(v0, v10), !1524
        v12 = get_local ptr { u64 }, __anon_1, !1525
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !1525
        v15 = const u64 0, !1525
        store v15 to v14, !1525
        v16 = load v12
        v17 = call require_58(v11, v16), !1528
        v18 = const unit ()
        ret () v18
    }

    pub fn require_58(condition !1530: bool, value !1531: { u64 }) -> (), !1534 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_27(condition), !1537
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_59(value), !1540
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !1545
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_59(value !1547: { u64 }) -> (), !1550 {
        entry(value: { u64 }):
        v0 = call encode_60(value), !1551
        v1 = const u64 4571204900286667806
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_60(item !1456: { u64 }) -> slice, !1552 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !1553
        v1 = call abi_encode_61(item, v0), !1554
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !1555
        ret slice v5
    }

    pub fn abi_encode_61(self !1556: { u64 }, buffer !1557: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1560 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !1561
        store self to v0, !1561
        v1 = get_local ptr { u64 }, __matched_value_1, !1562
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1562
        v4 = load v3
        v5 = const u64 0, !1562
        v6 = call eq_10(v4, v5), !1565
        cbr v6, block0(), block1(), !1563

        block0():
        v7 = const u64 0, !1566
        v8 = call abi_encode_62(v7, buffer), !1569
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !1561
        revert v9, !1561

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !1570
        store v10 to v11, !1570
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !1571
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn abi_encode_62(self !1572: u64, buffer !1573: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !1576 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_1
        local { { u64, u64, u64 } } __anon_2

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1476
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 8
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = ptr_to_int v20 to u64
        v23 = add v22, v16
        v24 = int_to_ptr v23 to ptr u64
        store self to v24
        v25 = const u64 8
        v26 = add v16, v25
        v27 = ptr_to_int v20 to u64
        v28 = get_local ptr { u64, u64, u64 }, __anon_1
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store v27 to v30
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr u64, v31
        store v21 to v32
        v33 = const u64 2
        v34 = get_elem_ptr v28, ptr u64, v33
        store v26 to v34
        v35 = asm(buffer: v28) -> { u64, u64, u64 } buffer {
        }
        v36 = get_local ptr { { u64, u64, u64 } }, __anon_2, !1577
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr { u64, u64, u64 }, v37
        store v35 to v38, !1577
        v39 = load v36
        ret { { u64, u64, u64 } } v39

        block1():
        v40 = const u64 2
        v41 = mul v13, v40
        v42 = add v41, v17
        v43 = asm(new_cap: v42, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v43, v42)

        block2():
        br block0(v10, v13)
    }

    pub fn revert_63(code !1578: u64) -> never, !1581 {
        entry(code: u64):
        revert code, !1582
    }

    pub fn eq_64(self !1583: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, other !1584: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> bool, !1587 {
        local { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } } __anon_0
        local { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } } __matched_value_1
        local { u64, ( { b256 } | { b256 } ) } owner1
        local { u64, ( { b256 } | { b256 } ) } owner2

        entry(self: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, other: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __anon_0, !1588
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v1, !1588
        store self to v2, !1588
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v3, !1588
        store other to v4, !1588
        v5 = load v0
        v6 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1589
        store v5 to v6, !1589
        v7 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v8, !1590
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1590
        v12 = load v11
        v13 = const u64 1, !1590
        v14 = call eq_10(v12, v13), !1593
        cbr v14, block0(), block1(v14), !1591

        block0():
        v15 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v16, !1590
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1590
        v20 = load v19
        v21 = const u64 1, !1590
        v22 = call eq_10(v20, v21), !1594
        br block1(v22), !1591

        block1(v23: bool):
        cbr v23, block2(), block3(), !1591

        block2():
        v24 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v25, !1590
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v26, ptr { u64, ( { b256 } | { b256 } ) }, v27, v28
        v30 = load v29
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner1, !1595
        store v30 to v31, !1595
        v32 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v33, !1590
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v34, ptr { u64, ( { b256 } | { b256 } ) }, v35, v36
        v38 = load v37
        v39 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner2, !1596
        store v38 to v39, !1596
        v40 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner1, !1597
        v41 = load v40
        v42 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner2, !1598
        v43 = load v42
        v44 = call eq_65(v41, v43), !1601
        br block14(v44)

        block3():
        v45 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v46, !1602
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !1602
        v50 = load v49
        v51 = const u64 0, !1602
        v52 = call eq_10(v50, v51), !1605
        cbr v52, block4(), block5(v52), !1603

        block4():
        v53 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v54, !1602
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !1602
        v58 = load v57
        v59 = const u64 0, !1602
        v60 = call eq_10(v58, v59), !1606
        br block5(v60), !1603

        block5(v61: bool):
        cbr v61, block6(), block7(), !1603

        block6():
        v62 = const bool true, !1607
        br block13(v62)

        block7():
        v63 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v64, !1608
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !1608
        v68 = load v67
        v69 = const u64 2, !1608
        v70 = call eq_10(v68, v69), !1611
        cbr v70, block8(), block9(v70), !1609

        block8():
        v71 = get_local ptr { { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } }, __matched_value_1, !1588
        v72 = const u64 1
        v73 = get_elem_ptr v71, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v72, !1608
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !1608
        v76 = load v75
        v77 = const u64 2, !1608
        v78 = call eq_10(v76, v77), !1612
        br block9(v78), !1609

        block9(v79: bool):
        cbr v79, block10(), block11(), !1609

        block10():
        v80 = const bool true, !1613
        br block12(v80)

        block11():
        v81 = const bool false, !1614
        br block12(v81)

        block12(v82: bool):
        br block13(v82)

        block13(v83: bool):
        br block14(v83)

        block14(v84: bool):
        ret bool v84
    }

    pub fn eq_65(self !1616: { u64, ( { b256 } | { b256 } ) }, other !1617: { u64, ( { b256 } | { b256 } ) }) -> bool, !1620 {
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } } __matched_value_1
        local { b256 } addr1
        local { b256 } addr2
        local { b256 } id1
        local { b256 } id2

        entry(self: { u64, ( { b256 } | { b256 } ) }, other: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !1621
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64, ( { b256 } | { b256 } ) }, v1, !1621
        store self to v2, !1621
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64, ( { b256 } | { b256 } ) }, v3, !1621
        store other to v4, !1621
        v5 = load v0
        v6 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1622
        store v5 to v6, !1622
        v7 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, !1623
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1623
        v12 = load v11
        v13 = const u64 0, !1623
        v14 = call eq_10(v12, v13), !1626
        cbr v14, block0(), block1(v14), !1624

        block0():
        v15 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64, ( { b256 } | { b256 } ) }, v16, !1623
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1623
        v20 = load v19
        v21 = const u64 0, !1623
        v22 = call eq_10(v20, v21), !1627
        br block1(v22), !1624

        block1(v23: bool):
        cbr v23, block2(), block3(), !1624

        block2():
        v24 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, ( { b256 } | { b256 } ) }, v25, !1623
        v27 = const u64 1
        v28 = const u64 0
        v29 = get_elem_ptr v26, ptr { b256 }, v27, v28
        v30 = load v29
        v31 = get_local ptr { b256 }, addr1, !1628
        store v30 to v31, !1628
        v32 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr { u64, ( { b256 } | { b256 } ) }, v33, !1623
        v35 = const u64 1
        v36 = const u64 0
        v37 = get_elem_ptr v34, ptr { b256 }, v35, v36
        v38 = load v37
        v39 = get_local ptr { b256 }, addr2, !1629
        store v38 to v39, !1629
        v40 = get_local ptr { b256 }, addr1, !1630
        v41 = load v40
        v42 = get_local ptr { b256 }, addr2, !1631
        v43 = load v42
        v44 = call eq_66(v41, v43), !1634
        br block9(v44)

        block3():
        v45 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr { u64, ( { b256 } | { b256 } ) }, v46, !1635
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !1635
        v50 = load v49
        v51 = const u64 1, !1635
        v52 = call eq_10(v50, v51), !1638
        cbr v52, block4(), block5(v52), !1636

        block4():
        v53 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr { u64, ( { b256 } | { b256 } ) }, v54, !1635
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !1635
        v58 = load v57
        v59 = const u64 1, !1635
        v60 = call eq_10(v58, v59), !1639
        br block5(v60), !1636

        block5(v61: bool):
        cbr v61, block6(), block7(), !1636

        block6():
        v62 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr { u64, ( { b256 } | { b256 } ) }, v63, !1635
        v65 = const u64 1
        v66 = const u64 1
        v67 = get_elem_ptr v64, ptr { b256 }, v65, v66
        v68 = load v67
        v69 = get_local ptr { b256 }, id1, !1640
        store v68 to v69, !1640
        v70 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __matched_value_1, !1621
        v71 = const u64 1
        v72 = get_elem_ptr v70, ptr { u64, ( { b256 } | { b256 } ) }, v71, !1635
        v73 = const u64 1
        v74 = const u64 1
        v75 = get_elem_ptr v72, ptr { b256 }, v73, v74
        v76 = load v75
        v77 = get_local ptr { b256 }, id2, !1641
        store v76 to v77, !1641
        v78 = get_local ptr { b256 }, id1, !1642
        v79 = load v78
        v80 = get_local ptr { b256 }, id2, !1643
        v81 = load v80
        v82 = call eq_68(v79, v81), !1646
        br block8(v82)

        block7():
        v83 = const bool false, !1647
        br block8(v83)

        block8(v84: bool):
        br block9(v84)

        block9(v85: bool):
        ret bool v85
    }

    pub fn eq_66(self !1649: { b256 }, other !1650: { b256 }) -> bool, !1653 {
        entry(self: { b256 }, other: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1654
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { b256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7, !1654
        v9 = load v8
        v10 = call eq_67(v4, v9), !1657
        ret bool v10
    }

    pub fn eq_67(self !1658: b256, other !1659: b256) -> bool, !1662 {
        entry(self: b256, other: b256):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn eq_68(self !1664: { b256 }, other !1665: { b256 }) -> bool, !1668 {
        entry(self: { b256 }, other: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1669
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { b256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7, !1669
        v9 = load v8
        v10 = call eq_67(v4, v9), !1672
        ret bool v10
    }

    pub fn _owner_69() -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !1675 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { b256, u64, b256 } owner_key

        entry():
        v0 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !1676
        v1 = const u64 0, !1677
        v2 = call new_70(v0, v1, v0), !1680
        v3 = get_local ptr { b256, u64, b256 }, owner_key, !1681
        store v2 to v3, !1681
        v4 = get_local ptr { b256, u64, b256 }, owner_key, !1682
        v5 = load v4
        v6 = call try_read_72(v5), !1685
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !1515
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !1515
        v10 = const u64 0, !1515
        store v10 to v9, !1515
        v11 = load v7
        v12 = call unwrap_or_71(v6, v11), !1688
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v12
    }

    pub fn new_70(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !1689 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn unwrap_or_71(self !1229: { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, default !1230: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !1690 {
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __matched_value_5
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } x

        entry(self: { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, default: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !1234
        store self to v0, !1234
        v1 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !1235
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1235
        v4 = load v3
        v5 = const u64 1, !1235
        v6 = call eq_10(v4, v5), !1691
        cbr v6, block0(), block1(), !1236

        block0():
        v7 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !1235
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, x, !1239
        store v11 to v12, !1239
        v13 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, x, !1240
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __matched_value_5, !1235
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1235
        v18 = load v17
        v19 = const u64 0, !1235
        v20 = call eq_10(v18, v19), !1692
        cbr v20, block2(), block3(), !1241

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !1234
        revert v21, !1234

        block4(v22: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        br block5(v22)

        block5(v23: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v23
    }

    pub fn try_read_72(self !1245: { b256, u64, b256 }) -> { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, !1693 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_76(self), !1694
        v1 = call offset_77(self), !1695
        v2 = call read_73(v0, v1), !1696
        ret { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } v2
    }

    pub fn read_73(slot !1259: b256, offset !1260: u64) -> { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, !1697 {
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __anon_0
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __anon_1
        local { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 48
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !1698
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_74(slot, offset), !1699
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !1700
        v34 = call alloc_47(v33), !1701
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !1702
        v54 = call read_75(v53), !1703
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) }):
        ret { u64, ( () | { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ) } v64
    }

    fn slot_calculator_74(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !1704 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 48
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !1705
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !1706
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !1707
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !1708
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !1709
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool true
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !1710
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !1711
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !1712
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !1713
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !1714
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !1715
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !1716
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !1717
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !1718
        v51 = call subtract_44(v47, v50), !1719
        v52 = call add_43(v44, v51), !1720
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !1721
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_75(self !1043: u64) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, !1722 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 48
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        br block5(v7)

        block5(v8: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } v8
    }

    pub fn slot_76(self !1446: { b256, u64, b256 }) -> b256, !1723 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_77(self !1451: { b256, u64, b256 }) -> u64, !1724 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_78(self !1726: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }) -> { u64, ( { b256 } | { b256 } ) }, !1729 {
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __matched_value_3
        local { u64, ( { b256 } | { b256 } ) } inner_value

        entry(self: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __matched_value_3, !1730
        store self to v0, !1730
        v1 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __matched_value_3, !1731
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1731
        v4 = load v3
        v5 = const u64 0, !1731
        v6 = call eq_10(v4, v5), !1734
        cbr v6, block0(), block1(), !1732

        block0():
        v7 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __matched_value_3, !1731
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, ( { b256 } | { b256 } ) }, inner_value, !1735
        store v11 to v12, !1735
        v13 = get_local ptr { u64, ( { b256 } | { b256 } ) }, inner_value, !1736
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !1737
        v16 = call revert_63(v15), !1740
        br block2(v16)

        block2(v17: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v17
    }

    pub fn msg_sender_79() -> { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, !1744 {
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __anon_0
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __anon_1
        local { u64, ( { b256 } | { b256 } ) } __anon_2
        local { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } __anon_3
        local { u64, ( { b256 } | { b256 } ) } __anon_4
        local { u64, ( { b256 } | { u64 } ) } __matched_value_1
        local { u64 } err
        local { b256 } owner

        entry():
        v0 = call caller_is_external_80(), !1747
        cbr v0, block0(), block7(), !1745

        block0():
        v1 = call caller_address_81(), !1750
        v2 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !1751
        store v1 to v2, !1751
        v3 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !1748
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1748
        v6 = load v5
        v7 = const u64 1, !1748
        v8 = call eq_10(v6, v7), !1754
        cbr v8, block1(), block2(), !1752

        block1():
        v9 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !1748
        v10 = const u64 1
        v11 = const u64 1
        v12 = get_elem_ptr v9, ptr { u64 }, v10, v11
        v13 = load v12
        v14 = get_local ptr { u64 }, err, !1755
        store v13 to v14, !1755
        v15 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __anon_0, !1756
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1756
        v18 = const u64 1, !1756
        store v18 to v17, !1756
        v19 = get_local ptr { u64 }, err, !1757
        v20 = load v19
        v21 = const u64 1
        v22 = const u64 1
        v23 = get_elem_ptr v15, ptr { u64 }, v21, v22, !1756
        store v20 to v23, !1756
        v24 = load v15
        br block6(v24)

        block2():
        v25 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !1748
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !1748
        v28 = load v27
        v29 = const u64 0, !1748
        v30 = call eq_10(v28, v29), !1760
        cbr v30, block3(), block4(), !1758

        block3():
        v31 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __matched_value_1, !1748
        v32 = const u64 1
        v33 = const u64 0
        v34 = get_elem_ptr v31, ptr { b256 }, v32, v33
        v35 = load v34
        v36 = get_local ptr { b256 }, owner, !1761
        store v35 to v36, !1761
        v37 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __anon_1, !1756
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr u64, v38, !1756
        v40 = const u64 0, !1756
        store v40 to v39, !1756
        v41 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_2, !1762
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !1762
        v44 = const u64 0, !1762
        store v44 to v43, !1762
        v45 = get_local ptr { b256 }, owner, !1763
        v46 = load v45
        v47 = const u64 1
        v48 = const u64 0
        v49 = get_elem_ptr v41, ptr { b256 }, v47, v48, !1762
        store v46 to v49, !1762
        v50 = load v41
        v51 = const u64 1
        v52 = const u64 0
        v53 = get_elem_ptr v37, ptr { u64, ( { b256 } | { b256 } ) }, v51, v52, !1756
        store v50 to v53, !1756
        v54 = load v37
        br block5(v54)

        block4():
        v55 = const u64 14757395258967588866, !1751
        revert v55, !1751

        block5(v56: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        br block6(v56)

        block6(v57: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        br block8(v57)

        block7():
        v58 = get_local ptr { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }, __anon_3, !1756
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr u64, v59, !1756
        v61 = const u64 0, !1756
        store v61 to v60, !1756
        v62 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_4, !1762
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr u64, v63, !1762
        v65 = const u64 1, !1762
        store v65 to v64, !1762
        v66 = call caller_contract_id_95(), !1766
        v67 = const u64 1
        v68 = const u64 1
        v69 = get_elem_ptr v62, ptr { b256 }, v67, v68, !1762
        store v66 to v69, !1762
        v70 = load v62
        v71 = const u64 1
        v72 = const u64 0
        v73 = get_elem_ptr v58, ptr { u64, ( { b256 } | { b256 } ) }, v71, v72, !1756
        store v70 to v73, !1756
        v74 = load v58
        br block8(v74)

        block8(v75: { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) }):
        ret { u64, ( { u64, ( { b256 } | { b256 } ) } | { u64 } ) } v75
    }

    pub fn caller_is_external_80() -> bool, !1769 {
        entry():
        v0 = asm(r1) -> bool r1, !1770 {
            gm     r1 i1, !1771
        }
        ret bool v0
    }

    pub fn caller_address_81() -> { u64, ( { b256 } | { u64 } ) }, !1774 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64 } __anon_2
        local { u64, ( { b256 } | { u64 } ) } __anon_3
        local { u64, ( { b256 } | { u64 } ) } __anon_4
        local { u64 } __anon_5
        local { u64, ( () | { u64 } ) } __matched_value_2
        local { u64, ( () | { u64 } ) } __matched_value_3
        local { u64, ( () | { b256 } ) } __matched_value_4
        local { b256 } address
        local mut { u64, ( () | { b256 } ) } candidate
        local u64 inputs
        local mut u64 iter
        local { u64, ( () | { b256 } ) } owner_of_input
        local { u64, ( () | { u64 } ) } type_of_input

        entry():
        v0 = call input_count_83(), !1777
        v1 = call as_u64_82(v0), !1780
        v2 = get_local ptr u64, inputs, !1781
        store v1 to v2, !1781
        v3 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        v8 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !1782
        store v7 to v8, !1782
        v9 = get_local ptr u64, iter, !1783
        v10 = const u64 0, !1784
        store v10 to v9, !1783
        br while()

        while():
        v11 = get_local ptr u64, iter, !1785
        v12 = load v11
        v13 = get_local ptr u64, inputs, !1786
        v14 = load v13
        v15 = call lt_86(v12, v14), !1789
        cbr v15, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v16 = get_local ptr u64, iter, !1790
        v17 = load v16
        v18 = call input_type_87(v17), !1793
        v19 = get_local ptr { u64, ( () | { u64 } ) }, type_of_input, !1794
        store v18 to v19, !1794
        v20 = get_local ptr { u64, ( () | { u64 } ) }, type_of_input, !1795
        v21 = load v20
        v22 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !1796
        store v21 to v22, !1796
        v23 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !1795
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !1795
        v26 = load v25
        v27 = const u64 1, !1795
        v28 = call eq_10(v26, v27), !1799
        cbr v28, block0(), block1(v28), !1797

        block0():
        v29 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !1795
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v29, ptr { u64 }, v30, v31
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !1800
        v35 = load v34
        v36 = const u64 0, !1800
        v37 = call eq_10(v35, v36), !1801
        br block1(v37), !1797

        block1(v38: bool):
        cbr v38, block2(), block3(), !1797

        block2():
        v39 = const unit (), !1802
        br block9(v39)

        block3():
        v40 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !1795
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !1795
        v43 = load v42
        v44 = const u64 1, !1795
        v45 = call eq_10(v43, v44), !1805
        cbr v45, block4(), block5(v45), !1803

        block4():
        v46 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_2, !1795
        v47 = const u64 1
        v48 = const u64 1
        v49 = get_elem_ptr v46, ptr { u64 }, v47, v48
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !1806
        v52 = load v51
        v53 = const u64 2, !1806
        v54 = call eq_10(v52, v53), !1807
        br block5(v54), !1803

        block5(v55: bool):
        cbr v55, block6(), block7(), !1803

        block6():
        v56 = const unit (), !1808
        br block8(v56)

        block7():
        v57 = get_local ptr u64, iter, !1809
        v58 = load v57
        v59 = const u64 1, !1810
        v60 = call add_38(v58, v59), !1813
        v61 = get_local ptr u64, iter, !1811
        store v60 to v61, !1811
        br while()

        block8(v62: ()):
        br block9(v62)

        block9(v63: ()):
        v64 = get_local ptr { u64, ( () | { u64 } ) }, type_of_input, !1814
        v65 = load v64
        v66 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !1815
        store v65 to v66, !1815
        v67 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !1814
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !1814
        v70 = load v69
        v71 = const u64 1, !1814
        v72 = call eq_10(v70, v71), !1818
        cbr v72, block10(), block11(v72), !1816

        block10():
        v73 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !1814
        v74 = const u64 1
        v75 = const u64 1
        v76 = get_elem_ptr v73, ptr { u64 }, v74, v75
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !1819
        v79 = load v78
        v80 = const u64 0, !1819
        v81 = call eq_10(v79, v80), !1820
        br block11(v81), !1816

        block11(v82: bool):
        cbr v82, block12(), block13(), !1816

        block12():
        v83 = get_local ptr u64, iter, !1821
        v84 = load v83
        v85 = call input_coin_owner_90(v84), !1824
        br block19(v85)

        block13():
        v86 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !1814
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !1814
        v89 = load v88
        v90 = const u64 1, !1814
        v91 = call eq_10(v89, v90), !1827
        cbr v91, block14(), block15(v91), !1825

        block14():
        v92 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !1814
        v93 = const u64 1
        v94 = const u64 1
        v95 = get_elem_ptr v92, ptr { u64 }, v93, v94
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !1828
        v98 = load v97
        v99 = const u64 2, !1828
        v100 = call eq_10(v98, v99), !1829
        br block15(v100), !1825

        block15(v101: bool):
        cbr v101, block16(), block17(), !1825

        block16():
        v102 = get_local ptr u64, iter, !1830
        v103 = load v102
        v104 = call input_message_recipient_92(v103), !1833
        br block18(v104)

        block17():
        v105 = get_local ptr u64, iter, !1834
        v106 = load v105
        v107 = const u64 1, !1835
        v108 = call add_38(v106, v107), !1838
        v109 = get_local ptr u64, iter, !1836
        store v108 to v109, !1836
        br while()

        block18(v110: { u64, ( () | { b256 } ) }):
        br block19(v110)

        block19(v111: { u64, ( () | { b256 } ) }):
        v112 = get_local ptr { u64, ( () | { b256 } ) }, owner_of_input, !1839
        store v111 to v112, !1839
        v113 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !1840
        v114 = load v113
        v115 = call is_none_93(v114), !1843
        cbr v115, block20(), block21(), !1841

        block20():
        v116 = get_local ptr { u64, ( () | { b256 } ) }, owner_of_input, !1844
        v117 = load v116
        v118 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !1845
        store v117 to v118, !1845
        v119 = get_local ptr u64, iter, !1846
        v120 = load v119
        v121 = const u64 1, !1847
        v122 = call add_38(v120, v121), !1850
        v123 = get_local ptr u64, iter, !1848
        store v122 to v123, !1848
        br while()

        block21():
        v124 = const unit ()
        br block22(v124)

        block22(v125: ()):
        v126 = get_local ptr { u64, ( () | { b256 } ) }, owner_of_input, !1851
        v127 = load v126
        v128 = call unwrap_94(v127), !1854
        v129 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !1855
        v130 = load v129
        v131 = call unwrap_94(v130), !1858
        v132 = call eq_66(v128, v131), !1861
        cbr v132, block23(), block24(), !1859

        block23():
        v133 = get_local ptr u64, iter, !1862
        v134 = load v133
        v135 = const u64 1, !1863
        v136 = call add_38(v134, v135), !1866
        v137 = get_local ptr u64, iter, !1864
        store v136 to v137, !1864
        br while()

        block24():
        v138 = const unit ()
        br block25(v138)

        block25(v139: ()):
        v140 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !1756
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr u64, v141, !1756
        v143 = const u64 1, !1756
        store v143 to v142, !1756
        v144 = get_local ptr { u64 }, __anon_2, !1867
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr u64, v145, !1867
        v147 = const u64 0, !1867
        store v147 to v146, !1867
        v148 = load v144
        v149 = const u64 1
        v150 = const u64 1
        v151 = get_elem_ptr v140, ptr { u64 }, v149, v150, !1756
        store v148 to v151, !1756
        v152 = load v140
        ret { u64, ( { b256 } | { u64 } ) } v152, !1868

        end_while():
        v153 = get_local ptr { u64, ( () | { b256 } ) }, candidate, !1869
        v154 = load v153
        v155 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !1870
        store v154 to v155, !1870
        v156 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !1869
        v157 = const u64 0
        v158 = get_elem_ptr v156, ptr u64, v157, !1869
        v159 = load v158
        v160 = const u64 1, !1869
        v161 = call eq_10(v159, v160), !1873
        cbr v161, block26(), block27(), !1871

        block26():
        v162 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !1869
        v163 = const u64 1
        v164 = const u64 1
        v165 = get_elem_ptr v162, ptr { b256 }, v163, v164
        v166 = load v165
        v167 = get_local ptr { b256 }, address, !1874
        store v166 to v167, !1874
        v168 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_3, !1756
        v169 = const u64 0
        v170 = get_elem_ptr v168, ptr u64, v169, !1756
        v171 = const u64 0, !1756
        store v171 to v170, !1756
        v172 = get_local ptr { b256 }, address, !1875
        v173 = load v172
        v174 = const u64 1
        v175 = const u64 0
        v176 = get_elem_ptr v168, ptr { b256 }, v174, v175, !1756
        store v173 to v176, !1756
        v177 = load v168
        br block31(v177)

        block27():
        v178 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !1869
        v179 = const u64 0
        v180 = get_elem_ptr v178, ptr u64, v179, !1869
        v181 = load v180
        v182 = const u64 0, !1869
        v183 = call eq_10(v181, v182), !1878
        cbr v183, block28(), block29(), !1876

        block28():
        v184 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_4, !1756
        v185 = const u64 0
        v186 = get_elem_ptr v184, ptr u64, v185, !1756
        v187 = const u64 1, !1756
        store v187 to v186, !1756
        v188 = get_local ptr { u64 }, __anon_5, !1867
        v189 = const u64 0
        v190 = get_elem_ptr v188, ptr u64, v189, !1867
        v191 = const u64 1, !1867
        store v191 to v190, !1867
        v192 = load v188
        v193 = const u64 1
        v194 = const u64 1
        v195 = get_elem_ptr v184, ptr { u64 }, v193, v194, !1756
        store v192 to v195, !1756
        v196 = load v184
        br block30(v196)

        block29():
        v197 = const u64 14757395258967588866, !1870
        revert v197, !1870

        block30(v198: { u64, ( { b256 } | { u64 } ) }):
        br block31(v198)

        block31(v199: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v199
    }

    pub fn as_u64_82(self !1879: u64) -> u64, !1882 {
        entry(self: u64):
        v0 = asm(input: self) -> u64 input, !1883 {
        }
        ret u64 v0
    }

    pub fn input_count_83() -> u64, !1887 {
        local { u64 } __matched_value_3

        entry():
        v0 = call tx_type_84(), !1890
        v1 = get_local ptr { u64 }, __matched_value_3, !1891
        store v0 to v1, !1891
        v2 = get_local ptr { u64 }, __matched_value_3, !1888
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !1888
        v5 = load v4
        v6 = const u64 0, !1888
        v7 = call eq_10(v5, v6), !1894
        cbr v7, block0(), block1(), !1892

        block0():
        v8 = const u64 0, !1895
        v9 = gtf v8, 5, !1896
        v10 = bitcast v9 to u64, !1896
        br block14(v10)

        block1():
        v11 = get_local ptr { u64 }, __matched_value_3, !1888
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !1888
        v14 = load v13
        v15 = const u64 1, !1888
        v16 = call eq_10(v14, v15), !1899
        cbr v16, block2(), block3(), !1897

        block2():
        v17 = const u64 0, !1900
        v18 = gtf v17, 259, !1901
        v19 = bitcast v18 to u64, !1901
        br block13(v19)

        block3():
        v20 = get_local ptr { u64 }, __matched_value_3, !1888
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !1888
        v23 = load v22
        v24 = const u64 3, !1888
        v25 = call eq_10(v23, v24), !1904
        cbr v25, block4(), block5(), !1902

        block4():
        v26 = const u64 0, !1905
        v27 = gtf v26, 5, !1906
        v28 = bitcast v27 to u64, !1906
        br block12(v28)

        block5():
        v29 = get_local ptr { u64 }, __matched_value_3, !1888
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30, !1888
        v32 = load v31
        v33 = const u64 4, !1888
        v34 = call eq_10(v32, v33), !1909
        cbr v34, block6(), block7(), !1907

        block6():
        v35 = const u64 0, !1910
        v36 = gtf v35, 5, !1911
        v37 = bitcast v36 to u64, !1911
        br block11(v37)

        block7():
        v38 = get_local ptr { u64 }, __matched_value_3, !1888
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !1888
        v41 = load v40
        v42 = const u64 5, !1888
        v43 = call eq_10(v41, v42), !1914
        cbr v43, block8(), block9(), !1912

        block8():
        v44 = const u64 0, !1915
        v45 = gtf v44, 5, !1916
        v46 = bitcast v45 to u64, !1916
        br block10(v46)

        block9():
        v47 = const u64 0, !1917
        v48 = call revert_63(v47), !1920
        br block10(v48)

        block10(v49: u64):
        br block11(v49)

        block11(v50: u64):
        br block12(v50)

        block12(v51: u64):
        br block13(v51)

        block13(v52: u64):
        br block14(v52)

        block14(v53: u64):
        ret u64 v53
    }

    pub fn tx_type_84() -> { u64 }, !1924 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { u64 } __anon_4
        local u8 __matched_value_2

        entry():
        v0 = const u64 0, !1925
        v1 = gtf v0, 1, !1926
        v2 = bitcast v1 to u8, !1926
        v3 = get_local ptr u8, __matched_value_2, !1927
        store v2 to v3, !1927
        v4 = get_local ptr u8, __matched_value_2, !1926
        v5 = load v4
        v6 = const u8 0, !1928
        v7 = call eq_85(v5, v6), !1931
        cbr v7, block0(), block1(), !1929

        block0():
        v8 = get_local ptr { u64 }, __anon_0, !1932
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !1932
        v11 = const u64 0, !1932
        store v11 to v10, !1932
        v12 = load v8
        br block14(v12)

        block1():
        v13 = get_local ptr u8, __matched_value_2, !1926
        v14 = load v13
        v15 = const u8 1, !1933
        v16 = call eq_85(v14, v15), !1936
        cbr v16, block2(), block3(), !1934

        block2():
        v17 = get_local ptr { u64 }, __anon_1, !1932
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1932
        v20 = const u64 1, !1932
        store v20 to v19, !1932
        v21 = load v17
        br block13(v21)

        block3():
        v22 = get_local ptr u8, __matched_value_2, !1926
        v23 = load v22
        v24 = const u8 3, !1937
        v25 = call eq_85(v23, v24), !1940
        cbr v25, block4(), block5(), !1938

        block4():
        v26 = get_local ptr { u64 }, __anon_2, !1932
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !1932
        v29 = const u64 3, !1932
        store v29 to v28, !1932
        v30 = load v26
        br block12(v30)

        block5():
        v31 = get_local ptr u8, __matched_value_2, !1926
        v32 = load v31
        v33 = const u8 4, !1941
        v34 = call eq_85(v32, v33), !1944
        cbr v34, block6(), block7(), !1942

        block6():
        v35 = get_local ptr { u64 }, __anon_3, !1932
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !1932
        v38 = const u64 4, !1932
        store v38 to v37, !1932
        v39 = load v35
        br block11(v39)

        block7():
        v40 = get_local ptr u8, __matched_value_2, !1926
        v41 = load v40
        v42 = const u8 5, !1945
        v43 = call eq_85(v41, v42), !1948
        cbr v43, block8(), block9(), !1946

        block8():
        v44 = get_local ptr { u64 }, __anon_4, !1932
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45, !1932
        v47 = const u64 5, !1932
        store v47 to v46, !1932
        v48 = load v44
        br block10(v48)

        block9():
        v49 = const u64 0, !1949
        v50 = call revert_63(v49), !1952
        br block10(v50)

        block10(v51: { u64 }):
        br block11(v51)

        block11(v52: { u64 }):
        br block12(v52)

        block12(v53: { u64 }):
        br block13(v53)

        block13(v54: { u64 }):
        br block14(v54)

        block14(v55: { u64 }):
        ret { u64 } v55
    }

    pub fn eq_85(self !1953: u8, other !1954: u8) -> bool, !1957 {
        entry(self: u8, other: u8):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn lt_86(self !1958: u64, other !1959: u64) -> bool, !1962 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn input_type_87(index !1963: u64) -> { u64, ( () | { u64 } ) }, !1966 {
        local { u64, ( () | { u64 } ) } __anon_0
        local { u64, ( () | { u64 } ) } __anon_1
        local { u64 } __anon_2
        local { u64, ( () | { u64 } ) } __anon_3
        local { u64 } __anon_4
        local { u64, ( () | { u64 } ) } __anon_5
        local { u64 } __anon_6
        local { u64, ( () | { u64 } ) } __anon_7
        local u8 __matched_value_2

        entry(index: u64):
        v0 = call input_count_83(), !1969
        v1 = call as_u64_82(v0), !1972
        v2 = call ge_88(index, v1), !1975
        cbr v2, block0(), block1(), !1973

        block0():
        v3 = get_local ptr { u64, ( () | { u64 } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { u64 } ) } v7, !1976

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = gtf index, 512, !1977
        v11 = bitcast v10 to u8, !1977
        v12 = get_local ptr u8, __matched_value_2, !1978
        store v11 to v12, !1978
        v13 = get_local ptr u8, __matched_value_2, !1977
        v14 = load v13
        v15 = const u8 0, !1979
        v16 = call eq_85(v14, v15), !1982
        cbr v16, block3(), block4(), !1980

        block3():
        v17 = get_local ptr { u64, ( () | { u64 } ) }, __anon_1, !1268
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1268
        v20 = const u64 1, !1268
        store v20 to v19, !1268
        v21 = get_local ptr { u64 }, __anon_2, !1983
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !1983
        v24 = const u64 0, !1983
        store v24 to v23, !1983
        v25 = load v21
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v17, ptr { u64 }, v26, v27, !1268
        store v25 to v28, !1268
        v29 = load v17
        br block11(v29)

        block4():
        v30 = get_local ptr u8, __matched_value_2, !1977
        v31 = load v30
        v32 = const u8 1, !1984
        v33 = call eq_85(v31, v32), !1987
        cbr v33, block5(), block6(), !1985

        block5():
        v34 = get_local ptr { u64, ( () | { u64 } ) }, __anon_3, !1268
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !1268
        v37 = const u64 1, !1268
        store v37 to v36, !1268
        v38 = get_local ptr { u64 }, __anon_4, !1983
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !1983
        v41 = const u64 1, !1983
        store v41 to v40, !1983
        v42 = load v38
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v34, ptr { u64 }, v43, v44, !1268
        store v42 to v45, !1268
        v46 = load v34
        br block10(v46)

        block6():
        v47 = get_local ptr u8, __matched_value_2, !1977
        v48 = load v47
        v49 = const u8 2, !1988
        v50 = call eq_85(v48, v49), !1991
        cbr v50, block7(), block8(), !1989

        block7():
        v51 = get_local ptr { u64, ( () | { u64 } ) }, __anon_5, !1268
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !1268
        v54 = const u64 1, !1268
        store v54 to v53, !1268
        v55 = get_local ptr { u64 }, __anon_6, !1983
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !1983
        v58 = const u64 2, !1983
        store v58 to v57, !1983
        v59 = load v55
        v60 = const u64 1
        v61 = const u64 1
        v62 = get_elem_ptr v51, ptr { u64 }, v60, v61, !1268
        store v59 to v62, !1268
        v63 = load v51
        br block9(v63)

        block8():
        v64 = get_local ptr { u64, ( () | { u64 } ) }, __anon_7, !1268
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !1268
        v67 = const u64 0, !1268
        store v67 to v66, !1268
        v68 = load v64
        br block9(v68)

        block9(v69: { u64, ( () | { u64 } ) }):
        br block10(v69)

        block10(v70: { u64, ( () | { u64 } ) }):
        br block11(v70)

        block11(v71: { u64, ( () | { u64 } ) }):
        ret { u64, ( () | { u64 } ) } v71
    }

    pub fn ge_88(self !1992: u64, other !1993: u64) -> bool, !1996 {
        entry(self: u64, other: u64):
        v0 = call gt_89(self, other), !1999
        cbr v0, block1(v0), block0(), !2000

        block0():
        v1 = call eq_10(self, other), !2003
        br block1(v1), !2000

        block1(v2: bool):
        ret bool v2
    }

    pub fn gt_89(self !2004: u64, other !2005: u64) -> bool, !2008 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn input_coin_owner_90(index !2009: u64) -> { u64, ( () | { b256 } ) }, !2012 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( () | { b256 } ) } __anon_1
        local { u64, ( () | { u64 } ) } __matched_value_6

        entry(index: u64):
        v0 = call input_type_87(index), !2015
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_6, !2016
        store v0 to v1, !2016
        v2 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_6, !2013
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2013
        v5 = load v4
        v6 = const u64 1, !2013
        v7 = call eq_10(v5, v6), !2019
        cbr v7, block0(), block1(v7), !2017

        block0():
        v8 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_6, !2013
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64 }, v9, v10
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !2020
        v14 = load v13
        v15 = const u64 0, !2020
        v16 = call eq_10(v14, v15), !2021
        br block1(v16), !2017

        block1(v17: bool):
        cbr v17, block2(), block3(), !2017

        block2():
        v18 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !1268
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !1268
        v21 = const u64 1, !1268
        store v21 to v20, !1268
        v22 = gtf index, 515, !2022
        v23 = int_to_ptr v22 to ptr b256, !2022
        v24 = load v23
        v25 = call from_91(v24), !2025
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v18, ptr { b256 }, v26, v27, !1268
        store v25 to v28, !1268
        v29 = load v18
        br block4(v29)

        block3():
        v30 = get_local ptr { u64, ( () | { b256 } ) }, __anon_1, !1268
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !1268
        v33 = const u64 0, !1268
        store v33 to v32, !1268
        v34 = load v30
        br block4(v34)

        block4(v35: { u64, ( () | { b256 } ) }):
        ret { u64, ( () | { b256 } ) } v35
    }

    pub fn from_91(bits !2026: b256) -> { b256 }, !2029 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !2030
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !2030
        v3 = load v0
        ret { b256 } v3
    }

    pub fn input_message_recipient_92(index !2031: u64) -> { u64, ( () | { b256 } ) }, !2034 {
        local { u64, ( () | { b256 } ) } __anon_0
        local { u64, ( () | { b256 } ) } __anon_1
        local { u64, ( () | { u64 } ) } __matched_value_16

        entry(index: u64):
        v0 = call input_type_87(index), !2037
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_16, !2038
        store v0 to v1, !2038
        v2 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_16, !2035
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2035
        v5 = load v4
        v6 = const u64 1, !2035
        v7 = call eq_10(v5, v6), !2041
        cbr v7, block0(), block1(v7), !2039

        block0():
        v8 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_16, !2035
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64 }, v9, v10
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !2042
        v14 = load v13
        v15 = const u64 2, !2042
        v16 = call eq_10(v14, v15), !2043
        br block1(v16), !2039

        block1(v17: bool):
        cbr v17, block2(), block3(), !2039

        block2():
        v18 = get_local ptr { u64, ( () | { b256 } ) }, __anon_0, !1268
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !1268
        v21 = const u64 1, !1268
        store v21 to v20, !1268
        v22 = gtf index, 577, !2044
        v23 = int_to_ptr v22 to ptr b256, !2044
        v24 = load v23
        v25 = call from_91(v24), !2047
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v18, ptr { b256 }, v26, v27, !1268
        store v25 to v28, !1268
        v29 = load v18
        br block4(v29)

        block3():
        v30 = get_local ptr { u64, ( () | { b256 } ) }, __anon_1, !1268
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !1268
        v33 = const u64 0, !1268
        store v33 to v32, !1268
        v34 = load v30
        br block4(v34)

        block4(v35: { u64, ( () | { b256 } ) }):
        ret { u64, ( () | { b256 } ) } v35
    }

    pub fn is_none_93(self !2048: { u64, ( () | { b256 } ) }) -> bool, !2051 {
        local { u64, ( () | { b256 } ) } __matched_value_3

        entry(self: { u64, ( () | { b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_3, !2052
        store self to v0, !2052
        v1 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_3, !2053
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2053
        v4 = load v3
        v5 = const u64 1, !2053
        v6 = call eq_10(v4, v5), !2056
        cbr v6, block0(), block1(), !2054

        block0():
        v7 = const bool false, !2057
        br block2(v7)

        block1():
        v8 = const bool true, !2058
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn unwrap_94(self !2059: { u64, ( () | { b256 } ) }) -> { b256 }, !2062 {
        local { u64, ( () | { b256 } ) } __matched_value_4
        local { b256 } inner_value

        entry(self: { u64, ( () | { b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !2067
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { b256 } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { b256 }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !2073
        br block2(v16)

        block2(v17: { b256 }):
        ret { b256 } v17
    }

    pub fn caller_contract_id_95() -> { b256 }, !2076 {
        entry():
        v0 = asm(r1) -> b256 r1, !2077 {
            gm     r1 i2, !2078
        }
        v1 = call from_96(v0), !2081
        ret { b256 } v1
    }

    pub fn from_96(bits !2082: b256) -> { b256 }, !2085 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !2086
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !2086
        v3 = load v0
        ret { b256 } v3
    }

    pub fn require_not_paused_97() -> (), !2089 {
        local { u64 } __anon_0
        local { b256, u64, b256 } paused_key

        entry():
        v0 = const b256 0xd987cda398e9af257cbcf8a8995c5dccb19833cadc727ba56b0fec60ccf8944c, !1206
        v1 = const u64 0, !2090
        v2 = call new_32(v0, v1, v0), !2093
        v3 = get_local ptr { b256, u64, b256 }, paused_key, !2094
        store v2 to v3, !2094
        v4 = get_local ptr { b256, u64, b256 }, paused_key, !2095
        v5 = load v4
        v6 = call try_read_34(v5), !2098
        v7 = const bool false, !2099
        v8 = call unwrap_or_33(v6, v7), !2102
        v9 = call not_27(v8), !2105
        v10 = get_local ptr { u64 }, __anon_0, !2107
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !2107
        v13 = const u64 0, !2107
        store v13 to v12, !2107
        v14 = load v10
        v15 = call require_98(v9, v14), !2110
        v16 = const unit ()
        ret () v16
    }

    pub fn require_98(condition !1530: bool, value !1531: { u64 }) -> (), !2111 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_27(condition), !2112
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_99(value), !2113
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !2114
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_99(value !1547: { u64 }) -> (), !2115 {
        entry(value: { u64 }):
        v0 = call encode_100(value), !1551
        v1 = const u64 10032608944051208538
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_100(item !1456: { u64 }) -> slice, !2116 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !2117
        v1 = call abi_encode_101(item, v0), !2118
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !2119
        ret slice v5
    }

    pub fn abi_encode_101(self !2120: { u64 }, buffer !2121: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !2124 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !2125
        store self to v0, !2125
        v1 = get_local ptr { u64 }, __matched_value_1, !2126
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2126
        v4 = load v3
        v5 = const u64 0, !2126
        v6 = call eq_10(v4, v5), !2129
        cbr v6, block0(), block1(), !2127

        block0():
        v7 = const u64 0, !2130
        v8 = call abi_encode_62(v7, buffer), !2133
        br block5(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_1, !2126
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2126
        v12 = load v11
        v13 = const u64 1, !2126
        v14 = call eq_10(v12, v13), !2136
        cbr v14, block2(), block3(), !2134

        block2():
        v15 = const u64 1, !2137
        v16 = call abi_encode_62(v15, buffer), !2140
        br block4(v16)

        block3():
        v17 = const u64 14757395258967588866, !2125
        revert v17, !2125

        block4(v18: { { u64, u64, u64 } }):
        br block5(v18)

        block5(v19: { { u64, u64, u64 } }):
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !2141
        store v19 to v20, !2141
        v21 = get_local ptr { { u64, u64, u64 } }, buffer_, !2142
        v22 = load v21
        ret { { u64, u64, u64 } } v22
    }

    pub fn _pause_102() -> (), !2145 {
        local { b256, u64, b256 } paused_key

        entry():
        v0 = const b256 0xd987cda398e9af257cbcf8a8995c5dccb19833cadc727ba56b0fec60ccf8944c, !1206
        v1 = const u64 0, !2146
        v2 = call new_32(v0, v1, v0), !2149
        v3 = get_local ptr { b256, u64, b256 }, paused_key, !2150
        store v2 to v3, !2150
        v4 = get_local ptr { b256, u64, b256 }, paused_key, !2151
        v5 = load v4
        v6 = const bool true, !2152
        v7 = call write_103(v5, v6), !2155
        v8 = const unit ()
        ret () v8
    }

    pub fn write_103(self !2156: { b256, u64, b256 }, value !2157: bool) -> (), !2160 {
        entry(self: { b256, u64, b256 }, value: bool):
        v0 = call slot_49(self), !2163
        v1 = call offset_50(self), !2166
        v2 = call write_104(v0, v1, value), !2169
        v3 = const unit ()
        ret () v3
    }

    pub fn write_104(slot !2170: b256, offset !2171: u64, value !2172: bool) -> (), !2175 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: bool):
        v0 = const u64 1
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !2179
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_36(slot, offset), !2183
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !2189
        v30 = call alloc_47(v29), !2192
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !2203
        v47 = call write_105(v46, value), !2206
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_105(self !2212: u64, val !2213: bool) -> (), !2216 {
        entry(self: u64, val: bool):
        v0 = const bool false
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 1
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 1
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn unpause_106() -> (), !2228 {
        entry():
        v0 = call only_owner_57(), !2231
        v1 = call require_paused_107(), !2234
        v2 = call _unpause_108(), !2237
        v3 = const unit ()
        ret () v3
    }

    pub fn require_paused_107() -> (), !2240 {
        local { u64 } __anon_0
        local { b256, u64, b256 } paused_key

        entry():
        v0 = const b256 0xd987cda398e9af257cbcf8a8995c5dccb19833cadc727ba56b0fec60ccf8944c, !1206
        v1 = const u64 0, !2241
        v2 = call new_32(v0, v1, v0), !2244
        v3 = get_local ptr { b256, u64, b256 }, paused_key, !2245
        store v2 to v3, !2245
        v4 = get_local ptr { b256, u64, b256 }, paused_key, !2246
        v5 = load v4
        v6 = call try_read_34(v5), !2249
        v7 = const bool false, !2250
        v8 = call unwrap_or_33(v6, v7), !2253
        v9 = get_local ptr { u64 }, __anon_0, !2107
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2107
        v12 = const u64 1, !2107
        store v12 to v11, !2107
        v13 = load v9
        v14 = call require_98(v8, v13), !2256
        v15 = const unit ()
        ret () v15
    }

    pub fn _unpause_108() -> (), !2259 {
        local { b256, u64, b256 } paused_key

        entry():
        v0 = const b256 0xd987cda398e9af257cbcf8a8995c5dccb19833cadc727ba56b0fec60ccf8944c, !1206
        v1 = const u64 0, !2260
        v2 = call new_32(v0, v1, v0), !2263
        v3 = get_local ptr { b256, u64, b256 }, paused_key, !2264
        store v2 to v3, !2264
        v4 = get_local ptr { b256, u64, b256 }, paused_key, !2265
        v5 = load v4
        v6 = const bool false, !2266
        v7 = call write_103(v5, v6), !2269
        v8 = const unit ()
        ret () v8
    }

    pub fn decode_109(self !43: ptr { u64 }) -> { b256 }, !2270 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_110(self), !2271
        ret { b256 } v0
    }

    pub fn abi_decode_110(buffer !2272: ptr { u64 }) -> { b256 }, !2275 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_4(buffer), !2278
        v1 = get_local ptr { b256 }, __anon_0, !2279
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2279
        store v0 to v3, !2279
        v4 = load v1
        ret { b256 } v4
    }

    pub fn cancel_order_111(order_id !2280: b256) -> (), !2283 {
        entry(order_id: b256):
        v0 = call reentrancy_guard_112(), !2286
        v1 = call cancel_order_internal_123(order_id), !2289
        v2 = const unit ()
        ret () v2
    }

    pub fn reentrancy_guard_112() -> (), !2293 {
        local { u64 } __anon_0

        entry():
        v0 = call is_reentrant_117(), !2296
        v1 = call not_27(v0), !2299
        v2 = get_local ptr { u64 }, __anon_0, !2301
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2301
        v5 = const u64 0, !2301
        store v5 to v4, !2301
        v6 = load v2
        v7 = call require_113(v1, v6), !2304
        v8 = const unit ()
        ret () v8
    }

    pub fn require_113(condition !1530: bool, value !1531: { u64 }) -> (), !2305 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_27(condition), !2306
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_114(value), !2307
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !2308
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_114(value !1547: { u64 }) -> (), !2309 {
        entry(value: { u64 }):
        v0 = call encode_115(value), !1551
        v1 = const u64 5557842539076482339
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_115(item !1456: { u64 }) -> slice, !2310 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !2311
        v1 = call abi_encode_116(item, v0), !2312
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !2313
        ret slice v5
    }

    pub fn abi_encode_116(self !2314: { u64 }, buffer !2315: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !2318 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !2319
        store self to v0, !2319
        v1 = get_local ptr { u64 }, __matched_value_1, !2320
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2320
        v4 = load v3
        v5 = const u64 0, !2320
        v6 = call eq_10(v4, v5), !2323
        cbr v6, block0(), block1(), !2321

        block0():
        v7 = const u64 0, !2324
        v8 = call abi_encode_62(v7, buffer), !2327
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !2319
        revert v9, !2319

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !2328
        store v10 to v11, !2328
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !2329
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn is_reentrant_117() -> bool, !2332 {
        local mut u64 call_frame_pointer
        local { b256 } previous_contract_id
        local { b256 } this_id

        entry():
        v0 = call this_118(), !2335
        v1 = get_local ptr { b256 }, this_id, !2336
        store v0 to v1, !2336
        v2 = call frame_ptr_119(), !2339
        v3 = get_local ptr u64, call_frame_pointer, !2340
        store v2 to v3, !2340
        v4 = get_local ptr u64, call_frame_pointer, !2341
        v5 = load v4
        v6 = call is_null_120(v5), !2344
        v7 = call not_27(v6), !2347
        cbr v7, block0(), block1(), !2345

        block0():
        v8 = get_local ptr u64, call_frame_pointer, !2348
        v9 = load v8
        v10 = call get_previous_frame_pointer_121(v9), !2351
        v11 = get_local ptr u64, call_frame_pointer, !2352
        store v10 to v11, !2352
        v12 = const unit ()
        br block2(v12)

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        br while()

        while():
        v15 = get_local ptr u64, call_frame_pointer, !2353
        v16 = load v15
        v17 = call is_null_120(v16), !2356
        v18 = call not_27(v17), !2359
        cbr v18, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v19 = get_local ptr u64, call_frame_pointer, !2360
        v20 = load v19
        v21 = call get_contract_id_from_call_frame_122(v20), !2363
        v22 = get_local ptr { b256 }, previous_contract_id, !2364
        store v21 to v22, !2364
        v23 = get_local ptr { b256 }, previous_contract_id, !2365
        v24 = load v23
        v25 = get_local ptr { b256 }, this_id, !2366
        v26 = load v25
        v27 = call eq_68(v24, v26), !2369
        cbr v27, block3(), block4(), !2367

        block3():
        v28 = const bool true, !2370
        ret bool v28, !2371

        block4():
        v29 = const unit ()
        br block5(v29)

        block5(v30: ()):
        v31 = get_local ptr u64, call_frame_pointer, !2372
        v32 = load v31
        v33 = call get_previous_frame_pointer_121(v32), !2375
        v34 = get_local ptr u64, call_frame_pointer, !2376
        store v33 to v34, !2376
        br while()

        end_while():
        v35 = const bool false, !2377
        ret bool v35
    }

    pub fn this_118() -> { b256 }, !2380 {
        entry():
        v0 = asm() -> b256 fp, !2381 {
        }
        v1 = call from_96(v0), !2384
        ret { b256 } v1
    }

    pub fn frame_ptr_119() -> u64, !2388 {
        entry():
        v0 = asm() -> u64 fp, !2389 {
        }
        ret u64 v0
    }

    pub fn is_null_120(self !2390: u64) -> bool, !2393 {
        local u64 null_ptr

        entry(self: u64):
        v0 = asm() -> u64 zero, !2394 {
        }
        v1 = get_local ptr u64, null_ptr, !2395
        store v0 to v1, !2395
        v2 = get_local ptr u64, null_ptr, !2396
        v3 = load v2
        v4 = cmp eq self v3
        ret bool v4
    }

    pub fn get_previous_frame_pointer_121(frame_pointer !2398: u64) -> u64, !2401 {
        local u64 offset

        entry(frame_pointer: u64):
        v0 = const u64 8, !2402
        v1 = const u64 6, !2403
        v2 = call add_38(v0, v1), !2406
        v3 = call add_16(frame_pointer, v2), !2409
        v4 = get_local ptr u64, offset, !2410
        store v3 to v4, !2410
        v5 = get_local ptr u64, offset, !2411
        v6 = load v5
        v7 = asm(res, ptr: v6) -> u64 res, !2412 {
            lw     res ptr i0, !2413
        }
        ret u64 v7
    }

    pub fn get_contract_id_from_call_frame_122(frame_pointer !2414: u64) -> { b256 }, !2417 {
        entry(frame_pointer: u64):
        v0 = asm(res, ptr: frame_pointer) -> b256 ptr, !2418 {
        }
        v1 = call from_96(v0), !2421
        ret { b256 } v1
    }

    fn cancel_order_internal_123(order_id !2422: b256) -> (), !2425 {
        local { u64 } __anon_0
        local { u64, ( () | bool ) } __matched_value_11
        local bool is_market_order
        local bool market_order_expired
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order

        entry(order_id: b256):
        v0 = call read_order_124(order_id), !2428
        v1 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !2429
        store v0 to v1, !2429
        v2 = call market_order_166(order_id), !2432
        v3 = get_local ptr { u64, ( () | bool ) }, __matched_value_11, !2433
        store v2 to v3, !2433
        v4 = get_local ptr { u64, ( () | bool ) }, __matched_value_11, !2430
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr u64, v5, !2430
        v7 = load v6
        v8 = const u64 1, !2430
        v9 = call eq_10(v7, v8), !2436
        cbr v9, block0(), block3(), !2434

        block0():
        v10 = get_local ptr { u64, ( () | bool ) }, __matched_value_11, !2430
        v11 = const u64 1
        v12 = const u64 1
        v13 = get_elem_ptr v10, ptr bool, v11, v12
        v14 = load v13
        v15 = get_local ptr bool, is_market_order, !2437
        store v14 to v15, !2437
        v16 = get_local ptr bool, is_market_order, !2438
        v17 = load v16
        cbr v17, block1(), block2(v17), !2439

        block1():
        v18 = call height_172(), !2442
        v19 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !2443
        v20 = const u64 5
        v21 = get_elem_ptr v19, ptr u64, v20, !2445
        v22 = load v21
        v23 = const u64 10, !2446
        v24 = call add_173(v22, v23), !2449
        v25 = call ge_169(v18, v24), !2452
        br block2(v25), !2439

        block2(v26: bool):
        br block4(v26)

        block3():
        v27 = const bool false, !2453
        br block4(v27)

        block4(v28: bool):
        v29 = get_local ptr bool, market_order_expired, !2454
        store v28 to v29, !2454
        v30 = get_local ptr bool, market_order_expired, !2455
        v31 = load v30
        cbr v31, block6(v31), block5(), !2456

        block5():
        v32 = call msg_sender_79(), !2459
        v33 = call unwrap_78(v32), !2462
        v34 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !2463
        v35 = const u64 3
        v36 = get_elem_ptr v34, ptr { u64, ( { b256 } | { b256 } ) }, v35, !2464
        v37 = load v36
        v38 = call eq_65(v33, v37), !2467
        br block6(v38), !2456

        block6(v39: bool):
        v40 = get_local ptr { u64 }, __anon_0, !2469
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !2469
        v43 = const u64 0, !2469
        store v43 to v42, !2469
        v44 = load v40
        v45 = call require_176(v39, v44), !2472
        v46 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !2473
        v47 = load v46
        v48 = call cancel_read_order_180(order_id, v47), !2476
        v49 = const unit ()
        ret () v49
    }

    fn read_order_124(order_id !2477: b256) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, !2480 {
        local { b256, u64, b256 } __anon_0
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_1
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order

        entry(order_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !2481
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !2481
        store v3 to v2, !2481
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !2481
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !2481
        store v9 to v8, !2481
        v10 = load v0
        v11 = call get_131(v10, order_id), !2484
        v12 = call try_read_125(v11), !2487
        v13 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order, !2488
        store v12 to v13, !2488
        v14 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order, !2489
        v15 = load v14
        v16 = call is_some_164(v15), !2492
        v17 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_1, !2493
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2493
        v20 = const u64 1, !2493
        store v20 to v19, !2493
        v21 = const u64 1
        v22 = const u64 1
        v23 = get_elem_ptr v17, ptr b256, v21, v22, !2493
        store order_id to v23, !2493
        v24 = load v17
        v25 = call require_158(v16, v24), !2496
        v26 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order, !2497
        v27 = load v26
        v28 = call unwrap_165(v27), !2500
        ret { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } v28
    }

    pub fn try_read_125(self !1245: { b256, u64, b256 }) -> { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, !2501 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_129(self), !2502
        v1 = call offset_130(self), !2503
        v2 = call read_126(v0, v1), !2504
        ret { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } v2
    }

    pub fn read_126(slot !1259: b256, offset !1260: u64) -> { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, !2505 {
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __anon_0
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __anon_1
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 112
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !2506
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_127(slot, offset), !2507
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !2508
        v34 = call alloc_47(v33), !2509
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !2510
        v54 = call read_128(v53), !2511
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }):
        ret { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } v64
    }

    fn slot_calculator_127(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !2512 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 112
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !2513
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !2514
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !2515
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !2516
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !2517
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool true
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !2518
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !2519
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !2520
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !2521
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !2522
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !2523
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !2524
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !2525
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !2526
        v51 = call subtract_44(v47, v50), !2527
        v52 = call add_43(v44, v51), !2528
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !2529
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_128(self !1043: u64) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, !2530 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 112
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        br block5(v7)

        block5(v8: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        ret { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } v8
    }

    pub fn slot_129(self !1446: { b256, u64, b256 }) -> b256, !2531 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_130(self !1451: { b256, u64, b256 }) -> u64, !2532 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn get_131(self !2534: { b256, u64, b256 }, key !2535: b256) -> { b256, u64, b256 }, !2538 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256):
        v0 = call field_id_156(self), !2541
        v1 = get_local ptr { b256, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_132(v6), !2545
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_157(v10, v13, v12), !2552
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_132(s !2554: { b256, b256 }) -> b256, !2557 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { b256, b256 }):
        v0 = call new_133(), !2560
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2561
        store v0 to v1, !2561
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2562
        v3 = call hash_137(s, v2), !2565
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2566
        v5 = load v4
        v6 = call sha256_154(v5), !2569
        ret b256 v6
    }

    pub fn new_133() -> { { { u64, u64 }, u64 } }, !2572 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_134(), !2575
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !2576
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !2576
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_134() -> { { u64, u64 }, u64 }, !2580 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_135(), !2583
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !2584
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !2584
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !2585
        store v6 to v5, !2584
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_135() -> { u64, u64 }, !2588 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !2589
        v1 = call alloc_bytes_136(v0), !2592
        v2 = get_local ptr { u64, u64 }, __anon_0, !2593
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !2593
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !2594
        store v7 to v6, !2593
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_136(count !2595: u64) -> u64, !2598 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !2599 {
            aloc   size, !2600
        }
        ret u64 v0
    }

    pub fn hash_137(self !2601: { b256, b256 }, state !2602: ptr { { { u64, u64 }, u64 } }) -> (), !2605 {
        entry(self: { b256, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2606
        v4 = load v3
        v5 = call hash_138(v4, state), !2609
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { b256, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !2610
        v10 = load v9
        v11 = call hash_138(v10, state), !2613
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_138(self !2614: b256, state !2615: ptr { { { u64, u64 }, u64 } }) -> (), !2618 {
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u64 ptr
        local u64 word_1
        local u64 word_2
        local u64 word_3
        local u64 word_4

        entry(self: b256, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 32, !2619
        v1 = call alloc_bytes_136(v0), !2622
        v2 = get_local ptr u64, ptr, !2623
        store v1 to v2, !2623
        v3 = asm(r1: self) -> { u64, u64, u64, u64 } r1, !2624 {
        }
        v4 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !2625
        store v3 to v4, !2625
        v5 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !2625
        v6 = load v5
        v7 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !2625
        store v6 to v7, !2625
        v8 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !2625
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !2625
        v11 = load v10
        v12 = get_local ptr u64, word_1, !2625
        store v11 to v12, !2625
        v13 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !2625
        v14 = const u64 1
        v15 = get_elem_ptr v13, ptr u64, v14, !2625
        v16 = load v15
        v17 = get_local ptr u64, word_2, !2625
        store v16 to v17, !2625
        v18 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !2625
        v19 = const u64 2
        v20 = get_elem_ptr v18, ptr u64, v19, !2625
        v21 = load v20
        v22 = get_local ptr u64, word_3, !2625
        store v21 to v22, !2625
        v23 = get_local ptr { u64, u64, u64, u64 }, __tuple_1_, !2625
        v24 = const u64 3
        v25 = get_elem_ptr v23, ptr u64, v24, !2625
        v26 = load v25
        v27 = get_local ptr u64, word_4, !2625
        store v26 to v27, !2625
        v28 = get_local ptr u64, ptr, !2626
        v29 = load v28
        v30 = get_local ptr u64, word_1, !2627
        v31 = load v30
        v32 = get_local ptr u64, word_2, !2628
        v33 = load v32
        v34 = get_local ptr u64, word_3, !2629
        v35 = load v34
        v36 = get_local ptr u64, word_4, !2630
        v37 = load v36
        v38 = asm(ptr: v29, val_1: v31, val_2: v33, val_3: v35, val_4: v37) -> (), !2631 {
            sw     ptr val_1 i0, !2632
            sw     ptr val_2 i1, !2633
            sw     ptr val_3 i2, !2634
            sw     ptr val_4 i3, !2635
        }
        v39 = get_local ptr u64, ptr, !2636
        v40 = load v39
        v41 = const u64 32, !2637
        v42 = call from_parts_143(v40, v41), !2640
        v43 = call from_153(v42), !2643
        v44 = call write_139(state, v43), !2646
        v45 = const unit ()
        ret () v45
    }

    pub fn write_139(self !2647: ptr { { { u64, u64 }, u64 } }, bytes !2648: { { u64, u64 }, u64 }) -> (), !2651 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !2652
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_140(v1, v3), !2655
        v5 = const unit ()
        ret () v5
    }

    pub fn append_140(self !2656: ptr { { u64, u64 }, u64 }, other !2657: ptr { { u64, u64 }, u64 }) -> (), !2660 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_141(v0), !2663
        v2 = get_local ptr u64, other_len, !2664
        store v1 to v2, !2664
        v3 = get_local ptr u64, other_len, !2665
        v4 = load v3
        v5 = const u64 0, !2666
        v6 = call eq_10(v4, v5), !2669
        cbr v6, block0(), block1(), !2667

        block0():
        v7 = const unit (), !2670
        ret () v7, !2670

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !2671
        v12 = load v11
        v13 = const u64 0, !2672
        v14 = call eq_10(v12, v13), !2675
        cbr v14, block3(), block4(), !2673

        block3():
        v15 = load other
        store v15 to self, !2676
        v16 = const unit (), !2677
        ret () v16, !2677

        block4():
        v17 = const unit ()
        br block5(v17)

        block5(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr self, ptr u64, v19, !2671
        v21 = load v20
        v22 = get_local ptr u64, other_len, !2678
        v23 = load v22
        v24 = call add_38(v21, v23), !2681
        v25 = get_local ptr u64, both_len, !2682
        store v24 to v25, !2682
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !2671
        v28 = load v27
        v29 = get_local ptr u64, other_start, !2683
        store v28 to v29, !2683
        v30 = const u64 0
        v31 = get_elem_ptr self, ptr { u64, u64 }, v30, !2684
        v32 = load v31
        v33 = call capacity_142(v32), !2687
        v34 = get_local ptr u64, both_len, !2688
        v35 = load v34
        v36 = call lt_86(v33, v35), !2691
        cbr v36, block6(), block7(), !2689

        block6():
        v37 = const u64 0
        v38 = get_elem_ptr self, ptr { u64, u64 }, v37, !2684
        v39 = load v38
        v40 = call ptr_147(v39), !2694
        v41 = const u64 0
        v42 = get_elem_ptr self, ptr { u64, u64 }, v41, !2684
        v43 = load v42
        v44 = call capacity_142(v43), !2697
        v45 = get_local ptr u64, both_len, !2698
        v46 = load v45
        v47 = call realloc_bytes_145(v40, v44, v46), !2701
        v48 = get_local ptr u64, both_len, !2702
        v49 = load v48
        v50 = call from_parts_143(v47, v49), !2705
        v51 = get_local ptr slice, new_slice, !2706
        store v50 to v51, !2706
        v52 = get_local ptr slice, new_slice, !2707
        v53 = load v52
        v54 = call from_148(v53), !2710
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !2711
        store v54 to v56, !2711
        v57 = const unit ()
        br block8(v57)

        block7():
        v58 = const unit ()
        br block8(v58)

        block8(v59: ()):
        v60 = const u64 0
        v61 = get_elem_ptr self, ptr { u64, u64 }, v60, !2684
        v62 = load v61
        v63 = call ptr_147(v62), !2714
        v64 = get_local ptr u64, other_start, !2715
        v65 = load v64
        v66 = call add_uint_offset_151(v63, v65), !2718
        v67 = get_local ptr u64, new_ptr, !2719
        store v66 to v67, !2719
        v68 = load other
        v69 = call ptr_152(v68), !2722
        v70 = get_local ptr u64, new_ptr, !2723
        v71 = load v70
        v72 = get_local ptr u64, other_len, !2724
        v73 = load v72
        v74 = call copy_bytes_to_146(v69, v71, v73), !2727
        v75 = get_local ptr u64, both_len, !2728
        v76 = load v75
        v77 = const u64 1
        v78 = get_elem_ptr self, ptr u64, v77, !2729
        store v76 to v78, !2729
        v79 = const unit ()
        ret () v79
    }

    pub fn len_141(self !2730: { { u64, u64 }, u64 }) -> u64, !2733 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2671
        v4 = load v3
        ret u64 v4
    }

    pub fn capacity_142(self !2734: { u64, u64 }) -> u64, !2737 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2738
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_143(ptr !2739: u64, count !2740: u64) -> slice, !2743 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !2744
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2744
        store ptr to v4, !2744
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !2744
        store v1 to v6, !2744
        v7 = load v2
        v8 = call from_parts_144(v7), !2747
        ret slice v8
    }

    fn from_parts_144(parts !2748: { u64, u64 }) -> slice, !2751 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !2752 {
        }
        ret slice v0
    }

    pub fn realloc_bytes_145(ptr !2753: u64, count !2754: u64, new_count !2755: u64) -> u64, !2758 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_89(new_count, count), !2761
        cbr v0, block0(), block4(), !2759

        block0():
        v1 = call alloc_bytes_136(new_count), !2764
        v2 = get_local ptr u64, new_ptr, !2765
        store v1 to v2, !2765
        v3 = const u64 0, !2766
        v4 = call gt_89(count, v3), !2769
        cbr v4, block1(), block2(), !2767

        block1():
        v5 = get_local ptr u64, new_ptr, !2770
        v6 = load v5
        v7 = call copy_bytes_to_146(ptr, v6, count), !2773
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !2774
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_bytes_to_146(self !2775: u64, dst !2776: u64, count !2777: u64) -> (), !2780 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !2781 {
            mcp    dst src len, !2782
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn ptr_147(self !2783: { u64, u64 }) -> u64, !2786 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2787
        v4 = load v3
        ret u64 v4
    }

    pub fn from_148(slice !2788: slice) -> { u64, u64 }, !2791 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_149(slice), !2794
        v1 = get_local ptr u64, cap, !2795
        store v0 to v1, !2795
        v2 = get_local ptr u64, cap, !2796
        v3 = load v2
        v4 = call alloc_bytes_136(v3), !2799
        v5 = get_local ptr u64, ptr, !2800
        store v4 to v5, !2800
        v6 = get_local ptr u64, cap, !2801
        v7 = load v6
        v8 = const u64 0, !2802
        v9 = call gt_89(v7, v8), !2805
        cbr v9, block0(), block1(), !2803

        block0():
        v10 = call ptr_23(slice), !2808
        v11 = get_local ptr u64, ptr, !2809
        v12 = load v11
        v13 = get_local ptr u64, cap, !2810
        v14 = load v13
        v15 = call copy_to_150(v10, v12, v14), !2813
        v16 = const unit ()
        br block2(v16)

        block1():
        v17 = const unit ()
        br block2(v17)

        block2(v18: ()):
        v19 = get_local ptr u64, ptr, !2814
        v20 = load v19
        v21 = get_local ptr u64, cap, !2815
        v22 = load v21
        v23 = get_local ptr { u64, u64 }, __anon_0, !2816
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v20 to v25, !2816
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v22 to v27, !2816
        v28 = load v23
        ret { u64, u64 } v28
    }

    pub fn number_of_bytes_149(self !2817: slice) -> u64, !2820 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_24(self), !2823
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !2824
        v4 = load v3
        ret u64 v4
    }

    pub fn copy_to_150(self !2825: u64, dst !2826: u64, count !2827: u64) -> (), !2830 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !2831
        store v1 to v2, !2831
        v3 = get_local ptr u64, len, !2832
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !2833 {
            mcp    dst src len, !2834
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_uint_offset_151(self !2835: u64, offset !2836: u64) -> u64, !2839 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !2840 {
            add    new ptr offset, !2841
        }
        ret u64 v0
    }

    pub fn ptr_152(self !2842: { { u64, u64 }, u64 }) -> u64, !2845 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !2684
        v4 = load v3
        v5 = call ptr_147(v4), !2848
        ret u64 v5
    }

    pub fn from_153(slice !2849: slice) -> { { u64, u64 }, u64 }, !2852 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_148(slice), !2855
        v1 = call number_of_bytes_149(slice), !2858
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !2859
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !2859
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !2859
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn sha256_154(self !2860: { { { u64, u64 }, u64 } }) -> b256, !2863 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_155(), !2866
        v1 = get_local ptr b256, result_buffer, !2867
        store v0 to v1, !2867
        v2 = get_local ptr b256, result_buffer, !2868
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !2652
        v7 = load v6
        v8 = call ptr_152(v7), !2871
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !2652
        v13 = load v12
        v14 = call len_141(v13), !2874
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !2875 {
            s256   hash ptr bytes, !2876
        }
        ret b256 v15
    }

    pub fn min_155() -> b256, !2879 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !2880
        ret b256 v0
    }

    pub fn field_id_156(self !2881: { b256, u64, b256 }) -> b256, !2884 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn new_157(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !2886 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn require_158(condition !1530: bool, value !1531: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }) -> (), !2887 {
        entry(condition: bool, value: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }):
        v0 = call not_27(condition), !2888
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_159(value), !2889
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !2890
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_159(value !1547: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }) -> (), !2891 {
        entry(value: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }):
        v0 = call encode_160(value), !1551
        v1 = const u64 999626799421532101
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_160(item !1456: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }) -> slice, !2892 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }):
        v0 = call new_53(), !2893
        v1 = call abi_encode_161(item, v0), !2894
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !2895
        ret slice v5
    }

    pub fn abi_encode_161(self !2120: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, buffer !2121: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !2897 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______
        local { { u64, u64, u64 } } buffer________
        local { { u64, u64, u64 } } buffer_________
        local { { u64, u64, u64 } } buffer__________
        local { { u64, u64, u64 } } buffer___________
        local b256 value
        local b256 value_
        local { u64, u64 } value__
        local u64 value___
        local b256 value____

        entry(self: { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2898
        store self to v0, !2898
        v1 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2126
        v4 = load v3
        v5 = const u64 0, !2126
        v6 = call eq_10(v4, v5), !2901
        cbr v6, block0(), block1(), !2899

        block0():
        v7 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, value, !2902
        store v11 to v12, !2902
        v13 = const u64 0, !2903
        v14 = call abi_encode_62(v13, buffer), !2906
        v15 = get_local ptr { { u64, u64, u64 } }, buffer_, !2907
        store v14 to v15, !2907
        v16 = get_local ptr b256, value, !2908
        v17 = load v16
        v18 = get_local ptr { { u64, u64, u64 } }, buffer_, !2909
        v19 = load v18
        v20 = call abi_encode_162(v17, v19), !2912
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !2913
        store v20 to v21, !2913
        v22 = get_local ptr { { u64, u64, u64 } }, buffer__, !2914
        v23 = load v22
        br block26(v23)

        block1():
        v24 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !2126
        v27 = load v26
        v28 = const u64 1, !2126
        v29 = call eq_10(v27, v28), !2917
        cbr v29, block2(), block3(), !2915

        block2():
        v30 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v30, ptr b256, v31, v32
        v34 = load v33
        v35 = get_local ptr b256, value_, !2918
        store v34 to v35, !2918
        v36 = const u64 1, !2919
        v37 = call abi_encode_62(v36, buffer), !2922
        v38 = get_local ptr { { u64, u64, u64 } }, buffer___, !2923
        store v37 to v38, !2923
        v39 = get_local ptr b256, value_, !2924
        v40 = load v39
        v41 = get_local ptr { { u64, u64, u64 } }, buffer___, !2925
        v42 = load v41
        v43 = call abi_encode_162(v40, v42), !2928
        v44 = get_local ptr { { u64, u64, u64 } }, buffer____, !2929
        store v43 to v44, !2929
        v45 = get_local ptr { { u64, u64, u64 } }, buffer____, !2930
        v46 = load v45
        br block25(v46)

        block3():
        v47 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !2126
        v50 = load v49
        v51 = const u64 2, !2126
        v52 = call eq_10(v50, v51), !2933
        cbr v52, block4(), block5(), !2931

        block4():
        v53 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v54 = const u64 1
        v55 = const u64 2
        v56 = get_elem_ptr v53, ptr { u64, u64 }, v54, v55
        v57 = load v56
        v58 = get_local ptr { u64, u64 }, value__, !2934
        store v57 to v58, !2934
        v59 = const u64 2, !2935
        v60 = call abi_encode_62(v59, buffer), !2938
        v61 = get_local ptr { { u64, u64, u64 } }, buffer_____, !2939
        store v60 to v61, !2939
        v62 = get_local ptr { u64, u64 }, value__, !2940
        v63 = load v62
        v64 = get_local ptr { { u64, u64, u64 } }, buffer_____, !2941
        v65 = load v64
        v66 = call abi_encode_163(v63, v65), !2944
        v67 = get_local ptr { { u64, u64, u64 } }, buffer______, !2945
        store v66 to v67, !2945
        v68 = get_local ptr { { u64, u64, u64 } }, buffer______, !2946
        v69 = load v68
        br block24(v69)

        block5():
        v70 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr u64, v71, !2126
        v73 = load v72
        v74 = const u64 3, !2126
        v75 = call eq_10(v73, v74), !2949
        cbr v75, block6(), block7(), !2947

        block6():
        v76 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v77 = const u64 1
        v78 = const u64 3
        v79 = get_elem_ptr v76, ptr u64, v77, v78
        v80 = load v79
        v81 = get_local ptr u64, value___, !2950
        store v80 to v81, !2950
        v82 = const u64 3, !2951
        v83 = call abi_encode_62(v82, buffer), !2954
        v84 = get_local ptr { { u64, u64, u64 } }, buffer_______, !2955
        store v83 to v84, !2955
        v85 = get_local ptr u64, value___, !2956
        v86 = load v85
        v87 = get_local ptr { { u64, u64, u64 } }, buffer_______, !2957
        v88 = load v87
        v89 = call abi_encode_62(v86, v88), !2960
        v90 = get_local ptr { { u64, u64, u64 } }, buffer________, !2961
        store v89 to v90, !2961
        v91 = get_local ptr { { u64, u64, u64 } }, buffer________, !2962
        v92 = load v91
        br block23(v92)

        block7():
        v93 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !2126
        v96 = load v95
        v97 = const u64 4, !2126
        v98 = call eq_10(v96, v97), !2965
        cbr v98, block8(), block9(), !2963

        block8():
        v99 = const u64 4, !2966
        v100 = call abi_encode_62(v99, buffer), !2969
        br block22(v100)

        block9():
        v101 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr u64, v102, !2126
        v104 = load v103
        v105 = const u64 5, !2126
        v106 = call eq_10(v104, v105), !2972
        cbr v106, block10(), block11(), !2970

        block10():
        v107 = const u64 5, !2973
        v108 = call abi_encode_62(v107, buffer), !2976
        br block21(v108)

        block11():
        v109 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v110 = const u64 0
        v111 = get_elem_ptr v109, ptr u64, v110, !2126
        v112 = load v111
        v113 = const u64 6, !2126
        v114 = call eq_10(v112, v113), !2979
        cbr v114, block12(), block13(), !2977

        block12():
        v115 = const u64 6, !2980
        v116 = call abi_encode_62(v115, buffer), !2983
        br block20(v116)

        block13():
        v117 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v118 = const u64 0
        v119 = get_elem_ptr v117, ptr u64, v118, !2126
        v120 = load v119
        v121 = const u64 7, !2126
        v122 = call eq_10(v120, v121), !2986
        cbr v122, block14(), block15(), !2984

        block14():
        v123 = const u64 7, !2987
        v124 = call abi_encode_62(v123, buffer), !2990
        br block19(v124)

        block15():
        v125 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126, !2126
        v128 = load v127
        v129 = const u64 8, !2126
        v130 = call eq_10(v128, v129), !2993
        cbr v130, block16(), block17(), !2991

        block16():
        v131 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __matched_value_1, !2126
        v132 = const u64 1
        v133 = const u64 8
        v134 = get_elem_ptr v131, ptr b256, v132, v133
        v135 = load v134
        v136 = get_local ptr b256, value____, !2994
        store v135 to v136, !2994
        v137 = const u64 8, !2995
        v138 = call abi_encode_62(v137, buffer), !2998
        v139 = get_local ptr { { u64, u64, u64 } }, buffer_________, !2999
        store v138 to v139, !2999
        v140 = get_local ptr b256, value____, !3000
        v141 = load v140
        v142 = get_local ptr { { u64, u64, u64 } }, buffer_________, !3001
        v143 = load v142
        v144 = call abi_encode_162(v141, v143), !3004
        v145 = get_local ptr { { u64, u64, u64 } }, buffer__________, !3005
        store v144 to v145, !3005
        v146 = get_local ptr { { u64, u64, u64 } }, buffer__________, !3006
        v147 = load v146
        br block18(v147)

        block17():
        v148 = const u64 14757395258967588866, !2898
        revert v148, !2898

        block18(v149: { { u64, u64, u64 } }):
        br block19(v149)

        block19(v150: { { u64, u64, u64 } }):
        br block20(v150)

        block20(v151: { { u64, u64, u64 } }):
        br block21(v151)

        block21(v152: { { u64, u64, u64 } }):
        br block22(v152)

        block22(v153: { { u64, u64, u64 } }):
        br block23(v153)

        block23(v154: { { u64, u64, u64 } }):
        br block24(v154)

        block24(v155: { { u64, u64, u64 } }):
        br block25(v155)

        block25(v156: { { u64, u64, u64 } }):
        br block26(v156)

        block26(v157: { { u64, u64, u64 } }):
        v158 = get_local ptr { { u64, u64, u64 } }, buffer___________, !3007
        store v157 to v158, !3007
        v159 = get_local ptr { { u64, u64, u64 } }, buffer___________, !3008
        v160 = load v159
        ret { { u64, u64, u64 } } v160
    }

    pub fn abi_encode_162(self !3009: b256, buffer !3010: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3013 {
        local { u64, u64, u64 } __anon_0
        local b256 __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: b256, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1476
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 32
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = get_local ptr b256, __anon_1
        store self to v22
        v23 = ptr_to_int v20 to u64
        v24 = add v23, v16
        v25 = int_to_ptr v24 to ptr u8
        mem_copy_bytes v25, v22, 32
        v26 = const u64 32
        v27 = add v16, v26
        v28 = ptr_to_int v20 to u64
        v29 = get_local ptr { u64, u64, u64 }, __anon_2
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v28 to v31
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        store v21 to v33
        v34 = const u64 2
        v35 = get_elem_ptr v29, ptr u64, v34
        store v27 to v35
        v36 = asm(buffer: v29) -> { u64, u64, u64 } buffer {
        }
        v37 = get_local ptr { { u64, u64, u64 } }, __anon_3, !3014
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { u64, u64, u64 }, v38
        store v36 to v39, !3014
        v40 = load v37
        ret { { u64, u64, u64 } } v40

        block1():
        v41 = const u64 2
        v42 = mul v13, v41
        v43 = add v42, v17
        v44 = asm(new_cap: v43, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v44, v43)

        block2():
        br block0(v10, v13)
    }

    pub fn abi_encode_163(self !3015: { u64, u64 }, buffer !3016: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3019 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3020
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !3023
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !3024
        store v5 to v6, !3024
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3025
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !3026
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !3029
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !3030
        store v14 to v15, !3030
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !3031
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn is_some_164(self !3032: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }) -> bool, !3035 {
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __matched_value_2

        entry(self: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_2, !3036
        store self to v0, !3036
        v1 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_2, !3037
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3037
        v4 = load v3
        v5 = const u64 1, !3037
        v6 = call eq_10(v4, v5), !3040
        cbr v6, block0(), block1(), !3038

        block0():
        v7 = const bool true, !3041
        br block2(v7)

        block1():
        v8 = const bool false, !3042
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn unwrap_165(self !2059: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, !3043 {
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __matched_value_4
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } inner_value

        entry(self: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !3044
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !3045
        br block2(v16)

        block2(v17: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        ret { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } v17
    }

    fn market_order_166(order !3046: b256) -> { u64, ( () | bool ) }, !3049 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64, ( () | bool ) } __anon_2
        local { u64, ( () | bool ) } __anon_3
        local { u64, ( () | bool ) } __anon_4
        local { u64, ( () | bool ) } __matched_value_3
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __matched_value_4

        entry(order: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !3050
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !3050
        store v3 to v2, !3050
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !3050
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !3050
        store v9 to v8, !3050
        v10 = load v0
        v11 = call get_131(v10, order), !3053
        v12 = call try_read_125(v11), !3056
        v13 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_4, !3057
        store v12 to v13, !3057
        v14 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_4, !3054
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !3054
        v17 = load v16
        v18 = const u64 1, !3054
        v19 = call eq_10(v17, v18), !3060
        cbr v19, block0(), block4(), !3058

        block0():
        v20 = get_local ptr { b256, u64, b256 }, __anon_1, !3061
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr b256, v21
        v23 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !3061
        store v23 to v22, !3061
        v24 = const u64 1
        v25 = get_elem_ptr v20, ptr u64, v24
        v26 = const u64 0
        store v26 to v25, !3061
        v27 = const u64 2
        v28 = get_elem_ptr v20, ptr b256, v27
        v29 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !3061
        store v29 to v28, !3061
        v30 = load v20
        v31 = call get_167(v30, order), !3064
        v32 = call try_read_34(v31), !3067
        v33 = get_local ptr { u64, ( () | bool ) }, __matched_value_3, !3068
        store v32 to v33, !3068
        v34 = get_local ptr { u64, ( () | bool ) }, __matched_value_3, !3065
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !3065
        v37 = load v36
        v38 = const u64 1, !3065
        v39 = call eq_10(v37, v38), !3071
        cbr v39, block1(), block2(), !3069

        block1():
        v40 = get_local ptr { u64, ( () | bool ) }, __anon_2, !1268
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !1268
        v43 = const u64 1, !1268
        store v43 to v42, !1268
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v40, ptr bool, v44, v45, !1268
        v47 = const bool true, !3072
        store v47 to v46, !1268
        v48 = load v40
        br block3(v48)

        block2():
        v49 = get_local ptr { u64, ( () | bool ) }, __anon_3, !1268
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !1268
        v52 = const u64 1, !1268
        store v52 to v51, !1268
        v53 = const u64 1
        v54 = const u64 1
        v55 = get_elem_ptr v49, ptr bool, v53, v54, !1268
        v56 = const bool false, !3073
        store v56 to v55, !1268
        v57 = load v49
        br block3(v57)

        block3(v58: { u64, ( () | bool ) }):
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | bool ) }, __anon_4, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | bool ) }):
        ret { u64, ( () | bool ) } v64
    }

    pub fn get_167(self !2534: { b256, u64, b256 }, key !2535: b256) -> { b256, u64, b256 }, !3074 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256):
        v0 = call field_id_168(self), !3075
        v1 = get_local ptr { b256, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_132(v6), !3076
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_32(v10, v13, v12), !3077
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_168(self !2881: { b256, u64, b256 }) -> b256, !3078 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn ge_169(self !1992: u64, other !1993: u64) -> bool, !3079 {
        entry(self: u64, other: u64):
        v0 = call gt_170(self, other), !3080
        cbr v0, block1(v0), block0(), !2000

        block0():
        v1 = call eq_171(self, other), !3081
        br block1(v1), !2000

        block1(v2: bool):
        ret bool v2
    }

    pub fn gt_170(self !3082: u64, other !3083: u64) -> bool, !3086 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn eq_171(self !3087: u64, other !3088: u64) -> bool, !3091 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn height_172() -> u64, !3095 {
        entry():
        v0 = asm(height) -> u64 height, !3096 {
            bhei   height, !3097
        }
        ret u64 v0
    }

    pub fn add_173(self !3098: u64, other !3099: u64) -> u64, !3102 {
        local u64 res

        entry(self: u64, other: u64):
        v0 = add self, other
        v1 = get_local ptr u64, res, !3103
        store v0 to v1, !3103
        v2 = get_local ptr u64, res, !3104
        v3 = load v2
        v4 = call max_14(), !3107
        v5 = cmp gt v3 v4
        cbr v5, block0(), block4(), !3108

        block0():
        v6 = call panic_on_overflow_is_enabled_174(), !3111
        cbr v6, block1(), block2(), !3109

        block1():
        v7 = const u64 0, !3112
        revert v7, !3113

        block2():
        v8 = get_local ptr u64, res, !3114
        v9 = load v8
        v10 = call max_14(), !3117
        v11 = const u64 1, !3118
        v12 = add v10, v11
        v13 = mod v9, v12
        br block3(v13)

        block3(v14: u64):
        br block5(v14)

        block4():
        v15 = get_local ptr u64, res, !3119
        v16 = load v15
        br block5(v16)

        block5(v17: u64):
        ret u64 v17
    }

    fn panic_on_overflow_is_enabled_174() -> bool, !3122 {
        entry():
        v0 = call flags_175(), !3125
        v1 = const u64 2, !3126
        v2 = and v0, v1
        v3 = const u64 0, !3127
        v4 = cmp eq v2 v3
        ret bool v4
    }

    fn flags_175() -> u64, !3130 {
        entry():
        v0 = asm() -> u64 flag, !3131 {
        }
        ret u64 v0
    }

    pub fn require_176(condition !1530: bool, value !1531: { u64 }) -> (), !3132 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_27(condition), !3133
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_177(value), !3134
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !3135
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_177(value !1547: { u64 }) -> (), !3136 {
        entry(value: { u64 }):
        v0 = call encode_178(value), !1551
        v1 = const u64 487470194140633944
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_178(item !1456: { u64 }) -> slice, !3137 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !3138
        v1 = call abi_encode_179(item, v0), !3139
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !3140
        ret slice v5
    }

    pub fn abi_encode_179(self !3141: { u64 }, buffer !35: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3144 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !3145
        store self to v0, !3145
        v1 = get_local ptr { u64 }, __matched_value_1, !3146
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3146
        v4 = load v3
        v5 = const u64 0, !3146
        v6 = call eq_10(v4, v5), !3149
        cbr v6, block0(), block1(), !3147

        block0():
        v7 = const u64 0, !1566
        v8 = call abi_encode_62(v7, buffer), !3150
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !3145
        revert v9, !3145

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !3151
        store v10 to v11, !3151
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !1571
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    fn cancel_read_order_180(order_id !3152: b256, order !3153: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> (), !3156 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __anon_2
        local { u64 } __matched_value_12
        local mut { { u64, u64 }, { u64, u64 } } account
        local { u64, ( { b256 } | { b256 } ) } user

        entry(order_id: b256, order: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = ptr_to_int order to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 3
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2464
        v4 = load v3
        v5 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !3157
        store v4 to v5, !3157
        v6 = get_local ptr { b256, u64, b256 }, __anon_0, !3158
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7
        v9 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !3158
        store v9 to v8, !3158
        v10 = const u64 1
        v11 = get_elem_ptr v6, ptr u64, v10
        v12 = const u64 0
        store v12 to v11, !3158
        v13 = const u64 2
        v14 = get_elem_ptr v6, ptr b256, v13
        v15 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !3158
        store v15 to v14, !3158
        v16 = load v6
        v17 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !3159
        v18 = load v17
        v19 = call get_188(v16, v18), !3162
        v20 = call read_181(v19), !3165
        v21 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !3166
        store v20 to v21, !3166
        v22 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !3167
        v23 = call lock_order_amount_212(order), !3170
        v24 = ptr_to_int order to u64
        v25 = int_to_ptr v24 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr { u64 }, v26, !3171
        v28 = load v27
        v29 = get_local ptr { u64 }, __matched_value_12, !3172
        store v28 to v29, !3172
        v30 = get_local ptr { u64 }, __matched_value_12, !3173
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !3173
        v33 = load v32
        v34 = const u64 1, !3173
        v35 = call eq_10(v33, v34), !3176
        cbr v35, block0(), block1(), !3174

        block0():
        v36 = ptr_to_int order to u64
        v37 = int_to_ptr v36 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v38 = const u64 1
        v39 = get_elem_ptr v37, ptr { u64 }, v38, !3177
        v40 = load v39
        br block5(v40)

        block1():
        v41 = get_local ptr { u64 }, __matched_value_12, !3173
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !3173
        v44 = load v43
        v45 = const u64 0, !3173
        v46 = call eq_10(v44, v45), !3180
        cbr v46, block2(), block3(), !3178

        block2():
        v47 = ptr_to_int order to u64
        v48 = int_to_ptr v47 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v49 = const u64 1
        v50 = get_elem_ptr v48, ptr { u64 }, v49, !3177
        v51 = load v50
        v52 = call not_249(v51), !3183
        br block4(v52)

        block3():
        v53 = const u64 14757395258967588866, !3172
        revert v53, !3172

        block4(v54: { u64 }):
        br block5(v54)

        block5(v55: { u64 }):
        v56 = call unlock_amount_202(v22, v23, v55), !3186
        v57 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !3187
        v58 = load v57
        v59 = call remove_order_250(v58, order_id), !3190
        v60 = get_local ptr { b256, u64, b256 }, __anon_1, !3191
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr b256, v61
        v63 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !3191
        store v63 to v62, !3191
        v64 = const u64 1
        v65 = get_elem_ptr v60, ptr u64, v64
        v66 = const u64 0
        store v66 to v65, !3191
        v67 = const u64 2
        v68 = get_elem_ptr v60, ptr b256, v67
        v69 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !3191
        store v69 to v68, !3191
        v70 = load v60
        v71 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !3192
        v72 = load v71
        v73 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !3193
        v74 = load v73
        v75 = call insert_297(v70, v72, v74), !3196
        v76 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !3197
        v77 = load v76
        v78 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !3198
        v79 = load v78
        v80 = get_local ptr { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __anon_2, !3199
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr b256, v81
        store order_id to v82, !3199
        v83 = const u64 1
        v84 = get_elem_ptr v80, ptr { u64, ( { b256 } | { b256 } ) }, v83
        store v77 to v84, !3199
        v85 = const u64 2
        v86 = get_elem_ptr v80, ptr { { u64, u64 }, { u64, u64 } }, v85
        store v79 to v86, !3199
        v87 = load v80
        v88 = call log_300(v87), !3202
        v89 = const unit ()
        ret () v89
    }

    pub fn read_181(self !3203: { b256, u64, b256 }) -> { { u64, u64 }, { u64, u64 } }, !3206 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_186(self), !3209
        v1 = call offset_187(self), !3212
        v2 = call read_183(v0, v1), !3215
        v3 = call unwrap_182(v2), !3218
        ret { { u64, u64 }, { u64, u64 } } v3
    }

    pub fn unwrap_182(self !2059: { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }) -> { { u64, u64 }, { u64, u64 } }, !3219 {
        local { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } __matched_value_4
        local { { u64, u64 }, { u64, u64 } } inner_value

        entry(self: { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }):
        v0 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !3220
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { u64, u64 }, { u64, u64 } }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { u64, u64 }, { u64, u64 } }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { { u64, u64 }, { u64, u64 } }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !3221
        br block2(v16)

        block2(v17: { { u64, u64 }, { u64, u64 } }):
        ret { { u64, u64 }, { u64, u64 } } v17
    }

    pub fn read_183(slot !1259: b256, offset !1260: u64) -> { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, !3222 {
        local { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } __anon_0
        local { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } __anon_1
        local { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 32
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !3223
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_184(slot, offset), !3224
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !3225
        v34 = call alloc_47(v33), !3226
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !3227
        v54 = call read_185(v53), !3228
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { { u64, u64 }, { u64, u64 } }, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }):
        ret { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } v64
    }

    fn slot_calculator_184(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !3229 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 32
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !3230
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !3231
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !3232
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !3233
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !3234
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool true
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !3235
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !3236
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !3237
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !3238
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !3239
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !3240
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !3241
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !3242
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !3243
        v51 = call subtract_44(v47, v50), !3244
        v52 = call add_43(v44, v51), !3245
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !3246
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_185(self !1043: u64) -> { { u64, u64 }, { u64, u64 } }, !3247 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> { { u64, u64 }, { u64, u64 } } ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> { { u64, u64 }, { u64, u64 } } val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { { u64, u64 }, { u64, u64 } } val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: { { u64, u64 }, { u64, u64 } }):
        br block5(v7)

        block5(v8: { { u64, u64 }, { u64, u64 } }):
        ret { { u64, u64 }, { u64, u64 } } v8
    }

    pub fn slot_186(self !1446: { b256, u64, b256 }) -> b256, !3248 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_187(self !1451: { b256, u64, b256 }) -> u64, !3249 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn get_188(self !2534: { b256, u64, b256 }, key !2535: { u64, ( { b256 } | { b256 } ) }) -> { b256, u64, b256 }, !3250 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }):
        v0 = call field_id_200(self), !3251
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_189(v6), !3252
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_201(v10, v13, v12), !3253
        ret { b256, u64, b256 } v14
    }

    pub fn sha256_189(s !2554: { { u64, ( { b256 } | { b256 } ) }, b256 }) -> b256, !3254 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { u64, ( { b256 } | { b256 } ) }, b256 }):
        v0 = call new_133(), !3255
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2561
        store v0 to v1, !2561
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2562
        v3 = call hash_190(s, v2), !3256
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2566
        v5 = load v4
        v6 = call sha256_154(v5), !3257
        ret b256 v6
    }

    pub fn hash_190(self !2601: { { u64, ( { b256 } | { b256 } ) }, b256 }, state !2602: ptr { { { u64, u64 }, u64 } }) -> (), !3258 {
        entry(self: { { u64, ( { b256 } | { b256 } ) }, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2606
        v4 = load v3
        v5 = call hash_191(v4, state), !3259
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { u64, ( { b256 } | { b256 } ) }, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !2610
        v10 = load v9
        v11 = call hash_138(v10, state), !3260
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_191(self !3261: { u64, ( { b256 } | { b256 } ) }, state !3262: ptr { { { u64, u64 }, u64 } }) -> (), !3265 {
        local { u64, ( { b256 } | { b256 } ) } __matched_value_7
        local { b256 } address
        local { b256 } id

        entry(self: { u64, ( { b256 } | { b256 } ) }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !3266
        store self to v0, !3266
        v1 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !3267
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3267
        v4 = load v3
        v5 = const u64 0, !3267
        v6 = call eq_10(v4, v5), !3270
        cbr v6, block0(), block1(), !3268

        block0():
        v7 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !3267
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, address, !3271
        store v11 to v12, !3271
        v13 = const u8 0, !3272
        v14 = call hash_192(v13, state), !3275
        v15 = get_local ptr { b256 }, address, !3276
        v16 = load v15
        v17 = call hash_198(v16, state), !3279
        v18 = const unit ()
        br block5(v18)

        block1():
        v19 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !3267
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !3267
        v22 = load v21
        v23 = const u64 1, !3267
        v24 = call eq_10(v22, v23), !3282
        cbr v24, block2(), block3(), !3280

        block2():
        v25 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_7, !3267
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v25, ptr { b256 }, v26, v27
        v29 = load v28
        v30 = get_local ptr { b256 }, id, !3283
        store v29 to v30, !3283
        v31 = const u8 1, !3284
        v32 = call hash_192(v31, state), !3287
        v33 = get_local ptr { b256 }, id, !3288
        v34 = load v33
        v35 = call hash_199(v34, state), !3291
        v36 = const unit ()
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !3266
        revert v37, !3266

        block4(v38: ()):
        br block5(v38)

        block5(v39: ()):
        v40 = const unit ()
        ret () v40
    }

    pub fn hash_192(self !3292: u8, state !3293: ptr { { { u64, u64 }, u64 } }) -> (), !3296 {
        local mut { { u64, u64 }, u64 } bytes

        entry(self: u8, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 1, !3297
        v1 = call with_capacity_193(v0), !3300
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !3301
        store v1 to v2, !3301
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !3302
        v4 = call push_195(v3, self), !3305
        v5 = get_local ptr { { u64, u64 }, u64 }, bytes, !3306
        v6 = load v5
        v7 = call write_139(state, v6), !3309
        v8 = const unit ()
        ret () v8
    }

    pub fn with_capacity_193(capacity !3310: u64) -> { { u64, u64 }, u64 }, !3313 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_194(capacity), !3316
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !3317
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !3317
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !3318
        store v6 to v5, !3317
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_194(capacity !3319: u64) -> { u64, u64 }, !3322 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_136(capacity), !3325
        v1 = get_local ptr { u64, u64 }, __anon_0, !3326
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !3326
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !3326
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn push_195(self !3327: ptr { { u64, u64 }, u64 }, byte !3328: u8) -> (), !3331 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, byte: u8):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !2671
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !2684
        v5 = load v4
        v6 = call capacity_142(v5), !3334
        v7 = call eq_10(v2, v6), !3337
        cbr v7, block0(), block1(), !3335

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !2684
        v10 = call grow_196(v9), !3340
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !2684
        v16 = load v15
        v17 = call ptr_147(v16), !3343
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !2671
        v20 = load v19
        v21 = call add_uint_offset_151(v17, v20), !3346
        v22 = get_local ptr u64, end, !3347
        store v21 to v22, !3347
        v23 = get_local ptr u64, end, !3348
        v24 = load v23
        v25 = call write_byte_197(v24, byte), !3351
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !2671
        v28 = load v27
        v29 = const u64 1, !3352
        v30 = call add_38(v28, v29), !3355
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !3353
        store v30 to v32, !3353
        v33 = const unit ()
        ret () v33
    }

    pub fn grow_196(self !3356: ptr { u64, u64 }) -> (), !3359 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !2738
        v2 = load v1
        v3 = const u64 0, !3360
        v4 = call eq_10(v2, v3), !3363
        cbr v4, block0(), block1(), !3361

        block0():
        v5 = const u64 1, !3364
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !2738
        v8 = load v7
        v9 = const u64 2, !3365
        v10 = call multiply_39(v9, v8), !3368
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !3369
        store v11 to v12, !3369
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !2787
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !2738
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !3370
        v20 = load v19
        v21 = call realloc_bytes_145(v15, v18, v20), !3373
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !3374
        store v21 to v23, !3374
        v24 = get_local ptr u64, new_cap, !3375
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !3376
        store v25 to v27, !3376
        v28 = const unit ()
        ret () v28
    }

    pub fn write_byte_197(self !3377: u64, val !3378: u8) -> (), !3381 {
        local u64 val_ptr

        entry(self: u64, val: u8):
        v0 = asm(r1: val) -> u64 r1, !3382 {
        }
        v1 = get_local ptr u64, val_ptr, !3383
        store v0 to v1, !3383
        v2 = get_local ptr u64, val_ptr, !3384
        v3 = load v2
        v4 = asm(ptr: self, val: v3) -> (), !3385 {
            sb     ptr val i0, !3386
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn hash_198(self !3387: { b256 }, state !3388: ptr { { { u64, u64 }, u64 } }) -> (), !3391 {
        local { b256 } __destructured_struct_1
        local b256 bits

        entry(self: { b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { b256 }, __destructured_struct_1, !3392
        store self to v0, !3392
        v1 = get_local ptr { b256 }, __destructured_struct_1, !3392
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1654
        v4 = load v3
        v5 = get_local ptr b256, bits, !3392
        store v4 to v5, !3392
        v6 = get_local ptr b256, bits, !3393
        v7 = load v6
        v8 = call hash_138(v7, state), !3396
        v9 = const unit ()
        ret () v9
    }

    pub fn hash_199(self !3397: { b256 }, state !3398: ptr { { { u64, u64 }, u64 } }) -> (), !3401 {
        local { b256 } __destructured_struct_1
        local b256 bits

        entry(self: { b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { b256 }, __destructured_struct_1, !3402
        store self to v0, !3402
        v1 = get_local ptr { b256 }, __destructured_struct_1, !3402
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1669
        v4 = load v3
        v5 = get_local ptr b256, bits, !3402
        store v4 to v5, !3402
        v6 = get_local ptr b256, bits, !3403
        v7 = load v6
        v8 = call hash_138(v7, state), !3406
        v9 = const unit ()
        ret () v9
    }

    pub fn field_id_200(self !2881: { b256, u64, b256 }) -> b256, !3407 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn new_201(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !3408 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn unlock_amount_202(self !3410: ptr { { u64, u64 }, { u64, u64 } }, amount !3411: u64, asset !3412: { u64 }) -> (), !3415 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_0

        entry(self: ptr { { u64, u64 }, { u64, u64 } }, amount: u64, asset: { u64 }):
        v0 = const u64 0, !3416
        v1 = call neq_26(amount, v0), !3419
        v2 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_0, !2493
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2493
        v5 = const u64 6, !2493
        store v5 to v4, !2493
        v6 = load v2
        v7 = call require_158(v1, v6), !3422
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !3423
        v10 = call credit_203(v9, amount, asset), !3426
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr { u64, u64 }, v11, !3427
        v13 = call debit_204(v12, amount, asset), !3430
        v14 = const unit ()
        ret () v14
    }

    pub fn credit_203(self !3432: ptr { u64, u64 }, amount !3433: u64, asset !3434: { u64 }) -> (), !3437 {
        local { u64 } __matched_value_1

        entry(self: ptr { u64, u64 }, amount: u64, asset: { u64 }):
        v0 = get_local ptr { u64 }, __matched_value_1, !3438
        store asset to v0, !3438
        v1 = get_local ptr { u64 }, __matched_value_1, !3439
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3439
        v4 = load v3
        v5 = const u64 0, !3439
        v6 = call eq_10(v4, v5), !3442
        cbr v6, block0(), block1(), !3440

        block0():
        v7 = const u64 0
        v8 = get_elem_ptr self, ptr u64, v7, !3443
        v9 = load v8
        v10 = call add_38(v9, amount), !3446
        v11 = const u64 0
        v12 = get_elem_ptr self, ptr u64, v11, !3444
        store v10 to v12, !3444
        v13 = const unit (), !3444
        br block5(v13)

        block1():
        v14 = get_local ptr { u64 }, __matched_value_1, !3439
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !3439
        v17 = load v16
        v18 = const u64 1, !3439
        v19 = call eq_10(v17, v18), !3449
        cbr v19, block2(), block3(), !3447

        block2():
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !3450
        v22 = load v21
        v23 = call add_38(v22, amount), !3453
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !3451
        store v23 to v25, !3451
        v26 = const unit (), !3451
        br block4(v26)

        block3():
        v27 = const u64 14757395258967588866, !3438
        revert v27, !3438

        block4(v28: ()):
        br block5(v28)

        block5(v29: ()):
        v30 = const unit ()
        ret () v30
    }

    pub fn debit_204(self !3454: ptr { u64, u64 }, amount !3455: u64, asset !3456: { u64 }) -> (), !3459 {
        local { u64, ( { u64, u64, bool } ) } __anon_0
        local { u64, u64, bool } __anon_1
        local { u64, ( { u64, u64, bool } ) } __anon_2
        local { u64, u64, bool } __anon_3
        local { u64 } __matched_value_2

        entry(self: ptr { u64, u64 }, amount: u64, asset: { u64 }):
        v0 = get_local ptr { u64 }, __matched_value_2, !3460
        store asset to v0, !3460
        v1 = get_local ptr { u64 }, __matched_value_2, !3461
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3461
        v4 = load v3
        v5 = const u64 0, !3461
        v6 = call eq_10(v4, v5), !3464
        cbr v6, block0(), block1(), !3462

        block0():
        v7 = const u64 0
        v8 = get_elem_ptr self, ptr u64, v7, !3443
        v9 = load v8
        v10 = call le_210(amount, v9), !3467
        v11 = get_local ptr { u64, ( { u64, u64, bool } ) }, __anon_0, !3468
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !3468
        v14 = const u64 0, !3468
        store v14 to v13, !3468
        v15 = const u64 0
        v16 = get_elem_ptr self, ptr u64, v15, !3443
        v17 = load v16
        v18 = get_local ptr { u64, u64, bool }, __anon_1, !3469
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !3469
        store v17 to v20, !3469
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr u64, v21, !3469
        store amount to v22, !3469
        v23 = const u64 2
        v24 = get_elem_ptr v18, ptr bool, v23, !3469
        v25 = const bool true, !3470
        store v25 to v24, !3469
        v26 = load v18
        v27 = const u64 1
        v28 = const u64 0
        v29 = get_elem_ptr v11, ptr { u64, u64, bool }, v27, v28, !3468
        store v26 to v29, !3468
        v30 = load v11
        v31 = call require_205(v10, v30), !3473
        v32 = const u64 0
        v33 = get_elem_ptr self, ptr u64, v32, !3443
        v34 = load v33
        v35 = call subtract_211(v34, amount), !3476
        v36 = const u64 0
        v37 = get_elem_ptr self, ptr u64, v36, !3474
        store v35 to v37, !3474
        v38 = const unit ()
        br block5(v38)

        block1():
        v39 = get_local ptr { u64 }, __matched_value_2, !3461
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !3461
        v42 = load v41
        v43 = const u64 1, !3461
        v44 = call eq_10(v42, v43), !3479
        cbr v44, block2(), block3(), !3477

        block2():
        v45 = const u64 1
        v46 = get_elem_ptr self, ptr u64, v45, !3450
        v47 = load v46
        v48 = call le_210(amount, v47), !3482
        v49 = get_local ptr { u64, ( { u64, u64, bool } ) }, __anon_2, !3468
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !3468
        v52 = const u64 0, !3468
        store v52 to v51, !3468
        v53 = const u64 1
        v54 = get_elem_ptr self, ptr u64, v53, !3450
        v55 = load v54
        v56 = get_local ptr { u64, u64, bool }, __anon_3, !3483
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u64, v57, !3483
        store v55 to v58, !3483
        v59 = const u64 1
        v60 = get_elem_ptr v56, ptr u64, v59, !3483
        store amount to v60, !3483
        v61 = const u64 2
        v62 = get_elem_ptr v56, ptr bool, v61, !3483
        v63 = const bool false, !3484
        store v63 to v62, !3483
        v64 = load v56
        v65 = const u64 1
        v66 = const u64 0
        v67 = get_elem_ptr v49, ptr { u64, u64, bool }, v65, v66, !3468
        store v64 to v67, !3468
        v68 = load v49
        v69 = call require_205(v48, v68), !3487
        v70 = const u64 1
        v71 = get_elem_ptr self, ptr u64, v70, !3450
        v72 = load v71
        v73 = call subtract_211(v72, amount), !3490
        v74 = const u64 1
        v75 = get_elem_ptr self, ptr u64, v74, !3488
        store v73 to v75, !3488
        v76 = const unit ()
        br block4(v76)

        block3():
        v77 = const u64 14757395258967588866, !3460
        revert v77, !3460

        block4(v78: ()):
        br block5(v78)

        block5(v79: ()):
        v80 = const unit ()
        ret () v80
    }

    pub fn require_205(condition !1530: bool, value !1531: { u64, ( { u64, u64, bool } ) }) -> (), !3491 {
        entry(condition: bool, value: { u64, ( { u64, u64, bool } ) }):
        v0 = call not_27(condition), !3492
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_206(value), !3493
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !3494
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_206(value !1547: { u64, ( { u64, u64, bool } ) }) -> (), !3495 {
        entry(value: { u64, ( { u64, u64, bool } ) }):
        v0 = call encode_207(value), !1551
        v1 = const u64 15329379498675066312
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_207(item !1456: { u64, ( { u64, u64, bool } ) }) -> slice, !3496 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( { u64, u64, bool } ) }):
        v0 = call new_53(), !3497
        v1 = call abi_encode_208(item, v0), !3498
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !3499
        ret slice v5
    }

    pub fn abi_encode_208(self !3500: { u64, ( { u64, u64, bool } ) }, buffer !3501: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3504 {
        local { u64, ( { u64, u64, bool } ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { u64, u64, bool } value

        entry(self: { u64, ( { u64, u64, bool } ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( { u64, u64, bool } ) }, __matched_value_1, !3505
        store self to v0, !3505
        v1 = get_local ptr { u64, ( { u64, u64, bool } ) }, __matched_value_1, !3506
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3506
        v4 = load v3
        v5 = const u64 0, !3506
        v6 = call eq_10(v4, v5), !3509
        cbr v6, block0(), block1(), !3507

        block0():
        v7 = get_local ptr { u64, ( { u64, u64, bool } ) }, __matched_value_1, !3506
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { u64, u64, bool }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, u64, bool }, value, !3510
        store v11 to v12, !3510
        v13 = const u64 0, !3511
        v14 = call abi_encode_62(v13, buffer), !3514
        v15 = get_local ptr { { u64, u64, u64 } }, buffer_, !3515
        store v14 to v15, !3515
        v16 = get_local ptr { u64, u64, bool }, value, !3516
        v17 = load v16
        v18 = get_local ptr { { u64, u64, u64 } }, buffer_, !3517
        v19 = load v18
        v20 = call abi_encode_209(v17, v19), !3520
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !3521
        store v20 to v21, !3521
        v22 = get_local ptr { { u64, u64, u64 } }, buffer__, !3522
        v23 = load v22
        br block2(v23)

        block1():
        v24 = const u64 14757395258967588866, !3505
        revert v24, !3505

        block2(v25: { { u64, u64, u64 } }):
        v26 = get_local ptr { { u64, u64, u64 } }, buffer___, !3523
        store v25 to v26, !3523
        v27 = get_local ptr { { u64, u64, u64 } }, buffer___, !3524
        v28 = load v27
        ret { { u64, u64, u64 } } v28
    }

    pub fn abi_encode_209(self !3525: { u64, u64, bool }, buffer !3526: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !3529 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { u64, u64, bool }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64, bool }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3530
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !3533
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !3534
        store v5 to v6, !3534
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64, bool }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3535
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !3539
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !3540
        store v14 to v15, !3540
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, u64, bool }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr bool, v18, !3541
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !3542
        v22 = load v21
        v23 = call abi_encode_52(v20, v22), !3545
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !3546
        store v23 to v24, !3546
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !3547
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn le_210(self !3548: u64, other !3549: u64) -> bool, !3552 {
        entry(self: u64, other: u64):
        v0 = call lt_86(self, other), !3555
        cbr v0, block1(v0), block0(), !3556

        block0():
        v1 = call eq_10(self, other), !3559
        br block1(v1), !3556

        block1(v2: bool):
        ret bool v2
    }

    pub fn subtract_211(self !3560: u64, other !3561: u64) -> u64, !3564 {
        entry(self: u64, other: u64):
        v0 = sub self, other
        ret u64 v0
    }

    fn lock_order_amount_212(order !3565: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> u64, !3568 {
        local { u64 } __anon_0
        local u64 amount

        entry(order: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = ptr_to_int order to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr { u64 }, v2, !3171
        v4 = load v3
        v5 = get_local ptr { u64 }, __anon_0, !3570
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !3570
        v8 = const u64 0, !3570
        store v8 to v7, !3570
        v9 = load v5
        v10 = call eq_213(v4, v9), !3573
        cbr v10, block0(), block1(), !3571

        block0():
        v11 = ptr_to_int order to u64
        v12 = int_to_ptr v11 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !3574
        v15 = load v14
        v16 = ptr_to_int order to u64
        v17 = int_to_ptr v16 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v18 = const u64 4
        v19 = get_elem_ptr v17, ptr u64, v18, !3575
        v20 = load v19
        v21 = call quote_of_base_amount_214(v15, v20), !3578
        v22 = get_local ptr u64, amount, !3579
        store v21 to v22, !3579
        v23 = get_local ptr u64, amount, !3580
        v24 = load v23
        v25 = get_local ptr u64, amount, !3581
        v26 = load v25
        v27 = call max_protocol_fee_of_amount_247(order, v26), !3584
        v28 = call add_38(v24, v27), !3587
        v29 = ptr_to_int order to u64
        v30 = int_to_ptr v29 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v31 = const u64 7
        v32 = get_elem_ptr v30, ptr u64, v31, !3588
        v33 = load v32
        v34 = call add_38(v28, v33), !3591
        br block2(v34)

        block1():
        v35 = ptr_to_int order to u64
        v36 = int_to_ptr v35 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !3574
        v39 = load v38
        br block2(v39)

        block2(v40: u64):
        ret u64 v40
    }

    pub fn eq_213(self !3592: { u64 }, other !3593: { u64 }) -> bool, !3596 {
        local { { u64 }, { u64 } } __anon_0
        local { { u64 }, { u64 } } __matched_value_1

        entry(self: { u64 }, other: { u64 }):
        v0 = get_local ptr { { u64 }, { u64 } }, __anon_0, !3597
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64 }, v1, !3597
        store self to v2, !3597
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64 }, v3, !3597
        store other to v4, !3597
        v5 = load v0
        v6 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !3598
        store v5 to v6, !3598
        v7 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !3597
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64 }, v8, !3599
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !3599
        v12 = load v11
        v13 = const u64 0, !3599
        v14 = call eq_10(v12, v13), !3602
        cbr v14, block0(), block1(v14), !3600

        block0():
        v15 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !3597
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !3599
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !3599
        v20 = load v19
        v21 = const u64 0, !3599
        v22 = call eq_10(v20, v21), !3603
        br block1(v22), !3600

        block1(v23: bool):
        cbr v23, block2(), block3(), !3600

        block2():
        v24 = const bool true, !3604
        br block9(v24)

        block3():
        v25 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !3597
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { u64 }, v26, !3605
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !3605
        v30 = load v29
        v31 = const u64 1, !3605
        v32 = call eq_10(v30, v31), !3608
        cbr v32, block4(), block5(v32), !3606

        block4():
        v33 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !3597
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr { u64 }, v34, !3605
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !3605
        v38 = load v37
        v39 = const u64 1, !3605
        v40 = call eq_10(v38, v39), !3609
        br block5(v40), !3606

        block5(v41: bool):
        cbr v41, block6(), block7(), !3606

        block6():
        v42 = const bool true, !3610
        br block8(v42)

        block7():
        v43 = const bool false, !3611
        br block8(v43)

        block8(v44: bool):
        br block9(v44)

        block9(v45: bool):
        ret bool v45
    }

    fn quote_of_base_amount_214(amount !3612: u64, price !3613: u64) -> u64, !3616 {
        entry(amount: u64, price: u64):
        v0 = const bool true, !3617
        v1 = call convert_asset_amount_215(amount, price, v0), !3620
        ret u64 v1
    }

    fn convert_asset_amount_215(amount !3621: u64, price !3622: u64, base_to_quote !3623: bool) -> u64, !3626 {
        local { u64, u64 } __anon_0
        local { u64 } __anon_1
        local { u64, ( u64 | { u64 } ) } __matched_value_9
        local { u64, u64 } __tuple_8
        local { u64, u64 } __tuple_8_
        local { u64, ( u64 | { u64 } ) } mul_div
        local u64 op1
        local u64 op2
        local u64 result

        entry(amount: u64, price: u64, base_to_quote: bool):
        v0 = get_config ptr u64, BASE_ASSET_DECIMALS, !3627
        v1 = load v0
        v2 = get_config ptr u64, PRICE_DECIMALS, !3628
        v3 = load v2
        v4 = call add_173(v1, v3), !3631
        v5 = get_config ptr u64, QUOTE_ASSET_DECIMALS, !3632
        v6 = load v5
        v7 = call subtract_217(v4, v6), !3635
        v8 = const u64 10, !3636
        v9 = call pow_216(v8, v7), !3639
        v10 = get_local ptr { u64, u64 }, __anon_0, !3640
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !3640
        store price to v12, !3640
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13, !3640
        store v9 to v14, !3640
        v15 = load v10
        v16 = get_local ptr { u64, u64 }, __tuple_8, !3641
        store v15 to v16, !3641
        v17 = get_local ptr { u64, u64 }, __tuple_8, !3641
        v18 = load v17
        v19 = get_local ptr { u64, u64 }, __tuple_8_, !3641
        store v18 to v19, !3641
        v20 = get_local ptr { u64, u64 }, __tuple_8_, !3641
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !3641
        v23 = load v22
        v24 = get_local ptr u64, op1, !3641
        store v23 to v24, !3641
        v25 = get_local ptr { u64, u64 }, __tuple_8_, !3641
        v26 = const u64 1
        v27 = get_elem_ptr v25, ptr u64, v26, !3641
        v28 = load v27
        v29 = get_local ptr u64, op2, !3641
        store v28 to v29, !3641
        cbr base_to_quote, block0(), block1(), !3642

        block0():
        v30 = get_local ptr u64, op1, !3643
        v31 = load v30
        v32 = get_local ptr u64, op2, !3644
        v33 = load v32
        v34 = call mul_div_218(amount, v31, v33), !3647
        br block2(v34)

        block1():
        v35 = get_local ptr u64, op2, !3648
        v36 = load v35
        v37 = get_local ptr u64, op1, !3649
        v38 = load v37
        v39 = call mul_div_218(amount, v36, v38), !3652
        br block2(v39)

        block2(v40: { u64, ( u64 | { u64 } ) }):
        v41 = get_local ptr { u64, ( u64 | { u64 } ) }, mul_div, !3653
        store v40 to v41, !3653
        v42 = get_local ptr { u64, ( u64 | { u64 } ) }, mul_div, !3654
        v43 = load v42
        v44 = get_local ptr { u64, ( u64 | { u64 } ) }, __matched_value_9, !3655
        store v43 to v44, !3655
        v45 = get_local ptr { u64, ( u64 | { u64 } ) }, __matched_value_9, !3654
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !3654
        v48 = load v47
        v49 = const u64 0, !3654
        v50 = call eq_10(v48, v49), !3658
        cbr v50, block3(), block4(), !3656

        block3():
        v51 = get_local ptr { u64, ( u64 | { u64 } ) }, __matched_value_9, !3654
        v52 = const u64 1
        v53 = const u64 0
        v54 = get_elem_ptr v51, ptr u64, v52, v53
        v55 = load v54
        v56 = get_local ptr u64, result, !3659
        store v55 to v56, !3659
        v57 = get_local ptr u64, result, !3660
        v58 = load v57
        br block8(v58)

        block4():
        v59 = get_local ptr { u64, ( u64 | { u64 } ) }, __matched_value_9, !3654
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !3654
        v62 = load v61
        v63 = const u64 1, !3654
        v64 = call eq_10(v62, v63), !3663
        cbr v64, block5(), block6(), !3661

        block5():
        v65 = get_local ptr { u64 }, __anon_1, !3664
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !3664
        v68 = const u64 0, !3664
        store v68 to v67, !3664
        v69 = load v65
        v70 = call log_244(v69), !3667
        v71 = const u64 18446744073709486080, !1542
        v72 = call revert_63(v71), !3670
        v73 = const unit ()
        br block7(v73)

        block6():
        v74 = const u64 14757395258967588866, !3655
        revert v74, !3655

        block7(v75: never):
        br block8(v75)

        block8(v76: u64):
        ret u64 v76
    }

    pub fn pow_216(self !3672: u64, exponent !3673: u64) -> u64, !3676 {
        entry(self: u64, exponent: u64):
        v0 = asm(r1: self, r2: exponent, r3) -> u64 r3, !3677 {
            exp    r3 r1 r2, !3678
        }
        ret u64 v0
    }

    pub fn subtract_217(self !3679: u64, other !3680: u64) -> u64, !3683 {
        entry(self: u64, other: u64):
        v0 = sub self, other
        ret u64 v0
    }

    pub fn mul_div_218(self !3685: u64, mul_to !3686: u64, div_to !3687: u64) -> { u64, ( u64 | { u64 } ) }, !3690 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64 } __anon_2
        local { u64, u64 } div_result
        local { u64, u64 } mul_result

        entry(self: u64, mul_to: u64, div_to: u64):
        v0 = get_local ptr { u64, u64 }, __anon_0, !3691
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !3691
        v3 = const u64 0, !3692
        store v3 to v2, !3691
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !3691
        store self to v5, !3691
        v6 = load v0
        v7 = call from_228(v6), !3695
        v8 = get_local ptr { u64, u64 }, __anon_1, !3696
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !3696
        v11 = const u64 0, !3697
        store v11 to v10, !3696
        v12 = const u64 1
        v13 = get_elem_ptr v8, ptr u64, v12, !3696
        store mul_to to v13, !3696
        v14 = load v8
        v15 = call from_228(v14), !3700
        v16 = call multiply_219(v7, v15), !3703
        v17 = get_local ptr { u64, u64 }, mul_result, !3704
        store v16 to v17, !3704
        v18 = get_local ptr { u64, u64 }, mul_result, !3705
        v19 = load v18
        v20 = get_local ptr { u64, u64 }, __anon_2, !3706
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !3706
        v23 = const u64 0, !3707
        store v23 to v22, !3706
        v24 = const u64 1
        v25 = get_elem_ptr v20, ptr u64, v24, !3706
        store div_to to v25, !3706
        v26 = load v20
        v27 = call from_228(v26), !3710
        v28 = call divide_229(v19, v27), !3713
        v29 = get_local ptr { u64, u64 }, div_result, !3714
        store v28 to v29, !3714
        v30 = get_local ptr { u64, u64 }, div_result, !3715
        v31 = load v30
        v32 = call as_u64_243(v31), !3718
        ret { u64, ( u64 | { u64 } ) } v32
    }

    pub fn multiply_219(self !3720: { u64, u64 }, other !3721: { u64, u64 }) -> { u64, u64 }, !3724 {
        local mut { u64, u64 } result

        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = call panic_on_unsafe_math_enabled_220(), !3727
        cbr v0, block0(), block3(), !3725

        block0():
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !3728
        v5 = load v4
        v6 = const u64 0, !3729
        v7 = call eq_10(v5, v6), !3732
        cbr v7, block2(v7), block1(), !3733

        block1():
        v8 = ptr_to_int other to u64
        v9 = int_to_ptr v8 to ptr { u64, u64 }
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !3728
        v12 = load v11
        v13 = const u64 0, !3734
        v14 = call eq_10(v12, v13), !3737
        br block2(v14), !3733

        block2(v15: bool):
        v16 = call assert_223(v15), !3740
        v17 = const unit ()
        br block4(v17)

        block3():
        v18 = const unit ()
        br block4(v18)

        block4(v19: ()):
        v20 = ptr_to_int self to u64
        v21 = int_to_ptr v20 to ptr { u64, u64 }
        v22 = const u64 1
        v23 = get_elem_ptr v21, ptr u64, v22, !3741
        v24 = load v23
        v25 = ptr_to_int other to u64
        v26 = int_to_ptr v25 to ptr { u64, u64 }
        v27 = const u64 1
        v28 = get_elem_ptr v26, ptr u64, v27, !3741
        v29 = load v28
        v30 = call overflowing_mul_224(v24, v29), !3744
        v31 = get_local ptr { u64, u64 }, result, !3745
        store v30 to v31, !3745
        v32 = ptr_to_int self to u64
        v33 = int_to_ptr v32 to ptr { u64, u64 }
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !3728
        v36 = load v35
        v37 = const u64 0, !3746
        v38 = call eq_10(v36, v37), !3749
        cbr v38, block5(), block6(), !3747

        block5():
        v39 = get_local ptr { u64, u64 }, result, !3750
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !3728
        v42 = load v41
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { u64, u64 }
        v45 = const u64 1
        v46 = get_elem_ptr v44, ptr u64, v45, !3741
        v47 = load v46
        v48 = ptr_to_int other to u64
        v49 = int_to_ptr v48 to ptr { u64, u64 }
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !3728
        v52 = load v51
        v53 = call multiply_39(v47, v52), !3753
        v54 = call add_38(v42, v53), !3756
        v55 = get_local ptr { u64, u64 }, result, !3754
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !3754
        store v54 to v57, !3754
        v58 = const unit ()
        br block10(v58)

        block6():
        v59 = ptr_to_int other to u64
        v60 = int_to_ptr v59 to ptr { u64, u64 }
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61, !3728
        v63 = load v62
        v64 = const u64 0, !3757
        v65 = call eq_10(v63, v64), !3760
        cbr v65, block7(), block8(), !3758

        block7():
        v66 = get_local ptr { u64, u64 }, result, !3761
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67, !3728
        v69 = load v68
        v70 = ptr_to_int self to u64
        v71 = int_to_ptr v70 to ptr { u64, u64 }
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !3728
        v74 = load v73
        v75 = ptr_to_int other to u64
        v76 = int_to_ptr v75 to ptr { u64, u64 }
        v77 = const u64 1
        v78 = get_elem_ptr v76, ptr u64, v77, !3741
        v79 = load v78
        v80 = call multiply_39(v74, v79), !3764
        v81 = call add_38(v69, v80), !3767
        v82 = get_local ptr { u64, u64 }, result, !3765
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u64, v83, !3765
        store v81 to v84, !3765
        v85 = const unit ()
        br block9(v85)

        block8():
        v86 = const unit ()
        br block9(v86)

        block9(v87: ()):
        br block10(v87)

        block10(v88: ()):
        v89 = get_local ptr { u64, u64 }, result, !3768
        v90 = load v89
        ret { u64, u64 } v90
    }

    pub fn panic_on_unsafe_math_enabled_220() -> bool, !3772 {
        entry():
        v0 = call flags_222(), !3775
        v1 = const u64 1, !3776
        v2 = call binary_and_221(v0, v1), !3779
        v3 = const u64 0, !3780
        v4 = call eq_10(v2, v3), !3783
        ret bool v4
    }

    pub fn binary_and_221(self !3784: u64, other !3785: u64) -> u64, !3788 {
        entry(self: u64, other: u64):
        v0 = and self, other
        ret u64 v0
    }

    pub fn flags_222() -> u64, !3791 {
        entry():
        v0 = asm() -> u64 flag, !3792 {
        }
        ret u64 v0
    }

    pub fn assert_223(condition !3794: bool) -> (), !3797 {
        entry(condition: bool):
        v0 = call not_27(condition), !3800
        cbr v0, block0(), block1(), !3798

        block0():
        v1 = const u64 18446744073709486084, !3801
        v2 = call revert_63(v1), !3804
        v3 = const unit ()
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn overflowing_mul_224(self !3805: u64, right !3806: u64) -> { u64, u64 }, !3809 {
        local { u64, u64 } __anon_0
        local u64 prior_flags
        local mut { u64, u64 } result

        entry(self: u64, right: u64):
        v0 = call disable_panic_on_overflow_225(), !3812
        v1 = get_local ptr u64, prior_flags, !3813
        store v0 to v1, !3813
        v2 = get_local ptr { u64, u64 }, __anon_0, !3814
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        v5 = const u64 0, !3815
        store v5 to v4, !3814
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6
        v8 = const u64 0, !3816
        store v8 to v7, !3814
        v9 = load v2
        v10 = get_local ptr { u64, u64 }, result, !3817
        store v9 to v10, !3817
        v11 = get_local ptr { u64, u64 }, result, !3818
        v12 = asm(product, overflow, left: self, right: right, result_ptr: v11) -> (), !3819 {
            mul    product left right, !3820
            move   overflow of, !3821
            sw     result_ptr overflow i0, !3822
            sw     result_ptr product i1, !3823
        }
        v13 = get_local ptr u64, prior_flags, !3824
        v14 = load v13
        v15 = call set_flags_227(v14), !3827
        v16 = get_local ptr { u64, u64 }, result, !3828
        v17 = load v16
        ret { u64, u64 } v17
    }

    pub fn disable_panic_on_overflow_225() -> u64, !3831 {
        local u64 flag_val
        local u64 prior_flags

        entry():
        v0 = call flags_222(), !3834
        v1 = get_local ptr u64, prior_flags, !3835
        store v0 to v1, !3835
        v2 = get_local ptr u64, prior_flags, !3836
        v3 = load v2
        v4 = const u64 2, !3837
        v5 = call binary_or_226(v3, v4), !3840
        v6 = get_local ptr u64, flag_val, !3841
        store v5 to v6, !3841
        v7 = get_local ptr u64, flag_val, !3842
        v8 = load v7
        v9 = asm(flag_val: v8) -> (), !3843 {
            flag   flag_val, !3844
        }
        v10 = get_local ptr u64, prior_flags, !3845
        v11 = load v10
        ret u64 v11
    }

    pub fn binary_or_226(self !3846: u64, other !3847: u64) -> u64, !3850 {
        entry(self: u64, other: u64):
        v0 = or self, other
        ret u64 v0
    }

    pub fn set_flags_227(new_flags !3851: u64) -> (), !3854 {
        entry(new_flags: u64):
        v0 = asm(new_flags: new_flags) -> (), !3855 {
            flag   new_flags, !3856
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn from_228(components !3857: { u64, u64 }) -> { u64, u64 }, !3860 {
        local { u64, u64 } __anon_0

        entry(components: { u64, u64 }):
        v0 = ptr_to_int components to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3861
        v4 = load v3
        v5 = ptr_to_int components to u64
        v6 = int_to_ptr v5 to ptr { u64, u64 }
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7, !3862
        v9 = load v8
        v10 = get_local ptr { u64, u64 }, __anon_0, !3863
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11
        store v4 to v12, !3863
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13
        store v9 to v14, !3863
        v15 = load v10
        ret { u64, u64 } v15
    }

    pub fn divide_229(self !3864: { u64, u64 }, divisor !3865: { u64, u64 }) -> { u64, u64 }, !3868 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local { u64, u64 } __anon_2
        local mut u64 i
        local mut { u64, u64 } quotient
        local mut { u64, u64 } remainder
        local { u64, u64 } zero

        entry(self: { u64, u64 }, divisor: { u64, u64 }):
        v0 = get_local ptr { u64, u64 }, __anon_0, !3869
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !3869
        v3 = const u64 0, !3870
        store v3 to v2, !3869
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4, !3869
        v6 = const u64 0, !3871
        store v6 to v5, !3869
        v7 = load v0
        v8 = call from_228(v7), !3874
        v9 = get_local ptr { u64, u64 }, zero, !3875
        store v8 to v9, !3875
        v10 = call panic_on_unsafe_math_enabled_220(), !3878
        cbr v10, block0(), block1(), !3876

        block0():
        v11 = get_local ptr { u64, u64 }, zero, !3879
        v12 = load v11
        v13 = call neq_230(divisor, v12), !3882
        v14 = call assert_223(v13), !3885
        v15 = const unit ()
        br block5(v15)

        block1():
        v16 = get_local ptr { u64, u64 }, zero, !3886
        v17 = load v16
        v18 = call eq_231(divisor, v17), !3889
        cbr v18, block2(), block3(), !3887

        block2():
        v19 = get_local ptr { u64, u64 }, zero, !3890
        v20 = load v19
        ret { u64, u64 } v20, !3891

        block3():
        v21 = const unit ()
        br block4(v21)

        block4(v22: ()):
        br block5(v22)

        block5(v23: ()):
        v24 = ptr_to_int self to u64
        v25 = int_to_ptr v24 to ptr { u64, u64 }
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !3728
        v28 = load v27
        v29 = const u64 0, !3892
        v30 = call eq_10(v28, v29), !3895
        cbr v30, block6(), block7(v30), !3896

        block6():
        v31 = ptr_to_int divisor to u64
        v32 = int_to_ptr v31 to ptr { u64, u64 }
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !3728
        v35 = load v34
        v36 = const u64 0, !3897
        v37 = call eq_10(v35, v36), !3900
        br block7(v37), !3896

        block7(v38: bool):
        cbr v38, block8(), block9(), !3896

        block8():
        v39 = ptr_to_int self to u64
        v40 = int_to_ptr v39 to ptr { u64, u64 }
        v41 = const u64 1
        v42 = get_elem_ptr v40, ptr u64, v41, !3741
        v43 = load v42
        v44 = ptr_to_int divisor to u64
        v45 = int_to_ptr v44 to ptr { u64, u64 }
        v46 = const u64 1
        v47 = get_elem_ptr v45, ptr u64, v46, !3741
        v48 = load v47
        v49 = call divide_232(v43, v48), !3903
        v50 = get_local ptr { u64, u64 }, __anon_1, !3904
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr u64, v51, !3904
        v53 = const u64 0, !3905
        store v53 to v52, !3904
        v54 = const u64 1
        v55 = get_elem_ptr v50, ptr u64, v54, !3904
        store v49 to v55, !3904
        v56 = load v50
        v57 = call from_228(v56), !3908
        ret { u64, u64 } v57, !3909

        block9():
        v58 = const unit ()
        br block10(v58)

        block10(v59: ()):
        v60 = call new_233(), !3912
        v61 = get_local ptr { u64, u64 }, quotient, !3913
        store v60 to v61, !3913
        v62 = call new_233(), !3916
        v63 = get_local ptr { u64, u64 }, remainder, !3917
        store v62 to v63, !3917
        v64 = const u64 128, !3918
        v65 = const u64 1, !3919
        v66 = call subtract_211(v64, v65), !3922
        v67 = get_local ptr u64, i, !3923
        store v66 to v67, !3923
        br while()

        while():
        v68 = const bool true, !3924
        cbr v68, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v69 = get_local ptr { u64, u64 }, quotient, !3925
        v70 = load v69
        v71 = const u64 1, !3926
        v72 = call lsh_234(v70, v71), !3929
        v73 = get_local ptr { u64, u64 }, quotient, !3927
        store v72 to v73, !3927
        v74 = get_local ptr { u64, u64 }, remainder, !3930
        v75 = load v74
        v76 = const u64 1, !3931
        v77 = call lsh_234(v75, v76), !3934
        v78 = get_local ptr { u64, u64 }, remainder, !3932
        store v77 to v78, !3932
        v79 = get_local ptr { u64, u64 }, remainder, !3935
        v80 = const u64 1
        v81 = get_elem_ptr v79, ptr u64, v80, !3741
        v82 = load v81
        v83 = get_local ptr u64, i, !3936
        v84 = load v83
        v85 = call rsh_236(self, v84), !3939
        v86 = get_local ptr { u64, u64 }, __anon_2
        store v85 to v86
        v87 = const u64 1
        v88 = get_elem_ptr v86, ptr u64, v87, !3741
        v89 = load v88
        v90 = const u64 1, !3940
        v91 = call binary_and_221(v89, v90), !3943
        v92 = call binary_or_226(v82, v91), !3946
        v93 = get_local ptr { u64, u64 }, remainder, !3947
        v94 = const u64 1
        v95 = get_elem_ptr v93, ptr u64, v94, !3947
        store v92 to v95, !3947
        v96 = get_local ptr { u64, u64 }, remainder, !3948
        v97 = load v96
        v98 = call ge_237(v97, divisor), !3951
        cbr v98, block11(), block12(), !3949

        block11():
        v99 = get_local ptr { u64, u64 }, remainder, !3952
        v100 = load v99
        v101 = call subtract_239(v100, divisor), !3955
        v102 = get_local ptr { u64, u64 }, remainder, !3953
        store v101 to v102, !3953
        v103 = get_local ptr { u64, u64 }, quotient, !3956
        v104 = const u64 1
        v105 = get_elem_ptr v103, ptr u64, v104, !3741
        v106 = load v105
        v107 = const u64 1, !3957
        v108 = call binary_or_226(v106, v107), !3960
        v109 = get_local ptr { u64, u64 }, quotient, !3961
        v110 = const u64 1
        v111 = get_elem_ptr v109, ptr u64, v110, !3961
        store v108 to v111, !3961
        v112 = const unit ()
        br block13(v112)

        block12():
        v113 = const unit ()
        br block13(v113)

        block13(v114: ()):
        v115 = get_local ptr u64, i, !3962
        v116 = load v115
        v117 = const u64 0, !3963
        v118 = call eq_10(v116, v117), !3966
        cbr v118, block14(), block15(), !3964

        block14():
        br while_break()

        block15():
        v119 = const unit ()
        br block16(v119)

        block16(v120: ()):
        v121 = get_local ptr u64, i, !3967
        v122 = load v121
        v123 = const u64 1, !3968
        v124 = call subtract_211(v122, v123), !3971
        v125 = get_local ptr u64, i, !3969
        store v124 to v125, !3969
        br while()

        end_while():
        v126 = get_local ptr { u64, u64 }, quotient, !3972
        v127 = load v126
        ret { u64, u64 } v127
    }

    pub fn neq_230(self !1164: { u64, u64 }, other !1165: { u64, u64 }) -> bool, !3973 {
        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = call eq_231(self, other), !3974
        v1 = call not_27(v0), !3975
        ret bool v1
    }

    pub fn eq_231(self !3976: { u64, u64 }, other !3977: { u64, u64 }) -> bool, !3980 {
        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !3741
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { u64, u64 }
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7, !3741
        v9 = load v8
        v10 = call eq_10(v4, v9), !3983
        cbr v10, block0(), block1(v10), !3984

        block0():
        v11 = ptr_to_int self to u64
        v12 = int_to_ptr v11 to ptr { u64, u64 }
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !3728
        v15 = load v14
        v16 = ptr_to_int other to u64
        v17 = int_to_ptr v16 to ptr { u64, u64 }
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !3728
        v20 = load v19
        v21 = call eq_10(v15, v20), !3987
        br block1(v21), !3984

        block1(v22: bool):
        ret bool v22
    }

    pub fn divide_232(self !3988: u64, other !3989: u64) -> u64, !3992 {
        entry(self: u64, other: u64):
        v0 = div self, other
        ret u64 v0
    }

    pub fn new_233() -> { u64, u64 }, !3995 {
        local { u64, u64 } __anon_0

        entry():
        v0 = get_local ptr { u64, u64 }, __anon_0, !3996
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 0, !3997
        store v3 to v2, !3996
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0, !3998
        store v6 to v5, !3996
        v7 = load v0
        ret { u64, u64 } v7
    }

    pub fn lsh_234(self !3999: { u64, u64 }, rhs !4000: u64) -> { u64, u64 }, !4003 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local u64 highest_lower_bits
        local u64 lower
        local u64 upper

        entry(self: { u64, u64 }, rhs: u64):
        v0 = const u64 128, !4004
        v1 = call ge_88(rhs, v0), !4007
        cbr v1, block0(), block1(), !4005

        block0():
        v2 = call new_233(), !4010
        ret { u64, u64 } v2, !4011

        block1():
        v3 = const unit ()
        br block2(v3)

        block2(v4: ()):
        v5 = const u64 64, !4012
        v6 = call ge_88(rhs, v5), !4015
        cbr v6, block3(), block4(), !4013

        block3():
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3741
        v11 = load v10
        v12 = const u64 64, !4016
        v13 = call subtract_211(rhs, v12), !4019
        v14 = call lsh_235(v11, v13), !4022
        v15 = get_local ptr { u64, u64 }, __anon_0, !4023
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !4023
        store v14 to v17, !4023
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !4023
        v20 = const u64 0, !4024
        store v20 to v19, !4023
        v21 = load v15
        v22 = call from_228(v21), !4027
        ret { u64, u64 } v22, !4028

        block4():
        v23 = const unit ()
        br block5(v23)

        block5(v24: ()):
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, u64 }
        v27 = const u64 1
        v28 = get_elem_ptr v26, ptr u64, v27, !3741
        v29 = load v28
        v30 = const u64 64, !4029
        v31 = call subtract_211(v30, rhs), !4032
        v32 = call rsh_37(v29, v31), !4035
        v33 = get_local ptr u64, highest_lower_bits, !4036
        store v32 to v33, !4036
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u64, u64 }
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !3728
        v38 = load v37
        v39 = call lsh_235(v38, rhs), !4039
        v40 = get_local ptr u64, highest_lower_bits, !4040
        v41 = load v40
        v42 = call add_38(v39, v41), !4043
        v43 = get_local ptr u64, upper, !4044
        store v42 to v43, !4044
        v44 = ptr_to_int self to u64
        v45 = int_to_ptr v44 to ptr { u64, u64 }
        v46 = const u64 1
        v47 = get_elem_ptr v45, ptr u64, v46, !3741
        v48 = load v47
        v49 = call lsh_235(v48, rhs), !4047
        v50 = get_local ptr u64, lower, !4048
        store v49 to v50, !4048
        v51 = get_local ptr u64, upper, !4049
        v52 = load v51
        v53 = get_local ptr u64, lower, !4050
        v54 = load v53
        v55 = get_local ptr { u64, u64 }, __anon_1, !4051
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !4051
        store v52 to v57, !4051
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !4051
        store v54 to v59, !4051
        v60 = load v55
        v61 = call from_228(v60), !4054
        ret { u64, u64 } v61
    }

    pub fn lsh_235(self !4055: u64, other !4056: u64) -> u64, !4059 {
        entry(self: u64, other: u64):
        v0 = lsh self, other
        ret u64 v0
    }

    pub fn rsh_236(self !4060: { u64, u64 }, rhs !4061: u64) -> { u64, u64 }, !4064 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local u64 lower
        local u64 lowest_upper_bits
        local u64 upper

        entry(self: { u64, u64 }, rhs: u64):
        v0 = const u64 128, !4065
        v1 = call ge_88(rhs, v0), !4068
        cbr v1, block0(), block1(), !4066

        block0():
        v2 = call new_233(), !4071
        ret { u64, u64 } v2, !4072

        block1():
        v3 = const unit ()
        br block2(v3)

        block2(v4: ()):
        v5 = const u64 64, !4073
        v6 = call ge_88(rhs, v5), !4076
        cbr v6, block3(), block4(), !4074

        block3():
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !3728
        v11 = load v10
        v12 = const u64 64, !4077
        v13 = call subtract_211(rhs, v12), !4080
        v14 = call rsh_37(v11, v13), !4083
        v15 = get_local ptr { u64, u64 }, __anon_0, !4084
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !4084
        v18 = const u64 0, !4085
        store v18 to v17, !4084
        v19 = const u64 1
        v20 = get_elem_ptr v15, ptr u64, v19, !4084
        store v14 to v20, !4084
        v21 = load v15
        v22 = call from_228(v21), !4088
        ret { u64, u64 } v22, !4089

        block4():
        v23 = const unit ()
        br block5(v23)

        block5(v24: ()):
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, u64 }
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !3728
        v29 = load v28
        v30 = const u64 64, !4090
        v31 = call subtract_211(v30, rhs), !4093
        v32 = call lsh_235(v29, v31), !4096
        v33 = get_local ptr u64, lowest_upper_bits, !4097
        store v32 to v33, !4097
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u64, u64 }
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !3728
        v38 = load v37
        v39 = call rsh_37(v38, rhs), !4100
        v40 = get_local ptr u64, upper, !4101
        store v39 to v40, !4101
        v41 = ptr_to_int self to u64
        v42 = int_to_ptr v41 to ptr { u64, u64 }
        v43 = const u64 1
        v44 = get_elem_ptr v42, ptr u64, v43, !3741
        v45 = load v44
        v46 = call rsh_37(v45, rhs), !4104
        v47 = get_local ptr u64, lowest_upper_bits, !4105
        v48 = load v47
        v49 = call add_38(v46, v48), !4108
        v50 = get_local ptr u64, lower, !4109
        store v49 to v50, !4109
        v51 = get_local ptr u64, upper, !4110
        v52 = load v51
        v53 = get_local ptr u64, lower, !4111
        v54 = load v53
        v55 = get_local ptr { u64, u64 }, __anon_1, !4112
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !4112
        store v52 to v57, !4112
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !4112
        store v54 to v59, !4112
        v60 = load v55
        v61 = call from_228(v60), !4115
        ret { u64, u64 } v61
    }

    pub fn ge_237(self !1992: { u64, u64 }, other !1993: { u64, u64 }) -> bool, !4116 {
        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = call gt_238(self, other), !4117
        cbr v0, block1(v0), block0(), !2000

        block0():
        v1 = call eq_231(self, other), !4118
        br block1(v1), !2000

        block1(v2: bool):
        ret bool v2
    }

    pub fn gt_238(self !4119: { u64, u64 }, other !4120: { u64, u64 }) -> bool, !4123 {
        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3728
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { u64, u64 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !3728
        v9 = load v8
        v10 = call gt_89(v4, v9), !4126
        cbr v10, block1(v10), block0(), !4127

        block0():
        v11 = ptr_to_int self to u64
        v12 = int_to_ptr v11 to ptr { u64, u64 }
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !3728
        v15 = load v14
        v16 = ptr_to_int other to u64
        v17 = int_to_ptr v16 to ptr { u64, u64 }
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !3728
        v20 = load v19
        v21 = call eq_10(v15, v20), !4130
        cbr v21, block2(), block3(v21), !4131

        block1(v22: bool):
        ret bool v22

        block2():
        v23 = ptr_to_int self to u64
        v24 = int_to_ptr v23 to ptr { u64, u64 }
        v25 = const u64 1
        v26 = get_elem_ptr v24, ptr u64, v25, !3741
        v27 = load v26
        v28 = ptr_to_int other to u64
        v29 = int_to_ptr v28 to ptr { u64, u64 }
        v30 = const u64 1
        v31 = get_elem_ptr v29, ptr u64, v30, !3741
        v32 = load v31
        v33 = call gt_89(v27, v32), !4134
        br block3(v33), !4131

        block3(v34: bool):
        br block1(v34), !4127
    }

    pub fn subtract_239(self !4135: { u64, u64 }, other !4136: { u64, u64 }) -> { u64, u64 }, !4139 {
        local { u64, u64 } __anon_0
        local mut u64 lower
        local mut u64 upper

        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = call panic_on_overflow_enabled_240(), !4142
        cbr v0, block0(), block1(), !4140

        block0():
        v1 = call lt_241(self, other), !4145
        v2 = call not_27(v1), !4148
        v3 = call assert_223(v2), !4151
        v4 = const unit ()
        br block2(v4)

        block1():
        v5 = const unit ()
        br block2(v5)

        block2(v6: ()):
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !3728
        v11 = load v10
        v12 = ptr_to_int other to u64
        v13 = int_to_ptr v12 to ptr { u64, u64 }
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !3728
        v16 = load v15
        v17 = call subtract_211(v11, v16), !4154
        v18 = get_local ptr u64, upper, !4155
        store v17 to v18, !4155
        v19 = get_local ptr u64, lower, !4156
        v20 = const u64 0, !4157
        store v20 to v19, !4156
        v21 = ptr_to_int self to u64
        v22 = int_to_ptr v21 to ptr { u64, u64 }
        v23 = const u64 1
        v24 = get_elem_ptr v22, ptr u64, v23, !3741
        v25 = load v24
        v26 = ptr_to_int other to u64
        v27 = int_to_ptr v26 to ptr { u64, u64 }
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr u64, v28, !3741
        v30 = load v29
        v31 = call lt_86(v25, v30), !4160
        cbr v31, block3(), block4(), !4158

        block3():
        v32 = call max_242(), !4163
        v33 = ptr_to_int other to u64
        v34 = int_to_ptr v33 to ptr { u64, u64 }
        v35 = const u64 1
        v36 = get_elem_ptr v34, ptr u64, v35, !3741
        v37 = load v36
        v38 = ptr_to_int self to u64
        v39 = int_to_ptr v38 to ptr { u64, u64 }
        v40 = const u64 1
        v41 = get_elem_ptr v39, ptr u64, v40, !3741
        v42 = load v41
        v43 = call subtract_211(v37, v42), !4166
        v44 = const u64 1, !4167
        v45 = call subtract_211(v43, v44), !4170
        v46 = call subtract_211(v32, v45), !4173
        v47 = get_local ptr u64, lower, !4174
        store v46 to v47, !4174
        v48 = get_local ptr u64, upper, !4175
        v49 = load v48
        v50 = const u64 1, !4176
        v51 = call subtract_211(v49, v50), !4179
        v52 = get_local ptr u64, upper, !4177
        store v51 to v52, !4177
        v53 = const unit ()
        br block5(v53)

        block4():
        v54 = ptr_to_int self to u64
        v55 = int_to_ptr v54 to ptr { u64, u64 }
        v56 = const u64 1
        v57 = get_elem_ptr v55, ptr u64, v56, !3741
        v58 = load v57
        v59 = ptr_to_int other to u64
        v60 = int_to_ptr v59 to ptr { u64, u64 }
        v61 = const u64 1
        v62 = get_elem_ptr v60, ptr u64, v61, !3741
        v63 = load v62
        v64 = call subtract_211(v58, v63), !4182
        v65 = get_local ptr u64, lower, !4183
        store v64 to v65, !4183
        v66 = const unit ()
        br block5(v66)

        block5(v67: ()):
        v68 = get_local ptr u64, upper, !4184
        v69 = load v68
        v70 = get_local ptr u64, lower, !4185
        v71 = load v70
        v72 = get_local ptr { u64, u64 }, __anon_0, !4186
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73
        store v69 to v74, !4186
        v75 = const u64 1
        v76 = get_elem_ptr v72, ptr u64, v75
        store v71 to v76, !4186
        v77 = load v72
        ret { u64, u64 } v77
    }

    pub fn panic_on_overflow_enabled_240() -> bool, !4189 {
        entry():
        v0 = call flags_222(), !4192
        v1 = const u64 2, !3837
        v2 = call binary_and_221(v0, v1), !4195
        v3 = const u64 0, !4196
        v4 = call eq_10(v2, v3), !4199
        ret bool v4
    }

    pub fn lt_241(self !4200: { u64, u64 }, other !4201: { u64, u64 }) -> bool, !4204 {
        entry(self: { u64, u64 }, other: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3728
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { u64, u64 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !3728
        v9 = load v8
        v10 = call lt_86(v4, v9), !4207
        cbr v10, block1(v10), block0(), !4208

        block0():
        v11 = ptr_to_int self to u64
        v12 = int_to_ptr v11 to ptr { u64, u64 }
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !3728
        v15 = load v14
        v16 = ptr_to_int other to u64
        v17 = int_to_ptr v16 to ptr { u64, u64 }
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !3728
        v20 = load v19
        v21 = call eq_10(v15, v20), !4211
        cbr v21, block2(), block3(v21), !4212

        block1(v22: bool):
        ret bool v22

        block2():
        v23 = ptr_to_int self to u64
        v24 = int_to_ptr v23 to ptr { u64, u64 }
        v25 = const u64 1
        v26 = get_elem_ptr v24, ptr u64, v25, !3741
        v27 = load v26
        v28 = ptr_to_int other to u64
        v29 = int_to_ptr v28 to ptr { u64, u64 }
        v30 = const u64 1
        v31 = get_elem_ptr v29, ptr u64, v30, !3741
        v32 = load v31
        v33 = call lt_86(v27, v32), !4215
        br block3(v33), !4212

        block3(v34: bool):
        br block1(v34), !4208
    }

    pub fn max_242() -> u64, !4218 {
        entry():
        v0 = const u64 18446744073709551615, !4219
        ret u64 v0
    }

    pub fn as_u64_243(self !4220: { u64, u64 }) -> { u64, ( u64 | { u64 } ) }, !4223 {
        local { u64, ( u64 | { u64 } ) } __anon_0
        local { u64, ( u64 | { u64 } ) } __anon_1
        local { u64 } __anon_2
        local u64 __matched_value_1

        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3728
        v4 = load v3
        v5 = get_local ptr u64, __matched_value_1, !4224
        store v4 to v5, !4224
        v6 = get_local ptr u64, __matched_value_1, !4225
        v7 = load v6
        v8 = const u64 0, !4226
        v9 = call eq_10(v7, v8), !4229
        cbr v9, block0(), block1(), !4227

        block0():
        v10 = get_local ptr { u64, ( u64 | { u64 } ) }, __anon_0, !1756
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !1756
        v13 = const u64 0, !1756
        store v13 to v12, !1756
        v14 = ptr_to_int self to u64
        v15 = int_to_ptr v14 to ptr { u64, u64 }
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr u64, v16, !3741
        v18 = load v17
        v19 = const u64 1
        v20 = const u64 0
        v21 = get_elem_ptr v10, ptr u64, v19, v20, !1756
        store v18 to v21, !1756
        v22 = load v10
        br block2(v22)

        block1():
        v23 = get_local ptr { u64, ( u64 | { u64 } ) }, __anon_1, !1756
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !1756
        v26 = const u64 1, !1756
        store v26 to v25, !1756
        v27 = get_local ptr { u64 }, __anon_2, !4230
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !4230
        v30 = const u64 0, !4230
        store v30 to v29, !4230
        v31 = load v27
        v32 = const u64 1
        v33 = const u64 1
        v34 = get_elem_ptr v23, ptr { u64 }, v32, v33, !1756
        store v31 to v34, !1756
        v35 = load v23
        br block2(v35)

        block2(v36: { u64, ( u64 | { u64 } ) }):
        ret { u64, ( u64 | { u64 } ) } v36
    }

    pub fn log_244(value !1547: { u64 }) -> (), !4231 {
        entry(value: { u64 }):
        v0 = call encode_245(value), !1551
        v1 = const u64 6987413341206404123
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_245(item !1456: { u64 }) -> slice, !4232 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !4233
        v1 = call abi_encode_246(item, v0), !4234
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !4235
        ret slice v5
    }

    pub fn abi_encode_246(self !3141: { u64 }, buffer !35: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4237 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !4238
        store self to v0, !4238
        v1 = get_local ptr { u64 }, __matched_value_1, !3146
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3146
        v4 = load v3
        v5 = const u64 0, !3146
        v6 = call eq_10(v4, v5), !4241
        cbr v6, block0(), block1(), !4239

        block0():
        v7 = const u64 0, !2130
        v8 = call abi_encode_62(v7, buffer), !4242
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !4238
        revert v9, !4238

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !4243
        store v10 to v11, !4243
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !4244
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn max_protocol_fee_of_amount_247(self !4245: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount !4246: u64) -> u64, !4249 {
        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 8
        v3 = get_elem_ptr v1, ptr u64, v2, !4250
        v4 = load v3
        v5 = ptr_to_int self to u64
        v6 = int_to_ptr v5 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v7 = const u64 9
        v8 = get_elem_ptr v6, ptr u64, v7, !4251
        v9 = load v8
        v10 = call max_248(v4, v9), !4254
        v11 = call multiply_39(amount, v10), !4257
        v12 = const u64 10000, !4258
        v13 = call divide_232(v11, v12), !4261
        ret u64 v13
    }

    pub fn max_248(a !4262: u64, b !4263: u64) -> u64, !4266 {
        entry(a: u64, b: u64):
        v0 = call gt_89(a, b), !4269
        cbr v0, block0(), block1(), !4267

        block0():
        br block2(a)

        block1():
        br block2(b)

        block2(v1: u64):
        ret u64 v1
    }

    pub fn not_249(self !4271: { u64 }) -> { u64 }, !4274 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { u64 } __matched_value_2

        entry(self: { u64 }):
        v0 = get_local ptr { u64 }, __matched_value_2, !4275
        store self to v0, !4275
        v1 = get_local ptr { u64 }, __matched_value_2, !4276
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4276
        v4 = load v3
        v5 = const u64 0, !4276
        v6 = call eq_10(v4, v5), !4279
        cbr v6, block0(), block1(), !4277

        block0():
        v7 = get_local ptr { u64 }, __anon_0, !4280
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !4280
        v10 = const u64 1, !4280
        store v10 to v9, !4280
        v11 = load v7
        br block5(v11)

        block1():
        v12 = get_local ptr { u64 }, __matched_value_2, !4276
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !4276
        v15 = load v14
        v16 = const u64 1, !4276
        v17 = call eq_10(v15, v16), !4283
        cbr v17, block2(), block3(), !4281

        block2():
        v18 = get_local ptr { u64 }, __anon_1, !4280
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !4280
        v21 = const u64 0, !4280
        store v21 to v20, !4280
        v22 = load v18
        br block4(v22)

        block3():
        v23 = const u64 14757395258967588866, !4275
        revert v23, !4275

        block4(v24: { u64 }):
        br block5(v24)

        block5(v25: { u64 }):
        ret { u64 } v25
    }

    fn remove_order_250(user !4284: { u64, ( { b256 } | { b256 } ) }, order_id !4285: b256) -> (), !4288 {
        local { b256, u64, b256 } __anon_0
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_1
        local { b256, u64, b256 } __anon_10
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_11
        local { b256, u64, b256 } __anon_12
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_6
        local { b256, u64, b256 } __anon_7
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_8
        local { b256, u64, b256 } __anon_9
        local u64 index
        local b256 last_element
        local u64 order_count

        entry(user: { u64, ( { b256 } | { b256 } ) }, order_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !4289
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !4289
        store v3 to v2, !4289
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !4289
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !4289
        store v9 to v8, !4289
        v10 = load v0
        v11 = call remove_251(v10, order_id), !4292
        v12 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_1, !2493
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !2493
        v15 = const u64 8, !2493
        store v15 to v14, !2493
        v16 = const u64 1
        v17 = const u64 8
        v18 = get_elem_ptr v12, ptr b256, v16, v17, !2493
        store order_id to v18, !2493
        v19 = load v12
        v20 = call require_158(v11, v19), !4295
        v21 = get_local ptr { b256, u64, b256 }, __anon_2, !4296
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr b256, v22
        v24 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !4296
        store v24 to v23, !4296
        v25 = const u64 1
        v26 = get_elem_ptr v21, ptr u64, v25
        v27 = const u64 0
        store v27 to v26, !4296
        v28 = const u64 2
        v29 = get_elem_ptr v21, ptr b256, v28
        v30 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !4296
        store v30 to v29, !4296
        v31 = load v21
        v32 = call remove_253(v31, order_id), !4299
        v33 = get_local ptr { b256, u64, b256 }, __anon_3, !4300
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !4300
        store v36 to v35, !4300
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !4300
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !4300
        store v42 to v41, !4300
        v43 = load v33
        v44 = call get_264(v43, user), !4303
        v45 = call get_261(v44, order_id), !4306
        v46 = call read_255(v45), !4309
        v47 = get_local ptr u64, index, !4310
        store v46 to v47, !4310
        v48 = get_local ptr { b256, u64, b256 }, __anon_4, !4311
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr b256, v49
        v51 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4311
        store v51 to v50, !4311
        v52 = const u64 1
        v53 = get_elem_ptr v48, ptr u64, v52
        v54 = const u64 0
        store v54 to v53, !4311
        v55 = const u64 2
        v56 = get_elem_ptr v48, ptr b256, v55
        v57 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4311
        store v57 to v56, !4311
        v58 = load v48
        v59 = call get_270(v58, user), !4314
        v60 = call len_267(v59), !4317
        v61 = get_local ptr u64, order_count, !4318
        store v60 to v61, !4318
        v62 = get_local ptr { b256, u64, b256 }, __anon_5, !4319
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr b256, v63
        v65 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !4319
        store v65 to v64, !4319
        v66 = const u64 1
        v67 = get_elem_ptr v62, ptr u64, v66
        v68 = const u64 0
        store v68 to v67, !4319
        v69 = const u64 2
        v70 = get_elem_ptr v62, ptr b256, v69
        v71 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !4319
        store v71 to v70, !4319
        v72 = load v62
        v73 = call get_264(v72, user), !4322
        v74 = call remove_273(v73, order_id), !4325
        v75 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_6, !2493
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr u64, v76, !2493
        v78 = const u64 8, !2493
        store v78 to v77, !2493
        v79 = const u64 1
        v80 = const u64 8
        v81 = get_elem_ptr v75, ptr b256, v79, v80, !2493
        store order_id to v81, !2493
        v82 = load v75
        v83 = call require_158(v74, v82), !4328
        v84 = get_local ptr u64, order_count, !4329
        v85 = load v84
        v86 = const u64 1, !4330
        v87 = call eq_10(v85, v86), !4333
        cbr v87, block0(), block1(), !4331

        block0():
        v88 = get_local ptr { b256, u64, b256 }, __anon_7, !4334
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr b256, v89
        v91 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4334
        store v91 to v90, !4334
        v92 = const u64 1
        v93 = get_elem_ptr v88, ptr u64, v92
        v94 = const u64 0
        store v94 to v93, !4334
        v95 = const u64 2
        v96 = get_elem_ptr v88, ptr b256, v95
        v97 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4334
        store v97 to v96, !4334
        v98 = load v88
        v99 = call get_270(v98, user), !4337
        v100 = call pop_276(v99), !4340
        v101 = call unwrap_275(v100), !4343
        v102 = call eq_67(v101, order_id), !4346
        v103 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_8, !2493
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !2493
        v106 = const u64 8, !2493
        store v106 to v105, !2493
        v107 = const u64 1
        v108 = const u64 8
        v109 = get_elem_ptr v103, ptr b256, v107, v108, !2493
        store order_id to v109, !2493
        v110 = load v103
        v111 = call require_158(v102, v110), !4349
        v112 = const unit ()
        br block2(v112)

        block1():
        v113 = get_local ptr { b256, u64, b256 }, __anon_9, !4350
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr b256, v114
        v116 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4350
        store v116 to v115, !4350
        v117 = const u64 1
        v118 = get_elem_ptr v113, ptr u64, v117
        v119 = const u64 0
        store v119 to v118, !4350
        v120 = const u64 2
        v121 = get_elem_ptr v113, ptr b256, v120
        v122 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4350
        store v122 to v121, !4350
        v123 = load v113
        v124 = call get_270(v123, user), !4353
        v125 = call last_288(v124), !4356
        v126 = call unwrap_287(v125), !4359
        v127 = call read_284(v126), !4362
        v128 = get_local ptr b256, last_element, !4363
        store v127 to v128, !4363
        v129 = get_local ptr { b256, u64, b256 }, __anon_10, !4364
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr b256, v130
        v132 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4364
        store v132 to v131, !4364
        v133 = const u64 1
        v134 = get_elem_ptr v129, ptr u64, v133
        v135 = const u64 0
        store v135 to v134, !4364
        v136 = const u64 2
        v137 = get_elem_ptr v129, ptr b256, v136
        v138 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !4364
        store v138 to v137, !4364
        v139 = load v129
        v140 = call get_270(v139, user), !4367
        v141 = get_local ptr u64, index, !4368
        v142 = load v141
        v143 = call swap_remove_293(v140, v142), !4371
        v144 = call eq_67(v143, order_id), !4374
        v145 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_11, !2493
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr u64, v146, !2493
        v148 = const u64 8, !2493
        store v148 to v147, !2493
        v149 = const u64 1
        v150 = const u64 8
        v151 = get_elem_ptr v145, ptr b256, v149, v150, !2493
        store order_id to v151, !2493
        v152 = load v145
        v153 = call require_158(v144, v152), !4377
        v154 = get_local ptr { b256, u64, b256 }, __anon_12, !4378
        v155 = const u64 0
        v156 = get_elem_ptr v154, ptr b256, v155
        v157 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !4378
        store v157 to v156, !4378
        v158 = const u64 1
        v159 = get_elem_ptr v154, ptr u64, v158
        v160 = const u64 0
        store v160 to v159, !4378
        v161 = const u64 2
        v162 = get_elem_ptr v154, ptr b256, v161
        v163 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !4378
        store v163 to v162, !4378
        v164 = load v154
        v165 = call get_264(v164, user), !4381
        v166 = get_local ptr b256, last_element, !4382
        v167 = load v166
        v168 = get_local ptr u64, index, !4383
        v169 = load v168
        v170 = call insert_296(v165, v167, v169), !4386
        v171 = const unit ()
        br block2(v171)

        block2(v172: ()):
        v173 = const unit ()
        ret () v173
    }

    pub fn remove_251(self !4387: { b256, u64, b256 }, key !4388: b256) -> bool, !4391 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256):
        v0 = call field_id_156(self), !4394
        v1 = get_local ptr { b256, b256 }, __anon_0, !4395
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4395
        store key to v3, !4395
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4395
        store v0 to v5, !4395
        v6 = load v1
        v7 = call sha256_132(v6), !4398
        v8 = get_local ptr b256, key_, !4399
        store v7 to v8, !4399
        v9 = get_local ptr b256, key_, !4400
        v10 = load v9
        v11 = const u64 0, !4401
        v12 = call clear_252(v10, v11), !4404
        ret bool v12
    }

    pub fn clear_252(slot !4405: b256, offset !4406: u64) -> bool, !4409 {
        local { b256, u64, u64 } __tuple_3
        local { b256, u64, u64 } __tuple_3_
        local u64 _place_in_slot
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot

        entry(slot: b256, offset: u64):
        v0 = const u64 112
        v1 = const u64 0, !4410
        v2 = call eq_10(v0, v1), !4413
        cbr v2, block0(), block1(), !4411

        block0():
        v3 = const bool true, !4414
        ret bool v3, !4415

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_127(slot, offset), !4418
        v7 = get_local ptr { b256, u64, u64 }, __tuple_3, !4419
        store v6 to v7, !4419
        v8 = get_local ptr { b256, u64, u64 }, __tuple_3, !4419
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        store v9 to v10, !4419
        v11 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !4419
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !4419
        store v14 to v15, !4419
        v16 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !4419
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !4419
        store v19 to v20, !4419
        v21 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !4419
        v24 = load v23
        v25 = get_local ptr u64, _place_in_slot, !4419
        store v24 to v25, !4419
        v26 = get_local ptr b256, offset_slot, !4420
        v27 = load v26
        v28 = get_local ptr u64, number_of_slots, !4421
        v29 = load v28
        v30 = get_local ptr b256, key_for_storage, !4422
        store v27 to v30, !4422
        state_clear key v30, v29, !4422
        ret bool v31
    }

    pub fn remove_253(self !4387: { b256, u64, b256 }, key !4388: b256) -> bool, !4423 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256):
        v0 = call field_id_168(self), !4424
        v1 = get_local ptr { b256, b256 }, __anon_0, !4395
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4395
        store key to v3, !4395
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4395
        store v0 to v5, !4395
        v6 = load v1
        v7 = call sha256_132(v6), !4425
        v8 = get_local ptr b256, key_, !4399
        store v7 to v8, !4399
        v9 = get_local ptr b256, key_, !4400
        v10 = load v9
        v11 = const u64 0, !4401
        v12 = call clear_254(v10, v11), !4426
        ret bool v12
    }

    pub fn clear_254(slot !4405: b256, offset !4406: u64) -> bool, !4427 {
        local { b256, u64, u64 } __tuple_3
        local { b256, u64, u64 } __tuple_3_
        local u64 _place_in_slot
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot

        entry(slot: b256, offset: u64):
        v0 = const u64 1
        v1 = const u64 0, !4410
        v2 = call eq_10(v0, v1), !4428
        cbr v2, block0(), block1(), !4411

        block0():
        v3 = const bool true, !4414
        ret bool v3, !4415

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_36(slot, offset), !4429
        v7 = get_local ptr { b256, u64, u64 }, __tuple_3, !4419
        store v6 to v7, !4419
        v8 = get_local ptr { b256, u64, u64 }, __tuple_3, !4419
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        store v9 to v10, !4419
        v11 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !4419
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !4419
        store v14 to v15, !4419
        v16 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !4419
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !4419
        store v19 to v20, !4419
        v21 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !4419
        v24 = load v23
        v25 = get_local ptr u64, _place_in_slot, !4419
        store v24 to v25, !4419
        v26 = get_local ptr b256, offset_slot, !4420
        v27 = load v26
        v28 = get_local ptr u64, number_of_slots, !4421
        v29 = load v28
        v30 = get_local ptr b256, key_for_storage, !4422
        store v27 to v30, !4422
        state_clear key v30, v29, !4422
        ret bool v31
    }

    pub fn read_255(self !3203: { b256, u64, b256 }) -> u64, !4430 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_259(self), !4431
        v1 = call offset_260(self), !4432
        v2 = call read_257(v0, v1), !4433
        v3 = call unwrap_256(v2), !4434
        ret u64 v3
    }

    pub fn unwrap_256(self !2059: { u64, ( () | u64 ) }) -> u64, !4435 {
        local { u64, ( () | u64 ) } __matched_value_4
        local u64 inner_value

        entry(self: { u64, ( () | u64 ) }):
        v0 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !4436
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u64, v8, v9
        v11 = load v10
        v12 = get_local ptr u64, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr u64, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !4437
        br block2(v16)

        block2(v17: u64):
        ret u64 v17
    }

    pub fn read_257(slot !1259: b256, offset !1260: u64) -> { u64, ( () | u64 ) }, !4438 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, ( () | u64 ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 8
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !4439
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | u64 ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_258(slot, offset), !4440
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !4441
        v34 = call alloc_47(v33), !4442
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !4443
        v54 = call read_17(v53), !4444
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr u64, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | u64 ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v64
    }

    fn slot_calculator_258(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !4445 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 8
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !4446
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !4447
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !4448
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !4449
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !4450
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool false
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !4451
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !4452
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !4453
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !4454
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !4455
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !4456
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !4457
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !4458
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !4459
        v51 = call subtract_44(v47, v50), !4460
        v52 = call add_43(v44, v51), !4461
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !4462
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn slot_259(self !1446: { b256, u64, b256 }) -> b256, !4463 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_260(self !1451: { b256, u64, b256 }) -> u64, !4464 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn get_261(self !2534: { b256, u64, b256 }, key !2535: b256) -> { b256, u64, b256 }, !4465 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256):
        v0 = call field_id_262(self), !4466
        v1 = get_local ptr { b256, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_132(v6), !4467
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_263(v10, v13, v12), !4468
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_262(self !2881: { b256, u64, b256 }) -> b256, !4469 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn new_263(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !4470 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn get_264(self !2534: { b256, u64, b256 }, key !2535: { u64, ( { b256 } | { b256 } ) }) -> { b256, u64, b256 }, !4471 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }):
        v0 = call field_id_265(self), !4472
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_189(v6), !4473
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_266(v10, v13, v12), !4474
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_265(self !2881: { b256, u64, b256 }) -> b256, !4475 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn new_266(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !4476 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn len_267(self !4478: { b256, u64, b256 }) -> u64, !4481 {
        entry(self: { b256, u64, b256 }):
        v0 = call field_id_269(self), !4484
        v1 = const u64 0, !4485
        v2 = call read_257(v0, v1), !4488
        v3 = const u64 0, !4489
        v4 = call unwrap_or_268(v2, v3), !4492
        ret u64 v4
    }

    pub fn unwrap_or_268(self !1229: { u64, ( () | u64 ) }, default !1230: u64) -> u64, !4493 {
        local { u64, ( () | u64 ) } __matched_value_5
        local u64 x

        entry(self: { u64, ( () | u64 ) }, default: u64):
        v0 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !1234
        store self to v0, !1234
        v1 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !1235
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1235
        v4 = load v3
        v5 = const u64 1, !1235
        v6 = call eq_10(v4, v5), !4494
        cbr v6, block0(), block1(), !1236

        block0():
        v7 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !1235
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u64, v8, v9
        v11 = load v10
        v12 = get_local ptr u64, x, !1239
        store v11 to v12, !1239
        v13 = get_local ptr u64, x, !1240
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | u64 ) }, __matched_value_5, !1235
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1235
        v18 = load v17
        v19 = const u64 0, !1235
        v20 = call eq_10(v18, v19), !4495
        cbr v20, block2(), block3(), !1241

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !1234
        revert v21, !1234

        block4(v22: u64):
        br block5(v22)

        block5(v23: u64):
        ret u64 v23
    }

    pub fn field_id_269(self !2881: { b256, u64, b256 }) -> b256, !4496 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn get_270(self !2534: { b256, u64, b256 }, key !2535: { u64, ( { b256 } | { b256 } ) }) -> { b256, u64, b256 }, !4497 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }):
        v0 = call field_id_271(self), !4498
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_189(v6), !4499
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_272(v10, v13, v12), !4500
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_271(self !2881: { b256, u64, b256 }) -> b256, !4501 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn new_272(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !4502 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn remove_273(self !4387: { b256, u64, b256 }, key !4388: b256) -> bool, !4503 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256):
        v0 = call field_id_262(self), !4504
        v1 = get_local ptr { b256, b256 }, __anon_0, !4395
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4395
        store key to v3, !4395
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4395
        store v0 to v5, !4395
        v6 = load v1
        v7 = call sha256_132(v6), !4505
        v8 = get_local ptr b256, key_, !4399
        store v7 to v8, !4399
        v9 = get_local ptr b256, key_, !4400
        v10 = load v9
        v11 = const u64 0, !4401
        v12 = call clear_274(v10, v11), !4506
        ret bool v12
    }

    pub fn clear_274(slot !4405: b256, offset !4406: u64) -> bool, !4507 {
        local { b256, u64, u64 } __tuple_3
        local { b256, u64, u64 } __tuple_3_
        local u64 _place_in_slot
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot

        entry(slot: b256, offset: u64):
        v0 = const u64 8
        v1 = const u64 0, !4410
        v2 = call eq_10(v0, v1), !4508
        cbr v2, block0(), block1(), !4411

        block0():
        v3 = const bool true, !4414
        ret bool v3, !4415

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_258(slot, offset), !4509
        v7 = get_local ptr { b256, u64, u64 }, __tuple_3, !4419
        store v6 to v7, !4419
        v8 = get_local ptr { b256, u64, u64 }, __tuple_3, !4419
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        store v9 to v10, !4419
        v11 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !4419
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !4419
        store v14 to v15, !4419
        v16 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !4419
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !4419
        store v19 to v20, !4419
        v21 = get_local ptr { b256, u64, u64 }, __tuple_3_, !4419
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !4419
        v24 = load v23
        v25 = get_local ptr u64, _place_in_slot, !4419
        store v24 to v25, !4419
        v26 = get_local ptr b256, offset_slot, !4420
        v27 = load v26
        v28 = get_local ptr u64, number_of_slots, !4421
        v29 = load v28
        v30 = get_local ptr b256, key_for_storage, !4422
        store v27 to v30, !4422
        state_clear key v30, v29, !4422
        ret bool v31
    }

    pub fn unwrap_275(self !2059: { u64, ( () | b256 ) }) -> b256, !4510 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !4511
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr b256, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !4512
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn pop_276(self !4513: { b256, u64, b256 }) -> { u64, ( () | b256 ) }, !4516 {
        local { u64, ( () | b256 ) } __anon_0
        local b256 key
        local u64 len
        local u64 offset

        entry(self: { b256, u64, b256 }):
        v0 = call field_id_269(self), !4519
        v1 = const u64 0, !4520
        v2 = call read_257(v0, v1), !4523
        v3 = const u64 0, !4524
        v4 = call unwrap_or_268(v2, v3), !4527
        v5 = get_local ptr u64, len, !4528
        store v4 to v5, !4528
        v6 = get_local ptr u64, len, !4529
        v7 = load v6
        v8 = const u64 0, !4530
        v9 = call eq_10(v7, v8), !4533
        cbr v9, block0(), block1(), !4531

        block0():
        v10 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !1268
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !1268
        v13 = const u64 0, !1268
        store v13 to v12, !1268
        v14 = load v10
        ret { u64, ( () | b256 ) } v14, !4534

        block1():
        v15 = const unit ()
        br block2(v15)

        block2(v16: ()):
        v17 = call field_id_269(self), !4537
        v18 = get_local ptr u64, len, !4538
        v19 = load v18
        v20 = const u64 1, !4539
        v21 = call subtract_211(v19, v20), !4542
        v22 = const u64 0, !4543
        v23 = call write_277(v17, v22, v21), !4546
        v24 = call field_id_269(self), !4549
        v25 = call sha256_279(v24), !4552
        v26 = get_local ptr b256, key, !4553
        store v25 to v26, !4553
        v27 = get_local ptr u64, len, !4554
        v28 = load v27
        v29 = const u64 1, !4555
        v30 = call subtract_211(v28, v29), !4558
        v31 = call offset_calculator_280(v30), !4561
        v32 = get_local ptr u64, offset, !4562
        store v31 to v32, !4562
        v33 = get_local ptr b256, key, !4563
        v34 = load v33
        v35 = get_local ptr u64, offset, !4564
        v36 = load v35
        v37 = call read_281(v34, v36), !4567
        ret { u64, ( () | b256 ) } v37
    }

    pub fn write_277(slot !2170: b256, offset !2171: u64, value !2172: u64) -> (), !4568 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: u64):
        v0 = const u64 8
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !4569
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_258(slot, offset), !4570
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !4571
        v30 = call alloc_47(v29), !4572
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !4573
        v47 = call write_278(v46, value), !4574
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_278(self !2212: u64, val !2213: u64) -> (), !4575 {
        entry(self: u64, val: u64):
        v0 = const bool false
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 8
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 8
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn sha256_279(s !2554: b256) -> b256, !4576 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: b256):
        v0 = call new_133(), !4577
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2561
        store v0 to v1, !2561
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2562
        v3 = call hash_138(s, v2), !4578
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2566
        v5 = load v4
        v6 = call sha256_154(v5), !4579
        ret b256 v6
    }

    fn offset_calculator_280(offset !4580: u64) -> u64, !4583 {
        local u64 size_in_bytes
        local u64 size_in_bytes_

        entry(offset: u64):
        v0 = get_local ptr u64, size_in_bytes, !4584
        v1 = const u64 32
        store v1 to v0, !4584
        v2 = get_local ptr u64, size_in_bytes, !4585
        v3 = load v2
        v4 = const u64 8, !4586
        v5 = const u64 1, !4587
        v6 = call subtract_211(v4, v5), !4590
        v7 = call add_38(v3, v6), !4593
        v8 = get_local ptr u64, size_in_bytes, !4594
        v9 = load v8
        v10 = const u64 8, !4595
        v11 = const u64 1, !4596
        v12 = call subtract_211(v10, v11), !4599
        v13 = call add_38(v9, v12), !4602
        v14 = const u64 8, !4603
        v15 = call modulo_40(v13, v14), !4606
        v16 = call subtract_211(v7, v15), !4609
        v17 = get_local ptr u64, size_in_bytes_, !4610
        store v16 to v17, !4610
        v18 = get_local ptr u64, size_in_bytes_, !4611
        v19 = load v18
        v20 = call multiply_39(offset, v19), !4614
        v21 = const u64 8, !4615
        v22 = call divide_232(v20, v21), !4618
        ret u64 v22
    }

    pub fn read_281(slot !1259: b256, offset !1260: u64) -> { u64, ( () | b256 ) }, !4619 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1
        local { u64, ( () | b256 ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 32
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !4620
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | b256 ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_282(slot, offset), !4621
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !4622
        v34 = call alloc_47(v33), !4623
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !4624
        v54 = call read_283(v53), !4625
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr b256, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | b256 ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | b256 ) }):
        ret { u64, ( () | b256 ) } v64
    }

    fn slot_calculator_282(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !4626 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 32
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !4627
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !4628
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !4629
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !4630
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !4631
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool true
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !4632
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !4633
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !4634
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !4635
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !4636
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !4637
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !4638
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !4639
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !4640
        v51 = call subtract_44(v47, v50), !4641
        v52 = call add_43(v44, v51), !4642
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !4643
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_283(self !1043: u64) -> b256, !4644 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> b256 ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 32
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> b256 val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> b256 val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: b256):
        br block5(v7)

        block5(v8: b256):
        ret b256 v8
    }

    pub fn read_284(self !3203: { b256, u64, b256 }) -> b256, !4645 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_285(self), !4646
        v1 = call offset_286(self), !4647
        v2 = call read_281(v0, v1), !4648
        v3 = call unwrap_275(v2), !4649
        ret b256 v3
    }

    pub fn slot_285(self !1446: { b256, u64, b256 }) -> b256, !4650 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_286(self !1451: { b256, u64, b256 }) -> u64, !4651 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_287(self !2059: { u64, ( () | { b256, u64, b256 } ) }) -> { b256, u64, b256 }, !4652 {
        local { u64, ( () | { b256, u64, b256 } ) } __matched_value_4
        local { b256, u64, b256 } inner_value

        entry(self: { u64, ( () | { b256, u64, b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !4653
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256, u64, b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256, u64, b256 }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { b256, u64, b256 }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !4654
        br block2(v16)

        block2(v17: { b256, u64, b256 }):
        ret { b256, u64, b256 } v17
    }

    pub fn last_288(self !4655: { b256, u64, b256 }) -> { u64, ( () | { b256, u64, b256 } ) }, !4658 {
        local { u64, ( () | { b256, u64, b256 } ) } __anon_0
        local { u64, ( () | { b256, u64, b256 } ) } __anon_1
        local { u64, b256 } __anon_2
        local u64 __matched_value_2
        local b256 key
        local u64 len
        local u64 offset

        entry(self: { b256, u64, b256 }):
        v0 = call field_id_269(self), !4661
        v1 = call sha256_279(v0), !4664
        v2 = get_local ptr b256, key, !4665
        store v1 to v2, !4665
        v3 = call field_id_269(self), !4668
        v4 = const u64 0, !4669
        v5 = call read_257(v3, v4), !4672
        v6 = const u64 0, !4673
        v7 = call unwrap_or_268(v5, v6), !4676
        v8 = get_local ptr u64, __matched_value_2, !4677
        store v7 to v8, !4677
        v9 = get_local ptr u64, __matched_value_2, !4674
        v10 = load v9
        v11 = const u64 0, !4678
        v12 = call eq_10(v10, v11), !4681
        cbr v12, block0(), block1(), !4679

        block0():
        v13 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __anon_0, !1268
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !1268
        v16 = const u64 0, !1268
        store v16 to v15, !1268
        v17 = load v13
        br block2(v17)

        block1():
        v18 = get_local ptr u64, __matched_value_2, !4674
        v19 = load v18
        v20 = get_local ptr u64, len, !4682
        store v19 to v20, !4682
        v21 = get_local ptr u64, len, !4683
        v22 = load v21
        v23 = const u64 1, !4684
        v24 = call subtract_211(v22, v23), !4687
        v25 = call offset_calculator_280(v24), !4690
        v26 = get_local ptr u64, offset, !4691
        store v25 to v26, !4691
        v27 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __anon_1, !1268
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !1268
        v30 = const u64 1, !1268
        store v30 to v29, !1268
        v31 = get_local ptr b256, key, !4692
        v32 = load v31
        v33 = get_local ptr u64, offset, !4693
        v34 = load v33
        v35 = get_local ptr u64, len, !4694
        v36 = load v35
        v37 = const u64 1, !4695
        v38 = call subtract_211(v36, v37), !4698
        v39 = get_local ptr b256, key, !4699
        v40 = load v39
        v41 = get_local ptr { u64, b256 }, __anon_2, !4700
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !4700
        store v38 to v43, !4700
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr b256, v44, !4700
        store v40 to v45, !4700
        v46 = load v41
        v47 = call sha256_290(v46), !4703
        v48 = call new_289(v32, v34, v47), !4706
        v49 = const u64 1
        v50 = const u64 1
        v51 = get_elem_ptr v27, ptr { b256, u64, b256 }, v49, v50, !1268
        store v48 to v51, !1268
        v52 = load v27
        br block2(v52)

        block2(v53: { u64, ( () | { b256, u64, b256 } ) }):
        ret { u64, ( () | { b256, u64, b256 } ) } v53
    }

    pub fn new_289(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !4707 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn sha256_290(s !2554: { u64, b256 }) -> b256, !4708 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { u64, b256 }):
        v0 = call new_133(), !4709
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2561
        store v0 to v1, !2561
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2562
        v3 = call hash_291(s, v2), !4710
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2566
        v5 = load v4
        v6 = call sha256_154(v5), !4711
        ret b256 v6
    }

    pub fn hash_291(self !2601: { u64, b256 }, state !2602: ptr { { { u64, u64 }, u64 } }) -> (), !4712 {
        entry(self: { u64, b256 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2606
        v4 = load v3
        v5 = call hash_292(v4, state), !4713
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { u64, b256 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr b256, v8, !2610
        v10 = load v9
        v11 = call hash_138(v10, state), !4714
        v12 = const unit ()
        ret () v12
    }

    pub fn hash_292(self !4715: u64, state !4716: ptr { { { u64, u64 }, u64 } }) -> (), !4719 {
        local u64 ptr

        entry(self: u64, state: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 8, !4720
        v1 = call alloc_bytes_136(v0), !4723
        v2 = get_local ptr u64, ptr, !4724
        store v1 to v2, !4724
        v3 = get_local ptr u64, ptr, !4725
        v4 = load v3
        v5 = asm(ptr: v4, val: self) -> (), !4726 {
            sw     ptr val i0, !4727
        }
        v6 = get_local ptr u64, ptr, !4728
        v7 = load v6
        v8 = const u64 8, !4729
        v9 = call from_parts_143(v7, v8), !4732
        v10 = call from_153(v9), !4735
        v11 = call write_139(state, v10), !4738
        v12 = const unit ()
        ret () v12
    }

    pub fn swap_remove_293(self !4739: { b256, u64, b256 }, index !4740: u64) -> b256, !4743 {
        local u64 element_offset
        local b256 element_to_be_removed
        local b256 key
        local b256 last_element
        local u64 last_offset
        local u64 len

        entry(self: { b256, u64, b256 }, index: u64):
        v0 = call field_id_269(self), !4746
        v1 = const u64 0, !4747
        v2 = call read_257(v0, v1), !4750
        v3 = const u64 0, !4751
        v4 = call unwrap_or_268(v2, v3), !4754
        v5 = get_local ptr u64, len, !4755
        store v4 to v5, !4755
        v6 = get_local ptr u64, len, !4756
        v7 = load v6
        v8 = call lt_86(index, v7), !4759
        v9 = call assert_223(v8), !4762
        v10 = call field_id_269(self), !4765
        v11 = call sha256_279(v10), !4768
        v12 = get_local ptr b256, key, !4769
        store v11 to v12, !4769
        v13 = call offset_calculator_280(index), !4772
        v14 = get_local ptr u64, element_offset, !4773
        store v13 to v14, !4773
        v15 = get_local ptr b256, key, !4774
        v16 = load v15
        v17 = get_local ptr u64, element_offset, !4775
        v18 = load v17
        v19 = call read_281(v16, v18), !4778
        v20 = call unwrap_275(v19), !4781
        v21 = get_local ptr b256, element_to_be_removed, !4782
        store v20 to v21, !4782
        v22 = get_local ptr u64, len, !4783
        v23 = load v22
        v24 = const u64 1, !4784
        v25 = call subtract_211(v23, v24), !4787
        v26 = call offset_calculator_280(v25), !4790
        v27 = get_local ptr u64, last_offset, !4791
        store v26 to v27, !4791
        v28 = get_local ptr b256, key, !4792
        v29 = load v28
        v30 = get_local ptr u64, last_offset, !4793
        v31 = load v30
        v32 = call read_281(v29, v31), !4796
        v33 = call unwrap_275(v32), !4799
        v34 = get_local ptr b256, last_element, !4800
        store v33 to v34, !4800
        v35 = get_local ptr b256, key, !4801
        v36 = load v35
        v37 = get_local ptr u64, element_offset, !4802
        v38 = load v37
        v39 = get_local ptr b256, last_element, !4803
        v40 = load v39
        v41 = call write_294(v36, v38, v40), !4806
        v42 = call field_id_269(self), !4809
        v43 = get_local ptr u64, len, !4810
        v44 = load v43
        v45 = const u64 1, !4811
        v46 = call subtract_211(v44, v45), !4814
        v47 = const u64 0, !4815
        v48 = call write_277(v42, v47, v46), !4818
        v49 = get_local ptr b256, element_to_be_removed, !4819
        v50 = load v49
        ret b256 v50
    }

    pub fn write_294(slot !2170: b256, offset !2171: u64, value !2172: b256) -> (), !4820 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: b256):
        v0 = const u64 32
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !4821
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_282(slot, offset), !4822
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !4823
        v30 = call alloc_47(v29), !4824
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !4825
        v47 = call write_295(v46, value), !4826
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_295(self !2212: u64, val !2213: b256) -> (), !4827 {
        entry(self: u64, val: b256):
        v0 = const bool true
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn insert_296(self !4828: { b256, u64, b256 }, key !4829: b256, value !4830: u64) -> (), !4833 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256, value: u64):
        v0 = call field_id_262(self), !4836
        v1 = get_local ptr { b256, b256 }, __anon_0, !4837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4837
        store key to v3, !4837
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4837
        store v0 to v5, !4837
        v6 = load v1
        v7 = call sha256_132(v6), !4840
        v8 = get_local ptr b256, key_, !4841
        store v7 to v8, !4841
        v9 = get_local ptr b256, key_, !4842
        v10 = load v9
        v11 = const u64 0, !4843
        v12 = call write_277(v10, v11, value), !4846
        v13 = const unit ()
        ret () v13
    }

    pub fn insert_297(self !4828: { b256, u64, b256 }, key !4829: { u64, ( { b256 } | { b256 } ) }, value !4830: { { u64, u64 }, { u64, u64 } }) -> (), !4847 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }, value: { { u64, u64 }, { u64, u64 } }):
        v0 = call field_id_200(self), !4848
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !4837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !4837
        store key to v3, !4837
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4837
        store v0 to v5, !4837
        v6 = load v1
        v7 = call sha256_189(v6), !4849
        v8 = get_local ptr b256, key_, !4841
        store v7 to v8, !4841
        v9 = get_local ptr b256, key_, !4842
        v10 = load v9
        v11 = const u64 0, !4843
        v12 = call write_298(v10, v11, value), !4850
        v13 = const unit ()
        ret () v13
    }

    pub fn write_298(slot !2170: b256, offset !2171: u64, value !2172: { { u64, u64 }, { u64, u64 } }) -> (), !4851 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { { u64, u64 }, { u64, u64 } }):
        v0 = const u64 32
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !4852
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_184(slot, offset), !4853
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !4854
        v30 = call alloc_47(v29), !4855
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !4856
        v47 = call write_299(v46, value), !4857
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_299(self !2212: u64, val !2213: { { u64, u64 }, { u64, u64 } }) -> (), !4858 {
        entry(self: u64, val: { { u64, u64 }, { u64, u64 } }):
        v0 = const bool true
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 32
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 32
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn log_300(value !1547: { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }) -> (), !4859 {
        entry(value: { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }):
        v0 = call encode_301(value), !1551
        v1 = const u64 14676650066558707344
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_301(item !1456: { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }) -> slice, !4860 {
        local { { u64, u64, u64 } } buffer

        entry(item: { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }):
        v0 = call new_53(), !4861
        v1 = call abi_encode_302(item, v0), !4862
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !4863
        ret slice v5
    }

    pub fn abi_encode_302(self !4864: { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, buffer !4865: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4868 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4870
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !4873
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !4874
        store v5 to v6, !4874
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !4875
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !4876
        v13 = load v12
        v14 = call abi_encode_303(v11, v13), !4879
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !4880
        store v14 to v15, !4880
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { b256, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { { u64, u64 }, { u64, u64 } }, v18, !4881
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !4882
        v22 = load v21
        v23 = call abi_encode_306(v20, v22), !4885
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !4886
        store v23 to v24, !4886
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !4887
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn abi_encode_303(self !4888: { u64, ( { b256 } | { b256 } ) }, buffer !4889: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4892 {
        local { u64, ( { b256 } | { b256 } ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { b256 } value
        local { b256 } value_

        entry(self: { u64, ( { b256 } | { b256 } ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !4893
        store self to v0, !4893
        v1 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !4894
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !4894
        v4 = load v3
        v5 = const u64 0, !4894
        v6 = call eq_10(v4, v5), !4897
        cbr v6, block0(), block1(), !4895

        block0():
        v7 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !4894
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, value, !4898
        store v11 to v12, !4898
        v13 = const u64 0, !4899
        v14 = call abi_encode_62(v13, buffer), !4902
        v15 = get_local ptr { { u64, u64, u64 } }, buffer_, !4903
        store v14 to v15, !4903
        v16 = get_local ptr { b256 }, value, !4904
        v17 = load v16
        v18 = get_local ptr { { u64, u64, u64 } }, buffer_, !4905
        v19 = load v18
        v20 = call abi_encode_304(v17, v19), !4908
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !4909
        store v20 to v21, !4909
        v22 = get_local ptr { { u64, u64, u64 } }, buffer__, !4910
        v23 = load v22
        br block5(v23)

        block1():
        v24 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !4894
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !4894
        v27 = load v26
        v28 = const u64 1, !4894
        v29 = call eq_10(v27, v28), !4913
        cbr v29, block2(), block3(), !4911

        block2():
        v30 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !4894
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v30, ptr { b256 }, v31, v32
        v34 = load v33
        v35 = get_local ptr { b256 }, value_, !4914
        store v34 to v35, !4914
        v36 = const u64 1, !4915
        v37 = call abi_encode_62(v36, buffer), !4918
        v38 = get_local ptr { { u64, u64, u64 } }, buffer___, !4919
        store v37 to v38, !4919
        v39 = get_local ptr { b256 }, value_, !4920
        v40 = load v39
        v41 = get_local ptr { { u64, u64, u64 } }, buffer___, !4921
        v42 = load v41
        v43 = call abi_encode_305(v40, v42), !4924
        v44 = get_local ptr { { u64, u64, u64 } }, buffer____, !4925
        store v43 to v44, !4925
        v45 = get_local ptr { { u64, u64, u64 } }, buffer____, !4926
        v46 = load v45
        br block4(v46)

        block3():
        v47 = const u64 14757395258967588866, !4893
        revert v47, !4893

        block4(v48: { { u64, u64, u64 } }):
        br block5(v48)

        block5(v49: { { u64, u64, u64 } }):
        v50 = get_local ptr { { u64, u64, u64 } }, buffer_____, !4927
        store v49 to v50, !4927
        v51 = get_local ptr { { u64, u64, u64 } }, buffer_____, !4928
        v52 = load v51
        ret { { u64, u64, u64 } } v52
    }

    pub fn abi_encode_304(self !4929: { b256 }, buffer !4930: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4932 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1654
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !4935
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !4936
        store v5 to v6, !4936
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !4937
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_305(self !2120: { b256 }, buffer !2121: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4939 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1669
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !4942
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !4943
        store v5 to v6, !4943
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !4944
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_306(self !4929: { { u64, u64 }, { u64, u64 } }, buffer !4930: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4946 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { u64, u64 }, { u64, u64 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, { u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !3423
        v4 = load v3
        v5 = call abi_encode_307(v4, buffer), !4949
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !4950
        store v5 to v6, !4950
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, u64 }, { u64, u64 } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !3427
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !4951
        v13 = load v12
        v14 = call abi_encode_307(v11, v13), !4954
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !4955
        store v14 to v15, !4955
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !4956
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn abi_encode_307(self !4929: { u64, u64 }, buffer !4930: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !4958 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3443
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !4959
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !4936
        store v5 to v6, !4936
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3450
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !4960
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !4963
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !4964
        store v14 to v15, !4964
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !4965
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn cancel_small_order_308(order_id !4966: b256) -> (), !4969 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_0

        entry(order_id: b256):
        v0 = call reentrancy_guard_112(), !4972
        v1 = call cancel_if_small_order_309(order_id), !4975
        v2 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_0, !2493
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2493
        v5 = const u64 4, !2493
        store v5 to v4, !2493
        v6 = load v2
        v7 = call require_158(v1, v6), !4978
        v8 = const unit ()
        ret () v8
    }

    fn cancel_if_small_order_309(order_id !4979: b256) -> bool, !4982 {
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order
        local bool to_cancel

        entry(order_id: b256):
        v0 = call read_order_124(order_id), !4985
        v1 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !4986
        store v0 to v1, !4986
        v2 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !4987
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !3574
        v5 = load v4
        v6 = call valid_order_amount_310(v5), !4990
        v7 = call not_27(v6), !4993
        v8 = get_local ptr bool, to_cancel, !4994
        store v7 to v8, !4994
        v9 = get_local ptr bool, to_cancel, !4995
        v10 = load v9
        cbr v10, block0(), block1(), !4995

        block0():
        v11 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !4996
        v12 = load v11
        v13 = call cancel_read_order_180(order_id, v12), !4999
        v14 = const unit ()
        br block2(v14)

        block1():
        v15 = const unit ()
        br block2(v15)

        block2(v16: ()):
        v17 = get_local ptr bool, to_cancel, !5000
        v18 = load v17
        ret bool v18
    }

    fn valid_order_amount_310(amount !5001: u64) -> bool, !5004 {
        entry(amount: u64):
        v0 = call read_min_order_size_311(), !5007
        v1 = call ge_88(amount, v0), !5010
        ret bool v1
    }

    fn read_min_order_size_311() -> u64, !5013 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !5014
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x08e09a22868bf842d72aa81dd2cc2d707c26c2498b853428e18bbf9133161d25, !5014
        store v3 to v2, !5014
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !5014
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x08e09a22868bf842d72aa81dd2cc2d707c26c2498b853428e18bbf9133161d25, !5014
        store v9 to v8, !5014
        v10 = load v0
        v11 = call try_read_312(v10), !5017
        v12 = const u64 0, !5018
        v13 = call unwrap_or_268(v11, v12), !5021
        ret u64 v13
    }

    pub fn try_read_312(self !1245: { b256, u64, b256 }) -> { u64, ( () | u64 ) }, !5022 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_259(self), !5023
        v1 = call offset_260(self), !5024
        v2 = call read_257(v0, v1), !5025
        ret { u64, ( () | u64 ) } v2
    }

    pub fn deposit_313() -> (), !5028 {
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_1
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_1_
        local { { u64, u64 }, { u64, u64 } } account
        local u64 amount
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } user

        entry():
        v0 = call require_not_paused_97(), !5031
        v1 = call reentrancy_guard_112(), !5034
        v2 = call msg_sender_79(), !5037
        v3 = call unwrap_78(v2), !5040
        v4 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5041
        store v3 to v4, !5041
        v5 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5042
        v6 = load v5
        v7 = call deposit_internal_314(v6), !5045
        v8 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1, !5046
        store v7 to v8, !5046
        v9 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1, !5046
        v10 = load v9
        v11 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        store v10 to v11, !5046
        v12 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !5046
        v15 = load v14
        v16 = get_local ptr u64, amount, !5046
        store v15 to v16, !5046
        v17 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr { b256 }, v18, !5046
        v20 = load v19
        v21 = get_local ptr { b256 }, asset, !5046
        store v20 to v21, !5046
        v22 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        v23 = const u64 2
        v24 = get_elem_ptr v22, ptr { { u64, u64 }, { u64, u64 } }, v23, !5046
        v25 = load v24
        v26 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5046
        store v25 to v26, !5046
        v27 = get_local ptr u64, amount, !5047
        v28 = load v27
        v29 = get_local ptr { b256 }, asset, !5048
        v30 = load v29
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5049
        v32 = load v31
        v33 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5050
        v34 = load v33
        v35 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5051
        v36 = load v35
        v37 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !5052
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr u64, v38
        store v28 to v39, !5052
        v40 = const u64 1
        v41 = get_elem_ptr v37, ptr { b256 }, v40
        store v30 to v41, !5052
        v42 = const u64 2
        v43 = get_elem_ptr v37, ptr { u64, ( { b256 } | { b256 } ) }, v42
        store v32 to v43, !5052
        v44 = const u64 3
        v45 = get_elem_ptr v37, ptr { { u64, u64 }, { u64, u64 } }, v44
        store v34 to v45, !5052
        v46 = const u64 4
        v47 = get_elem_ptr v37, ptr { u64, ( { b256 } | { b256 } ) }, v46
        store v36 to v47, !5052
        v48 = load v37
        v49 = call log_333(v48), !5055
        v50 = const unit ()
        ret () v50
    }

    fn deposit_internal_314(user !5056: { u64, ( { b256 } | { b256 } ) }) -> { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, !5059 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __anon_3
        local mut { { u64, u64 }, { u64, u64 } } account
        local u64 amount
        local { b256 } asset
        local { u64 } asset_type

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call msg_amount_315(), !5062
        v1 = get_local ptr u64, amount, !5063
        store v0 to v1, !5063
        v2 = get_local ptr u64, amount, !5064
        v3 = load v2
        v4 = const u64 0, !5065
        v5 = call gt_89(v3, v4), !5068
        v6 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !5069
        v9 = const u64 0, !5069
        store v9 to v8, !5069
        v10 = load v6
        v11 = call require_317(v5, v10), !5072
        v12 = call msg_asset_id_322(), !5075
        v13 = get_local ptr { b256 }, asset, !5076
        store v12 to v13, !5076
        v14 = get_local ptr { b256 }, asset, !5077
        v15 = load v14
        v16 = call get_asset_type_324(v15), !5080
        v17 = get_local ptr { u64 }, asset_type, !5081
        store v16 to v17, !5081
        v18 = get_local ptr { b256, u64, b256 }, __anon_1, !5082
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr b256, v19
        v21 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !5082
        store v21 to v20, !5082
        v22 = const u64 1
        v23 = get_elem_ptr v18, ptr u64, v22
        v24 = const u64 0
        store v24 to v23, !5082
        v25 = const u64 2
        v26 = get_elem_ptr v18, ptr b256, v25
        v27 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !5082
        store v27 to v26, !5082
        v28 = load v18
        v29 = call get_188(v28, user), !5085
        v30 = call try_read_330(v29), !5088
        v31 = call new_331(), !5091
        v32 = call unwrap_or_329(v30, v31), !5094
        v33 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5095
        store v32 to v33, !5095
        v34 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5096
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr { u64, u64 }, v35, !3423
        v37 = get_local ptr u64, amount, !5097
        v38 = load v37
        v39 = get_local ptr { u64 }, asset_type, !5098
        v40 = load v39
        v41 = call credit_203(v36, v38, v40), !5101
        v42 = get_local ptr { b256, u64, b256 }, __anon_2, !5102
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr b256, v43
        v45 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !5102
        store v45 to v44, !5102
        v46 = const u64 1
        v47 = get_elem_ptr v42, ptr u64, v46
        v48 = const u64 0
        store v48 to v47, !5102
        v49 = const u64 2
        v50 = get_elem_ptr v42, ptr b256, v49
        v51 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !5102
        store v51 to v50, !5102
        v52 = load v42
        v53 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5103
        v54 = load v53
        v55 = call insert_297(v52, user, v54), !5106
        v56 = get_local ptr u64, amount, !5107
        v57 = load v56
        v58 = get_local ptr { b256 }, asset, !5108
        v59 = load v58
        v60 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5109
        v61 = load v60
        v62 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __anon_3, !5110
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr u64, v63, !5110
        store v57 to v64, !5110
        v65 = const u64 1
        v66 = get_elem_ptr v62, ptr { b256 }, v65, !5110
        store v59 to v66, !5110
        v67 = const u64 2
        v68 = get_elem_ptr v62, ptr { { u64, u64 }, { u64, u64 } }, v67, !5110
        store v61 to v68, !5110
        v69 = load v62
        ret { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } v69
    }

    pub fn msg_amount_315() -> u64, !5114 {
        entry():
        v0 = call balance_316(), !5117
        ret u64 v0
    }

    pub fn balance_316() -> u64, !5120 {
        entry():
        v0 = asm() -> u64 bal, !5121 {
        }
        ret u64 v0
    }

    pub fn require_317(condition !1530: bool, value !1531: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }) -> (), !5122 {
        entry(condition: bool, value: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }):
        v0 = call not_27(condition), !5123
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_318(value), !5124
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !5125
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_318(value !1547: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }) -> (), !5126 {
        entry(value: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }):
        v0 = call encode_319(value), !1551
        v1 = const u64 4038555509566971562
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_319(item !1456: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }) -> slice, !5127 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }):
        v0 = call new_53(), !5128
        v1 = call abi_encode_320(item, v0), !5129
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !5130
        ret slice v5
    }

    pub fn abi_encode_320(self !2120: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, buffer !2121: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !5132 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { u64, u64 } value
        local { u64, u64, u64, u64 } value_

        entry(self: { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !5133
        store self to v0, !5133
        v1 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2126
        v4 = load v3
        v5 = const u64 0, !2126
        v6 = call eq_10(v4, v5), !5136
        cbr v6, block0(), block1(), !5134

        block0():
        v7 = const u64 0, !5137
        v8 = call abi_encode_62(v7, buffer), !5140
        br block26(v8)

        block1():
        v9 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2126
        v12 = load v11
        v13 = const u64 1, !2126
        v14 = call eq_10(v12, v13), !5143
        cbr v14, block2(), block3(), !5141

        block2():
        v15 = const u64 1, !5144
        v16 = call abi_encode_62(v15, buffer), !5147
        br block25(v16)

        block3():
        v17 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2126
        v20 = load v19
        v21 = const u64 2, !2126
        v22 = call eq_10(v20, v21), !5150
        cbr v22, block4(), block5(), !5148

        block4():
        v23 = const u64 2, !5151
        v24 = call abi_encode_62(v23, buffer), !5154
        br block24(v24)

        block5():
        v25 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !2126
        v28 = load v27
        v29 = const u64 3, !2126
        v30 = call eq_10(v28, v29), !5157
        cbr v30, block6(), block7(), !5155

        block6():
        v31 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v32 = const u64 1
        v33 = const u64 3
        v34 = get_elem_ptr v31, ptr { u64, u64 }, v32, v33
        v35 = load v34
        v36 = get_local ptr { u64, u64 }, value, !5158
        store v35 to v36, !5158
        v37 = const u64 3, !5159
        v38 = call abi_encode_62(v37, buffer), !5162
        v39 = get_local ptr { { u64, u64, u64 } }, buffer_, !5163
        store v38 to v39, !5163
        v40 = get_local ptr { u64, u64 }, value, !5164
        v41 = load v40
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_, !5165
        v43 = load v42
        v44 = call abi_encode_163(v41, v43), !5168
        v45 = get_local ptr { { u64, u64, u64 } }, buffer__, !5169
        store v44 to v45, !5169
        v46 = get_local ptr { { u64, u64, u64 } }, buffer__, !5170
        v47 = load v46
        br block23(v47)

        block7():
        v48 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !2126
        v51 = load v50
        v52 = const u64 4, !2126
        v53 = call eq_10(v51, v52), !5173
        cbr v53, block8(), block9(), !5171

        block8():
        v54 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v55 = const u64 1
        v56 = const u64 4
        v57 = get_elem_ptr v54, ptr { u64, u64, u64, u64 }, v55, v56
        v58 = load v57
        v59 = get_local ptr { u64, u64, u64, u64 }, value_, !5174
        store v58 to v59, !5174
        v60 = const u64 4, !5175
        v61 = call abi_encode_62(v60, buffer), !5178
        v62 = get_local ptr { { u64, u64, u64 } }, buffer___, !5179
        store v61 to v62, !5179
        v63 = get_local ptr { u64, u64, u64, u64 }, value_, !5180
        v64 = load v63
        v65 = get_local ptr { { u64, u64, u64 } }, buffer___, !5181
        v66 = load v65
        v67 = call abi_encode_321(v64, v66), !5184
        v68 = get_local ptr { { u64, u64, u64 } }, buffer____, !5185
        store v67 to v68, !5185
        v69 = get_local ptr { { u64, u64, u64 } }, buffer____, !5186
        v70 = load v69
        br block22(v70)

        block9():
        v71 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !2126
        v74 = load v73
        v75 = const u64 5, !2126
        v76 = call eq_10(v74, v75), !5189
        cbr v76, block10(), block11(), !5187

        block10():
        v77 = const u64 5, !5190
        v78 = call abi_encode_62(v77, buffer), !5193
        br block21(v78)

        block11():
        v79 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr u64, v80, !2126
        v82 = load v81
        v83 = const u64 6, !2126
        v84 = call eq_10(v82, v83), !5196
        cbr v84, block12(), block13(), !5194

        block12():
        v85 = const u64 6, !5197
        v86 = call abi_encode_62(v85, buffer), !5200
        br block20(v86)

        block13():
        v87 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v88 = const u64 0
        v89 = get_elem_ptr v87, ptr u64, v88, !2126
        v90 = load v89
        v91 = const u64 7, !2126
        v92 = call eq_10(v90, v91), !5203
        cbr v92, block14(), block15(), !5201

        block14():
        v93 = const u64 7, !5204
        v94 = call abi_encode_62(v93, buffer), !5207
        br block19(v94)

        block15():
        v95 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __matched_value_1, !2126
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !2126
        v98 = load v97
        v99 = const u64 8, !2126
        v100 = call eq_10(v98, v99), !5210
        cbr v100, block16(), block17(), !5208

        block16():
        v101 = const u64 8, !5211
        v102 = call abi_encode_62(v101, buffer), !5214
        br block18(v102)

        block17():
        v103 = const u64 14757395258967588866, !5133
        revert v103, !5133

        block18(v104: { { u64, u64, u64 } }):
        br block19(v104)

        block19(v105: { { u64, u64, u64 } }):
        br block20(v105)

        block20(v106: { { u64, u64, u64 } }):
        br block21(v106)

        block21(v107: { { u64, u64, u64 } }):
        br block22(v107)

        block22(v108: { { u64, u64, u64 } }):
        br block23(v108)

        block23(v109: { { u64, u64, u64 } }):
        br block24(v109)

        block24(v110: { { u64, u64, u64 } }):
        br block25(v110)

        block25(v111: { { u64, u64, u64 } }):
        br block26(v111)

        block26(v112: { { u64, u64, u64 } }):
        v113 = get_local ptr { { u64, u64, u64 } }, buffer_____, !5215
        store v112 to v113, !5215
        v114 = get_local ptr { { u64, u64, u64 } }, buffer_____, !5216
        v115 = load v114
        ret { { u64, u64, u64 } } v115
    }

    pub fn abi_encode_321(self !5217: { u64, u64, u64, u64 }, buffer !5218: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !5221 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____

        entry(self: { u64, u64, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !5222
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !5225
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !5226
        store v5 to v6, !5226
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !5227
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !5228
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !5231
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !5232
        store v14 to v15, !5232
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, u64, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !5233
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !5234
        v22 = load v21
        v23 = call abi_encode_62(v20, v22), !5237
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !5238
        store v23 to v24, !5238
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, u64, u64, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u64, v27, !5239
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !5240
        v31 = load v30
        v32 = call abi_encode_62(v29, v31), !5243
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !5244
        store v32 to v33, !5244
        v34 = get_local ptr { { u64, u64, u64 } }, buffer____, !5245
        v35 = load v34
        ret { { u64, u64, u64 } } v35
    }

    pub fn msg_asset_id_322() -> { b256 }, !5248 {
        entry():
        v0 = asm(asset_id) -> b256 asset_id, !5249 {
            addi   asset_id fp i32, !5250
        }
        v1 = call from_323(v0), !5253
        ret { b256 } v1
    }

    pub fn from_323(bits !5255: b256) -> { b256 }, !5258 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !5259
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !5259
        v3 = load v0
        ret { b256 } v3
    }

    fn get_asset_type_324(asset_id !5260: { b256 }) -> { u64 }, !5263 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_2

        entry(asset_id: { b256 }):
        v0 = get_config ptr { b256 }, BASE_ASSET, !5264
        v1 = load v0
        v2 = call eq_325(asset_id, v1), !5267
        cbr v2, block0(), block1(), !5265

        block0():
        v3 = get_local ptr { u64 }, __anon_0, !4280
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !4280
        v6 = const u64 0, !4280
        store v6 to v5, !4280
        v7 = load v3
        br block5(v7)

        block1():
        v8 = get_config ptr { b256 }, QUOTE_ASSET, !5268
        v9 = load v8
        v10 = call eq_325(asset_id, v9), !5271
        cbr v10, block2(), block3(), !5269

        block2():
        v11 = get_local ptr { u64 }, __anon_1, !4280
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !4280
        v14 = const u64 1, !4280
        store v14 to v13, !4280
        v15 = load v11
        br block4(v15)

        block3():
        v16 = get_local ptr { u64 }, __anon_2, !5272
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !5272
        v19 = const u64 0, !5272
        store v19 to v18, !5272
        v20 = load v16
        v21 = call log_326(v20), !5275
        v22 = const u64 18446744073709486080, !1542
        v23 = call revert_63(v22), !5278
        v24 = const unit ()
        br block4(v24)

        block4(v25: { u64 }):
        br block5(v25)

        block5(v26: { u64 }):
        ret { u64 } v26
    }

    pub fn eq_325(self !5279: { b256 }, other !5280: { b256 }) -> bool, !5283 {
        entry(self: { b256 }, other: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !5284
        v4 = load v3
        v5 = ptr_to_int other to u64
        v6 = int_to_ptr v5 to ptr { b256 }
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr b256, v7, !5284
        v9 = load v8
        v10 = call eq_67(v4, v9), !5287
        ret bool v10
    }

    pub fn log_326(value !1547: { u64 }) -> (), !5288 {
        entry(value: { u64 }):
        v0 = call encode_327(value), !1551
        v1 = const u64 16169998749359270814
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_327(item !1456: { u64 }) -> slice, !5289 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !5290
        v1 = call abi_encode_328(item, v0), !5291
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !5292
        ret slice v5
    }

    pub fn abi_encode_328(self !2120: { u64 }, buffer !2121: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !5294 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !5295
        store self to v0, !5295
        v1 = get_local ptr { u64 }, __matched_value_1, !2126
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2126
        v4 = load v3
        v5 = const u64 0, !2126
        v6 = call eq_10(v4, v5), !5298
        cbr v6, block0(), block1(), !5296

        block0():
        v7 = const u64 0, !5299
        v8 = call abi_encode_62(v7, buffer), !5302
        br block8(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_1, !2126
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !2126
        v12 = load v11
        v13 = const u64 1, !2126
        v14 = call eq_10(v12, v13), !5305
        cbr v14, block2(), block3(), !5303

        block2():
        v15 = const u64 1, !5306
        v16 = call abi_encode_62(v15, buffer), !5309
        br block7(v16)

        block3():
        v17 = get_local ptr { u64 }, __matched_value_1, !2126
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !2126
        v20 = load v19
        v21 = const u64 2, !2126
        v22 = call eq_10(v20, v21), !5312
        cbr v22, block4(), block5(), !5310

        block4():
        v23 = const u64 2, !5313
        v24 = call abi_encode_62(v23, buffer), !5316
        br block6(v24)

        block5():
        v25 = const u64 14757395258967588866, !5295
        revert v25, !5295

        block6(v26: { { u64, u64, u64 } }):
        br block7(v26)

        block7(v27: { { u64, u64, u64 } }):
        br block8(v27)

        block8(v28: { { u64, u64, u64 } }):
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !5317
        store v28 to v29, !5317
        v30 = get_local ptr { { u64, u64, u64 } }, buffer_, !5318
        v31 = load v30
        ret { { u64, u64, u64 } } v31
    }

    pub fn unwrap_or_329(self !1229: { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, default !1230: { { u64, u64 }, { u64, u64 } }) -> { { u64, u64 }, { u64, u64 } }, !5319 {
        local { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } __matched_value_5
        local { { u64, u64 }, { u64, u64 } } x

        entry(self: { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, default: { { u64, u64 }, { u64, u64 } }):
        v0 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_5, !1234
        store self to v0, !1234
        v1 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_5, !1235
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1235
        v4 = load v3
        v5 = const u64 1, !1235
        v6 = call eq_10(v4, v5), !5320
        cbr v6, block0(), block1(), !1236

        block0():
        v7 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_5, !1235
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { { u64, u64 }, { u64, u64 } }, v8, v9
        v11 = load v10
        v12 = get_local ptr { { u64, u64 }, { u64, u64 } }, x, !1239
        store v11 to v12, !1239
        v13 = get_local ptr { { u64, u64 }, { u64, u64 } }, x, !1240
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, __matched_value_5, !1235
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1235
        v18 = load v17
        v19 = const u64 0, !1235
        v20 = call eq_10(v18, v19), !5321
        cbr v20, block2(), block3(), !1241

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !1234
        revert v21, !1234

        block4(v22: { { u64, u64 }, { u64, u64 } }):
        br block5(v22)

        block5(v23: { { u64, u64 }, { u64, u64 } }):
        ret { { u64, u64 }, { u64, u64 } } v23
    }

    pub fn try_read_330(self !1245: { b256, u64, b256 }) -> { u64, ( () | { { u64, u64 }, { u64, u64 } } ) }, !5322 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_186(self), !5323
        v1 = call offset_187(self), !5324
        v2 = call read_183(v0, v1), !5325
        ret { u64, ( () | { { u64, u64 }, { u64, u64 } } ) } v2
    }

    pub fn new_331() -> { { u64, u64 }, { u64, u64 } }, !5328 {
        local { { u64, u64 }, { u64, u64 } } __anon_0

        entry():
        v0 = call new_332(), !5331
        v1 = call new_332(), !5334
        v2 = get_local ptr { { u64, u64 }, { u64, u64 } }, __anon_0, !5335
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !5335
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, u64 }, v5
        store v1 to v6, !5335
        v7 = load v2
        ret { { u64, u64 }, { u64, u64 } } v7
    }

    pub fn new_332() -> { u64, u64 }, !5338 {
        local { u64, u64 } __anon_0

        entry():
        v0 = get_local ptr { u64, u64 }, __anon_0, !5339
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 0, !5340
        store v3 to v2, !5339
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0, !5341
        store v6 to v5, !5339
        v7 = load v0
        ret { u64, u64 } v7
    }

    pub fn log_333(value !1547: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }) -> (), !5342 {
        entry(value: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call encode_334(value), !1551
        v1 = const u64 12590297951544646752
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_334(item !1456: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }) -> slice, !5343 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_53(), !5344
        v1 = call abi_encode_335(item, v0), !5345
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !5346
        ret slice v5
    }

    pub fn abi_encode_335(self !3500: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }, buffer !3501: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !5348 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____

        entry(self: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !5349
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !5352
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !5353
        store v5 to v6, !5353
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !5354
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !5355
        v13 = load v12
        v14 = call abi_encode_336(v11, v13), !5358
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !5359
        store v14 to v15, !5359
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { u64, ( { b256 } | { b256 } ) }, v18, !5360
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !5361
        v22 = load v21
        v23 = call abi_encode_303(v20, v22), !5364
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !5365
        store v23 to v24, !5365
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, { u64, u64 } }, v27, !5366
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !5367
        v31 = load v30
        v32 = call abi_encode_306(v29, v31), !5370
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !5371
        store v32 to v33, !5371
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr { u64, ( { b256 } | { b256 } ) }, v36, !5372
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !5373
        v40 = load v39
        v41 = call abi_encode_303(v38, v40), !5376
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !5377
        store v41 to v42, !5377
        v43 = get_local ptr { { u64, u64, u64 } }, buffer_____, !5378
        v44 = load v43
        ret { { u64, u64, u64 } } v44
    }

    pub fn abi_encode_336(self !4929: { b256 }, buffer !4930: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !5379 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !5284
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !5380
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !4936
        store v5 to v6, !4936
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !4937
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn decode_337(self !43: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) } }, !5381 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_338(self), !5382
        ret { { u64, ( { b256 } | { b256 } ) } } v0
    }

    pub fn abi_decode_338(buffer !2272: ptr { u64 }) -> { { u64, ( { b256 } | { b256 } ) } }, !5383 {
        local { { u64, ( { b256 } | { b256 } ) } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_339(buffer), !5384
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_0, !2279
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2279
        store v0 to v3, !2279
        v4 = load v1
        ret { { u64, ( { b256 } | { b256 } ) } } v4
    }

    pub fn abi_decode_339(buffer !2121: ptr { u64 }) -> { u64, ( { b256 } | { b256 } ) }, !5386 {
        local { u64, ( { b256 } | { b256 } ) } __anon_0
        local { u64, ( { b256 } | { b256 } ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64 }):
        v0 = call decode_340(buffer), !5389
        v1 = get_local ptr u64, variant, !5390
        store v0 to v1, !5390
        v2 = get_local ptr u64, variant, !5391
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !5392
        store v3 to v4, !5392
        v5 = get_local ptr u64, __matched_value_1, !5391
        v6 = load v5
        v7 = const u64 0, !5393
        v8 = call eq_10(v6, v7), !5396
        cbr v8, block0(), block1(), !5394

        block0():
        v9 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_0, !1762
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1762
        v12 = const u64 0, !1762
        store v12 to v11, !1762
        v13 = call decode_342(buffer), !5399
        v14 = const u64 1
        v15 = const u64 0
        v16 = get_elem_ptr v9, ptr { b256 }, v14, v15, !1762
        store v13 to v16, !1762
        v17 = load v9
        br block5(v17)

        block1():
        v18 = get_local ptr u64, __matched_value_1, !5391
        v19 = load v18
        v20 = const u64 1, !5400
        v21 = call eq_10(v19, v20), !5403
        cbr v21, block2(), block3(), !5401

        block2():
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_1, !1762
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr u64, v23, !1762
        v25 = const u64 1, !1762
        store v25 to v24, !1762
        v26 = call decode_344(buffer), !5406
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v22, ptr { b256 }, v27, v28, !1762
        store v26 to v29, !1762
        v30 = load v22
        br block4(v30)

        block3():
        v31 = const u64 0, !5407
        revert v31, !5408

        block4(v32: { u64, ( { b256 } | { b256 } ) }):
        br block5(v32)

        block5(v33: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v33
    }

    pub fn decode_340(self !43: ptr { u64 }) -> u64, !5409 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_341(self), !5410
        ret u64 v0
    }

    pub fn abi_decode_341(buffer !5411: ptr { u64 }) -> u64, !5414 {
        entry(buffer: ptr { u64 }):
        v0 = call read_8_bytes_21(buffer), !5417
        ret u64 v0
    }

    pub fn decode_342(self !43: ptr { u64 }) -> { b256 }, !5418 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_343(self), !5419
        ret { b256 } v0
    }

    pub fn abi_decode_343(buffer !35: ptr { u64 }) -> { b256 }, !5420 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_3(buffer), !5421
        v1 = get_local ptr { b256 }, __anon_0, !42
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !42
        v4 = load v1
        ret { b256 } v4
    }

    pub fn decode_344(self !43: ptr { u64 }) -> { b256 }, !5422 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_345(self), !5423
        ret { b256 } v0
    }

    pub fn abi_decode_345(buffer !3501: ptr { u64 }) -> { b256 }, !5425 {
        local { b256 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_3(buffer), !5428
        v1 = get_local ptr { b256 }, __anon_0, !5429
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !5429
        v4 = load v1
        ret { b256 } v4
    }

    pub fn deposit_for_346(user !5430: { u64, ( { b256 } | { b256 } ) }) -> (), !5433 {
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_2
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_2_
        local { { u64, u64 }, { u64, u64 } } account
        local u64 amount
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } caller

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call require_not_paused_97(), !5436
        v1 = call reentrancy_guard_112(), !5439
        v2 = call msg_sender_79(), !5442
        v3 = call unwrap_78(v2), !5445
        v4 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !5446
        store v3 to v4, !5446
        v5 = call deposit_internal_314(user), !5449
        v6 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2, !5450
        store v5 to v6, !5450
        v7 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2, !5450
        v8 = load v7
        v9 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        store v8 to v9, !5450
        v10 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !5450
        v13 = load v12
        v14 = get_local ptr u64, amount, !5450
        store v13 to v14, !5450
        v15 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { b256 }, v16, !5450
        v18 = load v17
        v19 = get_local ptr { b256 }, asset, !5450
        store v18 to v19, !5450
        v20 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        v21 = const u64 2
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, { u64, u64 } }, v21, !5450
        v23 = load v22
        v24 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5450
        store v23 to v24, !5450
        v25 = get_local ptr u64, amount, !5451
        v26 = load v25
        v27 = get_local ptr { b256 }, asset, !5452
        v28 = load v27
        v29 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5453
        v30 = load v29
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !5454
        v32 = load v31
        v33 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !5455
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        store v26 to v35, !5455
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { b256 }, v36
        store v28 to v37, !5455
        v38 = const u64 2
        v39 = get_elem_ptr v33, ptr { u64, ( { b256 } | { b256 } ) }, v38
        store user to v39, !5455
        v40 = const u64 3
        v41 = get_elem_ptr v33, ptr { { u64, u64 }, { u64, u64 } }, v40
        store v30 to v41, !5455
        v42 = const u64 4
        v43 = get_elem_ptr v33, ptr { u64, ( { b256 } | { b256 } ) }, v42
        store v32 to v43, !5455
        v44 = load v33
        v45 = call log_333(v44), !5458
        v46 = const unit ()
        ret () v46
    }

    pub fn decode_347(self !43: ptr { u64 }) -> { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, !5459 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_348(self), !5460
        ret { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } } v0
    }

    pub fn abi_decode_348(buffer !5461: ptr { u64 }) -> { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, !5464 {
        local { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !5467
        v1 = call abi_decode_349(buffer), !5470
        v2 = call abi_decode_350(buffer), !5473
        v3 = call abi_decode_341(buffer), !5476
        v4 = call abi_decode_341(buffer), !5479
        v5 = call abi_decode_351(buffer), !5482
        v6 = get_local ptr { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } }, __anon_0, !5483
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !5483
        store v0 to v8, !5483
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr { u64 }, v9, !5483
        store v1 to v10, !5483
        v11 = const u64 2
        v12 = get_elem_ptr v6, ptr { u64 }, v11, !5483
        store v2 to v12, !5483
        v13 = const u64 3
        v14 = get_elem_ptr v6, ptr u64, v13, !5483
        store v3 to v14, !5483
        v15 = const u64 4
        v16 = get_elem_ptr v6, ptr u64, v15, !5483
        store v4 to v16, !5483
        v17 = const u64 5
        v18 = get_elem_ptr v6, ptr { { u64, u64 }, u64 }, v17, !5483
        store v5 to v18, !5483
        v19 = load v6
        ret { u64, { u64 }, { u64 }, u64, u64, { { u64, u64 }, u64 } } v19
    }

    pub fn abi_decode_349(buffer !1557: ptr { u64 }) -> { u64 }, !5485 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64 }):
        v0 = call decode_340(buffer), !5488
        v1 = get_local ptr u64, variant, !5489
        store v0 to v1, !5489
        v2 = get_local ptr u64, variant, !5490
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !5491
        store v3 to v4, !5491
        v5 = get_local ptr u64, __matched_value_1, !5490
        v6 = load v5
        v7 = const u64 0, !5492
        v8 = call eq_10(v6, v7), !5495
        cbr v8, block0(), block1(), !5493

        block0():
        v9 = get_local ptr { u64 }, __anon_0, !3570
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !3570
        v12 = const u64 0, !3570
        store v12 to v11, !3570
        v13 = load v9
        br block5(v13)

        block1():
        v14 = get_local ptr u64, __matched_value_1, !5490
        v15 = load v14
        v16 = const u64 1, !5496
        v17 = call eq_10(v15, v16), !5499
        cbr v17, block2(), block3(), !5497

        block2():
        v18 = get_local ptr { u64 }, __anon_1, !3570
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !3570
        v21 = const u64 1, !3570
        store v21 to v20, !3570
        v22 = load v18
        br block4(v22)

        block3():
        v23 = const u64 0, !5500
        revert v23, !5501

        block4(v24: { u64 }):
        br block5(v24)

        block5(v25: { u64 }):
        ret { u64 } v25
    }

    pub fn abi_decode_350(buffer !1557: ptr { u64 }) -> { u64 }, !5503 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_2
        local { u64 } __anon_3
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64 }):
        v0 = call decode_340(buffer), !5504
        v1 = get_local ptr u64, variant, !5489
        store v0 to v1, !5489
        v2 = get_local ptr u64, variant, !5490
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !5505
        store v3 to v4, !5505
        v5 = get_local ptr u64, __matched_value_1, !5490
        v6 = load v5
        v7 = const u64 0, !5492
        v8 = call eq_10(v6, v7), !5506
        cbr v8, block0(), block1(), !5493

        block0():
        v9 = get_local ptr { u64 }, __anon_0, !5508
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !5508
        v12 = const u64 0, !5508
        store v12 to v11, !5508
        v13 = load v9
        br block11(v13)

        block1():
        v14 = get_local ptr u64, __matched_value_1, !5490
        v15 = load v14
        v16 = const u64 1, !5496
        v17 = call eq_10(v15, v16), !5511
        cbr v17, block2(), block3(), !5509

        block2():
        v18 = get_local ptr { u64 }, __anon_1, !5508
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !5508
        v21 = const u64 1, !5508
        store v21 to v20, !5508
        v22 = load v18
        br block10(v22)

        block3():
        v23 = get_local ptr u64, __matched_value_1, !5490
        v24 = load v23
        v25 = const u64 2, !5512
        v26 = call eq_10(v24, v25), !5515
        cbr v26, block4(), block5(), !5513

        block4():
        v27 = get_local ptr { u64 }, __anon_2, !5508
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !5508
        v30 = const u64 2, !5508
        store v30 to v29, !5508
        v31 = load v27
        br block9(v31)

        block5():
        v32 = get_local ptr u64, __matched_value_1, !5490
        v33 = load v32
        v34 = const u64 3, !5516
        v35 = call eq_10(v33, v34), !5519
        cbr v35, block6(), block7(), !5517

        block6():
        v36 = get_local ptr { u64 }, __anon_3, !5508
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !5508
        v39 = const u64 3, !5508
        store v39 to v38, !5508
        v40 = load v36
        br block8(v40)

        block7():
        v41 = const u64 0, !5520
        revert v41, !5521

        block8(v42: { u64 }):
        br block9(v42)

        block9(v43: { u64 }):
        br block10(v43)

        block10(v44: { u64 }):
        br block11(v44)

        block11(v45: { u64 }):
        ret { u64 } v45
    }

    pub fn abi_decode_351(buffer !5523: ptr { u64 }) -> { { u64, u64 }, u64 }, !5526 {
        local mut u64 i
        local b256 item
        local u64 len
        local mut { { u64, u64 }, u64 } v

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !5529
        v1 = get_local ptr u64, len, !5530
        store v0 to v1, !5530
        v2 = get_local ptr u64, len, !5531
        v3 = load v2
        v4 = call with_capacity_352(v3), !5534
        v5 = get_local ptr { { u64, u64 }, u64 }, v, !5535
        store v4 to v5, !5535
        v6 = get_local ptr u64, i, !5536
        v7 = const u64 0, !5537
        store v7 to v6, !5536
        br while()

        while():
        v8 = get_local ptr u64, i, !5538
        v9 = load v8
        v10 = get_local ptr u64, len, !5539
        v11 = load v10
        v12 = call lt_86(v9, v11), !5542
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = call abi_decode_4(buffer), !5545
        v14 = get_local ptr b256, item, !5546
        store v13 to v14, !5546
        v15 = get_local ptr { { u64, u64 }, u64 }, v, !5547
        v16 = get_local ptr b256, item, !5548
        v17 = load v16
        v18 = call push_355(v15, v17), !5551
        v19 = get_local ptr u64, i, !5552
        v20 = load v19
        v21 = const u64 1, !5553
        v22 = call add_38(v20, v21), !5556
        v23 = get_local ptr u64, i, !5554
        store v22 to v23, !5554
        br while()

        end_while():
        v24 = get_local ptr { { u64, u64 }, u64 }, v, !5557
        v25 = load v24
        ret { { u64, u64 }, u64 } v25
    }

    pub fn with_capacity_352(capacity !5558: u64) -> { { u64, u64 }, u64 }, !5561 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_353(capacity), !5564
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !5565
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !5565
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !5566
        store v6 to v5, !5565
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_353(capacity !5567: u64) -> { u64, u64 }, !5570 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_354(capacity), !5573
        v1 = get_local ptr { u64, u64 }, __anon_0, !5574
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !5574
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !5574
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn alloc_354(count !1435: u64) -> u64, !5575 {
        entry(count: u64):
        v0 = const u64 32
        v1 = call multiply_39(v0, count), !5576
        v2 = asm(size: v1, ptr) -> u64 ptr, !1442 {
            aloc   size, !1443
            move   ptr hp, !1444
        }
        ret u64 v2
    }

    pub fn push_355(self !5577: ptr { { u64, u64 }, u64 }, value !5578: b256) -> (), !5581 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: b256):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !5582
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !5583
        v5 = load v4
        v6 = call capacity_356(v5), !5586
        v7 = call eq_10(v2, v6), !5589
        cbr v7, block0(), block1(), !5587

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !5583
        v10 = call grow_357(v9), !5592
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !5583
        v16 = load v15
        v17 = call ptr_361(v16), !5595
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !5582
        v20 = load v19
        v21 = call add_360(v17, v20), !5598
        v22 = get_local ptr u64, end, !5599
        store v21 to v22, !5599
        v23 = get_local ptr u64, end, !5600
        v24 = load v23
        v25 = call write_295(v24, value), !5603
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !5582
        v28 = load v27
        v29 = const u64 1, !5604
        v30 = call add_38(v28, v29), !5607
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !5605
        store v30 to v32, !5605
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_356(self !5608: { u64, u64 }) -> u64, !5611 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !5612
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_357(self !5613: ptr { u64, u64 }) -> (), !5616 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !5612
        v2 = load v1
        v3 = const u64 0, !5617
        v4 = call eq_10(v2, v3), !5620
        cbr v4, block0(), block1(), !5618

        block0():
        v5 = const u64 1, !5621
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !5612
        v8 = load v7
        v9 = const u64 2, !5622
        v10 = call multiply_39(v9, v8), !5625
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !5626
        store v11 to v12, !5626
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !5627
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !5612
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !5628
        v20 = load v19
        v21 = call realloc_358(v15, v18, v20), !5631
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !5632
        store v21 to v23, !5632
        v24 = get_local ptr u64, new_cap, !5633
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !5634
        store v25 to v27, !5634
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_358(ptr !5635: u64, count !5636: u64, new_count !5637: u64) -> u64, !5640 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_89(new_count, count), !5643
        cbr v0, block0(), block4(), !5641

        block0():
        v1 = call alloc_354(new_count), !5646
        v2 = get_local ptr u64, new_ptr, !5647
        store v1 to v2, !5647
        v3 = const u64 0, !5648
        v4 = call gt_89(count, v3), !5651
        cbr v4, block1(), block2(), !5649

        block1():
        v5 = get_local ptr u64, new_ptr, !5652
        v6 = load v5
        v7 = call copy_to_359(ptr, v6, count), !5655
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !5656
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_359(self !2825: u64, dst !2826: u64, count !2827: u64) -> (), !5657 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 32
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !2831
        store v1 to v2, !2831
        v3 = get_local ptr u64, len, !2832
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !2833 {
            mcp    dst src len, !2834
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_360(self !1038: u64, count !1039: u64) -> u64, !5658 {
        entry(self: u64, count: u64):
        v0 = const u64 32
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_361(self !5659: { u64, u64 }) -> u64, !5662 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !5627
        v4 = load v3
        ret u64 v4
    }

    pub fn fulfill_order_many_362(amount !5663: u64, order_type !5664: { u64 }, limit_type !5665: { u64 }, price !5666: u64, slippage !5667: u64, orders !5668: { { u64, u64 }, u64 }) -> b256, !5671 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_1
        local { u64 } __anon_10
        local { u64 } __anon_11
        local { u64, ( { b256, b256 } | () | () | () ) } __anon_12
        local { u64 } __anon_13
        local { u64 } __anon_14
        local { u64, ( { b256, b256 } | () | () | () ) } __anon_15
        local { u64 } __anon_16
        local { u64 } __anon_17
        local { u64 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { u64 } __anon_5
        local { u64 } __anon_6
        local { u64 } __anon_7
        local { u64 } __anon_8
        local { u64 } __anon_9
        local { u64 } __matched_value_2
        local { { u64 }, b256 } __tuple_7
        local { { u64 }, b256 } __tuple_7_
        local b256 id0
        local b256 id1
        local mut u64 idx1
        local u64 len
        local { u64 } match_result
        local mut { u64 } matched
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order0
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order1
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order1_
        local b256 partial_order_id
        local u64 slippage_

        entry(amount: u64, order_type: { u64 }, limit_type: { u64 }, price: u64, slippage: u64, orders: { { u64, u64 }, u64 }):
        v0 = call require_not_paused_97(), !5674
        v1 = call reentrancy_guard_112(), !5677
        v2 = call len_363(orders), !5680
        v3 = const u64 0, !5681
        v4 = call gt_89(v2, v3), !5684
        v5 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !5069
        v8 = const u64 2, !5069
        store v8 to v7, !5069
        v9 = load v5
        v10 = call require_317(v4, v9), !5687
        v11 = const u64 10000, !4258
        v12 = call le_210(slippage, v11), !5690
        v13 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_1, !5069
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !5069
        v16 = const u64 1, !5069
        store v16 to v15, !5069
        v17 = load v13
        v18 = call require_317(v12, v17), !5693
        v19 = const u64 0, !5694
        v20 = call open_order_internal_364(amount, order_type, price, v19, limit_type), !5697
        v21 = get_local ptr b256, id0, !5698
        store v20 to v21, !5698
        v22 = call len_363(orders), !5701
        v23 = get_local ptr u64, len, !5702
        store v22 to v23, !5702
        v24 = get_local ptr u64, idx1, !5703
        v25 = const u64 0, !5704
        store v25 to v24, !5703
        v26 = get_local ptr { u64 }, __anon_2, !5706
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !5706
        v29 = const u64 0, !5706
        store v29 to v28, !5706
        v30 = load v26
        v31 = get_local ptr { u64 }, matched, !5707
        store v30 to v31, !5707
        v32 = call multiply_39(price, slippage), !5710
        v33 = call divide_232(v32, v11), !5713
        v34 = get_local ptr u64, slippage_, !5714
        store v33 to v34, !5714
        br while()

        while():
        v35 = get_local ptr u64, idx1, !5715
        v36 = load v35
        v37 = get_local ptr u64, len, !5716
        v38 = load v37
        v39 = call lt_86(v36, v38), !5719
        cbr v39, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v40 = get_local ptr { b256, u64, b256 }, __anon_3, !5720
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr b256, v41
        v43 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5720
        store v43 to v42, !5720
        v44 = const u64 1
        v45 = get_elem_ptr v40, ptr u64, v44
        v46 = const u64 0
        store v46 to v45, !5720
        v47 = const u64 2
        v48 = get_elem_ptr v40, ptr b256, v47
        v49 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5720
        store v49 to v48, !5720
        v50 = load v40
        v51 = get_local ptr b256, id0, !5721
        v52 = load v51
        v53 = call get_131(v50, v52), !5724
        v54 = call read_420(v53), !5727
        v55 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order0, !5728
        store v54 to v55, !5728
        v56 = get_local ptr u64, idx1, !5729
        v57 = load v56
        v58 = call get_421(orders, v57), !5732
        v59 = call unwrap_275(v58), !5735
        v60 = get_local ptr b256, id1, !5736
        store v59 to v60, !5736
        v61 = get_local ptr { b256, u64, b256 }, __anon_4, !5737
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5737
        store v64 to v63, !5737
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !5737
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5737
        store v70 to v69, !5737
        v71 = load v61
        v72 = get_local ptr b256, id1, !5738
        v73 = load v72
        v74 = call get_131(v71, v73), !5741
        v75 = call try_read_125(v74), !5744
        v76 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !5745
        store v75 to v76, !5745
        v77 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !5746
        v78 = load v77
        v79 = call is_some_164(v78), !5749
        cbr v79, block0(), block25(), !5747

        block0():
        v80 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !5750
        v81 = load v80
        v82 = call unwrap_165(v81), !5753
        v83 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5754
        store v82 to v83, !5754
        v84 = get_local ptr { u64 }, __anon_5, !3570
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !3570
        v87 = const u64 1, !3570
        store v87 to v86, !3570
        v88 = load v84
        v89 = call eq_213(order_type, v88), !5757
        cbr v89, block1(), block2(v89), !5758

        block1():
        v90 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5759
        v91 = const u64 4
        v92 = get_elem_ptr v90, ptr u64, v91, !3575
        v93 = load v92
        v94 = call distance_422(price, v93), !5762
        v95 = get_local ptr u64, slippage_, !5763
        v96 = load v95
        v97 = call le_210(v94, v96), !5766
        br block2(v97), !5758

        block2(v98: bool):
        cbr v98, block4(v98), block3(), !5767

        block3():
        v99 = get_local ptr { u64 }, __anon_6, !3570
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !3570
        v102 = const u64 0, !3570
        store v102 to v101, !3570
        v103 = load v99
        v104 = call eq_213(order_type, v103), !5770
        cbr v104, block5(), block6(v104), !5771

        block4(v105: bool):
        cbr v105, block7(), block23(), !5767

        block5():
        v106 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5772
        v107 = const u64 4
        v108 = get_elem_ptr v106, ptr u64, v107, !3575
        v109 = load v108
        v110 = call distance_422(price, v109), !5775
        v111 = get_local ptr u64, slippage_, !5776
        v112 = load v111
        v113 = call le_210(v110, v112), !5779
        br block6(v113), !5771

        block6(v114: bool):
        br block4(v114), !5767

        block7():
        v115 = get_local ptr b256, id0, !5780
        v116 = load v115
        v117 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order0, !5781
        v118 = load v117
        v119 = get_local ptr b256, id1, !5782
        v120 = load v119
        v121 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5783
        v122 = load v121
        v123 = get_local ptr b256, id1, !5784
        v124 = load v123
        v125 = call non_limit_order_type_458(v124), !5787
        v126 = call unwrap_457(v125), !5790
        v127 = call match_order_internal_423(v116, v118, limit_type, v120, v122, v126), !5793
        v128 = get_local ptr { { u64 }, b256 }, __tuple_7, !5794
        store v127 to v128, !5794
        v129 = get_local ptr { { u64 }, b256 }, __tuple_7, !5794
        v130 = load v129
        v131 = get_local ptr { { u64 }, b256 }, __tuple_7_, !5794
        store v130 to v131, !5794
        v132 = get_local ptr { { u64 }, b256 }, __tuple_7_, !5794
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr { u64 }, v133, !5794
        v135 = load v134
        v136 = get_local ptr { u64 }, match_result, !5794
        store v135 to v136, !5794
        v137 = get_local ptr { { u64 }, b256 }, __tuple_7_, !5794
        v138 = const u64 1
        v139 = get_elem_ptr v137, ptr b256, v138, !5794
        v140 = load v139
        v141 = get_local ptr b256, partial_order_id, !5794
        store v140 to v141, !5794
        v142 = get_local ptr { u64 }, match_result, !5795
        v143 = load v142
        v144 = get_local ptr { u64 }, __matched_value_2, !5796
        store v143 to v144, !5796
        v145 = get_local ptr { u64 }, __matched_value_2, !5795
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr u64, v146, !5795
        v148 = load v147
        v149 = const u64 0, !5795
        v150 = call eq_10(v148, v149), !5799
        cbr v150, block8(), block9(), !5797

        block8():
        v151 = const unit ()
        br block19(v151)

        block9():
        v152 = get_local ptr { u64 }, __matched_value_2, !5795
        v153 = const u64 0
        v154 = get_elem_ptr v152, ptr u64, v153, !5795
        v155 = load v154
        v156 = const u64 1, !5795
        v157 = call eq_10(v155, v156), !5802
        cbr v157, block10(), block14(), !5800

        block10():
        v158 = get_local ptr b256, partial_order_id, !5803
        v159 = load v158
        v160 = get_local ptr b256, id1, !5804
        v161 = load v160
        v162 = call eq_67(v159, v161), !5807
        cbr v162, block11(), block12(), !5805

        block11():
        v163 = get_local ptr { u64 }, __anon_7, !5706
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr u64, v164, !5706
        v166 = const u64 2, !5706
        store v166 to v165, !5706
        v167 = load v163
        br block13(v167)

        block12():
        v168 = get_local ptr { u64 }, __anon_8, !5706
        v169 = const u64 0
        v170 = get_elem_ptr v168, ptr u64, v169, !5706
        v171 = const u64 1, !5706
        store v171 to v170, !5706
        v172 = load v168
        br block13(v172)

        block13(v173: { u64 }):
        v174 = get_local ptr { u64 }, matched, !5808
        store v173 to v174, !5808
        v175 = const unit ()
        br block18(v175)

        block14():
        v176 = get_local ptr { u64 }, __matched_value_2, !5795
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr u64, v177, !5795
        v179 = load v178
        v180 = const u64 2, !5795
        v181 = call eq_10(v179, v180), !5811
        cbr v181, block15(), block16(), !5809

        block15():
        v182 = get_local ptr { u64 }, __anon_9, !5706
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !5706
        v185 = const u64 2, !5706
        store v185 to v184, !5706
        v186 = load v182
        v187 = get_local ptr { u64 }, matched, !5812
        store v186 to v187, !5812
        v188 = const unit ()
        br block17(v188)

        block16():
        v189 = const u64 14757395258967588866, !5796
        revert v189, !5796

        block17(v190: ()):
        br block18(v190)

        block18(v191: ()):
        br block19(v191)

        block19(v192: ()):
        v193 = get_local ptr { u64 }, matched, !5813
        v194 = load v193
        v195 = get_local ptr { u64 }, __anon_10, !5706
        v196 = const u64 0
        v197 = get_elem_ptr v195, ptr u64, v196, !5706
        v198 = const u64 2, !5706
        store v198 to v197, !5706
        v199 = load v195
        v200 = call eq_456(v194, v199), !5816
        cbr v200, block20(), block21(), !5814

        block20():
        br while_break()

        block21():
        v201 = const unit ()
        br block22(v201)

        block22(v202: ()):
        br block24(v202)

        block23():
        v203 = const unit ()
        br block24(v203)

        block24(v204: ()):
        br block26(v204)

        block25():
        v205 = const unit ()
        br block26(v205)

        block26(v206: ()):
        v207 = get_local ptr u64, idx1, !5817
        v208 = load v207
        v209 = const u64 1, !5818
        v210 = call add_38(v208, v209), !5821
        v211 = get_local ptr u64, idx1, !5819
        store v210 to v211, !5819
        br while()

        end_while():
        v212 = get_local ptr { u64 }, matched, !5822
        v213 = load v212
        v214 = get_local ptr { u64 }, __anon_11, !5706
        v215 = const u64 0
        v216 = get_elem_ptr v214, ptr u64, v215, !5706
        v217 = const u64 0, !5706
        store v217 to v216, !5706
        v218 = load v214
        v219 = call eq_456(v213, v218), !5825
        v220 = call not_27(v219), !5828
        v221 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __anon_12, !5829
        v222 = const u64 0
        v223 = get_elem_ptr v221, ptr u64, v222, !5829
        v224 = const u64 2, !5829
        store v224 to v223, !5829
        v225 = load v221
        v226 = call require_459(v220, v225), !5832
        v227 = get_local ptr { u64 }, matched, !5833
        v228 = load v227
        v229 = get_local ptr { u64 }, __anon_13, !5706
        v230 = const u64 0
        v231 = get_elem_ptr v229, ptr u64, v230, !5706
        v232 = const u64 1, !5706
        store v232 to v231, !5706
        v233 = load v229
        v234 = call eq_456(v228, v233), !5836
        cbr v234, block27(), block28(v234), !5837

        block27():
        v235 = get_local ptr { u64 }, __anon_14, !5508
        v236 = const u64 0
        v237 = get_elem_ptr v235, ptr u64, v236, !5508
        v238 = const u64 2, !5508
        store v238 to v237, !5508
        v239 = load v235
        v240 = call eq_464(limit_type, v239), !5840
        br block28(v240), !5837

        block28(v241: bool):
        v242 = call not_27(v241), !5843
        v243 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __anon_15, !5829
        v244 = const u64 0
        v245 = get_elem_ptr v243, ptr u64, v244, !5829
        v246 = const u64 3, !5829
        store v246 to v245, !5829
        v247 = load v243
        v248 = call require_459(v242, v247), !5846
        v249 = get_local ptr { u64 }, matched, !5847
        v250 = load v249
        v251 = get_local ptr { u64 }, __anon_16, !5706
        v252 = const u64 0
        v253 = get_elem_ptr v251, ptr u64, v252, !5706
        v254 = const u64 1, !5706
        store v254 to v253, !5706
        v255 = load v251
        v256 = call eq_456(v250, v255), !5850
        cbr v256, block29(), block30(v256), !5851

        block29():
        v257 = get_local ptr { u64 }, __anon_17, !5508
        v258 = const u64 0
        v259 = get_elem_ptr v257, ptr u64, v258, !5508
        v260 = const u64 1, !5508
        store v260 to v259, !5508
        v261 = load v257
        v262 = call eq_464(limit_type, v261), !5854
        br block30(v262), !5851

        block30(v263: bool):
        cbr v263, block31(), block32(), !5851

        block31():
        v264 = get_local ptr b256, id0, !5855
        v265 = load v264
        v266 = call cancel_order_internal_123(v265), !5858
        v267 = const unit ()
        br block33(v267)

        block32():
        v268 = const unit ()
        br block33(v268)

        block33(v269: ()):
        v270 = get_local ptr b256, id0, !5859
        v271 = load v270
        ret b256 v271
    }

    pub fn len_363(self !5860: { { u64, u64 }, u64 }) -> u64, !5863 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !5582
        v4 = load v3
        ret u64 v4
    }

    fn open_order_internal_364(amount !5864: u64, order_type !5865: { u64 }, price !5866: u64, matcher_fee !5867: u64, limit_type !5868: { u64 }) -> b256, !5871 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_0
        local { u64 } __anon_1
        local { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } } __anon_10
        local { b256, u64, b256 } __anon_2
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_3
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { b256, u64, b256 } __anon_9
        local { u64 } __matched_value_10
        local { u64, u64 } __tuple_9
        local { u64, u64 } __tuple_9_
        local mut { { u64, u64 }, { u64, u64 } } account
        local { u64 } asset_type
        local mut { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order
        local b256 order_id
        local u64 protocol_maker_fee
        local u64 protocol_taker_fee
        local { u64, ( { b256 } | { b256 } ) } user

        entry(amount: u64, order_type: { u64 }, price: u64, matcher_fee: u64, limit_type: { u64 }):
        v0 = call msg_sender_79(), !5874
        v1 = call unwrap_78(v0), !5877
        v2 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5878
        store v1 to v2, !5878
        v3 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5879
        v4 = load v3
        v5 = call protocol_fee_user_365(v4), !5882
        v6 = get_local ptr { u64, u64 }, __tuple_9, !5883
        store v5 to v6, !5883
        v7 = get_local ptr { u64, u64 }, __tuple_9, !5883
        v8 = load v7
        v9 = get_local ptr { u64, u64 }, __tuple_9_, !5883
        store v8 to v9, !5883
        v10 = get_local ptr { u64, u64 }, __tuple_9_, !5883
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !5883
        v13 = load v12
        v14 = get_local ptr u64, protocol_maker_fee, !5883
        store v13 to v14, !5883
        v15 = get_local ptr { u64, u64 }, __tuple_9_, !5883
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr u64, v16, !5883
        v18 = load v17
        v19 = get_local ptr u64, protocol_taker_fee, !5883
        store v18 to v19, !5883
        v20 = call valid_order_amount_310(amount), !5886
        v21 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_0, !2493
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !2493
        v24 = const u64 3, !2493
        store v24 to v23, !2493
        v25 = const u64 1
        v26 = const u64 3
        v27 = get_elem_ptr v21, ptr u64, v25, v26, !2493
        store amount to v27, !2493
        v28 = load v21
        v29 = call require_158(v20, v28), !5889
        v30 = get_local ptr { u64 }, __anon_1, !4280
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !4280
        v33 = const u64 0, !4280
        store v33 to v32, !4280
        v34 = load v30
        v35 = get_local ptr { u64 }, asset_type, !5890
        store v34 to v35, !5890
        v36 = get_local ptr { u64 }, asset_type, !5891
        v37 = load v36
        v38 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5892
        v39 = load v38
        v40 = call height_172(), !5895
        v41 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5896
        v42 = load v41
        v43 = call next_order_height_397(v42), !5899
        v44 = get_local ptr u64, protocol_maker_fee, !5900
        v45 = load v44
        v46 = get_local ptr u64, protocol_taker_fee, !5901
        v47 = load v46
        v48 = call read_min_order_price_401(), !5904
        v49 = call new_394(amount, v37, order_type, v39, price, v40, v43, matcher_fee, v45, v47, v48), !5907
        v50 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5908
        store v49 to v50, !5908
        v51 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5909
        v52 = load v51
        v53 = call id_402(v52), !5912
        v54 = get_local ptr b256, order_id, !5913
        store v53 to v54, !5913
        v55 = get_local ptr { b256, u64, b256 }, __anon_2, !5914
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr b256, v56
        v58 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5914
        store v58 to v57, !5914
        v59 = const u64 1
        v60 = get_elem_ptr v55, ptr u64, v59
        v61 = const u64 0
        store v61 to v60, !5914
        v62 = const u64 2
        v63 = get_elem_ptr v55, ptr b256, v62
        v64 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5914
        store v64 to v63, !5914
        v65 = load v55
        v66 = get_local ptr b256, order_id, !5915
        v67 = load v66
        v68 = call get_131(v65, v67), !5918
        v69 = call try_read_125(v68), !5921
        v70 = call is_none_409(v69), !5924
        v71 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_3, !2493
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !2493
        v74 = const u64 0, !2493
        store v74 to v73, !2493
        v75 = get_local ptr b256, order_id, !5925
        v76 = load v75
        v77 = const u64 1
        v78 = const u64 0
        v79 = get_elem_ptr v71, ptr b256, v77, v78, !2493
        store v76 to v79, !2493
        v80 = load v71
        v81 = call require_158(v70, v80), !5928
        v82 = get_local ptr { b256, u64, b256 }, __anon_4, !5929
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr b256, v83
        v85 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !5929
        store v85 to v84, !5929
        v86 = const u64 1
        v87 = get_elem_ptr v82, ptr u64, v86
        v88 = const u64 0
        store v88 to v87, !5929
        v89 = const u64 2
        v90 = get_elem_ptr v82, ptr b256, v89
        v91 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !5929
        store v91 to v90, !5929
        v92 = load v82
        v93 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5930
        v94 = load v93
        v95 = call get_270(v92, v94), !5933
        v96 = get_local ptr b256, order_id, !5934
        v97 = load v96
        v98 = call push_410(v95, v97), !5937
        v99 = get_local ptr { b256, u64, b256 }, __anon_5, !5938
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr b256, v100
        v102 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !5938
        store v102 to v101, !5938
        v103 = const u64 1
        v104 = get_elem_ptr v99, ptr u64, v103
        v105 = const u64 0
        store v105 to v104, !5938
        v106 = const u64 2
        v107 = get_elem_ptr v99, ptr b256, v106
        v108 = const b256 0xa9a782c9b2db2c3344386a833c2482275461e6078aee33a82e8a834f8be3019c, !5938
        store v108 to v107, !5938
        v109 = load v99
        v110 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5939
        v111 = load v110
        v112 = call get_264(v109, v111), !5942
        v113 = get_local ptr b256, order_id, !5943
        v114 = load v113
        v115 = get_local ptr { b256, u64, b256 }, __anon_6, !5944
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr b256, v116
        v118 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !5944
        store v118 to v117, !5944
        v119 = const u64 1
        v120 = get_elem_ptr v115, ptr u64, v119
        v121 = const u64 0
        store v121 to v120, !5944
        v122 = const u64 2
        v123 = get_elem_ptr v115, ptr b256, v122
        v124 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !5944
        store v124 to v123, !5944
        v125 = load v115
        v126 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5945
        v127 = load v126
        v128 = call get_270(v125, v127), !5948
        v129 = call len_267(v128), !5951
        v130 = const u64 1, !5952
        v131 = call subtract_211(v129, v130), !5955
        v132 = call insert_296(v112, v114, v131), !5958
        v133 = get_local ptr { b256, u64, b256 }, __anon_7, !5959
        v134 = const u64 0
        v135 = get_elem_ptr v133, ptr b256, v134
        v136 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5959
        store v136 to v135, !5959
        v137 = const u64 1
        v138 = get_elem_ptr v133, ptr u64, v137
        v139 = const u64 0
        store v139 to v138, !5959
        v140 = const u64 2
        v141 = get_elem_ptr v133, ptr b256, v140
        v142 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5959
        store v142 to v141, !5959
        v143 = load v133
        v144 = get_local ptr b256, order_id, !5960
        v145 = load v144
        v146 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5961
        v147 = load v146
        v148 = call insert_411(v143, v145, v147), !5964
        v149 = get_local ptr { b256, u64, b256 }, __anon_8, !5965
        v150 = const u64 0
        v151 = get_elem_ptr v149, ptr b256, v150
        v152 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !5965
        store v152 to v151, !5965
        v153 = const u64 1
        v154 = get_elem_ptr v149, ptr u64, v153
        v155 = const u64 0
        store v155 to v154, !5965
        v156 = const u64 2
        v157 = get_elem_ptr v149, ptr b256, v156
        v158 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !5965
        store v158 to v157, !5965
        v159 = load v149
        v160 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5966
        v161 = load v160
        v162 = call get_188(v159, v161), !5969
        v163 = call try_read_330(v162), !5972
        v164 = call new_331(), !5975
        v165 = call unwrap_or_329(v163, v164), !5978
        v166 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5979
        store v165 to v166, !5979
        v167 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5980
        v168 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5981
        v169 = load v168
        v170 = call lock_order_amount_212(v169), !5984
        v171 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5985
        v172 = const u64 2
        v173 = get_elem_ptr v171, ptr { u64 }, v172, !3171
        v174 = load v173
        v175 = get_local ptr { u64 }, __matched_value_10, !5986
        store v174 to v175, !5986
        v176 = get_local ptr { u64 }, __matched_value_10, !5987
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr u64, v177, !5987
        v179 = load v178
        v180 = const u64 1, !5987
        v181 = call eq_10(v179, v180), !5990
        cbr v181, block0(), block1(), !5988

        block0():
        v182 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5991
        v183 = const u64 1
        v184 = get_elem_ptr v182, ptr { u64 }, v183, !3177
        v185 = load v184
        br block5(v185)

        block1():
        v186 = get_local ptr { u64 }, __matched_value_10, !5987
        v187 = const u64 0
        v188 = get_elem_ptr v186, ptr u64, v187, !5987
        v189 = load v188
        v190 = const u64 0, !5987
        v191 = call eq_10(v189, v190), !5994
        cbr v191, block2(), block3(), !5992

        block2():
        v192 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order, !5995
        v193 = const u64 1
        v194 = get_elem_ptr v192, ptr { u64 }, v193, !3177
        v195 = load v194
        v196 = call not_249(v195), !5998
        br block4(v196)

        block3():
        v197 = const u64 14757395258967588866, !5986
        revert v197, !5986

        block4(v198: { u64 }):
        br block5(v198)

        block5(v199: { u64 }):
        v200 = call lock_amount_414(v167, v170, v199), !6001
        v201 = get_local ptr { b256, u64, b256 }, __anon_9, !6002
        v202 = const u64 0
        v203 = get_elem_ptr v201, ptr b256, v202
        v204 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6002
        store v204 to v203, !6002
        v205 = const u64 1
        v206 = get_elem_ptr v201, ptr u64, v205
        v207 = const u64 0
        store v207 to v206, !6002
        v208 = const u64 2
        v209 = get_elem_ptr v201, ptr b256, v208
        v210 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6002
        store v210 to v209, !6002
        v211 = load v201
        v212 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !6003
        v213 = load v212
        v214 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !6004
        v215 = load v214
        v216 = call insert_297(v211, v213, v215), !6007
        v217 = get_config ptr { b256 }, BASE_ASSET, !6008
        v218 = load v217
        v219 = get_local ptr b256, order_id, !6009
        v220 = load v219
        v221 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !6010
        v222 = load v221
        v223 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !6011
        v224 = load v223
        v225 = get_local ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }, __anon_10, !6012
        v226 = const u64 0
        v227 = get_elem_ptr v225, ptr u64, v226
        store amount to v227, !6012
        v228 = const u64 1
        v229 = get_elem_ptr v225, ptr { b256 }, v228
        store v218 to v229, !6012
        v230 = const u64 2
        v231 = get_elem_ptr v225, ptr { u64 }, v230
        store order_type to v231, !6012
        v232 = const u64 3
        v233 = get_elem_ptr v225, ptr b256, v232
        store v220 to v233, !6012
        v234 = const u64 4
        v235 = get_elem_ptr v225, ptr u64, v234
        store price to v235, !6012
        v236 = const u64 5
        v237 = get_elem_ptr v225, ptr { u64, ( { b256 } | { b256 } ) }, v236
        store v222 to v237, !6012
        v238 = const u64 6
        v239 = get_elem_ptr v225, ptr { { u64, u64 }, { u64, u64 } }, v238
        store v224 to v239, !6012
        v240 = const u64 7
        v241 = get_elem_ptr v225, ptr { u64 }, v240
        store limit_type to v241, !6012
        v242 = load v225
        v243 = call log_415(v242), !6015
        v244 = get_local ptr b256, order_id, !6016
        v245 = load v244
        ret b256 v245
    }

    fn protocol_fee_user_365(user !6017: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64 }, !6020 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64, u64 } __anon_2
        local { u64, u64, u64 } protocol_fee
        local u64 volume

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6021
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xf8d994e7da99e0ae0b7c197c84daa1435aacc84452457414f34ec989b95743d2, !6021
        store v3 to v2, !6021
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6021
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xf8d994e7da99e0ae0b7c197c84daa1435aacc84452457414f34ec989b95743d2, !6021
        store v9 to v8, !6021
        v10 = load v0
        v11 = call get_374(v10, user), !6024
        v12 = call try_read_368(v11), !6027
        v13 = call new_377(), !6030
        v14 = call unwrap_or_367(v12, v13), !6033
        v15 = call read_epoch_378(), !6036
        v16 = call get_366(v14, v15), !6039
        v17 = get_local ptr u64, volume, !6040
        store v16 to v17, !6040
        v18 = get_local ptr { b256, u64, b256 }, __anon_1, !6041
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr b256, v19
        v21 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !6041
        store v21 to v20, !6041
        v22 = const u64 1
        v23 = get_elem_ptr v18, ptr u64, v22
        v24 = const u64 0
        store v24 to v23, !6041
        v25 = const u64 2
        v26 = get_elem_ptr v18, ptr b256, v25
        v27 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !6041
        store v27 to v26, !6041
        v28 = load v18
        v29 = get_local ptr u64, volume, !6042
        v30 = load v29
        v31 = call get_volume_protocol_fee_379(v28, v30), !6045
        v32 = get_local ptr { u64, u64, u64 }, protocol_fee, !6046
        store v31 to v32, !6046
        v33 = get_local ptr { u64, u64, u64 }, protocol_fee, !6047
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !6049
        v36 = load v35
        v37 = get_local ptr { u64, u64, u64 }, protocol_fee, !6050
        v38 = const u64 1
        v39 = get_elem_ptr v37, ptr u64, v38, !6051
        v40 = load v39
        v41 = get_local ptr { u64, u64 }, __anon_2, !6052
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !6052
        store v36 to v43, !6052
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr u64, v44, !6052
        store v40 to v45, !6052
        v46 = load v41
        ret { u64, u64 } v46
    }

    pub fn get_366(self !6054: { u64, u64 }, protocol_epoch !6055: u64) -> u64, !6058 {
        entry(self: { u64, u64 }, protocol_epoch: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6059
        v4 = load v3
        v5 = call lt_86(v4, protocol_epoch), !6062
        cbr v5, block0(), block1(), !6060

        block0():
        v6 = const u64 0, !6063
        br block2(v6)

        block1():
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !6064
        v11 = load v10
        br block2(v11)

        block2(v12: u64):
        ret u64 v12
    }

    pub fn unwrap_or_367(self !1229: { u64, ( () | { u64, u64 } ) }, default !1230: { u64, u64 }) -> { u64, u64 }, !6065 {
        local { u64, ( () | { u64, u64 } ) } __matched_value_5
        local { u64, u64 } x

        entry(self: { u64, ( () | { u64, u64 } ) }, default: { u64, u64 }):
        v0 = get_local ptr { u64, ( () | { u64, u64 } ) }, __matched_value_5, !1234
        store self to v0, !1234
        v1 = get_local ptr { u64, ( () | { u64, u64 } ) }, __matched_value_5, !1235
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1235
        v4 = load v3
        v5 = const u64 1, !1235
        v6 = call eq_10(v4, v5), !6066
        cbr v6, block0(), block1(), !1236

        block0():
        v7 = get_local ptr { u64, ( () | { u64, u64 } ) }, __matched_value_5, !1235
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, u64 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, u64 }, x, !1239
        store v11 to v12, !1239
        v13 = get_local ptr { u64, u64 }, x, !1240
        v14 = load v13
        br block5(v14)

        block1():
        v15 = get_local ptr { u64, ( () | { u64, u64 } ) }, __matched_value_5, !1235
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !1235
        v18 = load v17
        v19 = const u64 0, !1235
        v20 = call eq_10(v18, v19), !6067
        cbr v20, block2(), block3(), !1241

        block2():
        br block4(default)

        block3():
        v21 = const u64 14757395258967588866, !1234
        revert v21, !1234

        block4(v22: { u64, u64 }):
        br block5(v22)

        block5(v23: { u64, u64 }):
        ret { u64, u64 } v23
    }

    pub fn try_read_368(self !1245: { b256, u64, b256 }) -> { u64, ( () | { u64, u64 } ) }, !6068 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_372(self), !6069
        v1 = call offset_373(self), !6070
        v2 = call read_369(v0, v1), !6071
        ret { u64, ( () | { u64, u64 } ) } v2
    }

    pub fn read_369(slot !1259: b256, offset !1260: u64) -> { u64, ( () | { u64, u64 } ) }, !6072 {
        local { u64, ( () | { u64, u64 } ) } __anon_0
        local { u64, ( () | { u64, u64 } ) } __anon_1
        local { u64, ( () | { u64, u64 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 16
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !6073
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | { u64, u64 } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { u64, u64 } ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_370(slot, offset), !6074
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !6075
        v34 = call alloc_47(v33), !6076
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | { u64, u64 } ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !6077
        v54 = call read_371(v53), !6078
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { u64, u64 }, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { u64, u64 } ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { u64, u64 } ) }):
        ret { u64, ( () | { u64, u64 } ) } v64
    }

    fn slot_calculator_370(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !6079 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 16
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !6080
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !6081
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !6082
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !6083
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !6084
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool true
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !6085
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !6086
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !6087
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !6088
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !6089
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !6090
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !6091
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !6092
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !6093
        v51 = call subtract_44(v47, v50), !6094
        v52 = call add_43(v44, v51), !6095
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !6096
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_371(self !1043: u64) -> { u64, u64 }, !6097 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> { u64, u64 } ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 16
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> { u64, u64 } val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u64, u64 } val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: { u64, u64 }):
        br block5(v7)

        block5(v8: { u64, u64 }):
        ret { u64, u64 } v8
    }

    pub fn slot_372(self !1446: { b256, u64, b256 }) -> b256, !6098 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_373(self !1451: { b256, u64, b256 }) -> u64, !6099 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn get_374(self !2534: { b256, u64, b256 }, key !2535: { u64, ( { b256 } | { b256 } ) }) -> { b256, u64, b256 }, !6100 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }):
        v0 = call field_id_375(self), !6101
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_189(v6), !6102
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_376(v10, v13, v12), !6103
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_375(self !2881: { b256, u64, b256 }) -> b256, !6104 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn new_376(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !6105 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn new_377() -> { u64, u64 }, !6108 {
        local { u64, u64 } __anon_0

        entry():
        v0 = get_local ptr { u64, u64 }, __anon_0, !6109
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 0, !6110
        store v3 to v2, !6109
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0, !6111
        store v6 to v5, !6109
        v7 = load v0
        ret { u64, u64 } v7
    }

    fn read_epoch_378() -> u64, !6114 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6115
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !6115
        store v3 to v2, !6115
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6115
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !6115
        store v9 to v8, !6115
        v10 = load v0
        v11 = call try_read_312(v10), !6118
        v12 = const u64 0, !5018
        v13 = call unwrap_or_268(v11, v12), !6121
        ret u64 v13
    }

    pub fn get_volume_protocol_fee_379(self !6122: { b256, u64, b256 }, volume !6123: u64) -> { u64, u64, u64 }, !6126 {
        local { u64, u64, u64 } __anon_0
        local mut u64 index
        local mut u64 left
        local u64 len
        local u64 mid
        local mut u64 right

        entry(self: { b256, u64, b256 }, volume: u64):
        v0 = call len_380(self), !6129
        v1 = get_local ptr u64, len, !6130
        store v0 to v1, !6130
        v2 = get_local ptr u64, len, !6131
        v3 = load v2
        v4 = const u64 0, !6132
        v5 = call eq_10(v3, v4), !6135
        cbr v5, block0(), block1(), !6133

        block0():
        v6 = call new_382(), !6138
        ret { u64, u64, u64 } v6, !6139

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = get_local ptr u64, index, !6140
        v10 = const u64 0, !6141
        store v10 to v9, !6140
        v11 = const u64 0, !6142
        v12 = call gt_89(volume, v11), !6145
        cbr v12, block3(), block7(), !6143

        block3():
        v13 = get_local ptr u64, left, !6146
        v14 = const u64 0, !6147
        store v14 to v13, !6146
        v15 = call len_380(self), !6150
        v16 = const u64 1, !6151
        v17 = call subtract_211(v15, v16), !6154
        v18 = get_local ptr u64, right, !6155
        store v17 to v18, !6155
        br while()

        while():
        v19 = get_local ptr u64, left, !6156
        v20 = load v19
        v21 = get_local ptr u64, right, !6157
        v22 = load v21
        v23 = call le_210(v20, v22), !6160
        cbr v23, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v24 = get_local ptr u64, left, !6161
        v25 = load v24
        v26 = get_local ptr u64, right, !6162
        v27 = load v26
        v28 = get_local ptr u64, left, !6163
        v29 = load v28
        v30 = call subtract_211(v27, v29), !6166
        v31 = const u64 2, !6167
        v32 = call divide_232(v30, v31), !6170
        v33 = call add_38(v25, v32), !6173
        v34 = get_local ptr u64, mid, !6174
        store v33 to v34, !6174
        v35 = get_local ptr u64, mid, !6175
        v36 = load v35
        v37 = call get_391(self, v36), !6178
        v38 = call unwrap_390(v37), !6181
        v39 = call read_383(v38), !6184
        v40 = get_local ptr { u64, u64, u64 }, __anon_0
        store v39 to v40
        v41 = const u64 2
        v42 = get_elem_ptr v40, ptr u64, v41, !6185
        v43 = load v42
        v44 = call le_210(v43, volume), !6188
        cbr v44, block4(), block5(), !6186

        block4():
        v45 = get_local ptr u64, mid, !6189
        v46 = load v45
        v47 = get_local ptr u64, index, !6190
        store v46 to v47, !6190
        v48 = get_local ptr u64, mid, !6191
        v49 = load v48
        v50 = const u64 1, !6192
        v51 = call add_38(v49, v50), !6195
        v52 = get_local ptr u64, left, !6196
        store v51 to v52, !6196
        v53 = const unit ()
        br block6(v53)

        block5():
        v54 = get_local ptr u64, mid, !6197
        v55 = load v54
        v56 = const u64 1, !6198
        v57 = call subtract_211(v55, v56), !6201
        v58 = get_local ptr u64, right, !6202
        store v57 to v58, !6202
        v59 = const unit ()
        br block6(v59)

        block6(v60: ()):
        br while()

        end_while():
        v61 = const unit (), !6203
        br block8(v61)

        block7():
        v62 = const unit ()
        br block8(v62)

        block8(v63: ()):
        v64 = get_local ptr u64, index, !6204
        v65 = load v64
        v66 = call get_391(self, v65), !6207
        v67 = call unwrap_390(v66), !6210
        v68 = call read_383(v67), !6213
        ret { u64, u64, u64 } v68
    }

    pub fn len_380(self !4478: { b256, u64, b256 }) -> u64, !6214 {
        entry(self: { b256, u64, b256 }):
        v0 = call field_id_381(self), !6215
        v1 = const u64 0, !4485
        v2 = call read_257(v0, v1), !6216
        v3 = const u64 0, !4489
        v4 = call unwrap_or_268(v2, v3), !6217
        ret u64 v4
    }

    pub fn field_id_381(self !2881: { b256, u64, b256 }) -> b256, !6218 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    fn new_382() -> { u64, u64, u64 }, !6221 {
        local { u64, u64, u64 } __anon_0

        entry():
        v0 = get_local ptr { u64, u64, u64 }, __anon_0, !6222
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1
        v3 = const u64 0, !6223
        store v3 to v2, !6222
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0, !6224
        store v6 to v5, !6222
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr u64, v7
        v9 = const u64 0, !6225
        store v9 to v8, !6222
        v10 = load v0
        ret { u64, u64, u64 } v10
    }

    pub fn read_383(self !3203: { b256, u64, b256 }) -> { u64, u64, u64 }, !6226 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_388(self), !6227
        v1 = call offset_389(self), !6228
        v2 = call read_385(v0, v1), !6229
        v3 = call unwrap_384(v2), !6230
        ret { u64, u64, u64 } v3
    }

    pub fn unwrap_384(self !2059: { u64, ( () | { u64, u64, u64 } ) }) -> { u64, u64, u64 }, !6231 {
        local { u64, ( () | { u64, u64, u64 } ) } __matched_value_4
        local { u64, u64, u64 } inner_value

        entry(self: { u64, ( () | { u64, u64, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !6232
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, u64, u64 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, u64, u64 }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { u64, u64, u64 }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !6233
        br block2(v16)

        block2(v17: { u64, u64, u64 }):
        ret { u64, u64, u64 } v17
    }

    pub fn read_385(slot !1259: b256, offset !1260: u64) -> { u64, ( () | { u64, u64, u64 } ) }, !6234 {
        local { u64, ( () | { u64, u64, u64 } ) } __anon_0
        local { u64, ( () | { u64, u64, u64 } ) } __anon_1
        local { u64, ( () | { u64, u64, u64 } ) } __anon_2
        local { b256, u64, u64 } __tuple_2
        local { b256, u64, u64 } __tuple_2_
        local b256 key_for_storage
        local u64 number_of_slots
        local b256 offset_slot
        local u64 place_in_slot
        local u64 result_ptr

        entry(slot: b256, offset: u64):
        v0 = const u64 24
        v1 = const u64 0, !1264
        v2 = call eq_10(v0, v1), !6235
        cbr v2, block0(), block1(), !1265

        block0():
        v3 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { u64, u64, u64 } ) } v7, !1269

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = call slot_calculator_386(slot, offset), !6236
        v11 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        store v10 to v11, !1273
        v12 = get_local ptr { b256, u64, u64 }, __tuple_2, !1273
        v13 = load v12
        v14 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        store v13 to v14, !1273
        v15 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr b256, v16, !1273
        v18 = load v17
        v19 = get_local ptr b256, offset_slot, !1273
        store v18 to v19, !1273
        v20 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !1273
        v23 = load v22
        v24 = get_local ptr u64, number_of_slots, !1273
        store v23 to v24, !1273
        v25 = get_local ptr { b256, u64, u64 }, __tuple_2_, !1273
        v26 = const u64 2
        v27 = get_elem_ptr v25, ptr u64, v26, !1273
        v28 = load v27
        v29 = get_local ptr u64, place_in_slot, !1273
        store v28 to v29, !1273
        v30 = get_local ptr u64, number_of_slots, !1274
        v31 = load v30
        v32 = const u64 32, !1275
        v33 = call multiply_39(v31, v32), !6237
        v34 = call alloc_47(v33), !6238
        v35 = get_local ptr u64, result_ptr, !1282
        store v34 to v35, !1282
        v36 = get_local ptr b256, offset_slot, !1283
        v37 = load v36
        v38 = get_local ptr u64, result_ptr, !1284
        v39 = load v38
        v40 = get_local ptr u64, number_of_slots, !1285
        v41 = load v40
        v42 = get_local ptr b256, key_for_storage, !1286
        store v37 to v42, !1286
        v43 = int_to_ptr v39 to ptr b256, !1286
        v44 = state_load_quad_word v43, key v42, v41, !1286
        cbr v44, block3(), block4(), !1286

        block3():
        v45 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __anon_1, !1268
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !1268
        v48 = const u64 1, !1268
        store v48 to v47, !1268
        v49 = get_local ptr u64, result_ptr, !1287
        v50 = load v49
        v51 = get_local ptr u64, place_in_slot, !1288
        v52 = load v51
        v53 = call add_16(v50, v52), !6239
        v54 = call read_387(v53), !6240
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v45, ptr { u64, u64, u64 }, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v45
        br block5(v58)

        block4():
        v59 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __anon_2, !1268
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !1268
        v62 = const u64 0, !1268
        store v62 to v61, !1268
        v63 = load v59
        br block5(v63)

        block5(v64: { u64, ( () | { u64, u64, u64 } ) }):
        ret { u64, ( () | { u64, u64, u64 } ) } v64
    }

    fn slot_calculator_386(slot !1295: b256, offset !1296: u64) -> { b256, u64, u64 }, !6241 {
        local { b256, u64, u64 } __anon_0
        local bool __matched_value_1
        local u64 last_slot
        local u64 number_of_slots
        local mut u256 offset_slot
        local u64 place_in_slot
        local u64 size_of_t

        entry(slot: b256, offset: u64):
        v0 = get_local ptr u64, size_of_t, !1300
        v1 = const u64 24
        store v1 to v0, !1300
        v2 = const u64 8, !1301
        v3 = call multiply_39(offset, v2), !6242
        v4 = get_local ptr u64, size_of_t, !1305
        v5 = load v4
        v6 = call add_38(v3, v5), !6243
        v7 = const u64 31, !1309
        v8 = call add_38(v6, v7), !6244
        v9 = const u64 5, !1313
        v10 = call rsh_37(v8, v9), !6245
        v11 = get_local ptr u64, last_slot, !1317
        store v10 to v11, !1317
        v12 = const u64 4, !1318
        v13 = call modulo_40(offset, v12), !6246
        v14 = get_local ptr u64, place_in_slot, !1322
        store v13 to v14, !1322
        v15 = get_local ptr bool, __matched_value_1, !1323
        v16 = const bool true
        store v16 to v15, !1323
        v17 = get_local ptr bool, __matched_value_1, !1324
        v18 = load v17
        v19 = const bool true, !1325
        v20 = call eq_41(v18, v19), !6247
        cbr v20, block0(), block1(), !1326

        block0():
        v21 = get_local ptr u64, place_in_slot, !1329
        v22 = load v21
        v23 = const u64 8, !1330
        v24 = call multiply_39(v22, v23), !6248
        v25 = get_local ptr u64, size_of_t, !1334
        v26 = load v25
        v27 = call add_38(v24, v26), !6249
        v28 = const u64 31, !1338
        v29 = call add_38(v27, v28), !6250
        v30 = const u64 5, !1342
        v31 = call rsh_37(v29, v30), !6251
        br block5(v31)

        block1():
        v32 = get_local ptr bool, __matched_value_1, !1324
        v33 = load v32
        v34 = const bool false, !1346
        v35 = call eq_41(v33, v34), !6252
        cbr v35, block2(), block3(), !1347

        block2():
        v36 = const u64 1, !1350
        br block4(v36)

        block3():
        v37 = const u64 14757395258967588866, !1323
        revert v37, !1323

        block4(v38: u64):
        br block5(v38)

        block5(v39: u64):
        v40 = get_local ptr u64, number_of_slots, !1351
        store v39 to v40, !1351
        v41 = call as_u256_42(slot), !6253
        v42 = get_local ptr u256, offset_slot, !1355
        store v41 to v42, !1355
        v43 = get_local ptr u256, offset_slot, !1356
        v44 = load v43
        v45 = get_local ptr u64, last_slot, !1357
        v46 = load v45
        v47 = call as_u256_45(v46), !6254
        v48 = get_local ptr u64, number_of_slots, !1361
        v49 = load v48
        v50 = call as_u256_45(v49), !6255
        v51 = call subtract_44(v47, v50), !6256
        v52 = call add_43(v44, v51), !6257
        v53 = get_local ptr u256, offset_slot, !1368
        store v52 to v53, !1368
        v54 = get_local ptr u256, offset_slot, !1371
        v55 = load v54
        v56 = call as_b256_46(v55), !6258
        v57 = get_local ptr u64, number_of_slots, !1375
        v58 = load v57
        v59 = get_local ptr u64, place_in_slot, !1376
        v60 = load v59
        v61 = get_local ptr { b256, u64, u64 }, __anon_0, !1377
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62, !1377
        store v56 to v63, !1377
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !1377
        store v58 to v65, !1377
        v66 = const u64 2
        v67 = get_elem_ptr v61, ptr u64, v66, !1377
        store v60 to v67, !1377
        v68 = load v61
        ret { b256, u64, u64 } v68
    }

    pub fn read_387(self !1043: u64) -> { u64, u64, u64 }, !6259 {
        entry(self: u64):
        v0 = const bool true
        cbr v0, block0(), block1(), !1047

        block0():
        v1 = asm(ptr: self) -> { u64, u64, u64 } ptr, !1048 {
        }
        br block5(v1)

        block1():
        v2 = const u64 24
        v3 = const u64 1, !1049
        v4 = cmp eq v2 v3
        cbr v4, block2(), block3(), !1050

        block2():
        v5 = asm(ptr: self, val) -> { u64, u64, u64 } val, !1051 {
            lb     val ptr i0, !1052
        }
        br block4(v5)

        block3():
        v6 = asm(ptr: self, val) -> { u64, u64, u64 } val, !1053 {
            lw     val ptr i0, !1054
        }
        br block4(v6)

        block4(v7: { u64, u64, u64 }):
        br block5(v7)

        block5(v8: { u64, u64, u64 }):
        ret { u64, u64, u64 } v8
    }

    pub fn slot_388(self !1446: { b256, u64, b256 }) -> b256, !6260 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1450
        v4 = load v3
        ret b256 v4
    }

    pub fn offset_389(self !1451: { b256, u64, b256 }) -> u64, !6261 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1455
        v4 = load v3
        ret u64 v4
    }

    pub fn unwrap_390(self !2059: { u64, ( () | { b256, u64, b256 } ) }) -> { b256, u64, b256 }, !6262 {
        local { u64, ( () | { b256, u64, b256 } ) } __matched_value_4
        local { b256, u64, b256 } inner_value

        entry(self: { u64, ( () | { b256, u64, b256 } ) }):
        v0 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !6263
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { b256, u64, b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256, u64, b256 }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { b256, u64, b256 }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !6264
        br block2(v16)

        block2(v17: { b256, u64, b256 }):
        ret { b256, u64, b256 } v17
    }

    pub fn get_391(self !6265: { b256, u64, b256 }, index !6266: u64) -> { u64, ( () | { b256, u64, b256 } ) }, !6269 {
        local { u64, ( () | { b256, u64, b256 } ) } __anon_0
        local { u64, ( () | { b256, u64, b256 } ) } __anon_1
        local { u64, b256 } __anon_2
        local b256 key
        local u64 len
        local u64 offset

        entry(self: { b256, u64, b256 }, index: u64):
        v0 = call field_id_381(self), !6272
        v1 = const u64 0, !6273
        v2 = call read_257(v0, v1), !6276
        v3 = const u64 0, !6277
        v4 = call unwrap_or_268(v2, v3), !6280
        v5 = get_local ptr u64, len, !6281
        store v4 to v5, !6281
        v6 = get_local ptr u64, len, !6282
        v7 = load v6
        v8 = call le_210(v7, index), !6285
        cbr v8, block0(), block1(), !6283

        block0():
        v9 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __anon_0, !1268
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1268
        v12 = const u64 0, !1268
        store v12 to v11, !1268
        v13 = load v9
        ret { u64, ( () | { b256, u64, b256 } ) } v13, !6286

        block1():
        v14 = const unit ()
        br block2(v14)

        block2(v15: ()):
        v16 = call field_id_381(self), !6289
        v17 = call sha256_279(v16), !6292
        v18 = get_local ptr b256, key, !6293
        store v17 to v18, !6293
        v19 = call offset_calculator_392(index), !6296
        v20 = get_local ptr u64, offset, !6297
        store v19 to v20, !6297
        v21 = get_local ptr { u64, ( () | { b256, u64, b256 } ) }, __anon_1, !1268
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !1268
        v24 = const u64 1, !1268
        store v24 to v23, !1268
        v25 = get_local ptr b256, key, !6298
        v26 = load v25
        v27 = get_local ptr u64, offset, !6299
        v28 = load v27
        v29 = get_local ptr b256, key, !6300
        v30 = load v29
        v31 = get_local ptr { u64, b256 }, __anon_2, !6301
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !6301
        store index to v33, !6301
        v34 = const u64 1
        v35 = get_elem_ptr v31, ptr b256, v34, !6301
        store v30 to v35, !6301
        v36 = load v31
        v37 = call sha256_290(v36), !6304
        v38 = call new_393(v26, v28, v37), !6307
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v21, ptr { b256, u64, b256 }, v39, v40, !1268
        store v38 to v41, !1268
        v42 = load v21
        ret { u64, ( () | { b256, u64, b256 } ) } v42
    }

    fn offset_calculator_392(offset !4580: u64) -> u64, !6308 {
        local u64 size_in_bytes
        local u64 size_in_bytes_

        entry(offset: u64):
        v0 = get_local ptr u64, size_in_bytes, !4584
        v1 = const u64 24
        store v1 to v0, !4584
        v2 = get_local ptr u64, size_in_bytes, !4585
        v3 = load v2
        v4 = const u64 8, !4586
        v5 = const u64 1, !4587
        v6 = call subtract_211(v4, v5), !6309
        v7 = call add_38(v3, v6), !6310
        v8 = get_local ptr u64, size_in_bytes, !4594
        v9 = load v8
        v10 = const u64 8, !4595
        v11 = const u64 1, !4596
        v12 = call subtract_211(v10, v11), !6311
        v13 = call add_38(v9, v12), !6312
        v14 = const u64 8, !4603
        v15 = call modulo_40(v13, v14), !6313
        v16 = call subtract_211(v7, v15), !6314
        v17 = get_local ptr u64, size_in_bytes_, !4610
        store v16 to v17, !4610
        v18 = get_local ptr u64, size_in_bytes_, !4611
        v19 = load v18
        v20 = call multiply_39(offset, v19), !6315
        v21 = const u64 8, !4615
        v22 = call divide_232(v20, v21), !6316
        ret u64 v22
    }

    pub fn new_393(slot !1221: b256, offset !1222: u64, field_id !1223: b256) -> { b256, u64, b256 }, !6317 {
        local { b256, u64, b256 } __anon_0

        entry(slot: b256, offset: u64, field_id: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !1227
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store slot to v2, !1227
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        store offset to v4, !1227
        v5 = const u64 2
        v6 = get_elem_ptr v0, ptr b256, v5
        store field_id to v6, !1227
        v7 = load v0
        ret { b256, u64, b256 } v7
    }

    pub fn new_394(amount !6318: u64, asset_type !6319: { u64 }, order_type !6320: { u64 }, owner !6321: { u64, ( { b256 } | { b256 } ) }, price !6322: u64, block_height !6323: u64, order_height !6324: u64, matcher_fee !6325: u64, protocol_maker_fee !6326: u64, protocol_taker_fee !6327: u64, min_order_price !6328: u64) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, !6331 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_2
        local { u64, u64 } __anon_3
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } __anon_4

        entry(amount: u64, asset_type: { u64 }, order_type: { u64 }, owner: { u64, ( { b256 } | { b256 } ) }, price: u64, block_height: u64, order_height: u64, matcher_fee: u64, protocol_maker_fee: u64, protocol_taker_fee: u64, min_order_price: u64):
        v0 = get_local ptr { u64 }, __anon_0, !4280
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !4280
        v3 = const u64 0, !4280
        store v3 to v2, !4280
        v4 = load v0
        v5 = call eq_396(asset_type, v4), !6334
        v6 = get_local ptr { u64 }, __anon_1, !5272
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !5272
        v9 = const u64 0, !5272
        store v9 to v8, !5272
        v10 = load v6
        v11 = call require_395(v5, v10), !6337
        v12 = call ge_88(price, min_order_price), !6340
        v13 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_2, !2493
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !2493
        v16 = const u64 2, !2493
        store v16 to v15, !2493
        v17 = get_local ptr { u64, u64 }, __anon_3, !6341
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !6341
        store price to v19, !6341
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20, !6341
        store min_order_price to v21, !6341
        v22 = load v17
        v23 = const u64 1
        v24 = const u64 2
        v25 = get_elem_ptr v13, ptr { u64, u64 }, v23, v24, !2493
        store v22 to v25, !2493
        v26 = load v13
        v27 = call require_158(v12, v26), !6344
        v28 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, __anon_4, !6345
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29
        store amount to v30, !6345
        v31 = const u64 1
        v32 = get_elem_ptr v28, ptr { u64 }, v31
        store asset_type to v32, !6345
        v33 = const u64 2
        v34 = get_elem_ptr v28, ptr { u64 }, v33
        store order_type to v34, !6345
        v35 = const u64 3
        v36 = get_elem_ptr v28, ptr { u64, ( { b256 } | { b256 } ) }, v35
        store owner to v36, !6345
        v37 = const u64 4
        v38 = get_elem_ptr v28, ptr u64, v37
        store price to v38, !6345
        v39 = const u64 5
        v40 = get_elem_ptr v28, ptr u64, v39
        store block_height to v40, !6345
        v41 = const u64 6
        v42 = get_elem_ptr v28, ptr u64, v41
        store order_height to v42, !6345
        v43 = const u64 7
        v44 = get_elem_ptr v28, ptr u64, v43
        store matcher_fee to v44, !6345
        v45 = const u64 8
        v46 = get_elem_ptr v28, ptr u64, v45
        store protocol_maker_fee to v46, !6345
        v47 = const u64 9
        v48 = get_elem_ptr v28, ptr u64, v47
        store protocol_taker_fee to v48, !6345
        v49 = load v28
        ret { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } v49
    }

    pub fn require_395(condition !1530: bool, value !1531: { u64 }) -> (), !6346 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_27(condition), !6347
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_326(value), !6348
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !6349
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn eq_396(self !6350: { u64 }, other !6351: { u64 }) -> bool, !6354 {
        local { { u64 }, { u64 } } __anon_0
        local { { u64 }, { u64 } } __matched_value_1

        entry(self: { u64 }, other: { u64 }):
        v0 = get_local ptr { { u64 }, { u64 } }, __anon_0, !6355
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64 }, v1, !6355
        store self to v2, !6355
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64 }, v3, !6355
        store other to v4, !6355
        v5 = load v0
        v6 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !6356
        store v5 to v6, !6356
        v7 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !6355
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64 }, v8, !6357
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !6357
        v12 = load v11
        v13 = const u64 0, !6357
        v14 = call eq_10(v12, v13), !6360
        cbr v14, block0(), block1(v14), !6358

        block0():
        v15 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !6355
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !6357
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !6357
        v20 = load v19
        v21 = const u64 0, !6357
        v22 = call eq_10(v20, v21), !6361
        br block1(v22), !6358

        block1(v23: bool):
        cbr v23, block2(), block3(), !6358

        block2():
        v24 = const bool true, !6362
        br block9(v24)

        block3():
        v25 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !6355
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { u64 }, v26, !6363
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !6363
        v30 = load v29
        v31 = const u64 1, !6363
        v32 = call eq_10(v30, v31), !6366
        cbr v32, block4(), block5(v32), !6364

        block4():
        v33 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !6355
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr { u64 }, v34, !6363
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !6363
        v38 = load v37
        v39 = const u64 1, !6363
        v40 = call eq_10(v38, v39), !6367
        br block5(v40), !6364

        block5(v41: bool):
        cbr v41, block6(), block7(), !6364

        block6():
        v42 = const bool true, !6368
        br block8(v42)

        block7():
        v43 = const bool false, !6369
        br block8(v43)

        block8(v44: bool):
        br block9(v44)

        block9(v45: bool):
        ret bool v45
    }

    fn next_order_height_397(user !6370: { u64, ( { b256 } | { b256 } ) }) -> u64, !6373 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local u64 order_height

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6374
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !6374
        store v3 to v2, !6374
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6374
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !6374
        store v9 to v8, !6374
        v10 = load v0
        v11 = call get_398(v10, user), !6377
        v12 = call try_read_312(v11), !6380
        v13 = const u64 0, !6381
        v14 = call unwrap_or_268(v12, v13), !6384
        v15 = get_local ptr u64, order_height, !6385
        store v14 to v15, !6385
        v16 = get_local ptr { b256, u64, b256 }, __anon_1, !6386
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr b256, v17
        v19 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !6386
        store v19 to v18, !6386
        v20 = const u64 1
        v21 = get_elem_ptr v16, ptr u64, v20
        v22 = const u64 0
        store v22 to v21, !6386
        v23 = const u64 2
        v24 = get_elem_ptr v16, ptr b256, v23
        v25 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !6386
        store v25 to v24, !6386
        v26 = load v16
        v27 = get_local ptr u64, order_height, !6387
        v28 = load v27
        v29 = const u64 1, !6388
        v30 = call add_38(v28, v29), !6391
        v31 = call insert_400(v26, user, v30), !6394
        v32 = get_local ptr u64, order_height, !6395
        v33 = load v32
        ret u64 v33
    }

    pub fn get_398(self !2534: { b256, u64, b256 }, key !2535: { u64, ( { b256 } | { b256 } ) }) -> { b256, u64, b256 }, !6396 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }):
        v0 = call field_id_399(self), !6397
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !2542
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !2542
        store key to v3, !2542
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !2542
        store v0 to v5, !2542
        v6 = load v1
        v7 = call sha256_189(v6), !6398
        v8 = get_local ptr b256, key_, !2546
        store v7 to v8, !2546
        v9 = get_local ptr b256, key_, !2547
        v10 = load v9
        v11 = get_local ptr b256, key_, !2548
        v12 = load v11
        v13 = const u64 0, !2549
        v14 = call new_263(v10, v13, v12), !6399
        ret { b256, u64, b256 } v14
    }

    pub fn field_id_399(self !2881: { b256, u64, b256 }) -> b256, !6400 {
        entry(self: { b256, u64, b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, b256 }
        v2 = const u64 2
        v3 = get_elem_ptr v1, ptr b256, v2, !2885
        v4 = load v3
        ret b256 v4
    }

    pub fn insert_400(self !4828: { b256, u64, b256 }, key !4829: { u64, ( { b256 } | { b256 } ) }, value !4830: u64) -> (), !6401 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }, value: u64):
        v0 = call field_id_399(self), !6402
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !4837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !4837
        store key to v3, !4837
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4837
        store v0 to v5, !4837
        v6 = load v1
        v7 = call sha256_189(v6), !6403
        v8 = get_local ptr b256, key_, !4841
        store v7 to v8, !4841
        v9 = get_local ptr b256, key_, !4842
        v10 = load v9
        v11 = const u64 0, !4843
        v12 = call write_277(v10, v11, value), !6404
        v13 = const unit ()
        ret () v13
    }

    fn read_min_order_price_401() -> u64, !6407 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !6408
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x29f5dd154c31547f4b4e4ad8565741c416a935be9adc4c46d68a12b779a0e26a, !6408
        store v3 to v2, !6408
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !6408
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x29f5dd154c31547f4b4e4ad8565741c416a935be9adc4c46d68a12b779a0e26a, !6408
        store v9 to v8, !6408
        v10 = load v0
        v11 = call try_read_312(v10), !6411
        v12 = const u64 0, !5018
        v13 = call unwrap_or_268(v11, v12), !6414
        ret u64 v13
    }

    pub fn id_402(self !6415: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> b256, !6418 {
        local { { b256 }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { b256, { u64 }, { u64 }, u64, u64 } __anon_1

        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = call this_118(), !6421
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v3 = const u64 3
        v4 = get_elem_ptr v2, ptr { u64, ( { b256 } | { b256 } ) }, v3, !2464
        v5 = load v4
        v6 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !6422
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { b256 }, v7, !6422
        store v0 to v8, !6422
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr { u64, ( { b256 } | { b256 } ) }, v9, !6422
        store v5 to v10, !6422
        v11 = load v6
        v12 = call sha256_407(v11), !6425
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v15 = const u64 1
        v16 = get_elem_ptr v14, ptr { u64 }, v15, !3177
        v17 = load v16
        v18 = ptr_to_int self to u64
        v19 = int_to_ptr v18 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v20 = const u64 2
        v21 = get_elem_ptr v19, ptr { u64 }, v20, !3171
        v22 = load v21
        v23 = ptr_to_int self to u64
        v24 = int_to_ptr v23 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v25 = const u64 4
        v26 = get_elem_ptr v24, ptr u64, v25, !3575
        v27 = load v26
        v28 = ptr_to_int self to u64
        v29 = int_to_ptr v28 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v30 = const u64 6
        v31 = get_elem_ptr v29, ptr u64, v30, !6426
        v32 = load v31
        v33 = get_local ptr { b256, { u64 }, { u64 }, u64, u64 }, __anon_1, !6427
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34, !6427
        store v12 to v35, !6427
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { u64 }, v36, !6427
        store v17 to v37, !6427
        v38 = const u64 2
        v39 = get_elem_ptr v33, ptr { u64 }, v38, !6427
        store v22 to v39, !6427
        v40 = const u64 3
        v41 = get_elem_ptr v33, ptr u64, v40, !6427
        store v27 to v41, !6427
        v42 = const u64 4
        v43 = get_elem_ptr v33, ptr u64, v42, !6427
        store v32 to v43, !6427
        v44 = load v33
        v45 = call sha256_403(v44), !6430
        ret b256 v45
    }

    pub fn sha256_403(s !2554: { b256, { u64 }, { u64 }, u64, u64 }) -> b256, !6431 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { b256, { u64 }, { u64 }, u64, u64 }):
        v0 = call new_133(), !6432
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2561
        store v0 to v1, !2561
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2562
        v3 = call hash_404(s, v2), !6433
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2566
        v5 = load v4
        v6 = call sha256_154(v5), !6434
        ret b256 v6
    }

    pub fn hash_404(self !6435: { b256, { u64 }, { u64 }, u64, u64 }, state !6436: ptr { { { u64, u64 }, u64 } }) -> (), !6439 {
        entry(self: { b256, { u64 }, { u64 }, u64, u64 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, { u64 }, { u64 }, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !6440
        v4 = load v3
        v5 = call hash_138(v4, state), !6443
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { b256, { u64 }, { u64 }, u64, u64 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr { u64 }, v8, !6444
        v10 = load v9
        v11 = call hash_405(v10, state), !6447
        v12 = ptr_to_int self to u64
        v13 = int_to_ptr v12 to ptr { b256, { u64 }, { u64 }, u64, u64 }
        v14 = const u64 2
        v15 = get_elem_ptr v13, ptr { u64 }, v14, !6448
        v16 = load v15
        v17 = call hash_406(v16, state), !6451
        v18 = ptr_to_int self to u64
        v19 = int_to_ptr v18 to ptr { b256, { u64 }, { u64 }, u64, u64 }
        v20 = const u64 3
        v21 = get_elem_ptr v19, ptr u64, v20, !6452
        v22 = load v21
        v23 = call hash_292(v22, state), !6455
        v24 = ptr_to_int self to u64
        v25 = int_to_ptr v24 to ptr { b256, { u64 }, { u64 }, u64, u64 }
        v26 = const u64 4
        v27 = get_elem_ptr v25, ptr u64, v26, !6456
        v28 = load v27
        v29 = call hash_292(v28, state), !6459
        v30 = const unit ()
        ret () v30
    }

    pub fn hash_405(self !6460: { u64 }, state !6461: ptr { { { u64, u64 }, u64 } }) -> (), !6464 {
        local { u64 } __matched_value_3

        entry(self: { u64 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_3, !6465
        store self to v0, !6465
        v1 = get_local ptr { u64 }, __matched_value_3, !6466
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6466
        v4 = load v3
        v5 = const u64 0, !6466
        v6 = call eq_10(v4, v5), !6469
        cbr v6, block0(), block1(), !6467

        block0():
        v7 = const u8 0, !6470
        v8 = call hash_192(v7, state), !6473
        v9 = const unit ()
        br block5(v9)

        block1():
        v10 = get_local ptr { u64 }, __matched_value_3, !6466
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !6466
        v13 = load v12
        v14 = const u64 1, !6466
        v15 = call eq_10(v13, v14), !6476
        cbr v15, block2(), block3(), !6474

        block2():
        v16 = const u8 1, !6477
        v17 = call hash_192(v16, state), !6480
        v18 = const unit ()
        br block4(v18)

        block3():
        v19 = const u64 14757395258967588866, !6465
        revert v19, !6465

        block4(v20: ()):
        br block5(v20)

        block5(v21: ()):
        v22 = const unit ()
        ret () v22
    }

    pub fn hash_406(self !6481: { u64 }, state !6482: ptr { { { u64, u64 }, u64 } }) -> (), !6485 {
        local { u64 } __matched_value_2

        entry(self: { u64 }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_2, !6486
        store self to v0, !6486
        v1 = get_local ptr { u64 }, __matched_value_2, !6487
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6487
        v4 = load v3
        v5 = const u64 0, !6487
        v6 = call eq_10(v4, v5), !6490
        cbr v6, block0(), block1(), !6488

        block0():
        v7 = const u8 0, !6491
        v8 = call hash_192(v7, state), !6494
        v9 = const unit ()
        br block5(v9)

        block1():
        v10 = get_local ptr { u64 }, __matched_value_2, !6487
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !6487
        v13 = load v12
        v14 = const u64 1, !6487
        v15 = call eq_10(v13, v14), !6497
        cbr v15, block2(), block3(), !6495

        block2():
        v16 = const u8 1, !6498
        v17 = call hash_192(v16, state), !6501
        v18 = const unit ()
        br block4(v18)

        block3():
        v19 = const u64 14757395258967588866, !6486
        revert v19, !6486

        block4(v20: ()):
        br block5(v20)

        block5(v21: ()):
        v22 = const unit ()
        ret () v22
    }

    pub fn sha256_407(s !2554: { { b256 }, { u64, ( { b256 } | { b256 } ) } }) -> b256, !6502 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { b256 }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_133(), !6503
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2561
        store v0 to v1, !2561
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2562
        v3 = call hash_408(s, v2), !6504
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !2566
        v5 = load v4
        v6 = call sha256_154(v5), !6505
        ret b256 v6
    }

    pub fn hash_408(self !2601: { { b256 }, { u64, ( { b256 } | { b256 } ) } }, state !2602: ptr { { { u64, u64 }, u64 } }) -> (), !6506 {
        entry(self: { { b256 }, { u64, ( { b256 } | { b256 } ) } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !2606
        v4 = load v3
        v5 = call hash_199(v4, state), !6507
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { b256 }, { u64, ( { b256 } | { b256 } ) } }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, !2610
        v10 = load v9
        v11 = call hash_191(v10, state), !6508
        v12 = const unit ()
        ret () v12
    }

    pub fn is_none_409(self !2048: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }) -> bool, !6509 {
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __matched_value_3

        entry(self: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_3, !2052
        store self to v0, !2052
        v1 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_3, !2053
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2053
        v4 = load v3
        v5 = const u64 1, !2053
        v6 = call eq_10(v4, v5), !6510
        cbr v6, block0(), block1(), !2054

        block0():
        v7 = const bool false, !2057
        br block2(v7)

        block1():
        v8 = const bool true, !2058
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn push_410(self !6511: { b256, u64, b256 }, value !6512: b256) -> (), !6515 {
        local b256 key
        local u64 len
        local u64 offset

        entry(self: { b256, u64, b256 }, value: b256):
        v0 = call field_id_269(self), !6518
        v1 = const u64 0, !6519
        v2 = call read_257(v0, v1), !6522
        v3 = const u64 0, !6523
        v4 = call unwrap_or_268(v2, v3), !6526
        v5 = get_local ptr u64, len, !6527
        store v4 to v5, !6527
        v6 = call field_id_269(self), !6530
        v7 = call sha256_279(v6), !6533
        v8 = get_local ptr b256, key, !6534
        store v7 to v8, !6534
        v9 = get_local ptr u64, len, !6535
        v10 = load v9
        v11 = call offset_calculator_280(v10), !6538
        v12 = get_local ptr u64, offset, !6539
        store v11 to v12, !6539
        v13 = get_local ptr b256, key, !6540
        v14 = load v13
        v15 = get_local ptr u64, offset, !6541
        v16 = load v15
        v17 = call write_294(v14, v16, value), !6544
        v18 = call field_id_269(self), !6547
        v19 = get_local ptr u64, len, !6548
        v20 = load v19
        v21 = const u64 1, !6549
        v22 = call add_38(v20, v21), !6552
        v23 = const u64 0, !6553
        v24 = call write_277(v18, v23, v22), !6556
        v25 = const unit ()
        ret () v25
    }

    pub fn insert_411(self !4828: { b256, u64, b256 }, key !4829: b256, value !4830: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> (), !6557 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256, value: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = call field_id_156(self), !6558
        v1 = get_local ptr { b256, b256 }, __anon_0, !4837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4837
        store key to v3, !4837
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4837
        store v0 to v5, !4837
        v6 = load v1
        v7 = call sha256_132(v6), !6559
        v8 = get_local ptr b256, key_, !4841
        store v7 to v8, !4841
        v9 = get_local ptr b256, key_, !4842
        v10 = load v9
        v11 = const u64 0, !4843
        v12 = call write_412(v10, v11, value), !6560
        v13 = const unit ()
        ret () v13
    }

    pub fn write_412(slot !2170: b256, offset !2171: u64, value !2172: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> (), !6561 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = const u64 112
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !6562
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_127(slot, offset), !6563
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !6564
        v30 = call alloc_47(v29), !6565
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !6566
        v47 = call write_413(v46, value), !6567
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_413(self !2212: u64, val !2213: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> (), !6568 {
        entry(self: u64, val: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 112
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 112
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn lock_amount_414(self !6569: ptr { { u64, u64 }, { u64, u64 } }, amount !6570: u64, asset !6571: { u64 }) -> (), !6574 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_0

        entry(self: ptr { { u64, u64 }, { u64, u64 } }, amount: u64, asset: { u64 }):
        v0 = const u64 0, !6575
        v1 = call neq_26(amount, v0), !6578
        v2 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_0, !2493
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2493
        v5 = const u64 5, !2493
        store v5 to v4, !2493
        v6 = load v2
        v7 = call require_158(v1, v6), !6581
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !3423
        v10 = call debit_204(v9, amount, asset), !6584
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr { u64, u64 }, v11, !3427
        v13 = call credit_203(v12, amount, asset), !6587
        v14 = const unit ()
        ret () v14
    }

    pub fn log_415(value !1547: { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }) -> (), !6588 {
        entry(value: { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }):
        v0 = call encode_416(value), !1551
        v1 = const u64 7812135309850120461
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_416(item !1456: { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }) -> slice, !6589 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }):
        v0 = call new_53(), !6590
        v1 = call abi_encode_417(item, v0), !6591
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !6592
        ret slice v5
    }

    pub fn abi_encode_417(self !6593: { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }, buffer !6594: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6597 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______
        local { { u64, u64, u64 } } buffer________

        entry(self: { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6598
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !6601
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !6602
        store v5 to v6, !6602
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !6603
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !6604
        v13 = load v12
        v14 = call abi_encode_336(v11, v13), !6607
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !6608
        store v14 to v15, !6608
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { u64 }, v18, !6609
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !4882
        v22 = load v21
        v23 = call abi_encode_418(v20, v22), !6611
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !6612
        store v23 to v24, !6612
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr b256, v27, !6613
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !6614
        v31 = load v30
        v32 = call abi_encode_162(v29, v31), !6617
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !6618
        store v32 to v33, !6618
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u64, v36, !6619
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !6620
        v40 = load v39
        v41 = call abi_encode_62(v38, v40), !6623
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6624
        store v41 to v42, !6624
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr { u64, ( { b256 } | { b256 } ) }, v45, !6625
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !6626
        v49 = load v48
        v50 = call abi_encode_303(v47, v49), !6629
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !6630
        store v50 to v51, !6630
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr { { u64, u64 }, { u64, u64 } }, v54, !6631
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !6632
        v58 = load v57
        v59 = call abi_encode_306(v56, v58), !6635
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !6636
        store v59 to v60, !6636
        v61 = ptr_to_int self to u64
        v62 = int_to_ptr v61 to ptr { u64, { b256 }, { u64 }, b256, u64, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64 } }
        v63 = const u64 7
        v64 = get_elem_ptr v62, ptr { u64 }, v63, !6637
        v65 = load v64
        v66 = get_local ptr { { u64, u64, u64 } }, buffer_______, !6638
        v67 = load v66
        v68 = call abi_encode_419(v65, v67), !6641
        v69 = get_local ptr { { u64, u64, u64 } }, buffer________, !6642
        store v68 to v69, !6642
        v70 = get_local ptr { { u64, u64, u64 } }, buffer________, !6643
        v71 = load v70
        ret { { u64, u64, u64 } } v71
    }

    pub fn abi_encode_418(self !3141: { u64 }, buffer !35: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6645 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !6646
        store self to v0, !6646
        v1 = get_local ptr { u64 }, __matched_value_1, !3146
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3146
        v4 = load v3
        v5 = const u64 0, !3146
        v6 = call eq_10(v4, v5), !6649
        cbr v6, block0(), block1(), !6647

        block0():
        v7 = const u64 0, !6650
        v8 = call abi_encode_62(v7, buffer), !6653
        br block5(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_1, !3146
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !3146
        v12 = load v11
        v13 = const u64 1, !3146
        v14 = call eq_10(v12, v13), !6656
        cbr v14, block2(), block3(), !6654

        block2():
        v15 = const u64 1, !6657
        v16 = call abi_encode_62(v15, buffer), !6660
        br block4(v16)

        block3():
        v17 = const u64 14757395258967588866, !6646
        revert v17, !6646

        block4(v18: { { u64, u64, u64 } }):
        br block5(v18)

        block5(v19: { { u64, u64, u64 } }):
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !6661
        store v19 to v20, !6661
        v21 = get_local ptr { { u64, u64, u64 } }, buffer_, !6662
        v22 = load v21
        ret { { u64, u64, u64 } } v22
    }

    pub fn abi_encode_419(self !3141: { u64 }, buffer !35: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !6664 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !6665
        store self to v0, !6665
        v1 = get_local ptr { u64 }, __matched_value_1, !3146
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3146
        v4 = load v3
        v5 = const u64 0, !3146
        v6 = call eq_10(v4, v5), !6666
        cbr v6, block0(), block1(), !6647

        block0():
        v7 = const u64 0, !6650
        v8 = call abi_encode_62(v7, buffer), !6667
        br block11(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_1, !3146
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !3146
        v12 = load v11
        v13 = const u64 1, !3146
        v14 = call eq_10(v12, v13), !6670
        cbr v14, block2(), block3(), !6668

        block2():
        v15 = const u64 1, !6671
        v16 = call abi_encode_62(v15, buffer), !6674
        br block10(v16)

        block3():
        v17 = get_local ptr { u64 }, __matched_value_1, !3146
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !3146
        v20 = load v19
        v21 = const u64 2, !3146
        v22 = call eq_10(v20, v21), !6677
        cbr v22, block4(), block5(), !6675

        block4():
        v23 = const u64 2, !6678
        v24 = call abi_encode_62(v23, buffer), !6681
        br block9(v24)

        block5():
        v25 = get_local ptr { u64 }, __matched_value_1, !3146
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !3146
        v28 = load v27
        v29 = const u64 3, !3146
        v30 = call eq_10(v28, v29), !6684
        cbr v30, block6(), block7(), !6682

        block6():
        v31 = const u64 3, !6685
        v32 = call abi_encode_62(v31, buffer), !6688
        br block8(v32)

        block7():
        v33 = const u64 14757395258967588866, !6665
        revert v33, !6665

        block8(v34: { { u64, u64, u64 } }):
        br block9(v34)

        block9(v35: { { u64, u64, u64 } }):
        br block10(v35)

        block10(v36: { { u64, u64, u64 } }):
        br block11(v36)

        block11(v37: { { u64, u64, u64 } }):
        v38 = get_local ptr { { u64, u64, u64 } }, buffer_, !6689
        store v37 to v38, !6689
        v39 = get_local ptr { { u64, u64, u64 } }, buffer_, !6690
        v40 = load v39
        ret { { u64, u64, u64 } } v40
    }

    pub fn read_420(self !3203: { b256, u64, b256 }) -> { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, !6691 {
        entry(self: { b256, u64, b256 }):
        v0 = call slot_129(self), !6692
        v1 = call offset_130(self), !6693
        v2 = call read_126(v0, v1), !6694
        v3 = call unwrap_165(v2), !6695
        ret { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } v3
    }

    pub fn get_421(self !6696: { { u64, u64 }, u64 }, index !6697: u64) -> { u64, ( () | b256 ) }, !6700 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !5582
        v4 = load v3
        v5 = call le_210(v4, index), !6703
        cbr v5, block0(), block1(), !6701

        block0():
        v6 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !1268
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !1268
        v9 = const u64 0, !1268
        store v9 to v8, !1268
        v10 = load v6
        ret { u64, ( () | b256 ) } v10, !6704

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !5583
        v17 = load v16
        v18 = call ptr_361(v17), !6707
        v19 = call add_360(v18, index), !6710
        v20 = get_local ptr u64, ptr, !6711
        store v19 to v20, !6711
        v21 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !1268
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !1268
        v24 = const u64 1, !1268
        store v24 to v23, !1268
        v25 = get_local ptr u64, ptr, !6712
        v26 = load v25
        v27 = call read_283(v26), !6715
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr b256, v28, v29, !1268
        store v27 to v30, !1268
        v31 = load v21
        ret { u64, ( () | b256 ) } v31
    }

    pub fn distance_422(a !6716: u64, b !6717: u64) -> u64, !6720 {
        entry(a: u64, b: u64):
        v0 = call gt_89(a, b), !6723
        cbr v0, block0(), block1(), !6721

        block0():
        v1 = call subtract_211(a, b), !6726
        br block2(v1)

        block1():
        v2 = call subtract_211(b, a), !6729
        br block2(v2)

        block2(v3: u64):
        ret u64 v3
    }

    fn match_order_internal_423(order0_id !6730: b256, order0 !6731: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order0_limit !6732: { u64 }, order1_id !6733: b256, order1 !6734: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_limit !6735: { u64 }) -> { { u64 }, b256 }, !6738 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { b256, u64, b256 } __anon_11
        local { u64 } __anon_12
        local { u64 } __anon_13
        local { { u64 }, b256 } __anon_14
        local { { u64 }, b256 } __anon_15
        local { u64 } __anon_2
        local { u64 } __anon_3
        local { { u64 }, b256 } __anon_4
        local { u64 } __anon_5
        local { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } } __anon_6
        local { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } } __anon_7
        local { u64 } __anon_8
        local { { u64 }, b256 } __anon_9
        local { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } } __tuple_10
        local { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } } __tuple_10_
        local { u64, u64, u64 } __tuple_11
        local { u64, u64, u64 } __tuple_11_
        local { { u64 }, b256 } __tuple_12
        local { { u64 }, b256 } __tuple_12_
        local { { u64, u64 }, { u64, u64 } } b_account
        local b256 b_id
        local { u64 } b_limit
        local mut { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } b_order
        local u64 b_order_matcher_fee
        local { u64 } match_result
        local { u64, ( { b256 } | { b256 } ) } matcher
        local b256 partial_order_id
        local { { u64, u64 }, { u64, u64 } } s_account
        local b256 s_id
        local { u64 } s_limit
        local mut { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } s_order
        local u64 s_order_matcher_fee
        local u64 trade_price
        local u64 trade_size
        local u64 trade_volume

        entry(order0_id: b256, order0: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order0_limit: { u64 }, order1_id: b256, order1: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_limit: { u64 }):
        v0 = call msg_sender_79(), !6741
        v1 = call unwrap_78(v0), !6744
        v2 = get_local ptr { u64, ( { b256 } | { b256 } ) }, matcher, !6745
        store v1 to v2, !6745
        v3 = ptr_to_int order0 to u64
        v4 = int_to_ptr v3 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr { u64 }, v5, !3177
        v7 = load v6
        v8 = get_local ptr { u64 }, __anon_0, !4280
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !4280
        v11 = const u64 0, !4280
        store v11 to v10, !4280
        v12 = load v8
        v13 = call eq_396(v7, v12), !6748
        cbr v13, block0(), block1(v13), !6749

        block0():
        v14 = ptr_to_int order1 to u64
        v15 = int_to_ptr v14 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !3177
        v18 = load v17
        v19 = get_local ptr { u64 }, __anon_1, !4280
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !4280
        v22 = const u64 0, !4280
        store v22 to v21, !4280
        v23 = load v19
        v24 = call eq_396(v18, v23), !6752
        br block1(v24), !6749

        block1(v25: bool):
        v26 = get_local ptr { u64 }, __anon_2, !5272
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !5272
        v29 = const u64 0, !5272
        store v29 to v28, !5272
        v30 = load v26
        v31 = call require_395(v25, v30), !6755
        v32 = ptr_to_int order0 to u64
        v33 = int_to_ptr v32 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v34 = const u64 2
        v35 = get_elem_ptr v33, ptr { u64 }, v34, !3171
        v36 = load v35
        v37 = ptr_to_int order1 to u64
        v38 = int_to_ptr v37 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v39 = const u64 2
        v40 = get_elem_ptr v38, ptr { u64 }, v39, !3171
        v41 = load v40
        v42 = call eq_213(v36, v41), !6758
        cbr v42, block2(), block3(), !6756

        block2():
        v43 = get_local ptr { u64 }, __anon_3, !5706
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr u64, v44, !5706
        v46 = const u64 0, !5706
        store v46 to v45, !5706
        v47 = load v43
        v48 = call zero_424(), !6761
        v49 = get_local ptr { { u64 }, b256 }, __anon_4, !6762
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { u64 }, v50, !6762
        store v47 to v51, !6762
        v52 = const u64 1
        v53 = get_elem_ptr v49, ptr b256, v52, !6762
        store v48 to v53, !6762
        v54 = load v49
        ret { { u64 }, b256 } v54, !6763

        block3():
        v55 = const unit ()
        br block4(v55)

        block4(v56: ()):
        v57 = ptr_to_int order0 to u64
        v58 = int_to_ptr v57 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v59 = const u64 2
        v60 = get_elem_ptr v58, ptr { u64 }, v59, !3171
        v61 = load v60
        v62 = get_local ptr { u64 }, __anon_5, !3570
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr u64, v63, !3570
        v65 = const u64 1, !3570
        store v65 to v64, !3570
        v66 = load v62
        v67 = call eq_213(v61, v66), !6766
        cbr v67, block5(), block6(), !6764

        block5():
        v68 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __anon_6, !6767
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v69, !6767
        store order0 to v70, !6767
        v71 = const u64 1
        v72 = get_elem_ptr v68, ptr b256, v71, !6767
        store order0_id to v72, !6767
        v73 = const u64 2
        v74 = get_elem_ptr v68, ptr { u64 }, v73, !6767
        store order0_limit to v74, !6767
        v75 = const u64 3
        v76 = get_elem_ptr v68, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v75, !6767
        store order1 to v76, !6767
        v77 = const u64 4
        v78 = get_elem_ptr v68, ptr b256, v77, !6767
        store order1_id to v78, !6767
        v79 = const u64 5
        v80 = get_elem_ptr v68, ptr { u64 }, v79, !6767
        store order1_limit to v80, !6767
        v81 = load v68
        br block7(v81)

        block6():
        v82 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __anon_7, !6768
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v83, !6768
        store order1 to v84, !6768
        v85 = const u64 1
        v86 = get_elem_ptr v82, ptr b256, v85, !6768
        store order1_id to v86, !6768
        v87 = const u64 2
        v88 = get_elem_ptr v82, ptr { u64 }, v87, !6768
        store order1_limit to v88, !6768
        v89 = const u64 3
        v90 = get_elem_ptr v82, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v89, !6768
        store order0 to v90, !6768
        v91 = const u64 4
        v92 = get_elem_ptr v82, ptr b256, v91, !6768
        store order0_id to v92, !6768
        v93 = const u64 5
        v94 = get_elem_ptr v82, ptr { u64 }, v93, !6768
        store order0_limit to v94, !6768
        v95 = load v82
        br block7(v95)

        block7(v96: { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }):
        v97 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10, !6769
        store v96 to v97, !6769
        v98 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10, !6769
        v99 = load v98
        v100 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        store v99 to v100, !6769
        v101 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        v102 = const u64 0
        v103 = get_elem_ptr v101, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v102, !6769
        v104 = load v103
        v105 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6769
        store v104 to v105, !6769
        v106 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        v107 = const u64 1
        v108 = get_elem_ptr v106, ptr b256, v107, !6769
        v109 = load v108
        v110 = get_local ptr b256, s_id, !6769
        store v109 to v110, !6769
        v111 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        v112 = const u64 2
        v113 = get_elem_ptr v111, ptr { u64 }, v112, !6769
        v114 = load v113
        v115 = get_local ptr { u64 }, s_limit, !6769
        store v114 to v115, !6769
        v116 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        v117 = const u64 3
        v118 = get_elem_ptr v116, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v117, !6769
        v119 = load v118
        v120 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6769
        store v119 to v120, !6769
        v121 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        v122 = const u64 4
        v123 = get_elem_ptr v121, ptr b256, v122, !6769
        v124 = load v123
        v125 = get_local ptr b256, b_id, !6769
        store v124 to v125, !6769
        v126 = get_local ptr { { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 }, { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b256, { u64 } }, __tuple_10_, !6769
        v127 = const u64 5
        v128 = get_elem_ptr v126, ptr { u64 }, v127, !6769
        v129 = load v128
        v130 = get_local ptr { u64 }, b_limit, !6769
        store v129 to v130, !6769
        v131 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6770
        v132 = const u64 4
        v133 = get_elem_ptr v131, ptr u64, v132, !3575
        v134 = load v133
        v135 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6771
        v136 = const u64 4
        v137 = get_elem_ptr v135, ptr u64, v136, !3575
        v138 = load v137
        v139 = call gt_89(v134, v138), !6774
        cbr v139, block8(), block9(), !6772

        block8():
        v140 = get_local ptr { u64 }, __anon_8, !5706
        v141 = const u64 0
        v142 = get_elem_ptr v140, ptr u64, v141, !5706
        v143 = const u64 0, !5706
        store v143 to v142, !5706
        v144 = load v140
        v145 = call zero_424(), !6777
        v146 = get_local ptr { { u64 }, b256 }, __anon_9, !6778
        v147 = const u64 0
        v148 = get_elem_ptr v146, ptr { u64 }, v147, !6778
        store v144 to v148, !6778
        v149 = const u64 1
        v150 = get_elem_ptr v146, ptr b256, v149, !6778
        store v145 to v150, !6778
        v151 = load v146
        ret { { u64 }, b256 } v151, !6779

        block9():
        v152 = const unit ()
        br block10(v152)

        block10(v153: ()):
        v154 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6780
        v155 = load v154
        v156 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6781
        v157 = load v156
        v158 = call is_maker_425(v155, v157), !6784
        cbr v158, block11(), block12(), !6782

        block11():
        v159 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6785
        v160 = const u64 4
        v161 = get_elem_ptr v159, ptr u64, v160, !3575
        v162 = load v161
        br block13(v162)

        block12():
        v163 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6786
        v164 = const u64 4
        v165 = get_elem_ptr v163, ptr u64, v164, !3575
        v166 = load v165
        br block13(v166)

        block13(v167: u64):
        v168 = get_local ptr u64, trade_price, !6787
        store v167 to v168, !6787
        v169 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6788
        v170 = const u64 0
        v171 = get_elem_ptr v169, ptr u64, v170, !3574
        v172 = load v171
        v173 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6789
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr u64, v174, !3574
        v176 = load v175
        v177 = call min_427(v172, v176), !6792
        v178 = get_local ptr u64, trade_size, !6793
        store v177 to v178, !6793
        v179 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6794
        v180 = load v179
        v181 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6795
        v182 = load v181
        v183 = get_local ptr u64, trade_size, !6796
        v184 = load v183
        v185 = get_local ptr u64, trade_price, !6797
        v186 = load v185
        v187 = get_local ptr { u64, ( { b256 } | { b256 } ) }, matcher, !6798
        v188 = load v187
        v189 = call execute_trade_428(v180, v182, v184, v186, v188), !6801
        v190 = get_local ptr { u64, u64, u64 }, __tuple_11, !6802
        store v189 to v190, !6802
        v191 = get_local ptr { u64, u64, u64 }, __tuple_11, !6802
        v192 = load v191
        v193 = get_local ptr { u64, u64, u64 }, __tuple_11_, !6802
        store v192 to v193, !6802
        v194 = get_local ptr { u64, u64, u64 }, __tuple_11_, !6802
        v195 = const u64 0
        v196 = get_elem_ptr v194, ptr u64, v195, !6802
        v197 = load v196
        v198 = get_local ptr u64, trade_volume, !6802
        store v197 to v198, !6802
        v199 = get_local ptr { u64, u64, u64 }, __tuple_11_, !6802
        v200 = const u64 1
        v201 = get_elem_ptr v199, ptr u64, v200, !6802
        v202 = load v201
        v203 = get_local ptr u64, s_order_matcher_fee, !6802
        store v202 to v203, !6802
        v204 = get_local ptr { u64, u64, u64 }, __tuple_11_, !6802
        v205 = const u64 2
        v206 = get_elem_ptr v204, ptr u64, v205, !6802
        v207 = load v206
        v208 = get_local ptr u64, b_order_matcher_fee, !6802
        store v207 to v208, !6802
        v209 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6803
        v210 = const u64 3
        v211 = get_elem_ptr v209, ptr { u64, ( { b256 } | { b256 } ) }, v210, !2464
        v212 = load v211
        v213 = get_local ptr u64, trade_volume, !6804
        v214 = load v213
        v215 = call increase_user_volume_436(v212, v214), !6807
        v216 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6808
        v217 = const u64 3
        v218 = get_elem_ptr v216, ptr { u64, ( { b256 } | { b256 } ) }, v217, !2464
        v219 = load v218
        v220 = get_local ptr u64, trade_volume, !6809
        v221 = load v220
        v222 = call increase_user_volume_436(v219, v221), !6812
        v223 = get_local ptr { b256, u64, b256 }, __anon_10, !6813
        v224 = const u64 0
        v225 = get_elem_ptr v223, ptr b256, v224
        v226 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6813
        store v226 to v225, !6813
        v227 = const u64 1
        v228 = get_elem_ptr v223, ptr u64, v227
        v229 = const u64 0
        store v229 to v228, !6813
        v230 = const u64 2
        v231 = get_elem_ptr v223, ptr b256, v230
        v232 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6813
        store v232 to v231, !6813
        v233 = load v223
        v234 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6814
        v235 = const u64 3
        v236 = get_elem_ptr v234, ptr { u64, ( { b256 } | { b256 } ) }, v235, !2464
        v237 = load v236
        v238 = call get_188(v233, v237), !6817
        v239 = call read_181(v238), !6820
        v240 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !6821
        store v239 to v240, !6821
        v241 = get_local ptr { b256, u64, b256 }, __anon_11, !6822
        v242 = const u64 0
        v243 = get_elem_ptr v241, ptr b256, v242
        v244 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6822
        store v244 to v243, !6822
        v245 = const u64 1
        v246 = get_elem_ptr v241, ptr u64, v245
        v247 = const u64 0
        store v247 to v246, !6822
        v248 = const u64 2
        v249 = get_elem_ptr v241, ptr b256, v248
        v250 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6822
        store v250 to v249, !6822
        v251 = load v241
        v252 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6823
        v253 = const u64 3
        v254 = get_elem_ptr v252, ptr { u64, ( { b256 } | { b256 } ) }, v253, !2464
        v255 = load v254
        v256 = call get_188(v251, v255), !6826
        v257 = call read_181(v256), !6829
        v258 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !6830
        store v257 to v258, !6830
        v259 = get_local ptr b256, s_id, !6831
        v260 = load v259
        v261 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6832
        v262 = load v261
        v263 = get_local ptr { u64 }, s_limit, !6833
        v264 = load v263
        v265 = get_local ptr u64, trade_size, !6834
        v266 = load v265
        v267 = get_local ptr b256, b_id, !6835
        v268 = load v267
        v269 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6836
        v270 = load v269
        v271 = get_local ptr { u64 }, b_limit, !6837
        v272 = load v271
        v273 = get_local ptr { u64, ( { b256 } | { b256 } ) }, matcher, !6838
        v274 = load v273
        v275 = get_local ptr u64, trade_price, !6839
        v276 = load v275
        v277 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !6840
        v278 = load v277
        v279 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !6841
        v280 = load v279
        v281 = call emit_match_events_449(v260, v262, v264, v266, v268, v270, v272, v274, v276, v278, v280), !6844
        v282 = get_local ptr u64, trade_size, !6845
        v283 = load v282
        v284 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_order, !6846
        v285 = get_local ptr b256, s_id, !6847
        v286 = load v285
        v287 = get_local ptr u64, s_order_matcher_fee, !6848
        v288 = load v287
        v289 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order, !6849
        v290 = get_local ptr b256, b_id, !6850
        v291 = load v290
        v292 = get_local ptr u64, b_order_matcher_fee, !6851
        v293 = load v292
        v294 = call update_order_storage_455(v283, v284, v286, v288, v289, v291, v293), !6854
        v295 = get_local ptr { { u64 }, b256 }, __tuple_12, !6855
        store v294 to v295, !6855
        v296 = get_local ptr { { u64 }, b256 }, __tuple_12, !6855
        v297 = load v296
        v298 = get_local ptr { { u64 }, b256 }, __tuple_12_, !6855
        store v297 to v298, !6855
        v299 = get_local ptr { { u64 }, b256 }, __tuple_12_, !6855
        v300 = const u64 0
        v301 = get_elem_ptr v299, ptr { u64 }, v300, !6855
        v302 = load v301
        v303 = get_local ptr { u64 }, match_result, !6855
        store v302 to v303, !6855
        v304 = get_local ptr { { u64 }, b256 }, __tuple_12_, !6855
        v305 = const u64 1
        v306 = get_elem_ptr v304, ptr b256, v305, !6855
        v307 = load v306
        v308 = get_local ptr b256, partial_order_id, !6855
        store v307 to v308, !6855
        v309 = get_local ptr { u64 }, match_result, !6856
        v310 = load v309
        v311 = get_local ptr { u64 }, __anon_12, !5706
        v312 = const u64 0
        v313 = get_elem_ptr v311, ptr u64, v312, !5706
        v314 = const u64 1, !5706
        store v314 to v313, !5706
        v315 = load v311
        v316 = call eq_456(v310, v315), !6859
        cbr v316, block14(), block15(v316), !6860

        block14():
        v317 = get_local ptr b256, partial_order_id, !6861
        v318 = load v317
        v319 = call cancel_if_small_order_309(v318), !6864
        br block15(v319), !6860

        block15(v320: bool):
        cbr v320, block16(), block17(), !6860

        block16():
        v321 = get_local ptr { u64 }, __anon_13, !5706
        v322 = const u64 0
        v323 = get_elem_ptr v321, ptr u64, v322, !5706
        v324 = const u64 2, !5706
        store v324 to v323, !5706
        v325 = load v321
        v326 = call zero_424(), !6867
        v327 = get_local ptr { { u64 }, b256 }, __anon_14, !6868
        v328 = const u64 0
        v329 = get_elem_ptr v327, ptr { u64 }, v328, !6868
        store v325 to v329, !6868
        v330 = const u64 1
        v331 = get_elem_ptr v327, ptr b256, v330, !6868
        store v326 to v331, !6868
        v332 = load v327
        ret { { u64 }, b256 } v332, !6869

        block17():
        v333 = const unit ()
        br block18(v333)

        block18(v334: ()):
        v335 = get_local ptr { u64 }, match_result, !6870
        v336 = load v335
        v337 = get_local ptr b256, partial_order_id, !6871
        v338 = load v337
        v339 = get_local ptr { { u64 }, b256 }, __anon_15, !6872
        v340 = const u64 0
        v341 = get_elem_ptr v339, ptr { u64 }, v340, !6872
        store v336 to v341, !6872
        v342 = const u64 1
        v343 = get_elem_ptr v339, ptr b256, v342, !6872
        store v338 to v343, !6872
        v344 = load v339
        ret { { u64 }, b256 } v344
    }

    pub fn zero_424() -> b256, !6875 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !6876
        ret b256 v0
    }

    pub fn is_maker_425(self !6877: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, counterparty !6878: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }) -> bool, !6881 {
        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, counterparty: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 5
        v3 = get_elem_ptr v1, ptr u64, v2, !2445
        v4 = load v3
        v5 = ptr_to_int counterparty to u64
        v6 = int_to_ptr v5 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v7 = const u64 5
        v8 = get_elem_ptr v6, ptr u64, v7, !2445
        v9 = load v8
        v10 = call lt_426(v4, v9), !6884
        ret bool v10
    }

    pub fn lt_426(self !6885: u64, other !6886: u64) -> bool, !6889 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn min_427(a !6890: u64, b !6891: u64) -> u64, !6894 {
        entry(a: u64, b: u64):
        v0 = call lt_86(a, b), !6897
        cbr v0, block0(), block1(), !6895

        block0():
        br block2(a)

        block1():
        br block2(b)

        block2(v1: u64):
        ret u64 v1
    }

    fn execute_trade_428(s_order !6898: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order !6899: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, trade_size !6900: u64, trade_price !6901: u64, matcher !6902: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64, u64 }, !6905 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_10
        local { b256, u64, b256 } __anon_11
        local { b256, u64, b256 } __anon_12
        local { b256, u64, b256 } __anon_13
        local { b256, u64, b256 } __anon_14
        local { b256, u64, b256 } __anon_15
        local { b256, u64, b256 } __anon_16
        local { b256, u64, b256 } __anon_17
        local { b256, u64, b256 } __anon_18
        local { b256, u64, b256 } __anon_19
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_20
        local { b256, u64, b256 } __anon_21
        local { b256, u64, b256 } __anon_22
        local { b256, u64, b256 } __anon_23
        local { b256, u64, b256 } __anon_24
        local { b256, u64, b256 } __anon_25
        local { b256, u64, b256 } __anon_26
        local { b256, u64, b256 } __anon_27
        local { b256, u64, b256 } __anon_28
        local { b256, u64, b256 } __anon_29
        local { b256, u64, b256 } __anon_3
        local { u64, u64, u64 } __anon_30
        local { b256, u64, b256 } __anon_4
        local { b256, u64, b256 } __anon_5
        local { b256, u64, b256 } __anon_6
        local { b256, u64, b256 } __anon_7
        local { b256, u64, b256 } __anon_8
        local { b256, u64, b256 } __anon_9
        local mut { { u64, u64 }, { u64, u64 } } account
        local mut { { u64, u64 }, { u64, u64 } } account_
        local mut { { u64, u64 }, { u64, u64 } } account__
        local mut { { u64, u64 }, { u64, u64 } } account___
        local mut { { u64, u64 }, { u64, u64 } } account____
        local { u64 } asset_type
        local mut { { u64, u64 }, { u64, u64 } } b_account
        local mut { { u64, u64 }, { u64, u64 } } b_account_
        local mut { { u64, u64 }, { u64, u64 } } b_account__
        local u64 b_order_matcher_fee
        local u64 b_order_protocol_fee
        local u64 b_trade_volume
        local u64 d_trade_volume
        local u64 lock_fee
        local mut { { u64, u64 }, { u64, u64 } } m_account
        local mut { { u64, u64 }, { u64, u64 } } m_account_
        local mut { { u64, u64 }, { u64, u64 } } o_account
        local mut { { u64, u64 }, { u64, u64 } } o_account_
        local { u64, ( { b256 } | { b256 } ) } owner
        local mut { { u64, u64 }, { u64, u64 } } s_account
        local mut { { u64, u64 }, { u64, u64 } } s_account_
        local mut { { u64, u64 }, { u64, u64 } } s_account__
        local u64 s_order_matcher_fee
        local u64 s_order_protocol_fee
        local u64 s_trade_volume
        local u64 unlock_delta

        entry(s_order: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_order: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, trade_size: u64, trade_price: u64, matcher: { u64, ( { b256 } | { b256 } ) }):
        v0 = ptr_to_int s_order to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr { u64 }, v2, !3177
        v4 = load v3
        v5 = get_local ptr { u64 }, asset_type, !6906
        store v4 to v5, !6906
        v6 = call quote_of_base_amount_214(trade_size, trade_price), !6909
        v7 = get_local ptr u64, s_trade_volume, !6910
        store v6 to v7, !6910
        v8 = ptr_to_int b_order to u64
        v9 = int_to_ptr v8 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v10 = const u64 4
        v11 = get_elem_ptr v9, ptr u64, v10, !3575
        v12 = load v11
        v13 = call quote_of_base_amount_214(trade_size, v12), !6913
        v14 = get_local ptr u64, b_trade_volume, !6914
        store v13 to v14, !6914
        v15 = get_local ptr u64, b_trade_volume, !6915
        v16 = load v15
        v17 = get_local ptr u64, s_trade_volume, !6916
        v18 = load v17
        v19 = call subtract_211(v16, v18), !6919
        v20 = get_local ptr u64, d_trade_volume, !6920
        store v19 to v20, !6920
        v21 = call matcher_fee_of_amount_429(s_order, trade_size), !6923
        v22 = get_local ptr u64, s_order_matcher_fee, !6924
        store v21 to v22, !6924
        v23 = call matcher_fee_of_amount_429(b_order, trade_size), !6927
        v24 = get_local ptr u64, b_order_matcher_fee, !6928
        store v23 to v24, !6928
        v25 = get_local ptr u64, s_trade_volume, !6929
        v26 = load v25
        v27 = call protocol_fee_of_amount_430(s_order, b_order, v26), !6932
        v28 = get_local ptr u64, s_order_protocol_fee, !6933
        store v27 to v28, !6933
        v29 = get_local ptr u64, s_trade_volume, !6934
        v30 = load v29
        v31 = call protocol_fee_of_amount_430(b_order, s_order, v30), !6937
        v32 = get_local ptr u64, b_order_protocol_fee, !6938
        store v31 to v32, !6938
        v33 = ptr_to_int s_order to u64
        v34 = int_to_ptr v33 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v35 = const u64 3
        v36 = get_elem_ptr v34, ptr { u64, ( { b256 } | { b256 } ) }, v35, !2464
        v37 = load v36
        v38 = ptr_to_int b_order to u64
        v39 = int_to_ptr v38 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v40 = const u64 3
        v41 = get_elem_ptr v39, ptr { u64, ( { b256 } | { b256 } ) }, v40, !2464
        v42 = load v41
        v43 = call eq_65(v37, v42), !6941
        cbr v43, block0(), block1(), !6939

        block0():
        v44 = get_local ptr { b256, u64, b256 }, __anon_0, !6942
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr b256, v45
        v47 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6942
        store v47 to v46, !6942
        v48 = const u64 1
        v49 = get_elem_ptr v44, ptr u64, v48
        v50 = const u64 0
        store v50 to v49, !6942
        v51 = const u64 2
        v52 = get_elem_ptr v44, ptr b256, v51
        v53 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6942
        store v53 to v52, !6942
        v54 = load v44
        v55 = ptr_to_int s_order to u64
        v56 = int_to_ptr v55 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v57 = const u64 3
        v58 = get_elem_ptr v56, ptr { u64, ( { b256 } | { b256 } ) }, v57, !2464
        v59 = load v58
        v60 = call get_188(v54, v59), !6945
        v61 = call read_181(v60), !6948
        v62 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !6949
        store v61 to v62, !6949
        v63 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !6950
        v64 = get_local ptr { u64 }, asset_type, !6951
        v65 = load v64
        v66 = call unlock_amount_202(v63, trade_size, v65), !6954
        v67 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !6955
        v68 = get_local ptr u64, b_trade_volume, !6956
        v69 = load v68
        v70 = get_local ptr u64, d_trade_volume, !6957
        v71 = load v70
        v72 = call max_protocol_fee_of_amount_247(b_order, v71), !6960
        v73 = call add_38(v69, v72), !6963
        v74 = get_local ptr u64, s_order_protocol_fee, !6964
        v75 = load v74
        v76 = call subtract_211(v73, v75), !6967
        v77 = get_local ptr u64, s_order_matcher_fee, !6968
        v78 = load v77
        v79 = call subtract_211(v76, v78), !6971
        v80 = get_local ptr { u64 }, asset_type, !6972
        v81 = load v80
        v82 = call not_249(v81), !6975
        v83 = call unlock_amount_202(v67, v79, v82), !6978
        v84 = get_local ptr { b256, u64, b256 }, __anon_1, !6979
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr b256, v85
        v87 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6979
        store v87 to v86, !6979
        v88 = const u64 1
        v89 = get_elem_ptr v84, ptr u64, v88
        v90 = const u64 0
        store v90 to v89, !6979
        v91 = const u64 2
        v92 = get_elem_ptr v84, ptr b256, v91
        v93 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6979
        store v93 to v92, !6979
        v94 = load v84
        v95 = ptr_to_int s_order to u64
        v96 = int_to_ptr v95 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v97 = const u64 3
        v98 = get_elem_ptr v96, ptr { u64, ( { b256 } | { b256 } ) }, v97, !2464
        v99 = load v98
        v100 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !6980
        v101 = load v100
        v102 = call insert_297(v94, v99, v101), !6983
        v103 = const unit ()
        br block8(v103)

        block1():
        v104 = get_local ptr { b256, u64, b256 }, __anon_2, !6984
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr b256, v105
        v107 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6984
        store v107 to v106, !6984
        v108 = const u64 1
        v109 = get_elem_ptr v104, ptr u64, v108
        v110 = const u64 0
        store v110 to v109, !6984
        v111 = const u64 2
        v112 = get_elem_ptr v104, ptr b256, v111
        v113 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6984
        store v113 to v112, !6984
        v114 = load v104
        v115 = ptr_to_int s_order to u64
        v116 = int_to_ptr v115 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v117 = const u64 3
        v118 = get_elem_ptr v116, ptr { u64, ( { b256 } | { b256 } ) }, v117, !2464
        v119 = load v118
        v120 = call get_188(v114, v119), !6987
        v121 = call read_181(v120), !6990
        v122 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !6991
        store v121 to v122, !6991
        v123 = get_local ptr { b256, u64, b256 }, __anon_3, !6992
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr b256, v124
        v126 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6992
        store v126 to v125, !6992
        v127 = const u64 1
        v128 = get_elem_ptr v123, ptr u64, v127
        v129 = const u64 0
        store v129 to v128, !6992
        v130 = const u64 2
        v131 = get_elem_ptr v123, ptr b256, v130
        v132 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !6992
        store v132 to v131, !6992
        v133 = load v123
        v134 = ptr_to_int b_order to u64
        v135 = int_to_ptr v134 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v136 = const u64 3
        v137 = get_elem_ptr v135, ptr { u64, ( { b256 } | { b256 } ) }, v136, !2464
        v138 = load v137
        v139 = call get_188(v133, v138), !6995
        v140 = call read_181(v139), !6998
        v141 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !6999
        store v140 to v141, !6999
        v142 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !7000
        v143 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !7001
        v144 = get_local ptr { u64 }, asset_type, !7002
        v145 = load v144
        v146 = call transfer_locked_amount_433(v142, v143, trade_size, v145), !7005
        v147 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !7006
        v148 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !7007
        v149 = get_local ptr u64, s_trade_volume, !7008
        v150 = load v149
        v151 = get_local ptr { u64 }, asset_type, !7009
        v152 = load v151
        v153 = call not_249(v152), !7012
        v154 = call transfer_locked_amount_433(v147, v148, v150, v153), !7015
        v155 = get_local ptr u64, s_order_protocol_fee, !7016
        v156 = load v155
        v157 = get_local ptr u64, s_order_matcher_fee, !7017
        v158 = load v157
        v159 = call add_38(v156, v158), !7020
        v160 = get_local ptr u64, lock_fee, !7021
        store v159 to v160, !7021
        v161 = get_local ptr u64, lock_fee, !7022
        v162 = load v161
        v163 = const u64 0, !7023
        v164 = call gt_89(v162, v163), !7026
        cbr v164, block2(), block3(), !7024

        block2():
        v165 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !7027
        v166 = get_local ptr u64, lock_fee, !7028
        v167 = load v166
        v168 = get_local ptr { u64 }, asset_type, !7029
        v169 = load v168
        v170 = call not_249(v169), !7032
        v171 = call lock_amount_414(v165, v167, v170), !7035
        v172 = const unit ()
        br block4(v172)

        block3():
        v173 = const unit ()
        br block4(v173)

        block4(v174: ()):
        v175 = get_local ptr u64, d_trade_volume, !7036
        v176 = load v175
        v177 = get_local ptr u64, b_trade_volume, !7037
        v178 = load v177
        v179 = call max_protocol_fee_of_amount_247(b_order, v178), !7040
        v180 = call add_38(v176, v179), !7043
        v181 = get_local ptr u64, b_order_protocol_fee, !7044
        v182 = load v181
        v183 = call subtract_211(v180, v182), !7047
        v184 = get_local ptr u64, unlock_delta, !7048
        store v183 to v184, !7048
        v185 = get_local ptr u64, unlock_delta, !7049
        v186 = load v185
        v187 = const u64 0, !7050
        v188 = call gt_89(v186, v187), !7053
        cbr v188, block5(), block6(), !7051

        block5():
        v189 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !7054
        v190 = get_local ptr u64, unlock_delta, !7055
        v191 = load v190
        v192 = get_local ptr { u64 }, asset_type, !7056
        v193 = load v192
        v194 = call not_249(v193), !7059
        v195 = call unlock_amount_202(v189, v191, v194), !7062
        v196 = const unit ()
        br block7(v196)

        block6():
        v197 = const unit ()
        br block7(v197)

        block7(v198: ()):
        v199 = get_local ptr { b256, u64, b256 }, __anon_4, !7063
        v200 = const u64 0
        v201 = get_elem_ptr v199, ptr b256, v200
        v202 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7063
        store v202 to v201, !7063
        v203 = const u64 1
        v204 = get_elem_ptr v199, ptr u64, v203
        v205 = const u64 0
        store v205 to v204, !7063
        v206 = const u64 2
        v207 = get_elem_ptr v199, ptr b256, v206
        v208 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7063
        store v208 to v207, !7063
        v209 = load v199
        v210 = ptr_to_int s_order to u64
        v211 = int_to_ptr v210 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v212 = const u64 3
        v213 = get_elem_ptr v211, ptr { u64, ( { b256 } | { b256 } ) }, v212, !2464
        v214 = load v213
        v215 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account, !7064
        v216 = load v215
        v217 = call insert_297(v209, v214, v216), !7067
        v218 = get_local ptr { b256, u64, b256 }, __anon_5, !7068
        v219 = const u64 0
        v220 = get_elem_ptr v218, ptr b256, v219
        v221 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7068
        store v221 to v220, !7068
        v222 = const u64 1
        v223 = get_elem_ptr v218, ptr u64, v222
        v224 = const u64 0
        store v224 to v223, !7068
        v225 = const u64 2
        v226 = get_elem_ptr v218, ptr b256, v225
        v227 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7068
        store v227 to v226, !7068
        v228 = load v218
        v229 = ptr_to_int b_order to u64
        v230 = int_to_ptr v229 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v231 = const u64 3
        v232 = get_elem_ptr v230, ptr { u64, ( { b256 } | { b256 } ) }, v231, !2464
        v233 = load v232
        v234 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account, !7069
        v235 = load v234
        v236 = call insert_297(v228, v233, v235), !7072
        v237 = const unit ()
        br block8(v237)

        block8(v238: ()):
        v239 = get_local ptr u64, s_order_matcher_fee, !7073
        v240 = load v239
        v241 = const u64 0, !7074
        v242 = call gt_89(v240, v241), !7077
        cbr v242, block9(), block13(), !7075

        block9():
        v243 = ptr_to_int s_order to u64
        v244 = int_to_ptr v243 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v245 = const u64 3
        v246 = get_elem_ptr v244, ptr { u64, ( { b256 } | { b256 } ) }, v245, !2464
        v247 = load v246
        v248 = call eq_65(v247, matcher), !7080
        cbr v248, block10(), block11(), !7078

        block10():
        v249 = get_local ptr { b256, u64, b256 }, __anon_6, !7081
        v250 = const u64 0
        v251 = get_elem_ptr v249, ptr b256, v250
        v252 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7081
        store v252 to v251, !7081
        v253 = const u64 1
        v254 = get_elem_ptr v249, ptr u64, v253
        v255 = const u64 0
        store v255 to v254, !7081
        v256 = const u64 2
        v257 = get_elem_ptr v249, ptr b256, v256
        v258 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7081
        store v258 to v257, !7081
        v259 = load v249
        v260 = ptr_to_int s_order to u64
        v261 = int_to_ptr v260 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v262 = const u64 3
        v263 = get_elem_ptr v261, ptr { u64, ( { b256 } | { b256 } ) }, v262, !2464
        v264 = load v263
        v265 = call get_188(v259, v264), !7084
        v266 = call read_181(v265), !7087
        v267 = get_local ptr { { u64, u64 }, { u64, u64 } }, account_, !7088
        store v266 to v267, !7088
        v268 = get_local ptr { { u64, u64 }, { u64, u64 } }, account_, !7089
        v269 = get_local ptr u64, s_order_matcher_fee, !7090
        v270 = load v269
        v271 = get_local ptr { u64 }, asset_type, !7091
        v272 = load v271
        v273 = call not_249(v272), !7094
        v274 = call unlock_amount_202(v268, v270, v273), !7097
        v275 = get_local ptr { b256, u64, b256 }, __anon_7, !7098
        v276 = const u64 0
        v277 = get_elem_ptr v275, ptr b256, v276
        v278 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7098
        store v278 to v277, !7098
        v279 = const u64 1
        v280 = get_elem_ptr v275, ptr u64, v279
        v281 = const u64 0
        store v281 to v280, !7098
        v282 = const u64 2
        v283 = get_elem_ptr v275, ptr b256, v282
        v284 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7098
        store v284 to v283, !7098
        v285 = load v275
        v286 = ptr_to_int s_order to u64
        v287 = int_to_ptr v286 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v288 = const u64 3
        v289 = get_elem_ptr v287, ptr { u64, ( { b256 } | { b256 } ) }, v288, !2464
        v290 = load v289
        v291 = get_local ptr { { u64, u64 }, { u64, u64 } }, account_, !7099
        v292 = load v291
        v293 = call insert_297(v285, v290, v292), !7102
        v294 = const unit ()
        br block12(v294)

        block11():
        v295 = get_local ptr { b256, u64, b256 }, __anon_8, !7103
        v296 = const u64 0
        v297 = get_elem_ptr v295, ptr b256, v296
        v298 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7103
        store v298 to v297, !7103
        v299 = const u64 1
        v300 = get_elem_ptr v295, ptr u64, v299
        v301 = const u64 0
        store v301 to v300, !7103
        v302 = const u64 2
        v303 = get_elem_ptr v295, ptr b256, v302
        v304 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7103
        store v304 to v303, !7103
        v305 = load v295
        v306 = ptr_to_int s_order to u64
        v307 = int_to_ptr v306 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v308 = const u64 3
        v309 = get_elem_ptr v307, ptr { u64, ( { b256 } | { b256 } ) }, v308, !2464
        v310 = load v309
        v311 = call get_188(v305, v310), !7106
        v312 = call read_181(v311), !7109
        v313 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account_, !7110
        store v312 to v313, !7110
        v314 = get_local ptr { b256, u64, b256 }, __anon_9, !7111
        v315 = const u64 0
        v316 = get_elem_ptr v314, ptr b256, v315
        v317 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7111
        store v317 to v316, !7111
        v318 = const u64 1
        v319 = get_elem_ptr v314, ptr u64, v318
        v320 = const u64 0
        store v320 to v319, !7111
        v321 = const u64 2
        v322 = get_elem_ptr v314, ptr b256, v321
        v323 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7111
        store v323 to v322, !7111
        v324 = load v314
        v325 = call get_188(v324, matcher), !7114
        v326 = call try_read_330(v325), !7117
        v327 = call new_331(), !7120
        v328 = call unwrap_or_329(v326, v327), !7123
        v329 = get_local ptr { { u64, u64 }, { u64, u64 } }, m_account, !7124
        store v328 to v329, !7124
        v330 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account_, !7125
        v331 = get_local ptr { { u64, u64 }, { u64, u64 } }, m_account, !7126
        v332 = get_local ptr u64, s_order_matcher_fee, !7127
        v333 = load v332
        v334 = get_local ptr { u64 }, asset_type, !7128
        v335 = load v334
        v336 = call not_249(v335), !7131
        v337 = call transfer_locked_amount_433(v330, v331, v333, v336), !7134
        v338 = get_local ptr { b256, u64, b256 }, __anon_10, !7135
        v339 = const u64 0
        v340 = get_elem_ptr v338, ptr b256, v339
        v341 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7135
        store v341 to v340, !7135
        v342 = const u64 1
        v343 = get_elem_ptr v338, ptr u64, v342
        v344 = const u64 0
        store v344 to v343, !7135
        v345 = const u64 2
        v346 = get_elem_ptr v338, ptr b256, v345
        v347 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7135
        store v347 to v346, !7135
        v348 = load v338
        v349 = ptr_to_int s_order to u64
        v350 = int_to_ptr v349 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v351 = const u64 3
        v352 = get_elem_ptr v350, ptr { u64, ( { b256 } | { b256 } ) }, v351, !2464
        v353 = load v352
        v354 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account_, !7136
        v355 = load v354
        v356 = call insert_297(v348, v353, v355), !7139
        v357 = get_local ptr { b256, u64, b256 }, __anon_11, !7140
        v358 = const u64 0
        v359 = get_elem_ptr v357, ptr b256, v358
        v360 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7140
        store v360 to v359, !7140
        v361 = const u64 1
        v362 = get_elem_ptr v357, ptr u64, v361
        v363 = const u64 0
        store v363 to v362, !7140
        v364 = const u64 2
        v365 = get_elem_ptr v357, ptr b256, v364
        v366 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7140
        store v366 to v365, !7140
        v367 = load v357
        v368 = get_local ptr { { u64, u64 }, { u64, u64 } }, m_account, !7141
        v369 = load v368
        v370 = call insert_297(v367, matcher, v369), !7144
        v371 = const unit ()
        br block12(v371)

        block12(v372: ()):
        br block14(v372)

        block13():
        v373 = const unit ()
        br block14(v373)

        block14(v374: ()):
        v375 = get_local ptr u64, b_order_matcher_fee, !7145
        v376 = load v375
        v377 = const u64 0, !7146
        v378 = call gt_89(v376, v377), !7149
        cbr v378, block15(), block19(), !7147

        block15():
        v379 = ptr_to_int b_order to u64
        v380 = int_to_ptr v379 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v381 = const u64 3
        v382 = get_elem_ptr v380, ptr { u64, ( { b256 } | { b256 } ) }, v381, !2464
        v383 = load v382
        v384 = call eq_65(v383, matcher), !7152
        cbr v384, block16(), block17(), !7150

        block16():
        v385 = get_local ptr { b256, u64, b256 }, __anon_12, !7153
        v386 = const u64 0
        v387 = get_elem_ptr v385, ptr b256, v386
        v388 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7153
        store v388 to v387, !7153
        v389 = const u64 1
        v390 = get_elem_ptr v385, ptr u64, v389
        v391 = const u64 0
        store v391 to v390, !7153
        v392 = const u64 2
        v393 = get_elem_ptr v385, ptr b256, v392
        v394 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7153
        store v394 to v393, !7153
        v395 = load v385
        v396 = ptr_to_int b_order to u64
        v397 = int_to_ptr v396 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v398 = const u64 3
        v399 = get_elem_ptr v397, ptr { u64, ( { b256 } | { b256 } ) }, v398, !2464
        v400 = load v399
        v401 = call get_188(v395, v400), !7156
        v402 = call read_181(v401), !7159
        v403 = get_local ptr { { u64, u64 }, { u64, u64 } }, account__, !7160
        store v402 to v403, !7160
        v404 = get_local ptr { { u64, u64 }, { u64, u64 } }, account__, !7161
        v405 = get_local ptr u64, b_order_matcher_fee, !7162
        v406 = load v405
        v407 = get_local ptr { u64 }, asset_type, !7163
        v408 = load v407
        v409 = call not_249(v408), !7166
        v410 = call unlock_amount_202(v404, v406, v409), !7169
        v411 = get_local ptr { b256, u64, b256 }, __anon_13, !7170
        v412 = const u64 0
        v413 = get_elem_ptr v411, ptr b256, v412
        v414 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7170
        store v414 to v413, !7170
        v415 = const u64 1
        v416 = get_elem_ptr v411, ptr u64, v415
        v417 = const u64 0
        store v417 to v416, !7170
        v418 = const u64 2
        v419 = get_elem_ptr v411, ptr b256, v418
        v420 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7170
        store v420 to v419, !7170
        v421 = load v411
        v422 = ptr_to_int b_order to u64
        v423 = int_to_ptr v422 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v424 = const u64 3
        v425 = get_elem_ptr v423, ptr { u64, ( { b256 } | { b256 } ) }, v424, !2464
        v426 = load v425
        v427 = get_local ptr { { u64, u64 }, { u64, u64 } }, account__, !7171
        v428 = load v427
        v429 = call insert_297(v421, v426, v428), !7174
        v430 = const unit ()
        br block18(v430)

        block17():
        v431 = get_local ptr { b256, u64, b256 }, __anon_14, !7175
        v432 = const u64 0
        v433 = get_elem_ptr v431, ptr b256, v432
        v434 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7175
        store v434 to v433, !7175
        v435 = const u64 1
        v436 = get_elem_ptr v431, ptr u64, v435
        v437 = const u64 0
        store v437 to v436, !7175
        v438 = const u64 2
        v439 = get_elem_ptr v431, ptr b256, v438
        v440 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7175
        store v440 to v439, !7175
        v441 = load v431
        v442 = ptr_to_int b_order to u64
        v443 = int_to_ptr v442 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v444 = const u64 3
        v445 = get_elem_ptr v443, ptr { u64, ( { b256 } | { b256 } ) }, v444, !2464
        v446 = load v445
        v447 = call get_188(v441, v446), !7178
        v448 = call read_181(v447), !7181
        v449 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account_, !7182
        store v448 to v449, !7182
        v450 = get_local ptr { b256, u64, b256 }, __anon_15, !7183
        v451 = const u64 0
        v452 = get_elem_ptr v450, ptr b256, v451
        v453 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7183
        store v453 to v452, !7183
        v454 = const u64 1
        v455 = get_elem_ptr v450, ptr u64, v454
        v456 = const u64 0
        store v456 to v455, !7183
        v457 = const u64 2
        v458 = get_elem_ptr v450, ptr b256, v457
        v459 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7183
        store v459 to v458, !7183
        v460 = load v450
        v461 = call get_188(v460, matcher), !7186
        v462 = call try_read_330(v461), !7189
        v463 = call new_331(), !7192
        v464 = call unwrap_or_329(v462, v463), !7195
        v465 = get_local ptr { { u64, u64 }, { u64, u64 } }, m_account_, !7196
        store v464 to v465, !7196
        v466 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account_, !7197
        v467 = get_local ptr { { u64, u64 }, { u64, u64 } }, m_account_, !7198
        v468 = get_local ptr u64, b_order_matcher_fee, !7199
        v469 = load v468
        v470 = get_local ptr { u64 }, asset_type, !7200
        v471 = load v470
        v472 = call not_249(v471), !7203
        v473 = call transfer_locked_amount_433(v466, v467, v469, v472), !7206
        v474 = get_local ptr { b256, u64, b256 }, __anon_16, !7207
        v475 = const u64 0
        v476 = get_elem_ptr v474, ptr b256, v475
        v477 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7207
        store v477 to v476, !7207
        v478 = const u64 1
        v479 = get_elem_ptr v474, ptr u64, v478
        v480 = const u64 0
        store v480 to v479, !7207
        v481 = const u64 2
        v482 = get_elem_ptr v474, ptr b256, v481
        v483 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7207
        store v483 to v482, !7207
        v484 = load v474
        v485 = ptr_to_int b_order to u64
        v486 = int_to_ptr v485 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v487 = const u64 3
        v488 = get_elem_ptr v486, ptr { u64, ( { b256 } | { b256 } ) }, v487, !2464
        v489 = load v488
        v490 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account_, !7208
        v491 = load v490
        v492 = call insert_297(v484, v489, v491), !7211
        v493 = get_local ptr { b256, u64, b256 }, __anon_17, !7212
        v494 = const u64 0
        v495 = get_elem_ptr v493, ptr b256, v494
        v496 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7212
        store v496 to v495, !7212
        v497 = const u64 1
        v498 = get_elem_ptr v493, ptr u64, v497
        v499 = const u64 0
        store v499 to v498, !7212
        v500 = const u64 2
        v501 = get_elem_ptr v493, ptr b256, v500
        v502 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7212
        store v502 to v501, !7212
        v503 = load v493
        v504 = get_local ptr { { u64, u64 }, { u64, u64 } }, m_account_, !7213
        v505 = load v504
        v506 = call insert_297(v503, matcher, v505), !7216
        v507 = const unit ()
        br block18(v507)

        block18(v508: ()):
        br block20(v508)

        block19():
        v509 = const unit ()
        br block20(v509)

        block20(v510: ()):
        v511 = call owner_identity_434(), !7219
        v512 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7220
        store v511 to v512, !7220
        v513 = get_local ptr u64, s_order_protocol_fee, !7221
        v514 = load v513
        v515 = const u64 0, !7222
        v516 = call gt_89(v514, v515), !7225
        cbr v516, block21(), block25(), !7223

        block21():
        v517 = ptr_to_int s_order to u64
        v518 = int_to_ptr v517 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v519 = const u64 3
        v520 = get_elem_ptr v518, ptr { u64, ( { b256 } | { b256 } ) }, v519, !2464
        v521 = load v520
        v522 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7226
        v523 = load v522
        v524 = call eq_65(v521, v523), !7229
        cbr v524, block22(), block23(), !7227

        block22():
        v525 = get_local ptr { b256, u64, b256 }, __anon_18, !7230
        v526 = const u64 0
        v527 = get_elem_ptr v525, ptr b256, v526
        v528 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7230
        store v528 to v527, !7230
        v529 = const u64 1
        v530 = get_elem_ptr v525, ptr u64, v529
        v531 = const u64 0
        store v531 to v530, !7230
        v532 = const u64 2
        v533 = get_elem_ptr v525, ptr b256, v532
        v534 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7230
        store v534 to v533, !7230
        v535 = load v525
        v536 = ptr_to_int s_order to u64
        v537 = int_to_ptr v536 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v538 = const u64 3
        v539 = get_elem_ptr v537, ptr { u64, ( { b256 } | { b256 } ) }, v538, !2464
        v540 = load v539
        v541 = call get_188(v535, v540), !7233
        v542 = call read_181(v541), !7236
        v543 = get_local ptr { { u64, u64 }, { u64, u64 } }, account___, !7237
        store v542 to v543, !7237
        v544 = get_local ptr { { u64, u64 }, { u64, u64 } }, account___, !7238
        v545 = get_local ptr u64, s_order_protocol_fee, !7239
        v546 = load v545
        v547 = get_local ptr { u64 }, asset_type, !7240
        v548 = load v547
        v549 = call not_249(v548), !7243
        v550 = call unlock_amount_202(v544, v546, v549), !7246
        v551 = get_local ptr { b256, u64, b256 }, __anon_19, !7247
        v552 = const u64 0
        v553 = get_elem_ptr v551, ptr b256, v552
        v554 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7247
        store v554 to v553, !7247
        v555 = const u64 1
        v556 = get_elem_ptr v551, ptr u64, v555
        v557 = const u64 0
        store v557 to v556, !7247
        v558 = const u64 2
        v559 = get_elem_ptr v551, ptr b256, v558
        v560 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7247
        store v560 to v559, !7247
        v561 = load v551
        v562 = ptr_to_int s_order to u64
        v563 = int_to_ptr v562 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v564 = const u64 3
        v565 = get_elem_ptr v563, ptr { u64, ( { b256 } | { b256 } ) }, v564, !2464
        v566 = load v565
        v567 = get_local ptr { { u64, u64 }, { u64, u64 } }, account___, !7248
        v568 = load v567
        v569 = call insert_297(v561, v566, v568), !7251
        v570 = const unit ()
        br block24(v570)

        block23():
        v571 = get_local ptr { b256, u64, b256 }, __anon_20, !7252
        v572 = const u64 0
        v573 = get_elem_ptr v571, ptr b256, v572
        v574 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7252
        store v574 to v573, !7252
        v575 = const u64 1
        v576 = get_elem_ptr v571, ptr u64, v575
        v577 = const u64 0
        store v577 to v576, !7252
        v578 = const u64 2
        v579 = get_elem_ptr v571, ptr b256, v578
        v580 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7252
        store v580 to v579, !7252
        v581 = load v571
        v582 = ptr_to_int s_order to u64
        v583 = int_to_ptr v582 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v584 = const u64 3
        v585 = get_elem_ptr v583, ptr { u64, ( { b256 } | { b256 } ) }, v584, !2464
        v586 = load v585
        v587 = call get_188(v581, v586), !7255
        v588 = call read_181(v587), !7258
        v589 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account__, !7259
        store v588 to v589, !7259
        v590 = get_local ptr { b256, u64, b256 }, __anon_21, !7260
        v591 = const u64 0
        v592 = get_elem_ptr v590, ptr b256, v591
        v593 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7260
        store v593 to v592, !7260
        v594 = const u64 1
        v595 = get_elem_ptr v590, ptr u64, v594
        v596 = const u64 0
        store v596 to v595, !7260
        v597 = const u64 2
        v598 = get_elem_ptr v590, ptr b256, v597
        v599 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7260
        store v599 to v598, !7260
        v600 = load v590
        v601 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7261
        v602 = load v601
        v603 = call get_188(v600, v602), !7264
        v604 = call try_read_330(v603), !7267
        v605 = call new_331(), !7270
        v606 = call unwrap_or_329(v604, v605), !7273
        v607 = get_local ptr { { u64, u64 }, { u64, u64 } }, o_account, !7274
        store v606 to v607, !7274
        v608 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account__, !7275
        v609 = get_local ptr { { u64, u64 }, { u64, u64 } }, o_account, !7276
        v610 = get_local ptr u64, s_order_protocol_fee, !7277
        v611 = load v610
        v612 = get_local ptr { u64 }, asset_type, !7278
        v613 = load v612
        v614 = call not_249(v613), !7281
        v615 = call transfer_locked_amount_433(v608, v609, v611, v614), !7284
        v616 = get_local ptr { b256, u64, b256 }, __anon_22, !7285
        v617 = const u64 0
        v618 = get_elem_ptr v616, ptr b256, v617
        v619 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7285
        store v619 to v618, !7285
        v620 = const u64 1
        v621 = get_elem_ptr v616, ptr u64, v620
        v622 = const u64 0
        store v622 to v621, !7285
        v623 = const u64 2
        v624 = get_elem_ptr v616, ptr b256, v623
        v625 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7285
        store v625 to v624, !7285
        v626 = load v616
        v627 = ptr_to_int s_order to u64
        v628 = int_to_ptr v627 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v629 = const u64 3
        v630 = get_elem_ptr v628, ptr { u64, ( { b256 } | { b256 } ) }, v629, !2464
        v631 = load v630
        v632 = get_local ptr { { u64, u64 }, { u64, u64 } }, s_account__, !7286
        v633 = load v632
        v634 = call insert_297(v626, v631, v633), !7289
        v635 = get_local ptr { b256, u64, b256 }, __anon_23, !7290
        v636 = const u64 0
        v637 = get_elem_ptr v635, ptr b256, v636
        v638 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7290
        store v638 to v637, !7290
        v639 = const u64 1
        v640 = get_elem_ptr v635, ptr u64, v639
        v641 = const u64 0
        store v641 to v640, !7290
        v642 = const u64 2
        v643 = get_elem_ptr v635, ptr b256, v642
        v644 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7290
        store v644 to v643, !7290
        v645 = load v635
        v646 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7291
        v647 = load v646
        v648 = get_local ptr { { u64, u64 }, { u64, u64 } }, o_account, !7292
        v649 = load v648
        v650 = call insert_297(v645, v647, v649), !7295
        v651 = const unit ()
        br block24(v651)

        block24(v652: ()):
        br block26(v652)

        block25():
        v653 = const unit ()
        br block26(v653)

        block26(v654: ()):
        v655 = get_local ptr u64, b_order_protocol_fee, !7296
        v656 = load v655
        v657 = const u64 0, !7297
        v658 = call gt_89(v656, v657), !7300
        cbr v658, block27(), block31(), !7298

        block27():
        v659 = ptr_to_int b_order to u64
        v660 = int_to_ptr v659 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v661 = const u64 3
        v662 = get_elem_ptr v660, ptr { u64, ( { b256 } | { b256 } ) }, v661, !2464
        v663 = load v662
        v664 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7301
        v665 = load v664
        v666 = call eq_65(v663, v665), !7304
        cbr v666, block28(), block29(), !7302

        block28():
        v667 = get_local ptr { b256, u64, b256 }, __anon_24, !7305
        v668 = const u64 0
        v669 = get_elem_ptr v667, ptr b256, v668
        v670 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7305
        store v670 to v669, !7305
        v671 = const u64 1
        v672 = get_elem_ptr v667, ptr u64, v671
        v673 = const u64 0
        store v673 to v672, !7305
        v674 = const u64 2
        v675 = get_elem_ptr v667, ptr b256, v674
        v676 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7305
        store v676 to v675, !7305
        v677 = load v667
        v678 = ptr_to_int b_order to u64
        v679 = int_to_ptr v678 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v680 = const u64 3
        v681 = get_elem_ptr v679, ptr { u64, ( { b256 } | { b256 } ) }, v680, !2464
        v682 = load v681
        v683 = call get_188(v677, v682), !7308
        v684 = call read_181(v683), !7311
        v685 = get_local ptr { { u64, u64 }, { u64, u64 } }, account____, !7312
        store v684 to v685, !7312
        v686 = get_local ptr { { u64, u64 }, { u64, u64 } }, account____, !7313
        v687 = get_local ptr u64, b_order_protocol_fee, !7314
        v688 = load v687
        v689 = get_local ptr { u64 }, asset_type, !7315
        v690 = load v689
        v691 = call not_249(v690), !7318
        v692 = call unlock_amount_202(v686, v688, v691), !7321
        v693 = get_local ptr { b256, u64, b256 }, __anon_25, !7322
        v694 = const u64 0
        v695 = get_elem_ptr v693, ptr b256, v694
        v696 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7322
        store v696 to v695, !7322
        v697 = const u64 1
        v698 = get_elem_ptr v693, ptr u64, v697
        v699 = const u64 0
        store v699 to v698, !7322
        v700 = const u64 2
        v701 = get_elem_ptr v693, ptr b256, v700
        v702 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7322
        store v702 to v701, !7322
        v703 = load v693
        v704 = ptr_to_int b_order to u64
        v705 = int_to_ptr v704 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v706 = const u64 3
        v707 = get_elem_ptr v705, ptr { u64, ( { b256 } | { b256 } ) }, v706, !2464
        v708 = load v707
        v709 = get_local ptr { { u64, u64 }, { u64, u64 } }, account____, !7323
        v710 = load v709
        v711 = call insert_297(v703, v708, v710), !7326
        v712 = const unit ()
        br block30(v712)

        block29():
        v713 = get_local ptr { b256, u64, b256 }, __anon_26, !7327
        v714 = const u64 0
        v715 = get_elem_ptr v713, ptr b256, v714
        v716 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7327
        store v716 to v715, !7327
        v717 = const u64 1
        v718 = get_elem_ptr v713, ptr u64, v717
        v719 = const u64 0
        store v719 to v718, !7327
        v720 = const u64 2
        v721 = get_elem_ptr v713, ptr b256, v720
        v722 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7327
        store v722 to v721, !7327
        v723 = load v713
        v724 = ptr_to_int b_order to u64
        v725 = int_to_ptr v724 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v726 = const u64 3
        v727 = get_elem_ptr v725, ptr { u64, ( { b256 } | { b256 } ) }, v726, !2464
        v728 = load v727
        v729 = call get_188(v723, v728), !7330
        v730 = call read_181(v729), !7333
        v731 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account__, !7334
        store v730 to v731, !7334
        v732 = get_local ptr { b256, u64, b256 }, __anon_27, !7335
        v733 = const u64 0
        v734 = get_elem_ptr v732, ptr b256, v733
        v735 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7335
        store v735 to v734, !7335
        v736 = const u64 1
        v737 = get_elem_ptr v732, ptr u64, v736
        v738 = const u64 0
        store v738 to v737, !7335
        v739 = const u64 2
        v740 = get_elem_ptr v732, ptr b256, v739
        v741 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7335
        store v741 to v740, !7335
        v742 = load v732
        v743 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7336
        v744 = load v743
        v745 = call get_188(v742, v744), !7339
        v746 = call try_read_330(v745), !7342
        v747 = call new_331(), !7345
        v748 = call unwrap_or_329(v746, v747), !7348
        v749 = get_local ptr { { u64, u64 }, { u64, u64 } }, o_account_, !7349
        store v748 to v749, !7349
        v750 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account__, !7350
        v751 = get_local ptr { { u64, u64 }, { u64, u64 } }, o_account_, !7351
        v752 = get_local ptr u64, b_order_protocol_fee, !7352
        v753 = load v752
        v754 = get_local ptr { u64 }, asset_type, !7353
        v755 = load v754
        v756 = call not_249(v755), !7356
        v757 = call transfer_locked_amount_433(v750, v751, v753, v756), !7359
        v758 = get_local ptr { b256, u64, b256 }, __anon_28, !7360
        v759 = const u64 0
        v760 = get_elem_ptr v758, ptr b256, v759
        v761 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7360
        store v761 to v760, !7360
        v762 = const u64 1
        v763 = get_elem_ptr v758, ptr u64, v762
        v764 = const u64 0
        store v764 to v763, !7360
        v765 = const u64 2
        v766 = get_elem_ptr v758, ptr b256, v765
        v767 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7360
        store v767 to v766, !7360
        v768 = load v758
        v769 = ptr_to_int b_order to u64
        v770 = int_to_ptr v769 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v771 = const u64 3
        v772 = get_elem_ptr v770, ptr { u64, ( { b256 } | { b256 } ) }, v771, !2464
        v773 = load v772
        v774 = get_local ptr { { u64, u64 }, { u64, u64 } }, b_account__, !7361
        v775 = load v774
        v776 = call insert_297(v768, v773, v775), !7364
        v777 = get_local ptr { b256, u64, b256 }, __anon_29, !7365
        v778 = const u64 0
        v779 = get_elem_ptr v777, ptr b256, v778
        v780 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7365
        store v780 to v779, !7365
        v781 = const u64 1
        v782 = get_elem_ptr v777, ptr u64, v781
        v783 = const u64 0
        store v783 to v782, !7365
        v784 = const u64 2
        v785 = get_elem_ptr v777, ptr b256, v784
        v786 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !7365
        store v786 to v785, !7365
        v787 = load v777
        v788 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !7366
        v789 = load v788
        v790 = get_local ptr { { u64, u64 }, { u64, u64 } }, o_account_, !7367
        v791 = load v790
        v792 = call insert_297(v787, v789, v791), !7370
        v793 = const unit ()
        br block30(v793)

        block30(v794: ()):
        br block32(v794)

        block31():
        v795 = const unit ()
        br block32(v795)

        block32(v796: ()):
        v797 = get_local ptr u64, s_trade_volume, !7371
        v798 = load v797
        v799 = get_local ptr u64, s_order_matcher_fee, !7372
        v800 = load v799
        v801 = get_local ptr u64, b_order_matcher_fee, !7373
        v802 = load v801
        v803 = get_local ptr { u64, u64, u64 }, __anon_30, !7374
        v804 = const u64 0
        v805 = get_elem_ptr v803, ptr u64, v804, !7374
        store v798 to v805, !7374
        v806 = const u64 1
        v807 = get_elem_ptr v803, ptr u64, v806, !7374
        store v800 to v807, !7374
        v808 = const u64 2
        v809 = get_elem_ptr v803, ptr u64, v808, !7374
        store v802 to v809, !7374
        v810 = load v803
        ret { u64, u64, u64 } v810
    }

    pub fn matcher_fee_of_amount_429(self !7375: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount !7376: u64) -> u64, !7379 {
        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 7
        v3 = get_elem_ptr v1, ptr u64, v2, !3588
        v4 = load v3
        v5 = call multiply_39(v4, amount), !7382
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !3574
        v10 = load v9
        v11 = call divide_232(v5, v10), !7385
        ret u64 v11
    }

    pub fn protocol_fee_of_amount_430(self !7386: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, counterparty !7387: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount !7388: u64) -> u64, !7391 {
        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, counterparty: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 5
        v3 = get_elem_ptr v1, ptr u64, v2, !2445
        v4 = load v3
        v5 = ptr_to_int counterparty to u64
        v6 = int_to_ptr v5 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v7 = const u64 5
        v8 = get_elem_ptr v6, ptr u64, v7, !2445
        v9 = load v8
        v10 = call lt_426(v4, v9), !7394
        cbr v10, block0(), block1(), !7392

        block0():
        v11 = call protocol_maker_fee_of_amount_431(self, amount), !7397
        br block2(v11)

        block1():
        v12 = call protocol_taker_fee_of_amount_432(self, amount), !7400
        br block2(v12)

        block2(v13: u64):
        ret u64 v13
    }

    pub fn protocol_maker_fee_of_amount_431(self !7401: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount !7402: u64) -> u64, !7405 {
        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 8
        v3 = get_elem_ptr v1, ptr u64, v2, !4250
        v4 = load v3
        v5 = call multiply_39(amount, v4), !7408
        v6 = const u64 10000, !4258
        v7 = call divide_232(v5, v6), !7411
        ret u64 v7
    }

    pub fn protocol_taker_fee_of_amount_432(self !7412: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount !7413: u64) -> u64, !7416 {
        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, amount: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 9
        v3 = get_elem_ptr v1, ptr u64, v2, !4251
        v4 = load v3
        v5 = call multiply_39(amount, v4), !7419
        v6 = const u64 10000, !4258
        v7 = call divide_232(v5, v6), !7422
        ret u64 v7
    }

    pub fn transfer_locked_amount_433(self !7423: ptr { { u64, u64 }, { u64, u64 } }, to !7424: ptr { { u64, u64 }, { u64, u64 } }, amount !7425: u64, asset !7426: { u64 }) -> (), !7429 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_0

        entry(self: ptr { { u64, u64 }, { u64, u64 } }, to: ptr { { u64, u64 }, { u64, u64 } }, amount: u64, asset: { u64 }):
        v0 = const u64 0, !7430
        v1 = call neq_26(amount, v0), !7433
        v2 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_0, !2493
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2493
        v5 = const u64 7, !2493
        store v5 to v4, !2493
        v6 = load v2
        v7 = call require_158(v1, v6), !7436
        v8 = const u64 0
        v9 = get_elem_ptr to, ptr { u64, u64 }, v8, !3423
        v10 = call credit_203(v9, amount, asset), !7439
        v11 = const u64 1
        v12 = get_elem_ptr self, ptr { u64, u64 }, v11, !3427
        v13 = call debit_204(v12, amount, asset), !7442
        v14 = const unit ()
        ret () v14
    }

    fn owner_identity_434() -> { u64, ( { b256 } | { b256 } ) }, !7445 {
        local { u64, ( { b256 } | { b256 } ) } __anon_0
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __matched_value_7
        local { u64, ( { b256 } | { b256 } ) } identity

        entry():
        v0 = call _owner_69(), !7448
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_7, !7449
        store v0 to v1, !7449
        v2 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_7, !7446
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !7446
        v5 = load v4
        v6 = const u64 1, !7446
        v7 = call eq_10(v5, v6), !7452
        cbr v7, block0(), block1(), !7450

        block0():
        v8 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_7, !7446
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, v10
        v12 = load v11
        v13 = get_local ptr { u64, ( { b256 } | { b256 } ) }, identity, !7453
        store v12 to v13, !7453
        v14 = get_local ptr { u64, ( { b256 } | { b256 } ) }, identity, !7454
        v15 = load v14
        br block2(v15)

        block1():
        v16 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_0, !1762
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !1762
        v19 = const u64 0, !1762
        store v19 to v18, !1762
        v20 = call zero_435(), !7457
        v21 = const u64 1
        v22 = const u64 0
        v23 = get_elem_ptr v16, ptr { b256 }, v21, v22, !1762
        store v20 to v23, !1762
        v24 = load v16
        br block2(v24)

        block2(v25: { u64, ( { b256 } | { b256 } ) }):
        ret { u64, ( { b256 } | { b256 } ) } v25
    }

    pub fn zero_435() -> { b256 }, !7460 {
        local { b256 } __anon_0

        entry():
        v0 = call zero_424(), !7463
        v1 = get_local ptr { b256 }, __anon_0, !7464
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        store v0 to v3, !7464
        v4 = load v1
        ret { b256 } v4
    }

    fn increase_user_volume_436(user !7465: { u64, ( { b256 } | { b256 } ) }, volume !7466: u64) -> (), !7469 {
        local { b256, u64, b256 } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64, u64 } __anon_2

        entry(user: { u64, ( { b256 } | { b256 } ) }, volume: u64):
        v0 = call extend_epoch_if_finished_437(), !7472
        v1 = get_local ptr { b256, u64, b256 }, __anon_0, !7473
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2
        v4 = const b256 0xf8d994e7da99e0ae0b7c197c84daa1435aacc84452457414f34ec989b95743d2, !7473
        store v4 to v3, !7473
        v5 = const u64 1
        v6 = get_elem_ptr v1, ptr u64, v5
        v7 = const u64 0
        store v7 to v6, !7473
        v8 = const u64 2
        v9 = get_elem_ptr v1, ptr b256, v8
        v10 = const b256 0xf8d994e7da99e0ae0b7c197c84daa1435aacc84452457414f34ec989b95743d2, !7473
        store v10 to v9, !7473
        v11 = load v1
        v12 = get_local ptr { b256, u64, b256 }, __anon_1, !7474
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr b256, v13
        v15 = const b256 0xf8d994e7da99e0ae0b7c197c84daa1435aacc84452457414f34ec989b95743d2, !7474
        store v15 to v14, !7474
        v16 = const u64 1
        v17 = get_elem_ptr v12, ptr u64, v16
        v18 = const u64 0
        store v18 to v17, !7474
        v19 = const u64 2
        v20 = get_elem_ptr v12, ptr b256, v19
        v21 = const b256 0xf8d994e7da99e0ae0b7c197c84daa1435aacc84452457414f34ec989b95743d2, !7474
        store v21 to v20, !7474
        v22 = load v12
        v23 = call get_374(v22, user), !7477
        v24 = call try_read_368(v23), !7480
        v25 = call new_377(), !7483
        v26 = call unwrap_or_367(v24, v25), !7486
        v27 = get_local ptr { u64, u64 }, __anon_2
        store v26 to v27
        v28 = call read_epoch_378(), !7489
        v29 = call update_448(v27, v28, volume), !7492
        v30 = call insert_445(v11, user, v29), !7495
        v31 = const unit ()
        ret () v31
    }

    fn extend_epoch_if_finished_437() -> (), !7498 {
        local { b256, u64, b256 } __anon_0
        local { u64, u64 } __anon_1
        local u64 epoch
        local u64 epoch_duration
        local u64 timestamp

        entry():
        v0 = call read_epoch_duration_438(), !7501
        v1 = get_local ptr u64, epoch_duration, !7502
        store v0 to v1, !7502
        v2 = call read_epoch_378(), !7505
        v3 = get_local ptr u64, epoch_duration, !7506
        v4 = load v3
        v5 = call add_38(v2, v4), !7509
        v6 = get_local ptr u64, epoch, !7510
        store v5 to v6, !7510
        v7 = call timestamp_439(), !7513
        v8 = get_local ptr u64, timestamp, !7514
        store v7 to v8, !7514
        v9 = get_local ptr u64, epoch, !7515
        v10 = load v9
        v11 = get_local ptr u64, timestamp, !7516
        v12 = load v11
        v13 = call le_210(v10, v12), !7519
        cbr v13, block0(), block1(), !7517

        block0():
        v14 = get_local ptr { b256, u64, b256 }, __anon_0, !7520
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr b256, v15
        v17 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !7520
        store v17 to v16, !7520
        v18 = const u64 1
        v19 = get_elem_ptr v14, ptr u64, v18
        v20 = const u64 0
        store v20 to v19, !7520
        v21 = const u64 2
        v22 = get_elem_ptr v14, ptr b256, v21
        v23 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !7520
        store v23 to v22, !7520
        v24 = load v14
        v25 = get_local ptr u64, timestamp, !7521
        v26 = load v25
        v27 = call write_441(v24, v26), !7524
        v28 = get_local ptr u64, timestamp, !7525
        v29 = load v28
        v30 = get_local ptr u64, epoch_duration, !7526
        v31 = load v30
        v32 = get_local ptr { u64, u64 }, __anon_1, !7527
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33
        store v29 to v34, !7527
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr u64, v35
        store v31 to v36, !7527
        v37 = load v32
        v38 = call log_442(v37), !7530
        v39 = const unit ()
        br block2(v39)

        block1():
        v40 = const unit ()
        br block2(v40)

        block2(v41: ()):
        v42 = const unit ()
        ret () v42
    }

    fn read_epoch_duration_438() -> u64, !7533 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !7534
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x0dbee7545bd5cbe89afb5ff6e66c02ee06d2105f0878cfb45b8a489221b9ea9d, !7534
        store v3 to v2, !7534
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !7534
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x0dbee7545bd5cbe89afb5ff6e66c02ee06d2105f0878cfb45b8a489221b9ea9d, !7534
        store v9 to v8, !7534
        v10 = load v0
        v11 = call try_read_312(v10), !7537
        v12 = const u64 2629800, !7538
        v13 = call unwrap_or_268(v11, v12), !7541
        ret u64 v13
    }

    pub fn timestamp_439() -> u64, !7544 {
        entry():
        v0 = call height_172(), !7547
        v1 = call timestamp_of_block_440(v0), !7550
        ret u64 v1
    }

    pub fn timestamp_of_block_440(block_height !7551: u64) -> u64, !7554 {
        entry(block_height: u64):
        v0 = asm(timestamp, height: block_height) -> u64 timestamp, !7555 {
            time   timestamp height, !7556
        }
        ret u64 v0
    }

    pub fn write_441(self !2156: { b256, u64, b256 }, value !2157: u64) -> (), !7557 {
        entry(self: { b256, u64, b256 }, value: u64):
        v0 = call slot_259(self), !7558
        v1 = call offset_260(self), !7559
        v2 = call write_277(v0, v1, value), !7560
        v3 = const unit ()
        ret () v3
    }

    pub fn log_442(value !1547: { u64, u64 }) -> (), !7561 {
        entry(value: { u64, u64 }):
        v0 = call encode_443(value), !1551
        v1 = const u64 5744192922338635869
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_443(item !1456: { u64, u64 }) -> slice, !7562 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, u64 }):
        v0 = call new_53(), !7563
        v1 = call abi_encode_444(item, v0), !7564
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !7565
        ret slice v5
    }

    pub fn abi_encode_444(self !7566: { u64, u64 }, buffer !7567: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7570 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !7571
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !7573
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7574
        store v5 to v6, !7574
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !7575
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7576
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !7579
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !7580
        store v14 to v15, !7580
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !7581
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn insert_445(self !4828: { b256, u64, b256 }, key !4829: { u64, ( { b256 } | { b256 } ) }, value !4830: { u64, u64 }) -> (), !7582 {
        local { { u64, ( { b256 } | { b256 } ) }, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: { u64, ( { b256 } | { b256 } ) }, value: { u64, u64 }):
        v0 = call field_id_375(self), !7583
        v1 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, b256 }, __anon_0, !4837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !4837
        store key to v3, !4837
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4837
        store v0 to v5, !4837
        v6 = load v1
        v7 = call sha256_189(v6), !7584
        v8 = get_local ptr b256, key_, !4841
        store v7 to v8, !4841
        v9 = get_local ptr b256, key_, !4842
        v10 = load v9
        v11 = const u64 0, !4843
        v12 = call write_446(v10, v11, value), !7585
        v13 = const unit ()
        ret () v13
    }

    pub fn write_446(slot !2170: b256, offset !2171: u64, value !2172: { u64, u64 }) -> (), !7586 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { u64, u64 }):
        v0 = const u64 16
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !7587
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_370(slot, offset), !7588
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !7589
        v30 = call alloc_47(v29), !7590
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !7591
        v47 = call write_447(v46, value), !7592
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_447(self !2212: u64, val !2213: { u64, u64 }) -> (), !7593 {
        entry(self: u64, val: { u64, u64 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 16
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 16
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn update_448(self !7594: ptr { u64, u64 }, protocol_epoch !7595: u64, volume !7596: u64) -> { u64, u64 }, !7599 {
        entry(self: ptr { u64, u64 }, protocol_epoch: u64, volume: u64):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr u64, v0, !6059
        v2 = load v1
        v3 = call lt_86(v2, protocol_epoch), !7602
        cbr v3, block0(), block1(), !7600

        block0():
        v4 = const u64 0
        v5 = get_elem_ptr self, ptr u64, v4, !7603
        store protocol_epoch to v5, !7603
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !7604
        store volume to v7, !7604
        v8 = const unit ()
        br block2(v8)

        block1():
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !6064
        v11 = load v10
        v12 = call add_38(v11, volume), !7607
        v13 = const u64 1
        v14 = get_elem_ptr self, ptr u64, v13, !7605
        store v12 to v14, !7605
        v15 = const unit ()
        br block2(v15)

        block2(v16: ()):
        v17 = load self
        ret { u64, u64 } v17
    }

    fn emit_match_events_449(s_id !7608: b256, s_order !7609: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_limit !7610: { u64 }, trade_size !7611: u64, b_id !7612: b256, b_order !7613: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_limit !7614: { u64 }, matcher !7615: { u64, ( { b256 } | { b256 } ) }, match_price !7616: u64, s_account !7617: { { u64, u64 }, { u64, u64 } }, b_account !7618: { { u64, u64 }, { u64, u64 } }) -> (), !7621 {
        local { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool } __anon_0

        entry(s_id: b256, s_order: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, s_limit: { u64 }, trade_size: u64, b_id: b256, b_order: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, b_limit: { u64 }, matcher: { u64, ( { b256 } | { b256 } ) }, match_price: u64, s_account: { { u64, u64 }, { u64, u64 } }, b_account: { { u64, u64 }, { u64, u64 } }):
        v0 = call height_172(), !7624
        v1 = call tx_id_454(), !7627
        v2 = ptr_to_int s_order to u64
        v3 = int_to_ptr v2 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v4 = const u64 3
        v5 = get_elem_ptr v3, ptr { u64, ( { b256 } | { b256 } ) }, v4, !2464
        v6 = load v5
        v7 = ptr_to_int b_order to u64
        v8 = int_to_ptr v7 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v9 = const u64 3
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !2464
        v11 = load v10
        v12 = call is_maker_425(s_order, b_order), !7630
        v13 = get_local ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }, __anon_0, !7631
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr b256, v14
        store s_id to v15, !7631
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr b256, v16
        store b_id to v17, !7631
        v18 = const u64 2
        v19 = get_elem_ptr v13, ptr { u64 }, v18
        store s_limit to v19, !7631
        v20 = const u64 3
        v21 = get_elem_ptr v13, ptr { u64 }, v20
        store b_limit to v21, !7631
        v22 = const u64 4
        v23 = get_elem_ptr v13, ptr { u64, ( { b256 } | { b256 } ) }, v22
        store matcher to v23, !7631
        v24 = const u64 5
        v25 = get_elem_ptr v13, ptr u64, v24
        store trade_size to v25, !7631
        v26 = const u64 6
        v27 = get_elem_ptr v13, ptr u64, v26
        store match_price to v27, !7631
        v28 = const u64 7
        v29 = get_elem_ptr v13, ptr u64, v28
        store v0 to v29, !7631
        v30 = const u64 8
        v31 = get_elem_ptr v13, ptr b256, v30
        store v1 to v31, !7631
        v32 = const u64 9
        v33 = get_elem_ptr v13, ptr { u64, ( { b256 } | { b256 } ) }, v32
        store v6 to v33, !7631
        v34 = const u64 10
        v35 = get_elem_ptr v13, ptr { u64, ( { b256 } | { b256 } ) }, v34
        store v11 to v35, !7631
        v36 = const u64 11
        v37 = get_elem_ptr v13, ptr { { u64, u64 }, { u64, u64 } }, v36
        store s_account to v37, !7631
        v38 = const u64 12
        v39 = get_elem_ptr v13, ptr { { u64, u64 }, { u64, u64 } }, v38
        store b_account to v39, !7631
        v40 = const u64 13
        v41 = get_elem_ptr v13, ptr bool, v40
        store v12 to v41, !7631
        v42 = load v13
        v43 = call log_450(v42), !7634
        v44 = const unit ()
        ret () v44
    }

    pub fn log_450(value !1547: { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }) -> (), !7635 {
        entry(value: { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }):
        v0 = call encode_451(value), !1551
        v1 = const u64 18305104039093136274
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_451(item !1456: { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }) -> slice, !7636 {
        local { { u64, u64, u64 } } buffer

        entry(item: { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }):
        v0 = call new_53(), !7637
        v1 = call abi_encode_452(item, v0), !7638
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !7639
        ret slice v5
    }

    pub fn abi_encode_452(self !2314: { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }, buffer !2315: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7641 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______
        local { { u64, u64, u64 } } buffer________
        local { { u64, u64, u64 } } buffer_________
        local { { u64, u64, u64 } } buffer__________
        local { { u64, u64, u64 } } buffer___________
        local { { u64, u64, u64 } } buffer____________
        local { { u64, u64, u64 } } buffer_____________
        local { { u64, u64, u64 } } buffer______________

        entry(self: { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !7642
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !7645
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !7646
        store v5 to v6, !7646
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr b256, v9, !7647
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7648
        v13 = load v12
        v14 = call abi_encode_162(v11, v13), !7651
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !7652
        store v14 to v15, !7652
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { u64 }, v18, !7653
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !7654
        v22 = load v21
        v23 = call abi_encode_419(v20, v22), !7657
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !7658
        store v23 to v24, !7658
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr { u64 }, v27, !7659
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !7660
        v31 = load v30
        v32 = call abi_encode_419(v29, v31), !7663
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !7664
        store v32 to v33, !7664
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr { u64, ( { b256 } | { b256 } ) }, v36, !7665
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !7666
        v40 = load v39
        v41 = call abi_encode_303(v38, v40), !7669
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !7670
        store v41 to v42, !7670
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u64, v45, !7671
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !7672
        v49 = load v48
        v50 = call abi_encode_62(v47, v49), !7675
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !7676
        store v50 to v51, !7676
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u64, v54, !7677
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !7678
        v58 = load v57
        v59 = call abi_encode_62(v56, v58), !7681
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !7682
        store v59 to v60, !7682
        v61 = ptr_to_int self to u64
        v62 = int_to_ptr v61 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v63 = const u64 7
        v64 = get_elem_ptr v62, ptr u64, v63, !7683
        v65 = load v64
        v66 = get_local ptr { { u64, u64, u64 } }, buffer_______, !7684
        v67 = load v66
        v68 = call abi_encode_453(v65, v67), !7687
        v69 = get_local ptr { { u64, u64, u64 } }, buffer________, !7688
        store v68 to v69, !7688
        v70 = ptr_to_int self to u64
        v71 = int_to_ptr v70 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v72 = const u64 8
        v73 = get_elem_ptr v71, ptr b256, v72, !7689
        v74 = load v73
        v75 = get_local ptr { { u64, u64, u64 } }, buffer________, !7690
        v76 = load v75
        v77 = call abi_encode_162(v74, v76), !7693
        v78 = get_local ptr { { u64, u64, u64 } }, buffer_________, !7694
        store v77 to v78, !7694
        v79 = ptr_to_int self to u64
        v80 = int_to_ptr v79 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v81 = const u64 9
        v82 = get_elem_ptr v80, ptr { u64, ( { b256 } | { b256 } ) }, v81, !7695
        v83 = load v82
        v84 = get_local ptr { { u64, u64, u64 } }, buffer_________, !7696
        v85 = load v84
        v86 = call abi_encode_303(v83, v85), !7699
        v87 = get_local ptr { { u64, u64, u64 } }, buffer__________, !7700
        store v86 to v87, !7700
        v88 = ptr_to_int self to u64
        v89 = int_to_ptr v88 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v90 = const u64 10
        v91 = get_elem_ptr v89, ptr { u64, ( { b256 } | { b256 } ) }, v90, !7701
        v92 = load v91
        v93 = get_local ptr { { u64, u64, u64 } }, buffer__________, !7702
        v94 = load v93
        v95 = call abi_encode_303(v92, v94), !7705
        v96 = get_local ptr { { u64, u64, u64 } }, buffer___________, !7706
        store v95 to v96, !7706
        v97 = ptr_to_int self to u64
        v98 = int_to_ptr v97 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v99 = const u64 11
        v100 = get_elem_ptr v98, ptr { { u64, u64 }, { u64, u64 } }, v99, !7707
        v101 = load v100
        v102 = get_local ptr { { u64, u64, u64 } }, buffer___________, !7708
        v103 = load v102
        v104 = call abi_encode_306(v101, v103), !7711
        v105 = get_local ptr { { u64, u64, u64 } }, buffer____________, !7712
        store v104 to v105, !7712
        v106 = ptr_to_int self to u64
        v107 = int_to_ptr v106 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v108 = const u64 12
        v109 = get_elem_ptr v107, ptr { { u64, u64 }, { u64, u64 } }, v108, !7713
        v110 = load v109
        v111 = get_local ptr { { u64, u64, u64 } }, buffer____________, !7714
        v112 = load v111
        v113 = call abi_encode_306(v110, v112), !7717
        v114 = get_local ptr { { u64, u64, u64 } }, buffer_____________, !7718
        store v113 to v114, !7718
        v115 = ptr_to_int self to u64
        v116 = int_to_ptr v115 to ptr { b256, b256, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, b256, { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { { u64, u64 }, { u64, u64 } }, bool }
        v117 = const u64 13
        v118 = get_elem_ptr v116, ptr bool, v117, !7719
        v119 = load v118
        v120 = get_local ptr { { u64, u64, u64 } }, buffer_____________, !7720
        v121 = load v120
        v122 = call abi_encode_52(v119, v121), !7723
        v123 = get_local ptr { { u64, u64, u64 } }, buffer______________, !7724
        store v122 to v123, !7724
        v124 = get_local ptr { { u64, u64, u64 } }, buffer______________, !7725
        v125 = load v124
        ret { { u64, u64, u64 } } v125
    }

    pub fn abi_encode_453(self !7726: u64, buffer !7727: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7730 {
        local { u64, u64, u64 } __anon_0
        local u64 __anon_1
        local { u64, u64, u64 } __anon_2
        local { { u64, u64, u64 } } __anon_3

        entry(self: u64, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1476
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = const u64 4
        v18 = add v16, v17
        v19 = cmp gt v18 v13
        cbr v19, block1(), block2()

        block0(v20: ptr u8, v21: u64):
        v22 = get_local ptr u64, __anon_1
        store self to v22
        v23 = ptr_to_int v22 to u64
        v24 = const u64 4
        v25 = add v23, v24
        v26 = int_to_ptr v25 to ptr u8
        v27 = ptr_to_int v20 to u64
        v28 = add v27, v16
        v29 = int_to_ptr v28 to ptr u8
        mem_copy_bytes v29, v26, 4
        v30 = const u64 4
        v31 = add v16, v30
        v32 = ptr_to_int v20 to u64
        v33 = get_local ptr { u64, u64, u64 }, __anon_2
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        store v32 to v35
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr u64, v36
        store v21 to v37
        v38 = const u64 2
        v39 = get_elem_ptr v33, ptr u64, v38
        store v31 to v39
        v40 = asm(buffer: v33) -> { u64, u64, u64 } buffer {
        }
        v41 = get_local ptr { { u64, u64, u64 } }, __anon_3, !7731
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { u64, u64, u64 }, v42
        store v40 to v43, !7731
        v44 = load v41
        ret { { u64, u64, u64 } } v44

        block1():
        v45 = const u64 2
        v46 = mul v13, v45
        v47 = add v46, v17
        v48 = asm(new_cap: v47, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v48, v47)

        block2():
        br block0(v10, v13)
    }

    pub fn tx_id_454() -> b256, !7734 {
        entry():
        v0 = const u64 0, !7735
        v1 = asm(ptr: v0) -> u64 ptr, !7736 {
        }
        v2 = call read_283(v1), !7739
        ret b256 v2
    }

    fn update_order_storage_455(amount !7740: u64, order0 !7741: ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, id0 !7742: b256, order_matcher_fee0 !7743: u64, order1 !7744: ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, id1 !7745: b256, order_matcher_fee1 !7746: u64) -> { { u64 }, b256 }, !7749 {
        local { b256, u64, b256 } __anon_0
        local { u64 } __anon_1
        local { { u64 }, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { u64 } __anon_4
        local { { u64 }, b256 } __anon_5
        local { u64 } __anon_6
        local { { u64 }, b256 } __anon_7

        entry(amount: u64, order0: ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, id0: b256, order_matcher_fee0: u64, order1: ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, id1: b256, order_matcher_fee1: u64):
        v0 = const u64 0
        v1 = get_elem_ptr order0, ptr u64, v0, !3574
        v2 = load v1
        v3 = call eq_10(amount, v2), !7752
        cbr v3, block0(), block1(), !7750

        block0():
        v4 = const u64 3
        v5 = get_elem_ptr order0, ptr { u64, ( { b256 } | { b256 } ) }, v4, !2464
        v6 = load v5
        v7 = call remove_order_250(v6, id0), !7755
        v8 = const unit ()
        br block2(v8)

        block1():
        v9 = const unit ()
        br block2(v9)

        block2(v10: ()):
        v11 = const u64 0
        v12 = get_elem_ptr order1, ptr u64, v11, !3574
        v13 = load v12
        v14 = call eq_10(amount, v13), !7758
        cbr v14, block3(), block4(), !7756

        block3():
        v15 = const u64 3
        v16 = get_elem_ptr order1, ptr { u64, ( { b256 } | { b256 } ) }, v15, !2464
        v17 = load v16
        v18 = call remove_order_250(v17, id1), !7761
        v19 = const unit ()
        br block5(v19)

        block4():
        v20 = const unit ()
        br block5(v20)

        block5(v21: ()):
        v22 = const u64 0
        v23 = get_elem_ptr order0, ptr u64, v22, !3574
        v24 = load v23
        v25 = call neq_26(amount, v24), !7764
        cbr v25, block6(), block7(), !7762

        block6():
        v26 = const u64 7
        v27 = get_elem_ptr order0, ptr u64, v26, !3588
        v28 = load v27
        v29 = call subtract_211(v28, order_matcher_fee0), !7767
        v30 = const u64 7
        v31 = get_elem_ptr order0, ptr u64, v30, !7765
        store v29 to v31, !7765
        v32 = const u64 0
        v33 = get_elem_ptr order0, ptr u64, v32, !3574
        v34 = load v33
        v35 = call subtract_211(v34, amount), !7770
        v36 = const u64 0
        v37 = get_elem_ptr order0, ptr u64, v36, !7768
        store v35 to v37, !7768
        v38 = get_local ptr { b256, u64, b256 }, __anon_0, !7771
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr b256, v39
        v41 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !7771
        store v41 to v40, !7771
        v42 = const u64 1
        v43 = get_elem_ptr v38, ptr u64, v42
        v44 = const u64 0
        store v44 to v43, !7771
        v45 = const u64 2
        v46 = get_elem_ptr v38, ptr b256, v45
        v47 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !7771
        store v47 to v46, !7771
        v48 = load v38
        v49 = load order0
        v50 = call insert_411(v48, id0, v49), !7774
        v51 = get_local ptr { u64 }, __anon_1, !5706
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !5706
        v54 = const u64 1, !5706
        store v54 to v53, !5706
        v55 = load v51
        v56 = get_local ptr { { u64 }, b256 }, __anon_2, !7775
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr { u64 }, v57, !7775
        store v55 to v58, !7775
        v59 = const u64 1
        v60 = get_elem_ptr v56, ptr b256, v59, !7775
        store id0 to v60, !7775
        v61 = load v56
        ret { { u64 }, b256 } v61, !7776

        block7():
        v62 = const u64 0
        v63 = get_elem_ptr order1, ptr u64, v62, !3574
        v64 = load v63
        v65 = call neq_26(amount, v64), !7779
        cbr v65, block8(), block9(), !7777

        block8():
        v66 = const u64 7
        v67 = get_elem_ptr order1, ptr u64, v66, !3588
        v68 = load v67
        v69 = call subtract_211(v68, order_matcher_fee1), !7782
        v70 = const u64 7
        v71 = get_elem_ptr order1, ptr u64, v70, !7780
        store v69 to v71, !7780
        v72 = const u64 0
        v73 = get_elem_ptr order1, ptr u64, v72, !3574
        v74 = load v73
        v75 = call subtract_211(v74, amount), !7785
        v76 = const u64 0
        v77 = get_elem_ptr order1, ptr u64, v76, !7783
        store v75 to v77, !7783
        v78 = get_local ptr { b256, u64, b256 }, __anon_3, !7786
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr b256, v79
        v81 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !7786
        store v81 to v80, !7786
        v82 = const u64 1
        v83 = get_elem_ptr v78, ptr u64, v82
        v84 = const u64 0
        store v84 to v83, !7786
        v85 = const u64 2
        v86 = get_elem_ptr v78, ptr b256, v85
        v87 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !7786
        store v87 to v86, !7786
        v88 = load v78
        v89 = load order1
        v90 = call insert_411(v88, id1, v89), !7789
        v91 = get_local ptr { u64 }, __anon_4, !5706
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !5706
        v94 = const u64 1, !5706
        store v94 to v93, !5706
        v95 = load v91
        v96 = get_local ptr { { u64 }, b256 }, __anon_5, !7790
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { u64 }, v97, !7790
        store v95 to v98, !7790
        v99 = const u64 1
        v100 = get_elem_ptr v96, ptr b256, v99, !7790
        store id1 to v100, !7790
        v101 = load v96
        ret { { u64 }, b256 } v101, !7791

        block9():
        v102 = const unit ()
        br block10(v102)

        block10(v103: ()):
        br block11(v103)

        block11(v104: ()):
        v105 = get_local ptr { u64 }, __anon_6, !5706
        v106 = const u64 0
        v107 = get_elem_ptr v105, ptr u64, v106, !5706
        v108 = const u64 2, !5706
        store v108 to v107, !5706
        v109 = load v105
        v110 = call zero_424(), !7794
        v111 = get_local ptr { { u64 }, b256 }, __anon_7, !7795
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr { u64 }, v112, !7795
        store v109 to v113, !7795
        v114 = const u64 1
        v115 = get_elem_ptr v111, ptr b256, v114, !7795
        store v110 to v115, !7795
        v116 = load v111
        ret { { u64 }, b256 } v116
    }

    pub fn eq_456(self !7796: { u64 }, other !7797: { u64 }) -> bool, !7800 {
        local { { u64 }, { u64 } } __anon_0
        local { { u64 }, { u64 } } __matched_value_1

        entry(self: { u64 }, other: { u64 }):
        v0 = get_local ptr { { u64 }, { u64 } }, __anon_0, !7801
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64 }, v1, !7801
        store self to v2, !7801
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64 }, v3, !7801
        store other to v4, !7801
        v5 = load v0
        v6 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7802
        store v5 to v6, !7802
        v7 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7801
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64 }, v8, !7803
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !7803
        v12 = load v11
        v13 = const u64 0, !7803
        v14 = call eq_10(v12, v13), !7806
        cbr v14, block0(), block1(v14), !7804

        block0():
        v15 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7801
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !7803
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !7803
        v20 = load v19
        v21 = const u64 0, !7803
        v22 = call eq_10(v20, v21), !7807
        br block1(v22), !7804

        block1(v23: bool):
        cbr v23, block2(), block3(), !7804

        block2():
        v24 = const bool true, !7808
        br block14(v24)

        block3():
        v25 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7801
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { u64 }, v26, !7809
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !7809
        v30 = load v29
        v31 = const u64 1, !7809
        v32 = call eq_10(v30, v31), !7812
        cbr v32, block4(), block5(v32), !7810

        block4():
        v33 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7801
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr { u64 }, v34, !7809
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !7809
        v38 = load v37
        v39 = const u64 1, !7809
        v40 = call eq_10(v38, v39), !7813
        br block5(v40), !7810

        block5(v41: bool):
        cbr v41, block6(), block7(), !7810

        block6():
        v42 = const bool true, !7814
        br block13(v42)

        block7():
        v43 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7801
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr { u64 }, v44, !7815
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !7815
        v48 = load v47
        v49 = const u64 2, !7815
        v50 = call eq_10(v48, v49), !7818
        cbr v50, block8(), block9(v50), !7816

        block8():
        v51 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7801
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr { u64 }, v52, !7815
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54, !7815
        v56 = load v55
        v57 = const u64 2, !7815
        v58 = call eq_10(v56, v57), !7819
        br block9(v58), !7816

        block9(v59: bool):
        cbr v59, block10(), block11(), !7816

        block10():
        v60 = const bool true, !7820
        br block12(v60)

        block11():
        v61 = const bool false, !7821
        br block12(v61)

        block12(v62: bool):
        br block13(v62)

        block13(v63: bool):
        br block14(v63)

        block14(v64: bool):
        ret bool v64
    }

    pub fn unwrap_457(self !2059: { u64, ( () | { u64 } ) }) -> { u64 }, !7822 {
        local { u64, ( () | { u64 } ) } __matched_value_4
        local { u64 } inner_value

        entry(self: { u64, ( () | { u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !7823
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64 }, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr { u64 }, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !7824
        br block2(v16)

        block2(v17: { u64 }):
        ret { u64 } v17
    }

    fn non_limit_order_type_458(order !7825: b256) -> { u64, ( () | { u64 } ) }, !7828 {
        local { u64, ( () | { u64 } ) } __anon_0
        local { u64 } __anon_1
        local { u64 } __anon_2
        local { u64, ( () | { u64 } ) } __anon_3
        local bool __matched_value_5
        local { u64, ( () | bool ) } __matched_value_6
        local bool is_market

        entry(order: b256):
        v0 = call market_order_166(order), !7831
        v1 = get_local ptr { u64, ( () | bool ) }, __matched_value_6, !7832
        store v0 to v1, !7832
        v2 = get_local ptr { u64, ( () | bool ) }, __matched_value_6, !7829
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !7829
        v5 = load v4
        v6 = const u64 1, !7829
        v7 = call eq_10(v5, v6), !7835
        cbr v7, block0(), block4(), !7833

        block0():
        v8 = get_local ptr { u64, ( () | bool ) }, __matched_value_6, !7829
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr bool, v9, v10
        v12 = load v11
        v13 = get_local ptr bool, is_market, !7836
        store v12 to v13, !7836
        v14 = get_local ptr { u64, ( () | { u64 } ) }, __anon_0, !1268
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1268
        v17 = const u64 1, !1268
        store v17 to v16, !1268
        v18 = get_local ptr bool, is_market, !7837
        v19 = load v18
        v20 = get_local ptr bool, __matched_value_5, !7838
        store v19 to v20, !7838
        v21 = get_local ptr bool, __matched_value_5, !7837
        v22 = load v21
        v23 = const bool true, !7839
        v24 = call eq_41(v22, v23), !7842
        cbr v24, block1(), block2(), !7840

        block1():
        v25 = get_local ptr { u64 }, __anon_1, !5508
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr u64, v26, !5508
        v28 = const u64 3, !5508
        store v28 to v27, !5508
        v29 = load v25
        br block3(v29)

        block2():
        v30 = get_local ptr { u64 }, __anon_2, !5508
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31, !5508
        v33 = const u64 0, !5508
        store v33 to v32, !5508
        v34 = load v30
        br block3(v34)

        block3(v35: { u64 }):
        v36 = const u64 1
        v37 = const u64 1
        v38 = get_elem_ptr v14, ptr { u64 }, v36, v37, !1268
        store v35 to v38, !1268
        v39 = load v14
        br block5(v39)

        block4():
        v40 = get_local ptr { u64, ( () | { u64 } ) }, __anon_3, !1268
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !1268
        v43 = const u64 0, !1268
        store v43 to v42, !1268
        v44 = load v40
        br block5(v44)

        block5(v45: { u64, ( () | { u64 } ) }):
        ret { u64, ( () | { u64 } ) } v45
    }

    pub fn require_459(condition !1530: bool, value !1531: { u64, ( { b256, b256 } | () | () | () ) }) -> (), !7843 {
        entry(condition: bool, value: { u64, ( { b256, b256 } | () | () | () ) }):
        v0 = call not_27(condition), !7844
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_460(value), !7845
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !7846
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_460(value !1547: { u64, ( { b256, b256 } | () | () | () ) }) -> (), !7847 {
        entry(value: { u64, ( { b256, b256 } | () | () | () ) }):
        v0 = call encode_461(value), !1551
        v1 = const u64 15838754841496526215
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_461(item !1456: { u64, ( { b256, b256 } | () | () | () ) }) -> slice, !7848 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( { b256, b256 } | () | () | () ) }):
        v0 = call new_53(), !7849
        v1 = call abi_encode_462(item, v0), !7850
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !7851
        ret slice v5
    }

    pub fn abi_encode_462(self !2120: { u64, ( { b256, b256 } | () | () | () ) }, buffer !2121: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7853 {
        local { u64, ( { b256, b256 } | () | () | () ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { b256, b256 } value

        entry(self: { u64, ( { b256, b256 } | () | () | () ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __matched_value_1, !7854
        store self to v0, !7854
        v1 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __matched_value_1, !2126
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2126
        v4 = load v3
        v5 = const u64 0, !2126
        v6 = call eq_10(v4, v5), !7857
        cbr v6, block0(), block1(), !7855

        block0():
        v7 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __matched_value_1, !2126
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256, b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256, b256 }, value, !7858
        store v11 to v12, !7858
        v13 = const u64 0, !7859
        v14 = call abi_encode_62(v13, buffer), !7862
        v15 = get_local ptr { { u64, u64, u64 } }, buffer_, !7863
        store v14 to v15, !7863
        v16 = get_local ptr { b256, b256 }, value, !7864
        v17 = load v16
        v18 = get_local ptr { { u64, u64, u64 } }, buffer_, !7865
        v19 = load v18
        v20 = call abi_encode_463(v17, v19), !7868
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !7869
        store v20 to v21, !7869
        v22 = get_local ptr { { u64, u64, u64 } }, buffer__, !7870
        v23 = load v22
        br block11(v23)

        block1():
        v24 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __matched_value_1, !2126
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !2126
        v27 = load v26
        v28 = const u64 1, !2126
        v29 = call eq_10(v27, v28), !7873
        cbr v29, block2(), block3(), !7871

        block2():
        v30 = const u64 1, !7874
        v31 = call abi_encode_62(v30, buffer), !7877
        br block10(v31)

        block3():
        v32 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __matched_value_1, !2126
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !2126
        v35 = load v34
        v36 = const u64 2, !2126
        v37 = call eq_10(v35, v36), !7880
        cbr v37, block4(), block5(), !7878

        block4():
        v38 = const u64 2, !7881
        v39 = call abi_encode_62(v38, buffer), !7884
        br block9(v39)

        block5():
        v40 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __matched_value_1, !2126
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !2126
        v43 = load v42
        v44 = const u64 3, !2126
        v45 = call eq_10(v43, v44), !7887
        cbr v45, block6(), block7(), !7885

        block6():
        v46 = const u64 3, !7888
        v47 = call abi_encode_62(v46, buffer), !7891
        br block8(v47)

        block7():
        v48 = const u64 14757395258967588866, !7854
        revert v48, !7854

        block8(v49: { { u64, u64, u64 } }):
        br block9(v49)

        block9(v50: { { u64, u64, u64 } }):
        br block10(v50)

        block10(v51: { { u64, u64, u64 } }):
        br block11(v51)

        block11(v52: { { u64, u64, u64 } }):
        v53 = get_local ptr { { u64, u64, u64 } }, buffer___, !7892
        store v52 to v53, !7892
        v54 = get_local ptr { { u64, u64, u64 } }, buffer___, !7893
        v55 = load v54
        ret { { u64, u64, u64 } } v55
    }

    pub fn abi_encode_463(self !3015: { b256, b256 }, buffer !3016: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7894 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { b256, b256 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3020
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !7895
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !3024
        store v5 to v6, !3024
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { b256, b256 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr b256, v9, !3025
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !3026
        v13 = load v12
        v14 = call abi_encode_162(v11, v13), !7896
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !3030
        store v14 to v15, !3030
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !3031
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn eq_464(self !7897: { u64 }, other !7898: { u64 }) -> bool, !7901 {
        local { { u64 }, { u64 } } __anon_0
        local { { u64 }, { u64 } } __matched_value_1

        entry(self: { u64 }, other: { u64 }):
        v0 = get_local ptr { { u64 }, { u64 } }, __anon_0, !7902
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { u64 }, v1, !7902
        store self to v2, !7902
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr { u64 }, v3, !7902
        store other to v4, !7902
        v5 = load v0
        v6 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7903
        store v5 to v6, !7903
        v7 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64 }, v8, !7904
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !7904
        v12 = load v11
        v13 = const u64 0, !7904
        v14 = call eq_10(v12, v13), !7907
        cbr v14, block0(), block1(v14), !7905

        block0():
        v15 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { u64 }, v16, !7904
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !7904
        v20 = load v19
        v21 = const u64 0, !7904
        v22 = call eq_10(v20, v21), !7908
        br block1(v22), !7905

        block1(v23: bool):
        cbr v23, block2(), block3(), !7905

        block2():
        v24 = const bool true, !7909
        br block19(v24)

        block3():
        v25 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { u64 }, v26, !7910
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !7910
        v30 = load v29
        v31 = const u64 1, !7910
        v32 = call eq_10(v30, v31), !7913
        cbr v32, block4(), block5(v32), !7911

        block4():
        v33 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v34 = const u64 1
        v35 = get_elem_ptr v33, ptr { u64 }, v34, !7910
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr u64, v36, !7910
        v38 = load v37
        v39 = const u64 1, !7910
        v40 = call eq_10(v38, v39), !7914
        br block5(v40), !7911

        block5(v41: bool):
        cbr v41, block6(), block7(), !7911

        block6():
        v42 = const bool true, !7915
        br block18(v42)

        block7():
        v43 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr { u64 }, v44, !7916
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !7916
        v48 = load v47
        v49 = const u64 2, !7916
        v50 = call eq_10(v48, v49), !7919
        cbr v50, block8(), block9(v50), !7917

        block8():
        v51 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr { u64 }, v52, !7916
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54, !7916
        v56 = load v55
        v57 = const u64 2, !7916
        v58 = call eq_10(v56, v57), !7920
        br block9(v58), !7917

        block9(v59: bool):
        cbr v59, block10(), block11(), !7917

        block10():
        v60 = const bool true, !7921
        br block17(v60)

        block11():
        v61 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { u64 }, v62, !7922
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !7922
        v66 = load v65
        v67 = const u64 3, !7922
        v68 = call eq_10(v66, v67), !7925
        cbr v68, block12(), block13(v68), !7923

        block12():
        v69 = get_local ptr { { u64 }, { u64 } }, __matched_value_1, !7902
        v70 = const u64 1
        v71 = get_elem_ptr v69, ptr { u64 }, v70, !7922
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !7922
        v74 = load v73
        v75 = const u64 3, !7922
        v76 = call eq_10(v74, v75), !7926
        br block13(v76), !7923

        block13(v77: bool):
        cbr v77, block14(), block15(), !7923

        block14():
        v78 = const bool true, !7927
        br block16(v78)

        block15():
        v79 = const bool false, !7928
        br block16(v79)

        block16(v80: bool):
        br block17(v80)

        block17(v81: bool):
        br block18(v81)

        block18(v82: bool):
        br block19(v82)

        block19(v83: bool):
        ret bool v83
    }

    pub fn encode_465(item !1456: b256) -> slice, !7929 {
        local { { u64, u64, u64 } } buffer

        entry(item: b256):
        v0 = call new_53(), !7930
        v1 = call abi_encode_162(item, v0), !7931
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !7932
        ret slice v5
    }

    pub fn initialize_ownership_466(new_owner !7933: { u64, ( { b256 } | { b256 } ) }) -> (), !7936 {
        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call initialize_ownership_467(new_owner), !7939
        v1 = const unit ()
        ret () v1
    }

    pub fn initialize_ownership_467(new_owner !7940: { u64, ( { b256 } | { b256 } ) }) -> (), !7943 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { u64 } __anon_1
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_2
        local { { u64, ( { b256 } | { b256 } ) } } __anon_3
        local { b256, u64, b256 } owner_key

        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call _owner_69(), !7946
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !1515
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !1515
        v4 = const u64 0, !1515
        store v4 to v3, !1515
        v5 = load v1
        v6 = call eq_64(v0, v5), !7949
        v7 = get_local ptr { u64 }, __anon_1, !7951
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !7951
        v10 = const u64 0, !7951
        store v10 to v9, !7951
        v11 = load v7
        v12 = call require_468(v6, v11), !7954
        v13 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !1676
        v14 = const u64 0, !7955
        v15 = call new_70(v13, v14, v13), !7958
        v16 = get_local ptr { b256, u64, b256 }, owner_key, !7959
        store v15 to v16, !7959
        v17 = get_local ptr { b256, u64, b256 }, owner_key, !7960
        v18 = load v17
        v19 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_2, !1515
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !1515
        v22 = const u64 1, !1515
        store v22 to v21, !1515
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v19, ptr { u64, ( { b256 } | { b256 } ) }, v23, v24, !1515
        store new_owner to v25, !1515
        v26 = load v19
        v27 = call write_472(v18, v26), !7963
        v28 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_3, !7964
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr { u64, ( { b256 } | { b256 } ) }, v29
        store new_owner to v30, !7964
        v31 = load v28
        v32 = call log_475(v31), !7967
        v33 = const unit ()
        ret () v33
    }

    pub fn require_468(condition !1530: bool, value !1531: { u64 }) -> (), !7968 {
        entry(condition: bool, value: { u64 }):
        v0 = call not_27(condition), !7969
        cbr v0, block0(), block1(), !1535

        block0():
        v1 = call log_469(value), !7970
        v2 = const u64 18446744073709486080, !1542
        v3 = call revert_63(v2), !7971
        br block2(v3)

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = const unit ()
        ret () v6
    }

    pub fn log_469(value !1547: { u64 }) -> (), !7972 {
        entry(value: { u64 }):
        v0 = call encode_470(value), !1551
        v1 = const u64 2161305517876418151
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_470(item !1456: { u64 }) -> slice, !7973 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !7974
        v1 = call abi_encode_471(item, v0), !7975
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !7976
        ret slice v5
    }

    pub fn abi_encode_471(self !7977: { u64 }, buffer !7978: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !7981 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !7982
        store self to v0, !7982
        v1 = get_local ptr { u64 }, __matched_value_1, !7983
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !7983
        v4 = load v3
        v5 = const u64 0, !7983
        v6 = call eq_10(v4, v5), !7986
        cbr v6, block0(), block1(), !7984

        block0():
        v7 = const u64 0, !7987
        v8 = call abi_encode_62(v7, buffer), !7990
        br block2(v8)

        block1():
        v9 = const u64 14757395258967588866, !7982
        revert v9, !7982

        block2(v10: { { u64, u64, u64 } }):
        v11 = get_local ptr { { u64, u64, u64 } }, buffer_, !7991
        store v10 to v11, !7991
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7992
        v13 = load v12
        ret { { u64, u64, u64 } } v13
    }

    pub fn write_472(self !2156: { b256, u64, b256 }, value !2157: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> (), !7993 {
        entry(self: { b256, u64, b256 }, value: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = call slot_76(self), !7994
        v1 = call offset_77(self), !7995
        v2 = call write_473(v0, v1, value), !7996
        v3 = const unit ()
        ret () v3
    }

    pub fn write_473(slot !2170: b256, offset !2171: u64, value !2172: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> (), !7997 {
        local bool _
        local bool __
        local { b256, u64, u64 } __tuple_1
        local { b256, u64, u64 } __tuple_1_
        local b256 key_for_storage
        local b256 key_for_storage_
        local u64 number_of_slots
        local b256 offset_slot
        local u64 padded_value
        local u64 place_in_slot

        entry(slot: b256, offset: u64, value: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = const u64 48
        v1 = const u64 0, !2176
        v2 = call eq_10(v0, v1), !7998
        cbr v2, block0(), block1(), !2177

        block0():
        v3 = const unit (), !2180
        ret () v3, !2180

        block1():
        v4 = const unit ()
        br block2(v4)

        block2(v5: ()):
        v6 = call slot_calculator_74(slot, offset), !7999
        v7 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        store v6 to v7, !2184
        v8 = get_local ptr { b256, u64, u64 }, __tuple_1, !2184
        v9 = load v8
        v10 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        store v9 to v10, !2184
        v11 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12, !2184
        v14 = load v13
        v15 = get_local ptr b256, offset_slot, !2184
        store v14 to v15, !2184
        v16 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !2184
        v19 = load v18
        v20 = get_local ptr u64, number_of_slots, !2184
        store v19 to v20, !2184
        v21 = get_local ptr { b256, u64, u64 }, __tuple_1_, !2184
        v22 = const u64 2
        v23 = get_elem_ptr v21, ptr u64, v22, !2184
        v24 = load v23
        v25 = get_local ptr u64, place_in_slot, !2184
        store v24 to v25, !2184
        v26 = get_local ptr u64, number_of_slots, !2185
        v27 = load v26
        v28 = const u64 32, !2186
        v29 = call multiply_39(v27, v28), !8000
        v30 = call alloc_47(v29), !8001
        v31 = get_local ptr u64, padded_value, !2193
        store v30 to v31, !2193
        v32 = get_local ptr b256, offset_slot, !2194
        v33 = load v32
        v34 = get_local ptr u64, padded_value, !2195
        v35 = load v34
        v36 = get_local ptr u64, number_of_slots, !2196
        v37 = load v36
        v38 = get_local ptr b256, key_for_storage, !2197
        store v33 to v38, !2197
        v39 = int_to_ptr v35 to ptr b256, !2197
        v40 = state_load_quad_word v39, key v38, v37, !2197
        v41 = get_local ptr bool, _, !2198
        store v40 to v41, !2198
        v42 = get_local ptr u64, padded_value, !2199
        v43 = load v42
        v44 = get_local ptr u64, place_in_slot, !2200
        v45 = load v44
        v46 = call add_16(v43, v45), !8002
        v47 = call write_474(v46, value), !8003
        v48 = get_local ptr b256, offset_slot, !2207
        v49 = load v48
        v50 = get_local ptr u64, padded_value, !2208
        v51 = load v50
        v52 = get_local ptr u64, number_of_slots, !2209
        v53 = load v52
        v54 = get_local ptr b256, key_for_storage_, !2210
        store v49 to v54, !2210
        v55 = int_to_ptr v51 to ptr b256, !2210
        v56 = state_store_quad_word v55, key v54, v53, !2210
        v57 = get_local ptr bool, __, !2211
        store v56 to v57, !2211
        v58 = const unit ()
        ret () v58
    }

    pub fn write_474(self !2212: u64, val !2213: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> (), !8004 {
        entry(self: u64, val: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = const bool true
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 48
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 48
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn log_475(value !1547: { { u64, ( { b256 } | { b256 } ) } }) -> (), !8005 {
        entry(value: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call encode_476(value), !1551
        v1 = const u64 16280289466020123285
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_476(item !1456: { { u64, ( { b256 } | { b256 } ) } }) -> slice, !8006 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_53(), !8007
        v1 = call abi_encode_477(item, v0), !8008
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !8009
        ret slice v5
    }

    pub fn abi_encode_477(self !3500: { { u64, ( { b256 } | { b256 } ) } }, buffer !3501: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8011 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !8013
        v4 = load v3
        v5 = call abi_encode_303(v4, buffer), !8016
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8017
        store v5 to v6, !8017
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !8018
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn decode_478(self !43: ptr { u64 }) -> { { { u64, u64 }, u64 } }, !8019 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_479(self), !8020
        ret { { { u64, u64 }, u64 } } v0
    }

    pub fn abi_decode_479(buffer !2272: ptr { u64 }) -> { { { u64, u64 }, u64 } }, !8021 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_351(buffer), !8022
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !2279
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !2279
        store v0 to v3, !2279
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn match_order_many_480(orders !8023: { { u64, u64 }, u64 }) -> (), !8026 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { u64, ( { b256, b256 } | () | () | () ) } __anon_3
        local { u64 } __matched_value_1
        local { { u64 }, b256 } __tuple_6
        local { { u64 }, b256 } __tuple_6_
        local mut u64 full_matched
        local b256 id0
        local b256 id1
        local mut u64 idx0
        local mut u64 idx1
        local u64 len
        local { u64 } match_result
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order0
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order1
        local b256 partial_order_id

        entry(orders: { { u64, u64 }, u64 }):
        v0 = call require_not_paused_97(), !8029
        v1 = call reentrancy_guard_112(), !8032
        v2 = call len_363(orders), !8035
        v3 = const u64 2, !8036
        v4 = call ge_88(v2, v3), !8039
        v5 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !5069
        v8 = const u64 2, !5069
        store v8 to v7, !5069
        v9 = load v5
        v10 = call require_317(v4, v9), !8042
        v11 = call len_363(orders), !8045
        v12 = get_local ptr u64, len, !8046
        store v11 to v12, !8046
        v13 = get_local ptr u64, idx0, !8047
        v14 = const u64 0, !8048
        store v14 to v13, !8047
        v15 = get_local ptr u64, idx1, !8049
        v16 = const u64 1, !8050
        store v16 to v15, !8049
        v17 = get_local ptr u64, full_matched, !8051
        v18 = const u64 0, !8052
        store v18 to v17, !8051
        br while()

        while():
        v19 = get_local ptr u64, idx0, !8053
        v20 = load v19
        v21 = get_local ptr u64, idx1, !8054
        v22 = load v21
        v23 = get_local ptr u64, len, !8055
        v24 = load v23
        v25 = call lts_481(v20, v22, v24), !8058
        cbr v25, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v26 = get_local ptr u64, idx0, !8059
        v27 = load v26
        v28 = get_local ptr u64, idx1, !8060
        v29 = load v28
        v30 = call eq_10(v27, v29), !8063
        cbr v30, block0(), block1(), !8061

        block0():
        v31 = get_local ptr u64, idx1, !8064
        v32 = load v31
        v33 = const u64 1, !8065
        v34 = call add_38(v32, v33), !8068
        v35 = get_local ptr u64, idx1, !8066
        store v34 to v35, !8066
        br while()

        block1():
        v36 = const unit ()
        br block2(v36)

        block2(v37: ()):
        v38 = get_local ptr u64, idx0, !8069
        v39 = load v38
        v40 = call get_421(orders, v39), !8072
        v41 = call unwrap_275(v40), !8075
        v42 = get_local ptr b256, id0, !8076
        store v41 to v42, !8076
        v43 = get_local ptr { b256, u64, b256 }, __anon_1, !8077
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr b256, v44
        v46 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8077
        store v46 to v45, !8077
        v47 = const u64 1
        v48 = get_elem_ptr v43, ptr u64, v47
        v49 = const u64 0
        store v49 to v48, !8077
        v50 = const u64 2
        v51 = get_elem_ptr v43, ptr b256, v50
        v52 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8077
        store v52 to v51, !8077
        v53 = load v43
        v54 = get_local ptr b256, id0, !8078
        v55 = load v54
        v56 = call get_131(v53, v55), !8081
        v57 = call try_read_125(v56), !8084
        v58 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order0, !8085
        store v57 to v58, !8085
        v59 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order0, !8086
        v60 = load v59
        v61 = call is_none_409(v60), !8089
        cbr v61, block3(), block4(), !8087

        block3():
        v62 = get_local ptr u64, idx0, !8090
        v63 = load v62
        v64 = const u64 1, !8091
        v65 = call add_38(v63, v64), !8094
        v66 = get_local ptr u64, idx0, !8092
        store v65 to v66, !8092
        br while()

        block4():
        v67 = const unit ()
        br block5(v67)

        block5(v68: ()):
        v69 = get_local ptr u64, idx1, !8095
        v70 = load v69
        v71 = call get_421(orders, v70), !8098
        v72 = call unwrap_275(v71), !8101
        v73 = get_local ptr b256, id1, !8102
        store v72 to v73, !8102
        v74 = get_local ptr { b256, u64, b256 }, __anon_2, !8103
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr b256, v75
        v77 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8103
        store v77 to v76, !8103
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr u64, v78
        v80 = const u64 0
        store v80 to v79, !8103
        v81 = const u64 2
        v82 = get_elem_ptr v74, ptr b256, v81
        v83 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8103
        store v83 to v82, !8103
        v84 = load v74
        v85 = get_local ptr b256, id1, !8104
        v86 = load v85
        v87 = call get_131(v84, v86), !8107
        v88 = call try_read_125(v87), !8110
        v89 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !8111
        store v88 to v89, !8111
        v90 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !8112
        v91 = load v90
        v92 = call is_none_409(v91), !8115
        cbr v92, block6(), block7(), !8113

        block6():
        v93 = get_local ptr u64, idx1, !8116
        v94 = load v93
        v95 = const u64 1, !8117
        v96 = call add_38(v94, v95), !8120
        v97 = get_local ptr u64, idx1, !8118
        store v96 to v97, !8118
        br while()

        block7():
        v98 = const unit ()
        br block8(v98)

        block8(v99: ()):
        v100 = get_local ptr b256, id0, !8121
        v101 = load v100
        v102 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order0, !8122
        v103 = load v102
        v104 = call unwrap_165(v103), !8125
        v105 = get_local ptr b256, id0, !8126
        v106 = load v105
        v107 = call non_limit_order_type_458(v106), !8129
        v108 = call unwrap_457(v107), !8132
        v109 = get_local ptr b256, id1, !8133
        v110 = load v109
        v111 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !8134
        v112 = load v111
        v113 = call unwrap_165(v112), !8137
        v114 = get_local ptr b256, id1, !8138
        v115 = load v114
        v116 = call non_limit_order_type_458(v115), !8141
        v117 = call unwrap_457(v116), !8144
        v118 = call match_order_internal_423(v101, v104, v108, v110, v113, v117), !8147
        v119 = get_local ptr { { u64 }, b256 }, __tuple_6, !8148
        store v118 to v119, !8148
        v120 = get_local ptr { { u64 }, b256 }, __tuple_6, !8148
        v121 = load v120
        v122 = get_local ptr { { u64 }, b256 }, __tuple_6_, !8148
        store v121 to v122, !8148
        v123 = get_local ptr { { u64 }, b256 }, __tuple_6_, !8148
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr { u64 }, v124, !8148
        v126 = load v125
        v127 = get_local ptr { u64 }, match_result, !8148
        store v126 to v127, !8148
        v128 = get_local ptr { { u64 }, b256 }, __tuple_6_, !8148
        v129 = const u64 1
        v130 = get_elem_ptr v128, ptr b256, v129, !8148
        v131 = load v130
        v132 = get_local ptr b256, partial_order_id, !8148
        store v131 to v132, !8148
        v133 = get_local ptr { u64 }, match_result, !8149
        v134 = load v133
        v135 = get_local ptr { u64 }, __matched_value_1, !8150
        store v134 to v135, !8150
        v136 = get_local ptr { u64 }, __matched_value_1, !8149
        v137 = const u64 0
        v138 = get_elem_ptr v136, ptr u64, v137, !8149
        v139 = load v138
        v140 = const u64 0, !8149
        v141 = call eq_10(v139, v140), !8153
        cbr v141, block9(), block13(), !8151

        block9():
        v142 = get_local ptr u64, idx0, !8154
        v143 = load v142
        v144 = get_local ptr u64, idx1, !8155
        v145 = load v144
        v146 = call lt_86(v143, v145), !8158
        cbr v146, block10(), block11(), !8156

        block10():
        v147 = get_local ptr u64, idx1, !8159
        v148 = load v147
        v149 = const u64 1, !8160
        v150 = call add_38(v148, v149), !8163
        v151 = get_local ptr u64, idx1, !8161
        store v150 to v151, !8161
        v152 = const unit ()
        br block12(v152)

        block11():
        v153 = get_local ptr u64, idx0, !8164
        v154 = load v153
        v155 = const u64 1, !8165
        v156 = call add_38(v154, v155), !8168
        v157 = get_local ptr u64, idx0, !8166
        store v156 to v157, !8166
        v158 = const unit ()
        br block12(v158)

        block12(v159: ()):
        br block23(v159)

        block13():
        v160 = get_local ptr { u64 }, __matched_value_1, !8149
        v161 = const u64 0
        v162 = get_elem_ptr v160, ptr u64, v161, !8149
        v163 = load v162
        v164 = const u64 1, !8149
        v165 = call eq_10(v163, v164), !8171
        cbr v165, block14(), block18(), !8169

        block14():
        v166 = get_local ptr b256, partial_order_id, !8172
        v167 = load v166
        v168 = get_local ptr b256, id0, !8173
        v169 = load v168
        v170 = call eq_67(v167, v169), !8176
        cbr v170, block15(), block16(), !8174

        block15():
        v171 = get_local ptr u64, idx1, !8177
        v172 = load v171
        v173 = const u64 1, !8178
        v174 = call add_38(v172, v173), !8181
        v175 = get_local ptr u64, idx1, !8179
        store v174 to v175, !8179
        v176 = const unit ()
        br block17(v176)

        block16():
        v177 = get_local ptr u64, idx0, !8182
        v178 = load v177
        v179 = const u64 1, !8183
        v180 = call add_38(v178, v179), !8186
        v181 = get_local ptr u64, idx0, !8184
        store v180 to v181, !8184
        v182 = const unit ()
        br block17(v182)

        block17(v183: ()):
        v184 = get_local ptr u64, full_matched, !8187
        v185 = load v184
        v186 = const u64 1, !8188
        v187 = call add_38(v185, v186), !8191
        v188 = get_local ptr u64, full_matched, !8189
        store v187 to v188, !8189
        v189 = const unit ()
        br block22(v189)

        block18():
        v190 = get_local ptr { u64 }, __matched_value_1, !8149
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr u64, v191, !8149
        v193 = load v192
        v194 = const u64 2, !8149
        v195 = call eq_10(v193, v194), !8194
        cbr v195, block19(), block20(), !8192

        block19():
        v196 = get_local ptr u64, idx0, !8195
        v197 = load v196
        v198 = get_local ptr u64, idx1, !8196
        v199 = load v198
        v200 = call min_427(v197, v199), !8199
        v201 = const u64 1, !8200
        v202 = call add_38(v200, v201), !8203
        v203 = get_local ptr u64, idx0, !8204
        store v202 to v203, !8204
        v204 = get_local ptr u64, idx0, !8205
        v205 = load v204
        v206 = const u64 1, !8206
        v207 = call add_38(v205, v206), !8209
        v208 = get_local ptr u64, idx1, !8210
        store v207 to v208, !8210
        v209 = get_local ptr u64, full_matched, !8211
        v210 = load v209
        v211 = const u64 2, !8212
        v212 = call add_38(v210, v211), !8215
        v213 = get_local ptr u64, full_matched, !8213
        store v212 to v213, !8213
        v214 = const unit ()
        br block21(v214)

        block20():
        v215 = const u64 14757395258967588866, !8150
        revert v215, !8150

        block21(v216: ()):
        br block22(v216)

        block22(v217: ()):
        br block23(v217)

        block23(v218: ()):
        br while()

        end_while():
        v219 = get_local ptr u64, full_matched, !8216
        v220 = load v219
        v221 = const u64 0, !8217
        v222 = call gt_89(v220, v221), !8220
        v223 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __anon_3, !5829
        v224 = const u64 0
        v225 = get_elem_ptr v223, ptr u64, v224, !5829
        v226 = const u64 1, !5829
        store v226 to v225, !5829
        v227 = load v223
        v228 = call require_459(v222, v227), !8223
        v229 = const unit ()
        ret () v229
    }

    pub fn lts_481(i !8224: u64, k !8225: u64, len !8226: u64) -> bool, !8229 {
        entry(i: u64, k: u64, len: u64):
        v0 = call lt_86(i, len), !8232
        cbr v0, block0(), block1(v0), !8233

        block0():
        v1 = call lt_86(k, len), !8236
        br block1(v1), !8233

        block1(v2: bool):
        ret bool v2
    }

    pub fn decode_482(self !43: ptr { u64 }) -> { u64, { u64 }, u64 }, !8237 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_483(self), !8238
        ret { u64, { u64 }, u64 } v0
    }

    pub fn abi_decode_483(buffer !8239: ptr { u64 }) -> { u64, { u64 }, u64 }, !8242 {
        local { u64, { u64 }, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !8245
        v1 = call abi_decode_349(buffer), !8248
        v2 = call abi_decode_341(buffer), !8251
        v3 = get_local ptr { u64, { u64 }, u64 }, __anon_0, !8252
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !8252
        store v0 to v5, !8252
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64 }, v6, !8252
        store v1 to v7, !8252
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr u64, v8, !8252
        store v2 to v9, !8252
        v10 = load v3
        ret { u64, { u64 }, u64 } v10
    }

    pub fn open_market_order_484(amount !8253: u64, order_type !8254: { u64 }, price !8255: u64) -> b256, !8258 {
        local { u64 } __anon_0
        local { b256, u64, b256 } __anon_1
        local b256 id

        entry(amount: u64, order_type: { u64 }, price: u64):
        v0 = call require_not_paused_97(), !8261
        v1 = call reentrancy_guard_112(), !8264
        v2 = call read_matcher_fee_485(), !8267
        v3 = get_local ptr { u64 }, __anon_0, !5508
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5508
        v6 = const u64 3, !5508
        store v6 to v5, !5508
        v7 = load v3
        v8 = call open_order_internal_364(amount, order_type, price, v2, v7), !8270
        v9 = get_local ptr b256, id, !8271
        store v8 to v9, !8271
        v10 = get_local ptr { b256, u64, b256 }, __anon_1, !8272
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr b256, v11
        v13 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !8272
        store v13 to v12, !8272
        v14 = const u64 1
        v15 = get_elem_ptr v10, ptr u64, v14
        v16 = const u64 0
        store v16 to v15, !8272
        v17 = const u64 2
        v18 = get_elem_ptr v10, ptr b256, v17
        v19 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !8272
        store v19 to v18, !8272
        v20 = load v10
        v21 = get_local ptr b256, id, !8273
        v22 = load v21
        v23 = const bool true, !8274
        v24 = call insert_486(v20, v22, v23), !8277
        v25 = get_local ptr b256, id, !8278
        v26 = load v25
        ret b256 v26
    }

    fn read_matcher_fee_485() -> u64, !8281 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !8282
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x3493c96d5901ca6a92009e6e8732dee2d274b75731fc3355e9888ea296e15c0c, !8282
        store v3 to v2, !8282
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !8282
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x3493c96d5901ca6a92009e6e8732dee2d274b75731fc3355e9888ea296e15c0c, !8282
        store v9 to v8, !8282
        v10 = load v0
        v11 = call try_read_312(v10), !8285
        v12 = const u64 0, !5018
        v13 = call unwrap_or_268(v11, v12), !8288
        ret u64 v13
    }

    pub fn insert_486(self !4828: { b256, u64, b256 }, key !4829: b256, value !4830: bool) -> (), !8289 {
        local { b256, b256 } __anon_0
        local b256 key_

        entry(self: { b256, u64, b256 }, key: b256, value: bool):
        v0 = call field_id_168(self), !8290
        v1 = get_local ptr { b256, b256 }, __anon_0, !4837
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !4837
        store key to v3, !4837
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr b256, v4, !4837
        store v0 to v5, !4837
        v6 = load v1
        v7 = call sha256_132(v6), !8291
        v8 = get_local ptr b256, key_, !4841
        store v7 to v8, !4841
        v9 = get_local ptr b256, key_, !4842
        v10 = load v9
        v11 = const u64 0, !4843
        v12 = call write_104(v10, v11, value), !8292
        v13 = const unit ()
        ret () v13
    }

    pub fn open_order_487(amount !8293: u64, order_type !8294: { u64 }, price !8295: u64) -> b256, !8298 {
        local { u64 } __anon_0

        entry(amount: u64, order_type: { u64 }, price: u64):
        v0 = call require_not_paused_97(), !8301
        v1 = call reentrancy_guard_112(), !8304
        v2 = call read_matcher_fee_485(), !8307
        v3 = get_local ptr { u64 }, __anon_0, !5508
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5508
        v6 = const u64 0, !5508
        store v6 to v5, !5508
        v7 = load v3
        v8 = call open_order_internal_364(amount, order_type, price, v2, v7), !8310
        ret b256 v8
    }

    pub fn decode_488(self !43: ptr { u64 }) -> { u64, u64 }, !8311 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_489(self), !8312
        ret { u64, u64 } v0
    }

    pub fn abi_decode_489(buffer !8313: ptr { u64 }) -> { u64, u64 }, !8316 {
        local { u64, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !8319
        v1 = call abi_decode_341(buffer), !8322
        v2 = get_local ptr { u64, u64 }, __anon_0, !8323
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !8323
        store v0 to v4, !8323
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !8323
        store v1 to v6, !8323
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub fn set_epoch_490(epoch !8324: u64, epoch_duration !8325: u64) -> (), !8328 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { u64, u64, u64, u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { u64, u64 } __anon_4
        local u64 current_epoch
        local u64 now

        entry(epoch: u64, epoch_duration: u64):
        v0 = call only_owner_57(), !8331
        v1 = call read_epoch_378(), !8334
        v2 = get_local ptr u64, current_epoch, !8335
        store v1 to v2, !8335
        v3 = call timestamp_439(), !8338
        v4 = get_local ptr u64, now, !8339
        store v3 to v4, !8339
        v5 = get_local ptr u64, current_epoch, !8340
        v6 = load v5
        v7 = call ge_88(epoch, v6), !8343
        cbr v7, block0(), block1(v7), !8344

        block0():
        v8 = call add_38(epoch, epoch_duration), !8347
        v9 = get_local ptr u64, now, !8348
        v10 = load v9
        v11 = call gt_89(v8, v10), !8351
        br block1(v11), !8344

        block1(v12: bool):
        v13 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !5069
        v16 = const u64 4, !5069
        store v16 to v15, !5069
        v17 = get_local ptr u64, current_epoch, !8352
        v18 = load v17
        v19 = get_local ptr u64, now, !8353
        v20 = load v19
        v21 = get_local ptr { u64, u64, u64, u64 }, __anon_1, !8354
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !8354
        store v18 to v23, !8354
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !8354
        store epoch to v25, !8354
        v26 = const u64 2
        v27 = get_elem_ptr v21, ptr u64, v26, !8354
        store epoch_duration to v27, !8354
        v28 = const u64 3
        v29 = get_elem_ptr v21, ptr u64, v28, !8354
        store v20 to v29, !8354
        v30 = load v21
        v31 = const u64 1
        v32 = const u64 4
        v33 = get_elem_ptr v13, ptr { u64, u64, u64, u64 }, v31, v32, !5069
        store v30 to v33, !5069
        v34 = load v13
        v35 = call require_317(v12, v34), !8357
        v36 = get_local ptr { b256, u64, b256 }, __anon_2, !8358
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr b256, v37
        v39 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !8358
        store v39 to v38, !8358
        v40 = const u64 1
        v41 = get_elem_ptr v36, ptr u64, v40
        v42 = const u64 0
        store v42 to v41, !8358
        v43 = const u64 2
        v44 = get_elem_ptr v36, ptr b256, v43
        v45 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !8358
        store v45 to v44, !8358
        v46 = load v36
        v47 = call write_441(v46, epoch), !8361
        v48 = get_local ptr { b256, u64, b256 }, __anon_3, !8362
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr b256, v49
        v51 = const b256 0x0dbee7545bd5cbe89afb5ff6e66c02ee06d2105f0878cfb45b8a489221b9ea9d, !8362
        store v51 to v50, !8362
        v52 = const u64 1
        v53 = get_elem_ptr v48, ptr u64, v52
        v54 = const u64 0
        store v54 to v53, !8362
        v55 = const u64 2
        v56 = get_elem_ptr v48, ptr b256, v55
        v57 = const b256 0x0dbee7545bd5cbe89afb5ff6e66c02ee06d2105f0878cfb45b8a489221b9ea9d, !8362
        store v57 to v56, !8362
        v58 = load v48
        v59 = call write_441(v58, epoch_duration), !8365
        v60 = get_local ptr { u64, u64 }, __anon_4, !8366
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61
        store epoch to v62, !8366
        v63 = const u64 1
        v64 = get_elem_ptr v60, ptr u64, v63
        store epoch_duration to v64, !8366
        v65 = load v60
        v66 = call log_442(v65), !8369
        v67 = const unit ()
        ret () v67
    }

    pub fn decode_491(self !43: ptr { u64 }) -> { u64 }, !8370 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_492(self), !8371
        ret { u64 } v0
    }

    pub fn abi_decode_492(buffer !2272: ptr { u64 }) -> { u64 }, !8372 {
        local { u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !8373
        v1 = get_local ptr { u64 }, __anon_0, !2279
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2279
        store v0 to v3, !2279
        v4 = load v1
        ret { u64 } v4
    }

    pub fn set_matcher_fee_493(amount !8374: u64) -> (), !8377 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2

        entry(amount: u64):
        v0 = call only_owner_57(), !8380
        v1 = call read_matcher_fee_485(), !8383
        v2 = call neq_26(amount, v1), !8386
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 7, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !8389
        v9 = get_local ptr { b256, u64, b256 }, __anon_1, !8390
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr b256, v10
        v12 = const b256 0x3493c96d5901ca6a92009e6e8732dee2d274b75731fc3355e9888ea296e15c0c, !8390
        store v12 to v11, !8390
        v13 = const u64 1
        v14 = get_elem_ptr v9, ptr u64, v13
        v15 = const u64 0
        store v15 to v14, !8390
        v16 = const u64 2
        v17 = get_elem_ptr v9, ptr b256, v16
        v18 = const b256 0x3493c96d5901ca6a92009e6e8732dee2d274b75731fc3355e9888ea296e15c0c, !8390
        store v18 to v17, !8390
        v19 = load v9
        v20 = call write_441(v19, amount), !8393
        v21 = get_local ptr { u64 }, __anon_2, !8394
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store amount to v23, !8394
        v24 = load v21
        v25 = call log_494(v24), !8397
        v26 = const unit ()
        ret () v26
    }

    pub fn log_494(value !1547: { u64 }) -> (), !8398 {
        entry(value: { u64 }):
        v0 = call encode_495(value), !1551
        v1 = const u64 649664855397936830
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_495(item !1456: { u64 }) -> slice, !8399 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !8400
        v1 = call abi_encode_496(item, v0), !8401
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !8402
        ret slice v5
    }

    pub fn abi_encode_496(self !8403: { u64 }, buffer !8404: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8407 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !8408
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !8411
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8412
        store v5 to v6, !8412
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !8413
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn set_min_order_price_497(price !8414: u64) -> (), !8417 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2

        entry(price: u64):
        v0 = call only_owner_57(), !8420
        v1 = call read_min_order_price_401(), !8423
        v2 = call neq_26(price, v1), !8426
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 7, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !8429
        v9 = get_local ptr { b256, u64, b256 }, __anon_1, !8430
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr b256, v10
        v12 = const b256 0x29f5dd154c31547f4b4e4ad8565741c416a935be9adc4c46d68a12b779a0e26a, !8430
        store v12 to v11, !8430
        v13 = const u64 1
        v14 = get_elem_ptr v9, ptr u64, v13
        v15 = const u64 0
        store v15 to v14, !8430
        v16 = const u64 2
        v17 = get_elem_ptr v9, ptr b256, v16
        v18 = const b256 0x29f5dd154c31547f4b4e4ad8565741c416a935be9adc4c46d68a12b779a0e26a, !8430
        store v18 to v17, !8430
        v19 = load v9
        v20 = call write_441(v19, price), !8433
        v21 = get_local ptr { u64 }, __anon_2, !8434
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store price to v23, !8434
        v24 = load v21
        v25 = call log_498(v24), !8437
        v26 = const unit ()
        ret () v26
    }

    pub fn log_498(value !1547: { u64 }) -> (), !8438 {
        entry(value: { u64 }):
        v0 = call encode_499(value), !1551
        v1 = const u64 14471291498583089344
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_499(item !1456: { u64 }) -> slice, !8439 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !8440
        v1 = call abi_encode_500(item, v0), !8441
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !8442
        ret slice v5
    }

    pub fn abi_encode_500(self !8403: { u64 }, buffer !8404: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8444 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !8445
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !8448
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8449
        store v5 to v6, !8449
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !8450
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn set_min_order_size_501(size !8451: u64) -> (), !8454 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2

        entry(size: u64):
        v0 = call only_owner_57(), !8457
        v1 = call read_min_order_size_311(), !8460
        v2 = call neq_26(size, v1), !8463
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 7, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !8466
        v9 = get_local ptr { b256, u64, b256 }, __anon_1, !8467
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr b256, v10
        v12 = const b256 0x08e09a22868bf842d72aa81dd2cc2d707c26c2498b853428e18bbf9133161d25, !8467
        store v12 to v11, !8467
        v13 = const u64 1
        v14 = get_elem_ptr v9, ptr u64, v13
        v15 = const u64 0
        store v15 to v14, !8467
        v16 = const u64 2
        v17 = get_elem_ptr v9, ptr b256, v16
        v18 = const b256 0x08e09a22868bf842d72aa81dd2cc2d707c26c2498b853428e18bbf9133161d25, !8467
        store v18 to v17, !8467
        v19 = load v9
        v20 = call write_441(v19, size), !8470
        v21 = get_local ptr { u64 }, __anon_2, !8471
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store size to v23, !8471
        v24 = load v21
        v25 = call log_502(v24), !8474
        v26 = const unit ()
        ret () v26
    }

    pub fn log_502(value !1547: { u64 }) -> (), !8475 {
        entry(value: { u64 }):
        v0 = call encode_503(value), !1551
        v1 = const u64 8449561757438215509
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_503(item !1456: { u64 }) -> slice, !8476 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64 }):
        v0 = call new_53(), !8477
        v1 = call abi_encode_504(item, v0), !8478
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !8479
        ret slice v5
    }

    pub fn abi_encode_504(self !8480: { u64 }, buffer !8481: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8484 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !8485
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !8487
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8488
        store v5 to v6, !8488
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !8489
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn decode_505(self !43: ptr { u64 }) -> { { { u64, u64 }, u64 } }, !8490 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_506(self), !8491
        ret { { { u64, u64 }, u64 } } v0
    }

    pub fn abi_decode_506(buffer !2272: ptr { u64 }) -> { { { u64, u64 }, u64 } }, !8492 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_507(buffer), !8493
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !2279
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !2279
        store v0 to v3, !2279
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn abi_decode_507(buffer !5523: ptr { u64 }) -> { { u64, u64 }, u64 }, !8494 {
        local mut u64 i
        local { u64, u64, u64 } item
        local u64 len
        local mut { { u64, u64 }, u64 } v

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !8495
        v1 = get_local ptr u64, len, !5530
        store v0 to v1, !5530
        v2 = get_local ptr u64, len, !5531
        v3 = load v2
        v4 = call with_capacity_508(v3), !8496
        v5 = get_local ptr { { u64, u64 }, u64 }, v, !5535
        store v4 to v5, !5535
        v6 = get_local ptr u64, i, !5536
        v7 = const u64 0, !5537
        store v7 to v6, !5536
        br while()

        while():
        v8 = get_local ptr u64, i, !5538
        v9 = load v8
        v10 = get_local ptr u64, len, !5539
        v11 = load v10
        v12 = call lt_86(v9, v11), !8497
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = call abi_decode_511(buffer), !8498
        v14 = get_local ptr { u64, u64, u64 }, item, !5546
        store v13 to v14, !5546
        v15 = get_local ptr { { u64, u64 }, u64 }, v, !5547
        v16 = get_local ptr { u64, u64, u64 }, item, !5548
        v17 = load v16
        v18 = call push_512(v15, v17), !8499
        v19 = get_local ptr u64, i, !5552
        v20 = load v19
        v21 = const u64 1, !5553
        v22 = call add_38(v20, v21), !8500
        v23 = get_local ptr u64, i, !5554
        store v22 to v23, !5554
        br while()

        end_while():
        v24 = get_local ptr { { u64, u64 }, u64 }, v, !5557
        v25 = load v24
        ret { { u64, u64 }, u64 } v25
    }

    pub fn with_capacity_508(capacity !5558: u64) -> { { u64, u64 }, u64 }, !8501 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_509(capacity), !8502
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !5565
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !5565
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !5566
        store v6 to v5, !5565
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_509(capacity !5567: u64) -> { u64, u64 }, !8503 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_510(capacity), !8504
        v1 = get_local ptr { u64, u64 }, __anon_0, !5574
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !5574
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !5574
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn alloc_510(count !1435: u64) -> u64, !8505 {
        entry(count: u64):
        v0 = const u64 24
        v1 = call multiply_39(v0, count), !8506
        v2 = asm(size: v1, ptr) -> u64 ptr, !1442 {
            aloc   size, !1443
            move   ptr hp, !1444
        }
        ret u64 v2
    }

    pub fn abi_decode_511(buffer !7567: ptr { u64 }) -> { u64, u64, u64 }, !8508 {
        local { u64, u64, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call decode_340(buffer), !8511
        v1 = call decode_340(buffer), !8514
        v2 = call decode_340(buffer), !8517
        v3 = get_local ptr { u64, u64, u64 }, __anon_0, !8518
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4
        store v0 to v5, !8518
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        store v1 to v7, !8518
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr u64, v8
        store v2 to v9, !8518
        v10 = load v3
        ret { u64, u64, u64 } v10
    }

    pub fn push_512(self !5577: ptr { { u64, u64 }, u64 }, value !5578: { u64, u64, u64 }) -> (), !8519 {
        local u64 end

        entry(self: ptr { { u64, u64 }, u64 }, value: { u64, u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !5582
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { u64, u64 }, v3, !5583
        v5 = load v4
        v6 = call capacity_513(v5), !8520
        v7 = call eq_10(v2, v6), !8521
        cbr v7, block0(), block1(), !5587

        block0():
        v8 = const u64 0
        v9 = get_elem_ptr self, ptr { u64, u64 }, v8, !5583
        v10 = call grow_514(v9), !8522
        v11 = const unit ()
        br block2(v11)

        block1():
        v12 = const unit ()
        br block2(v12)

        block2(v13: ()):
        v14 = const u64 0
        v15 = get_elem_ptr self, ptr { u64, u64 }, v14, !5583
        v16 = load v15
        v17 = call ptr_518(v16), !8523
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !5582
        v20 = load v19
        v21 = call add_517(v17, v20), !8524
        v22 = get_local ptr u64, end, !5599
        store v21 to v22, !5599
        v23 = get_local ptr u64, end, !5600
        v24 = load v23
        v25 = call write_519(v24, value), !8525
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !5582
        v28 = load v27
        v29 = const u64 1, !5604
        v30 = call add_38(v28, v29), !8526
        v31 = const u64 1
        v32 = get_elem_ptr self, ptr u64, v31, !5605
        store v30 to v32, !5605
        v33 = const unit ()
        ret () v33
    }

    pub fn capacity_513(self !5608: { u64, u64 }) -> u64, !8527 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !5612
        v4 = load v3
        ret u64 v4
    }

    pub fn grow_514(self !5613: ptr { u64, u64 }) -> (), !8528 {
        local u64 new_cap

        entry(self: ptr { u64, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !5612
        v2 = load v1
        v3 = const u64 0, !5617
        v4 = call eq_10(v2, v3), !8529
        cbr v4, block0(), block1(), !5618

        block0():
        v5 = const u64 1, !5621
        br block2(v5)

        block1():
        v6 = const u64 1
        v7 = get_elem_ptr self, ptr u64, v6, !5612
        v8 = load v7
        v9 = const u64 2, !5622
        v10 = call multiply_39(v9, v8), !8530
        br block2(v10)

        block2(v11: u64):
        v12 = get_local ptr u64, new_cap, !5626
        store v11 to v12, !5626
        v13 = const u64 0
        v14 = get_elem_ptr self, ptr u64, v13, !5627
        v15 = load v14
        v16 = const u64 1
        v17 = get_elem_ptr self, ptr u64, v16, !5612
        v18 = load v17
        v19 = get_local ptr u64, new_cap, !5628
        v20 = load v19
        v21 = call realloc_515(v15, v18, v20), !8531
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr u64, v22, !5632
        store v21 to v23, !5632
        v24 = get_local ptr u64, new_cap, !5633
        v25 = load v24
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !5634
        store v25 to v27, !5634
        v28 = const unit ()
        ret () v28
    }

    pub fn realloc_515(ptr !5635: u64, count !5636: u64, new_count !5637: u64) -> u64, !8532 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_89(new_count, count), !8533
        cbr v0, block0(), block4(), !5641

        block0():
        v1 = call alloc_510(new_count), !8534
        v2 = get_local ptr u64, new_ptr, !5647
        store v1 to v2, !5647
        v3 = const u64 0, !5648
        v4 = call gt_89(count, v3), !8535
        cbr v4, block1(), block2(), !5649

        block1():
        v5 = get_local ptr u64, new_ptr, !5652
        v6 = load v5
        v7 = call copy_to_516(ptr, v6, count), !8536
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !5656
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn copy_to_516(self !2825: u64, dst !2826: u64, count !2827: u64) -> (), !8537 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 24
        v1 = mul count, v0
        v2 = get_local ptr u64, len, !2831
        store v1 to v2, !2831
        v3 = get_local ptr u64, len, !2832
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !2833 {
            mcp    dst src len, !2834
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn add_517(self !1038: u64, count !1039: u64) -> u64, !8538 {
        entry(self: u64, count: u64):
        v0 = const u64 24
        v1 = mul v0, count
        v2 = add self, v1
        ret u64 v2
    }

    pub fn ptr_518(self !5659: { u64, u64 }) -> u64, !8539 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !5627
        v4 = load v3
        ret u64 v4
    }

    pub fn write_519(self !2212: u64, val !2213: { u64, u64, u64 }) -> (), !8540 {
        entry(self: u64, val: { u64, u64, u64 }):
        v0 = const bool true
        cbr v0, block0(), block1(), !2217

        block0():
        v1 = const u64 24
        v2 = asm(dst: self, src: val, count: v1) -> (), !2218 {
            mcp    dst src count, !2219
        }
        v3 = const unit ()
        br block5(v3)

        block1():
        v4 = const u64 24
        v5 = const u64 1, !2220
        v6 = cmp eq v4 v5
        cbr v6, block2(), block3(), !2221

        block2():
        v7 = asm(ptr: self, val: val) -> (), !2222 {
            sb     ptr val i0, !2223
        }
        v8 = const unit ()
        br block4(v8)

        block3():
        v9 = asm(ptr: self, val: val) -> (), !2224 {
            sw     ptr val i0, !2225
        }
        v10 = const unit ()
        br block4(v10)

        block4(v11: ()):
        br block5(v11)

        block5(v12: ()):
        v13 = const unit ()
        ret () v13
    }

    pub fn set_protocol_fee_520(protocol_fee !8541: { { u64, u64 }, u64 }) -> (), !8544 {
        local { u64, u64, u64 } __anon_0
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_1
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { { u64, u64 }, u64 } } __anon_4

        entry(protocol_fee: { { u64, u64 }, u64 }):
        v0 = call only_owner_57(), !8547
        v1 = call len_521(protocol_fee), !8550
        v2 = const u64 0, !8551
        v3 = call gt_89(v1, v2), !8554
        cbr v3, block0(), block1(), !8552

        block0():
        v4 = const u64 0, !8555
        v5 = call get_522(protocol_fee, v4), !8558
        v6 = call unwrap_384(v5), !8561
        v7 = get_local ptr { u64, u64, u64 }, __anon_0
        store v6 to v7
        v8 = const u64 2
        v9 = get_elem_ptr v7, ptr u64, v8, !6185
        v10 = load v9
        v11 = const u64 0, !8562
        v12 = call eq_10(v10, v11), !8565
        v13 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_1, !5069
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !5069
        v16 = const u64 6, !5069
        store v16 to v15, !5069
        v17 = load v13
        v18 = call require_317(v12, v17), !8568
        v19 = const unit ()
        br block2(v19)

        block1():
        v20 = const unit ()
        br block2(v20)

        block2(v21: ()):
        v22 = call is_volume_threshold_valid_523(protocol_fee), !8571
        v23 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_2, !5069
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !5069
        v26 = const u64 5, !5069
        store v26 to v25, !5069
        v27 = load v23
        v28 = call require_317(v22, v27), !8574
        v29 = get_local ptr { b256, u64, b256 }, __anon_3, !8575
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30
        v32 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !8575
        store v32 to v31, !8575
        v33 = const u64 1
        v34 = get_elem_ptr v29, ptr u64, v33
        v35 = const u64 0
        store v35 to v34, !8575
        v36 = const u64 2
        v37 = get_elem_ptr v29, ptr b256, v36
        v38 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !8575
        store v38 to v37, !8575
        v39 = load v29
        v40 = call store_vec_527(v39, protocol_fee), !8578
        v41 = get_local ptr { { { u64, u64 }, u64 } }, __anon_4, !8579
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { { u64, u64 }, u64 }, v42
        store protocol_fee to v43, !8579
        v44 = load v41
        v45 = call log_530(v44), !8582
        v46 = const unit ()
        ret () v46
    }

    pub fn len_521(self !5860: { { u64, u64 }, u64 }) -> u64, !8583 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !5582
        v4 = load v3
        ret u64 v4
    }

    pub fn get_522(self !6696: { { u64, u64 }, u64 }, index !6697: u64) -> { u64, ( () | { u64, u64, u64 } ) }, !8584 {
        local { u64, ( () | { u64, u64, u64 } ) } __anon_0
        local { u64, ( () | { u64, u64, u64 } ) } __anon_1
        local u64 ptr

        entry(self: { { u64, u64 }, u64 }, index: u64):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !5582
        v4 = load v3
        v5 = call le_210(v4, index), !8585
        cbr v5, block0(), block1(), !6701

        block0():
        v6 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __anon_0, !1268
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7, !1268
        v9 = const u64 0, !1268
        store v9 to v8, !1268
        v10 = load v6
        ret { u64, ( () | { u64, u64, u64 } ) } v10, !6704

        block1():
        v11 = const unit ()
        br block2(v11)

        block2(v12: ()):
        v13 = ptr_to_int self to u64
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { u64, u64 }, v15, !5583
        v17 = load v16
        v18 = call ptr_518(v17), !8586
        v19 = call add_517(v18, index), !8587
        v20 = get_local ptr u64, ptr, !6711
        store v19 to v20, !6711
        v21 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __anon_1, !1268
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !1268
        v24 = const u64 1, !1268
        store v24 to v23, !1268
        v25 = get_local ptr u64, ptr, !6712
        v26 = load v25
        v27 = call read_387(v26), !8588
        v28 = const u64 1
        v29 = const u64 1
        v30 = get_elem_ptr v21, ptr { u64, u64, u64 }, v28, v29, !1268
        store v27 to v30, !1268
        v31 = load v21
        ret { u64, ( () | { u64, u64, u64 } ) } v31
    }

    pub fn is_volume_threshold_valid_523(self !8589: { { u64, u64 }, u64 }) -> bool, !8592 {
        local { u64, u64, u64 } __anon_0
        local mut { u64, ( () | { u64, u64, u64 } ) } item
        local mut { { { u64, u64 }, u64 }, u64 } iter
        local mut u64 prev
        local mut bool valid
        local u64 volume_threshold

        entry(self: { { u64, u64 }, u64 }):
        v0 = call iter_524(self), !8595
        v1 = get_local ptr { { { u64, u64 }, u64 }, u64 }, iter, !8596
        store v0 to v1, !8596
        v2 = get_local ptr { { { u64, u64 }, u64 }, u64 }, iter, !8597
        v3 = call next_525(v2), !8600
        v4 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, item, !8601
        store v3 to v4, !8601
        v5 = get_local ptr u64, prev, !8602
        v6 = const u64 0, !8603
        store v6 to v5, !8602
        v7 = get_local ptr bool, valid, !8604
        v8 = const bool true, !8605
        store v8 to v7, !8604
        br while()

        while():
        v9 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, item, !8606
        v10 = load v9
        v11 = call is_some_526(v10), !8609
        cbr v11, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v12 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, item, !8610
        v13 = load v12
        v14 = call unwrap_384(v13), !8613
        v15 = get_local ptr { u64, u64, u64 }, __anon_0
        store v14 to v15
        v16 = const u64 2
        v17 = get_elem_ptr v15, ptr u64, v16, !6185
        v18 = load v17
        v19 = get_local ptr u64, volume_threshold, !8614
        store v18 to v19, !8614
        v20 = get_local ptr u64, prev, !8615
        v21 = load v20
        v22 = get_local ptr u64, volume_threshold, !8616
        v23 = load v22
        v24 = call lt_86(v21, v23), !8619
        cbr v24, block1(v24), block0(), !8620

        block0():
        v25 = get_local ptr u64, prev, !8621
        v26 = load v25
        v27 = const u64 0, !8622
        v28 = call eq_10(v26, v27), !8625
        cbr v28, block2(), block3(v28), !8626

        block1(v29: bool):
        cbr v29, block4(), block5(), !8620

        block2():
        v30 = get_local ptr u64, volume_threshold, !8627
        v31 = load v30
        v32 = const u64 0, !8628
        v33 = call eq_10(v31, v32), !8631
        br block3(v33), !8626

        block3(v34: bool):
        br block1(v34), !8620

        block4():
        v35 = get_local ptr u64, volume_threshold, !8632
        v36 = load v35
        v37 = get_local ptr u64, prev, !8633
        store v36 to v37, !8633
        v38 = get_local ptr { { { u64, u64 }, u64 }, u64 }, iter, !8634
        v39 = call next_525(v38), !8637
        v40 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, item, !8638
        store v39 to v40, !8638
        v41 = const unit ()
        br block6(v41)

        block5():
        v42 = get_local ptr bool, valid, !8639
        v43 = const bool false, !8640
        store v43 to v42, !8639
        br while_break()

        block6(v44: ()):
        br while()

        end_while():
        v45 = get_local ptr bool, valid, !8641
        v46 = load v45
        ret bool v46
    }

    pub fn iter_524(self !8642: { { u64, u64 }, u64 }) -> { { { u64, u64 }, u64 }, u64 }, !8645 {
        local { { { u64, u64 }, u64 }, u64 } __anon_0

        entry(self: { { u64, u64 }, u64 }):
        v0 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __anon_0, !8646
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr { { u64, u64 }, u64 }, v1
        store self to v2, !8646
        v3 = const u64 1
        v4 = get_elem_ptr v0, ptr u64, v3
        v5 = const u64 0, !8647
        store v5 to v4, !8646
        v6 = load v0
        ret { { { u64, u64 }, u64 }, u64 } v6
    }

    pub fn next_525(self !8648: ptr { { { u64, u64 }, u64 }, u64 }) -> { u64, ( () | { u64, u64, u64 } ) }, !8651 {
        local { u64, ( () | { u64, u64, u64 } ) } __anon_0

        entry(self: ptr { { { u64, u64 }, u64 }, u64 }):
        v0 = const u64 1
        v1 = get_elem_ptr self, ptr u64, v0, !8652
        v2 = load v1
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v3, !8653
        v5 = load v4
        v6 = call len_521(v5), !8656
        v7 = call ge_88(v2, v6), !8659
        cbr v7, block0(), block1(), !8657

        block0():
        v8 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __anon_0, !1268
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !1268
        v11 = const u64 0, !1268
        store v11 to v10, !1268
        v12 = load v8
        ret { u64, ( () | { u64, u64, u64 } ) } v12, !8660

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = const u64 1
        v16 = get_elem_ptr self, ptr u64, v15, !8652
        v17 = load v16
        v18 = const u64 1, !8661
        v19 = call add_38(v17, v18), !8664
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !8662
        store v19 to v21, !8662
        v22 = const u64 0
        v23 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v22, !8653
        v24 = load v23
        v25 = const u64 1
        v26 = get_elem_ptr self, ptr u64, v25, !8652
        v27 = load v26
        v28 = const u64 1, !8665
        v29 = call subtract_211(v27, v28), !8668
        v30 = call get_522(v24, v29), !8671
        ret { u64, ( () | { u64, u64, u64 } ) } v30
    }

    pub fn is_some_526(self !3032: { u64, ( () | { u64, u64, u64 } ) }) -> bool, !8672 {
        local { u64, ( () | { u64, u64, u64 } ) } __matched_value_2

        entry(self: { u64, ( () | { u64, u64, u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __matched_value_2, !3036
        store self to v0, !3036
        v1 = get_local ptr { u64, ( () | { u64, u64, u64 } ) }, __matched_value_2, !3037
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3037
        v4 = load v3
        v5 = const u64 1, !3037
        v6 = call eq_10(v4, v5), !8673
        cbr v6, block0(), block1(), !3038

        block0():
        v7 = const bool true, !3041
        br block2(v7)

        block1():
        v8 = const bool false, !3042
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn store_vec_527(self !8674: { b256, u64, b256 }, vec !8675: { { u64, u64 }, u64 }) -> (), !8678 {
        local bool _
        local mut u64 i
        local b256 key_for_storage
        local u64 number_of_bytes
        local u64 number_of_slots
        local u64 number_of_words
        local u64 ptr
        local mut u64 ptr_
        local u64 size_V_bytes
        local slice slice
        local slice vec_slice

        entry(self: { b256, u64, b256 }, vec: { { u64, u64 }, u64 }):
        v0 = get_local ptr u64, size_V_bytes, !8679
        v1 = const u64 24
        store v1 to v0, !8679
        v2 = get_local ptr u64, size_V_bytes, !8680
        v3 = load v2
        v4 = const u64 8, !8681
        v5 = call lt_86(v3, v4), !8684
        cbr v5, block0(), block1(), !8682

        block0():
        v6 = call as_raw_slice_528(vec), !8687
        v7 = get_local ptr slice, vec_slice, !8688
        store v6 to v7, !8688
        v8 = call len_521(vec), !8691
        v9 = const u64 8, !8692
        v10 = call multiply_39(v9, v8), !8695
        v11 = get_local ptr u64, number_of_words, !8696
        store v10 to v11, !8696
        v12 = get_local ptr u64, number_of_words, !8697
        v13 = load v12
        v14 = call alloc_bytes_136(v13), !8700
        v15 = get_local ptr u64, ptr, !8701
        store v14 to v15, !8701
        v16 = get_local ptr u64, i, !8702
        v17 = const u64 0, !8703
        store v17 to v16, !8702
        br while()

        while():
        v18 = get_local ptr u64, i, !8704
        v19 = load v18
        v20 = call len_521(vec), !8707
        v21 = call lt_86(v19, v20), !8710
        cbr v21, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v22 = get_local ptr slice, vec_slice, !8711
        v23 = load v22
        v24 = call ptr_23(v23), !8714
        v25 = get_local ptr u64, i, !8715
        v26 = load v25
        v27 = call add_517(v24, v26), !8718
        v28 = get_local ptr u64, ptr, !8719
        v29 = load v28
        v30 = get_local ptr u64, i, !8720
        v31 = load v30
        v32 = const u64 8, !8721
        v33 = call multiply_39(v32, v31), !8724
        v34 = call add_uint_offset_151(v29, v33), !8727
        v35 = get_local ptr u64, size_V_bytes, !8728
        v36 = load v35
        v37 = call copy_bytes_to_146(v27, v34, v36), !8731
        v38 = get_local ptr u64, i, !8732
        v39 = load v38
        v40 = const u64 1, !8733
        v41 = call add_38(v39, v40), !8736
        v42 = get_local ptr u64, i, !8734
        store v41 to v42, !8734
        br while()

        end_while():
        v43 = get_local ptr u64, ptr, !8737
        v44 = load v43
        v45 = get_local ptr u64, number_of_words, !8738
        v46 = load v45
        v47 = call from_parts_529(v44, v46), !8741
        br block2(v47)

        block1():
        v48 = call as_raw_slice_528(vec), !8744
        br block2(v48)

        block2(v49: slice):
        v50 = get_local ptr slice, slice, !8745
        store v49 to v50, !8745
        v51 = get_local ptr slice, slice, !8746
        v52 = load v51
        v53 = call number_of_bytes_149(v52), !8749
        v54 = get_local ptr u64, number_of_bytes, !8750
        store v53 to v54, !8750
        v55 = get_local ptr u64, number_of_bytes, !8751
        v56 = load v55
        v57 = const u64 31, !8752
        v58 = call add_38(v56, v57), !8755
        v59 = const u64 5, !8756
        v60 = call rsh_37(v58, v59), !8759
        v61 = get_local ptr u64, number_of_slots, !8760
        store v60 to v61, !8760
        v62 = get_local ptr slice, slice, !8761
        v63 = load v62
        v64 = call ptr_23(v63), !8764
        v65 = get_local ptr u64, ptr_, !8765
        store v64 to v65, !8765
        v66 = get_local ptr u64, ptr_, !8766
        v67 = load v66
        v68 = get_local ptr u64, number_of_bytes, !8767
        v69 = load v68
        v70 = get_local ptr u64, number_of_slots, !8768
        v71 = load v70
        v72 = const u64 32, !8769
        v73 = call multiply_39(v71, v72), !8772
        v74 = call realloc_bytes_145(v67, v69, v73), !8775
        v75 = get_local ptr u64, ptr_, !8776
        store v74 to v75, !8776
        v76 = call field_id_381(self), !8779
        v77 = call sha256_279(v76), !8782
        v78 = get_local ptr u64, ptr_, !8783
        v79 = load v78
        v80 = get_local ptr u64, number_of_slots, !8784
        v81 = load v80
        v82 = get_local ptr b256, key_for_storage, !8785
        store v77 to v82, !8785
        v83 = int_to_ptr v79 to ptr b256, !8785
        v84 = state_store_quad_word v83, key v82, v81, !8785
        v85 = get_local ptr bool, _, !8786
        store v84 to v85, !8786
        v86 = call field_id_381(self), !8789
        v87 = call len_521(vec), !8792
        v88 = const u64 0, !8793
        v89 = call write_277(v86, v88, v87), !8796
        v90 = const unit ()
        ret () v90
    }

    pub fn as_raw_slice_528(self !8797: { { u64, u64 }, u64 }) -> slice, !8800 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !5583
        v4 = load v3
        v5 = call ptr_518(v4), !8803
        v6 = ptr_to_int self to u64
        v7 = int_to_ptr v6 to ptr { { u64, u64 }, u64 }
        v8 = const u64 1
        v9 = get_elem_ptr v7, ptr u64, v8, !5582
        v10 = load v9
        v11 = call from_parts_529(v5, v10), !8806
        ret slice v11
    }

    pub fn from_parts_529(ptr !2739: u64, count !2740: u64) -> slice, !8807 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 24
        v1 = mul count, v0
        v2 = get_local ptr { u64, u64 }, __anon_0, !2744
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2744
        store ptr to v4, !2744
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !2744
        store v1 to v6, !2744
        v7 = load v2
        v8 = call from_parts_144(v7), !8808
        ret slice v8
    }

    pub fn log_530(value !1547: { { { u64, u64 }, u64 } }) -> (), !8809 {
        entry(value: { { { u64, u64 }, u64 } }):
        v0 = call encode_531(value), !1551
        v1 = const u64 10772010129570911307
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_531(item !1456: { { { u64, u64 }, u64 } }) -> slice, !8810 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { { u64, u64 }, u64 } }):
        v0 = call new_53(), !8811
        v1 = call abi_encode_532(item, v0), !8812
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !8813
        ret slice v5
    }

    pub fn abi_encode_532(self !7977: { { { u64, u64 }, u64 } }, buffer !7978: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8815 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { { u64, u64 }, u64 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !8816
        v4 = load v3
        v5 = call abi_encode_533(v4, buffer), !8819
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8820
        store v5 to v6, !8820
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !8821
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_encode_533(self !8822: { { u64, u64 }, u64 }, buffer !8823: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8826 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local { u64, u64, u64 } item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_521(self), !8829
        v1 = get_local ptr u64, len, !8830
        store v0 to v1, !8830
        v2 = get_local ptr u64, len, !8831
        v3 = load v2
        v4 = call abi_encode_62(v3, buffer), !8834
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !8835
        store v4 to v5, !8835
        v6 = get_local ptr u64, i, !8836
        v7 = const u64 0, !8837
        store v7 to v6, !8836
        br while()

        while():
        v8 = get_local ptr u64, i, !8838
        v9 = load v8
        v10 = get_local ptr u64, len, !8839
        v11 = load v10
        v12 = call lt_86(v9, v11), !8842
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !8843
        v14 = load v13
        v15 = call get_522(self, v14), !8846
        v16 = call unwrap_384(v15), !8849
        v17 = get_local ptr { u64, u64, u64 }, item, !8850
        store v16 to v17, !8850
        v18 = get_local ptr { u64, u64, u64 }, item, !8851
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !8852
        v21 = load v20
        v22 = call abi_encode_534(v19, v21), !8855
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !8856
        store v22 to v23, !8856
        v24 = get_local ptr u64, i, !8857
        v25 = load v24
        v26 = const u64 1, !8858
        v27 = call add_38(v25, v26), !8861
        v28 = get_local ptr u64, i, !8859
        store v27 to v28, !8859
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !8862
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub fn abi_encode_534(self !1556: { u64, u64, u64 }, buffer !1557: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8864 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { u64, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !6049
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !8866
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8867
        store v5 to v6, !8867
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !6051
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !8868
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !8871
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !8872
        store v14 to v15, !8872
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !6185
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !8873
        v22 = load v21
        v23 = call abi_encode_62(v20, v22), !8876
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !8877
        store v23 to v24, !8877
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !8878
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn transfer_ownership_535(new_owner !8879: { u64, ( { b256 } | { b256 } ) }) -> (), !8882 {
        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call transfer_ownership_536(new_owner), !8885
        v1 = const unit ()
        ret () v1
    }

    pub fn transfer_ownership_536(new_owner !8886: { u64, ( { b256 } | { b256 } ) }) -> (), !8889 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __anon_0
        local { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } } __anon_1
        local { b256, u64, b256 } owner_key

        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call only_owner_57(), !8892
        v1 = const b256 0x4c1029697ee358715d3a14a2add817c4b01651440de808371f78165ac90dc581, !1676
        v2 = const u64 0, !8893
        v3 = call new_70(v1, v2, v1), !8896
        v4 = get_local ptr { b256, u64, b256 }, owner_key, !8897
        store v3 to v4, !8897
        v5 = get_local ptr { b256, u64, b256 }, owner_key, !8898
        v6 = load v5
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __anon_0, !1515
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8, !1515
        v10 = const u64 1, !1515
        store v10 to v9, !1515
        v11 = const u64 1
        v12 = const u64 1
        v13 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v11, v12, !1515
        store new_owner to v13, !1515
        v14 = load v7
        v15 = call write_472(v6, v14), !8901
        v16 = call msg_sender_79(), !8904
        v17 = call unwrap_78(v16), !8907
        v18 = get_local ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, __anon_1, !8908
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr { u64, ( { b256 } | { b256 } ) }, v19
        store new_owner to v20, !8908
        v21 = const u64 1
        v22 = get_elem_ptr v18, ptr { u64, ( { b256 } | { b256 } ) }, v21
        store v17 to v22, !8908
        v23 = load v18
        v24 = call log_537(v23), !8911
        v25 = const unit ()
        ret () v25
    }

    pub fn log_537(value !1547: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }) -> (), !8912 {
        entry(value: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call encode_538(value), !1551
        v1 = const u64 12970362301975156672
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_538(item !1456: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }) -> slice, !8913 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_53(), !8914
        v1 = call abi_encode_539(item, v0), !8915
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !8916
        ret slice v5
    }

    pub fn abi_encode_539(self !8480: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, buffer !8481: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !8918 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__

        entry(self: { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !8919
        v4 = load v3
        v5 = call abi_encode_303(v4, buffer), !8922
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8923
        store v5 to v6, !8923
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { u64, ( { b256 } | { b256 } ) }, { u64, ( { b256 } | { b256 } ) } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64, ( { b256 } | { b256 } ) }, v9, !8924
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !8925
        v13 = load v12
        v14 = call abi_encode_303(v11, v13), !8928
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !8929
        store v14 to v15, !8929
        v16 = get_local ptr { { u64, u64, u64 } }, buffer__, !8930
        v17 = load v16
        ret { { u64, u64, u64 } } v17
    }

    pub fn decode_540(self !43: ptr { u64 }) -> { u64, { u64 } }, !8931 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_541(self), !8932
        ret { u64, { u64 } } v0
    }

    pub fn abi_decode_541(buffer !8313: ptr { u64 }) -> { u64, { u64 } }, !8933 {
        local { u64, { u64 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !8934
        v1 = call abi_decode_542(buffer), !8935
        v2 = get_local ptr { u64, { u64 } }, __anon_0, !8323
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !8323
        store v0 to v4, !8323
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64 }, v5, !8323
        store v1 to v6, !8323
        v7 = load v2
        ret { u64, { u64 } } v7
    }

    pub fn abi_decode_542(buffer !1557: ptr { u64 }) -> { u64 }, !8937 {
        local { u64 } __anon_0
        local { u64 } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64 }):
        v0 = call decode_340(buffer), !8938
        v1 = get_local ptr u64, variant, !5489
        store v0 to v1, !5489
        v2 = get_local ptr u64, variant, !5490
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !8939
        store v3 to v4, !8939
        v5 = get_local ptr u64, __matched_value_1, !5490
        v6 = load v5
        v7 = const u64 0, !5492
        v8 = call eq_10(v6, v7), !8942
        cbr v8, block0(), block1(), !8940

        block0():
        v9 = get_local ptr { u64 }, __anon_0, !4280
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !4280
        v12 = const u64 0, !4280
        store v12 to v11, !4280
        v13 = load v9
        br block5(v13)

        block1():
        v14 = get_local ptr u64, __matched_value_1, !5490
        v15 = load v14
        v16 = const u64 1, !8943
        v17 = call eq_10(v15, v16), !8946
        cbr v17, block2(), block3(), !8944

        block2():
        v18 = get_local ptr { u64 }, __anon_1, !4280
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !4280
        v21 = const u64 1, !4280
        store v21 to v20, !4280
        v22 = load v18
        br block4(v22)

        block3():
        v23 = const u64 0, !8947
        revert v23, !8948

        block4(v24: { u64 }):
        br block5(v24)

        block5(v25: { u64 }):
        ret { u64 } v25
    }

    pub fn withdraw_543(amount !8949: u64, asset_type !8950: { u64 }) -> (), !8953 {
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __anon_0
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_3
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_3_
        local { { u64, u64 }, { u64, u64 } } account
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } user

        entry(amount: u64, asset_type: { u64 }):
        v0 = call reentrancy_guard_112(), !8956
        v1 = call withdraw_internal_544(amount, asset_type), !8959
        v2 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3, !8960
        store v1 to v2, !8960
        v3 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3, !8960
        v4 = load v3
        v5 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        store v4 to v5, !8960
        v6 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { b256 }, v7, !8960
        v9 = load v8
        v10 = get_local ptr { b256 }, asset, !8960
        store v9 to v10, !8960
        v11 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        v12 = const u64 1
        v13 = get_elem_ptr v11, ptr { u64, ( { b256 } | { b256 } ) }, v12, !8960
        v14 = load v13
        v15 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8960
        store v14 to v15, !8960
        v16 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        v17 = const u64 2
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, { u64, u64 } }, v17, !8960
        v19 = load v18
        v20 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !8960
        store v19 to v20, !8960
        v21 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8961
        v22 = load v21
        v23 = get_local ptr { b256 }, asset, !8962
        v24 = load v23
        v25 = call transfer_546(v22, v24, amount), !8965
        v26 = get_local ptr { b256 }, asset, !8966
        v27 = load v26
        v28 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8967
        v29 = load v28
        v30 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !8968
        v31 = load v30
        v32 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __anon_0, !8969
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33
        store amount to v34, !8969
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr { b256 }, v35
        store v27 to v36, !8969
        v37 = const u64 2
        v38 = get_elem_ptr v32, ptr { u64, ( { b256 } | { b256 } ) }, v37
        store v29 to v38, !8969
        v39 = const u64 3
        v40 = get_elem_ptr v32, ptr { { u64, u64 }, { u64, u64 } }, v39
        store v31 to v40, !8969
        v41 = load v32
        v42 = call log_557(v41), !8972
        v43 = const unit ()
        ret () v43
    }

    fn withdraw_internal_544(amount !8973: u64, asset_type !8974: { u64 }) -> { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, !8977 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __anon_3
        local mut { { u64, u64 }, { u64, u64 } } account
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } user

        entry(amount: u64, asset_type: { u64 }):
        v0 = const u64 0, !8978
        v1 = call gt_89(amount, v0), !8981
        v2 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !5069
        v5 = const u64 0, !5069
        store v5 to v4, !5069
        v6 = load v2
        v7 = call require_317(v1, v6), !8984
        v8 = call msg_sender_79(), !8987
        v9 = call unwrap_78(v8), !8990
        v10 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8991
        store v9 to v10, !8991
        v11 = get_local ptr { b256, u64, b256 }, __anon_1, !8992
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr b256, v12
        v14 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !8992
        store v14 to v13, !8992
        v15 = const u64 1
        v16 = get_elem_ptr v11, ptr u64, v15
        v17 = const u64 0
        store v17 to v16, !8992
        v18 = const u64 2
        v19 = get_elem_ptr v11, ptr b256, v18
        v20 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !8992
        store v20 to v19, !8992
        v21 = load v11
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8993
        v23 = load v22
        v24 = call get_188(v21, v23), !8996
        v25 = call try_read_330(v24), !8999
        v26 = call new_331(), !9002
        v27 = call unwrap_or_329(v25, v26), !9005
        v28 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9006
        store v27 to v28, !9006
        v29 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9007
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { u64, u64 }, v30, !3423
        v32 = call debit_204(v31, amount, asset_type), !9010
        v33 = get_local ptr { b256, u64, b256 }, __anon_2, !9011
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr b256, v34
        v36 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !9011
        store v36 to v35, !9011
        v37 = const u64 1
        v38 = get_elem_ptr v33, ptr u64, v37
        v39 = const u64 0
        store v39 to v38, !9011
        v40 = const u64 2
        v41 = get_elem_ptr v33, ptr b256, v40
        v42 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !9011
        store v42 to v41, !9011
        v43 = load v33
        v44 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9012
        v45 = load v44
        v46 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9013
        v47 = load v46
        v48 = call insert_297(v43, v45, v47), !9016
        v49 = call get_asset_id_545(asset_type), !9019
        v50 = get_local ptr { b256 }, asset, !9020
        store v49 to v50, !9020
        v51 = get_local ptr { b256 }, asset, !9021
        v52 = load v51
        v53 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9022
        v54 = load v53
        v55 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9023
        v56 = load v55
        v57 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __anon_3, !9024
        v58 = const u64 0
        v59 = get_elem_ptr v57, ptr { b256 }, v58, !9024
        store v52 to v59, !9024
        v60 = const u64 1
        v61 = get_elem_ptr v57, ptr { u64, ( { b256 } | { b256 } ) }, v60, !9024
        store v54 to v61, !9024
        v62 = const u64 2
        v63 = get_elem_ptr v57, ptr { { u64, u64 }, { u64, u64 } }, v62, !9024
        store v56 to v63, !9024
        v64 = load v57
        ret { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } v64
    }

    fn get_asset_id_545(asset_type !9025: { u64 }) -> { b256 }, !9028 {
        local { u64 } __matched_value_8

        entry(asset_type: { u64 }):
        v0 = get_local ptr { u64 }, __matched_value_8, !9029
        store asset_type to v0, !9029
        v1 = get_local ptr { u64 }, __matched_value_8, !9030
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9030
        v4 = load v3
        v5 = const u64 0, !9030
        v6 = call eq_10(v4, v5), !9033
        cbr v6, block0(), block1(), !9031

        block0():
        v7 = get_config ptr { b256 }, BASE_ASSET, !9034
        v8 = load v7
        br block5(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_8, !9030
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !9030
        v12 = load v11
        v13 = const u64 1, !9030
        v14 = call eq_10(v12, v13), !9037
        cbr v14, block2(), block3(), !9035

        block2():
        v15 = get_config ptr { b256 }, QUOTE_ASSET, !9038
        v16 = load v15
        br block4(v16)

        block3():
        v17 = const u64 14757395258967588866, !9029
        revert v17, !9029

        block4(v18: { b256 }):
        br block5(v18)

        block5(v19: { b256 }):
        ret { b256 } v19
    }

    pub fn transfer_546(to !9040: { u64, ( { b256 } | { b256 } ) }, asset_id !9041: { b256 }, amount !9042: u64) -> (), !9045 {
        local { u64, ( { b256 } | { b256 } ) } __matched_value_1
        local { b256 } addr
        local { b256 } id

        entry(to: { u64, ( { b256 } | { b256 } ) }, asset_id: { b256 }, amount: u64):
        v0 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !9046
        store to to v0, !9046
        v1 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !9047
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9047
        v4 = load v3
        v5 = const u64 0, !9047
        v6 = call eq_10(v4, v5), !9050
        cbr v6, block0(), block1(), !9048

        block0():
        v7 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !9047
        v8 = const u64 1
        v9 = const u64 0
        v10 = get_elem_ptr v7, ptr { b256 }, v8, v9
        v11 = load v10
        v12 = get_local ptr { b256 }, addr, !9051
        store v11 to v12, !9051
        v13 = get_local ptr { b256 }, addr, !9052
        v14 = load v13
        v15 = call transfer_to_address_547(v14, asset_id, amount), !9055
        br block5(v15)

        block1():
        v16 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !9047
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17, !9047
        v19 = load v18
        v20 = const u64 1, !9047
        v21 = call eq_10(v19, v20), !9058
        cbr v21, block2(), block3(), !9056

        block2():
        v22 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_1, !9047
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v22, ptr { b256 }, v23, v24
        v26 = load v25
        v27 = get_local ptr { b256 }, id, !9059
        store v26 to v27, !9059
        v28 = get_local ptr { b256 }, id, !9060
        v29 = load v28
        v30 = call force_transfer_to_contract_555(v29, asset_id, amount), !9063
        br block4(v30)

        block3():
        v31 = const u64 14757395258967588866, !9046
        revert v31, !9046

        block4(v32: ()):
        br block5(v32)

        block5(v33: ()):
        v34 = const unit ()
        ret () v34
    }

    fn transfer_to_address_547(to !9064: { b256 }, asset_id !9065: { b256 }, amount !9066: u64) -> (), !9069 {
        local { u64, ( () | u64 ) } __matched_value_2
        local { u64, ( () | { u64 } ) } __matched_value_3
        local mut u64 index
        local u64 number_of_outputs

        entry(to: { b256 }, asset_id: { b256 }, amount: u64):
        v0 = get_local ptr u64, index, !9070
        v1 = const u64 0, !9071
        store v1 to v0, !9070
        v2 = call output_count_548(), !9074
        v3 = call as_u64_82(v2), !9077
        v4 = get_local ptr u64, number_of_outputs, !9078
        store v3 to v4, !9078
        br while()

        while():
        v5 = get_local ptr u64, index, !9079
        v6 = load v5
        v7 = get_local ptr u64, number_of_outputs, !9080
        v8 = load v7
        v9 = call lt_86(v6, v8), !9083
        cbr v9, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v10 = get_local ptr u64, index, !9084
        v11 = load v10
        v12 = call output_type_549(v11), !9087
        v13 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !9088
        store v12 to v13, !9088
        v14 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !9085
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !9085
        v17 = load v16
        v18 = const u64 1, !9085
        v19 = call eq_10(v17, v18), !9091
        cbr v19, block0(), block1(v19), !9089

        block0():
        v20 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !9085
        v21 = const u64 1
        v22 = const u64 1
        v23 = get_elem_ptr v20, ptr { u64 }, v21, v22
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !9092
        v26 = load v25
        v27 = const u64 3, !9092
        v28 = call eq_10(v26, v27), !9093
        br block1(v28), !9089

        block1(v29: bool):
        cbr v29, block2(), block8(), !9089

        block2():
        v30 = get_local ptr u64, index, !9094
        v31 = load v30
        v32 = call output_amount_550(v31), !9097
        v33 = get_local ptr { u64, ( () | u64 ) }, __matched_value_2, !9098
        store v32 to v33, !9098
        v34 = get_local ptr { u64, ( () | u64 ) }, __matched_value_2, !9095
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !9095
        v37 = load v36
        v38 = const u64 1, !9095
        v39 = call eq_10(v37, v38), !9101
        cbr v39, block3(), block4(v39), !9099

        block3():
        v40 = get_local ptr { u64, ( () | u64 ) }, __matched_value_2, !9095
        v41 = const u64 1
        v42 = const u64 1
        v43 = get_elem_ptr v40, ptr u64, v41, v42
        v44 = load v43
        v45 = const u64 0, !9102
        v46 = call eq_10(v44, v45), !9103
        br block4(v46), !9099

        block4(v47: bool):
        cbr v47, block5(), block6(), !9099

        block5():
        v48 = call bits_554(to), !9106
        v49 = get_local ptr u64, index, !9107
        v50 = load v49
        v51 = asm(r1: v48, r2: v50, r3: amount, r4: asset_id) -> (), !9108 {
            tro    r1 r2 r3 r4, !9109
        }
        v52 = const unit (), !9110
        ret () v52, !9110

        block6():
        v53 = const unit ()
        br block7(v53)

        block7(v54: ()):
        br block9(v54)

        block8():
        v55 = const unit ()
        br block9(v55)

        block9(v56: ()):
        v57 = get_local ptr u64, index, !9111
        v58 = load v57
        v59 = const u64 1, !9112
        v60 = call add_38(v58, v59), !9115
        v61 = get_local ptr u64, index, !9113
        store v60 to v61, !9113
        br while()

        end_while():
        v62 = const u64 18446744073709486081, !9116
        v63 = call revert_63(v62), !9119
        v64 = const unit ()
        ret () v64
    }

    pub fn output_count_548() -> u64, !9123 {
        local { u64 } __matched_value_3

        entry():
        v0 = call tx_type_84(), !9126
        v1 = get_local ptr { u64 }, __matched_value_3, !9127
        store v0 to v1, !9127
        v2 = get_local ptr { u64 }, __matched_value_3, !9124
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !9124
        v5 = load v4
        v6 = const u64 0, !9124
        v7 = call eq_10(v5, v6), !9130
        cbr v7, block0(), block1(), !9128

        block0():
        v8 = const u64 0, !9131
        v9 = gtf v8, 6, !9132
        v10 = bitcast v9 to u64, !9132
        br block14(v10)

        block1():
        v11 = get_local ptr { u64 }, __matched_value_3, !9124
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !9124
        v14 = load v13
        v15 = const u64 1, !9124
        v16 = call eq_10(v14, v15), !9135
        cbr v16, block2(), block3(), !9133

        block2():
        v17 = const u64 0, !9136
        v18 = gtf v17, 260, !9137
        v19 = bitcast v18 to u64, !9137
        br block13(v19)

        block3():
        v20 = get_local ptr { u64 }, __matched_value_3, !9124
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !9124
        v23 = load v22
        v24 = const u64 3, !9124
        v25 = call eq_10(v23, v24), !9140
        cbr v25, block4(), block5(), !9138

        block4():
        v26 = const u64 0, !9141
        v27 = gtf v26, 6, !9142
        v28 = bitcast v27 to u64, !9142
        br block12(v28)

        block5():
        v29 = get_local ptr { u64 }, __matched_value_3, !9124
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30, !9124
        v32 = load v31
        v33 = const u64 4, !9124
        v34 = call eq_10(v32, v33), !9145
        cbr v34, block6(), block7(), !9143

        block6():
        v35 = const u64 0, !9146
        v36 = gtf v35, 6, !9147
        v37 = bitcast v36 to u64, !9147
        br block11(v37)

        block7():
        v38 = get_local ptr { u64 }, __matched_value_3, !9124
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !9124
        v41 = load v40
        v42 = const u64 5, !9124
        v43 = call eq_10(v41, v42), !9150
        cbr v43, block8(), block9(), !9148

        block8():
        v44 = const u64 0, !9151
        v45 = gtf v44, 6, !9152
        v46 = bitcast v45 to u64, !9152
        br block10(v46)

        block9():
        v47 = const u64 0, !9153
        v48 = call revert_63(v47), !9156
        br block10(v48)

        block10(v49: u64):
        br block11(v49)

        block11(v50: u64):
        br block12(v50)

        block12(v51: u64):
        br block13(v51)

        block13(v52: u64):
        br block14(v52)

        block14(v53: u64):
        ret u64 v53
    }

    pub fn output_type_549(index !9157: u64) -> { u64, ( () | { u64 } ) }, !9160 {
        local { u64, ( () | { u64 } ) } __anon_0
        local { u64, ( () | { u64 } ) } __anon_1
        local { u64 } __anon_10
        local { u64, ( () | { u64 } ) } __anon_11
        local { u64 } __anon_2
        local { u64, ( () | { u64 } ) } __anon_3
        local { u64 } __anon_4
        local { u64, ( () | { u64 } ) } __anon_5
        local { u64 } __anon_6
        local { u64, ( () | { u64 } ) } __anon_7
        local { u64 } __anon_8
        local { u64, ( () | { u64 } ) } __anon_9
        local u8 __matched_value_1

        entry(index: u64):
        v0 = call output_count_548(), !9163
        v1 = call as_u64_82(v0), !9166
        v2 = call ge_88(index, v1), !9169
        cbr v2, block0(), block1(), !9167

        block0():
        v3 = get_local ptr { u64, ( () | { u64 } ) }, __anon_0, !1268
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !1268
        v6 = const u64 0, !1268
        store v6 to v5, !1268
        v7 = load v3
        ret { u64, ( () | { u64 } ) } v7, !9170

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = gtf index, 768, !9171
        v11 = bitcast v10 to u8, !9171
        v12 = get_local ptr u8, __matched_value_1, !9172
        store v11 to v12, !9172
        v13 = get_local ptr u8, __matched_value_1, !9171
        v14 = load v13
        v15 = const u8 0, !9173
        v16 = call eq_85(v14, v15), !9176
        cbr v16, block3(), block4(), !9174

        block3():
        v17 = get_local ptr { u64, ( () | { u64 } ) }, __anon_1, !1268
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1268
        v20 = const u64 1, !1268
        store v20 to v19, !1268
        v21 = get_local ptr { u64 }, __anon_2, !9177
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !9177
        v24 = const u64 0, !9177
        store v24 to v23, !9177
        v25 = load v21
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v17, ptr { u64 }, v26, v27, !1268
        store v25 to v28, !1268
        v29 = load v17
        br block17(v29)

        block4():
        v30 = get_local ptr u8, __matched_value_1, !9171
        v31 = load v30
        v32 = const u8 1, !9178
        v33 = call eq_85(v31, v32), !9181
        cbr v33, block5(), block6(), !9179

        block5():
        v34 = get_local ptr { u64, ( () | { u64 } ) }, __anon_3, !1268
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35, !1268
        v37 = const u64 1, !1268
        store v37 to v36, !1268
        v38 = get_local ptr { u64 }, __anon_4, !9177
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !9177
        v41 = const u64 1, !9177
        store v41 to v40, !9177
        v42 = load v38
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v34, ptr { u64 }, v43, v44, !1268
        store v42 to v45, !1268
        v46 = load v34
        br block16(v46)

        block6():
        v47 = get_local ptr u8, __matched_value_1, !9171
        v48 = load v47
        v49 = const u8 2, !9182
        v50 = call eq_85(v48, v49), !9185
        cbr v50, block7(), block8(), !9183

        block7():
        v51 = get_local ptr { u64, ( () | { u64 } ) }, __anon_5, !1268
        v52 = const u64 0
        v53 = get_elem_ptr v51, ptr u64, v52, !1268
        v54 = const u64 1, !1268
        store v54 to v53, !1268
        v55 = get_local ptr { u64 }, __anon_6, !9177
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !9177
        v58 = const u64 2, !9177
        store v58 to v57, !9177
        v59 = load v55
        v60 = const u64 1
        v61 = const u64 1
        v62 = get_elem_ptr v51, ptr { u64 }, v60, v61, !1268
        store v59 to v62, !1268
        v63 = load v51
        br block15(v63)

        block8():
        v64 = get_local ptr u8, __matched_value_1, !9171
        v65 = load v64
        v66 = const u8 3, !9186
        v67 = call eq_85(v65, v66), !9189
        cbr v67, block9(), block10(), !9187

        block9():
        v68 = get_local ptr { u64, ( () | { u64 } ) }, __anon_7, !1268
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr u64, v69, !1268
        v71 = const u64 1, !1268
        store v71 to v70, !1268
        v72 = get_local ptr { u64 }, __anon_8, !9177
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !9177
        v75 = const u64 3, !9177
        store v75 to v74, !9177
        v76 = load v72
        v77 = const u64 1
        v78 = const u64 1
        v79 = get_elem_ptr v68, ptr { u64 }, v77, v78, !1268
        store v76 to v79, !1268
        v80 = load v68
        br block14(v80)

        block10():
        v81 = get_local ptr u8, __matched_value_1, !9171
        v82 = load v81
        v83 = const u8 4, !9190
        v84 = call eq_85(v82, v83), !9193
        cbr v84, block11(), block12(), !9191

        block11():
        v85 = get_local ptr { u64, ( () | { u64 } ) }, __anon_9, !1268
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !1268
        v88 = const u64 1, !1268
        store v88 to v87, !1268
        v89 = get_local ptr { u64 }, __anon_10, !9177
        v90 = const u64 0
        v91 = get_elem_ptr v89, ptr u64, v90, !9177
        v92 = const u64 4, !9177
        store v92 to v91, !9177
        v93 = load v89
        v94 = const u64 1
        v95 = const u64 1
        v96 = get_elem_ptr v85, ptr { u64 }, v94, v95, !1268
        store v93 to v96, !1268
        v97 = load v85
        br block13(v97)

        block12():
        v98 = get_local ptr { u64, ( () | { u64 } ) }, __anon_11, !1268
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr u64, v99, !1268
        v101 = const u64 0, !1268
        store v101 to v100, !1268
        v102 = load v98
        br block13(v102)

        block13(v103: { u64, ( () | { u64 } ) }):
        br block14(v103)

        block14(v104: { u64, ( () | { u64 } ) }):
        br block15(v104)

        block15(v105: { u64, ( () | { u64 } ) }):
        br block16(v105)

        block16(v106: { u64, ( () | { u64 } ) }):
        br block17(v106)

        block17(v107: { u64, ( () | { u64 } ) }):
        ret { u64, ( () | { u64 } ) } v107
    }

    pub fn output_amount_550(index !9194: u64) -> { u64, ( () | u64 ) }, !9197 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, ( () | u64 ) } __anon_2
        local { u64, ( () | u64 ) } __anon_3
        local { u64, ( () | u64 ) } __anon_4
        local { u64, ( () | u64 ) } __anon_5
        local { u64, ( () | { u64 } ) } __matched_value_4
        local u64 ptr

        entry(index: u64):
        v0 = call output_type_549(index), !9200
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9201
        store v0 to v1, !9201
        v2 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !9198
        v5 = load v4
        v6 = const u64 1, !9198
        v7 = call eq_10(v5, v6), !9204
        cbr v7, block0(), block1(v7), !9202

        block0():
        v8 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr { u64 }, v9, v10
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !9205
        v14 = load v13
        v15 = const u64 0, !9205
        v16 = call eq_10(v14, v15), !9206
        br block1(v16), !9202

        block1(v17: bool):
        cbr v17, block2(), block3(), !9202

        block2():
        v18 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !1268
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !1268
        v21 = const u64 1, !1268
        store v21 to v20, !1268
        v22 = gtf index, 770, !9207
        v23 = bitcast v22 to u64, !9207
        v24 = const u64 1
        v25 = const u64 1
        v26 = get_elem_ptr v18, ptr u64, v24, v25, !1268
        store v23 to v26, !1268
        v27 = load v18
        br block27(v27)

        block3():
        v28 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr u64, v29, !9198
        v31 = load v30
        v32 = const u64 1, !9198
        v33 = call eq_10(v31, v32), !9210
        cbr v33, block4(), block5(v33), !9208

        block4():
        v34 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v34, ptr { u64 }, v35, v36
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr u64, v38, !9211
        v40 = load v39
        v41 = const u64 1, !9211
        v42 = call eq_10(v40, v41), !9212
        br block5(v42), !9208

        block5(v43: bool):
        cbr v43, block6(), block7(), !9208

        block6():
        v44 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !1268
        v45 = const u64 0
        v46 = get_elem_ptr v44, ptr u64, v45, !1268
        v47 = const u64 0, !1268
        store v47 to v46, !1268
        v48 = load v44
        br block26(v48)

        block7():
        v49 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !9198
        v52 = load v51
        v53 = const u64 1, !9198
        v54 = call eq_10(v52, v53), !9215
        cbr v54, block8(), block9(v54), !9213

        block8():
        v55 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v56 = const u64 1
        v57 = const u64 1
        v58 = get_elem_ptr v55, ptr { u64 }, v56, v57
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr u64, v59, !9216
        v61 = load v60
        v62 = const u64 2, !9216
        v63 = call eq_10(v61, v62), !9217
        br block9(v63), !9213

        block9(v64: bool):
        cbr v64, block10(), block11(), !9213

        block10():
        v65 = get_local ptr { u64, ( () | u64 ) }, __anon_2, !1268
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !1268
        v68 = const u64 1, !1268
        store v68 to v67, !1268
        v69 = const u64 1
        v70 = const u64 1
        v71 = get_elem_ptr v65, ptr u64, v69, v70, !1268
        v72 = const u64 0, !9218
        store v72 to v71, !1268
        v73 = load v65
        br block25(v73)

        block11():
        v74 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr u64, v75, !9198
        v77 = load v76
        v78 = const u64 1, !9198
        v79 = call eq_10(v77, v78), !9221
        cbr v79, block12(), block13(v79), !9219

        block12():
        v80 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v81 = const u64 1
        v82 = const u64 1
        v83 = get_elem_ptr v80, ptr { u64 }, v81, v82
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !9222
        v86 = load v85
        v87 = const u64 3, !9222
        v88 = call eq_10(v86, v87), !9223
        br block13(v88), !9219

        block13(v89: bool):
        cbr v89, block14(), block15(), !9219

        block14():
        v90 = call output_pointer_552(index), !9226
        v91 = call unwrap_551(v90), !9229
        v92 = get_local ptr u64, ptr, !9230
        store v91 to v92, !9230
        v93 = get_local ptr { u64, ( () | u64 ) }, __anon_3, !1268
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !1268
        v96 = const u64 1, !1268
        store v96 to v95, !1268
        v97 = get_local ptr u64, ptr, !9231
        v98 = load v97
        v99 = asm(r1, r2, r3: v98) -> u64 r1, !9232 {
            addi   r2 r3 i40, !9233
            lw     r1 r2 i0, !9234
        }
        v100 = const u64 1
        v101 = const u64 1
        v102 = get_elem_ptr v93, ptr u64, v100, v101, !1268
        store v99 to v102, !1268
        v103 = load v93
        br block24(v103)

        block15():
        v104 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105, !9198
        v107 = load v106
        v108 = const u64 1, !9198
        v109 = call eq_10(v107, v108), !9237
        cbr v109, block16(), block17(v109), !9235

        block16():
        v110 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v111 = const u64 1
        v112 = const u64 1
        v113 = get_elem_ptr v110, ptr { u64 }, v111, v112
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u64, v114, !9238
        v116 = load v115
        v117 = const u64 4, !9238
        v118 = call eq_10(v116, v117), !9239
        br block17(v118), !9235

        block17(v119: bool):
        cbr v119, block18(), block19(), !9235

        block18():
        v120 = get_local ptr { u64, ( () | u64 ) }, __anon_4, !1268
        v121 = const u64 0
        v122 = get_elem_ptr v120, ptr u64, v121, !1268
        v123 = const u64 0, !1268
        store v123 to v122, !1268
        v124 = load v120
        br block23(v124)

        block19():
        v125 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_4, !9198
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126, !9198
        v128 = load v127
        v129 = const u64 0, !9198
        v130 = call eq_10(v128, v129), !9242
        cbr v130, block20(), block21(), !9240

        block20():
        v131 = get_local ptr { u64, ( () | u64 ) }, __anon_5, !1268
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !1268
        v134 = const u64 0, !1268
        store v134 to v133, !1268
        v135 = load v131
        br block22(v135)

        block21():
        v136 = const u64 14757395258967588866, !9201
        revert v136, !9201

        block22(v137: { u64, ( () | u64 ) }):
        br block23(v137)

        block23(v138: { u64, ( () | u64 ) }):
        br block24(v138)

        block24(v139: { u64, ( () | u64 ) }):
        br block25(v139)

        block25(v140: { u64, ( () | u64 ) }):
        br block26(v140)

        block26(v141: { u64, ( () | u64 ) }):
        br block27(v141)

        block27(v142: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v142
    }

    pub fn unwrap_551(self !2059: { u64, ( () | u64 ) }) -> u64, !9243 {
        local { u64, ( () | u64 ) } __matched_value_4
        local u64 inner_value

        entry(self: { u64, ( () | u64 ) }):
        v0 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2063
        store self to v0, !2063
        v1 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2064
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2064
        v4 = load v3
        v5 = const u64 1, !2064
        v6 = call eq_10(v4, v5), !9244
        cbr v6, block0(), block1(), !2065

        block0():
        v7 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !2064
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr u64, v8, v9
        v11 = load v10
        v12 = get_local ptr u64, inner_value, !2068
        store v11 to v12, !2068
        v13 = get_local ptr u64, inner_value, !2069
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !2070
        v16 = call revert_63(v15), !9245
        br block2(v16)

        block2(v17: u64):
        ret u64 v17
    }

    fn output_pointer_552(index !9246: u64) -> { u64, ( () | u64 ) }, !9249 {
        local { u64, ( () | u64 ) } __anon_0
        local { u64, ( () | u64 ) } __anon_1
        local { u64, ( () | u64 ) } __anon_2
        local { u64, ( () | u64 ) } __anon_3
        local { u64, ( () | u64 ) } __anon_4
        local { u64, ( () | u64 ) } __anon_5
        local { u64, ( () | u64 ) } __anon_6
        local { u64 } __matched_value_2

        entry(index: u64):
        v0 = call output_type_549(index), !9252
        v1 = call is_none_553(v0), !9255
        cbr v1, block0(), block1(), !9253

        block0():
        v2 = get_local ptr { u64, ( () | u64 ) }, __anon_0, !1268
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !1268
        v5 = const u64 0, !1268
        store v5 to v4, !1268
        v6 = load v2
        ret { u64, ( () | u64 ) } v6, !9256

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = call tx_type_84(), !9259
        v10 = get_local ptr { u64 }, __matched_value_2, !9260
        store v9 to v10, !9260
        v11 = get_local ptr { u64 }, __matched_value_2, !9257
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr u64, v12, !9257
        v14 = load v13
        v15 = const u64 0, !9257
        v16 = call eq_10(v14, v15), !9263
        cbr v16, block3(), block4(), !9261

        block3():
        v17 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !1268
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !1268
        v20 = const u64 1, !1268
        store v20 to v19, !1268
        v21 = gtf index, 12, !9264
        v22 = bitcast v21 to u64, !9264
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v17, ptr u64, v23, v24, !1268
        store v22 to v25, !1268
        v26 = load v17
        br block17(v26)

        block4():
        v27 = get_local ptr { u64 }, __matched_value_2, !9257
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28, !9257
        v30 = load v29
        v31 = const u64 1, !9257
        v32 = call eq_10(v30, v31), !9267
        cbr v32, block5(), block6(), !9265

        block5():
        v33 = get_local ptr { u64, ( () | u64 ) }, __anon_2, !1268
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34, !1268
        v36 = const u64 1, !1268
        store v36 to v35, !1268
        v37 = gtf index, 265, !9268
        v38 = bitcast v37 to u64, !9268
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v33, ptr u64, v39, v40, !1268
        store v38 to v41, !1268
        v42 = load v33
        br block16(v42)

        block6():
        v43 = get_local ptr { u64 }, __matched_value_2, !9257
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr u64, v44, !9257
        v46 = load v45
        v47 = const u64 3, !9257
        v48 = call eq_10(v46, v47), !9271
        cbr v48, block7(), block8(), !9269

        block7():
        v49 = get_local ptr { u64, ( () | u64 ) }, __anon_3, !1268
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr u64, v50, !1268
        v52 = const u64 1, !1268
        store v52 to v51, !1268
        v53 = gtf index, 12, !9272
        v54 = bitcast v53 to u64, !9272
        v55 = const u64 1
        v56 = const u64 1
        v57 = get_elem_ptr v49, ptr u64, v55, v56, !1268
        store v54 to v57, !1268
        v58 = load v49
        br block15(v58)

        block8():
        v59 = get_local ptr { u64 }, __matched_value_2, !9257
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !9257
        v62 = load v61
        v63 = const u64 4, !9257
        v64 = call eq_10(v62, v63), !9275
        cbr v64, block9(), block10(), !9273

        block9():
        v65 = get_local ptr { u64, ( () | u64 ) }, __anon_4, !1268
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr u64, v66, !1268
        v68 = const u64 1, !1268
        store v68 to v67, !1268
        v69 = gtf index, 12, !9276
        v70 = bitcast v69 to u64, !9276
        v71 = const u64 1
        v72 = const u64 1
        v73 = get_elem_ptr v65, ptr u64, v71, v72, !1268
        store v70 to v73, !1268
        v74 = load v65
        br block14(v74)

        block10():
        v75 = get_local ptr { u64 }, __matched_value_2, !9257
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr u64, v76, !9257
        v78 = load v77
        v79 = const u64 5, !9257
        v80 = call eq_10(v78, v79), !9279
        cbr v80, block11(), block12(), !9277

        block11():
        v81 = get_local ptr { u64, ( () | u64 ) }, __anon_5, !1268
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr u64, v82, !1268
        v84 = const u64 1, !1268
        store v84 to v83, !1268
        v85 = gtf index, 12, !9280
        v86 = bitcast v85 to u64, !9280
        v87 = const u64 1
        v88 = const u64 1
        v89 = get_elem_ptr v81, ptr u64, v87, v88, !1268
        store v86 to v89, !1268
        v90 = load v81
        br block13(v90)

        block12():
        v91 = get_local ptr { u64, ( () | u64 ) }, __anon_6, !1268
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !1268
        v94 = const u64 0, !1268
        store v94 to v93, !1268
        v95 = load v91
        br block13(v95)

        block13(v96: { u64, ( () | u64 ) }):
        br block14(v96)

        block14(v97: { u64, ( () | u64 ) }):
        br block15(v97)

        block15(v98: { u64, ( () | u64 ) }):
        br block16(v98)

        block16(v99: { u64, ( () | u64 ) }):
        br block17(v99)

        block17(v100: { u64, ( () | u64 ) }):
        ret { u64, ( () | u64 ) } v100
    }

    pub fn is_none_553(self !2048: { u64, ( () | { u64 } ) }) -> bool, !9281 {
        local { u64, ( () | { u64 } ) } __matched_value_3

        entry(self: { u64, ( () | { u64 } ) }):
        v0 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !2052
        store self to v0, !2052
        v1 = get_local ptr { u64, ( () | { u64 } ) }, __matched_value_3, !2053
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !2053
        v4 = load v3
        v5 = const u64 1, !2053
        v6 = call eq_10(v4, v5), !9282
        cbr v6, block0(), block1(), !2054

        block0():
        v7 = const bool false, !2057
        br block2(v7)

        block1():
        v8 = const bool true, !2058
        br block2(v8)

        block2(v9: bool):
        ret bool v9
    }

    pub fn bits_554(self !9283: { b256 }) -> b256, !9286 {
        entry(self: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1654
        v4 = load v3
        ret b256 v4
    }

    fn force_transfer_to_contract_555(to !9287: { b256 }, asset_id !9288: { b256 }, amount !9289: u64) -> (), !9292 {
        entry(to: { b256 }, asset_id: { b256 }, amount: u64):
        v0 = call bits_556(to), !9295
        v1 = asm(r1: amount, r2: asset_id, r3: v0) -> (), !9296 {
            tr     r3 r1 r2, !9297
        }
        v2 = const unit ()
        ret () v2
    }

    pub fn bits_556(self !9298: { b256 }) -> b256, !9301 {
        entry(self: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !1669
        v4 = load v3
        ret b256 v4
    }

    pub fn log_557(value !1547: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }) -> (), !9302 {
        entry(value: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }):
        v0 = call encode_558(value), !1551
        v1 = const u64 10918704871079408520
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_558(item !1456: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }) -> slice, !9303 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }):
        v0 = call new_53(), !9304
        v1 = call abi_encode_559(item, v0), !9305
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9306
        ret slice v5
    }

    pub fn abi_encode_559(self !7566: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, buffer !7567: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9308 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____

        entry(self: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9309
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !9312
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9313
        store v5 to v6, !9313
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !9314
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9315
        v13 = load v12
        v14 = call abi_encode_336(v11, v13), !9318
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9319
        store v14 to v15, !9319
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { u64, ( { b256 } | { b256 } ) }, v18, !9320
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !9321
        v22 = load v21
        v23 = call abi_encode_303(v20, v22), !9324
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !9325
        store v23 to v24, !9325
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, { u64, u64 } }, v27, !9326
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !9327
        v31 = load v30
        v32 = call abi_encode_306(v29, v31), !9330
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !9331
        store v32 to v33, !9331
        v34 = get_local ptr { { u64, u64, u64 } }, buffer____, !9332
        v35 = load v34
        ret { { u64, u64, u64 } } v35
    }

    pub fn decode_560(self !43: ptr { u64 }) -> { u64, { u64 }, { b256 } }, !9333 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_561(self), !9334
        ret { u64, { u64 }, { b256 } } v0
    }

    pub fn abi_decode_561(buffer !8239: ptr { u64 }) -> { u64, { u64 }, { b256 } }, !9335 {
        local { u64, { u64 }, { b256 } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !9336
        v1 = call abi_decode_542(buffer), !9337
        v2 = call abi_decode_345(buffer), !9338
        v3 = get_local ptr { u64, { u64 }, { b256 } }, __anon_0, !8252
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !8252
        store v0 to v5, !8252
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr { u64 }, v6, !8252
        store v1 to v7, !8252
        v8 = const u64 2
        v9 = get_elem_ptr v3, ptr { b256 }, v8, !8252
        store v2 to v9, !8252
        v10 = load v3
        ret { u64, { u64 }, { b256 } } v10
    }

    pub fn withdraw_to_market_562(amount !9339: u64, asset_type !9340: { u64 }, market !9341: { b256 }) -> (), !9344 {
        local u64 _
        local u64 __
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } ___
        local u64 ____
        local u64 _____
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { u64 } __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { { u64, ( { b256 } | { b256 } ) } } __anon_6
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } } __anon_7
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_4
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_4_
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __tuple_5
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __tuple_5_
        local { { u64, u64 }, { u64, u64 } } account
        local { b256 } asset
        local { b256 } base
        local { b256 } quote
        local { u64, ( { b256 } | { b256 } ) } user

        entry(amount: u64, asset_type: { u64 }, market: { b256 }):
        v0 = call reentrancy_guard_112(), !9347
        v1 = call this_118(), !9350
        v2 = call neq_563(market, v1), !9353
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 8, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !9356
        v9 = call withdraw_internal_544(amount, asset_type), !9359
        v10 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4, !9360
        store v9 to v10, !9360
        v11 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4, !9360
        v12 = load v11
        v13 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        store v12 to v13, !9360
        v14 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { b256 }, v15, !9360
        v17 = load v16
        v18 = get_local ptr { b256 }, asset, !9360
        store v17 to v18, !9360
        v19 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr { u64, ( { b256 } | { b256 } ) }, v20, !9360
        v22 = load v21
        v23 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9360
        store v22 to v23, !9360
        v24 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        v25 = const u64 2
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, { u64, u64 } }, v25, !9360
        v27 = load v26
        v28 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9360
        store v27 to v28, !9360
        v29 = call into_574(market), !9363
        v30 = const string<6> "config"
        v31 = ptr_to_int v30 to u64, !9365
        v32 = get_local ptr { u64, u64 }, __anon_1, !9365
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33
        store v31 to v34, !9365
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr u64, v35
        v37 = const u64 6
        store v37 to v36, !9365
        v38 = get_local ptr slice, __anon_2, !9365
        mem_copy_bytes v38, v32, 16
        v39 = load v38
        v40 = const unit ()
        v41 = const u64 0
        v42 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        v43 = const u64 18446744073709551615
        v44 = call contract_call_564(v29, v39, v40, v41, v42, v43), !9366
        v45 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5, !9367
        store v44 to v45, !9367
        v46 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5, !9367
        v47 = load v46
        v48 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        store v47 to v48, !9367
        v49 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { b256 }, v50, !9367
        v52 = load v51
        v53 = get_local ptr { b256 }, base, !9367
        store v52 to v53, !9367
        v54 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v55 = const u64 1
        v56 = get_elem_ptr v54, ptr u64, v55, !9367
        v57 = load v56
        v58 = get_local ptr u64, _, !9367
        store v57 to v58, !9367
        v59 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v60 = const u64 2
        v61 = get_elem_ptr v59, ptr { b256 }, v60, !9367
        v62 = load v61
        v63 = get_local ptr { b256 }, quote, !9367
        store v62 to v63, !9367
        v64 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v65 = const u64 3
        v66 = get_elem_ptr v64, ptr u64, v65, !9367
        v67 = load v66
        v68 = get_local ptr u64, __, !9367
        store v67 to v68, !9367
        v69 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v70 = const u64 4
        v71 = get_elem_ptr v69, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, v70, !9367
        v72 = load v71
        v73 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, ___, !9367
        store v72 to v73, !9367
        v74 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v75 = const u64 5
        v76 = get_elem_ptr v74, ptr u64, v75, !9367
        v77 = load v76
        v78 = get_local ptr u64, ____, !9367
        store v77 to v78, !9367
        v79 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v80 = const u64 6
        v81 = get_elem_ptr v79, ptr u64, v80, !9367
        v82 = load v81
        v83 = get_local ptr u64, _____, !9367
        store v82 to v83, !9367
        v84 = get_local ptr { b256 }, asset, !9368
        v85 = load v84
        v86 = get_local ptr { b256 }, base, !9369
        v87 = load v86
        v88 = call eq_325(v85, v87), !9372
        cbr v88, block1(v88), block0(), !9373

        block0():
        v89 = get_local ptr { b256 }, asset, !9374
        v90 = load v89
        v91 = get_local ptr { b256 }, quote, !9375
        v92 = load v91
        v93 = call eq_325(v90, v92), !9378
        br block1(v93), !9373

        block1(v94: bool):
        v95 = get_local ptr { u64 }, __anon_3, !5272
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !5272
        v98 = const u64 2, !5272
        store v98 to v97, !5272
        v99 = load v95
        v100 = call require_395(v94, v99), !9381
        v101 = call into_574(market), !9384
        v102 = const string<11> "deposit_for"
        v103 = ptr_to_int v102 to u64, !9385
        v104 = get_local ptr { u64, u64 }, __anon_4, !9385
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105
        store v103 to v106, !9385
        v107 = const u64 1
        v108 = get_elem_ptr v104, ptr u64, v107
        v109 = const u64 11
        store v109 to v108, !9385
        v110 = get_local ptr slice, __anon_5, !9385
        mem_copy_bytes v110, v104, 16
        v111 = load v110
        v112 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9386
        v113 = load v112
        v114 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_6
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr { u64, ( { b256 } | { b256 } ) }, v115
        store v113 to v116
        v117 = load v114
        v118 = get_local ptr { b256 }, asset, !9387
        v119 = load v118
        v120 = call into_580(v119), !9390
        v121 = const u64 18446744073709551615
        v122 = call contract_call_576(v101, v111, v117, amount, v120, v121), !9391
        v123 = get_local ptr { b256 }, asset, !9392
        v124 = load v123
        v125 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9393
        v126 = load v125
        v127 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9394
        v128 = load v127
        v129 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }, __anon_7, !9395
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr u64, v130
        store amount to v131, !9395
        v132 = const u64 1
        v133 = get_elem_ptr v129, ptr { b256 }, v132
        store v124 to v133, !9395
        v134 = const u64 2
        v135 = get_elem_ptr v129, ptr { u64, ( { b256 } | { b256 } ) }, v134
        store v126 to v135, !9395
        v136 = const u64 3
        v137 = get_elem_ptr v129, ptr { { u64, u64 }, { u64, u64 } }, v136
        store v128 to v137, !9395
        v138 = const u64 4
        v139 = get_elem_ptr v129, ptr { b256 }, v138
        store market to v139, !9395
        v140 = load v129
        v141 = call log_583(v140), !9398
        v142 = const unit ()
        ret () v142
    }

    pub fn neq_563(self !1164: { b256 }, other !1165: { b256 }) -> bool, !9399 {
        entry(self: { b256 }, other: { b256 }):
        v0 = call eq_68(self, other), !9400
        v1 = call not_27(v0), !9401
        ret bool v1
    }

    pub fn contract_call_564(contract_id !9402: b256, method_name !9403: slice, args !9404: (), coins !9405: u64, asset_id !9406: b256, gas !9407: u64) -> { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, !9410 {
        local { b256, u64, u64 } __anon_0
        local b256 __anon_1
        local mut { u64 } buffer
        local slice first_parameter
        local u64 len
        local slice params
        local u64 ptr
        local slice second_parameter

        entry(contract_id: b256, method_name: slice, args: (), coins: u64, asset_id: b256, gas: u64):
        v0 = call encode_565(method_name), !9413
        v1 = get_local ptr slice, first_parameter, !9414
        store v0 to v1, !9414
        v2 = call encode_567(args), !9417
        v3 = get_local ptr slice, second_parameter, !9418
        store v2 to v3, !9418
        v4 = get_local ptr slice, first_parameter, !9419
        v5 = load v4
        v6 = call ptr_23(v5), !9422
        v7 = asm(a: v6) -> u64 a, !9423 {
        }
        v8 = get_local ptr slice, second_parameter, !9424
        v9 = load v8
        v10 = call ptr_23(v9), !9427
        v11 = asm(a: v10) -> u64 a, !9428 {
        }
        v12 = get_local ptr { b256, u64, u64 }, __anon_0, !9429
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr b256, v13, !9429
        store contract_id to v14, !9429
        v15 = const u64 1
        v16 = get_elem_ptr v12, ptr u64, v15, !9429
        store v7 to v16, !9429
        v17 = const u64 2
        v18 = get_elem_ptr v12, ptr u64, v17, !9429
        store v11 to v18, !9429
        v19 = load v12
        v20 = call encode_569(v19), !9432
        v21 = get_local ptr slice, params, !9433
        store v20 to v21, !9433
        v22 = get_local ptr slice, params, !9434
        v23 = load v22
        v24 = call ptr_23(v23), !9437
        v25 = get_local ptr b256, __anon_1
        store asset_id to v25
        v26 = get_local ptr b256, __anon_1
        v27 = contract_call ptr ()  v24, coins, v26, gas, !9438
        v28 = load v27
        v29 = asm() -> u64 ret, !9439 {
        }
        v30 = get_local ptr u64, ptr, !9440
        store v29 to v30, !9440
        v31 = asm() -> u64 retl, !9441 {
        }
        v32 = get_local ptr u64, len, !9442
        store v31 to v32, !9442
        v33 = get_local ptr u64, ptr, !9443
        v34 = load v33
        v35 = get_local ptr u64, len, !9444
        v36 = load v35
        v37 = call from_parts_1(v34, v36), !9447
        v38 = get_local ptr { u64 }, buffer, !9448
        store v37 to v38, !9448
        v39 = get_local ptr { u64 }, buffer, !9449
        v40 = call abi_decode_571(v39), !9452
        ret { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } v40
    }

    pub fn encode_565(item !1456: slice) -> slice, !9453 {
        local { { u64, u64, u64 } } buffer

        entry(item: slice):
        v0 = call new_53(), !9454
        v1 = call abi_encode_566(item, v0), !9455
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9456
        ret slice v5
    }

    pub fn abi_encode_566(self !9457: slice, buffer !9458: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9461 {
        local { u64, u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { u64, u64, u64 } __anon_3
        local { { u64, u64, u64 } } __anon_4

        entry(self: slice, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int buffer to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64, u64 }, v2, !1476
        v4 = load v3
        v5 = asm(buffer: v4) -> { u64, u64, u64 } buffer {
        }
        v6 = get_local ptr { u64, u64, u64 }, __anon_0
        store v5 to v6
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        v10 = int_to_ptr v9 to ptr u8
        v11 = const u64 1
        v12 = get_elem_ptr v6, ptr u64, v11
        v13 = load v12
        v14 = const u64 2
        v15 = get_elem_ptr v6, ptr u64, v14
        v16 = load v15
        v17 = asm(item: self) -> { u64, u64 } item {
        }
        v18 = get_local ptr { u64, u64 }, __anon_1
        store v17 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v18, ptr u64, v19
        v21 = load v20
        v22 = const u64 8
        v23 = add v21, v22
        v24 = add v16, v23
        v25 = cmp gt v24 v13
        cbr v25, block1(), block2()

        block0(v26: ptr u8, v27: u64):
        v28 = get_local ptr slice, __anon_2
        store self to v28
        v29 = ptr_to_int v26 to u64
        v30 = add v29, v16
        v31 = int_to_ptr v30 to ptr u8
        v32 = asm(item_ptr: v28, len: v16, addr: v31, data_ptr, item_len, new_len) -> u64 new_len {
            lw     item_len item_ptr i1
            sw     addr item_len i0
            addi   addr addr i8
            lw     data_ptr item_ptr i0
            mcp    addr data_ptr item_len
            addi   new_len len i8
            add    new_len new_len item_len
        }
        v33 = ptr_to_int v26 to u64
        v34 = get_local ptr { u64, u64, u64 }, __anon_3
        v35 = const u64 0
        v36 = get_elem_ptr v34, ptr u64, v35
        store v33 to v36
        v37 = const u64 1
        v38 = get_elem_ptr v34, ptr u64, v37
        store v27 to v38
        v39 = const u64 2
        v40 = get_elem_ptr v34, ptr u64, v39
        store v32 to v40
        v41 = asm(buffer: v34) -> { u64, u64, u64 } buffer {
        }
        v42 = get_local ptr { { u64, u64, u64 } }, __anon_4, !9462
        v43 = const u64 0
        v44 = get_elem_ptr v42, ptr { u64, u64, u64 }, v43
        store v41 to v44, !9462
        v45 = load v42
        ret { { u64, u64, u64 } } v45

        block1():
        v46 = const u64 2
        v47 = mul v13, v46
        v48 = add v47, v23
        v49 = asm(new_cap: v48, old_ptr: v10, len: v16) -> ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v49, v48)

        block2():
        br block0(v10, v13)
    }

    pub fn encode_567(item !1456: ()) -> slice, !9463 {
        local { { u64, u64, u64 } } buffer

        entry(item: ()):
        v0 = call new_53(), !9464
        v1 = call abi_encode_568(item, v0), !9465
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9466
        ret slice v5
    }

    pub fn abi_encode_568(self !9467: (), buffer !9468: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9471 {
        entry(self: (), buffer: { { u64, u64, u64 } }):
        ret { { u64, u64, u64 } } buffer
    }

    pub fn encode_569(item !1456: { b256, u64, u64 }) -> slice, !9472 {
        local { { u64, u64, u64 } } buffer

        entry(item: { b256, u64, u64 }):
        v0 = call new_53(), !9473
        v1 = call abi_encode_570(item, v0), !9474
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9475
        ret slice v5
    }

    pub fn abi_encode_570(self !3525: { b256, u64, u64 }, buffer !3526: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9476 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___

        entry(self: { b256, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !3530
        v4 = load v3
        v5 = call abi_encode_162(v4, buffer), !9477
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !3534
        store v5 to v6, !3534
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { b256, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !3535
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !3536
        v13 = load v12
        v14 = call abi_encode_62(v11, v13), !9478
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !3540
        store v14 to v15, !3540
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { b256, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr u64, v18, !3541
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !3542
        v22 = load v21
        v23 = call abi_encode_62(v20, v22), !9479
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !3546
        store v23 to v24, !3546
        v25 = get_local ptr { { u64, u64, u64 } }, buffer___, !3547
        v26 = load v25
        ret { { u64, u64, u64 } } v26
    }

    pub fn abi_decode_571(buffer !9480: ptr { u64 }) -> { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, !9483 {
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_2(buffer), !9486
        v1 = call abi_decode_7(buffer), !9489
        v2 = call abi_decode_2(buffer), !9492
        v3 = call abi_decode_7(buffer), !9495
        v4 = call abi_decode_572(buffer), !9498
        v5 = call abi_decode_7(buffer), !9501
        v6 = call abi_decode_7(buffer), !9504
        v7 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __anon_0, !9505
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { b256 }, v8, !9505
        store v0 to v9, !9505
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10, !9505
        store v1 to v11, !9505
        v12 = const u64 2
        v13 = get_elem_ptr v7, ptr { b256 }, v12, !9505
        store v2 to v13, !9505
        v14 = const u64 3
        v15 = get_elem_ptr v7, ptr u64, v14, !9505
        store v3 to v15, !9505
        v16 = const u64 4
        v17 = get_elem_ptr v7, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, v16, !9505
        store v4 to v17, !9505
        v18 = const u64 5
        v19 = get_elem_ptr v7, ptr u64, v18, !9505
        store v5 to v19, !9505
        v20 = const u64 6
        v21 = get_elem_ptr v7, ptr u64, v20, !9505
        store v6 to v21, !9505
        v22 = load v7
        ret { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } v22
    }

    pub fn abi_decode_572(buffer !9506: ptr { u64 }) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, !9509 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __anon_0
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __anon_1
        local u64 __matched_value_1
        local u64 variant

        entry(buffer: ptr { u64 }):
        v0 = call decode_340(buffer), !9512
        v1 = get_local ptr u64, variant, !9513
        store v0 to v1, !9513
        v2 = get_local ptr u64, variant, !9514
        v3 = load v2
        v4 = get_local ptr u64, __matched_value_1, !9515
        store v3 to v4, !9515
        v5 = get_local ptr u64, __matched_value_1, !9514
        v6 = load v5
        v7 = const u64 0, !9516
        v8 = call eq_10(v6, v7), !9519
        cbr v8, block0(), block1(), !9517

        block0():
        v9 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __anon_0, !1268
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !1268
        v12 = const u64 0, !1268
        store v12 to v11, !1268
        v13 = load v9
        br block5(v13)

        block1():
        v14 = get_local ptr u64, __matched_value_1, !9514
        v15 = load v14
        v16 = const u64 1, !9520
        v17 = call eq_10(v15, v16), !9523
        cbr v17, block2(), block3(), !9521

        block2():
        v18 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __anon_1, !1268
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !1268
        v21 = const u64 1, !1268
        store v21 to v20, !1268
        v22 = call decode_573(buffer), !9526
        v23 = const u64 1
        v24 = const u64 1
        v25 = get_elem_ptr v18, ptr { u64, ( { b256 } | { b256 } ) }, v23, v24, !1268
        store v22 to v25, !1268
        v26 = load v18
        br block4(v26)

        block3():
        v27 = const u64 0, !9527
        revert v27, !9528

        block4(v28: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }):
        br block5(v28)

        block5(v29: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }):
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } v29
    }

    pub fn decode_573(self !43: ptr { u64 }) -> { u64, ( { b256 } | { b256 } ) }, !9529 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_339(self), !9530
        ret { u64, ( { b256 } | { b256 } ) } v0
    }

    pub fn into_574(self !9532: { b256 }) -> b256, !9535 {
        entry(self: { b256 }):
        v0 = call from_575(self), !9538
        ret b256 v0
    }

    pub fn from_575(id !9539: { b256 }) -> b256, !9542 {
        entry(id: { b256 }):
        v0 = call bits_556(id), !9545
        ret b256 v0
    }

    pub fn contract_call_576(contract_id !9402: b256, method_name !9403: slice, args !9404: { { u64, ( { b256 } | { b256 } ) } }, coins !9405: u64, asset_id !9406: b256, gas !9407: u64) -> (), !9546 {
        local { b256, u64, u64 } __anon_0
        local b256 __anon_1
        local mut { u64 } buffer
        local slice first_parameter
        local u64 len
        local slice params
        local u64 ptr
        local slice second_parameter

        entry(contract_id: b256, method_name: slice, args: { { u64, ( { b256 } | { b256 } ) } }, coins: u64, asset_id: b256, gas: u64):
        v0 = call encode_565(method_name), !9547
        v1 = get_local ptr slice, first_parameter, !9414
        store v0 to v1, !9414
        v2 = call encode_577(args), !9548
        v3 = get_local ptr slice, second_parameter, !9418
        store v2 to v3, !9418
        v4 = get_local ptr slice, first_parameter, !9419
        v5 = load v4
        v6 = call ptr_23(v5), !9549
        v7 = asm(a: v6) -> u64 a, !9423 {
        }
        v8 = get_local ptr slice, second_parameter, !9424
        v9 = load v8
        v10 = call ptr_23(v9), !9550
        v11 = asm(a: v10) -> u64 a, !9428 {
        }
        v12 = get_local ptr { b256, u64, u64 }, __anon_0, !9429
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr b256, v13, !9429
        store contract_id to v14, !9429
        v15 = const u64 1
        v16 = get_elem_ptr v12, ptr u64, v15, !9429
        store v7 to v16, !9429
        v17 = const u64 2
        v18 = get_elem_ptr v12, ptr u64, v17, !9429
        store v11 to v18, !9429
        v19 = load v12
        v20 = call encode_569(v19), !9551
        v21 = get_local ptr slice, params, !9433
        store v20 to v21, !9433
        v22 = get_local ptr slice, params, !9434
        v23 = load v22
        v24 = call ptr_23(v23), !9552
        v25 = get_local ptr b256, __anon_1
        store asset_id to v25
        v26 = get_local ptr b256, __anon_1
        v27 = contract_call ptr ()  v24, coins, v26, gas, !9438
        v28 = load v27
        v29 = asm() -> u64 ret, !9439 {
        }
        v30 = get_local ptr u64, ptr, !9440
        store v29 to v30, !9440
        v31 = asm() -> u64 retl, !9441 {
        }
        v32 = get_local ptr u64, len, !9442
        store v31 to v32, !9442
        v33 = get_local ptr u64, ptr, !9443
        v34 = load v33
        v35 = get_local ptr u64, len, !9444
        v36 = load v35
        v37 = call from_parts_1(v34, v36), !9553
        v38 = get_local ptr { u64 }, buffer, !9448
        store v37 to v38, !9448
        v39 = get_local ptr { u64 }, buffer, !9449
        v40 = call abi_decode_579(v39), !9554
        v41 = const unit ()
        ret () v41
    }

    pub fn encode_577(item !1456: { { u64, ( { b256 } | { b256 } ) } }) -> slice, !9555 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, ( { b256 } | { b256 } ) } }):
        v0 = call new_53(), !9556
        v1 = call abi_encode_578(item, v0), !9557
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9558
        ret slice v5
    }

    pub fn abi_encode_578(self !9559: { { u64, ( { b256 } | { b256 } ) } }, buffer !9560: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9563 {
        local { { u64, u64, u64 } } buffer_

        entry(self: { { u64, ( { b256 } | { b256 } ) } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, ( { b256 } | { b256 } ) } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, ( { b256 } | { b256 } ) }, v2, !9564
        v4 = load v3
        v5 = call abi_encode_303(v4, buffer), !9567
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9568
        store v5 to v6, !9568
        v7 = get_local ptr { { u64, u64, u64 } }, buffer_, !9569
        v8 = load v7
        ret { { u64, u64, u64 } } v8
    }

    pub fn abi_decode_579(_buffer !9570: ptr { u64 }) -> (), !9573 {
        entry(_buffer: ptr { u64 }):
        v0 = const unit ()
        ret () v0
    }

    pub fn into_580(self !9532: { b256 }) -> b256, !9574 {
        entry(self: { b256 }):
        v0 = call from_581(self), !9575
        ret b256 v0
    }

    pub fn from_581(id !9576: { b256 }) -> b256, !9579 {
        entry(id: { b256 }):
        v0 = call bits_582(id), !9582
        ret b256 v0
    }

    pub fn bits_582(self !9583: { b256 }) -> b256, !9586 {
        entry(self: { b256 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { b256 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr b256, v2, !5284
        v4 = load v3
        ret b256 v4
    }

    pub fn log_583(value !1547: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }) -> (), !9587 {
        entry(value: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }):
        v0 = call encode_584(value), !1551
        v1 = const u64 12551359631505241447
        log slice v0, v1, !1551
        v2 = const unit ()
        ret () v2
    }

    pub fn encode_584(item !1456: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }) -> slice, !9588 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }):
        v0 = call new_53(), !9589
        v1 = call abi_encode_585(item, v0), !9590
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9591
        ret slice v5
    }

    pub fn abi_encode_585(self !8403: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }, buffer !8404: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9593 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____

        entry(self: { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9594
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !9595
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !8412
        store v5 to v6, !8412
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { b256 }, v9, !9596
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !7576
        v13 = load v12
        v14 = call abi_encode_336(v11, v13), !9598
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9599
        store v14 to v15, !9599
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { u64, ( { b256 } | { b256 } ) }, v18, !9600
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !9601
        v22 = load v21
        v23 = call abi_encode_303(v20, v22), !9604
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !9605
        store v23 to v24, !9605
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr { { u64, u64 }, { u64, u64 } }, v27, !9606
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !6614
        v31 = load v30
        v32 = call abi_encode_306(v29, v31), !9608
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !9609
        store v32 to v33, !9609
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr { b256 }, v36, !9610
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !9611
        v40 = load v39
        v41 = call abi_encode_305(v38, v40), !9614
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !9615
        store v41 to v42, !9615
        v43 = get_local ptr { { u64, u64, u64 } }, buffer_____, !9616
        v44 = load v43
        ret { { u64, u64, u64 } } v44
    }

    pub fn account_586(user !9617: { u64, ( { b256 } | { b256 } ) }) -> { { u64, u64 }, { u64, u64 } }, !9620 {
        local { b256, u64, b256 } __anon_0

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9621
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !9621
        store v3 to v2, !9621
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9621
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !9621
        store v9 to v8, !9621
        v10 = load v0
        v11 = call get_188(v10, user), !9624
        v12 = call try_read_330(v11), !9627
        v13 = call new_331(), !9630
        v14 = call unwrap_or_329(v12, v13), !9633
        ret { { u64, u64 }, { u64, u64 } } v14
    }

    pub fn encode_587(item !1456: { { u64, u64 }, { u64, u64 } }) -> slice, !9634 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, u64 }, { u64, u64 } }):
        v0 = call new_53(), !9635
        v1 = call abi_encode_306(item, v0), !9636
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9637
        ret slice v5
    }

    pub fn config_588() -> { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, !9640 {
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __anon_0

        entry():
        v0 = get_config ptr { b256 }, BASE_ASSET, !9641
        v1 = load v0
        v2 = get_config ptr u64, BASE_ASSET_DECIMALS, !9642
        v3 = load v2
        v4 = get_config ptr { b256 }, QUOTE_ASSET, !9643
        v5 = load v4
        v6 = get_config ptr u64, QUOTE_ASSET_DECIMALS, !9644
        v7 = load v6
        v8 = call _owner_69(), !9647
        v9 = call owner_589(v8), !9650
        v10 = get_config ptr u64, PRICE_DECIMALS, !9651
        v11 = load v10
        v12 = get_config ptr u64, VERSION, !9652
        v13 = load v12
        v14 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __anon_0, !9653
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { b256 }, v15, !9653
        store v1 to v16, !9653
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17, !9653
        store v3 to v18, !9653
        v19 = const u64 2
        v20 = get_elem_ptr v14, ptr { b256 }, v19, !9653
        store v5 to v20, !9653
        v21 = const u64 3
        v22 = get_elem_ptr v14, ptr u64, v21, !9653
        store v7 to v22, !9653
        v23 = const u64 4
        v24 = get_elem_ptr v14, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, v23, !9653
        store v9 to v24, !9653
        v25 = const u64 5
        v26 = get_elem_ptr v14, ptr u64, v25, !9653
        store v11 to v26, !9653
        v27 = const u64 6
        v28 = get_elem_ptr v14, ptr u64, v27, !9653
        store v13 to v28, !9653
        v29 = load v14
        ret { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } v29
    }

    pub fn owner_589(self !9655: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }) -> { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, !9658 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __anon_0
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __anon_1
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) } __matched_value_6
        local { u64, ( { b256 } | { b256 } ) } owner

        entry(self: { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }):
        v0 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_6, !9659
        store self to v0, !9659
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_6, !9660
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9660
        v4 = load v3
        v5 = const u64 1, !9660
        v6 = call eq_10(v4, v5), !9663
        cbr v6, block0(), block1(), !9661

        block0():
        v7 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } | () ) }, __matched_value_6, !9660
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr { u64, ( { b256 } | { b256 } ) }, v8, v9
        v11 = load v10
        v12 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !9664
        store v11 to v12, !9664
        v13 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __anon_0, !1268
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !1268
        v16 = const u64 1, !1268
        store v16 to v15, !1268
        v17 = get_local ptr { u64, ( { b256 } | { b256 } ) }, owner, !9665
        v18 = load v17
        v19 = const u64 1
        v20 = const u64 1
        v21 = get_elem_ptr v13, ptr { u64, ( { b256 } | { b256 } ) }, v19, v20, !1268
        store v18 to v21, !1268
        v22 = load v13
        br block2(v22)

        block1():
        v23 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __anon_1, !1268
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !1268
        v26 = const u64 0, !1268
        store v26 to v25, !1268
        v27 = load v23
        br block2(v27)

        block2(v28: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }):
        ret { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } v28
    }

    pub fn encode_590(item !1456: { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }) -> slice, !9666 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }):
        v0 = call new_53(), !9667
        v1 = call abi_encode_591(item, v0), !9668
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9669
        ret slice v5
    }

    pub fn abi_encode_591(self !9670: { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, buffer !9671: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9674 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______

        entry(self: { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { b256 }, v2, !9675
        v4 = load v3
        v5 = call abi_encode_336(v4, buffer), !9678
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9679
        store v5 to v6, !9679
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr u64, v9, !9680
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9681
        v13 = load v12
        v14 = call abi_encode_453(v11, v13), !9684
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9685
        store v14 to v15, !9685
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { b256 }, v18, !9686
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !9687
        v22 = load v21
        v23 = call abi_encode_336(v20, v22), !9690
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !9691
        store v23 to v24, !9691
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr u64, v27, !9692
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !9693
        v31 = load v30
        v32 = call abi_encode_453(v29, v31), !9696
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !9697
        store v32 to v33, !9697
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, v36, !9698
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !9699
        v40 = load v39
        v41 = call abi_encode_592(v38, v40), !9702
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !9703
        store v41 to v42, !9703
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u64, v45, !9704
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !9705
        v49 = load v48
        v50 = call abi_encode_453(v47, v49), !9708
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !9709
        store v50 to v51, !9709
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u64, v54, !9710
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !9711
        v58 = load v57
        v59 = call abi_encode_453(v56, v58), !9714
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !9715
        store v59 to v60, !9715
        v61 = get_local ptr { { u64, u64, u64 } }, buffer_______, !9716
        v62 = load v61
        ret { { u64, u64, u64 } } v62
    }

    pub fn abi_encode_592(self !9717: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, buffer !9718: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9720 {
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { u64, ( { b256 } | { b256 } ) } value

        entry(self: { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_1, !9721
        store self to v0, !9721
        v1 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_1, !9722
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9722
        v4 = load v3
        v5 = const u64 0, !9722
        v6 = call eq_10(v4, v5), !9725
        cbr v6, block0(), block1(), !9723

        block0():
        v7 = const u64 0, !9726
        v8 = call abi_encode_62(v7, buffer), !9729
        br block5(v8)

        block1():
        v9 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_1, !9722
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !9722
        v12 = load v11
        v13 = const u64 1, !9722
        v14 = call eq_10(v12, v13), !9732
        cbr v14, block2(), block3(), !9730

        block2():
        v15 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, __matched_value_1, !9722
        v16 = const u64 1
        v17 = const u64 1
        v18 = get_elem_ptr v15, ptr { u64, ( { b256 } | { b256 } ) }, v16, v17
        v19 = load v18
        v20 = get_local ptr { u64, ( { b256 } | { b256 } ) }, value, !4904
        store v19 to v20, !4904
        v21 = const u64 1, !9733
        v22 = call abi_encode_62(v21, buffer), !9736
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !9737
        store v22 to v23, !9737
        v24 = get_local ptr { u64, ( { b256 } | { b256 } ) }, value, !9738
        v25 = load v24
        v26 = get_local ptr { { u64, u64, u64 } }, buffer_, !9739
        v27 = load v26
        v28 = call abi_encode_303(v25, v27), !9742
        v29 = get_local ptr { { u64, u64, u64 } }, buffer__, !9743
        store v28 to v29, !9743
        v30 = get_local ptr { { u64, u64, u64 } }, buffer__, !9744
        v31 = load v30
        br block4(v31)

        block3():
        v32 = const u64 14757395258967588866, !9721
        revert v32, !9721

        block4(v33: { { u64, u64, u64 } }):
        br block5(v33)

        block5(v34: { { u64, u64, u64 } }):
        v35 = get_local ptr { { u64, u64, u64 } }, buffer___, !9745
        store v34 to v35, !9745
        v36 = get_local ptr { { u64, u64, u64 } }, buffer___, !9746
        v37 = load v36
        ret { { u64, u64, u64 } } v37
    }

    pub fn get_epoch_593() -> { u64, u64 }, !9749 {
        local { u64, u64 } __anon_0

        entry():
        v0 = call read_epoch_378(), !9752
        v1 = call read_epoch_duration_438(), !9755
        v2 = get_local ptr { u64, u64 }, __anon_0, !9756
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !9756
        store v0 to v4, !9756
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !9756
        store v1 to v6, !9756
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub fn encode_594(item !1456: { u64, u64 }) -> slice, !9757 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, u64 }):
        v0 = call new_53(), !9758
        v1 = call abi_encode_163(item, v0), !9759
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9760
        ret slice v5
    }

    pub fn market_order_595(order !9761: b256) -> { u64, ( () | bool ) }, !9764 {
        entry(order: b256):
        v0 = call market_order_166(order), !9767
        ret { u64, ( () | bool ) } v0
    }

    pub fn encode_596(item !1456: { u64, ( () | bool ) }) -> slice, !9768 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( () | bool ) }):
        v0 = call new_53(), !9769
        v1 = call abi_encode_597(item, v0), !9770
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9771
        ret slice v5
    }

    pub fn abi_encode_597(self !9717: { u64, ( () | bool ) }, buffer !9718: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9772 {
        local { u64, ( () | bool ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local bool value

        entry(self: { u64, ( () | bool ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( () | bool ) }, __matched_value_1, !9721
        store self to v0, !9721
        v1 = get_local ptr { u64, ( () | bool ) }, __matched_value_1, !9722
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9722
        v4 = load v3
        v5 = const u64 0, !9722
        v6 = call eq_10(v4, v5), !9773
        cbr v6, block0(), block1(), !9723

        block0():
        v7 = const u64 0, !9726
        v8 = call abi_encode_62(v7, buffer), !9774
        br block5(v8)

        block1():
        v9 = get_local ptr { u64, ( () | bool ) }, __matched_value_1, !9722
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !9722
        v12 = load v11
        v13 = const u64 1, !9722
        v14 = call eq_10(v12, v13), !9775
        cbr v14, block2(), block3(), !9730

        block2():
        v15 = get_local ptr { u64, ( () | bool ) }, __matched_value_1, !9722
        v16 = const u64 1
        v17 = const u64 1
        v18 = get_elem_ptr v15, ptr bool, v16, v17
        v19 = load v18
        v20 = get_local ptr bool, value, !4904
        store v19 to v20, !4904
        v21 = const u64 1, !9733
        v22 = call abi_encode_62(v21, buffer), !9776
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !9737
        store v22 to v23, !9737
        v24 = get_local ptr bool, value, !9738
        v25 = load v24
        v26 = get_local ptr { { u64, u64, u64 } }, buffer_, !9739
        v27 = load v26
        v28 = call abi_encode_52(v25, v27), !9777
        v29 = get_local ptr { { u64, u64, u64 } }, buffer__, !9743
        store v28 to v29, !9743
        v30 = get_local ptr { { u64, u64, u64 } }, buffer__, !9744
        v31 = load v30
        br block4(v31)

        block3():
        v32 = const u64 14757395258967588866, !9721
        revert v32, !9721

        block4(v33: { { u64, u64, u64 } }):
        br block5(v33)

        block5(v34: { { u64, u64, u64 } }):
        v35 = get_local ptr { { u64, u64, u64 } }, buffer___, !9745
        store v34 to v35, !9745
        v36 = get_local ptr { { u64, u64, u64 } }, buffer___, !9746
        v37 = load v36
        ret { { u64, u64, u64 } } v37
    }

    pub fn matcher_fee_598() -> u64, !9780 {
        entry():
        v0 = call read_matcher_fee_485(), !9783
        ret u64 v0
    }

    pub fn encode_599(item !1456: u64) -> slice, !9784 {
        local { { u64, u64, u64 } } buffer

        entry(item: u64):
        v0 = call new_53(), !9785
        v1 = call abi_encode_62(item, v0), !9786
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9787
        ret slice v5
    }

    pub fn min_order_price_600() -> u64, !9790 {
        entry():
        v0 = call read_min_order_price_401(), !9793
        ret u64 v0
    }

    pub fn min_order_size_601() -> u64, !9796 {
        entry():
        v0 = call read_min_order_size_311(), !9799
        ret u64 v0
    }

    pub fn order_602(order !9800: b256) -> { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, !9803 {
        local { b256, u64, b256 } __anon_0

        entry(order: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9804
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !9804
        store v3 to v2, !9804
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9804
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !9804
        store v9 to v8, !9804
        v10 = load v0
        v11 = call get_131(v10, order), !9807
        v12 = call try_read_125(v11), !9810
        ret { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } v12
    }

    pub fn encode_603(item !1456: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }) -> slice, !9811 {
        local { { u64, u64, u64 } } buffer

        entry(item: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }):
        v0 = call new_53(), !9812
        v1 = call abi_encode_604(item, v0), !9813
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !9814
        ret slice v5
    }

    pub fn abi_encode_604(self !9717: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, buffer !9718: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9815 {
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } __matched_value_1
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } value

        entry(self: { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_1, !9721
        store self to v0, !9721
        v1 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_1, !9722
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !9722
        v4 = load v3
        v5 = const u64 0, !9722
        v6 = call eq_10(v4, v5), !9816
        cbr v6, block0(), block1(), !9723

        block0():
        v7 = const u64 0, !9726
        v8 = call abi_encode_62(v7, buffer), !9817
        br block5(v8)

        block1():
        v9 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_1, !9722
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !9722
        v12 = load v11
        v13 = const u64 1, !9722
        v14 = call eq_10(v12, v13), !9818
        cbr v14, block2(), block3(), !9730

        block2():
        v15 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, __matched_value_1, !9722
        v16 = const u64 1
        v17 = const u64 1
        v18 = get_elem_ptr v15, ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, v16, v17
        v19 = load v18
        v20 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, value, !4904
        store v19 to v20, !4904
        v21 = const u64 1, !9733
        v22 = call abi_encode_62(v21, buffer), !9819
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !9737
        store v22 to v23, !9737
        v24 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, value, !9738
        v25 = load v24
        v26 = get_local ptr { { u64, u64, u64 } }, buffer_, !9739
        v27 = load v26
        v28 = call abi_encode_605(v25, v27), !9820
        v29 = get_local ptr { { u64, u64, u64 } }, buffer__, !9743
        store v28 to v29, !9743
        v30 = get_local ptr { { u64, u64, u64 } }, buffer__, !9744
        v31 = load v30
        br block4(v31)

        block3():
        v32 = const u64 14757395258967588866, !9721
        revert v32, !9721

        block4(v33: { { u64, u64, u64 } }):
        br block5(v33)

        block5(v34: { { u64, u64, u64 } }):
        v35 = get_local ptr { { u64, u64, u64 } }, buffer___, !9745
        store v34 to v35, !9745
        v36 = get_local ptr { { u64, u64, u64 } }, buffer___, !9746
        v37 = load v36
        ret { { u64, u64, u64 } } v37
    }

    pub fn abi_encode_605(self !9821: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, buffer !9822: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9825 {
        local { { u64, u64, u64 } } buffer_
        local { { u64, u64, u64 } } buffer__
        local { { u64, u64, u64 } } buffer___
        local { { u64, u64, u64 } } buffer____
        local { { u64, u64, u64 } } buffer_____
        local { { u64, u64, u64 } } buffer______
        local { { u64, u64, u64 } } buffer_______
        local { { u64, u64, u64 } } buffer________
        local { { u64, u64, u64 } } buffer_________
        local { { u64, u64, u64 } } buffer__________

        entry(self: { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3574
        v4 = load v3
        v5 = call abi_encode_62(v4, buffer), !9827
        v6 = get_local ptr { { u64, u64, u64 } }, buffer_, !9828
        store v5 to v6, !9828
        v7 = ptr_to_int self to u64
        v8 = int_to_ptr v7 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v9 = const u64 1
        v10 = get_elem_ptr v8, ptr { u64 }, v9, !3177
        v11 = load v10
        v12 = get_local ptr { { u64, u64, u64 } }, buffer_, !9829
        v13 = load v12
        v14 = call abi_encode_606(v11, v13), !9832
        v15 = get_local ptr { { u64, u64, u64 } }, buffer__, !9833
        store v14 to v15, !9833
        v16 = ptr_to_int self to u64
        v17 = int_to_ptr v16 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v18 = const u64 2
        v19 = get_elem_ptr v17, ptr { u64 }, v18, !3171
        v20 = load v19
        v21 = get_local ptr { { u64, u64, u64 } }, buffer__, !9834
        v22 = load v21
        v23 = call abi_encode_418(v20, v22), !9837
        v24 = get_local ptr { { u64, u64, u64 } }, buffer___, !9838
        store v23 to v24, !9838
        v25 = ptr_to_int self to u64
        v26 = int_to_ptr v25 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v27 = const u64 3
        v28 = get_elem_ptr v26, ptr { u64, ( { b256 } | { b256 } ) }, v27, !2464
        v29 = load v28
        v30 = get_local ptr { { u64, u64, u64 } }, buffer___, !8878
        v31 = load v30
        v32 = call abi_encode_303(v29, v31), !9841
        v33 = get_local ptr { { u64, u64, u64 } }, buffer____, !9842
        store v32 to v33, !9842
        v34 = ptr_to_int self to u64
        v35 = int_to_ptr v34 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v36 = const u64 4
        v37 = get_elem_ptr v35, ptr u64, v36, !3575
        v38 = load v37
        v39 = get_local ptr { { u64, u64, u64 } }, buffer____, !9843
        v40 = load v39
        v41 = call abi_encode_62(v38, v40), !9846
        v42 = get_local ptr { { u64, u64, u64 } }, buffer_____, !9847
        store v41 to v42, !9847
        v43 = ptr_to_int self to u64
        v44 = int_to_ptr v43 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v45 = const u64 5
        v46 = get_elem_ptr v44, ptr u64, v45, !2445
        v47 = load v46
        v48 = get_local ptr { { u64, u64, u64 } }, buffer_____, !9848
        v49 = load v48
        v50 = call abi_encode_453(v47, v49), !9851
        v51 = get_local ptr { { u64, u64, u64 } }, buffer______, !9852
        store v50 to v51, !9852
        v52 = ptr_to_int self to u64
        v53 = int_to_ptr v52 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v54 = const u64 6
        v55 = get_elem_ptr v53, ptr u64, v54, !6426
        v56 = load v55
        v57 = get_local ptr { { u64, u64, u64 } }, buffer______, !9853
        v58 = load v57
        v59 = call abi_encode_62(v56, v58), !9856
        v60 = get_local ptr { { u64, u64, u64 } }, buffer_______, !9857
        store v59 to v60, !9857
        v61 = ptr_to_int self to u64
        v62 = int_to_ptr v61 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v63 = const u64 7
        v64 = get_elem_ptr v62, ptr u64, v63, !3588
        v65 = load v64
        v66 = get_local ptr { { u64, u64, u64 } }, buffer_______, !9746
        v67 = load v66
        v68 = call abi_encode_62(v65, v67), !9860
        v69 = get_local ptr { { u64, u64, u64 } }, buffer________, !9861
        store v68 to v69, !9861
        v70 = ptr_to_int self to u64
        v71 = int_to_ptr v70 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v72 = const u64 8
        v73 = get_elem_ptr v71, ptr u64, v72, !4250
        v74 = load v73
        v75 = get_local ptr { { u64, u64, u64 } }, buffer________, !9862
        v76 = load v75
        v77 = call abi_encode_62(v74, v76), !9865
        v78 = get_local ptr { { u64, u64, u64 } }, buffer_________, !9866
        store v77 to v78, !9866
        v79 = ptr_to_int self to u64
        v80 = int_to_ptr v79 to ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }
        v81 = const u64 9
        v82 = get_elem_ptr v80, ptr u64, v81, !4251
        v83 = load v82
        v84 = get_local ptr { { u64, u64, u64 } }, buffer_________, !9867
        v85 = load v84
        v86 = call abi_encode_62(v83, v85), !9870
        v87 = get_local ptr { { u64, u64, u64 } }, buffer__________, !9871
        store v86 to v87, !9871
        v88 = get_local ptr { { u64, u64, u64 } }, buffer__________, !9872
        v89 = load v88
        ret { { u64, u64, u64 } } v89
    }

    pub fn abi_encode_606(self !3141: { u64 }, buffer !35: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !9874 {
        local { u64 } __matched_value_1
        local { { u64, u64, u64 } } buffer_

        entry(self: { u64 }, buffer: { { u64, u64, u64 } }):
        v0 = get_local ptr { u64 }, __matched_value_1, !9875
        store self to v0, !9875
        v1 = get_local ptr { u64 }, __matched_value_1, !3146
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !3146
        v4 = load v3
        v5 = const u64 0, !3146
        v6 = call eq_10(v4, v5), !9878
        cbr v6, block0(), block1(), !9876

        block0():
        v7 = const u64 0, !9879
        v8 = call abi_encode_62(v7, buffer), !9882
        br block5(v8)

        block1():
        v9 = get_local ptr { u64 }, __matched_value_1, !3146
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10, !3146
        v12 = load v11
        v13 = const u64 1, !3146
        v14 = call eq_10(v12, v13), !9885
        cbr v14, block2(), block3(), !9883

        block2():
        v15 = const u64 1, !9886
        v16 = call abi_encode_62(v15, buffer), !9888
        br block4(v16)

        block3():
        v17 = const u64 14757395258967588866, !9875
        revert v17, !9875

        block4(v18: { { u64, u64, u64 } }):
        br block5(v18)

        block5(v19: { { u64, u64, u64 } }):
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !9889
        store v19 to v20, !9889
        v21 = get_local ptr { { u64, u64, u64 } }, buffer_, !9890
        v22 = load v21
        ret { { u64, u64, u64 } } v22
    }

    pub fn decode_607(self !43: ptr { u64 }) -> { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, !9891 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_608(self), !9892
        ret { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 } v0
    }

    pub fn abi_decode_608(buffer !9893: ptr { u64 }) -> { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, !9896 {
        local { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_349(buffer), !9899
        v1 = call abi_decode_339(buffer), !9902
        v2 = call abi_decode_341(buffer), !9905
        v3 = call abi_decode_7(buffer), !9908
        v4 = call abi_decode_341(buffer), !9911
        v5 = get_local ptr { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 }, __anon_0, !9912
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { u64 }, v6, !9912
        store v0 to v7, !9912
        v8 = const u64 1
        v9 = get_elem_ptr v5, ptr { u64, ( { b256 } | { b256 } ) }, v8, !9912
        store v1 to v9, !9912
        v10 = const u64 2
        v11 = get_elem_ptr v5, ptr u64, v10, !9912
        store v2 to v11, !9912
        v12 = const u64 3
        v13 = get_elem_ptr v5, ptr u64, v12, !9912
        store v3 to v13, !9912
        v14 = const u64 4
        v15 = get_elem_ptr v5, ptr u64, v14, !9912
        store v4 to v15, !9912
        v16 = load v5
        ret { { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64 } v16
    }

    pub fn order_id_609(order_type !9913: { u64 }, owner !9914: { u64, ( { b256 } | { b256 } ) }, price !9915: u64, block_height !9916: u64, order_height !9917: u64) -> b256, !9920 {
        local { u64 } __anon_0
        local { u64 } asset_type

        entry(order_type: { u64 }, owner: { u64, ( { b256 } | { b256 } ) }, price: u64, block_height: u64, order_height: u64):
        v0 = get_local ptr { u64 }, __anon_0, !4280
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !4280
        v3 = const u64 0, !4280
        store v3 to v2, !4280
        v4 = load v0
        v5 = get_local ptr { u64 }, asset_type, !9921
        store v4 to v5, !9921
        v6 = get_local ptr { u64 }, asset_type, !9922
        v7 = load v6
        v8 = const u64 1, !9923
        v9 = const u64 0, !9924
        v10 = const u64 0, !9925
        v11 = const u64 0, !9926
        v12 = const u64 0, !9927
        v13 = call new_394(v8, v7, order_type, owner, price, block_height, order_height, v9, v10, v11, v12), !9930
        v14 = call id_402(v13), !9933
        ret b256 v14
    }

    pub fn protocol_fee_610() -> { { u64, u64 }, u64 }, !9936 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9937
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !9937
        store v3 to v2, !9937
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9937
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !9937
        store v9 to v8, !9937
        v10 = load v0
        v11 = call load_vec_611(v10), !9940
        ret { { u64, u64 }, u64 } v11
    }

    pub fn load_vec_611(self !9941: { b256, u64, b256 }) -> { { u64, u64 }, u64 }, !9944 {
        local bool _
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local u64 __matched_value_3
        local u64 bytes
        local mut u64 i
        local b256 key_for_storage
        local u64 len
        local u64 len_bytes
        local u64 new_vec
        local u64 number_of_slots
        local u64 ptr
        local u64 size_V_bytes

        entry(self: { b256, u64, b256 }):
        v0 = call field_id_381(self), !9947
        v1 = const u64 0, !9948
        v2 = call read_257(v0, v1), !9951
        v3 = const u64 0, !9952
        v4 = call unwrap_or_268(v2, v3), !9955
        v5 = get_local ptr u64, __matched_value_3, !9956
        store v4 to v5, !9956
        v6 = get_local ptr u64, __matched_value_3, !9953
        v7 = load v6
        v8 = const u64 0, !9957
        v9 = call eq_10(v7, v8), !9960
        cbr v9, block0(), block1(), !9958

        block0():
        v10 = call new_612(), !9963
        br block8(v10)

        block1():
        v11 = get_local ptr u64, __matched_value_3, !9953
        v12 = load v11
        v13 = get_local ptr u64, len, !9964
        store v12 to v13, !9964
        v14 = get_local ptr u64, size_V_bytes, !9965
        v15 = const u64 24
        store v15 to v14, !9965
        v16 = get_local ptr u64, size_V_bytes, !9966
        v17 = load v16
        v18 = const u64 0, !9967
        v19 = call neq_26(v17, v18), !9970
        v20 = call assert_223(v19), !9973
        v21 = get_local ptr u64, size_V_bytes, !9974
        v22 = load v21
        v23 = const u64 8, !9975
        v24 = call lt_86(v22, v23), !9978
        cbr v24, block2(), block3(), !9976

        block2():
        v25 = get_local ptr u64, len, !9979
        v26 = load v25
        v27 = const u64 8, !9980
        v28 = call multiply_39(v26, v27), !9983
        br block4(v28)

        block3():
        v29 = get_local ptr u64, len, !9984
        v30 = load v29
        v31 = get_local ptr u64, size_V_bytes, !9985
        v32 = load v31
        v33 = call multiply_39(v30, v32), !9988
        br block4(v33)

        block4(v34: u64):
        v35 = get_local ptr u64, bytes, !9989
        store v34 to v35, !9989
        v36 = get_local ptr u64, bytes, !9990
        v37 = load v36
        v38 = const u64 31, !9991
        v39 = call add_38(v37, v38), !9994
        v40 = const u64 5, !9995
        v41 = call rsh_37(v39, v40), !9998
        v42 = get_local ptr u64, number_of_slots, !9999
        store v41 to v42, !9999
        v43 = get_local ptr u64, number_of_slots, !10000
        v44 = load v43
        v45 = const u64 32, !10001
        v46 = call multiply_39(v44, v45), !10004
        v47 = call alloc_bytes_136(v46), !10007
        v48 = get_local ptr u64, ptr, !10008
        store v47 to v48, !10008
        v49 = call field_id_381(self), !10011
        v50 = call sha256_279(v49), !10014
        v51 = get_local ptr u64, ptr, !10015
        v52 = load v51
        v53 = get_local ptr u64, number_of_slots, !10016
        v54 = load v53
        v55 = get_local ptr b256, key_for_storage, !10017
        store v50 to v55, !10017
        v56 = int_to_ptr v52 to ptr b256, !10017
        v57 = state_load_quad_word v56, key v55, v54, !10017
        v58 = get_local ptr bool, _, !10018
        store v57 to v58, !10018
        v59 = get_local ptr u64, size_V_bytes, !10019
        v60 = load v59
        v61 = const u64 8, !10020
        v62 = call lt_86(v60, v61), !10023
        cbr v62, block5(), block6(), !10021

        block5():
        v63 = get_local ptr u64, len, !10024
        v64 = load v63
        v65 = get_local ptr u64, size_V_bytes, !10025
        v66 = load v65
        v67 = call multiply_39(v64, v66), !10028
        v68 = get_local ptr u64, len_bytes, !10029
        store v67 to v68, !10029
        v69 = get_local ptr u64, len_bytes, !10030
        v70 = load v69
        v71 = call alloc_bytes_136(v70), !10033
        v72 = get_local ptr u64, new_vec, !10034
        store v71 to v72, !10034
        v73 = get_local ptr u64, i, !10035
        v74 = const u64 0, !10036
        store v74 to v73, !10035
        br while()

        while():
        v75 = get_local ptr u64, i, !10037
        v76 = load v75
        v77 = get_local ptr u64, len, !10038
        v78 = load v77
        v79 = call lt_86(v76, v78), !10041
        cbr v79, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v80 = get_local ptr u64, ptr, !10042
        v81 = load v80
        v82 = get_local ptr u64, i, !10043
        v83 = load v82
        v84 = const u64 8, !10044
        v85 = call multiply_39(v84, v83), !10047
        v86 = call add_uint_offset_151(v81, v85), !10050
        v87 = get_local ptr u64, new_vec, !10051
        v88 = load v87
        v89 = get_local ptr u64, i, !10052
        v90 = load v89
        v91 = call add_517(v88, v90), !10055
        v92 = get_local ptr u64, size_V_bytes, !10056
        v93 = load v92
        v94 = call copy_bytes_to_146(v86, v91, v93), !10059
        v95 = get_local ptr u64, i, !10060
        v96 = load v95
        v97 = const u64 1, !10061
        v98 = call add_38(v96, v97), !10064
        v99 = get_local ptr u64, i, !10062
        store v98 to v99, !10062
        br while()

        end_while():
        v100 = get_local ptr u64, new_vec, !10065
        v101 = load v100
        v102 = get_local ptr u64, len_bytes, !10066
        v103 = load v102
        v104 = get_local ptr { u64, u64 }, __anon_0, !10067
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105, !10067
        store v101 to v106, !10067
        v107 = const u64 1
        v108 = get_elem_ptr v104, ptr u64, v107, !10067
        store v103 to v108, !10067
        v109 = asm(ptr: v104) -> slice ptr, !10068 {
        }
        v110 = call from_614(v109), !10071
        br block7(v110)

        block6():
        v111 = get_local ptr u64, ptr, !10072
        v112 = load v111
        v113 = get_local ptr u64, bytes, !10073
        v114 = load v113
        v115 = get_local ptr { u64, u64 }, __anon_1, !10074
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr u64, v116, !10074
        store v112 to v117, !10074
        v118 = const u64 1
        v119 = get_elem_ptr v115, ptr u64, v118, !10074
        store v114 to v119, !10074
        v120 = asm(ptr: v115) -> slice ptr, !10075 {
        }
        v121 = call from_614(v120), !10078
        br block7(v121)

        block7(v122: { { u64, u64 }, u64 }):
        br block8(v122)

        block8(v123: { { u64, u64 }, u64 }):
        ret { { u64, u64 }, u64 } v123
    }

    pub fn new_612() -> { { u64, u64 }, u64 }, !10081 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_613(), !10084
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !10085
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !10085
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !10086
        store v6 to v5, !10085
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_613() -> { u64, u64 }, !10089 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !10090
        v1 = call alloc_510(v0), !10093
        v2 = get_local ptr { u64, u64 }, __anon_0, !10094
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !10094
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !10095
        store v7 to v6, !10094
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn from_614(slice !10096: slice) -> { { u64, u64 }, u64 }, !10099 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_615(slice), !10102
        v1 = call len_616(slice), !10105
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !10106
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !10106
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !10106
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn from_615(slice !10107: slice) -> { u64, u64 }, !10110 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call len_616(slice), !10113
        v1 = get_local ptr u64, cap, !10114
        store v0 to v1, !10114
        v2 = get_local ptr u64, cap, !10115
        v3 = load v2
        v4 = call alloc_510(v3), !10118
        v5 = get_local ptr u64, ptr, !10119
        store v4 to v5, !10119
        v6 = get_local ptr u64, cap, !10120
        v7 = load v6
        v8 = const u64 0, !10121
        v9 = call gt_89(v7, v8), !10124
        cbr v9, block0(), block1(), !10122

        block0():
        v10 = call ptr_23(slice), !10127
        v11 = get_local ptr u64, ptr, !10128
        v12 = load v11
        v13 = get_local ptr u64, cap, !10129
        v14 = load v13
        v15 = call copy_to_516(v10, v12, v14), !10132
        v16 = const unit ()
        br block2(v16)

        block1():
        v17 = const unit ()
        br block2(v17)

        block2(v18: ()):
        v19 = get_local ptr u64, ptr, !10133
        v20 = load v19
        v21 = get_local ptr u64, cap, !10134
        v22 = load v21
        v23 = get_local ptr { u64, u64 }, __anon_0, !10135
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v20 to v25, !10135
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v22 to v27, !10135
        v28 = load v23
        ret { u64, u64 } v28
    }

    pub fn len_616(self !1486: slice) -> u64, !10136 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_24(self), !10137
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1493
        v4 = load v3
        v5 = const u64 24
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn encode_617(item !1456: { { u64, u64 }, u64 }) -> slice, !10138 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, u64 }, u64 }):
        v0 = call new_53(), !10139
        v1 = call abi_encode_533(item, v0), !10140
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !10141
        ret slice v5
    }

    pub fn protocol_fee_user_618(user !10142: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64 }, !10145 {
        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call protocol_fee_user_365(user), !10148
        ret { u64, u64 } v0
    }

    pub fn decode_619(self !43: ptr { u64 }) -> { u64, { u64, ( { b256 } | { b256 } ) } }, !10149 {
        entry(self: ptr { u64 }):
        v0 = call abi_decode_620(self), !10150
        ret { u64, { u64, ( { b256 } | { b256 } ) } } v0
    }

    pub fn abi_decode_620(buffer !8313: ptr { u64 }) -> { u64, { u64, ( { b256 } | { b256 } ) } }, !10151 {
        local { u64, { u64, ( { b256 } | { b256 } ) } } __anon_0

        entry(buffer: ptr { u64 }):
        v0 = call abi_decode_341(buffer), !10152
        v1 = call abi_decode_339(buffer), !10153
        v2 = get_local ptr { u64, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !8323
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !8323
        store v0 to v4, !8323
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr { u64, ( { b256 } | { b256 } ) }, v5, !8323
        store v1 to v6, !8323
        v7 = load v2
        ret { u64, { u64, ( { b256 } | { b256 } ) } } v7
    }

    pub fn protocol_fee_user_amount_621(amount !10154: u64, user !10155: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64 }, !10158 {
        entry(amount: u64, user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call protocol_fee_user_amount_622(amount, user), !10161
        ret { u64, u64 } v0
    }

    fn protocol_fee_user_amount_622(amount !10162: u64, user !10163: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64 }, !10166 {
        local { u64, u64 } __anon_0
        local { u64, u64 } protocol_fee

        entry(amount: u64, user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call protocol_fee_user_365(user), !10169
        v1 = get_local ptr { u64, u64 }, protocol_fee, !10170
        store v0 to v1, !10170
        v2 = get_local ptr { u64, u64 }, protocol_fee, !10171
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !10172
        v5 = load v4
        v6 = call multiply_39(amount, v5), !10175
        v7 = const u64 10000, !4258
        v8 = call divide_232(v6, v7), !10178
        v9 = get_local ptr { u64, u64 }, protocol_fee, !10179
        v10 = const u64 1
        v11 = get_elem_ptr v9, ptr u64, v10, !10180
        v12 = load v11
        v13 = call multiply_39(amount, v12), !10183
        v14 = call divide_232(v13, v7), !10186
        v15 = get_local ptr { u64, u64 }, __anon_0, !10187
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !10187
        store v8 to v17, !10187
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18, !10187
        store v14 to v19, !10187
        v20 = load v15
        ret { u64, u64 } v20
    }

    pub fn user_order_height_623(user !10188: { u64, ( { b256 } | { b256 } ) }) -> u64, !10191 {
        local { b256, u64, b256 } __anon_0

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10192
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !10192
        store v3 to v2, !10192
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10192
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !10192
        store v9 to v8, !10192
        v10 = load v0
        v11 = call get_398(v10, user), !10195
        v12 = call try_read_312(v11), !10198
        v13 = const u64 0, !10199
        v14 = call unwrap_or_268(v12, v13), !10202
        ret u64 v14
    }

    pub fn user_orders_624(user !10203: { u64, ( { b256 } | { b256 } ) }) -> { { u64, u64 }, u64 }, !10206 {
        local { b256, u64, b256 } __anon_0

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10207
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !10207
        store v3 to v2, !10207
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10207
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !10207
        store v9 to v8, !10207
        v10 = load v0
        v11 = call get_270(v10, user), !10210
        v12 = call load_vec_625(v11), !10213
        ret { { u64, u64 }, u64 } v12
    }

    pub fn load_vec_625(self !9941: { b256, u64, b256 }) -> { { u64, u64 }, u64 }, !10214 {
        local bool _
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_1
        local u64 __matched_value_3
        local u64 bytes
        local mut u64 i
        local b256 key_for_storage
        local u64 len
        local u64 len_bytes
        local u64 new_vec
        local u64 number_of_slots
        local u64 ptr
        local u64 size_V_bytes

        entry(self: { b256, u64, b256 }):
        v0 = call field_id_269(self), !10215
        v1 = const u64 0, !9948
        v2 = call read_257(v0, v1), !10216
        v3 = const u64 0, !9952
        v4 = call unwrap_or_268(v2, v3), !10217
        v5 = get_local ptr u64, __matched_value_3, !9956
        store v4 to v5, !9956
        v6 = get_local ptr u64, __matched_value_3, !9953
        v7 = load v6
        v8 = const u64 0, !9957
        v9 = call eq_10(v7, v8), !10218
        cbr v9, block0(), block1(), !9958

        block0():
        v10 = call new_626(), !10219
        br block8(v10)

        block1():
        v11 = get_local ptr u64, __matched_value_3, !9953
        v12 = load v11
        v13 = get_local ptr u64, len, !9964
        store v12 to v13, !9964
        v14 = get_local ptr u64, size_V_bytes, !9965
        v15 = const u64 32
        store v15 to v14, !9965
        v16 = get_local ptr u64, size_V_bytes, !9966
        v17 = load v16
        v18 = const u64 0, !9967
        v19 = call neq_26(v17, v18), !10220
        v20 = call assert_223(v19), !10221
        v21 = get_local ptr u64, size_V_bytes, !9974
        v22 = load v21
        v23 = const u64 8, !9975
        v24 = call lt_86(v22, v23), !10222
        cbr v24, block2(), block3(), !9976

        block2():
        v25 = get_local ptr u64, len, !9979
        v26 = load v25
        v27 = const u64 8, !9980
        v28 = call multiply_39(v26, v27), !10223
        br block4(v28)

        block3():
        v29 = get_local ptr u64, len, !9984
        v30 = load v29
        v31 = get_local ptr u64, size_V_bytes, !9985
        v32 = load v31
        v33 = call multiply_39(v30, v32), !10224
        br block4(v33)

        block4(v34: u64):
        v35 = get_local ptr u64, bytes, !9989
        store v34 to v35, !9989
        v36 = get_local ptr u64, bytes, !9990
        v37 = load v36
        v38 = const u64 31, !9991
        v39 = call add_38(v37, v38), !10225
        v40 = const u64 5, !9995
        v41 = call rsh_37(v39, v40), !10226
        v42 = get_local ptr u64, number_of_slots, !9999
        store v41 to v42, !9999
        v43 = get_local ptr u64, number_of_slots, !10000
        v44 = load v43
        v45 = const u64 32, !10001
        v46 = call multiply_39(v44, v45), !10227
        v47 = call alloc_bytes_136(v46), !10228
        v48 = get_local ptr u64, ptr, !10008
        store v47 to v48, !10008
        v49 = call field_id_269(self), !10229
        v50 = call sha256_279(v49), !10230
        v51 = get_local ptr u64, ptr, !10015
        v52 = load v51
        v53 = get_local ptr u64, number_of_slots, !10016
        v54 = load v53
        v55 = get_local ptr b256, key_for_storage, !10017
        store v50 to v55, !10017
        v56 = int_to_ptr v52 to ptr b256, !10017
        v57 = state_load_quad_word v56, key v55, v54, !10017
        v58 = get_local ptr bool, _, !10018
        store v57 to v58, !10018
        v59 = get_local ptr u64, size_V_bytes, !10019
        v60 = load v59
        v61 = const u64 8, !10020
        v62 = call lt_86(v60, v61), !10231
        cbr v62, block5(), block6(), !10021

        block5():
        v63 = get_local ptr u64, len, !10024
        v64 = load v63
        v65 = get_local ptr u64, size_V_bytes, !10025
        v66 = load v65
        v67 = call multiply_39(v64, v66), !10232
        v68 = get_local ptr u64, len_bytes, !10029
        store v67 to v68, !10029
        v69 = get_local ptr u64, len_bytes, !10030
        v70 = load v69
        v71 = call alloc_bytes_136(v70), !10233
        v72 = get_local ptr u64, new_vec, !10034
        store v71 to v72, !10034
        v73 = get_local ptr u64, i, !10035
        v74 = const u64 0, !10036
        store v74 to v73, !10035
        br while()

        while():
        v75 = get_local ptr u64, i, !10037
        v76 = load v75
        v77 = get_local ptr u64, len, !10038
        v78 = load v77
        v79 = call lt_86(v76, v78), !10234
        cbr v79, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v80 = get_local ptr u64, ptr, !10042
        v81 = load v80
        v82 = get_local ptr u64, i, !10043
        v83 = load v82
        v84 = const u64 8, !10044
        v85 = call multiply_39(v84, v83), !10235
        v86 = call add_uint_offset_151(v81, v85), !10236
        v87 = get_local ptr u64, new_vec, !10051
        v88 = load v87
        v89 = get_local ptr u64, i, !10052
        v90 = load v89
        v91 = call add_360(v88, v90), !10237
        v92 = get_local ptr u64, size_V_bytes, !10056
        v93 = load v92
        v94 = call copy_bytes_to_146(v86, v91, v93), !10238
        v95 = get_local ptr u64, i, !10060
        v96 = load v95
        v97 = const u64 1, !10061
        v98 = call add_38(v96, v97), !10239
        v99 = get_local ptr u64, i, !10062
        store v98 to v99, !10062
        br while()

        end_while():
        v100 = get_local ptr u64, new_vec, !10065
        v101 = load v100
        v102 = get_local ptr u64, len_bytes, !10066
        v103 = load v102
        v104 = get_local ptr { u64, u64 }, __anon_0, !10067
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105, !10067
        store v101 to v106, !10067
        v107 = const u64 1
        v108 = get_elem_ptr v104, ptr u64, v107, !10067
        store v103 to v108, !10067
        v109 = asm(ptr: v104) -> slice ptr, !10068 {
        }
        v110 = call from_628(v109), !10240
        br block7(v110)

        block6():
        v111 = get_local ptr u64, ptr, !10072
        v112 = load v111
        v113 = get_local ptr u64, bytes, !10073
        v114 = load v113
        v115 = get_local ptr { u64, u64 }, __anon_1, !10074
        v116 = const u64 0
        v117 = get_elem_ptr v115, ptr u64, v116, !10074
        store v112 to v117, !10074
        v118 = const u64 1
        v119 = get_elem_ptr v115, ptr u64, v118, !10074
        store v114 to v119, !10074
        v120 = asm(ptr: v115) -> slice ptr, !10075 {
        }
        v121 = call from_628(v120), !10241
        br block7(v121)

        block7(v122: { { u64, u64 }, u64 }):
        br block8(v122)

        block8(v123: { { u64, u64 }, u64 }):
        ret { { u64, u64 }, u64 } v123
    }

    pub fn new_626() -> { { u64, u64 }, u64 }, !10242 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_627(), !10243
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !10085
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !10085
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !10086
        store v6 to v5, !10085
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_627() -> { u64, u64 }, !10244 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !10090
        v1 = call alloc_354(v0), !10245
        v2 = get_local ptr { u64, u64 }, __anon_0, !10094
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !10094
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !10095
        store v7 to v6, !10094
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn from_628(slice !10096: slice) -> { { u64, u64 }, u64 }, !10246 {
        local { { u64, u64 }, u64 } __anon_0

        entry(slice: slice):
        v0 = call from_629(slice), !10247
        v1 = call len_630(slice), !10248
        v2 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !10106
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3
        store v0 to v4, !10106
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store v1 to v6, !10106
        v7 = load v2
        ret { { u64, u64 }, u64 } v7
    }

    pub fn from_629(slice !10107: slice) -> { u64, u64 }, !10249 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call len_630(slice), !10250
        v1 = get_local ptr u64, cap, !10114
        store v0 to v1, !10114
        v2 = get_local ptr u64, cap, !10115
        v3 = load v2
        v4 = call alloc_354(v3), !10251
        v5 = get_local ptr u64, ptr, !10119
        store v4 to v5, !10119
        v6 = get_local ptr u64, cap, !10120
        v7 = load v6
        v8 = const u64 0, !10121
        v9 = call gt_89(v7, v8), !10252
        cbr v9, block0(), block1(), !10122

        block0():
        v10 = call ptr_23(slice), !10253
        v11 = get_local ptr u64, ptr, !10128
        v12 = load v11
        v13 = get_local ptr u64, cap, !10129
        v14 = load v13
        v15 = call copy_to_359(v10, v12, v14), !10254
        v16 = const unit ()
        br block2(v16)

        block1():
        v17 = const unit ()
        br block2(v17)

        block2(v18: ()):
        v19 = get_local ptr u64, ptr, !10133
        v20 = load v19
        v21 = get_local ptr u64, cap, !10134
        v22 = load v21
        v23 = get_local ptr { u64, u64 }, __anon_0, !10135
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v20 to v25, !10135
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v22 to v27, !10135
        v28 = load v23
        ret { u64, u64 } v28
    }

    pub fn len_630(self !1486: slice) -> u64, !10255 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_24(self), !10256
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1493
        v4 = load v3
        v5 = const u64 32
        v6 = div v4, v5
        ret u64 v6
    }

    pub fn encode_631(item !1456: { { u64, u64 }, u64 }) -> slice, !10257 {
        local { { u64, u64, u64 } } buffer

        entry(item: { { u64, u64 }, u64 }):
        v0 = call new_53(), !10258
        v1 = call abi_encode_632(item, v0), !10259
        v2 = get_local ptr { { u64, u64, u64 } }, buffer, !1466
        store v1 to v2, !1466
        v3 = get_local ptr { { u64, u64, u64 } }, buffer, !1467
        v4 = load v3
        v5 = call as_raw_slice_54(v4), !10260
        ret slice v5
    }

    pub fn abi_encode_632(self !8822: { { u64, u64 }, u64 }, buffer !8823: { { u64, u64, u64 } }) -> { { u64, u64, u64 } }, !10261 {
        local mut { { u64, u64, u64 } } buffer_
        local mut u64 i
        local b256 item
        local u64 len

        entry(self: { { u64, u64 }, u64 }, buffer: { { u64, u64, u64 } }):
        v0 = call len_363(self), !10262
        v1 = get_local ptr u64, len, !8830
        store v0 to v1, !8830
        v2 = get_local ptr u64, len, !8831
        v3 = load v2
        v4 = call abi_encode_62(v3, buffer), !10263
        v5 = get_local ptr { { u64, u64, u64 } }, buffer_, !8835
        store v4 to v5, !8835
        v6 = get_local ptr u64, i, !8836
        v7 = const u64 0, !8837
        store v7 to v6, !8836
        br while()

        while():
        v8 = get_local ptr u64, i, !8838
        v9 = load v8
        v10 = get_local ptr u64, len, !8839
        v11 = load v10
        v12 = call lt_86(v9, v11), !10264
        cbr v12, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v13 = get_local ptr u64, i, !8843
        v14 = load v13
        v15 = call get_421(self, v14), !10265
        v16 = call unwrap_275(v15), !10266
        v17 = get_local ptr b256, item, !8850
        store v16 to v17, !8850
        v18 = get_local ptr b256, item, !8851
        v19 = load v18
        v20 = get_local ptr { { u64, u64, u64 } }, buffer_, !8852
        v21 = load v20
        v22 = call abi_encode_162(v19, v21), !10267
        v23 = get_local ptr { { u64, u64, u64 } }, buffer_, !8856
        store v22 to v23, !8856
        v24 = get_local ptr u64, i, !8857
        v25 = load v24
        v26 = const u64 1, !8858
        v27 = call add_38(v25, v26), !10268
        v28 = get_local ptr u64, i, !8859
        store v27 to v28, !8859
        br while()

        end_while():
        v29 = get_local ptr { { u64, u64, u64 } }, buffer_, !8862
        v30 = load v29
        ret { { u64, u64, u64 } } v30
    }

    pub entry_orig fn is_paused() -> bool, !10269 {
        entry():
        v0 = call _is_paused_31(), !10270
        ret bool v0
    }

    pub entry_orig fn pause() -> (), !10271 {
        entry():
        v0 = call only_owner_57(), !10272
        v1 = call require_not_paused_97(), !10273
        v2 = call _pause_102(), !10274
        v3 = const unit ()
        ret () v3
    }

    pub entry_orig fn unpause() -> (), !10275 {
        entry():
        v0 = call only_owner_57(), !10276
        v1 = call require_paused_107(), !10277
        v2 = call _unpause_108(), !10278
        v3 = const unit ()
        ret () v3
    }

    pub entry_orig fn cancel_order(order_id !2280: b256) -> (), !10279 {
        entry(order_id: b256):
        v0 = call reentrancy_guard_112(), !10280
        v1 = call cancel_order_internal_123(order_id), !10281
        v2 = const unit ()
        ret () v2
    }

    pub entry_orig fn cancel_small_order(order_id !4966: b256) -> (), !10282 {
        local { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) } __anon_0

        entry(order_id: b256):
        v0 = call reentrancy_guard_112(), !10283
        v1 = call cancel_if_small_order_309(order_id), !10284
        v2 = get_local ptr { u64, ( b256 | b256 | { u64, u64 } | u64 | () | () | () | () | b256 ) }, __anon_0, !2493
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !2493
        v5 = const u64 4, !2493
        store v5 to v4, !2493
        v6 = load v2
        v7 = call require_158(v1, v6), !10285
        v8 = const unit ()
        ret () v8
    }

    pub entry_orig fn deposit() -> (), !10286 {
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_1
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_1_
        local { { u64, u64 }, { u64, u64 } } account
        local u64 amount
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } user

        entry():
        v0 = call require_not_paused_97(), !10287
        v1 = call reentrancy_guard_112(), !10288
        v2 = call msg_sender_79(), !10289
        v3 = call unwrap_78(v2), !10290
        v4 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5041
        store v3 to v4, !5041
        v5 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5042
        v6 = load v5
        v7 = call deposit_internal_314(v6), !10291
        v8 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1, !5046
        store v7 to v8, !5046
        v9 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1, !5046
        v10 = load v9
        v11 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        store v10 to v11, !5046
        v12 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr u64, v13, !5046
        v15 = load v14
        v16 = get_local ptr u64, amount, !5046
        store v15 to v16, !5046
        v17 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        v18 = const u64 1
        v19 = get_elem_ptr v17, ptr { b256 }, v18, !5046
        v20 = load v19
        v21 = get_local ptr { b256 }, asset, !5046
        store v20 to v21, !5046
        v22 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_1_, !5046
        v23 = const u64 2
        v24 = get_elem_ptr v22, ptr { { u64, u64 }, { u64, u64 } }, v23, !5046
        v25 = load v24
        v26 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5046
        store v25 to v26, !5046
        v27 = get_local ptr u64, amount, !5047
        v28 = load v27
        v29 = get_local ptr { b256 }, asset, !5048
        v30 = load v29
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5049
        v32 = load v31
        v33 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5050
        v34 = load v33
        v35 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !5051
        v36 = load v35
        v37 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !5052
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr u64, v38
        store v28 to v39, !5052
        v40 = const u64 1
        v41 = get_elem_ptr v37, ptr { b256 }, v40
        store v30 to v41, !5052
        v42 = const u64 2
        v43 = get_elem_ptr v37, ptr { u64, ( { b256 } | { b256 } ) }, v42
        store v32 to v43, !5052
        v44 = const u64 3
        v45 = get_elem_ptr v37, ptr { { u64, u64 }, { u64, u64 } }, v44
        store v34 to v45, !5052
        v46 = const u64 4
        v47 = get_elem_ptr v37, ptr { u64, ( { b256 } | { b256 } ) }, v46
        store v36 to v47, !5052
        v48 = load v37
        v49 = call log_333(v48), !10292
        v50 = const unit ()
        ret () v50
    }

    pub entry_orig fn deposit_for(user !5430: { u64, ( { b256 } | { b256 } ) }) -> (), !10293 {
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } } __anon_0
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_2
        local { u64, { b256 }, { { u64, u64 }, { u64, u64 } } } __tuple_2_
        local { { u64, u64 }, { u64, u64 } } account
        local u64 amount
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } caller

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call require_not_paused_97(), !10294
        v1 = call reentrancy_guard_112(), !10295
        v2 = call msg_sender_79(), !10296
        v3 = call unwrap_78(v2), !10297
        v4 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !5446
        store v3 to v4, !5446
        v5 = call deposit_internal_314(user), !10298
        v6 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2, !5450
        store v5 to v6, !5450
        v7 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2, !5450
        v8 = load v7
        v9 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        store v8 to v9, !5450
        v10 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !5450
        v13 = load v12
        v14 = get_local ptr u64, amount, !5450
        store v13 to v14, !5450
        v15 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        v16 = const u64 1
        v17 = get_elem_ptr v15, ptr { b256 }, v16, !5450
        v18 = load v17
        v19 = get_local ptr { b256 }, asset, !5450
        store v18 to v19, !5450
        v20 = get_local ptr { u64, { b256 }, { { u64, u64 }, { u64, u64 } } }, __tuple_2_, !5450
        v21 = const u64 2
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, { u64, u64 } }, v21, !5450
        v23 = load v22
        v24 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5450
        store v23 to v24, !5450
        v25 = get_local ptr u64, amount, !5451
        v26 = load v25
        v27 = get_local ptr { b256 }, asset, !5452
        v28 = load v27
        v29 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !5453
        v30 = load v29
        v31 = get_local ptr { u64, ( { b256 } | { b256 } ) }, caller, !5454
        v32 = load v31
        v33 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { u64, ( { b256 } | { b256 } ) } }, __anon_0, !5455
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        store v26 to v35, !5455
        v36 = const u64 1
        v37 = get_elem_ptr v33, ptr { b256 }, v36
        store v28 to v37, !5455
        v38 = const u64 2
        v39 = get_elem_ptr v33, ptr { u64, ( { b256 } | { b256 } ) }, v38
        store user to v39, !5455
        v40 = const u64 3
        v41 = get_elem_ptr v33, ptr { { u64, u64 }, { u64, u64 } }, v40
        store v30 to v41, !5455
        v42 = const u64 4
        v43 = get_elem_ptr v33, ptr { u64, ( { b256 } | { b256 } ) }, v42
        store v32 to v43, !5455
        v44 = load v33
        v45 = call log_333(v44), !10299
        v46 = const unit ()
        ret () v46
    }

    pub entry_orig fn fulfill_order_many(amount !5663: u64, order_type !5664: { u64 }, limit_type !5665: { u64 }, price !5666: u64, slippage !5667: u64, orders !5668: { { u64, u64 }, u64 }) -> b256, !10300 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_1
        local { u64 } __anon_10
        local { u64 } __anon_11
        local { u64, ( { b256, b256 } | () | () | () ) } __anon_12
        local { u64 } __anon_13
        local { u64 } __anon_14
        local { u64, ( { b256, b256 } | () | () | () ) } __anon_15
        local { u64 } __anon_16
        local { u64 } __anon_17
        local { u64 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { b256, u64, b256 } __anon_4
        local { u64 } __anon_5
        local { u64 } __anon_6
        local { u64 } __anon_7
        local { u64 } __anon_8
        local { u64 } __anon_9
        local { u64 } __matched_value_2
        local { { u64 }, b256 } __tuple_7
        local { { u64 }, b256 } __tuple_7_
        local b256 id0
        local b256 id1
        local mut u64 idx1
        local u64 len
        local { u64 } match_result
        local mut { u64 } matched
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order0
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order1
        local { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } order1_
        local b256 partial_order_id
        local u64 slippage_

        entry(amount: u64, order_type: { u64 }, limit_type: { u64 }, price: u64, slippage: u64, orders: { { u64, u64 }, u64 }):
        v0 = call require_not_paused_97(), !10301
        v1 = call reentrancy_guard_112(), !10302
        v2 = call len_363(orders), !10303
        v3 = const u64 0, !5681
        v4 = call gt_89(v2, v3), !10304
        v5 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !5069
        v8 = const u64 2, !5069
        store v8 to v7, !5069
        v9 = load v5
        v10 = call require_317(v4, v9), !10305
        v11 = const u64 10000, !4258
        v12 = call le_210(slippage, v11), !10306
        v13 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_1, !5069
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !5069
        v16 = const u64 1, !5069
        store v16 to v15, !5069
        v17 = load v13
        v18 = call require_317(v12, v17), !10307
        v19 = const u64 0, !5694
        v20 = call open_order_internal_364(amount, order_type, price, v19, limit_type), !10308
        v21 = get_local ptr b256, id0, !5698
        store v20 to v21, !5698
        v22 = call len_363(orders), !10309
        v23 = get_local ptr u64, len, !5702
        store v22 to v23, !5702
        v24 = get_local ptr u64, idx1, !5703
        v25 = const u64 0, !5704
        store v25 to v24, !5703
        v26 = get_local ptr { u64 }, __anon_2, !5706
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !5706
        v29 = const u64 0, !5706
        store v29 to v28, !5706
        v30 = load v26
        v31 = get_local ptr { u64 }, matched, !5707
        store v30 to v31, !5707
        v32 = call multiply_39(price, slippage), !10310
        v33 = call divide_232(v32, v11), !10311
        v34 = get_local ptr u64, slippage_, !5714
        store v33 to v34, !5714
        br while()

        while():
        v35 = get_local ptr u64, idx1, !5715
        v36 = load v35
        v37 = get_local ptr u64, len, !5716
        v38 = load v37
        v39 = call lt_86(v36, v38), !10312
        cbr v39, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v40 = get_local ptr { b256, u64, b256 }, __anon_3, !5720
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr b256, v41
        v43 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5720
        store v43 to v42, !5720
        v44 = const u64 1
        v45 = get_elem_ptr v40, ptr u64, v44
        v46 = const u64 0
        store v46 to v45, !5720
        v47 = const u64 2
        v48 = get_elem_ptr v40, ptr b256, v47
        v49 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5720
        store v49 to v48, !5720
        v50 = load v40
        v51 = get_local ptr b256, id0, !5721
        v52 = load v51
        v53 = call get_131(v50, v52), !10313
        v54 = call read_420(v53), !10314
        v55 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order0, !5728
        store v54 to v55, !5728
        v56 = get_local ptr u64, idx1, !5729
        v57 = load v56
        v58 = call get_421(orders, v57), !10315
        v59 = call unwrap_275(v58), !10316
        v60 = get_local ptr b256, id1, !5736
        store v59 to v60, !5736
        v61 = get_local ptr { b256, u64, b256 }, __anon_4, !5737
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr b256, v62
        v64 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5737
        store v64 to v63, !5737
        v65 = const u64 1
        v66 = get_elem_ptr v61, ptr u64, v65
        v67 = const u64 0
        store v67 to v66, !5737
        v68 = const u64 2
        v69 = get_elem_ptr v61, ptr b256, v68
        v70 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !5737
        store v70 to v69, !5737
        v71 = load v61
        v72 = get_local ptr b256, id1, !5738
        v73 = load v72
        v74 = call get_131(v71, v73), !10317
        v75 = call try_read_125(v74), !10318
        v76 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !5745
        store v75 to v76, !5745
        v77 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !5746
        v78 = load v77
        v79 = call is_some_164(v78), !10319
        cbr v79, block0(), block25(), !5747

        block0():
        v80 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !5750
        v81 = load v80
        v82 = call unwrap_165(v81), !10320
        v83 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5754
        store v82 to v83, !5754
        v84 = get_local ptr { u64 }, __anon_5, !3570
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !3570
        v87 = const u64 1, !3570
        store v87 to v86, !3570
        v88 = load v84
        v89 = call eq_213(order_type, v88), !10321
        cbr v89, block1(), block2(v89), !5758

        block1():
        v90 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5759
        v91 = const u64 4
        v92 = get_elem_ptr v90, ptr u64, v91, !3575
        v93 = load v92
        v94 = call distance_422(price, v93), !10322
        v95 = get_local ptr u64, slippage_, !5763
        v96 = load v95
        v97 = call le_210(v94, v96), !10323
        br block2(v97), !5758

        block2(v98: bool):
        cbr v98, block4(v98), block3(), !5767

        block3():
        v99 = get_local ptr { u64 }, __anon_6, !3570
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !3570
        v102 = const u64 0, !3570
        store v102 to v101, !3570
        v103 = load v99
        v104 = call eq_213(order_type, v103), !10324
        cbr v104, block5(), block6(v104), !5771

        block4(v105: bool):
        cbr v105, block7(), block23(), !5767

        block5():
        v106 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5772
        v107 = const u64 4
        v108 = get_elem_ptr v106, ptr u64, v107, !3575
        v109 = load v108
        v110 = call distance_422(price, v109), !10325
        v111 = get_local ptr u64, slippage_, !5776
        v112 = load v111
        v113 = call le_210(v110, v112), !10326
        br block6(v113), !5771

        block6(v114: bool):
        br block4(v114), !5767

        block7():
        v115 = get_local ptr b256, id0, !5780
        v116 = load v115
        v117 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order0, !5781
        v118 = load v117
        v119 = get_local ptr b256, id1, !5782
        v120 = load v119
        v121 = get_local ptr { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 }, order1_, !5783
        v122 = load v121
        v123 = get_local ptr b256, id1, !5784
        v124 = load v123
        v125 = call non_limit_order_type_458(v124), !10327
        v126 = call unwrap_457(v125), !10328
        v127 = call match_order_internal_423(v116, v118, limit_type, v120, v122, v126), !10329
        v128 = get_local ptr { { u64 }, b256 }, __tuple_7, !5794
        store v127 to v128, !5794
        v129 = get_local ptr { { u64 }, b256 }, __tuple_7, !5794
        v130 = load v129
        v131 = get_local ptr { { u64 }, b256 }, __tuple_7_, !5794
        store v130 to v131, !5794
        v132 = get_local ptr { { u64 }, b256 }, __tuple_7_, !5794
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr { u64 }, v133, !5794
        v135 = load v134
        v136 = get_local ptr { u64 }, match_result, !5794
        store v135 to v136, !5794
        v137 = get_local ptr { { u64 }, b256 }, __tuple_7_, !5794
        v138 = const u64 1
        v139 = get_elem_ptr v137, ptr b256, v138, !5794
        v140 = load v139
        v141 = get_local ptr b256, partial_order_id, !5794
        store v140 to v141, !5794
        v142 = get_local ptr { u64 }, match_result, !5795
        v143 = load v142
        v144 = get_local ptr { u64 }, __matched_value_2, !5796
        store v143 to v144, !5796
        v145 = get_local ptr { u64 }, __matched_value_2, !5795
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr u64, v146, !5795
        v148 = load v147
        v149 = const u64 0, !5795
        v150 = call eq_10(v148, v149), !10330
        cbr v150, block8(), block9(), !5797

        block8():
        v151 = const unit ()
        br block19(v151)

        block9():
        v152 = get_local ptr { u64 }, __matched_value_2, !5795
        v153 = const u64 0
        v154 = get_elem_ptr v152, ptr u64, v153, !5795
        v155 = load v154
        v156 = const u64 1, !5795
        v157 = call eq_10(v155, v156), !10331
        cbr v157, block10(), block14(), !5800

        block10():
        v158 = get_local ptr b256, partial_order_id, !5803
        v159 = load v158
        v160 = get_local ptr b256, id1, !5804
        v161 = load v160
        v162 = call eq_67(v159, v161), !10332
        cbr v162, block11(), block12(), !5805

        block11():
        v163 = get_local ptr { u64 }, __anon_7, !5706
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr u64, v164, !5706
        v166 = const u64 2, !5706
        store v166 to v165, !5706
        v167 = load v163
        br block13(v167)

        block12():
        v168 = get_local ptr { u64 }, __anon_8, !5706
        v169 = const u64 0
        v170 = get_elem_ptr v168, ptr u64, v169, !5706
        v171 = const u64 1, !5706
        store v171 to v170, !5706
        v172 = load v168
        br block13(v172)

        block13(v173: { u64 }):
        v174 = get_local ptr { u64 }, matched, !5808
        store v173 to v174, !5808
        v175 = const unit ()
        br block18(v175)

        block14():
        v176 = get_local ptr { u64 }, __matched_value_2, !5795
        v177 = const u64 0
        v178 = get_elem_ptr v176, ptr u64, v177, !5795
        v179 = load v178
        v180 = const u64 2, !5795
        v181 = call eq_10(v179, v180), !10333
        cbr v181, block15(), block16(), !5809

        block15():
        v182 = get_local ptr { u64 }, __anon_9, !5706
        v183 = const u64 0
        v184 = get_elem_ptr v182, ptr u64, v183, !5706
        v185 = const u64 2, !5706
        store v185 to v184, !5706
        v186 = load v182
        v187 = get_local ptr { u64 }, matched, !5812
        store v186 to v187, !5812
        v188 = const unit ()
        br block17(v188)

        block16():
        v189 = const u64 14757395258967588866, !5796
        revert v189, !5796

        block17(v190: ()):
        br block18(v190)

        block18(v191: ()):
        br block19(v191)

        block19(v192: ()):
        v193 = get_local ptr { u64 }, matched, !5813
        v194 = load v193
        v195 = get_local ptr { u64 }, __anon_10, !5706
        v196 = const u64 0
        v197 = get_elem_ptr v195, ptr u64, v196, !5706
        v198 = const u64 2, !5706
        store v198 to v197, !5706
        v199 = load v195
        v200 = call eq_456(v194, v199), !10334
        cbr v200, block20(), block21(), !5814

        block20():
        br while_break()

        block21():
        v201 = const unit ()
        br block22(v201)

        block22(v202: ()):
        br block24(v202)

        block23():
        v203 = const unit ()
        br block24(v203)

        block24(v204: ()):
        br block26(v204)

        block25():
        v205 = const unit ()
        br block26(v205)

        block26(v206: ()):
        v207 = get_local ptr u64, idx1, !5817
        v208 = load v207
        v209 = const u64 1, !5818
        v210 = call add_38(v208, v209), !10335
        v211 = get_local ptr u64, idx1, !5819
        store v210 to v211, !5819
        br while()

        end_while():
        v212 = get_local ptr { u64 }, matched, !5822
        v213 = load v212
        v214 = get_local ptr { u64 }, __anon_11, !5706
        v215 = const u64 0
        v216 = get_elem_ptr v214, ptr u64, v215, !5706
        v217 = const u64 0, !5706
        store v217 to v216, !5706
        v218 = load v214
        v219 = call eq_456(v213, v218), !10336
        v220 = call not_27(v219), !10337
        v221 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __anon_12, !5829
        v222 = const u64 0
        v223 = get_elem_ptr v221, ptr u64, v222, !5829
        v224 = const u64 2, !5829
        store v224 to v223, !5829
        v225 = load v221
        v226 = call require_459(v220, v225), !10338
        v227 = get_local ptr { u64 }, matched, !5833
        v228 = load v227
        v229 = get_local ptr { u64 }, __anon_13, !5706
        v230 = const u64 0
        v231 = get_elem_ptr v229, ptr u64, v230, !5706
        v232 = const u64 1, !5706
        store v232 to v231, !5706
        v233 = load v229
        v234 = call eq_456(v228, v233), !10339
        cbr v234, block27(), block28(v234), !5837

        block27():
        v235 = get_local ptr { u64 }, __anon_14, !5508
        v236 = const u64 0
        v237 = get_elem_ptr v235, ptr u64, v236, !5508
        v238 = const u64 2, !5508
        store v238 to v237, !5508
        v239 = load v235
        v240 = call eq_464(limit_type, v239), !10340
        br block28(v240), !5837

        block28(v241: bool):
        v242 = call not_27(v241), !10341
        v243 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __anon_15, !5829
        v244 = const u64 0
        v245 = get_elem_ptr v243, ptr u64, v244, !5829
        v246 = const u64 3, !5829
        store v246 to v245, !5829
        v247 = load v243
        v248 = call require_459(v242, v247), !10342
        v249 = get_local ptr { u64 }, matched, !5847
        v250 = load v249
        v251 = get_local ptr { u64 }, __anon_16, !5706
        v252 = const u64 0
        v253 = get_elem_ptr v251, ptr u64, v252, !5706
        v254 = const u64 1, !5706
        store v254 to v253, !5706
        v255 = load v251
        v256 = call eq_456(v250, v255), !10343
        cbr v256, block29(), block30(v256), !5851

        block29():
        v257 = get_local ptr { u64 }, __anon_17, !5508
        v258 = const u64 0
        v259 = get_elem_ptr v257, ptr u64, v258, !5508
        v260 = const u64 1, !5508
        store v260 to v259, !5508
        v261 = load v257
        v262 = call eq_464(limit_type, v261), !10344
        br block30(v262), !5851

        block30(v263: bool):
        cbr v263, block31(), block32(), !5851

        block31():
        v264 = get_local ptr b256, id0, !5855
        v265 = load v264
        v266 = call cancel_order_internal_123(v265), !10345
        v267 = const unit ()
        br block33(v267)

        block32():
        v268 = const unit ()
        br block33(v268)

        block33(v269: ()):
        v270 = get_local ptr b256, id0, !5859
        v271 = load v270
        ret b256 v271
    }

    pub entry_orig fn initialize_ownership(new_owner !7933: { u64, ( { b256 } | { b256 } ) }) -> (), !10346 {
        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call initialize_ownership_467(new_owner), !10347
        v1 = const unit ()
        ret () v1
    }

    pub entry_orig fn match_order_many(orders !8023: { { u64, u64 }, u64 }) -> (), !10348 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { u64, ( { b256, b256 } | () | () | () ) } __anon_3
        local { u64 } __matched_value_1
        local { { u64 }, b256 } __tuple_6
        local { { u64 }, b256 } __tuple_6_
        local mut u64 full_matched
        local b256 id0
        local b256 id1
        local mut u64 idx0
        local mut u64 idx1
        local u64 len
        local { u64 } match_result
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order0
        local { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } order1
        local b256 partial_order_id

        entry(orders: { { u64, u64 }, u64 }):
        v0 = call require_not_paused_97(), !10349
        v1 = call reentrancy_guard_112(), !10350
        v2 = call len_363(orders), !10351
        v3 = const u64 2, !8036
        v4 = call ge_88(v2, v3), !10352
        v5 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr u64, v6, !5069
        v8 = const u64 2, !5069
        store v8 to v7, !5069
        v9 = load v5
        v10 = call require_317(v4, v9), !10353
        v11 = call len_363(orders), !10354
        v12 = get_local ptr u64, len, !8046
        store v11 to v12, !8046
        v13 = get_local ptr u64, idx0, !8047
        v14 = const u64 0, !8048
        store v14 to v13, !8047
        v15 = get_local ptr u64, idx1, !8049
        v16 = const u64 1, !8050
        store v16 to v15, !8049
        v17 = get_local ptr u64, full_matched, !8051
        v18 = const u64 0, !8052
        store v18 to v17, !8051
        br while()

        while():
        v19 = get_local ptr u64, idx0, !8053
        v20 = load v19
        v21 = get_local ptr u64, idx1, !8054
        v22 = load v21
        v23 = get_local ptr u64, len, !8055
        v24 = load v23
        v25 = call lts_481(v20, v22, v24), !10355
        cbr v25, while_body(), end_while()

        while_break():
        br end_while()

        while_body():
        v26 = get_local ptr u64, idx0, !8059
        v27 = load v26
        v28 = get_local ptr u64, idx1, !8060
        v29 = load v28
        v30 = call eq_10(v27, v29), !10356
        cbr v30, block0(), block1(), !8061

        block0():
        v31 = get_local ptr u64, idx1, !8064
        v32 = load v31
        v33 = const u64 1, !8065
        v34 = call add_38(v32, v33), !10357
        v35 = get_local ptr u64, idx1, !8066
        store v34 to v35, !8066
        br while()

        block1():
        v36 = const unit ()
        br block2(v36)

        block2(v37: ()):
        v38 = get_local ptr u64, idx0, !8069
        v39 = load v38
        v40 = call get_421(orders, v39), !10358
        v41 = call unwrap_275(v40), !10359
        v42 = get_local ptr b256, id0, !8076
        store v41 to v42, !8076
        v43 = get_local ptr { b256, u64, b256 }, __anon_1, !8077
        v44 = const u64 0
        v45 = get_elem_ptr v43, ptr b256, v44
        v46 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8077
        store v46 to v45, !8077
        v47 = const u64 1
        v48 = get_elem_ptr v43, ptr u64, v47
        v49 = const u64 0
        store v49 to v48, !8077
        v50 = const u64 2
        v51 = get_elem_ptr v43, ptr b256, v50
        v52 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8077
        store v52 to v51, !8077
        v53 = load v43
        v54 = get_local ptr b256, id0, !8078
        v55 = load v54
        v56 = call get_131(v53, v55), !10360
        v57 = call try_read_125(v56), !10361
        v58 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order0, !8085
        store v57 to v58, !8085
        v59 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order0, !8086
        v60 = load v59
        v61 = call is_none_409(v60), !10362
        cbr v61, block3(), block4(), !8087

        block3():
        v62 = get_local ptr u64, idx0, !8090
        v63 = load v62
        v64 = const u64 1, !8091
        v65 = call add_38(v63, v64), !10363
        v66 = get_local ptr u64, idx0, !8092
        store v65 to v66, !8092
        br while()

        block4():
        v67 = const unit ()
        br block5(v67)

        block5(v68: ()):
        v69 = get_local ptr u64, idx1, !8095
        v70 = load v69
        v71 = call get_421(orders, v70), !10364
        v72 = call unwrap_275(v71), !10365
        v73 = get_local ptr b256, id1, !8102
        store v72 to v73, !8102
        v74 = get_local ptr { b256, u64, b256 }, __anon_2, !8103
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr b256, v75
        v77 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8103
        store v77 to v76, !8103
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr u64, v78
        v80 = const u64 0
        store v80 to v79, !8103
        v81 = const u64 2
        v82 = get_elem_ptr v74, ptr b256, v81
        v83 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !8103
        store v83 to v82, !8103
        v84 = load v74
        v85 = get_local ptr b256, id1, !8104
        v86 = load v85
        v87 = call get_131(v84, v86), !10366
        v88 = call try_read_125(v87), !10367
        v89 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !8111
        store v88 to v89, !8111
        v90 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !8112
        v91 = load v90
        v92 = call is_none_409(v91), !10368
        cbr v92, block6(), block7(), !8113

        block6():
        v93 = get_local ptr u64, idx1, !8116
        v94 = load v93
        v95 = const u64 1, !8117
        v96 = call add_38(v94, v95), !10369
        v97 = get_local ptr u64, idx1, !8118
        store v96 to v97, !8118
        br while()

        block7():
        v98 = const unit ()
        br block8(v98)

        block8(v99: ()):
        v100 = get_local ptr b256, id0, !8121
        v101 = load v100
        v102 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order0, !8122
        v103 = load v102
        v104 = call unwrap_165(v103), !10370
        v105 = get_local ptr b256, id0, !8126
        v106 = load v105
        v107 = call non_limit_order_type_458(v106), !10371
        v108 = call unwrap_457(v107), !10372
        v109 = get_local ptr b256, id1, !8133
        v110 = load v109
        v111 = get_local ptr { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, order1, !8134
        v112 = load v111
        v113 = call unwrap_165(v112), !10373
        v114 = get_local ptr b256, id1, !8138
        v115 = load v114
        v116 = call non_limit_order_type_458(v115), !10374
        v117 = call unwrap_457(v116), !10375
        v118 = call match_order_internal_423(v101, v104, v108, v110, v113, v117), !10376
        v119 = get_local ptr { { u64 }, b256 }, __tuple_6, !8148
        store v118 to v119, !8148
        v120 = get_local ptr { { u64 }, b256 }, __tuple_6, !8148
        v121 = load v120
        v122 = get_local ptr { { u64 }, b256 }, __tuple_6_, !8148
        store v121 to v122, !8148
        v123 = get_local ptr { { u64 }, b256 }, __tuple_6_, !8148
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr { u64 }, v124, !8148
        v126 = load v125
        v127 = get_local ptr { u64 }, match_result, !8148
        store v126 to v127, !8148
        v128 = get_local ptr { { u64 }, b256 }, __tuple_6_, !8148
        v129 = const u64 1
        v130 = get_elem_ptr v128, ptr b256, v129, !8148
        v131 = load v130
        v132 = get_local ptr b256, partial_order_id, !8148
        store v131 to v132, !8148
        v133 = get_local ptr { u64 }, match_result, !8149
        v134 = load v133
        v135 = get_local ptr { u64 }, __matched_value_1, !8150
        store v134 to v135, !8150
        v136 = get_local ptr { u64 }, __matched_value_1, !8149
        v137 = const u64 0
        v138 = get_elem_ptr v136, ptr u64, v137, !8149
        v139 = load v138
        v140 = const u64 0, !8149
        v141 = call eq_10(v139, v140), !10377
        cbr v141, block9(), block13(), !8151

        block9():
        v142 = get_local ptr u64, idx0, !8154
        v143 = load v142
        v144 = get_local ptr u64, idx1, !8155
        v145 = load v144
        v146 = call lt_86(v143, v145), !10378
        cbr v146, block10(), block11(), !8156

        block10():
        v147 = get_local ptr u64, idx1, !8159
        v148 = load v147
        v149 = const u64 1, !8160
        v150 = call add_38(v148, v149), !10379
        v151 = get_local ptr u64, idx1, !8161
        store v150 to v151, !8161
        v152 = const unit ()
        br block12(v152)

        block11():
        v153 = get_local ptr u64, idx0, !8164
        v154 = load v153
        v155 = const u64 1, !8165
        v156 = call add_38(v154, v155), !10380
        v157 = get_local ptr u64, idx0, !8166
        store v156 to v157, !8166
        v158 = const unit ()
        br block12(v158)

        block12(v159: ()):
        br block23(v159)

        block13():
        v160 = get_local ptr { u64 }, __matched_value_1, !8149
        v161 = const u64 0
        v162 = get_elem_ptr v160, ptr u64, v161, !8149
        v163 = load v162
        v164 = const u64 1, !8149
        v165 = call eq_10(v163, v164), !10381
        cbr v165, block14(), block18(), !8169

        block14():
        v166 = get_local ptr b256, partial_order_id, !8172
        v167 = load v166
        v168 = get_local ptr b256, id0, !8173
        v169 = load v168
        v170 = call eq_67(v167, v169), !10382
        cbr v170, block15(), block16(), !8174

        block15():
        v171 = get_local ptr u64, idx1, !8177
        v172 = load v171
        v173 = const u64 1, !8178
        v174 = call add_38(v172, v173), !10383
        v175 = get_local ptr u64, idx1, !8179
        store v174 to v175, !8179
        v176 = const unit ()
        br block17(v176)

        block16():
        v177 = get_local ptr u64, idx0, !8182
        v178 = load v177
        v179 = const u64 1, !8183
        v180 = call add_38(v178, v179), !10384
        v181 = get_local ptr u64, idx0, !8184
        store v180 to v181, !8184
        v182 = const unit ()
        br block17(v182)

        block17(v183: ()):
        v184 = get_local ptr u64, full_matched, !8187
        v185 = load v184
        v186 = const u64 1, !8188
        v187 = call add_38(v185, v186), !10385
        v188 = get_local ptr u64, full_matched, !8189
        store v187 to v188, !8189
        v189 = const unit ()
        br block22(v189)

        block18():
        v190 = get_local ptr { u64 }, __matched_value_1, !8149
        v191 = const u64 0
        v192 = get_elem_ptr v190, ptr u64, v191, !8149
        v193 = load v192
        v194 = const u64 2, !8149
        v195 = call eq_10(v193, v194), !10386
        cbr v195, block19(), block20(), !8192

        block19():
        v196 = get_local ptr u64, idx0, !8195
        v197 = load v196
        v198 = get_local ptr u64, idx1, !8196
        v199 = load v198
        v200 = call min_427(v197, v199), !10387
        v201 = const u64 1, !8200
        v202 = call add_38(v200, v201), !10388
        v203 = get_local ptr u64, idx0, !8204
        store v202 to v203, !8204
        v204 = get_local ptr u64, idx0, !8205
        v205 = load v204
        v206 = const u64 1, !8206
        v207 = call add_38(v205, v206), !10389
        v208 = get_local ptr u64, idx1, !8210
        store v207 to v208, !8210
        v209 = get_local ptr u64, full_matched, !8211
        v210 = load v209
        v211 = const u64 2, !8212
        v212 = call add_38(v210, v211), !10390
        v213 = get_local ptr u64, full_matched, !8213
        store v212 to v213, !8213
        v214 = const unit ()
        br block21(v214)

        block20():
        v215 = const u64 14757395258967588866, !8150
        revert v215, !8150

        block21(v216: ()):
        br block22(v216)

        block22(v217: ()):
        br block23(v217)

        block23(v218: ()):
        br while()

        end_while():
        v219 = get_local ptr u64, full_matched, !8216
        v220 = load v219
        v221 = const u64 0, !8217
        v222 = call gt_89(v220, v221), !10391
        v223 = get_local ptr { u64, ( { b256, b256 } | () | () | () ) }, __anon_3, !5829
        v224 = const u64 0
        v225 = get_elem_ptr v223, ptr u64, v224, !5829
        v226 = const u64 1, !5829
        store v226 to v225, !5829
        v227 = load v223
        v228 = call require_459(v222, v227), !10392
        v229 = const unit ()
        ret () v229
    }

    pub entry_orig fn open_market_order(amount !8253: u64, order_type !8254: { u64 }, price !8255: u64) -> b256, !10393 {
        local { u64 } __anon_0
        local { b256, u64, b256 } __anon_1
        local b256 id

        entry(amount: u64, order_type: { u64 }, price: u64):
        v0 = call require_not_paused_97(), !10394
        v1 = call reentrancy_guard_112(), !10395
        v2 = call read_matcher_fee_485(), !10396
        v3 = get_local ptr { u64 }, __anon_0, !5508
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5508
        v6 = const u64 3, !5508
        store v6 to v5, !5508
        v7 = load v3
        v8 = call open_order_internal_364(amount, order_type, price, v2, v7), !10397
        v9 = get_local ptr b256, id, !8271
        store v8 to v9, !8271
        v10 = get_local ptr { b256, u64, b256 }, __anon_1, !8272
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr b256, v11
        v13 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !8272
        store v13 to v12, !8272
        v14 = const u64 1
        v15 = get_elem_ptr v10, ptr u64, v14
        v16 = const u64 0
        store v16 to v15, !8272
        v17 = const u64 2
        v18 = get_elem_ptr v10, ptr b256, v17
        v19 = const b256 0xad9616a7e90e5ad2a04868b2dfa19aa0dbe1e9e08d4732d38ab44ee2537766fe, !8272
        store v19 to v18, !8272
        v20 = load v10
        v21 = get_local ptr b256, id, !8273
        v22 = load v21
        v23 = const bool true, !8274
        v24 = call insert_486(v20, v22, v23), !10398
        v25 = get_local ptr b256, id, !8278
        v26 = load v25
        ret b256 v26
    }

    pub entry_orig fn open_order(amount !8293: u64, order_type !8294: { u64 }, price !8295: u64) -> b256, !10399 {
        local { u64 } __anon_0

        entry(amount: u64, order_type: { u64 }, price: u64):
        v0 = call require_not_paused_97(), !10400
        v1 = call reentrancy_guard_112(), !10401
        v2 = call read_matcher_fee_485(), !10402
        v3 = get_local ptr { u64 }, __anon_0, !5508
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5508
        v6 = const u64 0, !5508
        store v6 to v5, !5508
        v7 = load v3
        v8 = call open_order_internal_364(amount, order_type, price, v2, v7), !10403
        ret b256 v8
    }

    pub entry_orig fn set_epoch(epoch !8324: u64, epoch_duration !8325: u64) -> (), !10404 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { u64, u64, u64, u64 } __anon_1
        local { b256, u64, b256 } __anon_2
        local { b256, u64, b256 } __anon_3
        local { u64, u64 } __anon_4
        local u64 current_epoch
        local u64 now

        entry(epoch: u64, epoch_duration: u64):
        v0 = call only_owner_57(), !10405
        v1 = call read_epoch_378(), !10406
        v2 = get_local ptr u64, current_epoch, !8335
        store v1 to v2, !8335
        v3 = call timestamp_439(), !10407
        v4 = get_local ptr u64, now, !8339
        store v3 to v4, !8339
        v5 = get_local ptr u64, current_epoch, !8340
        v6 = load v5
        v7 = call ge_88(epoch, v6), !10408
        cbr v7, block0(), block1(v7), !8344

        block0():
        v8 = call add_38(epoch, epoch_duration), !10409
        v9 = get_local ptr u64, now, !8348
        v10 = load v9
        v11 = call gt_89(v8, v10), !10410
        br block1(v11), !8344

        block1(v12: bool):
        v13 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !5069
        v16 = const u64 4, !5069
        store v16 to v15, !5069
        v17 = get_local ptr u64, current_epoch, !8352
        v18 = load v17
        v19 = get_local ptr u64, now, !8353
        v20 = load v19
        v21 = get_local ptr { u64, u64, u64, u64 }, __anon_1, !8354
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22, !8354
        store v18 to v23, !8354
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24, !8354
        store epoch to v25, !8354
        v26 = const u64 2
        v27 = get_elem_ptr v21, ptr u64, v26, !8354
        store epoch_duration to v27, !8354
        v28 = const u64 3
        v29 = get_elem_ptr v21, ptr u64, v28, !8354
        store v20 to v29, !8354
        v30 = load v21
        v31 = const u64 1
        v32 = const u64 4
        v33 = get_elem_ptr v13, ptr { u64, u64, u64, u64 }, v31, v32, !5069
        store v30 to v33, !5069
        v34 = load v13
        v35 = call require_317(v12, v34), !10411
        v36 = get_local ptr { b256, u64, b256 }, __anon_2, !8358
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr b256, v37
        v39 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !8358
        store v39 to v38, !8358
        v40 = const u64 1
        v41 = get_elem_ptr v36, ptr u64, v40
        v42 = const u64 0
        store v42 to v41, !8358
        v43 = const u64 2
        v44 = get_elem_ptr v36, ptr b256, v43
        v45 = const b256 0xb73c4b1683695c9091c69cd3ac58dcfa2df06e8f672cd57b72fb776c6e125242, !8358
        store v45 to v44, !8358
        v46 = load v36
        v47 = call write_441(v46, epoch), !10412
        v48 = get_local ptr { b256, u64, b256 }, __anon_3, !8362
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr b256, v49
        v51 = const b256 0x0dbee7545bd5cbe89afb5ff6e66c02ee06d2105f0878cfb45b8a489221b9ea9d, !8362
        store v51 to v50, !8362
        v52 = const u64 1
        v53 = get_elem_ptr v48, ptr u64, v52
        v54 = const u64 0
        store v54 to v53, !8362
        v55 = const u64 2
        v56 = get_elem_ptr v48, ptr b256, v55
        v57 = const b256 0x0dbee7545bd5cbe89afb5ff6e66c02ee06d2105f0878cfb45b8a489221b9ea9d, !8362
        store v57 to v56, !8362
        v58 = load v48
        v59 = call write_441(v58, epoch_duration), !10413
        v60 = get_local ptr { u64, u64 }, __anon_4, !8366
        v61 = const u64 0
        v62 = get_elem_ptr v60, ptr u64, v61
        store epoch to v62, !8366
        v63 = const u64 1
        v64 = get_elem_ptr v60, ptr u64, v63
        store epoch_duration to v64, !8366
        v65 = load v60
        v66 = call log_442(v65), !10414
        v67 = const unit ()
        ret () v67
    }

    pub entry_orig fn set_matcher_fee(amount !8374: u64) -> (), !10415 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2

        entry(amount: u64):
        v0 = call only_owner_57(), !10416
        v1 = call read_matcher_fee_485(), !10417
        v2 = call neq_26(amount, v1), !10418
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 7, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !10419
        v9 = get_local ptr { b256, u64, b256 }, __anon_1, !8390
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr b256, v10
        v12 = const b256 0x3493c96d5901ca6a92009e6e8732dee2d274b75731fc3355e9888ea296e15c0c, !8390
        store v12 to v11, !8390
        v13 = const u64 1
        v14 = get_elem_ptr v9, ptr u64, v13
        v15 = const u64 0
        store v15 to v14, !8390
        v16 = const u64 2
        v17 = get_elem_ptr v9, ptr b256, v16
        v18 = const b256 0x3493c96d5901ca6a92009e6e8732dee2d274b75731fc3355e9888ea296e15c0c, !8390
        store v18 to v17, !8390
        v19 = load v9
        v20 = call write_441(v19, amount), !10420
        v21 = get_local ptr { u64 }, __anon_2, !8394
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store amount to v23, !8394
        v24 = load v21
        v25 = call log_494(v24), !10421
        v26 = const unit ()
        ret () v26
    }

    pub entry_orig fn set_min_order_price(price !8414: u64) -> (), !10422 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2

        entry(price: u64):
        v0 = call only_owner_57(), !10423
        v1 = call read_min_order_price_401(), !10424
        v2 = call neq_26(price, v1), !10425
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 7, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !10426
        v9 = get_local ptr { b256, u64, b256 }, __anon_1, !8430
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr b256, v10
        v12 = const b256 0x29f5dd154c31547f4b4e4ad8565741c416a935be9adc4c46d68a12b779a0e26a, !8430
        store v12 to v11, !8430
        v13 = const u64 1
        v14 = get_elem_ptr v9, ptr u64, v13
        v15 = const u64 0
        store v15 to v14, !8430
        v16 = const u64 2
        v17 = get_elem_ptr v9, ptr b256, v16
        v18 = const b256 0x29f5dd154c31547f4b4e4ad8565741c416a935be9adc4c46d68a12b779a0e26a, !8430
        store v18 to v17, !8430
        v19 = load v9
        v20 = call write_441(v19, price), !10427
        v21 = get_local ptr { u64 }, __anon_2, !8434
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store price to v23, !8434
        v24 = load v21
        v25 = call log_498(v24), !10428
        v26 = const unit ()
        ret () v26
    }

    pub entry_orig fn set_min_order_size(size !8451: u64) -> (), !10429 {
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { b256, u64, b256 } __anon_1
        local { u64 } __anon_2

        entry(size: u64):
        v0 = call only_owner_57(), !10430
        v1 = call read_min_order_size_311(), !10431
        v2 = call neq_26(size, v1), !10432
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 7, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !10433
        v9 = get_local ptr { b256, u64, b256 }, __anon_1, !8467
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr b256, v10
        v12 = const b256 0x08e09a22868bf842d72aa81dd2cc2d707c26c2498b853428e18bbf9133161d25, !8467
        store v12 to v11, !8467
        v13 = const u64 1
        v14 = get_elem_ptr v9, ptr u64, v13
        v15 = const u64 0
        store v15 to v14, !8467
        v16 = const u64 2
        v17 = get_elem_ptr v9, ptr b256, v16
        v18 = const b256 0x08e09a22868bf842d72aa81dd2cc2d707c26c2498b853428e18bbf9133161d25, !8467
        store v18 to v17, !8467
        v19 = load v9
        v20 = call write_441(v19, size), !10434
        v21 = get_local ptr { u64 }, __anon_2, !8471
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store size to v23, !8471
        v24 = load v21
        v25 = call log_502(v24), !10435
        v26 = const unit ()
        ret () v26
    }

    pub entry_orig fn set_protocol_fee(protocol_fee !8541: { { u64, u64 }, u64 }) -> (), !10436 {
        local { u64, u64, u64 } __anon_0
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_1
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_2
        local { b256, u64, b256 } __anon_3
        local { { { u64, u64 }, u64 } } __anon_4

        entry(protocol_fee: { { u64, u64 }, u64 }):
        v0 = call only_owner_57(), !10437
        v1 = call len_521(protocol_fee), !10438
        v2 = const u64 0, !8551
        v3 = call gt_89(v1, v2), !10439
        cbr v3, block0(), block1(), !8552

        block0():
        v4 = const u64 0, !8555
        v5 = call get_522(protocol_fee, v4), !10440
        v6 = call unwrap_384(v5), !10441
        v7 = get_local ptr { u64, u64, u64 }, __anon_0
        store v6 to v7
        v8 = const u64 2
        v9 = get_elem_ptr v7, ptr u64, v8, !6185
        v10 = load v9
        v11 = const u64 0, !8562
        v12 = call eq_10(v10, v11), !10442
        v13 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_1, !5069
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !5069
        v16 = const u64 6, !5069
        store v16 to v15, !5069
        v17 = load v13
        v18 = call require_317(v12, v17), !10443
        v19 = const unit ()
        br block2(v19)

        block1():
        v20 = const unit ()
        br block2(v20)

        block2(v21: ()):
        v22 = call is_volume_threshold_valid_523(protocol_fee), !10444
        v23 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_2, !5069
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !5069
        v26 = const u64 5, !5069
        store v26 to v25, !5069
        v27 = load v23
        v28 = call require_317(v22, v27), !10445
        v29 = get_local ptr { b256, u64, b256 }, __anon_3, !8575
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr b256, v30
        v32 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !8575
        store v32 to v31, !8575
        v33 = const u64 1
        v34 = get_elem_ptr v29, ptr u64, v33
        v35 = const u64 0
        store v35 to v34, !8575
        v36 = const u64 2
        v37 = get_elem_ptr v29, ptr b256, v36
        v38 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !8575
        store v38 to v37, !8575
        v39 = load v29
        v40 = call store_vec_527(v39, protocol_fee), !10446
        v41 = get_local ptr { { { u64, u64 }, u64 } }, __anon_4, !8579
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr { { u64, u64 }, u64 }, v42
        store protocol_fee to v43, !8579
        v44 = load v41
        v45 = call log_530(v44), !10447
        v46 = const unit ()
        ret () v46
    }

    pub entry_orig fn transfer_ownership(new_owner !8879: { u64, ( { b256 } | { b256 } ) }) -> (), !10448 {
        entry(new_owner: { u64, ( { b256 } | { b256 } ) }):
        v0 = call transfer_ownership_536(new_owner), !10449
        v1 = const unit ()
        ret () v1
    }

    pub entry_orig fn withdraw(amount !8949: u64, asset_type !8950: { u64 }) -> (), !10450 {
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __anon_0
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_3
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_3_
        local { { u64, u64 }, { u64, u64 } } account
        local { b256 } asset
        local { u64, ( { b256 } | { b256 } ) } user

        entry(amount: u64, asset_type: { u64 }):
        v0 = call reentrancy_guard_112(), !10451
        v1 = call withdraw_internal_544(amount, asset_type), !10452
        v2 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3, !8960
        store v1 to v2, !8960
        v3 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3, !8960
        v4 = load v3
        v5 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        store v4 to v5, !8960
        v6 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { b256 }, v7, !8960
        v9 = load v8
        v10 = get_local ptr { b256 }, asset, !8960
        store v9 to v10, !8960
        v11 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        v12 = const u64 1
        v13 = get_elem_ptr v11, ptr { u64, ( { b256 } | { b256 } ) }, v12, !8960
        v14 = load v13
        v15 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8960
        store v14 to v15, !8960
        v16 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_3_, !8960
        v17 = const u64 2
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, { u64, u64 } }, v17, !8960
        v19 = load v18
        v20 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !8960
        store v19 to v20, !8960
        v21 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8961
        v22 = load v21
        v23 = get_local ptr { b256 }, asset, !8962
        v24 = load v23
        v25 = call transfer_546(v22, v24, amount), !10453
        v26 = get_local ptr { b256 }, asset, !8966
        v27 = load v26
        v28 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !8967
        v29 = load v28
        v30 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !8968
        v31 = load v30
        v32 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __anon_0, !8969
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33
        store amount to v34, !8969
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr { b256 }, v35
        store v27 to v36, !8969
        v37 = const u64 2
        v38 = get_elem_ptr v32, ptr { u64, ( { b256 } | { b256 } ) }, v37
        store v29 to v38, !8969
        v39 = const u64 3
        v40 = get_elem_ptr v32, ptr { { u64, u64 }, { u64, u64 } }, v39
        store v31 to v40, !8969
        v41 = load v32
        v42 = call log_557(v41), !10454
        v43 = const unit ()
        ret () v43
    }

    pub entry_orig fn withdraw_to_market(amount !9339: u64, asset_type !9340: { u64 }, market !9341: { b256 }) -> (), !10455 {
        local u64 _
        local u64 __
        local { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) } ___
        local u64 ____
        local u64 _____
        local { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) } __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { u64 } __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local { { u64, ( { b256 } | { b256 } ) } } __anon_6
        local { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } } __anon_7
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_4
        local { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } } __tuple_4_
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __tuple_5
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __tuple_5_
        local { { u64, u64 }, { u64, u64 } } account
        local { b256 } asset
        local { b256 } base
        local { b256 } quote
        local { u64, ( { b256 } | { b256 } ) } user

        entry(amount: u64, asset_type: { u64 }, market: { b256 }):
        v0 = call reentrancy_guard_112(), !10456
        v1 = call this_118(), !10457
        v2 = call neq_563(market, v1), !10458
        v3 = get_local ptr { u64, ( () | () | () | { u64, u64 } | { u64, u64, u64, u64 } | () | () | () | () ) }, __anon_0, !5069
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !5069
        v6 = const u64 8, !5069
        store v6 to v5, !5069
        v7 = load v3
        v8 = call require_317(v2, v7), !10459
        v9 = call withdraw_internal_544(amount, asset_type), !10460
        v10 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4, !9360
        store v9 to v10, !9360
        v11 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4, !9360
        v12 = load v11
        v13 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        store v12 to v13, !9360
        v14 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { b256 }, v15, !9360
        v17 = load v16
        v18 = get_local ptr { b256 }, asset, !9360
        store v17 to v18, !9360
        v19 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr { u64, ( { b256 } | { b256 } ) }, v20, !9360
        v22 = load v21
        v23 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9360
        store v22 to v23, !9360
        v24 = get_local ptr { { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } } }, __tuple_4_, !9360
        v25 = const u64 2
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, { u64, u64 } }, v25, !9360
        v27 = load v26
        v28 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9360
        store v27 to v28, !9360
        v29 = call into_574(market), !10461
        v30 = const string<6> "config"
        v31 = ptr_to_int v30 to u64, !9365
        v32 = get_local ptr { u64, u64 }, __anon_1, !9365
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33
        store v31 to v34, !9365
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr u64, v35
        v37 = const u64 6
        store v37 to v36, !9365
        v38 = get_local ptr slice, __anon_2, !9365
        mem_copy_bytes v38, v32, 16
        v39 = load v38
        v40 = const unit ()
        v41 = const u64 0
        v42 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        v43 = const u64 18446744073709551615
        v44 = call contract_call_564(v29, v39, v40, v41, v42, v43), !9366
        v45 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5, !9367
        store v44 to v45, !9367
        v46 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5, !9367
        v47 = load v46
        v48 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        store v47 to v48, !9367
        v49 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v50 = const u64 0
        v51 = get_elem_ptr v49, ptr { b256 }, v50, !9367
        v52 = load v51
        v53 = get_local ptr { b256 }, base, !9367
        store v52 to v53, !9367
        v54 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v55 = const u64 1
        v56 = get_elem_ptr v54, ptr u64, v55, !9367
        v57 = load v56
        v58 = get_local ptr u64, _, !9367
        store v57 to v58, !9367
        v59 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v60 = const u64 2
        v61 = get_elem_ptr v59, ptr { b256 }, v60, !9367
        v62 = load v61
        v63 = get_local ptr { b256 }, quote, !9367
        store v62 to v63, !9367
        v64 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v65 = const u64 3
        v66 = get_elem_ptr v64, ptr u64, v65, !9367
        v67 = load v66
        v68 = get_local ptr u64, __, !9367
        store v67 to v68, !9367
        v69 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v70 = const u64 4
        v71 = get_elem_ptr v69, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, v70, !9367
        v72 = load v71
        v73 = get_local ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, ___, !9367
        store v72 to v73, !9367
        v74 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v75 = const u64 5
        v76 = get_elem_ptr v74, ptr u64, v75, !9367
        v77 = load v76
        v78 = get_local ptr u64, ____, !9367
        store v77 to v78, !9367
        v79 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __tuple_5_, !9367
        v80 = const u64 6
        v81 = get_elem_ptr v79, ptr u64, v80, !9367
        v82 = load v81
        v83 = get_local ptr u64, _____, !9367
        store v82 to v83, !9367
        v84 = get_local ptr { b256 }, asset, !9368
        v85 = load v84
        v86 = get_local ptr { b256 }, base, !9369
        v87 = load v86
        v88 = call eq_325(v85, v87), !10462
        cbr v88, block1(v88), block0(), !9373

        block0():
        v89 = get_local ptr { b256 }, asset, !9374
        v90 = load v89
        v91 = get_local ptr { b256 }, quote, !9375
        v92 = load v91
        v93 = call eq_325(v90, v92), !10463
        br block1(v93), !9373

        block1(v94: bool):
        v95 = get_local ptr { u64 }, __anon_3, !5272
        v96 = const u64 0
        v97 = get_elem_ptr v95, ptr u64, v96, !5272
        v98 = const u64 2, !5272
        store v98 to v97, !5272
        v99 = load v95
        v100 = call require_395(v94, v99), !10464
        v101 = call into_574(market), !10465
        v102 = const string<11> "deposit_for"
        v103 = ptr_to_int v102 to u64, !9385
        v104 = get_local ptr { u64, u64 }, __anon_4, !9385
        v105 = const u64 0
        v106 = get_elem_ptr v104, ptr u64, v105
        store v103 to v106, !9385
        v107 = const u64 1
        v108 = get_elem_ptr v104, ptr u64, v107
        v109 = const u64 11
        store v109 to v108, !9385
        v110 = get_local ptr slice, __anon_5, !9385
        mem_copy_bytes v110, v104, 16
        v111 = load v110
        v112 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9386
        v113 = load v112
        v114 = get_local ptr { { u64, ( { b256 } | { b256 } ) } }, __anon_6
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr { u64, ( { b256 } | { b256 } ) }, v115
        store v113 to v116
        v117 = load v114
        v118 = get_local ptr { b256 }, asset, !9387
        v119 = load v118
        v120 = call into_580(v119), !10466
        v121 = const u64 18446744073709551615
        v122 = call contract_call_576(v101, v111, v117, amount, v120, v121), !9391
        v123 = get_local ptr { b256 }, asset, !9392
        v124 = load v123
        v125 = get_local ptr { u64, ( { b256 } | { b256 } ) }, user, !9393
        v126 = load v125
        v127 = get_local ptr { { u64, u64 }, { u64, u64 } }, account, !9394
        v128 = load v127
        v129 = get_local ptr { u64, { b256 }, { u64, ( { b256 } | { b256 } ) }, { { u64, u64 }, { u64, u64 } }, { b256 } }, __anon_7, !9395
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr u64, v130
        store amount to v131, !9395
        v132 = const u64 1
        v133 = get_elem_ptr v129, ptr { b256 }, v132
        store v124 to v133, !9395
        v134 = const u64 2
        v135 = get_elem_ptr v129, ptr { u64, ( { b256 } | { b256 } ) }, v134
        store v126 to v135, !9395
        v136 = const u64 3
        v137 = get_elem_ptr v129, ptr { { u64, u64 }, { u64, u64 } }, v136
        store v128 to v137, !9395
        v138 = const u64 4
        v139 = get_elem_ptr v129, ptr { b256 }, v138
        store market to v139, !9395
        v140 = load v129
        v141 = call log_583(v140), !10467
        v142 = const unit ()
        ret () v142
    }

    pub entry_orig fn account(user !9617: { u64, ( { b256 } | { b256 } ) }) -> { { u64, u64 }, { u64, u64 } }, !10468 {
        local { b256, u64, b256 } __anon_0

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9621
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !9621
        store v3 to v2, !9621
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9621
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x85a167ae3cbd52ab560286e6e5c18f73442197ab205b4e922a3c40b5de34008f, !9621
        store v9 to v8, !9621
        v10 = load v0
        v11 = call get_188(v10, user), !10469
        v12 = call try_read_330(v11), !10470
        v13 = call new_331(), !10471
        v14 = call unwrap_or_329(v12, v13), !10472
        ret { { u64, u64 }, { u64, u64 } } v14
    }

    pub entry_orig fn config() -> { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, !10473 {
        local { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } __anon_0

        entry():
        v0 = get_config ptr { b256 }, BASE_ASSET, !9641
        v1 = load v0
        v2 = get_config ptr u64, BASE_ASSET_DECIMALS, !9642
        v3 = load v2
        v4 = get_config ptr { b256 }, QUOTE_ASSET, !9643
        v5 = load v4
        v6 = get_config ptr u64, QUOTE_ASSET_DECIMALS, !9644
        v7 = load v6
        v8 = call _owner_69(), !10474
        v9 = call owner_589(v8), !10475
        v10 = get_config ptr u64, PRICE_DECIMALS, !9651
        v11 = load v10
        v12 = get_config ptr u64, VERSION, !9652
        v13 = load v12
        v14 = get_local ptr { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 }, __anon_0, !9653
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { b256 }, v15, !9653
        store v1 to v16, !9653
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17, !9653
        store v3 to v18, !9653
        v19 = const u64 2
        v20 = get_elem_ptr v14, ptr { b256 }, v19, !9653
        store v5 to v20, !9653
        v21 = const u64 3
        v22 = get_elem_ptr v14, ptr u64, v21, !9653
        store v7 to v22, !9653
        v23 = const u64 4
        v24 = get_elem_ptr v14, ptr { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, v23, !9653
        store v9 to v24, !9653
        v25 = const u64 5
        v26 = get_elem_ptr v14, ptr u64, v25, !9653
        store v11 to v26, !9653
        v27 = const u64 6
        v28 = get_elem_ptr v14, ptr u64, v27, !9653
        store v13 to v28, !9653
        v29 = load v14
        ret { { b256 }, u64, { b256 }, u64, { u64, ( () | { u64, ( { b256 } | { b256 } ) } ) }, u64, u64 } v29
    }

    pub entry_orig fn get_epoch() -> { u64, u64 }, !10476 {
        local { u64, u64 } __anon_0

        entry():
        v0 = call read_epoch_378(), !10477
        v1 = call read_epoch_duration_438(), !10478
        v2 = get_local ptr { u64, u64 }, __anon_0, !9756
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !9756
        store v0 to v4, !9756
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !9756
        store v1 to v6, !9756
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub entry_orig fn market_order(order !9761: b256) -> { u64, ( () | bool ) }, !10479 {
        entry(order: b256):
        v0 = call market_order_166(order), !10480
        ret { u64, ( () | bool ) } v0
    }

    pub entry_orig fn matcher_fee() -> u64, !10481 {
        entry():
        v0 = call read_matcher_fee_485(), !10482
        ret u64 v0
    }

    pub entry_orig fn min_order_price() -> u64, !10483 {
        entry():
        v0 = call read_min_order_price_401(), !10484
        ret u64 v0
    }

    pub entry_orig fn min_order_size() -> u64, !10485 {
        entry():
        v0 = call read_min_order_size_311(), !10486
        ret u64 v0
    }

    pub entry_orig fn order(order !9800: b256) -> { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) }, !10487 {
        local { b256, u64, b256 } __anon_0

        entry(order: b256):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9804
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !9804
        store v3 to v2, !9804
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9804
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xa24fa5aae31977e97e8bd799a1a28ec97f5fb7d35548195682d95c7cb1148fc5, !9804
        store v9 to v8, !9804
        v10 = load v0
        v11 = call get_131(v10, order), !10488
        v12 = call try_read_125(v11), !10489
        ret { u64, ( () | { u64, { u64 }, { u64 }, { u64, ( { b256 } | { b256 } ) }, u64, u64, u64, u64, u64, u64 } ) } v12
    }

    pub entry_orig fn order_id(order_type !9913: { u64 }, owner !9914: { u64, ( { b256 } | { b256 } ) }, price !9915: u64, block_height !9916: u64, order_height !9917: u64) -> b256, !10490 {
        local { u64 } __anon_0
        local { u64 } asset_type

        entry(order_type: { u64 }, owner: { u64, ( { b256 } | { b256 } ) }, price: u64, block_height: u64, order_height: u64):
        v0 = get_local ptr { u64 }, __anon_0, !4280
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !4280
        v3 = const u64 0, !4280
        store v3 to v2, !4280
        v4 = load v0
        v5 = get_local ptr { u64 }, asset_type, !9921
        store v4 to v5, !9921
        v6 = get_local ptr { u64 }, asset_type, !9922
        v7 = load v6
        v8 = const u64 1, !9923
        v9 = const u64 0, !9924
        v10 = const u64 0, !9925
        v11 = const u64 0, !9926
        v12 = const u64 0, !9927
        v13 = call new_394(v8, v7, order_type, owner, price, block_height, order_height, v9, v10, v11, v12), !10491
        v14 = call id_402(v13), !10492
        ret b256 v14
    }

    pub entry_orig fn protocol_fee() -> { { u64, u64 }, u64 }, !10493 {
        local { b256, u64, b256 } __anon_0

        entry():
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !9937
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !9937
        store v3 to v2, !9937
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !9937
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x7dbef6dc4e365382940f04cc782498fa1eb5d35829c52c2ddeaa18df059c4910, !9937
        store v9 to v8, !9937
        v10 = load v0
        v11 = call load_vec_611(v10), !10494
        ret { { u64, u64 }, u64 } v11
    }

    pub entry_orig fn protocol_fee_user(user !10142: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64 }, !10495 {
        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call protocol_fee_user_365(user), !10496
        ret { u64, u64 } v0
    }

    pub entry_orig fn protocol_fee_user_amount(amount !10154: u64, user !10155: { u64, ( { b256 } | { b256 } ) }) -> { u64, u64 }, !10497 {
        entry(amount: u64, user: { u64, ( { b256 } | { b256 } ) }):
        v0 = call protocol_fee_user_amount_622(amount, user), !10498
        ret { u64, u64 } v0
    }

    pub entry_orig fn user_order_height(user !10188: { u64, ( { b256 } | { b256 } ) }) -> u64, !10499 {
        local { b256, u64, b256 } __anon_0

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10192
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !10192
        store v3 to v2, !10192
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10192
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0xb0b3e672acc03204449c65bcc53357aa9c8e818b8d2da5c7955fd92c2b68cee9, !10192
        store v9 to v8, !10192
        v10 = load v0
        v11 = call get_398(v10, user), !10500
        v12 = call try_read_312(v11), !10501
        v13 = const u64 0, !10199
        v14 = call unwrap_or_268(v12, v13), !10502
        ret u64 v14
    }

    pub entry_orig fn user_orders(user !10203: { u64, ( { b256 } | { b256 } ) }) -> { { u64, u64 }, u64 }, !10503 {
        local { b256, u64, b256 } __anon_0

        entry(user: { u64, ( { b256 } | { b256 } ) }):
        v0 = get_local ptr { b256, u64, b256 }, __anon_0, !10207
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        v3 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !10207
        store v3 to v2, !10207
        v4 = const u64 1
        v5 = get_elem_ptr v0, ptr u64, v4
        v6 = const u64 0
        store v6 to v5, !10207
        v7 = const u64 2
        v8 = get_elem_ptr v0, ptr b256, v7
        v9 = const b256 0x4634eb39926dd1039a76fcfa9cb430c9aa65568605491e24e148d81bad884e56, !10207
        store v9 to v8, !10207
        v10 = load v0
        v11 = call get_270(v10, user), !10504
        v12 = call load_vec_625(v11), !10505
        ret { { u64, u64 }, u64 } v12
    }
}

!0 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/main.sw"
!1 = span !0 1828 1838
!2 = span !0 1871 1890
!3 = span !0 1984 1998
!4 = span !0 1905 1916
!5 = span !0 1949 1969
!6 = span !0 2013 2020
!7 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/codec.sw"
!8 = span !7 64814 64817
!9 = span !7 64828 64831
!10 = span !7 64838 64844
!11 = span !7 64784 65117
!12 = fn_name_span !7 64791 64810
!13 = inline "never"
!14 = (!11 !12 !13)
!15 = span !7 64902 64936
!16 = fn_call_path_span !7 64902 64926
!17 = (!15 !16)
!18 = span !7 64885 64937
!19 = span !7 64967 64973
!20 = span !7 64953 64974
!21 = fn_call_path_span !7 64953 64966
!22 = (!20 !21)
!23 = span !7 64942 64975
!24 = span !7 65033 65037
!25 = span !7 65023 65038
!26 = span !7 64980 65115
!27 = span !7 65088 65108
!28 = span !7 652 655
!29 = span !7 666 670
!30 = span !7 634 729
!31 = fn_name_span !7 641 651
!32 = (!30 !31)
!33 = span !7 703 723
!34 = "<autogenerated>"
!35 = span !34 123 129
!36 = span !34 101 232
!37 = fn_name_span !34 104 114
!38 = (!36 !37)
!39 = span !34 188 211
!40 = fn_call_path_span !34 195 201
!41 = (!39 !40)
!42 = span !34 175 214
!43 = span !7 3870 3874
!44 = span !7 3845 3952
!45 = fn_name_span !7 3852 3858
!46 = (!44 !45)
!47 = span !7 3927 3946
!48 = fn_call_path_span !7 3927 3940
!49 = (!47 !48)
!50 = span !7 65264 65270
!51 = span !7 65242 65340
!52 = fn_name_span !7 65245 65255
!53 = (!51 !52)
!54 = span !7 65304 65334
!55 = fn_call_path_span !7 65311 65324
!56 = (!54 !55)
!57 = span !7 2919 2923
!58 = span !7 2887 3064
!59 = fn_name_span !7 2894 2907
!60 = (!58 !59)
!61 = span !7 593 605
!62 = span !7 2948 2997
!63 = span !7 2940 2998
!64 = span !7 3044 3046
!65 = span !7 3007 3047
!66 = span !7 3057 3058
!67 = (!11 !12 !13)
!68 = (!15 !16)
!69 = (!20 !21)
!70 = span !7 65655 65661
!71 = span !7 65633 65960
!72 = fn_name_span !7 65636 65646
!73 = (!71 !72)
!74 = span !7 65742 65761
!75 = fn_call_path_span !7 65749 65753
!76 = (!74 !75)
!77 = span !7 65742 65770
!78 = fn_call_path_span !7 65762 65768
!79 = (!77 !78)
!80 = span !7 65734 65771
!81 = span !7 65788 65807
!82 = fn_call_path_span !7 65795 65799
!83 = (!81 !82)
!84 = span !7 65788 65816
!85 = fn_call_path_span !7 65808 65814
!86 = (!84 !85)
!87 = span !7 65780 65817
!88 = span !7 65834 65853
!89 = fn_call_path_span !7 65841 65845
!90 = (!88 !89)
!91 = span !7 65834 65862
!92 = fn_call_path_span !7 65854 65860
!93 = (!91 !92)
!94 = span !7 65826 65863
!95 = span !7 65880 65899
!96 = fn_call_path_span !7 65887 65891
!97 = (!95 !96)
!98 = span !7 65880 65908
!99 = fn_call_path_span !7 65900 65906
!100 = (!98 !99)
!101 = span !7 65872 65909
!102 = span !7 65919 65920
!103 = span !7 65924 65926
!104 = span !7 65919 65926
!105 = fn_call_path_span !7 65921 65923
!106 = (!104 !105)
!107 = span !7 65931 65932
!108 = span !7 65936 65938
!109 = span !7 65931 65938
!110 = fn_call_path_span !7 65933 65935
!111 = (!109 !110)
!112 = span !7 65918 65939
!113 = fn_call_path_span !7 65928 65929
!114 = (!112 !113)
!115 = span !7 65943 65944
!116 = span !7 65948 65949
!117 = span !7 65943 65949
!118 = fn_call_path_span !7 65945 65947
!119 = (!117 !118)
!120 = span !7 65918 65950
!121 = fn_call_path_span !7 65940 65941
!122 = (!120 !121)
!123 = span !7 65953 65954
!124 = span !7 65918 65954
!125 = fn_call_path_span !7 65951 65952
!126 = (!124 !125)
!127 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/primitive_conversions.sw"
!128 = span !127 3869 3873
!129 = span !127 3855 3949
!130 = fn_name_span !127 3862 3868
!131 = (!129 !130)
!132 = span !127 3892 3943
!133 = span !7 3318 3322
!134 = span !7 3295 3839
!135 = fn_name_span !7 3302 3306
!136 = (!134 !135)
!137 = span !7 3339 3367
!138 = span !7 3380 3406
!139 = span !7 3429 3486
!140 = span !7 3421 3487
!141 = span !7 3537 3541
!142 = span !7 3500 3542
!143 = span !7 3556 3557
!144 = span !7 3576 3580
!145 = span !7 3584 3585
!146 = span !7 3576 3585
!147 = fn_call_path_span !7 3581 3583
!148 = (!146 !147)
!149 = span !7 3608 3701
!150 = span !7 3650 3663
!151 = span !7 3600 3702
!152 = span !7 3752 3753
!153 = span !7 3715 3754
!154 = span !7 3768 3769
!155 = span !7 3799 3823
!156 = fn_call_path_span !7 3804 3816
!157 = (!155 !156)
!158 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/ops.sw"
!159 = span !158 14086 14090
!160 = span !158 14092 14097
!161 = span !158 14080 14146
!162 = fn_name_span !158 14083 14085
!163 = (!161 !162)
!164 = span !7 2705 2709
!165 = span !7 2674 2881
!166 = fn_name_span !7 2681 2693
!167 = (!165 !166)
!168 = span !7 2734 2815
!169 = span !7 2772 2785
!170 = span !7 2726 2816
!171 = span !7 2862 2863
!172 = span !7 2825 2864
!173 = span !7 2874 2875
!174 = span !158 20114 20118
!175 = span !158 20120 20125
!176 = span !158 20101 20174
!177 = fn_name_span !158 20104 20113
!178 = (!176 !177)
!179 = span !158 26802 26806
!180 = span !158 26808 26813
!181 = span !158 26795 27003
!182 = fn_name_span !158 26798 26801
!183 = (!181 !182)
!184 = span !158 26985 26996
!185 = fn_call_path_span !158 26985 26994
!186 = (!184 !185)
!187 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/primitives.sw"
!188 = span !187 3931 3978
!189 = fn_name_span !187 3938 3941
!190 = (!188 !189)
!191 = span !187 3962 3972
!192 = span !34 24 8658
!193 = purity "readswrites"
!194 = fn_name_span !34 31 38
!195 = (!192 !193 !194)
!196 = span !34 73 110
!197 = fn_call_path_span !34 73 108
!198 = (!196 !197)
!199 = span !34 55 111
!200 = span !34 143 170
!201 = fn_call_path_span !34 143 161
!202 = (!200 !201)
!203 = span !34 124 171
!204 = span !34 187 199
!205 = span !34 203 214
!206 = span !34 187 214
!207 = fn_call_path_span !34 200 202
!208 = (!206 !207)
!209 = span !34 231 259
!210 = fn_call_path_span !34 231 257
!211 = (!209 !210)
!212 = span !34 217 260
!213 = span !34 301 308
!214 = span !34 286 309
!215 = fn_call_path_span !34 286 292
!216 = (!214 !215)
!217 = span !34 261 310
!218 = span !34 346 353
!219 = span !34 346 359
!220 = fn_call_path_span !34 354 357
!221 = (!219 !220)
!222 = span !34 361 368
!223 = span !34 361 380
!224 = fn_call_path_span !34 369 372
!225 = (!223 !224)
!226 = span !34 331 381
!227 = span !34 388 400
!228 = span !34 404 411
!229 = span !34 388 411
!230 = fn_call_path_span !34 401 403
!231 = (!229 !230)
!232 = span !34 428 452
!233 = fn_call_path_span !34 428 450
!234 = (!232 !233)
!235 = span !34 414 453
!236 = span !34 469 492
!237 = span !34 494 495
!238 = span !34 454 496
!239 = span !34 503 515
!240 = span !34 519 528
!241 = span !34 503 528
!242 = fn_call_path_span !34 516 518
!243 = (!241 !242)
!244 = span !34 545 571
!245 = fn_call_path_span !34 545 569
!246 = (!244 !245)
!247 = span !34 531 572
!248 = span !34 588 611
!249 = span !34 613 614
!250 = span !34 573 615
!251 = span !34 622 634
!252 = span !34 638 652
!253 = span !34 622 652
!254 = fn_call_path_span !34 635 637
!255 = (!253 !254)
!256 = span !34 675 682
!257 = span !34 675 702
!258 = fn_call_path_span !34 683 689
!259 = (!257 !258)
!260 = span !34 655 703
!261 = span !34 772 776
!262 = span !34 777 778
!263 = span !34 742 779
!264 = fn_call_path_span !34 742 771
!265 = (!263 !264)
!266 = span !34 724 780
!267 = span !34 796 819
!268 = span !34 821 822
!269 = span !34 781 823
!270 = span !34 830 842
!271 = span !34 846 866
!272 = span !34 830 866
!273 = fn_call_path_span !34 843 845
!274 = (!272 !273)
!275 = span !34 889 896
!276 = span !34 889 916
!277 = fn_call_path_span !34 897 903
!278 = (!276 !277)
!279 = span !34 869 917
!280 = span !34 992 996
!281 = span !34 997 998
!282 = span !34 956 999
!283 = fn_call_path_span !34 956 991
!284 = (!282 !283)
!285 = span !34 938 1000
!286 = span !34 1016 1039
!287 = span !34 1041 1042
!288 = span !34 1001 1043
!289 = span !34 1050 1062
!290 = span !34 1066 1075
!291 = span !34 1050 1075
!292 = fn_call_path_span !34 1063 1065
!293 = (!291 !292)
!294 = span !34 1092 1118
!295 = fn_call_path_span !34 1092 1116
!296 = (!294 !295)
!297 = span !34 1078 1119
!298 = span !34 1135 1158
!299 = span !34 1160 1161
!300 = span !34 1120 1162
!301 = span !34 1169 1181
!302 = span !34 1185 1198
!303 = span !34 1169 1198
!304 = fn_call_path_span !34 1182 1184
!305 = (!303 !304)
!306 = span !34 1225 1232
!307 = span !34 1225 1256
!308 = fn_call_path_span !34 1233 1239
!309 = (!307 !308)
!310 = span !34 1201 1257
!311 = span !34 1325 1329
!312 = span !34 1330 1331
!313 = span !34 1296 1332
!314 = fn_call_path_span !34 1296 1324
!315 = (!313 !314)
!316 = span !34 1278 1333
!317 = span !34 1349 1372
!318 = span !34 1374 1375
!319 = span !34 1334 1376
!320 = span !34 1383 1395
!321 = span !34 1399 1419
!322 = span !34 1383 1419
!323 = fn_call_path_span !34 1396 1398
!324 = (!322 !323)
!325 = span !34 1484 1491
!326 = span !34 1484 1553
!327 = fn_call_path_span !34 1492 1498
!328 = (!326 !327)
!329 = span !34 1422 1554
!330 = span !34 1631 1635
!331 = span !34 1636 1637
!332 = span !34 1639 1643
!333 = span !34 1644 1645
!334 = span !34 1647 1651
!335 = span !34 1652 1653
!336 = span !34 1655 1659
!337 = span !34 1660 1661
!338 = span !34 1663 1667
!339 = span !34 1668 1669
!340 = span !34 1671 1675
!341 = span !34 1676 1677
!342 = span !34 1595 1678
!343 = fn_call_path_span !34 1595 1630
!344 = (!342 !343)
!345 = span !34 1575 1679
!346 = span !34 1720 1727
!347 = span !34 1705 1728
!348 = fn_call_path_span !34 1705 1711
!349 = (!347 !348)
!350 = span !34 1680 1729
!351 = span !34 1765 1772
!352 = span !34 1765 1778
!353 = fn_call_path_span !34 1773 1776
!354 = (!352 !353)
!355 = span !34 1780 1787
!356 = span !34 1780 1799
!357 = fn_call_path_span !34 1788 1791
!358 = (!356 !357)
!359 = span !34 1750 1800
!360 = span !34 1807 1819
!361 = span !34 1823 1845
!362 = span !34 1807 1845
!363 = fn_call_path_span !34 1820 1822
!364 = (!362 !363)
!365 = span !34 1872 1879
!366 = span !34 1872 1903
!367 = fn_call_path_span !34 1880 1886
!368 = (!366 !367)
!369 = span !34 1848 1904
!370 = span !34 1981 1985
!371 = span !34 1986 1987
!372 = span !34 1943 1988
!373 = fn_call_path_span !34 1943 1980
!374 = (!372 !373)
!375 = span !34 1925 1989
!376 = span !34 2005 2028
!377 = span !34 2030 2031
!378 = span !34 1990 2032
!379 = span !34 2039 2051
!380 = span !34 2055 2073
!381 = span !34 2039 2073
!382 = fn_call_path_span !34 2052 2054
!383 = (!381 !382)
!384 = span !34 2101 2108
!385 = span !34 2101 2133
!386 = fn_call_path_span !34 2109 2115
!387 = (!385 !386)
!388 = span !34 2076 2134
!389 = span !34 2207 2211
!390 = span !34 2212 2213
!391 = span !34 2173 2214
!392 = fn_call_path_span !34 2173 2206
!393 = (!391 !392)
!394 = span !34 2155 2215
!395 = span !34 2231 2254
!396 = span !34 2256 2257
!397 = span !34 2216 2258
!398 = span !34 2265 2277
!399 = span !34 2281 2300
!400 = span !34 2265 2300
!401 = fn_call_path_span !34 2278 2280
!402 = (!400 !401)
!403 = span !34 2338 2345
!404 = span !34 2338 2380
!405 = fn_call_path_span !34 2346 2352
!406 = (!404 !405)
!407 = span !34 2303 2381
!408 = span !34 2457 2461
!409 = span !34 2462 2463
!410 = span !34 2465 2469
!411 = span !34 2470 2471
!412 = span !34 2473 2477
!413 = span !34 2478 2479
!414 = span !34 2422 2480
!415 = fn_call_path_span !34 2422 2456
!416 = (!414 !415)
!417 = span !34 2402 2481
!418 = span !34 2522 2529
!419 = span !34 2507 2530
!420 = fn_call_path_span !34 2507 2513
!421 = (!419 !420)
!422 = span !34 2482 2531
!423 = span !34 2567 2574
!424 = span !34 2567 2580
!425 = fn_call_path_span !34 2575 2578
!426 = (!424 !425)
!427 = span !34 2582 2589
!428 = span !34 2582 2601
!429 = fn_call_path_span !34 2590 2593
!430 = (!428 !429)
!431 = span !34 2552 2602
!432 = span !34 2609 2621
!433 = span !34 2625 2637
!434 = span !34 2609 2637
!435 = fn_call_path_span !34 2622 2624
!436 = (!434 !435)
!437 = span !34 2675 2682
!438 = span !34 2675 2717
!439 = fn_call_path_span !34 2683 2689
!440 = (!438 !439)
!441 = span !34 2640 2718
!442 = span !34 2787 2791
!443 = span !34 2792 2793
!444 = span !34 2795 2799
!445 = span !34 2800 2801
!446 = span !34 2803 2807
!447 = span !34 2808 2809
!448 = span !34 2759 2810
!449 = fn_call_path_span !34 2759 2786
!450 = (!448 !449)
!451 = span !34 2739 2811
!452 = span !34 2852 2859
!453 = span !34 2837 2860
!454 = fn_call_path_span !34 2837 2843
!455 = (!453 !454)
!456 = span !34 2812 2861
!457 = span !34 2897 2904
!458 = span !34 2897 2910
!459 = fn_call_path_span !34 2905 2908
!460 = (!458 !459)
!461 = span !34 2912 2919
!462 = span !34 2912 2931
!463 = fn_call_path_span !34 2920 2923
!464 = (!462 !463)
!465 = span !34 2882 2932
!466 = span !34 2939 2951
!467 = span !34 2955 2966
!468 = span !34 2939 2966
!469 = fn_call_path_span !34 2952 2954
!470 = (!468 !469)
!471 = span !34 2993 3000
!472 = span !34 2993 3024
!473 = fn_call_path_span !34 3001 3007
!474 = (!472 !473)
!475 = span !34 2969 3025
!476 = span !34 3091 3095
!477 = span !34 3096 3097
!478 = span !34 3099 3103
!479 = span !34 3104 3105
!480 = span !34 3064 3106
!481 = fn_call_path_span !34 3064 3090
!482 = (!480 !481)
!483 = span !34 3046 3107
!484 = span !34 3123 3146
!485 = span !34 3148 3149
!486 = span !34 3108 3150
!487 = span !34 3157 3169
!488 = span !34 3173 3190
!489 = span !34 3157 3190
!490 = fn_call_path_span !34 3170 3172
!491 = (!489 !490)
!492 = span !34 3212 3219
!493 = span !34 3212 3238
!494 = fn_call_path_span !34 3220 3226
!495 = (!493 !494)
!496 = span !34 3193 3239
!497 = span !34 3311 3315
!498 = span !34 3316 3317
!499 = span !34 3278 3318
!500 = fn_call_path_span !34 3278 3310
!501 = (!499 !500)
!502 = span !34 3260 3319
!503 = span !34 3335 3358
!504 = span !34 3360 3361
!505 = span !34 3320 3362
!506 = span !34 3369 3381
!507 = span !34 3385 3406
!508 = span !34 3369 3406
!509 = fn_call_path_span !34 3382 3384
!510 = (!508 !509)
!511 = span !34 3428 3435
!512 = span !34 3428 3454
!513 = fn_call_path_span !34 3436 3442
!514 = (!512 !513)
!515 = span !34 3409 3455
!516 = span !34 3531 3535
!517 = span !34 3536 3537
!518 = span !34 3494 3538
!519 = fn_call_path_span !34 3494 3530
!520 = (!518 !519)
!521 = span !34 3476 3539
!522 = span !34 3555 3578
!523 = span !34 3580 3581
!524 = span !34 3540 3582
!525 = span !34 3589 3601
!526 = span !34 3605 3625
!527 = span !34 3589 3625
!528 = fn_call_path_span !34 3602 3604
!529 = (!527 !528)
!530 = span !34 3647 3654
!531 = span !34 3647 3673
!532 = fn_call_path_span !34 3655 3661
!533 = (!531 !532)
!534 = span !34 3628 3674
!535 = span !34 3749 3753
!536 = span !34 3754 3755
!537 = span !34 3713 3756
!538 = fn_call_path_span !34 3713 3748
!539 = (!537 !538)
!540 = span !34 3695 3757
!541 = span !34 3773 3796
!542 = span !34 3798 3799
!543 = span !34 3758 3800
!544 = span !34 3807 3819
!545 = span !34 3823 3841
!546 = span !34 3807 3841
!547 = fn_call_path_span !34 3820 3822
!548 = (!546 !547)
!549 = span !34 3876 3883
!550 = span !34 3876 3915
!551 = fn_call_path_span !34 3884 3890
!552 = (!550 !551)
!553 = span !34 3844 3916
!554 = span !34 3989 3993
!555 = span !34 3994 3995
!556 = span !34 3955 3996
!557 = fn_call_path_span !34 3955 3988
!558 = (!556 !557)
!559 = span !34 3937 3997
!560 = span !34 4013 4036
!561 = span !34 4038 4039
!562 = span !34 3998 4040
!563 = span !34 4047 4059
!564 = span !34 4063 4083
!565 = span !34 4047 4083
!566 = fn_call_path_span !34 4060 4062
!567 = (!565 !566)
!568 = span !34 4110 4117
!569 = span !34 4110 4141
!570 = fn_call_path_span !34 4118 4124
!571 = (!569 !570)
!572 = span !34 4086 4142
!573 = span !34 4217 4221
!574 = span !34 4222 4223
!575 = span !34 4181 4224
!576 = fn_call_path_span !34 4181 4216
!577 = (!575 !576)
!578 = span !34 4163 4225
!579 = span !34 4241 4264
!580 = span !34 4266 4267
!581 = span !34 4226 4268
!582 = span !34 4275 4287
!583 = span !34 4291 4301
!584 = span !34 4275 4301
!585 = fn_call_path_span !34 4288 4290
!586 = (!584 !585)
!587 = span !34 4334 4341
!588 = span !34 4334 4371
!589 = fn_call_path_span !34 4342 4348
!590 = (!588 !589)
!591 = span !34 4304 4372
!592 = span !34 4437 4441
!593 = span !34 4442 4443
!594 = span !34 4445 4449
!595 = span !34 4450 4451
!596 = span !34 4411 4452
!597 = fn_call_path_span !34 4411 4436
!598 = (!596 !597)
!599 = span !34 4393 4453
!600 = span !34 4469 4492
!601 = span !34 4494 4495
!602 = span !34 4454 4496
!603 = span !34 4503 4515
!604 = span !34 4519 4539
!605 = span !34 4503 4539
!606 = fn_call_path_span !34 4516 4518
!607 = (!605 !606)
!608 = span !34 4584 4591
!609 = span !34 4584 4633
!610 = fn_call_path_span !34 4592 4598
!611 = (!609 !610)
!612 = span !34 4542 4634
!613 = span !34 4709 4713
!614 = span !34 4714 4715
!615 = span !34 4717 4721
!616 = span !34 4722 4723
!617 = span !34 4725 4729
!618 = span !34 4730 4731
!619 = span !34 4673 4732
!620 = fn_call_path_span !34 4673 4708
!621 = (!619 !620)
!622 = span !34 4655 4733
!623 = span !34 4749 4772
!624 = span !34 4774 4775
!625 = span !34 4734 4776
!626 = span !34 4783 4795
!627 = span !34 4799 4808
!628 = span !34 4783 4808
!629 = fn_call_path_span !34 4796 4798
!630 = (!628 !629)
!631 = span !34 4835 4842
!632 = span !34 4835 4866
!633 = fn_call_path_span !34 4843 4849
!634 = (!632 !633)
!635 = span !34 4811 4867
!636 = span !34 4936 4940
!637 = span !34 4941 4942
!638 = span !34 4911 4943
!639 = fn_call_path_span !34 4911 4935
!640 = (!638 !639)
!641 = span !34 4888 4944
!642 = span !34 4988 4995
!643 = span !34 4970 4996
!644 = fn_call_path_span !34 4970 4976
!645 = (!643 !644)
!646 = span !34 4945 4997
!647 = span !34 5033 5040
!648 = span !34 5033 5046
!649 = fn_call_path_span !34 5041 5044
!650 = (!648 !649)
!651 = span !34 5048 5055
!652 = span !34 5048 5067
!653 = fn_call_path_span !34 5056 5059
!654 = (!652 !653)
!655 = span !34 5018 5068
!656 = span !34 5075 5087
!657 = span !34 5091 5099
!658 = span !34 5075 5099
!659 = fn_call_path_span !34 5088 5090
!660 = (!658 !659)
!661 = span !34 5116 5141
!662 = fn_call_path_span !34 5116 5139
!663 = (!661 !662)
!664 = span !34 5102 5142
!665 = span !34 5236 5243
!666 = span !34 5168 5244
!667 = fn_call_path_span !34 5168 5174
!668 = (!666 !667)
!669 = span !34 5143 5245
!670 = span !34 5281 5288
!671 = span !34 5281 5294
!672 = fn_call_path_span !34 5289 5292
!673 = (!671 !672)
!674 = span !34 5296 5303
!675 = span !34 5296 5315
!676 = fn_call_path_span !34 5304 5307
!677 = (!675 !676)
!678 = span !34 5266 5316
!679 = span !34 5323 5335
!680 = span !34 5339 5350
!681 = span !34 5323 5350
!682 = fn_call_path_span !34 5336 5338
!683 = (!681 !682)
!684 = span !34 5367 5395
!685 = fn_call_path_span !34 5367 5393
!686 = (!684 !685)
!687 = span !34 5353 5396
!688 = span !34 5444 5451
!689 = span !34 5422 5452
!690 = fn_call_path_span !34 5422 5428
!691 = (!689 !690)
!692 = span !34 5397 5453
!693 = span !34 5489 5496
!694 = span !34 5489 5502
!695 = fn_call_path_span !34 5497 5500
!696 = (!694 !695)
!697 = span !34 5504 5511
!698 = span !34 5504 5523
!699 = fn_call_path_span !34 5512 5515
!700 = (!698 !699)
!701 = span !34 5474 5524
!702 = span !34 5531 5543
!703 = span !34 5547 5561
!704 = span !34 5531 5561
!705 = fn_call_path_span !34 5544 5546
!706 = (!704 !705)
!707 = span !34 5584 5591
!708 = span !34 5584 5611
!709 = fn_call_path_span !34 5592 5598
!710 = (!708 !709)
!711 = span !34 5564 5612
!712 = span !34 5691 5695
!713 = span !34 5696 5697
!714 = span !34 5661 5698
!715 = fn_call_path_span !34 5661 5690
!716 = (!714 !715)
!717 = span !34 5633 5699
!718 = span !34 5748 5755
!719 = span !34 5725 5756
!720 = fn_call_path_span !34 5725 5731
!721 = (!719 !720)
!722 = span !34 5700 5757
!723 = span !34 5793 5800
!724 = span !34 5793 5806
!725 = fn_call_path_span !34 5801 5804
!726 = (!724 !725)
!727 = span !34 5808 5815
!728 = span !34 5808 5827
!729 = fn_call_path_span !34 5816 5819
!730 = (!728 !729)
!731 = span !34 5778 5828
!732 = span !34 5835 5847
!733 = span !34 5851 5864
!734 = span !34 5835 5864
!735 = fn_call_path_span !34 5848 5850
!736 = (!734 !735)
!737 = span !34 5881 5911
!738 = fn_call_path_span !34 5881 5909
!739 = (!737 !738)
!740 = span !34 5867 5912
!741 = span !34 5952 5959
!742 = span !34 5938 5960
!743 = fn_call_path_span !34 5938 5944
!744 = (!742 !743)
!745 = span !34 5913 5961
!746 = span !34 5997 6004
!747 = span !34 5997 6010
!748 = fn_call_path_span !34 6005 6008
!749 = (!747 !748)
!750 = span !34 6012 6019
!751 = span !34 6012 6031
!752 = fn_call_path_span !34 6020 6023
!753 = (!751 !752)
!754 = span !34 5982 6032
!755 = span !34 6039 6051
!756 = span !34 6055 6072
!757 = span !34 6039 6072
!758 = fn_call_path_span !34 6052 6054
!759 = (!757 !758)
!760 = span !34 6089 6123
!761 = fn_call_path_span !34 6089 6121
!762 = (!760 !761)
!763 = span !34 6075 6124
!764 = span !34 6164 6171
!765 = span !34 6150 6172
!766 = fn_call_path_span !34 6150 6156
!767 = (!765 !766)
!768 = span !34 6125 6173
!769 = span !34 6209 6216
!770 = span !34 6209 6222
!771 = fn_call_path_span !34 6217 6220
!772 = (!770 !771)
!773 = span !34 6224 6231
!774 = span !34 6224 6243
!775 = fn_call_path_span !34 6232 6235
!776 = (!774 !775)
!777 = span !34 6194 6244
!778 = span !34 6251 6263
!779 = span !34 6267 6283
!780 = span !34 6251 6283
!781 = fn_call_path_span !34 6264 6266
!782 = (!780 !781)
!783 = span !34 6300 6333
!784 = fn_call_path_span !34 6300 6331
!785 = (!783 !784)
!786 = span !34 6286 6334
!787 = span !34 6374 6381
!788 = span !34 6360 6382
!789 = fn_call_path_span !34 6360 6366
!790 = (!788 !789)
!791 = span !34 6335 6383
!792 = span !34 6419 6426
!793 = span !34 6419 6432
!794 = fn_call_path_span !34 6427 6430
!795 = (!793 !794)
!796 = span !34 6434 6441
!797 = span !34 6434 6453
!798 = fn_call_path_span !34 6442 6445
!799 = (!797 !798)
!800 = span !34 6404 6454
!801 = span !34 6461 6473
!802 = span !34 6477 6484
!803 = span !34 6461 6484
!804 = fn_call_path_span !34 6474 6476
!805 = (!803 !804)
!806 = span !34 6507 6514
!807 = span !34 6507 6534
!808 = fn_call_path_span !34 6515 6521
!809 = (!807 !808)
!810 = span !34 6487 6535
!811 = span !34 6608 6612
!812 = span !34 6613 6614
!813 = span !34 6585 6615
!814 = fn_call_path_span !34 6585 6607
!815 = (!813 !814)
!816 = span !34 6556 6616
!817 = span !34 6666 6673
!818 = span !34 6642 6674
!819 = fn_call_path_span !34 6642 6648
!820 = (!818 !819)
!821 = span !34 6617 6675
!822 = span !34 6711 6718
!823 = span !34 6711 6724
!824 = fn_call_path_span !34 6719 6722
!825 = (!823 !824)
!826 = span !34 6726 6733
!827 = span !34 6726 6745
!828 = fn_call_path_span !34 6734 6737
!829 = (!827 !828)
!830 = span !34 6696 6746
!831 = span !34 6753 6765
!832 = span !34 6769 6779
!833 = span !34 6753 6779
!834 = fn_call_path_span !34 6766 6768
!835 = (!833 !834)
!836 = span !34 6832 6839
!837 = span !34 6832 6889
!838 = fn_call_path_span !34 6840 6846
!839 = (!837 !838)
!840 = span !34 6782 6890
!841 = span !34 6957 6961
!842 = span !34 6962 6963
!843 = span !34 6965 6969
!844 = span !34 6970 6971
!845 = span !34 6973 6977
!846 = span !34 6978 6979
!847 = span !34 6981 6985
!848 = span !34 6986 6987
!849 = span !34 6989 6993
!850 = span !34 6994 6995
!851 = span !34 6931 6996
!852 = fn_call_path_span !34 6931 6956
!853 = (!851 !852)
!854 = span !34 6911 6997
!855 = span !34 7038 7045
!856 = span !34 7023 7046
!857 = fn_call_path_span !34 7023 7029
!858 = (!856 !857)
!859 = span !34 6998 7047
!860 = span !34 7083 7090
!861 = span !34 7083 7096
!862 = fn_call_path_span !34 7091 7094
!863 = (!861 !862)
!864 = span !34 7098 7105
!865 = span !34 7098 7117
!866 = fn_call_path_span !34 7106 7109
!867 = (!865 !866)
!868 = span !34 7068 7118
!869 = span !34 7125 7137
!870 = span !34 7141 7155
!871 = span !34 7125 7155
!872 = fn_call_path_span !34 7138 7140
!873 = (!871 !872)
!874 = span !34 7172 7203
!875 = fn_call_path_span !34 7172 7201
!876 = (!874 !875)
!877 = span !34 7158 7204
!878 = span !34 7257 7264
!879 = span !34 7230 7265
!880 = fn_call_path_span !34 7230 7236
!881 = (!879 !880)
!882 = span !34 7205 7266
!883 = span !34 7302 7309
!884 = span !34 7302 7315
!885 = fn_call_path_span !34 7310 7313
!886 = (!884 !885)
!887 = span !34 7317 7324
!888 = span !34 7317 7336
!889 = fn_call_path_span !34 7325 7328
!890 = (!888 !889)
!891 = span !34 7287 7337
!892 = span !34 7344 7356
!893 = span !34 7360 7379
!894 = span !34 7344 7379
!895 = fn_call_path_span !34 7357 7359
!896 = (!894 !895)
!897 = span !34 7406 7413
!898 = span !34 7406 7437
!899 = fn_call_path_span !34 7414 7420
!900 = (!898 !899)
!901 = span !34 7382 7438
!902 = span !34 7521 7525
!903 = span !34 7526 7527
!904 = span !34 7486 7528
!905 = fn_call_path_span !34 7486 7520
!906 = (!904 !905)
!907 = span !34 7459 7529
!908 = span !34 7577 7584
!909 = span !34 7555 7585
!910 = fn_call_path_span !34 7555 7561
!911 = (!909 !910)
!912 = span !34 7530 7586
!913 = span !34 7622 7629
!914 = span !34 7622 7635
!915 = fn_call_path_span !34 7630 7633
!916 = (!914 !915)
!917 = span !34 7637 7644
!918 = span !34 7637 7656
!919 = fn_call_path_span !34 7645 7648
!920 = (!918 !919)
!921 = span !34 7607 7657
!922 = span !34 7664 7676
!923 = span !34 7680 7706
!924 = span !34 7664 7706
!925 = fn_call_path_span !34 7677 7679
!926 = (!924 !925)
!927 = span !34 7738 7745
!928 = span !34 7738 7774
!929 = fn_call_path_span !34 7746 7752
!930 = (!928 !929)
!931 = span !34 7709 7775
!932 = span !34 7865 7869
!933 = span !34 7870 7871
!934 = span !34 7873 7877
!935 = span !34 7878 7879
!936 = span !34 7823 7880
!937 = fn_call_path_span !34 7823 7864
!938 = (!936 !937)
!939 = span !34 7796 7881
!940 = span !34 7929 7936
!941 = span !34 7907 7937
!942 = fn_call_path_span !34 7907 7913
!943 = (!941 !942)
!944 = span !34 7882 7938
!945 = span !34 7974 7981
!946 = span !34 7974 7987
!947 = fn_call_path_span !34 7982 7985
!948 = (!946 !947)
!949 = span !34 7989 7996
!950 = span !34 7989 8008
!951 = fn_call_path_span !34 7997 8000
!952 = (!950 !951)
!953 = span !34 7959 8009
!954 = span !34 8016 8028
!955 = span !34 8032 8051
!956 = span !34 8016 8051
!957 = fn_call_path_span !34 8029 8031
!958 = (!956 !957)
!959 = span !34 8078 8085
!960 = span !34 8078 8109
!961 = fn_call_path_span !34 8086 8092
!962 = (!960 !961)
!963 = span !34 8054 8110
!964 = span !34 8185 8189
!965 = span !34 8190 8191
!966 = span !34 8150 8192
!967 = fn_call_path_span !34 8150 8184
!968 = (!966 !967)
!969 = span !34 8131 8193
!970 = span !34 8233 8240
!971 = span !34 8219 8241
!972 = fn_call_path_span !34 8219 8225
!973 = (!971 !972)
!974 = span !34 8194 8242
!975 = span !34 8278 8285
!976 = span !34 8278 8291
!977 = fn_call_path_span !34 8286 8289
!978 = (!976 !977)
!979 = span !34 8293 8300
!980 = span !34 8293 8312
!981 = fn_call_path_span !34 8301 8304
!982 = (!980 !981)
!983 = span !34 8263 8313
!984 = span !34 8320 8332
!985 = span !34 8336 8349
!986 = span !34 8320 8349
!987 = fn_call_path_span !34 8333 8335
!988 = (!986 !987)
!989 = span !34 8376 8383
!990 = span !34 8376 8407
!991 = fn_call_path_span !34 8384 8390
!992 = (!990 !991)
!993 = span !34 8352 8408
!994 = span !34 8483 8487
!995 = span !34 8488 8489
!996 = span !34 8454 8490
!997 = fn_call_path_span !34 8454 8482
!998 = (!996 !997)
!999 = span !34 8429 8491
!1000 = span !34 8537 8544
!1001 = span !34 8517 8545
!1002 = fn_call_path_span !34 8517 8523
!1003 = (!1001 !1002)
!1004 = span !34 8492 8546
!1005 = span !34 8582 8589
!1006 = span !34 8582 8595
!1007 = fn_call_path_span !34 8590 8593
!1008 = (!1006 !1007)
!1009 = span !34 8597 8604
!1010 = span !34 8597 8616
!1011 = fn_call_path_span !34 8605 8608
!1012 = (!1010 !1011)
!1013 = span !34 8567 8617
!1014 = span !34 8643 8646
!1015 = span !34 8634 8647
!1016 = span !7 1110 1482
!1017 = fn_name_span !7 1117 1138
!1018 = (!1016 !1017)
!1019 = span !7 1167 1206
!1020 = span !7 1204 1206
!1021 = span !7 1227 1268
!1022 = span !7 1217 1269
!1023 = span !7 1288 1291
!1024 = span !7 1303 1326
!1025 = span !7 1288 1327
!1026 = fn_call_path_span !7 1292 1295
!1027 = (!1025 !1026)
!1028 = span !7 1278 1328
!1029 = span !7 1347 1350
!1030 = span !7 1347 1364
!1031 = fn_call_path_span !7 1351 1355
!1032 = (!1030 !1031)
!1033 = span !7 1337 1365
!1034 = span !7 1416 1419
!1035 = span !7 1407 1465
!1036 = span !7 1375 1476
!1037 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/raw_ptr.sw"
!1038 = span !1037 1054 1058
!1039 = span !1037 1060 1065
!1040 = span !1037 1040 1123
!1041 = fn_name_span !1037 1047 1050
!1042 = (!1040 !1041)
!1043 = span !1037 2220 2224
!1044 = span !1037 2205 2621
!1045 = fn_name_span !1037 2212 2216
!1046 = (!1044 !1045)
!1047 = span !1037 2244 2270
!1048 = span !1037 2285 2338
!1049 = span !1037 2380 2381
!1050 = span !1037 2357 2382
!1051 = span !1037 2397 2486
!1052 = span !1037 2435 2448
!1053 = span !1037 2516 2605
!1054 = span !1037 2554 2567
!1055 = span !7 126810 126958
!1056 = fn_name_span !7 126817 126835
!1057 = (!1055 !1056)
!1058 = span !7 126893 126929
!1059 = fn_call_path_span !7 126893 126927
!1060 = (!1058 !1059)
!1061 = span !7 126876 126930
!1062 = span !7 126949 126955
!1063 = span !7 126935 126956
!1064 = fn_call_path_span !7 126935 126948
!1065 = (!1063 !1064)
!1066 = span !7 735 1104
!1067 = fn_name_span !7 742 762
!1068 = (!1066 !1067)
!1069 = span !7 791 829
!1070 = span !7 827 829
!1071 = span !7 850 891
!1072 = span !7 840 892
!1073 = span !7 911 914
!1074 = span !7 926 948
!1075 = span !7 911 949
!1076 = fn_call_path_span !7 915 918
!1077 = (!1075 !1076)
!1078 = span !7 901 950
!1079 = span !7 969 972
!1080 = span !7 969 986
!1081 = fn_call_path_span !7 973 977
!1082 = (!1080 !1081)
!1083 = span !7 959 987
!1084 = span !7 1038 1041
!1085 = span !7 1029 1087
!1086 = span !7 997 1098
!1087 = span !7 66774 66780
!1088 = span !7 66752 66966
!1089 = fn_name_span !7 66755 66765
!1090 = (!1088 !1089)
!1091 = span !7 66823 66851
!1092 = fn_call_path_span !7 66830 66842
!1093 = (!1091 !1092)
!1094 = span !7 66813 66852
!1095 = span !7 66890 66893
!1096 = span !7 66872 66894
!1097 = fn_call_path_span !7 66879 66889
!1098 = (!1096 !1097)
!1099 = span !7 66861 66895
!1100 = span !7 66912 66916
!1101 = span !7 66912 66922
!1102 = fn_call_path_span !7 66917 66920
!1103 = (!1101 !1102)
!1104 = span !7 66924 66927
!1105 = span !7 66911 66928
!1106 = span !7 66904 66960
!1107 = (!165 !166)
!1108 = span !7 3096 3100
!1109 = span !7 3102 3107
!1110 = span !7 3070 3289
!1111 = fn_name_span !7 3077 3087
!1112 = (!1110 !1111)
!1113 = span !7 3158 3175
!1114 = span !7 3149 3215
!1115 = span !7 3137 3216
!1116 = span !7 3225 3268
!1117 = span !7 3278 3283
!1118 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/raw_slice.sw"
!1119 = span !1118 2876 2880
!1120 = span !1118 2865 2927
!1121 = fn_name_span !1118 2872 2875
!1122 = (!1120 !1121)
!1123 = span !1118 2903 2919
!1124 = fn_call_path_span !1118 2903 2913
!1125 = (!1123 !1124)
!1126 = span !1118 2920 2921
!1127 = span !1118 1568 1573
!1128 = span !1118 1554 1663
!1129 = fn_name_span !1118 1557 1567
!1130 = (!1128 !1129)
!1131 = span !1118 1610 1661
!1132 = span !158 31385 31389
!1133 = span !158 31391 31396
!1134 = span !158 31379 31751
!1135 = fn_name_span !158 31382 31384
!1136 = (!1134 !1135)
!1137 = span !158 31425 31435
!1138 = fn_call_path_span !158 31430 31433
!1139 = (!1137 !1138)
!1140 = span !158 31439 31450
!1141 = fn_call_path_span !158 31445 31448
!1142 = (!1140 !1141)
!1143 = span !158 31425 31450
!1144 = fn_call_path_span !158 31436 31438
!1145 = (!1143 !1144)
!1146 = span !158 31465 31470
!1147 = span !158 31515 31528
!1148 = fn_call_path_span !158 31520 31526
!1149 = (!1147 !1148)
!1150 = span !158 31500 31529
!1151 = span !158 31558 31572
!1152 = fn_call_path_span !158 31564 31570
!1153 = (!1151 !1152)
!1154 = span !158 31542 31573
!1155 = span !158 31594 31604
!1156 = fn_call_path_span !158 31599 31602
!1157 = (!1155 !1156)
!1158 = span !158 31586 31605
!1159 = span !158 31626 31634
!1160 = span !158 31640 31649
!1161 = span !158 31655 31656
!1162 = span !158 31618 31735
!1163 = span !158 31680 31695
!1164 = span !158 13710 13714
!1165 = span !158 13716 13721
!1166 = span !158 13703 13775
!1167 = fn_name_span !158 13706 13709
!1168 = (!1166 !1167)
!1169 = span !158 13748 13762
!1170 = fn_call_path_span !158 13753 13755
!1171 = (!1169 !1170)
!1172 = span !158 13747 13769
!1173 = fn_call_path_span !158 13764 13767
!1174 = (!1172 !1173)
!1175 = span !158 11397 11401
!1176 = span !158 11390 11444
!1177 = fn_name_span !158 11393 11396
!1178 = (!1176 !1177)
!1179 = span !158 11432 11437
!1180 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/str.sw"
!1181 = span !1180 302 306
!1182 = span !1180 291 413
!1183 = fn_name_span !1180 298 301
!1184 = (!1182 !1183)
!1185 = span !1180 340 394
!1186 = span !1180 325 395
!1187 = span !1180 404 407
!1188 = span !1180 115 119
!1189 = span !1180 101 230
!1190 = fn_name_span !1180 108 114
!1191 = (!1189 !1190)
!1192 = span !1180 157 211
!1193 = span !1180 142 212
!1194 = span !1180 221 224
!1195 = span !0 3775 3826
!1196 = purity "reads"
!1197 = fn_name_span !0 3778 3787
!1198 = (!1195 !1196 !1197)
!1199 = span !0 3808 3820
!1200 = fn_call_path_span !0 3808 3818
!1201 = (!1199 !1200)
!1202 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/pausable.sw"
!1203 = span !1202 3185 3320
!1204 = fn_name_span !1202 3192 3202
!1205 = (!1203 !1196 !1204)
!1206 = span !1202 123 189
!1207 = span !1202 3262 3263
!1208 = span !1202 3236 3274
!1209 = fn_call_path_span !1202 3236 3251
!1210 = (!1208 !1209)
!1211 = span !1202 3219 3275
!1212 = span !1202 3280 3290
!1213 = span !1202 3280 3301
!1214 = fn_call_path_span !1202 3291 3299
!1215 = (!1213 !1214)
!1216 = span !1202 3312 3317
!1217 = span !1202 3280 3318
!1218 = fn_call_path_span !1202 3302 3311
!1219 = (!1217 !1218)
!1220 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-core/src/storage.sw"
!1221 = span !1220 1509 1513
!1222 = span !1220 1521 1527
!1223 = span !1220 1534 1542
!1224 = span !1220 1498 1650
!1225 = fn_name_span !1220 1505 1508
!1226 = (!1224 !1225)
!1227 = span !1220 1568 1644
!1228 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/option.sw"
!1229 = span !1228 5491 5495
!1230 = span !1228 5497 5504
!1231 = span !1228 5474 5619
!1232 = fn_name_span !1228 5481 5490
!1233 = (!1231 !1232)
!1234 = span !1228 5524 5613
!1235 = span !1228 5530 5534
!1236 = span !1228 5549 5568
!1237 = fn_call_path_span !1228 5549 5568
!1238 = (!1236 !1237)
!1239 = span !1228 5560 5561
!1240 = span !1228 5566 5567
!1241 = span !1228 5581 5603
!1242 = fn_call_path_span !1228 5581 5603
!1243 = (!1241 !1242)
!1244 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/storage/storage_key.sw"
!1245 = span !1244 1691 1695
!1246 = span !1244 1675 1758
!1247 = fn_name_span !1244 1682 1690
!1248 = (!1246 !1196 !1247)
!1249 = span !1244 1725 1736
!1250 = fn_call_path_span !1244 1730 1734
!1251 = (!1249 !1250)
!1252 = span !1244 1738 1751
!1253 = fn_call_path_span !1244 1743 1749
!1254 = (!1252 !1253)
!1255 = span !1244 1720 1752
!1256 = fn_call_path_span !1244 1720 1724
!1257 = (!1255 !1256)
!1258 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/storage/storage_api.sw"
!1259 = span !1258 2770 2774
!1260 = span !1258 2782 2788
!1261 = span !1258 2755 3638
!1262 = fn_name_span !1258 2762 2766
!1263 = (!1261 !1196 !1262)
!1264 = span !1258 2837 2838
!1265 = span !1258 2817 2838
!1266 = fn_call_path_span !1258 2834 2836
!1267 = (!1265 !1266)
!1268 = span !1228 2431 2530
!1269 = span !1258 2849 2860
!1270 = span !1258 2992 3026
!1271 = fn_call_path_span !1258 2992 3007
!1272 = (!1270 !1271)
!1273 = span !1258 2940 3027
!1274 = span !1258 3228 3243
!1275 = span !1258 3246 3248
!1276 = span !1258 3228 3248
!1277 = fn_call_path_span !1258 3244 3245
!1278 = (!1276 !1277)
!1279 = span !1258 3215 3249
!1280 = fn_call_path_span !1258 3215 3220
!1281 = (!1279 !1280)
!1282 = span !1258 3198 3250
!1283 = span !1258 3494 3505
!1284 = span !1258 3507 3517
!1285 = span !1258 3519 3534
!1286 = span !1258 3476 3535
!1287 = span !1258 3555 3565
!1288 = span !1258 3577 3590
!1289 = span !1258 3555 3591
!1290 = fn_call_path_span !1258 3566 3569
!1291 = (!1289 !1290)
!1292 = span !1258 3555 3603
!1293 = fn_call_path_span !1258 3592 3596
!1294 = (!1292 !1293)
!1295 = span !1258 5182 5186
!1296 = span !1258 5194 5200
!1297 = span !1258 5160 6233
!1298 = fn_name_span !1258 5163 5178
!1299 = (!1297 !1298)
!1300 = span !1258 5233 5266
!1301 = span !1258 5458 5459
!1302 = span !1258 5449 5459
!1303 = fn_call_path_span !1258 5456 5457
!1304 = (!1302 !1303)
!1305 = span !1258 5463 5472
!1306 = span !1258 5448 5472
!1307 = fn_call_path_span !1258 5461 5462
!1308 = (!1306 !1307)
!1309 = span !1258 5475 5477
!1310 = span !1258 5448 5477
!1311 = fn_call_path_span !1258 5473 5474
!1312 = (!1310 !1311)
!1313 = span !1258 5482 5483
!1314 = span !1258 5447 5483
!1315 = fn_call_path_span !1258 5479 5481
!1316 = (!1314 !1315)
!1317 = span !1258 5431 5484
!1318 = span !1258 5654 5655
!1319 = span !1258 5645 5655
!1320 = fn_call_path_span !1258 5652 5653
!1321 = (!1319 !1320)
!1322 = span !1258 5625 5656
!1323 = span !1258 5861 5982
!1324 = span !1258 5867 5893
!1325 = span !1258 5904 5908
!1326 = span !1258 5904 5956
!1327 = fn_call_path_span !1258 5904 5956
!1328 = (!1326 !1327)
!1329 = span !1258 5914 5927
!1330 = span !1258 5930 5931
!1331 = span !1258 5914 5931
!1332 = fn_call_path_span !1258 5928 5929
!1333 = (!1331 !1332)
!1334 = span !1258 5935 5944
!1335 = span !1258 5913 5944
!1336 = fn_call_path_span !1258 5933 5934
!1337 = (!1335 !1336)
!1338 = span !1258 5947 5949
!1339 = span !1258 5913 5949
!1340 = fn_call_path_span !1258 5945 5946
!1341 = (!1339 !1340)
!1342 = span !1258 5954 5955
!1343 = span !1258 5912 5955
!1344 = fn_call_path_span !1258 5951 5953
!1345 = (!1343 !1344)
!1346 = span !1258 5965 5970
!1347 = span !1258 5965 5976
!1348 = fn_call_path_span !1258 5965 5976
!1349 = (!1347 !1348)
!1350 = span !1258 5974 5975
!1351 = span !1258 5839 5983
!1352 = span !1258 6088 6102
!1353 = fn_call_path_span !1258 6093 6100
!1354 = (!1352 !1353)
!1355 = span !1258 6066 6103
!1356 = span !1258 6108 6119
!1357 = span !1258 6123 6132
!1358 = span !1258 6123 6142
!1359 = fn_call_path_span !1258 6133 6140
!1360 = (!1358 !1359)
!1361 = span !1258 6145 6160
!1362 = span !1258 6145 6170
!1363 = fn_call_path_span !1258 6161 6168
!1364 = (!1362 !1363)
!1365 = span !1258 6123 6170
!1366 = fn_call_path_span !1258 6143 6144
!1367 = (!1365 !1366)
!1368 = span !1258 6108 6170
!1369 = fn_call_path_span !1258 6120 6122
!1370 = (!1368 !1369)
!1371 = span !1258 6177 6188
!1372 = span !1258 6177 6198
!1373 = fn_call_path_span !1258 6189 6196
!1374 = (!1372 !1373)
!1375 = span !1258 6200 6215
!1376 = span !1258 6217 6230
!1377 = span !1258 6176 6231
!1378 = span !158 26706 26710
!1379 = span !158 26712 26717
!1380 = span !158 26699 26766
!1381 = fn_name_span !158 26702 26705
!1382 = (!1380 !1381)
!1383 = span !158 1066 1070
!1384 = span !158 1072 1077
!1385 = span !158 1059 1127
!1386 = fn_name_span !158 1062 1065
!1387 = (!1385 !1386)
!1388 = span !158 5745 5749
!1389 = span !158 5751 5756
!1390 = span !158 5733 5806
!1391 = fn_name_span !158 5736 5744
!1392 = (!1390 !1391)
!1393 = span !158 10351 10355
!1394 = span !158 10357 10362
!1395 = span !158 10341 10412
!1396 = fn_name_span !158 10344 10350
!1397 = (!1395 !1396)
!1398 = span !158 13808 13812
!1399 = span !158 13814 13819
!1400 = span !158 13802 13868
!1401 = fn_name_span !158 13805 13807
!1402 = (!1400 !1401)
!1403 = span !127 5495 5499
!1404 = span !127 5480 5577
!1405 = fn_name_span !127 5487 5494
!1406 = (!1404 !1405)
!1407 = span !127 5519 5571
!1408 = span !158 971 975
!1409 = span !158 977 982
!1410 = span !158 964 1032
!1411 = fn_name_span !158 967 970
!1412 = (!1410 !1411)
!1413 = span !158 4071 4075
!1414 = span !158 4077 4082
!1415 = span !158 4059 4132
!1416 = fn_name_span !158 4062 4070
!1417 = (!1415 !1416)
!1418 = span !127 416 420
!1419 = span !127 401 545
!1420 = fn_name_span !127 408 415
!1421 = (!1419 !1420)
!1422 = span !127 452 476
!1423 = span !127 453 457
!1424 = span !127 459 463
!1425 = span !127 465 469
!1426 = span !127 440 477
!1427 = span !127 497 502
!1428 = span !127 486 539
!1429 = span !127 6062 6066
!1430 = span !127 6047 6144
!1431 = fn_name_span !127 6054 6061
!1432 = (!1430 !1431)
!1433 = span !127 6086 6138
!1434 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/alloc.sw"
!1435 = span !1434 1715 1720
!1436 = span !1434 1699 1855
!1437 = fn_name_span !1434 1706 1711
!1438 = (!1436 !1437)
!1439 = span !1434 1754 1778
!1440 = fn_call_path_span !1434 1771 1772
!1441 = (!1439 !1440)
!1442 = span !1434 1744 1853
!1443 = span !1434 1795 1804
!1444 = span !1434 1814 1825
!1445 = (!1044 !1045)
!1446 = span !1220 2090 2094
!1447 = span !1220 2078 2129
!1448 = fn_name_span !1220 2085 2089
!1449 = (!1447 !1448)
!1450 = span !1220 628 638
!1451 = span !1220 2566 2570
!1452 = span !1220 2552 2606
!1453 = fn_name_span !1220 2559 2565
!1454 = (!1452 !1453)
!1455 = span !1220 705 716
!1456 = span !7 64449 64453
!1457 = span !7 64432 64573
!1458 = fn_name_span !7 64439 64445
!1459 = (!1457 !1458)
!1460 = span !7 64530 64543
!1461 = fn_call_path_span !7 64530 64541
!1462 = (!1460 !1461)
!1463 = span !7 64514 64544
!1464 = fn_call_path_span !7 64519 64529
!1465 = (!1463 !1464)
!1466 = span !7 64501 64545
!1467 = span !7 64550 64556
!1468 = span !7 64550 64571
!1469 = fn_call_path_span !7 64557 64569
!1470 = (!1468 !1469)
!1471 = span !7 4087 4091
!1472 = span !7 4093 4099
!1473 = span !7 4073 4218
!1474 = fn_name_span !7 4076 4086
!1475 = (!1473 !1474)
!1476 = span !7 55 82
!1477 = span !7 4129 4212
!1478 = span !7 128 228
!1479 = fn_name_span !7 135 138
!1480 = (!1478 !1479)
!1481 = span !7 159 222
!1482 = span !7 483 487
!1483 = span !7 467 559
!1484 = fn_name_span !7 470 482
!1485 = (!1483 !1484)
!1486 = span !1118 3378 3382
!1487 = span !1118 3364 3450
!1488 = fn_name_span !1118 3371 3374
!1489 = (!1487 !1488)
!1490 = span !1118 3407 3423
!1491 = fn_call_path_span !1118 3407 3417
!1492 = (!1490 !1491)
!1493 = span !1118 3424 3425
!1494 = span !0 3524 3622
!1495 = purity "writes"
!1496 = fn_name_span !0 3527 3532
!1497 = (!1494 !1495 !1496)
!1498 = span !0 3545 3567
!1499 = fn_call_path_span !0 3545 3565
!1500 = (!1498 !1499)
!1501 = span !0 3577 3597
!1502 = fn_call_path_span !0 3577 3595
!1503 = (!1501 !1502)
!1504 = span !0 3607 3615
!1505 = fn_call_path_span !0 3607 3613
!1506 = (!1504 !1505)
!1507 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/ownership.sw"
!1508 = span !1507 1210 1347
!1509 = fn_name_span !1507 1217 1227
!1510 = (!1508 !1196 !1509)
!1511 = span !1507 1253 1261
!1512 = fn_call_path_span !1507 1253 1259
!1513 = (!1511 !1512)
!1514 = "/home/kebradalaonda/.forc/git/checkouts/standards-a75010d5ab7a85a4/65e09f95ea8b9476b171a66c8a47108f352fa32c/standards/src/src5.sw"
!1515 = span !1514 49 291
!1516 = span !1507 1284 1296
!1517 = fn_call_path_span !1507 1284 1294
!1518 = (!1516 !1517)
!1519 = span !1507 1284 1305
!1520 = fn_call_path_span !1507 1297 1303
!1521 = (!1519 !1520)
!1522 = span !1507 1253 1306
!1523 = fn_call_path_span !1507 1262 1264
!1524 = (!1522 !1523)
!1525 = span !1514 719 827
!1526 = span !1507 1236 1344
!1527 = fn_call_path_span !1507 1236 1243
!1528 = (!1526 !1527)
!1529 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/revert.sw"
!1530 = span !1529 1536 1545
!1531 = span !1529 1553 1558
!1532 = span !1529 1518 1674
!1533 = fn_name_span !1529 1525 1532
!1534 = (!1532 !1533)
!1535 = span !1529 1596 1606
!1536 = fn_call_path_span !1529 1596 1597
!1537 = (!1535 !1536)
!1538 = span !1529 1617 1627
!1539 = fn_call_path_span !1529 1617 1620
!1540 = (!1538 !1539)
!1541 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/error_signals.sw"
!1542 = span !1541 308 329
!1543 = span !1529 1637 1666
!1544 = fn_call_path_span !1529 1637 1643
!1545 = (!1543 !1544)
!1546 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/logging.sw"
!1547 = span !1546 558 563
!1548 = span !1546 544 618
!1549 = fn_name_span !1546 551 554
!1550 = (!1548 !1549)
!1551 = span !1546 598 615
!1552 = (!1457 !1458)
!1553 = (!1460 !1461)
!1554 = (!1463 !1464)
!1555 = (!1468 !1469)
!1556 = span !34 119 123
!1557 = span !34 125 131
!1558 = span !34 105 346
!1559 = fn_name_span !34 108 118
!1560 = (!1558 !1559)
!1561 = span !34 186 300
!1562 = span !34 192 196
!1563 = span !34 199 296
!1564 = fn_call_path_span !34 199 296
!1565 = (!1563 !1564)
!1566 = span !34 250 254
!1567 = span !34 250 273
!1568 = fn_call_path_span !34 255 265
!1569 = (!1567 !1568)
!1570 = span !34 173 301
!1571 = span !34 322 328
!1572 = span !7 4642 4646
!1573 = span !7 4648 4654
!1574 = span !7 4628 4773
!1575 = fn_name_span !7 4631 4641
!1576 = (!1574 !1575)
!1577 = span !7 4684 4767
!1578 = span !1529 669 673
!1579 = span !1529 655 707
!1580 = fn_name_span !1529 662 668
!1581 = (!1579 !1580)
!1582 = span !1529 691 705
!1583 = span !1514 334 338
!1584 = span !1514 340 345
!1585 = span !1514 328 674
!1586 = fn_name_span !1514 331 333
!1587 = (!1585 !1586)
!1588 = span !1514 377 390
!1589 = span !1514 371 668
!1590 = span !1514 405 461
!1591 = span !1514 405 514
!1592 = fn_call_path_span !1514 405 514
!1593 = (!1591 !1592)
!1594 = (!1591 !1592)
!1595 = span !1514 425 431
!1596 = span !1514 453 459
!1597 = span !1514 483 489
!1598 = span !1514 493 499
!1599 = span !1514 483 499
!1600 = fn_call_path_span !1514 490 492
!1601 = (!1599 !1600)
!1602 = span !1514 527 571
!1603 = span !1514 527 580
!1604 = fn_call_path_span !1514 527 580
!1605 = (!1603 !1604)
!1606 = (!1603 !1604)
!1607 = span !1514 575 579
!1608 = span !1514 593 625
!1609 = span !1514 593 634
!1610 = fn_call_path_span !1514 593 634
!1611 = (!1609 !1610)
!1612 = (!1609 !1610)
!1613 = span !1514 629 633
!1614 = span !1514 652 657
!1615 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/identity.sw"
!1616 = span !1615 623 627
!1617 = span !1615 629 634
!1618 = span !1615 617 887
!1619 = fn_name_span !1615 620 622
!1620 = (!1618 !1619)
!1621 = span !1615 666 679
!1622 = span !1615 660 881
!1623 = span !1615 694 746
!1624 = span !1615 694 765
!1625 = fn_call_path_span !1615 694 765
!1626 = (!1624 !1625)
!1627 = (!1624 !1625)
!1628 = span !1615 713 718
!1629 = span !1615 739 744
!1630 = span !1615 750 755
!1631 = span !1615 759 764
!1632 = span !1615 750 764
!1633 = fn_call_path_span !1615 756 758
!1634 = (!1632 !1633)
!1635 = span !1615 778 832
!1636 = span !1615 778 847
!1637 = fn_call_path_span !1615 778 847
!1638 = (!1636 !1637)
!1639 = (!1636 !1637)
!1640 = span !1615 800 803
!1641 = span !1615 827 830
!1642 = span !1615 836 839
!1643 = span !1615 843 846
!1644 = span !1615 836 846
!1645 = fn_call_path_span !1615 840 842
!1646 = (!1644 !1645)
!1647 = span !1615 865 870
!1648 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/address.sw"
!1649 = span !1648 1627 1631
!1650 = span !1648 1633 1638
!1651 = span !1648 1621 1693
!1652 = fn_name_span !1648 1624 1626
!1653 = (!1651 !1652)
!1654 = span !1648 292 302
!1655 = span !1648 1664 1687
!1656 = fn_call_path_span !1648 1674 1676
!1657 = (!1655 !1656)
!1658 = span !158 13994 13998
!1659 = span !158 14000 14005
!1660 = span !158 13988 14054
!1661 = fn_name_span !158 13991 13993
!1662 = (!1660 !1661)
!1663 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/contract_id.sw"
!1664 = span !1663 796 800
!1665 = span !1663 802 807
!1666 = span !1663 790 862
!1667 = fn_name_span !1663 793 795
!1668 = (!1666 !1667)
!1669 = span !1663 305 315
!1670 = span !1663 833 856
!1671 = fn_call_path_span !1663 843 845
!1672 = (!1670 !1671)
!1673 = span !1507 733 872
!1674 = fn_name_span !1507 740 746
!1675 = (!1673 !1196 !1674)
!1676 = span !1507 357 423
!1677 = span !1507 803 804
!1678 = span !1507 780 812
!1679 = fn_call_path_span !1507 780 795
!1680 = (!1678 !1679)
!1681 = span !1507 764 813
!1682 = span !1507 818 827
!1683 = span !1507 818 838
!1684 = fn_call_path_span !1507 828 836
!1685 = (!1683 !1684)
!1686 = span !1507 818 870
!1687 = fn_call_path_span !1507 839 848
!1688 = (!1686 !1687)
!1689 = (!1224 !1225)
!1690 = (!1231 !1232)
!1691 = (!1236 !1237)
!1692 = (!1241 !1242)
!1693 = (!1246 !1196 !1247)
!1694 = (!1249 !1250)
!1695 = (!1252 !1253)
!1696 = (!1255 !1256)
!1697 = (!1261 !1196 !1262)
!1698 = (!1265 !1266)
!1699 = (!1270 !1271)
!1700 = (!1276 !1277)
!1701 = (!1279 !1280)
!1702 = (!1289 !1290)
!1703 = (!1292 !1293)
!1704 = (!1297 !1298)
!1705 = (!1302 !1303)
!1706 = (!1306 !1307)
!1707 = (!1310 !1311)
!1708 = (!1314 !1315)
!1709 = (!1319 !1320)
!1710 = (!1326 !1327)
!1711 = (!1331 !1332)
!1712 = (!1335 !1336)
!1713 = (!1339 !1340)
!1714 = (!1343 !1344)
!1715 = (!1347 !1348)
!1716 = (!1352 !1353)
!1717 = (!1358 !1359)
!1718 = (!1362 !1363)
!1719 = (!1365 !1366)
!1720 = (!1368 !1369)
!1721 = (!1372 !1373)
!1722 = (!1044 !1045)
!1723 = (!1447 !1448)
!1724 = (!1452 !1453)
!1725 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/result.sw"
!1726 = span !1725 4206 4210
!1727 = span !1725 4192 4333
!1728 = fn_name_span !1725 4199 4205
!1729 = (!1727 !1728)
!1730 = span !1725 4227 4327
!1731 = span !1725 4233 4237
!1732 = span !1725 4252 4289
!1733 = fn_call_path_span !1725 4252 4289
!1734 = (!1732 !1733)
!1735 = span !1725 4261 4272
!1736 = span !1725 4277 4288
!1737 = span !1725 4314 4315
!1738 = span !1725 4307 4316
!1739 = fn_call_path_span !1725 4307 4313
!1740 = (!1738 !1739)
!1741 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/auth.sw"
!1742 = span !1741 3092 3420
!1743 = fn_name_span !1741 3099 3109
!1744 = (!1742 !1743)
!1745 = span !1741 3152 3172
!1746 = fn_call_path_span !1741 3152 3170
!1747 = (!1745 !1746)
!1748 = span !1741 3189 3205
!1749 = fn_call_path_span !1741 3189 3203
!1750 = (!1748 !1749)
!1751 = span !1741 3183 3306
!1752 = span !1741 3220 3241
!1753 = fn_call_path_span !1741 3220 3241
!1754 = (!1752 !1753)
!1755 = span !1741 3224 3227
!1756 = span !1725 1785 1903
!1757 = span !1741 3236 3239
!1758 = span !1741 3254 3296
!1759 = fn_call_path_span !1741 3254 3296
!1760 = (!1758 !1759)
!1761 = span !1741 3257 3262
!1762 = span !1615 477 548
!1763 = span !1741 3288 3293
!1764 = span !1741 3390 3410
!1765 = fn_call_path_span !1741 3390 3408
!1766 = (!1764 !1765)
!1767 = span !1741 1376 1470
!1768 = fn_name_span !1741 1383 1401
!1769 = (!1767 !1768)
!1770 = span !1741 1418 1468
!1771 = span !1741 1436 1444
!1772 = span !1741 3985 5862
!1773 = fn_name_span !1741 3992 4006
!1774 = (!1772 !1773)
!1775 = span !1741 4136 4149
!1776 = fn_call_path_span !1741 4136 4147
!1777 = (!1775 !1776)
!1778 = span !1741 4136 4158
!1779 = fn_call_path_span !1741 4150 4156
!1780 = (!1778 !1779)
!1781 = span !1741 4123 4159
!1782 = span !1741 4164 4189
!1783 = span !1741 4194 4211
!1784 = span !1741 4209 4210
!1785 = span !1741 4223 4227
!1786 = span !1741 4230 4236
!1787 = span !1741 4223 4236
!1788 = fn_call_path_span !1741 4228 4229
!1789 = (!1787 !1788)
!1790 = span !1741 4278 4282
!1791 = span !1741 4267 4283
!1792 = fn_call_path_span !1741 4267 4277
!1793 = (!1791 !1792)
!1794 = span !1741 4247 4284
!1795 = span !1741 4299 4312
!1796 = span !1741 4293 4559
!1797 = span !1741 4327 4351
!1798 = fn_call_path_span !1741 4327 4351
!1799 = (!1797 !1798)
!1800 = span !1741 4327 4344
!1801 = (!1797 !1798)
!1802 = span !1741 4348 4350
!1803 = span !1741 4364 4391
!1804 = fn_call_path_span !1741 4364 4391
!1805 = (!1803 !1804)
!1806 = span !1741 4364 4384
!1807 = (!1803 !1804)
!1808 = span !1741 4388 4390
!1809 = span !1741 4499 4503
!1810 = span !1741 4507 4508
!1811 = span !1741 4499 4508
!1812 = fn_call_path_span !1741 4504 4506
!1813 = (!1811 !1812)
!1814 = span !1741 4642 4655
!1815 = span !1741 4636 5013
!1816 = span !1741 4670 4746
!1817 = fn_call_path_span !1741 4670 4746
!1818 = (!1816 !1817)
!1819 = span !1741 4670 4687
!1820 = (!1816 !1817)
!1821 = span !1741 4726 4730
!1822 = span !1741 4709 4731
!1823 = fn_call_path_span !1741 4709 4725
!1824 = (!1822 !1823)
!1825 = span !1741 4759 4845
!1826 = fn_call_path_span !1741 4759 4845
!1827 = (!1825 !1826)
!1828 = span !1741 4759 4779
!1829 = (!1825 !1826)
!1830 = span !1741 4825 4829
!1831 = span !1741 4801 4830
!1832 = fn_call_path_span !1741 4801 4824
!1833 = (!1831 !1832)
!1834 = span !1741 4953 4957
!1835 = span !1741 4961 4962
!1836 = span !1741 4953 4962
!1837 = fn_call_path_span !1741 4958 4960
!1838 = (!1836 !1837)
!1839 = span !1741 4615 5014
!1840 = span !1741 5027 5036
!1841 = span !1741 5027 5046
!1842 = fn_call_path_span !1741 5037 5044
!1843 = (!1841 !1842)
!1844 = span !1741 5138 5152
!1845 = span !1741 5126 5152
!1846 = span !1741 5166 5170
!1847 = span !1741 5174 5175
!1848 = span !1741 5166 5175
!1849 = fn_call_path_span !1741 5171 5173
!1850 = (!1848 !1849)
!1851 = span !1741 5385 5399
!1852 = span !1741 5385 5408
!1853 = fn_call_path_span !1741 5400 5406
!1854 = (!1852 !1853)
!1855 = span !1741 5412 5421
!1856 = span !1741 5412 5430
!1857 = fn_call_path_span !1741 5422 5428
!1858 = (!1856 !1857)
!1859 = span !1741 5385 5430
!1860 = fn_call_path_span !1741 5409 5411
!1861 = (!1859 !1860)
!1862 = span !1741 5498 5502
!1863 = span !1741 5506 5507
!1864 = span !1741 5498 5507
!1865 = fn_call_path_span !1741 5503 5505
!1866 = (!1864 !1865)
!1867 = span !1741 462 733
!1868 = span !1741 5593 5646
!1869 = span !1741 5755 5764
!1870 = span !1741 5749 5860
!1871 = span !1741 5775 5804
!1872 = fn_call_path_span !1741 5775 5804
!1873 = (!1871 !1872)
!1874 = span !1741 5780 5787
!1875 = span !1741 5795 5802
!1876 = span !1741 5813 5854
!1877 = fn_call_path_span !1741 5813 5854
!1878 = (!1876 !1877)
!1879 = span !127 2382 2386
!1880 = span !127 2368 2462
!1881 = fn_name_span !127 2375 2381
!1882 = (!1880 !1881)
!1883 = span !127 2405 2456
!1884 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/inputs.sw"
!1885 = span !1884 3451 3898
!1886 = fn_name_span !1884 3458 3469
!1887 = (!1885 !1886)
!1888 = span !1884 3491 3500
!1889 = fn_call_path_span !1884 3491 3498
!1890 = (!1888 !1889)
!1891 = span !1884 3485 3896
!1892 = span !1884 3511 3575
!1893 = fn_call_path_span !1884 3511 3575
!1894 = (!1892 !1893)
!1895 = span !1884 3547 3548
!1896 = span !1884 3534 3574
!1897 = span !1884 3584 3648
!1898 = fn_call_path_span !1884 3584 3648
!1899 = (!1897 !1898)
!1900 = span !1884 3620 3621
!1901 = span !1884 3607 3647
!1902 = span !1884 3657 3722
!1903 = fn_call_path_span !1884 3657 3722
!1904 = (!1902 !1903)
!1905 = span !1884 3694 3695
!1906 = span !1884 3681 3721
!1907 = span !1884 3731 3795
!1908 = fn_call_path_span !1884 3731 3795
!1909 = (!1907 !1908)
!1910 = span !1884 3767 3768
!1911 = span !1884 3754 3794
!1912 = span !1884 3804 3866
!1913 = fn_call_path_span !1884 3804 3866
!1914 = (!1912 !1913)
!1915 = span !1884 3838 3839
!1916 = span !1884 3825 3865
!1917 = span !1884 3887 3888
!1918 = span !1884 3880 3889
!1919 = fn_call_path_span !1884 3880 3886
!1920 = (!1918 !1919)
!1921 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/tx.sw"
!1922 = span !1921 3872 4153
!1923 = fn_name_span !1921 3879 3886
!1924 = (!1922 !1923)
!1925 = span !1921 3928 3929
!1926 = span !1921 3916 3940
!1927 = span !1921 3910 4151
!1928 = span !1921 3951 3954
!1929 = span !1921 3951 3978
!1930 = fn_call_path_span !1921 3951 3978
!1931 = (!1929 !1930)
!1932 = span !1921 1472 2367
!1933 = span !1921 3987 3990
!1934 = span !1921 3987 4014
!1935 = fn_call_path_span !1921 3987 4014
!1936 = (!1934 !1935)
!1937 = span !1921 4023 4026
!1938 = span !1921 4023 4051
!1939 = fn_call_path_span !1921 4023 4051
!1940 = (!1938 !1939)
!1941 = span !1921 4060 4063
!1942 = span !1921 4060 4087
!1943 = fn_call_path_span !1921 4060 4087
!1944 = (!1942 !1943)
!1945 = span !1921 4096 4099
!1946 = span !1921 4096 4121
!1947 = fn_call_path_span !1921 4096 4121
!1948 = (!1946 !1947)
!1949 = span !1921 4142 4143
!1950 = span !1921 4135 4144
!1951 = fn_call_path_span !1921 4135 4141
!1952 = (!1950 !1951)
!1953 = span !158 14361 14365
!1954 = span !158 14367 14372
!1955 = span !158 14355 14421
!1956 = fn_name_span !158 14358 14360
!1957 = (!1955 !1956)
!1958 = span !158 16633 16637
!1959 = span !158 16639 16644
!1960 = span !158 16627 16693
!1961 = fn_name_span !158 16630 16632
!1962 = (!1960 !1961)
!1963 = span !1884 2780 2785
!1964 = span !1884 2762 3061
!1965 = fn_name_span !1884 2769 2779
!1966 = (!1964 !1965)
!1967 = span !1884 2827 2840
!1968 = fn_call_path_span !1884 2827 2838
!1969 = (!1967 !1968)
!1970 = span !1884 2827 2849
!1971 = fn_call_path_span !1884 2841 2847
!1972 = (!1970 !1971)
!1973 = span !1884 2818 2849
!1974 = fn_call_path_span !1884 2824 2826
!1975 = (!1973 !1974)
!1976 = span !1884 2860 2871
!1977 = span !1884 2889 2923
!1978 = span !1884 2883 3059
!1979 = span !1884 2934 2937
!1980 = span !1884 2934 2959
!1981 = fn_call_path_span !1884 2934 2959
!1982 = (!1980 !1981)
!1983 = span !1884 1788 1928
!1984 = span !1884 2968 2971
!1985 = span !1884 2968 2997
!1986 = fn_call_path_span !1884 2968 2997
!1987 = (!1985 !1986)
!1988 = span !1884 3006 3009
!1989 = span !1884 3006 3034
!1990 = fn_call_path_span !1884 3006 3034
!1991 = (!1989 !1990)
!1992 = span !158 23245 23249
!1993 = span !158 23251 23256
!1994 = span !158 23239 23320
!1995 = fn_name_span !158 23242 23244
!1996 = (!1994 !1995)
!1997 = span !158 23282 23296
!1998 = fn_call_path_span !158 23287 23289
!1999 = (!1997 !1998)
!2000 = span !158 23282 23314
!2001 = span !158 23300 23314
!2002 = fn_call_path_span !158 23305 23307
!2003 = (!2001 !2002)
!2004 = span !158 16562 16566
!2005 = span !158 16568 16573
!2006 = span !158 16556 16622
!2007 = fn_name_span !158 16559 16561
!2008 = (!2006 !2007)
!2009 = span !1884 6179 6184
!2010 = span !1884 6155 6362
!2011 = fn_name_span !1884 6162 6178
!2012 = (!2010 !2011)
!2013 = span !1884 6222 6239
!2014 = fn_call_path_span !1884 6222 6232
!2015 = (!2013 !2014)
!2016 = span !1884 6216 6360
!2017 = span !1884 6250 6335
!2018 = fn_call_path_span !1884 6250 6335
!2019 = (!2017 !2018)
!2020 = span !1884 6250 6267
!2021 = (!2017 !2018)
!2022 = span !1884 6290 6332
!2023 = span !1884 6276 6333
!2024 = fn_call_path_span !1884 6276 6289
!2025 = (!2023 !2024)
!2026 = span !1648 2200 2204
!2027 = span !1648 2192 2249
!2028 = fn_name_span !1648 2195 2199
!2029 = (!2027 !2028)
!2030 = span !1648 2230 2243
!2031 = span !1884 14462 14467
!2032 = span !1884 14431 14655
!2033 = fn_name_span !1884 14438 14461
!2034 = (!2032 !2033)
!2035 = span !1884 14505 14522
!2036 = fn_call_path_span !1884 14505 14515
!2037 = (!2035 !2036)
!2038 = span !1884 14499 14653
!2039 = span !1884 14533 14628
!2040 = fn_call_path_span !1884 14533 14628
!2041 = (!2039 !2040)
!2042 = span !1884 14533 14553
!2043 = (!2039 !2040)
!2044 = span !1884 14576 14625
!2045 = span !1884 14562 14626
!2046 = fn_call_path_span !1884 14562 14575
!2047 = (!2045 !2046)
!2048 = span !1228 3911 3915
!2049 = span !1228 3896 4022
!2050 = fn_name_span !1228 3903 3910
!2051 = (!2049 !2050)
!2052 = span !1228 3935 4016
!2053 = span !1228 3941 3945
!2054 = span !1228 3960 3983
!2055 = fn_call_path_span !1228 3960 3983
!2056 = (!2054 !2055)
!2057 = span !1228 3977 3982
!2058 = span !1228 4001 4005
!2059 = span !1228 4874 4878
!2060 = span !1228 4860 5003
!2061 = fn_name_span !1228 4867 4873
!2062 = (!2060 !2061)
!2063 = span !1228 4895 4997
!2064 = span !1228 4901 4905
!2065 = span !1228 4920 4959
!2066 = fn_call_path_span !1228 4920 4959
!2067 = (!2065 !2066)
!2068 = span !1228 4931 4942
!2069 = span !1228 4947 4958
!2070 = span !1228 4984 4985
!2071 = span !1228 4977 4986
!2072 = fn_call_path_span !1228 4977 4983
!2073 = (!2071 !2072)
!2074 = span !1741 1973 2091
!2075 = fn_name_span !1741 1980 1998
!2076 = (!2074 !2075)
!2077 = span !1741 2038 2088
!2078 = span !1741 2056 2064
!2079 = span !1741 2021 2089
!2080 = fn_call_path_span !1741 2021 2037
!2081 = (!2079 !2080)
!2082 = span !1663 1321 1325
!2083 = span !1663 1313 1370
!2084 = fn_name_span !1663 1316 1320
!2085 = (!2083 !2084)
!2086 = span !1663 1351 1364
!2087 = span !1202 4349 4523
!2088 = fn_name_span !1202 4356 4374
!2089 = (!2087 !1196 !2088)
!2090 = span !1202 4434 4435
!2091 = span !1202 4400 4446
!2092 = fn_call_path_span !1202 4400 4423
!2093 = (!2091 !2092)
!2094 = span !1202 4383 4447
!2095 = span !1202 4461 4471
!2096 = span !1202 4461 4482
!2097 = fn_call_path_span !1202 4472 4480
!2098 = (!2096 !2097)
!2099 = span !1202 4493 4498
!2100 = span !1202 4461 4499
!2101 = fn_call_path_span !1202 4483 4492
!2102 = (!2100 !2101)
!2103 = span !1202 4460 4499
!2104 = fn_call_path_span !1202 4460 4461
!2105 = (!2103 !2104)
!2106 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/pausable/errors.sw"
!2107 = span !2106 74 226
!2108 = span !1202 4452 4520
!2109 = fn_call_path_span !1202 4452 4459
!2110 = (!2108 !2109)
!2111 = (!1532 !1533)
!2112 = (!1535 !1536)
!2113 = (!1538 !1539)
!2114 = (!1543 !1544)
!2115 = (!1548 !1549)
!2116 = (!1457 !1458)
!2117 = (!1460 !1461)
!2118 = (!1463 !1464)
!2119 = (!1468 !1469)
!2120 = span !34 118 122
!2121 = span !34 124 130
!2122 = span !34 104 441
!2123 = fn_name_span !34 107 117
!2124 = (!2122 !2123)
!2125 = span !34 185 395
!2126 = span !34 191 195
!2127 = span !34 198 292
!2128 = fn_call_path_span !34 198 292
!2129 = (!2127 !2128)
!2130 = span !34 246 250
!2131 = span !34 246 269
!2132 = fn_call_path_span !34 251 261
!2133 = (!2131 !2132)
!2134 = span !34 294 391
!2135 = fn_call_path_span !34 294 391
!2136 = (!2134 !2135)
!2137 = span !34 345 349
!2138 = span !34 345 368
!2139 = fn_call_path_span !34 350 360
!2140 = (!2138 !2139)
!2141 = span !34 172 396
!2142 = span !34 417 423
!2143 = span !1202 2310 2418
!2144 = fn_name_span !1202 2317 2323
!2145 = (!2143 !1495 !2144)
!2146 = span !1202 2375 2376
!2147 = span !1202 2349 2387
!2148 = fn_call_path_span !1202 2349 2364
!2149 = (!2147 !2148)
!2150 = span !1202 2332 2388
!2151 = span !1202 2393 2403
!2152 = span !1202 2410 2414
!2153 = span !1202 2393 2415
!2154 = fn_call_path_span !1202 2404 2409
!2155 = (!2153 !2154)
!2156 = span !1244 2481 2485
!2157 = span !1244 2487 2492
!2158 = span !1244 2468 2554
!2159 = fn_name_span !1244 2475 2480
!2160 = (!2158 !193 !2159)
!2161 = span !1244 2513 2524
!2162 = fn_call_path_span !1244 2518 2522
!2163 = (!2161 !2162)
!2164 = span !1244 2526 2539
!2165 = fn_call_path_span !1244 2531 2537
!2166 = (!2164 !2165)
!2167 = span !1244 2507 2547
!2168 = fn_call_path_span !1244 2507 2512
!2169 = (!2167 !2168)
!2170 = span !1258 919 923
!2171 = span !1258 931 937
!2172 = span !1258 944 949
!2173 = span !1258 903 1864
!2174 = fn_name_span !1258 910 915
!2175 = (!2173 !193 !2174)
!2176 = span !1258 983 984
!2177 = span !1258 963 984
!2178 = fn_call_path_span !1258 980 982
!2179 = (!2177 !2178)
!2180 = span !1258 995 1001
!2181 = span !1258 1135 1169
!2182 = fn_call_path_span !1258 1135 1150
!2183 = (!2181 !2182)
!2184 = span !1258 1083 1170
!2185 = span !1258 1329 1344
!2186 = span !1258 1347 1349
!2187 = span !1258 1329 1349
!2188 = fn_call_path_span !1258 1345 1346
!2189 = (!2187 !2188)
!2190 = span !1258 1316 1350
!2191 = fn_call_path_span !1258 1316 1321
!2192 = (!2190 !2191)
!2193 = span !1258 1297 1351
!2194 = span !1258 1458 1469
!2195 = span !1258 1471 1483
!2196 = span !1258 1485 1500
!2197 = span !1258 1440 1501
!2198 = span !1258 1432 1502
!2199 = span !1258 1571 1583
!2200 = span !1258 1595 1608
!2201 = span !1258 1571 1609
!2202 = fn_call_path_span !1258 1584 1587
!2203 = (!2201 !2202)
!2204 = span !1258 1571 1627
!2205 = fn_call_path_span !1258 1610 1615
!2206 = (!2204 !2205)
!2207 = span !1258 1818 1829
!2208 = span !1258 1831 1843
!2209 = span !1258 1845 1860
!2210 = span !1258 1799 1861
!2211 = span !1258 1791 1862
!2212 = span !1037 3772 3776
!2213 = span !1037 3778 3781
!2214 = span !1037 3756 4192
!2215 = fn_name_span !1037 3763 3768
!2216 = (!2214 !2215)
!2217 = span !1037 3799 3825
!2218 = span !1037 3840 3942
!2219 = span !1037 3910 3927
!2220 = span !1037 3985 3986
!2221 = span !1037 3962 3987
!2222 = span !1037 4002 4073
!2223 = span !1037 4045 4058
!2224 = span !1037 4104 4175
!2225 = span !1037 4147 4160
!2226 = span !0 3650 3748
!2227 = fn_name_span !0 3653 3660
!2228 = (!2226 !1495 !2227)
!2229 = span !0 3673 3695
!2230 = fn_call_path_span !0 3673 3693
!2231 = (!2229 !2230)
!2232 = span !0 3705 3721
!2233 = fn_call_path_span !0 3705 3719
!2234 = (!2232 !2233)
!2235 = span !0 3731 3741
!2236 = fn_call_path_span !0 3731 3739
!2237 = (!2235 !2236)
!2238 = span !1202 3718 3939
!2239 = fn_name_span !1202 3725 3739
!2240 = (!2238 !1196 !2239)
!2241 = span !1202 3799 3800
!2242 = span !1202 3765 3811
!2243 = fn_call_path_span !1202 3765 3788
!2244 = (!2242 !2243)
!2245 = span !1202 3748 3812
!2246 = span !1202 3834 3844
!2247 = span !1202 3834 3868
!2248 = fn_call_path_span !1202 3858 3866
!2249 = (!2247 !2248)
!2250 = span !1202 3892 3897
!2251 = span !1202 3834 3898
!2252 = fn_call_path_span !1202 3882 3891
!2253 = (!2251 !2252)
!2254 = span !1202 3817 3936
!2255 = fn_call_path_span !1202 3817 3824
!2256 = (!2254 !2255)
!2257 = span !1202 2730 2841
!2258 = fn_name_span !1202 2737 2745
!2259 = (!2257 !1495 !2258)
!2260 = span !1202 2797 2798
!2261 = span !1202 2771 2809
!2262 = fn_call_path_span !1202 2771 2786
!2263 = (!2261 !2262)
!2264 = span !1202 2754 2810
!2265 = span !1202 2815 2825
!2266 = span !1202 2832 2837
!2267 = span !1202 2815 2838
!2268 = fn_call_path_span !1202 2826 2831
!2269 = (!2267 !2268)
!2270 = (!44 !45)
!2271 = (!47 !48)
!2272 = span !7 102074 102080
!2273 = span !7 102052 102145
!2274 = fn_name_span !7 102055 102065
!2275 = (!2273 !2274)
!2276 = span !7 102115 102136
!2277 = fn_call_path_span !7 102115 102128
!2278 = (!2276 !2277)
!2279 = span !7 102114 102139
!2280 = span !0 10483 10491
!2281 = span !0 10467 10576
!2282 = fn_name_span !0 10470 10482
!2283 = (!2281 !193 !2282)
!2284 = span !0 10509 10527
!2285 = fn_call_path_span !0 10509 10525
!2286 = (!2284 !2285)
!2287 = span !0 10538 10569
!2288 = fn_call_path_span !0 10538 10559
!2289 = (!2287 !2288)
!2290 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/reentrancy.sw"
!2291 = span !2290 878 968
!2292 = fn_name_span !2290 885 901
!2293 = (!2291 !2292)
!2294 = span !2290 919 933
!2295 = fn_call_path_span !2290 919 931
!2296 = (!2294 !2295)
!2297 = span !2290 918 933
!2298 = fn_call_path_span !2290 918 919
!2299 = (!2297 !2298)
!2300 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/reentrancy/errors.sw"
!2301 = span !2300 62 160
!2302 = span !2290 910 965
!2303 = fn_call_path_span !2290 910 917
!2304 = (!2302 !2303)
!2305 = (!1532 !1533)
!2306 = (!1535 !1536)
!2307 = (!1538 !1539)
!2308 = (!1543 !1544)
!2309 = (!1548 !1549)
!2310 = (!1457 !1458)
!2311 = (!1460 !1461)
!2312 = (!1463 !1464)
!2313 = (!1468 !1469)
!2314 = span !34 123 127
!2315 = span !34 129 135
!2316 = span !34 109 358
!2317 = fn_name_span !34 112 122
!2318 = (!2316 !2317)
!2319 = span !34 190 312
!2320 = span !34 196 200
!2321 = span !34 203 308
!2322 = fn_call_path_span !34 203 308
!2323 = (!2321 !2322)
!2324 = span !34 262 266
!2325 = span !34 262 285
!2326 = fn_call_path_span !34 267 277
!2327 = (!2325 !2326)
!2328 = span !34 177 313
!2329 = span !34 334 340
!2330 = span !2290 1550 2446
!2331 = fn_name_span !2290 1557 1569
!2332 = (!2330 !2331)
!2333 = span !2290 1635 1653
!2334 = fn_call_path_span !2290 1635 1651
!2335 = (!2333 !2334)
!2336 = span !2290 1621 1654
!2337 = span !2290 1858 1869
!2338 = fn_call_path_span !2290 1858 1867
!2339 = (!2337 !2338)
!2340 = span !2290 1829 1870
!2341 = span !2290 1879 1897
!2342 = span !2290 1879 1907
!2343 = fn_call_path_span !2290 1898 1905
!2344 = (!2342 !2343)
!2345 = span !2290 1878 1907
!2346 = fn_call_path_span !2290 1878 1879
!2347 = (!2345 !2346)
!2348 = span !2290 1966 1984
!2349 = span !2290 1939 1985
!2350 = fn_call_path_span !2290 1939 1965
!2351 = (!2349 !2350)
!2352 = span !2290 1918 1985
!2353 = span !2290 2005 2023
!2354 = span !2290 2005 2033
!2355 = fn_call_path_span !2290 2024 2031
!2356 = (!2354 !2355)
!2357 = span !2290 2004 2033
!2358 = fn_call_path_span !2290 2004 2005
!2359 = (!2357 !2358)
!2360 = span !2290 2168 2186
!2361 = span !2290 2136 2187
!2362 = fn_call_path_span !2290 2136 2167
!2363 = (!2361 !2362)
!2364 = span !2290 2109 2188
!2365 = span !2290 2200 2220
!2366 = span !2290 2224 2231
!2367 = span !2290 2200 2231
!2368 = fn_call_path_span !2290 2221 2223
!2369 = (!2367 !2368)
!2370 = span !2290 2253 2257
!2371 = span !2290 2246 2257
!2372 = span !2290 2326 2344
!2373 = span !2290 2299 2345
!2374 = fn_call_path_span !2290 2299 2325
!2375 = (!2373 !2374)
!2376 = span !2290 2278 2345
!2377 = span !2290 2439 2444
!2378 = span !1663 2757 2857
!2379 = fn_name_span !1663 2764 2768
!2380 = (!2378 !2379)
!2381 = span !1663 2812 2850
!2382 = span !1663 2795 2851
!2383 = fn_call_path_span !1663 2795 2811
!2384 = (!2382 !2383)
!2385 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/registers.sw"
!2386 = span !2385 2424 2495
!2387 = fn_name_span !2385 2431 2440
!2388 = (!2386 !2387)
!2389 = span !2385 2460 2493
!2390 = span !1037 400 404
!2391 = span !1037 385 518
!2392 = fn_name_span !1037 392 399
!2393 = (!2391 !2392)
!2394 = span !1037 439 482
!2395 = span !1037 424 483
!2396 = span !1037 503 511
!2397 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/call_frames.sw"
!2398 = span !2397 4425 4438
!2399 = span !2397 4391 4636
!2400 = fn_name_span !2397 4398 4424
!2401 = (!2399 !2400)
!2402 = span !2397 546 547
!2403 = span !2397 588 589
!2404 = span !2397 4504 4554
!2405 = fn_call_path_span !2397 4527 4528
!2406 = (!2404 !2405)
!2407 = span !2397 4479 4555
!2408 = fn_call_path_span !2397 4493 4496
!2409 = (!2407 !2408)
!2410 = span !2397 4466 4556
!2411 = span !2397 4575 4581
!2412 = span !2397 4561 4634
!2413 = span !2397 4593 4606
!2414 = span !2397 5222 5235
!2415 = span !2397 5183 5340
!2416 = fn_name_span !2397 5190 5221
!2417 = (!2415 !2416)
!2418 = span !2397 5283 5337
!2419 = span !2397 5266 5338
!2420 = fn_call_path_span !2397 5266 5282
!2421 = (!2419 !2420)
!2422 = span !0 36041 36049
!2423 = span !0 36016 36579
!2424 = fn_name_span !0 36019 36040
!2425 = (!2423 !193 !2424)
!2426 = span !0 36115 36135
!2427 = fn_call_path_span !0 36115 36125
!2428 = (!2426 !2427)
!2429 = span !0 36103 36136
!2430 = span !0 36175 36197
!2431 = fn_call_path_span !0 36175 36187
!2432 = (!2430 !2431)
!2433 = span !0 36169 36341
!2434 = span !0 36208 36315
!2435 = fn_call_path_span !0 36208 36315
!2436 = (!2434 !2435)
!2437 = span !0 36213 36228
!2438 = span !0 36233 36248
!2439 = span !0 36233 36314
!2440 = span !0 36252 36266
!2441 = fn_call_path_span !0 36252 36264
!2442 = (!2440 !2441)
!2443 = span !0 36270 36275
!2444 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/order.sw"
!2445 = span !2444 401 422
!2446 = span !0 1804 1806
!2447 = span !0 36270 36314
!2448 = fn_call_path_span !0 36289 36290
!2449 = (!2447 !2448)
!2450 = span !0 36252 36314
!2451 = fn_call_path_span !0 36267 36269
!2452 = (!2450 !2451)
!2453 = span !0 36329 36334
!2454 = span !0 36142 36342
!2455 = span !0 36422 36442
!2456 = span !0 36422 36495
!2457 = span !0 36446 36458
!2458 = fn_call_path_span !0 36446 36456
!2459 = (!2457 !2458)
!2460 = span !0 36446 36480
!2461 = fn_call_path_span !0 36472 36478
!2462 = (!2460 !2461)
!2463 = span !0 36484 36489
!2464 = span !2444 356 375
!2465 = span !0 36446 36495
!2466 = fn_call_path_span !0 36481 36483
!2467 = (!2465 !2466)
!2468 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/errors.sw"
!2469 = span !2468 786 830
!2470 = span !0 36405 36535
!2471 = fn_call_path_span !0 36405 36412
!2472 = (!2470 !2471)
!2473 = span !0 36570 36575
!2474 = span !0 36542 36576
!2475 = fn_call_path_span !0 36542 36559
!2476 = (!2474 !2475)
!2477 = span !0 29841 29849
!2478 = span !0 29827 30012
!2479 = fn_name_span !0 29830 29840
!2480 = (!2478 !1196 !2479)
!2481 = span !0 29892 29898
!2482 = span !0 29884 29912
!2483 = fn_call_path_span !0 29899 29902
!2484 = (!2482 !2483)
!2485 = span !0 29884 29923
!2486 = fn_call_path_span !0 29913 29921
!2487 = (!2485 !2486)
!2488 = span !0 29872 29924
!2489 = span !0 29937 29942
!2490 = span !0 29937 29952
!2491 = fn_call_path_span !0 29943 29950
!2492 = (!2490 !2491)
!2493 = span !2468 394 658
!2494 = span !0 29929 29990
!2495 = fn_call_path_span !0 29929 29936
!2496 = (!2494 !2495)
!2497 = span !0 29996 30001
!2498 = span !0 29996 30010
!2499 = fn_call_path_span !0 30002 30008
!2500 = (!2498 !2499)
!2501 = (!1246 !1196 !1247)
!2502 = (!1249 !1250)
!2503 = (!1252 !1253)
!2504 = (!1255 !1256)
!2505 = (!1261 !1196 !1262)
!2506 = (!1265 !1266)
!2507 = (!1270 !1271)
!2508 = (!1276 !1277)
!2509 = (!1279 !1280)
!2510 = (!1289 !1290)
!2511 = (!1292 !1293)
!2512 = (!1297 !1298)
!2513 = (!1302 !1303)
!2514 = (!1306 !1307)
!2515 = (!1310 !1311)
!2516 = (!1314 !1315)
!2517 = (!1319 !1320)
!2518 = (!1326 !1327)
!2519 = (!1331 !1332)
!2520 = (!1335 !1336)
!2521 = (!1339 !1340)
!2522 = (!1343 !1344)
!2523 = (!1347 !1348)
!2524 = (!1352 !1353)
!2525 = (!1358 !1359)
!2526 = (!1362 !1363)
!2527 = (!1365 !1366)
!2528 = (!1368 !1369)
!2529 = (!1372 !1373)
!2530 = (!1044 !1045)
!2531 = (!1447 !1448)
!2532 = (!1452 !1453)
!2533 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/storage/storage_map.sw"
!2534 = span !2533 2143 2147
!2535 = span !2533 2149 2152
!2536 = span !2533 2132 2304
!2537 = fn_name_span !2533 2139 2142
!2538 = (!2536 !2537)
!2539 = span !2533 2238 2253
!2540 = fn_call_path_span !2533 2243 2251
!2541 = (!2539 !2540)
!2542 = span !2533 2232 2254
!2543 = span !2533 2225 2255
!2544 = fn_call_path_span !2533 2225 2231
!2545 = (!2543 !2544)
!2546 = span !2533 2215 2256
!2547 = span !2533 2286 2289
!2548 = span !2533 2294 2297
!2549 = span !2533 2291 2292
!2550 = span !2533 2265 2298
!2551 = fn_call_path_span !2533 2265 2285
!2552 = (!2550 !2551)
!2553 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/hash.sw"
!2554 = span !2553 8249 8250
!2555 = span !2553 8232 8361
!2556 = fn_name_span !2553 8239 8245
!2557 = (!2555 !2556 !13)
!2558 = span !2553 8305 8318
!2559 = fn_call_path_span !2553 8305 8316
!2560 = (!2558 !2559)
!2561 = span !2553 8288 8319
!2562 = span !2553 8331 8337
!2563 = span !2553 8324 8338
!2564 = fn_call_path_span !2553 8326 8330
!2565 = (!2563 !2564)
!2566 = span !2553 8344 8350
!2567 = span !2553 8344 8359
!2568 = fn_call_path_span !2553 8351 8357
!2569 = (!2567 !2568)
!2570 = span !2553 161 247
!2571 = fn_name_span !2553 168 171
!2572 = (!2570 !2571)
!2573 = span !2553 218 230
!2574 = fn_call_path_span !2553 218 228
!2575 = (!2573 !2574)
!2576 = span !2553 192 241
!2577 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/bytes.sw"
!2578 = span !2577 2955 3062
!2579 = fn_name_span !2577 2962 2965
!2580 = (!2578 !2579)
!2581 = span !2577 3010 3025
!2582 = fn_call_path_span !2577 3010 3023
!2583 = (!2581 !2582)
!2584 = span !2577 2986 3056
!2585 = span !2577 3044 3045
!2586 = span !2577 434 540
!2587 = fn_name_span !2577 441 444
!2588 = (!2586 !2587)
!2589 = span !2577 501 502
!2590 = span !2577 489 503
!2591 = fn_call_path_span !2577 489 500
!2592 = (!2590 !2591)
!2593 = span !2577 465 534
!2594 = span !2577 522 523
!2595 = span !1434 3253 3258
!2596 = span !1434 3234 3347
!2597 = fn_name_span !1434 3241 3252
!2598 = (!2596 !2597)
!2599 = span !1434 3282 3345
!2600 = span !1434 3309 3318
!2601 = span !2553 4365 4369
!2602 = span !2553 4379 4384
!2603 = span !2553 4357 4457
!2604 = fn_name_span !2553 4360 4364
!2605 = (!2603 !2604 !13)
!2606 = span !2553 4409 4410
!2607 = span !2553 4404 4422
!2608 = fn_call_path_span !2553 4411 4415
!2609 = (!2607 !2608)
!2610 = span !2553 4437 4438
!2611 = span !2553 4432 4450
!2612 = fn_call_path_span !2553 4439 4443
!2613 = (!2611 !2612)
!2614 = span !2553 2651 2655
!2615 = span !2553 2665 2670
!2616 = span !2553 2643 3211
!2617 = fn_name_span !2553 2646 2650
!2618 = (!2616 !2617)
!2619 = span !2553 2712 2714
!2620 = span !2553 2700 2715
!2621 = fn_call_path_span !2553 2700 2711
!2622 = (!2620 !2621)
!2623 = span !2553 2690 2716
!2624 = span !2553 2786 2848
!2625 = span !2553 2747 2849
!2626 = span !2553 2881 2884
!2627 = span !2553 2905 2911
!2628 = span !2553 2932 2938
!2629 = span !2553 2959 2965
!2630 = span !2553 2986 2992
!2631 = span !2553 2859 3131
!2632 = span !2553 3018 3033
!2633 = span !2553 3047 3062
!2634 = span !2553 3076 3091
!2635 = span !2553 3105 3120
!2636 = span !2553 3194 3197
!2637 = span !2553 3199 3201
!2638 = span !2553 3166 3202
!2639 = fn_call_path_span !2553 3166 3187
!2640 = (!2638 !2639)
!2641 = span !2553 3154 3203
!2642 = fn_call_path_span !2553 3154 3165
!2643 = (!2641 !2642)
!2644 = span !2553 3142 3204
!2645 = fn_call_path_span !2553 3148 3153
!2646 = (!2644 !2645)
!2647 = span !2553 319 323
!2648 = span !2553 325 330
!2649 = span !2553 298 380
!2650 = fn_name_span !2553 305 310
!2651 = (!2649 !2650)
!2652 = span !2553 126 138
!2653 = span !2553 349 373
!2654 = fn_call_path_span !2553 360 366
!2655 = (!2653 !2654)
!2656 = span !2577 18381 18385
!2657 = span !2577 18395 18400
!2658 = span !2577 18359 19306
!2659 = fn_name_span !2577 18366 18372
!2660 = (!2658 !2659)
!2661 = span !2577 18434 18445
!2662 = fn_call_path_span !2577 18440 18443
!2663 = (!2661 !2662)
!2664 = span !2577 18418 18446
!2665 = span !2577 18458 18467
!2666 = span !2577 18471 18472
!2667 = span !2577 18458 18472
!2668 = fn_call_path_span !2577 18468 18470
!2669 = (!2667 !2668)
!2670 = span !2577 18487 18493
!2671 = span !2577 2437 2445
!2672 = span !2577 18608 18609
!2673 = span !2577 18596 18609
!2674 = fn_call_path_span !2577 18605 18607
!2675 = (!2673 !2674)
!2676 = span !2577 18624 18636
!2677 = span !2577 18650 18656
!2678 = span !2577 18704 18713
!2679 = span !2577 18693 18713
!2680 = fn_call_path_span !2577 18702 18703
!2681 = (!2679 !2680)
!2682 = span !2577 18678 18714
!2683 = span !2577 18723 18750
!2684 = span !2577 2376 2389
!2685 = span !2577 18844 18863
!2686 = fn_call_path_span !2577 18853 18861
!2687 = (!2685 !2686)
!2688 = span !2577 18866 18874
!2689 = span !2577 18844 18874
!2690 = fn_call_path_span !2577 18864 18865
!2691 = (!2689 !2690)
!2692 = span !2577 18964 18978
!2693 = fn_call_path_span !2577 18973 18976
!2694 = (!2692 !2693)
!2695 = span !2577 18980 18999
!2696 = fn_call_path_span !2577 18989 18997
!2697 = (!2695 !2696)
!2698 = span !2577 19001 19009
!2699 = span !2577 18950 19010
!2700 = fn_call_path_span !2577 18950 18963
!2701 = (!2699 !2700)
!2702 = span !2577 19028 19036
!2703 = span !2577 18905 19051
!2704 = fn_call_path_span !2577 18905 18926
!2705 = (!2703 !2704)
!2706 = span !2577 18889 19052
!2707 = span !2577 19091 19100
!2708 = span !2577 19076 19101
!2709 = fn_call_path_span !2577 19076 19090
!2710 = (!2708 !2709)
!2711 = span !2577 19065 19101
!2712 = span !2577 19136 19150
!2713 = fn_call_path_span !2577 19145 19148
!2714 = (!2712 !2713)
!2715 = span !2577 19167 19178
!2716 = span !2577 19136 19179
!2717 = fn_call_path_span !2577 19151 19166
!2718 = (!2716 !2717)
!2719 = span !2577 19122 19180
!2720 = span !2577 19189 19200
!2721 = fn_call_path_span !2577 19195 19198
!2722 = (!2720 !2721)
!2723 = span !2577 19215 19222
!2724 = span !2577 19224 19233
!2725 = span !2577 19189 19234
!2726 = fn_call_path_span !2577 19201 19214
!2727 = (!2725 !2726)
!2728 = span !2577 19291 19299
!2729 = span !2577 19280 19299
!2730 = span !2577 13713 13717
!2731 = span !2577 13702 13750
!2732 = fn_name_span !2577 13709 13712
!2733 = (!2731 !2732)
!2734 = span !2577 1028 1032
!2735 = span !2577 1012 1065
!2736 = fn_name_span !2577 1019 1027
!2737 = (!2735 !2736)
!2738 = span !2577 349 357
!2739 = span !1118 2293 2296
!2740 = span !1118 2307 2312
!2741 = span !1118 2272 2392
!2742 = fn_name_span !1118 2279 2289
!2743 = (!2741 !2742)
!2744 = span !1118 2348 2385
!2745 = span !1118 2337 2386
!2746 = fn_call_path_span !1118 2337 2347
!2747 = (!2745 !2746)
!2748 = span !1118 1192 1197
!2749 = span !1118 1178 1282
!2750 = fn_name_span !1118 1181 1191
!2751 = (!2749 !2750)
!2752 = span !1118 1234 1280
!2753 = span !1434 4073 4076
!2754 = span !1434 4087 4092
!2755 = span !1434 4099 4108
!2756 = span !1434 4052 4329
!2757 = fn_name_span !1434 4059 4072
!2758 = (!2756 !2757)
!2759 = span !1434 4135 4152
!2760 = fn_call_path_span !1434 4145 4146
!2761 = (!2759 !2760)
!2762 = span !1434 4177 4199
!2763 = fn_call_path_span !1434 4177 4188
!2764 = (!2762 !2763)
!2765 = span !1434 4163 4200
!2766 = span !1434 4220 4221
!2767 = span !1434 4212 4221
!2768 = fn_call_path_span !1434 4218 4219
!2769 = (!2767 !2768)
!2770 = span !1434 4254 4261
!2771 = span !1434 4236 4269
!2772 = fn_call_path_span !1434 4240 4253
!2773 = (!2771 !2772)
!2774 = span !1434 4289 4296
!2775 = span !1037 5836 5840
!2776 = span !1037 5842 5845
!2777 = span !1037 5853 5858
!2778 = span !1037 5815 5959
!2779 = fn_name_span !1037 5822 5835
!2780 = (!2778 !2779)
!2781 = span !1037 5875 5952
!2782 = span !1037 5926 5941
!2783 = span !2577 920 924
!2784 = span !2577 909 961
!2785 = fn_name_span !2577 916 919
!2786 = (!2784 !2785)
!2787 = span !2577 331 343
!2788 = span !2577 2015 2020
!2789 = span !2577 2007 2233
!2790 = fn_name_span !2577 2010 2014
!2791 = (!2789 !2790)
!2792 = span !2577 2061 2084
!2793 = fn_call_path_span !2577 2067 2082
!2794 = (!2792 !2793)
!2795 = span !2577 2051 2085
!2796 = span !2577 2116 2119
!2797 = span !2577 2104 2120
!2798 = fn_call_path_span !2577 2104 2115
!2799 = (!2797 !2798)
!2800 = span !2577 2094 2121
!2801 = span !2577 2133 2136
!2802 = span !2577 2139 2140
!2803 = span !2577 2133 2140
!2804 = fn_call_path_span !2577 2137 2138
!2805 = (!2803 !2804)
!2806 = span !2577 2155 2166
!2807 = fn_call_path_span !2577 2161 2164
!2808 = (!2806 !2807)
!2809 = span !2577 2181 2184
!2810 = span !2577 2186 2189
!2811 = span !2577 2155 2190
!2812 = fn_call_path_span !2577 2167 2174
!2813 = (!2811 !2812)
!2814 = span !2577 2217 2220
!2815 = span !2577 2222 2225
!2816 = span !2577 2210 2227
!2817 = span !1118 3934 3938
!2818 = span !1118 3911 3981
!2819 = fn_name_span !1118 3918 3933
!2820 = (!2818 !2819)
!2821 = span !1118 3957 3973
!2822 = fn_call_path_span !1118 3957 3967
!2823 = (!2821 !2822)
!2824 = span !1118 3974 3975
!2825 = span !1037 3230 3234
!2826 = span !1037 3236 3239
!2827 = span !1037 3247 3252
!2828 = span !1037 3212 3401
!2829 = fn_name_span !1037 3219 3226
!2830 = (!2828 !2829)
!2831 = span !1037 3269 3310
!2832 = span !1037 3349 3352
!2833 = span !1037 3319 3394
!2834 = span !1037 3368 3383
!2835 = span !1037 6560 6564
!2836 = span !1037 6566 6572
!2837 = span !1037 6537 6707
!2838 = fn_name_span !1037 6544 6559
!2839 = (!2837 !2838)
!2840 = span !1037 6597 6701
!2841 = span !1037 6647 6665
!2842 = span !2577 15117 15121
!2843 = span !2577 15106 15164
!2844 = fn_name_span !2577 15113 15116
!2845 = (!2843 !2844)
!2846 = span !2577 15144 15158
!2847 = fn_call_path_span !2577 15153 15156
!2848 = (!2846 !2847)
!2849 = span !2577 21425 21430
!2850 = span !2577 21417 21565
!2851 = fn_name_span !2577 21420 21424
!2852 = (!2850 !2851)
!2853 = span !2577 21485 21506
!2854 = fn_call_path_span !2577 21485 21499
!2855 = (!2853 !2854)
!2856 = span !2577 21525 21548
!2857 = fn_call_path_span !2577 21531 21546
!2858 = (!2856 !2857)
!2859 = span !2577 21461 21559
!2860 = span !2553 400 404
!2861 = span !2553 386 662
!2862 = fn_name_span !2553 393 399
!2863 = (!2861 !2862)
!2864 = span !2553 448 459
!2865 = fn_call_path_span !2553 448 457
!2866 = (!2864 !2865)
!2867 = span !2553 424 460
!2868 = span !2553 492 505
!2869 = span !2553 524 540
!2870 = fn_call_path_span !2553 535 538
!2871 = (!2869 !2870)
!2872 = span !2553 561 577
!2873 = fn_call_path_span !2553 572 575
!2874 = (!2872 !2873)
!2875 = span !2553 469 656
!2876 = span !2553 603 622
!2877 = span !187 7873 7976
!2878 = fn_name_span !187 7880 7883
!2879 = (!2877 !2878)
!2880 = span !187 7904 7970
!2881 = span !1220 3325 3329
!2882 = span !1220 3309 3368
!2883 = fn_name_span !1220 3316 3324
!2884 = (!2882 !2883)
!2885 = span !1220 751 765
!2886 = (!1224 !1225)
!2887 = (!1532 !1533)
!2888 = (!1535 !1536)
!2889 = (!1538 !1539)
!2890 = (!1543 !1544)
!2891 = (!1548 !1549)
!2892 = (!1457 !1458)
!2893 = (!1460 !1461)
!2894 = (!1463 !1464)
!2895 = (!1468 !1469)
!2896 = span !34 104 1767
!2897 = (!2896 !2123)
!2898 = span !34 185 1721
!2899 = span !34 198 415
!2900 = fn_call_path_span !34 198 415
!2901 = (!2899 !2900)
!2902 = span !34 225 230
!2903 = span !34 274 278
!2904 = span !34 274 297
!2905 = fn_call_path_span !34 279 289
!2906 = (!2904 !2905)
!2907 = span !34 261 298
!2908 = span !34 336 341
!2909 = span !34 353 359
!2910 = span !34 336 360
!2911 = fn_call_path_span !34 342 352
!2912 = (!2910 !2911)
!2913 = span !34 323 361
!2914 = span !34 386 392
!2915 = span !34 417 633
!2916 = fn_call_path_span !34 417 633
!2917 = (!2915 !2916)
!2918 = span !34 443 448
!2919 = span !34 492 496
!2920 = span !34 492 515
!2921 = fn_call_path_span !34 497 507
!2922 = (!2920 !2921)
!2923 = span !34 479 516
!2924 = span !34 554 559
!2925 = span !34 571 577
!2926 = span !34 554 578
!2927 = fn_call_path_span !34 560 570
!2928 = (!2926 !2927)
!2929 = span !34 541 579
!2930 = span !34 604 610
!2931 = span !34 635 851
!2932 = fn_call_path_span !34 635 851
!2933 = (!2931 !2932)
!2934 = span !34 661 666
!2935 = span !34 710 714
!2936 = span !34 710 733
!2937 = fn_call_path_span !34 715 725
!2938 = (!2936 !2937)
!2939 = span !34 697 734
!2940 = span !34 772 777
!2941 = span !34 789 795
!2942 = span !34 772 796
!2943 = fn_call_path_span !34 778 788
!2944 = (!2942 !2943)
!2945 = span !34 759 797
!2946 = span !34 822 828
!2947 = span !34 853 1073
!2948 = fn_call_path_span !34 853 1073
!2949 = (!2947 !2948)
!2950 = span !34 883 888
!2951 = span !34 932 936
!2952 = span !34 932 955
!2953 = fn_call_path_span !34 937 947
!2954 = (!2952 !2953)
!2955 = span !34 919 956
!2956 = span !34 994 999
!2957 = span !34 1011 1017
!2958 = span !34 994 1018
!2959 = fn_call_path_span !34 1000 1010
!2960 = (!2958 !2959)
!2961 = span !34 981 1019
!2962 = span !34 1044 1050
!2963 = span !34 1075 1180
!2964 = fn_call_path_span !34 1075 1180
!2965 = (!2963 !2964)
!2966 = span !34 1134 1138
!2967 = span !34 1134 1157
!2968 = fn_call_path_span !34 1139 1149
!2969 = (!2967 !2968)
!2970 = span !34 1182 1284
!2971 = fn_call_path_span !34 1182 1284
!2972 = (!2970 !2971)
!2973 = span !34 1238 1242
!2974 = span !34 1238 1261
!2975 = fn_call_path_span !34 1243 1253
!2976 = (!2974 !2975)
!2977 = span !34 1286 1390
!2978 = fn_call_path_span !34 1286 1390
!2979 = (!2977 !2978)
!2980 = span !34 1344 1348
!2981 = span !34 1344 1367
!2982 = fn_call_path_span !34 1349 1359
!2983 = (!2981 !2982)
!2984 = span !34 1392 1498
!2985 = fn_call_path_span !34 1392 1498
!2986 = (!2984 !2985)
!2987 = span !34 1452 1456
!2988 = span !34 1452 1475
!2989 = fn_call_path_span !34 1457 1467
!2990 = (!2988 !2989)
!2991 = span !34 1500 1717
!2992 = fn_call_path_span !34 1500 1717
!2993 = (!2991 !2992)
!2994 = span !34 1527 1532
!2995 = span !34 1576 1580
!2996 = span !34 1576 1599
!2997 = fn_call_path_span !34 1581 1591
!2998 = (!2996 !2997)
!2999 = span !34 1563 1600
!3000 = span !34 1638 1643
!3001 = span !34 1655 1661
!3002 = span !34 1638 1662
!3003 = fn_call_path_span !34 1644 1654
!3004 = (!3002 !3003)
!3005 = span !34 1625 1663
!3006 = span !34 1688 1694
!3007 = span !34 172 1722
!3008 = span !34 1743 1749
!3009 = span !7 4285 4289
!3010 = span !7 4291 4297
!3011 = span !7 4271 4416
!3012 = fn_name_span !7 4274 4284
!3013 = (!3011 !3012)
!3014 = span !7 4327 4410
!3015 = span !7 36593 36597
!3016 = span !7 36599 36605
!3017 = span !7 36579 36743
!3018 = fn_name_span !7 36582 36592
!3019 = (!3017 !3018)
!3020 = span !7 36653 36654
!3021 = span !7 36648 36673
!3022 = fn_call_path_span !7 36655 36665
!3023 = (!3021 !3022)
!3024 = span !7 36635 36674
!3025 = span !7 36701 36702
!3026 = span !7 36714 36720
!3027 = span !7 36696 36721
!3028 = fn_call_path_span !7 36703 36713
!3029 = (!3027 !3028)
!3030 = span !7 36683 36722
!3031 = span !7 36731 36737
!3032 = span !1228 3361 3365
!3033 = span !1228 3346 3472
!3034 = fn_name_span !1228 3353 3360
!3035 = (!3033 !3034)
!3036 = span !1228 3385 3466
!3037 = span !1228 3391 3395
!3038 = span !1228 3410 3432
!3039 = fn_call_path_span !1228 3410 3432
!3040 = (!3038 !3039)
!3041 = span !1228 3427 3431
!3042 = span !1228 3450 3455
!3043 = (!2060 !2061)
!3044 = (!2065 !2066)
!3045 = (!2071 !2072)
!3046 = span !0 29287 29292
!3047 = span !0 29271 29540
!3048 = fn_name_span !0 29274 29286
!3049 = (!3047 !1196 !3048)
!3050 = span !0 29336 29342
!3051 = span !0 29328 29353
!3052 = fn_call_path_span !0 29343 29346
!3053 = (!3051 !3052)
!3054 = span !0 29328 29364
!3055 = fn_call_path_span !0 29354 29362
!3056 = (!3054 !3055)
!3057 = span !0 29322 29538
!3058 = span !0 29375 29513
!3059 = fn_call_path_span !0 29375 29513
!3060 = (!3058 !3059)
!3061 = span !0 29400 29413
!3062 = span !0 29392 29424
!3063 = fn_call_path_span !0 29414 29417
!3064 = (!3062 !3063)
!3065 = span !0 29392 29435
!3066 = fn_call_path_span !0 29425 29433
!3067 = (!3065 !3066)
!3068 = span !0 29386 29512
!3069 = span !0 29450 29472
!3070 = fn_call_path_span !0 29450 29472
!3071 = (!3069 !3070)
!3072 = span !0 29466 29470
!3073 = span !0 29495 29500
!3074 = (!2536 !2537)
!3075 = (!2539 !2540)
!3076 = (!2543 !2544)
!3077 = (!2550 !2551)
!3078 = (!2882 !2883)
!3079 = (!1994 !1995)
!3080 = (!1997 !1998)
!3081 = (!2001 !2002)
!3082 = span !158 16726 16730
!3083 = span !158 16732 16737
!3084 = span !158 16720 16786
!3085 = fn_name_span !158 16723 16725
!3086 = (!3084 !3085)
!3087 = span !158 14178 14182
!3088 = span !158 14184 14189
!3089 = span !158 14172 14238
!3090 = fn_name_span !158 14175 14177
!3091 = (!3089 !3090)
!3092 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/block.sw"
!3093 = span !3092 571 662
!3094 = fn_name_span !3092 578 584
!3095 = (!3093 !3094)
!3096 = span !3092 600 660
!3097 = span !3092 622 633
!3098 = span !158 1224 1228
!3099 = span !158 1230 1235
!3100 = span !158 1217 1829
!3101 = fn_name_span !158 1220 1223
!3102 = (!3100 !3101)
!3103 = span !158 1420 1449
!3104 = span !158 1494 1497
!3105 = span !158 1499 1510
!3106 = fn_call_path_span !158 1499 1508
!3107 = (!3105 !3106)
!3108 = span !158 1489 1511
!3109 = span !158 1529 1559
!3110 = fn_call_path_span !158 1529 1557
!3111 = (!3109 !3110)
!3112 = span !158 1587 1588
!3113 = span !158 1578 1589
!3114 = span !158 1712 1715
!3115 = span !158 1723 1734
!3116 = fn_call_path_span !158 1723 1732
!3117 = (!3115 !3116)
!3118 = span !158 1736 1737
!3119 = span !158 1810 1813
!3120 = span !158 32020 32226
!3121 = fn_name_span !158 32023 32051
!3122 = (!3120 !3121)
!3123 = span !158 32101 32108
!3124 = fn_call_path_span !158 32101 32106
!3125 = (!3123 !3124)
!3126 = span !158 32122 32195
!3127 = span !158 32216 32217
!3128 = span !158 31966 32018
!3129 = fn_name_span !158 31969 31974
!3130 = (!3128 !3129)
!3131 = span !158 31990 32016
!3132 = (!1532 !1533)
!3133 = (!1535 !1536)
!3134 = (!1538 !1539)
!3135 = (!1543 !1544)
!3136 = (!1548 !1549)
!3137 = (!1457 !1458)
!3138 = (!1460 !1461)
!3139 = (!1463 !1464)
!3140 = (!1468 !1469)
!3141 = span !34 117 121
!3142 = span !34 103 346
!3143 = fn_name_span !34 106 116
!3144 = (!3142 !3143)
!3145 = span !34 184 300
!3146 = span !34 190 194
!3147 = span !34 197 296
!3148 = fn_call_path_span !34 197 296
!3149 = (!3147 !3148)
!3150 = (!1567 !1568)
!3151 = span !34 171 301
!3152 = span !0 36626 36634
!3153 = span !0 36642 36647
!3154 = span !0 36605 37248
!3155 = fn_name_span !0 36608 36625
!3156 = (!3154 !193 !3155)
!3157 = span !0 36662 36685
!3158 = span !0 36777 36784
!3159 = span !0 36789 36793
!3160 = span !0 36769 36794
!3161 = fn_call_path_span !0 36785 36788
!3162 = (!3160 !3161)
!3163 = span !0 36769 36801
!3164 = fn_call_path_span !0 36795 36799
!3165 = (!3163 !3164)
!3166 = span !0 36751 36802
!3167 = span !0 36869 36876
!3168 = span !0 36900 36924
!3169 = fn_call_path_span !0 36900 36917
!3170 = (!3168 !3169)
!3171 = span !2444 325 350
!3172 = span !0 36934 37066
!3173 = span !0 36940 36956
!3174 = span !0 36971 37007
!3175 = fn_call_path_span !0 36971 37007
!3176 = (!3174 !3175)
!3177 = span !2444 294 319
!3178 = span !0 37020 37056
!3179 = fn_call_path_span !0 37020 37056
!3180 = (!3178 !3179)
!3181 = span !0 37038 37055
!3182 = fn_call_path_span !0 37038 37039
!3183 = (!3181 !3182)
!3184 = span !0 36869 37073
!3185 = fn_call_path_span !0 36877 36890
!3186 = (!3184 !3185)
!3187 = span !0 37093 37097
!3188 = span !0 37080 37108
!3189 = fn_call_path_span !0 37080 37092
!3190 = (!3188 !3189)
!3191 = span !0 37122 37129
!3192 = span !0 37137 37141
!3193 = span !0 37143 37150
!3194 = span !0 37114 37151
!3195 = fn_call_path_span !0 37130 37136
!3196 = (!3194 !3195)
!3197 = span !0 37207 37211
!3198 = span !0 37230 37237
!3199 = span !0 37162 37244
!3200 = span !0 37158 37245
!3201 = fn_call_path_span !0 37158 37161
!3202 = (!3200 !3201)
!3203 = span !1244 840 844
!3204 = span !1244 828 913
!3205 = fn_name_span !1244 835 839
!3206 = (!3204 !1196 !3205)
!3207 = span !1244 871 882
!3208 = fn_call_path_span !1244 876 880
!3209 = (!3207 !3208)
!3210 = span !1244 884 897
!3211 = fn_call_path_span !1244 889 895
!3212 = (!3210 !3211)
!3213 = span !1244 861 898
!3214 = fn_call_path_span !1244 861 865
!3215 = (!3213 !3214)
!3216 = span !1244 861 907
!3217 = fn_call_path_span !1244 899 905
!3218 = (!3216 !3217)
!3219 = (!2060 !2061)
!3220 = (!2065 !2066)
!3221 = (!2071 !2072)
!3222 = (!1261 !1196 !1262)
!3223 = (!1265 !1266)
!3224 = (!1270 !1271)
!3225 = (!1276 !1277)
!3226 = (!1279 !1280)
!3227 = (!1289 !1290)
!3228 = (!1292 !1293)
!3229 = (!1297 !1298)
!3230 = (!1302 !1303)
!3231 = (!1306 !1307)
!3232 = (!1310 !1311)
!3233 = (!1314 !1315)
!3234 = (!1319 !1320)
!3235 = (!1326 !1327)
!3236 = (!1331 !1332)
!3237 = (!1335 !1336)
!3238 = (!1339 !1340)
!3239 = (!1343 !1344)
!3240 = (!1347 !1348)
!3241 = (!1352 !1353)
!3242 = (!1358 !1359)
!3243 = (!1362 !1363)
!3244 = (!1365 !1366)
!3245 = (!1368 !1369)
!3246 = (!1372 !1373)
!3247 = (!1044 !1045)
!3248 = (!1447 !1448)
!3249 = (!1452 !1453)
!3250 = (!2536 !2537)
!3251 = (!2539 !2540)
!3252 = (!2543 !2544)
!3253 = (!2550 !2551)
!3254 = (!2555 !2556 !13)
!3255 = (!2558 !2559)
!3256 = (!2563 !2564)
!3257 = (!2567 !2568)
!3258 = (!2603 !2604 !13)
!3259 = (!2607 !2608)
!3260 = (!2611 !2612)
!3261 = span !1615 3827 3831
!3262 = span !1615 3841 3846
!3263 = span !1615 3819 4147
!3264 = fn_name_span !1615 3822 3826
!3265 = (!3263 !3264)
!3266 = span !1615 3866 4141
!3267 = span !1615 3872 3876
!3268 = span !1615 3891 4008
!3269 = fn_call_path_span !1615 3891 4008
!3270 = (!3268 !3269)
!3271 = span !1615 3909 3916
!3272 = span !1615 3939 3943
!3273 = span !1615 3939 3955
!3274 = fn_call_path_span !1615 3944 3948
!3275 = (!3273 !3274)
!3276 = span !1615 3973 3980
!3277 = span !1615 3973 3992
!3278 = fn_call_path_span !1615 3981 3985
!3279 = (!3277 !3278)
!3280 = span !1615 4021 4131
!3281 = fn_call_path_span !1615 4021 4131
!3282 = (!3280 !3281)
!3283 = span !1615 4042 4044
!3284 = span !1615 4067 4071
!3285 = span !1615 4067 4083
!3286 = fn_call_path_span !1615 4072 4076
!3287 = (!3285 !3286)
!3288 = span !1615 4101 4103
!3289 = span !1615 4101 4115
!3290 = fn_call_path_span !1615 4104 4108
!3291 = (!3289 !3290)
!3292 = span !2553 1595 1599
!3293 = span !2553 1609 1614
!3294 = span !2553 1587 1734
!3295 = fn_name_span !2553 1590 1594
!3296 = (!3294 !3295)
!3297 = span !2553 1671 1672
!3298 = span !2553 1650 1673
!3299 = fn_call_path_span !2553 1650 1670
!3300 = (!3298 !3299)
!3301 = span !2553 1634 1674
!3302 = span !2553 1683 1688
!3303 = span !2553 1683 1699
!3304 = fn_call_path_span !2553 1689 1693
!3305 = (!3303 !3304)
!3306 = span !2553 1721 1726
!3307 = span !2553 1709 1727
!3308 = fn_call_path_span !2553 1715 1720
!3309 = (!3307 !3308)
!3310 = span !2577 4031 4039
!3311 = span !2577 4010 4158
!3312 = fn_name_span !2577 4017 4030
!3313 = (!3311 !3312)
!3314 = span !2577 4088 4121
!3315 = fn_call_path_span !2577 4088 4111
!3316 = (!3314 !3315)
!3317 = span !2577 4064 4152
!3318 = span !2577 4140 4141
!3319 = span !2577 737 745
!3320 = span !2577 716 859
!3321 = fn_name_span !2577 723 736
!3322 = (!3320 !3321)
!3323 = span !2577 794 815
!3324 = fn_call_path_span !2577 794 805
!3325 = (!3323 !3324)
!3326 = span !2577 770 853
!3327 = span !2577 4667 4671
!3328 = span !2577 4673 4677
!3329 = span !2577 4647 5126
!3330 = fn_name_span !2577 4654 4658
!3331 = (!3329 !3330)
!3332 = span !2577 4771 4790
!3333 = fn_call_path_span !2577 4780 4788
!3334 = (!3332 !3333)
!3335 = span !2577 4759 4790
!3336 = fn_call_path_span !2577 4768 4770
!3337 = (!3335 !3336)
!3338 = span !2577 4805 4820
!3339 = fn_call_path_span !2577 4814 4818
!3340 = (!3338 !3339)
!3341 = span !2577 4954 4968
!3342 = fn_call_path_span !2577 4963 4966
!3343 = (!3341 !3342)
!3344 = span !2577 4954 4994
!3345 = fn_call_path_span !2577 4969 4984
!3346 = (!3344 !3345)
!3347 = span !2577 4944 4995
!3348 = span !2577 5046 5049
!3349 = span !2577 5046 5066
!3350 = fn_call_path_span !2577 5050 5060
!3351 = (!3349 !3350)
!3352 = span !2577 5118 5119
!3353 = span !2577 5106 5119
!3354 = fn_call_path_span !2577 5115 5117
!3355 = (!3353 !3354)
!3356 = span !2577 1303 1307
!3357 = span !2577 1283 1475
!3358 = fn_name_span !2577 1290 1294
!3359 = (!3357 !3358)
!3360 = span !2577 1348 1349
!3361 = span !2577 1336 1349
!3362 = fn_call_path_span !2577 1345 1347
!3363 = (!3361 !3362)
!3364 = span !2577 1352 1353
!3365 = span !2577 1363 1364
!3366 = span !2577 1363 1375
!3367 = fn_call_path_span !2577 1365 1366
!3368 = (!3366 !3367)
!3369 = span !2577 1319 1378
!3370 = span !2577 1432 1439
!3371 = span !2577 1398 1440
!3372 = fn_call_path_span !2577 1398 1411
!3373 = (!3371 !3372)
!3374 = span !2577 1387 1440
!3375 = span !2577 1461 1468
!3376 = span !2577 1450 1468
!3377 = span !1037 4589 4593
!3378 = span !1037 4595 4598
!3379 = span !1037 4571 4760
!3380 = fn_name_span !1037 4578 4588
!3381 = (!3379 !3380)
!3382 = span !1037 4628 4676
!3383 = span !1037 4614 4677
!3384 = span !1037 4706 4713
!3385 = span !1037 4686 4753
!3386 = span !1037 4729 4742
!3387 = span !1648 2772 2776
!3388 = span !1648 2786 2791
!3389 = span !1648 2764 2871
!3390 = fn_name_span !1648 2767 2771
!3391 = (!3389 !3390)
!3392 = span !1648 2811 2839
!3393 = span !1648 2848 2852
!3394 = span !1648 2848 2864
!3395 = fn_call_path_span !1648 2853 2857
!3396 = (!3394 !3395)
!3397 = span !1663 1920 1924
!3398 = span !1663 1934 1939
!3399 = span !1663 1912 2016
!3400 = fn_name_span !1663 1915 1919
!3401 = (!3399 !3400)
!3402 = span !1663 1959 1984
!3403 = span !1663 1993 1997
!3404 = span !1663 1993 2009
!3405 = fn_call_path_span !1663 1998 2002
!3406 = (!3404 !3405)
!3407 = (!2882 !2883)
!3408 = (!1224 !1225)
!3409 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/account.sw"
!3410 = span !3409 619 623
!3411 = span !3409 625 631
!3412 = span !3409 638 643
!3413 = span !3409 590 808
!3414 = fn_name_span !3409 597 610
!3415 = (!3413 !3414)
!3416 = span !3409 684 685
!3417 = span !3409 674 685
!3418 = fn_call_path_span !3409 681 683
!3419 = (!3417 !3418)
!3420 = span !3409 666 716
!3421 = fn_call_path_span !3409 666 673
!3422 = (!3420 !3421)
!3423 = span !3409 152 171
!3424 = span !3409 726 759
!3425 = fn_call_path_span !3409 738 744
!3426 = (!3424 !3425)
!3427 = span !3409 196 215
!3428 = span !3409 769 801
!3429 = fn_call_path_span !3409 781 786
!3430 = (!3428 !3429)
!3431 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/balance.sw"
!3432 = span !3431 291 295
!3433 = span !3431 297 303
!3434 = span !3431 310 315
!3435 = span !3431 269 474
!3436 = fn_name_span !3431 276 282
!3437 = (!3435 !3436)
!3438 = span !3431 338 467
!3439 = span !3431 344 349
!3440 = span !3431 364 403
!3441 = fn_call_path_span !3431 364 403
!3442 = (!3440 !3441)
!3443 = span !3431 110 123
!3444 = span !3431 383 402
!3445 = fn_call_path_span !3431 393 395
!3446 = (!3444 !3445)
!3447 = span !3431 416 457
!3448 = fn_call_path_span !3431 416 457
!3449 = (!3447 !3448)
!3450 = span !3431 129 143
!3451 = span !3431 436 456
!3452 = fn_call_path_span !3431 447 449
!3453 = (!3451 !3452)
!3454 = span !3431 501 505
!3455 = span !3431 507 513
!3456 = span !3431 520 525
!3457 = span !3431 480 1087
!3458 = fn_name_span !3431 487 492
!3459 = (!3457 !3458)
!3460 = span !3431 548 1080
!3461 = span !3431 554 559
!3462 = span !3431 574 813
!3463 = fn_call_path_span !3431 574 813
!3464 = (!3462 !3463)
!3465 = span !3431 640 659
!3466 = fn_call_path_span !3431 647 649
!3467 = (!3465 !3466)
!3468 = span !2468 832 900
!3469 = span !3431 715 740
!3470 = span !3431 735 739
!3471 = span !3431 611 760
!3472 = fn_call_path_span !3431 611 618
!3473 = (!3471 !3472)
!3474 = span !3431 778 797
!3475 = fn_call_path_span !3431 788 790
!3476 = (!3474 !3475)
!3477 = span !3431 826 1070
!3478 = fn_call_path_span !3431 826 1070
!3479 = (!3477 !3478)
!3480 = span !3431 893 913
!3481 = fn_call_path_span !3431 900 902
!3482 = (!3480 !3481)
!3483 = span !3431 969 996
!3484 = span !3431 990 995
!3485 = span !3431 864 1016
!3486 = fn_call_path_span !3431 864 871
!3487 = (!3485 !3486)
!3488 = span !3431 1034 1054
!3489 = fn_call_path_span !3431 1045 1047
!3490 = (!3488 !3489)
!3491 = (!1532 !1533)
!3492 = (!1535 !1536)
!3493 = (!1538 !1539)
!3494 = (!1543 !1544)
!3495 = (!1548 !1549)
!3496 = (!1457 !1458)
!3497 = (!1460 !1461)
!3498 = (!1463 !1464)
!3499 = (!1468 !1469)
!3500 = span !34 120 124
!3501 = span !34 126 132
!3502 = span !34 106 474
!3503 = fn_name_span !34 109 119
!3504 = (!3502 !3503)
!3505 = span !34 187 428
!3506 = span !34 193 197
!3507 = span !34 200 424
!3508 = fn_call_path_span !34 200 424
!3509 = (!3507 !3508)
!3510 = span !34 234 239
!3511 = span !34 283 287
!3512 = span !34 283 306
!3513 = fn_call_path_span !34 288 298
!3514 = (!3512 !3513)
!3515 = span !34 270 307
!3516 = span !34 345 350
!3517 = span !34 362 368
!3518 = span !34 345 369
!3519 = fn_call_path_span !34 351 361
!3520 = (!3518 !3519)
!3521 = span !34 332 370
!3522 = span !34 395 401
!3523 = span !34 174 429
!3524 = span !34 450 456
!3525 = span !7 36864 36868
!3526 = span !7 36870 36876
!3527 = span !7 36850 37062
!3528 = fn_name_span !7 36853 36863
!3529 = (!3527 !3528)
!3530 = span !7 36924 36925
!3531 = span !7 36919 36944
!3532 = fn_call_path_span !7 36926 36936
!3533 = (!3531 !3532)
!3534 = span !7 36906 36945
!3535 = span !7 36972 36973
!3536 = span !7 36985 36991
!3537 = span !7 36967 36992
!3538 = fn_call_path_span !7 36974 36984
!3539 = (!3537 !3538)
!3540 = span !7 36954 36993
!3541 = span !7 37020 37021
!3542 = span !7 37033 37039
!3543 = span !7 37015 37040
!3544 = fn_call_path_span !7 37022 37032
!3545 = (!3543 !3544)
!3546 = span !7 37002 37041
!3547 = span !7 37050 37056
!3548 = span !158 24419 24423
!3549 = span !158 24425 24430
!3550 = span !158 24413 24494
!3551 = fn_name_span !158 24416 24418
!3552 = (!3550 !3551)
!3553 = span !158 24456 24470
!3554 = fn_call_path_span !158 24461 24463
!3555 = (!3553 !3554)
!3556 = span !158 24456 24488
!3557 = span !158 24474 24488
!3558 = fn_call_path_span !158 24479 24481
!3559 = (!3557 !3558)
!3560 = span !158 4176 4180
!3561 = span !158 4182 4187
!3562 = span !158 4164 4237
!3563 = fn_name_span !158 4167 4175
!3564 = (!3562 !3563)
!3565 = span !0 31797 31802
!3566 = span !0 31776 32085
!3567 = fn_name_span !0 31779 31796
!3568 = (!3566 !3567)
!3569 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/order_type.sw"
!3570 = span !3569 42 91
!3571 = span !0 31859 31893
!3572 = fn_call_path_span !0 31876 31878
!3573 = (!3571 !3572)
!3574 = span !2444 273 288
!3575 = span !2444 381 395
!3576 = span !0 31917 31964
!3577 = fn_call_path_span !0 31917 31937
!3578 = (!3576 !3577)
!3579 = span !0 31904 31965
!3580 = span !0 31974 31980
!3581 = span !0 32016 32022
!3582 = span !0 31983 32023
!3583 = fn_call_path_span !0 31989 32015
!3584 = (!3582 !3583)
!3585 = span !0 31974 32023
!3586 = fn_call_path_span !0 31981 31982
!3587 = (!3585 !3586)
!3588 = span !2444 455 475
!3589 = span !0 31974 32043
!3590 = fn_call_path_span !0 32024 32025
!3591 = (!3589 !3590)
!3592 = span !3569 138 142
!3593 = span !3569 144 149
!3594 = span !3569 132 326
!3595 = fn_name_span !3569 135 137
!3596 = (!3594 !3595)
!3597 = span !3569 181 194
!3598 = span !3569 175 320
!3599 = span !3569 209 231
!3600 = span !3569 209 240
!3601 = fn_call_path_span !3569 209 240
!3602 = (!3600 !3601)
!3603 = (!3600 !3601)
!3604 = span !3569 235 239
!3605 = span !3569 253 277
!3606 = span !3569 253 286
!3607 = fn_call_path_span !3569 253 286
!3608 = (!3606 !3607)
!3609 = (!3606 !3607)
!3610 = span !3569 281 285
!3611 = span !3569 304 309
!3612 = span !0 31218 31224
!3613 = span !0 31231 31236
!3614 = span !0 31194 31299
!3615 = fn_name_span !0 31197 31217
!3616 = (!3614 !3615)
!3617 = span !0 31292 31296
!3618 = span !0 31256 31297
!3619 = fn_call_path_span !0 31256 31276
!3620 = (!3618 !3619)
!3621 = span !0 31325 31331
!3622 = span !0 31338 31343
!3623 = span !0 31350 31363
!3624 = span !0 31301 31774
!3625 = fn_name_span !0 31304 31324
!3626 = (!3624 !3625)
!3627 = span !0 31420 31439
!3628 = span !0 31442 31456
!3629 = span !0 31420 31456
!3630 = fn_call_path_span !0 31440 31441
!3631 = (!3629 !3630)
!3632 = span !0 31459 31479
!3633 = span !0 31420 31479
!3634 = fn_call_path_span !0 31457 31458
!3635 = (!3633 !3634)
!3636 = span !0 31409 31415
!3637 = span !0 31409 31480
!3638 = fn_call_path_span !0 31416 31419
!3639 = (!3637 !3638)
!3640 = span !0 31401 31481
!3641 = span !0 31384 31482
!3642 = span !0 31504 31517
!3643 = span !0 31543 31546
!3644 = span !0 31548 31551
!3645 = span !0 31528 31552
!3646 = fn_call_path_span !0 31535 31542
!3647 = (!3645 !3646)
!3648 = span !0 31589 31592
!3649 = span !0 31594 31597
!3650 = span !0 31574 31598
!3651 = fn_call_path_span !0 31581 31588
!3652 = (!3650 !3651)
!3653 = span !0 31487 31605
!3654 = span !0 31616 31623
!3655 = span !0 31610 31772
!3656 = span !0 31634 31655
!3657 = fn_call_path_span !0 31634 31655
!3658 = (!3656 !3657)
!3659 = span !0 31637 31643
!3660 = span !0 31648 31654
!3661 = span !0 31664 31766
!3662 = fn_call_path_span !0 31664 31766
!3663 = (!3661 !3662)
!3664 = span !2468 902 942
!3665 = span !0 31688 31712
!3666 = fn_call_path_span !0 31688 31691
!3667 = (!3665 !3666)
!3668 = span !0 31726 31755
!3669 = fn_call_path_span !0 31726 31732
!3670 = (!3668 !3669)
!3671 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/math.sw"
!3672 = span !3671 3650 3654
!3673 = span !3671 3656 3664
!3674 = span !3671 3643 3785
!3675 = fn_name_span !3671 3646 3649
!3676 = (!3674 !3675)
!3677 = span !3671 3689 3779
!3678 = span !3671 3735 3747
!3679 = span !158 4390 4394
!3680 = span !158 4396 4401
!3681 = span !158 4378 4451
!3682 = fn_name_span !158 4381 4389
!3683 = (!3681 !3682)
!3684 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/math.sw"
!3685 = span !3684 112 116
!3686 = span !3684 118 124
!3687 = span !3684 131 137
!3688 = span !3684 97 342
!3689 = fn_name_span !3684 104 111
!3690 = (!3688 !3689)
!3691 = span !3684 208 217
!3692 = span !3684 209 210
!3693 = span !3684 197 218
!3694 = fn_call_path_span !3684 197 207
!3695 = (!3693 !3694)
!3696 = span !3684 232 243
!3697 = span !3684 233 234
!3698 = span !3684 221 244
!3699 = fn_call_path_span !3684 221 231
!3700 = (!3698 !3699)
!3701 = span !3684 197 244
!3702 = fn_call_path_span !3684 219 220
!3703 = (!3701 !3702)
!3704 = span !3684 180 245
!3705 = span !3684 271 281
!3706 = span !3684 295 306
!3707 = span !3684 296 297
!3708 = span !3684 284 307
!3709 = fn_call_path_span !3684 284 294
!3710 = (!3708 !3709)
!3711 = span !3684 271 307
!3712 = fn_call_path_span !3684 282 283
!3713 = (!3711 !3712)
!3714 = span !3684 254 308
!3715 = span !3684 317 327
!3716 = span !3684 317 336
!3717 = fn_call_path_span !3684 328 334
!3718 = (!3716 !3717)
!3719 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/u128.sw"
!3720 = span !3719 14782 14786
!3721 = span !3719 14788 14793
!3722 = span !3719 14770 15471
!3723 = fn_name_span !3719 14773 14781
!3724 = (!3722 !3723)
!3725 = span !3719 15017 15047
!3726 = fn_call_path_span !3719 15017 15045
!3727 = (!3725 !3726)
!3728 = span !3719 603 613
!3729 = span !3719 15083 15084
!3730 = span !3719 15069 15084
!3731 = fn_call_path_span !3719 15080 15082
!3732 = (!3730 !3731)
!3733 = span !3719 15069 15104
!3734 = span !3719 15103 15104
!3735 = span !3719 15088 15104
!3736 = fn_call_path_span !3719 15100 15102
!3737 = (!3735 !3736)
!3738 = span !3719 15062 15105
!3739 = fn_call_path_span !3719 15062 15068
!3740 = (!3738 !3739)
!3741 = span !3719 672 682
!3742 = span !3719 15143 15182
!3743 = fn_call_path_span !3719 15154 15169
!3744 = (!3742 !3743)
!3745 = span !3719 15126 15183
!3746 = span !3719 15209 15210
!3747 = span !3719 15195 15210
!3748 = fn_call_path_span !3719 15206 15208
!3749 = (!3747 !3748)
!3750 = span !3719 15266 15278
!3751 = span !3719 15282 15306
!3752 = fn_call_path_span !3719 15293 15294
!3753 = (!3751 !3752)
!3754 = span !3719 15266 15306
!3755 = fn_call_path_span !3719 15279 15281
!3756 = (!3754 !3755)
!3757 = span !3719 15341 15342
!3758 = span !3719 15326 15342
!3759 = fn_call_path_span !3719 15338 15340
!3760 = (!3758 !3759)
!3761 = span !3719 15398 15410
!3762 = span !3719 15414 15438
!3763 = fn_call_path_span !3719 15425 15426
!3764 = (!3762 !3763)
!3765 = span !3719 15398 15438
!3766 = fn_call_path_span !3719 15411 15413
!3767 = (!3765 !3766)
!3768 = span !3719 15459 15465
!3769 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/flags.sw"
!3770 = span !3769 7434 7530
!3771 = fn_name_span !3769 7441 7469
!3772 = (!3770 !3771)
!3773 = span !3769 7487 7494
!3774 = fn_call_path_span !3769 7487 7492
!3775 = (!3773 !3774)
!3776 = span !3769 599 672
!3777 = span !3769 7487 7522
!3778 = fn_call_path_span !3769 7495 7496
!3779 = (!3777 !3778)
!3780 = span !3769 7527 7528
!3781 = span !3769 7486 7528
!3782 = fn_call_path_span !3769 7524 7526
!3783 = (!3781 !3782)
!3784 = span !158 18410 18414
!3785 = span !158 18416 18421
!3786 = span !158 18396 18471
!3787 = fn_name_span !158 18399 18409
!3788 = (!3786 !3787)
!3789 = span !2385 6538 6594
!3790 = fn_name_span !2385 6545 6550
!3791 = (!3789 !3790)
!3792 = span !2385 6566 6592
!3793 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/assert.sw"
!3794 = span !3793 935 944
!3795 = span !3793 921 1019
!3796 = fn_name_span !3793 928 934
!3797 = (!3795 !3796)
!3798 = span !3793 961 971
!3799 = fn_call_path_span !3793 961 962
!3800 = (!3798 !3799)
!3801 = span !1541 1038 1059
!3802 = span !3793 982 1010
!3803 = fn_call_path_span !3793 982 988
!3804 = (!3802 !3803)
!3805 = span !3719 5505 5509
!3806 = span !3719 5511 5516
!3807 = span !3719 5482 6036
!3808 = fn_name_span !3719 5489 5504
!3809 = (!3807 !3808)
!3810 = span !3719 5560 5587
!3811 = fn_call_path_span !3719 5560 5585
!3812 = (!3810 !3811)
!3813 = span !3719 5542 5588
!3814 = span !3719 5615 5675
!3815 = span !3719 5641 5642
!3816 = span !3719 5663 5664
!3817 = span !3719 5598 5676
!3818 = span !3719 5808 5814
!3819 = span !3719 5686 5980
!3820 = span !3719 5840 5862
!3821 = span !3719 5876 5892
!3822 = span !3719 5906 5931
!3823 = span !3719 5945 5969
!3824 = span !3719 6001 6012
!3825 = span !3719 5991 6013
!3826 = fn_call_path_span !3719 5991 6000
!3827 = (!3825 !3826)
!3828 = span !3719 6024 6030
!3829 = span !3769 2487 2827
!3830 = fn_name_span !3769 2494 2519
!3831 = (!3829 !3830)
!3832 = span !3769 2553 2560
!3833 = fn_call_path_span !3769 2553 2558
!3834 = (!3832 !3833)
!3835 = span !3769 2535 2561
!3836 = span !3769 2711 2722
!3837 = span !3769 279 352
!3838 = span !3769 2711 2748
!3839 = fn_call_path_span !3769 2723 2724
!3840 = (!3838 !3839)
!3841 = span !3769 2696 2749
!3842 = span !3769 2768 2776
!3843 = span !3769 2754 2808
!3844 = span !3769 2788 2801
!3845 = span !3769 2814 2825
!3846 = span !158 20008 20012
!3847 = span !158 20014 20019
!3848 = span !158 19995 20068
!3849 = fn_name_span !158 19998 20007
!3850 = (!3848 !3849)
!3851 = span !3769 1362 1371
!3852 = span !3769 1345 1443
!3853 = fn_name_span !3769 1352 1361
!3854 = (!3852 !3853)
!3855 = span !3769 1384 1441
!3856 = span !3769 1420 1434
!3857 = span !3719 2790 2800
!3858 = span !3719 2782 2920
!3859 = fn_name_span !3719 2785 2789
!3860 = (!3858 !3859)
!3861 = span !3719 2869 2870
!3862 = span !3719 2902 2903
!3863 = span !3719 2832 2914
!3864 = span !3719 15588 15592
!3865 = span !3719 15594 15601
!3866 = span !3719 15578 16488
!3867 = fn_name_span !3719 15581 15587
!3868 = (!3866 !3867)
!3869 = span !3719 15649 15655
!3870 = span !3719 15650 15651
!3871 = span !3719 15653 15654
!3872 = span !3719 15638 15656
!3873 = fn_call_path_span !3719 15638 15648
!3874 = (!3872 !3873)
!3875 = span !3719 15627 15657
!3876 = span !3719 15670 15700
!3877 = fn_call_path_span !3719 15670 15698
!3878 = (!3876 !3877)
!3879 = span !3719 15733 15737
!3880 = span !3719 15722 15737
!3881 = fn_call_path_span !3719 15730 15732
!3882 = (!3880 !3881)
!3883 = span !3719 15715 15738
!3884 = fn_call_path_span !3719 15715 15721
!3885 = (!3883 !3884)
!3886 = span !3719 15783 15787
!3887 = span !3719 15772 15787
!3888 = fn_call_path_span !3719 15780 15782
!3889 = (!3887 !3888)
!3890 = span !3719 15813 15817
!3891 = span !3719 15806 15817
!3892 = span !3719 15869 15870
!3893 = span !3719 15855 15870
!3894 = fn_call_path_span !3719 15866 15868
!3895 = (!3893 !3894)
!3896 = span !3719 15855 15892
!3897 = span !3719 15891 15892
!3898 = span !3719 15874 15892
!3899 = fn_call_path_span !3719 15888 15890
!3900 = (!3898 !3899)
!3901 = span !3719 15929 15955
!3902 = fn_call_path_span !3719 15940 15941
!3903 = (!3901 !3902)
!3904 = span !3719 15925 15956
!3905 = span !3719 15926 15927
!3906 = span !3719 15914 15957
!3907 = fn_call_path_span !3719 15914 15924
!3908 = (!3906 !3907)
!3909 = span !3719 15907 15957
!3910 = span !3719 15997 16008
!3911 = fn_call_path_span !3719 15997 16006
!3912 = (!3910 !3911)
!3913 = span !3719 15978 16009
!3914 = span !3719 16038 16049
!3915 = fn_call_path_span !3719 16038 16047
!3916 = (!3914 !3915)
!3917 = span !3719 16018 16050
!3918 = span !3719 16071 16074
!3919 = span !3719 16077 16078
!3920 = span !3719 16071 16078
!3921 = fn_call_path_span !3719 16075 16076
!3922 = (!3920 !3921)
!3923 = span !3719 16059 16079
!3924 = span !3719 16094 16098
!3925 = span !3719 16113 16121
!3926 = span !3719 16126 16127
!3927 = span !3719 16113 16127
!3928 = fn_call_path_span !3719 16122 16125
!3929 = (!3927 !3928)
!3930 = span !3719 16141 16150
!3931 = span !3719 16155 16156
!3932 = span !3719 16141 16156
!3933 = fn_call_path_span !3719 16151 16154
!3934 = (!3932 !3933)
!3935 = span !3719 16188 16197
!3936 = span !3719 16215 16216
!3937 = span !3719 16207 16216
!3938 = fn_call_path_span !3719 16212 16214
!3939 = (!3937 !3938)
!3940 = span !3719 16226 16227
!3941 = span !3719 16206 16227
!3942 = fn_call_path_span !3719 16224 16225
!3943 = (!3941 !3942)
!3944 = span !3719 16188 16227
!3945 = fn_call_path_span !3719 16204 16205
!3946 = (!3944 !3945)
!3947 = span !3719 16170 16227
!3948 = span !3719 16244 16253
!3949 = span !3719 16244 16264
!3950 = fn_call_path_span !3719 16254 16256
!3951 = (!3949 !3950)
!3952 = span !3719 16283 16292
!3953 = span !3719 16283 16303
!3954 = fn_call_path_span !3719 16293 16295
!3955 = (!3953 !3954)
!3956 = span !3719 16338 16346
!3957 = span !3719 16355 16356
!3958 = span !3719 16338 16356
!3959 = fn_call_path_span !3719 16353 16354
!3960 = (!3958 !3959)
!3961 = span !3719 16321 16356
!3962 = span !3719 16388 16389
!3963 = span !3719 16393 16394
!3964 = span !3719 16388 16394
!3965 = fn_call_path_span !3719 16390 16392
!3966 = (!3964 !3965)
!3967 = span !3719 16447 16448
!3968 = span !3719 16452 16453
!3969 = span !3719 16447 16453
!3970 = fn_call_path_span !3719 16449 16451
!3971 = (!3969 !3970)
!3972 = span !3719 16474 16482
!3973 = (!1166 !1167)
!3974 = (!1169 !1170)
!3975 = (!1172 !1173)
!3976 = span !3719 3143 3147
!3977 = span !3719 3149 3154
!3978 = span !3719 3137 3240
!3979 = fn_name_span !3719 3140 3142
!3980 = (!3978 !3979)
!3981 = span !3719 3180 3205
!3982 = fn_call_path_span !3719 3191 3193
!3983 = (!3981 !3982)
!3984 = span !3719 3180 3234
!3985 = span !3719 3209 3234
!3986 = fn_call_path_span !3719 3220 3222
!3987 = (!3985 !3986)
!3988 = span !158 8789 8793
!3989 = span !158 8795 8800
!3990 = span !158 8779 8850
!3991 = fn_name_span !158 8782 8788
!3992 = (!3990 !3991)
!3993 = span !3719 6443 6540
!3994 = fn_name_span !3719 6450 6453
!3995 = (!3993 !3994)
!3996 = span !3719 6474 6534
!3997 = span !3719 6500 6501
!3998 = span !3719 6522 6523
!3999 = span !3719 11288 11292
!4000 = span !3719 11294 11297
!4001 = span !3719 11281 12044
!4002 = fn_name_span !3719 11284 11287
!4003 = (!4001 !4002)
!4004 = span !3719 11425 11428
!4005 = span !3719 11418 11428
!4006 = fn_call_path_span !3719 11422 11424
!4007 = (!4005 !4006)
!4008 = span !3719 11450 11461
!4009 = fn_call_path_span !3719 11450 11459
!4010 = (!4008 !4009)
!4011 = span !3719 11443 11461
!4012 = span !3719 11597 11599
!4013 = span !3719 11590 11599
!4014 = fn_call_path_span !3719 11594 11596
!4015 = (!4013 !4014)
!4016 = span !3719 11654 11656
!4017 = span !3719 11648 11656
!4018 = fn_call_path_span !3719 11652 11653
!4019 = (!4017 !4018)
!4020 = span !3719 11633 11657
!4021 = fn_call_path_span !3719 11644 11646
!4022 = (!4020 !4021)
!4023 = span !3719 11632 11661
!4024 = span !3719 11659 11660
!4025 = span !3719 11621 11662
!4026 = fn_call_path_span !3719 11621 11631
!4027 = (!4025 !4026)
!4028 = span !3719 11614 11662
!4029 = span !3719 11890 11892
!4030 = span !3719 11890 11898
!4031 = fn_call_path_span !3719 11893 11894
!4032 = (!4030 !4031)
!4033 = span !3719 11875 11899
!4034 = fn_call_path_span !3719 11886 11888
!4035 = (!4033 !4034)
!4036 = span !3719 11850 11900
!4037 = span !3719 11923 11940
!4038 = fn_call_path_span !3719 11934 11936
!4039 = (!4037 !4038)
!4040 = span !3719 11944 11962
!4041 = span !3719 11922 11962
!4042 = fn_call_path_span !3719 11942 11943
!4043 = (!4041 !4042)
!4044 = span !3719 11910 11963
!4045 = span !3719 11984 12001
!4046 = fn_call_path_span !3719 11995 11997
!4047 = (!4045 !4046)
!4048 = span !3719 11972 12002
!4049 = span !3719 12024 12029
!4050 = span !3719 12031 12036
!4051 = span !3719 12023 12037
!4052 = span !3719 12012 12038
!4053 = fn_call_path_span !3719 12012 12022
!4054 = (!4052 !4053)
!4055 = span !158 26634 26638
!4056 = span !158 26640 26645
!4057 = span !158 26627 26694
!4058 = fn_name_span !158 26630 26633
!4059 = (!4057 !4058)
!4060 = span !3719 12057 12061
!4061 = span !3719 12063 12066
!4062 = span !3719 12050 12814
!4063 = fn_name_span !3719 12053 12056
!4064 = (!4062 !4063)
!4065 = span !3719 12195 12198
!4066 = span !3719 12188 12198
!4067 = fn_call_path_span !3719 12192 12194
!4068 = (!4066 !4067)
!4069 = span !3719 12221 12232
!4070 = fn_call_path_span !3719 12221 12230
!4071 = (!4069 !4070)
!4072 = span !3719 12214 12232
!4073 = span !3719 12369 12371
!4074 = span !3719 12362 12371
!4075 = fn_call_path_span !3719 12366 12368
!4076 = (!4074 !4075)
!4077 = span !3719 12430 12432
!4078 = span !3719 12424 12432
!4079 = fn_call_path_span !3719 12428 12429
!4080 = (!4078 !4079)
!4081 = span !3719 12409 12433
!4082 = fn_call_path_span !3719 12420 12422
!4083 = (!4081 !4082)
!4084 = span !3719 12405 12434
!4085 = span !3719 12406 12407
!4086 = span !3719 12394 12435
!4087 = fn_call_path_span !3719 12394 12404
!4088 = (!4086 !4087)
!4089 = span !3719 12387 12435
!4090 = span !3719 12661 12663
!4091 = span !3719 12661 12669
!4092 = fn_call_path_span !3719 12664 12665
!4093 = (!4091 !4092)
!4094 = span !3719 12646 12670
!4095 = fn_call_path_span !3719 12657 12659
!4096 = (!4094 !4095)
!4097 = span !3719 12622 12671
!4098 = span !3719 12693 12710
!4099 = fn_call_path_span !3719 12704 12706
!4100 = (!4098 !4099)
!4101 = span !3719 12681 12711
!4102 = span !3719 12733 12750
!4103 = fn_call_path_span !3719 12744 12746
!4104 = (!4102 !4103)
!4105 = span !3719 12754 12771
!4106 = span !3719 12732 12771
!4107 = fn_call_path_span !3719 12752 12753
!4108 = (!4106 !4107)
!4109 = span !3719 12720 12772
!4110 = span !3719 12794 12799
!4111 = span !3719 12801 12806
!4112 = span !3719 12793 12807
!4113 = span !3719 12782 12808
!4114 = fn_call_path_span !3719 12782 12792
!4115 = (!4113 !4114)
!4116 = (!1994 !1995)
!4117 = (!1997 !1998)
!4118 = (!2001 !2002)
!4119 = span !3719 3285 3289
!4120 = span !3719 3291 3296
!4121 = span !3719 3279 3409
!4122 = fn_name_span !3719 3282 3284
!4123 = (!4121 !4122)
!4124 = span !3719 3322 3346
!4125 = fn_call_path_span !3719 3333 3334
!4126 = (!4124 !4125)
!4127 = span !3719 3322 3403
!4128 = span !3719 3350 3375
!4129 = fn_call_path_span !3719 3361 3363
!4130 = (!4128 !4129)
!4131 = span !3719 3350 3403
!4132 = span !3719 3379 3403
!4133 = fn_call_path_span !3719 3390 3391
!4134 = (!4132 !4133)
!4135 = span !3719 14049 14053
!4136 = span !3719 14055 14060
!4137 = span !3719 14037 14665
!4138 = fn_name_span !3719 14040 14048
!4139 = (!4137 !4138)
!4140 = span !3719 14148 14175
!4141 = fn_call_path_span !3719 14148 14173
!4142 = (!4140 !4141)
!4143 = span !3719 14260 14272
!4144 = fn_call_path_span !3719 14265 14266
!4145 = (!4143 !4144)
!4146 = span !3719 14258 14273
!4147 = fn_call_path_span !3719 14258 14259
!4148 = (!4146 !4147)
!4149 = span !3719 14251 14274
!4150 = fn_call_path_span !3719 14251 14257
!4151 = (!4149 !4150)
!4152 = span !3719 14311 14335
!4153 = fn_call_path_span !3719 14322 14323
!4154 = (!4152 !4153)
!4155 = span !3719 14295 14336
!4156 = span !3719 14345 14363
!4157 = span !3719 14361 14362
!4158 = span !3719 14440 14464
!4159 = fn_call_path_span !3719 14451 14452
!4160 = (!4158 !4159)
!4161 = span !3719 14487 14497
!4162 = fn_call_path_span !3719 14487 14495
!4163 = (!4161 !4162)
!4164 = span !3719 14501 14525
!4165 = fn_call_path_span !3719 14513 14514
!4166 = (!4164 !4165)
!4167 = span !3719 14528 14529
!4168 = span !3719 14501 14529
!4169 = fn_call_path_span !3719 14526 14527
!4170 = (!4168 !4169)
!4171 = span !3719 14487 14530
!4172 = fn_call_path_span !3719 14498 14499
!4173 = (!4171 !4172)
!4174 = span !3719 14479 14530
!4175 = span !3719 14544 14549
!4176 = span !3719 14553 14554
!4177 = span !3719 14544 14554
!4178 = fn_call_path_span !3719 14550 14552
!4179 = (!4177 !4178)
!4180 = span !3719 14593 14617
!4181 = fn_call_path_span !3719 14604 14605
!4182 = (!4180 !4181)
!4183 = span !3719 14585 14617
!4184 = span !3719 14645 14650
!4185 = span !3719 14652 14657
!4186 = span !3719 14638 14659
!4187 = span !3769 6913 7004
!4188 = fn_name_span !3769 6920 6945
!4189 = (!4187 !4188)
!4190 = span !3769 6963 6970
!4191 = fn_call_path_span !3769 6963 6968
!4192 = (!4190 !4191)
!4193 = span !3769 6963 6996
!4194 = fn_call_path_span !3769 6971 6972
!4195 = (!4193 !4194)
!4196 = span !3769 7001 7002
!4197 = span !3769 6962 7002
!4198 = fn_call_path_span !3769 6998 7000
!4199 = (!4197 !4198)
!4200 = span !3719 3421 3425
!4201 = span !3719 3427 3432
!4202 = span !3719 3415 3545
!4203 = fn_name_span !3719 3418 3420
!4204 = (!4202 !4203)
!4205 = span !3719 3458 3482
!4206 = fn_call_path_span !3719 3469 3470
!4207 = (!4205 !4206)
!4208 = span !3719 3458 3539
!4209 = span !3719 3486 3511
!4210 = fn_call_path_span !3719 3497 3499
!4211 = (!4209 !4210)
!4212 = span !3719 3486 3539
!4213 = span !3719 3515 3539
!4214 = fn_call_path_span !3719 3526 3527
!4215 = (!4213 !4214)
!4216 = span !187 2462 2519
!4217 = fn_name_span !187 2469 2472
!4218 = (!4216 !4217)
!4219 = span !187 2493 2513
!4220 = span !3719 7266 7270
!4221 = span !3719 7252 7425
!4222 = fn_name_span !3719 7259 7265
!4223 = (!4221 !4222)
!4224 = span !3719 7308 7419
!4225 = span !3719 7314 7324
!4226 = span !3719 7339 7340
!4227 = span !3719 7339 7359
!4228 = fn_call_path_span !3719 7339 7359
!4229 = (!4227 !4228)
!4230 = span !3719 2561 2743
!4231 = (!1548 !1549)
!4232 = (!1457 !1458)
!4233 = (!1460 !1461)
!4234 = (!1463 !1464)
!4235 = (!1468 !1469)
!4236 = span !34 103 342
!4237 = (!4236 !3143)
!4238 = span !34 184 296
!4239 = span !34 197 292
!4240 = fn_call_path_span !34 197 292
!4241 = (!4239 !4240)
!4242 = (!2131 !2132)
!4243 = span !34 171 297
!4244 = span !34 318 324
!4245 = span !2444 1812 1816
!4246 = span !2444 1818 1824
!4247 = span !2444 1778 1934
!4248 = fn_name_span !2444 1785 1811
!4249 = (!4247 !4248)
!4250 = span !2444 481 508
!4251 = span !2444 514 541
!4252 = span !2444 1857 1910
!4253 = fn_call_path_span !2444 1857 1860
!4254 = (!4252 !4253)
!4255 = span !2444 1848 1910
!4256 = fn_call_path_span !2444 1855 1856
!4257 = (!4255 !4256)
!4258 = span !3684 73 79
!4259 = span !2444 1848 1928
!4260 = fn_call_path_span !2444 1911 1912
!4261 = (!4259 !4260)
!4262 = span !3684 501 502
!4263 = span !3684 509 510
!4264 = span !3684 490 557
!4265 = fn_name_span !3684 497 500
!4266 = (!4264 !4265)
!4267 = span !3684 533 538
!4268 = fn_call_path_span !3684 535 536
!4269 = (!4267 !4268)
!4270 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/asset_type.sw"
!4271 = span !4270 383 387
!4272 = span !4270 376 513
!4273 = fn_name_span !4270 379 382
!4274 = (!4272 !4273)
!4275 = span !4270 407 507
!4276 = span !4270 413 417
!4277 = span !4270 432 458
!4278 = fn_call_path_span !4270 432 458
!4279 = (!4277 !4278)
!4280 = span !4270 42 93
!4281 = span !4270 471 497
!4282 = fn_call_path_span !4270 471 497
!4283 = (!4281 !4282)
!4284 = span !0 38037 38041
!4285 = span !0 38053 38061
!4286 = span !0 38021 39540
!4287 = fn_name_span !0 38024 38036
!4288 = (!4286 !193 !4287)
!4289 = span !0 38113 38119
!4290 = span !0 38092 38149
!4291 = fn_call_path_span !0 38133 38139
!4292 = (!4290 !4291)
!4293 = span !0 38075 38202
!4294 = fn_call_path_span !0 38075 38082
!4295 = (!4293 !4294)
!4296 = span !0 38216 38229
!4297 = span !0 38208 38246
!4298 = fn_call_path_span !0 38230 38236
!4299 = (!4297 !4298)
!4300 = span !0 38273 38291
!4301 = span !0 38265 38301
!4302 = fn_call_path_span !0 38292 38295
!4303 = (!4301 !4302)
!4304 = span !0 38265 38315
!4305 = fn_call_path_span !0 38302 38305
!4306 = (!4304 !4305)
!4307 = span !0 38265 38322
!4308 = fn_call_path_span !0 38316 38320
!4309 = (!4307 !4308)
!4310 = span !0 38253 38323
!4311 = span !0 38354 38365
!4312 = span !0 38346 38375
!4313 = fn_call_path_span !0 38366 38369
!4314 = (!4312 !4313)
!4315 = span !0 38346 38381
!4316 = fn_call_path_span !0 38376 38379
!4317 = (!4315 !4316)
!4318 = span !0 38328 38382
!4319 = span !0 38426 38444
!4320 = span !0 38405 38467
!4321 = fn_call_path_span !0 38458 38461
!4322 = (!4320 !4321)
!4323 = span !0 38405 38497
!4324 = fn_call_path_span !0 38481 38487
!4325 = (!4323 !4324)
!4326 = span !0 38388 38550
!4327 = fn_call_path_span !0 38388 38395
!4328 = (!4326 !4327)
!4329 = span !0 38559 38570
!4330 = span !0 38574 38575
!4331 = span !0 38559 38575
!4332 = fn_call_path_span !0 38571 38573
!4333 = (!4331 !4332)
!4334 = span !0 38711 38722
!4335 = span !0 38686 38749
!4336 = fn_call_path_span !0 38740 38743
!4337 = (!4335 !4336)
!4338 = span !0 38686 38772
!4339 = fn_call_path_span !0 38767 38770
!4340 = (!4338 !4339)
!4341 = span !0 38686 38798
!4342 = fn_call_path_span !0 38790 38796
!4343 = (!4341 !4342)
!4344 = span !0 38686 38810
!4345 = fn_call_path_span !0 38799 38801
!4346 = (!4344 !4345)
!4347 = span !0 38665 38871
!4348 = fn_call_path_span !0 38665 38672
!4349 = (!4347 !4348)
!4350 = span !0 39003 39014
!4351 = span !0 38995 39024
!4352 = fn_call_path_span !0 39015 39018
!4353 = (!4351 !4352)
!4354 = span !0 38995 39031
!4355 = fn_call_path_span !0 39025 39029
!4356 = (!4354 !4355)
!4357 = span !0 38995 39040
!4358 = fn_call_path_span !0 39032 39038
!4359 = (!4357 !4358)
!4360 = span !0 38995 39047
!4361 = fn_call_path_span !0 39041 39045
!4362 = (!4360 !4361)
!4363 = span !0 38976 39048
!4364 = span !0 39205 39216
!4365 = span !0 39180 39243
!4366 = fn_call_path_span !0 39234 39237
!4367 = (!4365 !4366)
!4368 = span !0 39273 39278
!4369 = span !0 39180 39279
!4370 = fn_call_path_span !0 39261 39272
!4371 = (!4369 !4370)
!4372 = span !0 39180 39291
!4373 = fn_call_path_span !0 39280 39282
!4374 = (!4372 !4373)
!4375 = span !0 39159 39352
!4376 = fn_call_path_span !0 39159 39166
!4377 = (!4375 !4376)
!4378 = span !0 39449 39467
!4379 = span !0 39428 39490
!4380 = fn_call_path_span !0 39481 39484
!4381 = (!4379 !4380)
!4382 = span !0 39511 39523
!4383 = span !0 39525 39530
!4384 = span !0 39428 39531
!4385 = fn_call_path_span !0 39504 39510
!4386 = (!4384 !4385)
!4387 = span !2533 3106 3110
!4388 = span !2533 3112 3115
!4389 = span !2533 3092 3243
!4390 = fn_name_span !2533 3099 3105
!4391 = (!4389 !1495 !4390)
!4392 = span !2533 3192 3207
!4393 = fn_call_path_span !2533 3197 3205
!4394 = (!4392 !4393)
!4395 = span !2533 3186 3208
!4396 = span !2533 3179 3209
!4397 = fn_call_path_span !2533 3179 3185
!4398 = (!4396 !4397)
!4399 = span !2533 3169 3210
!4400 = span !2533 3230 3233
!4401 = span !2533 3235 3236
!4402 = span !2533 3219 3237
!4403 = fn_call_path_span !2533 3219 3224
!4404 = (!4402 !4403)
!4405 = span !1258 4301 4305
!4406 = span !1258 4313 4319
!4407 = span !1258 4285 4683
!4408 = fn_name_span !1258 4292 4297
!4409 = (!4407 !1495 !4408)
!4410 = span !1258 4363 4364
!4411 = span !1258 4343 4364
!4412 = fn_call_path_span !1258 4360 4362
!4413 = (!4411 !4412)
!4414 = span !1258 4382 4386
!4415 = span !1258 4375 4386
!4416 = span !1258 4522 4556
!4417 = fn_call_path_span !1258 4522 4537
!4418 = (!4416 !4417)
!4419 = span !1258 4469 4557
!4420 = span !1258 4652 4663
!4421 = span !1258 4665 4680
!4422 = span !1258 4638 4681
!4423 = (!4389 !1495 !4390)
!4424 = (!4392 !4393)
!4425 = (!4396 !4397)
!4426 = (!4402 !4403)
!4427 = (!4407 !1495 !4408)
!4428 = (!4411 !4412)
!4429 = (!4416 !4417)
!4430 = (!3204 !1196 !3205)
!4431 = (!3207 !3208)
!4432 = (!3210 !3211)
!4433 = (!3213 !3214)
!4434 = (!3216 !3217)
!4435 = (!2060 !2061)
!4436 = (!2065 !2066)
!4437 = (!2071 !2072)
!4438 = (!1261 !1196 !1262)
!4439 = (!1265 !1266)
!4440 = (!1270 !1271)
!4441 = (!1276 !1277)
!4442 = (!1279 !1280)
!4443 = (!1289 !1290)
!4444 = (!1292 !1293)
!4445 = (!1297 !1298)
!4446 = (!1302 !1303)
!4447 = (!1306 !1307)
!4448 = (!1310 !1311)
!4449 = (!1314 !1315)
!4450 = (!1319 !1320)
!4451 = (!1326 !1327)
!4452 = (!1331 !1332)
!4453 = (!1335 !1336)
!4454 = (!1339 !1340)
!4455 = (!1343 !1344)
!4456 = (!1347 !1348)
!4457 = (!1352 !1353)
!4458 = (!1358 !1359)
!4459 = (!1362 !1363)
!4460 = (!1365 !1366)
!4461 = (!1368 !1369)
!4462 = (!1372 !1373)
!4463 = (!1447 !1448)
!4464 = (!1452 !1453)
!4465 = (!2536 !2537)
!4466 = (!2539 !2540)
!4467 = (!2543 !2544)
!4468 = (!2550 !2551)
!4469 = (!2882 !2883)
!4470 = (!1224 !1225)
!4471 = (!2536 !2537)
!4472 = (!2539 !2540)
!4473 = (!2543 !2544)
!4474 = (!2550 !2551)
!4475 = (!2882 !2883)
!4476 = (!1224 !1225)
!4477 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/storage/storage_vec.sw"
!4478 = span !4477 13030 13034
!4479 = span !4477 13019 13103
!4480 = fn_name_span !4477 13026 13029
!4481 = (!4479 !1196 !4480)
!4482 = span !4477 13065 13080
!4483 = fn_call_path_span !4477 13070 13078
!4484 = (!4482 !4483)
!4485 = span !4477 13082 13083
!4486 = span !4477 13053 13084
!4487 = fn_call_path_span !4477 13053 13057
!4488 = (!4486 !4487)
!4489 = span !4477 13095 13096
!4490 = span !4477 13053 13097
!4491 = fn_call_path_span !4477 13085 13094
!4492 = (!4490 !4491)
!4493 = (!1231 !1232)
!4494 = (!1236 !1237)
!4495 = (!1241 !1242)
!4496 = (!2882 !2883)
!4497 = (!2536 !2537)
!4498 = (!2539 !2540)
!4499 = (!2543 !2544)
!4500 = (!2550 !2551)
!4501 = (!2882 !2883)
!4502 = (!1224 !1225)
!4503 = (!4389 !1495 !4390)
!4504 = (!4392 !4393)
!4505 = (!4396 !4397)
!4506 = (!4402 !4403)
!4507 = (!4407 !1495 !4408)
!4508 = (!4411 !4412)
!4509 = (!4416 !4417)
!4510 = (!2060 !2061)
!4511 = (!2065 !2066)
!4512 = (!2071 !2072)
!4513 = span !4477 2154 2158
!4514 = span !4477 2143 2619
!4515 = fn_name_span !4477 2150 2153
!4516 = (!4514 !193 !4515)
!4517 = span !4477 2205 2220
!4518 = fn_call_path_span !4477 2210 2218
!4519 = (!4517 !4518)
!4520 = span !4477 2222 2223
!4521 = span !4477 2193 2224
!4522 = fn_call_path_span !4477 2193 2197
!4523 = (!4521 !4522)
!4524 = span !4477 2235 2236
!4525 = span !4477 2193 2237
!4526 = fn_call_path_span !4477 2225 2234
!4527 = (!4525 !4526)
!4528 = span !4477 2183 2238
!4529 = span !4477 2319 2322
!4530 = span !4477 2326 2327
!4531 = span !4477 2319 2327
!4532 = fn_call_path_span !4477 2323 2325
!4533 = (!4531 !4532)
!4534 = span !4477 2342 2353
!4535 = span !4477 2455 2470
!4536 = fn_call_path_span !4477 2460 2468
!4537 = (!4535 !4536)
!4538 = span !4477 2475 2478
!4539 = span !4477 2481 2482
!4540 = span !4477 2475 2482
!4541 = fn_call_path_span !4477 2479 2480
!4542 = (!4540 !4541)
!4543 = span !4477 2472 2473
!4544 = span !4477 2449 2483
!4545 = fn_call_path_span !4477 2449 2454
!4546 = (!4544 !4545)
!4547 = span !4477 2511 2526
!4548 = fn_call_path_span !4477 2516 2524
!4549 = (!4547 !4548)
!4550 = span !4477 2504 2527
!4551 = fn_call_path_span !4477 2504 2510
!4552 = (!4550 !4551)
!4553 = span !4477 2494 2528
!4554 = span !4477 2573 2576
!4555 = span !4477 2579 2580
!4556 = span !4477 2573 2580
!4557 = fn_call_path_span !4477 2577 2578
!4558 = (!4556 !4557)
!4559 = span !4477 2550 2581
!4560 = fn_call_path_span !4477 2550 2567
!4561 = (!4559 !4560)
!4562 = span !4477 2537 2582
!4563 = span !4477 2601 2604
!4564 = span !4477 2606 2612
!4565 = span !4477 2591 2613
!4566 = fn_call_path_span !4477 2591 2595
!4567 = (!4565 !4566)
!4568 = (!2173 !193 !2174)
!4569 = (!2177 !2178)
!4570 = (!2181 !2182)
!4571 = (!2187 !2188)
!4572 = (!2190 !2191)
!4573 = (!2201 !2202)
!4574 = (!2204 !2205)
!4575 = (!2214 !2215)
!4576 = (!2555 !2556 !13)
!4577 = (!2558 !2559)
!4578 = (!2563 !2564)
!4579 = (!2567 !2568)
!4580 = span !4477 28539 28545
!4581 = span !4477 28515 28722
!4582 = fn_name_span !4477 28518 28535
!4583 = (!4581 !4582)
!4584 = span !4477 28565 28602
!4585 = span !4477 28628 28641
!4586 = span !4477 28645 28646
!4587 = span !4477 28649 28650
!4588 = span !4477 28645 28650
!4589 = fn_call_path_span !4477 28647 28648
!4590 = (!4588 !4589)
!4591 = span !4477 28628 28651
!4592 = fn_call_path_span !4477 28642 28643
!4593 = (!4591 !4592)
!4594 = span !4477 28657 28670
!4595 = span !4477 28674 28675
!4596 = span !4477 28678 28679
!4597 = span !4477 28674 28679
!4598 = fn_call_path_span !4477 28676 28677
!4599 = (!4597 !4598)
!4600 = span !4477 28657 28680
!4601 = fn_call_path_span !4477 28671 28672
!4602 = (!4600 !4601)
!4603 = span !4477 28684 28685
!4604 = span !4477 28656 28685
!4605 = fn_call_path_span !4477 28682 28683
!4606 = (!4604 !4605)
!4607 = span !4477 28627 28686
!4608 = fn_call_path_span !4477 28653 28654
!4609 = (!4607 !4608)
!4610 = span !4477 28607 28687
!4611 = span !4477 28702 28715
!4612 = span !4477 28693 28715
!4613 = fn_call_path_span !4477 28700 28701
!4614 = (!4612 !4613)
!4615 = span !4477 28719 28720
!4616 = span !4477 28692 28720
!4617 = fn_call_path_span !4477 28717 28718
!4618 = (!4616 !4617)
!4619 = (!1261 !1196 !1262)
!4620 = (!1265 !1266)
!4621 = (!1270 !1271)
!4622 = (!1276 !1277)
!4623 = (!1279 !1280)
!4624 = (!1289 !1290)
!4625 = (!1292 !1293)
!4626 = (!1297 !1298)
!4627 = (!1302 !1303)
!4628 = (!1306 !1307)
!4629 = (!1310 !1311)
!4630 = (!1314 !1315)
!4631 = (!1319 !1320)
!4632 = (!1326 !1327)
!4633 = (!1331 !1332)
!4634 = (!1335 !1336)
!4635 = (!1339 !1340)
!4636 = (!1343 !1344)
!4637 = (!1347 !1348)
!4638 = (!1352 !1353)
!4639 = (!1358 !1359)
!4640 = (!1362 !1363)
!4641 = (!1365 !1366)
!4642 = (!1368 !1369)
!4643 = (!1372 !1373)
!4644 = (!1044 !1045)
!4645 = (!3204 !1196 !3205)
!4646 = (!3207 !3208)
!4647 = (!3210 !3211)
!4648 = (!3213 !3214)
!4649 = (!3216 !3217)
!4650 = (!1447 !1448)
!4651 = (!1452 !1453)
!4652 = (!2060 !2061)
!4653 = (!2065 !2066)
!4654 = (!2071 !2072)
!4655 = span !4477 17404 17408
!4656 = span !4477 17392 17757
!4657 = fn_name_span !4477 17399 17403
!4658 = (!4656 !1196 !4657)
!4659 = span !4477 17462 17477
!4660 = fn_call_path_span !4477 17467 17475
!4661 = (!4659 !4660)
!4662 = span !4477 17455 17478
!4663 = fn_call_path_span !4477 17455 17461
!4664 = (!4662 !4663)
!4665 = span !4477 17445 17479
!4666 = span !4477 17506 17521
!4667 = fn_call_path_span !4477 17511 17519
!4668 = (!4666 !4667)
!4669 = span !4477 17523 17524
!4670 = span !4477 17494 17525
!4671 = fn_call_path_span !4477 17494 17498
!4672 = (!4670 !4671)
!4673 = span !4477 17536 17537
!4674 = span !4477 17494 17538
!4675 = fn_call_path_span !4477 17526 17535
!4676 = (!4674 !4675)
!4677 = span !4477 17488 17751
!4678 = span !4477 17553 17554
!4679 = span !4477 17553 17563
!4680 = fn_call_path_span !4477 17553 17563
!4681 = (!4679 !4680)
!4682 = span !4477 17576 17579
!4683 = span !4477 17637 17640
!4684 = span !4477 17643 17644
!4685 = span !4477 17637 17644
!4686 = fn_call_path_span !4477 17641 17642
!4687 = (!4685 !4686)
!4688 = span !4477 17614 17645
!4689 = fn_call_path_span !4477 17614 17631
!4690 = (!4688 !4689)
!4691 = span !4477 17601 17646
!4692 = span !4477 17689 17692
!4693 = span !4477 17694 17700
!4694 = span !4477 17710 17713
!4695 = span !4477 17716 17717
!4696 = span !4477 17710 17717
!4697 = fn_call_path_span !4477 17714 17715
!4698 = (!4696 !4697)
!4699 = span !4477 17719 17722
!4700 = span !4477 17709 17723
!4701 = span !4477 17702 17724
!4702 = fn_call_path_span !4477 17702 17708
!4703 = (!4701 !4702)
!4704 = span !4477 17668 17725
!4705 = fn_call_path_span !4477 17668 17688
!4706 = (!4704 !4705)
!4707 = (!1224 !1225)
!4708 = (!2555 !2556 !13)
!4709 = (!2558 !2559)
!4710 = (!2563 !2564)
!4711 = (!2567 !2568)
!4712 = (!2603 !2604 !13)
!4713 = (!2607 !2608)
!4714 = (!2611 !2612)
!4715 = span !2553 2378 2382
!4716 = span !2553 2392 2397
!4717 = span !2553 2370 2614
!4718 = fn_name_span !2553 2373 2377
!4719 = (!4717 !4718)
!4720 = span !2553 2439 2440
!4721 = span !2553 2427 2441
!4722 = fn_call_path_span !2553 2427 2438
!4723 = (!4721 !4722)
!4724 = span !2553 2417 2442
!4725 = span !2553 2481 2484
!4726 = span !2553 2472 2535
!4727 = span !2553 2511 2524
!4728 = span !2553 2598 2601
!4729 = span !2553 2603 2604
!4730 = span !2553 2570 2605
!4731 = fn_call_path_span !2553 2570 2591
!4732 = (!4730 !4731)
!4733 = span !2553 2558 2606
!4734 = fn_call_path_span !2553 2558 2569
!4735 = (!4733 !4734)
!4736 = span !2553 2546 2607
!4737 = fn_call_path_span !2553 2552 2557
!4738 = (!4736 !4737)
!4739 = span !4477 7653 7657
!4740 = span !4477 7659 7664
!4741 = span !4477 7634 8394
!4742 = fn_name_span !4477 7641 7652
!4743 = (!4741 !193 !4742)
!4744 = span !4477 7708 7723
!4745 = fn_call_path_span !4477 7713 7721
!4746 = (!4744 !4745)
!4747 = span !4477 7725 7726
!4748 = span !4477 7696 7727
!4749 = fn_call_path_span !4477 7696 7700
!4750 = (!4748 !4749)
!4751 = span !4477 7738 7739
!4752 = span !4477 7696 7740
!4753 = fn_call_path_span !4477 7728 7737
!4754 = (!4752 !4753)
!4755 = span !4477 7686 7741
!4756 = span !4477 7844 7847
!4757 = span !4477 7836 7847
!4758 = fn_call_path_span !4477 7842 7843
!4759 = (!4757 !4758)
!4760 = span !4477 7829 7848
!4761 = fn_call_path_span !4477 7829 7835
!4762 = (!4760 !4761)
!4763 = span !4477 7876 7891
!4764 = fn_call_path_span !4477 7881 7889
!4765 = (!4763 !4764)
!4766 = span !4477 7869 7892
!4767 = fn_call_path_span !4477 7869 7875
!4768 = (!4766 !4767)
!4769 = span !4477 7859 7893
!4770 = span !4477 7993 8022
!4771 = fn_call_path_span !4477 7993 8010
!4772 = (!4770 !4771)
!4773 = span !4477 7972 8023
!4774 = span !4477 8070 8073
!4775 = span !4477 8075 8089
!4776 = span !4477 8060 8090
!4777 = fn_call_path_span !4477 8060 8064
!4778 = (!4776 !4777)
!4779 = span !4477 8060 8099
!4780 = fn_call_path_span !4477 8091 8097
!4781 = (!4779 !4780)
!4782 = span !4477 8032 8100
!4783 = span !4477 8151 8154
!4784 = span !4477 8157 8158
!4785 = span !4477 8151 8158
!4786 = fn_call_path_span !4477 8155 8156
!4787 = (!4785 !4786)
!4788 = span !4477 8128 8159
!4789 = fn_call_path_span !4477 8128 8145
!4790 = (!4788 !4789)
!4791 = span !4477 8110 8160
!4792 = span !4477 8198 8201
!4793 = span !4477 8203 8214
!4794 = span !4477 8188 8215
!4795 = fn_call_path_span !4477 8188 8192
!4796 = (!4794 !4795)
!4797 = span !4477 8188 8224
!4798 = fn_call_path_span !4477 8216 8222
!4799 = (!4797 !4798)
!4800 = span !4477 8169 8225
!4801 = span !4477 8246 8249
!4802 = span !4477 8251 8265
!4803 = span !4477 8267 8279
!4804 = span !4477 8235 8280
!4805 = fn_call_path_span !4477 8235 8240
!4806 = (!4804 !4805)
!4807 = span !4477 8328 8343
!4808 = fn_call_path_span !4477 8333 8341
!4809 = (!4807 !4808)
!4810 = span !4477 8348 8351
!4811 = span !4477 8354 8355
!4812 = span !4477 8348 8355
!4813 = fn_call_path_span !4477 8352 8353
!4814 = (!4812 !4813)
!4815 = span !4477 8345 8346
!4816 = span !4477 8322 8356
!4817 = fn_call_path_span !4477 8322 8327
!4818 = (!4816 !4817)
!4819 = span !4477 8367 8388
!4820 = (!2173 !193 !2174)
!4821 = (!2177 !2178)
!4822 = (!2181 !2182)
!4823 = (!2187 !2188)
!4824 = (!2190 !2191)
!4825 = (!2201 !2202)
!4826 = (!2204 !2205)
!4827 = (!2214 !2215)
!4828 = span !2533 1167 1171
!4829 = span !2533 1173 1176
!4830 = span !2533 1181 1186
!4831 = span !2533 1153 1314
!4832 = fn_name_span !2533 1160 1166
!4833 = (!4831 !193 !4832)
!4834 = span !2533 1255 1270
!4835 = fn_call_path_span !2533 1260 1268
!4836 = (!4834 !4835)
!4837 = span !2533 1249 1271
!4838 = span !2533 1242 1272
!4839 = fn_call_path_span !2533 1242 1248
!4840 = (!4838 !4839)
!4841 = span !2533 1232 1273
!4842 = span !2533 1293 1296
!4843 = span !2533 1298 1299
!4844 = span !2533 1282 1307
!4845 = fn_call_path_span !2533 1282 1287
!4846 = (!4844 !4845)
!4847 = (!4831 !193 !4832)
!4848 = (!4834 !4835)
!4849 = (!4838 !4839)
!4850 = (!4844 !4845)
!4851 = (!2173 !193 !2174)
!4852 = (!2177 !2178)
!4853 = (!2181 !2182)
!4854 = (!2187 !2188)
!4855 = (!2190 !2191)
!4856 = (!2201 !2202)
!4857 = (!2204 !2205)
!4858 = (!2214 !2215)
!4859 = (!1548 !1549)
!4860 = (!1457 !1458)
!4861 = (!1460 !1461)
!4862 = (!1463 !1464)
!4863 = (!1468 !1469)
!4864 = span !34 124 128
!4865 = span !34 130 136
!4866 = span !34 110 359
!4867 = fn_name_span !34 113 123
!4868 = (!4866 !4867)
!4869 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/events.sw"
!4870 = span !4869 589 607
!4871 = span !34 191 223
!4872 = fn_call_path_span !34 205 215
!4873 = (!4871 !4872)
!4874 = span !34 178 224
!4875 = span !4869 613 631
!4876 = span !34 259 265
!4877 = span !34 238 266
!4878 = fn_call_path_span !34 248 258
!4879 = (!4877 !4878)
!4880 = span !34 225 267
!4881 = span !4869 637 657
!4882 = span !34 305 311
!4883 = span !34 281 312
!4884 = fn_call_path_span !34 294 304
!4885 = (!4883 !4884)
!4886 = span !34 268 313
!4887 = span !34 335 341
!4888 = span !34 116 120
!4889 = span !34 122 128
!4890 = span !34 102 667
!4891 = fn_name_span !34 105 115
!4892 = (!4890 !4891)
!4893 = span !34 183 621
!4894 = span !34 189 193
!4895 = span !34 196 404
!4896 = fn_call_path_span !34 196 404
!4897 = (!4895 !4896)
!4898 = span !34 214 219
!4899 = span !34 263 267
!4900 = span !34 263 286
!4901 = fn_call_path_span !34 268 278
!4902 = (!4900 !4901)
!4903 = span !34 250 287
!4904 = span !34 325 330
!4905 = span !34 342 348
!4906 = span !34 325 349
!4907 = fn_call_path_span !34 331 341
!4908 = (!4906 !4907)
!4909 = span !34 312 350
!4910 = span !34 375 381
!4911 = span !34 406 617
!4912 = fn_call_path_span !34 406 617
!4913 = (!4911 !4912)
!4914 = span !34 427 432
!4915 = span !34 476 480
!4916 = span !34 476 499
!4917 = fn_call_path_span !34 481 491
!4918 = (!4916 !4917)
!4919 = span !34 463 500
!4920 = span !34 538 543
!4921 = span !34 555 561
!4922 = span !34 538 562
!4923 = fn_call_path_span !34 544 554
!4924 = (!4922 !4923)
!4925 = span !34 525 563
!4926 = span !34 588 594
!4927 = span !34 170 622
!4928 = span !34 643 649
!4929 = span !34 115 119
!4930 = span !34 121 127
!4931 = span !34 101 257
!4932 = (!4931 !37)
!4933 = span !34 182 210
!4934 = fn_call_path_span !34 192 202
!4935 = (!4933 !4934)
!4936 = span !34 169 211
!4937 = span !34 233 239
!4938 = span !34 104 260
!4939 = (!4938 !2123)
!4940 = span !34 185 213
!4941 = fn_call_path_span !34 195 205
!4942 = (!4940 !4941)
!4943 = span !34 172 214
!4944 = span !34 236 242
!4945 = span !34 101 304
!4946 = (!4945 !37)
!4947 = span !34 182 212
!4948 = fn_call_path_span !34 194 204
!4949 = (!4947 !4948)
!4950 = span !34 169 213
!4951 = span !34 250 256
!4952 = span !34 227 257
!4953 = fn_call_path_span !34 239 249
!4954 = (!4952 !4953)
!4955 = span !34 214 258
!4956 = span !34 280 286
!4957 = span !34 101 301
!4958 = (!4957 !37)
!4959 = (!4933 !4934)
!4960 = span !34 247 253
!4961 = span !34 225 254
!4962 = fn_call_path_span !34 236 246
!4963 = (!4961 !4962)
!4964 = span !34 212 255
!4965 = span !34 277 283
!4966 = span !0 10632 10640
!4967 = span !0 10610 10800
!4968 = fn_name_span !0 10613 10631
!4969 = (!4967 !193 !4968)
!4970 = span !0 10658 10676
!4971 = fn_call_path_span !0 10658 10674
!4972 = (!4970 !4971)
!4973 = span !0 10708 10739
!4974 = fn_call_path_span !0 10708 10729
!4975 = (!4973 !4974)
!4976 = span !0 10687 10793
!4977 = fn_call_path_span !0 10687 10694
!4978 = (!4976 !4977)
!4979 = span !0 37299 37307
!4980 = span !0 37274 37502
!4981 = fn_name_span !0 37277 37298
!4982 = (!4980 !193 !4981)
!4983 = span !0 37341 37361
!4984 = fn_call_path_span !0 37341 37351
!4985 = (!4983 !4984)
!4986 = span !0 37329 37362
!4987 = span !0 37403 37408
!4988 = span !0 37384 37416
!4989 = fn_call_path_span !0 37384 37402
!4990 = (!4988 !4989)
!4991 = span !0 37383 37416
!4992 = fn_call_path_span !0 37383 37384
!4993 = (!4991 !4992)
!4994 = span !0 37367 37417
!4995 = span !0 37425 37434
!4996 = span !0 37473 37478
!4997 = span !0 37445 37479
!4998 = fn_call_path_span !0 37445 37462
!4999 = (!4997 !4998)
!5000 = span !0 37491 37500
!5001 = span !0 37543 37549
!5002 = span !0 37521 37603
!5003 = fn_name_span !0 37524 37542
!5004 = (!5002 !1196 !5003)
!5005 = span !0 37580 37601
!5006 = fn_call_path_span !0 37580 37599
!5007 = (!5005 !5006)
!5008 = span !0 37570 37601
!5009 = fn_call_path_span !0 37577 37579
!5010 = (!5008 !5009)
!5011 = span !0 30356 30451
!5012 = fn_name_span !0 30359 30378
!5013 = (!5011 !1196 !5012)
!5014 = span !0 30402 30416
!5015 = span !0 30394 30427
!5016 = fn_call_path_span !0 30417 30425
!5017 = (!5015 !5016)
!5018 = span !0 1676 1677
!5019 = span !0 30394 30449
!5020 = fn_call_path_span !0 30428 30437
!5021 = (!5019 !5020)
!5022 = (!1246 !1196 !1247)
!5023 = (!1249 !1250)
!5024 = (!1252 !1253)
!5025 = (!1255 !1256)
!5026 = span !0 4535 4864
!5027 = fn_name_span !0 4538 4545
!5028 = (!5026 !193 !5027)
!5029 = span !0 4558 4578
!5030 = fn_call_path_span !0 4558 4576
!5031 = (!5029 !5030)
!5032 = span !0 4588 4606
!5033 = fn_call_path_span !0 4588 4604
!5034 = (!5032 !5033)
!5035 = span !0 4628 4640
!5036 = fn_call_path_span !0 4628 4638
!5037 = (!5035 !5036)
!5038 = span !0 4628 4649
!5039 = fn_call_path_span !0 4641 4647
!5040 = (!5038 !5039)
!5041 = span !0 4617 4650
!5042 = span !0 4708 4712
!5043 = span !0 4691 4713
!5044 = fn_call_path_span !0 4691 4707
!5045 = (!5043 !5044)
!5046 = span !0 4660 4714
!5047 = span !0 4755 4761
!5048 = span !0 4775 4780
!5049 = span !0 4794 4798
!5050 = span !0 4812 4819
!5051 = span !0 4841 4845
!5052 = span !0 4728 4856
!5053 = span !0 4724 4857
!5054 = fn_call_path_span !0 4724 4727
!5055 = (!5053 !5054)
!5056 = span !0 33067 33071
!5057 = span !0 33047 33479
!5058 = fn_name_span !0 33050 33066
!5059 = (!5057 !193 !5058)
!5060 = span !0 33129 33141
!5061 = fn_call_path_span !0 33129 33139
!5062 = (!5060 !5061)
!5063 = span !0 33116 33142
!5064 = span !0 33155 33161
!5065 = span !0 33164 33165
!5066 = span !0 33155 33165
!5067 = fn_call_path_span !0 33162 33163
!5068 = (!5066 !5067)
!5069 = span !2468 110 392
!5070 = span !0 33147 33193
!5071 = fn_call_path_span !0 33147 33154
!5072 = (!5070 !5071)
!5073 = span !0 33212 33226
!5074 = fn_call_path_span !0 33212 33224
!5075 = (!5073 !5074)
!5076 = span !0 33200 33227
!5077 = span !0 33264 33269
!5078 = span !0 33249 33270
!5079 = fn_call_path_span !0 33249 33263
!5080 = (!5078 !5079)
!5081 = span !0 33232 33271
!5082 = span !0 33303 33310
!5083 = span !0 33295 33320
!5084 = fn_call_path_span !0 33311 33314
!5085 = (!5083 !5084)
!5086 = span !0 33295 33331
!5087 = fn_call_path_span !0 33321 33329
!5088 = (!5086 !5087)
!5089 = span !0 33342 33356
!5090 = fn_call_path_span !0 33342 33354
!5091 = (!5089 !5090)
!5092 = span !0 33295 33357
!5093 = fn_call_path_span !0 33332 33341
!5094 = (!5092 !5093)
!5095 = span !0 33277 33358
!5096 = span !0 33363 33370
!5097 = span !0 33385 33391
!5098 = span !0 33393 33403
!5099 = span !0 33363 33404
!5100 = fn_call_path_span !0 33378 33384
!5101 = (!5099 !5100)
!5102 = span !0 33418 33425
!5103 = span !0 33439 33446
!5104 = span !0 33410 33447
!5105 = fn_call_path_span !0 33426 33432
!5106 = (!5104 !5105)
!5107 = span !0 33454 33460
!5108 = span !0 33462 33467
!5109 = span !0 33469 33476
!5110 = span !0 33453 33477
!5111 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/context.sw"
!5112 = span !5111 1921 1965
!5113 = fn_name_span !5111 1928 1938
!5114 = (!5112 !5113)
!5115 = span !5111 1954 1963
!5116 = fn_call_path_span !5111 1954 1961
!5117 = (!5115 !5116)
!5118 = span !2385 4765 4822
!5119 = fn_name_span !2385 4772 4779
!5120 = (!5118 !5119)
!5121 = span !2385 4795 4820
!5122 = (!1532 !1533)
!5123 = (!1535 !1536)
!5124 = (!1538 !1539)
!5125 = (!1543 !1544)
!5126 = (!1548 !1549)
!5127 = (!1457 !1458)
!5128 = (!1460 !1461)
!5129 = (!1463 !1464)
!5130 = (!1468 !1469)
!5131 = span !34 104 1429
!5132 = (!5131 !2123)
!5133 = span !34 185 1383
!5134 = span !34 198 299
!5135 = fn_call_path_span !34 198 299
!5136 = (!5134 !5135)
!5137 = span !34 253 257
!5138 = span !34 253 276
!5139 = fn_call_path_span !34 258 268
!5140 = (!5138 !5139)
!5141 = span !34 301 404
!5142 = fn_call_path_span !34 301 404
!5143 = (!5141 !5142)
!5144 = span !34 358 362
!5145 = span !34 358 381
!5146 = fn_call_path_span !34 363 373
!5147 = (!5145 !5146)
!5148 = span !34 406 512
!5149 = fn_call_path_span !34 406 512
!5150 = (!5148 !5149)
!5151 = span !34 466 470
!5152 = span !34 466 489
!5153 = fn_call_path_span !34 471 481
!5154 = (!5152 !5153)
!5155 = span !34 514 733
!5156 = fn_call_path_span !34 514 733
!5157 = (!5155 !5156)
!5158 = span !34 543 548
!5159 = span !34 592 596
!5160 = span !34 592 615
!5161 = fn_call_path_span !34 597 607
!5162 = (!5160 !5161)
!5163 = span !34 579 616
!5164 = span !34 654 659
!5165 = span !34 671 677
!5166 = span !34 654 678
!5167 = fn_call_path_span !34 660 670
!5168 = (!5166 !5167)
!5169 = span !34 641 679
!5170 = span !34 704 710
!5171 = span !34 735 950
!5172 = fn_call_path_span !34 735 950
!5173 = (!5171 !5172)
!5174 = span !34 760 765
!5175 = span !34 809 813
!5176 = span !34 809 832
!5177 = fn_call_path_span !34 814 824
!5178 = (!5176 !5177)
!5179 = span !34 796 833
!5180 = span !34 871 876
!5181 = span !34 888 894
!5182 = span !34 871 895
!5183 = fn_call_path_span !34 877 887
!5184 = (!5182 !5183)
!5185 = span !34 858 896
!5186 = span !34 921 927
!5187 = span !34 952 1057
!5188 = fn_call_path_span !34 952 1057
!5189 = (!5187 !5188)
!5190 = span !34 1011 1015
!5191 = span !34 1011 1034
!5192 = fn_call_path_span !34 1016 1026
!5193 = (!5191 !5192)
!5194 = span !34 1059 1166
!5195 = fn_call_path_span !34 1059 1166
!5196 = (!5194 !5195)
!5197 = span !34 1120 1124
!5198 = span !34 1120 1143
!5199 = fn_call_path_span !34 1125 1135
!5200 = (!5198 !5199)
!5201 = span !34 1168 1272
!5202 = fn_call_path_span !34 1168 1272
!5203 = (!5201 !5202)
!5204 = span !34 1226 1230
!5205 = span !34 1226 1249
!5206 = fn_call_path_span !34 1231 1241
!5207 = (!5205 !5206)
!5208 = span !34 1274 1379
!5209 = fn_call_path_span !34 1274 1379
!5210 = (!5208 !5209)
!5211 = span !34 1333 1337
!5212 = span !34 1333 1356
!5213 = fn_call_path_span !34 1338 1348
!5214 = (!5212 !5213)
!5215 = span !34 172 1384
!5216 = span !34 1405 1411
!5217 = span !7 37207 37211
!5218 = span !7 37213 37219
!5219 = span !7 37193 37453
!5220 = fn_name_span !7 37196 37206
!5221 = (!5219 !5220)
!5222 = span !7 37267 37268
!5223 = span !7 37262 37287
!5224 = fn_call_path_span !7 37269 37279
!5225 = (!5223 !5224)
!5226 = span !7 37249 37288
!5227 = span !7 37315 37316
!5228 = span !7 37328 37334
!5229 = span !7 37310 37335
!5230 = fn_call_path_span !7 37317 37327
!5231 = (!5229 !5230)
!5232 = span !7 37297 37336
!5233 = span !7 37363 37364
!5234 = span !7 37376 37382
!5235 = span !7 37358 37383
!5236 = fn_call_path_span !7 37365 37375
!5237 = (!5235 !5236)
!5238 = span !7 37345 37384
!5239 = span !7 37411 37412
!5240 = span !7 37424 37430
!5241 = span !7 37406 37431
!5242 = fn_call_path_span !7 37413 37423
!5243 = (!5241 !5242)
!5244 = span !7 37393 37432
!5245 = span !7 37441 37447
!5246 = span !2397 1182 1312
!5247 = fn_name_span !2397 1189 1201
!5248 = (!5246 !5247)
!5249 = span !2397 1235 1309
!5250 = span !2397 1259 1279
!5251 = span !2397 1221 1310
!5252 = fn_call_path_span !2397 1221 1234
!5253 = (!5251 !5252)
!5254 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/asset_id.sw"
!5255 = span !5254 1300 1304
!5256 = span !5254 1292 1349
!5257 = fn_name_span !5254 1295 1299
!5258 = (!5256 !5257)
!5259 = span !5254 1330 1343
!5260 = span !0 30776 30784
!5261 = span !0 30758 31029
!5262 = fn_name_span !0 30761 30775
!5263 = (!5261 !5262)
!5264 = span !0 30829 30839
!5265 = span !0 30817 30839
!5266 = fn_call_path_span !0 30826 30828
!5267 = (!5265 !5266)
!5268 = span !0 30892 30903
!5269 = span !0 30880 30903
!5270 = fn_call_path_span !0 30889 30891
!5271 = (!5269 !5270)
!5272 = span !2468 10 108
!5273 = span !0 30952 30981
!5274 = fn_call_path_span !0 30952 30955
!5275 = (!5273 !5274)
!5276 = span !0 30991 31020
!5277 = fn_call_path_span !0 30991 30997
!5278 = (!5276 !5277)
!5279 = span !5254 792 796
!5280 = span !5254 798 803
!5281 = span !5254 786 858
!5282 = fn_name_span !5254 789 791
!5283 = (!5281 !5282)
!5284 = span !5254 598 608
!5285 = span !5254 829 852
!5286 = fn_call_path_span !5254 839 841
!5287 = (!5285 !5286)
!5288 = (!1548 !1549)
!5289 = (!1457 !1458)
!5290 = (!1460 !1461)
!5291 = (!1463 !1464)
!5292 = (!1468 !1469)
!5293 = span !34 104 561
!5294 = (!5293 !2123)
!5295 = span !34 185 515
!5296 = span !34 198 298
!5297 = fn_call_path_span !34 198 298
!5298 = (!5296 !5297)
!5299 = span !34 252 256
!5300 = span !34 252 275
!5301 = fn_call_path_span !34 257 267
!5302 = (!5300 !5301)
!5303 = span !34 300 403
!5304 = fn_call_path_span !34 300 403
!5305 = (!5303 !5304)
!5306 = span !34 357 361
!5307 = span !34 357 380
!5308 = fn_call_path_span !34 362 372
!5309 = (!5307 !5308)
!5310 = span !34 405 511
!5311 = fn_call_path_span !34 405 511
!5312 = (!5310 !5311)
!5313 = span !34 465 469
!5314 = span !34 465 488
!5315 = fn_call_path_span !34 470 480
!5316 = (!5314 !5315)
!5317 = span !34 172 516
!5318 = span !34 537 543
!5319 = (!1231 !1232)
!5320 = (!1236 !1237)
!5321 = (!1241 !1242)
!5322 = (!1246 !1196 !1247)
!5323 = (!1249 !1250)
!5324 = (!1252 !1253)
!5325 = (!1255 !1256)
!5326 = span !3409 239 364
!5327 = fn_name_span !3409 246 249
!5328 = (!5326 !5327)
!5329 = span !3409 297 311
!5330 = fn_call_path_span !3409 297 309
!5331 = (!5329 !5330)
!5332 = span !3409 333 347
!5333 = fn_call_path_span !3409 333 345
!5334 = (!5332 !5333)
!5335 = span !3409 270 358
!5336 = span !3431 167 263
!5337 = fn_name_span !3431 174 177
!5338 = (!5336 !5337)
!5339 = span !3431 198 257
!5340 = span !3431 223 224
!5341 = span !3431 245 246
!5342 = (!1548 !1549)
!5343 = (!1457 !1458)
!5344 = (!1460 !1461)
!5345 = (!1463 !1464)
!5346 = (!1468 !1469)
!5347 = span !34 106 442
!5348 = (!5347 !3503)
!5349 = span !4869 203 218
!5350 = span !34 187 217
!5351 = fn_call_path_span !34 199 209
!5352 = (!5350 !5351)
!5353 = span !34 174 218
!5354 = span !4869 224 242
!5355 = span !34 254 260
!5356 = span !34 232 261
!5357 = fn_call_path_span !34 243 253
!5358 = (!5356 !5357)
!5359 = span !34 219 262
!5360 = span !4869 248 266
!5361 = span !34 297 303
!5362 = span !34 276 304
!5363 = fn_call_path_span !34 286 296
!5364 = (!5362 !5363)
!5365 = span !34 263 305
!5366 = span !4869 272 292
!5367 = span !34 343 349
!5368 = span !34 319 350
!5369 = fn_call_path_span !34 332 342
!5370 = (!5368 !5369)
!5371 = span !34 306 351
!5372 = span !4869 298 318
!5373 = span !34 388 394
!5374 = span !34 365 395
!5375 = fn_call_path_span !34 377 387
!5376 = (!5374 !5375)
!5377 = span !34 352 396
!5378 = span !34 418 424
!5379 = (!4931 !37)
!5380 = (!4933 !4934)
!5381 = (!44 !45)
!5382 = (!47 !48)
!5383 = (!2273 !2274)
!5384 = (!2276 !2277)
!5385 = span !34 102 386
!5386 = (!5385 !4891)
!5387 = span !34 195 217
!5388 = fn_call_path_span !34 202 208
!5389 = (!5387 !5388)
!5390 = span !34 176 218
!5391 = span !34 225 232
!5392 = span !34 219 367
!5393 = span !34 235 236
!5394 = span !34 235 286
!5395 = fn_call_path_span !34 235 286
!5396 = (!5394 !5395)
!5397 = span !34 258 284
!5398 = fn_call_path_span !34 265 271
!5399 = (!5397 !5398)
!5400 = span !34 288 289
!5401 = span !34 288 345
!5402 = fn_call_path_span !34 288 345
!5403 = (!5401 !5402)
!5404 = span !34 314 343
!5405 = fn_call_path_span !34 321 327
!5406 = (!5404 !5405)
!5407 = span !34 362 363
!5408 = span !34 353 364
!5409 = (!44 !45)
!5410 = (!47 !48)
!5411 = span !7 65527 65533
!5412 = span !7 65505 65600
!5413 = fn_name_span !7 65508 65518
!5414 = (!5412 !5413)
!5415 = span !7 65566 65594
!5416 = fn_call_path_span !7 65573 65585
!5417 = (!5415 !5416)
!5418 = (!44 !45)
!5419 = (!47 !48)
!5420 = (!36 !37)
!5421 = (!39 !40)
!5422 = (!44 !45)
!5423 = (!47 !48)
!5424 = span !34 104 235
!5425 = (!5424 !2123)
!5426 = span !34 191 214
!5427 = fn_call_path_span !34 198 204
!5428 = (!5426 !5427)
!5429 = span !34 178 217
!5430 = span !0 5382 5386
!5431 = span !0 5367 5710
!5432 = fn_name_span !0 5370 5381
!5433 = (!5431 !193 !5432)
!5434 = span !0 5408 5428
!5435 = fn_call_path_span !0 5408 5426
!5436 = (!5434 !5435)
!5437 = span !0 5438 5456
!5438 = fn_call_path_span !0 5438 5454
!5439 = (!5437 !5438)
!5440 = span !0 5480 5492
!5441 = fn_call_path_span !0 5480 5490
!5442 = (!5440 !5441)
!5443 = span !0 5480 5501
!5444 = fn_call_path_span !0 5493 5499
!5445 = (!5443 !5444)
!5446 = span !0 5467 5502
!5447 = span !0 5543 5565
!5448 = fn_call_path_span !0 5543 5559
!5449 = (!5447 !5448)
!5450 = span !0 5512 5566
!5451 = span !0 5607 5613
!5452 = span !0 5627 5632
!5453 = span !0 5664 5671
!5454 = span !0 5685 5691
!5455 = span !0 5580 5702
!5456 = span !0 5576 5703
!5457 = fn_call_path_span !0 5576 5579
!5458 = (!5456 !5457)
!5459 = (!44 !45)
!5460 = (!47 !48)
!5461 = span !7 103546 103552
!5462 = span !7 103524 103813
!5463 = fn_name_span !7 103527 103537
!5464 = (!5462 !5463)
!5465 = span !7 103600 103621
!5466 = fn_call_path_span !7 103600 103613
!5467 = (!5465 !5466)
!5468 = span !7 103635 103656
!5469 = fn_call_path_span !7 103635 103648
!5470 = (!5468 !5469)
!5471 = span !7 103670 103691
!5472 = fn_call_path_span !7 103670 103683
!5473 = (!5471 !5472)
!5474 = span !7 103705 103726
!5475 = fn_call_path_span !7 103705 103718
!5476 = (!5474 !5475)
!5477 = span !7 103740 103761
!5478 = fn_call_path_span !7 103740 103753
!5479 = (!5477 !5478)
!5480 = span !7 103775 103796
!5481 = fn_call_path_span !7 103775 103788
!5482 = (!5480 !5481)
!5483 = span !7 103586 103807
!5484 = span !34 103 320
!5485 = (!5484 !3143)
!5486 = span !34 196 218
!5487 = fn_call_path_span !34 203 209
!5488 = (!5486 !5487)
!5489 = span !34 177 219
!5490 = span !34 226 233
!5491 = span !34 220 301
!5492 = span !34 236 237
!5493 = span !34 236 256
!5494 = fn_call_path_span !34 236 256
!5495 = (!5493 !5494)
!5496 = span !34 258 259
!5497 = span !34 258 279
!5498 = fn_call_path_span !34 258 279
!5499 = (!5497 !5498)
!5500 = span !34 296 297
!5501 = span !34 287 298
!5502 = span !34 103 363
!5503 = (!5502 !3143)
!5504 = (!5486 !5487)
!5505 = span !34 220 344
!5506 = (!5493 !5494)
!5507 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/limit_type.sw"
!5508 = span !5507 42 116
!5509 = span !34 258 278
!5510 = fn_call_path_span !34 258 278
!5511 = (!5509 !5510)
!5512 = span !34 280 281
!5513 = span !34 280 300
!5514 = fn_call_path_span !34 280 300
!5515 = (!5513 !5514)
!5516 = span !34 302 303
!5517 = span !34 302 322
!5518 = fn_call_path_span !34 302 322
!5519 = (!5517 !5518)
!5520 = span !34 339 340
!5521 = span !34 330 341
!5522 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/vec.sw"
!5523 = span !5522 16286 16292
!5524 = span !5522 16264 16575
!5525 = fn_name_span !5522 16267 16277
!5526 = (!5524 !5525)
!5527 = span !5522 16338 16361
!5528 = fn_call_path_span !5522 16338 16353
!5529 = (!5527 !5528)
!5530 = span !5522 16328 16362
!5531 = span !5522 16403 16406
!5532 = span !5522 16384 16407
!5533 = fn_call_path_span !5522 16384 16402
!5534 = (!5532 !5533)
!5535 = span !5522 16372 16408
!5536 = span !5522 16418 16432
!5537 = span !5522 16430 16431
!5538 = span !5522 16447 16448
!5539 = span !5522 16451 16454
!5540 = span !5522 16447 16454
!5541 = fn_call_path_span !5522 16449 16450
!5542 = (!5540 !5541)
!5543 = span !5522 16480 16501
!5544 = fn_call_path_span !5522 16480 16493
!5545 = (!5543 !5544)
!5546 = span !5522 16469 16502
!5547 = span !5522 16515 16516
!5548 = span !5522 16522 16526
!5549 = span !5522 16515 16527
!5550 = fn_call_path_span !5522 16517 16521
!5551 = (!5549 !5550)
!5552 = span !5522 16541 16542
!5553 = span !5522 16546 16547
!5554 = span !5522 16541 16547
!5555 = fn_call_path_span !5522 16543 16545
!5556 = (!5554 !5555)
!5557 = span !5522 16568 16569
!5558 = span !5522 5027 5035
!5559 = span !5522 5006 5152
!5560 = fn_name_span !5522 5013 5026
!5561 = (!5559 !5560)
!5562 = span !5522 5084 5115
!5563 = fn_call_path_span !5522 5084 5105
!5564 = (!5562 !5563)
!5565 = span !5522 5060 5146
!5566 = span !5522 5134 5135
!5567 = span !5522 1260 1268
!5568 = span !5522 1239 1381
!5569 = fn_name_span !5522 1246 1259
!5570 = (!5568 !5569)
!5571 = span !5522 1317 1337
!5572 = fn_call_path_span !5522 1317 1322
!5573 = (!5571 !5572)
!5574 = span !5522 1293 1375
!5575 = (!1436 !1437)
!5576 = (!1439 !1440)
!5577 = span !5522 5630 5634
!5578 = span !5522 5636 5641
!5579 = span !5522 5610 6084
!5580 = fn_name_span !5522 5617 5621
!5581 = (!5579 !5580)
!5582 = span !5522 3413 3421
!5583 = span !5522 3393 3407
!5584 = span !5522 5734 5753
!5585 = fn_call_path_span !5522 5743 5751
!5586 = (!5584 !5585)
!5587 = span !5522 5722 5753
!5588 = fn_call_path_span !5522 5731 5733
!5589 = (!5587 !5588)
!5590 = span !5522 5768 5783
!5591 = fn_call_path_span !5522 5777 5781
!5592 = (!5590 !5591)
!5593 = span !5522 5917 5931
!5594 = fn_call_path_span !5522 5926 5929
!5595 = (!5593 !5594)
!5596 = span !5522 5917 5950
!5597 = fn_call_path_span !5522 5932 5935
!5598 = (!5596 !5597)
!5599 = span !5522 5907 5951
!5600 = span !5522 6003 6006
!5601 = span !5522 6003 6024
!5602 = fn_call_path_span !5522 6007 6012
!5603 = (!5601 !5602)
!5604 = span !5522 6076 6077
!5605 = span !5522 6064 6077
!5606 = fn_call_path_span !5522 6073 6075
!5607 = (!5605 !5606)
!5608 = span !5522 2254 2258
!5609 = span !5522 2238 2291
!5610 = fn_name_span !5522 2245 2253
!5611 = (!5609 !5610)
!5612 = span !5522 245 253
!5613 = span !5522 2815 2819
!5614 = span !5522 2795 2987
!5615 = fn_name_span !5522 2802 2806
!5616 = (!5614 !5615)
!5617 = span !5522 2860 2861
!5618 = span !5522 2848 2861
!5619 = fn_call_path_span !5522 2857 2859
!5620 = (!5618 !5619)
!5621 = span !5522 2864 2865
!5622 = span !5522 2875 2876
!5623 = span !5522 2875 2887
!5624 = fn_call_path_span !5522 2877 2878
!5625 = (!5623 !5624)
!5626 = span !5522 2831 2890
!5627 = span !5522 227 239
!5628 = span !5522 2944 2951
!5629 = span !5522 2911 2952
!5630 = fn_call_path_span !5522 2911 2918
!5631 = (!5629 !5630)
!5632 = span !5522 2900 2952
!5633 = span !5522 2973 2980
!5634 = span !5522 2962 2980
!5635 = span !1434 2573 2576
!5636 = span !1434 2587 2592
!5637 = span !1434 2599 2608
!5638 = span !1434 2555 2827
!5639 = fn_name_span !1434 2562 2569
!5640 = (!5638 !5639)
!5641 = span !1434 2635 2652
!5642 = fn_call_path_span !1434 2645 2646
!5643 = (!5641 !5642)
!5644 = span !1434 2677 2698
!5645 = fn_call_path_span !1434 2677 2682
!5646 = (!5644 !5645)
!5647 = span !1434 2663 2699
!5648 = span !1434 2719 2720
!5649 = span !1434 2711 2720
!5650 = fn_call_path_span !1434 2717 2718
!5651 = (!5649 !5650)
!5652 = span !1434 2752 2759
!5653 = span !1434 2735 2767
!5654 = fn_call_path_span !1434 2739 2746
!5655 = (!5653 !5654)
!5656 = span !1434 2787 2794
!5657 = (!2828 !2829)
!5658 = (!1040 !1041)
!5659 = span !5522 1828 1832
!5660 = span !5522 1817 1869
!5661 = fn_name_span !5522 1824 1827
!5662 = (!5660 !5661)
!5663 = span !0 15388 15394
!5664 = span !0 15409 15419
!5665 = span !0 15440 15450
!5666 = span !0 15471 15476
!5667 = span !0 15491 15499
!5668 = span !0 15514 15520
!5669 = span !0 15357 18100
!5670 = fn_name_span !0 15360 15378
!5671 = (!5669 !193 !5670)
!5672 = span !0 15557 15577
!5673 = fn_call_path_span !0 15557 15575
!5674 = (!5672 !5673)
!5675 = span !0 15587 15605
!5676 = fn_call_path_span !0 15587 15603
!5677 = (!5675 !5676)
!5678 = span !0 15624 15636
!5679 = fn_call_path_span !0 15631 15634
!5680 = (!5678 !5679)
!5681 = span !0 15639 15640
!5682 = span !0 15624 15640
!5683 = fn_call_path_span !0 15637 15638
!5684 = (!5682 !5683)
!5685 = span !0 15616 15673
!5686 = fn_call_path_span !0 15616 15623
!5687 = (!5685 !5686)
!5688 = span !0 15691 15718
!5689 = fn_call_path_span !0 15700 15702
!5690 = (!5688 !5689)
!5691 = span !0 15683 15748
!5692 = fn_call_path_span !0 15683 15690
!5693 = (!5691 !5692)
!5694 = span !0 15816 15817
!5695 = span !0 15769 15830
!5696 = fn_call_path_span !0 15769 15788
!5697 = (!5695 !5696)
!5698 = span !0 15759 15831
!5699 = span !0 15850 15862
!5700 = fn_call_path_span !0 15857 15860
!5701 = (!5699 !5700)
!5702 = span !0 15840 15863
!5703 = span !0 15872 15889
!5704 = span !0 15887 15888
!5705 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/match_result.sw"
!5706 = span !5705 10 94
!5707 = span !0 15898 15939
!5708 = span !0 15963 15979
!5709 = fn_call_path_span !0 15969 15970
!5710 = (!5708 !5709)
!5711 = span !0 15963 15997
!5712 = fn_call_path_span !0 15980 15981
!5713 = (!5711 !5712)
!5714 = span !0 15948 15998
!5715 = span !0 16014 16018
!5716 = span !0 16021 16024
!5717 = span !0 16014 16024
!5718 = fn_call_path_span !0 16019 16020
!5719 = (!5717 !5718)
!5720 = span !0 16060 16066
!5721 = span !0 16071 16074
!5722 = span !0 16052 16075
!5723 = fn_call_path_span !0 16067 16070
!5724 = (!5722 !5723)
!5725 = span !0 16052 16082
!5726 = fn_call_path_span !0 16076 16080
!5727 = (!5725 !5726)
!5728 = span !0 16039 16083
!5729 = span !0 16117 16121
!5730 = span !0 16106 16122
!5731 = fn_call_path_span !0 16113 16116
!5732 = (!5730 !5731)
!5733 = span !0 16106 16131
!5734 = fn_call_path_span !0 16123 16129
!5735 = (!5733 !5734)
!5736 = span !0 16096 16132
!5737 = span !0 16166 16172
!5738 = span !0 16177 16180
!5739 = span !0 16158 16181
!5740 = fn_call_path_span !0 16173 16176
!5741 = (!5739 !5740)
!5742 = span !0 16158 16192
!5743 = fn_call_path_span !0 16182 16190
!5744 = (!5742 !5743)
!5745 = span !0 16145 16193
!5746 = span !0 16209 16215
!5747 = span !0 16209 16225
!5748 = fn_call_path_span !0 16216 16223
!5749 = (!5747 !5748)
!5750 = span !0 16257 16263
!5751 = span !0 16257 16272
!5752 = fn_call_path_span !0 16264 16270
!5753 = (!5751 !5752)
!5754 = span !0 16244 16273
!5755 = span !0 16294 16323
!5756 = fn_call_path_span !0 16305 16307
!5757 = (!5755 !5756)
!5758 = span !0 16294 16392
!5759 = span !0 16367 16373
!5760 = span !0 16351 16380
!5761 = fn_call_path_span !0 16351 16359
!5762 = (!5760 !5761)
!5763 = span !0 16384 16392
!5764 = span !0 16351 16392
!5765 = fn_call_path_span !0 16381 16383
!5766 = (!5764 !5765)
!5767 = span !0 16293 16524
!5768 = span !0 16422 16450
!5769 = fn_call_path_span !0 16433 16435
!5770 = (!5768 !5769)
!5771 = span !0 16422 16523
!5772 = span !0 16498 16504
!5773 = span !0 16482 16511
!5774 = fn_call_path_span !0 16482 16490
!5775 = (!5773 !5774)
!5776 = span !0 16515 16523
!5777 = span !0 16482 16523
!5778 = fn_call_path_span !0 16512 16514
!5779 = (!5777 !5778)
!5780 = span !0 16648 16651
!5781 = span !0 16677 16683
!5782 = span !0 16745 16748
!5783 = span !0 16774 16780
!5784 = span !0 16827 16830
!5785 = span !0 16806 16831
!5786 = fn_call_path_span !0 16806 16826
!5787 = (!5785 !5786)
!5788 = span !0 16806 16869
!5789 = fn_call_path_span !0 16861 16867
!5790 = (!5788 !5789)
!5791 = span !0 16602 16892
!5792 = fn_call_path_span !0 16602 16622
!5793 = (!5791 !5792)
!5794 = span !0 16563 16893
!5795 = span !0 16920 16932
!5796 = span !0 16914 17478
!5797 = span !0 16959 16987
!5798 = fn_call_path_span !0 16959 16987
!5799 = (!5797 !5798)
!5800 = span !0 17012 17316
!5801 = fn_call_path_span !0 17012 17316
!5802 = (!5800 !5801)
!5803 = span !0 17084 17100
!5804 = span !0 17104 17107
!5805 = span !0 17084 17107
!5806 = fn_call_path_span !0 17101 17103
!5807 = (!5805 !5806)
!5808 = span !0 17071 17289
!5809 = span !0 17341 17456
!5810 = fn_call_path_span !0 17341 17456
!5811 = (!5809 !5810)
!5812 = span !0 17397 17429
!5813 = span !0 17502 17509
!5814 = span !0 17502 17535
!5815 = fn_call_path_span !0 17510 17512
!5816 = (!5814 !5815)
!5817 = span !0 17635 17639
!5818 = span !0 17643 17644
!5819 = span !0 17635 17644
!5820 = fn_call_path_span !0 17640 17642
!5821 = (!5819 !5820)
!5822 = span !0 17688 17695
!5823 = span !0 17688 17721
!5824 = fn_call_path_span !0 17696 17698
!5825 = (!5823 !5824)
!5826 = span !0 17686 17722
!5827 = fn_call_path_span !0 17686 17687
!5828 = (!5826 !5827)
!5829 = span !2468 660 784
!5830 = span !0 17665 17774
!5831 = fn_call_path_span !0 17665 17672
!5832 = (!5830 !5831)
!5833 = span !0 17807 17814
!5834 = span !0 17807 17843
!5835 = fn_call_path_span !0 17815 17817
!5836 = (!5834 !5835)
!5837 = span !0 17807 17875
!5838 = span !0 17847 17875
!5839 = fn_call_path_span !0 17858 17860
!5840 = (!5838 !5839)
!5841 = span !0 17805 17876
!5842 = fn_call_path_span !0 17805 17806
!5843 = (!5841 !5842)
!5844 = span !0 17784 17927
!5845 = fn_call_path_span !0 17784 17791
!5846 = (!5844 !5845)
!5847 = span !0 17941 17948
!5848 = span !0 17941 17977
!5849 = fn_call_path_span !0 17949 17951
!5850 = (!5848 !5849)
!5851 = span !0 17941 18021
!5852 = span !0 17993 18021
!5853 = fn_call_path_span !0 18004 18006
!5854 = (!5852 !5853)
!5855 = span !0 18066 18069
!5856 = span !0 18044 18070
!5857 = fn_call_path_span !0 18044 18065
!5858 = (!5856 !5857)
!5859 = span !0 18091 18094
!5860 = span !5522 8496 8500
!5861 = span !5522 8485 8533
!5862 = fn_name_span !5522 8492 8495
!5863 = (!5861 !5862)
!5864 = span !0 34216 34222
!5865 = span !0 34233 34243
!5866 = span !0 34260 34265
!5867 = span !0 34276 34287
!5868 = span !0 34298 34308
!5869 = span !0 34188 35990
!5870 = fn_name_span !0 34191 34210
!5871 = (!5869 !193 !5870)
!5872 = span !0 34348 34360
!5873 = fn_call_path_span !0 34348 34358
!5874 = (!5872 !5873)
!5875 = span !0 34348 34369
!5876 = fn_call_path_span !0 34361 34367
!5877 = (!5875 !5876)
!5878 = span !0 34337 34370
!5879 = span !0 34440 34444
!5880 = span !0 34422 34445
!5881 = fn_call_path_span !0 34422 34439
!5882 = (!5880 !5881)
!5883 = span !0 34375 34446
!5884 = span !0 34469 34495
!5885 = fn_call_path_span !0 34469 34487
!5886 = (!5884 !5885)
!5887 = span !0 34452 34549
!5888 = fn_call_path_span !0 34452 34459
!5889 = (!5887 !5888)
!5890 = span !0 34556 34589
!5891 = span !0 34646 34656
!5892 = span !0 34686 34690
!5893 = span !0 34715 34729
!5894 = fn_call_path_span !0 34715 34727
!5895 = (!5893 !5894)
!5896 = span !0 34757 34761
!5897 = span !0 34739 34762
!5898 = fn_call_path_span !0 34739 34756
!5899 = (!5897 !5898)
!5900 = span !0 34793 34811
!5901 = span !0 34821 34839
!5902 = span !0 34849 34871
!5903 = fn_call_path_span !0 34849 34869
!5904 = (!5902 !5903)
!5905 = span !0 34610 34878
!5906 = fn_call_path_span !0 34610 34620
!5907 = (!5905 !5906)
!5908 = span !0 34594 34879
!5909 = span !0 34900 34905
!5910 = span !0 34900 34910
!5911 = fn_call_path_span !0 34906 34908
!5912 = (!5910 !5911)
!5913 = span !0 34885 34911
!5914 = span !0 34954 34960
!5915 = span !0 34978 34986
!5916 = span !0 34933 34987
!5917 = fn_call_path_span !0 34974 34977
!5918 = (!5916 !5917)
!5919 = span !0 34933 35011
!5920 = fn_call_path_span !0 35001 35009
!5921 = (!5919 !5920)
!5922 = span !0 34933 35034
!5923 = fn_call_path_span !0 35025 35032
!5924 = (!5922 !5923)
!5925 = span !0 35071 35079
!5926 = span !0 34916 35087
!5927 = fn_call_path_span !0 34916 34923
!5928 = (!5926 !5927)
!5929 = span !0 35118 35129
!5930 = span !0 35134 35138
!5931 = span !0 35110 35139
!5932 = fn_call_path_span !0 35130 35133
!5933 = (!5931 !5932)
!5934 = span !0 35145 35153
!5935 = span !0 35110 35154
!5936 = fn_call_path_span !0 35140 35144
!5937 = (!5935 !5936)
!5938 = span !0 35177 35195
!5939 = span !0 35209 35213
!5940 = span !0 35160 35214
!5941 = fn_call_path_span !0 35205 35208
!5942 = (!5940 !5941)
!5943 = span !0 35231 35239
!5944 = span !0 35249 35260
!5945 = span !0 35265 35269
!5946 = span !0 35241 35270
!5947 = fn_call_path_span !0 35261 35264
!5948 = (!5946 !5947)
!5949 = span !0 35241 35276
!5950 = fn_call_path_span !0 35271 35274
!5951 = (!5949 !5950)
!5952 = span !0 35279 35280
!5953 = span !0 35241 35280
!5954 = fn_call_path_span !0 35277 35278
!5955 = (!5953 !5954)
!5956 = span !0 35160 35281
!5957 = fn_call_path_span !0 35224 35230
!5958 = (!5956 !5957)
!5959 = span !0 35334 35340
!5960 = span !0 35348 35356
!5961 = span !0 35358 35363
!5962 = span !0 35326 35364
!5963 = fn_call_path_span !0 35341 35347
!5964 = (!5962 !5963)
!5965 = span !0 35432 35439
!5966 = span !0 35444 35448
!5967 = span !0 35424 35449
!5968 = fn_call_path_span !0 35440 35443
!5969 = (!5967 !5968)
!5970 = span !0 35424 35460
!5971 = fn_call_path_span !0 35450 35458
!5972 = (!5970 !5971)
!5973 = span !0 35471 35485
!5974 = fn_call_path_span !0 35471 35483
!5975 = (!5973 !5974)
!5976 = span !0 35424 35486
!5977 = fn_call_path_span !0 35461 35470
!5978 = (!5976 !5977)
!5979 = span !0 35406 35487
!5980 = span !0 35492 35499
!5981 = span !0 35539 35544
!5982 = span !0 35521 35545
!5983 = fn_call_path_span !0 35521 35538
!5984 = (!5982 !5983)
!5985 = span !0 35561 35566
!5986 = span !0 35555 35687
!5987 = span !0 35561 35577
!5988 = span !0 35592 35628
!5989 = fn_call_path_span !0 35592 35628
!5990 = (!5988 !5989)
!5991 = span !0 35611 35616
!5992 = span !0 35641 35677
!5993 = fn_call_path_span !0 35641 35677
!5994 = (!5992 !5993)
!5995 = span !0 35660 35665
!5996 = span !0 35659 35676
!5997 = fn_call_path_span !0 35659 35660
!5998 = (!5996 !5997)
!5999 = span !0 35492 35694
!6000 = fn_call_path_span !0 35500 35511
!6001 = (!5999 !6000)
!6002 = span !0 35755 35762
!6003 = span !0 35770 35774
!6004 = span !0 35776 35783
!6005 = span !0 35747 35784
!6006 = fn_call_path_span !0 35763 35769
!6007 = (!6005 !6006)
!6008 = span !0 35843 35853
!6009 = span !0 35883 35891
!6010 = span !0 35916 35920
!6011 = span !0 35939 35946
!6012 = span !0 35795 35973
!6013 = span !0 35791 35974
!6014 = fn_call_path_span !0 35791 35794
!6015 = (!6013 !6014)
!6016 = span !0 35980 35988
!6017 = span !0 32125 32129
!6018 = span !0 32104 32395
!6019 = fn_name_span !0 32107 32124
!6020 = (!6018 !1196 !6019)
!6021 = span !0 32182 32194
!6022 = span !0 32174 32204
!6023 = fn_call_path_span !0 32195 32198
!6024 = (!6022 !6023)
!6025 = span !0 32174 32215
!6026 = fn_call_path_span !0 32205 32213
!6027 = (!6025 !6026)
!6028 = span !0 32226 32243
!6029 = fn_call_path_span !0 32226 32241
!6030 = (!6028 !6029)
!6031 = span !0 32174 32244
!6032 = fn_call_path_span !0 32216 32225
!6033 = (!6031 !6032)
!6034 = span !0 32249 32261
!6035 = fn_call_path_span !0 32249 32259
!6036 = (!6034 !6035)
!6037 = span !0 32174 32262
!6038 = fn_call_path_span !0 32245 32248
!6039 = (!6037 !6038)
!6040 = span !0 32161 32263
!6041 = span !0 32295 32307
!6042 = span !0 32332 32338
!6043 = span !0 32287 32339
!6044 = fn_call_path_span !0 32308 32331
!6045 = (!6043 !6044)
!6046 = span !0 32268 32340
!6047 = span !0 32346 32358
!6048 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/protocol_fee.sw"
!6049 = span !6048 74 92
!6050 = span !0 32370 32382
!6051 = span !6048 98 116
!6052 = span !0 32345 32393
!6053 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/data_structures/user_volume.sw"
!6054 = span !6053 207 211
!6055 = span !6053 213 227
!6056 = span !6053 196 354
!6057 = fn_name_span !6053 203 206
!6058 = (!6056 !6057)
!6059 = span !6053 38 48
!6060 = span !6053 254 281
!6061 = fn_call_path_span !6053 265 266
!6062 = (!6060 !6061)
!6063 = span !6053 296 297
!6064 = span !6053 54 65
!6065 = (!1231 !1232)
!6066 = (!1236 !1237)
!6067 = (!1241 !1242)
!6068 = (!1246 !1196 !1247)
!6069 = (!1249 !1250)
!6070 = (!1252 !1253)
!6071 = (!1255 !1256)
!6072 = (!1261 !1196 !1262)
!6073 = (!1265 !1266)
!6074 = (!1270 !1271)
!6075 = (!1276 !1277)
!6076 = (!1279 !1280)
!6077 = (!1289 !1290)
!6078 = (!1292 !1293)
!6079 = (!1297 !1298)
!6080 = (!1302 !1303)
!6081 = (!1306 !1307)
!6082 = (!1310 !1311)
!6083 = (!1314 !1315)
!6084 = (!1319 !1320)
!6085 = (!1326 !1327)
!6086 = (!1331 !1332)
!6087 = (!1335 !1336)
!6088 = (!1339 !1340)
!6089 = (!1343 !1344)
!6090 = (!1347 !1348)
!6091 = (!1352 !1353)
!6092 = (!1358 !1359)
!6093 = (!1362 !1363)
!6094 = (!1365 !1366)
!6095 = (!1368 !1369)
!6096 = (!1372 !1373)
!6097 = (!1044 !1045)
!6098 = (!1447 !1448)
!6099 = (!1452 !1453)
!6100 = (!2536 !2537)
!6101 = (!2539 !2540)
!6102 = (!2543 !2544)
!6103 = (!2550 !2551)
!6104 = (!2882 !2883)
!6105 = (!1224 !1225)
!6106 = span !6053 92 190
!6107 = fn_name_span !6053 99 102
!6108 = (!6106 !6107)
!6109 = span !6053 123 184
!6110 = span !6053 149 150
!6111 = span !6053 172 173
!6112 = span !0 30139 30216
!6113 = fn_name_span !0 30142 30152
!6114 = (!6112 !1196 !6113)
!6115 = span !0 30176 30181
!6116 = span !0 30168 30192
!6117 = fn_call_path_span !0 30182 30190
!6118 = (!6116 !6117)
!6119 = span !0 30168 30214
!6120 = fn_call_path_span !0 30193 30202
!6121 = (!6119 !6120)
!6122 = span !6048 1043 1047
!6123 = span !6048 1049 1055
!6124 = span !6048 1012 1704
!6125 = fn_name_span !6048 1019 1042
!6126 = (!6124 !1196 !6125)
!6127 = span !6048 1097 1107
!6128 = fn_call_path_span !6048 1102 1105
!6129 = (!6127 !6128)
!6130 = span !6048 1087 1108
!6131 = span !6048 1120 1123
!6132 = span !6048 1127 1128
!6133 = span !6048 1120 1128
!6134 = fn_call_path_span !6048 1124 1126
!6135 = (!6133 !6134)
!6136 = span !6048 1150 1168
!6137 = fn_call_path_span !6048 1150 1166
!6138 = (!6136 !6137)
!6139 = span !6048 1143 1168
!6140 = span !6048 1188 1206
!6141 = span !6048 1204 1205
!6142 = span !6048 1227 1228
!6143 = span !6048 1218 1228
!6144 = fn_call_path_span !6048 1225 1226
!6145 = (!6143 !6144)
!6146 = span !6048 1243 1260
!6147 = span !6048 1258 1259
!6148 = span !6048 1289 1299
!6149 = fn_call_path_span !6048 1294 1297
!6150 = (!6148 !6149)
!6151 = span !6048 1302 1303
!6152 = span !6048 1289 1303
!6153 = fn_call_path_span !6048 1300 1301
!6154 = (!6152 !6153)
!6155 = span !6048 1273 1304
!6156 = span !6048 1323 1327
!6157 = span !6048 1331 1336
!6158 = span !6048 1323 1336
!6159 = fn_call_path_span !6048 1328 1330
!6160 = (!6158 !6159)
!6161 = span !6048 1365 1369
!6162 = span !6048 1373 1378
!6163 = span !6048 1381 1385
!6164 = span !6048 1373 1385
!6165 = fn_call_path_span !6048 1379 1380
!6166 = (!6164 !6165)
!6167 = span !6048 1389 1390
!6168 = span !6048 1372 1390
!6169 = fn_call_path_span !6048 1387 1388
!6170 = (!6168 !6169)
!6171 = span !6048 1365 1390
!6172 = fn_call_path_span !6048 1370 1371
!6173 = (!6171 !6172)
!6174 = span !6048 1355 1391
!6175 = span !6048 1420 1423
!6176 = span !6048 1411 1424
!6177 = fn_call_path_span !6048 1416 1419
!6178 = (!6176 !6177)
!6179 = span !6048 1411 1433
!6180 = fn_call_path_span !6048 1425 1431
!6181 = (!6179 !6180)
!6182 = span !6048 1411 1440
!6183 = fn_call_path_span !6048 1434 1438
!6184 = (!6182 !6183)
!6185 = span !6048 122 147
!6186 = span !6048 1411 1467
!6187 = fn_call_path_span !6048 1458 1460
!6188 = (!6186 !6187)
!6189 = span !6048 1514 1517
!6190 = span !6048 1506 1517
!6191 = span !6048 1546 1549
!6192 = span !6048 1552 1553
!6193 = span !6048 1546 1553
!6194 = fn_call_path_span !6048 1550 1551
!6195 = (!6193 !6194)
!6196 = span !6048 1539 1553
!6197 = span !6048 1608 1611
!6198 = span !6048 1614 1615
!6199 = span !6048 1608 1615
!6200 = fn_call_path_span !6048 1612 1613
!6201 = (!6199 !6200)
!6202 = span !6048 1600 1615
!6203 = span !6048 1317 1648
!6204 = span !6048 1676 1681
!6205 = span !6048 1667 1682
!6206 = fn_call_path_span !6048 1672 1675
!6207 = (!6205 !6206)
!6208 = span !6048 1667 1691
!6209 = fn_call_path_span !6048 1683 1689
!6210 = (!6208 !6209)
!6211 = span !6048 1667 1698
!6212 = fn_call_path_span !6048 1692 1696
!6213 = (!6211 !6212)
!6214 = (!4479 !1196 !4480)
!6215 = (!4482 !4483)
!6216 = (!4486 !4487)
!6217 = (!4490 !4491)
!6218 = (!2882 !2883)
!6219 = span !6048 175 309
!6220 = fn_name_span !6048 178 181
!6221 = (!6219 !6220)
!6222 = span !6048 202 303
!6223 = span !6048 232 233
!6224 = span !6048 258 259
!6225 = span !6048 291 292
!6226 = (!3204 !1196 !3205)
!6227 = (!3207 !3208)
!6228 = (!3210 !3211)
!6229 = (!3213 !3214)
!6230 = (!3216 !3217)
!6231 = (!2060 !2061)
!6232 = (!2065 !2066)
!6233 = (!2071 !2072)
!6234 = (!1261 !1196 !1262)
!6235 = (!1265 !1266)
!6236 = (!1270 !1271)
!6237 = (!1276 !1277)
!6238 = (!1279 !1280)
!6239 = (!1289 !1290)
!6240 = (!1292 !1293)
!6241 = (!1297 !1298)
!6242 = (!1302 !1303)
!6243 = (!1306 !1307)
!6244 = (!1310 !1311)
!6245 = (!1314 !1315)
!6246 = (!1319 !1320)
!6247 = (!1326 !1327)
!6248 = (!1331 !1332)
!6249 = (!1335 !1336)
!6250 = (!1339 !1340)
!6251 = (!1343 !1344)
!6252 = (!1347 !1348)
!6253 = (!1352 !1353)
!6254 = (!1358 !1359)
!6255 = (!1362 !1363)
!6256 = (!1365 !1366)
!6257 = (!1368 !1369)
!6258 = (!1372 !1373)
!6259 = (!1044 !1045)
!6260 = (!1447 !1448)
!6261 = (!1452 !1453)
!6262 = (!2060 !2061)
!6263 = (!2065 !2066)
!6264 = (!2071 !2072)
!6265 = span !4477 3499 3503
!6266 = span !4477 3505 3510
!6267 = span !4477 3488 4151
!6268 = fn_name_span !4477 3495 3498
!6269 = (!6267 !1196 !6268)
!6270 = span !4477 3574 3589
!6271 = fn_call_path_span !4477 3579 3587
!6272 = (!6270 !6271)
!6273 = span !4477 3591 3592
!6274 = span !4477 3562 3593
!6275 = fn_call_path_span !4477 3562 3566
!6276 = (!6274 !6275)
!6277 = span !4477 3604 3605
!6278 = span !4477 3562 3606
!6279 = fn_call_path_span !4477 3594 3603
!6280 = (!6278 !6279)
!6281 = span !4477 3552 3607
!6282 = span !4477 3698 3701
!6283 = span !4477 3698 3710
!6284 = fn_call_path_span !4477 3702 3704
!6285 = (!6283 !6284)
!6286 = span !4477 3725 3736
!6287 = span !4477 3774 3789
!6288 = fn_call_path_span !4477 3779 3787
!6289 = (!6287 !6288)
!6290 = span !4477 3767 3790
!6291 = fn_call_path_span !4477 3767 3773
!6292 = (!6290 !6291)
!6293 = span !4477 3757 3791
!6294 = span !4477 3813 3842
!6295 = fn_call_path_span !4477 3813 3830
!6296 = (!6294 !6295)
!6297 = span !4477 3800 3843
!6298 = span !4477 4110 4113
!6299 = span !4477 4115 4121
!6300 = span !4477 4138 4141
!6301 = span !4477 4130 4142
!6302 = span !4477 4123 4143
!6303 = fn_call_path_span !4477 4123 4129
!6304 = (!6302 !6303)
!6305 = span !4477 4089 4144
!6306 = fn_call_path_span !4477 4089 4109
!6307 = (!6305 !6306)
!6308 = (!4581 !4582)
!6309 = (!4588 !4589)
!6310 = (!4591 !4592)
!6311 = (!4597 !4598)
!6312 = (!4600 !4601)
!6313 = (!4604 !4605)
!6314 = (!4607 !4608)
!6315 = (!4612 !4613)
!6316 = (!4616 !4617)
!6317 = (!1224 !1225)
!6318 = span !2444 583 589
!6319 = span !2444 604 614
!6320 = span !2444 635 645
!6321 = span !2444 666 671
!6322 = span !2444 691 696
!6323 = span !2444 711 723
!6324 = span !2444 738 750
!6325 = span !2444 765 776
!6326 = span !2444 791 809
!6327 = span !2444 824 842
!6328 = span !2444 857 872
!6329 = span !2444 563 1378
!6330 = fn_name_span !2444 570 573
!6331 = (!6329 !6330)
!6332 = span !2444 911 940
!6333 = fn_call_path_span !2444 922 924
!6334 = (!6332 !6333)
!6335 = span !2444 903 967
!6336 = fn_call_path_span !2444 903 910
!6337 = (!6335 !6336)
!6338 = span !2444 998 1022
!6339 = fn_call_path_span !2444 1004 1006
!6340 = (!6338 !6339)
!6341 = span !2444 1062 1086
!6342 = span !2444 977 1098
!6343 = fn_call_path_span !2444 977 984
!6344 = (!6342 !6343)
!6345 = span !2444 1109 1372
!6346 = (!1532 !1533)
!6347 = (!1535 !1536)
!6348 = (!1538 !1539)
!6349 = (!1543 !1544)
!6350 = span !4270 140 144
!6351 = span !4270 146 151
!6352 = span !4270 134 332
!6353 = fn_name_span !4270 137 139
!6354 = (!6352 !6353)
!6355 = span !4270 183 196
!6356 = span !4270 177 326
!6357 = span !4270 211 235
!6358 = span !4270 211 244
!6359 = fn_call_path_span !4270 211 244
!6360 = (!6358 !6359)
!6361 = (!6358 !6359)
!6362 = span !4270 239 243
!6363 = span !4270 257 283
!6364 = span !4270 257 292
!6365 = fn_call_path_span !4270 257 292
!6366 = (!6364 !6365)
!6367 = (!6364 !6365)
!6368 = span !4270 287 291
!6369 = span !4270 310 315
!6370 = span !0 33981 33985
!6371 = span !0 33960 34162
!6372 = fn_name_span !0 33963 33980
!6373 = (!6371 !193 !6372)
!6374 = span !0 34037 34050
!6375 = span !0 34029 34060
!6376 = fn_call_path_span !0 34051 34054
!6377 = (!6375 !6376)
!6378 = span !0 34029 34071
!6379 = fn_call_path_span !0 34061 34069
!6380 = (!6378 !6379)
!6381 = span !0 34082 34083
!6382 = span !0 34029 34084
!6383 = fn_call_path_span !0 34072 34081
!6384 = (!6382 !6383)
!6385 = span !0 34010 34085
!6386 = span !0 34098 34111
!6387 = span !0 34125 34137
!6388 = span !0 34140 34141
!6389 = span !0 34125 34141
!6390 = fn_call_path_span !0 34138 34139
!6391 = (!6389 !6390)
!6392 = span !0 34090 34142
!6393 = fn_call_path_span !0 34112 34118
!6394 = (!6392 !6393)
!6395 = span !0 34148 34160
!6396 = (!2536 !2537)
!6397 = (!2539 !2540)
!6398 = (!2543 !2544)
!6399 = (!2550 !2551)
!6400 = (!2882 !2883)
!6401 = (!4831 !193 !4832)
!6402 = (!4834 !4835)
!6403 = (!4838 !4839)
!6404 = (!4844 !4845)
!6405 = span !0 30470 30567
!6406 = fn_name_span !0 30473 30493
!6407 = (!6405 !1196 !6406)
!6408 = span !0 30517 30532
!6409 = span !0 30509 30543
!6410 = fn_call_path_span !0 30533 30541
!6411 = (!6409 !6410)
!6412 = span !0 30509 30565
!6413 = fn_call_path_span !0 30544 30553
!6414 = (!6412 !6413)
!6415 = span !2444 1394 1398
!6416 = span !2444 1384 1610
!6417 = fn_name_span !2444 1391 1393
!6418 = (!6416 !6417)
!6419 = span !2444 1447 1465
!6420 = fn_call_path_span !2444 1447 1463
!6421 = (!6419 !6420)
!6422 = span !2444 1446 1478
!6423 = span !2444 1439 1479
!6424 = fn_call_path_span !2444 1439 1445
!6425 = (!6423 !6424)
!6426 = span !2444 428 449
!6427 = span !2444 1425 1603
!6428 = span !2444 1418 1604
!6429 = fn_call_path_span !2444 1418 1424
!6430 = (!6428 !6429)
!6431 = (!2555 !2556 !13)
!6432 = (!2558 !2559)
!6433 = (!2563 !2564)
!6434 = (!2567 !2568)
!6435 = span !2553 5070 5074
!6436 = span !2553 5084 5089
!6437 = span !2553 5062 5246
!6438 = fn_name_span !2553 5065 5069
!6439 = (!6437 !6438)
!6440 = span !2553 5114 5115
!6441 = span !2553 5109 5127
!6442 = fn_call_path_span !2553 5116 5120
!6443 = (!6441 !6442)
!6444 = span !2553 5142 5143
!6445 = span !2553 5137 5155
!6446 = fn_call_path_span !2553 5144 5148
!6447 = (!6445 !6446)
!6448 = span !2553 5170 5171
!6449 = span !2553 5165 5183
!6450 = fn_call_path_span !2553 5172 5176
!6451 = (!6449 !6450)
!6452 = span !2553 5198 5199
!6453 = span !2553 5193 5211
!6454 = fn_call_path_span !2553 5200 5204
!6455 = (!6453 !6454)
!6456 = span !2553 5226 5227
!6457 = span !2553 5221 5239
!6458 = fn_call_path_span !2553 5228 5232
!6459 = (!6457 !6458)
!6460 = span !4270 555 559
!6461 = span !4270 569 574
!6462 = span !4270 547 775
!6463 = fn_name_span !4270 550 554
!6464 = (!6462 !6463)
!6465 = span !4270 594 769
!6466 = span !4270 600 604
!6467 = span !4270 619 682
!6468 = fn_call_path_span !4270 619 682
!6469 = (!6467 !6468)
!6470 = span !4270 651 655
!6471 = span !4270 651 667
!6472 = fn_call_path_span !4270 656 660
!6473 = (!6471 !6472)
!6474 = span !4270 695 759
!6475 = fn_call_path_span !4270 695 759
!6476 = (!6474 !6475)
!6477 = span !4270 728 732
!6478 = span !4270 728 744
!6479 = fn_call_path_span !4270 733 737
!6480 = (!6478 !6479)
!6481 = span !3569 368 372
!6482 = span !3569 382 387
!6483 = span !3569 360 586
!6484 = fn_name_span !3569 363 367
!6485 = (!6483 !6484)
!6486 = span !3569 407 580
!6487 = span !3569 413 417
!6488 = span !3569 432 494
!6489 = fn_call_path_span !3569 432 494
!6490 = (!6488 !6489)
!6491 = span !3569 463 467
!6492 = span !3569 463 479
!6493 = fn_call_path_span !3569 468 472
!6494 = (!6492 !6493)
!6495 = span !3569 507 570
!6496 = fn_call_path_span !3569 507 570
!6497 = (!6495 !6496)
!6498 = span !3569 539 543
!6499 = span !3569 539 555
!6500 = fn_call_path_span !3569 544 548
!6501 = (!6499 !6500)
!6502 = (!2555 !2556 !13)
!6503 = (!2558 !2559)
!6504 = (!2563 !2564)
!6505 = (!2567 !2568)
!6506 = (!2603 !2604 !13)
!6507 = (!2607 !2608)
!6508 = (!2611 !2612)
!6509 = (!2049 !2050)
!6510 = (!2054 !2055)
!6511 = span !4477 956 960
!6512 = span !4477 962 967
!6513 = span !4477 944 1359
!6514 = fn_name_span !4477 951 955
!6515 = (!6513 !193 !6514)
!6516 = span !4477 1004 1019
!6517 = fn_call_path_span !4477 1009 1017
!6518 = (!6516 !6517)
!6519 = span !4477 1021 1022
!6520 = span !4477 992 1023
!6521 = fn_call_path_span !4477 992 996
!6522 = (!6520 !6521)
!6523 = span !4477 1034 1035
!6524 = span !4477 992 1036
!6525 = fn_call_path_span !4477 1024 1033
!6526 = (!6524 !6525)
!6527 = span !4477 982 1037
!6528 = span !4477 1166 1181
!6529 = fn_call_path_span !4477 1171 1179
!6530 = (!6528 !6529)
!6531 = span !4477 1159 1182
!6532 = fn_call_path_span !4477 1159 1165
!6533 = (!6531 !6532)
!6534 = span !4477 1149 1183
!6535 = span !4477 1228 1231
!6536 = span !4477 1205 1232
!6537 = fn_call_path_span !4477 1205 1222
!6538 = (!6536 !6537)
!6539 = span !4477 1192 1233
!6540 = span !4477 1253 1256
!6541 = span !4477 1258 1264
!6542 = span !4477 1242 1272
!6543 = fn_call_path_span !4477 1242 1247
!6544 = (!6542 !6543)
!6545 = span !4477 1324 1339
!6546 = fn_call_path_span !4477 1329 1337
!6547 = (!6545 !6546)
!6548 = span !4477 1344 1347
!6549 = span !4477 1350 1351
!6550 = span !4477 1344 1351
!6551 = fn_call_path_span !4477 1348 1349
!6552 = (!6550 !6551)
!6553 = span !4477 1341 1342
!6554 = span !4477 1318 1352
!6555 = fn_call_path_span !4477 1318 1323
!6556 = (!6554 !6555)
!6557 = (!4831 !193 !4832)
!6558 = (!4834 !4835)
!6559 = (!4838 !4839)
!6560 = (!4844 !4845)
!6561 = (!2173 !193 !2174)
!6562 = (!2177 !2178)
!6563 = (!2181 !2182)
!6564 = (!2187 !2188)
!6565 = (!2190 !2191)
!6566 = (!2201 !2202)
!6567 = (!2204 !2205)
!6568 = (!2214 !2215)
!6569 = span !3409 397 401
!6570 = span !3409 403 409
!6571 = span !3409 416 421
!6572 = span !3409 370 584
!6573 = fn_name_span !3409 377 388
!6574 = (!6572 !6573)
!6575 = span !3409 462 463
!6576 = span !3409 452 463
!6577 = fn_call_path_span !3409 459 461
!6578 = (!6576 !6577)
!6579 = span !3409 444 492
!6580 = fn_call_path_span !3409 444 451
!6581 = (!6579 !6580)
!6582 = span !3409 502 534
!6583 = fn_call_path_span !3409 514 519
!6584 = (!6582 !6583)
!6585 = span !3409 544 577
!6586 = fn_call_path_span !3409 556 562
!6587 = (!6585 !6586)
!6588 = (!1548 !1549)
!6589 = (!1457 !1458)
!6590 = (!1460 !1461)
!6591 = (!1463 !1464)
!6592 = (!1468 !1469)
!6593 = span !34 122 126
!6594 = span !34 128 134
!6595 = span !34 108 588
!6596 = fn_name_span !34 111 121
!6597 = (!6595 !6596)
!6598 = span !4869 355 370
!6599 = span !34 189 219
!6600 = fn_call_path_span !34 201 211
!6601 = (!6599 !6600)
!6602 = span !34 176 220
!6603 = span !4869 376 394
!6604 = span !34 256 262
!6605 = span !34 234 263
!6606 = fn_call_path_span !34 245 255
!6607 = (!6605 !6606)
!6608 = span !34 221 264
!6609 = span !4869 400 425
!6610 = span !34 278 312
!6611 = (!6610 !4884)
!6612 = span !34 265 313
!6613 = span !4869 431 449
!6614 = span !34 352 358
!6615 = span !34 327 359
!6616 = fn_call_path_span !34 341 351
!6617 = (!6615 !6616)
!6618 = span !34 314 360
!6619 = span !4869 455 469
!6620 = span !34 396 402
!6621 = span !34 374 403
!6622 = fn_call_path_span !34 385 395
!6623 = (!6621 !6622)
!6624 = span !34 361 404
!6625 = span !4869 475 493
!6626 = span !34 439 445
!6627 = span !34 418 446
!6628 = fn_call_path_span !34 428 438
!6629 = (!6627 !6628)
!6630 = span !34 405 447
!6631 = span !4869 499 519
!6632 = span !34 485 491
!6633 = span !34 461 492
!6634 = fn_call_path_span !34 474 484
!6635 = (!6633 !6634)
!6636 = span !34 448 493
!6637 = span !4869 525 550
!6638 = span !34 534 540
!6639 = span !34 507 541
!6640 = fn_call_path_span !34 523 533
!6641 = (!6639 !6640)
!6642 = span !34 494 542
!6643 = span !34 564 570
!6644 = span !34 103 430
!6645 = (!6644 !3143)
!6646 = span !34 184 384
!6647 = span !34 197 287
!6648 = fn_call_path_span !34 197 287
!6649 = (!6647 !6648)
!6650 = span !34 241 245
!6651 = span !34 241 264
!6652 = fn_call_path_span !34 246 256
!6653 = (!6651 !6652)
!6654 = span !34 289 380
!6655 = fn_call_path_span !34 289 380
!6656 = (!6654 !6655)
!6657 = span !34 334 338
!6658 = span !34 334 357
!6659 = fn_call_path_span !34 339 349
!6660 = (!6658 !6659)
!6661 = span !34 171 385
!6662 = span !34 406 412
!6663 = span !34 103 613
!6664 = (!6663 !3143)
!6665 = span !34 184 567
!6666 = (!6647 !6648)
!6667 = (!6651 !6652)
!6668 = span !34 289 379
!6669 = fn_call_path_span !34 289 379
!6670 = (!6668 !6669)
!6671 = span !34 333 337
!6672 = span !34 333 356
!6673 = fn_call_path_span !34 338 348
!6674 = (!6672 !6673)
!6675 = span !34 381 471
!6676 = fn_call_path_span !34 381 471
!6677 = (!6675 !6676)
!6678 = span !34 425 429
!6679 = span !34 425 448
!6680 = fn_call_path_span !34 430 440
!6681 = (!6679 !6680)
!6682 = span !34 473 563
!6683 = fn_call_path_span !34 473 563
!6684 = (!6682 !6683)
!6685 = span !34 517 521
!6686 = span !34 517 540
!6687 = fn_call_path_span !34 522 532
!6688 = (!6686 !6687)
!6689 = span !34 171 568
!6690 = span !34 589 595
!6691 = (!3204 !1196 !3205)
!6692 = (!3207 !3208)
!6693 = (!3210 !3211)
!6694 = (!3213 !3214)
!6695 = (!3216 !3217)
!6696 = span !5522 7689 7693
!6697 = span !5522 7695 7700
!6698 = span !5522 7678 8017
!6699 = fn_name_span !5522 7685 7688
!6700 = (!6698 !6699)
!6701 = span !5522 7785 7802
!6702 = fn_call_path_span !5522 7794 7796
!6703 = (!6701 !6702)
!6704 = span !5522 7817 7828
!6705 = span !5522 7922 7936
!6706 = fn_call_path_span !5522 7931 7934
!6707 = (!6705 !6706)
!6708 = span !5522 7922 7952
!6709 = fn_call_path_span !5522 7937 7940
!6710 = (!6708 !6709)
!6711 = span !5522 7912 7953
!6712 = span !5522 7995 7998
!6713 = span !5522 7995 8010
!6714 = fn_call_path_span !5522 7999 8003
!6715 = (!6713 !6714)
!6716 = span !3684 575 576
!6717 = span !3684 583 584
!6718 = span !3684 559 639
!6719 = fn_name_span !3684 566 574
!6720 = (!6718 !6719)
!6721 = span !3684 607 612
!6722 = fn_call_path_span !3684 609 610
!6723 = (!6721 !6722)
!6724 = span !3684 615 620
!6725 = fn_call_path_span !3684 617 618
!6726 = (!6724 !6725)
!6727 = span !3684 630 635
!6728 = fn_call_path_span !3684 632 633
!6729 = (!6727 !6728)
!6730 = span !0 46259 46268
!6731 = span !0 46280 46286
!6732 = span !0 46299 46311
!6733 = span !0 46328 46337
!6734 = span !0 46349 46355
!6735 = span !0 46368 46380
!6736 = span !0 46230 48718
!6737 = fn_name_span !0 46233 46253
!6738 = (!6736 !193 !6737)
!6739 = span !0 46438 46450
!6740 = fn_call_path_span !0 46438 46448
!6741 = (!6739 !6740)
!6742 = span !0 46438 46459
!6743 = fn_call_path_span !0 46451 46457
!6744 = (!6742 !6743)
!6745 = span !0 46424 46460
!6746 = span !0 46483 46532
!6747 = fn_call_path_span !0 46514 46516
!6748 = (!6746 !6747)
!6749 = span !0 46483 46585
!6750 = span !0 46536 46585
!6751 = fn_call_path_span !0 46567 46569
!6752 = (!6750 !6751)
!6753 = span !0 46466 46626
!6754 = fn_call_path_span !0 46466 46473
!6755 = (!6753 !6754)
!6756 = span !0 46668 46706
!6757 = fn_call_path_span !0 46686 46688
!6758 = (!6756 !6757)
!6759 = span !0 46749 46761
!6760 = fn_call_path_span !0 46749 46759
!6761 = (!6759 !6760)
!6762 = span !0 46724 46762
!6763 = span !0 46717 46762
!6764 = span !0 46841 46877
!6765 = fn_call_path_span !0 46859 46861
!6766 = (!6764 !6765)
!6767 = span !0 46888 46954
!6768 = span !0 46976 47042
!6769 = span !0 46775 47049
!6770 = span !0 47115 47122
!6771 = span !0 47131 47138
!6772 = span !0 47115 47144
!6773 = fn_call_path_span !0 47129 47130
!6774 = (!6772 !6773)
!6775 = span !0 47238 47250
!6776 = fn_call_path_span !0 47238 47248
!6777 = (!6775 !6776)
!6778 = span !0 47213 47251
!6779 = span !0 47206 47251
!6780 = span !0 47350 47357
!6781 = span !0 47367 47374
!6782 = span !0 47350 47375
!6783 = fn_call_path_span !0 47358 47366
!6784 = (!6782 !6783)
!6785 = span !0 47386 47393
!6786 = span !0 47421 47428
!6787 = span !0 47329 47441
!6788 = span !0 47530 47537
!6789 = span !0 47546 47553
!6790 = span !0 47526 47561
!6791 = fn_call_path_span !0 47526 47529
!6792 = (!6790 !6791)
!6793 = span !0 47509 47562
!6794 = span !0 47690 47697
!6795 = span !0 47699 47706
!6796 = span !0 47708 47718
!6797 = span !0 47720 47731
!6798 = span !0 47733 47740
!6799 = span !0 47676 47741
!6800 = fn_call_path_span !0 47676 47689
!6801 = (!6799 !6800)
!6802 = span !0 47613 47742
!6803 = span !0 47769 47776
!6804 = span !0 47784 47796
!6805 = span !0 47748 47797
!6806 = fn_call_path_span !0 47748 47768
!6807 = (!6805 !6806)
!6808 = span !0 47824 47831
!6809 = span !0 47839 47851
!6810 = span !0 47803 47852
!6811 = fn_call_path_span !0 47803 47823
!6812 = (!6810 !6811)
!6813 = span !0 47883 47890
!6814 = span !0 47895 47902
!6815 = span !0 47875 47909
!6816 = fn_call_path_span !0 47891 47894
!6817 = (!6815 !6816)
!6818 = span !0 47875 47916
!6819 = fn_call_path_span !0 47910 47914
!6820 = (!6818 !6819)
!6821 = span !0 47859 47917
!6822 = span !0 47946 47953
!6823 = span !0 47958 47965
!6824 = span !0 47938 47972
!6825 = fn_call_path_span !0 47954 47957
!6826 = (!6824 !6825)
!6827 = span !0 47938 47979
!6828 = fn_call_path_span !0 47973 47977
!6829 = (!6827 !6828)
!6830 = span !0 47922 47980
!6831 = span !0 48061 48065
!6832 = span !0 48075 48082
!6833 = span !0 48092 48099
!6834 = span !0 48109 48119
!6835 = span !0 48129 48133
!6836 = span !0 48143 48150
!6837 = span !0 48160 48167
!6838 = span !0 48177 48184
!6839 = span !0 48194 48205
!6840 = span !0 48215 48224
!6841 = span !0 48234 48243
!6842 = span !0 48034 48250
!6843 = fn_call_path_span !0 48034 48051
!6844 = (!6842 !6843)
!6845 = span !0 48374 48384
!6846 = span !0 48394 48401
!6847 = span !0 48411 48415
!6848 = span !0 48425 48444
!6849 = span !0 48454 48461
!6850 = span !0 48471 48475
!6851 = span !0 48485 48504
!6852 = span !0 48344 48511
!6853 = fn_call_path_span !0 48344 48364
!6854 = (!6852 !6853)
!6855 = span !0 48305 48512
!6856 = span !0 48520 48532
!6857 = span !0 48520 48561
!6858 = fn_call_path_span !0 48533 48535
!6859 = (!6857 !6858)
!6860 = span !0 48520 48612
!6861 = span !0 48595 48611
!6862 = span !0 48573 48612
!6863 = fn_call_path_span !0 48573 48594
!6864 = (!6862 !6863)
!6865 = span !0 48659 48671
!6866 = fn_call_path_span !0 48659 48669
!6867 = (!6865 !6866)
!6868 = span !0 48634 48672
!6869 = span !0 48627 48672
!6870 = span !0 48685 48697
!6871 = span !0 48699 48715
!6872 = span !0 48684 48716
!6873 = span !187 9196 9300
!6874 = fn_name_span !187 9203 9207
!6875 = (!6873 !6874)
!6876 = span !187 9228 9294
!6877 = span !2444 2623 2627
!6878 = span !2444 2629 2641
!6879 = span !2444 2607 2718
!6880 = fn_name_span !2444 2614 2622
!6881 = (!6879 !6880)
!6882 = span !2444 2667 2712
!6883 = fn_call_path_span !2444 2685 2686
!6884 = (!6882 !6883)
!6885 = span !158 16797 16801
!6886 = span !158 16803 16808
!6887 = span !158 16791 16857
!6888 = fn_name_span !158 16794 16796
!6889 = (!6887 !6888)
!6890 = span !3684 432 433
!6891 = span !3684 440 441
!6892 = span !3684 421 488
!6893 = fn_name_span !3684 428 431
!6894 = (!6892 !6893)
!6895 = span !3684 464 469
!6896 = fn_call_path_span !3684 466 467
!6897 = (!6895 !6896)
!6898 = span !0 39588 39595
!6899 = span !0 39608 39615
!6900 = span !0 39628 39638
!6901 = span !0 39649 39660
!6902 = span !0 39671 39678
!6903 = span !0 39566 46204
!6904 = fn_name_span !0 39569 39582
!6905 = (!6903 !193 !6904)
!6906 = span !0 39717 39753
!6907 = span !0 39825 39870
!6908 = fn_call_path_span !0 39825 39845
!6909 = (!6907 !6908)
!6910 = span !0 39804 39871
!6911 = span !0 39969 40016
!6912 = fn_call_path_span !0 39969 39989
!6913 = (!6911 !6912)
!6914 = span !0 39948 40017
!6915 = span !0 40111 40125
!6916 = span !0 40128 40142
!6917 = span !0 40111 40142
!6918 = fn_call_path_span !0 40126 40127
!6919 = (!6917 !6918)
!6920 = span !0 40090 40143
!6921 = span !0 40266 40307
!6922 = fn_call_path_span !0 40274 40295
!6923 = (!6921 !6922)
!6924 = span !0 40240 40308
!6925 = span !0 40430 40471
!6926 = fn_call_path_span !0 40438 40459
!6927 = (!6925 !6926)
!6928 = span !0 40404 40472
!6929 = span !0 40642 40656
!6930 = span !0 40602 40657
!6931 = fn_call_path_span !0 40610 40632
!6932 = (!6930 !6931)
!6933 = span !0 40575 40658
!6934 = span !0 40730 40744
!6935 = span !0 40690 40745
!6936 = fn_call_path_span !0 40698 40720
!6937 = (!6935 !6936)
!6938 = span !0 40663 40746
!6939 = span !0 40816 40846
!6940 = fn_call_path_span !0 40830 40832
!6941 = (!6939 !6940)
!6942 = span !0 40883 40890
!6943 = span !0 40875 40909
!6944 = fn_call_path_span !0 40891 40894
!6945 = (!6943 !6944)
!6946 = span !0 40875 40916
!6947 = fn_call_path_span !0 40910 40914
!6948 = (!6946 !6947)
!6949 = span !0 40857 40917
!6950 = span !0 40966 40973
!6951 = span !0 41000 41010
!6952 = span !0 40966 41011
!6953 = fn_call_path_span !0 40974 40987
!6954 = (!6952 !6953)
!6955 = span !0 41173 41180
!6956 = span !0 41208 41222
!6957 = span !0 41277 41291
!6958 = span !0 41225 41292
!6959 = fn_call_path_span !0 41250 41276
!6960 = (!6958 !6959)
!6961 = span !0 41208 41292
!6962 = fn_call_path_span !0 41223 41224
!6963 = (!6961 !6962)
!6964 = span !0 41295 41315
!6965 = span !0 41208 41315
!6966 = fn_call_path_span !0 41293 41294
!6967 = (!6965 !6966)
!6968 = span !0 41318 41337
!6969 = span !0 41208 41337
!6970 = fn_call_path_span !0 41316 41317
!6971 = (!6969 !6970)
!6972 = span !0 41352 41362
!6973 = span !0 41351 41362
!6974 = fn_call_path_span !0 41351 41352
!6975 = (!6973 !6974)
!6976 = span !0 41173 41373
!6977 = fn_call_path_span !0 41181 41194
!6978 = (!6976 !6977)
!6979 = span !0 41391 41398
!6980 = span !0 41421 41428
!6981 = span !0 41383 41429
!6982 = fn_call_path_span !0 41399 41405
!6983 = (!6981 !6982)
!6984 = span !0 41554 41561
!6985 = span !0 41546 41580
!6986 = fn_call_path_span !0 41562 41565
!6987 = (!6985 !6986)
!6988 = span !0 41546 41587
!6989 = fn_call_path_span !0 41581 41585
!6990 = (!6988 !6989)
!6991 = span !0 41526 41588
!6992 = span !0 41625 41632
!6993 = span !0 41617 41651
!6994 = fn_call_path_span !0 41633 41636
!6995 = (!6993 !6994)
!6996 = span !0 41617 41658
!6997 = fn_call_path_span !0 41652 41656
!6998 = (!6996 !6997)
!6999 = span !0 41597 41659
!7000 = span !0 41729 41738
!7001 = span !0 41762 41771
!7002 = span !0 41785 41795
!7003 = span !0 41729 41796
!7004 = fn_call_path_span !0 41739 41761
!7005 = (!7003 !7004)
!7006 = span !0 41806 41815
!7007 = span !0 41839 41848
!7008 = span !0 41850 41864
!7009 = span !0 41867 41877
!7010 = span !0 41866 41877
!7011 = fn_call_path_span !0 41866 41867
!7012 = (!7010 !7011)
!7013 = span !0 41806 41878
!7014 = fn_call_path_span !0 41816 41838
!7015 = (!7013 !7014)
!7016 = span !0 41964 41984
!7017 = span !0 41987 42006
!7018 = span !0 41964 42006
!7019 = fn_call_path_span !0 41985 41986
!7020 = (!7018 !7019)
!7021 = span !0 41949 42007
!7022 = span !0 42019 42027
!7023 = span !0 42030 42031
!7024 = span !0 42019 42031
!7025 = fn_call_path_span !0 42028 42029
!7026 = (!7024 !7025)
!7027 = span !0 42046 42055
!7028 = span !0 42068 42076
!7029 = span !0 42079 42089
!7030 = span !0 42078 42089
!7031 = fn_call_path_span !0 42078 42079
!7032 = (!7030 !7031)
!7033 = span !0 42046 42090
!7034 = fn_call_path_span !0 42056 42067
!7035 = (!7033 !7034)
!7036 = span !0 42174 42188
!7037 = span !0 42226 42240
!7038 = span !0 42191 42241
!7039 = fn_call_path_span !0 42199 42225
!7040 = (!7038 !7039)
!7041 = span !0 42174 42241
!7042 = fn_call_path_span !0 42189 42190
!7043 = (!7041 !7042)
!7044 = span !0 42244 42264
!7045 = span !0 42174 42264
!7046 = fn_call_path_span !0 42242 42243
!7047 = (!7045 !7046)
!7048 = span !0 42155 42265
!7049 = span !0 42277 42289
!7050 = span !0 42292 42293
!7051 = span !0 42277 42293
!7052 = fn_call_path_span !0 42290 42291
!7053 = (!7051 !7052)
!7054 = span !0 42308 42317
!7055 = span !0 42332 42344
!7056 = span !0 42347 42357
!7057 = span !0 42346 42357
!7058 = fn_call_path_span !0 42346 42347
!7059 = (!7057 !7058)
!7060 = span !0 42308 42358
!7061 = fn_call_path_span !0 42318 42331
!7062 = (!7060 !7061)
!7063 = span !0 42425 42432
!7064 = span !0 42455 42464
!7065 = span !0 42417 42465
!7066 = fn_call_path_span !0 42433 42439
!7067 = (!7065 !7066)
!7068 = span !0 42483 42490
!7069 = span !0 42513 42522
!7070 = span !0 42475 42523
!7071 = fn_call_path_span !0 42491 42497
!7072 = (!7070 !7071)
!7073 = span !0 42593 42612
!7074 = span !0 42615 42616
!7075 = span !0 42593 42616
!7076 = fn_call_path_span !0 42613 42614
!7077 = (!7075 !7076)
!7078 = span !0 42670 42694
!7079 = fn_call_path_span !0 42684 42686
!7080 = (!7078 !7079)
!7081 = span !0 42735 42742
!7082 = span !0 42727 42761
!7083 = fn_call_path_span !0 42743 42746
!7084 = (!7082 !7083)
!7085 = span !0 42727 42768
!7086 = fn_call_path_span !0 42762 42766
!7087 = (!7085 !7086)
!7088 = span !0 42709 42769
!7089 = span !0 42782 42789
!7090 = span !0 42804 42823
!7091 = span !0 42826 42836
!7092 = span !0 42825 42836
!7093 = fn_call_path_span !0 42825 42826
!7094 = (!7092 !7093)
!7095 = span !0 42782 42837
!7096 = fn_call_path_span !0 42790 42803
!7097 = (!7095 !7096)
!7098 = span !0 42859 42866
!7099 = span !0 42889 42896
!7100 = span !0 42851 42897
!7101 = fn_call_path_span !0 42867 42873
!7102 = (!7100 !7101)
!7103 = span !0 43059 43066
!7104 = span !0 43051 43085
!7105 = fn_call_path_span !0 43067 43070
!7106 = (!7104 !7105)
!7107 = span !0 43051 43092
!7108 = fn_call_path_span !0 43086 43090
!7109 = (!7107 !7108)
!7110 = span !0 43031 43093
!7111 = span !0 43134 43141
!7112 = span !0 43126 43154
!7113 = fn_call_path_span !0 43142 43145
!7114 = (!7112 !7113)
!7115 = span !0 43126 43165
!7116 = fn_call_path_span !0 43155 43163
!7117 = (!7115 !7116)
!7118 = span !0 43176 43190
!7119 = fn_call_path_span !0 43176 43188
!7120 = (!7118 !7119)
!7121 = span !0 43126 43191
!7122 = fn_call_path_span !0 43166 43175
!7123 = (!7121 !7122)
!7124 = span !0 43106 43192
!7125 = span !0 43205 43214
!7126 = span !0 43238 43247
!7127 = span !0 43249 43268
!7128 = span !0 43271 43281
!7129 = span !0 43270 43281
!7130 = fn_call_path_span !0 43270 43271
!7131 = (!7129 !7130)
!7132 = span !0 43205 43282
!7133 = fn_call_path_span !0 43215 43237
!7134 = (!7132 !7133)
!7135 = span !0 43304 43311
!7136 = span !0 43334 43343
!7137 = span !0 43296 43344
!7138 = fn_call_path_span !0 43312 43318
!7139 = (!7137 !7138)
!7140 = span !0 43366 43373
!7141 = span !0 43390 43399
!7142 = span !0 43358 43400
!7143 = fn_call_path_span !0 43374 43380
!7144 = (!7142 !7143)
!7145 = span !0 43479 43498
!7146 = span !0 43501 43502
!7147 = span !0 43479 43502
!7148 = fn_call_path_span !0 43499 43500
!7149 = (!7147 !7148)
!7150 = span !0 43555 43579
!7151 = fn_call_path_span !0 43569 43571
!7152 = (!7150 !7151)
!7153 = span !0 43620 43627
!7154 = span !0 43612 43646
!7155 = fn_call_path_span !0 43628 43631
!7156 = (!7154 !7155)
!7157 = span !0 43612 43653
!7158 = fn_call_path_span !0 43647 43651
!7159 = (!7157 !7158)
!7160 = span !0 43594 43654
!7161 = span !0 43667 43674
!7162 = span !0 43689 43708
!7163 = span !0 43711 43721
!7164 = span !0 43710 43721
!7165 = fn_call_path_span !0 43710 43711
!7166 = (!7164 !7165)
!7167 = span !0 43667 43722
!7168 = fn_call_path_span !0 43675 43688
!7169 = (!7167 !7168)
!7170 = span !0 43744 43751
!7171 = span !0 43774 43781
!7172 = span !0 43736 43782
!7173 = fn_call_path_span !0 43752 43758
!7174 = (!7172 !7173)
!7175 = span !0 43943 43950
!7176 = span !0 43935 43969
!7177 = fn_call_path_span !0 43951 43954
!7178 = (!7176 !7177)
!7179 = span !0 43935 43976
!7180 = fn_call_path_span !0 43970 43974
!7181 = (!7179 !7180)
!7182 = span !0 43915 43977
!7183 = span !0 44018 44025
!7184 = span !0 44010 44038
!7185 = fn_call_path_span !0 44026 44029
!7186 = (!7184 !7185)
!7187 = span !0 44010 44049
!7188 = fn_call_path_span !0 44039 44047
!7189 = (!7187 !7188)
!7190 = span !0 44060 44074
!7191 = fn_call_path_span !0 44060 44072
!7192 = (!7190 !7191)
!7193 = span !0 44010 44075
!7194 = fn_call_path_span !0 44050 44059
!7195 = (!7193 !7194)
!7196 = span !0 43990 44076
!7197 = span !0 44089 44098
!7198 = span !0 44122 44131
!7199 = span !0 44133 44152
!7200 = span !0 44155 44165
!7201 = span !0 44154 44165
!7202 = fn_call_path_span !0 44154 44155
!7203 = (!7201 !7202)
!7204 = span !0 44089 44166
!7205 = fn_call_path_span !0 44099 44121
!7206 = (!7204 !7205)
!7207 = span !0 44188 44195
!7208 = span !0 44218 44227
!7209 = span !0 44180 44228
!7210 = fn_call_path_span !0 44196 44202
!7211 = (!7209 !7210)
!7212 = span !0 44250 44257
!7213 = span !0 44274 44283
!7214 = span !0 44242 44284
!7215 = fn_call_path_span !0 44258 44264
!7216 = (!7214 !7215)
!7217 = span !0 44319 44335
!7218 = fn_call_path_span !0 44319 44333
!7219 = (!7217 !7218)
!7220 = span !0 44307 44336
!7221 = span !0 44398 44418
!7222 = span !0 44421 44422
!7223 = span !0 44398 44422
!7224 = fn_call_path_span !0 44419 44420
!7225 = (!7223 !7224)
!7226 = span !0 44500 44505
!7227 = span !0 44483 44505
!7228 = fn_call_path_span !0 44497 44499
!7229 = (!7227 !7228)
!7230 = span !0 44546 44553
!7231 = span !0 44538 44572
!7232 = fn_call_path_span !0 44554 44557
!7233 = (!7231 !7232)
!7234 = span !0 44538 44579
!7235 = fn_call_path_span !0 44573 44577
!7236 = (!7234 !7235)
!7237 = span !0 44520 44580
!7238 = span !0 44593 44600
!7239 = span !0 44615 44635
!7240 = span !0 44638 44648
!7241 = span !0 44637 44648
!7242 = fn_call_path_span !0 44637 44638
!7243 = (!7241 !7242)
!7244 = span !0 44593 44649
!7245 = fn_call_path_span !0 44601 44614
!7246 = (!7244 !7245)
!7247 = span !0 44671 44678
!7248 = span !0 44701 44708
!7249 = span !0 44663 44709
!7250 = fn_call_path_span !0 44679 44685
!7251 = (!7249 !7250)
!7252 = span !0 44884 44891
!7253 = span !0 44876 44910
!7254 = fn_call_path_span !0 44892 44895
!7255 = (!7253 !7254)
!7256 = span !0 44876 44917
!7257 = fn_call_path_span !0 44911 44915
!7258 = (!7256 !7257)
!7259 = span !0 44856 44918
!7260 = span !0 44959 44966
!7261 = span !0 44971 44976
!7262 = span !0 44951 44977
!7263 = fn_call_path_span !0 44967 44970
!7264 = (!7262 !7263)
!7265 = span !0 44951 44988
!7266 = fn_call_path_span !0 44978 44986
!7267 = (!7265 !7266)
!7268 = span !0 44999 45013
!7269 = fn_call_path_span !0 44999 45011
!7270 = (!7268 !7269)
!7271 = span !0 44951 45014
!7272 = fn_call_path_span !0 44989 44998
!7273 = (!7271 !7272)
!7274 = span !0 44931 45015
!7275 = span !0 45028 45037
!7276 = span !0 45061 45070
!7277 = span !0 45072 45092
!7278 = span !0 45095 45105
!7279 = span !0 45094 45105
!7280 = fn_call_path_span !0 45094 45095
!7281 = (!7279 !7280)
!7282 = span !0 45028 45106
!7283 = fn_call_path_span !0 45038 45060
!7284 = (!7282 !7283)
!7285 = span !0 45128 45135
!7286 = span !0 45158 45167
!7287 = span !0 45120 45168
!7288 = fn_call_path_span !0 45136 45142
!7289 = (!7287 !7288)
!7290 = span !0 45190 45197
!7291 = span !0 45205 45210
!7292 = span !0 45212 45221
!7293 = span !0 45182 45222
!7294 = fn_call_path_span !0 45198 45204
!7295 = (!7293 !7294)
!7296 = span !0 45300 45320
!7297 = span !0 45323 45324
!7298 = span !0 45300 45324
!7299 = fn_call_path_span !0 45321 45322
!7300 = (!7298 !7299)
!7301 = span !0 45401 45406
!7302 = span !0 45384 45406
!7303 = fn_call_path_span !0 45398 45400
!7304 = (!7302 !7303)
!7305 = span !0 45447 45454
!7306 = span !0 45439 45473
!7307 = fn_call_path_span !0 45455 45458
!7308 = (!7306 !7307)
!7309 = span !0 45439 45480
!7310 = fn_call_path_span !0 45474 45478
!7311 = (!7309 !7310)
!7312 = span !0 45421 45481
!7313 = span !0 45494 45501
!7314 = span !0 45516 45536
!7315 = span !0 45539 45549
!7316 = span !0 45538 45549
!7317 = fn_call_path_span !0 45538 45539
!7318 = (!7316 !7317)
!7319 = span !0 45494 45550
!7320 = fn_call_path_span !0 45502 45515
!7321 = (!7319 !7320)
!7322 = span !0 45572 45579
!7323 = span !0 45602 45609
!7324 = span !0 45564 45610
!7325 = fn_call_path_span !0 45580 45586
!7326 = (!7324 !7325)
!7327 = span !0 45784 45791
!7328 = span !0 45776 45810
!7329 = fn_call_path_span !0 45792 45795
!7330 = (!7328 !7329)
!7331 = span !0 45776 45817
!7332 = fn_call_path_span !0 45811 45815
!7333 = (!7331 !7332)
!7334 = span !0 45756 45818
!7335 = span !0 45859 45866
!7336 = span !0 45871 45876
!7337 = span !0 45851 45877
!7338 = fn_call_path_span !0 45867 45870
!7339 = (!7337 !7338)
!7340 = span !0 45851 45888
!7341 = fn_call_path_span !0 45878 45886
!7342 = (!7340 !7341)
!7343 = span !0 45899 45913
!7344 = fn_call_path_span !0 45899 45911
!7345 = (!7343 !7344)
!7346 = span !0 45851 45914
!7347 = fn_call_path_span !0 45889 45898
!7348 = (!7346 !7347)
!7349 = span !0 45831 45915
!7350 = span !0 45928 45937
!7351 = span !0 45961 45970
!7352 = span !0 45972 45992
!7353 = span !0 45995 46005
!7354 = span !0 45994 46005
!7355 = fn_call_path_span !0 45994 45995
!7356 = (!7354 !7355)
!7357 = span !0 45928 46006
!7358 = fn_call_path_span !0 45938 45960
!7359 = (!7357 !7358)
!7360 = span !0 46028 46035
!7361 = span !0 46058 46067
!7362 = span !0 46020 46068
!7363 = fn_call_path_span !0 46036 46042
!7364 = (!7362 !7363)
!7365 = span !0 46090 46097
!7366 = span !0 46105 46110
!7367 = span !0 46112 46121
!7368 = span !0 46082 46122
!7369 = fn_call_path_span !0 46098 46104
!7370 = (!7368 !7369)
!7371 = span !0 46145 46159
!7372 = span !0 46161 46180
!7373 = span !0 46182 46201
!7374 = span !0 46144 46202
!7375 = span !2444 2520 2524
!7376 = span !2444 2526 2532
!7377 = span !2444 2491 2601
!7378 = fn_name_span !2444 2498 2519
!7379 = (!7377 !7378)
!7380 = span !2444 2556 2581
!7381 = fn_call_path_span !2444 2573 2574
!7382 = (!7380 !7381)
!7383 = span !2444 2556 2595
!7384 = fn_call_path_span !2444 2582 2583
!7385 = (!7383 !7384)
!7386 = span !2444 2238 2242
!7387 = span !2444 2244 2256
!7388 = span !2444 2264 2270
!7389 = span !2444 2208 2485
!7390 = fn_name_span !2444 2215 2237
!7391 = (!7389 !7390)
!7392 = span !2444 2297 2342
!7393 = fn_call_path_span !2444 2315 2316
!7394 = (!7392 !7393)
!7395 = span !2444 2357 2398
!7396 = fn_call_path_span !2444 2362 2390
!7397 = (!7395 !7396)
!7398 = span !2444 2428 2469
!7399 = fn_call_path_span !2444 2433 2461
!7400 = (!7398 !7399)
!7401 = span !2444 1976 1980
!7402 = span !2444 1982 1988
!7403 = span !2444 1940 2068
!7404 = fn_name_span !2444 1947 1975
!7405 = (!7403 !7404)
!7406 = span !2444 2012 2044
!7407 = fn_call_path_span !2444 2019 2020
!7408 = (!7406 !7407)
!7409 = span !2444 2012 2062
!7410 = fn_call_path_span !2444 2045 2046
!7411 = (!7409 !7410)
!7412 = span !2444 2110 2114
!7413 = span !2444 2116 2122
!7414 = span !2444 2074 2202
!7415 = fn_name_span !2444 2081 2109
!7416 = (!7414 !7415)
!7417 = span !2444 2146 2178
!7418 = fn_call_path_span !2444 2153 2154
!7419 = (!7417 !7418)
!7420 = span !2444 2146 2196
!7421 = fn_call_path_span !2444 2179 2180
!7422 = (!7420 !7421)
!7423 = span !3409 861 865
!7424 = span !3409 883 885
!7425 = span !3409 904 910
!7426 = span !3409 925 930
!7427 = span !3409 814 1097
!7428 = fn_name_span !3409 821 843
!7429 = (!7427 !7428)
!7430 = span !3409 973 974
!7431 = span !3409 963 974
!7432 = fn_call_path_span !3409 970 972
!7433 = (!7431 !7432)
!7434 = span !3409 955 1007
!7435 = fn_call_path_span !3409 955 962
!7436 = (!7434 !7435)
!7437 = span !3409 1017 1048
!7438 = fn_call_path_span !3409 1027 1033
!7439 = (!7437 !7438)
!7440 = span !3409 1058 1090
!7441 = fn_call_path_span !3409 1070 1075
!7442 = (!7440 !7441)
!7443 = span !0 30586 30756
!7444 = fn_name_span !0 30589 30603
!7445 = (!7443 !1196 !7444)
!7446 = span !0 30630 30647
!7447 = fn_call_path_span !0 30630 30645
!7448 = (!7446 !7447)
!7449 = span !0 30624 30754
!7450 = span !0 30658 30699
!7451 = fn_call_path_span !0 30658 30699
!7452 = (!7450 !7451)
!7453 = span !0 30677 30685
!7454 = span !0 30690 30698
!7455 = span !0 30731 30746
!7456 = fn_call_path_span !0 30731 30744
!7457 = (!7455 !7456)
!7458 = span !1648 1079 1165
!7459 = fn_name_span !1648 1086 1090
!7460 = (!7458 !7459)
!7461 = span !1648 1136 1148
!7462 = fn_call_path_span !1648 1136 1146
!7463 = (!7461 !7462)
!7464 = span !1648 1111 1159
!7465 = span !0 37653 37657
!7466 = span !0 37669 37675
!7467 = span !0 37629 37995
!7468 = fn_name_span !0 37632 37652
!7469 = (!7467 !193 !7468)
!7470 = span !0 37688 37714
!7471 = fn_call_path_span !0 37688 37712
!7472 = (!7470 !7471)
!7473 = span !0 37737 37749
!7474 = span !0 37822 37834
!7475 = span !0 37797 37861
!7476 = fn_call_path_span !0 37852 37855
!7477 = (!7475 !7476)
!7478 = span !0 37797 37889
!7479 = fn_call_path_span !0 37879 37887
!7480 = (!7478 !7479)
!7481 = span !0 37917 37934
!7482 = fn_call_path_span !0 37917 37932
!7483 = (!7481 !7482)
!7484 = span !0 37797 37935
!7485 = fn_call_path_span !0 37907 37916
!7486 = (!7484 !7485)
!7487 = span !0 37960 37972
!7488 = fn_call_path_span !0 37960 37970
!7489 = (!7487 !7488)
!7490 = span !0 37797 37981
!7491 = fn_call_path_span !0 37953 37959
!7492 = (!7490 !7491)
!7493 = span !0 37720 37992
!7494 = fn_call_path_span !0 37759 37765
!7495 = (!7493 !7494)
!7496 = span !0 32670 33010
!7497 = fn_name_span !0 32673 32697
!7498 = (!7496 !1495 !7497)
!7499 = span !0 32727 32748
!7500 = fn_call_path_span !0 32727 32746
!7501 = (!7499 !7500)
!7502 = span !0 32706 32749
!7503 = span !0 32766 32778
!7504 = fn_call_path_span !0 32766 32776
!7505 = (!7503 !7504)
!7506 = span !0 32781 32795
!7507 = span !0 32766 32795
!7508 = fn_call_path_span !0 32779 32780
!7509 = (!7507 !7508)
!7510 = span !0 32754 32796
!7511 = span !0 32817 32834
!7512 = fn_call_path_span !0 32817 32832
!7513 = (!7511 !7512)
!7514 = span !0 32801 32835
!7515 = span !0 32844 32849
!7516 = span !0 32853 32862
!7517 = span !0 32844 32862
!7518 = fn_call_path_span !0 32850 32852
!7519 = (!7517 !7518)
!7520 = span !0 32881 32886
!7521 = span !0 32893 32902
!7522 = span !0 32873 32903
!7523 = fn_call_path_span !0 32887 32892
!7524 = (!7522 !7523)
!7525 = span !0 32952 32961
!7526 = span !0 32975 32989
!7527 = span !0 32917 33000
!7528 = span !0 32913 33001
!7529 = fn_call_path_span !0 32913 32916
!7530 = (!7528 !7529)
!7531 = span !0 30235 30337
!7532 = fn_name_span !0 30238 30257
!7533 = (!7531 !1196 !7532)
!7534 = span !0 30281 30295
!7535 = span !0 30273 30306
!7536 = fn_call_path_span !0 30296 30304
!7537 = (!7535 !7536)
!7538 = span !0 1763 1770
!7539 = span !0 30273 30335
!7540 = fn_call_path_span !0 30307 30316
!7541 = (!7539 !7540)
!7542 = span !3092 1296 1358
!7543 = fn_name_span !3092 1303 1312
!7544 = (!7542 !7543)
!7545 = span !3092 1347 1355
!7546 = fn_call_path_span !3092 1347 1353
!7547 = (!7545 !7546)
!7548 = span !3092 1328 1356
!7549 = fn_call_path_span !3092 1328 1346
!7550 = (!7548 !7549)
!7551 = span !3092 2181 2193
!7552 = span !3092 2155 2313
!7553 = fn_name_span !3092 2162 2180
!7554 = (!7552 !7553)
!7555 = span !3092 2213 2311
!7556 = span !3092 2260 2281
!7557 = (!2158 !193 !2159)
!7558 = (!2161 !2162)
!7559 = (!2164 !2165)
!7560 = (!2167 !2168)
!7561 = (!1548 !1549)
!7562 = (!1457 !1458)
!7563 = (!1460 !1461)
!7564 = (!1463 !1464)
!7565 = (!1468 !1469)
!7566 = span !34 121 125
!7567 = span !34 127 133
!7568 = span !34 107 317
!7569 = fn_name_span !34 110 120
!7570 = (!7568 !7569)
!7571 = span !4869 1442 1456
!7572 = span !34 188 217
!7573 = (!7572 !5351)
!7574 = span !34 175 218
!7575 = span !4869 1462 1485
!7576 = span !34 263 269
!7577 = span !34 232 270
!7578 = fn_call_path_span !34 252 262
!7579 = (!7577 !7578)
!7580 = span !34 219 271
!7581 = span !34 293 299
!7582 = (!4831 !193 !4832)
!7583 = (!4834 !4835)
!7584 = (!4838 !4839)
!7585 = (!4844 !4845)
!7586 = (!2173 !193 !2174)
!7587 = (!2177 !2178)
!7588 = (!2181 !2182)
!7589 = (!2187 !2188)
!7590 = (!2190 !2191)
!7591 = (!2201 !2202)
!7592 = (!2204 !2205)
!7593 = (!2214 !2215)
!7594 = span !6053 382 386
!7595 = span !6053 388 402
!7596 = span !6053 409 415
!7597 = span !6053 360 628
!7598 = fn_name_span !6053 367 373
!7599 = (!7597 !7598)
!7600 = span !6053 443 470
!7601 = fn_call_path_span !6053 454 455
!7602 = (!7600 !7601)
!7603 = span !6053 485 512
!7604 = span !6053 526 546
!7605 = span !6053 577 598
!7606 = fn_call_path_span !6053 589 591
!7607 = (!7605 !7606)
!7608 = span !0 49894 49898
!7609 = span !0 49910 49917
!7610 = span !0 49930 49937
!7611 = span !0 49954 49964
!7612 = span !0 49975 49979
!7613 = span !0 49991 49998
!7614 = span !0 50011 50018
!7615 = span !0 50035 50042
!7616 = span !0 50058 50069
!7617 = span !0 50080 50089
!7618 = span !0 50104 50113
!7619 = span !0 49868 50696
!7620 = fn_name_span !0 49871 49888
!7621 = (!7619 !7620)
!7622 = span !0 50462 50476
!7623 = fn_call_path_span !0 50462 50474
!7624 = (!7622 !7623)
!7625 = span !0 50493 50500
!7626 = fn_call_path_span !0 50493 50498
!7627 = (!7625 !7626)
!7628 = span !0 50660 50685
!7629 = fn_call_path_span !0 50668 50676
!7630 = (!7628 !7629)
!7631 = span !0 50178 50692
!7632 = span !0 50174 50693
!7633 = fn_call_path_span !0 50174 50177
!7634 = (!7632 !7633)
!7635 = (!1548 !1549)
!7636 = (!1457 !1458)
!7637 = (!1460 !1461)
!7638 = (!1463 !1464)
!7639 = (!1468 !1469)
!7640 = span !34 109 951
!7641 = (!7640 !2317)
!7642 = span !4869 695 723
!7643 = span !34 190 232
!7644 = fn_call_path_span !34 214 224
!7645 = (!7643 !7644)
!7646 = span !34 177 233
!7647 = span !4869 729 756
!7648 = span !34 281 287
!7649 = span !34 247 288
!7650 = fn_call_path_span !34 270 280
!7651 = (!7649 !7650)
!7652 = span !34 234 289
!7653 = span !4869 762 798
!7654 = span !34 341 347
!7655 = span !34 303 348
!7656 = fn_call_path_span !34 330 340
!7657 = (!7655 !7656)
!7658 = span !34 290 349
!7659 = span !4869 804 839
!7660 = span !34 400 406
!7661 = span !34 363 407
!7662 = fn_call_path_span !34 389 399
!7663 = (!7661 !7662)
!7664 = span !34 350 408
!7665 = span !4869 845 872
!7666 = span !34 452 458
!7667 = span !34 422 459
!7668 = fn_call_path_span !34 441 451
!7669 = (!7667 !7668)
!7670 = span !34 409 460
!7671 = span !4869 878 897
!7672 = span !34 501 507
!7673 = span !34 474 508
!7674 = fn_call_path_span !34 490 500
!7675 = (!7673 !7674)
!7676 = span !34 461 509
!7677 = span !4869 903 923
!7678 = span !34 551 557
!7679 = span !34 523 558
!7680 = fn_call_path_span !34 540 550
!7681 = (!7679 !7680)
!7682 = span !34 510 559
!7683 = span !4869 929 950
!7684 = span !34 602 608
!7685 = span !34 573 609
!7686 = fn_call_path_span !34 591 601
!7687 = (!7685 !7686)
!7688 = span !34 560 610
!7689 = span !4869 956 971
!7690 = span !34 646 652
!7691 = span !34 624 653
!7692 = fn_call_path_span !34 635 645
!7693 = (!7691 !7692)
!7694 = span !34 611 654
!7695 = span !4869 977 1003
!7696 = span !34 697 703
!7697 = span !34 668 704
!7698 = fn_call_path_span !34 686 696
!7699 = (!7697 !7698)
!7700 = span !34 655 705
!7701 = span !4869 1009 1034
!7702 = span !34 747 753
!7703 = span !34 719 754
!7704 = fn_call_path_span !34 736 746
!7705 = (!7703 !7704)
!7706 = span !34 706 755
!7707 = span !4869 1040 1062
!7708 = span !34 795 801
!7709 = span !34 769 802
!7710 = fn_call_path_span !34 784 794
!7711 = (!7709 !7710)
!7712 = span !34 756 803
!7713 = span !4869 1068 1090
!7714 = span !34 843 849
!7715 = span !34 817 850
!7716 = fn_call_path_span !34 832 842
!7717 = (!7715 !7716)
!7718 = span !34 804 851
!7719 = span !4869 1096 1121
!7720 = span !34 897 903
!7721 = span !34 865 904
!7722 = fn_call_path_span !34 886 896
!7723 = (!7721 !7722)
!7724 = span !34 852 905
!7725 = span !34 927 933
!7726 = span !7 4820 4824
!7727 = span !7 4826 4832
!7728 = span !7 4806 4951
!7729 = fn_name_span !7 4809 4819
!7730 = (!7728 !7729)
!7731 = span !7 4862 4945
!7732 = span !1921 15569 15658
!7733 = fn_name_span !1921 15576 15581
!7734 = (!7732 !7733)
!7735 = span !1921 15279 15280
!7736 = span !1921 15598 15649
!7737 = span !1921 15598 15656
!7738 = fn_call_path_span !1921 15650 15654
!7739 = (!7737 !7738)
!7740 = span !0 48773 48779
!7741 = span !0 48798 48804
!7742 = span !0 48817 48820
!7743 = span !0 48832 48850
!7744 = span !0 48869 48875
!7745 = span !0 48888 48891
!7746 = span !0 48903 48921
!7747 = span !0 48744 49866
!7748 = fn_name_span !0 48747 48767
!7749 = (!7747 !193 !7748)
!7750 = span !0 49017 49040
!7751 = fn_call_path_span !0 49024 49026
!7752 = (!7750 !7751)
!7753 = span !0 49051 49082
!7754 = fn_call_path_span !0 49051 49063
!7755 = (!7753 !7754)
!7756 = span !0 49153 49176
!7757 = fn_call_path_span !0 49160 49162
!7758 = (!7756 !7757)
!7759 = span !0 49187 49218
!7760 = fn_call_path_span !0 49187 49199
!7761 = (!7759 !7760)
!7762 = span !0 49233 49256
!7763 = fn_call_path_span !0 49240 49242
!7764 = (!7762 !7763)
!7765 = span !0 49325 49365
!7766 = fn_call_path_span !0 49344 49346
!7767 = (!7765 !7766)
!7768 = span !0 49375 49398
!7769 = fn_call_path_span !0 49389 49391
!7770 = (!7768 !7769)
!7771 = span !0 49416 49422
!7772 = span !0 49408 49442
!7773 = fn_call_path_span !0 49423 49429
!7774 = (!7772 !7773)
!7775 = span !0 49459 49491
!7776 = span !0 49452 49491
!7777 = span !0 49507 49530
!7778 = fn_call_path_span !0 49514 49516
!7779 = (!7777 !7778)
!7780 = span !0 49600 49640
!7781 = fn_call_path_span !0 49619 49621
!7782 = (!7780 !7781)
!7783 = span !0 49650 49673
!7784 = fn_call_path_span !0 49664 49666
!7785 = (!7783 !7784)
!7786 = span !0 49691 49697
!7787 = span !0 49683 49717
!7788 = fn_call_path_span !0 49698 49704
!7789 = (!7787 !7788)
!7790 = span !0 49734 49766
!7791 = span !0 49727 49766
!7792 = span !0 49851 49863
!7793 = fn_call_path_span !0 49851 49861
!7794 = (!7792 !7793)
!7795 = span !0 49826 49864
!7796 = span !5705 143 147
!7797 = span !5705 149 154
!7798 = span !5705 137 415
!7799 = fn_name_span !5705 140 142
!7800 = (!7798 !7799)
!7801 = span !5705 186 199
!7802 = span !5705 180 409
!7803 = span !5705 214 248
!7804 = span !5705 214 257
!7805 = fn_call_path_span !5705 214 257
!7806 = (!7804 !7805)
!7807 = (!7804 !7805)
!7808 = span !5705 252 256
!7809 = span !5705 270 310
!7810 = span !5705 270 319
!7811 = fn_call_path_span !5705 270 319
!7812 = (!7810 !7811)
!7813 = (!7810 !7811)
!7814 = span !5705 314 318
!7815 = span !5705 332 366
!7816 = span !5705 332 375
!7817 = fn_call_path_span !5705 332 375
!7818 = (!7816 !7817)
!7819 = (!7816 !7817)
!7820 = span !5705 370 374
!7821 = span !5705 393 398
!7822 = (!2060 !2061)
!7823 = (!2065 !2066)
!7824 = (!2071 !2072)
!7825 = span !0 29583 29588
!7826 = span !0 29559 29808
!7827 = fn_name_span !0 29562 29582
!7828 = (!7826 !1196 !7827)
!7829 = span !0 29629 29648
!7830 = fn_call_path_span !0 29629 29641
!7831 = (!7829 !7830)
!7832 = span !0 29623 29806
!7833 = span !0 29659 29781
!7834 = fn_call_path_span !0 29659 29781
!7835 = (!7833 !7834)
!7836 = span !0 29664 29673
!7837 = span !0 29689 29698
!7838 = span !0 29683 29779
!7839 = span !0 29713 29717
!7840 = span !0 29713 29736
!7841 = fn_call_path_span !0 29713 29736
!7842 = (!7840 !7841)
!7843 = (!1532 !1533)
!7844 = (!1535 !1536)
!7845 = (!1538 !1539)
!7846 = (!1543 !1544)
!7847 = (!1548 !1549)
!7848 = (!1457 !1458)
!7849 = (!1460 !1461)
!7850 = (!1463 !1464)
!7851 = (!1468 !1469)
!7852 = span !34 104 772
!7853 = (!7852 !2123)
!7854 = span !34 185 726
!7855 = span !34 198 410
!7856 = fn_call_path_span !34 198 410
!7857 = (!7855 !7856)
!7858 = span !34 220 225
!7859 = span !34 269 273
!7860 = span !34 269 292
!7861 = fn_call_path_span !34 274 284
!7862 = (!7860 !7861)
!7863 = span !34 256 293
!7864 = span !34 331 336
!7865 = span !34 348 354
!7866 = span !34 331 355
!7867 = fn_call_path_span !34 337 347
!7868 = (!7866 !7867)
!7869 = span !34 318 356
!7870 = span !34 381 387
!7871 = span !34 412 513
!7872 = fn_call_path_span !34 412 513
!7873 = (!7871 !7872)
!7874 = span !34 467 471
!7875 = span !34 467 490
!7876 = fn_call_path_span !34 472 482
!7877 = (!7875 !7876)
!7878 = span !34 515 618
!7879 = fn_call_path_span !34 515 618
!7880 = (!7878 !7879)
!7881 = span !34 572 576
!7882 = span !34 572 595
!7883 = fn_call_path_span !34 577 587
!7884 = (!7882 !7883)
!7885 = span !34 620 722
!7886 = fn_call_path_span !34 620 722
!7887 = (!7885 !7886)
!7888 = span !34 676 680
!7889 = span !34 676 699
!7890 = fn_call_path_span !34 681 691
!7891 = (!7889 !7890)
!7892 = span !34 172 727
!7893 = span !34 748 754
!7894 = (!3017 !3018)
!7895 = (!3021 !3022)
!7896 = (!3027 !3028)
!7897 = span !5507 163 167
!7898 = span !5507 169 174
!7899 = span !5507 157 437
!7900 = fn_name_span !5507 160 162
!7901 = (!7899 !7900)
!7902 = span !5507 206 219
!7903 = span !5507 200 431
!7904 = span !5507 234 256
!7905 = span !5507 234 265
!7906 = fn_call_path_span !5507 234 265
!7907 = (!7905 !7906)
!7908 = (!7905 !7906)
!7909 = span !5507 260 264
!7910 = span !5507 278 300
!7911 = span !5507 278 309
!7912 = fn_call_path_span !5507 278 309
!7913 = (!7911 !7912)
!7914 = (!7911 !7912)
!7915 = span !5507 304 308
!7916 = span !5507 322 344
!7917 = span !5507 322 353
!7918 = fn_call_path_span !5507 322 353
!7919 = (!7917 !7918)
!7920 = (!7917 !7918)
!7921 = span !5507 348 352
!7922 = span !5507 366 388
!7923 = span !5507 366 397
!7924 = fn_call_path_span !5507 366 397
!7925 = (!7923 !7924)
!7926 = (!7923 !7924)
!7927 = span !5507 392 396
!7928 = span !5507 415 420
!7929 = (!1457 !1458)
!7930 = (!1460 !1461)
!7931 = (!1463 !1464)
!7932 = (!1468 !1469)
!7933 = span !0 3918 3927
!7934 = span !0 3894 3997
!7935 = fn_name_span !0 3897 3917
!7936 = (!7934 !193 !7935)
!7937 = span !0 3949 3990
!7938 = fn_call_path_span !0 3949 3979
!7939 = (!7937 !7938)
!7940 = span !1507 2726 2735
!7941 = span !1507 2698 3007
!7942 = fn_name_span !1507 2705 2725
!7943 = (!7941 !193 !7942)
!7944 = span !1507 2770 2778
!7945 = fn_call_path_span !1507 2770 2776
!7946 = (!7944 !7945)
!7947 = span !1507 2770 2802
!7948 = fn_call_path_span !1507 2779 2781
!7949 = (!7947 !7948)
!7950 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/ownership/errors.sw"
!7951 = span !7950 51 164
!7952 = span !1507 2753 2859
!7953 = fn_call_path_span !1507 2753 2760
!7954 = (!7952 !7953)
!7955 = span !1507 2905 2906
!7956 = span !1507 2882 2914
!7957 = fn_call_path_span !1507 2882 2897
!7958 = (!7956 !7957)
!7959 = span !1507 2866 2915
!7960 = span !1507 2920 2929
!7961 = span !1507 2920 2966
!7962 = fn_call_path_span !1507 2930 2935
!7963 = (!7961 !7962)
!7964 = span !1507 2977 3003
!7965 = span !1507 2973 3004
!7966 = fn_call_path_span !1507 2973 2976
!7967 = (!7965 !7966)
!7968 = (!1532 !1533)
!7969 = (!1535 !1536)
!7970 = (!1538 !1539)
!7971 = (!1543 !1544)
!7972 = (!1548 !1549)
!7973 = (!1457 !1458)
!7974 = (!1460 !1461)
!7975 = (!1463 !1464)
!7976 = (!1468 !1469)
!7977 = span !34 127 131
!7978 = span !34 133 139
!7979 = span !34 113 373
!7980 = fn_name_span !34 116 126
!7981 = (!7979 !7980)
!7982 = span !34 194 327
!7983 = span !34 200 204
!7984 = span !34 207 323
!7985 = fn_call_path_span !34 207 323
!7986 = (!7984 !7985)
!7987 = span !34 277 281
!7988 = span !34 277 300
!7989 = fn_call_path_span !34 282 292
!7990 = (!7988 !7989)
!7991 = span !34 181 328
!7992 = span !34 349 355
!7993 = (!2158 !193 !2159)
!7994 = (!2161 !2162)
!7995 = (!2164 !2165)
!7996 = (!2167 !2168)
!7997 = (!2173 !193 !2174)
!7998 = (!2177 !2178)
!7999 = (!2181 !2182)
!8000 = (!2187 !2188)
!8001 = (!2190 !2191)
!8002 = (!2201 !2202)
!8003 = (!2204 !2205)
!8004 = (!2214 !2215)
!8005 = (!1548 !1549)
!8006 = (!1457 !1458)
!8007 = (!1460 !1461)
!8008 = (!1463 !1464)
!8009 = (!1468 !1469)
!8010 = span !34 106 267
!8011 = (!8010 !3503)
!8012 = "/home/kebradalaonda/.forc/git/checkouts/sway_libs-30641758e4be7209/e19f96f85ae12426d20adc176b70aa38fd9a2a5b/libs/src/ownership/events.sw"
!8013 = span !8012 282 305
!8014 = span !34 187 220
!8015 = fn_call_path_span !34 202 212
!8016 = (!8014 !8015)
!8017 = span !34 174 221
!8018 = span !34 243 249
!8019 = (!44 !45)
!8020 = (!47 !48)
!8021 = (!2273 !2274)
!8022 = (!2276 !2277)
!8023 = span !0 11192 11198
!8024 = span !0 11172 13564
!8025 = fn_name_span !0 11175 11191
!8026 = (!8024 !193 !8025)
!8027 = span !0 11221 11241
!8028 = fn_call_path_span !0 11221 11239
!8029 = (!8027 !8028)
!8030 = span !0 11251 11269
!8031 = fn_call_path_span !0 11251 11267
!8032 = (!8030 !8031)
!8033 = span !0 11288 11300
!8034 = fn_call_path_span !0 11295 11298
!8035 = (!8033 !8034)
!8036 = span !0 11304 11305
!8037 = span !0 11288 11305
!8038 = fn_call_path_span !0 11301 11303
!8039 = (!8037 !8038)
!8040 = span !0 11280 11338
!8041 = fn_call_path_span !0 11280 11287
!8042 = (!8040 !8041)
!8043 = span !0 11359 11371
!8044 = fn_call_path_span !0 11366 11369
!8045 = (!8043 !8044)
!8046 = span !0 11349 11372
!8047 = span !0 11381 11398
!8048 = span !0 11396 11397
!8049 = span !0 11407 11424
!8050 = span !0 11422 11423
!8051 = span !0 11433 11458
!8052 = span !0 11456 11457
!8053 = span !0 11478 11482
!8054 = span !0 11484 11488
!8055 = span !0 11490 11493
!8056 = span !0 11474 11494
!8057 = fn_call_path_span !0 11474 11477
!8058 = (!8056 !8057)
!8059 = span !0 11512 11516
!8060 = span !0 11520 11524
!8061 = span !0 11512 11524
!8062 = fn_call_path_span !0 11517 11519
!8063 = (!8061 !8062)
!8064 = span !0 11543 11547
!8065 = span !0 11551 11552
!8066 = span !0 11543 11552
!8067 = fn_call_path_span !0 11548 11550
!8068 = (!8066 !8067)
!8069 = span !0 11628 11632
!8070 = span !0 11617 11633
!8071 = fn_call_path_span !0 11624 11627
!8072 = (!8070 !8071)
!8073 = span !0 11617 11642
!8074 = fn_call_path_span !0 11634 11640
!8075 = (!8073 !8074)
!8076 = span !0 11607 11643
!8077 = span !0 11677 11683
!8078 = span !0 11688 11691
!8079 = span !0 11669 11692
!8080 = fn_call_path_span !0 11684 11687
!8081 = (!8079 !8080)
!8082 = span !0 11669 11703
!8083 = fn_call_path_span !0 11693 11701
!8084 = (!8082 !8083)
!8085 = span !0 11656 11704
!8086 = span !0 11720 11726
!8087 = span !0 11720 11736
!8088 = fn_call_path_span !0 11727 11734
!8089 = (!8087 !8088)
!8090 = span !0 11835 11839
!8091 = span !0 11843 11844
!8092 = span !0 11835 11844
!8093 = fn_call_path_span !0 11840 11842
!8094 = (!8092 !8093)
!8095 = span !0 11920 11924
!8096 = span !0 11909 11925
!8097 = fn_call_path_span !0 11916 11919
!8098 = (!8096 !8097)
!8099 = span !0 11909 11934
!8100 = fn_call_path_span !0 11926 11932
!8101 = (!8099 !8100)
!8102 = span !0 11899 11935
!8103 = span !0 11969 11975
!8104 = span !0 11980 11983
!8105 = span !0 11961 11984
!8106 = fn_call_path_span !0 11976 11979
!8107 = (!8105 !8106)
!8108 = span !0 11961 11995
!8109 = fn_call_path_span !0 11985 11993
!8110 = (!8108 !8109)
!8111 = span !0 11948 11996
!8112 = span !0 12012 12018
!8113 = span !0 12012 12028
!8114 = fn_call_path_span !0 12019 12026
!8115 = (!8113 !8114)
!8116 = span !0 12127 12131
!8117 = span !0 12135 12136
!8118 = span !0 12127 12136
!8119 = fn_call_path_span !0 12132 12134
!8120 = (!8118 !8119)
!8121 = span !0 12311 12314
!8122 = span !0 12332 12338
!8123 = span !0 12332 12368
!8124 = fn_call_path_span !0 12360 12366
!8125 = (!8123 !8124)
!8126 = span !0 12407 12410
!8127 = span !0 12386 12411
!8128 = fn_call_path_span !0 12386 12406
!8129 = (!8127 !8128)
!8130 = span !0 12386 12441
!8131 = fn_call_path_span !0 12433 12439
!8132 = (!8130 !8131)
!8133 = span !0 12459 12462
!8134 = span !0 12480 12486
!8135 = span !0 12480 12516
!8136 = fn_call_path_span !0 12508 12514
!8137 = (!8135 !8136)
!8138 = span !0 12555 12558
!8139 = span !0 12534 12559
!8140 = fn_call_path_span !0 12534 12554
!8141 = (!8139 !8140)
!8142 = span !0 12534 12589
!8143 = fn_call_path_span !0 12581 12587
!8144 = (!8142 !8143)
!8145 = span !0 12273 12604
!8146 = fn_call_path_span !0 12273 12293
!8147 = (!8145 !8146)
!8148 = span !0 12234 12605
!8149 = span !0 12625 12637
!8150 = span !0 12619 13486
!8151 = span !0 12656 12855
!8152 = fn_call_path_span !0 12656 12855
!8153 = (!8151 !8152)
!8154 = span !0 12791 12795
!8155 = span !0 12798 12802
!8156 = span !0 12791 12802
!8157 = fn_call_path_span !0 12796 12797
!8158 = (!8156 !8157)
!8159 = span !0 12805 12809
!8160 = span !0 12813 12814
!8161 = span !0 12805 12814
!8162 = fn_call_path_span !0 12810 12812
!8163 = (!8161 !8162)
!8164 = span !0 12825 12829
!8165 = span !0 12833 12834
!8166 = span !0 12825 12834
!8167 = fn_call_path_span !0 12830 12832
!8168 = (!8166 !8167)
!8169 = span !0 12872 13212
!8170 = fn_call_path_span !0 12872 13212
!8171 = (!8169 !8170)
!8172 = span !0 13009 13025
!8173 = span !0 13029 13032
!8174 = span !0 13009 13032
!8175 = fn_call_path_span !0 13026 13028
!8176 = (!8174 !8175)
!8177 = span !0 13059 13063
!8178 = span !0 13067 13068
!8179 = span !0 13059 13068
!8180 = fn_call_path_span !0 13064 13066
!8181 = (!8179 !8180)
!8182 = span !0 13123 13127
!8183 = span !0 13131 13132
!8184 = span !0 13123 13132
!8185 = fn_call_path_span !0 13128 13130
!8186 = (!8184 !8185)
!8187 = span !0 13176 13188
!8188 = span !0 13192 13193
!8189 = span !0 13176 13193
!8190 = fn_call_path_span !0 13189 13191
!8191 = (!8189 !8190)
!8192 = span !0 13229 13472
!8193 = fn_call_path_span !0 13229 13472
!8194 = (!8192 !8193)
!8195 = span !0 13362 13366
!8196 = span !0 13368 13372
!8197 = span !0 13358 13373
!8198 = fn_call_path_span !0 13358 13361
!8199 = (!8197 !8198)
!8200 = span !0 13376 13377
!8201 = span !0 13358 13377
!8202 = fn_call_path_span !0 13374 13375
!8203 = (!8201 !8202)
!8204 = span !0 13351 13377
!8205 = span !0 13406 13410
!8206 = span !0 13413 13414
!8207 = span !0 13406 13414
!8208 = fn_call_path_span !0 13411 13412
!8209 = (!8207 !8208)
!8210 = span !0 13399 13414
!8211 = span !0 13436 13448
!8212 = span !0 13452 13453
!8213 = span !0 13436 13453
!8214 = fn_call_path_span !0 13449 13451
!8215 = (!8213 !8214)
!8216 = span !0 13513 13525
!8217 = span !0 13528 13529
!8218 = span !0 13513 13529
!8219 = fn_call_path_span !0 13526 13527
!8220 = (!8218 !8219)
!8221 = span !0 13505 13557
!8222 = fn_call_path_span !0 13505 13512
!8223 = (!8221 !8222)
!8224 = span !3684 357 358
!8225 = span !3684 365 366
!8226 = span !3684 373 376
!8227 = span !3684 346 419
!8228 = fn_name_span !3684 353 356
!8229 = (!8227 !8228)
!8230 = span !3684 398 405
!8231 = fn_call_path_span !3684 400 401
!8232 = (!8230 !8231)
!8233 = span !3684 398 416
!8234 = span !3684 409 416
!8235 = fn_call_path_span !3684 411 412
!8236 = (!8234 !8235)
!8237 = (!44 !45)
!8238 = (!47 !48)
!8239 = span !7 102471 102477
!8240 = span !7 102449 102586
!8241 = fn_name_span !7 102452 102462
!8242 = (!8240 !8241)
!8243 = span !7 102512 102533
!8244 = fn_call_path_span !7 102512 102525
!8245 = (!8243 !8244)
!8246 = span !7 102535 102556
!8247 = fn_call_path_span !7 102535 102548
!8248 = (!8246 !8247)
!8249 = span !7 102558 102579
!8250 = fn_call_path_span !7 102558 102571
!8251 = (!8249 !8250)
!8252 = span !7 102511 102580
!8253 = span !0 9706 9712
!8254 = span !0 9719 9729
!8255 = span !0 9742 9747
!8256 = span !0 9685 10059
!8257 = fn_name_span !0 9688 9705
!8258 = (!8256 !193 !8257)
!8259 = span !0 9772 9792
!8260 = fn_call_path_span !0 9772 9790
!8261 = (!8259 !8260)
!8262 = span !0 9802 9820
!8263 = fn_call_path_span !0 9802 9818
!8264 = (!8262 !8263)
!8265 = span !0 9936 9954
!8266 = fn_call_path_span !0 9936 9952
!8267 = (!8265 !8266)
!8268 = span !0 9840 9993
!8269 = fn_call_path_span !0 9840 9859
!8270 = (!8268 !8269)
!8271 = span !0 9831 9994
!8272 = span !0 10011 10024
!8273 = span !0 10032 10034
!8274 = span !0 10036 10040
!8275 = span !0 10003 10041
!8276 = fn_call_path_span !0 10025 10031
!8277 = (!8275 !8276)
!8278 = span !0 10051 10053
!8279 = span !0 30031 30120
!8280 = fn_name_span !0 30034 30050
!8281 = (!8279 !1196 !8280)
!8282 = span !0 30074 30085
!8283 = span !0 30066 30096
!8284 = fn_call_path_span !0 30086 30094
!8285 = (!8283 !8284)
!8286 = span !0 30066 30118
!8287 = fn_call_path_span !0 30097 30106
!8288 = (!8286 !8287)
!8289 = (!4831 !193 !4832)
!8290 = (!4834 !4835)
!8291 = (!4838 !4839)
!8292 = (!4844 !4845)
!8293 = span !0 8757 8763
!8294 = span !0 8770 8780
!8295 = span !0 8793 8798
!8296 = span !0 8743 9041
!8297 = fn_name_span !0 8746 8756
!8298 = (!8296 !193 !8297)
!8299 = span !0 8823 8843
!8300 = fn_call_path_span !0 8823 8841
!8301 = (!8299 !8300)
!8302 = span !0 8853 8871
!8303 = fn_call_path_span !0 8853 8869
!8304 = (!8302 !8303)
!8305 = span !0 8978 8996
!8306 = fn_call_path_span !0 8978 8994
!8307 = (!8305 !8306)
!8308 = span !0 8882 9035
!8309 = fn_call_path_span !0 8882 8901
!8310 = (!8308 !8309)
!8311 = (!44 !45)
!8312 = (!47 !48)
!8313 = span !7 102250 102256
!8314 = span !7 102228 102342
!8315 = fn_name_span !7 102231 102241
!8316 = (!8314 !8315)
!8317 = span !7 102291 102312
!8318 = fn_call_path_span !7 102291 102304
!8319 = (!8317 !8318)
!8320 = span !7 102314 102335
!8321 = fn_call_path_span !7 102314 102327
!8322 = (!8320 !8321)
!8323 = span !7 102290 102336
!8324 = span !0 19018 19023
!8325 = span !0 19030 19044
!8326 = span !0 19005 19538
!8327 = fn_name_span !0 19008 19017
!8328 = (!8326 !1495 !8327)
!8329 = span !0 19061 19083
!8330 = fn_call_path_span !0 19061 19081
!8331 = (!8329 !8330)
!8332 = span !0 19114 19126
!8333 = fn_call_path_span !0 19114 19124
!8334 = (!8332 !8333)
!8335 = span !0 19094 19127
!8336 = span !0 19146 19163
!8337 = fn_call_path_span !0 19146 19161
!8338 = (!8336 !8337)
!8339 = span !0 19136 19164
!8340 = span !0 19204 19217
!8341 = span !0 19195 19217
!8342 = fn_call_path_span !0 19201 19203
!8343 = (!8341 !8342)
!8344 = span !0 19195 19251
!8345 = span !0 19222 19244
!8346 = fn_call_path_span !0 19228 19229
!8347 = (!8345 !8346)
!8348 = span !0 19247 19250
!8349 = span !0 19222 19250
!8350 = fn_call_path_span !0 19245 19246
!8351 = (!8349 !8350)
!8352 = span !0 19291 19304
!8353 = span !0 19329 19332
!8354 = span !0 19290 19333
!8355 = span !0 19174 19345
!8356 = fn_call_path_span !0 19174 19181
!8357 = (!8355 !8356)
!8358 = span !0 19364 19369
!8359 = span !0 19356 19382
!8360 = fn_call_path_span !0 19370 19375
!8361 = (!8359 !8360)
!8362 = span !0 19400 19414
!8363 = span !0 19392 19436
!8364 = fn_call_path_span !0 19415 19420
!8365 = (!8363 !8364)
!8366 = span !0 19451 19530
!8367 = span !0 19447 19531
!8368 = fn_call_path_span !0 19447 19450
!8369 = (!8367 !8368)
!8370 = (!44 !45)
!8371 = (!47 !48)
!8372 = (!2273 !2274)
!8373 = (!2276 !2277)
!8374 = span !0 21833 21839
!8375 = span !0 21814 22053
!8376 = fn_name_span !0 21817 21832
!8377 = (!8375 !193 !8376)
!8378 = span !0 21856 21878
!8379 = fn_call_path_span !0 21856 21876
!8380 = (!8378 !8379)
!8381 = span !0 21906 21924
!8382 = fn_call_path_span !0 21906 21922
!8383 = (!8381 !8382)
!8384 = span !0 21896 21924
!8385 = fn_call_path_span !0 21903 21905
!8386 = (!8384 !8385)
!8387 = span !0 21888 21955
!8388 = fn_call_path_span !0 21888 21895
!8389 = (!8387 !8388)
!8390 = span !0 21973 21984
!8391 = span !0 21965 21998
!8392 = fn_call_path_span !0 21985 21990
!8393 = (!8391 !8392)
!8394 = span !0 22013 22045
!8395 = span !0 22009 22046
!8396 = fn_call_path_span !0 22009 22012
!8397 = (!8395 !8396)
!8398 = (!1548 !1549)
!8399 = (!1457 !1458)
!8400 = (!1460 !1461)
!8401 = (!1463 !1464)
!8402 = (!1468 !1469)
!8403 = span !34 129 133
!8404 = span !34 135 141
!8405 = span !34 115 273
!8406 = fn_name_span !34 118 128
!8407 = (!8405 !8406)
!8408 = span !4869 1605 1620
!8409 = span !34 196 226
!8410 = fn_call_path_span !34 208 218
!8411 = (!8409 !8410)
!8412 = span !34 183 227
!8413 = span !34 249 255
!8414 = span !0 23681 23686
!8415 = span !0 23658 23940
!8416 = fn_name_span !0 23661 23680
!8417 = (!8415 !193 !8416)
!8418 = span !0 23703 23725
!8419 = fn_call_path_span !0 23703 23723
!8420 = (!8418 !8419)
!8421 = span !0 23765 23787
!8422 = fn_call_path_span !0 23765 23785
!8423 = (!8421 !8422)
!8424 = span !0 23756 23787
!8425 = fn_call_path_span !0 23762 23764
!8426 = (!8424 !8425)
!8427 = span !0 23735 23840
!8428 = fn_call_path_span !0 23735 23742
!8429 = (!8427 !8428)
!8430 = span !0 23858 23873
!8431 = span !0 23850 23886
!8432 = fn_call_path_span !0 23874 23879
!8433 = (!8431 !8432)
!8434 = span !0 23901 23932
!8435 = span !0 23897 23933
!8436 = fn_call_path_span !0 23897 23900
!8437 = (!8435 !8436)
!8438 = (!1548 !1549)
!8439 = (!1457 !1458)
!8440 = (!1460 !1461)
!8441 = (!1463 !1464)
!8442 = (!1468 !1469)
!8443 = span !34 115 272
!8444 = (!8443 !8406)
!8445 = span !4869 1786 1800
!8446 = span !34 196 225
!8447 = fn_call_path_span !34 207 217
!8448 = (!8446 !8447)
!8449 = span !34 183 226
!8450 = span !34 248 254
!8451 = span !0 22757 22761
!8452 = span !0 22735 22974
!8453 = fn_name_span !0 22738 22756
!8454 = (!8452 !193 !8453)
!8455 = span !0 22778 22800
!8456 = fn_call_path_span !0 22778 22798
!8457 = (!8455 !8456)
!8458 = span !0 22826 22847
!8459 = fn_call_path_span !0 22826 22845
!8460 = (!8458 !8459)
!8461 = span !0 22818 22847
!8462 = fn_call_path_span !0 22823 22825
!8463 = (!8461 !8462)
!8464 = span !0 22810 22878
!8465 = fn_call_path_span !0 22810 22817
!8466 = (!8464 !8465)
!8467 = span !0 22896 22910
!8468 = span !0 22888 22922
!8469 = fn_call_path_span !0 22911 22916
!8470 = (!8468 !8469)
!8471 = span !0 22937 22966
!8472 = span !0 22933 22967
!8473 = fn_call_path_span !0 22933 22936
!8474 = (!8472 !8473)
!8475 = (!1548 !1549)
!8476 = (!1457 !1458)
!8477 = (!1460 !1461)
!8478 = (!1463 !1464)
!8479 = (!1468 !1469)
!8480 = span !34 128 132
!8481 = span !34 134 140
!8482 = span !34 114 270
!8483 = fn_name_span !34 117 127
!8484 = (!8482 !8483)
!8485 = span !4869 1729 1742
!8486 = span !34 195 223
!8487 = (!8486 !4872)
!8488 = span !34 182 224
!8489 = span !34 246 252
!8490 = (!44 !45)
!8491 = (!47 !48)
!8492 = (!2273 !2274)
!8493 = (!2276 !2277)
!8494 = (!5524 !5525)
!8495 = (!5527 !5528)
!8496 = (!5532 !5533)
!8497 = (!5540 !5541)
!8498 = (!5543 !5544)
!8499 = (!5549 !5550)
!8500 = (!5554 !5555)
!8501 = (!5559 !5560)
!8502 = (!5562 !5563)
!8503 = (!5568 !5569)
!8504 = (!5571 !5572)
!8505 = (!1436 !1437)
!8506 = (!1439 !1440)
!8507 = span !34 105 315
!8508 = (!8507 !1559)
!8509 = span !34 197 219
!8510 = fn_call_path_span !34 204 210
!8511 = (!8509 !8510)
!8512 = span !34 231 253
!8513 = fn_call_path_span !34 238 244
!8514 = (!8512 !8513)
!8515 = span !34 272 294
!8516 = fn_call_path_span !34 279 285
!8517 = (!8515 !8516)
!8518 = span !34 179 297
!8519 = (!5579 !5580)
!8520 = (!5584 !5585)
!8521 = (!5587 !5588)
!8522 = (!5590 !5591)
!8523 = (!5593 !5594)
!8524 = (!5596 !5597)
!8525 = (!5601 !5602)
!8526 = (!5605 !5606)
!8527 = (!5609 !5610)
!8528 = (!5614 !5615)
!8529 = (!5618 !5619)
!8530 = (!5623 !5624)
!8531 = (!5629 !5630)
!8532 = (!5638 !5639)
!8533 = (!5641 !5642)
!8534 = (!5644 !5645)
!8535 = (!5649 !5650)
!8536 = (!5653 !5654)
!8537 = (!2828 !2829)
!8538 = (!1040 !1041)
!8539 = (!5660 !5661)
!8540 = (!2214 !2215)
!8541 = span !0 20534 20546
!8542 = span !0 20514 21116
!8543 = fn_name_span !0 20517 20533
!8544 = (!8542 !1495 !8543)
!8545 = span !0 20576 20598
!8546 = fn_call_path_span !0 20576 20596
!8547 = (!8545 !8546)
!8548 = span !0 20612 20630
!8549 = fn_call_path_span !0 20625 20628
!8550 = (!8548 !8549)
!8551 = span !0 20633 20634
!8552 = span !0 20612 20634
!8553 = fn_call_path_span !0 20631 20632
!8554 = (!8552 !8553)
!8555 = span !0 20712 20713
!8556 = span !0 20674 20714
!8557 = fn_call_path_span !0 20708 20711
!8558 = (!8556 !8557)
!8559 = span !0 20674 20744
!8560 = fn_call_path_span !0 20736 20742
!8561 = (!8559 !8560)
!8562 = span !0 20786 20787
!8563 = span !0 20674 20787
!8564 = fn_call_path_span !0 20783 20785
!8565 = (!8563 !8564)
!8566 = span !0 20649 20851
!8567 = fn_call_path_span !0 20649 20656
!8568 = (!8566 !8567)
!8569 = span !0 20892 20949
!8570 = fn_call_path_span !0 20922 20947
!8571 = (!8569 !8570)
!8572 = span !0 20871 21003
!8573 = fn_call_path_span !0 20871 20878
!8574 = (!8572 !8573)
!8575 = span !0 21021 21033
!8576 = span !0 21013 21057
!8577 = fn_call_path_span !0 21034 21043
!8578 = (!8576 !8577)
!8579 = span !0 21072 21108
!8580 = span !0 21068 21109
!8581 = fn_call_path_span !0 21068 21071
!8582 = (!8580 !8581)
!8583 = (!5861 !5862)
!8584 = (!6698 !6699)
!8585 = (!6701 !6702)
!8586 = (!6705 !6706)
!8587 = (!6708 !6709)
!8588 = (!6713 !6714)
!8589 = span !6048 374 378
!8590 = span !6048 341 940
!8591 = fn_name_span !6048 348 373
!8592 = (!8590 !8591)
!8593 = span !6048 413 424
!8594 = fn_call_path_span !6048 418 422
!8595 = (!8593 !8594)
!8596 = span !6048 398 425
!8597 = span !6048 449 453
!8598 = span !6048 449 460
!8599 = fn_call_path_span !6048 454 458
!8600 = (!8598 !8599)
!8601 = span !6048 434 461
!8602 = span !6048 470 490
!8603 = span !6048 485 489
!8604 = span !6048 499 520
!8605 = span !6048 515 519
!8606 = span !6048 536 540
!8607 = span !6048 536 550
!8608 = fn_call_path_span !6048 541 548
!8609 = (!8607 !8608)
!8610 = span !6048 588 592
!8611 = span !6048 588 601
!8612 = fn_call_path_span !6048 593 599
!8613 = (!8611 !8612)
!8614 = span !6048 565 619
!8615 = span !6048 635 639
!8616 = span !6048 642 658
!8617 = span !6048 635 658
!8618 = fn_call_path_span !6048 640 641
!8619 = (!8617 !8618)
!8620 = span !6048 635 730
!8621 = span !6048 679 683
!8622 = span !6048 687 688
!8623 = span !6048 679 688
!8624 = fn_call_path_span !6048 684 686
!8625 = (!8623 !8624)
!8626 = span !6048 679 729
!8627 = span !6048 708 724
!8628 = span !6048 728 729
!8629 = span !6048 708 729
!8630 = fn_call_path_span !6048 725 727
!8631 = (!8629 !8630)
!8632 = span !6048 768 784
!8633 = span !6048 761 784
!8634 = span !6048 809 813
!8635 = span !6048 809 820
!8636 = fn_call_path_span !6048 814 818
!8637 = (!8635 !8636)
!8638 = span !6048 802 820
!8639 = span !6048 859 872
!8640 = span !6048 867 872
!8641 = span !6048 929 934
!8642 = span !5522 14847 14851
!8643 = span !5522 14835 14950
!8644 = fn_name_span !5522 14842 14846
!8645 = (!8643 !8644)
!8646 = span !5522 14877 14944
!8647 = span !5522 14932 14933
!8648 = span !5522 16715 16719
!8649 = span !5522 16699 16895
!8650 = fn_name_span !5522 16702 16706
!8651 = (!8649 !8650)
!8652 = span !5522 16627 16637
!8653 = span !5522 16607 16621
!8654 = span !5522 16770 16787
!8655 = fn_call_path_span !5522 16782 16785
!8656 = (!8654 !8655)
!8657 = span !5522 16756 16787
!8658 = fn_call_path_span !5522 16767 16769
!8659 = (!8657 !8658)
!8660 = span !5522 16802 16813
!8661 = span !5522 16847 16848
!8662 = span !5522 16833 16848
!8663 = fn_call_path_span !5522 16844 16846
!8664 = (!8662 !8663)
!8665 = span !5522 16887 16888
!8666 = span !5522 16874 16888
!8667 = fn_call_path_span !5522 16885 16886
!8668 = (!8666 !8667)
!8669 = span !5522 16858 16889
!8670 = fn_call_path_span !5522 16870 16873
!8671 = (!8669 !8670)
!8672 = (!3033 !3034)
!8673 = (!3038 !3039)
!8674 = span !4477 23726 23730
!8675 = span !4477 23732 23735
!8676 = span !4477 23709 25423
!8677 = fn_name_span !4477 23716 23725
!8678 = (!8676 !1495 !8677)
!8679 = span !4477 23755 23791
!8680 = span !4477 23916 23928
!8681 = span !4477 23931 23932
!8682 = span !4477 23916 23932
!8683 = fn_call_path_span !4477 23929 23930
!8684 = (!8682 !8683)
!8685 = span !4477 23963 23981
!8686 = fn_call_path_span !4477 23967 23979
!8687 = (!8685 !8686)
!8688 = span !4477 23947 23982
!8689 = span !4477 24021 24030
!8690 = fn_call_path_span !4477 24025 24028
!8691 = (!8689 !8690)
!8692 = span !4477 24017 24018
!8693 = span !4477 24017 24030
!8694 = fn_call_path_span !4477 24019 24020
!8695 = (!8693 !8694)
!8696 = span !4477 23995 24031
!8697 = span !4477 24066 24081
!8698 = span !4477 24054 24082
!8699 = fn_call_path_span !4477 24054 24065
!8700 = (!8698 !8699)
!8701 = span !4477 24044 24083
!8702 = span !4477 24096 24110
!8703 = span !4477 24108 24109
!8704 = span !4477 24129 24130
!8705 = span !4477 24133 24142
!8706 = fn_call_path_span !4477 24137 24140
!8707 = (!8705 !8706)
!8708 = span !4477 24129 24142
!8709 = fn_call_path_span !4477 24131 24132
!8710 = (!8708 !8709)
!8711 = span !4477 24279 24288
!8712 = span !4477 24279 24315
!8713 = fn_call_path_span !4477 24310 24313
!8714 = (!8712 !8713)
!8715 = span !4477 24346 24347
!8716 = span !4477 24279 24348
!8717 = fn_call_path_span !4477 24337 24340
!8718 = (!8716 !8717)
!8719 = span !4477 24384 24387
!8720 = span !4477 24408 24409
!8721 = span !4477 24404 24405
!8722 = span !4477 24404 24409
!8723 = fn_call_path_span !4477 24406 24407
!8724 = (!8722 !8723)
!8725 = span !4477 24384 24410
!8726 = fn_call_path_span !4477 24388 24403
!8727 = (!8725 !8726)
!8728 = span !4477 24412 24424
!8729 = span !4477 24279 24425
!8730 = fn_call_path_span !4477 24370 24383
!8731 = (!8729 !8730)
!8732 = span !4477 24443 24444
!8733 = span !4477 24448 24449
!8734 = span !4477 24443 24449
!8735 = fn_call_path_span !4477 24445 24447
!8736 = (!8734 !8735)
!8737 = span !4477 24505 24508
!8738 = span !4477 24510 24525
!8739 = span !4477 24478 24526
!8740 = fn_call_path_span !4477 24478 24499
!8741 = (!8739 !8740)
!8742 = span !4477 24556 24574
!8743 = fn_call_path_span !4477 24560 24572
!8744 = (!8742 !8743)
!8745 = span !4477 23901 24585
!8746 = span !4477 24695 24700
!8747 = span !4477 24695 24718
!8748 = fn_call_path_span !4477 24701 24716
!8749 = (!8747 !8748)
!8750 = span !4477 24673 24719
!8751 = span !4477 24751 24766
!8752 = span !4477 24769 24771
!8753 = span !4477 24751 24771
!8754 = fn_call_path_span !4477 24767 24768
!8755 = (!8753 !8754)
!8756 = span !4477 24776 24777
!8757 = span !4477 24750 24777
!8758 = fn_call_path_span !4477 24773 24775
!8759 = (!8757 !8758)
!8760 = span !4477 24728 24778
!8761 = span !4477 24801 24806
!8762 = span !4477 24801 24812
!8763 = fn_call_path_span !4477 24807 24810
!8764 = (!8762 !8763)
!8765 = span !4477 24787 24813
!8766 = span !4477 25009 25012
!8767 = span !4477 25014 25029
!8768 = span !4477 25031 25046
!8769 = span !4477 25049 25051
!8770 = span !4477 25031 25051
!8771 = fn_call_path_span !4477 25047 25048
!8772 = (!8770 !8771)
!8773 = span !4477 24995 25052
!8774 = fn_call_path_span !4477 24995 25008
!8775 = (!8773 !8774)
!8776 = span !4477 24989 25052
!8777 = span !4477 25175 25190
!8778 = fn_call_path_span !4477 25180 25188
!8779 = (!8777 !8778)
!8780 = span !4477 25168 25191
!8781 = fn_call_path_span !4477 25168 25174
!8782 = (!8780 !8781)
!8783 = span !4477 25193 25196
!8784 = span !4477 25198 25213
!8785 = span !4477 25149 25214
!8786 = span !4477 25141 25215
!8787 = span !4477 25386 25401
!8788 = fn_call_path_span !4477 25391 25399
!8789 = (!8787 !8788)
!8790 = span !4477 25406 25415
!8791 = fn_call_path_span !4477 25410 25413
!8792 = (!8790 !8791)
!8793 = span !4477 25403 25404
!8794 = span !4477 25373 25416
!8795 = fn_call_path_span !4477 25373 25378
!8796 = (!8794 !8795)
!8797 = span !5522 15389 15393
!8798 = span !5522 15373 15476
!8799 = fn_name_span !5522 15376 15388
!8800 = (!8798 !8799)
!8801 = span !5522 15445 15459
!8802 = fn_call_path_span !5522 15454 15457
!8803 = (!8801 !8802)
!8804 = span !5522 15418 15470
!8805 = fn_call_path_span !5522 15418 15439
!8806 = (!8804 !8805)
!8807 = (!2741 !2742)
!8808 = (!2745 !2746)
!8809 = (!1548 !1549)
!8810 = (!1457 !1458)
!8811 = (!1460 !1461)
!8812 = (!1463 !1464)
!8813 = (!1468 !1469)
!8814 = span !34 113 277
!8815 = (!8814 !7980)
!8816 = span !4869 1527 1561
!8817 = span !34 194 230
!8818 = fn_call_path_span !34 212 222
!8819 = (!8817 !8818)
!8820 = span !34 181 231
!8821 = span !34 253 259
!8822 = span !5522 15898 15902
!8823 = span !5522 15904 15910
!8824 = span !5522 15884 16201
!8825 = fn_name_span !5522 15887 15897
!8826 = (!8824 !8825)
!8827 = span !5522 15950 15960
!8828 = fn_call_path_span !5522 15955 15958
!8829 = (!8827 !8828)
!8830 = span !5522 15940 15961
!8831 = span !5522 15987 15990
!8832 = span !5522 15987 16009
!8833 = fn_call_path_span !5522 15991 16001
!8834 = (!8832 !8833)
!8835 = span !5522 15970 16010
!8836 = span !5522 16020 16034
!8837 = span !5522 16032 16033
!8838 = span !5522 16049 16050
!8839 = span !5522 16053 16056
!8840 = span !5522 16049 16056
!8841 = fn_call_path_span !5522 16051 16052
!8842 = (!8840 !8841)
!8843 = span !5522 16091 16092
!8844 = span !5522 16082 16093
!8845 = fn_call_path_span !5522 16087 16090
!8846 = (!8844 !8845)
!8847 = span !5522 16082 16102
!8848 = fn_call_path_span !5522 16094 16100
!8849 = (!8847 !8848)
!8850 = span !5522 16071 16103
!8851 = span !5522 16125 16129
!8852 = span !5522 16141 16147
!8853 = span !5522 16125 16148
!8854 = fn_call_path_span !5522 16130 16140
!8855 = (!8853 !8854)
!8856 = span !5522 16116 16148
!8857 = span !5522 16162 16163
!8858 = span !5522 16167 16168
!8859 = span !5522 16162 16168
!8860 = fn_call_path_span !5522 16164 16166
!8861 = (!8859 !8860)
!8862 = span !5522 16189 16195
!8863 = span !34 105 369
!8864 = (!8863 !1559)
!8865 = span !34 186 219
!8866 = (!8865 !6600)
!8867 = span !34 173 220
!8868 = span !34 260 266
!8869 = span !34 234 267
!8870 = fn_call_path_span !34 249 259
!8871 = (!8869 !8870)
!8872 = span !34 221 268
!8873 = span !34 315 321
!8874 = span !34 282 322
!8875 = fn_call_path_span !34 304 314
!8876 = (!8874 !8875)
!8877 = span !34 269 323
!8878 = span !34 345 351
!8879 = span !0 4053 4062
!8880 = span !0 4031 4130
!8881 = fn_name_span !0 4034 4052
!8882 = (!8880 !193 !8881)
!8883 = span !0 4084 4123
!8884 = fn_call_path_span !0 4084 4112
!8885 = (!8883 !8884)
!8886 = span !1507 3671 3680
!8887 = span !1507 3645 3926
!8888 = fn_name_span !1507 3652 3670
!8889 = (!8887 !193 !8888)
!8890 = span !1507 3698 3710
!8891 = fn_call_path_span !1507 3698 3708
!8892 = (!8890 !8891)
!8893 = span !1507 3756 3757
!8894 = span !1507 3733 3765
!8895 = fn_call_path_span !1507 3733 3748
!8896 = (!8894 !8895)
!8897 = span !1507 3717 3766
!8898 = span !1507 3771 3780
!8899 = span !1507 3771 3817
!8900 = fn_call_path_span !1507 3781 3786
!8901 = (!8899 !8900)
!8902 = span !1507 3894 3906
!8903 = fn_call_path_span !1507 3894 3904
!8904 = (!8902 !8903)
!8905 = span !1507 3894 3915
!8906 = fn_call_path_span !1507 3907 3913
!8907 = (!8905 !8906)
!8908 = span !1507 3828 3922
!8909 = span !1507 3824 3923
!8910 = fn_call_path_span !1507 3824 3827
!8911 = (!8909 !8910)
!8912 = (!1548 !1549)
!8913 = (!1457 !1458)
!8914 = (!1460 !1461)
!8915 = (!1463 !1464)
!8916 = (!1468 !1469)
!8917 = span !34 114 328
!8918 = (!8917 !8483)
!8919 = span !8012 450 473
!8920 = span !34 195 228
!8921 = fn_call_path_span !34 210 220
!8922 = (!8920 !8921)
!8923 = span !34 182 229
!8924 = span !8012 532 560
!8925 = span !34 274 280
!8926 = span !34 243 281
!8927 = fn_call_path_span !34 263 273
!8928 = (!8926 !8927)
!8929 = span !34 230 282
!8930 = span !34 304 310
!8931 = (!44 !45)
!8932 = (!47 !48)
!8933 = (!8314 !8315)
!8934 = (!8317 !8318)
!8935 = (!8320 !8321)
!8936 = span !34 103 322
!8937 = (!8936 !3143)
!8938 = (!5486 !5487)
!8939 = span !34 220 303
!8940 = span !34 236 257
!8941 = fn_call_path_span !34 236 257
!8942 = (!8940 !8941)
!8943 = span !34 259 260
!8944 = span !34 259 281
!8945 = fn_call_path_span !34 259 281
!8946 = (!8944 !8945)
!8947 = span !34 298 299
!8948 = span !34 289 300
!8949 = span !0 6227 6233
!8950 = span !0 6240 6250
!8951 = span !0 6215 6533
!8952 = fn_name_span !0 6218 6226
!8953 = (!8951 !193 !8952)
!8954 = span !0 6273 6291
!8955 = fn_call_path_span !0 6273 6289
!8956 = (!8954 !8955)
!8957 = span !0 6330 6367
!8958 = fn_call_path_span !0 6330 6347
!8959 = (!8957 !8958)
!8960 = span !0 6301 6368
!8961 = span !0 6387 6391
!8962 = span !0 6393 6398
!8963 = span !0 6378 6407
!8964 = fn_call_path_span !0 6378 6386
!8965 = (!8963 !8964)
!8966 = span !0 6470 6475
!8967 = span !0 6489 6493
!8968 = span !0 6507 6514
!8969 = span !0 6422 6525
!8970 = span !0 6418 6526
!8971 = fn_call_path_span !0 6418 6421
!8972 = (!8970 !8971)
!8973 = span !0 33526 33532
!8974 = span !0 33539 33549
!8975 = span !0 33505 33934
!8976 = fn_name_span !0 33508 33525
!8977 = (!8975 !193 !8976)
!8978 = span !0 33617 33618
!8979 = span !0 33608 33618
!8980 = fn_call_path_span !0 33615 33616
!8981 = (!8979 !8980)
!8982 = span !0 33600 33646
!8983 = fn_call_path_span !0 33600 33607
!8984 = (!8982 !8983)
!8985 = span !0 33664 33676
!8986 = fn_call_path_span !0 33664 33674
!8987 = (!8985 !8986)
!8988 = span !0 33664 33685
!8989 = fn_call_path_span !0 33677 33683
!8990 = (!8988 !8989)
!8991 = span !0 33653 33686
!8992 = span !0 33717 33724
!8993 = span !0 33729 33733
!8994 = span !0 33709 33734
!8995 = fn_call_path_span !0 33725 33728
!8996 = (!8994 !8995)
!8997 = span !0 33709 33745
!8998 = fn_call_path_span !0 33735 33743
!8999 = (!8997 !8998)
!9000 = span !0 33756 33770
!9001 = fn_call_path_span !0 33756 33768
!9002 = (!9000 !9001)
!9003 = span !0 33709 33771
!9004 = fn_call_path_span !0 33746 33755
!9005 = (!9003 !9004)
!9006 = span !0 33691 33772
!9007 = span !0 33778 33785
!9008 = span !0 33778 33818
!9009 = fn_call_path_span !0 33793 33798
!9010 = (!9008 !9009)
!9011 = span !0 33832 33839
!9012 = span !0 33847 33851
!9013 = span !0 33853 33860
!9014 = span !0 33824 33861
!9015 = fn_call_path_span !0 33840 33846
!9016 = (!9014 !9015)
!9017 = span !0 33880 33904
!9018 = fn_call_path_span !0 33880 33892
!9019 = (!9017 !9018)
!9020 = span !0 33868 33905
!9021 = span !0 33911 33916
!9022 = span !0 33918 33922
!9023 = span !0 33924 33931
!9024 = span !0 33910 33932
!9025 = span !0 31046 31056
!9026 = span !0 31030 31192
!9027 = fn_name_span !0 31033 31045
!9028 = (!9026 !9027)
!9029 = span !0 31086 31190
!9030 = span !0 31092 31102
!9031 = span !0 31113 31143
!9032 = fn_call_path_span !0 31113 31143
!9033 = (!9031 !9032)
!9034 = span !0 31132 31142
!9035 = span !0 31152 31184
!9036 = fn_call_path_span !0 31152 31184
!9037 = (!9035 !9036)
!9038 = span !0 31172 31183
!9039 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/asset.sw"
!9040 = span !9039 3810 3812
!9041 = span !9039 3824 3832
!9042 = span !9039 3843 3849
!9043 = span !9039 3794 4047
!9044 = fn_name_span !9039 3801 3809
!9045 = (!9043 !9044)
!9046 = span !9039 3862 4044
!9047 = span !9039 3868 3870
!9048 = span !9039 3881 3952
!9049 = fn_call_path_span !9039 3881 3952
!9050 = (!9048 !9049)
!9051 = span !9039 3899 3903
!9052 = span !9039 3928 3932
!9053 = span !9039 3908 3951
!9054 = fn_call_path_span !9039 3908 3927
!9055 = (!9053 !9054)
!9056 = span !9039 3961 4038
!9057 = fn_call_path_span !9039 3961 4038
!9058 = (!9056 !9057)
!9059 = span !9039 3982 3984
!9060 = span !9039 4016 4018
!9061 = span !9039 3989 4037
!9062 = fn_call_path_span !9039 3989 4015
!9063 = (!9061 !9062)
!9064 = span !9039 5785 5787
!9065 = span !9039 5798 5806
!9066 = span !9039 5817 5823
!9067 = span !9039 5762 6615
!9068 = fn_name_span !9039 5765 5784
!9069 = (!9067 !9068)
!9070 = span !9039 5910 5928
!9071 = span !9039 5926 5927
!9072 = span !9039 6186 6200
!9073 = fn_call_path_span !9039 6186 6198
!9074 = (!9072 !9073)
!9075 = span !9039 6186 6209
!9076 = fn_call_path_span !9039 6201 6207
!9077 = (!9075 !9076)
!9078 = span !9039 6162 6210
!9079 = span !9039 6221 6226
!9080 = span !9039 6229 6246
!9081 = span !9039 6221 6246
!9082 = fn_call_path_span !9039 6227 6228
!9083 = (!9081 !9082)
!9084 = span !9039 6301 6306
!9085 = span !9039 6289 6307
!9086 = fn_call_path_span !9039 6289 6300
!9087 = (!9085 !9086)
!9088 = span !9039 6257 6539
!9089 = span !9039 6264 6539
!9090 = fn_call_path_span !9039 6264 6539
!9091 = (!9089 !9090)
!9092 = span !9039 6264 6286
!9093 = (!9089 !9090)
!9094 = span !9039 6353 6358
!9095 = span !9039 6339 6359
!9096 = fn_call_path_span !9039 6339 6352
!9097 = (!9095 !9096)
!9098 = span !9039 6322 6529
!9099 = span !9039 6329 6529
!9100 = fn_call_path_span !9039 6329 6529
!9101 = (!9099 !9100)
!9102 = span !9039 6334 6335
!9103 = (!9099 !9100)
!9104 = span !9039 6386 6395
!9105 = fn_call_path_span !9039 6389 6393
!9106 = (!9104 !9105)
!9107 = span !9039 6401 6406
!9108 = span !9039 6378 6490
!9109 = span !9039 6456 6471
!9110 = span !9039 6508 6514
!9111 = span !9039 6548 6553
!9112 = span !9039 6557 6558
!9113 = span !9039 6548 6558
!9114 = fn_call_path_span !9039 6554 6556
!9115 = (!9113 !9114)
!9116 = span !1541 566 587
!9117 = span !9039 6571 6612
!9118 = fn_call_path_span !9039 6571 6577
!9119 = (!9117 !9118)
!9120 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/outputs.sw"
!9121 = span !9120 3883 4336
!9122 = fn_name_span !9120 3890 3902
!9123 = (!9121 !9122)
!9124 = span !9120 3924 3933
!9125 = fn_call_path_span !9120 3924 3931
!9126 = (!9124 !9125)
!9127 = span !9120 3918 4334
!9128 = span !9120 3944 4009
!9129 = fn_call_path_span !9120 3944 4009
!9130 = (!9128 !9129)
!9131 = span !9120 3980 3981
!9132 = span !9120 3967 4008
!9133 = span !9120 4018 4083
!9134 = fn_call_path_span !9120 4018 4083
!9135 = (!9133 !9134)
!9136 = span !9120 4054 4055
!9137 = span !9120 4041 4082
!9138 = span !9120 4092 4158
!9139 = fn_call_path_span !9120 4092 4158
!9140 = (!9138 !9139)
!9141 = span !9120 4129 4130
!9142 = span !9120 4116 4157
!9143 = span !9120 4167 4232
!9144 = fn_call_path_span !9120 4167 4232
!9145 = (!9143 !9144)
!9146 = span !9120 4203 4204
!9147 = span !9120 4190 4231
!9148 = span !9120 4241 4304
!9149 = fn_call_path_span !9120 4241 4304
!9150 = (!9148 !9149)
!9151 = span !9120 4275 4276
!9152 = span !9120 4262 4303
!9153 = span !9120 4325 4326
!9154 = span !9120 4318 4327
!9155 = fn_call_path_span !9120 4318 4324
!9156 = (!9154 !9155)
!9157 = span !9120 2002 2007
!9158 = span !9120 1983 2373
!9159 = fn_name_span !9120 1990 2001
!9160 = (!9158 !9159)
!9161 = span !9120 2050 2064
!9162 = fn_call_path_span !9120 2050 2062
!9163 = (!9161 !9162)
!9164 = span !9120 2050 2073
!9165 = fn_call_path_span !9120 2065 2071
!9166 = (!9164 !9165)
!9167 = span !9120 2041 2073
!9168 = fn_call_path_span !9120 2047 2049
!9169 = (!9167 !9168)
!9170 = span !9120 2084 2095
!9171 = span !9120 2113 2148
!9172 = span !9120 2107 2371
!9173 = span !9120 2159 2162
!9174 = span !9120 2159 2185
!9175 = fn_call_path_span !9120 2159 2185
!9176 = (!9174 !9175)
!9177 = span !9120 956 1226
!9178 = span !9120 2194 2197
!9179 = span !9120 2194 2224
!9180 = fn_call_path_span !9120 2194 2224
!9181 = (!9179 !9180)
!9182 = span !9120 2233 2236
!9183 = span !9120 2233 2261
!9184 = fn_call_path_span !9120 2233 2261
!9185 = (!9183 !9184)
!9186 = span !9120 2270 2273
!9187 = span !9120 2270 2300
!9188 = fn_call_path_span !9120 2270 2300
!9189 = (!9187 !9188)
!9190 = span !9120 2309 2312
!9191 = span !9120 2309 2346
!9192 = fn_call_path_span !9120 2309 2346
!9193 = (!9191 !9192)
!9194 = span !9120 5112 5117
!9195 = span !9120 5091 5843
!9196 = fn_name_span !9120 5098 5111
!9197 = (!9195 !9196)
!9198 = span !9120 5151 5169
!9199 = fn_call_path_span !9120 5151 5162
!9200 = (!9198 !9199)
!9201 = span !9120 5145 5841
!9202 = span !9120 5180 5252
!9203 = fn_call_path_span !9120 5180 5252
!9204 = (!9202 !9203)
!9205 = span !9120 5180 5198
!9206 = (!9202 !9203)
!9207 = span !9120 5207 5250
!9208 = span !9120 5261 5292
!9209 = fn_call_path_span !9120 5261 5292
!9210 = (!9208 !9209)
!9211 = span !9120 5261 5283
!9212 = (!9208 !9209)
!9213 = span !9120 5446 5478
!9214 = fn_call_path_span !9120 5446 5478
!9215 = (!9213 !9214)
!9216 = span !9120 5446 5466
!9217 = (!9213 !9214)
!9218 = span !9120 5475 5476
!9219 = span !9120 5487 5766
!9220 = fn_call_path_span !9120 5487 5766
!9221 = (!9219 !9220)
!9222 = span !9120 5487 5509
!9223 = (!9219 !9220)
!9224 = span !9120 5537 5558
!9225 = fn_call_path_span !9120 5537 5551
!9226 = (!9224 !9225)
!9227 = span !9120 5537 5567
!9228 = fn_call_path_span !9120 5559 5565
!9229 = (!9227 !9228)
!9230 = span !9120 5527 5568
!9231 = span !9120 5619 5622
!9232 = span !9120 5603 5740
!9233 = span !9120 5646 5660
!9234 = span !9120 5682 5693
!9235 = span !9120 5775 5813
!9236 = fn_call_path_span !9120 5775 5813
!9237 = (!9235 !9236)
!9238 = span !9120 5775 5804
!9239 = (!9235 !9236)
!9240 = span !9120 5822 5835
!9241 = fn_call_path_span !9120 5822 5835
!9242 = (!9240 !9241)
!9243 = (!2060 !2061)
!9244 = (!2065 !2066)
!9245 = (!2071 !2072)
!9246 = span !9120 2846 2851
!9247 = span !9120 2828 3441
!9248 = fn_name_span !9120 2831 2845
!9249 = (!9247 !9248)
!9250 = span !9120 2886 2904
!9251 = fn_call_path_span !9120 2886 2897
!9252 = (!9250 !9251)
!9253 = span !9120 2886 2914
!9254 = fn_call_path_span !9120 2905 2912
!9255 = (!9253 !9254)
!9256 = span !9120 2925 2936
!9257 = span !9120 2954 2963
!9258 = fn_call_path_span !9120 2954 2961
!9259 = (!9257 !9258)
!9260 = span !9120 2948 3439
!9261 = span !9120 2974 3055
!9262 = fn_call_path_span !9120 2974 3055
!9263 = (!9261 !9262)
!9264 = span !9120 3002 3053
!9265 = span !9120 3064 3145
!9266 = fn_call_path_span !9120 3064 3145
!9267 = (!9265 !9266)
!9268 = span !9120 3092 3143
!9269 = span !9120 3154 3236
!9270 = fn_call_path_span !9120 3154 3236
!9271 = (!9269 !9270)
!9272 = span !9120 3183 3234
!9273 = span !9120 3245 3326
!9274 = fn_call_path_span !9120 3245 3326
!9275 = (!9273 !9274)
!9276 = span !9120 3273 3324
!9277 = span !9120 3335 3414
!9278 = fn_call_path_span !9120 3335 3414
!9279 = (!9277 !9278)
!9280 = span !9120 3361 3412
!9281 = (!2049 !2050)
!9282 = (!2054 !2055)
!9283 = span !1648 679 683
!9284 = span !1648 667 718
!9285 = fn_name_span !1648 674 678
!9286 = (!9284 !9285)
!9287 = span !9039 4974 4976
!9288 = span !9039 4990 4998
!9289 = span !9039 5009 5015
!9290 = span !9039 4944 5103
!9291 = fn_name_span !9039 4947 4973
!9292 = (!9290 !9291)
!9293 = span !9039 5062 5071
!9294 = fn_call_path_span !9039 5065 5069
!9295 = (!9293 !9294)
!9296 = span !9039 5028 5101
!9297 = span !9039 5083 5094
!9298 = span !1663 707 711
!9299 = span !1663 695 746
!9300 = fn_name_span !1663 702 706
!9301 = (!9299 !9300)
!9302 = (!1548 !1549)
!9303 = (!1457 !1458)
!9304 = (!1460 !1461)
!9305 = (!1463 !1464)
!9306 = (!1468 !1469)
!9307 = span !34 107 398
!9308 = (!9307 !7569)
!9309 = span !4869 1156 1171
!9310 = span !34 188 218
!9311 = fn_call_path_span !34 200 210
!9312 = (!9310 !9311)
!9313 = span !34 175 219
!9314 = span !4869 1177 1195
!9315 = span !34 255 261
!9316 = span !34 233 262
!9317 = fn_call_path_span !34 244 254
!9318 = (!9316 !9317)
!9319 = span !34 220 263
!9320 = span !4869 1201 1219
!9321 = span !34 298 304
!9322 = span !34 277 305
!9323 = fn_call_path_span !34 287 297
!9324 = (!9322 !9323)
!9325 = span !34 264 306
!9326 = span !4869 1225 1245
!9327 = span !34 344 350
!9328 = span !34 320 351
!9329 = fn_call_path_span !34 333 343
!9330 = (!9328 !9329)
!9331 = span !34 307 352
!9332 = span !34 374 380
!9333 = (!44 !45)
!9334 = (!47 !48)
!9335 = (!8240 !8241)
!9336 = (!8243 !8244)
!9337 = (!8246 !8247)
!9338 = (!8249 !8250)
!9339 = span !0 7333 7339
!9340 = span !0 7346 7356
!9341 = span !0 7369 7375
!9342 = span !0 7311 8106
!9343 = fn_name_span !0 7314 7332
!9344 = (!9342 !193 !9343)
!9345 = span !0 7399 7417
!9346 = fn_call_path_span !0 7399 7415
!9347 = (!9345 !9346)
!9348 = span !0 7446 7464
!9349 = fn_call_path_span !0 7446 7462
!9350 = (!9348 !9349)
!9351 = span !0 7436 7464
!9352 = fn_call_path_span !0 7443 7445
!9353 = (!9351 !9352)
!9354 = span !0 7428 7496
!9355 = fn_call_path_span !0 7428 7435
!9356 = (!9354 !9355)
!9357 = span !0 7536 7573
!9358 = fn_call_path_span !0 7536 7553
!9359 = (!9357 !9358)
!9360 = span !0 7507 7574
!9361 = span !0 7639 7652
!9362 = fn_call_path_span !0 7646 7650
!9363 = (!9361 !9362)
!9364 = "/home/kebradalaonda/p/compolabs-orderbook-contract/spark-market/src/interface.sw"
!9365 = span !9364 2596 2602
!9366 = span !0 7618 7662
!9367 = span !0 7583 7663
!9368 = span !0 7693 7698
!9369 = span !0 7702 7706
!9370 = span !0 7693 7706
!9371 = fn_call_path_span !0 7699 7701
!9372 = (!9370 !9371)
!9373 = span !0 7693 7724
!9374 = span !0 7710 7715
!9375 = span !0 7719 7724
!9376 = span !0 7710 7724
!9377 = fn_call_path_span !0 7716 7718
!9378 = (!9376 !9377)
!9379 = span !0 7672 7779
!9380 = fn_call_path_span !0 7672 7679
!9381 = (!9379 !9380)
!9382 = span !0 7807 7833
!9383 = fn_call_path_span !0 7827 7831
!9384 = (!9382 !9383)
!9385 = span !9364 512 523
!9386 = span !0 7947 7951
!9387 = span !0 7888 7893
!9388 = span !0 7888 7900
!9389 = fn_call_path_span !0 7894 7898
!9390 = (!9388 !9389)
!9391 = span !0 7790 7952
!9392 = span !0 8023 8028
!9393 = span !0 8042 8046
!9394 = span !0 8060 8067
!9395 = span !0 7967 8098
!9396 = span !0 7963 8099
!9397 = fn_call_path_span !0 7963 7966
!9398 = (!9396 !9397)
!9399 = (!1166 !1167)
!9400 = (!1169 !1170)
!9401 = (!1172 !1173)
!9402 = span !7 125638 125649
!9403 = span !7 125661 125672
!9404 = span !7 125683 125687
!9405 = span !7 125700 125705
!9406 = span !7 125716 125724
!9407 = span !7 125736 125739
!9408 = span !7 125602 126325
!9409 = fn_name_span !7 125609 125622
!9410 = (!9408 !9409)
!9411 = span !7 125827 125846
!9412 = fn_call_path_span !7 125827 125833
!9413 = (!9411 !9412)
!9414 = span !7 125805 125847
!9415 = span !7 125875 125887
!9416 = fn_call_path_span !7 125875 125881
!9417 = (!9415 !9416)
!9418 = span !7 125852 125888
!9419 = span !7 125951 125966
!9420 = span !7 125951 125972
!9421 = fn_call_path_span !7 125967 125970
!9422 = (!9420 !9421)
!9423 = span !7 125944 126004
!9424 = span !7 126021 126037
!9425 = span !7 126021 126043
!9426 = fn_call_path_span !7 126038 126041
!9427 = (!9425 !9426)
!9428 = span !7 126014 126075
!9429 = span !7 125913 126082
!9430 = span !7 125906 126083
!9431 = fn_call_path_span !7 125906 125912
!9432 = (!9430 !9431)
!9433 = span !7 125893 126084
!9434 = span !7 126106 126112
!9435 = span !7 126106 126118
!9436 = fn_call_path_span !7 126113 126116
!9437 = (!9435 !9436)
!9438 = span !7 126090 126141
!9439 = span !7 126157 126191
!9440 = span !7 126147 126192
!9441 = span !7 126207 126238
!9442 = span !7 126197 126239
!9443 = span !7 126287 126290
!9444 = span !7 126292 126295
!9445 = span !7 126262 126296
!9446 = fn_call_path_span !7 126262 126286
!9447 = (!9445 !9446)
!9448 = span !7 126245 126297
!9449 = span !7 126316 126322
!9450 = span !7 126302 126323
!9451 = fn_call_path_span !7 126302 126315
!9452 = (!9450 !9451)
!9453 = (!1457 !1458)
!9454 = (!1460 !1461)
!9455 = (!1463 !1464)
!9456 = (!1468 !1469)
!9457 = span !7 5389 5393
!9458 = span !7 5395 5401
!9459 = span !7 5375 5520
!9460 = fn_name_span !7 5378 5388
!9461 = (!9459 !9460)
!9462 = span !7 5431 5514
!9463 = (!1457 !1458)
!9464 = (!1460 !1461)
!9465 = (!1463 !1464)
!9466 = (!1468 !1469)
!9467 = span !7 36241 36245
!9468 = span !7 36247 36253
!9469 = span !7 36227 36295
!9470 = fn_name_span !7 36230 36240
!9471 = (!9469 !9470)
!9472 = (!1457 !1458)
!9473 = (!1460 !1461)
!9474 = (!1463 !1464)
!9475 = (!1468 !1469)
!9476 = (!3527 !3528)
!9477 = (!3531 !3532)
!9478 = (!3537 !3538)
!9479 = (!3543 !3544)
!9480 = span !7 104038 104044
!9481 = span !7 104016 104340
!9482 = fn_name_span !7 104019 104029
!9483 = (!9481 !9482)
!9484 = span !7 104092 104113
!9485 = fn_call_path_span !7 104092 104105
!9486 = (!9484 !9485)
!9487 = span !7 104127 104148
!9488 = fn_call_path_span !7 104127 104140
!9489 = (!9487 !9488)
!9490 = span !7 104162 104183
!9491 = fn_call_path_span !7 104162 104175
!9492 = (!9490 !9491)
!9493 = span !7 104197 104218
!9494 = fn_call_path_span !7 104197 104210
!9495 = (!9493 !9494)
!9496 = span !7 104232 104253
!9497 = fn_call_path_span !7 104232 104245
!9498 = (!9496 !9497)
!9499 = span !7 104267 104288
!9500 = fn_call_path_span !7 104267 104280
!9501 = (!9499 !9500)
!9502 = span !7 104302 104323
!9503 = fn_call_path_span !7 104302 104315
!9504 = (!9502 !9503)
!9505 = span !7 104078 104334
!9506 = span !34 150 156
!9507 = span !34 128 362
!9508 = fn_name_span !34 131 141
!9509 = (!9507 !9508)
!9510 = span !34 221 243
!9511 = fn_call_path_span !34 228 234
!9512 = (!9510 !9511)
!9513 = span !34 202 244
!9514 = span !34 251 258
!9515 = span !34 245 343
!9516 = span !34 261 262
!9517 = span !34 261 279
!9518 = fn_call_path_span !34 261 279
!9519 = (!9517 !9518)
!9520 = span !34 281 282
!9521 = span !34 281 321
!9522 = fn_call_path_span !34 281 321
!9523 = (!9521 !9522)
!9524 = span !34 299 319
!9525 = fn_call_path_span !34 306 312
!9526 = (!9524 !9525)
!9527 = span !34 338 339
!9528 = span !34 329 340
!9529 = (!44 !45)
!9530 = (!47 !48)
!9531 = "/home/kebradalaonda/.forc/git/checkouts/std-9be0d6062747ea7/d7dd104dac4394aa7af56f05b720c975744db853/sway-lib-std/src/convert.sw"
!9532 = span !9531 437 441
!9533 = span !9531 429 477
!9534 = fn_name_span !9531 432 436
!9535 = (!9533 !9534)
!9536 = span !9531 458 471
!9537 = fn_call_path_span !9531 458 465
!9538 = (!9536 !9537)
!9539 = span !1663 1828 1830
!9540 = span !1663 1820 1877
!9541 = fn_name_span !1663 1823 1827
!9542 = (!9540 !9541)
!9543 = span !1663 1862 1871
!9544 = fn_call_path_span !1663 1865 1869
!9545 = (!9543 !9544)
!9546 = (!9408 !9409)
!9547 = (!9411 !9412)
!9548 = (!9415 !9416)
!9549 = (!9420 !9421)
!9550 = (!9425 !9426)
!9551 = (!9430 !9431)
!9552 = (!9435 !9436)
!9553 = (!9445 !9446)
!9554 = (!9450 !9451)
!9555 = (!1457 !1458)
!9556 = (!1460 !1461)
!9557 = (!1463 !1464)
!9558 = (!1468 !1469)
!9559 = span !7 36394 36398
!9560 = span !7 36400 36406
!9561 = span !7 36380 36496
!9562 = fn_name_span !7 36383 36393
!9563 = (!9561 !9562)
!9564 = span !7 36454 36455
!9565 = span !7 36449 36474
!9566 = fn_call_path_span !7 36456 36466
!9567 = (!9565 !9566)
!9568 = span !7 36436 36475
!9569 = span !7 36484 36490
!9570 = span !7 101920 101927
!9571 = span !7 101898 101967
!9572 = fn_name_span !7 101901 101911
!9573 = (!9571 !9572)
!9574 = (!9533 !9534)
!9575 = (!9536 !9537)
!9576 = span !5254 6138 6140
!9577 = span !5254 6130 6184
!9578 = fn_name_span !5254 6133 6137
!9579 = (!9577 !9578)
!9580 = span !5254 6169 6178
!9581 = fn_call_path_span !5254 6172 6176
!9582 = (!9580 !9581)
!9583 = span !5254 4797 4801
!9584 = span !5254 4785 4836
!9585 = fn_name_span !5254 4792 4796
!9586 = (!9584 !9585)
!9587 = (!1548 !1549)
!9588 = (!1457 !1458)
!9589 = (!1460 !1461)
!9590 = (!1463 !1464)
!9591 = (!1468 !1469)
!9592 = span !34 115 451
!9593 = (!9592 !8406)
!9594 = span !4869 1289 1304
!9595 = (!8409 !8410)
!9596 = span !4869 1310 1328
!9597 = span !34 241 270
!9598 = (!9597 !7578)
!9599 = span !34 228 271
!9600 = span !4869 1334 1352
!9601 = span !34 306 312
!9602 = span !34 285 313
!9603 = fn_call_path_span !34 295 305
!9604 = (!9602 !9603)
!9605 = span !34 272 314
!9606 = span !4869 1358 1378
!9607 = span !34 328 359
!9608 = (!9607 !6616)
!9609 = span !34 315 360
!9610 = span !4869 1384 1406
!9611 = span !34 397 403
!9612 = span !34 374 404
!9613 = fn_call_path_span !34 386 396
!9614 = (!9612 !9613)
!9615 = span !34 361 405
!9616 = span !34 427 433
!9617 = span !0 24241 24245
!9618 = span !0 24230 24346
!9619 = fn_name_span !0 24233 24240
!9620 = (!9618 !1196 !9619)
!9621 = span !0 24286 24293
!9622 = span !0 24278 24303
!9623 = fn_call_path_span !0 24294 24297
!9624 = (!9622 !9623)
!9625 = span !0 24278 24314
!9626 = fn_call_path_span !0 24304 24312
!9627 = (!9625 !9626)
!9628 = span !0 24325 24339
!9629 = fn_call_path_span !0 24325 24337
!9630 = (!9628 !9629)
!9631 = span !0 24278 24340
!9632 = fn_call_path_span !0 24315 24324
!9633 = (!9631 !9632)
!9634 = (!1457 !1458)
!9635 = (!1460 !1461)
!9636 = (!1463 !1464)
!9637 = (!1468 !1469)
!9638 = span !0 28069 28372
!9639 = fn_name_span !0 28072 28078
!9640 = (!9638 !1196 !9639)
!9641 = span !0 28165 28175
!9642 = span !0 28189 28208
!9643 = span !0 28222 28233
!9644 = span !0 28247 28267
!9645 = span !0 28281 28298
!9646 = fn_call_path_span !0 28281 28296
!9647 = (!9645 !9646)
!9648 = span !0 28281 28306
!9649 = fn_call_path_span !0 28299 28304
!9650 = (!9648 !9649)
!9651 = span !0 28320 28334
!9652 = span !0 28348 28355
!9653 = span !0 28151 28366
!9654 = "/home/kebradalaonda/.forc/git/checkouts/standards-a75010d5ab7a85a4/792639cdf391565e6e6a02482ea8a46d9604a6f5/standards/src/src5.sw"
!9655 = span !9654 4224 4228
!9656 = span !9654 4211 4364
!9657 = fn_name_span !9654 4218 4223
!9658 = (!9656 !9657)
!9659 = span !9654 4260 4358
!9660 = span !9654 4266 4270
!9661 = span !9654 4285 4325
!9662 = fn_call_path_span !9654 4285 4325
!9663 = (!9661 !9662)
!9664 = span !9654 4303 4308
!9665 = span !9654 4318 4323
!9666 = (!1457 !1458)
!9667 = (!1460 !1461)
!9668 = (!1463 !1464)
!9669 = (!1468 !1469)
!9670 = span !7 38668 38672
!9671 = span !7 38674 38680
!9672 = span !7 38654 39058
!9673 = fn_name_span !7 38657 38667
!9674 = (!9672 !9673)
!9675 = span !7 38728 38729
!9676 = span !7 38723 38748
!9677 = fn_call_path_span !7 38730 38740
!9678 = (!9676 !9677)
!9679 = span !7 38710 38749
!9680 = span !7 38776 38777
!9681 = span !7 38789 38795
!9682 = span !7 38771 38796
!9683 = fn_call_path_span !7 38778 38788
!9684 = (!9682 !9683)
!9685 = span !7 38758 38797
!9686 = span !7 38824 38825
!9687 = span !7 38837 38843
!9688 = span !7 38819 38844
!9689 = fn_call_path_span !7 38826 38836
!9690 = (!9688 !9689)
!9691 = span !7 38806 38845
!9692 = span !7 38872 38873
!9693 = span !7 38885 38891
!9694 = span !7 38867 38892
!9695 = fn_call_path_span !7 38874 38884
!9696 = (!9694 !9695)
!9697 = span !7 38854 38893
!9698 = span !7 38920 38921
!9699 = span !7 38933 38939
!9700 = span !7 38915 38940
!9701 = fn_call_path_span !7 38922 38932
!9702 = (!9700 !9701)
!9703 = span !7 38902 38941
!9704 = span !7 38968 38969
!9705 = span !7 38981 38987
!9706 = span !7 38963 38988
!9707 = fn_call_path_span !7 38970 38980
!9708 = (!9706 !9707)
!9709 = span !7 38950 38989
!9710 = span !7 39016 39017
!9711 = span !7 39029 39035
!9712 = span !7 39011 39036
!9713 = fn_call_path_span !7 39018 39028
!9714 = (!9712 !9713)
!9715 = span !7 38998 39037
!9716 = span !7 39046 39052
!9717 = span !34 142 146
!9718 = span !34 148 154
!9719 = span !34 128 565
!9720 = (!9719 !9508)
!9721 = span !34 209 519
!9722 = span !34 215 219
!9723 = span !34 222 310
!9724 = fn_call_path_span !34 222 310
!9725 = (!9723 !9724)
!9726 = span !34 264 268
!9727 = span !34 264 287
!9728 = fn_call_path_span !34 269 279
!9729 = (!9727 !9728)
!9730 = span !34 312 515
!9731 = fn_call_path_span !34 312 515
!9732 = (!9730 !9731)
!9733 = span !34 374 378
!9734 = span !34 374 397
!9735 = fn_call_path_span !34 379 389
!9736 = (!9734 !9735)
!9737 = span !34 361 398
!9738 = span !34 436 441
!9739 = span !34 453 459
!9740 = span !34 436 460
!9741 = fn_call_path_span !34 442 452
!9742 = (!9740 !9741)
!9743 = span !34 423 461
!9744 = span !34 486 492
!9745 = span !34 196 520
!9746 = span !34 541 547
!9747 = span !0 24506 24588
!9748 = fn_name_span !0 24509 24518
!9749 = (!9747 !1196 !9748)
!9750 = span !0 24546 24558
!9751 = fn_call_path_span !0 24546 24556
!9752 = (!9750 !9751)
!9753 = span !0 24560 24581
!9754 = fn_call_path_span !0 24560 24579
!9755 = (!9753 !9754)
!9756 = span !0 24545 24582
!9757 = (!1457 !1458)
!9758 = (!1460 !1461)
!9759 = (!1463 !1464)
!9760 = (!1468 !1469)
!9761 = span !0 26566 26571
!9762 = span !0 26550 26630
!9763 = fn_name_span !0 26553 26565
!9764 = (!9762 !1196 !9763)
!9765 = span !0 26605 26624
!9766 = fn_call_path_span !0 26605 26617
!9767 = (!9765 !9766)
!9768 = (!1457 !1458)
!9769 = (!1460 !1461)
!9770 = (!1463 !1464)
!9771 = (!1468 !1469)
!9772 = (!9719 !9508)
!9773 = (!9723 !9724)
!9774 = (!9727 !9728)
!9775 = (!9730 !9731)
!9776 = (!9734 !9735)
!9777 = (!9740 !9741)
!9778 = span !0 24736 24794
!9779 = fn_name_span !0 24739 24750
!9780 = (!9778 !1196 !9779)
!9781 = span !0 24770 24788
!9782 = fn_call_path_span !0 24770 24786
!9783 = (!9781 !9782)
!9784 = (!1457 !1458)
!9785 = (!1460 !1461)
!9786 = (!1463 !1464)
!9787 = (!1468 !1469)
!9788 = span !0 27710 27776
!9789 = fn_name_span !0 27713 27728
!9790 = (!9788 !1196 !9789)
!9791 = span !0 27748 27770
!9792 = fn_call_path_span !0 27748 27768
!9793 = (!9791 !9792)
!9794 = span !0 27457 27521
!9795 = fn_name_span !0 27460 27474
!9796 = (!9794 !1196 !9795)
!9797 = span !0 27494 27515
!9798 = fn_call_path_span !0 27494 27513
!9799 = (!9797 !9798)
!9800 = span !0 26177 26182
!9801 = span !0 26168 26259
!9802 = fn_name_span !0 26171 26176
!9803 = (!9801 !1196 !9802)
!9804 = span !0 26225 26231
!9805 = span !0 26217 26242
!9806 = fn_call_path_span !0 26232 26235
!9807 = (!9805 !9806)
!9808 = span !0 26217 26253
!9809 = fn_call_path_span !0 26243 26251
!9810 = (!9808 !9809)
!9811 = (!1457 !1458)
!9812 = (!1460 !1461)
!9813 = (!1463 !1464)
!9814 = (!1468 !1469)
!9815 = (!9719 !9508)
!9816 = (!9723 !9724)
!9817 = (!9727 !9728)
!9818 = (!9730 !9731)
!9819 = (!9734 !9735)
!9820 = (!9740 !9741)
!9821 = span !34 113 117
!9822 = span !34 119 125
!9823 = span !34 99 709
!9824 = fn_name_span !34 102 112
!9825 = (!9823 !9824)
!9826 = span !34 180 210
!9827 = (!9826 !4934)
!9828 = span !34 167 211
!9829 = span !34 252 258
!9830 = span !34 225 259
!9831 = fn_call_path_span !34 241 251
!9832 = (!9830 !9831)
!9833 = span !34 212 260
!9834 = span !34 301 307
!9835 = span !34 274 308
!9836 = fn_call_path_span !34 290 300
!9837 = (!9835 !9836)
!9838 = span !34 261 309
!9839 = span !34 323 352
!9840 = fn_call_path_span !34 334 344
!9841 = (!9839 !9840)
!9842 = span !34 310 353
!9843 = span !34 389 395
!9844 = span !34 367 396
!9845 = fn_call_path_span !34 378 388
!9846 = (!9844 !9845)
!9847 = span !34 354 397
!9848 = span !34 440 446
!9849 = span !34 411 447
!9850 = fn_call_path_span !34 429 439
!9851 = (!9849 !9850)
!9852 = span !34 398 448
!9853 = span !34 491 497
!9854 = span !34 462 498
!9855 = fn_call_path_span !34 480 490
!9856 = (!9854 !9855)
!9857 = span !34 449 499
!9858 = span !34 513 548
!9859 = fn_call_path_span !34 530 540
!9860 = (!9858 !9859)
!9861 = span !34 500 549
!9862 = span !34 598 604
!9863 = span !34 563 605
!9864 = fn_call_path_span !34 587 597
!9865 = (!9863 !9864)
!9866 = span !34 550 606
!9867 = span !34 655 661
!9868 = span !34 620 662
!9869 = fn_call_path_span !34 644 654
!9870 = (!9868 !9869)
!9871 = span !34 607 663
!9872 = span !34 685 691
!9873 = span !34 103 432
!9874 = (!9873 !3143)
!9875 = span !34 184 386
!9876 = span !34 197 288
!9877 = fn_call_path_span !34 197 288
!9878 = (!9876 !9877)
!9879 = span !34 242 246
!9880 = span !34 242 265
!9881 = fn_call_path_span !34 247 257
!9882 = (!9880 !9881)
!9883 = span !34 290 382
!9884 = fn_call_path_span !34 290 382
!9885 = (!9883 !9884)
!9886 = span !34 336 340
!9887 = span !34 336 359
!9888 = (!9887 !6616)
!9889 = span !34 171 387
!9890 = span !34 408 414
!9891 = (!44 !45)
!9892 = (!47 !48)
!9893 = span !7 103113 103119
!9894 = span !7 103091 103345
!9895 = fn_name_span !7 103094 103104
!9896 = (!9894 !9895)
!9897 = span !7 103167 103188
!9898 = fn_call_path_span !7 103167 103180
!9899 = (!9897 !9898)
!9900 = span !7 103202 103223
!9901 = fn_call_path_span !7 103202 103215
!9902 = (!9900 !9901)
!9903 = span !7 103237 103258
!9904 = fn_call_path_span !7 103237 103250
!9905 = (!9903 !9904)
!9906 = span !7 103272 103293
!9907 = fn_call_path_span !7 103272 103285
!9908 = (!9906 !9907)
!9909 = span !7 103307 103328
!9910 = fn_call_path_span !7 103307 103320
!9911 = (!9909 !9910)
!9912 = span !7 103153 103339
!9913 = span !0 28817 28827
!9914 = span !0 28848 28853
!9915 = span !0 28873 28878
!9916 = span !0 28893 28905
!9917 = span !0 28920 28932
!9918 = span !0 28796 29250
!9919 = fn_name_span !0 28799 28807
!9920 = (!9918 !9919)
!9921 = span !0 28963 28996
!9922 = span !0 29044 29054
!9923 = span !0 29029 29030
!9924 = span !0 29182 29183
!9925 = span !0 29197 29198
!9926 = span !0 29212 29213
!9927 = span !0 29227 29228
!9928 = span !0 29005 29239
!9929 = fn_call_path_span !0 29005 29015
!9930 = (!9928 !9929)
!9931 = span !0 29005 29244
!9932 = fn_call_path_span !0 29240 29242
!9933 = (!9931 !9932)
!9934 = span !0 24947 25032
!9935 = fn_name_span !0 24950 24962
!9936 = (!9934 !1196 !9935)
!9937 = span !0 25003 25015
!9938 = span !0 24995 25026
!9939 = fn_call_path_span !0 25016 25024
!9940 = (!9938 !9939)
!9941 = span !4477 26564 26568
!9942 = span !4477 26548 28448
!9943 = fn_name_span !4477 26555 26563
!9944 = (!9942 !1196 !9943)
!9945 = span !4477 26663 26678
!9946 = fn_call_path_span !4477 26668 26676
!9947 = (!9945 !9946)
!9948 = span !4477 26680 26681
!9949 = span !4477 26651 26682
!9950 = fn_call_path_span !4477 26651 26655
!9951 = (!9949 !9950)
!9952 = span !4477 26693 26694
!9953 = span !4477 26651 26695
!9954 = fn_call_path_span !4477 26683 26692
!9955 = (!9953 !9954)
!9956 = span !4477 26645 28442
!9957 = span !4477 26710 26711
!9958 = span !4477 26710 26726
!9959 = fn_call_path_span !4477 26710 26726
!9960 = (!9958 !9959)
!9961 = span !4477 26715 26725
!9962 = fn_call_path_span !4477 26715 26723
!9963 = (!9961 !9962)
!9964 = span !4477 26739 26742
!9965 = span !4477 26841 26877
!9966 = span !4477 26902 26914
!9967 = span !4477 26918 26919
!9968 = span !4477 26902 26919
!9969 = fn_call_path_span !4477 26915 26917
!9970 = (!9968 !9969)
!9971 = span !4477 26895 26920
!9972 = fn_call_path_span !4477 26895 26901
!9973 = (!9971 !9972)
!9974 = span !4477 26954 26966
!9975 = span !4477 26969 26970
!9976 = span !4477 26954 26970
!9977 = fn_call_path_span !4477 26967 26968
!9978 = (!9976 !9977)
!9979 = span !4477 27035 27038
!9980 = span !4477 27041 27042
!9981 = span !4477 27035 27042
!9982 = fn_call_path_span !4477 27039 27040
!9983 = (!9981 !9982)
!9984 = span !4477 27088 27091
!9985 = span !4477 27094 27106
!9986 = span !4477 27088 27106
!9987 = fn_call_path_span !4477 27092 27093
!9988 = (!9986 !9987)
!9989 = span !4477 26939 27125
!9990 = span !4477 27166 27171
!9991 = span !4477 27174 27176
!9992 = span !4477 27166 27176
!9993 = fn_call_path_span !4477 27172 27173
!9994 = (!9992 !9993)
!9995 = span !4477 27181 27182
!9996 = span !4477 27165 27182
!9997 = fn_call_path_span !4477 27178 27180
!9998 = (!9996 !9997)
!9999 = span !4477 27143 27183
!10000 = span !4477 27222 27237
!10001 = span !4477 27240 27242
!10002 = span !4477 27222 27242
!10003 = fn_call_path_span !4477 27238 27239
!10004 = (!10002 !10003)
!10005 = span !4477 27210 27243
!10006 = fn_call_path_span !4477 27210 27221
!10007 = (!10005 !10006)
!10008 = span !4477 27200 27244
!10009 = span !4477 27353 27368
!10010 = fn_call_path_span !4477 27358 27366
!10011 = (!10009 !10010)
!10012 = span !4477 27346 27369
!10013 = fn_call_path_span !4477 27346 27352
!10014 = (!10012 !10013)
!10015 = span !4477 27371 27374
!10016 = span !4477 27376 27391
!10017 = span !4477 27328 27392
!10018 = span !4477 27320 27393
!10019 = span !4477 27414 27426
!10020 = span !4477 27429 27430
!10021 = span !4477 27414 27430
!10022 = fn_call_path_span !4477 27427 27428
!10023 = (!10021 !10022)
!10024 = span !4477 27469 27472
!10025 = span !4477 27475 27487
!10026 = span !4477 27469 27487
!10027 = fn_call_path_span !4477 27473 27474
!10028 = (!10026 !10027)
!10029 = span !4477 27453 27488
!10030 = span !4477 27535 27544
!10031 = span !4477 27523 27545
!10032 = fn_call_path_span !4477 27523 27534
!10033 = (!10031 !10032)
!10034 = span !4477 27509 27546
!10035 = span !4477 27567 27581
!10036 = span !4477 27579 27580
!10037 = span !4477 27608 27609
!10038 = span !4477 27612 27615
!10039 = span !4477 27608 27615
!10040 = fn_call_path_span !4477 27610 27611
!10041 = (!10039 !10040)
!10042 = span !4477 27832 27835
!10043 = span !4477 27886 27887
!10044 = span !4477 27882 27883
!10045 = span !4477 27882 27887
!10046 = fn_call_path_span !4477 27884 27885
!10047 = (!10045 !10046)
!10048 = span !4477 27832 27889
!10049 = fn_call_path_span !4477 27865 27880
!10050 = (!10048 !10049)
!10051 = span !4477 27933 27940
!10052 = span !4477 27950 27951
!10053 = span !4477 27933 27952
!10054 = fn_call_path_span !4477 27941 27944
!10055 = (!10053 !10054)
!10056 = span !4477 27954 27966
!10057 = span !4477 27832 27967
!10058 = fn_call_path_span !4477 27919 27932
!10059 = (!10057 !10058)
!10060 = span !4477 27993 27994
!10061 = span !4477 27998 27999
!10062 = span !4477 27993 27999
!10063 = fn_call_path_span !4477 27995 27997
!10064 = (!10062 !10063)
!10065 = span !4477 28089 28096
!10066 = span !4477 28098 28107
!10067 = span !4477 28088 28108
!10068 = span !4477 28079 28180
!10069 = span !4477 28044 28203
!10070 = fn_call_path_span !4477 28044 28053
!10071 = (!10069 !10070)
!10072 = span !4477 28294 28297
!10073 = span !4477 28299 28304
!10074 = span !4477 28293 28305
!10075 = span !4477 28284 28377
!10076 = span !4477 28249 28400
!10077 = fn_call_path_span !4477 28249 28258
!10078 = (!10076 !10077)
!10079 = span !5522 3926 4031
!10080 = fn_name_span !5522 3933 3936
!10081 = (!10079 !10080)
!10082 = span !5522 3981 3994
!10083 = fn_call_path_span !5522 3981 3992
!10084 = (!10082 !10083)
!10085 = span !5522 3957 4025
!10086 = span !5522 4013 4014
!10087 = span !5522 589 694
!10088 = fn_name_span !5522 596 599
!10089 = (!10087 !10088)
!10090 = span !5522 655 656
!10091 = span !5522 644 657
!10092 = fn_call_path_span !5522 644 649
!10093 = (!10091 !10092)
!10094 = span !5522 620 688
!10095 = span !5522 676 677
!10096 = span !5522 15529 15534
!10097 = span !5522 15521 15660
!10098 = fn_name_span !5522 15524 15528
!10099 = (!10097 !10098)
!10100 = span !5522 15589 15608
!10101 = fn_call_path_span !5522 15589 15601
!10102 = (!10100 !10101)
!10103 = span !5522 15627 15643
!10104 = fn_call_path_span !5522 15633 15636
!10105 = (!10103 !10104)
!10106 = span !5522 15565 15654
!10107 = span !5522 3043 3048
!10108 = span !5522 3035 3252
!10109 = fn_name_span !5522 3038 3042
!10110 = (!10108 !10109)
!10111 = span !5522 3089 3105
!10112 = fn_call_path_span !5522 3095 3098
!10113 = (!10111 !10112)
!10114 = span !5522 3079 3106
!10115 = span !5522 3136 3139
!10116 = span !5522 3125 3140
!10117 = fn_call_path_span !5522 3125 3130
!10118 = (!10116 !10117)
!10119 = span !5522 3115 3141
!10120 = span !5522 3153 3156
!10121 = span !5522 3159 3160
!10122 = span !5522 3153 3160
!10123 = fn_call_path_span !5522 3157 3158
!10124 = (!10122 !10123)
!10125 = span !5522 3175 3186
!10126 = fn_call_path_span !5522 3181 3184
!10127 = (!10125 !10126)
!10128 = span !5522 3200 3203
!10129 = span !5522 3205 3208
!10130 = span !5522 3175 3209
!10131 = fn_call_path_span !5522 3187 3194
!10132 = (!10130 !10131)
!10133 = span !5522 3236 3239
!10134 = span !5522 3241 3244
!10135 = span !5522 3229 3246
!10136 = (!1487 !1488)
!10137 = (!1490 !1491)
!10138 = (!1457 !1458)
!10139 = (!1460 !1461)
!10140 = (!1463 !1464)
!10141 = (!1468 !1469)
!10142 = span !0 25347 25351
!10143 = span !0 25326 25416
!10144 = fn_name_span !0 25329 25346
!10145 = (!10143 !1196 !10144)
!10146 = span !0 25387 25410
!10147 = fn_call_path_span !0 25387 25404
!10148 = (!10146 !10147)
!10149 = (!44 !45)
!10150 = (!47 !48)
!10151 = (!8314 !8315)
!10152 = (!8317 !8318)
!10153 = (!8320 !8321)
!10154 = span !0 25820 25826
!10155 = span !0 25833 25837
!10156 = span !0 25792 25917
!10157 = fn_name_span !0 25795 25819
!10158 = (!10156 !1196 !10157)
!10159 = span !0 25873 25911
!10160 = fn_call_path_span !0 25873 25897
!10161 = (!10159 !10160)
!10162 = span !0 32442 32448
!10163 = span !0 32455 32459
!10164 = span !0 32414 32650
!10165 = fn_name_span !0 32417 32441
!10166 = (!10164 !1196 !10165)
!10167 = span !0 32510 32533
!10168 = fn_call_path_span !0 32510 32527
!10169 = (!10167 !10168)
!10170 = span !0 32491 32534
!10171 = span !0 32558 32570
!10172 = span !0 32571 32572
!10173 = span !0 32549 32572
!10174 = fn_call_path_span !0 32556 32557
!10175 = (!10173 !10174)
!10176 = span !0 32549 32590
!10177 = fn_call_path_span !0 32573 32574
!10178 = (!10176 !10177)
!10179 = span !0 32609 32621
!10180 = span !0 32622 32623
!10181 = span !0 32600 32623
!10182 = fn_call_path_span !0 32607 32608
!10183 = (!10181 !10182)
!10184 = span !0 32600 32641
!10185 = fn_call_path_span !0 32624 32625
!10186 = (!10184 !10185)
!10187 = span !0 32539 32648
!10188 = span !0 27204 27208
!10189 = span !0 27183 27298
!10190 = fn_name_span !0 27186 27203
!10191 = (!10189 !1196 !10190)
!10192 = span !0 27245 27258
!10193 = span !0 27237 27268
!10194 = fn_call_path_span !0 27259 27262
!10195 = (!10193 !10194)
!10196 = span !0 27237 27279
!10197 = fn_call_path_span !0 27269 27277
!10198 = (!10196 !10197)
!10199 = span !0 27290 27291
!10200 = span !0 27237 27292
!10201 = fn_call_path_span !0 27280 27289
!10202 = (!10200 !10201)
!10203 = span !0 26877 26881
!10204 = span !0 26862 26962
!10205 = fn_name_span !0 26865 26876
!10206 = (!10204 !1196 !10205)
!10207 = span !0 26924 26935
!10208 = span !0 26916 26945
!10209 = fn_call_path_span !0 26936 26939
!10210 = (!10208 !10209)
!10211 = span !0 26916 26956
!10212 = fn_call_path_span !0 26946 26954
!10213 = (!10211 !10212)
!10214 = (!9942 !1196 !9943)
!10215 = (!9945 !9946)
!10216 = (!9949 !9950)
!10217 = (!9953 !9954)
!10218 = (!9958 !9959)
!10219 = (!9961 !9962)
!10220 = (!9968 !9969)
!10221 = (!9971 !9972)
!10222 = (!9976 !9977)
!10223 = (!9981 !9982)
!10224 = (!9986 !9987)
!10225 = (!9992 !9993)
!10226 = (!9996 !9997)
!10227 = (!10002 !10003)
!10228 = (!10005 !10006)
!10229 = (!10009 !10010)
!10230 = (!10012 !10013)
!10231 = (!10021 !10022)
!10232 = (!10026 !10027)
!10233 = (!10031 !10032)
!10234 = (!10039 !10040)
!10235 = (!10045 !10046)
!10236 = (!10048 !10049)
!10237 = (!10053 !10054)
!10238 = (!10057 !10058)
!10239 = (!10062 !10063)
!10240 = (!10069 !10070)
!10241 = (!10076 !10077)
!10242 = (!10079 !10080)
!10243 = (!10082 !10083)
!10244 = (!10087 !10088)
!10245 = (!10091 !10092)
!10246 = (!10097 !10098)
!10247 = (!10100 !10101)
!10248 = (!10103 !10104)
!10249 = (!10108 !10109)
!10250 = (!10111 !10112)
!10251 = (!10116 !10117)
!10252 = (!10122 !10123)
!10253 = (!10125 !10126)
!10254 = (!10130 !10131)
!10255 = (!1487 !1488)
!10256 = (!1490 !1491)
!10257 = (!1457 !1458)
!10258 = (!1460 !1461)
!10259 = (!1463 !1464)
!10260 = (!1468 !1469)
!10261 = (!8824 !8825)
!10262 = (!8827 !8828)
!10263 = (!8832 !8833)
!10264 = (!8840 !8841)
!10265 = (!8844 !8845)
!10266 = (!8847 !8848)
!10267 = (!8853 !8854)
!10268 = (!8859 !8860)
!10269 = (!1195 !1196 !1197)
!10270 = (!1199 !1200)
!10271 = (!1494 !1495 !1496)
!10272 = (!1498 !1499)
!10273 = (!1501 !1502)
!10274 = (!1504 !1505)
!10275 = (!2226 !1495 !2227)
!10276 = (!2229 !2230)
!10277 = (!2232 !2233)
!10278 = (!2235 !2236)
!10279 = (!2281 !193 !2282)
!10280 = (!2284 !2285)
!10281 = (!2287 !2288)
!10282 = (!4967 !193 !4968)
!10283 = (!4970 !4971)
!10284 = (!4973 !4974)
!10285 = (!4976 !4977)
!10286 = (!5026 !193 !5027)
!10287 = (!5029 !5030)
!10288 = (!5032 !5033)
!10289 = (!5035 !5036)
!10290 = (!5038 !5039)
!10291 = (!5043 !5044)
!10292 = (!5053 !5054)
!10293 = (!5431 !193 !5432)
!10294 = (!5434 !5435)
!10295 = (!5437 !5438)
!10296 = (!5440 !5441)
!10297 = (!5443 !5444)
!10298 = (!5447 !5448)
!10299 = (!5456 !5457)
!10300 = (!5669 !193 !5670)
!10301 = (!5672 !5673)
!10302 = (!5675 !5676)
!10303 = (!5678 !5679)
!10304 = (!5682 !5683)
!10305 = (!5685 !5686)
!10306 = (!5688 !5689)
!10307 = (!5691 !5692)
!10308 = (!5695 !5696)
!10309 = (!5699 !5700)
!10310 = (!5708 !5709)
!10311 = (!5711 !5712)
!10312 = (!5717 !5718)
!10313 = (!5722 !5723)
!10314 = (!5725 !5726)
!10315 = (!5730 !5731)
!10316 = (!5733 !5734)
!10317 = (!5739 !5740)
!10318 = (!5742 !5743)
!10319 = (!5747 !5748)
!10320 = (!5751 !5752)
!10321 = (!5755 !5756)
!10322 = (!5760 !5761)
!10323 = (!5764 !5765)
!10324 = (!5768 !5769)
!10325 = (!5773 !5774)
!10326 = (!5777 !5778)
!10327 = (!5785 !5786)
!10328 = (!5788 !5789)
!10329 = (!5791 !5792)
!10330 = (!5797 !5798)
!10331 = (!5800 !5801)
!10332 = (!5805 !5806)
!10333 = (!5809 !5810)
!10334 = (!5814 !5815)
!10335 = (!5819 !5820)
!10336 = (!5823 !5824)
!10337 = (!5826 !5827)
!10338 = (!5830 !5831)
!10339 = (!5834 !5835)
!10340 = (!5838 !5839)
!10341 = (!5841 !5842)
!10342 = (!5844 !5845)
!10343 = (!5848 !5849)
!10344 = (!5852 !5853)
!10345 = (!5856 !5857)
!10346 = (!7934 !193 !7935)
!10347 = (!7937 !7938)
!10348 = (!8024 !193 !8025)
!10349 = (!8027 !8028)
!10350 = (!8030 !8031)
!10351 = (!8033 !8034)
!10352 = (!8037 !8038)
!10353 = (!8040 !8041)
!10354 = (!8043 !8044)
!10355 = (!8056 !8057)
!10356 = (!8061 !8062)
!10357 = (!8066 !8067)
!10358 = (!8070 !8071)
!10359 = (!8073 !8074)
!10360 = (!8079 !8080)
!10361 = (!8082 !8083)
!10362 = (!8087 !8088)
!10363 = (!8092 !8093)
!10364 = (!8096 !8097)
!10365 = (!8099 !8100)
!10366 = (!8105 !8106)
!10367 = (!8108 !8109)
!10368 = (!8113 !8114)
!10369 = (!8118 !8119)
!10370 = (!8123 !8124)
!10371 = (!8127 !8128)
!10372 = (!8130 !8131)
!10373 = (!8135 !8136)
!10374 = (!8139 !8140)
!10375 = (!8142 !8143)
!10376 = (!8145 !8146)
!10377 = (!8151 !8152)
!10378 = (!8156 !8157)
!10379 = (!8161 !8162)
!10380 = (!8166 !8167)
!10381 = (!8169 !8170)
!10382 = (!8174 !8175)
!10383 = (!8179 !8180)
!10384 = (!8184 !8185)
!10385 = (!8189 !8190)
!10386 = (!8192 !8193)
!10387 = (!8197 !8198)
!10388 = (!8201 !8202)
!10389 = (!8207 !8208)
!10390 = (!8213 !8214)
!10391 = (!8218 !8219)
!10392 = (!8221 !8222)
!10393 = (!8256 !193 !8257)
!10394 = (!8259 !8260)
!10395 = (!8262 !8263)
!10396 = (!8265 !8266)
!10397 = (!8268 !8269)
!10398 = (!8275 !8276)
!10399 = (!8296 !193 !8297)
!10400 = (!8299 !8300)
!10401 = (!8302 !8303)
!10402 = (!8305 !8306)
!10403 = (!8308 !8309)
!10404 = (!8326 !1495 !8327)
!10405 = (!8329 !8330)
!10406 = (!8332 !8333)
!10407 = (!8336 !8337)
!10408 = (!8341 !8342)
!10409 = (!8345 !8346)
!10410 = (!8349 !8350)
!10411 = (!8355 !8356)
!10412 = (!8359 !8360)
!10413 = (!8363 !8364)
!10414 = (!8367 !8368)
!10415 = (!8375 !193 !8376)
!10416 = (!8378 !8379)
!10417 = (!8381 !8382)
!10418 = (!8384 !8385)
!10419 = (!8387 !8388)
!10420 = (!8391 !8392)
!10421 = (!8395 !8396)
!10422 = (!8415 !193 !8416)
!10423 = (!8418 !8419)
!10424 = (!8421 !8422)
!10425 = (!8424 !8425)
!10426 = (!8427 !8428)
!10427 = (!8431 !8432)
!10428 = (!8435 !8436)
!10429 = (!8452 !193 !8453)
!10430 = (!8455 !8456)
!10431 = (!8458 !8459)
!10432 = (!8461 !8462)
!10433 = (!8464 !8465)
!10434 = (!8468 !8469)
!10435 = (!8472 !8473)
!10436 = (!8542 !1495 !8543)
!10437 = (!8545 !8546)
!10438 = (!8548 !8549)
!10439 = (!8552 !8553)
!10440 = (!8556 !8557)
!10441 = (!8559 !8560)
!10442 = (!8563 !8564)
!10443 = (!8566 !8567)
!10444 = (!8569 !8570)
!10445 = (!8572 !8573)
!10446 = (!8576 !8577)
!10447 = (!8580 !8581)
!10448 = (!8880 !193 !8881)
!10449 = (!8883 !8884)
!10450 = (!8951 !193 !8952)
!10451 = (!8954 !8955)
!10452 = (!8957 !8958)
!10453 = (!8963 !8964)
!10454 = (!8970 !8971)
!10455 = (!9342 !193 !9343)
!10456 = (!9345 !9346)
!10457 = (!9348 !9349)
!10458 = (!9351 !9352)
!10459 = (!9354 !9355)
!10460 = (!9357 !9358)
!10461 = (!9361 !9362)
!10462 = (!9370 !9371)
!10463 = (!9376 !9377)
!10464 = (!9379 !9380)
!10465 = (!9382 !9383)
!10466 = (!9388 !9389)
!10467 = (!9396 !9397)
!10468 = (!9618 !1196 !9619)
!10469 = (!9622 !9623)
!10470 = (!9625 !9626)
!10471 = (!9628 !9629)
!10472 = (!9631 !9632)
!10473 = (!9638 !1196 !9639)
!10474 = (!9645 !9646)
!10475 = (!9648 !9649)
!10476 = (!9747 !1196 !9748)
!10477 = (!9750 !9751)
!10478 = (!9753 !9754)
!10479 = (!9762 !1196 !9763)
!10480 = (!9765 !9766)
!10481 = (!9778 !1196 !9779)
!10482 = (!9781 !9782)
!10483 = (!9788 !1196 !9789)
!10484 = (!9791 !9792)
!10485 = (!9794 !1196 !9795)
!10486 = (!9797 !9798)
!10487 = (!9801 !1196 !9802)
!10488 = (!9805 !9806)
!10489 = (!9808 !9809)
!10490 = (!9918 !9919)
!10491 = (!9928 !9929)
!10492 = (!9931 !9932)
!10493 = (!9934 !1196 !9935)
!10494 = (!9938 !9939)
!10495 = (!10143 !1196 !10144)
!10496 = (!10146 !10147)
!10497 = (!10156 !1196 !10157)
!10498 = (!10159 !10160)
!10499 = (!10189 !1196 !10190)
!10500 = (!10193 !10194)
!10501 = (!10196 !10197)
!10502 = (!10200 !10201)
!10503 = (!10204 !1196 !10205)
!10504 = (!10208 !10209)
!10505 = (!10211 !10212)

    [1;32mFinished[0m debug [unoptimized + fuel] target(s) [132.688 KB] in 13.11s
