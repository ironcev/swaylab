    [1;32mBuilding[0m /home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg
   [1;32mCompiling[0m library [1mstd[0m (/home/kebradalaonda/p/sway/sway-lib-std)
// IR: Final
library {
}

   [1;32mCompiling[0m script [1mdbg[0m (/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg)
// IR: Final
script {
    global std::debug::STDERR : u64 = const u64 2
    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    pub entry fn __entry() -> __ptr slice, !3 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local mut { ptr, u64, u64 } __aggr_memcpy_00
        local mut { ptr, u64, u64 } __aggr_memcpy_01
        local mut { ptr, u64, u64 } __aggr_memcpy_02
        local mut slice __aggr_memcpy_03
        local { ptr, u64, u64 } __anon_0
        local { ptr, u64, u64 } __anon_00
        local { ptr, u64, u64 } __anon_01
        local { { ptr, u64, u64 } } __anon_1
        local { ptr, u64, u64 } __anon_10
        local { ptr, u64 } __anon_11
        local { { ptr, u64, u64 } } __anon_2
        local slice __ret_value
        local { { ptr, u64, u64 } } __tmp_block_arg
        local { { ptr, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local u64 _result
        local { { ptr, u64, u64 } } buffer
        local { { ptr, u64, u64 } } buffer_
        local u64 item_
        local u64 self_
        local { { ptr, u64, u64 } } self_0

        entry():
        v0 = get_local __ptr slice, __ret_value
        v1 = call main_0(), !6
        v2 = get_local __ptr u64, _result, !7
        store v1 to v2, !7
        v3 = get_local __ptr u64, _result, !8
        v4 = get_local __ptr u64, item_, !11
        mem_copy_val v4, v3
        v5 = get_local __ptr u64, item_, !14
        v6 = const u64 1024
        v7 = asm(cap: v6) -> ptr hp, !17 {
            aloc   cap
        }
        v8 = get_local __ptr { ptr, u64, u64 }, __anon_0, !18
        v9 = const u64 0
        v10 = get_elem_ptr v8, __ptr ptr, v9, !19
        store v7 to v10, !20
        v11 = const u64 1
        v12 = get_elem_ptr v8, __ptr u64, v11, !21
        store v6 to v12, !22
        v13 = const u64 2
        v14 = get_elem_ptr v8, __ptr u64, v13, !23
        v15 = const u64 0
        store v15 to v14, !24
        v16 = asm(buffer: v8) -> __ptr { ptr, u64, u64 } buffer {
        }
        v17 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v17, v16
        v18 = get_local __ptr { { ptr, u64, u64 } }, __anon_1, !26
        v19 = const u64 0
        v20 = get_elem_ptr v18, __ptr { ptr, u64, u64 }, v19, !27
        mem_copy_val v20, v17
        v21 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg
        mem_copy_val v21, v18
        v22 = get_local __ptr u64, self_, !30
        mem_copy_val v22, v5
        v23 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !31
        mem_copy_val v23, v21
        v24 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !33
        v25 = const u64 0
        v26 = get_elem_ptr v24, __ptr { ptr, u64, u64 }, v25, !35
        v27 = asm(buffer: v26) -> __ptr { ptr, u64, u64 } buffer {
        }
        v28 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v28, v27
        v29 = get_local __ptr { ptr, u64, u64 }, __anon_00, !36
        mem_copy_val v29, v28
        v30 = const u64 0
        v31 = get_elem_ptr v29, __ptr ptr, v30, !37
        v32 = load v31, !38
        v33 = const u64 1
        v34 = get_elem_ptr v29, __ptr u64, v33, !39
        v35 = load v34, !40
        v36 = const u64 2
        v37 = get_elem_ptr v29, __ptr u64, v36, !41
        v38 = load v37, !42
        v39 = get_local __ptr u64, self_, !44
        v40 = load v39, !45
        v41 = const u64 8
        v42 = add v38, v41, !46
        v43 = cmp gt v42 v35, !47
        cbr v43, encode_162_abi_encode_163_block1(), encode_162_abi_encode_163_block0(v32, v35), !48

        encode_162_abi_encode_163_block0(v44: ptr, v45: u64):
        v46 = add v44, v38, !49
        v47 = cast_ptr v46 to __ptr u64, !50
        store v40 to v47, !51
        v48 = const u64 8
        v49 = add v38, v48, !52
        v50 = get_local __ptr { ptr, u64, u64 }, __anon_10, !53
        v51 = const u64 0
        v52 = get_elem_ptr v50, __ptr ptr, v51, !54
        store v44 to v52, !55
        v53 = const u64 1
        v54 = get_elem_ptr v50, __ptr u64, v53, !56
        store v45 to v54, !57
        v55 = const u64 2
        v56 = get_elem_ptr v50, __ptr u64, v55, !58
        store v49 to v56, !59
        v57 = asm(buffer: v50) -> __ptr { ptr, u64, u64 } buffer {
        }
        v58 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_01
        mem_copy_val v58, v57
        v59 = get_local __ptr { { ptr, u64, u64 } }, __anon_2, !61
        v60 = const u64 0
        v61 = get_elem_ptr v59, __ptr { ptr, u64, u64 }, v60, !62
        mem_copy_val v61, v58
        v62 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v62, v59
        v63 = get_local __ptr { { ptr, u64, u64 } }, buffer, !64
        mem_copy_val v63, v62
        v64 = get_local __ptr { { ptr, u64, u64 } }, buffer, !66
        v65 = get_local __ptr { { ptr, u64, u64 } }, self_0, !69
        mem_copy_val v65, v64
        v66 = get_local __ptr { { ptr, u64, u64 } }, self_0, !71
        v67 = const u64 0
        v68 = get_elem_ptr v66, __ptr { ptr, u64, u64 }, v67, !72
        v69 = asm(buffer: v68) -> __ptr { ptr, u64, u64 } buffer {
        }
        v70 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_02
        mem_copy_val v70, v69
        v71 = get_local __ptr { ptr, u64, u64 }, __anon_01, !73
        mem_copy_val v71, v70
        v72 = const u64 0
        v73 = get_elem_ptr v71, __ptr ptr, v72, !74
        v74 = const u64 2
        v75 = get_elem_ptr v71, __ptr u64, v74, !75
        v76 = get_local __ptr { ptr, u64 }, __anon_11, !76
        v77 = const u64 0
        v78 = get_elem_ptr v76, __ptr ptr, v77, !77
        mem_copy_val v78, v73
        v79 = const u64 1
        v80 = get_elem_ptr v76, __ptr u64, v79, !78
        mem_copy_val v80, v75
        v81 = asm(s: v76) -> __ptr slice s {
        }
        v82 = get_local __ptr slice, __aggr_memcpy_03
        mem_copy_val v82, v81
        v83 = get_local __ptr slice, __tmp_block_arg1
        mem_copy_val v83, v82
        v84 = get_local __ptr slice, __tmp_block_arg2
        mem_copy_val v84, v83
        mem_copy_val v0, v84
        ret __ptr slice v0

        encode_162_abi_encode_163_block1():
        v85 = const u64 2
        v86 = mul v35, v85, !79
        v87 = add v86, v41, !80
        v88 = asm(new_cap: v87, old_ptr: v32, len: v38) -> __ptr u8 hp, !81 {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br encode_162_abi_encode_163_block0(v88, v87), !82
    }

    entry_orig fn main_0() -> u64, !86 {
        local () _
        local ptr _0
        local { {  }, bool } _1
        local bool __
        local bool ___
        local u8 ____
        local u8 _____
        local u8 ______
        local u8 _______
        local u8 ________
        local u64 _________
        local u64 __________
        local u64 ___________
        local u64 ____________
        local u64 _____________
        local u64 ______________
        local u64 _______________
        local u64 ________________
        local u64 _________________
        local u64 __________________
        local u64 ___________________
        local u64 ____________________
        local u64 _____________________
        local u64 ______________________
        local u64 _______________________
        local u256 ________________________
        local u256 _________________________
        local u256 __________________________
        local u256 ___________________________
        local u256 ____________________________
        local b256 _____________________________
        local b256 ______________________________
        local slice _______________________________
        local string<1> ________________________________
        local { slice, u8 } _________________________________
        local [u8; 2] __________________________________
        local __slice[u8] ___________________________________
        local {  } ____________________________________
        local { u64, ( () | {  } ) } _____________________________________
        local { u64, ( () | {  } ) } ______________________________________
        local { b256 } _______________________________________
        local { b256 } ________________________________________
        local { u64 } _________________________________________
        local { [b256; 2] } __________________________________________
        local { u64 } ___________________________________________
        local { { ptr, u64 }, u64 } ____________________________________________
        local { b256 } _____________________________________________
        local { u64 } ______________________________________________
        local { u64, ( { b256 } | { b256 } ) } _______________________________________________
        local { u64 } ________________________________________________
        local { u64, { b256 }, u64 } _________________________________________________
        local { u64, ( () | u8 ) } __________________________________________________
        local { u64 } ___________________________________________________
        local { u64, ( u64 | u64 ) } ____________________________________________________
        local { { { ptr, u64 }, u64 } } _____________________________________________________
        local { u64 } ______________________________________________________
        local { u64, u64 } _______________________________________________________
        local { u64 } ________________________________________________________
        local { { ptr, u64 }, u64 } _________________________________________________________
        local { { { ptr, u64 }, u64 }, u64 } __________________________________________________________
        local mut slice __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local mut { {  }, bool } __aggr_memcpy_01
        local mut { {  }, bool } __aggr_memcpy_010
        local mut { {  }, bool } __aggr_memcpy_011
        local mut { {  }, bool } __aggr_memcpy_012
        local mut { {  }, bool } __aggr_memcpy_013
        local mut { {  }, bool } __aggr_memcpy_014
        local mut { {  }, bool } __aggr_memcpy_015
        local mut { {  }, bool } __aggr_memcpy_016
        local mut { {  }, bool } __aggr_memcpy_017
        local mut { {  }, bool } __aggr_memcpy_018
        local mut { {  }, bool } __aggr_memcpy_019
        local mut { {  }, bool } __aggr_memcpy_02
        local mut { {  }, bool } __aggr_memcpy_020
        local mut { {  }, bool } __aggr_memcpy_021
        local mut { {  }, bool } __aggr_memcpy_022
        local mut slice __aggr_memcpy_023
        local mut { ptr, u64 } __aggr_memcpy_024
        local mut slice __aggr_memcpy_025
        local mut { {  }, bool } __aggr_memcpy_026
        local mut { {  }, bool } __aggr_memcpy_027
        local mut { {  }, bool } __aggr_memcpy_028
        local mut { { ptr, u64 }, u64 } __aggr_memcpy_029
        local mut { {  }, bool } __aggr_memcpy_03
        local mut { { ptr, u64 }, u64 } __aggr_memcpy_030
        local mut { {  }, bool } __aggr_memcpy_031
        local mut { {  }, bool } __aggr_memcpy_032
        local mut __slice[u8] __aggr_memcpy_04
        local mut { {  }, bool } __aggr_memcpy_05
        local mut { ptr, u64 } __aggr_memcpy_06
        local mut { {  }, bool } __aggr_memcpy_07
        local mut { {  }, bool } __aggr_memcpy_08
        local mut { {  }, bool } __aggr_memcpy_09
        local {  } __anon_0
        local string<2> __anon_00
        local string<2> __anon_000
        local string<2> __anon_0000
        local { ptr, u64 } __anon_00000
        local { ptr, u64 } __anon_0001
        local string<2> __anon_001
        local { ptr, u64 } __anon_002
        local { u64, ( () | u8 ) } __anon_003
        local string<2> __anon_004
        local string<2> __anon_005
        local { ptr, u64 } __anon_006
        local string<2> __anon_007
        local { ptr, u64 } __anon_01
        local { { ptr, u64 }, u64 } __anon_010
        local { { { ptr, u64 }, u64 }, u64 } __anon_011
        local { { ptr, u64 }, u64 } __anon_0110
        local { b256 } __anon_012
        local string<22> __anon_013
        local { b256 } __anon_014
        local string<8> __anon_015
        local string<2> __anon_016
        local string<4> __anon_017
        local { b256 } __anon_018
        local string<10> __anon_019
        local string<0> __anon_02
        local string<4> __anon_020
        local string<4> __anon_021
        local { u64, ( u64 | u64 ) } __anon_022
        local string<6> __anon_023
        local { { { ptr, u64 }, u64 } } __anon_024
        local { ptr, u64 } __anon_025
        local string<6> __anon_026
        local { u64, u64 } __anon_027
        local string<4> __anon_028
        local string<15> __anon_029
        local __ptr u8 __anon_03
        local { { { ptr, u64 }, u64 }, u64 } __anon_030
        local string<7> __anon_031
        local { b256 } __anon_04
        local { b256 } __anon_05
        local string<30> __anon_06
        local [b256; 2] __anon_07
        local string<4> __anon_08
        local string<18> __anon_09
        local string<25> __anon_1
        local slice __anon_10
        local { ptr, u64 } __anon_100
        local { ptr, u64 } __anon_1000
        local slice __anon_101
        local { ptr, u64 } __anon_1010
        local { ptr, u64 } __anon_1011
        local { ptr, u64 } __anon_1012
        local { ptr, u64 } __anon_1013
        local { ptr, u64 } __anon_1014
        local { ptr, u64 } __anon_1015
        local { ptr, u64 } __anon_1016
        local string<1> __anon_102
        local { ptr, u64 } __anon_103
        local slice __anon_104
        local {  } __anon_105
        local string<28> __anon_106
        local { ptr, u64 } __anon_107
        local slice __anon_108
        local string<1> __anon_109
        local string<1> __anon_11
        local { ptr, u64 } __anon_110
        local { ptr, u64 } __anon_1100
        local { ptr, u64 } __anon_1101
        local { ptr, u64 } __anon_1102
        local { [b256; 2] } __anon_1103
        local { ptr, u64 } __anon_1104
        local { ptr, u64 } __anon_1105
        local { u64, ( () | u8 ) } __anon_1106
        local { ptr, u64 } __anon_1107
        local { ptr, u64 } __anon_1108
        local { ptr, u64 } __anon_1109
        local slice __anon_111
        local { ptr, u64 } __anon_1110
        local { ptr, u64 } __anon_1111
        local slice __anon_1112
        local { ptr, u64 } __anon_1113
        local { ptr, u64 } __anon_1114
        local slice __anon_1115
        local { ptr, u64 } __anon_1116
        local { ptr, u64 } __anon_1117
        local slice __anon_1118
        local { ptr, u64 } __anon_1119
        local {  } __anon_112
        local { ptr, u64 } __anon_1120
        local { ptr, u64 } __anon_1121
        local string<29> __anon_113
        local { ptr, u64 } __anon_114
        local slice __anon_115
        local string<1> __anon_116
        local { ptr, u64 } __anon_117
        local slice __anon_118
        local {  } __anon_119
        local { ptr, u64 } __anon_12
        local string<33> __anon_120
        local { ptr, u64 } __anon_121
        local { ptr, u64 } __anon_1210
        local string<15> __anon_1211
        local string<6> __anon_1212
        local slice __anon_122
        local string<1> __anon_123
        local { ptr, u64 } __anon_124
        local slice __anon_125
        local {  } __anon_126
        local string<33> __anon_127
        local { ptr, u64 } __anon_128
        local slice __anon_129
        local slice __anon_13
        local string<1> __anon_130
        local { ptr, u64 } __anon_131
        local { ptr, u64 } __anon_1310
        local { ptr, u64 } __anon_1311
        local slice __anon_132
        local {  } __anon_133
        local string<27> __anon_134
        local { ptr, u64 } __anon_135
        local slice __anon_136
        local string<1> __anon_137
        local { ptr, u64 } __anon_138
        local slice __anon_139
        local {  } __anon_14
        local {  } __anon_140
        local string<28> __anon_141
        local slice __anon_1410
        local slice __anon_1411
        local { ptr, u64 } __anon_142
        local slice __anon_143
        local string<1> __anon_144
        local { ptr, u64 } __anon_145
        local slice __anon_146
        local {  } __anon_147
        local string<29> __anon_148
        local { ptr, u64 } __anon_149
        local string<28> __anon_15
        local slice __anon_150
        local string<1> __anon_151
        local string<4> __anon_1510
        local { ptr, u64 } __anon_152
        local slice __anon_153
        local {  } __anon_154
        local string<33> __anon_155
        local { ptr, u64 } __anon_156
        local slice __anon_157
        local string<1> __anon_158
        local { ptr, u64 } __anon_159
        local { ptr, u64 } __anon_16
        local slice __anon_160
        local {  } __anon_161
        local { ptr, u64 } __anon_1610
        local string<34> __anon_162
        local { ptr, u64 } __anon_163
        local slice __anon_164
        local string<1> __anon_165
        local { ptr, u64 } __anon_166
        local slice __anon_167
        local {  } __anon_168
        local string<28> __anon_169
        local slice __anon_17
        local { ptr, u64 } __anon_170
        local slice __anon_171
        local slice __anon_1710
        local string<1> __anon_172
        local { ptr, u64 } __anon_173
        local slice __anon_174
        local {  } __anon_175
        local string<29> __anon_176
        local { ptr, u64 } __anon_177
        local slice __anon_178
        local string<1> __anon_179
        local string<1> __anon_18
        local { ptr, u64 } __anon_180
        local slice __anon_181
        local {  } __anon_182
        local string<30> __anon_183
        local { ptr, u64 } __anon_184
        local slice __anon_185
        local string<1> __anon_186
        local { ptr, u64 } __anon_187
        local slice __anon_188
        local {  } __anon_189
        local { ptr, u64 } __anon_19
        local string<34> __anon_190
        local { ptr, u64 } __anon_191
        local slice __anon_192
        local string<1> __anon_193
        local { ptr, u64 } __anon_194
        local slice __anon_195
        local {  } __anon_196
        local string<34> __anon_197
        local { ptr, u64 } __anon_198
        local slice __anon_199
        local { ptr, u64 } __anon_2
        local slice __anon_20
        local string<1> __anon_200
        local slice __anon_2000
        local { ptr, u64 } __anon_201
        local slice __anon_2010
        local slice __anon_2011
        local slice __anon_2012
        local slice __anon_2013
        local slice __anon_2014
        local slice __anon_202
        local {  } __anon_203
        local string<34> __anon_204
        local { ptr, u64 } __anon_205
        local slice __anon_206
        local string<1> __anon_207
        local { ptr, u64 } __anon_208
        local slice __anon_209
        local {  } __anon_21
        local string<1> __anon_210
        local slice __anon_2100
        local slice __anon_2101
        local slice __anon_2102
        local slice __anon_2103
        local slice __anon_2104
        local slice __anon_2105
        local slice __anon_2106
        local slice __anon_2107
        local slice __anon_2108
        local slice __anon_2109
        local { ptr, u64 } __anon_211
        local slice __anon_2110
        local slice __anon_2111
        local slice __anon_2112
        local slice __anon_2113
        local slice __anon_2114
        local slice __anon_2115
        local slice __anon_2116
        local slice __anon_212
        local {  } __anon_213
        local string<26> __anon_214
        local { ptr, u64 } __anon_215
        local slice __anon_216
        local string<1> __anon_217
        local { ptr, u64 } __anon_218
        local slice __anon_219
        local string<32> __anon_22
        local string<1> __anon_220
        local {  } __anon_221
        local string<42> __anon_222
        local { ptr, u64 } __anon_223
        local slice __anon_224
        local string<1> __anon_225
        local { ptr, u64 } __anon_226
        local slice __anon_227
        local string<1> __anon_228
        local { ptr, u64 } __anon_229
        local { ptr, u64 } __anon_23
        local slice __anon_230
        local { slice, u8 } __anon_231
        local {  } __anon_232
        local string<33> __anon_233
        local { ptr, u64 } __anon_234
        local slice __anon_235
        local string<1> __anon_236
        local { ptr, u64 } __anon_237
        local slice __anon_238
        local [u8; 2] __anon_239
        local slice __anon_24
        local {  } __anon_240
        local string<33> __anon_241
        local { ptr, u64 } __anon_242
        local slice __anon_243
        local string<1> __anon_244
        local { ptr, u64 } __anon_245
        local slice __anon_246
        local [u8; 2] __anon_247
        local { __ptr u8, u64 } __anon_248
        local {  } __anon_249
        local string<1> __anon_25
        local string<49> __anon_250
        local { ptr, u64 } __anon_251
        local slice __anon_252
        local string<1> __anon_253
        local { ptr, u64 } __anon_254
        local slice __anon_255
        local {  } __anon_256
        local {  } __anon_257
        local string<27> __anon_258
        local { ptr, u64 } __anon_259
        local { ptr, u64 } __anon_26
        local slice __anon_260
        local string<1> __anon_261
        local { ptr, u64 } __anon_262
        local slice __anon_263
        local { u64, ( () | {  } ) } __anon_264
        local {  } __anon_265
        local string<30> __anon_266
        local { ptr, u64 } __anon_267
        local slice __anon_268
        local string<1> __anon_269
        local slice __anon_27
        local { ptr, u64 } __anon_270
        local slice __anon_271
        local { u64, ( () | {  } ) } __anon_272
        local {  } __anon_273
        local {  } __anon_274
        local string<36> __anon_275
        local { ptr, u64 } __anon_276
        local slice __anon_277
        local string<1> __anon_278
        local { ptr, u64 } __anon_279
        local {  } __anon_28
        local slice __anon_280
        local {  } __anon_281
        local string<52> __anon_282
        local { ptr, u64 } __anon_283
        local slice __anon_284
        local string<1> __anon_285
        local { ptr, u64 } __anon_286
        local slice __anon_287
        local {  } __anon_288
        local string<53> __anon_289
        local string<26> __anon_29
        local { ptr, u64 } __anon_290
        local slice __anon_291
        local string<1> __anon_292
        local { ptr, u64 } __anon_293
        local slice __anon_294
        local { u64 } __anon_295
        local {  } __anon_296
        local string<75> __anon_297
        local { ptr, u64 } __anon_298
        local slice __anon_299
        local slice __anon_3
        local { ptr, u64 } __anon_30
        local string<1> __anon_300
        local { ptr, u64 } __anon_301
        local string<2> __anon_3010
        local string<2> __anon_3011
        local string<2> __anon_3012
        local slice __anon_302
        local {  } __anon_303
        local string<46> __anon_304
        local { ptr, u64 } __anon_305
        local slice __anon_306
        local string<1> __anon_307
        local { ptr, u64 } __anon_308
        local slice __anon_309
        local slice __anon_31
        local { u64 } __anon_310
        local string<16> __anon_3100
        local string<4> __anon_3101
        local string<17> __anon_3102
        local string<8> __anon_3103
        local string<8> __anon_3104
        local string<5> __anon_3105
        local string<6> __anon_3106
        local string<8> __anon_3107
        local string<6> __anon_3108
        local string<6> __anon_3109
        local {  } __anon_311
        local string<5> __anon_3110
        local string<6> __anon_3111
        local string<69> __anon_312
        local { ptr, u64 } __anon_313
        local slice __anon_314
        local string<1> __anon_315
        local { ptr, u64 } __anon_316
        local slice __anon_317
        local {  } __anon_318
        local string<139> __anon_319
        local string<1> __anon_32
        local { ptr, u64 } __anon_320
        local slice __anon_321
        local string<1> __anon_322
        local { ptr, u64 } __anon_323
        local slice __anon_324
        local {  } __anon_325
        local string<59> __anon_326
        local { ptr, u64 } __anon_327
        local slice __anon_328
        local string<1> __anon_329
        local { ptr, u64 } __anon_33
        local { ptr, u64 } __anon_330
        local slice __anon_331
        local { u64 } __anon_332
        local {  } __anon_333
        local string<66> __anon_334
        local { ptr, u64 } __anon_335
        local slice __anon_336
        local string<1> __anon_337
        local { ptr, u64 } __anon_338
        local slice __anon_339
        local slice __anon_34
        local { u64, ( { b256 } | { b256 } ) } __anon_340
        local {  } __anon_341
        local string<72> __anon_342
        local { ptr, u64 } __anon_343
        local slice __anon_344
        local string<1> __anon_345
        local { ptr, u64 } __anon_346
        local slice __anon_347
        local { u64 } __anon_348
        local {  } __anon_349
        local {  } __anon_35
        local string<47> __anon_350
        local { ptr, u64 } __anon_351
        local slice __anon_352
        local string<1> __anon_353
        local { ptr, u64 } __anon_354
        local slice __anon_355
        local { u64, { b256 }, u64 } __anon_356
        local {  } __anon_357
        local string<130> __anon_358
        local { ptr, u64 } __anon_359
        local string<27> __anon_36
        local slice __anon_360
        local string<1> __anon_361
        local { ptr, u64 } __anon_362
        local slice __anon_363
        local { u64, ( () | u8 ) } __anon_364
        local {  } __anon_365
        local string<53> __anon_366
        local { ptr, u64 } __anon_367
        local slice __anon_368
        local string<1> __anon_369
        local { ptr, u64 } __anon_37
        local { ptr, u64 } __anon_370
        local slice __anon_371
        local { u64 } __anon_372
        local {  } __anon_373
        local string<49> __anon_374
        local { ptr, u64 } __anon_375
        local slice __anon_376
        local string<1> __anon_377
        local { ptr, u64 } __anon_378
        local slice __anon_379
        local slice __anon_38
        local {  } __anon_380
        local string<26> __anon_381
        local { ptr, u64 } __anon_382
        local slice __anon_383
        local string<1> __anon_384
        local { ptr, u64 } __anon_385
        local slice __anon_386
        local string<5> __anon_387
        local { ptr, u64 } __anon_388
        local slice __anon_389
        local string<1> __anon_39
        local {  } __anon_390
        local string<67> __anon_391
        local { ptr, u64 } __anon_392
        local slice __anon_393
        local string<1> __anon_394
        local { ptr, u64 } __anon_395
        local slice __anon_396
        local { u64 } __anon_397
        local {  } __anon_398
        local string<51> __anon_399
        local string<1> __anon_4
        local { ptr, u64 } __anon_40
        local { ptr, u64 } __anon_400
        local slice __anon_401
        local { ptr, u64 } __anon_4010
        local { ptr, u64 } __anon_4011
        local { ptr, u64 } __anon_4012
        local string<1> __anon_402
        local { ptr, u64 } __anon_403
        local slice __anon_404
        local {  } __anon_405
        local string<46> __anon_406
        local { ptr, u64 } __anon_407
        local slice __anon_408
        local string<1> __anon_409
        local slice __anon_41
        local { ptr, u64 } __anon_410
        local slice __anon_411
        local { u64 } __anon_412
        local {  } __anon_413
        local string<61> __anon_414
        local { ptr, u64 } __anon_415
        local slice __anon_416
        local string<1> __anon_417
        local { ptr, u64 } __anon_418
        local slice __anon_419
        local {  } __anon_42
        local {  } __anon_420
        local string<125> __anon_421
        local { ptr, u64 } __anon_422
        local slice __anon_423
        local string<1> __anon_424
        local { ptr, u64 } __anon_425
        local slice __anon_426
        local {  } __anon_427
        local string<132> __anon_428
        local { ptr, u64 } __anon_429
        local string<28> __anon_43
        local slice __anon_430
        local string<1> __anon_431
        local { ptr, u64 } __anon_432
        local slice __anon_433
        local {  } __anon_434
        local string<28> __anon_435
        local { ptr, u64 } __anon_436
        local slice __anon_437
        local string<1> __anon_438
        local { ptr, u64 } __anon_439
        local { ptr, u64 } __anon_44
        local slice __anon_440
        local { ptr, u64 } __anon_441
        local { ptr, u64 } __anon_442
        local { ptr, u64 } __anon_443
        local { ptr, u64 } __anon_444
        local { ptr, u64 } __anon_445
        local { ptr, u64 } __anon_446
        local { ptr, u64 } __anon_447
        local { ptr, u64 } __anon_448
        local { ptr, u64 } __anon_449
        local slice __anon_45
        local { ptr, u64 } __anon_450
        local { ptr, u64 } __anon_451
        local { ptr, u64 } __anon_452
        local string<1> __anon_46
        local { ptr, u64 } __anon_47
        local slice __anon_48
        local {  } __anon_49
        local { ptr, u64 } __anon_5
        local string<32> __anon_50
        local slice __anon_500
        local slice __anon_501
        local slice __anon_502
        local { ptr, u64 } __anon_51
        local slice __anon_510
        local slice __anon_511
        local slice __anon_512
        local slice __anon_513
        local slice __anon_514
        local slice __anon_515
        local slice __anon_516
        local slice __anon_517
        local slice __anon_518
        local slice __anon_519
        local slice __anon_52
        local slice __anon_520
        local slice __anon_521
        local string<1> __anon_53
        local { ptr, u64 } __anon_54
        local slice __anon_55
        local {  } __anon_56
        local string<33> __anon_57
        local { ptr, u64 } __anon_58
        local slice __anon_59
        local slice __anon_6
        local string<1> __anon_60
        local { ptr, u64 } __anon_61
        local string<7> __anon_610
        local string<8> __anon_611
        local string<6> __anon_612
        local string<4> __anon_613
        local string<5> __anon_614
        local string<5> __anon_615
        local slice __anon_62
        local {  } __anon_63
        local string<27> __anon_64
        local { ptr, u64 } __anon_65
        local slice __anon_66
        local string<1> __anon_67
        local { ptr, u64 } __anon_68
        local slice __anon_69
        local {  } __anon_7
        local {  } __anon_70
        local string<28> __anon_71
        local { ptr, u64 } __anon_710
        local { ptr, u64 } __anon_711
        local { ptr, u64 } __anon_712
        local { ptr, u64 } __anon_713
        local { ptr, u64 } __anon_714
        local { ptr, u64 } __anon_715
        local { ptr, u64 } __anon_72
        local slice __anon_73
        local string<1> __anon_74
        local { ptr, u64 } __anon_75
        local slice __anon_76
        local {  } __anon_77
        local string<29> __anon_78
        local { ptr, u64 } __anon_79
        local string<27> __anon_8
        local slice __anon_80
        local string<1> __anon_81
        local slice __anon_810
        local slice __anon_811
        local slice __anon_812
        local slice __anon_813
        local slice __anon_814
        local slice __anon_815
        local { ptr, u64 } __anon_82
        local slice __anon_83
        local {  } __anon_84
        local string<33> __anon_85
        local { ptr, u64 } __anon_86
        local slice __anon_87
        local string<1> __anon_88
        local { ptr, u64 } __anon_89
        local { ptr, u64 } __anon_9
        local slice __anon_90
        local {  } __anon_91
        local string<3> __anon_910
        local string<8> __anon_911
        local string<7> __anon_912
        local string<33> __anon_92
        local { ptr, u64 } __anon_93
        local slice __anon_94
        local string<1> __anon_95
        local { ptr, u64 } __anon_96
        local slice __anon_97
        local {  } __anon_98
        local string<27> __anon_99
        local string<25> __const = const string<25> "[src/main.sw:13:13] () = "
        local string<2> __const0 = const string<2> "()"
        local string<1> __const1 = const string<1> "\x0a"
        local string<27> __const10 = const string<27> "[src/main.sw:20:13] 10u8 = "
        local string<46> __const100 = const string<46> "[src/main.sw:69:13] std::b512::B512::zero() = "
        local string<4> __const101 = const string<4> "B512"
        local string<4> __const102 = const string<4> "bits"
        local string<2> __const103 = const string<2> ", "
        local string<2> __const104 = const string<2> ": "
        local string<2> __const105 = const string<2> ", "
        local string<1> __const106 = const string<1> "\x0a"
        local string<69> __const107 = const string<69> "[src/main.sw:71:13] std::block::BlockHashError::BlockHeightTooHigh = "
        local string<18> __const108 = const string<18> "BlockHeightTooHigh"
        local string<1> __const109 = const string<1> "\x0a"
        local string<1> __const11 = const string<1> "\x0a"
        local string<139> __const110 = const string<139> "[src/main.sw:72:13] {\x0a    let mut bytes = std::bytes::Bytes::new();\x0a    bytes.push(1);\x0a    bytes.push(2);\x0a    bytes.push(3);\x0a    bytes\x0a} = "
        local string<1> __const111 = const string<1> "\x0a"
        local b256 __const112 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<59> __const113 = const string<59> "[src/main.sw:79:13] std::contract_id::ContractId::zero() = "
        local string<1> __const114 = const string<1> "\x0a"
        local string<66> __const115 = const string<66> "[src/main.sw:81:13] std::ecr::EcRecoverError::ZeroLengthMessage = "
        local string<22> __const116 = const string<22> "UnrecoverablePublicKey"
        local string<17> __const117 = const string<17> "ZeroLengthMessage"
        local string<1> __const118 = const string<1> "\x0a"
        local b256 __const119 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<28> __const12 = const string<28> "[src/main.sw:21:13] 100u8 = "
        local string<72> __const120 = const string<72> "[src/main.sw:82:13] std::identity::Identity::Address(Address::zero()) = "
        local string<8> __const121 = const string<8> "Identity"
        local string<2> __const122 = const string<2> ", "
        local string<8> __const123 = const string<8> "Identity"
        local string<2> __const124 = const string<2> ", "
        local string<1> __const125 = const string<1> "\x0a"
        local string<47> __const126 = const string<47> "[src/main.sw:84:13] std::inputs::Input::Coin = "
        local string<4> __const127 = const string<4> "Coin"
        local string<8> __const128 = const string<8> "Contract"
        local string<7> __const129 = const string<7> "Message"
        local string<1> __const13 = const string<1> "\x0a"
        local string<1> __const130 = const string<1> "\x0a"
        local b256 __const131 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<130> __const132 = const string<130> "[src/main.sw:86:13] std::low_level_call::CallParams {\x0a    coins: 1,\x0a    asset_id: std::asset_id::AssetId::zero(),\x0a    gas: 2,\x0a} = "
        local string<10> __const133 = const string<10> "CallParams"
        local string<5> __const134 = const string<5> "coins"
        local string<8> __const135 = const string<8> "asset_id"
        local string<2> __const136 = const string<2> ", "
        local string<2> __const137 = const string<2> ": "
        local string<3> __const138 = const string<3> "gas"
        local string<1> __const139 = const string<1> "\x0a"
        local string<32> __const14 = const string<32> "[src/main.sw:22:13] u8::max() = "
        local string<53> __const140 = const string<53> "[src/main.sw:91:13] std::option::Option::Some(1u8) = "
        local string<4> __const141 = const string<4> "None"
        local string<6> __const142 = const string<6> "Option"
        local string<1> __const143 = const string<1> "\x0a"
        local string<49> __const144 = const string<49> "[src/main.sw:93:13] std::outputs::Output::Coin = "
        local string<4> __const145 = const string<4> "Coin"
        local string<8> __const146 = const string<8> "Contract"
        local string<6> __const147 = const string<6> "Change"
        local string<8> __const148 = const string<8> "Variable"
        local string<15> __const149 = const string<15> "ContractCreated"
        local string<1> __const15 = const string<1> "\x0a"
        local string<1> __const150 = const string<1> "\x0a"
        local string<26> __const151 = const string<26> "[src/main.sw:94:13] f() = "
        local string<6> __const152 = const string<6> "Result"
        local string<6> __const153 = const string<6> "Result"
        local string<1> __const154 = const string<1> "\x0a"
        local string<5> __const155 = const string<5> "hello"
        local string<67> __const156 = const string<67> "[src/main.sw:96:13] std::string::String::from_ascii_str(\x22hello\x22) = "
        local string<1> __const157 = const string<1> "\x0a"
        local string<51> __const158 = const string<51> "[src/main.sw:97:13] std::tx::Transaction::Script = "
        local string<6> __const159 = const string<6> "Script"
        local string<33> __const16 = const string<33> "[src/main.sw:24:13] u16::min() = "
        local string<6> __const160 = const string<6> "Create"
        local string<4> __const161 = const string<4> "Mint"
        local string<7> __const162 = const string<7> "Upgrade"
        local string<6> __const163 = const string<6> "Upload"
        local string<4> __const164 = const string<4> "Blob"
        local string<1> __const165 = const string<1> "\x0a"
        local string<46> __const166 = const string<46> "[src/main.sw:99:13] std::u128::U128::zero() = "
        local string<4> __const167 = const string<4> "U128"
        local string<5> __const168 = const string<5> "upper"
        local string<5> __const169 = const string<5> "lower"
        local string<1> __const17 = const string<1> "\x0a"
        local string<1> __const170 = const string<1> "\x0a"
        local string<61> __const171 = const string<61> "[src/main.sw:100:13] std::u128::U128Error::LossOfPrecision = "
        local string<15> __const172 = const string<15> "LossOfPrecision"
        local string<1> __const173 = const string<1> "\x0a"
        local string<125> __const174 = const string<125> "[src/main.sw:101:13] {\x0a    let mut v = std::vec::Vec::new();\x0a    v.push(1u64);\x0a    v.push(2u64);\x0a    v.push(3u64);\x0a    v\x0a} = "
        local string<1> __const175 = const string<1> "\x0a"
        local string<132> __const176 = const string<132> "[src/main.sw:108:13] {\x0a    let mut v = std::vec::Vec::new();\x0a    v.push(1u64);\x0a    v.push(2u64);\x0a    v.push(3u64);\x0a    v.iter()\x0a} = "
        local string<7> __const177 = const string<7> "VecIter"
        local string<6> __const178 = const string<6> "values"
        local string<2> __const179 = const string<2> ", "
        local string<27> __const18 = const string<27> "[src/main.sw:25:13] 1u16 = "
        local string<2> __const180 = const string<2> ": "
        local string<5> __const181 = const string<5> "index"
        local string<1> __const182 = const string<1> "\x0a"
        local string<28> __const183 = const string<28> "[src/main.sw:117:5] 11u64 = "
        local string<1> __const184 = const string<1> "\x0a"
        local string<1> __const19 = const string<1> "\x0a"
        local string<27> __const2 = const string<27> "[src/main.sw:15:13] true = "
        local string<28> __const20 = const string<28> "[src/main.sw:26:13] 10u16 = "
        local string<1> __const21 = const string<1> "\x0a"
        local string<29> __const22 = const string<29> "[src/main.sw:27:13] 100u16 = "
        local string<1> __const23 = const string<1> "\x0a"
        local string<33> __const24 = const string<33> "[src/main.sw:28:13] u16::max() = "
        local string<1> __const25 = const string<1> "\x0a"
        local string<33> __const26 = const string<33> "[src/main.sw:30:13] u32::min() = "
        local string<1> __const27 = const string<1> "\x0a"
        local string<27> __const28 = const string<27> "[src/main.sw:31:13] 1u32 = "
        local string<1> __const29 = const string<1> "\x0a"
        local string<1> __const3 = const string<1> "\x0a"
        local string<28> __const30 = const string<28> "[src/main.sw:32:13] 10u32 = "
        local string<1> __const31 = const string<1> "\x0a"
        local string<29> __const32 = const string<29> "[src/main.sw:33:13] 100u32 = "
        local string<1> __const33 = const string<1> "\x0a"
        local string<33> __const34 = const string<33> "[src/main.sw:34:13] u32::max() = "
        local string<1> __const35 = const string<1> "\x0a"
        local string<33> __const36 = const string<33> "[src/main.sw:36:13] u64::min() = "
        local string<1> __const37 = const string<1> "\x0a"
        local string<27> __const38 = const string<27> "[src/main.sw:37:13] 1u64 = "
        local string<1> __const39 = const string<1> "\x0a"
        local string<28> __const4 = const string<28> "[src/main.sw:16:13] false = "
        local string<28> __const40 = const string<28> "[src/main.sw:38:13] 10u64 = "
        local string<1> __const41 = const string<1> "\x0a"
        local string<29> __const42 = const string<29> "[src/main.sw:39:13] 100u64 = "
        local string<1> __const43 = const string<1> "\x0a"
        local string<33> __const44 = const string<33> "[src/main.sw:40:13] u64::max() = "
        local string<1> __const45 = const string<1> "\x0a"
        local u256 __const46 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<34> __const47 = const string<34> "[src/main.sw:42:13] u256::min() = "
        local string<1> __const48 = const string<1> "\x0a"
        local u256 __const49 = const u256 0x0000000000000000000000000000000000000000000000000000000000000001
        local string<1> __const5 = const string<1> "\x0a"
        local string<28> __const50 = const string<28> "[src/main.sw:43:13] 1u256 = "
        local string<1> __const51 = const string<1> "\x0a"
        local u256 __const52 = const u256 0x000000000000000000000000000000000000000000000000000000000000000a
        local string<29> __const53 = const string<29> "[src/main.sw:44:13] 10u256 = "
        local string<1> __const54 = const string<1> "\x0a"
        local u256 __const55 = const u256 0x0000000000000000000000000000000000000000000000000000000000000064
        local string<30> __const56 = const string<30> "[src/main.sw:45:13] 100u256 = "
        local string<1> __const57 = const string<1> "\x0a"
        local u256 __const58 = const u256 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        local string<34> __const59 = const string<34> "[src/main.sw:46:13] u256::max() = "
        local string<32> __const6 = const string<32> "[src/main.sw:18:13] u8::min() = "
        local string<1> __const60 = const string<1> "\x0a"
        local b256 __const61 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<34> __const62 = const string<34> "[src/main.sw:48:13] b256::min() = "
        local string<1> __const63 = const string<1> "\x0a"
        local b256 __const64 = const b256 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        local string<34> __const65 = const string<34> "[src/main.sw:49:13] b256::max() = "
        local string<1> __const66 = const string<1> "\x0a"
        local string<1> __const67 = const string<1> "A"
        local string<26> __const68 = const string<26> "[src/main.sw:52:13] \x22A\x22 = "
        local string<1> __const69 = const string<1> "\x0a"
        local string<1> __const7 = const string<1> "\x0a"
        local string<1> __const70 = const string<1> "A"
        local string<42> __const71 = const string<42> "[src/main.sw:53:13] __to_str_array(\x22A\x22) = "
        local string<1> __const72 = const string<1> "\x0a"
        local string<1> __const73 = const string<1> "A"
        local string<33> __const74 = const string<33> "[src/main.sw:56:13] (\x22A\x22, 0u8) = "
        local string<0> __const75 = const string<0> ""
        local string<2> __const76 = const string<2> ", "
        local string<1> __const77 = const string<1> "\x0a"
        local string<33> __const78 = const string<33> "[src/main.sw:57:13] [0u8, 1u8] = "
        local string<1> __const79 = const string<1> "\x0a"
        local string<26> __const8 = const string<26> "[src/main.sw:19:13] 1u8 = "
        local string<49> __const80 = const string<49> "[src/main.sw:58:13] __slice(&[0u8, 1u8], 0, 2) = "
        local string<1> __const81 = const string<1> "\x0a"
        local string<27> __const82 = const string<27> "[src/main.sw:61:13] S {} = "
        local string<1> __const83 = const string<1> "\x0a"
        local string<30> __const84 = const string<30> "[src/main.sw:62:13] E::None = "
        local string<1> __const85 = const string<1> "\x0a"
        local string<36> __const86 = const string<36> "[src/main.sw:63:13] E::Some(S {}) = "
        local string<1> __const87 = const string<1> "\x0a"
        local b256 __const88 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<52> __const89 = const string<52> "[src/main.sw:66:13] std::address::Address::zero() = "
        local string<1> __const9 = const string<1> "\x0a"
        local string<1> __const90 = const string<1> "\x0a"
        local b256 __const91 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<53> __const92 = const string<53> "[src/main.sw:67:13] std::asset_id::AssetId::zero() = "
        local string<1> __const93 = const string<1> "\x0a"
        local string<75> __const94 = const string<75> "[src/main.sw:68:13] std::auth::AuthError::InputsNotAllOwnedBySameAddress = "
        local string<30> __const95 = const string<30> "InputsNotAllOwnedBySameAddress"
        local string<16> __const96 = const string<16> "CallerIsInternal"
        local string<1> __const97 = const string<1> "\x0a"
        local b256 __const98 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local b256 __const99 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local mut { { { ptr, u64 }, u64 }, u64 } __for_iterable_2
        local mut { u64, ( () | u8 ) } __for_value_opt_1
        local { u64 } __matched_value_1
        local { u64 } __matched_value_10
        local { u64 } __matched_value_11
        local { u64, ( { b256 } | { b256 } ) } __matched_value_12
        local { u64 } __matched_value_13
        local { u64, ( () | u8 ) } __matched_value_14
        local { u64 } __matched_value_15
        local { u64, ( u64 | u64 ) } __matched_value_16
        local { u64 } __matched_value_17
        local { u64 } __matched_value_18
        local { u64, ( () | u8 ) } __matched_value_3
        local { u64, ( () | u8 ) } __matched_value_4
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local { {  }, bool } __ret_val1
        local { {  }, bool } __ret_val10
        local { {  }, bool } __ret_val11
        local { {  }, bool } __ret_val12
        local { {  }, bool } __ret_val13
        local { {  }, bool } __ret_val14
        local { {  }, bool } __ret_val15
        local { {  }, bool } __ret_val16
        local { {  }, bool } __ret_val17
        local { {  }, bool } __ret_val18
        local { {  }, bool } __ret_val19
        local { {  }, bool } __ret_val2
        local { {  }, bool } __ret_val20
        local { {  }, bool } __ret_val21
        local { {  }, bool } __ret_val22
        local { {  }, bool } __ret_val23
        local { {  }, bool } __ret_val24
        local { { ptr, u64 }, u64 } __ret_val25
        local { { ptr, u64 }, u64 } __ret_val26
        local { {  }, bool } __ret_val3
        local { {  }, bool } __ret_val4
        local { {  }, bool } __ret_val5
        local { {  }, bool } __ret_val6
        local { {  }, bool } __ret_val7
        local { {  }, bool } __ret_val8
        local { {  }, bool } __ret_val9
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg10
        local slice __tmp_arg100
        local {  } __tmp_arg101
        local slice __tmp_arg102
        local {  } __tmp_arg103
        local slice __tmp_arg104
        local {  } __tmp_arg105
        local slice __tmp_arg106
        local {  } __tmp_arg107
        local slice __tmp_arg108
        local {  } __tmp_arg109
        local {  } __tmp_arg11
        local slice __tmp_arg110
        local {  } __tmp_arg111
        local slice __tmp_arg112
        local {  } __tmp_arg113
        local slice __tmp_arg114
        local {  } __tmp_arg115
        local slice __tmp_arg116
        local {  } __tmp_arg117
        local slice __tmp_arg118
        local {  } __tmp_arg119
        local slice __tmp_arg12
        local slice __tmp_arg120
        local {  } __tmp_arg121
        local slice __tmp_arg122
        local {  } __tmp_arg123
        local slice __tmp_arg124
        local {  } __tmp_arg125
        local slice __tmp_arg126
        local {  } __tmp_arg127
        local slice __tmp_arg128
        local {  } __tmp_arg129
        local {  } __tmp_arg13
        local slice __tmp_arg130
        local {  } __tmp_arg131
        local slice __tmp_arg132
        local {  } __tmp_arg133
        local slice __tmp_arg134
        local {  } __tmp_arg135
        local slice __tmp_arg136
        local {  } __tmp_arg137
        local slice __tmp_arg138
        local {  } __tmp_arg139
        local slice __tmp_arg14
        local slice __tmp_arg140
        local {  } __tmp_arg141
        local slice __tmp_arg142
        local {  } __tmp_arg143
        local slice __tmp_arg144
        local {  } __tmp_arg145
        local slice __tmp_arg146
        local {  } __tmp_arg147
        local slice __tmp_arg148
        local {  } __tmp_arg149
        local {  } __tmp_arg15
        local slice __tmp_arg150
        local {  } __tmp_arg151
        local slice __tmp_arg152
        local {  } __tmp_arg153
        local slice __tmp_arg154
        local {  } __tmp_arg155
        local slice __tmp_arg156
        local {  } __tmp_arg157
        local slice __tmp_arg158
        local {  } __tmp_arg159
        local slice __tmp_arg16
        local slice __tmp_arg160
        local {  } __tmp_arg161
        local slice __tmp_arg162
        local {  } __tmp_arg163
        local slice __tmp_arg164
        local {  } __tmp_arg165
        local slice __tmp_arg166
        local {  } __tmp_arg167
        local slice __tmp_arg168
        local {  } __tmp_arg169
        local {  } __tmp_arg17
        local slice __tmp_arg170
        local {  } __tmp_arg171
        local slice __tmp_arg172
        local {  } __tmp_arg173
        local slice __tmp_arg174
        local {  } __tmp_arg175
        local slice __tmp_arg176
        local {  } __tmp_arg177
        local slice __tmp_arg178
        local {  } __tmp_arg179
        local slice __tmp_arg18
        local slice __tmp_arg180
        local {  } __tmp_arg181
        local slice __tmp_arg182
        local {  } __tmp_arg183
        local slice __tmp_arg184
        local {  } __tmp_arg185
        local slice __tmp_arg186
        local {  } __tmp_arg187
        local slice __tmp_arg188
        local {  } __tmp_arg189
        local {  } __tmp_arg19
        local slice __tmp_arg190
        local {  } __tmp_arg191
        local slice __tmp_arg192
        local {  } __tmp_arg193
        local slice __tmp_arg194
        local {  } __tmp_arg195
        local slice __tmp_arg196
        local {  } __tmp_arg197
        local slice __tmp_arg198
        local {  } __tmp_arg199
        local slice __tmp_arg2
        local slice __tmp_arg20
        local slice __tmp_arg200
        local {  } __tmp_arg201
        local slice __tmp_arg202
        local {  } __tmp_arg203
        local slice __tmp_arg204
        local {  } __tmp_arg205
        local slice __tmp_arg206
        local {  } __tmp_arg207
        local slice __tmp_arg208
        local {  } __tmp_arg209
        local {  } __tmp_arg21
        local slice __tmp_arg210
        local {  } __tmp_arg211
        local slice __tmp_arg212
        local {  } __tmp_arg213
        local slice __tmp_arg214
        local {  } __tmp_arg215
        local slice __tmp_arg216
        local {  } __tmp_arg217
        local slice __tmp_arg218
        local {  } __tmp_arg219
        local slice __tmp_arg22
        local slice __tmp_arg220
        local {  } __tmp_arg221
        local slice __tmp_arg222
        local {  } __tmp_arg223
        local slice __tmp_arg224
        local {  } __tmp_arg225
        local slice __tmp_arg226
        local {  } __tmp_arg227
        local slice __tmp_arg228
        local {  } __tmp_arg229
        local {  } __tmp_arg23
        local slice __tmp_arg230
        local {  } __tmp_arg231
        local slice __tmp_arg232
        local {  } __tmp_arg233
        local slice __tmp_arg234
        local {  } __tmp_arg235
        local slice __tmp_arg236
        local {  } __tmp_arg237
        local slice __tmp_arg238
        local {  } __tmp_arg239
        local slice __tmp_arg24
        local slice __tmp_arg240
        local {  } __tmp_arg241
        local slice __tmp_arg242
        local {  } __tmp_arg243
        local slice __tmp_arg244
        local {  } __tmp_arg245
        local slice __tmp_arg246
        local {  } __tmp_arg247
        local slice __tmp_arg248
        local {  } __tmp_arg249
        local {  } __tmp_arg25
        local slice __tmp_arg250
        local {  } __tmp_arg251
        local slice __tmp_arg252
        local {  } __tmp_arg253
        local slice __tmp_arg254
        local {  } __tmp_arg255
        local slice __tmp_arg256
        local {  } __tmp_arg257
        local slice __tmp_arg258
        local {  } __tmp_arg259
        local slice __tmp_arg26
        local slice __tmp_arg260
        local {  } __tmp_arg261
        local slice __tmp_arg262
        local {  } __tmp_arg263
        local slice __tmp_arg264
        local {  } __tmp_arg265
        local slice __tmp_arg266
        local {  } __tmp_arg267
        local slice __tmp_arg268
        local {  } __tmp_arg269
        local {  } __tmp_arg27
        local slice __tmp_arg270
        local {  } __tmp_arg271
        local slice __tmp_arg272
        local {  } __tmp_arg273
        local slice __tmp_arg274
        local {  } __tmp_arg275
        local slice __tmp_arg276
        local {  } __tmp_arg277
        local slice __tmp_arg278
        local {  } __tmp_arg279
        local slice __tmp_arg28
        local slice __tmp_arg280
        local {  } __tmp_arg281
        local slice __tmp_arg282
        local {  } __tmp_arg283
        local slice __tmp_arg284
        local {  } __tmp_arg285
        local slice __tmp_arg286
        local {  } __tmp_arg287
        local slice __tmp_arg288
        local {  } __tmp_arg289
        local {  } __tmp_arg29
        local slice __tmp_arg290
        local {  } __tmp_arg291
        local slice __tmp_arg292
        local {  } __tmp_arg293
        local slice __tmp_arg294
        local {  } __tmp_arg295
        local slice __tmp_arg296
        local {  } __tmp_arg297
        local slice __tmp_arg298
        local {  } __tmp_arg299
        local {  } __tmp_arg3
        local slice __tmp_arg30
        local slice __tmp_arg300
        local {  } __tmp_arg301
        local slice __tmp_arg302
        local {  } __tmp_arg303
        local slice __tmp_arg304
        local {  } __tmp_arg305
        local slice __tmp_arg306
        local slice __tmp_arg307
        local slice __tmp_arg308
        local u256 __tmp_arg309
        local {  } __tmp_arg31
        local u256 __tmp_arg310
        local u256 __tmp_arg311
        local u256 __tmp_arg312
        local u256 __tmp_arg313
        local b256 __tmp_arg314
        local b256 __tmp_arg315
        local b256 __tmp_arg316
        local slice __tmp_arg317
        local slice __tmp_arg318
        local slice __tmp_arg319
        local slice __tmp_arg32
        local {  } __tmp_arg320
        local {  } __tmp_arg321
        local {  } __tmp_arg322
        local slice __tmp_arg323
        local {  } __tmp_arg324
        local slice __tmp_arg325
        local {  } __tmp_arg326
        local slice __tmp_arg327
        local {  } __tmp_arg328
        local slice __tmp_arg329
        local {  } __tmp_arg33
        local {  } __tmp_arg330
        local slice __tmp_arg331
        local {  } __tmp_arg332
        local slice __tmp_arg333
        local {  } __tmp_arg334
        local {  } __tmp_arg335
        local {  } __tmp_arg336
        local {  } __tmp_arg337
        local {  } __tmp_arg338
        local {  } __tmp_arg339
        local slice __tmp_arg34
        local slice __tmp_arg340
        local {  } __tmp_arg341
        local slice __tmp_arg342
        local {  } __tmp_arg343
        local slice __tmp_arg344
        local {  } __tmp_arg345
        local slice __tmp_arg346
        local { u64, ( () | {  } ) } __tmp_arg347
        local { u64, ( () | {  } ) } __tmp_arg348
        local { b256 } __tmp_arg349
        local {  } __tmp_arg35
        local { b256 } __tmp_arg350
        local { b256 } __tmp_arg351
        local { b256 } __tmp_arg352
        local { b256 } __tmp_arg353
        local { b256 } __tmp_arg354
        local slice __tmp_arg355
        local slice __tmp_arg356
        local slice __tmp_arg357
        local slice __tmp_arg358
        local slice __tmp_arg359
        local slice __tmp_arg36
        local slice __tmp_arg360
        local slice __tmp_arg361
        local { { ptr, u64 }, u64 } __tmp_arg362
        local { { ptr, u64 }, u64 } __tmp_arg363
        local {  } __tmp_arg37
        local slice __tmp_arg38
        local {  } __tmp_arg39
        local slice __tmp_arg4
        local slice __tmp_arg40
        local {  } __tmp_arg41
        local slice __tmp_arg42
        local {  } __tmp_arg43
        local slice __tmp_arg44
        local {  } __tmp_arg45
        local slice __tmp_arg46
        local {  } __tmp_arg47
        local slice __tmp_arg48
        local {  } __tmp_arg49
        local {  } __tmp_arg5
        local slice __tmp_arg50
        local {  } __tmp_arg51
        local slice __tmp_arg52
        local {  } __tmp_arg53
        local slice __tmp_arg54
        local {  } __tmp_arg55
        local slice __tmp_arg56
        local {  } __tmp_arg57
        local slice __tmp_arg58
        local {  } __tmp_arg59
        local slice __tmp_arg6
        local slice __tmp_arg60
        local {  } __tmp_arg61
        local slice __tmp_arg62
        local {  } __tmp_arg63
        local slice __tmp_arg64
        local {  } __tmp_arg65
        local slice __tmp_arg66
        local {  } __tmp_arg67
        local slice __tmp_arg68
        local {  } __tmp_arg69
        local {  } __tmp_arg7
        local slice __tmp_arg70
        local {  } __tmp_arg71
        local slice __tmp_arg72
        local {  } __tmp_arg73
        local slice __tmp_arg74
        local {  } __tmp_arg75
        local slice __tmp_arg76
        local {  } __tmp_arg77
        local slice __tmp_arg78
        local {  } __tmp_arg79
        local slice __tmp_arg8
        local slice __tmp_arg80
        local {  } __tmp_arg81
        local slice __tmp_arg82
        local {  } __tmp_arg83
        local slice __tmp_arg84
        local {  } __tmp_arg85
        local slice __tmp_arg86
        local {  } __tmp_arg87
        local slice __tmp_arg88
        local {  } __tmp_arg89
        local {  } __tmp_arg9
        local slice __tmp_arg90
        local {  } __tmp_arg91
        local slice __tmp_arg92
        local {  } __tmp_arg93
        local slice __tmp_arg94
        local {  } __tmp_arg95
        local slice __tmp_arg96
        local {  } __tmp_arg97
        local slice __tmp_arg98
        local {  } __tmp_arg99
        local u256 __tmp_block_arg
        local u256 __tmp_block_arg0
        local b256 __tmp_block_arg1
        local b256 __tmp_block_arg10
        local { [b256; 2] } __tmp_block_arg11
        local { {  }, bool } __tmp_block_arg12
        local { {  }, bool } __tmp_block_arg13
        local { ptr, u64 } __tmp_block_arg14
        local { { ptr, u64 }, u64 } __tmp_block_arg15
        local { { { ptr, u64 }, u64 }, u64 } __tmp_block_arg16
        local { u64, ( () | u8 ) } __tmp_block_arg17
        local b256 __tmp_block_arg18
        local { b256 } __tmp_block_arg19
        local b256 __tmp_block_arg2
        local b256 __tmp_block_arg20
        local { b256 } __tmp_block_arg21
        local { {  }, bool } __tmp_block_arg22
        local { {  }, bool } __tmp_block_arg23
        local b256 __tmp_block_arg24
        local { b256 } __tmp_block_arg25
        local { {  }, bool } __tmp_block_arg26
        local { u64, ( u64 | u64 ) } __tmp_block_arg27
        local slice __tmp_block_arg28
        local slice __tmp_block_arg29
        local slice __tmp_block_arg3
        local { ptr, u64 } __tmp_block_arg30
        local { ptr, u64 } __tmp_block_arg31
        local { { ptr, u64 }, u64 } __tmp_block_arg32
        local { { { ptr, u64 }, u64 } } __tmp_block_arg33
        local { u64, u64 } __tmp_block_arg34
        local { { { ptr, u64 }, u64 }, u64 } __tmp_block_arg35
        local { {  }, bool } __tmp_block_arg36
        local { {  }, bool } __tmp_block_arg4
        local b256 __tmp_block_arg5
        local { b256 } __tmp_block_arg6
        local b256 __tmp_block_arg7
        local { b256 } __tmp_block_arg8
        local b256 __tmp_block_arg9
        local { ptr, u64 } __tuple_2
        local { ptr, u64 } __tuple_2_
        local __ptr {  } _f_
        local __ptr {  } _f_0
        local __ptr {  } _f_1
        local __ptr {  } _f_10
        local __ptr {  } _f_11
        local __ptr {  } _f_12
        local __ptr {  } _f_2
        local __ptr {  } _f_3
        local __ptr {  } _f_4
        local __ptr {  } _f_5
        local __ptr {  } _f_6
        local __ptr {  } _f_7
        local __ptr {  } _f_8
        local __ptr {  } _f_9
        local u8 arg_10
        local { u64, ( () | u8 ) } arg_100
        local { u64 } arg_102
        local { u64, ( u64 | u64 ) } arg_104
        local { { { ptr, u64 }, u64 } } arg_106
        local { u64 } arg_108
        local { u64, u64 } arg_110
        local { u64 } arg_112
        local { { ptr, u64 }, u64 } arg_114
        local { { { ptr, u64 }, u64 }, u64 } arg_116
        local u64 arg_118
        local u8 arg_12
        local u8 arg_14
        local u8 arg_16
        local u64 arg_18
        local () arg_2
        local u64 arg_20
        local u64 arg_22
        local u64 arg_24
        local u64 arg_26
        local u64 arg_28
        local u64 arg_30
        local u64 arg_32
        local u64 arg_34
        local u64 arg_36
        local u64 arg_38
        local bool arg_4
        local u64 arg_40
        local u64 arg_42
        local u64 arg_44
        local u64 arg_46
        local u256 arg_48
        local u256 arg_50
        local u256 arg_52
        local u256 arg_54
        local u256 arg_56
        local b256 arg_58
        local bool arg_6
        local b256 arg_60
        local slice arg_62
        local string<1> arg_64
        local { slice, u8 } arg_66
        local [u8; 2] arg_68
        local __slice[u8] arg_70
        local {  } arg_72
        local { u64, ( () | {  } ) } arg_74
        local { u64, ( () | {  } ) } arg_76
        local { b256 } arg_78
        local u8 arg_8
        local { b256 } arg_80
        local { u64 } arg_82
        local { [b256; 2] } arg_84
        local { u64 } arg_86
        local { { ptr, u64 }, u64 } arg_88
        local { b256 } arg_90
        local { u64 } arg_92
        local { u64, ( { b256 } | { b256 } ) } arg_94
        local { u64 } arg_96
        local { u64, { b256 }, u64 } arg_98
        local mut { { ptr, u64 }, u64 } bytes
        local u64 cap
        local u64 code_
        local u64 count_
        local u64 count_0
        local u64 count_00
        local u64 count_000
        local ptr dst_
        local u8 elem
        local __ptr {  } f_
        local __ptr {  } f_0
        local mut {  } f_1
        local __ptr {  } f_10
        local mut {  } f_101
        local mut {  } f_103
        local mut {  } f_105
        local mut {  } f_107
        local mut {  } f_109
        local mut {  } f_11
        local mut {  } f_111
        local mut {  } f_113
        local mut {  } f_115
        local mut {  } f_117
        local __ptr {  } f_12
        local mut {  } f_13
        local mut {  } f_15
        local mut {  } f_17
        local mut {  } f_19
        local __ptr {  } f_2
        local mut {  } f_21
        local mut {  } f_23
        local mut {  } f_25
        local mut {  } f_27
        local mut {  } f_29
        local mut {  } f_3
        local mut {  } f_31
        local mut {  } f_33
        local mut {  } f_35
        local mut {  } f_37
        local mut {  } f_39
        local __ptr {  } f_4
        local mut {  } f_41
        local mut {  } f_43
        local mut {  } f_45
        local mut {  } f_47
        local mut {  } f_49
        local mut {  } f_5
        local mut {  } f_51
        local mut {  } f_53
        local mut {  } f_55
        local mut {  } f_57
        local mut {  } f_59
        local __ptr {  } f_6
        local mut {  } f_61
        local mut {  } f_63
        local mut {  } f_65
        local mut {  } f_67
        local mut {  } f_69
        local mut {  } f_7
        local mut {  } f_71
        local mut {  } f_73
        local mut {  } f_75
        local mut {  } f_77
        local mut {  } f_79
        local __ptr {  } f_8
        local mut {  } f_81
        local mut {  } f_83
        local mut {  } f_85
        local mut {  } f_87
        local mut {  } f_89
        local mut {  } f_9
        local mut {  } f_91
        local mut {  } f_93
        local mut {  } f_95
        local mut {  } f_97
        local mut {  } f_99
        local mut { {  }, bool } f__
        local mut { {  }, bool } f__0
        local mut { {  }, bool } f__1
        local mut { {  }, bool } f__2
        local mut { {  }, bool } f___
        local mut { {  }, bool } f____
        local u64 fd_
        local u64 fd_0
        local u64 fd_1
        local u64 fd_10
        local u64 fd_11
        local u64 fd_12
        local u64 fd_13
        local u64 fd_14
        local u64 fd_15
        local u64 fd_16
        local u64 fd_17
        local u64 fd_18
        local u64 fd_19
        local u64 fd_2
        local u64 fd_20
        local u64 fd_21
        local u64 fd_22
        local u64 fd_23
        local u64 fd_24
        local u64 fd_25
        local u64 fd_26
        local u64 fd_27
        local u64 fd_28
        local u64 fd_29
        local u64 fd_3
        local u64 fd_30
        local u64 fd_31
        local u64 fd_32
        local u64 fd_33
        local u64 fd_34
        local u64 fd_35
        local u64 fd_36
        local u64 fd_37
        local u64 fd_38
        local u64 fd_39
        local u64 fd_4
        local u64 fd_40
        local u64 fd_41
        local u64 fd_42
        local u64 fd_43
        local u64 fd_44
        local u64 fd_45
        local u64 fd_46
        local u64 fd_47
        local u64 fd_48
        local u64 fd_49
        local u64 fd_5
        local u64 fd_50
        local u64 fd_51
        local u64 fd_52
        local u64 fd_53
        local u64 fd_54
        local u64 fd_55
        local u64 fd_56
        local u64 fd_57
        local u64 fd_6
        local u64 fd_7
        local u64 fd_8
        local u64 fd_9
        local mut u64 i
        local mut u64 i0
        local mut u64 i1
        local u64 index_
        local u8 item
        local mut { {  }, bool } l
        local u64 len
        local u64 len0
        local slice name_
        local slice name_0
        local slice name_1
        local u64 offset_
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_000
        local u64 other_01
        local u64 other_010
        local u64 other_011
        local u64 other_02
        local u64 other_03
        local u64 other_04
        local u64 other_05
        local u64 other_06
        local u64 other_07
        local u64 other_08
        local u64 other_09
        local u64 other_1
        local u64 other_10
        local u64 other_11
        local u64 other_12
        local u64 other_13
        local u64 other_14
        local u64 other_15
        local u64 other_16
        local u64 other_17
        local u64 other_18
        local u64 other_2
        local u64 other_20
        local u64 other_21
        local u64 other_22
        local u64 other_3
        local u64 other_30
        local u64 other_31
        local u64 other_4
        local u64 other_40
        local u64 other_5
        local u64 other_6
        local u64 other_7
        local u64 other_8
        local u64 other_9
        local { ptr, u64 } parts_
        local ptr ptr
        local ptr ptr0
        local ptr ptr_
        local slice s
        local string<1> s_
        local slice s_0
        local () self_
        local {  } self_0
        local __ptr { {  }, bool } self_00
        local [b256; 2] self_000
        local u64 self_0000
        local ptr self_0001
        local u64 self_0002
        local u64 self_001
        local slice self_002
        local u64 self_01
        local u64 self_010
        local __ptr { {  }, bool } self_011
        local u64 self_012
        local u64 self_013
        local u64 self_014
        local u64 self_015
        local { { ptr, u64 }, u64 } self_016
        local u64 self_017
        local u64 self_018
        local __ptr { {  }, bool } self_019
        local __slice[u8] self_02
        local u64 self_020
        local u64 self_03
        local __ptr { {  }, bool } self_04
        local u64 self_05
        local { { ptr, u64 }, u64 } self_06
        local u64 self_07
        local u64 self_08
        local u64 self_09
        local {  } self_1
        local {  } self_10
        local u64 self_100
        local ptr self_1000
        local {  } self_11
        local u64 self_110
        local u64 self_111
        local u64 self_112
        local __ptr { {  }, bool } self_113
        local __ptr { { { ptr, u64 }, u64 }, u64 } self_114
        local u64 self_115
        local __ptr { {  }, bool } self_116
        local u64 self_117
        local u64 self_118
        local u64 self_119
        local {  } self_12
        local u64 self_120
        local ptr self_121
        local { { ptr, u64 }, u64 } self_122
        local u64 self_123
        local {  } self_13
        local {  } self_14
        local {  } self_15
        local {  } self_16
        local {  } self_17
        local {  } self_18
        local {  } self_19
        local {  } self_2
        local {  } self_20
        local {  } self_21
        local u64 self_210
        local u64 self_211
        local { { ptr, u64 }, u64 } self_212
        local u64 self_213
        local u64 self_214
        local u64 self_215
        local u64 self_216
        local {  } self_22
        local {  } self_23
        local {  } self_24
        local {  } self_25
        local {  } self_26
        local {  } self_27
        local {  } self_28
        local {  } self_29
        local {  } self_3
        local {  } self_30
        local string<1> self_31
        local { u64, ( () | u8 ) } self_310
        local __ptr { {  }, bool } self_311
        local u64 self_312
        local u64 self_313
        local {  } self_32
        local { slice, u8 } self_33
        local {  } self_34
        local [u8; 2] self_35
        local {  } self_36
        local __slice[u8] self_37
        local {  } self_38
        local {  } self_39
        local {  } self_4
        local {  } self_40
        local {  } self_41
        local { u64, ( () | u8 ) } self_410
        local u64 self_411
        local u64 self_412
        local {  } self_42
        local {  } self_43
        local { u64 } self_44
        local {  } self_45
        local { [b256; 2] } self_46
        local {  } self_47
        local { u64 } self_48
        local {  } self_49
        local {  } self_5
        local { { ptr, u64 }, u64 } self_50
        local {  } self_51
        local u64 self_510
        local {  } self_52
        local { u64 } self_53
        local {  } self_54
        local { u64, ( { b256 } | { b256 } ) } self_55
        local {  } self_56
        local { u64 } self_57
        local {  } self_58
        local { u64, { b256 }, u64 } self_59
        local {  } self_6
        local {  } self_60
        local { u64, ( () | u8 ) } self_61
        local {  } self_62
        local { u64 } self_63
        local {  } self_64
        local { u64, ( u64 | u64 ) } self_65
        local {  } self_66
        local u64 self_67
        local { { { ptr, u64 }, u64 } } self_68
        local {  } self_69
        local {  } self_7
        local { u64 } self_70
        local {  } self_71
        local { u64, u64 } self_72
        local {  } self_73
        local { u64 } self_74
        local {  } self_75
        local {  } self_76
        local { { ptr, u64 }, u64 } self_77
        local { { { ptr, u64 }, u64 }, u64 } self_78
        local {  } self_79
        local {  } self_8
        local {  } self_80
        local {  } self_9
        local slice slice_
        local slice slice_0
        local slice slice_00
        local ptr src
        local ptr str_ptr
        local u64 str_size
        local u64 str_size0
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0
        local mut { {  }, bool } type_fix00
        local mut { {  }, bool } type_fix01
        local mut { {  }, bool } type_fix02
        local mut { {  }, bool } type_fix03
        local mut { {  }, bool } type_fix04
        local mut { {  }, bool } type_fix05
        local mut { {  }, bool } type_fix1
        local mut { {  }, bool } type_fix10
        local mut { {  }, bool } type_fix11
        local mut { {  }, bool } type_fix12
        local mut { {  }, bool } type_fix13
        local mut { {  }, bool } type_fix14
        local mut { {  }, bool } type_fix2
        local mut { {  }, bool } type_fix20
        local mut { {  }, bool } type_fix21
        local mut { {  }, bool } type_fix3
        local mut { {  }, bool } type_fix4
        local mut { {  }, bool } type_fix5
        local mut { {  }, bool } type_fix6
        local mut { {  }, bool } type_fix7
        local mut { { ptr, u64 }, u64 } v
        local u8 v0
        local mut { { ptr, u64 }, u64 } v_
        local { b256 } value
        local u8 value0
        local u64 value1
        local slice value_
        local [b256; 2] value_0
        local b256 value_00
        local { b256 } value_01
        local { b256 } value_1
        local { b256 } value_10
        local { b256 } value_2
        local u64 value_3
        local { { ptr, u64 }, u64 } value_4

        entry():
        v0 = get_local __ptr string<25>, __const
        v1 = get_local __ptr string<2>, __const0
        v2 = get_local __ptr (), arg_2
        v3 = const unit (), !87
        store v3 to v2
        v4 = get_local __ptr {  }, __anon_0, !88
        v5 = get_local __ptr {  }, f_1
        mem_copy_val v5, v4
        v6 = get_local __ptr {  }, f_1, !88
        v7 = get_local __ptr string<25>, __anon_1
        mem_copy_val v7, v0
        v8 = cast_ptr v7 to ptr, !88
        v9 = get_local __ptr { ptr, u64 }, __anon_2, !88
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr ptr, v10
        store v8 to v11, !88
        v12 = const u64 1
        v13 = get_elem_ptr v9, __ptr u64, v12
        v14 = const u64 25
        store v14 to v13, !88
        v15 = get_local __ptr slice, __anon_3, !88
        mem_copy_bytes v15, v9, 16
        v16 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v16, v6
        v17 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v17, v15
        v18 = call print_str_1(v16, v17)
        v19 = get_local __ptr (), arg_2
        v20 = get_local __ptr {  }, f_1
        v21 = get_local __ptr (), self_
        mem_copy_val v21, v19
        v22 = get_local __ptr __ptr {  }, f_
        store v20 to v22
        v23 = get_local __ptr __ptr {  }, f_, !90
        v24 = load v23
        v25 = get_local __ptr string<2>, __anon_00
        mem_copy_val v25, v1
        v26 = cast_ptr v25 to ptr, !91
        v27 = get_local __ptr { ptr, u64 }, __anon_1100, !91
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr ptr, v28
        store v26 to v29, !91
        v30 = const u64 1
        v31 = get_elem_ptr v27, __ptr u64, v30
        v32 = const u64 2
        store v32 to v31, !91
        v33 = get_local __ptr slice, __anon_2100, !91
        mem_copy_bytes v33, v27, 16
        v34 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v34, v24
        v35 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v35, v33
        v36 = call print_str_1(v34, v35)
        v37 = get_local __ptr string<1>, __const1
        v38 = get_local __ptr {  }, f_1, !88
        v39 = get_local __ptr string<1>, __anon_4
        mem_copy_val v39, v37
        v40 = cast_ptr v39 to ptr, !88
        v41 = get_local __ptr { ptr, u64 }, __anon_5, !88
        v42 = const u64 0
        v43 = get_elem_ptr v41, __ptr ptr, v42
        store v40 to v43, !88
        v44 = const u64 1
        v45 = get_elem_ptr v41, __ptr u64, v44
        v46 = const u64 1
        store v46 to v45, !88
        v47 = get_local __ptr slice, __anon_6, !88
        mem_copy_bytes v47, v41, 16
        v48 = get_local __ptr {  }, __tmp_arg3
        mem_copy_val v48, v38
        v49 = get_local __ptr slice, __tmp_arg4
        mem_copy_val v49, v47
        v50 = call print_str_1(v48, v49)
        v51 = get_local __ptr {  }, f_1, !88
        v52 = get_local __ptr {  }, self_0, !88
        mem_copy_val v52, v51
        v53 = get_global __ptr u64, std::debug::STDERR, !93
        v54 = get_local __ptr u64, fd_, !96
        mem_copy_val v54, v53
        v55 = get_local __ptr u64, fd_, !98
        v56 = load v55, !99
        v57 = const u64 1001, !100
        v58 = asm(id: v57, fd: v56) -> (), !102 {
            ecal   id fd zero zero, !103
        }
        v59 = get_local __ptr string<27>, __const2
        v60 = get_local __ptr string<1>, __const3
        v61 = get_local __ptr (), arg_2
        v62 = get_local __ptr (), _, !104
        mem_copy_val v62, v61
        v63 = get_local __ptr bool, arg_4
        v64 = const bool true, !105
        store v64 to v63
        v65 = get_local __ptr {  }, __anon_7, !106
        v66 = get_local __ptr {  }, f_3
        mem_copy_val v66, v65
        v67 = get_local __ptr {  }, f_3, !106
        v68 = get_local __ptr string<27>, __anon_8
        mem_copy_val v68, v59
        v69 = cast_ptr v68 to ptr, !106
        v70 = get_local __ptr { ptr, u64 }, __anon_9, !106
        v71 = const u64 0
        v72 = get_elem_ptr v70, __ptr ptr, v71
        store v69 to v72, !106
        v73 = const u64 1
        v74 = get_elem_ptr v70, __ptr u64, v73
        v75 = const u64 27
        store v75 to v74, !106
        v76 = get_local __ptr slice, __anon_10, !106
        mem_copy_bytes v76, v70, 16
        v77 = get_local __ptr {  }, __tmp_arg5
        mem_copy_val v77, v67
        v78 = get_local __ptr slice, __tmp_arg6
        mem_copy_val v78, v76
        v79 = call print_str_1(v77, v78)
        v80 = get_local __ptr bool, arg_4
        v81 = load v80
        v82 = get_local __ptr {  }, f_3
        v83 = call fmt_8(v81, v82)
        v84 = get_local __ptr {  }, f_3, !106
        v85 = get_local __ptr string<1>, __anon_11
        mem_copy_val v85, v60
        v86 = cast_ptr v85 to ptr, !106
        v87 = get_local __ptr { ptr, u64 }, __anon_12, !106
        v88 = const u64 0
        v89 = get_elem_ptr v87, __ptr ptr, v88
        store v86 to v89, !106
        v90 = const u64 1
        v91 = get_elem_ptr v87, __ptr u64, v90
        v92 = const u64 1
        store v92 to v91, !106
        v93 = get_local __ptr slice, __anon_13, !106
        mem_copy_bytes v93, v87, 16
        v94 = get_local __ptr {  }, __tmp_arg7
        mem_copy_val v94, v84
        v95 = get_local __ptr slice, __tmp_arg8
        mem_copy_val v95, v93
        v96 = call print_str_1(v94, v95)
        v97 = get_local __ptr {  }, f_3, !106
        v98 = get_local __ptr {  }, self_1, !106
        mem_copy_val v98, v97
        v99 = get_global __ptr u64, std::debug::STDERR, !107
        v100 = get_local __ptr u64, fd_0, !108
        mem_copy_val v100, v99
        v101 = get_local __ptr u64, fd_0, !109
        v102 = load v101, !110
        v103 = asm(id: v57, fd: v102) -> (), !111 {
            ecal   id fd zero zero, !103
        }
        v104 = get_local __ptr string<28>, __const4
        v105 = get_local __ptr string<1>, __const5
        v106 = get_local __ptr bool, arg_4
        v107 = get_local __ptr bool, __, !112
        mem_copy_val v107, v106
        v108 = get_local __ptr bool, arg_6
        v109 = const bool false, !113
        store v109 to v108
        v110 = get_local __ptr {  }, __anon_14, !114
        v111 = get_local __ptr {  }, f_5
        mem_copy_val v111, v110
        v112 = get_local __ptr {  }, f_5, !114
        v113 = get_local __ptr string<28>, __anon_15
        mem_copy_val v113, v104
        v114 = cast_ptr v113 to ptr, !114
        v115 = get_local __ptr { ptr, u64 }, __anon_16, !114
        v116 = const u64 0
        v117 = get_elem_ptr v115, __ptr ptr, v116
        store v114 to v117, !114
        v118 = const u64 1
        v119 = get_elem_ptr v115, __ptr u64, v118
        v120 = const u64 28
        store v120 to v119, !114
        v121 = get_local __ptr slice, __anon_17, !114
        mem_copy_bytes v121, v115, 16
        v122 = get_local __ptr {  }, __tmp_arg9
        mem_copy_val v122, v112
        v123 = get_local __ptr slice, __tmp_arg10
        mem_copy_val v123, v121
        v124 = call print_str_1(v122, v123)
        v125 = get_local __ptr bool, arg_6
        v126 = load v125
        v127 = get_local __ptr {  }, f_5
        v128 = call fmt_8(v126, v127)
        v129 = get_local __ptr {  }, f_5, !114
        v130 = get_local __ptr string<1>, __anon_18
        mem_copy_val v130, v105
        v131 = cast_ptr v130 to ptr, !114
        v132 = get_local __ptr { ptr, u64 }, __anon_19, !114
        v133 = const u64 0
        v134 = get_elem_ptr v132, __ptr ptr, v133
        store v131 to v134, !114
        v135 = const u64 1
        v136 = get_elem_ptr v132, __ptr u64, v135
        v137 = const u64 1
        store v137 to v136, !114
        v138 = get_local __ptr slice, __anon_20, !114
        mem_copy_bytes v138, v132, 16
        v139 = get_local __ptr {  }, __tmp_arg11
        mem_copy_val v139, v129
        v140 = get_local __ptr slice, __tmp_arg12
        mem_copy_val v140, v138
        v141 = call print_str_1(v139, v140)
        v142 = get_local __ptr {  }, f_5, !114
        v143 = get_local __ptr {  }, self_2, !114
        mem_copy_val v143, v142
        v144 = get_global __ptr u64, std::debug::STDERR, !115
        v145 = get_local __ptr u64, fd_1, !116
        mem_copy_val v145, v144
        v146 = get_local __ptr u64, fd_1, !117
        v147 = load v146, !118
        v148 = asm(id: v57, fd: v147) -> (), !119 {
            ecal   id fd zero zero, !103
        }
        v149 = get_local __ptr bool, arg_6
        v150 = get_local __ptr bool, ___, !120
        mem_copy_val v150, v149
        v151 = get_local __ptr string<32>, __const6
        v152 = get_local __ptr string<1>, __const7
        v153 = get_local __ptr u8, arg_8
        v154 = const u8 0, !122
        store v154 to v153
        v155 = get_local __ptr {  }, __anon_21, !123
        v156 = get_local __ptr {  }, f_7
        mem_copy_val v156, v155
        v157 = get_local __ptr {  }, f_7, !123
        v158 = get_local __ptr string<32>, __anon_22
        mem_copy_val v158, v151
        v159 = cast_ptr v158 to ptr, !123
        v160 = get_local __ptr { ptr, u64 }, __anon_23, !123
        v161 = const u64 0
        v162 = get_elem_ptr v160, __ptr ptr, v161
        store v159 to v162, !123
        v163 = const u64 1
        v164 = get_elem_ptr v160, __ptr u64, v163
        v165 = const u64 32
        store v165 to v164, !123
        v166 = get_local __ptr slice, __anon_24, !123
        mem_copy_bytes v166, v160, 16
        v167 = get_local __ptr {  }, __tmp_arg13
        mem_copy_val v167, v157
        v168 = get_local __ptr slice, __tmp_arg14
        mem_copy_val v168, v166
        v169 = call print_str_1(v167, v168)
        v170 = get_local __ptr u8, arg_8
        v171 = load v170
        v172 = get_local __ptr {  }, f_7
        v173 = call fmt_10(v171, v172)
        v174 = get_local __ptr {  }, f_7, !123
        v175 = get_local __ptr string<1>, __anon_25
        mem_copy_val v175, v152
        v176 = cast_ptr v175 to ptr, !123
        v177 = get_local __ptr { ptr, u64 }, __anon_26, !123
        v178 = const u64 0
        v179 = get_elem_ptr v177, __ptr ptr, v178
        store v176 to v179, !123
        v180 = const u64 1
        v181 = get_elem_ptr v177, __ptr u64, v180
        v182 = const u64 1
        store v182 to v181, !123
        v183 = get_local __ptr slice, __anon_27, !123
        mem_copy_bytes v183, v177, 16
        v184 = get_local __ptr {  }, __tmp_arg15
        mem_copy_val v184, v174
        v185 = get_local __ptr slice, __tmp_arg16
        mem_copy_val v185, v183
        v186 = call print_str_1(v184, v185)
        v187 = get_local __ptr {  }, f_7, !123
        v188 = get_local __ptr {  }, self_3, !123
        mem_copy_val v188, v187
        v189 = get_global __ptr u64, std::debug::STDERR, !124
        v190 = get_local __ptr u64, fd_2, !125
        mem_copy_val v190, v189
        v191 = get_local __ptr u64, fd_2, !126
        v192 = load v191, !127
        v193 = asm(id: v57, fd: v192) -> (), !128 {
            ecal   id fd zero zero, !103
        }
        v194 = get_local __ptr string<26>, __const8
        v195 = get_local __ptr string<1>, __const9
        v196 = get_local __ptr u8, arg_8
        v197 = get_local __ptr u8, ____, !129
        mem_copy_val v197, v196
        v198 = get_local __ptr u8, arg_10
        v199 = const u8 1, !130
        store v199 to v198
        v200 = get_local __ptr {  }, __anon_28, !131
        v201 = get_local __ptr {  }, f_9
        mem_copy_val v201, v200
        v202 = get_local __ptr {  }, f_9, !131
        v203 = get_local __ptr string<26>, __anon_29
        mem_copy_val v203, v194
        v204 = cast_ptr v203 to ptr, !131
        v205 = get_local __ptr { ptr, u64 }, __anon_30, !131
        v206 = const u64 0
        v207 = get_elem_ptr v205, __ptr ptr, v206
        store v204 to v207, !131
        v208 = const u64 1
        v209 = get_elem_ptr v205, __ptr u64, v208
        v210 = const u64 26
        store v210 to v209, !131
        v211 = get_local __ptr slice, __anon_31, !131
        mem_copy_bytes v211, v205, 16
        v212 = get_local __ptr {  }, __tmp_arg17
        mem_copy_val v212, v202
        v213 = get_local __ptr slice, __tmp_arg18
        mem_copy_val v213, v211
        v214 = call print_str_1(v212, v213)
        v215 = get_local __ptr u8, arg_10
        v216 = load v215
        v217 = get_local __ptr {  }, f_9
        v218 = call fmt_10(v216, v217)
        v219 = get_local __ptr {  }, f_9, !131
        v220 = get_local __ptr string<1>, __anon_32
        mem_copy_val v220, v195
        v221 = cast_ptr v220 to ptr, !131
        v222 = get_local __ptr { ptr, u64 }, __anon_33, !131
        v223 = const u64 0
        v224 = get_elem_ptr v222, __ptr ptr, v223
        store v221 to v224, !131
        v225 = const u64 1
        v226 = get_elem_ptr v222, __ptr u64, v225
        v227 = const u64 1
        store v227 to v226, !131
        v228 = get_local __ptr slice, __anon_34, !131
        mem_copy_bytes v228, v222, 16
        v229 = get_local __ptr {  }, __tmp_arg19
        mem_copy_val v229, v219
        v230 = get_local __ptr slice, __tmp_arg20
        mem_copy_val v230, v228
        v231 = call print_str_1(v229, v230)
        v232 = get_local __ptr {  }, f_9, !131
        v233 = get_local __ptr {  }, self_4, !131
        mem_copy_val v233, v232
        v234 = get_global __ptr u64, std::debug::STDERR, !132
        v235 = get_local __ptr u64, fd_3, !133
        mem_copy_val v235, v234
        v236 = get_local __ptr u64, fd_3, !134
        v237 = load v236, !135
        v238 = asm(id: v57, fd: v237) -> (), !136 {
            ecal   id fd zero zero, !103
        }
        v239 = get_local __ptr string<27>, __const10
        v240 = get_local __ptr string<1>, __const11
        v241 = get_local __ptr u8, arg_10
        v242 = get_local __ptr u8, _____, !137
        mem_copy_val v242, v241
        v243 = get_local __ptr u8, arg_12
        v244 = const u8 10, !138
        store v244 to v243
        v245 = get_local __ptr {  }, __anon_35, !139
        v246 = get_local __ptr {  }, f_11
        mem_copy_val v246, v245
        v247 = get_local __ptr {  }, f_11, !139
        v248 = get_local __ptr string<27>, __anon_36
        mem_copy_val v248, v239
        v249 = cast_ptr v248 to ptr, !139
        v250 = get_local __ptr { ptr, u64 }, __anon_37, !139
        v251 = const u64 0
        v252 = get_elem_ptr v250, __ptr ptr, v251
        store v249 to v252, !139
        v253 = const u64 1
        v254 = get_elem_ptr v250, __ptr u64, v253
        v255 = const u64 27
        store v255 to v254, !139
        v256 = get_local __ptr slice, __anon_38, !139
        mem_copy_bytes v256, v250, 16
        v257 = get_local __ptr {  }, __tmp_arg21
        mem_copy_val v257, v247
        v258 = get_local __ptr slice, __tmp_arg22
        mem_copy_val v258, v256
        v259 = call print_str_1(v257, v258)
        v260 = get_local __ptr u8, arg_12
        v261 = load v260
        v262 = get_local __ptr {  }, f_11
        v263 = call fmt_10(v261, v262)
        v264 = get_local __ptr {  }, f_11, !139
        v265 = get_local __ptr string<1>, __anon_39
        mem_copy_val v265, v240
        v266 = cast_ptr v265 to ptr, !139
        v267 = get_local __ptr { ptr, u64 }, __anon_40, !139
        v268 = const u64 0
        v269 = get_elem_ptr v267, __ptr ptr, v268
        store v266 to v269, !139
        v270 = const u64 1
        v271 = get_elem_ptr v267, __ptr u64, v270
        v272 = const u64 1
        store v272 to v271, !139
        v273 = get_local __ptr slice, __anon_41, !139
        mem_copy_bytes v273, v267, 16
        v274 = get_local __ptr {  }, __tmp_arg23
        mem_copy_val v274, v264
        v275 = get_local __ptr slice, __tmp_arg24
        mem_copy_val v275, v273
        v276 = call print_str_1(v274, v275)
        v277 = get_local __ptr {  }, f_11, !139
        v278 = get_local __ptr {  }, self_5, !139
        mem_copy_val v278, v277
        v279 = get_global __ptr u64, std::debug::STDERR, !140
        v280 = get_local __ptr u64, fd_4, !141
        mem_copy_val v280, v279
        v281 = get_local __ptr u64, fd_4, !142
        v282 = load v281, !143
        v283 = asm(id: v57, fd: v282) -> (), !144 {
            ecal   id fd zero zero, !103
        }
        v284 = get_local __ptr string<28>, __const12
        v285 = get_local __ptr string<1>, __const13
        v286 = get_local __ptr u8, arg_12
        v287 = get_local __ptr u8, ______, !145
        mem_copy_val v287, v286
        v288 = get_local __ptr u8, arg_14
        v289 = const u8 100, !146
        store v289 to v288
        v290 = get_local __ptr {  }, __anon_42, !147
        v291 = get_local __ptr {  }, f_13
        mem_copy_val v291, v290
        v292 = get_local __ptr {  }, f_13, !147
        v293 = get_local __ptr string<28>, __anon_43
        mem_copy_val v293, v284
        v294 = cast_ptr v293 to ptr, !147
        v295 = get_local __ptr { ptr, u64 }, __anon_44, !147
        v296 = const u64 0
        v297 = get_elem_ptr v295, __ptr ptr, v296
        store v294 to v297, !147
        v298 = const u64 1
        v299 = get_elem_ptr v295, __ptr u64, v298
        v300 = const u64 28
        store v300 to v299, !147
        v301 = get_local __ptr slice, __anon_45, !147
        mem_copy_bytes v301, v295, 16
        v302 = get_local __ptr {  }, __tmp_arg25
        mem_copy_val v302, v292
        v303 = get_local __ptr slice, __tmp_arg26
        mem_copy_val v303, v301
        v304 = call print_str_1(v302, v303)
        v305 = get_local __ptr u8, arg_14
        v306 = load v305
        v307 = get_local __ptr {  }, f_13
        v308 = call fmt_10(v306, v307)
        v309 = get_local __ptr {  }, f_13, !147
        v310 = get_local __ptr string<1>, __anon_46
        mem_copy_val v310, v285
        v311 = cast_ptr v310 to ptr, !147
        v312 = get_local __ptr { ptr, u64 }, __anon_47, !147
        v313 = const u64 0
        v314 = get_elem_ptr v312, __ptr ptr, v313
        store v311 to v314, !147
        v315 = const u64 1
        v316 = get_elem_ptr v312, __ptr u64, v315
        v317 = const u64 1
        store v317 to v316, !147
        v318 = get_local __ptr slice, __anon_48, !147
        mem_copy_bytes v318, v312, 16
        v319 = get_local __ptr {  }, __tmp_arg27
        mem_copy_val v319, v309
        v320 = get_local __ptr slice, __tmp_arg28
        mem_copy_val v320, v318
        v321 = call print_str_1(v319, v320)
        v322 = get_local __ptr {  }, f_13, !147
        v323 = get_local __ptr {  }, self_6, !147
        mem_copy_val v323, v322
        v324 = get_global __ptr u64, std::debug::STDERR, !148
        v325 = get_local __ptr u64, fd_5, !149
        mem_copy_val v325, v324
        v326 = get_local __ptr u64, fd_5, !150
        v327 = load v326, !151
        v328 = asm(id: v57, fd: v327) -> (), !152 {
            ecal   id fd zero zero, !103
        }
        v329 = get_local __ptr u8, arg_14
        v330 = get_local __ptr u8, _______, !153
        mem_copy_val v330, v329
        v331 = get_local __ptr string<32>, __const14
        v332 = get_local __ptr string<1>, __const15
        v333 = get_local __ptr u8, arg_16
        v334 = const u8 255, !154
        store v334 to v333
        v335 = get_local __ptr {  }, __anon_49, !155
        v336 = get_local __ptr {  }, f_15
        mem_copy_val v336, v335
        v337 = get_local __ptr {  }, f_15, !155
        v338 = get_local __ptr string<32>, __anon_50
        mem_copy_val v338, v331
        v339 = cast_ptr v338 to ptr, !155
        v340 = get_local __ptr { ptr, u64 }, __anon_51, !155
        v341 = const u64 0
        v342 = get_elem_ptr v340, __ptr ptr, v341
        store v339 to v342, !155
        v343 = const u64 1
        v344 = get_elem_ptr v340, __ptr u64, v343
        v345 = const u64 32
        store v345 to v344, !155
        v346 = get_local __ptr slice, __anon_52, !155
        mem_copy_bytes v346, v340, 16
        v347 = get_local __ptr {  }, __tmp_arg29
        mem_copy_val v347, v337
        v348 = get_local __ptr slice, __tmp_arg30
        mem_copy_val v348, v346
        v349 = call print_str_1(v347, v348)
        v350 = get_local __ptr u8, arg_16
        v351 = load v350
        v352 = get_local __ptr {  }, f_15
        v353 = call fmt_10(v351, v352)
        v354 = get_local __ptr {  }, f_15, !155
        v355 = get_local __ptr string<1>, __anon_53
        mem_copy_val v355, v332
        v356 = cast_ptr v355 to ptr, !155
        v357 = get_local __ptr { ptr, u64 }, __anon_54, !155
        v358 = const u64 0
        v359 = get_elem_ptr v357, __ptr ptr, v358
        store v356 to v359, !155
        v360 = const u64 1
        v361 = get_elem_ptr v357, __ptr u64, v360
        v362 = const u64 1
        store v362 to v361, !155
        v363 = get_local __ptr slice, __anon_55, !155
        mem_copy_bytes v363, v357, 16
        v364 = get_local __ptr {  }, __tmp_arg31
        mem_copy_val v364, v354
        v365 = get_local __ptr slice, __tmp_arg32
        mem_copy_val v365, v363
        v366 = call print_str_1(v364, v365)
        v367 = get_local __ptr {  }, f_15, !155
        v368 = get_local __ptr {  }, self_7, !155
        mem_copy_val v368, v367
        v369 = get_global __ptr u64, std::debug::STDERR, !156
        v370 = get_local __ptr u64, fd_6, !157
        mem_copy_val v370, v369
        v371 = get_local __ptr u64, fd_6, !158
        v372 = load v371, !159
        v373 = asm(id: v57, fd: v372) -> (), !160 {
            ecal   id fd zero zero, !103
        }
        v374 = get_local __ptr u8, arg_16
        v375 = get_local __ptr u8, ________, !161
        mem_copy_val v375, v374
        v376 = get_local __ptr string<33>, __const16
        v377 = get_local __ptr string<1>, __const17
        v378 = get_local __ptr u64, arg_18
        v379 = const u64 0, !162
        store v379 to v378
        v380 = get_local __ptr {  }, __anon_56, !163
        v381 = get_local __ptr {  }, f_17
        mem_copy_val v381, v380
        v382 = get_local __ptr {  }, f_17, !163
        v383 = get_local __ptr string<33>, __anon_57
        mem_copy_val v383, v376
        v384 = cast_ptr v383 to ptr, !163
        v385 = get_local __ptr { ptr, u64 }, __anon_58, !163
        v386 = const u64 0
        v387 = get_elem_ptr v385, __ptr ptr, v386
        store v384 to v387, !163
        v388 = const u64 1
        v389 = get_elem_ptr v385, __ptr u64, v388
        v390 = const u64 33
        store v390 to v389, !163
        v391 = get_local __ptr slice, __anon_59, !163
        mem_copy_bytes v391, v385, 16
        v392 = get_local __ptr {  }, __tmp_arg33
        mem_copy_val v392, v382
        v393 = get_local __ptr slice, __tmp_arg34
        mem_copy_val v393, v391
        v394 = call print_str_1(v392, v393)
        v395 = get_local __ptr u64, arg_18
        v396 = load v395
        v397 = get_local __ptr {  }, f_17
        v398 = call fmt_24(v396, v397)
        v399 = get_local __ptr {  }, f_17, !163
        v400 = get_local __ptr string<1>, __anon_60
        mem_copy_val v400, v377
        v401 = cast_ptr v400 to ptr, !163
        v402 = get_local __ptr { ptr, u64 }, __anon_61, !163
        v403 = const u64 0
        v404 = get_elem_ptr v402, __ptr ptr, v403
        store v401 to v404, !163
        v405 = const u64 1
        v406 = get_elem_ptr v402, __ptr u64, v405
        v407 = const u64 1
        store v407 to v406, !163
        v408 = get_local __ptr slice, __anon_62, !163
        mem_copy_bytes v408, v402, 16
        v409 = get_local __ptr {  }, __tmp_arg35
        mem_copy_val v409, v399
        v410 = get_local __ptr slice, __tmp_arg36
        mem_copy_val v410, v408
        v411 = call print_str_1(v409, v410)
        v412 = get_local __ptr {  }, f_17, !163
        v413 = get_local __ptr {  }, self_8, !163
        mem_copy_val v413, v412
        v414 = get_global __ptr u64, std::debug::STDERR, !164
        v415 = get_local __ptr u64, fd_7, !165
        mem_copy_val v415, v414
        v416 = get_local __ptr u64, fd_7, !166
        v417 = load v416, !167
        v418 = asm(id: v57, fd: v417) -> (), !168 {
            ecal   id fd zero zero, !103
        }
        v419 = get_local __ptr string<27>, __const18
        v420 = get_local __ptr string<1>, __const19
        v421 = get_local __ptr u64, arg_18
        v422 = get_local __ptr u64, _________, !169
        mem_copy_val v422, v421
        v423 = get_local __ptr u64, arg_20
        v424 = const u64 1, !170
        store v424 to v423
        v425 = get_local __ptr {  }, __anon_63, !171
        v426 = get_local __ptr {  }, f_19
        mem_copy_val v426, v425
        v427 = get_local __ptr {  }, f_19, !171
        v428 = get_local __ptr string<27>, __anon_64
        mem_copy_val v428, v419
        v429 = cast_ptr v428 to ptr, !171
        v430 = get_local __ptr { ptr, u64 }, __anon_65, !171
        v431 = const u64 0
        v432 = get_elem_ptr v430, __ptr ptr, v431
        store v429 to v432, !171
        v433 = const u64 1
        v434 = get_elem_ptr v430, __ptr u64, v433
        v435 = const u64 27
        store v435 to v434, !171
        v436 = get_local __ptr slice, __anon_66, !171
        mem_copy_bytes v436, v430, 16
        v437 = get_local __ptr {  }, __tmp_arg37
        mem_copy_val v437, v427
        v438 = get_local __ptr slice, __tmp_arg38
        mem_copy_val v438, v436
        v439 = call print_str_1(v437, v438)
        v440 = get_local __ptr u64, arg_20
        v441 = load v440
        v442 = get_local __ptr {  }, f_19
        v443 = call fmt_24(v441, v442)
        v444 = get_local __ptr {  }, f_19, !171
        v445 = get_local __ptr string<1>, __anon_67
        mem_copy_val v445, v420
        v446 = cast_ptr v445 to ptr, !171
        v447 = get_local __ptr { ptr, u64 }, __anon_68, !171
        v448 = const u64 0
        v449 = get_elem_ptr v447, __ptr ptr, v448
        store v446 to v449, !171
        v450 = const u64 1
        v451 = get_elem_ptr v447, __ptr u64, v450
        v452 = const u64 1
        store v452 to v451, !171
        v453 = get_local __ptr slice, __anon_69, !171
        mem_copy_bytes v453, v447, 16
        v454 = get_local __ptr {  }, __tmp_arg39
        mem_copy_val v454, v444
        v455 = get_local __ptr slice, __tmp_arg40
        mem_copy_val v455, v453
        v456 = call print_str_1(v454, v455)
        v457 = get_local __ptr {  }, f_19, !171
        v458 = get_local __ptr {  }, self_9, !171
        mem_copy_val v458, v457
        v459 = get_global __ptr u64, std::debug::STDERR, !172
        v460 = get_local __ptr u64, fd_8, !173
        mem_copy_val v460, v459
        v461 = get_local __ptr u64, fd_8, !174
        v462 = load v461, !175
        v463 = asm(id: v57, fd: v462) -> (), !176 {
            ecal   id fd zero zero, !103
        }
        v464 = get_local __ptr string<28>, __const20
        v465 = get_local __ptr string<1>, __const21
        v466 = get_local __ptr u64, arg_20
        v467 = get_local __ptr u64, __________, !177
        mem_copy_val v467, v466
        v468 = get_local __ptr u64, arg_22
        v469 = const u64 10, !178
        store v469 to v468
        v470 = get_local __ptr {  }, __anon_70, !179
        v471 = get_local __ptr {  }, f_21
        mem_copy_val v471, v470
        v472 = get_local __ptr {  }, f_21, !179
        v473 = get_local __ptr string<28>, __anon_71
        mem_copy_val v473, v464
        v474 = cast_ptr v473 to ptr, !179
        v475 = get_local __ptr { ptr, u64 }, __anon_72, !179
        v476 = const u64 0
        v477 = get_elem_ptr v475, __ptr ptr, v476
        store v474 to v477, !179
        v478 = const u64 1
        v479 = get_elem_ptr v475, __ptr u64, v478
        v480 = const u64 28
        store v480 to v479, !179
        v481 = get_local __ptr slice, __anon_73, !179
        mem_copy_bytes v481, v475, 16
        v482 = get_local __ptr {  }, __tmp_arg41
        mem_copy_val v482, v472
        v483 = get_local __ptr slice, __tmp_arg42
        mem_copy_val v483, v481
        v484 = call print_str_1(v482, v483)
        v485 = get_local __ptr u64, arg_22
        v486 = load v485
        v487 = get_local __ptr {  }, f_21
        v488 = call fmt_24(v486, v487)
        v489 = get_local __ptr {  }, f_21, !179
        v490 = get_local __ptr string<1>, __anon_74
        mem_copy_val v490, v465
        v491 = cast_ptr v490 to ptr, !179
        v492 = get_local __ptr { ptr, u64 }, __anon_75, !179
        v493 = const u64 0
        v494 = get_elem_ptr v492, __ptr ptr, v493
        store v491 to v494, !179
        v495 = const u64 1
        v496 = get_elem_ptr v492, __ptr u64, v495
        v497 = const u64 1
        store v497 to v496, !179
        v498 = get_local __ptr slice, __anon_76, !179
        mem_copy_bytes v498, v492, 16
        v499 = get_local __ptr {  }, __tmp_arg43
        mem_copy_val v499, v489
        v500 = get_local __ptr slice, __tmp_arg44
        mem_copy_val v500, v498
        v501 = call print_str_1(v499, v500)
        v502 = get_local __ptr {  }, f_21, !179
        v503 = get_local __ptr {  }, self_10, !179
        mem_copy_val v503, v502
        v504 = get_global __ptr u64, std::debug::STDERR, !180
        v505 = get_local __ptr u64, fd_9, !181
        mem_copy_val v505, v504
        v506 = get_local __ptr u64, fd_9, !182
        v507 = load v506, !183
        v508 = asm(id: v57, fd: v507) -> (), !184 {
            ecal   id fd zero zero, !103
        }
        v509 = get_local __ptr string<29>, __const22
        v510 = get_local __ptr string<1>, __const23
        v511 = get_local __ptr u64, arg_22
        v512 = get_local __ptr u64, ___________, !185
        mem_copy_val v512, v511
        v513 = get_local __ptr u64, arg_24
        v514 = const u64 100, !186
        store v514 to v513
        v515 = get_local __ptr {  }, __anon_77, !187
        v516 = get_local __ptr {  }, f_23
        mem_copy_val v516, v515
        v517 = get_local __ptr {  }, f_23, !187
        v518 = get_local __ptr string<29>, __anon_78
        mem_copy_val v518, v509
        v519 = cast_ptr v518 to ptr, !187
        v520 = get_local __ptr { ptr, u64 }, __anon_79, !187
        v521 = const u64 0
        v522 = get_elem_ptr v520, __ptr ptr, v521
        store v519 to v522, !187
        v523 = const u64 1
        v524 = get_elem_ptr v520, __ptr u64, v523
        v525 = const u64 29
        store v525 to v524, !187
        v526 = get_local __ptr slice, __anon_80, !187
        mem_copy_bytes v526, v520, 16
        v527 = get_local __ptr {  }, __tmp_arg45
        mem_copy_val v527, v517
        v528 = get_local __ptr slice, __tmp_arg46
        mem_copy_val v528, v526
        v529 = call print_str_1(v527, v528)
        v530 = get_local __ptr u64, arg_24
        v531 = load v530
        v532 = get_local __ptr {  }, f_23
        v533 = call fmt_24(v531, v532)
        v534 = get_local __ptr {  }, f_23, !187
        v535 = get_local __ptr string<1>, __anon_81
        mem_copy_val v535, v510
        v536 = cast_ptr v535 to ptr, !187
        v537 = get_local __ptr { ptr, u64 }, __anon_82, !187
        v538 = const u64 0
        v539 = get_elem_ptr v537, __ptr ptr, v538
        store v536 to v539, !187
        v540 = const u64 1
        v541 = get_elem_ptr v537, __ptr u64, v540
        v542 = const u64 1
        store v542 to v541, !187
        v543 = get_local __ptr slice, __anon_83, !187
        mem_copy_bytes v543, v537, 16
        v544 = get_local __ptr {  }, __tmp_arg47
        mem_copy_val v544, v534
        v545 = get_local __ptr slice, __tmp_arg48
        mem_copy_val v545, v543
        v546 = call print_str_1(v544, v545)
        v547 = get_local __ptr {  }, f_23, !187
        v548 = get_local __ptr {  }, self_11, !187
        mem_copy_val v548, v547
        v549 = get_global __ptr u64, std::debug::STDERR, !188
        v550 = get_local __ptr u64, fd_10, !189
        mem_copy_val v550, v549
        v551 = get_local __ptr u64, fd_10, !190
        v552 = load v551, !191
        v553 = asm(id: v57, fd: v552) -> (), !192 {
            ecal   id fd zero zero, !103
        }
        v554 = get_local __ptr u64, arg_24
        v555 = get_local __ptr u64, ____________, !193
        mem_copy_val v555, v554
        v556 = get_local __ptr string<33>, __const24
        v557 = get_local __ptr string<1>, __const25
        v558 = get_local __ptr u64, arg_26
        v559 = const u64 65535, !194
        store v559 to v558
        v560 = get_local __ptr {  }, __anon_84, !195
        v561 = get_local __ptr {  }, f_25
        mem_copy_val v561, v560
        v562 = get_local __ptr {  }, f_25, !195
        v563 = get_local __ptr string<33>, __anon_85
        mem_copy_val v563, v556
        v564 = cast_ptr v563 to ptr, !195
        v565 = get_local __ptr { ptr, u64 }, __anon_86, !195
        v566 = const u64 0
        v567 = get_elem_ptr v565, __ptr ptr, v566
        store v564 to v567, !195
        v568 = const u64 1
        v569 = get_elem_ptr v565, __ptr u64, v568
        v570 = const u64 33
        store v570 to v569, !195
        v571 = get_local __ptr slice, __anon_87, !195
        mem_copy_bytes v571, v565, 16
        v572 = get_local __ptr {  }, __tmp_arg49
        mem_copy_val v572, v562
        v573 = get_local __ptr slice, __tmp_arg50
        mem_copy_val v573, v571
        v574 = call print_str_1(v572, v573)
        v575 = get_local __ptr u64, arg_26
        v576 = load v575
        v577 = get_local __ptr {  }, f_25
        v578 = call fmt_24(v576, v577)
        v579 = get_local __ptr {  }, f_25, !195
        v580 = get_local __ptr string<1>, __anon_88
        mem_copy_val v580, v557
        v581 = cast_ptr v580 to ptr, !195
        v582 = get_local __ptr { ptr, u64 }, __anon_89, !195
        v583 = const u64 0
        v584 = get_elem_ptr v582, __ptr ptr, v583
        store v581 to v584, !195
        v585 = const u64 1
        v586 = get_elem_ptr v582, __ptr u64, v585
        v587 = const u64 1
        store v587 to v586, !195
        v588 = get_local __ptr slice, __anon_90, !195
        mem_copy_bytes v588, v582, 16
        v589 = get_local __ptr {  }, __tmp_arg51
        mem_copy_val v589, v579
        v590 = get_local __ptr slice, __tmp_arg52
        mem_copy_val v590, v588
        v591 = call print_str_1(v589, v590)
        v592 = get_local __ptr {  }, f_25, !195
        v593 = get_local __ptr {  }, self_12, !195
        mem_copy_val v593, v592
        v594 = get_global __ptr u64, std::debug::STDERR, !196
        v595 = get_local __ptr u64, fd_11, !197
        mem_copy_val v595, v594
        v596 = get_local __ptr u64, fd_11, !198
        v597 = load v596, !199
        v598 = asm(id: v57, fd: v597) -> (), !200 {
            ecal   id fd zero zero, !103
        }
        v599 = get_local __ptr u64, arg_26
        v600 = get_local __ptr u64, _____________, !201
        mem_copy_val v600, v599
        v601 = get_local __ptr string<33>, __const26
        v602 = get_local __ptr string<1>, __const27
        v603 = get_local __ptr u64, arg_28
        v604 = const u64 0, !202
        store v604 to v603
        v605 = get_local __ptr {  }, __anon_91, !203
        v606 = get_local __ptr {  }, f_27
        mem_copy_val v606, v605
        v607 = get_local __ptr {  }, f_27, !203
        v608 = get_local __ptr string<33>, __anon_92
        mem_copy_val v608, v601
        v609 = cast_ptr v608 to ptr, !203
        v610 = get_local __ptr { ptr, u64 }, __anon_93, !203
        v611 = const u64 0
        v612 = get_elem_ptr v610, __ptr ptr, v611
        store v609 to v612, !203
        v613 = const u64 1
        v614 = get_elem_ptr v610, __ptr u64, v613
        v615 = const u64 33
        store v615 to v614, !203
        v616 = get_local __ptr slice, __anon_94, !203
        mem_copy_bytes v616, v610, 16
        v617 = get_local __ptr {  }, __tmp_arg53
        mem_copy_val v617, v607
        v618 = get_local __ptr slice, __tmp_arg54
        mem_copy_val v618, v616
        v619 = call print_str_1(v617, v618)
        v620 = get_local __ptr u64, arg_28
        v621 = load v620
        v622 = get_local __ptr {  }, f_27
        v623 = call fmt_31(v621, v622)
        v624 = get_local __ptr {  }, f_27, !203
        v625 = get_local __ptr string<1>, __anon_95
        mem_copy_val v625, v602
        v626 = cast_ptr v625 to ptr, !203
        v627 = get_local __ptr { ptr, u64 }, __anon_96, !203
        v628 = const u64 0
        v629 = get_elem_ptr v627, __ptr ptr, v628
        store v626 to v629, !203
        v630 = const u64 1
        v631 = get_elem_ptr v627, __ptr u64, v630
        v632 = const u64 1
        store v632 to v631, !203
        v633 = get_local __ptr slice, __anon_97, !203
        mem_copy_bytes v633, v627, 16
        v634 = get_local __ptr {  }, __tmp_arg55
        mem_copy_val v634, v624
        v635 = get_local __ptr slice, __tmp_arg56
        mem_copy_val v635, v633
        v636 = call print_str_1(v634, v635)
        v637 = get_local __ptr {  }, f_27, !203
        v638 = get_local __ptr {  }, self_13, !203
        mem_copy_val v638, v637
        v639 = get_global __ptr u64, std::debug::STDERR, !204
        v640 = get_local __ptr u64, fd_12, !205
        mem_copy_val v640, v639
        v641 = get_local __ptr u64, fd_12, !206
        v642 = load v641, !207
        v643 = asm(id: v57, fd: v642) -> (), !208 {
            ecal   id fd zero zero, !103
        }
        v644 = get_local __ptr string<27>, __const28
        v645 = get_local __ptr string<1>, __const29
        v646 = get_local __ptr u64, arg_28
        v647 = get_local __ptr u64, ______________, !209
        mem_copy_val v647, v646
        v648 = get_local __ptr u64, arg_30
        v649 = const u64 1, !210
        store v649 to v648
        v650 = get_local __ptr {  }, __anon_98, !211
        v651 = get_local __ptr {  }, f_29
        mem_copy_val v651, v650
        v652 = get_local __ptr {  }, f_29, !211
        v653 = get_local __ptr string<27>, __anon_99
        mem_copy_val v653, v644
        v654 = cast_ptr v653 to ptr, !211
        v655 = get_local __ptr { ptr, u64 }, __anon_100, !211
        v656 = const u64 0
        v657 = get_elem_ptr v655, __ptr ptr, v656
        store v654 to v657, !211
        v658 = const u64 1
        v659 = get_elem_ptr v655, __ptr u64, v658
        v660 = const u64 27
        store v660 to v659, !211
        v661 = get_local __ptr slice, __anon_101, !211
        mem_copy_bytes v661, v655, 16
        v662 = get_local __ptr {  }, __tmp_arg57
        mem_copy_val v662, v652
        v663 = get_local __ptr slice, __tmp_arg58
        mem_copy_val v663, v661
        v664 = call print_str_1(v662, v663)
        v665 = get_local __ptr u64, arg_30
        v666 = load v665
        v667 = get_local __ptr {  }, f_29
        v668 = call fmt_31(v666, v667)
        v669 = get_local __ptr {  }, f_29, !211
        v670 = get_local __ptr string<1>, __anon_102
        mem_copy_val v670, v645
        v671 = cast_ptr v670 to ptr, !211
        v672 = get_local __ptr { ptr, u64 }, __anon_103, !211
        v673 = const u64 0
        v674 = get_elem_ptr v672, __ptr ptr, v673
        store v671 to v674, !211
        v675 = const u64 1
        v676 = get_elem_ptr v672, __ptr u64, v675
        v677 = const u64 1
        store v677 to v676, !211
        v678 = get_local __ptr slice, __anon_104, !211
        mem_copy_bytes v678, v672, 16
        v679 = get_local __ptr {  }, __tmp_arg59
        mem_copy_val v679, v669
        v680 = get_local __ptr slice, __tmp_arg60
        mem_copy_val v680, v678
        v681 = call print_str_1(v679, v680)
        v682 = get_local __ptr {  }, f_29, !211
        v683 = get_local __ptr {  }, self_14, !211
        mem_copy_val v683, v682
        v684 = get_global __ptr u64, std::debug::STDERR, !212
        v685 = get_local __ptr u64, fd_13, !213
        mem_copy_val v685, v684
        v686 = get_local __ptr u64, fd_13, !214
        v687 = load v686, !215
        v688 = asm(id: v57, fd: v687) -> (), !216 {
            ecal   id fd zero zero, !103
        }
        v689 = get_local __ptr string<28>, __const30
        v690 = get_local __ptr string<1>, __const31
        v691 = get_local __ptr u64, arg_30
        v692 = get_local __ptr u64, _______________, !217
        mem_copy_val v692, v691
        v693 = get_local __ptr u64, arg_32
        v694 = const u64 10, !218
        store v694 to v693
        v695 = get_local __ptr {  }, __anon_105, !219
        v696 = get_local __ptr {  }, f_31
        mem_copy_val v696, v695
        v697 = get_local __ptr {  }, f_31, !219
        v698 = get_local __ptr string<28>, __anon_106
        mem_copy_val v698, v689
        v699 = cast_ptr v698 to ptr, !219
        v700 = get_local __ptr { ptr, u64 }, __anon_107, !219
        v701 = const u64 0
        v702 = get_elem_ptr v700, __ptr ptr, v701
        store v699 to v702, !219
        v703 = const u64 1
        v704 = get_elem_ptr v700, __ptr u64, v703
        v705 = const u64 28
        store v705 to v704, !219
        v706 = get_local __ptr slice, __anon_108, !219
        mem_copy_bytes v706, v700, 16
        v707 = get_local __ptr {  }, __tmp_arg61
        mem_copy_val v707, v697
        v708 = get_local __ptr slice, __tmp_arg62
        mem_copy_val v708, v706
        v709 = call print_str_1(v707, v708)
        v710 = get_local __ptr u64, arg_32
        v711 = load v710
        v712 = get_local __ptr {  }, f_31
        v713 = call fmt_31(v711, v712)
        v714 = get_local __ptr {  }, f_31, !219
        v715 = get_local __ptr string<1>, __anon_109
        mem_copy_val v715, v690
        v716 = cast_ptr v715 to ptr, !219
        v717 = get_local __ptr { ptr, u64 }, __anon_110, !219
        v718 = const u64 0
        v719 = get_elem_ptr v717, __ptr ptr, v718
        store v716 to v719, !219
        v720 = const u64 1
        v721 = get_elem_ptr v717, __ptr u64, v720
        v722 = const u64 1
        store v722 to v721, !219
        v723 = get_local __ptr slice, __anon_111, !219
        mem_copy_bytes v723, v717, 16
        v724 = get_local __ptr {  }, __tmp_arg63
        mem_copy_val v724, v714
        v725 = get_local __ptr slice, __tmp_arg64
        mem_copy_val v725, v723
        v726 = call print_str_1(v724, v725)
        v727 = get_local __ptr {  }, f_31, !219
        v728 = get_local __ptr {  }, self_15, !219
        mem_copy_val v728, v727
        v729 = get_global __ptr u64, std::debug::STDERR, !220
        v730 = get_local __ptr u64, fd_14, !221
        mem_copy_val v730, v729
        v731 = get_local __ptr u64, fd_14, !222
        v732 = load v731, !223
        v733 = asm(id: v57, fd: v732) -> (), !224 {
            ecal   id fd zero zero, !103
        }
        v734 = get_local __ptr string<29>, __const32
        v735 = get_local __ptr string<1>, __const33
        v736 = get_local __ptr u64, arg_32
        v737 = get_local __ptr u64, ________________, !225
        mem_copy_val v737, v736
        v738 = get_local __ptr u64, arg_34
        v739 = const u64 100, !226
        store v739 to v738
        v740 = get_local __ptr {  }, __anon_112, !227
        v741 = get_local __ptr {  }, f_33
        mem_copy_val v741, v740
        v742 = get_local __ptr {  }, f_33, !227
        v743 = get_local __ptr string<29>, __anon_113
        mem_copy_val v743, v734
        v744 = cast_ptr v743 to ptr, !227
        v745 = get_local __ptr { ptr, u64 }, __anon_114, !227
        v746 = const u64 0
        v747 = get_elem_ptr v745, __ptr ptr, v746
        store v744 to v747, !227
        v748 = const u64 1
        v749 = get_elem_ptr v745, __ptr u64, v748
        v750 = const u64 29
        store v750 to v749, !227
        v751 = get_local __ptr slice, __anon_115, !227
        mem_copy_bytes v751, v745, 16
        v752 = get_local __ptr {  }, __tmp_arg65
        mem_copy_val v752, v742
        v753 = get_local __ptr slice, __tmp_arg66
        mem_copy_val v753, v751
        v754 = call print_str_1(v752, v753)
        v755 = get_local __ptr u64, arg_34
        v756 = load v755
        v757 = get_local __ptr {  }, f_33
        v758 = call fmt_31(v756, v757)
        v759 = get_local __ptr {  }, f_33, !227
        v760 = get_local __ptr string<1>, __anon_116
        mem_copy_val v760, v735
        v761 = cast_ptr v760 to ptr, !227
        v762 = get_local __ptr { ptr, u64 }, __anon_117, !227
        v763 = const u64 0
        v764 = get_elem_ptr v762, __ptr ptr, v763
        store v761 to v764, !227
        v765 = const u64 1
        v766 = get_elem_ptr v762, __ptr u64, v765
        v767 = const u64 1
        store v767 to v766, !227
        v768 = get_local __ptr slice, __anon_118, !227
        mem_copy_bytes v768, v762, 16
        v769 = get_local __ptr {  }, __tmp_arg67
        mem_copy_val v769, v759
        v770 = get_local __ptr slice, __tmp_arg68
        mem_copy_val v770, v768
        v771 = call print_str_1(v769, v770)
        v772 = get_local __ptr {  }, f_33, !227
        v773 = get_local __ptr {  }, self_16, !227
        mem_copy_val v773, v772
        v774 = get_global __ptr u64, std::debug::STDERR, !228
        v775 = get_local __ptr u64, fd_15, !229
        mem_copy_val v775, v774
        v776 = get_local __ptr u64, fd_15, !230
        v777 = load v776, !231
        v778 = asm(id: v57, fd: v777) -> (), !232 {
            ecal   id fd zero zero, !103
        }
        v779 = get_local __ptr u64, arg_34
        v780 = get_local __ptr u64, _________________, !233
        mem_copy_val v780, v779
        v781 = get_local __ptr string<33>, __const34
        v782 = get_local __ptr string<1>, __const35
        v783 = get_local __ptr u64, arg_36
        v784 = const u64 4294967295, !234
        store v784 to v783
        v785 = get_local __ptr {  }, __anon_119, !235
        v786 = get_local __ptr {  }, f_35
        mem_copy_val v786, v785
        v787 = get_local __ptr {  }, f_35, !235
        v788 = get_local __ptr string<33>, __anon_120
        mem_copy_val v788, v781
        v789 = cast_ptr v788 to ptr, !235
        v790 = get_local __ptr { ptr, u64 }, __anon_121, !235
        v791 = const u64 0
        v792 = get_elem_ptr v790, __ptr ptr, v791
        store v789 to v792, !235
        v793 = const u64 1
        v794 = get_elem_ptr v790, __ptr u64, v793
        v795 = const u64 33
        store v795 to v794, !235
        v796 = get_local __ptr slice, __anon_122, !235
        mem_copy_bytes v796, v790, 16
        v797 = get_local __ptr {  }, __tmp_arg69
        mem_copy_val v797, v787
        v798 = get_local __ptr slice, __tmp_arg70
        mem_copy_val v798, v796
        v799 = call print_str_1(v797, v798)
        v800 = get_local __ptr u64, arg_36
        v801 = load v800
        v802 = get_local __ptr {  }, f_35
        v803 = call fmt_31(v801, v802)
        v804 = get_local __ptr {  }, f_35, !235
        v805 = get_local __ptr string<1>, __anon_123
        mem_copy_val v805, v782
        v806 = cast_ptr v805 to ptr, !235
        v807 = get_local __ptr { ptr, u64 }, __anon_124, !235
        v808 = const u64 0
        v809 = get_elem_ptr v807, __ptr ptr, v808
        store v806 to v809, !235
        v810 = const u64 1
        v811 = get_elem_ptr v807, __ptr u64, v810
        v812 = const u64 1
        store v812 to v811, !235
        v813 = get_local __ptr slice, __anon_125, !235
        mem_copy_bytes v813, v807, 16
        v814 = get_local __ptr {  }, __tmp_arg71
        mem_copy_val v814, v804
        v815 = get_local __ptr slice, __tmp_arg72
        mem_copy_val v815, v813
        v816 = call print_str_1(v814, v815)
        v817 = get_local __ptr {  }, f_35, !235
        v818 = get_local __ptr {  }, self_17, !235
        mem_copy_val v818, v817
        v819 = get_global __ptr u64, std::debug::STDERR, !236
        v820 = get_local __ptr u64, fd_16, !237
        mem_copy_val v820, v819
        v821 = get_local __ptr u64, fd_16, !238
        v822 = load v821, !239
        v823 = asm(id: v57, fd: v822) -> (), !240 {
            ecal   id fd zero zero, !103
        }
        v824 = get_local __ptr u64, arg_36
        v825 = get_local __ptr u64, __________________, !241
        mem_copy_val v825, v824
        v826 = get_local __ptr string<33>, __const36
        v827 = get_local __ptr string<1>, __const37
        v828 = get_local __ptr u64, arg_38
        v829 = const u64 0, !242
        store v829 to v828
        v830 = get_local __ptr {  }, __anon_126, !243
        v831 = get_local __ptr {  }, f_37
        mem_copy_val v831, v830
        v832 = get_local __ptr {  }, f_37, !243
        v833 = get_local __ptr string<33>, __anon_127
        mem_copy_val v833, v826
        v834 = cast_ptr v833 to ptr, !243
        v835 = get_local __ptr { ptr, u64 }, __anon_128, !243
        v836 = const u64 0
        v837 = get_elem_ptr v835, __ptr ptr, v836
        store v834 to v837, !243
        v838 = const u64 1
        v839 = get_elem_ptr v835, __ptr u64, v838
        v840 = const u64 33
        store v840 to v839, !243
        v841 = get_local __ptr slice, __anon_129, !243
        mem_copy_bytes v841, v835, 16
        v842 = get_local __ptr {  }, __tmp_arg73
        mem_copy_val v842, v832
        v843 = get_local __ptr slice, __tmp_arg74
        mem_copy_val v843, v841
        v844 = call print_str_1(v842, v843)
        v845 = get_local __ptr u64, arg_38
        v846 = load v845
        v847 = get_local __ptr {  }, f_37
        v848 = call fmt_38(v846, v847)
        v849 = get_local __ptr {  }, f_37, !243
        v850 = get_local __ptr string<1>, __anon_130
        mem_copy_val v850, v827
        v851 = cast_ptr v850 to ptr, !243
        v852 = get_local __ptr { ptr, u64 }, __anon_131, !243
        v853 = const u64 0
        v854 = get_elem_ptr v852, __ptr ptr, v853
        store v851 to v854, !243
        v855 = const u64 1
        v856 = get_elem_ptr v852, __ptr u64, v855
        v857 = const u64 1
        store v857 to v856, !243
        v858 = get_local __ptr slice, __anon_132, !243
        mem_copy_bytes v858, v852, 16
        v859 = get_local __ptr {  }, __tmp_arg75
        mem_copy_val v859, v849
        v860 = get_local __ptr slice, __tmp_arg76
        mem_copy_val v860, v858
        v861 = call print_str_1(v859, v860)
        v862 = get_local __ptr {  }, f_37, !243
        v863 = get_local __ptr {  }, self_18, !243
        mem_copy_val v863, v862
        v864 = get_global __ptr u64, std::debug::STDERR, !244
        v865 = get_local __ptr u64, fd_17, !245
        mem_copy_val v865, v864
        v866 = get_local __ptr u64, fd_17, !246
        v867 = load v866, !247
        v868 = asm(id: v57, fd: v867) -> (), !248 {
            ecal   id fd zero zero, !103
        }
        v869 = get_local __ptr string<27>, __const38
        v870 = get_local __ptr string<1>, __const39
        v871 = get_local __ptr u64, arg_38
        v872 = get_local __ptr u64, ___________________, !249
        mem_copy_val v872, v871
        v873 = get_local __ptr u64, arg_40
        v874 = const u64 1, !250
        store v874 to v873
        v875 = get_local __ptr {  }, __anon_133, !251
        v876 = get_local __ptr {  }, f_39
        mem_copy_val v876, v875
        v877 = get_local __ptr {  }, f_39, !251
        v878 = get_local __ptr string<27>, __anon_134
        mem_copy_val v878, v869
        v879 = cast_ptr v878 to ptr, !251
        v880 = get_local __ptr { ptr, u64 }, __anon_135, !251
        v881 = const u64 0
        v882 = get_elem_ptr v880, __ptr ptr, v881
        store v879 to v882, !251
        v883 = const u64 1
        v884 = get_elem_ptr v880, __ptr u64, v883
        v885 = const u64 27
        store v885 to v884, !251
        v886 = get_local __ptr slice, __anon_136, !251
        mem_copy_bytes v886, v880, 16
        v887 = get_local __ptr {  }, __tmp_arg77
        mem_copy_val v887, v877
        v888 = get_local __ptr slice, __tmp_arg78
        mem_copy_val v888, v886
        v889 = call print_str_1(v887, v888)
        v890 = get_local __ptr u64, arg_40
        v891 = load v890
        v892 = get_local __ptr {  }, f_39
        v893 = call fmt_38(v891, v892)
        v894 = get_local __ptr {  }, f_39, !251
        v895 = get_local __ptr string<1>, __anon_137
        mem_copy_val v895, v870
        v896 = cast_ptr v895 to ptr, !251
        v897 = get_local __ptr { ptr, u64 }, __anon_138, !251
        v898 = const u64 0
        v899 = get_elem_ptr v897, __ptr ptr, v898
        store v896 to v899, !251
        v900 = const u64 1
        v901 = get_elem_ptr v897, __ptr u64, v900
        v902 = const u64 1
        store v902 to v901, !251
        v903 = get_local __ptr slice, __anon_139, !251
        mem_copy_bytes v903, v897, 16
        v904 = get_local __ptr {  }, __tmp_arg79
        mem_copy_val v904, v894
        v905 = get_local __ptr slice, __tmp_arg80
        mem_copy_val v905, v903
        v906 = call print_str_1(v904, v905)
        v907 = get_local __ptr {  }, f_39, !251
        v908 = get_local __ptr {  }, self_19, !251
        mem_copy_val v908, v907
        v909 = get_global __ptr u64, std::debug::STDERR, !252
        v910 = get_local __ptr u64, fd_18, !253
        mem_copy_val v910, v909
        v911 = get_local __ptr u64, fd_18, !254
        v912 = load v911, !255
        v913 = asm(id: v57, fd: v912) -> (), !256 {
            ecal   id fd zero zero, !103
        }
        v914 = get_local __ptr string<28>, __const40
        v915 = get_local __ptr string<1>, __const41
        v916 = get_local __ptr u64, arg_40
        v917 = get_local __ptr u64, ____________________, !257
        mem_copy_val v917, v916
        v918 = get_local __ptr u64, arg_42
        v919 = const u64 10, !258
        store v919 to v918
        v920 = get_local __ptr {  }, __anon_140, !259
        v921 = get_local __ptr {  }, f_41
        mem_copy_val v921, v920
        v922 = get_local __ptr {  }, f_41, !259
        v923 = get_local __ptr string<28>, __anon_141
        mem_copy_val v923, v914
        v924 = cast_ptr v923 to ptr, !259
        v925 = get_local __ptr { ptr, u64 }, __anon_142, !259
        v926 = const u64 0
        v927 = get_elem_ptr v925, __ptr ptr, v926
        store v924 to v927, !259
        v928 = const u64 1
        v929 = get_elem_ptr v925, __ptr u64, v928
        v930 = const u64 28
        store v930 to v929, !259
        v931 = get_local __ptr slice, __anon_143, !259
        mem_copy_bytes v931, v925, 16
        v932 = get_local __ptr {  }, __tmp_arg81
        mem_copy_val v932, v922
        v933 = get_local __ptr slice, __tmp_arg82
        mem_copy_val v933, v931
        v934 = call print_str_1(v932, v933)
        v935 = get_local __ptr u64, arg_42
        v936 = load v935
        v937 = get_local __ptr {  }, f_41
        v938 = call fmt_38(v936, v937)
        v939 = get_local __ptr {  }, f_41, !259
        v940 = get_local __ptr string<1>, __anon_144
        mem_copy_val v940, v915
        v941 = cast_ptr v940 to ptr, !259
        v942 = get_local __ptr { ptr, u64 }, __anon_145, !259
        v943 = const u64 0
        v944 = get_elem_ptr v942, __ptr ptr, v943
        store v941 to v944, !259
        v945 = const u64 1
        v946 = get_elem_ptr v942, __ptr u64, v945
        v947 = const u64 1
        store v947 to v946, !259
        v948 = get_local __ptr slice, __anon_146, !259
        mem_copy_bytes v948, v942, 16
        v949 = get_local __ptr {  }, __tmp_arg83
        mem_copy_val v949, v939
        v950 = get_local __ptr slice, __tmp_arg84
        mem_copy_val v950, v948
        v951 = call print_str_1(v949, v950)
        v952 = get_local __ptr {  }, f_41, !259
        v953 = get_local __ptr {  }, self_20, !259
        mem_copy_val v953, v952
        v954 = get_global __ptr u64, std::debug::STDERR, !260
        v955 = get_local __ptr u64, fd_19, !261
        mem_copy_val v955, v954
        v956 = get_local __ptr u64, fd_19, !262
        v957 = load v956, !263
        v958 = asm(id: v57, fd: v957) -> (), !264 {
            ecal   id fd zero zero, !103
        }
        v959 = get_local __ptr string<29>, __const42
        v960 = get_local __ptr string<1>, __const43
        v961 = get_local __ptr u64, arg_42
        v962 = get_local __ptr u64, _____________________, !265
        mem_copy_val v962, v961
        v963 = get_local __ptr u64, arg_44
        v964 = const u64 100, !266
        store v964 to v963
        v965 = get_local __ptr {  }, __anon_147, !267
        v966 = get_local __ptr {  }, f_43
        mem_copy_val v966, v965
        v967 = get_local __ptr {  }, f_43, !267
        v968 = get_local __ptr string<29>, __anon_148
        mem_copy_val v968, v959
        v969 = cast_ptr v968 to ptr, !267
        v970 = get_local __ptr { ptr, u64 }, __anon_149, !267
        v971 = const u64 0
        v972 = get_elem_ptr v970, __ptr ptr, v971
        store v969 to v972, !267
        v973 = const u64 1
        v974 = get_elem_ptr v970, __ptr u64, v973
        v975 = const u64 29
        store v975 to v974, !267
        v976 = get_local __ptr slice, __anon_150, !267
        mem_copy_bytes v976, v970, 16
        v977 = get_local __ptr {  }, __tmp_arg85
        mem_copy_val v977, v967
        v978 = get_local __ptr slice, __tmp_arg86
        mem_copy_val v978, v976
        v979 = call print_str_1(v977, v978)
        v980 = get_local __ptr u64, arg_44
        v981 = load v980
        v982 = get_local __ptr {  }, f_43
        v983 = call fmt_38(v981, v982)
        v984 = get_local __ptr {  }, f_43, !267
        v985 = get_local __ptr string<1>, __anon_151
        mem_copy_val v985, v960
        v986 = cast_ptr v985 to ptr, !267
        v987 = get_local __ptr { ptr, u64 }, __anon_152, !267
        v988 = const u64 0
        v989 = get_elem_ptr v987, __ptr ptr, v988
        store v986 to v989, !267
        v990 = const u64 1
        v991 = get_elem_ptr v987, __ptr u64, v990
        v992 = const u64 1
        store v992 to v991, !267
        v993 = get_local __ptr slice, __anon_153, !267
        mem_copy_bytes v993, v987, 16
        v994 = get_local __ptr {  }, __tmp_arg87
        mem_copy_val v994, v984
        v995 = get_local __ptr slice, __tmp_arg88
        mem_copy_val v995, v993
        v996 = call print_str_1(v994, v995)
        v997 = get_local __ptr {  }, f_43, !267
        v998 = get_local __ptr {  }, self_21, !267
        mem_copy_val v998, v997
        v999 = get_global __ptr u64, std::debug::STDERR, !268
        v1000 = get_local __ptr u64, fd_20, !269
        mem_copy_val v1000, v999
        v1001 = get_local __ptr u64, fd_20, !270
        v1002 = load v1001, !271
        v1003 = asm(id: v57, fd: v1002) -> (), !272 {
            ecal   id fd zero zero, !103
        }
        v1004 = get_local __ptr u64, arg_44
        v1005 = get_local __ptr u64, ______________________, !273
        mem_copy_val v1005, v1004
        v1006 = get_local __ptr string<33>, __const44
        v1007 = get_local __ptr string<1>, __const45
        v1008 = get_local __ptr u64, arg_46
        v1009 = const u64 18446744073709551615, !274
        store v1009 to v1008
        v1010 = get_local __ptr {  }, __anon_154, !275
        v1011 = get_local __ptr {  }, f_45
        mem_copy_val v1011, v1010
        v1012 = get_local __ptr {  }, f_45, !275
        v1013 = get_local __ptr string<33>, __anon_155
        mem_copy_val v1013, v1006
        v1014 = cast_ptr v1013 to ptr, !275
        v1015 = get_local __ptr { ptr, u64 }, __anon_156, !275
        v1016 = const u64 0
        v1017 = get_elem_ptr v1015, __ptr ptr, v1016
        store v1014 to v1017, !275
        v1018 = const u64 1
        v1019 = get_elem_ptr v1015, __ptr u64, v1018
        v1020 = const u64 33
        store v1020 to v1019, !275
        v1021 = get_local __ptr slice, __anon_157, !275
        mem_copy_bytes v1021, v1015, 16
        v1022 = get_local __ptr {  }, __tmp_arg89
        mem_copy_val v1022, v1012
        v1023 = get_local __ptr slice, __tmp_arg90
        mem_copy_val v1023, v1021
        v1024 = call print_str_1(v1022, v1023)
        v1025 = get_local __ptr u64, arg_46
        v1026 = load v1025
        v1027 = get_local __ptr {  }, f_45
        v1028 = call fmt_38(v1026, v1027)
        v1029 = get_local __ptr {  }, f_45, !275
        v1030 = get_local __ptr string<1>, __anon_158
        mem_copy_val v1030, v1007
        v1031 = cast_ptr v1030 to ptr, !275
        v1032 = get_local __ptr { ptr, u64 }, __anon_159, !275
        v1033 = const u64 0
        v1034 = get_elem_ptr v1032, __ptr ptr, v1033
        store v1031 to v1034, !275
        v1035 = const u64 1
        v1036 = get_elem_ptr v1032, __ptr u64, v1035
        v1037 = const u64 1
        store v1037 to v1036, !275
        v1038 = get_local __ptr slice, __anon_160, !275
        mem_copy_bytes v1038, v1032, 16
        v1039 = get_local __ptr {  }, __tmp_arg91
        mem_copy_val v1039, v1029
        v1040 = get_local __ptr slice, __tmp_arg92
        mem_copy_val v1040, v1038
        v1041 = call print_str_1(v1039, v1040)
        v1042 = get_local __ptr {  }, f_45, !275
        v1043 = get_local __ptr {  }, self_22, !275
        mem_copy_val v1043, v1042
        v1044 = get_global __ptr u64, std::debug::STDERR, !276
        v1045 = get_local __ptr u64, fd_21, !277
        mem_copy_val v1045, v1044
        v1046 = get_local __ptr u64, fd_21, !278
        v1047 = load v1046, !279
        v1048 = asm(id: v57, fd: v1047) -> (), !280 {
            ecal   id fd zero zero, !103
        }
        v1049 = get_local __ptr u256, __const46
        v1050 = get_local __ptr u64, arg_46
        v1051 = get_local __ptr u64, _______________________, !281
        mem_copy_val v1051, v1050
        v1052 = get_local __ptr u256, __tmp_block_arg
        mem_copy_val v1052, v1049
        v1053 = get_local __ptr string<34>, __const47
        v1054 = get_local __ptr string<1>, __const48
        v1055 = get_local __ptr u256, arg_48
        mem_copy_val v1055, v1052
        v1056 = get_local __ptr {  }, __anon_161, !282
        v1057 = get_local __ptr {  }, f_47
        mem_copy_val v1057, v1056
        v1058 = get_local __ptr {  }, f_47, !282
        v1059 = get_local __ptr string<34>, __anon_162
        mem_copy_val v1059, v1053
        v1060 = cast_ptr v1059 to ptr, !282
        v1061 = get_local __ptr { ptr, u64 }, __anon_163, !282
        v1062 = const u64 0
        v1063 = get_elem_ptr v1061, __ptr ptr, v1062
        store v1060 to v1063, !282
        v1064 = const u64 1
        v1065 = get_elem_ptr v1061, __ptr u64, v1064
        v1066 = const u64 34
        store v1066 to v1065, !282
        v1067 = get_local __ptr slice, __anon_164, !282
        mem_copy_bytes v1067, v1061, 16
        v1068 = get_local __ptr {  }, __tmp_arg93
        mem_copy_val v1068, v1058
        v1069 = get_local __ptr slice, __tmp_arg94
        mem_copy_val v1069, v1067
        v1070 = call print_str_1(v1068, v1069)
        v1071 = get_local __ptr u256, arg_48
        v1072 = get_local __ptr {  }, f_47
        v1073 = get_local __ptr u256, __tmp_arg309
        mem_copy_val v1073, v1071
        v1074 = call fmt_45(v1073, v1072)
        v1075 = get_local __ptr {  }, f_47, !282
        v1076 = get_local __ptr string<1>, __anon_165
        mem_copy_val v1076, v1054
        v1077 = cast_ptr v1076 to ptr, !282
        v1078 = get_local __ptr { ptr, u64 }, __anon_166, !282
        v1079 = const u64 0
        v1080 = get_elem_ptr v1078, __ptr ptr, v1079
        store v1077 to v1080, !282
        v1081 = const u64 1
        v1082 = get_elem_ptr v1078, __ptr u64, v1081
        v1083 = const u64 1
        store v1083 to v1082, !282
        v1084 = get_local __ptr slice, __anon_167, !282
        mem_copy_bytes v1084, v1078, 16
        v1085 = get_local __ptr {  }, __tmp_arg95
        mem_copy_val v1085, v1075
        v1086 = get_local __ptr slice, __tmp_arg96
        mem_copy_val v1086, v1084
        v1087 = call print_str_1(v1085, v1086)
        v1088 = get_local __ptr {  }, f_47, !282
        v1089 = get_local __ptr {  }, self_23, !282
        mem_copy_val v1089, v1088
        v1090 = get_global __ptr u64, std::debug::STDERR, !283
        v1091 = get_local __ptr u64, fd_22, !284
        mem_copy_val v1091, v1090
        v1092 = get_local __ptr u64, fd_22, !285
        v1093 = load v1092, !286
        v1094 = asm(id: v57, fd: v1093) -> (), !287 {
            ecal   id fd zero zero, !103
        }
        v1095 = get_local __ptr u256, __const49
        v1096 = get_local __ptr string<28>, __const50
        v1097 = get_local __ptr string<1>, __const51
        v1098 = get_local __ptr u256, arg_48
        v1099 = get_local __ptr u256, ________________________, !288
        mem_copy_val v1099, v1098
        v1100 = get_local __ptr u256, arg_50
        mem_copy_val v1100, v1095
        v1101 = get_local __ptr {  }, __anon_168, !289
        v1102 = get_local __ptr {  }, f_49
        mem_copy_val v1102, v1101
        v1103 = get_local __ptr {  }, f_49, !289
        v1104 = get_local __ptr string<28>, __anon_169
        mem_copy_val v1104, v1096
        v1105 = cast_ptr v1104 to ptr, !289
        v1106 = get_local __ptr { ptr, u64 }, __anon_170, !289
        v1107 = const u64 0
        v1108 = get_elem_ptr v1106, __ptr ptr, v1107
        store v1105 to v1108, !289
        v1109 = const u64 1
        v1110 = get_elem_ptr v1106, __ptr u64, v1109
        v1111 = const u64 28
        store v1111 to v1110, !289
        v1112 = get_local __ptr slice, __anon_171, !289
        mem_copy_bytes v1112, v1106, 16
        v1113 = get_local __ptr {  }, __tmp_arg97
        mem_copy_val v1113, v1103
        v1114 = get_local __ptr slice, __tmp_arg98
        mem_copy_val v1114, v1112
        v1115 = call print_str_1(v1113, v1114)
        v1116 = get_local __ptr u256, arg_50
        v1117 = get_local __ptr {  }, f_49
        v1118 = get_local __ptr u256, __tmp_arg310
        mem_copy_val v1118, v1116
        v1119 = call fmt_45(v1118, v1117)
        v1120 = get_local __ptr {  }, f_49, !289
        v1121 = get_local __ptr string<1>, __anon_172
        mem_copy_val v1121, v1097
        v1122 = cast_ptr v1121 to ptr, !289
        v1123 = get_local __ptr { ptr, u64 }, __anon_173, !289
        v1124 = const u64 0
        v1125 = get_elem_ptr v1123, __ptr ptr, v1124
        store v1122 to v1125, !289
        v1126 = const u64 1
        v1127 = get_elem_ptr v1123, __ptr u64, v1126
        v1128 = const u64 1
        store v1128 to v1127, !289
        v1129 = get_local __ptr slice, __anon_174, !289
        mem_copy_bytes v1129, v1123, 16
        v1130 = get_local __ptr {  }, __tmp_arg99
        mem_copy_val v1130, v1120
        v1131 = get_local __ptr slice, __tmp_arg100
        mem_copy_val v1131, v1129
        v1132 = call print_str_1(v1130, v1131)
        v1133 = get_local __ptr {  }, f_49, !289
        v1134 = get_local __ptr {  }, self_24, !289
        mem_copy_val v1134, v1133
        v1135 = get_global __ptr u64, std::debug::STDERR, !290
        v1136 = get_local __ptr u64, fd_23, !291
        mem_copy_val v1136, v1135
        v1137 = get_local __ptr u64, fd_23, !292
        v1138 = load v1137, !293
        v1139 = asm(id: v57, fd: v1138) -> (), !294 {
            ecal   id fd zero zero, !103
        }
        v1140 = get_local __ptr u256, __const52
        v1141 = get_local __ptr string<29>, __const53
        v1142 = get_local __ptr string<1>, __const54
        v1143 = get_local __ptr u256, arg_50
        v1144 = get_local __ptr u256, _________________________, !295
        mem_copy_val v1144, v1143
        v1145 = get_local __ptr u256, arg_52
        mem_copy_val v1145, v1140
        v1146 = get_local __ptr {  }, __anon_175, !296
        v1147 = get_local __ptr {  }, f_51
        mem_copy_val v1147, v1146
        v1148 = get_local __ptr {  }, f_51, !296
        v1149 = get_local __ptr string<29>, __anon_176
        mem_copy_val v1149, v1141
        v1150 = cast_ptr v1149 to ptr, !296
        v1151 = get_local __ptr { ptr, u64 }, __anon_177, !296
        v1152 = const u64 0
        v1153 = get_elem_ptr v1151, __ptr ptr, v1152
        store v1150 to v1153, !296
        v1154 = const u64 1
        v1155 = get_elem_ptr v1151, __ptr u64, v1154
        v1156 = const u64 29
        store v1156 to v1155, !296
        v1157 = get_local __ptr slice, __anon_178, !296
        mem_copy_bytes v1157, v1151, 16
        v1158 = get_local __ptr {  }, __tmp_arg101
        mem_copy_val v1158, v1148
        v1159 = get_local __ptr slice, __tmp_arg102
        mem_copy_val v1159, v1157
        v1160 = call print_str_1(v1158, v1159)
        v1161 = get_local __ptr u256, arg_52
        v1162 = get_local __ptr {  }, f_51
        v1163 = get_local __ptr u256, __tmp_arg311
        mem_copy_val v1163, v1161
        v1164 = call fmt_45(v1163, v1162)
        v1165 = get_local __ptr {  }, f_51, !296
        v1166 = get_local __ptr string<1>, __anon_179
        mem_copy_val v1166, v1142
        v1167 = cast_ptr v1166 to ptr, !296
        v1168 = get_local __ptr { ptr, u64 }, __anon_180, !296
        v1169 = const u64 0
        v1170 = get_elem_ptr v1168, __ptr ptr, v1169
        store v1167 to v1170, !296
        v1171 = const u64 1
        v1172 = get_elem_ptr v1168, __ptr u64, v1171
        v1173 = const u64 1
        store v1173 to v1172, !296
        v1174 = get_local __ptr slice, __anon_181, !296
        mem_copy_bytes v1174, v1168, 16
        v1175 = get_local __ptr {  }, __tmp_arg103
        mem_copy_val v1175, v1165
        v1176 = get_local __ptr slice, __tmp_arg104
        mem_copy_val v1176, v1174
        v1177 = call print_str_1(v1175, v1176)
        v1178 = get_local __ptr {  }, f_51, !296
        v1179 = get_local __ptr {  }, self_25, !296
        mem_copy_val v1179, v1178
        v1180 = get_global __ptr u64, std::debug::STDERR, !297
        v1181 = get_local __ptr u64, fd_24, !298
        mem_copy_val v1181, v1180
        v1182 = get_local __ptr u64, fd_24, !299
        v1183 = load v1182, !300
        v1184 = asm(id: v57, fd: v1183) -> (), !301 {
            ecal   id fd zero zero, !103
        }
        v1185 = get_local __ptr u256, __const55
        v1186 = get_local __ptr string<30>, __const56
        v1187 = get_local __ptr string<1>, __const57
        v1188 = get_local __ptr u256, arg_52
        v1189 = get_local __ptr u256, __________________________, !302
        mem_copy_val v1189, v1188
        v1190 = get_local __ptr u256, arg_54
        mem_copy_val v1190, v1185
        v1191 = get_local __ptr {  }, __anon_182, !303
        v1192 = get_local __ptr {  }, f_53
        mem_copy_val v1192, v1191
        v1193 = get_local __ptr {  }, f_53, !303
        v1194 = get_local __ptr string<30>, __anon_183
        mem_copy_val v1194, v1186
        v1195 = cast_ptr v1194 to ptr, !303
        v1196 = get_local __ptr { ptr, u64 }, __anon_184, !303
        v1197 = const u64 0
        v1198 = get_elem_ptr v1196, __ptr ptr, v1197
        store v1195 to v1198, !303
        v1199 = const u64 1
        v1200 = get_elem_ptr v1196, __ptr u64, v1199
        v1201 = const u64 30
        store v1201 to v1200, !303
        v1202 = get_local __ptr slice, __anon_185, !303
        mem_copy_bytes v1202, v1196, 16
        v1203 = get_local __ptr {  }, __tmp_arg105
        mem_copy_val v1203, v1193
        v1204 = get_local __ptr slice, __tmp_arg106
        mem_copy_val v1204, v1202
        v1205 = call print_str_1(v1203, v1204)
        v1206 = get_local __ptr u256, arg_54
        v1207 = get_local __ptr {  }, f_53
        v1208 = get_local __ptr u256, __tmp_arg312
        mem_copy_val v1208, v1206
        v1209 = call fmt_45(v1208, v1207)
        v1210 = get_local __ptr {  }, f_53, !303
        v1211 = get_local __ptr string<1>, __anon_186
        mem_copy_val v1211, v1187
        v1212 = cast_ptr v1211 to ptr, !303
        v1213 = get_local __ptr { ptr, u64 }, __anon_187, !303
        v1214 = const u64 0
        v1215 = get_elem_ptr v1213, __ptr ptr, v1214
        store v1212 to v1215, !303
        v1216 = const u64 1
        v1217 = get_elem_ptr v1213, __ptr u64, v1216
        v1218 = const u64 1
        store v1218 to v1217, !303
        v1219 = get_local __ptr slice, __anon_188, !303
        mem_copy_bytes v1219, v1213, 16
        v1220 = get_local __ptr {  }, __tmp_arg107
        mem_copy_val v1220, v1210
        v1221 = get_local __ptr slice, __tmp_arg108
        mem_copy_val v1221, v1219
        v1222 = call print_str_1(v1220, v1221)
        v1223 = get_local __ptr {  }, f_53, !303
        v1224 = get_local __ptr {  }, self_26, !303
        mem_copy_val v1224, v1223
        v1225 = get_global __ptr u64, std::debug::STDERR, !304
        v1226 = get_local __ptr u64, fd_25, !305
        mem_copy_val v1226, v1225
        v1227 = get_local __ptr u64, fd_25, !306
        v1228 = load v1227, !307
        v1229 = asm(id: v57, fd: v1228) -> (), !308 {
            ecal   id fd zero zero, !103
        }
        v1230 = get_local __ptr u256, __const58
        v1231 = get_local __ptr u256, arg_54
        v1232 = get_local __ptr u256, ___________________________, !309
        mem_copy_val v1232, v1231
        v1233 = get_local __ptr u256, __tmp_block_arg0
        mem_copy_val v1233, v1230
        v1234 = get_local __ptr string<34>, __const59
        v1235 = get_local __ptr string<1>, __const60
        v1236 = get_local __ptr u256, arg_56
        mem_copy_val v1236, v1233
        v1237 = get_local __ptr {  }, __anon_189, !310
        v1238 = get_local __ptr {  }, f_55
        mem_copy_val v1238, v1237
        v1239 = get_local __ptr {  }, f_55, !310
        v1240 = get_local __ptr string<34>, __anon_190
        mem_copy_val v1240, v1234
        v1241 = cast_ptr v1240 to ptr, !310
        v1242 = get_local __ptr { ptr, u64 }, __anon_191, !310
        v1243 = const u64 0
        v1244 = get_elem_ptr v1242, __ptr ptr, v1243
        store v1241 to v1244, !310
        v1245 = const u64 1
        v1246 = get_elem_ptr v1242, __ptr u64, v1245
        v1247 = const u64 34
        store v1247 to v1246, !310
        v1248 = get_local __ptr slice, __anon_192, !310
        mem_copy_bytes v1248, v1242, 16
        v1249 = get_local __ptr {  }, __tmp_arg109
        mem_copy_val v1249, v1239
        v1250 = get_local __ptr slice, __tmp_arg110
        mem_copy_val v1250, v1248
        v1251 = call print_str_1(v1249, v1250)
        v1252 = get_local __ptr u256, arg_56
        v1253 = get_local __ptr {  }, f_55
        v1254 = get_local __ptr u256, __tmp_arg313
        mem_copy_val v1254, v1252
        v1255 = call fmt_45(v1254, v1253)
        v1256 = get_local __ptr {  }, f_55, !310
        v1257 = get_local __ptr string<1>, __anon_193
        mem_copy_val v1257, v1235
        v1258 = cast_ptr v1257 to ptr, !310
        v1259 = get_local __ptr { ptr, u64 }, __anon_194, !310
        v1260 = const u64 0
        v1261 = get_elem_ptr v1259, __ptr ptr, v1260
        store v1258 to v1261, !310
        v1262 = const u64 1
        v1263 = get_elem_ptr v1259, __ptr u64, v1262
        v1264 = const u64 1
        store v1264 to v1263, !310
        v1265 = get_local __ptr slice, __anon_195, !310
        mem_copy_bytes v1265, v1259, 16
        v1266 = get_local __ptr {  }, __tmp_arg111
        mem_copy_val v1266, v1256
        v1267 = get_local __ptr slice, __tmp_arg112
        mem_copy_val v1267, v1265
        v1268 = call print_str_1(v1266, v1267)
        v1269 = get_local __ptr {  }, f_55, !310
        v1270 = get_local __ptr {  }, self_27, !310
        mem_copy_val v1270, v1269
        v1271 = get_global __ptr u64, std::debug::STDERR, !311
        v1272 = get_local __ptr u64, fd_26, !312
        mem_copy_val v1272, v1271
        v1273 = get_local __ptr u64, fd_26, !313
        v1274 = load v1273, !314
        v1275 = asm(id: v57, fd: v1274) -> (), !315 {
            ecal   id fd zero zero, !103
        }
        v1276 = get_local __ptr b256, __const61
        v1277 = get_local __ptr u256, arg_56
        v1278 = get_local __ptr u256, ____________________________, !316
        mem_copy_val v1278, v1277
        v1279 = get_local __ptr b256, __tmp_block_arg1
        mem_copy_val v1279, v1276
        v1280 = get_local __ptr string<34>, __const62
        v1281 = get_local __ptr string<1>, __const63
        v1282 = get_local __ptr b256, arg_58
        mem_copy_val v1282, v1279
        v1283 = get_local __ptr {  }, __anon_196, !317
        v1284 = get_local __ptr {  }, f_57
        mem_copy_val v1284, v1283
        v1285 = get_local __ptr {  }, f_57, !317
        v1286 = get_local __ptr string<34>, __anon_197
        mem_copy_val v1286, v1280
        v1287 = cast_ptr v1286 to ptr, !317
        v1288 = get_local __ptr { ptr, u64 }, __anon_198, !317
        v1289 = const u64 0
        v1290 = get_elem_ptr v1288, __ptr ptr, v1289
        store v1287 to v1290, !317
        v1291 = const u64 1
        v1292 = get_elem_ptr v1288, __ptr u64, v1291
        v1293 = const u64 34
        store v1293 to v1292, !317
        v1294 = get_local __ptr slice, __anon_199, !317
        mem_copy_bytes v1294, v1288, 16
        v1295 = get_local __ptr {  }, __tmp_arg113
        mem_copy_val v1295, v1285
        v1296 = get_local __ptr slice, __tmp_arg114
        mem_copy_val v1296, v1294
        v1297 = call print_str_1(v1295, v1296)
        v1298 = get_local __ptr b256, arg_58
        v1299 = get_local __ptr {  }, f_57
        v1300 = get_local __ptr b256, __tmp_arg314
        mem_copy_val v1300, v1298
        v1301 = call fmt_52(v1300, v1299)
        v1302 = get_local __ptr {  }, f_57, !317
        v1303 = get_local __ptr string<1>, __anon_200
        mem_copy_val v1303, v1281
        v1304 = cast_ptr v1303 to ptr, !317
        v1305 = get_local __ptr { ptr, u64 }, __anon_201, !317
        v1306 = const u64 0
        v1307 = get_elem_ptr v1305, __ptr ptr, v1306
        store v1304 to v1307, !317
        v1308 = const u64 1
        v1309 = get_elem_ptr v1305, __ptr u64, v1308
        v1310 = const u64 1
        store v1310 to v1309, !317
        v1311 = get_local __ptr slice, __anon_202, !317
        mem_copy_bytes v1311, v1305, 16
        v1312 = get_local __ptr {  }, __tmp_arg115
        mem_copy_val v1312, v1302
        v1313 = get_local __ptr slice, __tmp_arg116
        mem_copy_val v1313, v1311
        v1314 = call print_str_1(v1312, v1313)
        v1315 = get_local __ptr {  }, f_57, !317
        v1316 = get_local __ptr {  }, self_28, !317
        mem_copy_val v1316, v1315
        v1317 = get_global __ptr u64, std::debug::STDERR, !318
        v1318 = get_local __ptr u64, fd_27, !319
        mem_copy_val v1318, v1317
        v1319 = get_local __ptr u64, fd_27, !320
        v1320 = load v1319, !321
        v1321 = asm(id: v57, fd: v1320) -> (), !322 {
            ecal   id fd zero zero, !103
        }
        v1322 = get_local __ptr b256, __const64
        v1323 = get_local __ptr b256, arg_58
        v1324 = get_local __ptr b256, _____________________________, !323
        mem_copy_val v1324, v1323
        v1325 = get_local __ptr b256, __tmp_block_arg2
        mem_copy_val v1325, v1322
        v1326 = get_local __ptr string<34>, __const65
        v1327 = get_local __ptr string<1>, __const66
        v1328 = get_local __ptr b256, arg_60
        mem_copy_val v1328, v1325
        v1329 = get_local __ptr {  }, __anon_203, !324
        v1330 = get_local __ptr {  }, f_59
        mem_copy_val v1330, v1329
        v1331 = get_local __ptr {  }, f_59, !324
        v1332 = get_local __ptr string<34>, __anon_204
        mem_copy_val v1332, v1326
        v1333 = cast_ptr v1332 to ptr, !324
        v1334 = get_local __ptr { ptr, u64 }, __anon_205, !324
        v1335 = const u64 0
        v1336 = get_elem_ptr v1334, __ptr ptr, v1335
        store v1333 to v1336, !324
        v1337 = const u64 1
        v1338 = get_elem_ptr v1334, __ptr u64, v1337
        v1339 = const u64 34
        store v1339 to v1338, !324
        v1340 = get_local __ptr slice, __anon_206, !324
        mem_copy_bytes v1340, v1334, 16
        v1341 = get_local __ptr {  }, __tmp_arg117
        mem_copy_val v1341, v1331
        v1342 = get_local __ptr slice, __tmp_arg118
        mem_copy_val v1342, v1340
        v1343 = call print_str_1(v1341, v1342)
        v1344 = get_local __ptr b256, arg_60
        v1345 = get_local __ptr {  }, f_59
        v1346 = get_local __ptr b256, __tmp_arg315
        mem_copy_val v1346, v1344
        v1347 = call fmt_52(v1346, v1345)
        v1348 = get_local __ptr {  }, f_59, !324
        v1349 = get_local __ptr string<1>, __anon_207
        mem_copy_val v1349, v1327
        v1350 = cast_ptr v1349 to ptr, !324
        v1351 = get_local __ptr { ptr, u64 }, __anon_208, !324
        v1352 = const u64 0
        v1353 = get_elem_ptr v1351, __ptr ptr, v1352
        store v1350 to v1353, !324
        v1354 = const u64 1
        v1355 = get_elem_ptr v1351, __ptr u64, v1354
        v1356 = const u64 1
        store v1356 to v1355, !324
        v1357 = get_local __ptr slice, __anon_209, !324
        mem_copy_bytes v1357, v1351, 16
        v1358 = get_local __ptr {  }, __tmp_arg119
        mem_copy_val v1358, v1348
        v1359 = get_local __ptr slice, __tmp_arg120
        mem_copy_val v1359, v1357
        v1360 = call print_str_1(v1358, v1359)
        v1361 = get_local __ptr {  }, f_59, !324
        v1362 = get_local __ptr {  }, self_29, !324
        mem_copy_val v1362, v1361
        v1363 = get_global __ptr u64, std::debug::STDERR, !325
        v1364 = get_local __ptr u64, fd_28, !326
        mem_copy_val v1364, v1363
        v1365 = get_local __ptr u64, fd_28, !327
        v1366 = load v1365, !328
        v1367 = asm(id: v57, fd: v1366) -> (), !329 {
            ecal   id fd zero zero, !103
        }
        v1368 = get_local __ptr string<1>, __const67
        v1369 = get_local __ptr string<26>, __const68
        v1370 = get_local __ptr string<1>, __const69
        v1371 = get_local __ptr b256, arg_60
        v1372 = get_local __ptr b256, ______________________________, !330
        mem_copy_val v1372, v1371
        v1373 = get_local __ptr string<1>, __anon_210
        mem_copy_val v1373, v1368
        v1374 = cast_ptr v1373 to ptr, !331
        v1375 = get_local __ptr { ptr, u64 }, __anon_211, !331
        v1376 = const u64 0
        v1377 = get_elem_ptr v1375, __ptr ptr, v1376
        store v1374 to v1377, !331
        v1378 = const u64 1
        v1379 = get_elem_ptr v1375, __ptr u64, v1378
        v1380 = const u64 1
        store v1380 to v1379, !331
        v1381 = get_local __ptr slice, __anon_212, !331
        mem_copy_bytes v1381, v1375, 16
        v1382 = get_local __ptr slice, arg_62
        mem_copy_val v1382, v1381
        v1383 = get_local __ptr {  }, __anon_213, !332
        v1384 = get_local __ptr {  }, f_61
        mem_copy_val v1384, v1383
        v1385 = get_local __ptr {  }, f_61, !332
        v1386 = get_local __ptr string<26>, __anon_214
        mem_copy_val v1386, v1369
        v1387 = cast_ptr v1386 to ptr, !332
        v1388 = get_local __ptr { ptr, u64 }, __anon_215, !332
        v1389 = const u64 0
        v1390 = get_elem_ptr v1388, __ptr ptr, v1389
        store v1387 to v1390, !332
        v1391 = const u64 1
        v1392 = get_elem_ptr v1388, __ptr u64, v1391
        v1393 = const u64 26
        store v1393 to v1392, !332
        v1394 = get_local __ptr slice, __anon_216, !332
        mem_copy_bytes v1394, v1388, 16
        v1395 = get_local __ptr {  }, __tmp_arg121
        mem_copy_val v1395, v1385
        v1396 = get_local __ptr slice, __tmp_arg122
        mem_copy_val v1396, v1394
        v1397 = call print_str_1(v1395, v1396)
        v1398 = get_local __ptr slice, arg_62
        v1399 = get_local __ptr {  }, f_61
        v1400 = get_local __ptr slice, __tmp_arg317
        mem_copy_val v1400, v1398
        v1401 = call fmt_57(v1400, v1399)
        v1402 = get_local __ptr {  }, f_61, !332
        v1403 = get_local __ptr string<1>, __anon_217
        mem_copy_val v1403, v1370
        v1404 = cast_ptr v1403 to ptr, !332
        v1405 = get_local __ptr { ptr, u64 }, __anon_218, !332
        v1406 = const u64 0
        v1407 = get_elem_ptr v1405, __ptr ptr, v1406
        store v1404 to v1407, !332
        v1408 = const u64 1
        v1409 = get_elem_ptr v1405, __ptr u64, v1408
        v1410 = const u64 1
        store v1410 to v1409, !332
        v1411 = get_local __ptr slice, __anon_219, !332
        mem_copy_bytes v1411, v1405, 16
        v1412 = get_local __ptr {  }, __tmp_arg123
        mem_copy_val v1412, v1402
        v1413 = get_local __ptr slice, __tmp_arg124
        mem_copy_val v1413, v1411
        v1414 = call print_str_1(v1412, v1413)
        v1415 = get_local __ptr {  }, f_61, !332
        v1416 = get_local __ptr {  }, self_30, !332
        mem_copy_val v1416, v1415
        v1417 = get_global __ptr u64, std::debug::STDERR, !333
        v1418 = get_local __ptr u64, fd_29, !334
        mem_copy_val v1418, v1417
        v1419 = get_local __ptr u64, fd_29, !335
        v1420 = load v1419, !336
        v1421 = asm(id: v57, fd: v1420) -> (), !337 {
            ecal   id fd zero zero, !103
        }
        v1422 = get_local __ptr string<1>, __const70
        v1423 = get_local __ptr string<42>, __const71
        v1424 = get_local __ptr slice, arg_62
        v1425 = get_local __ptr slice, _______________________________, !338
        mem_copy_val v1425, v1424
        v1426 = get_local __ptr string<1>, __anon_220
        mem_copy_val v1426, v1422
        v1427 = get_local __ptr string<1>, arg_64
        mem_copy_val v1427, v1426
        v1428 = get_local __ptr {  }, __anon_221, !339
        v1429 = get_local __ptr {  }, f_63
        mem_copy_val v1429, v1428
        v1430 = get_local __ptr {  }, f_63, !339
        v1431 = get_local __ptr string<42>, __anon_222
        mem_copy_val v1431, v1423
        v1432 = cast_ptr v1431 to ptr, !339
        v1433 = get_local __ptr { ptr, u64 }, __anon_223, !339
        v1434 = const u64 0
        v1435 = get_elem_ptr v1433, __ptr ptr, v1434
        store v1432 to v1435, !339
        v1436 = const u64 1
        v1437 = get_elem_ptr v1433, __ptr u64, v1436
        v1438 = const u64 42
        store v1438 to v1437, !339
        v1439 = get_local __ptr slice, __anon_224, !339
        mem_copy_bytes v1439, v1433, 16
        v1440 = get_local __ptr {  }, __tmp_arg125
        mem_copy_val v1440, v1430
        v1441 = get_local __ptr slice, __tmp_arg126
        mem_copy_val v1441, v1439
        v1442 = call print_str_1(v1440, v1441)
        v1443 = get_local __ptr string<1>, arg_64
        v1444 = get_local __ptr {  }, f_63
        v1445 = get_local __ptr string<1>, self_31
        mem_copy_val v1445, v1443
        v1446 = get_local __ptr __ptr {  }, f_0
        store v1444 to v1446
        v1447 = get_local __ptr string<1>, self_31, !340
        v1448 = get_local __ptr string<1>, s_, !343
        mem_copy_val v1448, v1447
        v1449 = get_local __ptr u64, str_size, !346
        v1450 = const u64 1
        store v1450 to v1449, !347
        v1451 = get_local __ptr string<1>, s_, !349
        v1452 = cast_ptr v1451 to ptr, !351
        v1453 = get_local __ptr ptr, src, !353
        store v1452 to v1453, !354
        v1454 = get_local __ptr ptr, src, !356
        v1455 = load v1454, !343
        v1456 = const u64 8
        v1457 = asm(size: v1456, dest, src: v1455) -> ptr dest, !358 {
            aloc   size, !359
            move   dest hp, !360
            mcp    dest src size, !361
        }
        v1458 = get_local __ptr ptr, ptr, !363
        store v1457 to v1458, !364
        v1459 = get_local __ptr ptr, ptr, !366
        v1460 = get_local __ptr u64, str_size, !368
        v1461 = get_local __ptr { ptr, u64 }, __anon_01, !370
        v1462 = const u64 0
        v1463 = get_elem_ptr v1461, __ptr ptr, v1462, !371
        mem_copy_val v1463, v1459
        v1464 = const u64 1
        v1465 = get_elem_ptr v1461, __ptr u64, v1464, !372
        mem_copy_val v1465, v1460
        v1466 = asm(s: v1461) -> __ptr slice s {
        }
        v1467 = get_local __ptr slice, __aggr_memcpy_0
        mem_copy_val v1467, v1466
        v1468 = get_local __ptr slice, __tmp_block_arg3
        mem_copy_val v1468, v1467
        v1469 = get_local __ptr __ptr {  }, f_0, !373
        v1470 = load v1469
        v1471 = get_local __ptr slice, __tmp_arg318
        mem_copy_val v1471, v1468
        v1472 = call fmt_57(v1471, v1470)
        v1473 = get_local __ptr string<1>, __const72
        v1474 = get_local __ptr {  }, f_63, !339
        v1475 = get_local __ptr string<1>, __anon_225
        mem_copy_val v1475, v1473
        v1476 = cast_ptr v1475 to ptr, !339
        v1477 = get_local __ptr { ptr, u64 }, __anon_226, !339
        v1478 = const u64 0
        v1479 = get_elem_ptr v1477, __ptr ptr, v1478
        store v1476 to v1479, !339
        v1480 = const u64 1
        v1481 = get_elem_ptr v1477, __ptr u64, v1480
        v1482 = const u64 1
        store v1482 to v1481, !339
        v1483 = get_local __ptr slice, __anon_227, !339
        mem_copy_bytes v1483, v1477, 16
        v1484 = get_local __ptr {  }, __tmp_arg127
        mem_copy_val v1484, v1474
        v1485 = get_local __ptr slice, __tmp_arg128
        mem_copy_val v1485, v1483
        v1486 = call print_str_1(v1484, v1485)
        v1487 = get_local __ptr {  }, f_63, !339
        v1488 = get_local __ptr {  }, self_32, !339
        mem_copy_val v1488, v1487
        v1489 = get_global __ptr u64, std::debug::STDERR, !374
        v1490 = get_local __ptr u64, fd_30, !375
        mem_copy_val v1490, v1489
        v1491 = get_local __ptr u64, fd_30, !376
        v1492 = load v1491, !377
        v1493 = asm(id: v57, fd: v1492) -> (), !378 {
            ecal   id fd zero zero, !103
        }
        v1494 = get_local __ptr string<1>, __const73
        v1495 = get_local __ptr string<33>, __const74
        v1496 = get_local __ptr string<0>, __const75
        v1497 = get_local __ptr string<1>, arg_64
        v1498 = get_local __ptr string<1>, ________________________________, !379
        mem_copy_val v1498, v1497
        v1499 = get_local __ptr string<1>, __anon_228
        mem_copy_val v1499, v1494
        v1500 = cast_ptr v1499 to ptr, !380
        v1501 = get_local __ptr { ptr, u64 }, __anon_229, !380
        v1502 = const u64 0
        v1503 = get_elem_ptr v1501, __ptr ptr, v1502
        store v1500 to v1503, !380
        v1504 = const u64 1
        v1505 = get_elem_ptr v1501, __ptr u64, v1504
        v1506 = const u64 1
        store v1506 to v1505, !380
        v1507 = get_local __ptr slice, __anon_230, !380
        mem_copy_bytes v1507, v1501, 16
        v1508 = get_local __ptr { slice, u8 }, __anon_231, !381
        v1509 = const u64 0
        v1510 = get_elem_ptr v1508, __ptr slice, v1509, !381
        mem_copy_val v1510, v1507
        v1511 = const u64 1
        v1512 = get_elem_ptr v1508, __ptr u8, v1511, !381
        v1513 = const u8 0, !382
        store v1513 to v1512, !381
        v1514 = get_local __ptr { slice, u8 }, arg_66
        mem_copy_val v1514, v1508
        v1515 = get_local __ptr {  }, __anon_232, !383
        v1516 = get_local __ptr {  }, f_65
        mem_copy_val v1516, v1515
        v1517 = get_local __ptr {  }, f_65, !383
        v1518 = get_local __ptr string<33>, __anon_233
        mem_copy_val v1518, v1495
        v1519 = cast_ptr v1518 to ptr, !383
        v1520 = get_local __ptr { ptr, u64 }, __anon_234, !383
        v1521 = const u64 0
        v1522 = get_elem_ptr v1520, __ptr ptr, v1521
        store v1519 to v1522, !383
        v1523 = const u64 1
        v1524 = get_elem_ptr v1520, __ptr u64, v1523
        v1525 = const u64 33
        store v1525 to v1524, !383
        v1526 = get_local __ptr slice, __anon_235, !383
        mem_copy_bytes v1526, v1520, 16
        v1527 = get_local __ptr {  }, __tmp_arg129
        mem_copy_val v1527, v1517
        v1528 = get_local __ptr slice, __tmp_arg130
        mem_copy_val v1528, v1526
        v1529 = call print_str_1(v1527, v1528)
        v1530 = get_local __ptr { slice, u8 }, arg_66
        v1531 = get_local __ptr {  }, f_65
        v1532 = get_local __ptr { slice, u8 }, self_33
        mem_copy_val v1532, v1530
        v1533 = get_local __ptr __ptr {  }, f_2
        store v1531 to v1533
        v1534 = get_local __ptr __ptr {  }, f_2, !384
        v1535 = load v1534
        v1536 = get_local __ptr string<0>, __anon_02
        mem_copy_val v1536, v1496
        v1537 = cast_ptr v1536 to ptr, !385
        v1538 = get_local __ptr { ptr, u64 }, __anon_1101, !385
        v1539 = const u64 0
        v1540 = get_elem_ptr v1538, __ptr ptr, v1539
        store v1537 to v1540, !385
        v1541 = const u64 1
        v1542 = get_elem_ptr v1538, __ptr u64, v1541
        v1543 = const u64 0
        store v1543 to v1542, !385
        v1544 = get_local __ptr slice, __anon_2101, !385
        mem_copy_bytes v1544, v1538, 16
        v1545 = get_local __ptr {  }, __tmp_arg322
        mem_copy_val v1545, v1535
        v1546 = get_local __ptr slice, __tmp_arg323
        mem_copy_val v1546, v1544
        v1547 = get_local __ptr { {  }, bool }, __ret_val
        v1548 = call debug_tuple_62(v1545, v1546, v1547)
        v1549 = get_local __ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v1549, v1548
        v1550 = get_local __ptr { {  }, bool }, f__, !386
        mem_copy_val v1550, v1549
        v1551 = get_local __ptr { {  }, bool }, f__, !387
        v1552 = get_local __ptr { slice, u8 }, self_33, !388
        v1553 = const u64 0
        v1554 = get_elem_ptr v1552, __ptr slice, v1553, !389
        v1555 = get_local __ptr __ptr { {  }, bool }, self_00, !392
        store v1551 to v1555, !392
        v1556 = get_local __ptr slice, value_, !392
        mem_copy_val v1556, v1554
        v1557 = get_local __ptr __ptr { {  }, bool }, self_00, !394
        v1558 = load v1557, !392
        v1559 = const u64 1
        v1560 = get_elem_ptr v1558, __ptr bool, v1559, !396
        v1561 = load v1560, !392
        cbr v1561, fmt_61_field_64_block0(), fmt_61_field_64_block2(), !398

        fmt_61_field_64_block0():
        v1562 = get_local __ptr string<2>, __const76
        v1563 = get_local __ptr __ptr { {  }, bool }, self_00, !400
        v1564 = load v1563, !392
        v1565 = const u64 0
        v1566 = get_elem_ptr v1564, __ptr {  }, v1565, !402
        v1567 = get_local __ptr string<2>, __anon_000, !392
        mem_copy_val v1567, v1562
        v1568 = cast_ptr v1567 to ptr, !404
        v1569 = get_local __ptr { ptr, u64 }, __anon_1010, !405
        v1570 = const u64 0
        v1571 = get_elem_ptr v1569, __ptr ptr, v1570, !392
        store v1568 to v1571, !406
        v1572 = const u64 1
        v1573 = get_elem_ptr v1569, __ptr u64, v1572, !392
        v1574 = const u64 2
        store v1574 to v1573, !407
        v1575 = get_local __ptr slice, __anon_2010, !408
        mem_copy_bytes v1575, v1569, 16, !392
        v1576 = get_local __ptr {  }, __tmp_arg131
        mem_copy_val v1576, v1566
        v1577 = get_local __ptr slice, __tmp_arg132
        mem_copy_val v1577, v1575
        v1578 = call print_str_1(v1576, v1577)
        br fmt_61_field_64_block2(), !392

        fmt_61_field_64_block2():
        v1579 = get_local __ptr slice, value_, !410
        v1580 = get_local __ptr __ptr { {  }, bool }, self_00, !412
        v1581 = load v1580, !392
        v1582 = const u64 0
        v1583 = get_elem_ptr v1581, __ptr {  }, v1582, !413
        v1584 = get_local __ptr slice, __tmp_arg319
        mem_copy_val v1584, v1579
        v1585 = call fmt_57(v1584, v1583)
        v1586 = get_local __ptr __ptr { {  }, bool }, self_00, !415
        v1587 = load v1586, !392
        v1588 = const u64 1
        v1589 = get_elem_ptr v1587, __ptr bool, v1588, !416
        v1590 = const bool true, !417
        store v1590 to v1589, !418
        v1591 = get_local __ptr __ptr { {  }, bool }, self_00, !420
        v1592 = load v1591, !392
        v1593 = get_local __ptr { {  }, bool }, __tmp_block_arg4
        mem_copy_val v1593, v1592
        v1594 = get_local __ptr { {  }, bool }, f___, !421
        mem_copy_val v1594, v1593
        v1595 = get_local __ptr { {  }, bool }, f___, !422
        v1596 = get_local __ptr { slice, u8 }, self_33, !423
        v1597 = const u64 1
        v1598 = get_elem_ptr v1596, __ptr u8, v1597, !424
        v1599 = load v1598
        v1600 = get_local __ptr { {  }, bool }, __ret_val5
        v1601 = call field_65(v1595, v1599, v1600)
        v1602 = get_local __ptr { {  }, bool }, __aggr_memcpy_01
        mem_copy_val v1602, v1601
        v1603 = get_local __ptr { {  }, bool }, f____, !425
        mem_copy_val v1603, v1602
        v1604 = get_local __ptr { {  }, bool }, f____, !426
        v1605 = call finish_66(v1604), !429
        v1606 = get_local __ptr string<1>, __const77
        v1607 = get_local __ptr {  }, f_65, !383
        v1608 = get_local __ptr string<1>, __anon_236
        mem_copy_val v1608, v1606
        v1609 = cast_ptr v1608 to ptr, !383
        v1610 = get_local __ptr { ptr, u64 }, __anon_237, !383
        v1611 = const u64 0
        v1612 = get_elem_ptr v1610, __ptr ptr, v1611
        store v1609 to v1612, !383
        v1613 = const u64 1
        v1614 = get_elem_ptr v1610, __ptr u64, v1613
        v1615 = const u64 1
        store v1615 to v1614, !383
        v1616 = get_local __ptr slice, __anon_238, !383
        mem_copy_bytes v1616, v1610, 16
        v1617 = get_local __ptr {  }, __tmp_arg133
        mem_copy_val v1617, v1607
        v1618 = get_local __ptr slice, __tmp_arg134
        mem_copy_val v1618, v1616
        v1619 = call print_str_1(v1617, v1618)
        v1620 = get_local __ptr {  }, f_65, !383
        v1621 = get_local __ptr {  }, self_34, !383
        mem_copy_val v1621, v1620
        v1622 = get_global __ptr u64, std::debug::STDERR, !430
        v1623 = get_local __ptr u64, fd_31, !431
        mem_copy_val v1623, v1622
        v1624 = get_local __ptr u64, fd_31, !432
        v1625 = load v1624, !433
        v1626 = asm(id: v57, fd: v1625) -> (), !434 {
            ecal   id fd zero zero, !103
        }
        v1627 = get_local __ptr string<33>, __const78
        v1628 = get_local __ptr { slice, u8 }, arg_66
        v1629 = get_local __ptr { slice, u8 }, _________________________________, !435
        mem_copy_val v1629, v1628
        v1630 = get_local __ptr [u8; 2], __anon_239, !436
        v1631 = const u64 0
        v1632 = get_elem_ptr v1630, __ptr u8, v1631
        v1633 = const u8 0, !437
        store v1633 to v1632, !436
        v1634 = const u64 1
        v1635 = get_elem_ptr v1630, __ptr u8, v1634
        v1636 = const u8 1, !438
        store v1636 to v1635, !436
        v1637 = get_local __ptr [u8; 2], arg_68
        mem_copy_val v1637, v1630
        v1638 = get_local __ptr {  }, __anon_240, !439
        v1639 = get_local __ptr {  }, f_67
        mem_copy_val v1639, v1638
        v1640 = get_local __ptr {  }, f_67, !439
        v1641 = get_local __ptr string<33>, __anon_241
        mem_copy_val v1641, v1627
        v1642 = cast_ptr v1641 to ptr, !439
        v1643 = get_local __ptr { ptr, u64 }, __anon_242, !439
        v1644 = const u64 0
        v1645 = get_elem_ptr v1643, __ptr ptr, v1644
        store v1642 to v1645, !439
        v1646 = const u64 1
        v1647 = get_elem_ptr v1643, __ptr u64, v1646
        v1648 = const u64 33
        store v1648 to v1647, !439
        v1649 = get_local __ptr slice, __anon_243, !439
        mem_copy_bytes v1649, v1643, 16
        v1650 = get_local __ptr {  }, __tmp_arg135
        mem_copy_val v1650, v1640
        v1651 = get_local __ptr slice, __tmp_arg136
        mem_copy_val v1651, v1649
        v1652 = call print_str_1(v1650, v1651)
        v1653 = get_local __ptr [u8; 2], arg_68
        v1654 = get_local __ptr {  }, f_67
        v1655 = get_local __ptr [u8; 2], self_35
        mem_copy_val v1655, v1653
        v1656 = get_local __ptr __ptr {  }, f_4
        store v1654 to v1656
        v1657 = get_local __ptr __ptr {  }, f_4, !440
        v1658 = load v1657
        v1659 = get_local __ptr {  }, __tmp_arg334
        mem_copy_val v1659, v1658
        v1660 = get_local __ptr { {  }, bool }, __ret_val7
        v1661 = call debug_list_68(v1659, v1660)
        v1662 = get_local __ptr { {  }, bool }, __aggr_memcpy_02
        mem_copy_val v1662, v1661
        v1663 = get_local __ptr { {  }, bool }, f__0, !441
        mem_copy_val v1663, v1662
        v1664 = get_local __ptr u64, i, !442
        v1665 = const u64 0, !443
        store v1665 to v1664, !442
        br fmt_67_while()

        fmt_67_while():
        v1666 = get_local __ptr u64, i, !444
        v1667 = get_local __ptr u64, self_01, !447
        mem_copy_val v1667, v1666
        v1668 = get_local __ptr u64, other_, !447
        v1669 = const u64 2, !448
        store v1669 to v1668, !447
        v1670 = get_local __ptr u64, self_01, !451
        v1671 = load v1670, !447
        v1672 = get_local __ptr u64, other_, !453
        v1673 = load v1672, !447
        v1674 = cmp lt v1671 v1673, !447
        cbr v1674, fmt_67_while_body(), fmt_67_end_while()

        fmt_67_while_body():
        v1675 = get_local __ptr { {  }, bool }, f__0, !454
        v1676 = get_local __ptr [u8; 2], self_35, !455
        v1677 = get_local __ptr u64, i, !456
        v1678 = load v1677
        v1679 = get_elem_ptr v1676, __ptr u8, v1678, !457
        v1680 = load v1679
        v1681 = get_local __ptr { {  }, bool }, __ret_val11
        v1682 = call entry_70(v1675, v1680, v1681)
        v1683 = get_local __ptr { {  }, bool }, __aggr_memcpy_03
        mem_copy_val v1683, v1682
        v1684 = get_local __ptr { {  }, bool }, f__0, !458
        mem_copy_val v1684, v1683
        v1685 = get_local __ptr u64, i, !459
        v1686 = get_local __ptr u64, self_110, !462
        mem_copy_val v1686, v1685
        v1687 = get_local __ptr u64, other_0, !462
        v1688 = const u64 1, !463
        store v1688 to v1687, !462
        v1689 = get_local __ptr u64, self_110, !465
        v1690 = load v1689, !462
        v1691 = get_local __ptr u64, other_0, !467
        v1692 = load v1691, !462
        v1693 = add v1690, v1692, !462
        v1694 = get_local __ptr u64, i, !460
        store v1693 to v1694, !460
        br fmt_67_while()

        fmt_67_end_while():
        v1695 = get_local __ptr { {  }, bool }, f__0, !468
        v1696 = call finish_72(v1695), !471
        v1697 = get_local __ptr string<1>, __const79
        v1698 = get_local __ptr {  }, f_67, !439
        v1699 = get_local __ptr string<1>, __anon_244
        mem_copy_val v1699, v1697
        v1700 = cast_ptr v1699 to ptr, !439
        v1701 = get_local __ptr { ptr, u64 }, __anon_245, !439
        v1702 = const u64 0
        v1703 = get_elem_ptr v1701, __ptr ptr, v1702
        store v1700 to v1703, !439
        v1704 = const u64 1
        v1705 = get_elem_ptr v1701, __ptr u64, v1704
        v1706 = const u64 1
        store v1706 to v1705, !439
        v1707 = get_local __ptr slice, __anon_246, !439
        mem_copy_bytes v1707, v1701, 16
        v1708 = get_local __ptr {  }, __tmp_arg137
        mem_copy_val v1708, v1698
        v1709 = get_local __ptr slice, __tmp_arg138
        mem_copy_val v1709, v1707
        v1710 = call print_str_1(v1708, v1709)
        v1711 = get_local __ptr {  }, f_67, !439
        v1712 = get_local __ptr {  }, self_36, !439
        mem_copy_val v1712, v1711
        v1713 = get_global __ptr u64, std::debug::STDERR, !472
        v1714 = get_local __ptr u64, fd_32, !473
        mem_copy_val v1714, v1713
        v1715 = get_local __ptr u64, fd_32, !474
        v1716 = load v1715, !475
        v1717 = asm(id: v57, fd: v1716) -> (), !476 {
            ecal   id fd zero zero, !103
        }
        v1718 = get_local __ptr string<49>, __const80
        v1719 = get_local __ptr [u8; 2], arg_68
        v1720 = get_local __ptr [u8; 2], __________________________________, !477
        mem_copy_val v1720, v1719
        v1721 = get_local __ptr [u8; 2], __anon_247, !478
        v1722 = const u64 0
        v1723 = get_elem_ptr v1721, __ptr u8, v1722
        v1724 = const u8 0, !479
        store v1724 to v1723, !478
        v1725 = const u64 1
        v1726 = get_elem_ptr v1721, __ptr u8, v1725
        v1727 = const u8 1, !480
        store v1727 to v1726, !478
        v1728 = const u64 0, !481
        v1729 = const u64 1
        v1730 = asm(idx: v1728, elem_ir_type_size: v1729, ptr: v1721, offset_temp, ptr_out) -> __ptr u8 ptr_out {
            mul    offset_temp idx elem_ir_type_size
            add    ptr_out ptr offset_temp
        }
        v1731 = const u64 2, !482
        v1732 = sub v1731, v1728
        v1733 = get_local __ptr { __ptr u8, u64 }, __anon_248
        v1734 = const u64 0
        v1735 = get_elem_ptr v1733, __ptr __ptr u8, v1734
        store v1730 to v1735
        v1736 = const u64 1
        v1737 = get_elem_ptr v1733, __ptr u64, v1736
        store v1732 to v1737
        v1738 = asm(s: v1733) -> __ptr __slice[u8] s {
        }
        v1739 = get_local __ptr __slice[u8], __aggr_memcpy_04
        mem_copy_val v1739, v1738
        v1740 = get_local __ptr __slice[u8], arg_70
        mem_copy_val v1740, v1739
        v1741 = get_local __ptr {  }, __anon_249, !483
        v1742 = get_local __ptr {  }, f_69
        mem_copy_val v1742, v1741
        v1743 = get_local __ptr {  }, f_69, !483
        v1744 = get_local __ptr string<49>, __anon_250
        mem_copy_val v1744, v1718
        v1745 = cast_ptr v1744 to ptr, !483
        v1746 = get_local __ptr { ptr, u64 }, __anon_251, !483
        v1747 = const u64 0
        v1748 = get_elem_ptr v1746, __ptr ptr, v1747
        store v1745 to v1748, !483
        v1749 = const u64 1
        v1750 = get_elem_ptr v1746, __ptr u64, v1749
        v1751 = const u64 49
        store v1751 to v1750, !483
        v1752 = get_local __ptr slice, __anon_252, !483
        mem_copy_bytes v1752, v1746, 16
        v1753 = get_local __ptr {  }, __tmp_arg139
        mem_copy_val v1753, v1743
        v1754 = get_local __ptr slice, __tmp_arg140
        mem_copy_val v1754, v1752
        v1755 = call print_str_1(v1753, v1754)
        v1756 = get_local __ptr __slice[u8], arg_70
        v1757 = get_local __ptr {  }, f_69
        v1758 = get_local __ptr __slice[u8], self_37
        mem_copy_val v1758, v1756
        v1759 = get_local __ptr __ptr {  }, f_6
        store v1757 to v1759
        v1760 = get_local __ptr __ptr {  }, f_6, !484
        v1761 = load v1760
        v1762 = get_local __ptr {  }, __tmp_arg335
        mem_copy_val v1762, v1761
        v1763 = get_local __ptr { {  }, bool }, __ret_val8
        v1764 = call debug_list_68(v1762, v1763)
        v1765 = get_local __ptr { {  }, bool }, __aggr_memcpy_05
        mem_copy_val v1765, v1764
        v1766 = get_local __ptr { {  }, bool }, f__1, !485
        mem_copy_val v1766, v1765
        v1767 = get_local __ptr u64, i0, !486
        v1768 = const u64 0, !487
        store v1768 to v1767, !486
        br fmt_73_while()

        fmt_73_while():
        v1769 = get_local __ptr u64, i0, !488
        v1770 = get_local __ptr __slice[u8], self_37, !489
        v1771 = get_local __ptr __slice[u8], self_02, !492
        mem_copy_val v1771, v1770
        v1772 = get_local __ptr __slice[u8], self_02, !495
        v1773 = asm(s: v1772) -> __ptr { ptr, u64 } s {
        }
        v1774 = get_local __ptr { ptr, u64 }, __aggr_memcpy_06
        mem_copy_val v1774, v1773
        v1775 = get_local __ptr { ptr, u64 }, __tuple_2, !497
        mem_copy_val v1775, v1774
        v1776 = get_local __ptr { ptr, u64 }, __tuple_2, !498
        v1777 = get_local __ptr { ptr, u64 }, __tuple_2_, !499
        mem_copy_val v1777, v1776
        v1778 = get_local __ptr { ptr, u64 }, __tuple_2_, !500
        v1779 = const u64 0
        v1780 = get_elem_ptr v1778, __ptr ptr, v1779, !501
        v1781 = get_local __ptr ptr, _0, !502
        mem_copy_val v1781, v1780
        v1782 = get_local __ptr { ptr, u64 }, __tuple_2_, !503
        v1783 = const u64 1
        v1784 = get_elem_ptr v1782, __ptr u64, v1783, !504
        v1785 = get_local __ptr u64, len, !505
        mem_copy_val v1785, v1784
        v1786 = get_local __ptr u64, len, !507
        v1787 = load v1786, !492
        v1788 = get_local __ptr u64, self_111, !510
        mem_copy_val v1788, v1769
        v1789 = get_local __ptr u64, other_1, !510
        store v1787 to v1789, !510
        v1790 = get_local __ptr u64, self_111, !511
        v1791 = load v1790, !510
        v1792 = get_local __ptr u64, other_1, !512
        v1793 = load v1792, !510
        v1794 = cmp lt v1791 v1793, !510
        cbr v1794, fmt_73_while_body(), fmt_73_end_while()

        fmt_73_while_body():
        v1795 = get_local __ptr __slice[u8], self_37, !513
        v1796 = asm(ptr: v1795, ptr_out) -> __ptr u8 ptr_out {
            lw     ptr_out ptr i0
        }
        v1797 = get_local __ptr u64, i0, !514
        v1798 = load v1797
        v1799 = const u64 1
        v1800 = asm(idx: v1798, elem_ir_type_size: v1799, ptr: v1796, offset_temp, ptr_out) -> __ptr u8 ptr_out {
            mul    offset_temp idx elem_ir_type_size
            add    ptr_out ptr offset_temp
        }
        v1801 = get_local __ptr __ptr u8, __anon_03
        store v1800 to v1801
        v1802 = load v1801
        v1803 = get_local __ptr u8, item, !515
        mem_copy_val v1803, v1802
        v1804 = get_local __ptr { {  }, bool }, f__1, !516
        v1805 = get_local __ptr u8, item, !517
        v1806 = load v1805
        v1807 = get_local __ptr { {  }, bool }, __ret_val12
        v1808 = call entry_70(v1804, v1806, v1807)
        v1809 = get_local __ptr { {  }, bool }, __aggr_memcpy_07
        mem_copy_val v1809, v1808
        v1810 = get_local __ptr { {  }, bool }, f__1, !518
        mem_copy_val v1810, v1809
        v1811 = get_local __ptr u64, i0, !519
        v1812 = get_local __ptr u64, self_210, !522
        mem_copy_val v1812, v1811
        v1813 = get_local __ptr u64, other_00, !522
        v1814 = const u64 1, !523
        store v1814 to v1813, !522
        v1815 = get_local __ptr u64, self_210, !524
        v1816 = load v1815, !522
        v1817 = get_local __ptr u64, other_00, !525
        v1818 = load v1817, !522
        v1819 = add v1816, v1818, !522
        v1820 = get_local __ptr u64, i0, !520
        store v1819 to v1820, !520
        br fmt_73_while()

        fmt_73_end_while():
        v1821 = get_local __ptr { {  }, bool }, f__1, !526
        v1822 = call finish_72(v1821), !529
        v1823 = get_local __ptr string<1>, __const81
        v1824 = get_local __ptr {  }, f_69, !483
        v1825 = get_local __ptr string<1>, __anon_253
        mem_copy_val v1825, v1823
        v1826 = cast_ptr v1825 to ptr, !483
        v1827 = get_local __ptr { ptr, u64 }, __anon_254, !483
        v1828 = const u64 0
        v1829 = get_elem_ptr v1827, __ptr ptr, v1828
        store v1826 to v1829, !483
        v1830 = const u64 1
        v1831 = get_elem_ptr v1827, __ptr u64, v1830
        v1832 = const u64 1
        store v1832 to v1831, !483
        v1833 = get_local __ptr slice, __anon_255, !483
        mem_copy_bytes v1833, v1827, 16
        v1834 = get_local __ptr {  }, __tmp_arg141
        mem_copy_val v1834, v1824
        v1835 = get_local __ptr slice, __tmp_arg142
        mem_copy_val v1835, v1833
        v1836 = call print_str_1(v1834, v1835)
        v1837 = get_local __ptr {  }, f_69, !483
        v1838 = get_local __ptr {  }, self_38, !483
        mem_copy_val v1838, v1837
        v1839 = get_global __ptr u64, std::debug::STDERR, !530
        v1840 = get_local __ptr u64, fd_33, !531
        mem_copy_val v1840, v1839
        v1841 = get_local __ptr u64, fd_33, !532
        v1842 = load v1841, !533
        v1843 = asm(id: v57, fd: v1842) -> (), !534 {
            ecal   id fd zero zero, !103
        }
        v1844 = get_local __ptr string<27>, __const82
        v1845 = get_local __ptr string<1>, __const83
        v1846 = get_local __ptr __slice[u8], arg_70
        v1847 = get_local __ptr __slice[u8], ___________________________________, !535
        mem_copy_val v1847, v1846
        v1848 = get_local __ptr {  }, __anon_256, !536
        v1849 = get_local __ptr {  }, arg_72
        mem_copy_val v1849, v1848
        v1850 = get_local __ptr {  }, __anon_257, !537
        v1851 = get_local __ptr {  }, f_71
        mem_copy_val v1851, v1850
        v1852 = get_local __ptr {  }, f_71, !537
        v1853 = get_local __ptr string<27>, __anon_258
        mem_copy_val v1853, v1844
        v1854 = cast_ptr v1853 to ptr, !537
        v1855 = get_local __ptr { ptr, u64 }, __anon_259, !537
        v1856 = const u64 0
        v1857 = get_elem_ptr v1855, __ptr ptr, v1856
        store v1854 to v1857, !537
        v1858 = const u64 1
        v1859 = get_elem_ptr v1855, __ptr u64, v1858
        v1860 = const u64 27
        store v1860 to v1859, !537
        v1861 = get_local __ptr slice, __anon_260, !537
        mem_copy_bytes v1861, v1855, 16
        v1862 = get_local __ptr {  }, __tmp_arg143
        mem_copy_val v1862, v1852
        v1863 = get_local __ptr slice, __tmp_arg144
        mem_copy_val v1863, v1861
        v1864 = call print_str_1(v1862, v1863)
        v1865 = get_local __ptr {  }, arg_72
        v1866 = get_local __ptr {  }, f_71
        v1867 = get_local __ptr {  }, __tmp_arg338
        mem_copy_val v1867, v1865
        v1868 = call fmt_75(v1867, v1866)
        v1869 = get_local __ptr {  }, f_71, !537
        v1870 = get_local __ptr string<1>, __anon_261
        mem_copy_val v1870, v1845
        v1871 = cast_ptr v1870 to ptr, !537
        v1872 = get_local __ptr { ptr, u64 }, __anon_262, !537
        v1873 = const u64 0
        v1874 = get_elem_ptr v1872, __ptr ptr, v1873
        store v1871 to v1874, !537
        v1875 = const u64 1
        v1876 = get_elem_ptr v1872, __ptr u64, v1875
        v1877 = const u64 1
        store v1877 to v1876, !537
        v1878 = get_local __ptr slice, __anon_263, !537
        mem_copy_bytes v1878, v1872, 16
        v1879 = get_local __ptr {  }, __tmp_arg145
        mem_copy_val v1879, v1869
        v1880 = get_local __ptr slice, __tmp_arg146
        mem_copy_val v1880, v1878
        v1881 = call print_str_1(v1879, v1880)
        v1882 = get_local __ptr {  }, f_71, !537
        v1883 = get_local __ptr {  }, self_39, !537
        mem_copy_val v1883, v1882
        v1884 = get_global __ptr u64, std::debug::STDERR, !538
        v1885 = get_local __ptr u64, fd_34, !539
        mem_copy_val v1885, v1884
        v1886 = get_local __ptr u64, fd_34, !540
        v1887 = load v1886, !541
        v1888 = asm(id: v57, fd: v1887) -> (), !542 {
            ecal   id fd zero zero, !103
        }
        v1889 = get_local __ptr string<30>, __const84
        v1890 = get_local __ptr string<1>, __const85
        v1891 = get_local __ptr {  }, arg_72
        v1892 = get_local __ptr {  }, ____________________________________, !543
        mem_copy_val v1892, v1891
        v1893 = get_local __ptr { u64, ( () | {  } ) }, __anon_264, !544
        v1894 = const u64 0
        v1895 = get_elem_ptr v1893, __ptr u64, v1894, !544
        v1896 = const u64 0, !544
        store v1896 to v1895, !544
        v1897 = get_local __ptr { u64, ( () | {  } ) }, arg_74
        mem_copy_val v1897, v1893
        v1898 = get_local __ptr {  }, __anon_265, !545
        v1899 = get_local __ptr {  }, f_73
        mem_copy_val v1899, v1898
        v1900 = get_local __ptr {  }, f_73, !545
        v1901 = get_local __ptr string<30>, __anon_266
        mem_copy_val v1901, v1889
        v1902 = cast_ptr v1901 to ptr, !545
        v1903 = get_local __ptr { ptr, u64 }, __anon_267, !545
        v1904 = const u64 0
        v1905 = get_elem_ptr v1903, __ptr ptr, v1904
        store v1902 to v1905, !545
        v1906 = const u64 1
        v1907 = get_elem_ptr v1903, __ptr u64, v1906
        v1908 = const u64 30
        store v1908 to v1907, !545
        v1909 = get_local __ptr slice, __anon_268, !545
        mem_copy_bytes v1909, v1903, 16
        v1910 = get_local __ptr {  }, __tmp_arg147
        mem_copy_val v1910, v1900
        v1911 = get_local __ptr slice, __tmp_arg148
        mem_copy_val v1911, v1909
        v1912 = call print_str_1(v1910, v1911)
        v1913 = get_local __ptr { u64, ( () | {  } ) }, arg_74
        v1914 = get_local __ptr {  }, f_73
        v1915 = get_local __ptr { u64, ( () | {  } ) }, __tmp_arg347
        mem_copy_val v1915, v1913
        v1916 = call fmt_78(v1915, v1914)
        v1917 = get_local __ptr {  }, f_73, !545
        v1918 = get_local __ptr string<1>, __anon_269
        mem_copy_val v1918, v1890
        v1919 = cast_ptr v1918 to ptr, !545
        v1920 = get_local __ptr { ptr, u64 }, __anon_270, !545
        v1921 = const u64 0
        v1922 = get_elem_ptr v1920, __ptr ptr, v1921
        store v1919 to v1922, !545
        v1923 = const u64 1
        v1924 = get_elem_ptr v1920, __ptr u64, v1923
        v1925 = const u64 1
        store v1925 to v1924, !545
        v1926 = get_local __ptr slice, __anon_271, !545
        mem_copy_bytes v1926, v1920, 16
        v1927 = get_local __ptr {  }, __tmp_arg149
        mem_copy_val v1927, v1917
        v1928 = get_local __ptr slice, __tmp_arg150
        mem_copy_val v1928, v1926
        v1929 = call print_str_1(v1927, v1928)
        v1930 = get_local __ptr {  }, f_73, !545
        v1931 = get_local __ptr {  }, self_40, !545
        mem_copy_val v1931, v1930
        v1932 = get_global __ptr u64, std::debug::STDERR, !546
        v1933 = get_local __ptr u64, fd_35, !547
        mem_copy_val v1933, v1932
        v1934 = get_local __ptr u64, fd_35, !548
        v1935 = load v1934, !549
        v1936 = asm(id: v57, fd: v1935) -> (), !550 {
            ecal   id fd zero zero, !103
        }
        v1937 = get_local __ptr string<36>, __const86
        v1938 = get_local __ptr string<1>, __const87
        v1939 = get_local __ptr { u64, ( () | {  } ) }, arg_74
        v1940 = get_local __ptr { u64, ( () | {  } ) }, _____________________________________, !551
        mem_copy_val v1940, v1939
        v1941 = get_local __ptr { u64, ( () | {  } ) }, __anon_272, !544
        v1942 = const u64 0
        v1943 = get_elem_ptr v1941, __ptr u64, v1942, !544
        v1944 = const u64 1, !544
        store v1944 to v1943, !544
        v1945 = get_local __ptr {  }, __anon_273, !552
        v1946 = const u64 1
        v1947 = const u64 1
        v1948 = get_elem_ptr v1941, __ptr {  }, v1946, v1947, !544
        mem_copy_val v1948, v1945
        v1949 = get_local __ptr { u64, ( () | {  } ) }, arg_76
        mem_copy_val v1949, v1941
        v1950 = get_local __ptr {  }, __anon_274, !553
        v1951 = get_local __ptr {  }, f_75
        mem_copy_val v1951, v1950
        v1952 = get_local __ptr {  }, f_75, !553
        v1953 = get_local __ptr string<36>, __anon_275
        mem_copy_val v1953, v1937
        v1954 = cast_ptr v1953 to ptr, !553
        v1955 = get_local __ptr { ptr, u64 }, __anon_276, !553
        v1956 = const u64 0
        v1957 = get_elem_ptr v1955, __ptr ptr, v1956
        store v1954 to v1957, !553
        v1958 = const u64 1
        v1959 = get_elem_ptr v1955, __ptr u64, v1958
        v1960 = const u64 36
        store v1960 to v1959, !553
        v1961 = get_local __ptr slice, __anon_277, !553
        mem_copy_bytes v1961, v1955, 16
        v1962 = get_local __ptr {  }, __tmp_arg151
        mem_copy_val v1962, v1952
        v1963 = get_local __ptr slice, __tmp_arg152
        mem_copy_val v1963, v1961
        v1964 = call print_str_1(v1962, v1963)
        v1965 = get_local __ptr { u64, ( () | {  } ) }, arg_76
        v1966 = get_local __ptr {  }, f_75
        v1967 = get_local __ptr { u64, ( () | {  } ) }, __tmp_arg348
        mem_copy_val v1967, v1965
        v1968 = call fmt_78(v1967, v1966)
        v1969 = get_local __ptr {  }, f_75, !553
        v1970 = get_local __ptr string<1>, __anon_278
        mem_copy_val v1970, v1938
        v1971 = cast_ptr v1970 to ptr, !553
        v1972 = get_local __ptr { ptr, u64 }, __anon_279, !553
        v1973 = const u64 0
        v1974 = get_elem_ptr v1972, __ptr ptr, v1973
        store v1971 to v1974, !553
        v1975 = const u64 1
        v1976 = get_elem_ptr v1972, __ptr u64, v1975
        v1977 = const u64 1
        store v1977 to v1976, !553
        v1978 = get_local __ptr slice, __anon_280, !553
        mem_copy_bytes v1978, v1972, 16
        v1979 = get_local __ptr {  }, __tmp_arg153
        mem_copy_val v1979, v1969
        v1980 = get_local __ptr slice, __tmp_arg154
        mem_copy_val v1980, v1978
        v1981 = call print_str_1(v1979, v1980)
        v1982 = get_local __ptr {  }, f_75, !553
        v1983 = get_local __ptr {  }, self_41, !553
        mem_copy_val v1983, v1982
        v1984 = get_global __ptr u64, std::debug::STDERR, !554
        v1985 = get_local __ptr u64, fd_36, !555
        mem_copy_val v1985, v1984
        v1986 = get_local __ptr u64, fd_36, !556
        v1987 = load v1986, !557
        v1988 = asm(id: v57, fd: v1987) -> (), !558 {
            ecal   id fd zero zero, !103
        }
        v1989 = get_local __ptr b256, __const88
        v1990 = get_local __ptr { u64, ( () | {  } ) }, arg_76
        v1991 = get_local __ptr { u64, ( () | {  } ) }, ______________________________________, !559
        mem_copy_val v1991, v1990
        v1992 = get_local __ptr b256, __tmp_block_arg5
        mem_copy_val v1992, v1989
        v1993 = get_local __ptr { b256 }, __anon_04, !564
        v1994 = const u64 0
        v1995 = get_elem_ptr v1993, __ptr b256, v1994, !565
        mem_copy_val v1995, v1992
        v1996 = get_local __ptr { b256 }, __tmp_block_arg6
        mem_copy_val v1996, v1993
        v1997 = get_local __ptr string<52>, __const89
        v1998 = get_local __ptr string<1>, __const90
        v1999 = get_local __ptr { b256 }, arg_78
        mem_copy_val v1999, v1996
        v2000 = get_local __ptr {  }, __anon_281, !566
        v2001 = get_local __ptr {  }, f_77
        mem_copy_val v2001, v2000
        v2002 = get_local __ptr {  }, f_77, !566
        v2003 = get_local __ptr string<52>, __anon_282
        mem_copy_val v2003, v1997
        v2004 = cast_ptr v2003 to ptr, !566
        v2005 = get_local __ptr { ptr, u64 }, __anon_283, !566
        v2006 = const u64 0
        v2007 = get_elem_ptr v2005, __ptr ptr, v2006
        store v2004 to v2007, !566
        v2008 = const u64 1
        v2009 = get_elem_ptr v2005, __ptr u64, v2008
        v2010 = const u64 52
        store v2010 to v2009, !566
        v2011 = get_local __ptr slice, __anon_284, !566
        mem_copy_bytes v2011, v2005, 16
        v2012 = get_local __ptr {  }, __tmp_arg155
        mem_copy_val v2012, v2002
        v2013 = get_local __ptr slice, __tmp_arg156
        mem_copy_val v2013, v2011
        v2014 = call print_str_1(v2012, v2013)
        v2015 = get_local __ptr { b256 }, arg_78
        v2016 = get_local __ptr {  }, f_77
        v2017 = get_local __ptr { b256 }, __tmp_arg349
        mem_copy_val v2017, v2015
        v2018 = call fmt_82(v2017, v2016)
        v2019 = get_local __ptr {  }, f_77, !566
        v2020 = get_local __ptr string<1>, __anon_285
        mem_copy_val v2020, v1998
        v2021 = cast_ptr v2020 to ptr, !566
        v2022 = get_local __ptr { ptr, u64 }, __anon_286, !566
        v2023 = const u64 0
        v2024 = get_elem_ptr v2022, __ptr ptr, v2023
        store v2021 to v2024, !566
        v2025 = const u64 1
        v2026 = get_elem_ptr v2022, __ptr u64, v2025
        v2027 = const u64 1
        store v2027 to v2026, !566
        v2028 = get_local __ptr slice, __anon_287, !566
        mem_copy_bytes v2028, v2022, 16
        v2029 = get_local __ptr {  }, __tmp_arg157
        mem_copy_val v2029, v2019
        v2030 = get_local __ptr slice, __tmp_arg158
        mem_copy_val v2030, v2028
        v2031 = call print_str_1(v2029, v2030)
        v2032 = get_local __ptr {  }, f_77, !566
        v2033 = get_local __ptr {  }, self_42, !566
        mem_copy_val v2033, v2032
        v2034 = get_global __ptr u64, std::debug::STDERR, !567
        v2035 = get_local __ptr u64, fd_37, !568
        mem_copy_val v2035, v2034
        v2036 = get_local __ptr u64, fd_37, !569
        v2037 = load v2036, !570
        v2038 = asm(id: v57, fd: v2037) -> (), !571 {
            ecal   id fd zero zero, !103
        }
        v2039 = get_local __ptr b256, __const91
        v2040 = get_local __ptr { b256 }, arg_78
        v2041 = get_local __ptr { b256 }, _______________________________________, !572
        mem_copy_val v2041, v2040
        v2042 = get_local __ptr b256, __tmp_block_arg7
        mem_copy_val v2042, v2039
        v2043 = get_local __ptr { b256 }, __anon_05, !577
        v2044 = const u64 0
        v2045 = get_elem_ptr v2043, __ptr b256, v2044, !578
        mem_copy_val v2045, v2042
        v2046 = get_local __ptr { b256 }, __tmp_block_arg8
        mem_copy_val v2046, v2043
        v2047 = get_local __ptr string<53>, __const92
        v2048 = get_local __ptr string<1>, __const93
        v2049 = get_local __ptr { b256 }, arg_80
        mem_copy_val v2049, v2046
        v2050 = get_local __ptr {  }, __anon_288, !579
        v2051 = get_local __ptr {  }, f_79
        mem_copy_val v2051, v2050
        v2052 = get_local __ptr {  }, f_79, !579
        v2053 = get_local __ptr string<53>, __anon_289
        mem_copy_val v2053, v2047
        v2054 = cast_ptr v2053 to ptr, !579
        v2055 = get_local __ptr { ptr, u64 }, __anon_290, !579
        v2056 = const u64 0
        v2057 = get_elem_ptr v2055, __ptr ptr, v2056
        store v2054 to v2057, !579
        v2058 = const u64 1
        v2059 = get_elem_ptr v2055, __ptr u64, v2058
        v2060 = const u64 53
        store v2060 to v2059, !579
        v2061 = get_local __ptr slice, __anon_291, !579
        mem_copy_bytes v2061, v2055, 16
        v2062 = get_local __ptr {  }, __tmp_arg159
        mem_copy_val v2062, v2052
        v2063 = get_local __ptr slice, __tmp_arg160
        mem_copy_val v2063, v2061
        v2064 = call print_str_1(v2062, v2063)
        v2065 = get_local __ptr { b256 }, arg_80
        v2066 = get_local __ptr {  }, f_79
        v2067 = get_local __ptr { b256 }, __tmp_arg351
        mem_copy_val v2067, v2065
        v2068 = call fmt_85(v2067, v2066)
        v2069 = get_local __ptr {  }, f_79, !579
        v2070 = get_local __ptr string<1>, __anon_292
        mem_copy_val v2070, v2048
        v2071 = cast_ptr v2070 to ptr, !579
        v2072 = get_local __ptr { ptr, u64 }, __anon_293, !579
        v2073 = const u64 0
        v2074 = get_elem_ptr v2072, __ptr ptr, v2073
        store v2071 to v2074, !579
        v2075 = const u64 1
        v2076 = get_elem_ptr v2072, __ptr u64, v2075
        v2077 = const u64 1
        store v2077 to v2076, !579
        v2078 = get_local __ptr slice, __anon_294, !579
        mem_copy_bytes v2078, v2072, 16
        v2079 = get_local __ptr {  }, __tmp_arg161
        mem_copy_val v2079, v2069
        v2080 = get_local __ptr slice, __tmp_arg162
        mem_copy_val v2080, v2078
        v2081 = call print_str_1(v2079, v2080)
        v2082 = get_local __ptr {  }, f_79, !579
        v2083 = get_local __ptr {  }, self_43, !579
        mem_copy_val v2083, v2082
        v2084 = get_global __ptr u64, std::debug::STDERR, !580
        v2085 = get_local __ptr u64, fd_38, !581
        mem_copy_val v2085, v2084
        v2086 = get_local __ptr u64, fd_38, !582
        v2087 = load v2086, !583
        v2088 = asm(id: v57, fd: v2087) -> (), !584 {
            ecal   id fd zero zero, !103
        }
        v2089 = get_local __ptr string<75>, __const94
        v2090 = get_local __ptr { b256 }, arg_80
        v2091 = get_local __ptr { b256 }, ________________________________________, !585
        mem_copy_val v2091, v2090
        v2092 = get_local __ptr { u64 }, __anon_295, !587
        v2093 = const u64 0
        v2094 = get_elem_ptr v2092, __ptr u64, v2093, !587
        v2095 = const u64 0, !587
        store v2095 to v2094, !587
        v2096 = get_local __ptr { u64 }, arg_82
        mem_copy_val v2096, v2092
        v2097 = get_local __ptr {  }, __anon_296, !588
        v2098 = get_local __ptr {  }, f_81
        mem_copy_val v2098, v2097
        v2099 = get_local __ptr {  }, f_81, !588
        v2100 = get_local __ptr string<75>, __anon_297
        mem_copy_val v2100, v2089
        v2101 = cast_ptr v2100 to ptr, !588
        v2102 = get_local __ptr { ptr, u64 }, __anon_298, !588
        v2103 = const u64 0
        v2104 = get_elem_ptr v2102, __ptr ptr, v2103
        store v2101 to v2104, !588
        v2105 = const u64 1
        v2106 = get_elem_ptr v2102, __ptr u64, v2105
        v2107 = const u64 75
        store v2107 to v2106, !588
        v2108 = get_local __ptr slice, __anon_299, !588
        mem_copy_bytes v2108, v2102, 16
        v2109 = get_local __ptr {  }, __tmp_arg163
        mem_copy_val v2109, v2099
        v2110 = get_local __ptr slice, __tmp_arg164
        mem_copy_val v2110, v2108
        v2111 = call print_str_1(v2109, v2110)
        v2112 = get_local __ptr { u64 }, arg_82
        v2113 = get_local __ptr {  }, f_81
        v2114 = get_local __ptr { u64 }, self_44
        mem_copy_val v2114, v2112
        v2115 = get_local __ptr __ptr {  }, _f_
        store v2113 to v2115
        v2116 = get_local __ptr { u64 }, self_44, !590
        v2117 = get_local __ptr { u64 }, __matched_value_1, !591
        mem_copy_val v2117, v2116
        v2118 = get_local __ptr { u64 }, __matched_value_1, !590
        v2119 = const u64 0
        v2120 = get_elem_ptr v2118, __ptr u64, v2119, !590
        v2121 = get_local __ptr u64, self_03, !594
        mem_copy_val v2121, v2120
        v2122 = get_local __ptr u64, other_2, !594
        v2123 = const u64 0, !590
        store v2123 to v2122, !594
        v2124 = get_local __ptr u64, self_03, !596
        v2125 = load v2124, !594
        v2126 = get_local __ptr u64, other_2, !598
        v2127 = load v2126, !594
        v2128 = cmp eq v2125 v2127, !594
        cbr v2128, fmt_86_block0(), fmt_86_block1(), !592

        fmt_86_block0():
        v2129 = get_local __ptr string<30>, __const95
        v2130 = get_local __ptr __ptr {  }, _f_, !599
        v2131 = load v2130
        v2132 = get_local __ptr string<30>, __anon_06
        mem_copy_val v2132, v2129
        v2133 = cast_ptr v2132 to ptr, !600
        v2134 = get_local __ptr { ptr, u64 }, __anon_1102, !600
        v2135 = const u64 0
        v2136 = get_elem_ptr v2134, __ptr ptr, v2135
        store v2133 to v2136, !600
        v2137 = const u64 1
        v2138 = get_elem_ptr v2134, __ptr u64, v2137
        v2139 = const u64 30
        store v2139 to v2138, !600
        v2140 = get_local __ptr slice, __anon_2102, !600
        mem_copy_bytes v2140, v2134, 16
        v2141 = get_local __ptr {  }, __tmp_arg165
        mem_copy_val v2141, v2131
        v2142 = get_local __ptr slice, __tmp_arg166
        mem_copy_val v2142, v2140
        v2143 = call print_str_1(v2141, v2142)
        br fmt_86_block5()

        fmt_86_block1():
        v2144 = get_local __ptr { u64 }, __matched_value_1, !590
        v2145 = const u64 0
        v2146 = get_elem_ptr v2144, __ptr u64, v2145, !590
        v2147 = get_local __ptr u64, self_112, !603
        mem_copy_val v2147, v2146
        v2148 = get_local __ptr u64, other_01, !603
        v2149 = const u64 1, !590
        store v2149 to v2148, !603
        v2150 = get_local __ptr u64, self_112, !604
        v2151 = load v2150, !603
        v2152 = get_local __ptr u64, other_01, !605
        v2153 = load v2152, !603
        v2154 = cmp eq v2151 v2153, !603
        cbr v2154, fmt_86_block2(), fmt_86_block3(), !601

        fmt_86_block2():
        v2155 = get_local __ptr string<16>, __const96
        v2156 = get_local __ptr __ptr {  }, _f_, !606
        v2157 = load v2156
        v2158 = get_local __ptr string<16>, __anon_3100
        mem_copy_val v2158, v2155
        v2159 = cast_ptr v2158 to ptr, !607
        v2160 = get_local __ptr { ptr, u64 }, __anon_441, !607
        v2161 = const u64 0
        v2162 = get_elem_ptr v2160, __ptr ptr, v2161
        store v2159 to v2162, !607
        v2163 = const u64 1
        v2164 = get_elem_ptr v2160, __ptr u64, v2163
        v2165 = const u64 16
        store v2165 to v2164, !607
        v2166 = get_local __ptr slice, __anon_510, !607
        mem_copy_bytes v2166, v2160, 16
        v2167 = get_local __ptr {  }, __tmp_arg167
        mem_copy_val v2167, v2157
        v2168 = get_local __ptr slice, __tmp_arg168
        mem_copy_val v2168, v2166
        v2169 = call print_str_1(v2167, v2168)
        br fmt_86_block5()

        fmt_86_block3():
        v2170 = const u64 14757395258967588866, !591
        revert v2170, !591

        fmt_86_block5():
        v2171 = get_local __ptr string<1>, __const97
        v2172 = get_local __ptr {  }, f_81, !588
        v2173 = get_local __ptr string<1>, __anon_300
        mem_copy_val v2173, v2171
        v2174 = cast_ptr v2173 to ptr, !588
        v2175 = get_local __ptr { ptr, u64 }, __anon_301, !588
        v2176 = const u64 0
        v2177 = get_elem_ptr v2175, __ptr ptr, v2176
        store v2174 to v2177, !588
        v2178 = const u64 1
        v2179 = get_elem_ptr v2175, __ptr u64, v2178
        v2180 = const u64 1
        store v2180 to v2179, !588
        v2181 = get_local __ptr slice, __anon_302, !588
        mem_copy_bytes v2181, v2175, 16
        v2182 = get_local __ptr {  }, __tmp_arg169
        mem_copy_val v2182, v2172
        v2183 = get_local __ptr slice, __tmp_arg170
        mem_copy_val v2183, v2181
        v2184 = call print_str_1(v2182, v2183)
        v2185 = get_local __ptr {  }, f_81, !588
        v2186 = get_local __ptr {  }, self_45, !588
        mem_copy_val v2186, v2185
        v2187 = get_global __ptr u64, std::debug::STDERR, !608
        v2188 = get_local __ptr u64, fd_39, !609
        mem_copy_val v2188, v2187
        v2189 = get_local __ptr u64, fd_39, !610
        v2190 = load v2189, !611
        v2191 = asm(id: v57, fd: v2190) -> (), !612 {
            ecal   id fd zero zero, !103
        }
        v2192 = get_local __ptr b256, __const98
        v2193 = get_local __ptr { u64 }, arg_82
        v2194 = get_local __ptr { u64 }, _________________________________________, !613
        mem_copy_val v2194, v2193
        v2195 = get_local __ptr [b256; 2], __anon_07, !618
        v2196 = get_local __ptr b256, __tmp_block_arg9
        mem_copy_val v2196, v2192
        v2197 = get_local __ptr b256, __const99
        v2198 = const u64 0
        v2199 = get_elem_ptr v2195, __ptr b256, v2198, !619
        mem_copy_val v2199, v2196
        v2200 = get_local __ptr b256, __tmp_block_arg10
        mem_copy_val v2200, v2197
        v2201 = const u64 1
        v2202 = get_elem_ptr v2195, __ptr b256, v2201, !619
        mem_copy_val v2202, v2200
        v2203 = get_local __ptr { [b256; 2] }, __anon_1103, !621
        v2204 = const u64 0
        v2205 = get_elem_ptr v2203, __ptr [b256; 2], v2204, !619
        mem_copy_val v2205, v2195
        v2206 = get_local __ptr { [b256; 2] }, __tmp_block_arg11
        mem_copy_val v2206, v2203
        v2207 = get_local __ptr string<46>, __const100
        v2208 = get_local __ptr string<4>, __const101
        v2209 = get_local __ptr string<4>, __const102
        v2210 = get_local __ptr { [b256; 2] }, arg_84
        mem_copy_val v2210, v2206
        v2211 = get_local __ptr {  }, __anon_303, !622
        v2212 = get_local __ptr {  }, f_83
        mem_copy_val v2212, v2211
        v2213 = get_local __ptr {  }, f_83, !622
        v2214 = get_local __ptr string<46>, __anon_304
        mem_copy_val v2214, v2207
        v2215 = cast_ptr v2214 to ptr, !622
        v2216 = get_local __ptr { ptr, u64 }, __anon_305, !622
        v2217 = const u64 0
        v2218 = get_elem_ptr v2216, __ptr ptr, v2217
        store v2215 to v2218, !622
        v2219 = const u64 1
        v2220 = get_elem_ptr v2216, __ptr u64, v2219
        v2221 = const u64 46
        store v2221 to v2220, !622
        v2222 = get_local __ptr slice, __anon_306, !622
        mem_copy_bytes v2222, v2216, 16
        v2223 = get_local __ptr {  }, __tmp_arg171
        mem_copy_val v2223, v2213
        v2224 = get_local __ptr slice, __tmp_arg172
        mem_copy_val v2224, v2222
        v2225 = call print_str_1(v2223, v2224)
        v2226 = get_local __ptr { [b256; 2] }, arg_84
        v2227 = get_local __ptr {  }, f_83
        v2228 = get_local __ptr { [b256; 2] }, self_46
        mem_copy_val v2228, v2226
        v2229 = get_local __ptr __ptr {  }, _f_0
        store v2227 to v2229
        v2230 = get_local __ptr __ptr {  }, _f_0, !624
        v2231 = load v2230
        v2232 = get_local __ptr string<4>, __anon_08
        mem_copy_val v2232, v2208
        v2233 = cast_ptr v2232 to ptr, !625
        v2234 = get_local __ptr { ptr, u64 }, __anon_1104, !625
        v2235 = const u64 0
        v2236 = get_elem_ptr v2234, __ptr ptr, v2235
        store v2233 to v2236, !625
        v2237 = const u64 1
        v2238 = get_elem_ptr v2234, __ptr u64, v2237
        v2239 = const u64 4
        store v2239 to v2238, !625
        v2240 = get_local __ptr slice, __anon_2103, !625
        mem_copy_bytes v2240, v2234, 16
        v2241 = get_local __ptr {  }, __tmp_arg339
        mem_copy_val v2241, v2231
        v2242 = get_local __ptr slice, __tmp_arg340
        mem_copy_val v2242, v2240
        v2243 = get_local __ptr { {  }, bool }, __ret_val14
        v2244 = call debug_struct_77(v2241, v2242, v2243)
        v2245 = get_local __ptr { {  }, bool }, __aggr_memcpy_08
        mem_copy_val v2245, v2244
        v2246 = get_local __ptr string<4>, __anon_3101
        mem_copy_val v2246, v2209
        v2247 = cast_ptr v2246 to ptr, !626
        v2248 = get_local __ptr { ptr, u64 }, __anon_442, !626
        v2249 = const u64 0
        v2250 = get_elem_ptr v2248, __ptr ptr, v2249
        store v2247 to v2250, !626
        v2251 = const u64 1
        v2252 = get_elem_ptr v2248, __ptr u64, v2251
        v2253 = const u64 4
        store v2253 to v2252, !626
        v2254 = get_local __ptr slice, __anon_511, !626
        mem_copy_bytes v2254, v2248, 16
        v2255 = get_local __ptr { [b256; 2] }, self_46, !627
        v2256 = const u64 0
        v2257 = get_elem_ptr v2255, __ptr [b256; 2], v2256, !628
        v2258 = get_local __ptr { {  }, bool }, type_fix
        mem_copy_val v2258, v2245
        v2259 = get_local __ptr __ptr { {  }, bool }, self_04, !631
        store v2258 to v2259, !631
        v2260 = get_local __ptr slice, name_, !631
        mem_copy_val v2260, v2254
        v2261 = get_local __ptr [b256; 2], value_0, !631
        mem_copy_val v2261, v2257
        v2262 = get_local __ptr __ptr { {  }, bool }, self_04, !633
        v2263 = load v2262, !631
        v2264 = const u64 1
        v2265 = get_elem_ptr v2263, __ptr bool, v2264, !635
        v2266 = load v2265, !631
        cbr v2266, fmt_88_field_89_block0(), fmt_88_field_89_block2(), !637

        fmt_88_field_89_block0():
        v2267 = get_local __ptr string<2>, __const103
        v2268 = get_local __ptr __ptr { {  }, bool }, self_04, !639
        v2269 = load v2268, !631
        v2270 = const u64 0
        v2271 = get_elem_ptr v2269, __ptr {  }, v2270, !641
        v2272 = get_local __ptr string<2>, __anon_001, !631
        mem_copy_val v2272, v2267
        v2273 = cast_ptr v2272 to ptr, !643
        v2274 = get_local __ptr { ptr, u64 }, __anon_1011, !644
        v2275 = const u64 0
        v2276 = get_elem_ptr v2274, __ptr ptr, v2275, !631
        store v2273 to v2276, !645
        v2277 = const u64 1
        v2278 = get_elem_ptr v2274, __ptr u64, v2277, !631
        v2279 = const u64 2
        store v2279 to v2278, !646
        v2280 = get_local __ptr slice, __anon_2011, !647
        mem_copy_bytes v2280, v2274, 16, !631
        v2281 = get_local __ptr {  }, __tmp_arg173
        mem_copy_val v2281, v2271
        v2282 = get_local __ptr slice, __tmp_arg174
        mem_copy_val v2282, v2280
        v2283 = call print_str_1(v2281, v2282)
        br fmt_88_field_89_block2(), !631

        fmt_88_field_89_block2():
        v2284 = get_local __ptr string<2>, __const104
        v2285 = get_local __ptr __ptr { {  }, bool }, self_04, !649
        v2286 = load v2285, !631
        v2287 = const u64 0
        v2288 = get_elem_ptr v2286, __ptr {  }, v2287, !650
        v2289 = get_local __ptr slice, name_, !652
        v2290 = get_local __ptr {  }, __tmp_arg175
        mem_copy_val v2290, v2288
        v2291 = get_local __ptr slice, __tmp_arg176
        mem_copy_val v2291, v2289
        v2292 = call print_str_1(v2290, v2291)
        v2293 = get_local __ptr __ptr { {  }, bool }, self_04, !654
        v2294 = load v2293, !631
        v2295 = const u64 0
        v2296 = get_elem_ptr v2294, __ptr {  }, v2295, !655
        v2297 = get_local __ptr string<2>, __anon_3010, !631
        mem_copy_val v2297, v2284
        v2298 = cast_ptr v2297 to ptr, !657
        v2299 = get_local __ptr { ptr, u64 }, __anon_4010, !658
        v2300 = const u64 0
        v2301 = get_elem_ptr v2299, __ptr ptr, v2300, !631
        store v2298 to v2301, !659
        v2302 = const u64 1
        v2303 = get_elem_ptr v2299, __ptr u64, v2302, !631
        v2304 = const u64 2
        store v2304 to v2303, !660
        v2305 = get_local __ptr slice, __anon_500, !661
        mem_copy_bytes v2305, v2299, 16, !631
        v2306 = get_local __ptr {  }, __tmp_arg177
        mem_copy_val v2306, v2296
        v2307 = get_local __ptr slice, __tmp_arg178
        mem_copy_val v2307, v2305
        v2308 = call print_str_1(v2306, v2307)
        v2309 = get_local __ptr [b256; 2], value_0, !663
        v2310 = get_local __ptr __ptr { {  }, bool }, self_04, !665
        v2311 = load v2310, !631
        v2312 = const u64 0
        v2313 = get_elem_ptr v2311, __ptr {  }, v2312, !666
        v2314 = get_local __ptr [b256; 2], self_000, !669
        mem_copy_val v2314, v2309
        v2315 = get_local __ptr __ptr {  }, f_8, !670
        store v2313 to v2315, !671
        v2316 = get_local __ptr __ptr {  }, f_8, !672
        v2317 = load v2316, !673
        v2318 = get_local __ptr {  }, __tmp_arg336
        mem_copy_val v2318, v2317
        v2319 = get_local __ptr { {  }, bool }, __ret_val9
        v2320 = call debug_list_68(v2318, v2319)
        v2321 = get_local __ptr { {  }, bool }, __aggr_memcpy_09
        mem_copy_val v2321, v2320
        v2322 = get_local __ptr { {  }, bool }, f__2, !674
        mem_copy_val v2322, v2321
        v2323 = get_local __ptr u64, i1, !675
        v2324 = const u64 0, !443
        store v2324 to v2323, !676
        br fmt_88_field_89_fmt_90_while(), !677

        fmt_88_field_89_fmt_90_while():
        v2325 = get_local __ptr u64, i1, !678
        v2326 = get_local __ptr u64, self_0000, !679
        mem_copy_val v2326, v2325
        v2327 = get_local __ptr u64, other_3, !680
        v2328 = const u64 2, !448
        store v2328 to v2327, !681
        v2329 = get_local __ptr u64, self_0000, !682
        v2330 = load v2329, !683
        v2331 = get_local __ptr u64, other_3, !684
        v2332 = load v2331, !685
        v2333 = cmp lt v2330 v2332, !686
        cbr v2333, fmt_88_field_89_fmt_90_while_body(), fmt_88_field_89_fmt_90_end_while(), !687

        fmt_88_field_89_fmt_90_while_body():
        v2334 = get_local __ptr { {  }, bool }, f__2, !688
        v2335 = get_local __ptr [b256; 2], self_000, !689
        v2336 = get_local __ptr u64, i1, !690
        v2337 = load v2336, !691
        v2338 = get_elem_ptr v2335, __ptr b256, v2337, !692
        v2339 = get_local __ptr __ptr { {  }, bool }, self_113, !695
        store v2334 to v2339, !696
        v2340 = get_local __ptr b256, value_00, !697
        mem_copy_val v2340, v2338
        v2341 = get_local __ptr __ptr { {  }, bool }, self_113, !699
        v2342 = load v2341, !700
        v2343 = const u64 1
        v2344 = get_elem_ptr v2342, __ptr bool, v2343, !702
        v2345 = load v2344, !703
        cbr v2345, fmt_88_field_89_fmt_90_entry_91_block0(), fmt_88_field_89_fmt_90_entry_91_block2(), !705

        fmt_88_field_89_fmt_90_entry_91_block0():
        v2346 = get_local __ptr string<2>, __const105
        v2347 = get_local __ptr __ptr { {  }, bool }, self_113, !707
        v2348 = load v2347, !708
        v2349 = const u64 0
        v2350 = get_elem_ptr v2348, __ptr {  }, v2349, !710
        v2351 = get_local __ptr string<2>, __anon_0000, !711
        mem_copy_val v2351, v2346
        v2352 = cast_ptr v2351 to ptr, !713
        v2353 = get_local __ptr { ptr, u64 }, __anon_1000, !714
        v2354 = const u64 0
        v2355 = get_elem_ptr v2353, __ptr ptr, v2354, !715
        store v2352 to v2355, !716
        v2356 = const u64 1
        v2357 = get_elem_ptr v2353, __ptr u64, v2356, !717
        v2358 = const u64 2
        store v2358 to v2357, !718
        v2359 = get_local __ptr slice, __anon_2000, !719
        mem_copy_bytes v2359, v2353, 16, !720
        v2360 = get_local __ptr {  }, __tmp_arg179
        mem_copy_val v2360, v2350
        v2361 = get_local __ptr slice, __tmp_arg180
        mem_copy_val v2361, v2359
        v2362 = call print_str_1(v2360, v2361)
        br fmt_88_field_89_fmt_90_entry_91_block2(), !721

        fmt_88_field_89_fmt_90_entry_91_block2():
        v2363 = get_local __ptr b256, value_00, !723
        v2364 = get_local __ptr __ptr { {  }, bool }, self_113, !725
        v2365 = load v2364, !726
        v2366 = const u64 0
        v2367 = get_elem_ptr v2365, __ptr {  }, v2366, !727
        v2368 = get_local __ptr b256, __tmp_arg316
        mem_copy_val v2368, v2363
        v2369 = call fmt_52(v2368, v2367)
        v2370 = get_local __ptr __ptr { {  }, bool }, self_113, !729
        v2371 = load v2370, !730
        v2372 = const u64 1
        v2373 = get_elem_ptr v2371, __ptr bool, v2372, !731
        v2374 = const bool true, !732
        store v2374 to v2373, !733
        v2375 = get_local __ptr __ptr { {  }, bool }, self_113, !735
        v2376 = load v2375, !736
        v2377 = get_local __ptr { {  }, bool }, __tmp_block_arg12
        mem_copy_val v2377, v2376
        v2378 = get_local __ptr { {  }, bool }, f__2, !737
        mem_copy_val v2378, v2377
        v2379 = get_local __ptr u64, i1, !738
        v2380 = get_local __ptr u64, self_211, !739
        mem_copy_val v2380, v2379
        v2381 = get_local __ptr u64, other_02, !740
        v2382 = const u64 1, !463
        store v2382 to v2381, !741
        v2383 = get_local __ptr u64, self_211, !742
        v2384 = load v2383, !743
        v2385 = get_local __ptr u64, other_02, !744
        v2386 = load v2385, !745
        v2387 = add v2384, v2386, !746
        v2388 = get_local __ptr u64, i1, !747
        store v2387 to v2388, !748
        br fmt_88_field_89_fmt_90_while(), !749

        fmt_88_field_89_fmt_90_end_while():
        v2389 = get_local __ptr { {  }, bool }, f__2, !750
        v2390 = call finish_72(v2389), !751
        v2391 = get_local __ptr __ptr { {  }, bool }, self_04, !753
        v2392 = load v2391, !631
        v2393 = const u64 1
        v2394 = get_elem_ptr v2392, __ptr bool, v2393, !754
        v2395 = const bool true, !755
        store v2395 to v2394, !756
        v2396 = get_local __ptr __ptr { {  }, bool }, self_04, !758
        v2397 = load v2396, !631
        v2398 = get_local __ptr { {  }, bool }, __tmp_block_arg13
        mem_copy_val v2398, v2397
        v2399 = get_local __ptr { {  }, bool }, type_fix0
        mem_copy_val v2399, v2398
        v2400 = call finish_76(v2399), !761
        v2401 = get_local __ptr string<1>, __const106
        v2402 = get_local __ptr {  }, f_83, !622
        v2403 = get_local __ptr string<1>, __anon_307
        mem_copy_val v2403, v2401
        v2404 = cast_ptr v2403 to ptr, !622
        v2405 = get_local __ptr { ptr, u64 }, __anon_308, !622
        v2406 = const u64 0
        v2407 = get_elem_ptr v2405, __ptr ptr, v2406
        store v2404 to v2407, !622
        v2408 = const u64 1
        v2409 = get_elem_ptr v2405, __ptr u64, v2408
        v2410 = const u64 1
        store v2410 to v2409, !622
        v2411 = get_local __ptr slice, __anon_309, !622
        mem_copy_bytes v2411, v2405, 16
        v2412 = get_local __ptr {  }, __tmp_arg181
        mem_copy_val v2412, v2402
        v2413 = get_local __ptr slice, __tmp_arg182
        mem_copy_val v2413, v2411
        v2414 = call print_str_1(v2412, v2413)
        v2415 = get_local __ptr {  }, f_83, !622
        v2416 = get_local __ptr {  }, self_47, !622
        mem_copy_val v2416, v2415
        v2417 = get_global __ptr u64, std::debug::STDERR, !762
        v2418 = get_local __ptr u64, fd_40, !763
        mem_copy_val v2418, v2417
        v2419 = get_local __ptr u64, fd_40, !764
        v2420 = load v2419, !765
        v2421 = asm(id: v57, fd: v2420) -> (), !766 {
            ecal   id fd zero zero, !103
        }
        v2422 = get_local __ptr string<69>, __const107
        v2423 = get_local __ptr { [b256; 2] }, arg_84
        v2424 = get_local __ptr { [b256; 2] }, __________________________________________, !767
        mem_copy_val v2424, v2423
        v2425 = get_local __ptr { u64 }, __anon_310, !769
        v2426 = const u64 0
        v2427 = get_elem_ptr v2425, __ptr u64, v2426, !769
        v2428 = const u64 0, !769
        store v2428 to v2427, !769
        v2429 = get_local __ptr { u64 }, arg_86
        mem_copy_val v2429, v2425
        v2430 = get_local __ptr {  }, __anon_311, !770
        v2431 = get_local __ptr {  }, f_85
        mem_copy_val v2431, v2430
        v2432 = get_local __ptr {  }, f_85, !770
        v2433 = get_local __ptr string<69>, __anon_312
        mem_copy_val v2433, v2422
        v2434 = cast_ptr v2433 to ptr, !770
        v2435 = get_local __ptr { ptr, u64 }, __anon_313, !770
        v2436 = const u64 0
        v2437 = get_elem_ptr v2435, __ptr ptr, v2436
        store v2434 to v2437, !770
        v2438 = const u64 1
        v2439 = get_elem_ptr v2435, __ptr u64, v2438
        v2440 = const u64 69
        store v2440 to v2439, !770
        v2441 = get_local __ptr slice, __anon_314, !770
        mem_copy_bytes v2441, v2435, 16
        v2442 = get_local __ptr {  }, __tmp_arg183
        mem_copy_val v2442, v2432
        v2443 = get_local __ptr slice, __tmp_arg184
        mem_copy_val v2443, v2441
        v2444 = call print_str_1(v2442, v2443)
        v2445 = get_local __ptr { u64 }, arg_86
        v2446 = get_local __ptr {  }, f_85
        v2447 = get_local __ptr { u64 }, self_48
        mem_copy_val v2447, v2445
        v2448 = get_local __ptr __ptr {  }, _f_1
        store v2446 to v2448
        v2449 = get_local __ptr { u64 }, self_48, !772
        v2450 = get_local __ptr { u64 }, __matched_value_10, !773
        mem_copy_val v2450, v2449
        v2451 = get_local __ptr { u64 }, __matched_value_10, !772
        v2452 = const u64 0
        v2453 = get_elem_ptr v2451, __ptr u64, v2452, !772
        v2454 = get_local __ptr u64, self_05, !776
        mem_copy_val v2454, v2453
        v2455 = get_local __ptr u64, other_4, !776
        v2456 = const u64 0, !772
        store v2456 to v2455, !776
        v2457 = get_local __ptr u64, self_05, !777
        v2458 = load v2457, !776
        v2459 = get_local __ptr u64, other_4, !778
        v2460 = load v2459, !776
        v2461 = cmp eq v2458 v2460, !776
        cbr v2461, fmt_92_block0(), fmt_92_block1(), !774

        fmt_92_block0():
        v2462 = get_local __ptr string<18>, __const108
        v2463 = get_local __ptr __ptr {  }, _f_1, !779
        v2464 = load v2463
        v2465 = get_local __ptr string<18>, __anon_09
        mem_copy_val v2465, v2462
        v2466 = cast_ptr v2465 to ptr, !780
        v2467 = get_local __ptr { ptr, u64 }, __anon_1105, !780
        v2468 = const u64 0
        v2469 = get_elem_ptr v2467, __ptr ptr, v2468
        store v2466 to v2469, !780
        v2470 = const u64 1
        v2471 = get_elem_ptr v2467, __ptr u64, v2470
        v2472 = const u64 18
        store v2472 to v2471, !780
        v2473 = get_local __ptr slice, __anon_2104, !780
        mem_copy_bytes v2473, v2467, 16
        v2474 = get_local __ptr {  }, __tmp_arg185
        mem_copy_val v2474, v2464
        v2475 = get_local __ptr slice, __tmp_arg186
        mem_copy_val v2475, v2473
        v2476 = call print_str_1(v2474, v2475)
        v2477 = get_local __ptr string<1>, __const109
        v2478 = get_local __ptr {  }, f_85, !770
        v2479 = get_local __ptr string<1>, __anon_315
        mem_copy_val v2479, v2477
        v2480 = cast_ptr v2479 to ptr, !770
        v2481 = get_local __ptr { ptr, u64 }, __anon_316, !770
        v2482 = const u64 0
        v2483 = get_elem_ptr v2481, __ptr ptr, v2482
        store v2480 to v2483, !770
        v2484 = const u64 1
        v2485 = get_elem_ptr v2481, __ptr u64, v2484
        v2486 = const u64 1
        store v2486 to v2485, !770
        v2487 = get_local __ptr slice, __anon_317, !770
        mem_copy_bytes v2487, v2481, 16
        v2488 = get_local __ptr {  }, __tmp_arg187
        mem_copy_val v2488, v2478
        v2489 = get_local __ptr slice, __tmp_arg188
        mem_copy_val v2489, v2487
        v2490 = call print_str_1(v2488, v2489)
        v2491 = get_local __ptr {  }, f_85, !770
        v2492 = get_local __ptr {  }, self_49, !770
        mem_copy_val v2492, v2491
        v2493 = get_global __ptr u64, std::debug::STDERR, !781
        v2494 = get_local __ptr u64, fd_41, !782
        mem_copy_val v2494, v2493
        v2495 = get_local __ptr u64, fd_41, !783
        v2496 = load v2495, !784
        v2497 = asm(id: v57, fd: v2496) -> (), !785 {
            ecal   id fd zero zero, !103
        }
        v2498 = get_local __ptr { u64 }, arg_86
        v2499 = get_local __ptr { u64 }, ___________________________________________, !786
        mem_copy_val v2499, v2498
        v2500 = get_local __ptr u64, count_, !794
        v2501 = const u64 0, !795
        store v2501 to v2500, !796
        v2502 = get_local __ptr u64, count_, !799
        v2503 = load v2502, !800
        v2504 = asm(size: v2503) -> ptr hp, !802 {
            aloc   size, !803
        }
        v2505 = get_local __ptr { ptr, u64 }, __anon_002, !805
        v2506 = const u64 0
        v2507 = get_elem_ptr v2505, __ptr ptr, v2506, !806
        store v2504 to v2507, !807
        v2508 = const u64 1
        v2509 = get_elem_ptr v2505, __ptr u64, v2508, !808
        v2510 = const u64 0, !809
        store v2510 to v2509, !810
        v2511 = get_local __ptr { ptr, u64 }, __tmp_block_arg14
        mem_copy_val v2511, v2505
        v2512 = get_local __ptr { { ptr, u64 }, u64 }, __anon_010, !812
        v2513 = const u64 0
        v2514 = get_elem_ptr v2512, __ptr { ptr, u64 }, v2513, !813
        mem_copy_val v2514, v2511
        v2515 = const u64 1
        v2516 = get_elem_ptr v2512, __ptr u64, v2515, !813
        v2517 = const u64 0, !814
        store v2517 to v2516, !815
        v2518 = get_local __ptr { { ptr, u64 }, u64 }, __tmp_block_arg15
        mem_copy_val v2518, v2512
        v2519 = get_local __ptr string<139>, __const110
        v2520 = get_local __ptr { { ptr, u64 }, u64 }, bytes, !816
        mem_copy_val v2520, v2518
        v2521 = get_local __ptr { { ptr, u64 }, u64 }, bytes, !817
        v2522 = const u8 1, !818
        v2523 = call push_96(v2521, v2522), !821
        v2524 = get_local __ptr { { ptr, u64 }, u64 }, bytes, !822
        v2525 = const u8 2, !823
        v2526 = call push_96(v2524, v2525), !826
        v2527 = get_local __ptr { { ptr, u64 }, u64 }, bytes, !827
        v2528 = const u8 3, !828
        v2529 = call push_96(v2527, v2528), !831
        v2530 = get_local __ptr { { ptr, u64 }, u64 }, bytes, !832
        v2531 = get_local __ptr { { ptr, u64 }, u64 }, arg_88
        mem_copy_val v2531, v2530
        v2532 = get_local __ptr {  }, __anon_318, !833
        v2533 = get_local __ptr {  }, f_87
        mem_copy_val v2533, v2532
        v2534 = get_local __ptr {  }, f_87, !833
        v2535 = get_local __ptr string<139>, __anon_319
        mem_copy_val v2535, v2519
        v2536 = cast_ptr v2535 to ptr, !833
        v2537 = get_local __ptr { ptr, u64 }, __anon_320, !833
        v2538 = const u64 0
        v2539 = get_elem_ptr v2537, __ptr ptr, v2538
        store v2536 to v2539, !833
        v2540 = const u64 1
        v2541 = get_elem_ptr v2537, __ptr u64, v2540
        v2542 = const u64 139
        store v2542 to v2541, !833
        v2543 = get_local __ptr slice, __anon_321, !833
        mem_copy_bytes v2543, v2537, 16
        v2544 = get_local __ptr {  }, __tmp_arg189
        mem_copy_val v2544, v2534
        v2545 = get_local __ptr slice, __tmp_arg190
        mem_copy_val v2545, v2543
        v2546 = call print_str_1(v2544, v2545)
        v2547 = get_local __ptr { { ptr, u64 }, u64 }, arg_88
        v2548 = get_local __ptr {  }, f_87
        v2549 = get_local __ptr { { ptr, u64 }, u64 }, self_50
        mem_copy_val v2549, v2547
        v2550 = get_local __ptr __ptr {  }, f_10
        store v2548 to v2550
        v2551 = get_local __ptr __ptr {  }, f_10, !834
        v2552 = load v2551
        v2553 = get_local __ptr {  }, __tmp_arg337
        mem_copy_val v2553, v2552
        v2554 = get_local __ptr { {  }, bool }, __ret_val10
        v2555 = call debug_list_68(v2553, v2554)
        v2556 = get_local __ptr { {  }, bool }, __aggr_memcpy_010
        mem_copy_val v2556, v2555
        v2557 = get_local __ptr { {  }, bool }, l, !835
        mem_copy_val v2557, v2556
        v2558 = get_local __ptr { { ptr, u64 }, u64 }, self_50, !836
        v2559 = get_local __ptr { { ptr, u64 }, u64 }, self_06, !839
        mem_copy_val v2559, v2558
        v2560 = get_local __ptr { { ptr, u64 }, u64 }, self_06, !841
        v2561 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __anon_011, !843
        v2562 = const u64 0
        v2563 = get_elem_ptr v2561, __ptr { { ptr, u64 }, u64 }, v2562, !839
        mem_copy_val v2563, v2560
        v2564 = const u64 1
        v2565 = get_elem_ptr v2561, __ptr u64, v2564, !839
        v2566 = const u64 0, !844
        store v2566 to v2565, !845
        v2567 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __tmp_block_arg16
        mem_copy_val v2567, v2561
        v2568 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __for_iterable_2
        mem_copy_val v2568, v2567
        br fmt_103_while()

        fmt_92_block1():
        v2569 = const u64 14757395258967588866, !773
        revert v2569, !773

        fmt_103_while():
        v2570 = const bool true
        cbr v2570, fmt_103_while_body(), fmt_103_end_while()

        fmt_103_while_body():
        v2571 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __for_iterable_2
        v2572 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !847
        store v2571 to v2572, !847
        v2573 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !849
        v2574 = load v2573, !847
        v2575 = const u64 1
        v2576 = get_elem_ptr v2574, __ptr u64, v2575, !851
        v2577 = load v2576, !847
        v2578 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !853
        v2579 = load v2578, !847
        v2580 = const u64 0
        v2581 = get_elem_ptr v2579, __ptr { { ptr, u64 }, u64 }, v2580, !855
        v2582 = const u64 1
        v2583 = get_elem_ptr v2581, __ptr u64, v2582, !857
        v2584 = load v2583, !847
        v2585 = call ge_106(v2577, v2584), !860
        cbr v2585, fmt_103_next_105_block0(), fmt_103_next_105_block1(), !861

        fmt_103_next_105_block0():
        v2586 = get_local __ptr { u64, ( () | u8 ) }, __anon_003, !864
        v2587 = const u64 0
        v2588 = get_elem_ptr v2586, __ptr u64, v2587, !865
        v2589 = const u64 0, !863
        store v2589 to v2588, !866
        v2590 = get_local __ptr { u64, ( () | u8 ) }, __tmp_block_arg17
        mem_copy_val v2590, v2586
        br fmt_103_block4(v2590), !868

        fmt_103_next_105_block1():
        v2591 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !870
        v2592 = load v2591, !847
        v2593 = const u64 1
        v2594 = get_elem_ptr v2592, __ptr u64, v2593, !871
        v2595 = get_local __ptr u64, self_001, !874
        mem_copy_val v2595, v2594
        v2596 = get_local __ptr u64, other_5, !875
        v2597 = const u64 1, !876
        store v2597 to v2596, !877
        v2598 = get_local __ptr u64, self_001, !878
        v2599 = load v2598, !879
        v2600 = get_local __ptr u64, other_5, !880
        v2601 = load v2600, !881
        v2602 = add v2599, v2601, !882
        v2603 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !883
        v2604 = load v2603, !847
        v2605 = const u64 1
        v2606 = get_elem_ptr v2604, __ptr u64, v2605, !884
        store v2602 to v2606, !885
        v2607 = get_local __ptr { u64, ( () | u8 ) }, __anon_1106, !886
        v2608 = const u64 0
        v2609 = get_elem_ptr v2607, __ptr u64, v2608, !887
        v2610 = const u64 1, !863
        store v2610 to v2609, !888
        v2611 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !890
        v2612 = load v2611, !847
        v2613 = const u64 0
        v2614 = get_elem_ptr v2612, __ptr { { ptr, u64 }, u64 }, v2613, !891
        v2615 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_114, !893
        v2616 = load v2615, !847
        v2617 = const u64 1
        v2618 = get_elem_ptr v2616, __ptr u64, v2617, !894
        v2619 = get_local __ptr u64, self_100, !897
        mem_copy_val v2619, v2618
        v2620 = get_local __ptr u64, other_03, !898
        v2621 = const u64 1, !899
        store v2621 to v2620, !900
        v2622 = get_local __ptr u64, self_100, !902
        v2623 = load v2622, !903
        v2624 = get_local __ptr u64, other_03, !905
        v2625 = load v2624, !906
        v2626 = sub v2623, v2625, !907
        v2627 = get_local __ptr { { ptr, u64 }, u64 }, self_212, !910
        mem_copy_val v2627, v2614
        v2628 = get_local __ptr u64, index_, !911
        store v2626 to v2628, !912
        v2629 = get_local __ptr { { ptr, u64 }, u64 }, self_212, !914
        v2630 = const u64 0
        v2631 = get_elem_ptr v2629, __ptr { ptr, u64 }, v2630, !916
        v2632 = const u64 0
        v2633 = get_elem_ptr v2631, __ptr ptr, v2632, !918
        v2634 = get_local __ptr u64, index_, !920
        v2635 = get_local __ptr ptr, self_0001, !923
        mem_copy_val v2635, v2633
        v2636 = get_local __ptr u64, offset_, !924
        mem_copy_val v2636, v2634
        v2637 = get_local __ptr ptr, self_0001, !927
        v2638 = load v2637, !928
        v2639 = get_local __ptr u64, offset_, !930
        v2640 = load v2639, !931
        v2641 = asm(ptr: v2638, offset: v2640, new) -> ptr new, !933 {
            add    new ptr offset, !934
        }
        v2642 = get_local __ptr ptr, self_1000, !937
        store v2641 to v2642, !938
        v2643 = get_local __ptr ptr, self_1000, !940
        v2644 = load v2643, !941
        v2645 = asm(r1: v2644, r2) -> u8 r2, !943 {
            lb     r2 r1 i0, !944
        }
        v2646 = const u64 1
        v2647 = const u64 1
        v2648 = get_elem_ptr v2607, __ptr u8, v2646, v2647, !945
        store v2645 to v2648, !946
        v2649 = get_local __ptr { u64, ( () | u8 ) }, __tmp_block_arg17
        mem_copy_val v2649, v2607
        br fmt_103_block4(v2649), !847

        fmt_103_block4(v2650: __ptr { u64, ( () | u8 ) }):
        v2651 = get_local __ptr { u64, ( () | u8 ) }, __for_value_opt_1
        mem_copy_val v2651, v2650
        v2652 = get_local __ptr { u64, ( () | u8 ) }, __for_value_opt_1
        v2653 = get_local __ptr { u64, ( () | u8 ) }, self_310
        mem_copy_val v2653, v2652
        v2654 = get_local __ptr { u64, ( () | u8 ) }, self_310, !947
        v2655 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_3, !948
        mem_copy_val v2655, v2654
        v2656 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_3, !947
        v2657 = const u64 0
        v2658 = get_elem_ptr v2656, __ptr u64, v2657, !947
        v2659 = get_local __ptr u64, self_010, !951
        mem_copy_val v2659, v2658
        v2660 = get_local __ptr u64, other_10, !951
        v2661 = const u64 1, !947
        store v2661 to v2660, !951
        v2662 = get_local __ptr u64, self_010, !952
        v2663 = load v2662, !951
        v2664 = get_local __ptr u64, other_10, !953
        v2665 = load v2664, !951
        v2666 = cmp eq v2663 v2665, !951
        v2667 = const bool false, !954
        cbr v2666, fmt_103_is_none_109_block2(v2667), fmt_103_is_none_109_block1(), !949

        fmt_103_is_none_109_block1():
        v2668 = const bool true, !955
        br fmt_103_is_none_109_block2(v2668)

        fmt_103_is_none_109_block2(v2669: bool):
        cbr v2669, fmt_103_end_while(), fmt_103_block1()

        fmt_103_block1():
        v2670 = get_local __ptr { u64, ( () | u8 ) }, __for_value_opt_1
        v2671 = get_local __ptr { u64, ( () | u8 ) }, self_410, !956
        mem_copy_val v2671, v2670
        v2672 = get_local __ptr { u64, ( () | u8 ) }, self_410, !958
        v2673 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_4, !960
        mem_copy_val v2673, v2672
        v2674 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_4, !961
        v2675 = const u64 0
        v2676 = get_elem_ptr v2674, __ptr u64, v2675, !962
        v2677 = get_local __ptr u64, self_020, !965
        mem_copy_val v2677, v2676
        v2678 = get_local __ptr u64, other_20, !966
        v2679 = const u64 1, !957
        store v2679 to v2678, !967
        v2680 = get_local __ptr u64, self_020, !968
        v2681 = load v2680, !969
        v2682 = get_local __ptr u64, other_20, !970
        v2683 = load v2682, !971
        v2684 = cmp eq v2681 v2683, !972
        cbr v2684, fmt_103_unwrap_110_block0(), fmt_103_unwrap_110_block1(), !973

        fmt_103_unwrap_110_block0():
        v2685 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_4, !974
        v2686 = const u64 1
        v2687 = const u64 1
        v2688 = get_elem_ptr v2685, __ptr u8, v2686, v2687, !956
        v2689 = get_local __ptr u8, v0, !976
        mem_copy_val v2689, v2688
        v2690 = get_local __ptr u8, v0, !978
        v2691 = load v2690, !956
        v2692 = get_local __ptr u8, elem, !979
        store v2691 to v2692, !979
        v2693 = get_local __ptr { {  }, bool }, l, !980
        v2694 = get_local __ptr u8, elem, !981
        v2695 = load v2694
        v2696 = get_local __ptr { {  }, bool }, __ret_val13
        v2697 = call entry_70(v2693, v2695, v2696)
        v2698 = get_local __ptr { {  }, bool }, __aggr_memcpy_011
        mem_copy_val v2698, v2697
        v2699 = get_local __ptr { {  }, bool }, _1, !982
        mem_copy_val v2699, v2698
        br fmt_103_while()

        fmt_103_unwrap_110_block1():
        v2700 = get_local __ptr u64, code_, !985
        v2701 = const u64 0, !986
        store v2701 to v2700, !987
        v2702 = get_local __ptr u64, code_, !990
        v2703 = load v2702, !991
        revert v2703, !993

        fmt_103_end_while():
        v2704 = get_local __ptr { {  }, bool }, l, !994
        v2705 = call finish_72(v2704), !997
        v2706 = get_local __ptr string<1>, __const111
        v2707 = get_local __ptr {  }, f_87, !833
        v2708 = get_local __ptr string<1>, __anon_322
        mem_copy_val v2708, v2706
        v2709 = cast_ptr v2708 to ptr, !833
        v2710 = get_local __ptr { ptr, u64 }, __anon_323, !833
        v2711 = const u64 0
        v2712 = get_elem_ptr v2710, __ptr ptr, v2711
        store v2709 to v2712, !833
        v2713 = const u64 1
        v2714 = get_elem_ptr v2710, __ptr u64, v2713
        v2715 = const u64 1
        store v2715 to v2714, !833
        v2716 = get_local __ptr slice, __anon_324, !833
        mem_copy_bytes v2716, v2710, 16
        v2717 = get_local __ptr {  }, __tmp_arg191
        mem_copy_val v2717, v2707
        v2718 = get_local __ptr slice, __tmp_arg192
        mem_copy_val v2718, v2716
        v2719 = call print_str_1(v2717, v2718)
        v2720 = get_local __ptr {  }, f_87, !833
        v2721 = get_local __ptr {  }, self_51, !833
        mem_copy_val v2721, v2720
        v2722 = get_global __ptr u64, std::debug::STDERR, !998
        v2723 = get_local __ptr u64, fd_42, !999
        mem_copy_val v2723, v2722
        v2724 = get_local __ptr u64, fd_42, !1000
        v2725 = load v2724, !1001
        v2726 = asm(id: v57, fd: v2725) -> (), !1002 {
            ecal   id fd zero zero, !103
        }
        v2727 = get_local __ptr b256, __const112
        v2728 = get_local __ptr { { ptr, u64 }, u64 }, arg_88
        v2729 = get_local __ptr { { ptr, u64 }, u64 }, ____________________________________________, !1003
        mem_copy_val v2729, v2728
        v2730 = get_local __ptr b256, __tmp_block_arg18
        mem_copy_val v2730, v2727
        v2731 = get_local __ptr { b256 }, __anon_012, !1008
        v2732 = const u64 0
        v2733 = get_elem_ptr v2731, __ptr b256, v2732, !1009
        mem_copy_val v2733, v2730
        v2734 = get_local __ptr { b256 }, __tmp_block_arg19
        mem_copy_val v2734, v2731
        v2735 = get_local __ptr string<59>, __const113
        v2736 = get_local __ptr string<1>, __const114
        v2737 = get_local __ptr { b256 }, arg_90
        mem_copy_val v2737, v2734
        v2738 = get_local __ptr {  }, __anon_325, !1010
        v2739 = get_local __ptr {  }, f_89
        mem_copy_val v2739, v2738
        v2740 = get_local __ptr {  }, f_89, !1010
        v2741 = get_local __ptr string<59>, __anon_326
        mem_copy_val v2741, v2735
        v2742 = cast_ptr v2741 to ptr, !1010
        v2743 = get_local __ptr { ptr, u64 }, __anon_327, !1010
        v2744 = const u64 0
        v2745 = get_elem_ptr v2743, __ptr ptr, v2744
        store v2742 to v2745, !1010
        v2746 = const u64 1
        v2747 = get_elem_ptr v2743, __ptr u64, v2746
        v2748 = const u64 59
        store v2748 to v2747, !1010
        v2749 = get_local __ptr slice, __anon_328, !1010
        mem_copy_bytes v2749, v2743, 16
        v2750 = get_local __ptr {  }, __tmp_arg193
        mem_copy_val v2750, v2740
        v2751 = get_local __ptr slice, __tmp_arg194
        mem_copy_val v2751, v2749
        v2752 = call print_str_1(v2750, v2751)
        v2753 = get_local __ptr { b256 }, arg_90
        v2754 = get_local __ptr {  }, f_89
        v2755 = get_local __ptr { b256 }, __tmp_arg353
        mem_copy_val v2755, v2753
        v2756 = call fmt_113(v2755, v2754)
        v2757 = get_local __ptr {  }, f_89, !1010
        v2758 = get_local __ptr string<1>, __anon_329
        mem_copy_val v2758, v2736
        v2759 = cast_ptr v2758 to ptr, !1010
        v2760 = get_local __ptr { ptr, u64 }, __anon_330, !1010
        v2761 = const u64 0
        v2762 = get_elem_ptr v2760, __ptr ptr, v2761
        store v2759 to v2762, !1010
        v2763 = const u64 1
        v2764 = get_elem_ptr v2760, __ptr u64, v2763
        v2765 = const u64 1
        store v2765 to v2764, !1010
        v2766 = get_local __ptr slice, __anon_331, !1010
        mem_copy_bytes v2766, v2760, 16
        v2767 = get_local __ptr {  }, __tmp_arg195
        mem_copy_val v2767, v2757
        v2768 = get_local __ptr slice, __tmp_arg196
        mem_copy_val v2768, v2766
        v2769 = call print_str_1(v2767, v2768)
        v2770 = get_local __ptr {  }, f_89, !1010
        v2771 = get_local __ptr {  }, self_52, !1010
        mem_copy_val v2771, v2770
        v2772 = get_global __ptr u64, std::debug::STDERR, !1011
        v2773 = get_local __ptr u64, fd_43, !1012
        mem_copy_val v2773, v2772
        v2774 = get_local __ptr u64, fd_43, !1013
        v2775 = load v2774, !1014
        v2776 = asm(id: v57, fd: v2775) -> (), !1015 {
            ecal   id fd zero zero, !103
        }
        v2777 = get_local __ptr string<66>, __const115
        v2778 = get_local __ptr { b256 }, arg_90
        v2779 = get_local __ptr { b256 }, _____________________________________________, !1016
        mem_copy_val v2779, v2778
        v2780 = get_local __ptr { u64 }, __anon_332, !1018
        v2781 = const u64 0
        v2782 = get_elem_ptr v2780, __ptr u64, v2781, !1018
        v2783 = const u64 1, !1018
        store v2783 to v2782, !1018
        v2784 = get_local __ptr { u64 }, arg_92
        mem_copy_val v2784, v2780
        v2785 = get_local __ptr {  }, __anon_333, !1019
        v2786 = get_local __ptr {  }, f_91
        mem_copy_val v2786, v2785
        v2787 = get_local __ptr {  }, f_91, !1019
        v2788 = get_local __ptr string<66>, __anon_334
        mem_copy_val v2788, v2777
        v2789 = cast_ptr v2788 to ptr, !1019
        v2790 = get_local __ptr { ptr, u64 }, __anon_335, !1019
        v2791 = const u64 0
        v2792 = get_elem_ptr v2790, __ptr ptr, v2791
        store v2789 to v2792, !1019
        v2793 = const u64 1
        v2794 = get_elem_ptr v2790, __ptr u64, v2793
        v2795 = const u64 66
        store v2795 to v2794, !1019
        v2796 = get_local __ptr slice, __anon_336, !1019
        mem_copy_bytes v2796, v2790, 16
        v2797 = get_local __ptr {  }, __tmp_arg197
        mem_copy_val v2797, v2787
        v2798 = get_local __ptr slice, __tmp_arg198
        mem_copy_val v2798, v2796
        v2799 = call print_str_1(v2797, v2798)
        v2800 = get_local __ptr { u64 }, arg_92
        v2801 = get_local __ptr {  }, f_91
        v2802 = get_local __ptr { u64 }, self_53
        mem_copy_val v2802, v2800
        v2803 = get_local __ptr __ptr {  }, _f_2
        store v2801 to v2803
        v2804 = get_local __ptr { u64 }, self_53, !1021
        v2805 = get_local __ptr { u64 }, __matched_value_11, !1022
        mem_copy_val v2805, v2804
        v2806 = get_local __ptr { u64 }, __matched_value_11, !1021
        v2807 = const u64 0
        v2808 = get_elem_ptr v2806, __ptr u64, v2807, !1021
        v2809 = get_local __ptr u64, self_07, !1025
        mem_copy_val v2809, v2808
        v2810 = get_local __ptr u64, other_6, !1025
        v2811 = const u64 0, !1021
        store v2811 to v2810, !1025
        v2812 = get_local __ptr u64, self_07, !1026
        v2813 = load v2812, !1025
        v2814 = get_local __ptr u64, other_6, !1027
        v2815 = load v2814, !1025
        v2816 = cmp eq v2813 v2815, !1025
        cbr v2816, fmt_114_block0(), fmt_114_block1(), !1023

        fmt_114_block0():
        v2817 = get_local __ptr string<22>, __const116
        v2818 = get_local __ptr __ptr {  }, _f_2, !1028
        v2819 = load v2818
        v2820 = get_local __ptr string<22>, __anon_013
        mem_copy_val v2820, v2817
        v2821 = cast_ptr v2820 to ptr, !1029
        v2822 = get_local __ptr { ptr, u64 }, __anon_1107, !1029
        v2823 = const u64 0
        v2824 = get_elem_ptr v2822, __ptr ptr, v2823
        store v2821 to v2824, !1029
        v2825 = const u64 1
        v2826 = get_elem_ptr v2822, __ptr u64, v2825
        v2827 = const u64 22
        store v2827 to v2826, !1029
        v2828 = get_local __ptr slice, __anon_2105, !1029
        mem_copy_bytes v2828, v2822, 16
        v2829 = get_local __ptr {  }, __tmp_arg199
        mem_copy_val v2829, v2819
        v2830 = get_local __ptr slice, __tmp_arg200
        mem_copy_val v2830, v2828
        v2831 = call print_str_1(v2829, v2830)
        br fmt_114_block5()

        fmt_114_block1():
        v2832 = get_local __ptr { u64 }, __matched_value_11, !1021
        v2833 = const u64 0
        v2834 = get_elem_ptr v2832, __ptr u64, v2833, !1021
        v2835 = get_local __ptr u64, self_115, !1032
        mem_copy_val v2835, v2834
        v2836 = get_local __ptr u64, other_04, !1032
        v2837 = const u64 1, !1021
        store v2837 to v2836, !1032
        v2838 = get_local __ptr u64, self_115, !1033
        v2839 = load v2838, !1032
        v2840 = get_local __ptr u64, other_04, !1034
        v2841 = load v2840, !1032
        v2842 = cmp eq v2839 v2841, !1032
        cbr v2842, fmt_114_block2(), fmt_114_block3(), !1030

        fmt_114_block2():
        v2843 = get_local __ptr string<17>, __const117
        v2844 = get_local __ptr __ptr {  }, _f_2, !1035
        v2845 = load v2844
        v2846 = get_local __ptr string<17>, __anon_3102
        mem_copy_val v2846, v2843
        v2847 = cast_ptr v2846 to ptr, !1036
        v2848 = get_local __ptr { ptr, u64 }, __anon_443, !1036
        v2849 = const u64 0
        v2850 = get_elem_ptr v2848, __ptr ptr, v2849
        store v2847 to v2850, !1036
        v2851 = const u64 1
        v2852 = get_elem_ptr v2848, __ptr u64, v2851
        v2853 = const u64 17
        store v2853 to v2852, !1036
        v2854 = get_local __ptr slice, __anon_512, !1036
        mem_copy_bytes v2854, v2848, 16
        v2855 = get_local __ptr {  }, __tmp_arg201
        mem_copy_val v2855, v2845
        v2856 = get_local __ptr slice, __tmp_arg202
        mem_copy_val v2856, v2854
        v2857 = call print_str_1(v2855, v2856)
        br fmt_114_block5()

        fmt_114_block3():
        v2858 = const u64 14757395258967588866, !1022
        revert v2858, !1022

        fmt_114_block5():
        v2859 = get_local __ptr string<1>, __const118
        v2860 = get_local __ptr {  }, f_91, !1019
        v2861 = get_local __ptr string<1>, __anon_337
        mem_copy_val v2861, v2859
        v2862 = cast_ptr v2861 to ptr, !1019
        v2863 = get_local __ptr { ptr, u64 }, __anon_338, !1019
        v2864 = const u64 0
        v2865 = get_elem_ptr v2863, __ptr ptr, v2864
        store v2862 to v2865, !1019
        v2866 = const u64 1
        v2867 = get_elem_ptr v2863, __ptr u64, v2866
        v2868 = const u64 1
        store v2868 to v2867, !1019
        v2869 = get_local __ptr slice, __anon_339, !1019
        mem_copy_bytes v2869, v2863, 16
        v2870 = get_local __ptr {  }, __tmp_arg203
        mem_copy_val v2870, v2860
        v2871 = get_local __ptr slice, __tmp_arg204
        mem_copy_val v2871, v2869
        v2872 = call print_str_1(v2870, v2871)
        v2873 = get_local __ptr {  }, f_91, !1019
        v2874 = get_local __ptr {  }, self_54, !1019
        mem_copy_val v2874, v2873
        v2875 = get_global __ptr u64, std::debug::STDERR, !1037
        v2876 = get_local __ptr u64, fd_44, !1038
        mem_copy_val v2876, v2875
        v2877 = get_local __ptr u64, fd_44, !1039
        v2878 = load v2877, !1040
        v2879 = asm(id: v57, fd: v2878) -> (), !1041 {
            ecal   id fd zero zero, !103
        }
        v2880 = get_local __ptr b256, __const119
        v2881 = get_local __ptr { u64 }, arg_92
        v2882 = get_local __ptr { u64 }, ______________________________________________, !1042
        mem_copy_val v2882, v2881
        v2883 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, __anon_340, !1044
        v2884 = const u64 0
        v2885 = get_elem_ptr v2883, __ptr u64, v2884, !1044
        v2886 = const u64 0, !1044
        store v2886 to v2885, !1044
        v2887 = get_local __ptr b256, __tmp_block_arg20
        mem_copy_val v2887, v2880
        v2888 = get_local __ptr { b256 }, __anon_014, !1047
        v2889 = get_elem_ptr v2888, __ptr b256, v1994, !1048
        mem_copy_val v2889, v2887
        v2890 = get_local __ptr { b256 }, __tmp_block_arg21
        mem_copy_val v2890, v2888
        v2891 = get_local __ptr string<72>, __const120
        v2892 = const u64 1
        v2893 = const u64 0
        v2894 = get_elem_ptr v2883, __ptr { b256 }, v2892, v2893, !1044
        mem_copy_val v2894, v2890
        v2895 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, arg_94
        mem_copy_val v2895, v2883
        v2896 = get_local __ptr {  }, __anon_341, !1049
        v2897 = get_local __ptr {  }, f_93
        mem_copy_val v2897, v2896
        v2898 = get_local __ptr {  }, f_93, !1049
        v2899 = get_local __ptr string<72>, __anon_342
        mem_copy_val v2899, v2891
        v2900 = cast_ptr v2899 to ptr, !1049
        v2901 = get_local __ptr { ptr, u64 }, __anon_343, !1049
        v2902 = const u64 0
        v2903 = get_elem_ptr v2901, __ptr ptr, v2902
        store v2900 to v2903, !1049
        v2904 = const u64 1
        v2905 = get_elem_ptr v2901, __ptr u64, v2904
        v2906 = const u64 72
        store v2906 to v2905, !1049
        v2907 = get_local __ptr slice, __anon_344, !1049
        mem_copy_bytes v2907, v2901, 16
        v2908 = get_local __ptr {  }, __tmp_arg205
        mem_copy_val v2908, v2898
        v2909 = get_local __ptr slice, __tmp_arg206
        mem_copy_val v2909, v2907
        v2910 = call print_str_1(v2908, v2909)
        v2911 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, arg_94
        v2912 = get_local __ptr {  }, f_93
        v2913 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, self_55
        mem_copy_val v2913, v2911
        v2914 = get_local __ptr __ptr {  }, _f_3
        store v2912 to v2914
        v2915 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, self_55, !1051
        v2916 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1052
        mem_copy_val v2916, v2915
        v2917 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1051
        v2918 = const u64 0
        v2919 = get_elem_ptr v2917, __ptr u64, v2918, !1051
        v2920 = get_local __ptr u64, self_08, !1055
        mem_copy_val v2920, v2919
        v2921 = get_local __ptr u64, other_7, !1055
        v2922 = const u64 0, !1051
        store v2922 to v2921, !1055
        v2923 = get_local __ptr u64, self_08, !1056
        v2924 = load v2923, !1055
        v2925 = get_local __ptr u64, other_7, !1057
        v2926 = load v2925, !1055
        v2927 = cmp eq v2924 v2926, !1055
        cbr v2927, fmt_115_block0(), fmt_115_block1(), !1053

        fmt_115_block0():
        v2928 = get_local __ptr string<8>, __const121
        v2929 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1051
        v2930 = const u64 1
        v2931 = const u64 0
        v2932 = get_elem_ptr v2929, __ptr { b256 }, v2930, v2931
        v2933 = get_local __ptr { b256 }, value, !1058
        mem_copy_val v2933, v2932
        v2934 = get_local __ptr __ptr {  }, _f_3, !1059
        v2935 = load v2934
        v2936 = get_local __ptr string<8>, __anon_015
        mem_copy_val v2936, v2928
        v2937 = cast_ptr v2936 to ptr, !1060
        v2938 = get_local __ptr { ptr, u64 }, __anon_1108, !1060
        v2939 = const u64 0
        v2940 = get_elem_ptr v2938, __ptr ptr, v2939
        store v2937 to v2940, !1060
        v2941 = const u64 1
        v2942 = get_elem_ptr v2938, __ptr u64, v2941
        v2943 = const u64 8
        store v2943 to v2942, !1060
        v2944 = get_local __ptr slice, __anon_2106, !1060
        mem_copy_bytes v2944, v2938, 16
        v2945 = get_local __ptr {  }, __tmp_arg324
        mem_copy_val v2945, v2935
        v2946 = get_local __ptr slice, __tmp_arg325
        mem_copy_val v2946, v2944
        v2947 = get_local __ptr { {  }, bool }, __ret_val0
        v2948 = call debug_tuple_62(v2945, v2946, v2947)
        v2949 = get_local __ptr { {  }, bool }, __aggr_memcpy_012
        mem_copy_val v2949, v2948
        v2950 = get_local __ptr { b256 }, value, !1061
        v2951 = get_local __ptr { {  }, bool }, type_fix1
        mem_copy_val v2951, v2949
        v2952 = get_local __ptr __ptr { {  }, bool }, self_116, !1064
        store v2951 to v2952, !1064
        v2953 = get_local __ptr { b256 }, value_01, !1064
        mem_copy_val v2953, v2950
        v2954 = get_local __ptr __ptr { {  }, bool }, self_116, !1065
        v2955 = load v2954, !1064
        v2956 = const u64 1
        v2957 = get_elem_ptr v2955, __ptr bool, v2956, !1066
        v2958 = load v2957, !1064
        cbr v2958, fmt_115_field_116_block0(), fmt_115_field_116_block2(), !1067

        fmt_115_field_116_block0():
        v2959 = get_local __ptr string<2>, __const122
        v2960 = get_local __ptr __ptr { {  }, bool }, self_116, !1068
        v2961 = load v2960, !1064
        v2962 = const u64 0
        v2963 = get_elem_ptr v2961, __ptr {  }, v2962, !1069
        v2964 = get_local __ptr string<2>, __anon_004, !1064
        mem_copy_val v2964, v2959
        v2965 = cast_ptr v2964 to ptr, !1070
        v2966 = get_local __ptr { ptr, u64 }, __anon_1012, !1071
        v2967 = const u64 0
        v2968 = get_elem_ptr v2966, __ptr ptr, v2967, !1064
        store v2965 to v2968, !1072
        v2969 = const u64 1
        v2970 = get_elem_ptr v2966, __ptr u64, v2969, !1064
        v2971 = const u64 2
        store v2971 to v2970, !1073
        v2972 = get_local __ptr slice, __anon_2012, !1074
        mem_copy_bytes v2972, v2966, 16, !1064
        v2973 = get_local __ptr {  }, __tmp_arg207
        mem_copy_val v2973, v2963
        v2974 = get_local __ptr slice, __tmp_arg208
        mem_copy_val v2974, v2972
        v2975 = call print_str_1(v2973, v2974)
        br fmt_115_field_116_block2(), !1064

        fmt_115_field_116_block2():
        v2976 = get_local __ptr { b256 }, value_01, !1075
        v2977 = get_local __ptr __ptr { {  }, bool }, self_116, !1076
        v2978 = load v2977, !1064
        v2979 = const u64 0
        v2980 = get_elem_ptr v2978, __ptr {  }, v2979, !1077
        v2981 = get_local __ptr { b256 }, __tmp_arg350
        mem_copy_val v2981, v2976
        v2982 = call fmt_82(v2981, v2980)
        v2983 = get_local __ptr __ptr { {  }, bool }, self_116, !1078
        v2984 = load v2983, !1064
        v2985 = const u64 1
        v2986 = get_elem_ptr v2984, __ptr bool, v2985, !1079
        v2987 = const bool true, !417
        store v2987 to v2986, !1080
        v2988 = get_local __ptr __ptr { {  }, bool }, self_116, !1081
        v2989 = load v2988, !1064
        v2990 = get_local __ptr { {  }, bool }, __tmp_block_arg22
        mem_copy_val v2990, v2989
        v2991 = get_local __ptr { {  }, bool }, type_fix00
        mem_copy_val v2991, v2990
        v2992 = call finish_66(v2991), !1084
        br fmt_115_block5()

        fmt_115_block1():
        v2993 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1051
        v2994 = const u64 0
        v2995 = get_elem_ptr v2993, __ptr u64, v2994, !1051
        v2996 = get_local __ptr u64, self_213, !1087
        mem_copy_val v2996, v2995
        v2997 = get_local __ptr u64, other_05, !1087
        v2998 = const u64 1, !1051
        store v2998 to v2997, !1087
        v2999 = get_local __ptr u64, self_213, !1088
        v3000 = load v2999, !1087
        v3001 = get_local __ptr u64, other_05, !1089
        v3002 = load v3001, !1087
        v3003 = cmp eq v3000 v3002, !1087
        cbr v3003, fmt_115_block2(), fmt_115_block3(), !1085

        fmt_115_block2():
        v3004 = get_local __ptr string<8>, __const123
        v3005 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1051
        v3006 = const u64 1
        v3007 = const u64 1
        v3008 = get_elem_ptr v3005, __ptr { b256 }, v3006, v3007
        v3009 = get_local __ptr { b256 }, value_1, !1090
        mem_copy_val v3009, v3008
        v3010 = get_local __ptr __ptr {  }, _f_3, !1091
        v3011 = load v3010
        v3012 = get_local __ptr string<8>, __anon_3103
        mem_copy_val v3012, v3004
        v3013 = cast_ptr v3012 to ptr, !1092
        v3014 = get_local __ptr { ptr, u64 }, __anon_444, !1092
        v3015 = const u64 0
        v3016 = get_elem_ptr v3014, __ptr ptr, v3015
        store v3013 to v3016, !1092
        v3017 = const u64 1
        v3018 = get_elem_ptr v3014, __ptr u64, v3017
        v3019 = const u64 8
        store v3019 to v3018, !1092
        v3020 = get_local __ptr slice, __anon_513, !1092
        mem_copy_bytes v3020, v3014, 16
        v3021 = get_local __ptr {  }, __tmp_arg326
        mem_copy_val v3021, v3011
        v3022 = get_local __ptr slice, __tmp_arg327
        mem_copy_val v3022, v3020
        v3023 = get_local __ptr { {  }, bool }, __ret_val1
        v3024 = call debug_tuple_62(v3021, v3022, v3023)
        v3025 = get_local __ptr { {  }, bool }, __aggr_memcpy_013
        mem_copy_val v3025, v3024
        v3026 = get_local __ptr { b256 }, value_1, !1093
        v3027 = get_local __ptr { {  }, bool }, type_fix10
        mem_copy_val v3027, v3025
        v3028 = get_local __ptr __ptr { {  }, bool }, self_311, !1096
        store v3027 to v3028, !1096
        v3029 = get_local __ptr { b256 }, value_10, !1096
        mem_copy_val v3029, v3026
        v3030 = get_local __ptr __ptr { {  }, bool }, self_311, !1097
        v3031 = load v3030, !1096
        v3032 = const u64 1
        v3033 = get_elem_ptr v3031, __ptr bool, v3032, !1098
        v3034 = load v3033, !1096
        cbr v3034, fmt_115_field_117_block0(), fmt_115_field_117_block2(), !1099

        fmt_115_field_117_block0():
        v3035 = get_local __ptr string<2>, __const124
        v3036 = get_local __ptr __ptr { {  }, bool }, self_311, !1100
        v3037 = load v3036, !1096
        v3038 = const u64 0
        v3039 = get_elem_ptr v3037, __ptr {  }, v3038, !1101
        v3040 = get_local __ptr string<2>, __anon_016, !1096
        mem_copy_val v3040, v3035
        v3041 = cast_ptr v3040 to ptr, !1102
        v3042 = get_local __ptr { ptr, u64 }, __anon_1110, !1103
        v3043 = const u64 0
        v3044 = get_elem_ptr v3042, __ptr ptr, v3043, !1096
        store v3041 to v3044, !1104
        v3045 = const u64 1
        v3046 = get_elem_ptr v3042, __ptr u64, v3045, !1096
        v3047 = const u64 2
        store v3047 to v3046, !1105
        v3048 = get_local __ptr slice, __anon_2110, !1106
        mem_copy_bytes v3048, v3042, 16, !1096
        v3049 = get_local __ptr {  }, __tmp_arg209
        mem_copy_val v3049, v3039
        v3050 = get_local __ptr slice, __tmp_arg210
        mem_copy_val v3050, v3048
        v3051 = call print_str_1(v3049, v3050)
        br fmt_115_field_117_block2(), !1096

        fmt_115_field_117_block2():
        v3052 = get_local __ptr { b256 }, value_10, !1107
        v3053 = get_local __ptr __ptr { {  }, bool }, self_311, !1108
        v3054 = load v3053, !1096
        v3055 = const u64 0
        v3056 = get_elem_ptr v3054, __ptr {  }, v3055, !1109
        v3057 = get_local __ptr { b256 }, __tmp_arg354
        mem_copy_val v3057, v3052
        v3058 = call fmt_113(v3057, v3056)
        v3059 = get_local __ptr __ptr { {  }, bool }, self_311, !1110
        v3060 = load v3059, !1096
        v3061 = const u64 1
        v3062 = get_elem_ptr v3060, __ptr bool, v3061, !1111
        v3063 = const bool true, !417
        store v3063 to v3062, !1112
        v3064 = get_local __ptr __ptr { {  }, bool }, self_311, !1113
        v3065 = load v3064, !1096
        v3066 = get_local __ptr { {  }, bool }, __tmp_block_arg23
        mem_copy_val v3066, v3065
        v3067 = get_local __ptr { {  }, bool }, type_fix2
        mem_copy_val v3067, v3066
        v3068 = call finish_66(v3067), !1116
        br fmt_115_block5()

        fmt_115_block3():
        v3069 = const u64 14757395258967588866, !1052
        revert v3069, !1052

        fmt_115_block5():
        v3070 = get_local __ptr string<1>, __const125
        v3071 = get_local __ptr {  }, f_93, !1049
        v3072 = get_local __ptr string<1>, __anon_345
        mem_copy_val v3072, v3070
        v3073 = cast_ptr v3072 to ptr, !1049
        v3074 = get_local __ptr { ptr, u64 }, __anon_346, !1049
        v3075 = const u64 0
        v3076 = get_elem_ptr v3074, __ptr ptr, v3075
        store v3073 to v3076, !1049
        v3077 = const u64 1
        v3078 = get_elem_ptr v3074, __ptr u64, v3077
        v3079 = const u64 1
        store v3079 to v3078, !1049
        v3080 = get_local __ptr slice, __anon_347, !1049
        mem_copy_bytes v3080, v3074, 16
        v3081 = get_local __ptr {  }, __tmp_arg211
        mem_copy_val v3081, v3071
        v3082 = get_local __ptr slice, __tmp_arg212
        mem_copy_val v3082, v3080
        v3083 = call print_str_1(v3081, v3082)
        v3084 = get_local __ptr {  }, f_93, !1049
        v3085 = get_local __ptr {  }, self_56, !1049
        mem_copy_val v3085, v3084
        v3086 = get_global __ptr u64, std::debug::STDERR, !1117
        v3087 = get_local __ptr u64, fd_45, !1118
        mem_copy_val v3087, v3086
        v3088 = get_local __ptr u64, fd_45, !1119
        v3089 = load v3088, !1120
        v3090 = asm(id: v57, fd: v3089) -> (), !1121 {
            ecal   id fd zero zero, !103
        }
        v3091 = get_local __ptr string<47>, __const126
        v3092 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, arg_94
        v3093 = get_local __ptr { u64, ( { b256 } | { b256 } ) }, _______________________________________________, !1122
        mem_copy_val v3093, v3092
        v3094 = get_local __ptr { u64 }, __anon_348, !1124
        v3095 = const u64 0
        v3096 = get_elem_ptr v3094, __ptr u64, v3095, !1124
        v3097 = const u64 0, !1124
        store v3097 to v3096, !1124
        v3098 = get_local __ptr { u64 }, arg_96
        mem_copy_val v3098, v3094
        v3099 = get_local __ptr {  }, __anon_349, !1125
        v3100 = get_local __ptr {  }, f_95
        mem_copy_val v3100, v3099
        v3101 = get_local __ptr {  }, f_95, !1125
        v3102 = get_local __ptr string<47>, __anon_350
        mem_copy_val v3102, v3091
        v3103 = cast_ptr v3102 to ptr, !1125
        v3104 = get_local __ptr { ptr, u64 }, __anon_351, !1125
        v3105 = const u64 0
        v3106 = get_elem_ptr v3104, __ptr ptr, v3105
        store v3103 to v3106, !1125
        v3107 = const u64 1
        v3108 = get_elem_ptr v3104, __ptr u64, v3107
        v3109 = const u64 47
        store v3109 to v3108, !1125
        v3110 = get_local __ptr slice, __anon_352, !1125
        mem_copy_bytes v3110, v3104, 16
        v3111 = get_local __ptr {  }, __tmp_arg213
        mem_copy_val v3111, v3101
        v3112 = get_local __ptr slice, __tmp_arg214
        mem_copy_val v3112, v3110
        v3113 = call print_str_1(v3111, v3112)
        v3114 = get_local __ptr { u64 }, arg_96
        v3115 = get_local __ptr {  }, f_95
        v3116 = get_local __ptr { u64 }, self_57
        mem_copy_val v3116, v3114
        v3117 = get_local __ptr __ptr {  }, _f_4
        store v3115 to v3117
        v3118 = get_local __ptr { u64 }, self_57, !1127
        v3119 = get_local __ptr { u64 }, __matched_value_13, !1128
        mem_copy_val v3119, v3118
        v3120 = get_local __ptr { u64 }, __matched_value_13, !1127
        v3121 = const u64 0
        v3122 = get_elem_ptr v3120, __ptr u64, v3121, !1127
        v3123 = get_local __ptr u64, self_09, !1131
        mem_copy_val v3123, v3122
        v3124 = get_local __ptr u64, other_8, !1131
        v3125 = const u64 0, !1127
        store v3125 to v3124, !1131
        v3126 = get_local __ptr u64, self_09, !1132
        v3127 = load v3126, !1131
        v3128 = get_local __ptr u64, other_8, !1133
        v3129 = load v3128, !1131
        v3130 = cmp eq v3127 v3129, !1131
        cbr v3130, fmt_118_block0(), fmt_118_block1(), !1129

        fmt_118_block0():
        v3131 = get_local __ptr string<4>, __const127
        v3132 = get_local __ptr __ptr {  }, _f_4, !1134
        v3133 = load v3132
        v3134 = get_local __ptr string<4>, __anon_017
        mem_copy_val v3134, v3131
        v3135 = cast_ptr v3134 to ptr, !1135
        v3136 = get_local __ptr { ptr, u64 }, __anon_1109, !1135
        v3137 = const u64 0
        v3138 = get_elem_ptr v3136, __ptr ptr, v3137
        store v3135 to v3138, !1135
        v3139 = const u64 1
        v3140 = get_elem_ptr v3136, __ptr u64, v3139
        v3141 = const u64 4
        store v3141 to v3140, !1135
        v3142 = get_local __ptr slice, __anon_2107, !1135
        mem_copy_bytes v3142, v3136, 16
        v3143 = get_local __ptr {  }, __tmp_arg215
        mem_copy_val v3143, v3133
        v3144 = get_local __ptr slice, __tmp_arg216
        mem_copy_val v3144, v3142
        v3145 = call print_str_1(v3143, v3144)
        br fmt_118_block8()

        fmt_118_block1():
        v3146 = get_local __ptr { u64 }, __matched_value_13, !1127
        v3147 = const u64 0
        v3148 = get_elem_ptr v3146, __ptr u64, v3147, !1127
        v3149 = get_local __ptr u64, self_117, !1138
        mem_copy_val v3149, v3148
        v3150 = get_local __ptr u64, other_06, !1138
        v3151 = const u64 1, !1127
        store v3151 to v3150, !1138
        v3152 = get_local __ptr u64, self_117, !1139
        v3153 = load v3152, !1138
        v3154 = get_local __ptr u64, other_06, !1140
        v3155 = load v3154, !1138
        v3156 = cmp eq v3153 v3155, !1138
        cbr v3156, fmt_118_block2(), fmt_118_block3(), !1136

        fmt_118_block2():
        v3157 = get_local __ptr string<8>, __const128
        v3158 = get_local __ptr __ptr {  }, _f_4, !1141
        v3159 = load v3158
        v3160 = get_local __ptr string<8>, __anon_3104
        mem_copy_val v3160, v3157
        v3161 = cast_ptr v3160 to ptr, !1142
        v3162 = get_local __ptr { ptr, u64 }, __anon_445, !1142
        v3163 = const u64 0
        v3164 = get_elem_ptr v3162, __ptr ptr, v3163
        store v3161 to v3164, !1142
        v3165 = const u64 1
        v3166 = get_elem_ptr v3162, __ptr u64, v3165
        v3167 = const u64 8
        store v3167 to v3166, !1142
        v3168 = get_local __ptr slice, __anon_514, !1142
        mem_copy_bytes v3168, v3162, 16
        v3169 = get_local __ptr {  }, __tmp_arg217
        mem_copy_val v3169, v3159
        v3170 = get_local __ptr slice, __tmp_arg218
        mem_copy_val v3170, v3168
        v3171 = call print_str_1(v3169, v3170)
        br fmt_118_block8()

        fmt_118_block3():
        v3172 = get_local __ptr { u64 }, __matched_value_13, !1127
        v3173 = const u64 0
        v3174 = get_elem_ptr v3172, __ptr u64, v3173, !1127
        v3175 = get_local __ptr u64, self_214, !1145
        mem_copy_val v3175, v3174
        v3176 = get_local __ptr u64, other_11, !1145
        v3177 = const u64 2, !1127
        store v3177 to v3176, !1145
        v3178 = get_local __ptr u64, self_214, !1146
        v3179 = load v3178, !1145
        v3180 = get_local __ptr u64, other_11, !1147
        v3181 = load v3180, !1145
        v3182 = cmp eq v3179 v3181, !1145
        cbr v3182, fmt_118_block4(), fmt_118_block5(), !1143

        fmt_118_block4():
        v3183 = get_local __ptr string<7>, __const129
        v3184 = get_local __ptr __ptr {  }, _f_4, !1148
        v3185 = load v3184
        v3186 = get_local __ptr string<7>, __anon_610
        mem_copy_val v3186, v3183
        v3187 = cast_ptr v3186 to ptr, !1149
        v3188 = get_local __ptr { ptr, u64 }, __anon_710, !1149
        v3189 = const u64 0
        v3190 = get_elem_ptr v3188, __ptr ptr, v3189
        store v3187 to v3190, !1149
        v3191 = const u64 1
        v3192 = get_elem_ptr v3188, __ptr u64, v3191
        v3193 = const u64 7
        store v3193 to v3192, !1149
        v3194 = get_local __ptr slice, __anon_810, !1149
        mem_copy_bytes v3194, v3188, 16
        v3195 = get_local __ptr {  }, __tmp_arg219
        mem_copy_val v3195, v3185
        v3196 = get_local __ptr slice, __tmp_arg220
        mem_copy_val v3196, v3194
        v3197 = call print_str_1(v3195, v3196)
        br fmt_118_block8()

        fmt_118_block5():
        v3198 = const u64 14757395258967588866, !1128
        revert v3198, !1128

        fmt_118_block8():
        v3199 = get_local __ptr string<1>, __const130
        v3200 = get_local __ptr {  }, f_95, !1125
        v3201 = get_local __ptr string<1>, __anon_353
        mem_copy_val v3201, v3199
        v3202 = cast_ptr v3201 to ptr, !1125
        v3203 = get_local __ptr { ptr, u64 }, __anon_354, !1125
        v3204 = const u64 0
        v3205 = get_elem_ptr v3203, __ptr ptr, v3204
        store v3202 to v3205, !1125
        v3206 = const u64 1
        v3207 = get_elem_ptr v3203, __ptr u64, v3206
        v3208 = const u64 1
        store v3208 to v3207, !1125
        v3209 = get_local __ptr slice, __anon_355, !1125
        mem_copy_bytes v3209, v3203, 16
        v3210 = get_local __ptr {  }, __tmp_arg221
        mem_copy_val v3210, v3200
        v3211 = get_local __ptr slice, __tmp_arg222
        mem_copy_val v3211, v3209
        v3212 = call print_str_1(v3210, v3211)
        v3213 = get_local __ptr {  }, f_95, !1125
        v3214 = get_local __ptr {  }, self_58, !1125
        mem_copy_val v3214, v3213
        v3215 = get_global __ptr u64, std::debug::STDERR, !1150
        v3216 = get_local __ptr u64, fd_46, !1151
        mem_copy_val v3216, v3215
        v3217 = get_local __ptr u64, fd_46, !1152
        v3218 = load v3217, !1153
        v3219 = asm(id: v57, fd: v3218) -> (), !1154 {
            ecal   id fd zero zero, !103
        }
        v3220 = get_local __ptr b256, __const131
        v3221 = get_local __ptr { u64 }, arg_96
        v3222 = get_local __ptr { u64 }, ________________________________________________, !1155
        mem_copy_val v3222, v3221
        v3223 = get_local __ptr b256, __tmp_block_arg24
        mem_copy_val v3223, v3220
        v3224 = get_local __ptr { b256 }, __anon_018, !1158
        v3225 = get_elem_ptr v3224, __ptr b256, v2044, !1159
        mem_copy_val v3225, v3223
        v3226 = get_local __ptr { b256 }, __tmp_block_arg25
        mem_copy_val v3226, v3224
        v3227 = get_local __ptr string<130>, __const132
        v3228 = get_local __ptr string<10>, __const133
        v3229 = get_local __ptr string<5>, __const134
        v3230 = get_local __ptr string<8>, __const135
        v3231 = get_local __ptr { u64, { b256 }, u64 }, __anon_356, !1160
        v3232 = const u64 0
        v3233 = get_elem_ptr v3231, __ptr u64, v3232
        v3234 = const u64 1, !1161
        store v3234 to v3233, !1160
        v3235 = const u64 1
        v3236 = get_elem_ptr v3231, __ptr { b256 }, v3235
        mem_copy_val v3236, v3226
        v3237 = const u64 2
        v3238 = get_elem_ptr v3231, __ptr u64, v3237
        v3239 = const u64 2, !1162
        store v3239 to v3238, !1160
        v3240 = get_local __ptr { u64, { b256 }, u64 }, arg_98
        mem_copy_val v3240, v3231
        v3241 = get_local __ptr {  }, __anon_357, !1163
        v3242 = get_local __ptr {  }, f_97
        mem_copy_val v3242, v3241
        v3243 = get_local __ptr {  }, f_97, !1163
        v3244 = get_local __ptr string<130>, __anon_358
        mem_copy_val v3244, v3227
        v3245 = cast_ptr v3244 to ptr, !1163
        v3246 = get_local __ptr { ptr, u64 }, __anon_359, !1163
        v3247 = const u64 0
        v3248 = get_elem_ptr v3246, __ptr ptr, v3247
        store v3245 to v3248, !1163
        v3249 = const u64 1
        v3250 = get_elem_ptr v3246, __ptr u64, v3249
        v3251 = const u64 130
        store v3251 to v3250, !1163
        v3252 = get_local __ptr slice, __anon_360, !1163
        mem_copy_bytes v3252, v3246, 16
        v3253 = get_local __ptr {  }, __tmp_arg223
        mem_copy_val v3253, v3243
        v3254 = get_local __ptr slice, __tmp_arg224
        mem_copy_val v3254, v3252
        v3255 = call print_str_1(v3253, v3254)
        v3256 = get_local __ptr { u64, { b256 }, u64 }, arg_98
        v3257 = get_local __ptr {  }, f_97
        v3258 = get_local __ptr { u64, { b256 }, u64 }, self_59
        mem_copy_val v3258, v3256
        v3259 = get_local __ptr __ptr {  }, _f_5
        store v3257 to v3259
        v3260 = get_local __ptr __ptr {  }, _f_5, !1165
        v3261 = load v3260
        v3262 = get_local __ptr string<10>, __anon_019
        mem_copy_val v3262, v3228
        v3263 = cast_ptr v3262 to ptr, !1166
        v3264 = get_local __ptr { ptr, u64 }, __anon_1111, !1166
        v3265 = const u64 0
        v3266 = get_elem_ptr v3264, __ptr ptr, v3265
        store v3263 to v3266, !1166
        v3267 = const u64 1
        v3268 = get_elem_ptr v3264, __ptr u64, v3267
        v3269 = const u64 10
        store v3269 to v3268, !1166
        v3270 = get_local __ptr slice, __anon_2108, !1166
        mem_copy_bytes v3270, v3264, 16
        v3271 = get_local __ptr {  }, __tmp_arg341
        mem_copy_val v3271, v3261
        v3272 = get_local __ptr slice, __tmp_arg342
        mem_copy_val v3272, v3270
        v3273 = get_local __ptr { {  }, bool }, __ret_val15
        v3274 = call debug_struct_77(v3271, v3272, v3273)
        v3275 = get_local __ptr { {  }, bool }, __aggr_memcpy_014
        mem_copy_val v3275, v3274
        v3276 = get_local __ptr string<5>, __anon_3105
        mem_copy_val v3276, v3229
        v3277 = cast_ptr v3276 to ptr, !1167
        v3278 = get_local __ptr { ptr, u64 }, __anon_446, !1167
        v3279 = const u64 0
        v3280 = get_elem_ptr v3278, __ptr ptr, v3279
        store v3277 to v3280, !1167
        v3281 = const u64 1
        v3282 = get_elem_ptr v3278, __ptr u64, v3281
        v3283 = const u64 5
        store v3283 to v3282, !1167
        v3284 = get_local __ptr slice, __anon_515, !1167
        mem_copy_bytes v3284, v3278, 16
        v3285 = get_local __ptr { u64, { b256 }, u64 }, self_59, !1168
        v3286 = const u64 0
        v3287 = get_elem_ptr v3285, __ptr u64, v3286, !1170
        v3288 = load v3287
        v3289 = get_local __ptr { {  }, bool }, type_fix3
        mem_copy_val v3289, v3275
        v3290 = get_local __ptr slice, __tmp_arg355
        mem_copy_val v3290, v3284
        v3291 = get_local __ptr { {  }, bool }, __ret_val18
        v3292 = call field_120(v3289, v3290, v3288, v3291)
        v3293 = get_local __ptr { {  }, bool }, __aggr_memcpy_015
        mem_copy_val v3293, v3292
        v3294 = get_local __ptr string<8>, __anon_611
        mem_copy_val v3294, v3230
        v3295 = cast_ptr v3294 to ptr, !1171
        v3296 = get_local __ptr { ptr, u64 }, __anon_711, !1171
        v3297 = const u64 0
        v3298 = get_elem_ptr v3296, __ptr ptr, v3297
        store v3295 to v3298, !1171
        v3299 = const u64 1
        v3300 = get_elem_ptr v3296, __ptr u64, v3299
        v3301 = const u64 8
        store v3301 to v3300, !1171
        v3302 = get_local __ptr slice, __anon_811, !1171
        mem_copy_bytes v3302, v3296, 16
        v3303 = get_local __ptr { u64, { b256 }, u64 }, self_59, !1172
        v3304 = const u64 1
        v3305 = get_elem_ptr v3303, __ptr { b256 }, v3304, !1173
        v3306 = get_local __ptr { {  }, bool }, type_fix01
        mem_copy_val v3306, v3293
        v3307 = get_local __ptr __ptr { {  }, bool }, self_011, !1176
        store v3306 to v3307, !1176
        v3308 = get_local __ptr slice, name_0, !1176
        mem_copy_val v3308, v3302
        v3309 = get_local __ptr { b256 }, value_2, !1176
        mem_copy_val v3309, v3305
        v3310 = get_local __ptr __ptr { {  }, bool }, self_011, !1177
        v3311 = load v3310, !1176
        v3312 = const u64 1
        v3313 = get_elem_ptr v3311, __ptr bool, v3312, !1178
        v3314 = load v3313, !1176
        cbr v3314, fmt_119_field_121_block0(), fmt_119_field_121_block2(), !1179

        fmt_119_field_121_block0():
        v3315 = get_local __ptr string<2>, __const136
        v3316 = get_local __ptr __ptr { {  }, bool }, self_011, !1180
        v3317 = load v3316, !1176
        v3318 = const u64 0
        v3319 = get_elem_ptr v3317, __ptr {  }, v3318, !1181
        v3320 = get_local __ptr string<2>, __anon_005, !1176
        mem_copy_val v3320, v3315
        v3321 = cast_ptr v3320 to ptr, !1182
        v3322 = get_local __ptr { ptr, u64 }, __anon_1210, !1183
        v3323 = const u64 0
        v3324 = get_elem_ptr v3322, __ptr ptr, v3323, !1176
        store v3321 to v3324, !1184
        v3325 = const u64 1
        v3326 = get_elem_ptr v3322, __ptr u64, v3325, !1176
        v3327 = const u64 2
        store v3327 to v3326, !1185
        v3328 = get_local __ptr slice, __anon_2013, !1186
        mem_copy_bytes v3328, v3322, 16, !1176
        v3329 = get_local __ptr {  }, __tmp_arg225
        mem_copy_val v3329, v3319
        v3330 = get_local __ptr slice, __tmp_arg226
        mem_copy_val v3330, v3328
        v3331 = call print_str_1(v3329, v3330)
        br fmt_119_field_121_block2(), !1176

        fmt_119_field_121_block2():
        v3332 = get_local __ptr string<2>, __const137
        v3333 = get_local __ptr __ptr { {  }, bool }, self_011, !1187
        v3334 = load v3333, !1176
        v3335 = const u64 0
        v3336 = get_elem_ptr v3334, __ptr {  }, v3335, !1188
        v3337 = get_local __ptr slice, name_0, !1189
        v3338 = get_local __ptr {  }, __tmp_arg227
        mem_copy_val v3338, v3336
        v3339 = get_local __ptr slice, __tmp_arg228
        mem_copy_val v3339, v3337
        v3340 = call print_str_1(v3338, v3339)
        v3341 = get_local __ptr __ptr { {  }, bool }, self_011, !1190
        v3342 = load v3341, !1176
        v3343 = const u64 0
        v3344 = get_elem_ptr v3342, __ptr {  }, v3343, !1191
        v3345 = get_local __ptr string<2>, __anon_3011, !1176
        mem_copy_val v3345, v3332
        v3346 = cast_ptr v3345 to ptr, !1192
        v3347 = get_local __ptr { ptr, u64 }, __anon_4011, !1193
        v3348 = const u64 0
        v3349 = get_elem_ptr v3347, __ptr ptr, v3348, !1176
        store v3346 to v3349, !1194
        v3350 = const u64 1
        v3351 = get_elem_ptr v3347, __ptr u64, v3350, !1176
        v3352 = const u64 2
        store v3352 to v3351, !1195
        v3353 = get_local __ptr slice, __anon_501, !1196
        mem_copy_bytes v3353, v3347, 16, !1176
        v3354 = get_local __ptr {  }, __tmp_arg229
        mem_copy_val v3354, v3344
        v3355 = get_local __ptr slice, __tmp_arg230
        mem_copy_val v3355, v3353
        v3356 = call print_str_1(v3354, v3355)
        v3357 = get_local __ptr { b256 }, value_2, !1197
        v3358 = get_local __ptr __ptr { {  }, bool }, self_011, !1198
        v3359 = load v3358, !1176
        v3360 = const u64 0
        v3361 = get_elem_ptr v3359, __ptr {  }, v3360, !1199
        v3362 = get_local __ptr { b256 }, __tmp_arg352
        mem_copy_val v3362, v3357
        v3363 = call fmt_85(v3362, v3361)
        v3364 = get_local __ptr __ptr { {  }, bool }, self_011, !1200
        v3365 = load v3364, !1176
        v3366 = const u64 1
        v3367 = get_elem_ptr v3365, __ptr bool, v3366, !1201
        v3368 = const bool true, !755
        store v3368 to v3367, !1202
        v3369 = get_local __ptr __ptr { {  }, bool }, self_011, !1203
        v3370 = load v3369, !1176
        v3371 = get_local __ptr { {  }, bool }, __tmp_block_arg26
        mem_copy_val v3371, v3370
        v3372 = get_local __ptr string<3>, __const138
        v3373 = get_local __ptr string<3>, __anon_910
        mem_copy_val v3373, v3372
        v3374 = cast_ptr v3373 to ptr, !1204
        v3375 = get_local __ptr { ptr, u64 }, __anon_1013, !1204
        v3376 = const u64 0
        v3377 = get_elem_ptr v3375, __ptr ptr, v3376
        store v3374 to v3377, !1204
        v3378 = const u64 1
        v3379 = get_elem_ptr v3375, __ptr u64, v3378
        v3380 = const u64 3
        store v3380 to v3379, !1204
        v3381 = get_local __ptr slice, __anon_1112, !1204
        mem_copy_bytes v3381, v3375, 16
        v3382 = get_local __ptr { u64, { b256 }, u64 }, self_59, !1205
        v3383 = const u64 2
        v3384 = get_elem_ptr v3382, __ptr u64, v3383, !1206
        v3385 = load v3384
        v3386 = get_local __ptr { {  }, bool }, type_fix11
        mem_copy_val v3386, v3371
        v3387 = get_local __ptr slice, __tmp_arg356
        mem_copy_val v3387, v3381
        v3388 = get_local __ptr { {  }, bool }, __ret_val19
        v3389 = call field_120(v3386, v3387, v3385, v3388)
        v3390 = get_local __ptr { {  }, bool }, __aggr_memcpy_016
        mem_copy_val v3390, v3389
        v3391 = get_local __ptr { {  }, bool }, type_fix20
        mem_copy_val v3391, v3390
        v3392 = call finish_76(v3391), !1209
        v3393 = get_local __ptr string<1>, __const139
        v3394 = get_local __ptr {  }, f_97, !1163
        v3395 = get_local __ptr string<1>, __anon_361
        mem_copy_val v3395, v3393
        v3396 = cast_ptr v3395 to ptr, !1163
        v3397 = get_local __ptr { ptr, u64 }, __anon_362, !1163
        v3398 = const u64 0
        v3399 = get_elem_ptr v3397, __ptr ptr, v3398
        store v3396 to v3399, !1163
        v3400 = const u64 1
        v3401 = get_elem_ptr v3397, __ptr u64, v3400
        v3402 = const u64 1
        store v3402 to v3401, !1163
        v3403 = get_local __ptr slice, __anon_363, !1163
        mem_copy_bytes v3403, v3397, 16
        v3404 = get_local __ptr {  }, __tmp_arg231
        mem_copy_val v3404, v3394
        v3405 = get_local __ptr slice, __tmp_arg232
        mem_copy_val v3405, v3403
        v3406 = call print_str_1(v3404, v3405)
        v3407 = get_local __ptr {  }, f_97, !1163
        v3408 = get_local __ptr {  }, self_60, !1163
        mem_copy_val v3408, v3407
        v3409 = get_global __ptr u64, std::debug::STDERR, !1210
        v3410 = get_local __ptr u64, fd_47, !1211
        mem_copy_val v3410, v3409
        v3411 = get_local __ptr u64, fd_47, !1212
        v3412 = load v3411, !1213
        v3413 = asm(id: v57, fd: v3412) -> (), !1214 {
            ecal   id fd zero zero, !103
        }
        v3414 = get_local __ptr string<53>, __const140
        v3415 = get_local __ptr { u64, { b256 }, u64 }, arg_98
        v3416 = get_local __ptr { u64, { b256 }, u64 }, _________________________________________________, !1215
        mem_copy_val v3416, v3415
        v3417 = get_local __ptr { u64, ( () | u8 ) }, __anon_364, !863
        v3418 = const u64 0
        v3419 = get_elem_ptr v3417, __ptr u64, v3418, !863
        v3420 = const u64 1, !863
        store v3420 to v3419, !863
        v3421 = const u64 1
        v3422 = const u64 1
        v3423 = get_elem_ptr v3417, __ptr u8, v3421, v3422, !863
        v3424 = const u8 1, !1216
        store v3424 to v3423, !863
        v3425 = get_local __ptr { u64, ( () | u8 ) }, arg_100
        mem_copy_val v3425, v3417
        v3426 = get_local __ptr {  }, __anon_365, !1217
        v3427 = get_local __ptr {  }, f_99
        mem_copy_val v3427, v3426
        v3428 = get_local __ptr {  }, f_99, !1217
        v3429 = get_local __ptr string<53>, __anon_366
        mem_copy_val v3429, v3414
        v3430 = cast_ptr v3429 to ptr, !1217
        v3431 = get_local __ptr { ptr, u64 }, __anon_367, !1217
        v3432 = const u64 0
        v3433 = get_elem_ptr v3431, __ptr ptr, v3432
        store v3430 to v3433, !1217
        v3434 = const u64 1
        v3435 = get_elem_ptr v3431, __ptr u64, v3434
        v3436 = const u64 53
        store v3436 to v3435, !1217
        v3437 = get_local __ptr slice, __anon_368, !1217
        mem_copy_bytes v3437, v3431, 16
        v3438 = get_local __ptr {  }, __tmp_arg233
        mem_copy_val v3438, v3428
        v3439 = get_local __ptr slice, __tmp_arg234
        mem_copy_val v3439, v3437
        v3440 = call print_str_1(v3438, v3439)
        v3441 = get_local __ptr { u64, ( () | u8 ) }, arg_100
        v3442 = get_local __ptr {  }, f_99
        v3443 = get_local __ptr { u64, ( () | u8 ) }, self_61
        mem_copy_val v3443, v3441
        v3444 = get_local __ptr __ptr {  }, _f_6
        store v3442 to v3444
        v3445 = get_local __ptr { u64, ( () | u8 ) }, self_61, !1219
        v3446 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_14, !1220
        mem_copy_val v3446, v3445
        v3447 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_14, !1219
        v3448 = const u64 0
        v3449 = get_elem_ptr v3447, __ptr u64, v3448, !1219
        v3450 = get_local __ptr u64, self_012, !1223
        mem_copy_val v3450, v3449
        v3451 = get_local __ptr u64, other_9, !1223
        v3452 = const u64 0, !1219
        store v3452 to v3451, !1223
        v3453 = get_local __ptr u64, self_012, !1224
        v3454 = load v3453, !1223
        v3455 = get_local __ptr u64, other_9, !1225
        v3456 = load v3455, !1223
        v3457 = cmp eq v3454 v3456, !1223
        cbr v3457, fmt_122_block0(), fmt_122_block1(), !1221

        fmt_122_block0():
        v3458 = get_local __ptr string<4>, __const141
        v3459 = get_local __ptr __ptr {  }, _f_6, !1226
        v3460 = load v3459
        v3461 = get_local __ptr string<4>, __anon_020
        mem_copy_val v3461, v3458
        v3462 = cast_ptr v3461 to ptr, !1227
        v3463 = get_local __ptr { ptr, u64 }, __anon_1113, !1227
        v3464 = const u64 0
        v3465 = get_elem_ptr v3463, __ptr ptr, v3464
        store v3462 to v3465, !1227
        v3466 = const u64 1
        v3467 = get_elem_ptr v3463, __ptr u64, v3466
        v3468 = const u64 4
        store v3468 to v3467, !1227
        v3469 = get_local __ptr slice, __anon_2109, !1227
        mem_copy_bytes v3469, v3463, 16
        v3470 = get_local __ptr {  }, __tmp_arg235
        mem_copy_val v3470, v3460
        v3471 = get_local __ptr slice, __tmp_arg236
        mem_copy_val v3471, v3469
        v3472 = call print_str_1(v3470, v3471)
        br fmt_122_block5()

        fmt_122_block1():
        v3473 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_14, !1219
        v3474 = const u64 0
        v3475 = get_elem_ptr v3473, __ptr u64, v3474, !1219
        v3476 = get_local __ptr u64, self_118, !1230
        mem_copy_val v3476, v3475
        v3477 = get_local __ptr u64, other_07, !1230
        v3478 = const u64 1, !1219
        store v3478 to v3477, !1230
        v3479 = get_local __ptr u64, self_118, !1231
        v3480 = load v3479, !1230
        v3481 = get_local __ptr u64, other_07, !1232
        v3482 = load v3481, !1230
        v3483 = cmp eq v3480 v3482, !1230
        cbr v3483, fmt_122_block2(), fmt_122_block3(), !1228

        fmt_122_block2():
        v3484 = get_local __ptr string<6>, __const142
        v3485 = get_local __ptr { u64, ( () | u8 ) }, __matched_value_14, !1219
        v3486 = const u64 1
        v3487 = const u64 1
        v3488 = get_elem_ptr v3485, __ptr u8, v3486, v3487
        v3489 = get_local __ptr u8, value0, !1233
        mem_copy_val v3489, v3488
        v3490 = get_local __ptr __ptr {  }, _f_6, !1234
        v3491 = load v3490
        v3492 = get_local __ptr string<6>, __anon_3106
        mem_copy_val v3492, v3484
        v3493 = cast_ptr v3492 to ptr, !1235
        v3494 = get_local __ptr { ptr, u64 }, __anon_447, !1235
        v3495 = const u64 0
        v3496 = get_elem_ptr v3494, __ptr ptr, v3495
        store v3493 to v3496, !1235
        v3497 = const u64 1
        v3498 = get_elem_ptr v3494, __ptr u64, v3497
        v3499 = const u64 6
        store v3499 to v3498, !1235
        v3500 = get_local __ptr slice, __anon_516, !1235
        mem_copy_bytes v3500, v3494, 16
        v3501 = get_local __ptr {  }, __tmp_arg328
        mem_copy_val v3501, v3491
        v3502 = get_local __ptr slice, __tmp_arg329
        mem_copy_val v3502, v3500
        v3503 = get_local __ptr { {  }, bool }, __ret_val2
        v3504 = call debug_tuple_62(v3501, v3502, v3503)
        v3505 = get_local __ptr { {  }, bool }, __aggr_memcpy_017
        mem_copy_val v3505, v3504
        v3506 = get_local __ptr u8, value0, !1236
        v3507 = load v3506
        v3508 = get_local __ptr { {  }, bool }, type_fix4
        mem_copy_val v3508, v3505
        v3509 = get_local __ptr { {  }, bool }, __ret_val6
        v3510 = call field_65(v3508, v3507, v3509)
        v3511 = get_local __ptr { {  }, bool }, __aggr_memcpy_018
        mem_copy_val v3511, v3510
        v3512 = get_local __ptr { {  }, bool }, type_fix02
        mem_copy_val v3512, v3511
        v3513 = call finish_66(v3512), !1239
        br fmt_122_block5()

        fmt_122_block3():
        v3514 = const u64 14757395258967588866, !1220
        revert v3514, !1220

        fmt_122_block5():
        v3515 = get_local __ptr string<1>, __const143
        v3516 = get_local __ptr {  }, f_99, !1217
        v3517 = get_local __ptr string<1>, __anon_369
        mem_copy_val v3517, v3515
        v3518 = cast_ptr v3517 to ptr, !1217
        v3519 = get_local __ptr { ptr, u64 }, __anon_370, !1217
        v3520 = const u64 0
        v3521 = get_elem_ptr v3519, __ptr ptr, v3520
        store v3518 to v3521, !1217
        v3522 = const u64 1
        v3523 = get_elem_ptr v3519, __ptr u64, v3522
        v3524 = const u64 1
        store v3524 to v3523, !1217
        v3525 = get_local __ptr slice, __anon_371, !1217
        mem_copy_bytes v3525, v3519, 16
        v3526 = get_local __ptr {  }, __tmp_arg237
        mem_copy_val v3526, v3516
        v3527 = get_local __ptr slice, __tmp_arg238
        mem_copy_val v3527, v3525
        v3528 = call print_str_1(v3526, v3527)
        v3529 = get_local __ptr {  }, f_99, !1217
        v3530 = get_local __ptr {  }, self_62, !1217
        mem_copy_val v3530, v3529
        v3531 = get_global __ptr u64, std::debug::STDERR, !1240
        v3532 = get_local __ptr u64, fd_48, !1241
        mem_copy_val v3532, v3531
        v3533 = get_local __ptr u64, fd_48, !1242
        v3534 = load v3533, !1243
        v3535 = asm(id: v57, fd: v3534) -> (), !1244 {
            ecal   id fd zero zero, !103
        }
        v3536 = get_local __ptr string<49>, __const144
        v3537 = get_local __ptr { u64, ( () | u8 ) }, arg_100
        v3538 = get_local __ptr { u64, ( () | u8 ) }, __________________________________________________, !1245
        mem_copy_val v3538, v3537
        v3539 = get_local __ptr { u64 }, __anon_372, !1247
        v3540 = const u64 0
        v3541 = get_elem_ptr v3539, __ptr u64, v3540, !1247
        v3542 = const u64 0, !1247
        store v3542 to v3541, !1247
        v3543 = get_local __ptr { u64 }, arg_102
        mem_copy_val v3543, v3539
        v3544 = get_local __ptr {  }, __anon_373, !1248
        v3545 = get_local __ptr {  }, f_101
        mem_copy_val v3545, v3544
        v3546 = get_local __ptr {  }, f_101, !1248
        v3547 = get_local __ptr string<49>, __anon_374
        mem_copy_val v3547, v3536
        v3548 = cast_ptr v3547 to ptr, !1248
        v3549 = get_local __ptr { ptr, u64 }, __anon_375, !1248
        v3550 = const u64 0
        v3551 = get_elem_ptr v3549, __ptr ptr, v3550
        store v3548 to v3551, !1248
        v3552 = const u64 1
        v3553 = get_elem_ptr v3549, __ptr u64, v3552
        v3554 = const u64 49
        store v3554 to v3553, !1248
        v3555 = get_local __ptr slice, __anon_376, !1248
        mem_copy_bytes v3555, v3549, 16
        v3556 = get_local __ptr {  }, __tmp_arg239
        mem_copy_val v3556, v3546
        v3557 = get_local __ptr slice, __tmp_arg240
        mem_copy_val v3557, v3555
        v3558 = call print_str_1(v3556, v3557)
        v3559 = get_local __ptr { u64 }, arg_102
        v3560 = get_local __ptr {  }, f_101
        v3561 = get_local __ptr { u64 }, self_63
        mem_copy_val v3561, v3559
        v3562 = get_local __ptr __ptr {  }, _f_7
        store v3560 to v3562
        v3563 = get_local __ptr { u64 }, self_63, !1250
        v3564 = get_local __ptr { u64 }, __matched_value_15, !1251
        mem_copy_val v3564, v3563
        v3565 = get_local __ptr { u64 }, __matched_value_15, !1250
        v3566 = const u64 0
        v3567 = get_elem_ptr v3565, __ptr u64, v3566, !1250
        v3568 = get_local __ptr u64, self_013, !1254
        mem_copy_val v3568, v3567
        v3569 = get_local __ptr u64, other_12, !1254
        v3570 = const u64 0, !1250
        store v3570 to v3569, !1254
        v3571 = get_local __ptr u64, self_013, !1255
        v3572 = load v3571, !1254
        v3573 = get_local __ptr u64, other_12, !1256
        v3574 = load v3573, !1254
        v3575 = cmp eq v3572 v3574, !1254
        cbr v3575, fmt_123_block0(), fmt_123_block1(), !1252

        fmt_123_block0():
        v3576 = get_local __ptr string<4>, __const145
        v3577 = get_local __ptr __ptr {  }, _f_7, !1257
        v3578 = load v3577
        v3579 = get_local __ptr string<4>, __anon_021
        mem_copy_val v3579, v3576
        v3580 = cast_ptr v3579 to ptr, !1258
        v3581 = get_local __ptr { ptr, u64 }, __anon_1114, !1258
        v3582 = const u64 0
        v3583 = get_elem_ptr v3581, __ptr ptr, v3582
        store v3580 to v3583, !1258
        v3584 = const u64 1
        v3585 = get_elem_ptr v3581, __ptr u64, v3584
        v3586 = const u64 4
        store v3586 to v3585, !1258
        v3587 = get_local __ptr slice, __anon_2111, !1258
        mem_copy_bytes v3587, v3581, 16
        v3588 = get_local __ptr {  }, __tmp_arg241
        mem_copy_val v3588, v3578
        v3589 = get_local __ptr slice, __tmp_arg242
        mem_copy_val v3589, v3587
        v3590 = call print_str_1(v3588, v3589)
        br fmt_123_block14()

        fmt_123_block1():
        v3591 = get_local __ptr { u64 }, __matched_value_15, !1250
        v3592 = const u64 0
        v3593 = get_elem_ptr v3591, __ptr u64, v3592, !1250
        v3594 = get_local __ptr u64, self_119, !1261
        mem_copy_val v3594, v3593
        v3595 = get_local __ptr u64, other_08, !1261
        v3596 = const u64 1, !1250
        store v3596 to v3595, !1261
        v3597 = get_local __ptr u64, self_119, !1262
        v3598 = load v3597, !1261
        v3599 = get_local __ptr u64, other_08, !1263
        v3600 = load v3599, !1261
        v3601 = cmp eq v3598 v3600, !1261
        cbr v3601, fmt_123_block2(), fmt_123_block3(), !1259

        fmt_123_block2():
        v3602 = get_local __ptr string<8>, __const146
        v3603 = get_local __ptr __ptr {  }, _f_7, !1264
        v3604 = load v3603
        v3605 = get_local __ptr string<8>, __anon_3107
        mem_copy_val v3605, v3602
        v3606 = cast_ptr v3605 to ptr, !1265
        v3607 = get_local __ptr { ptr, u64 }, __anon_448, !1265
        v3608 = const u64 0
        v3609 = get_elem_ptr v3607, __ptr ptr, v3608
        store v3606 to v3609, !1265
        v3610 = const u64 1
        v3611 = get_elem_ptr v3607, __ptr u64, v3610
        v3612 = const u64 8
        store v3612 to v3611, !1265
        v3613 = get_local __ptr slice, __anon_517, !1265
        mem_copy_bytes v3613, v3607, 16
        v3614 = get_local __ptr {  }, __tmp_arg243
        mem_copy_val v3614, v3604
        v3615 = get_local __ptr slice, __tmp_arg244
        mem_copy_val v3615, v3613
        v3616 = call print_str_1(v3614, v3615)
        br fmt_123_block14()

        fmt_123_block3():
        v3617 = get_local __ptr { u64 }, __matched_value_15, !1250
        v3618 = const u64 0
        v3619 = get_elem_ptr v3617, __ptr u64, v3618, !1250
        v3620 = get_local __ptr u64, self_215, !1268
        mem_copy_val v3620, v3619
        v3621 = get_local __ptr u64, other_13, !1268
        v3622 = const u64 2, !1250
        store v3622 to v3621, !1268
        v3623 = get_local __ptr u64, self_215, !1269
        v3624 = load v3623, !1268
        v3625 = get_local __ptr u64, other_13, !1270
        v3626 = load v3625, !1268
        v3627 = cmp eq v3624 v3626, !1268
        cbr v3627, fmt_123_block4(), fmt_123_block5(), !1266

        fmt_123_block4():
        v3628 = get_local __ptr string<6>, __const147
        v3629 = get_local __ptr __ptr {  }, _f_7, !1271
        v3630 = load v3629
        v3631 = get_local __ptr string<6>, __anon_612
        mem_copy_val v3631, v3628
        v3632 = cast_ptr v3631 to ptr, !1272
        v3633 = get_local __ptr { ptr, u64 }, __anon_712, !1272
        v3634 = const u64 0
        v3635 = get_elem_ptr v3633, __ptr ptr, v3634
        store v3632 to v3635, !1272
        v3636 = const u64 1
        v3637 = get_elem_ptr v3633, __ptr u64, v3636
        v3638 = const u64 6
        store v3638 to v3637, !1272
        v3639 = get_local __ptr slice, __anon_812, !1272
        mem_copy_bytes v3639, v3633, 16
        v3640 = get_local __ptr {  }, __tmp_arg245
        mem_copy_val v3640, v3630
        v3641 = get_local __ptr slice, __tmp_arg246
        mem_copy_val v3641, v3639
        v3642 = call print_str_1(v3640, v3641)
        br fmt_123_block14()

        fmt_123_block5():
        v3643 = get_local __ptr { u64 }, __matched_value_15, !1250
        v3644 = const u64 0
        v3645 = get_elem_ptr v3643, __ptr u64, v3644, !1250
        v3646 = get_local __ptr u64, self_312, !1275
        mem_copy_val v3646, v3645
        v3647 = get_local __ptr u64, other_21, !1275
        v3648 = const u64 3, !1250
        store v3648 to v3647, !1275
        v3649 = get_local __ptr u64, self_312, !1276
        v3650 = load v3649, !1275
        v3651 = get_local __ptr u64, other_21, !1277
        v3652 = load v3651, !1275
        v3653 = cmp eq v3650 v3652, !1275
        cbr v3653, fmt_123_block6(), fmt_123_block7(), !1273

        fmt_123_block6():
        v3654 = get_local __ptr string<8>, __const148
        v3655 = get_local __ptr __ptr {  }, _f_7, !1278
        v3656 = load v3655
        v3657 = get_local __ptr string<8>, __anon_911
        mem_copy_val v3657, v3654
        v3658 = cast_ptr v3657 to ptr, !1279
        v3659 = get_local __ptr { ptr, u64 }, __anon_1014, !1279
        v3660 = const u64 0
        v3661 = get_elem_ptr v3659, __ptr ptr, v3660
        store v3658 to v3661, !1279
        v3662 = const u64 1
        v3663 = get_elem_ptr v3659, __ptr u64, v3662
        v3664 = const u64 8
        store v3664 to v3663, !1279
        v3665 = get_local __ptr slice, __anon_1115, !1279
        mem_copy_bytes v3665, v3659, 16
        v3666 = get_local __ptr {  }, __tmp_arg247
        mem_copy_val v3666, v3656
        v3667 = get_local __ptr slice, __tmp_arg248
        mem_copy_val v3667, v3665
        v3668 = call print_str_1(v3666, v3667)
        br fmt_123_block14()

        fmt_123_block7():
        v3669 = get_local __ptr { u64 }, __matched_value_15, !1250
        v3670 = const u64 0
        v3671 = get_elem_ptr v3669, __ptr u64, v3670, !1250
        v3672 = get_local __ptr u64, self_411, !1282
        mem_copy_val v3672, v3671
        v3673 = get_local __ptr u64, other_30, !1282
        v3674 = const u64 4, !1250
        store v3674 to v3673, !1282
        v3675 = get_local __ptr u64, self_411, !1283
        v3676 = load v3675, !1282
        v3677 = get_local __ptr u64, other_30, !1284
        v3678 = load v3677, !1282
        v3679 = cmp eq v3676 v3678, !1282
        cbr v3679, fmt_123_block8(), fmt_123_block9(), !1280

        fmt_123_block8():
        v3680 = get_local __ptr string<15>, __const149
        v3681 = get_local __ptr __ptr {  }, _f_7, !1285
        v3682 = load v3681
        v3683 = get_local __ptr string<15>, __anon_1211
        mem_copy_val v3683, v3680
        v3684 = cast_ptr v3683 to ptr, !1286
        v3685 = get_local __ptr { ptr, u64 }, __anon_1310, !1286
        v3686 = const u64 0
        v3687 = get_elem_ptr v3685, __ptr ptr, v3686
        store v3684 to v3687, !1286
        v3688 = const u64 1
        v3689 = get_elem_ptr v3685, __ptr u64, v3688
        v3690 = const u64 15
        store v3690 to v3689, !1286
        v3691 = get_local __ptr slice, __anon_1410, !1286
        mem_copy_bytes v3691, v3685, 16
        v3692 = get_local __ptr {  }, __tmp_arg249
        mem_copy_val v3692, v3682
        v3693 = get_local __ptr slice, __tmp_arg250
        mem_copy_val v3693, v3691
        v3694 = call print_str_1(v3692, v3693)
        br fmt_123_block14()

        fmt_123_block9():
        v3695 = const u64 14757395258967588866, !1251
        revert v3695, !1251

        fmt_123_block14():
        v3696 = get_local __ptr string<1>, __const150
        v3697 = get_local __ptr {  }, f_101, !1248
        v3698 = get_local __ptr string<1>, __anon_377
        mem_copy_val v3698, v3696
        v3699 = cast_ptr v3698 to ptr, !1248
        v3700 = get_local __ptr { ptr, u64 }, __anon_378, !1248
        v3701 = const u64 0
        v3702 = get_elem_ptr v3700, __ptr ptr, v3701
        store v3699 to v3702, !1248
        v3703 = const u64 1
        v3704 = get_elem_ptr v3700, __ptr u64, v3703
        v3705 = const u64 1
        store v3705 to v3704, !1248
        v3706 = get_local __ptr slice, __anon_379, !1248
        mem_copy_bytes v3706, v3700, 16
        v3707 = get_local __ptr {  }, __tmp_arg251
        mem_copy_val v3707, v3697
        v3708 = get_local __ptr slice, __tmp_arg252
        mem_copy_val v3708, v3706
        v3709 = call print_str_1(v3707, v3708)
        v3710 = get_local __ptr {  }, f_101, !1248
        v3711 = get_local __ptr {  }, self_64, !1248
        mem_copy_val v3711, v3710
        v3712 = get_global __ptr u64, std::debug::STDERR, !1287
        v3713 = get_local __ptr u64, fd_49, !1288
        mem_copy_val v3713, v3712
        v3714 = get_local __ptr u64, fd_49, !1289
        v3715 = load v3714, !1290
        v3716 = asm(id: v57, fd: v3715) -> (), !1291 {
            ecal   id fd zero zero, !103
        }
        v3717 = get_local __ptr { u64 }, arg_102
        v3718 = get_local __ptr { u64 }, ___________________________________________________, !1292
        mem_copy_val v3718, v3717
        v3719 = get_local __ptr { u64, ( u64 | u64 ) }, __anon_022, !1297
        v3720 = const u64 0
        v3721 = get_elem_ptr v3719, __ptr u64, v3720, !1298
        v3722 = const u64 0, !1296
        store v3722 to v3721, !1299
        v3723 = const u64 1
        v3724 = const u64 0
        v3725 = get_elem_ptr v3719, __ptr u64, v3723, v3724, !1300
        v3726 = const u64 1, !1301
        store v3726 to v3725, !1302
        v3727 = get_local __ptr { u64, ( u64 | u64 ) }, __tmp_block_arg27
        mem_copy_val v3727, v3719
        v3728 = get_local __ptr string<26>, __const151
        v3729 = get_local __ptr { u64, ( u64 | u64 ) }, arg_104
        mem_copy_val v3729, v3727
        v3730 = get_local __ptr {  }, __anon_380, !1303
        v3731 = get_local __ptr {  }, f_103
        mem_copy_val v3731, v3730
        v3732 = get_local __ptr {  }, f_103, !1303
        v3733 = get_local __ptr string<26>, __anon_381
        mem_copy_val v3733, v3728
        v3734 = cast_ptr v3733 to ptr, !1303
        v3735 = get_local __ptr { ptr, u64 }, __anon_382, !1303
        v3736 = const u64 0
        v3737 = get_elem_ptr v3735, __ptr ptr, v3736
        store v3734 to v3737, !1303
        v3738 = const u64 1
        v3739 = get_elem_ptr v3735, __ptr u64, v3738
        v3740 = const u64 26
        store v3740 to v3739, !1303
        v3741 = get_local __ptr slice, __anon_383, !1303
        mem_copy_bytes v3741, v3735, 16
        v3742 = get_local __ptr {  }, __tmp_arg253
        mem_copy_val v3742, v3732
        v3743 = get_local __ptr slice, __tmp_arg254
        mem_copy_val v3743, v3741
        v3744 = call print_str_1(v3742, v3743)
        v3745 = get_local __ptr { u64, ( u64 | u64 ) }, arg_104
        v3746 = get_local __ptr {  }, f_103
        v3747 = get_local __ptr { u64, ( u64 | u64 ) }, self_65
        mem_copy_val v3747, v3745
        v3748 = get_local __ptr __ptr {  }, _f_8
        store v3746 to v3748
        v3749 = get_local __ptr { u64, ( u64 | u64 ) }, self_65, !1305
        v3750 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1306
        mem_copy_val v3750, v3749
        v3751 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1305
        v3752 = const u64 0
        v3753 = get_elem_ptr v3751, __ptr u64, v3752, !1305
        v3754 = get_local __ptr u64, self_014, !1309
        mem_copy_val v3754, v3753
        v3755 = get_local __ptr u64, other_14, !1309
        v3756 = const u64 0, !1305
        store v3756 to v3755, !1309
        v3757 = get_local __ptr u64, self_014, !1310
        v3758 = load v3757, !1309
        v3759 = get_local __ptr u64, other_14, !1311
        v3760 = load v3759, !1309
        v3761 = cmp eq v3758 v3760, !1309
        cbr v3761, fmt_125_block0(), fmt_125_block1(), !1307

        fmt_125_block0():
        v3762 = get_local __ptr string<6>, __const152
        v3763 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1305
        v3764 = const u64 1
        v3765 = const u64 0
        v3766 = get_elem_ptr v3763, __ptr u64, v3764, v3765
        v3767 = get_local __ptr u64, value1, !1312
        mem_copy_val v3767, v3766
        v3768 = get_local __ptr __ptr {  }, _f_8, !1313
        v3769 = load v3768
        v3770 = get_local __ptr string<6>, __anon_023
        mem_copy_val v3770, v3762
        v3771 = cast_ptr v3770 to ptr, !1314
        v3772 = get_local __ptr { ptr, u64 }, __anon_1116, !1314
        v3773 = const u64 0
        v3774 = get_elem_ptr v3772, __ptr ptr, v3773
        store v3771 to v3774, !1314
        v3775 = const u64 1
        v3776 = get_elem_ptr v3772, __ptr u64, v3775
        v3777 = const u64 6
        store v3777 to v3776, !1314
        v3778 = get_local __ptr slice, __anon_2112, !1314
        mem_copy_bytes v3778, v3772, 16
        v3779 = get_local __ptr {  }, __tmp_arg330
        mem_copy_val v3779, v3769
        v3780 = get_local __ptr slice, __tmp_arg331
        mem_copy_val v3780, v3778
        v3781 = get_local __ptr { {  }, bool }, __ret_val3
        v3782 = call debug_tuple_62(v3779, v3780, v3781)
        v3783 = get_local __ptr { {  }, bool }, __aggr_memcpy_019
        mem_copy_val v3783, v3782
        v3784 = get_local __ptr u64, value1, !1315
        v3785 = load v3784
        v3786 = get_local __ptr { {  }, bool }, type_fix5
        mem_copy_val v3786, v3783
        v3787 = get_local __ptr { {  }, bool }, __ret_val23
        v3788 = call field_126(v3786, v3785, v3787)
        v3789 = get_local __ptr { {  }, bool }, __aggr_memcpy_020
        mem_copy_val v3789, v3788
        v3790 = get_local __ptr { {  }, bool }, type_fix03
        mem_copy_val v3790, v3789
        v3791 = call finish_66(v3790), !1318
        br fmt_125_block5()

        fmt_125_block1():
        v3792 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1305
        v3793 = const u64 0
        v3794 = get_elem_ptr v3792, __ptr u64, v3793, !1305
        v3795 = get_local __ptr u64, self_120, !1321
        mem_copy_val v3795, v3794
        v3796 = get_local __ptr u64, other_09, !1321
        v3797 = const u64 1, !1305
        store v3797 to v3796, !1321
        v3798 = get_local __ptr u64, self_120, !1322
        v3799 = load v3798, !1321
        v3800 = get_local __ptr u64, other_09, !1323
        v3801 = load v3800, !1321
        v3802 = cmp eq v3799 v3801, !1321
        cbr v3802, fmt_125_block2(), fmt_125_block3(), !1319

        fmt_125_block2():
        v3803 = get_local __ptr string<6>, __const153
        v3804 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1305
        v3805 = const u64 1
        v3806 = const u64 1
        v3807 = get_elem_ptr v3804, __ptr u64, v3805, v3806
        v3808 = get_local __ptr u64, value_3, !1324
        mem_copy_val v3808, v3807
        v3809 = get_local __ptr __ptr {  }, _f_8, !1325
        v3810 = load v3809
        v3811 = get_local __ptr string<6>, __anon_3108
        mem_copy_val v3811, v3803
        v3812 = cast_ptr v3811 to ptr, !1326
        v3813 = get_local __ptr { ptr, u64 }, __anon_449, !1326
        v3814 = const u64 0
        v3815 = get_elem_ptr v3813, __ptr ptr, v3814
        store v3812 to v3815, !1326
        v3816 = const u64 1
        v3817 = get_elem_ptr v3813, __ptr u64, v3816
        v3818 = const u64 6
        store v3818 to v3817, !1326
        v3819 = get_local __ptr slice, __anon_518, !1326
        mem_copy_bytes v3819, v3813, 16
        v3820 = get_local __ptr {  }, __tmp_arg332
        mem_copy_val v3820, v3810
        v3821 = get_local __ptr slice, __tmp_arg333
        mem_copy_val v3821, v3819
        v3822 = get_local __ptr { {  }, bool }, __ret_val4
        v3823 = call debug_tuple_62(v3820, v3821, v3822)
        v3824 = get_local __ptr { {  }, bool }, __aggr_memcpy_021
        mem_copy_val v3824, v3823
        v3825 = get_local __ptr u64, value_3, !1327
        v3826 = load v3825
        v3827 = get_local __ptr { {  }, bool }, type_fix12
        mem_copy_val v3827, v3824
        v3828 = get_local __ptr { {  }, bool }, __ret_val24
        v3829 = call field_126(v3827, v3826, v3828)
        v3830 = get_local __ptr { {  }, bool }, __aggr_memcpy_022
        mem_copy_val v3830, v3829
        v3831 = get_local __ptr { {  }, bool }, type_fix21
        mem_copy_val v3831, v3830
        v3832 = call finish_66(v3831), !1330
        br fmt_125_block5()

        fmt_125_block3():
        v3833 = const u64 14757395258967588866, !1306
        revert v3833, !1306

        fmt_125_block5():
        v3834 = get_local __ptr string<1>, __const154
        v3835 = get_local __ptr {  }, f_103, !1303
        v3836 = get_local __ptr string<1>, __anon_384
        mem_copy_val v3836, v3834
        v3837 = cast_ptr v3836 to ptr, !1303
        v3838 = get_local __ptr { ptr, u64 }, __anon_385, !1303
        v3839 = const u64 0
        v3840 = get_elem_ptr v3838, __ptr ptr, v3839
        store v3837 to v3840, !1303
        v3841 = const u64 1
        v3842 = get_elem_ptr v3838, __ptr u64, v3841
        v3843 = const u64 1
        store v3843 to v3842, !1303
        v3844 = get_local __ptr slice, __anon_386, !1303
        mem_copy_bytes v3844, v3838, 16
        v3845 = get_local __ptr {  }, __tmp_arg255
        mem_copy_val v3845, v3835
        v3846 = get_local __ptr slice, __tmp_arg256
        mem_copy_val v3846, v3844
        v3847 = call print_str_1(v3845, v3846)
        v3848 = get_local __ptr {  }, f_103, !1303
        v3849 = get_local __ptr {  }, self_66, !1303
        mem_copy_val v3849, v3848
        v3850 = get_global __ptr u64, std::debug::STDERR, !1331
        v3851 = get_local __ptr u64, fd_50, !1332
        mem_copy_val v3851, v3850
        v3852 = get_local __ptr u64, fd_50, !1333
        v3853 = load v3852, !1334
        v3854 = asm(id: v57, fd: v3853) -> (), !1335 {
            ecal   id fd zero zero, !103
        }
        v3855 = get_local __ptr string<5>, __const155
        v3856 = get_local __ptr { u64, ( u64 | u64 ) }, arg_104
        v3857 = get_local __ptr { u64, ( u64 | u64 ) }, ____________________________________________________, !1336
        mem_copy_val v3857, v3856
        v3858 = get_local __ptr string<5>, __anon_387
        mem_copy_val v3858, v3855
        v3859 = cast_ptr v3858 to ptr, !1337
        v3860 = get_local __ptr { ptr, u64 }, __anon_388, !1337
        v3861 = const u64 0
        v3862 = get_elem_ptr v3860, __ptr ptr, v3861
        store v3859 to v3862, !1337
        v3863 = const u64 1
        v3864 = get_elem_ptr v3860, __ptr u64, v3863
        v3865 = const u64 5
        store v3865 to v3864, !1337
        v3866 = get_local __ptr slice, __anon_389, !1337
        mem_copy_bytes v3866, v3860, 16
        v3867 = get_local __ptr slice, s_0, !1340
        mem_copy_val v3867, v3866
        v3868 = get_local __ptr slice, s_0, !1343
        v3869 = get_local __ptr slice, __tmp_arg308
        mem_copy_val v3869, v3868
        v3870 = call len_4(v3869)
        v3871 = get_local __ptr u64, str_size0, !1345
        store v3870 to v3871, !1346
        v3872 = get_local __ptr slice, s_0, !1348
        v3873 = get_local __ptr slice, __tmp_arg307
        mem_copy_val v3873, v3872
        v3874 = call as_ptr_3(v3873)
        v3875 = get_local __ptr ptr, str_ptr, !1350
        store v3874 to v3875, !1351
        v3876 = get_local __ptr ptr, str_ptr, !1353
        v3877 = get_local __ptr u64, str_size0, !1355
        v3878 = get_local __ptr ptr, ptr_, !1358
        mem_copy_val v3878, v3876
        v3879 = get_local __ptr u64, count_0, !1359
        mem_copy_val v3879, v3877
        v3880 = get_local __ptr ptr, ptr_, !1362
        v3881 = get_local __ptr u64, count_0, !1364
        v3882 = get_local __ptr u64, self_67, !1367
        mem_copy_val v3882, v3881
        v3883 = get_local __ptr u64, other_15, !1368
        v3884 = const u64 1
        store v3884 to v3883, !1369
        v3885 = get_local __ptr u64, self_67, !1371
        v3886 = load v3885, !1372
        v3887 = get_local __ptr u64, other_15, !1374
        v3888 = load v3887, !1375
        v3889 = mul v3886, v3888, !1376
        v3890 = get_local __ptr { ptr, u64 }, __anon_006, !1378
        v3891 = const u64 0
        v3892 = get_elem_ptr v3890, __ptr ptr, v3891, !1379
        mem_copy_val v3892, v3880
        v3893 = const u64 1
        v3894 = get_elem_ptr v3890, __ptr u64, v3893, !1380
        store v3889 to v3894, !1381
        v3895 = get_local __ptr { ptr, u64 }, parts_, !1384
        mem_copy_val v3895, v3890
        v3896 = get_local __ptr { ptr, u64 }, parts_, !1386
        v3897 = asm(ptr: v3896) -> __ptr slice ptr {
        }
        v3898 = get_local __ptr slice, __aggr_memcpy_023
        mem_copy_val v3898, v3897
        v3899 = get_local __ptr slice, __tmp_block_arg28
        mem_copy_val v3899, v3898
        v3900 = get_local __ptr slice, __tmp_block_arg29
        mem_copy_val v3900, v3899
        v3901 = get_local __ptr slice, slice_, !1389
        mem_copy_val v3901, v3900
        v3902 = get_local __ptr slice, slice_, !1391
        v3903 = get_local __ptr slice, slice_0, !1394
        mem_copy_val v3903, v3902
        v3904 = get_local __ptr slice, slice_0, !1396
        v3905 = get_local __ptr slice, __tmp_arg360
        mem_copy_val v3905, v3904
        v3906 = call number_of_bytes_130(v3905)
        v3907 = get_local __ptr u64, cap, !1398
        store v3906 to v3907, !1399
        v3908 = get_local __ptr u64, cap, !1401
        v3909 = get_local __ptr u64, count_00, !1404
        mem_copy_val v3909, v3908
        v3910 = get_local __ptr u64, count_00, !1405
        v3911 = load v3910, !1406
        v3912 = asm(size: v3911) -> ptr hp, !1407 {
            aloc   size, !803
        }
        v3913 = get_local __ptr ptr, ptr0, !1409
        store v3912 to v3913, !1410
        v3914 = get_local __ptr u64, cap, !1412
        v3915 = get_local __ptr u64, self_015, !1415
        mem_copy_val v3915, v3914
        v3916 = get_local __ptr u64, other_010, !1416
        v3917 = const u64 0, !1417
        store v3917 to v3916, !1418
        v3918 = get_local __ptr u64, self_015, !1420
        v3919 = load v3918, !1421
        v3920 = get_local __ptr u64, other_010, !1423
        v3921 = load v3920, !1424
        v3922 = cmp gt v3919 v3921, !1425
        cbr v3922, from_ascii_str_127_from_128_from_129_block0(), from_ascii_str_127_from_128_from_129_block2(), !1426

        from_ascii_str_127_from_128_from_129_block0():
        v3923 = get_local __ptr slice, slice_0, !1428
        v3924 = get_local __ptr slice, self_002, !1431
        mem_copy_val v3924, v3923
        v3925 = get_local __ptr slice, self_002, !1433
        v3926 = get_local __ptr slice, slice_00, !1436
        mem_copy_val v3926, v3925
        v3927 = get_local __ptr slice, slice_00, !1438
        v3928 = asm(ptr: v3927) -> __ptr { ptr, u64 } ptr {
        }
        v3929 = get_local __ptr { ptr, u64 }, __aggr_memcpy_024
        mem_copy_val v3929, v3928
        v3930 = get_local __ptr { ptr, u64 }, __tmp_block_arg30
        mem_copy_val v3930, v3929
        v3931 = get_local __ptr { ptr, u64 }, __anon_00000, !1439
        mem_copy_val v3931, v3930
        v3932 = const u64 0
        v3933 = get_elem_ptr v3931, __ptr ptr, v3932, !1441
        v3934 = load v3933, !1442
        v3935 = get_local __ptr ptr, ptr0, !1444
        v3936 = get_local __ptr u64, cap, !1446
        v3937 = get_local __ptr ptr, self_121, !1449
        store v3934 to v3937, !1450
        v3938 = get_local __ptr ptr, dst_, !1451
        mem_copy_val v3938, v3935
        v3939 = get_local __ptr u64, count_000, !1452
        mem_copy_val v3939, v3936
        v3940 = get_local __ptr u64, count_000, !1454
        v3941 = get_local __ptr u64, self_0002, !1457
        mem_copy_val v3941, v3940
        v3942 = get_local __ptr u64, other_000, !1458
        v3943 = const u64 1
        store v3943 to v3942, !1459
        v3944 = get_local __ptr u64, self_0002, !1460
        v3945 = load v3944, !1461
        v3946 = get_local __ptr u64, other_000, !1462
        v3947 = load v3946, !1463
        v3948 = mul v3945, v3947, !1464
        v3949 = get_local __ptr u64, len0, !1466
        store v3948 to v3949, !1467
        v3950 = get_local __ptr ptr, dst_, !1469
        v3951 = load v3950, !1470
        v3952 = get_local __ptr ptr, self_121, !1472
        v3953 = load v3952, !1473
        v3954 = get_local __ptr u64, len0, !1475
        v3955 = load v3954, !1476
        v3956 = asm(dst: v3951, src: v3953, len: v3955) -> (), !1478 {
            mcp    dst src len, !1479
        }
        br from_ascii_str_127_from_128_from_129_block2(), !1480

        from_ascii_str_127_from_128_from_129_block2():
        v3957 = get_local __ptr ptr, ptr0, !1482
        v3958 = get_local __ptr u64, cap, !1484
        v3959 = get_local __ptr { ptr, u64 }, __anon_0001, !1486
        v3960 = const u64 0
        v3961 = get_elem_ptr v3959, __ptr ptr, v3960, !1487
        mem_copy_val v3961, v3957
        v3962 = const u64 1
        v3963 = get_elem_ptr v3959, __ptr u64, v3962, !1488
        mem_copy_val v3963, v3958
        v3964 = get_local __ptr { ptr, u64 }, __tmp_block_arg31
        mem_copy_val v3964, v3959
        v3965 = get_local __ptr slice, slice_, !1490
        v3966 = get_local __ptr slice, __tmp_arg361
        mem_copy_val v3966, v3965
        v3967 = call number_of_bytes_130(v3966)
        v3968 = get_local __ptr { { ptr, u64 }, u64 }, __anon_0110, !1492
        v3969 = const u64 0
        v3970 = get_elem_ptr v3968, __ptr { ptr, u64 }, v3969, !1493
        mem_copy_val v3970, v3964
        v3971 = const u64 1
        v3972 = get_elem_ptr v3968, __ptr u64, v3971, !1494
        store v3967 to v3972, !1495
        v3973 = get_local __ptr { { ptr, u64 }, u64 }, __tmp_block_arg32
        mem_copy_val v3973, v3968
        v3974 = get_local __ptr { { { ptr, u64 }, u64 } }, __anon_024, !1497
        v3975 = const u64 0
        v3976 = get_elem_ptr v3974, __ptr { { ptr, u64 }, u64 }, v3975, !1340
        mem_copy_val v3976, v3973
        v3977 = get_local __ptr { { { ptr, u64 }, u64 } }, __tmp_block_arg33
        mem_copy_val v3977, v3974
        v3978 = get_local __ptr string<67>, __const156
        v3979 = get_local __ptr { { { ptr, u64 }, u64 } }, arg_106
        mem_copy_val v3979, v3977
        v3980 = get_local __ptr {  }, __anon_390, !1498
        v3981 = get_local __ptr {  }, f_105
        mem_copy_val v3981, v3980
        v3982 = get_local __ptr {  }, f_105, !1498
        v3983 = get_local __ptr string<67>, __anon_391
        mem_copy_val v3983, v3978
        v3984 = cast_ptr v3983 to ptr, !1498
        v3985 = get_local __ptr { ptr, u64 }, __anon_392, !1498
        v3986 = const u64 0
        v3987 = get_elem_ptr v3985, __ptr ptr, v3986
        store v3984 to v3987, !1498
        v3988 = const u64 1
        v3989 = get_elem_ptr v3985, __ptr u64, v3988
        v3990 = const u64 67
        store v3990 to v3989, !1498
        v3991 = get_local __ptr slice, __anon_393, !1498
        mem_copy_bytes v3991, v3985, 16
        v3992 = get_local __ptr {  }, __tmp_arg257
        mem_copy_val v3992, v3982
        v3993 = get_local __ptr slice, __tmp_arg258
        mem_copy_val v3993, v3991
        v3994 = call print_str_1(v3992, v3993)
        v3995 = get_local __ptr { { { ptr, u64 }, u64 } }, arg_106
        v3996 = get_local __ptr {  }, f_105
        v3997 = get_local __ptr { { { ptr, u64 }, u64 } }, self_68
        mem_copy_val v3997, v3995
        v3998 = get_local __ptr __ptr {  }, f_12
        store v3996 to v3998
        v3999 = get_local __ptr { { { ptr, u64 }, u64 } }, self_68, !1499
        v4000 = const u64 0
        v4001 = get_elem_ptr v3999, __ptr { { ptr, u64 }, u64 }, v4000, !1500
        v4002 = get_local __ptr { { ptr, u64 }, u64 }, self_016, !1503
        mem_copy_val v4002, v4001
        v4003 = get_local __ptr { { ptr, u64 }, u64 }, self_016, !1505
        v4004 = const u64 0
        v4005 = get_elem_ptr v4003, __ptr { ptr, u64 }, v4004, !1506
        v4006 = const u64 0
        v4007 = get_elem_ptr v4005, __ptr ptr, v4006, !1507
        v4008 = load v4007, !1503
        v4009 = get_local __ptr { { { ptr, u64 }, u64 } }, self_68, !1508
        v4010 = const u64 0
        v4011 = get_elem_ptr v4009, __ptr { { ptr, u64 }, u64 }, v4010, !1500
        v4012 = get_local __ptr { { ptr, u64 }, u64 }, self_122, !1511
        mem_copy_val v4012, v4011
        v4013 = get_local __ptr { { ptr, u64 }, u64 }, self_122, !1513
        v4014 = const u64 1
        v4015 = get_elem_ptr v4013, __ptr u64, v4014, !1514
        v4016 = load v4015, !1511
        v4017 = get_local __ptr { ptr, u64 }, __anon_025, !1515
        v4018 = const u64 0
        v4019 = get_elem_ptr v4017, __ptr ptr, v4018, !1515
        store v4008 to v4019, !1515
        v4020 = const u64 1
        v4021 = get_elem_ptr v4017, __ptr u64, v4020, !1515
        store v4016 to v4021, !1515
        v4022 = asm(s: v4017) -> __ptr slice s {
        }
        v4023 = get_local __ptr slice, __aggr_memcpy_025
        mem_copy_val v4023, v4022
        v4024 = get_local __ptr slice, s, !1516
        mem_copy_val v4024, v4023
        v4025 = get_local __ptr __ptr {  }, f_12, !1517
        v4026 = load v4025
        v4027 = get_local __ptr {  }, __tmp_arg320
        mem_copy_val v4027, v4026
        v4028 = call print_string_quotes_58(v4027)
        v4029 = get_local __ptr __ptr {  }, f_12, !1518
        v4030 = load v4029
        v4031 = get_local __ptr slice, s, !1519
        v4032 = get_local __ptr {  }, __tmp_arg259
        mem_copy_val v4032, v4030
        v4033 = get_local __ptr slice, __tmp_arg260
        mem_copy_val v4033, v4031
        v4034 = call print_str_1(v4032, v4033)
        v4035 = get_local __ptr __ptr {  }, f_12, !1520
        v4036 = load v4035
        v4037 = get_local __ptr {  }, __tmp_arg321
        mem_copy_val v4037, v4036
        v4038 = call print_string_quotes_58(v4037)
        v4039 = get_local __ptr string<1>, __const157
        v4040 = get_local __ptr {  }, f_105, !1498
        v4041 = get_local __ptr string<1>, __anon_394
        mem_copy_val v4041, v4039
        v4042 = cast_ptr v4041 to ptr, !1498
        v4043 = get_local __ptr { ptr, u64 }, __anon_395, !1498
        v4044 = const u64 0
        v4045 = get_elem_ptr v4043, __ptr ptr, v4044
        store v4042 to v4045, !1498
        v4046 = const u64 1
        v4047 = get_elem_ptr v4043, __ptr u64, v4046
        v4048 = const u64 1
        store v4048 to v4047, !1498
        v4049 = get_local __ptr slice, __anon_396, !1498
        mem_copy_bytes v4049, v4043, 16
        v4050 = get_local __ptr {  }, __tmp_arg261
        mem_copy_val v4050, v4040
        v4051 = get_local __ptr slice, __tmp_arg262
        mem_copy_val v4051, v4049
        v4052 = call print_str_1(v4050, v4051)
        v4053 = get_local __ptr {  }, f_105, !1498
        v4054 = get_local __ptr {  }, self_69, !1498
        mem_copy_val v4054, v4053
        v4055 = get_global __ptr u64, std::debug::STDERR, !1521
        v4056 = get_local __ptr u64, fd_51, !1522
        mem_copy_val v4056, v4055
        v4057 = get_local __ptr u64, fd_51, !1523
        v4058 = load v4057, !1524
        v4059 = asm(id: v57, fd: v4058) -> (), !1525 {
            ecal   id fd zero zero, !103
        }
        v4060 = get_local __ptr string<51>, __const158
        v4061 = get_local __ptr { { { ptr, u64 }, u64 } }, arg_106
        v4062 = get_local __ptr { { { ptr, u64 }, u64 } }, _____________________________________________________, !1526
        mem_copy_val v4062, v4061
        v4063 = get_local __ptr { u64 }, __anon_397, !1528
        v4064 = const u64 0
        v4065 = get_elem_ptr v4063, __ptr u64, v4064, !1528
        v4066 = const u64 0, !1528
        store v4066 to v4065, !1528
        v4067 = get_local __ptr { u64 }, arg_108
        mem_copy_val v4067, v4063
        v4068 = get_local __ptr {  }, __anon_398, !1529
        v4069 = get_local __ptr {  }, f_107
        mem_copy_val v4069, v4068
        v4070 = get_local __ptr {  }, f_107, !1529
        v4071 = get_local __ptr string<51>, __anon_399
        mem_copy_val v4071, v4060
        v4072 = cast_ptr v4071 to ptr, !1529
        v4073 = get_local __ptr { ptr, u64 }, __anon_400, !1529
        v4074 = const u64 0
        v4075 = get_elem_ptr v4073, __ptr ptr, v4074
        store v4072 to v4075, !1529
        v4076 = const u64 1
        v4077 = get_elem_ptr v4073, __ptr u64, v4076
        v4078 = const u64 51
        store v4078 to v4077, !1529
        v4079 = get_local __ptr slice, __anon_401, !1529
        mem_copy_bytes v4079, v4073, 16
        v4080 = get_local __ptr {  }, __tmp_arg263
        mem_copy_val v4080, v4070
        v4081 = get_local __ptr slice, __tmp_arg264
        mem_copy_val v4081, v4079
        v4082 = call print_str_1(v4080, v4081)
        v4083 = get_local __ptr { u64 }, arg_108
        v4084 = get_local __ptr {  }, f_107
        v4085 = get_local __ptr { u64 }, self_70
        mem_copy_val v4085, v4083
        v4086 = get_local __ptr __ptr {  }, _f_9
        store v4084 to v4086
        v4087 = get_local __ptr { u64 }, self_70, !1531
        v4088 = get_local __ptr { u64 }, __matched_value_17, !1532
        mem_copy_val v4088, v4087
        v4089 = get_local __ptr { u64 }, __matched_value_17, !1531
        v4090 = const u64 0
        v4091 = get_elem_ptr v4089, __ptr u64, v4090, !1531
        v4092 = get_local __ptr u64, self_017, !1535
        mem_copy_val v4092, v4091
        v4093 = get_local __ptr u64, other_16, !1535
        v4094 = const u64 0, !1531
        store v4094 to v4093, !1535
        v4095 = get_local __ptr u64, self_017, !1536
        v4096 = load v4095, !1535
        v4097 = get_local __ptr u64, other_16, !1537
        v4098 = load v4097, !1535
        v4099 = cmp eq v4096 v4098, !1535
        cbr v4099, fmt_139_block0(), fmt_139_block1(), !1533

        fmt_139_block0():
        v4100 = get_local __ptr string<6>, __const159
        v4101 = get_local __ptr __ptr {  }, _f_9, !1538
        v4102 = load v4101
        v4103 = get_local __ptr string<6>, __anon_026
        mem_copy_val v4103, v4100
        v4104 = cast_ptr v4103 to ptr, !1539
        v4105 = get_local __ptr { ptr, u64 }, __anon_1117, !1539
        v4106 = const u64 0
        v4107 = get_elem_ptr v4105, __ptr ptr, v4106
        store v4104 to v4107, !1539
        v4108 = const u64 1
        v4109 = get_elem_ptr v4105, __ptr u64, v4108
        v4110 = const u64 6
        store v4110 to v4109, !1539
        v4111 = get_local __ptr slice, __anon_2113, !1539
        mem_copy_bytes v4111, v4105, 16
        v4112 = get_local __ptr {  }, __tmp_arg265
        mem_copy_val v4112, v4102
        v4113 = get_local __ptr slice, __tmp_arg266
        mem_copy_val v4113, v4111
        v4114 = call print_str_1(v4112, v4113)
        br fmt_139_block17()

        fmt_139_block1():
        v4115 = get_local __ptr { u64 }, __matched_value_17, !1531
        v4116 = const u64 0
        v4117 = get_elem_ptr v4115, __ptr u64, v4116, !1531
        v4118 = get_local __ptr u64, self_123, !1542
        mem_copy_val v4118, v4117
        v4119 = get_local __ptr u64, other_011, !1542
        v4120 = const u64 1, !1531
        store v4120 to v4119, !1542
        v4121 = get_local __ptr u64, self_123, !1543
        v4122 = load v4121, !1542
        v4123 = get_local __ptr u64, other_011, !1544
        v4124 = load v4123, !1542
        v4125 = cmp eq v4122 v4124, !1542
        cbr v4125, fmt_139_block2(), fmt_139_block3(), !1540

        fmt_139_block2():
        v4126 = get_local __ptr string<6>, __const160
        v4127 = get_local __ptr __ptr {  }, _f_9, !1545
        v4128 = load v4127
        v4129 = get_local __ptr string<6>, __anon_3109
        mem_copy_val v4129, v4126
        v4130 = cast_ptr v4129 to ptr, !1546
        v4131 = get_local __ptr { ptr, u64 }, __anon_450, !1546
        v4132 = const u64 0
        v4133 = get_elem_ptr v4131, __ptr ptr, v4132
        store v4130 to v4133, !1546
        v4134 = const u64 1
        v4135 = get_elem_ptr v4131, __ptr u64, v4134
        v4136 = const u64 6
        store v4136 to v4135, !1546
        v4137 = get_local __ptr slice, __anon_519, !1546
        mem_copy_bytes v4137, v4131, 16
        v4138 = get_local __ptr {  }, __tmp_arg267
        mem_copy_val v4138, v4128
        v4139 = get_local __ptr slice, __tmp_arg268
        mem_copy_val v4139, v4137
        v4140 = call print_str_1(v4138, v4139)
        br fmt_139_block17()

        fmt_139_block3():
        v4141 = get_local __ptr { u64 }, __matched_value_17, !1531
        v4142 = const u64 0
        v4143 = get_elem_ptr v4141, __ptr u64, v4142, !1531
        v4144 = get_local __ptr u64, self_216, !1549
        mem_copy_val v4144, v4143
        v4145 = get_local __ptr u64, other_17, !1549
        v4146 = const u64 2, !1531
        store v4146 to v4145, !1549
        v4147 = get_local __ptr u64, self_216, !1550
        v4148 = load v4147, !1549
        v4149 = get_local __ptr u64, other_17, !1551
        v4150 = load v4149, !1549
        v4151 = cmp eq v4148 v4150, !1549
        cbr v4151, fmt_139_block4(), fmt_139_block5(), !1547

        fmt_139_block4():
        v4152 = get_local __ptr string<4>, __const161
        v4153 = get_local __ptr __ptr {  }, _f_9, !1552
        v4154 = load v4153
        v4155 = get_local __ptr string<4>, __anon_613
        mem_copy_val v4155, v4152
        v4156 = cast_ptr v4155 to ptr, !1553
        v4157 = get_local __ptr { ptr, u64 }, __anon_713, !1553
        v4158 = const u64 0
        v4159 = get_elem_ptr v4157, __ptr ptr, v4158
        store v4156 to v4159, !1553
        v4160 = const u64 1
        v4161 = get_elem_ptr v4157, __ptr u64, v4160
        v4162 = const u64 4
        store v4162 to v4161, !1553
        v4163 = get_local __ptr slice, __anon_813, !1553
        mem_copy_bytes v4163, v4157, 16
        v4164 = get_local __ptr {  }, __tmp_arg269
        mem_copy_val v4164, v4154
        v4165 = get_local __ptr slice, __tmp_arg270
        mem_copy_val v4165, v4163
        v4166 = call print_str_1(v4164, v4165)
        br fmt_139_block17()

        fmt_139_block5():
        v4167 = get_local __ptr { u64 }, __matched_value_17, !1531
        v4168 = const u64 0
        v4169 = get_elem_ptr v4167, __ptr u64, v4168, !1531
        v4170 = get_local __ptr u64, self_313, !1556
        mem_copy_val v4170, v4169
        v4171 = get_local __ptr u64, other_22, !1556
        v4172 = const u64 3, !1531
        store v4172 to v4171, !1556
        v4173 = get_local __ptr u64, self_313, !1557
        v4174 = load v4173, !1556
        v4175 = get_local __ptr u64, other_22, !1558
        v4176 = load v4175, !1556
        v4177 = cmp eq v4174 v4176, !1556
        cbr v4177, fmt_139_block6(), fmt_139_block7(), !1554

        fmt_139_block6():
        v4178 = get_local __ptr string<7>, __const162
        v4179 = get_local __ptr __ptr {  }, _f_9, !1559
        v4180 = load v4179
        v4181 = get_local __ptr string<7>, __anon_912
        mem_copy_val v4181, v4178
        v4182 = cast_ptr v4181 to ptr, !1560
        v4183 = get_local __ptr { ptr, u64 }, __anon_1015, !1560
        v4184 = const u64 0
        v4185 = get_elem_ptr v4183, __ptr ptr, v4184
        store v4182 to v4185, !1560
        v4186 = const u64 1
        v4187 = get_elem_ptr v4183, __ptr u64, v4186
        v4188 = const u64 7
        store v4188 to v4187, !1560
        v4189 = get_local __ptr slice, __anon_1118, !1560
        mem_copy_bytes v4189, v4183, 16
        v4190 = get_local __ptr {  }, __tmp_arg271
        mem_copy_val v4190, v4180
        v4191 = get_local __ptr slice, __tmp_arg272
        mem_copy_val v4191, v4189
        v4192 = call print_str_1(v4190, v4191)
        br fmt_139_block17()

        fmt_139_block7():
        v4193 = get_local __ptr { u64 }, __matched_value_17, !1531
        v4194 = const u64 0
        v4195 = get_elem_ptr v4193, __ptr u64, v4194, !1531
        v4196 = get_local __ptr u64, self_412, !1563
        mem_copy_val v4196, v4195
        v4197 = get_local __ptr u64, other_31, !1563
        v4198 = const u64 4, !1531
        store v4198 to v4197, !1563
        v4199 = get_local __ptr u64, self_412, !1564
        v4200 = load v4199, !1563
        v4201 = get_local __ptr u64, other_31, !1565
        v4202 = load v4201, !1563
        v4203 = cmp eq v4200 v4202, !1563
        cbr v4203, fmt_139_block8(), fmt_139_block9(), !1561

        fmt_139_block8():
        v4204 = get_local __ptr string<6>, __const163
        v4205 = get_local __ptr __ptr {  }, _f_9, !1566
        v4206 = load v4205
        v4207 = get_local __ptr string<6>, __anon_1212
        mem_copy_val v4207, v4204
        v4208 = cast_ptr v4207 to ptr, !1567
        v4209 = get_local __ptr { ptr, u64 }, __anon_1311, !1567
        v4210 = const u64 0
        v4211 = get_elem_ptr v4209, __ptr ptr, v4210
        store v4208 to v4211, !1567
        v4212 = const u64 1
        v4213 = get_elem_ptr v4209, __ptr u64, v4212
        v4214 = const u64 6
        store v4214 to v4213, !1567
        v4215 = get_local __ptr slice, __anon_1411, !1567
        mem_copy_bytes v4215, v4209, 16
        v4216 = get_local __ptr {  }, __tmp_arg273
        mem_copy_val v4216, v4206
        v4217 = get_local __ptr slice, __tmp_arg274
        mem_copy_val v4217, v4215
        v4218 = call print_str_1(v4216, v4217)
        br fmt_139_block17()

        fmt_139_block9():
        v4219 = get_local __ptr { u64 }, __matched_value_17, !1531
        v4220 = const u64 0
        v4221 = get_elem_ptr v4219, __ptr u64, v4220, !1531
        v4222 = get_local __ptr u64, self_510, !1570
        mem_copy_val v4222, v4221
        v4223 = get_local __ptr u64, other_40, !1570
        v4224 = const u64 5, !1531
        store v4224 to v4223, !1570
        v4225 = get_local __ptr u64, self_510, !1571
        v4226 = load v4225, !1570
        v4227 = get_local __ptr u64, other_40, !1572
        v4228 = load v4227, !1570
        v4229 = cmp eq v4226 v4228, !1570
        cbr v4229, fmt_139_block10(), fmt_139_block11(), !1568

        fmt_139_block10():
        v4230 = get_local __ptr string<4>, __const164
        v4231 = get_local __ptr __ptr {  }, _f_9, !1573
        v4232 = load v4231
        v4233 = get_local __ptr string<4>, __anon_1510
        mem_copy_val v4233, v4230
        v4234 = cast_ptr v4233 to ptr, !1574
        v4235 = get_local __ptr { ptr, u64 }, __anon_1610, !1574
        v4236 = const u64 0
        v4237 = get_elem_ptr v4235, __ptr ptr, v4236
        store v4234 to v4237, !1574
        v4238 = const u64 1
        v4239 = get_elem_ptr v4235, __ptr u64, v4238
        v4240 = const u64 4
        store v4240 to v4239, !1574
        v4241 = get_local __ptr slice, __anon_1710, !1574
        mem_copy_bytes v4241, v4235, 16
        v4242 = get_local __ptr {  }, __tmp_arg275
        mem_copy_val v4242, v4232
        v4243 = get_local __ptr slice, __tmp_arg276
        mem_copy_val v4243, v4241
        v4244 = call print_str_1(v4242, v4243)
        br fmt_139_block17()

        fmt_139_block11():
        v4245 = const u64 14757395258967588866, !1532
        revert v4245, !1532

        fmt_139_block17():
        v4246 = get_local __ptr string<1>, __const165
        v4247 = get_local __ptr {  }, f_107, !1529
        v4248 = get_local __ptr string<1>, __anon_402
        mem_copy_val v4248, v4246
        v4249 = cast_ptr v4248 to ptr, !1529
        v4250 = get_local __ptr { ptr, u64 }, __anon_403, !1529
        v4251 = const u64 0
        v4252 = get_elem_ptr v4250, __ptr ptr, v4251
        store v4249 to v4252, !1529
        v4253 = const u64 1
        v4254 = get_elem_ptr v4250, __ptr u64, v4253
        v4255 = const u64 1
        store v4255 to v4254, !1529
        v4256 = get_local __ptr slice, __anon_404, !1529
        mem_copy_bytes v4256, v4250, 16
        v4257 = get_local __ptr {  }, __tmp_arg277
        mem_copy_val v4257, v4247
        v4258 = get_local __ptr slice, __tmp_arg278
        mem_copy_val v4258, v4256
        v4259 = call print_str_1(v4257, v4258)
        v4260 = get_local __ptr {  }, f_107, !1529
        v4261 = get_local __ptr {  }, self_71, !1529
        mem_copy_val v4261, v4260
        v4262 = get_global __ptr u64, std::debug::STDERR, !1575
        v4263 = get_local __ptr u64, fd_52, !1576
        mem_copy_val v4263, v4262
        v4264 = get_local __ptr u64, fd_52, !1577
        v4265 = load v4264, !1578
        v4266 = asm(id: v57, fd: v4265) -> (), !1579 {
            ecal   id fd zero zero, !103
        }
        v4267 = get_local __ptr { u64 }, arg_108
        v4268 = get_local __ptr { u64 }, ______________________________________________________, !1580
        mem_copy_val v4268, v4267
        v4269 = get_local __ptr { u64, u64 }, __anon_027, !1585
        v4270 = const u64 0
        v4271 = get_elem_ptr v4269, __ptr u64, v4270, !1586
        v4272 = const u64 0, !1587
        store v4272 to v4271, !1588
        v4273 = const u64 1
        v4274 = get_elem_ptr v4269, __ptr u64, v4273, !1586
        v4275 = const u64 0, !1589
        store v4275 to v4274, !1590
        v4276 = get_local __ptr { u64, u64 }, __tmp_block_arg34
        mem_copy_val v4276, v4269
        v4277 = get_local __ptr string<46>, __const166
        v4278 = get_local __ptr string<4>, __const167
        v4279 = get_local __ptr string<5>, __const168
        v4280 = get_local __ptr string<5>, __const169
        v4281 = get_local __ptr { u64, u64 }, arg_110
        mem_copy_val v4281, v4276
        v4282 = get_local __ptr {  }, __anon_405, !1591
        v4283 = get_local __ptr {  }, f_109
        mem_copy_val v4283, v4282
        v4284 = get_local __ptr {  }, f_109, !1591
        v4285 = get_local __ptr string<46>, __anon_406
        mem_copy_val v4285, v4277
        v4286 = cast_ptr v4285 to ptr, !1591
        v4287 = get_local __ptr { ptr, u64 }, __anon_407, !1591
        v4288 = const u64 0
        v4289 = get_elem_ptr v4287, __ptr ptr, v4288
        store v4286 to v4289, !1591
        v4290 = const u64 1
        v4291 = get_elem_ptr v4287, __ptr u64, v4290
        v4292 = const u64 46
        store v4292 to v4291, !1591
        v4293 = get_local __ptr slice, __anon_408, !1591
        mem_copy_bytes v4293, v4287, 16
        v4294 = get_local __ptr {  }, __tmp_arg279
        mem_copy_val v4294, v4284
        v4295 = get_local __ptr slice, __tmp_arg280
        mem_copy_val v4295, v4293
        v4296 = call print_str_1(v4294, v4295)
        v4297 = get_local __ptr { u64, u64 }, arg_110
        v4298 = get_local __ptr {  }, f_109
        v4299 = get_local __ptr { u64, u64 }, self_72
        mem_copy_val v4299, v4297
        v4300 = get_local __ptr __ptr {  }, _f_10
        store v4298 to v4300
        v4301 = get_local __ptr __ptr {  }, _f_10, !1593
        v4302 = load v4301
        v4303 = get_local __ptr string<4>, __anon_028
        mem_copy_val v4303, v4278
        v4304 = cast_ptr v4303 to ptr, !1594
        v4305 = get_local __ptr { ptr, u64 }, __anon_1119, !1594
        v4306 = const u64 0
        v4307 = get_elem_ptr v4305, __ptr ptr, v4306
        store v4304 to v4307, !1594
        v4308 = const u64 1
        v4309 = get_elem_ptr v4305, __ptr u64, v4308
        v4310 = const u64 4
        store v4310 to v4309, !1594
        v4311 = get_local __ptr slice, __anon_2114, !1594
        mem_copy_bytes v4311, v4305, 16
        v4312 = get_local __ptr {  }, __tmp_arg343
        mem_copy_val v4312, v4302
        v4313 = get_local __ptr slice, __tmp_arg344
        mem_copy_val v4313, v4311
        v4314 = get_local __ptr { {  }, bool }, __ret_val16
        v4315 = call debug_struct_77(v4312, v4313, v4314)
        v4316 = get_local __ptr { {  }, bool }, __aggr_memcpy_026
        mem_copy_val v4316, v4315
        v4317 = get_local __ptr string<5>, __anon_3110
        mem_copy_val v4317, v4279
        v4318 = cast_ptr v4317 to ptr, !1595
        v4319 = get_local __ptr { ptr, u64 }, __anon_451, !1595
        v4320 = const u64 0
        v4321 = get_elem_ptr v4319, __ptr ptr, v4320
        store v4318 to v4321, !1595
        v4322 = const u64 1
        v4323 = get_elem_ptr v4319, __ptr u64, v4322
        v4324 = const u64 5
        store v4324 to v4323, !1595
        v4325 = get_local __ptr slice, __anon_520, !1595
        mem_copy_bytes v4325, v4319, 16
        v4326 = get_local __ptr { u64, u64 }, self_72, !1596
        v4327 = const u64 0
        v4328 = get_elem_ptr v4326, __ptr u64, v4327, !1597
        v4329 = load v4328
        v4330 = get_local __ptr { {  }, bool }, type_fix6
        mem_copy_val v4330, v4316
        v4331 = get_local __ptr slice, __tmp_arg357
        mem_copy_val v4331, v4325
        v4332 = get_local __ptr { {  }, bool }, __ret_val20
        v4333 = call field_120(v4330, v4331, v4329, v4332)
        v4334 = get_local __ptr { {  }, bool }, __aggr_memcpy_027
        mem_copy_val v4334, v4333
        v4335 = get_local __ptr string<5>, __anon_614
        mem_copy_val v4335, v4280
        v4336 = cast_ptr v4335 to ptr, !1598
        v4337 = get_local __ptr { ptr, u64 }, __anon_714, !1598
        v4338 = const u64 0
        v4339 = get_elem_ptr v4337, __ptr ptr, v4338
        store v4336 to v4339, !1598
        v4340 = const u64 1
        v4341 = get_elem_ptr v4337, __ptr u64, v4340
        v4342 = const u64 5
        store v4342 to v4341, !1598
        v4343 = get_local __ptr slice, __anon_814, !1598
        mem_copy_bytes v4343, v4337, 16
        v4344 = get_local __ptr { u64, u64 }, self_72, !1599
        v4345 = const u64 1
        v4346 = get_elem_ptr v4344, __ptr u64, v4345, !1600
        v4347 = load v4346
        v4348 = get_local __ptr { {  }, bool }, type_fix04
        mem_copy_val v4348, v4334
        v4349 = get_local __ptr slice, __tmp_arg358
        mem_copy_val v4349, v4343
        v4350 = get_local __ptr { {  }, bool }, __ret_val21
        v4351 = call field_120(v4348, v4349, v4347, v4350)
        v4352 = get_local __ptr { {  }, bool }, __aggr_memcpy_028
        mem_copy_val v4352, v4351
        v4353 = get_local __ptr { {  }, bool }, type_fix13
        mem_copy_val v4353, v4352
        v4354 = call finish_76(v4353), !1603
        v4355 = get_local __ptr string<1>, __const170
        v4356 = get_local __ptr {  }, f_109, !1591
        v4357 = get_local __ptr string<1>, __anon_409
        mem_copy_val v4357, v4355
        v4358 = cast_ptr v4357 to ptr, !1591
        v4359 = get_local __ptr { ptr, u64 }, __anon_410, !1591
        v4360 = const u64 0
        v4361 = get_elem_ptr v4359, __ptr ptr, v4360
        store v4358 to v4361, !1591
        v4362 = const u64 1
        v4363 = get_elem_ptr v4359, __ptr u64, v4362
        v4364 = const u64 1
        store v4364 to v4363, !1591
        v4365 = get_local __ptr slice, __anon_411, !1591
        mem_copy_bytes v4365, v4359, 16
        v4366 = get_local __ptr {  }, __tmp_arg281
        mem_copy_val v4366, v4356
        v4367 = get_local __ptr slice, __tmp_arg282
        mem_copy_val v4367, v4365
        v4368 = call print_str_1(v4366, v4367)
        v4369 = get_local __ptr {  }, f_109, !1591
        v4370 = get_local __ptr {  }, self_73, !1591
        mem_copy_val v4370, v4369
        v4371 = get_global __ptr u64, std::debug::STDERR, !1604
        v4372 = get_local __ptr u64, fd_53, !1605
        mem_copy_val v4372, v4371
        v4373 = get_local __ptr u64, fd_53, !1606
        v4374 = load v4373, !1607
        v4375 = asm(id: v57, fd: v4374) -> (), !1608 {
            ecal   id fd zero zero, !103
        }
        v4376 = get_local __ptr string<61>, __const171
        v4377 = get_local __ptr { u64, u64 }, arg_110
        v4378 = get_local __ptr { u64, u64 }, _______________________________________________________, !1609
        mem_copy_val v4378, v4377
        v4379 = get_local __ptr { u64 }, __anon_412, !1610
        v4380 = const u64 0
        v4381 = get_elem_ptr v4379, __ptr u64, v4380, !1610
        v4382 = const u64 0, !1610
        store v4382 to v4381, !1610
        v4383 = get_local __ptr { u64 }, arg_112
        mem_copy_val v4383, v4379
        v4384 = get_local __ptr {  }, __anon_413, !1611
        v4385 = get_local __ptr {  }, f_111
        mem_copy_val v4385, v4384
        v4386 = get_local __ptr {  }, f_111, !1611
        v4387 = get_local __ptr string<61>, __anon_414
        mem_copy_val v4387, v4376
        v4388 = cast_ptr v4387 to ptr, !1611
        v4389 = get_local __ptr { ptr, u64 }, __anon_415, !1611
        v4390 = const u64 0
        v4391 = get_elem_ptr v4389, __ptr ptr, v4390
        store v4388 to v4391, !1611
        v4392 = const u64 1
        v4393 = get_elem_ptr v4389, __ptr u64, v4392
        v4394 = const u64 61
        store v4394 to v4393, !1611
        v4395 = get_local __ptr slice, __anon_416, !1611
        mem_copy_bytes v4395, v4389, 16
        v4396 = get_local __ptr {  }, __tmp_arg283
        mem_copy_val v4396, v4386
        v4397 = get_local __ptr slice, __tmp_arg284
        mem_copy_val v4397, v4395
        v4398 = call print_str_1(v4396, v4397)
        v4399 = get_local __ptr { u64 }, arg_112
        v4400 = get_local __ptr {  }, f_111
        v4401 = get_local __ptr { u64 }, self_74
        mem_copy_val v4401, v4399
        v4402 = get_local __ptr __ptr {  }, _f_11
        store v4400 to v4402
        v4403 = get_local __ptr { u64 }, self_74, !1612
        v4404 = get_local __ptr { u64 }, __matched_value_18, !1613
        mem_copy_val v4404, v4403
        v4405 = get_local __ptr { u64 }, __matched_value_18, !1612
        v4406 = const u64 0
        v4407 = get_elem_ptr v4405, __ptr u64, v4406, !1612
        v4408 = get_local __ptr u64, self_018, !1616
        mem_copy_val v4408, v4407
        v4409 = get_local __ptr u64, other_18, !1616
        v4410 = const u64 0, !1612
        store v4410 to v4409, !1616
        v4411 = get_local __ptr u64, self_018, !1617
        v4412 = load v4411, !1616
        v4413 = get_local __ptr u64, other_18, !1618
        v4414 = load v4413, !1616
        v4415 = cmp eq v4412 v4414, !1616
        cbr v4415, fmt_142_block0(), fmt_142_block1(), !1614

        fmt_142_block0():
        v4416 = get_local __ptr string<15>, __const172
        v4417 = get_local __ptr __ptr {  }, _f_11, !1619
        v4418 = load v4417
        v4419 = get_local __ptr string<15>, __anon_029
        mem_copy_val v4419, v4416
        v4420 = cast_ptr v4419 to ptr, !1620
        v4421 = get_local __ptr { ptr, u64 }, __anon_1120, !1620
        v4422 = const u64 0
        v4423 = get_elem_ptr v4421, __ptr ptr, v4422
        store v4420 to v4423, !1620
        v4424 = const u64 1
        v4425 = get_elem_ptr v4421, __ptr u64, v4424
        v4426 = const u64 15
        store v4426 to v4425, !1620
        v4427 = get_local __ptr slice, __anon_2115, !1620
        mem_copy_bytes v4427, v4421, 16
        v4428 = get_local __ptr {  }, __tmp_arg285
        mem_copy_val v4428, v4418
        v4429 = get_local __ptr slice, __tmp_arg286
        mem_copy_val v4429, v4427
        v4430 = call print_str_1(v4428, v4429)
        v4431 = get_local __ptr string<1>, __const173
        v4432 = get_local __ptr {  }, f_111, !1611
        v4433 = get_local __ptr string<1>, __anon_417
        mem_copy_val v4433, v4431
        v4434 = cast_ptr v4433 to ptr, !1611
        v4435 = get_local __ptr { ptr, u64 }, __anon_418, !1611
        v4436 = const u64 0
        v4437 = get_elem_ptr v4435, __ptr ptr, v4436
        store v4434 to v4437, !1611
        v4438 = const u64 1
        v4439 = get_elem_ptr v4435, __ptr u64, v4438
        v4440 = const u64 1
        store v4440 to v4439, !1611
        v4441 = get_local __ptr slice, __anon_419, !1611
        mem_copy_bytes v4441, v4435, 16
        v4442 = get_local __ptr {  }, __tmp_arg287
        mem_copy_val v4442, v4432
        v4443 = get_local __ptr slice, __tmp_arg288
        mem_copy_val v4443, v4441
        v4444 = call print_str_1(v4442, v4443)
        v4445 = get_local __ptr {  }, f_111, !1611
        v4446 = get_local __ptr {  }, self_75, !1611
        mem_copy_val v4446, v4445
        v4447 = get_global __ptr u64, std::debug::STDERR, !1621
        v4448 = get_local __ptr u64, fd_54, !1622
        mem_copy_val v4448, v4447
        v4449 = get_local __ptr u64, fd_54, !1623
        v4450 = load v4449, !1624
        v4451 = asm(id: v57, fd: v4450) -> (), !1625 {
            ecal   id fd zero zero, !103
        }
        v4452 = get_local __ptr string<125>, __const174
        v4453 = get_local __ptr string<1>, __const175
        v4454 = get_local __ptr { u64 }, arg_112
        v4455 = get_local __ptr { u64 }, ________________________________________________________, !1626
        mem_copy_val v4455, v4454
        v4456 = get_local __ptr { { ptr, u64 }, u64 }, __ret_val25
        v4457 = call new_143(v4456)
        v4458 = get_local __ptr { { ptr, u64 }, u64 }, __aggr_memcpy_029
        mem_copy_val v4458, v4457
        v4459 = get_local __ptr { { ptr, u64 }, u64 }, v, !1627
        mem_copy_val v4459, v4458
        v4460 = get_local __ptr { { ptr, u64 }, u64 }, v, !1628
        v4461 = const u64 1, !1629
        v4462 = call push_146(v4460, v4461), !1632
        v4463 = get_local __ptr { { ptr, u64 }, u64 }, v, !1633
        v4464 = const u64 2, !1634
        v4465 = call push_146(v4463, v4464), !1637
        v4466 = get_local __ptr { { ptr, u64 }, u64 }, v, !1638
        v4467 = const u64 3, !1639
        v4468 = call push_146(v4466, v4467), !1642
        v4469 = get_local __ptr { { ptr, u64 }, u64 }, v, !1643
        v4470 = get_local __ptr { { ptr, u64 }, u64 }, arg_114
        mem_copy_val v4470, v4469
        v4471 = get_local __ptr {  }, __anon_420, !1644
        v4472 = get_local __ptr {  }, f_113
        mem_copy_val v4472, v4471
        v4473 = get_local __ptr {  }, f_113, !1644
        v4474 = get_local __ptr string<125>, __anon_421
        mem_copy_val v4474, v4452
        v4475 = cast_ptr v4474 to ptr, !1644
        v4476 = get_local __ptr { ptr, u64 }, __anon_422, !1644
        v4477 = const u64 0
        v4478 = get_elem_ptr v4476, __ptr ptr, v4477
        store v4475 to v4478, !1644
        v4479 = const u64 1
        v4480 = get_elem_ptr v4476, __ptr u64, v4479
        v4481 = const u64 125
        store v4481 to v4480, !1644
        v4482 = get_local __ptr slice, __anon_423, !1644
        mem_copy_bytes v4482, v4476, 16
        v4483 = get_local __ptr {  }, __tmp_arg289
        mem_copy_val v4483, v4473
        v4484 = get_local __ptr slice, __tmp_arg290
        mem_copy_val v4484, v4482
        v4485 = call print_str_1(v4483, v4484)
        v4486 = get_local __ptr { { ptr, u64 }, u64 }, arg_114
        v4487 = get_local __ptr {  }, f_113
        v4488 = get_local __ptr { { ptr, u64 }, u64 }, __tmp_arg362
        mem_copy_val v4488, v4486
        v4489 = call fmt_152(v4488, v4487)
        v4490 = get_local __ptr {  }, f_113, !1644
        v4491 = get_local __ptr string<1>, __anon_424
        mem_copy_val v4491, v4453
        v4492 = cast_ptr v4491 to ptr, !1644
        v4493 = get_local __ptr { ptr, u64 }, __anon_425, !1644
        v4494 = const u64 0
        v4495 = get_elem_ptr v4493, __ptr ptr, v4494
        store v4492 to v4495, !1644
        v4496 = const u64 1
        v4497 = get_elem_ptr v4493, __ptr u64, v4496
        v4498 = const u64 1
        store v4498 to v4497, !1644
        v4499 = get_local __ptr slice, __anon_426, !1644
        mem_copy_bytes v4499, v4493, 16
        v4500 = get_local __ptr {  }, __tmp_arg291
        mem_copy_val v4500, v4490
        v4501 = get_local __ptr slice, __tmp_arg292
        mem_copy_val v4501, v4499
        v4502 = call print_str_1(v4500, v4501)
        v4503 = get_local __ptr {  }, f_113, !1644
        v4504 = get_local __ptr {  }, self_76, !1644
        mem_copy_val v4504, v4503
        v4505 = get_global __ptr u64, std::debug::STDERR, !1645
        v4506 = get_local __ptr u64, fd_55, !1646
        mem_copy_val v4506, v4505
        v4507 = get_local __ptr u64, fd_55, !1647
        v4508 = load v4507, !1648
        v4509 = asm(id: v57, fd: v4508) -> (), !1649 {
            ecal   id fd zero zero, !103
        }
        v4510 = get_local __ptr { { ptr, u64 }, u64 }, arg_114
        v4511 = get_local __ptr { { ptr, u64 }, u64 }, _________________________________________________________, !1650
        mem_copy_val v4511, v4510
        v4512 = get_local __ptr { { ptr, u64 }, u64 }, __ret_val26
        v4513 = call new_143(v4512)
        v4514 = get_local __ptr { { ptr, u64 }, u64 }, __aggr_memcpy_030
        mem_copy_val v4514, v4513
        v4515 = get_local __ptr { { ptr, u64 }, u64 }, v_, !1651
        mem_copy_val v4515, v4514
        v4516 = get_local __ptr { { ptr, u64 }, u64 }, v_, !1652
        v4517 = const u64 1, !1653
        v4518 = call push_146(v4516, v4517), !1656
        v4519 = get_local __ptr { { ptr, u64 }, u64 }, v_, !1657
        v4520 = const u64 2, !1658
        v4521 = call push_146(v4519, v4520), !1661
        v4522 = get_local __ptr { { ptr, u64 }, u64 }, v_, !1662
        v4523 = const u64 3, !1663
        v4524 = call push_146(v4522, v4523), !1666
        v4525 = get_local __ptr { { ptr, u64 }, u64 }, v_, !1667
        v4526 = get_local __ptr { { ptr, u64 }, u64 }, self_77, !1670
        mem_copy_val v4526, v4525
        v4527 = get_local __ptr { { ptr, u64 }, u64 }, self_77, !1673
        v4528 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __anon_030, !1675
        v4529 = const u64 0
        v4530 = get_elem_ptr v4528, __ptr { { ptr, u64 }, u64 }, v4529, !1670
        mem_copy_val v4530, v4527
        v4531 = const u64 1
        v4532 = get_elem_ptr v4528, __ptr u64, v4531, !1670
        v4533 = const u64 0, !1676
        store v4533 to v4532, !1677
        v4534 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __tmp_block_arg35
        mem_copy_val v4534, v4528
        v4535 = get_local __ptr string<132>, __const176
        v4536 = get_local __ptr string<7>, __const177
        v4537 = get_local __ptr string<6>, __const178
        v4538 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, arg_116
        mem_copy_val v4538, v4534
        v4539 = get_local __ptr {  }, __anon_427, !1678
        v4540 = get_local __ptr {  }, f_115
        mem_copy_val v4540, v4539
        v4541 = get_local __ptr {  }, f_115, !1678
        v4542 = get_local __ptr string<132>, __anon_428
        mem_copy_val v4542, v4535
        v4543 = cast_ptr v4542 to ptr, !1678
        v4544 = get_local __ptr { ptr, u64 }, __anon_429, !1678
        v4545 = const u64 0
        v4546 = get_elem_ptr v4544, __ptr ptr, v4545
        store v4543 to v4546, !1678
        v4547 = const u64 1
        v4548 = get_elem_ptr v4544, __ptr u64, v4547
        v4549 = const u64 132
        store v4549 to v4548, !1678
        v4550 = get_local __ptr slice, __anon_430, !1678
        mem_copy_bytes v4550, v4544, 16
        v4551 = get_local __ptr {  }, __tmp_arg293
        mem_copy_val v4551, v4541
        v4552 = get_local __ptr slice, __tmp_arg294
        mem_copy_val v4552, v4550
        v4553 = call print_str_1(v4551, v4552)
        v4554 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, arg_116
        v4555 = get_local __ptr {  }, f_115
        v4556 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, self_78
        mem_copy_val v4556, v4554
        v4557 = get_local __ptr __ptr {  }, _f_12
        store v4555 to v4557
        v4558 = get_local __ptr __ptr {  }, _f_12, !1680
        v4559 = load v4558
        v4560 = get_local __ptr string<7>, __anon_031
        mem_copy_val v4560, v4536
        v4561 = cast_ptr v4560 to ptr, !1681
        v4562 = get_local __ptr { ptr, u64 }, __anon_1121, !1681
        v4563 = const u64 0
        v4564 = get_elem_ptr v4562, __ptr ptr, v4563
        store v4561 to v4564, !1681
        v4565 = const u64 1
        v4566 = get_elem_ptr v4562, __ptr u64, v4565
        v4567 = const u64 7
        store v4567 to v4566, !1681
        v4568 = get_local __ptr slice, __anon_2116, !1681
        mem_copy_bytes v4568, v4562, 16
        v4569 = get_local __ptr {  }, __tmp_arg345
        mem_copy_val v4569, v4559
        v4570 = get_local __ptr slice, __tmp_arg346
        mem_copy_val v4570, v4568
        v4571 = get_local __ptr { {  }, bool }, __ret_val17
        v4572 = call debug_struct_77(v4569, v4570, v4571)
        v4573 = get_local __ptr { {  }, bool }, __aggr_memcpy_031
        mem_copy_val v4573, v4572
        v4574 = get_local __ptr string<6>, __anon_3111
        mem_copy_val v4574, v4537
        v4575 = cast_ptr v4574 to ptr, !1682
        v4576 = get_local __ptr { ptr, u64 }, __anon_452, !1682
        v4577 = const u64 0
        v4578 = get_elem_ptr v4576, __ptr ptr, v4577
        store v4575 to v4578, !1682
        v4579 = const u64 1
        v4580 = get_elem_ptr v4576, __ptr u64, v4579
        v4581 = const u64 6
        store v4581 to v4580, !1682
        v4582 = get_local __ptr slice, __anon_521, !1682
        mem_copy_bytes v4582, v4576, 16
        v4583 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, self_78, !1683
        v4584 = const u64 0
        v4585 = get_elem_ptr v4583, __ptr { { ptr, u64 }, u64 }, v4584, !1684
        v4586 = get_local __ptr { {  }, bool }, type_fix7
        mem_copy_val v4586, v4573
        v4587 = get_local __ptr __ptr { {  }, bool }, self_019, !1687
        store v4586 to v4587, !1687
        v4588 = get_local __ptr slice, name_1, !1687
        mem_copy_val v4588, v4582
        v4589 = get_local __ptr { { ptr, u64 }, u64 }, value_4, !1687
        mem_copy_val v4589, v4585
        v4590 = get_local __ptr __ptr { {  }, bool }, self_019, !1688
        v4591 = load v4590, !1687
        v4592 = const u64 1
        v4593 = get_elem_ptr v4591, __ptr bool, v4592, !1689
        v4594 = load v4593, !1687
        cbr v4594, fmt_160_field_161_block0(), fmt_160_field_161_block2(), !1690

        fmt_142_block1():
        v4595 = const u64 14757395258967588866, !1613
        revert v4595, !1613

        fmt_160_field_161_block0():
        v4596 = get_local __ptr string<2>, __const179
        v4597 = get_local __ptr __ptr { {  }, bool }, self_019, !1691
        v4598 = load v4597, !1687
        v4599 = const u64 0
        v4600 = get_elem_ptr v4598, __ptr {  }, v4599, !1692
        v4601 = get_local __ptr string<2>, __anon_007, !1687
        mem_copy_val v4601, v4596
        v4602 = cast_ptr v4601 to ptr, !1693
        v4603 = get_local __ptr { ptr, u64 }, __anon_1016, !1694
        v4604 = const u64 0
        v4605 = get_elem_ptr v4603, __ptr ptr, v4604, !1687
        store v4602 to v4605, !1695
        v4606 = const u64 1
        v4607 = get_elem_ptr v4603, __ptr u64, v4606, !1687
        v4608 = const u64 2
        store v4608 to v4607, !1696
        v4609 = get_local __ptr slice, __anon_2014, !1697
        mem_copy_bytes v4609, v4603, 16, !1687
        v4610 = get_local __ptr {  }, __tmp_arg295
        mem_copy_val v4610, v4600
        v4611 = get_local __ptr slice, __tmp_arg296
        mem_copy_val v4611, v4609
        v4612 = call print_str_1(v4610, v4611)
        br fmt_160_field_161_block2(), !1687

        fmt_160_field_161_block2():
        v4613 = get_local __ptr string<2>, __const180
        v4614 = get_local __ptr __ptr { {  }, bool }, self_019, !1698
        v4615 = load v4614, !1687
        v4616 = const u64 0
        v4617 = get_elem_ptr v4615, __ptr {  }, v4616, !1699
        v4618 = get_local __ptr slice, name_1, !1700
        v4619 = get_local __ptr {  }, __tmp_arg297
        mem_copy_val v4619, v4617
        v4620 = get_local __ptr slice, __tmp_arg298
        mem_copy_val v4620, v4618
        v4621 = call print_str_1(v4619, v4620)
        v4622 = get_local __ptr __ptr { {  }, bool }, self_019, !1701
        v4623 = load v4622, !1687
        v4624 = const u64 0
        v4625 = get_elem_ptr v4623, __ptr {  }, v4624, !1702
        v4626 = get_local __ptr string<2>, __anon_3012, !1687
        mem_copy_val v4626, v4613
        v4627 = cast_ptr v4626 to ptr, !1703
        v4628 = get_local __ptr { ptr, u64 }, __anon_4012, !1704
        v4629 = const u64 0
        v4630 = get_elem_ptr v4628, __ptr ptr, v4629, !1687
        store v4627 to v4630, !1705
        v4631 = const u64 1
        v4632 = get_elem_ptr v4628, __ptr u64, v4631, !1687
        v4633 = const u64 2
        store v4633 to v4632, !1706
        v4634 = get_local __ptr slice, __anon_502, !1707
        mem_copy_bytes v4634, v4628, 16, !1687
        v4635 = get_local __ptr {  }, __tmp_arg299
        mem_copy_val v4635, v4625
        v4636 = get_local __ptr slice, __tmp_arg300
        mem_copy_val v4636, v4634
        v4637 = call print_str_1(v4635, v4636)
        v4638 = get_local __ptr { { ptr, u64 }, u64 }, value_4, !1708
        v4639 = get_local __ptr __ptr { {  }, bool }, self_019, !1709
        v4640 = load v4639, !1687
        v4641 = const u64 0
        v4642 = get_elem_ptr v4640, __ptr {  }, v4641, !1710
        v4643 = get_local __ptr { { ptr, u64 }, u64 }, __tmp_arg363
        mem_copy_val v4643, v4638
        v4644 = call fmt_152(v4643, v4642)
        v4645 = get_local __ptr __ptr { {  }, bool }, self_019, !1711
        v4646 = load v4645, !1687
        v4647 = const u64 1
        v4648 = get_elem_ptr v4646, __ptr bool, v4647, !1712
        v4649 = const bool true, !755
        store v4649 to v4648, !1713
        v4650 = get_local __ptr __ptr { {  }, bool }, self_019, !1714
        v4651 = load v4650, !1687
        v4652 = get_local __ptr { {  }, bool }, __tmp_block_arg36
        mem_copy_val v4652, v4651
        v4653 = get_local __ptr string<5>, __const181
        v4654 = get_local __ptr string<5>, __anon_615
        mem_copy_val v4654, v4653
        v4655 = cast_ptr v4654 to ptr, !1715
        v4656 = get_local __ptr { ptr, u64 }, __anon_715, !1715
        v4657 = const u64 0
        v4658 = get_elem_ptr v4656, __ptr ptr, v4657
        store v4655 to v4658, !1715
        v4659 = const u64 1
        v4660 = get_elem_ptr v4656, __ptr u64, v4659
        v4661 = const u64 5
        store v4661 to v4660, !1715
        v4662 = get_local __ptr slice, __anon_815, !1715
        mem_copy_bytes v4662, v4656, 16
        v4663 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, self_78, !1716
        v4664 = const u64 1
        v4665 = get_elem_ptr v4663, __ptr u64, v4664, !1717
        v4666 = load v4665
        v4667 = get_local __ptr { {  }, bool }, type_fix05
        mem_copy_val v4667, v4652
        v4668 = get_local __ptr slice, __tmp_arg359
        mem_copy_val v4668, v4662
        v4669 = get_local __ptr { {  }, bool }, __ret_val22
        v4670 = call field_120(v4667, v4668, v4666, v4669)
        v4671 = get_local __ptr { {  }, bool }, __aggr_memcpy_032
        mem_copy_val v4671, v4670
        v4672 = get_local __ptr { {  }, bool }, type_fix14
        mem_copy_val v4672, v4671
        v4673 = call finish_76(v4672), !1720
        v4674 = get_local __ptr string<1>, __const182
        v4675 = get_local __ptr {  }, f_115, !1678
        v4676 = get_local __ptr string<1>, __anon_431
        mem_copy_val v4676, v4674
        v4677 = cast_ptr v4676 to ptr, !1678
        v4678 = get_local __ptr { ptr, u64 }, __anon_432, !1678
        v4679 = const u64 0
        v4680 = get_elem_ptr v4678, __ptr ptr, v4679
        store v4677 to v4680, !1678
        v4681 = const u64 1
        v4682 = get_elem_ptr v4678, __ptr u64, v4681
        v4683 = const u64 1
        store v4683 to v4682, !1678
        v4684 = get_local __ptr slice, __anon_433, !1678
        mem_copy_bytes v4684, v4678, 16
        v4685 = get_local __ptr {  }, __tmp_arg301
        mem_copy_val v4685, v4675
        v4686 = get_local __ptr slice, __tmp_arg302
        mem_copy_val v4686, v4684
        v4687 = call print_str_1(v4685, v4686)
        v4688 = get_local __ptr {  }, f_115, !1678
        v4689 = get_local __ptr {  }, self_79, !1678
        mem_copy_val v4689, v4688
        v4690 = get_global __ptr u64, std::debug::STDERR, !1721
        v4691 = get_local __ptr u64, fd_56, !1722
        mem_copy_val v4691, v4690
        v4692 = get_local __ptr u64, fd_56, !1723
        v4693 = load v4692, !1724
        v4694 = asm(id: v57, fd: v4693) -> (), !1725 {
            ecal   id fd zero zero, !103
        }
        v4695 = get_local __ptr string<28>, __const183
        v4696 = get_local __ptr string<1>, __const184
        v4697 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, arg_116
        v4698 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __________________________________________________________, !1726
        mem_copy_val v4698, v4697
        v4699 = get_local __ptr u64, arg_118
        v4700 = const u64 11, !1727
        store v4700 to v4699
        v4701 = get_local __ptr {  }, __anon_434, !1728
        v4702 = get_local __ptr {  }, f_117
        mem_copy_val v4702, v4701
        v4703 = get_local __ptr {  }, f_117, !1728
        v4704 = get_local __ptr string<28>, __anon_435
        mem_copy_val v4704, v4695
        v4705 = cast_ptr v4704 to ptr, !1728
        v4706 = get_local __ptr { ptr, u64 }, __anon_436, !1728
        v4707 = const u64 0
        v4708 = get_elem_ptr v4706, __ptr ptr, v4707
        store v4705 to v4708, !1728
        v4709 = const u64 1
        v4710 = get_elem_ptr v4706, __ptr u64, v4709
        v4711 = const u64 28
        store v4711 to v4710, !1728
        v4712 = get_local __ptr slice, __anon_437, !1728
        mem_copy_bytes v4712, v4706, 16
        v4713 = get_local __ptr {  }, __tmp_arg303
        mem_copy_val v4713, v4703
        v4714 = get_local __ptr slice, __tmp_arg304
        mem_copy_val v4714, v4712
        v4715 = call print_str_1(v4713, v4714)
        v4716 = get_local __ptr u64, arg_118
        v4717 = load v4716
        v4718 = get_local __ptr {  }, f_117
        v4719 = call fmt_38(v4717, v4718)
        v4720 = get_local __ptr {  }, f_117, !1728
        v4721 = get_local __ptr string<1>, __anon_438
        mem_copy_val v4721, v4696
        v4722 = cast_ptr v4721 to ptr, !1728
        v4723 = get_local __ptr { ptr, u64 }, __anon_439, !1728
        v4724 = const u64 0
        v4725 = get_elem_ptr v4723, __ptr ptr, v4724
        store v4722 to v4725, !1728
        v4726 = const u64 1
        v4727 = get_elem_ptr v4723, __ptr u64, v4726
        v4728 = const u64 1
        store v4728 to v4727, !1728
        v4729 = get_local __ptr slice, __anon_440, !1728
        mem_copy_bytes v4729, v4723, 16
        v4730 = get_local __ptr {  }, __tmp_arg305
        mem_copy_val v4730, v4720
        v4731 = get_local __ptr slice, __tmp_arg306
        mem_copy_val v4731, v4729
        v4732 = call print_str_1(v4730, v4731)
        v4733 = get_local __ptr {  }, f_117, !1728
        v4734 = get_local __ptr {  }, self_80, !1728
        mem_copy_val v4734, v4733
        v4735 = get_global __ptr u64, std::debug::STDERR, !1729
        v4736 = get_local __ptr u64, fd_57, !1730
        mem_copy_val v4736, v4735
        v4737 = get_local __ptr u64, fd_57, !1731
        v4738 = load v4737, !1732
        v4739 = asm(id: v57, fd: v4738) -> (), !1733 {
            ecal   id fd zero zero, !103
        }
        v4740 = get_local __ptr u64, arg_118
        v4741 = load v4740
        ret u64 v4741
    }

    pub fn print_str_1(self: __ptr {  }, s: __ptr slice) -> (), !1736 {
        local slice __tmp_arg
        local slice __tmp_arg0
        local slice s_
        local {  } self_

        entry(self: __ptr {  }, s: __ptr slice):
        v0 = get_local __ptr {  }, self_
        mem_copy_val v0, self
        v1 = get_local __ptr slice, s_
        mem_copy_val v1, s
        v2 = get_global __ptr u64, std::debug::STDERR, !1737
        v3 = load v2
        v4 = get_local __ptr slice, s_, !1738
        v5 = get_local __ptr slice, __tmp_arg
        mem_copy_val v5, v4
        v6 = call as_ptr_3(v5)
        v7 = get_local __ptr slice, s_, !1739
        v8 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v8, v7
        v9 = call len_4(v8)
        v10 = call syscall_write_2(v3, v6, v9), !1742
        v11 = const unit ()
        ret () v11
    }

    fn syscall_write_2(fd !1743: u64, buf !1744: ptr, count !1745: u64) -> (), !1748 {
        local ptr buf_
        local u64 count_
        local u64 fd_

        entry(fd: u64, buf: ptr, count: u64):
        v0 = get_local __ptr u64, fd_
        store fd to v0
        v1 = get_local __ptr ptr, buf_
        store buf to v1
        v2 = get_local __ptr u64, count_
        store count to v2
        v3 = get_local __ptr u64, fd_, !1749
        v4 = load v3
        v5 = get_local __ptr ptr, buf_, !1750
        v6 = load v5
        v7 = get_local __ptr u64, count_, !1751
        v8 = load v7
        v9 = const u64 1000, !1752
        v10 = asm(id: v9, fd: v4, buf: v6, count: v8) -> (), !1753 {
            ecal   id fd buf count, !1754
        }
        v11 = const unit ()
        ret () v11
    }

    pub fn as_ptr_3(self: __ptr slice) -> ptr, !1757 {
        local mut { ptr, u64 } __aggr_memcpy_0
        local { ptr, u64 } __tuple_1
        local { ptr, u64 } __tuple_1_
        local ptr ptr
        local slice self_

        entry(self: __ptr slice):
        v0 = get_local __ptr slice, self_
        mem_copy_val v0, self
        v1 = get_local __ptr slice, self_, !1758
        v2 = asm(s: v1) -> __ptr { ptr, u64 } s {
        }
        v3 = get_local __ptr { ptr, u64 }, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local __ptr { ptr, u64 }, __tuple_1, !1759
        mem_copy_val v4, v3
        v5 = get_local __ptr { ptr, u64 }, __tuple_1_, !1759
        mem_copy_val v5, v3
        v6 = get_local __ptr { ptr, u64 }, __tuple_1_, !1759
        v7 = const u64 0
        v8 = get_elem_ptr v6, __ptr ptr, v7, !1759
        v9 = get_local __ptr ptr, ptr, !1759
        mem_copy_val v9, v8
        v10 = get_local __ptr ptr, ptr, !1760
        v11 = load v10
        ret ptr v11
    }

    pub fn len_4(self: __ptr slice) -> u64, !1763 {
        local mut { ptr, u64 } __aggr_memcpy_0
        local { ptr, u64 } __tuple_2
        local u64 len
        local slice self_

        entry(self: __ptr slice):
        v0 = get_local __ptr slice, self_
        mem_copy_val v0, self
        v1 = get_local __ptr slice, self_, !1764
        v2 = asm(s: v1) -> __ptr { ptr, u64 } s {
        }
        v3 = get_local __ptr { ptr, u64 }, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local __ptr { ptr, u64 }, __tuple_2, !1765
        mem_copy_val v4, v3
        v5 = get_local __ptr u64, len, !1765
        v6 = get_local __ptr { ptr, u64 }, __aggr_memcpy_0
        v7 = const u64 1
        v8 = get_elem_ptr v6, __ptr u64, v7
        mem_copy_val v5, v8
        v9 = load v8
        ret u64 v9
    }

    pub fn fmt_8(self !1766: bool, f !1767: __ptr {  }) -> (), !1770 {
        local string<4> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<5> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<4> __const = const string<4> "true"
        local string<5> __const0 = const string<5> "false"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local __ptr {  } f_
        local bool self_

        entry(self: bool, f: __ptr {  }):
        v0 = get_local __ptr bool, self_
        store self to v0
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr bool, self_, !1771
        v3 = load v2
        cbr v3, block0(), block1(), !1771

        block0():
        v4 = get_local __ptr string<4>, __const
        v5 = get_local __ptr __ptr {  }, f_, !1772
        v6 = load v5
        v7 = get_local __ptr string<4>, __anon_0
        mem_copy_val v7, v4
        v8 = cast_ptr v7 to ptr, !1773
        v9 = get_local __ptr { ptr, u64 }, __anon_1, !1773
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr ptr, v10
        store v8 to v11, !1773
        v12 = const u64 1
        v13 = get_elem_ptr v9, __ptr u64, v12
        v14 = const u64 4
        store v14 to v13, !1773
        v15 = get_local __ptr slice, __anon_2, !1773
        mem_copy_bytes v15, v9, 16
        v16 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v16, v6
        v17 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v17, v15
        v18 = call print_str_1(v16, v17)
        br block2()

        block1():
        v19 = get_local __ptr string<5>, __const0
        v20 = get_local __ptr __ptr {  }, f_, !1774
        v21 = load v20
        v22 = get_local __ptr string<5>, __anon_3
        mem_copy_val v22, v19
        v23 = cast_ptr v22 to ptr, !1775
        v24 = get_local __ptr { ptr, u64 }, __anon_4, !1775
        v25 = const u64 0
        v26 = get_elem_ptr v24, __ptr ptr, v25
        store v23 to v26, !1775
        v27 = const u64 1
        v28 = get_elem_ptr v24, __ptr u64, v27
        v29 = const u64 5
        store v29 to v28, !1775
        v30 = get_local __ptr slice, __anon_5, !1775
        mem_copy_bytes v30, v24, 16
        v31 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v31, v21
        v32 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v32, v30
        v33 = call print_str_1(v31, v32)
        br block2()

        block2():
        v34 = const unit ()
        ret () v34
    }

    pub fn fmt_10(self !1776: u8, f !1777: __ptr {  }) -> (), !1780 {
        local [u8; 64] __anon_0
        local u64 count_
        local mut [u8; 64] digits
        local __ptr {  } f_
        local mut u64 i
        local u8 other_
        local u8 other_0
        local u8 other_1
        local u64 other_2
        local u64 other_3
        local u8 self_
        local {  } self_0
        local u8 self_00
        local u8 self_1
        local u8 self_2
        local u64 self_3
        local ptr self_4
        local u64 self_5
        local u8 value_
        local mut u8 value__

        entry(self: u8, f: __ptr {  }):
        v0 = get_local __ptr u8, self_
        store self to v0
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr __ptr {  }, f_, !1781
        v3 = load v2
        v4 = get_local __ptr u8, self_, !1782
        v5 = get_local __ptr {  }, self_0, !1785
        mem_copy_val v5, v3
        v6 = get_local __ptr u8, value_, !1785
        mem_copy_val v6, v4
        v7 = get_local __ptr u8, value_, !1787
        v8 = get_local __ptr u8, value__, !1789
        mem_copy_val v8, v7
        v9 = get_local __ptr [u8; 64], __anon_0, !1791
        v10 = const u64 0
        br print_u8_11_array_init_loop(v10), !1785

        print_u8_11_array_init_loop(v11: u64):
        v12 = get_elem_ptr v9, __ptr u8, v11, !1785
        v13 = const u8 48, !1792
        store v13 to v12, !1793
        v14 = const u64 1
        v15 = add v11, v14, !1785
        v16 = const u64 64
        v17 = cmp lt v15 v16, !1785
        cbr v17, print_u8_11_array_init_loop(v15), print_u8_11_array_init_exit(), !1785

        print_u8_11_array_init_exit():
        v18 = get_local __ptr [u8; 64], digits, !1795
        mem_copy_val v18, v9
        v19 = get_local __ptr u64, i, !1797
        v20 = const u64 63, !1798
        store v20 to v19, !1799
        br print_u8_11_while(), !1785

        print_u8_11_while():
        v21 = const bool true, !1800
        cbr v21, print_u8_11_while_body(), print_u8_11_end_while(), !1785

        print_u8_11_while_body():
        v22 = get_local __ptr u8, value__, !1802
        v23 = get_local __ptr u8, self_00, !1805
        mem_copy_val v23, v22
        v24 = get_local __ptr u8, other_, !1806
        v25 = const u8 10, !1807
        store v25 to v24, !1808
        v26 = get_local __ptr u8, self_00, !1810
        v27 = load v26, !1811
        v28 = get_local __ptr u8, other_, !1813
        v29 = load v28, !1814
        v30 = mod v27, v29, !1815
        v31 = const u8 48, !1816
        v32 = call add_12(v30, v31), !1819
        v33 = get_local __ptr [u8; 64], digits, !1821
        v34 = get_local __ptr u64, i, !1823
        v35 = load v34, !1785
        v36 = get_elem_ptr v33, __ptr u8, v35, !1824
        store v32 to v36, !1825
        v37 = get_local __ptr u8, value__, !1827
        v38 = get_local __ptr u8, self_1, !1830
        mem_copy_val v38, v37
        v39 = get_local __ptr u8, other_0, !1831
        v40 = const u8 10, !1832
        store v40 to v39, !1833
        v41 = get_local __ptr u8, self_1, !1835
        v42 = load v41, !1836
        v43 = get_local __ptr u8, other_0, !1838
        v44 = load v43, !1839
        v45 = div v42, v44, !1840
        v46 = get_local __ptr u8, value__, !1842
        store v45 to v46, !1843
        v47 = get_local __ptr u8, value__, !1845
        v48 = get_local __ptr u8, self_2, !1848
        mem_copy_val v48, v47
        v49 = get_local __ptr u8, other_1, !1849
        v50 = const u8 0, !1850
        store v50 to v49, !1851
        v51 = get_local __ptr u8, self_2, !1853
        v52 = load v51, !1854
        v53 = get_local __ptr u8, other_1, !1856
        v54 = load v53, !1857
        v55 = cmp eq v52 v54, !1858
        cbr v55, print_u8_11_end_while(), print_u8_11_block1(), !1859

        print_u8_11_block1():
        v56 = get_local __ptr u64, i, !1861
        v57 = get_local __ptr u64, self_3, !1864
        mem_copy_val v57, v56
        v58 = get_local __ptr u64, other_2, !1865
        v59 = const u64 1, !1866
        store v59 to v58, !1867
        v60 = get_local __ptr u64, self_3, !1868
        v61 = load v60, !1869
        v62 = get_local __ptr u64, other_2, !1870
        v63 = load v62, !1871
        v64 = sub v61, v63, !1872
        v65 = get_local __ptr u64, i, !1873
        store v64 to v65, !1874
        br print_u8_11_while(), !1785

        print_u8_11_end_while():
        v66 = get_global __ptr u64, std::debug::STDERR, !1876
        v67 = load v66, !1785
        v68 = get_local __ptr [u8; 64], digits, !1878
        v69 = cast_ptr v68 to ptr, !1880
        v70 = get_local __ptr u64, i, !1882
        v71 = get_local __ptr ptr, self_4, !1885
        store v69 to v71, !1886
        v72 = get_local __ptr u64, count_, !1887
        mem_copy_val v72, v70
        v73 = get_local __ptr ptr, self_4, !1889
        v74 = load v73, !1890
        v75 = get_local __ptr u64, count_, !1892
        v76 = load v75, !1893
        v77 = const u64 1
        v78 = mul v77, v76, !1894
        v79 = add v74, v78, !1895
        v80 = get_local __ptr u64, i, !1897
        v81 = get_local __ptr u64, self_5, !1900
        v82 = const u64 64, !1901
        store v82 to v81, !1902
        v83 = get_local __ptr u64, other_3, !1903
        mem_copy_val v83, v80
        v84 = get_local __ptr u64, self_5, !1904
        v85 = load v84, !1905
        v86 = get_local __ptr u64, other_3, !1906
        v87 = load v86, !1907
        v88 = sub v85, v87, !1908
        v89 = call syscall_write_2(v67, v79, v88), !1911
        v90 = const unit ()
        ret () v90
    }

    pub fn add_12(self !1912: u8, other !1913: u8) -> u8, !1916 {
        local u64 max_u8_u64
        local u8 other_
        local u64 res_u64
        local u8 self_
        local u8 val_1
        local u64 val_2

        entry(self: u8, other: u8):
        v0 = get_local __ptr u8, self_
        store self to v0
        v1 = get_local __ptr u8, other_
        store other to v1
        v2 = get_local __ptr u8, self_, !1920
        v3 = load v2, !1921
        v4 = asm(input: v3) -> u64 input, !1923 {
        }
        v5 = get_local __ptr u8, other_, !1924
        v6 = load v5, !1927
        v7 = asm(input: v6) -> u64 input, !1928 {
        }
        v8 = add v4, v7
        v9 = get_local __ptr u64, res_u64, !1929
        store v8 to v9, !1929
        v10 = get_local __ptr u8, val_1, !1932
        v11 = const u8 255, !154
        store v11 to v10, !1932
        v12 = get_local __ptr u8, val_1, !1933
        v13 = load v12, !1932
        v14 = asm(input: v13) -> u64 input, !1934 {
        }
        v15 = get_local __ptr u64, max_u8_u64, !1935
        store v14 to v15, !1935
        v16 = get_local __ptr u64, res_u64, !1936
        v17 = load v16
        v18 = get_local __ptr u64, max_u8_u64, !1937
        v19 = load v18
        v20 = cmp gt v17 v19
        cbr v20, block0(), block4(), !1938

        block0():
        v21 = asm() -> u64 flag, !1946 {
        }
        v22 = get_global __ptr u64, std::flags::F_WRAPPING_DISABLE_MASK, !1948
        v23 = load v22, !1949
        v24 = and v21, v23, !1949
        v25 = const u64 0, !1950
        v26 = cmp eq v24 v25, !1949
        cbr v26, block1(), block2(), !1939

        block1():
        v27 = const u64 0, !1951
        revert v27, !1952

        block2():
        v28 = get_local __ptr u64, res_u64, !1953
        v29 = load v28
        v30 = get_local __ptr u64, max_u8_u64, !1954
        v31 = load v30
        v32 = const u64 1, !1955
        v33 = add v31, v32
        v34 = mod v29, v33
        v35 = get_local __ptr u64, val_2, !1958
        store v34 to v35, !1958
        v36 = get_local __ptr u64, val_2, !1960
        v37 = load v36, !1958
        v38 = asm(input: v37) -> u8 input, !1962 {
        }
        br block5(v38)

        block4():
        v39 = get_local __ptr u64, res_u64, !1963
        v40 = load v39, !1966
        v41 = asm(input: v40) -> u8 input, !1967 {
        }
        br block5(v41)

        block5(v42: u8):
        ret u8 v42
    }

    pub fn fmt_24(self !1968: u64, f !1969: __ptr {  }) -> (), !1972 {
        local [u8; 64] __anon_0
        local u64 count_
        local u8 digit
        local mut [u8; 64] digits
        local __ptr {  } f_
        local mut u64 i
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_
        local {  } self_0
        local u64 self_00
        local u64 self_1
        local u64 self_2
        local u64 self_3
        local ptr self_4
        local u64 self_5
        local u64 value_
        local mut u64 value__

        entry(self: u64, f: __ptr {  }):
        v0 = get_local __ptr u64, self_
        store self to v0
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr __ptr {  }, f_, !1973
        v3 = load v2
        v4 = get_local __ptr u64, self_, !1974
        v5 = get_local __ptr {  }, self_0, !1977
        mem_copy_val v5, v3
        v6 = get_local __ptr u64, value_, !1977
        mem_copy_val v6, v4
        v7 = get_local __ptr u64, value_, !1979
        v8 = get_local __ptr u64, value__, !1981
        mem_copy_val v8, v7
        v9 = get_local __ptr [u8; 64], __anon_0, !1983
        v10 = const u64 0
        br print_u16_25_array_init_loop(v10), !1977

        print_u16_25_array_init_loop(v11: u64):
        v12 = get_elem_ptr v9, __ptr u8, v11, !1977
        v13 = const u8 48, !1984
        store v13 to v12, !1985
        v14 = const u64 1
        v15 = add v11, v14, !1977
        v16 = const u64 64
        v17 = cmp lt v15 v16, !1977
        cbr v17, print_u16_25_array_init_loop(v15), print_u16_25_array_init_exit(), !1977

        print_u16_25_array_init_exit():
        v18 = get_local __ptr [u8; 64], digits, !1987
        mem_copy_val v18, v9
        v19 = get_local __ptr u64, i, !1989
        v20 = const u64 63, !1990
        store v20 to v19, !1991
        br print_u16_25_while(), !1977

        print_u16_25_while():
        v21 = const bool true, !1992
        cbr v21, print_u16_25_while_body(), print_u16_25_end_while(), !1977

        print_u16_25_while_body():
        v22 = get_local __ptr u64, value__, !1994
        v23 = get_local __ptr u64, self_00, !1997
        mem_copy_val v23, v22
        v24 = get_local __ptr u64, other_, !1998
        v25 = const u64 10, !1999
        store v25 to v24, !2000
        v26 = get_local __ptr u64, self_00, !2002
        v27 = load v26, !2003
        v28 = get_local __ptr u64, other_, !2005
        v29 = load v28, !2006
        v30 = mod v27, v29, !2007
        v31 = asm(v: v30) -> u8 v, !2009 {
        }
        v32 = get_local __ptr u8, digit, !2011
        store v31 to v32, !2012
        v33 = get_local __ptr u8, digit, !2014
        v34 = load v33, !1977
        v35 = const u8 48, !2015
        v36 = call add_12(v34, v35), !2018
        v37 = get_local __ptr [u8; 64], digits, !2020
        v38 = get_local __ptr u64, i, !2022
        v39 = load v38, !1977
        v40 = get_elem_ptr v37, __ptr u8, v39, !2023
        store v36 to v40, !2024
        v41 = get_local __ptr u64, value__, !2026
        v42 = get_local __ptr u64, self_1, !2029
        mem_copy_val v42, v41
        v43 = get_local __ptr u64, other_0, !2030
        v44 = const u64 10, !2031
        store v44 to v43, !2032
        v45 = get_local __ptr u64, self_1, !2034
        v46 = load v45, !2035
        v47 = get_local __ptr u64, other_0, !2037
        v48 = load v47, !2038
        v49 = div v46, v48, !2039
        v50 = get_local __ptr u64, value__, !2041
        store v49 to v50, !2042
        v51 = get_local __ptr u64, value__, !2044
        v52 = get_local __ptr u64, self_2, !2047
        mem_copy_val v52, v51
        v53 = get_local __ptr u64, other_1, !2048
        v54 = const u64 0, !2049
        store v54 to v53, !2050
        v55 = get_local __ptr u64, self_2, !2052
        v56 = load v55, !2053
        v57 = get_local __ptr u64, other_1, !2055
        v58 = load v57, !2056
        v59 = cmp eq v56 v58, !2057
        cbr v59, print_u16_25_end_while(), print_u16_25_block1(), !2058

        print_u16_25_block1():
        v60 = get_local __ptr u64, i, !2060
        v61 = get_local __ptr u64, self_3, !2063
        mem_copy_val v61, v60
        v62 = get_local __ptr u64, other_2, !2064
        v63 = const u64 1, !2065
        store v63 to v62, !2066
        v64 = get_local __ptr u64, self_3, !2067
        v65 = load v64, !2068
        v66 = get_local __ptr u64, other_2, !2069
        v67 = load v66, !2070
        v68 = sub v65, v67, !2071
        v69 = get_local __ptr u64, i, !2072
        store v68 to v69, !2073
        br print_u16_25_while(), !1977

        print_u16_25_end_while():
        v70 = get_global __ptr u64, std::debug::STDERR, !2075
        v71 = load v70, !1977
        v72 = get_local __ptr [u8; 64], digits, !2077
        v73 = cast_ptr v72 to ptr, !2079
        v74 = get_local __ptr u64, i, !2081
        v75 = get_local __ptr ptr, self_4, !2084
        store v73 to v75, !2085
        v76 = get_local __ptr u64, count_, !2086
        mem_copy_val v76, v74
        v77 = get_local __ptr ptr, self_4, !2087
        v78 = load v77, !2088
        v79 = get_local __ptr u64, count_, !2089
        v80 = load v79, !2090
        v81 = const u64 1
        v82 = mul v81, v80, !2091
        v83 = add v78, v82, !2092
        v84 = get_local __ptr u64, i, !2094
        v85 = get_local __ptr u64, self_5, !2097
        v86 = const u64 64, !2098
        store v86 to v85, !2099
        v87 = get_local __ptr u64, other_3, !2100
        mem_copy_val v87, v84
        v88 = get_local __ptr u64, self_5, !2101
        v89 = load v88, !2102
        v90 = get_local __ptr u64, other_3, !2103
        v91 = load v90, !2104
        v92 = sub v89, v91, !2105
        v93 = call syscall_write_2(v71, v83, v92), !2108
        v94 = const unit ()
        ret () v94
    }

    pub fn fmt_31(self !2109: u64, f !2110: __ptr {  }) -> (), !2113 {
        local [u8; 64] __anon_0
        local u64 count_
        local u8 digit
        local mut [u8; 64] digits
        local __ptr {  } f_
        local mut u64 i
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_
        local {  } self_0
        local u64 self_00
        local u64 self_1
        local u64 self_2
        local u64 self_3
        local ptr self_4
        local u64 self_5
        local u64 value_
        local mut u64 value__

        entry(self: u64, f: __ptr {  }):
        v0 = get_local __ptr u64, self_
        store self to v0
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr __ptr {  }, f_, !2114
        v3 = load v2
        v4 = get_local __ptr u64, self_, !2115
        v5 = get_local __ptr {  }, self_0, !2118
        mem_copy_val v5, v3
        v6 = get_local __ptr u64, value_, !2118
        mem_copy_val v6, v4
        v7 = get_local __ptr u64, value_, !2120
        v8 = get_local __ptr u64, value__, !2122
        mem_copy_val v8, v7
        v9 = get_local __ptr [u8; 64], __anon_0, !2124
        v10 = const u64 0
        br print_u32_32_array_init_loop(v10), !2118

        print_u32_32_array_init_loop(v11: u64):
        v12 = get_elem_ptr v9, __ptr u8, v11, !2118
        v13 = const u8 48, !2125
        store v13 to v12, !2126
        v14 = const u64 1
        v15 = add v11, v14, !2118
        v16 = const u64 64
        v17 = cmp lt v15 v16, !2118
        cbr v17, print_u32_32_array_init_loop(v15), print_u32_32_array_init_exit(), !2118

        print_u32_32_array_init_exit():
        v18 = get_local __ptr [u8; 64], digits, !2128
        mem_copy_val v18, v9
        v19 = get_local __ptr u64, i, !2130
        v20 = const u64 63, !2131
        store v20 to v19, !2132
        br print_u32_32_while(), !2118

        print_u32_32_while():
        v21 = const bool true, !2133
        cbr v21, print_u32_32_while_body(), print_u32_32_end_while(), !2118

        print_u32_32_while_body():
        v22 = get_local __ptr u64, value__, !2135
        v23 = get_local __ptr u64, self_00, !2138
        mem_copy_val v23, v22
        v24 = get_local __ptr u64, other_, !2139
        v25 = const u64 10, !2140
        store v25 to v24, !2141
        v26 = get_local __ptr u64, self_00, !2143
        v27 = load v26, !2144
        v28 = get_local __ptr u64, other_, !2146
        v29 = load v28, !2147
        v30 = mod v27, v29, !2148
        v31 = asm(v: v30) -> u8 v, !2150 {
        }
        v32 = get_local __ptr u8, digit, !2152
        store v31 to v32, !2153
        v33 = get_local __ptr u8, digit, !2155
        v34 = load v33, !2118
        v35 = const u8 48, !2156
        v36 = call add_12(v34, v35), !2159
        v37 = get_local __ptr [u8; 64], digits, !2161
        v38 = get_local __ptr u64, i, !2163
        v39 = load v38, !2118
        v40 = get_elem_ptr v37, __ptr u8, v39, !2164
        store v36 to v40, !2165
        v41 = get_local __ptr u64, value__, !2167
        v42 = get_local __ptr u64, self_1, !2170
        mem_copy_val v42, v41
        v43 = get_local __ptr u64, other_0, !2171
        v44 = const u64 10, !2172
        store v44 to v43, !2173
        v45 = get_local __ptr u64, self_1, !2175
        v46 = load v45, !2176
        v47 = get_local __ptr u64, other_0, !2178
        v48 = load v47, !2179
        v49 = div v46, v48, !2180
        v50 = get_local __ptr u64, value__, !2182
        store v49 to v50, !2183
        v51 = get_local __ptr u64, value__, !2185
        v52 = get_local __ptr u64, self_2, !2188
        mem_copy_val v52, v51
        v53 = get_local __ptr u64, other_1, !2189
        v54 = const u64 0, !2190
        store v54 to v53, !2191
        v55 = get_local __ptr u64, self_2, !2193
        v56 = load v55, !2194
        v57 = get_local __ptr u64, other_1, !2196
        v58 = load v57, !2197
        v59 = cmp eq v56 v58, !2198
        cbr v59, print_u32_32_end_while(), print_u32_32_block1(), !2199

        print_u32_32_block1():
        v60 = get_local __ptr u64, i, !2201
        v61 = get_local __ptr u64, self_3, !2204
        mem_copy_val v61, v60
        v62 = get_local __ptr u64, other_2, !2205
        v63 = const u64 1, !2206
        store v63 to v62, !2207
        v64 = get_local __ptr u64, self_3, !2208
        v65 = load v64, !2209
        v66 = get_local __ptr u64, other_2, !2210
        v67 = load v66, !2211
        v68 = sub v65, v67, !2212
        v69 = get_local __ptr u64, i, !2213
        store v68 to v69, !2214
        br print_u32_32_while(), !2118

        print_u32_32_end_while():
        v70 = get_global __ptr u64, std::debug::STDERR, !2216
        v71 = load v70, !2118
        v72 = get_local __ptr [u8; 64], digits, !2218
        v73 = cast_ptr v72 to ptr, !2220
        v74 = get_local __ptr u64, i, !2222
        v75 = get_local __ptr ptr, self_4, !2225
        store v73 to v75, !2226
        v76 = get_local __ptr u64, count_, !2227
        mem_copy_val v76, v74
        v77 = get_local __ptr ptr, self_4, !2228
        v78 = load v77, !2229
        v79 = get_local __ptr u64, count_, !2230
        v80 = load v79, !2231
        v81 = const u64 1
        v82 = mul v81, v80, !2232
        v83 = add v78, v82, !2233
        v84 = get_local __ptr u64, i, !2235
        v85 = get_local __ptr u64, self_5, !2238
        v86 = const u64 64, !2239
        store v86 to v85, !2240
        v87 = get_local __ptr u64, other_3, !2241
        mem_copy_val v87, v84
        v88 = get_local __ptr u64, self_5, !2242
        v89 = load v88, !2243
        v90 = get_local __ptr u64, other_3, !2244
        v91 = load v90, !2245
        v92 = sub v89, v91, !2246
        v93 = call syscall_write_2(v71, v83, v92), !2249
        v94 = const unit ()
        ret () v94
    }

    pub fn fmt_38(self !2250: u64, f !2251: __ptr {  }) -> (), !2254 {
        local [u8; 64] __anon_0
        local u64 count_
        local u8 digit
        local mut [u8; 64] digits
        local __ptr {  } f_
        local mut u64 i
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_
        local {  } self_0
        local u64 self_00
        local u64 self_1
        local u64 self_2
        local u64 self_3
        local ptr self_4
        local u64 self_5
        local u64 value_
        local mut u64 value__

        entry(self: u64, f: __ptr {  }):
        v0 = get_local __ptr u64, self_
        store self to v0
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr __ptr {  }, f_, !2255
        v3 = load v2
        v4 = get_local __ptr u64, self_, !2256
        v5 = get_local __ptr {  }, self_0, !2259
        mem_copy_val v5, v3
        v6 = get_local __ptr u64, value_, !2259
        mem_copy_val v6, v4
        v7 = get_local __ptr u64, value_, !2261
        v8 = get_local __ptr u64, value__, !2263
        mem_copy_val v8, v7
        v9 = get_local __ptr [u8; 64], __anon_0, !2265
        v10 = const u64 0
        br print_u64_39_array_init_loop(v10), !2259

        print_u64_39_array_init_loop(v11: u64):
        v12 = get_elem_ptr v9, __ptr u8, v11, !2259
        v13 = const u8 48, !2266
        store v13 to v12, !2267
        v14 = const u64 1
        v15 = add v11, v14, !2259
        v16 = const u64 64
        v17 = cmp lt v15 v16, !2259
        cbr v17, print_u64_39_array_init_loop(v15), print_u64_39_array_init_exit(), !2259

        print_u64_39_array_init_exit():
        v18 = get_local __ptr [u8; 64], digits, !2269
        mem_copy_val v18, v9
        v19 = get_local __ptr u64, i, !2271
        v20 = const u64 63, !2272
        store v20 to v19, !2273
        br print_u64_39_while(), !2259

        print_u64_39_while():
        v21 = const bool true, !2274
        cbr v21, print_u64_39_while_body(), print_u64_39_end_while(), !2259

        print_u64_39_while_body():
        v22 = get_local __ptr u64, value__, !2276
        v23 = get_local __ptr u64, self_00, !2279
        mem_copy_val v23, v22
        v24 = get_local __ptr u64, other_, !2280
        v25 = const u64 10, !2281
        store v25 to v24, !2282
        v26 = get_local __ptr u64, self_00, !2284
        v27 = load v26, !2285
        v28 = get_local __ptr u64, other_, !2287
        v29 = load v28, !2288
        v30 = mod v27, v29, !2289
        v31 = asm(v: v30) -> u8 v, !2291 {
        }
        v32 = get_local __ptr u8, digit, !2293
        store v31 to v32, !2294
        v33 = get_local __ptr u8, digit, !2296
        v34 = load v33, !2259
        v35 = const u8 48, !2297
        v36 = call add_12(v34, v35), !2300
        v37 = get_local __ptr [u8; 64], digits, !2302
        v38 = get_local __ptr u64, i, !2304
        v39 = load v38, !2259
        v40 = get_elem_ptr v37, __ptr u8, v39, !2305
        store v36 to v40, !2306
        v41 = get_local __ptr u64, value__, !2308
        v42 = get_local __ptr u64, self_1, !2311
        mem_copy_val v42, v41
        v43 = get_local __ptr u64, other_0, !2312
        v44 = const u64 10, !2313
        store v44 to v43, !2314
        v45 = get_local __ptr u64, self_1, !2316
        v46 = load v45, !2317
        v47 = get_local __ptr u64, other_0, !2319
        v48 = load v47, !2320
        v49 = div v46, v48, !2321
        v50 = get_local __ptr u64, value__, !2323
        store v49 to v50, !2324
        v51 = get_local __ptr u64, value__, !2326
        v52 = get_local __ptr u64, self_2, !2329
        mem_copy_val v52, v51
        v53 = get_local __ptr u64, other_1, !2330
        v54 = const u64 0, !2331
        store v54 to v53, !2332
        v55 = get_local __ptr u64, self_2, !2333
        v56 = load v55, !2334
        v57 = get_local __ptr u64, other_1, !2335
        v58 = load v57, !2336
        v59 = cmp eq v56 v58, !2337
        cbr v59, print_u64_39_end_while(), print_u64_39_block1(), !2338

        print_u64_39_block1():
        v60 = get_local __ptr u64, i, !2340
        v61 = get_local __ptr u64, self_3, !2343
        mem_copy_val v61, v60
        v62 = get_local __ptr u64, other_2, !2344
        v63 = const u64 1, !2345
        store v63 to v62, !2346
        v64 = get_local __ptr u64, self_3, !2347
        v65 = load v64, !2348
        v66 = get_local __ptr u64, other_2, !2349
        v67 = load v66, !2350
        v68 = sub v65, v67, !2351
        v69 = get_local __ptr u64, i, !2352
        store v68 to v69, !2353
        br print_u64_39_while(), !2259

        print_u64_39_end_while():
        v70 = get_global __ptr u64, std::debug::STDERR, !2355
        v71 = load v70, !2259
        v72 = get_local __ptr [u8; 64], digits, !2357
        v73 = cast_ptr v72 to ptr, !2359
        v74 = get_local __ptr u64, i, !2361
        v75 = get_local __ptr ptr, self_4, !2364
        store v73 to v75, !2365
        v76 = get_local __ptr u64, count_, !2366
        mem_copy_val v76, v74
        v77 = get_local __ptr ptr, self_4, !2367
        v78 = load v77, !2368
        v79 = get_local __ptr u64, count_, !2369
        v80 = load v79, !2370
        v81 = const u64 1
        v82 = mul v81, v80, !2371
        v83 = add v78, v82, !2372
        v84 = get_local __ptr u64, i, !2374
        v85 = get_local __ptr u64, self_5, !2377
        v86 = const u64 64, !2378
        store v86 to v85, !2379
        v87 = get_local __ptr u64, other_3, !2380
        mem_copy_val v87, v84
        v88 = get_local __ptr u64, self_5, !2381
        v89 = load v88, !2382
        v90 = get_local __ptr u64, other_3, !2383
        v91 = load v90, !2384
        v92 = sub v89, v91, !2385
        v93 = call syscall_write_2(v71, v83, v92), !2388
        v94 = const unit ()
        ret () v94
    }

    pub fn fmt_45(self: __ptr u256, f !2389: __ptr {  }) -> (), !2392 {
        local u64 _
        local u64 __
        local u64 ___
        local mut { u64, u64, u64, u64 } __aggr_memcpy_0
        local [u8; 80] __anon_0
        local u256 __const = const u256 0x000000000000000000000000000000000000000000000000000000000000000a
        local u256 __const0 = const u256 0x000000000000000000000000000000000000000000000000000000000000000a
        local u256 __const1 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u256 __tmp_block_arg
        local u256 __tmp_block_arg0
        local { u64, u64, u64, u64 } __tuple_1
        local { u64, u64, u64, u64 } __tuple_1_
        local u256 __wide_lhs
        local u256 __wide_lhs0
        local u256 __wide_lhs1
        local mut u256 __wide_result
        local mut u256 __wide_result0
        local u256 __wide_rhs
        local u256 __wide_rhs0
        local u256 __wide_rhs1
        local mut u256 __wide_zero = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u64 count_
        local u64 digit
        local u8 digit_
        local mut [u8; 80] digits
        local __ptr {  } f_
        local mut u64 i
        local u256 other_
        local u64 other_0
        local u256 other_1
        local u256 other_2
        local u64 other_3
        local u64 other_4
        local u256 rem
        local u256 self_
        local {  } self_0
        local u256 self_00
        local u64 self_1
        local u256 self_2
        local u256 self_3
        local u64 self_4
        local ptr self_5
        local u64 self_6
        local u256 value_
        local mut u256 value__

        entry(self: __ptr u256, f: __ptr {  }):
        v0 = get_local __ptr u256, self_
        mem_copy_val v0, self
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr __ptr {  }, f_, !2393
        v3 = load v2
        v4 = get_local __ptr u256, self_, !2394
        v5 = get_local __ptr {  }, self_0, !2397
        mem_copy_val v5, v3
        v6 = get_local __ptr u256, value_, !2397
        mem_copy_val v6, v4
        v7 = get_local __ptr u256, value_, !2399
        v8 = get_local __ptr u256, value__, !2401
        mem_copy_val v8, v7
        v9 = get_local __ptr [u8; 80], __anon_0, !2403
        v10 = const u64 0
        br print_u256_46_array_init_loop(v10), !2397

        print_u256_46_array_init_loop(v11: u64):
        v12 = get_elem_ptr v9, __ptr u8, v11, !2397
        v13 = const u8 48, !2404
        store v13 to v12, !2405
        v14 = const u64 1
        v15 = add v11, v14, !2397
        v16 = const u64 80
        v17 = cmp lt v15 v16, !2397
        cbr v17, print_u256_46_array_init_loop(v15), print_u256_46_array_init_exit(), !2397

        print_u256_46_array_init_exit():
        v18 = get_local __ptr [u8; 80], digits, !2407
        mem_copy_val v18, v9
        v19 = get_local __ptr u64, i, !2409
        v20 = const u64 79, !2410
        store v20 to v19, !2411
        br print_u256_46_while(), !2397

        print_u256_46_while():
        v21 = const bool true, !2412
        cbr v21, print_u256_46_while_body(), print_u256_46_end_while(), !2397

        print_u256_46_while_body():
        v22 = get_local __ptr u256, __const
        v23 = get_local __ptr u256, value__, !2414
        v24 = get_local __ptr u256, self_00, !2417
        mem_copy_val v24, v23
        v25 = get_local __ptr u256, other_, !2418
        mem_copy_val v25, v22
        v26 = get_local __ptr u256, self_00, !2420
        v27 = get_local __ptr u256, other_, !2422
        v28 = get_local __ptr u256, __wide_lhs, !2423
        mem_copy_val v28, v26
        v29 = get_local __ptr u256, __wide_zero, !2424
        v30 = get_local __ptr u256, __wide_rhs, !2425
        mem_copy_val v30, v27
        v31 = get_local __ptr u256, __wide_result, !2424
        wide mod v28, v29, v30 to v31, !2424
        v32 = get_local __ptr u256, __tmp_block_arg
        mem_copy_val v32, v31
        v33 = get_local __ptr u256, rem, !2427
        mem_copy_val v33, v32
        v34 = get_local __ptr u256, rem, !2429
        v35 = asm(rem: v34) -> __ptr { u64, u64, u64, u64 } rem {
        }
        v36 = get_local __ptr { u64, u64, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v36, v35
        v37 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1, !2431
        mem_copy_val v37, v36
        v38 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1, !2432
        v39 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1_, !2433
        mem_copy_val v39, v38
        v40 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1_, !2434
        v41 = const u64 0
        v42 = get_elem_ptr v40, __ptr u64, v41, !2435
        v43 = get_local __ptr u64, _, !2436
        mem_copy_val v43, v42
        v44 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1_, !2437
        v45 = const u64 1
        v46 = get_elem_ptr v44, __ptr u64, v45, !2438
        v47 = get_local __ptr u64, __, !2439
        mem_copy_val v47, v46
        v48 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1_, !2440
        v49 = const u64 2
        v50 = get_elem_ptr v48, __ptr u64, v49, !2441
        v51 = get_local __ptr u64, ___, !2442
        mem_copy_val v51, v50
        v52 = get_local __ptr { u64, u64, u64, u64 }, __tuple_1_, !2443
        v53 = const u64 3
        v54 = get_elem_ptr v52, __ptr u64, v53, !2444
        v55 = get_local __ptr u64, digit, !2445
        mem_copy_val v55, v54
        v56 = get_local __ptr u64, digit, !2447
        v57 = get_local __ptr u64, self_1, !2450
        mem_copy_val v57, v56
        v58 = get_local __ptr u64, other_0, !2451
        v59 = const u64 10, !2452
        store v59 to v58, !2453
        v60 = get_local __ptr u64, self_1, !2454
        v61 = load v60, !2455
        v62 = get_local __ptr u64, other_0, !2456
        v63 = load v62, !2457
        v64 = mod v61, v63, !2458
        v65 = get_local __ptr u256, __const0
        v66 = asm(v: v64) -> u8 v, !2460 {
        }
        v67 = get_local __ptr u8, digit_, !2462
        store v66 to v67, !2463
        v68 = get_local __ptr u8, digit_, !2465
        v69 = load v68, !2397
        v70 = const u8 48, !2466
        v71 = call add_12(v69, v70), !2469
        v72 = get_local __ptr [u8; 80], digits, !2471
        v73 = get_local __ptr u64, i, !2473
        v74 = load v73, !2397
        v75 = get_elem_ptr v72, __ptr u8, v74, !2474
        store v71 to v75, !2475
        v76 = get_local __ptr u256, value__, !2477
        v77 = get_local __ptr u256, self_2, !2480
        mem_copy_val v77, v76
        v78 = get_local __ptr u256, other_1, !2481
        mem_copy_val v78, v65
        v79 = get_local __ptr u256, self_2, !2483
        v80 = get_local __ptr u256, other_1, !2485
        v81 = get_local __ptr u256, __wide_lhs0, !2486
        mem_copy_val v81, v79
        v82 = get_local __ptr u256, __wide_rhs0, !2487
        mem_copy_val v82, v80
        v83 = get_local __ptr u256, __wide_result0, !2488
        wide div v81, v82 to v83, !2488
        v84 = get_local __ptr u256, __tmp_block_arg0
        mem_copy_val v84, v83
        v85 = get_local __ptr u256, __const1
        v86 = get_local __ptr u256, value__, !2490
        mem_copy_val v86, v84
        v87 = get_local __ptr u256, value__, !2492
        v88 = get_local __ptr u256, self_3, !2495
        mem_copy_val v88, v87
        v89 = get_local __ptr u256, other_2, !2496
        mem_copy_val v89, v85
        v90 = get_local __ptr u256, self_3, !2498
        v91 = get_local __ptr u256, other_2, !2500
        v92 = get_local __ptr u256, __wide_lhs1, !2501
        mem_copy_val v92, v90
        v93 = get_local __ptr u256, __wide_rhs1, !2502
        mem_copy_val v93, v91
        v94 = wide cmp eq v92 v93, !2503
        cbr v94, print_u256_46_end_while(), print_u256_46_block1(), !2504

        print_u256_46_block1():
        v95 = get_local __ptr u64, i, !2506
        v96 = get_local __ptr u64, self_4, !2509
        mem_copy_val v96, v95
        v97 = get_local __ptr u64, other_3, !2510
        v98 = const u64 1, !2511
        store v98 to v97, !2512
        v99 = get_local __ptr u64, self_4, !2513
        v100 = load v99, !2514
        v101 = get_local __ptr u64, other_3, !2515
        v102 = load v101, !2516
        v103 = sub v100, v102, !2517
        v104 = get_local __ptr u64, i, !2518
        store v103 to v104, !2519
        br print_u256_46_while(), !2397

        print_u256_46_end_while():
        v105 = get_global __ptr u64, std::debug::STDERR, !2521
        v106 = load v105, !2397
        v107 = get_local __ptr [u8; 80], digits, !2523
        v108 = cast_ptr v107 to ptr, !2525
        v109 = get_local __ptr u64, i, !2527
        v110 = get_local __ptr ptr, self_5, !2530
        store v108 to v110, !2531
        v111 = get_local __ptr u64, count_, !2532
        mem_copy_val v111, v109
        v112 = get_local __ptr ptr, self_5, !2533
        v113 = load v112, !2534
        v114 = get_local __ptr u64, count_, !2535
        v115 = load v114, !2536
        v116 = const u64 1
        v117 = mul v116, v115, !2537
        v118 = add v113, v117, !2538
        v119 = get_local __ptr u64, i, !2540
        v120 = get_local __ptr u64, self_6, !2543
        v121 = const u64 80, !2544
        store v121 to v120, !2545
        v122 = get_local __ptr u64, other_4, !2546
        mem_copy_val v122, v119
        v123 = get_local __ptr u64, self_6, !2547
        v124 = load v123, !2548
        v125 = get_local __ptr u64, other_4, !2549
        v126 = load v125, !2550
        v127 = sub v124, v126, !2551
        v128 = call syscall_write_2(v106, v118, v127), !2554
        v129 = const unit ()
        ret () v129
    }

    pub fn fmt_52(self: __ptr b256, f !2555: __ptr {  }) -> (), !2558 {
        local mut u256 __aggr_memcpy_0
        local mut { u64, u64, u64, u64 } __aggr_memcpy_00
        local [u8; 66] __anon_0
        local u256 __const = const u256 0x0000000000000000000000000000000000000000000000000000000000000010
        local u256 __const0 = const u256 0x0000000000000000000000000000000000000000000000000000000000000010
        local u256 __const1 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u256 __tmp_block_arg
        local u256 __tmp_block_arg0
        local { u64, u64, u64, u64 } __tuple_2
        local mut u256 __wide_result
        local mut u256 __wide_result0
        local mut u256 __wide_zero = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u8 a
        local u64 digit
        local u8 digit_
        local mut [u8; 66] digits
        local mut u64 i
        local u64 max_u8_u64
        local u64 other_0
        local u8 other_1
        local u8 other_2
        local u64 other_5
        local u256 rem
        local u64 res_u64
        local b256 self_
        local u256 self_00
        local u8 self_3
        local u256 self_4
        local u256 self_5
        local u64 self_6
        local bool uppercase_
        local u8 val_0
        local u8 val_1
        local u64 val_2
        local u64 val_3
        local u256 value_
        local mut u256 value__

        entry(self: __ptr b256, f: __ptr {  }):
        v0 = get_local __ptr b256, self_
        mem_copy_val v0, self
        v1 = get_local __ptr b256, self_, !2559
        v2 = asm(s: v1) -> __ptr u256 s {
        }
        v3 = get_local __ptr u256, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local __ptr u256, value_, !2562
        mem_copy_val v4, v3
        v5 = get_local __ptr bool, uppercase_, !2562
        v6 = const bool true, !2563
        store v6 to v5, !2562
        v7 = get_local __ptr bool, uppercase_, !2565
        v8 = load v7, !2562
        v9 = const u8 65, !2566
        cbr v8, print_u256_as_hex_53_block2(v9), print_u256_as_hex_53_block1(), !2567

        print_u256_as_hex_53_block1():
        v10 = const u8 97, !2568
        br print_u256_as_hex_53_block2(v10), !2562

        print_u256_as_hex_53_block2(v11: u8):
        v12 = get_local __ptr u8, a, !2570
        store v11 to v12, !2571
        v13 = get_local __ptr u256, value_, !2573
        v14 = get_local __ptr u256, value__, !2575
        mem_copy_val v14, v13
        v15 = get_local __ptr [u8; 66], __anon_0, !2577
        v16 = const u64 0
        br print_u256_as_hex_53_array_init_loop(v16), !2562

        print_u256_as_hex_53_array_init_loop(v17: u64):
        v18 = get_elem_ptr v15, __ptr u8, v17, !2562
        v19 = const u8 48, !2578
        store v19 to v18, !2579
        v20 = const u64 1
        v21 = add v17, v20, !2562
        v22 = const u64 66
        v23 = cmp lt v21 v22, !2562
        cbr v23, print_u256_as_hex_53_array_init_loop(v21), print_u256_as_hex_53_array_init_exit(), !2562

        print_u256_as_hex_53_array_init_exit():
        v24 = get_local __ptr [u8; 66], digits, !2581
        mem_copy_val v24, v15
        v25 = get_local __ptr [u8; 66], digits, !2583
        v26 = const u64 0, !2584
        v27 = get_elem_ptr v25, __ptr u8, v26, !2585
        v28 = const u8 48, !2586
        store v28 to v27, !2587
        v29 = get_local __ptr [u8; 66], digits, !2589
        v30 = const u64 1, !2590
        v31 = get_elem_ptr v29, __ptr u8, v30, !2591
        v32 = const u8 120, !2592
        store v32 to v31, !2593
        v33 = get_local __ptr u64, i, !2595
        v34 = const u64 65, !2596
        store v34 to v33, !2597
        br print_u256_as_hex_53_while(), !2562

        print_u256_as_hex_53_while():
        v35 = const bool true, !2598
        cbr v35, print_u256_as_hex_53_while_body(), print_u256_as_hex_53_end_while(), !2562

        print_u256_as_hex_53_while_body():
        v36 = get_local __ptr u256, value__, !2600
        v37 = get_local __ptr u256, self_00, !2603
        mem_copy_val v37, v36
        v38 = get_local __ptr u256, self_00, !2604
        v39 = get_local __ptr u256, __wide_zero, !2605
        v40 = get_local __ptr u256, __const, !2606
        v41 = get_local __ptr u256, __wide_result, !2605
        wide mod v38, v39, v40 to v41, !2605
        v42 = get_local __ptr u256, __tmp_block_arg
        mem_copy_val v42, v41
        v43 = get_local __ptr u256, rem, !2608
        mem_copy_val v43, v42
        v44 = get_local __ptr u256, rem, !2610
        v45 = asm(rem: v44) -> __ptr { u64, u64, u64, u64 } rem {
        }
        v46 = get_local __ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v46, v45
        v47 = get_local __ptr { u64, u64, u64, u64 }, __tuple_2, !2612
        mem_copy_val v47, v46
        v48 = get_local __ptr u64, digit, !2613
        v49 = get_local __ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        v50 = const u64 3
        v51 = get_elem_ptr v49, __ptr u64, v50
        mem_copy_val v48, v51
        v52 = get_local __ptr u64, other_0, !2616
        v53 = const u64 16, !2617
        store v53 to v52, !2618
        v54 = load v51, !2619
        v55 = get_local __ptr u64, other_0, !2620
        v56 = load v55, !2621
        v57 = mod v54, v56, !2622
        v58 = asm(v: v57) -> u8 v, !2624 {
        }
        v59 = get_local __ptr u8, digit_, !2626
        store v58 to v59, !2627
        v60 = get_local __ptr u8, other_1, !2630
        v61 = const u8 10, !2631
        store v61 to v60, !2632
        v62 = get_local __ptr u8, digit_, !2634
        v63 = load v62, !2635
        v64 = get_local __ptr u8, other_1, !2637
        v65 = load v64, !2638
        v66 = cmp lt v63 v65, !2639
        cbr v66, print_u256_as_hex_53_block3(), print_u256_as_hex_53_block4(), !2640

        print_u256_as_hex_53_block3():
        v67 = get_local __ptr u8, digit_, !2642
        v68 = load v67, !2562
        v69 = const u8 48, !2643
        v70 = call add_12(v68, v69), !2646
        v71 = get_local __ptr [u8; 66], digits, !2648
        v72 = get_local __ptr u64, i, !2650
        v73 = load v72, !2562
        v74 = get_elem_ptr v71, __ptr u8, v73, !2651
        store v70 to v74, !2652
        br print_u256_as_hex_53_block5(), !2562

        print_u256_as_hex_53_block4():
        v75 = get_local __ptr u8, digit_, !2654
        v76 = get_local __ptr u8, self_3, !2657
        mem_copy_val v76, v75
        v77 = get_local __ptr u8, other_2, !2658
        v78 = const u8 10, !2659
        store v78 to v77, !2660
        v79 = load v75, !2663
        v80 = asm(input: v79) -> u64 input, !2664 {
        }
        v81 = get_local __ptr u8, other_2, !2666
        v82 = get_local __ptr u8, val_0, !2669
        mem_copy_val v82, v81
        v83 = load v81, !2670
        v84 = asm(input: v83) -> u64 input, !2671 {
        }
        v85 = sub v80, v84, !2672
        v86 = get_local __ptr u64, res_u64, !2674
        store v85 to v86, !2675
        v87 = get_local __ptr u8, val_1, !2678
        v88 = const u8 255, !154
        store v88 to v87, !2679
        v89 = get_local __ptr u8, val_1, !2680
        v90 = load v89, !2681
        v91 = asm(input: v90) -> u64 input, !2682 {
        }
        v92 = get_local __ptr u64, max_u8_u64, !2684
        store v91 to v92, !2685
        v93 = get_local __ptr u64, res_u64, !2687
        v94 = load v93, !2688
        v95 = get_local __ptr u64, max_u8_u64, !2690
        v96 = load v95, !2691
        v97 = cmp gt v94 v96, !2692
        cbr v97, print_u256_as_hex_53_subtract_55_block0(), print_u256_as_hex_53_subtract_55_block4(), !2694

        print_u256_as_hex_53_subtract_55_block0():
        v98 = asm() -> u64 flag, !2697 {
        }
        v99 = get_global __ptr u64, std::flags::F_WRAPPING_DISABLE_MASK, !2698
        v100 = load v99, !2699
        v101 = and v98, v100, !2700
        v102 = const u64 0, !1950
        v103 = cmp eq v101 v102, !2701
        cbr v103, print_u256_as_hex_53_subtract_55_block1(), print_u256_as_hex_53_subtract_55_block2(), !2702

        print_u256_as_hex_53_subtract_55_block1():
        v104 = const u64 0, !2703
        revert v104, !2705

        print_u256_as_hex_53_subtract_55_block2():
        v105 = get_local __ptr u64, res_u64, !2707
        v106 = load v105, !2708
        v107 = get_local __ptr u64, max_u8_u64, !2710
        v108 = load v107, !2711
        v109 = const u64 1, !2712
        v110 = add v108, v109, !2713
        v111 = mod v106, v110, !2714
        v112 = get_local __ptr u64, val_2, !2717
        store v111 to v112, !2718
        v113 = get_local __ptr u64, val_2, !2719
        v114 = load v113, !2720
        v115 = asm(input: v114) -> u8 input, !2721 {
        }
        br print_u256_as_hex_53_subtract_55_block5(v115), !2722

        print_u256_as_hex_53_subtract_55_block4():
        v116 = get_local __ptr u64, res_u64, !2724
        v117 = get_local __ptr u64, val_3, !2727
        mem_copy_val v117, v116
        v118 = load v116, !2728
        v119 = asm(input: v118) -> u8 input, !2729 {
        }
        br print_u256_as_hex_53_subtract_55_block5(v119), !2730

        print_u256_as_hex_53_subtract_55_block5(v120: u8):
        v121 = get_local __ptr u8, a, !2732
        v122 = load v121, !2562
        v123 = call add_12(v120, v122), !2735
        v124 = get_local __ptr [u8; 66], digits, !2737
        v125 = get_local __ptr u64, i, !2739
        v126 = load v125, !2562
        v127 = get_elem_ptr v124, __ptr u8, v126, !2740
        store v123 to v127, !2741
        br print_u256_as_hex_53_block5(), !2562

        print_u256_as_hex_53_block5():
        v128 = get_local __ptr u256, value__, !2743
        v129 = get_local __ptr u256, self_4, !2746
        mem_copy_val v129, v128
        v130 = get_local __ptr u256, self_4, !2747
        v131 = get_local __ptr u256, __const0, !2748
        v132 = get_local __ptr u256, __wide_result0, !2749
        wide div v130, v131 to v132, !2749
        v133 = get_local __ptr u256, __tmp_block_arg0
        mem_copy_val v133, v132
        v134 = get_local __ptr u256, value__, !2751
        mem_copy_val v134, v133
        v135 = get_local __ptr u256, self_5, !2754
        mem_copy_val v135, v133
        v136 = get_local __ptr u256, self_5, !2755
        v137 = get_local __ptr u256, __const1, !2756
        v138 = wide cmp eq v136 v137, !2757
        cbr v138, print_u256_as_hex_53_end_while(), print_u256_as_hex_53_block7(), !2758

        print_u256_as_hex_53_block7():
        v139 = get_local __ptr u64, i, !2760
        v140 = get_local __ptr u64, self_6, !2763
        mem_copy_val v140, v139
        v141 = get_local __ptr u64, other_5, !2764
        v142 = const u64 1, !2765
        store v142 to v141, !2766
        v143 = load v139, !2767
        v144 = get_local __ptr u64, other_5, !2768
        v145 = load v144, !2769
        v146 = sub v143, v145, !2770
        v147 = get_local __ptr u64, i, !2771
        store v146 to v147, !2772
        br print_u256_as_hex_53_while(), !2562

        print_u256_as_hex_53_end_while():
        v148 = get_global __ptr u64, std::debug::STDERR, !2774
        v149 = load v148, !2562
        v150 = get_local __ptr [u8; 66], digits, !2776
        v151 = cast_ptr v150 to ptr, !2778
        v152 = const u64 66, !2779
        v153 = call syscall_write_2(v149, v151, v152), !2782
        v154 = const unit ()
        ret () v154
    }

    pub fn fmt_57(self: __ptr slice, f !2783: __ptr {  }) -> (), !2786 {
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local {  } __tmp_arg2
        local __ptr {  } f_

        entry(self: __ptr slice, f: __ptr {  }):
        v0 = get_local __ptr __ptr {  }, f_
        store f to v0
        v1 = get_local __ptr __ptr {  }, f_, !2787
        v2 = load v1
        v3 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v3, v2
        v4 = call print_string_quotes_58(v3)
        v5 = get_local __ptr __ptr {  }, f_, !2788
        v6 = load v5
        v7 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v7, v6
        v8 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v8, self
        v9 = call print_str_1(v7, v8)
        v10 = get_local __ptr __ptr {  }, f_, !2789
        v11 = load v10
        v12 = get_local __ptr {  }, __tmp_arg2
        mem_copy_val v12, v11
        v13 = call print_string_quotes_58(v12)
        v14 = const unit ()
        ret () v14
    }

    pub fn print_string_quotes_58(self: __ptr {  }) -> (), !2792 {
        local [u8; 1] __anon_0
        local [u8; 1] c

        entry(self: __ptr {  }):
        v0 = get_local __ptr [u8; 1], __anon_0, !2793
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr u8, v1
        v3 = const u8 34, !2794
        store v3 to v2, !2793
        v4 = get_local __ptr [u8; 1], c, !2795
        mem_copy_val v4, v0
        v5 = get_global __ptr u64, std::debug::STDERR, !2796
        v6 = load v5
        v7 = get_local __ptr [u8; 1], c, !2797
        v8 = cast_ptr v7 to ptr, !2798
        v9 = const u64 1, !2799
        v10 = call syscall_write_2(v6, v8, v9), !2802
        v11 = const unit ()
        ret () v11
    }

    pub fn debug_tuple_62(self: __ptr {  }, name: __ptr slice, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !2805 {
        local string<1> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local { {  }, bool } __anon_3
        local string<1> __const = const string<1> "("
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice name_
        local u64 other_
        local {  } self_
        local u64 self_0

        entry(self: __ptr {  }, name: __ptr slice, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr {  }, self_
        mem_copy_val v0, self
        v1 = get_local __ptr slice, name_
        mem_copy_val v1, name
        v2 = get_local __ptr slice, __tmp_arg3
        mem_copy_val v2, name
        v3 = call len_4(v2)
        v4 = get_local __ptr u64, self_0, !2808
        store v3 to v4, !2808
        v5 = get_local __ptr u64, other_, !2808
        v6 = const u64 0, !2809
        store v6 to v5, !2808
        v7 = get_local __ptr u64, self_0, !2810
        v8 = load v7, !2808
        v9 = get_local __ptr u64, other_, !2811
        v10 = load v9, !2808
        v11 = cmp gt v8 v10, !2808
        cbr v11, block0(), block2(), !2806

        block0():
        v12 = get_local __ptr {  }, self_, !2812
        v13 = get_local __ptr slice, name_, !2813
        v14 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v14, v12
        v15 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = call print_str_1(v14, v15)
        br block2()

        block2():
        v17 = get_local __ptr string<1>, __const
        v18 = get_local __ptr {  }, self_, !2814
        v19 = get_local __ptr string<1>, __anon_0
        mem_copy_val v19, v17
        v20 = cast_ptr v19 to ptr, !2815
        v21 = get_local __ptr { ptr, u64 }, __anon_1, !2815
        v22 = const u64 0
        v23 = get_elem_ptr v21, __ptr ptr, v22
        store v20 to v23, !2815
        v24 = const u64 1
        v25 = get_elem_ptr v21, __ptr u64, v24
        v26 = const u64 1
        store v26 to v25, !2815
        v27 = get_local __ptr slice, __anon_2, !2815
        mem_copy_bytes v27, v21, 16
        v28 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v28, v18
        v29 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v29, v27
        v30 = call print_str_1(v28, v29)
        v31 = get_local __ptr {  }, self_, !2816
        v32 = get_local __ptr { {  }, bool }, __anon_3, !2817
        v33 = const u64 0
        v34 = get_elem_ptr v32, __ptr {  }, v33
        mem_copy_val v34, v31
        v35 = const u64 1
        v36 = get_elem_ptr v32, __ptr bool, v35
        v37 = const bool false, !2818
        store v37 to v36, !2817
        mem_copy_val __ret_value, v32
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn field_65(self !2819: __ptr { {  }, bool }, value !2820: u8, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !2823 {
        local string<2> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local __ptr { {  }, bool } self_
        local u8 value_

        entry(self: __ptr { {  }, bool }, value: u8, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local __ptr u8, value_
        store value to v1
        v2 = get_local __ptr __ptr { {  }, bool }, self_, !393
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, __ptr bool, v4, !395
        v6 = load v5
        cbr v6, block0(), block2(), !397

        block0():
        v7 = get_local __ptr string<2>, __const
        v8 = get_local __ptr __ptr { {  }, bool }, self_, !399
        v9 = load v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr {  }, v10, !401
        v12 = get_local __ptr string<2>, __anon_0
        mem_copy_val v12, v7
        v13 = cast_ptr v12 to ptr, !403
        v14 = get_local __ptr { ptr, u64 }, __anon_1, !403
        v15 = const u64 0
        v16 = get_elem_ptr v14, __ptr ptr, v15
        store v13 to v16, !403
        v17 = const u64 1
        v18 = get_elem_ptr v14, __ptr u64, v17
        v19 = const u64 2
        store v19 to v18, !403
        v20 = get_local __ptr slice, __anon_2, !403
        mem_copy_bytes v20, v14, 16
        v21 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v21, v11
        v22 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v22, v20
        v23 = call print_str_1(v21, v22)
        br block2()

        block2():
        v24 = get_local __ptr u8, value_, !409
        v25 = load v24
        v26 = get_local __ptr __ptr { {  }, bool }, self_, !411
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr {  }, v28, !401
        v30 = call fmt_10(v25, v29), !2826
        v31 = get_local __ptr __ptr { {  }, bool }, self_, !414
        v32 = load v31
        v33 = const u64 1
        v34 = get_elem_ptr v32, __ptr bool, v33, !414
        v35 = const bool true, !417
        store v35 to v34, !414
        v36 = get_local __ptr __ptr { {  }, bool }, self_, !419
        v37 = load v36
        mem_copy_val __ret_value, v37
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn finish_66(self !2827: __ptr { {  }, bool }) -> (), !2830 {
        local string<1> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<1> __const = const string<1> ")"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local __ptr { {  }, bool } self_

        entry(self: __ptr { {  }, bool }):
        v0 = get_local __ptr string<1>, __const
        v1 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v1
        v2 = get_local __ptr __ptr { {  }, bool }, self_, !2831
        v3 = load v2
        v4 = const u64 0
        v5 = get_elem_ptr v3, __ptr {  }, v4, !401
        v6 = get_local __ptr string<1>, __anon_0
        mem_copy_val v6, v0
        v7 = cast_ptr v6 to ptr, !2832
        v8 = get_local __ptr { ptr, u64 }, __anon_1, !2832
        v9 = const u64 0
        v10 = get_elem_ptr v8, __ptr ptr, v9
        store v7 to v10, !2832
        v11 = const u64 1
        v12 = get_elem_ptr v8, __ptr u64, v11
        v13 = const u64 1
        store v13 to v12, !2832
        v14 = get_local __ptr slice, __anon_2, !2832
        mem_copy_bytes v14, v8, 16
        v15 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v15, v5
        v16 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v16, v14
        v17 = call print_str_1(v15, v16)
        v18 = const unit ()
        ret () v18
    }

    pub fn debug_list_68(self: __ptr {  }, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !2835 {
        local string<1> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local { {  }, bool } __anon_3
        local string<1> __const = const string<1> "["
        local {  } __tmp_arg
        local slice __tmp_arg0

        entry(self: __ptr {  }, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr string<1>, __const
        v1 = get_local __ptr string<1>, __anon_0
        mem_copy_val v1, v0
        v2 = cast_ptr v1 to ptr, !2836
        v3 = get_local __ptr { ptr, u64 }, __anon_1, !2836
        v4 = const u64 0
        v5 = get_elem_ptr v3, __ptr ptr, v4
        store v2 to v5, !2836
        v6 = const u64 1
        v7 = get_elem_ptr v3, __ptr u64, v6
        v8 = const u64 1
        store v8 to v7, !2836
        v9 = get_local __ptr slice, __anon_2, !2836
        mem_copy_bytes v9, v3, 16
        v10 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v10, self
        v11 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v11, v9
        v12 = call print_str_1(v10, v11)
        v13 = get_local __ptr { {  }, bool }, __anon_3, !2837
        v14 = const u64 0
        v15 = get_elem_ptr v13, __ptr {  }, v14
        mem_copy_val v15, self
        v16 = const u64 1
        v17 = get_elem_ptr v13, __ptr bool, v16
        v18 = const bool false, !2838
        store v18 to v17, !2837
        mem_copy_val __ret_value, v13
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn entry_70(self !2839: __ptr { {  }, bool }, value !2840: u8, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !2843 {
        local string<2> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local __ptr { {  }, bool } self_
        local u8 value_

        entry(self: __ptr { {  }, bool }, value: u8, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local __ptr u8, value_
        store value to v1
        v2 = get_local __ptr __ptr { {  }, bool }, self_, !698
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, __ptr bool, v4, !701
        v6 = load v5
        cbr v6, block0(), block2(), !704

        block0():
        v7 = get_local __ptr string<2>, __const
        v8 = get_local __ptr __ptr { {  }, bool }, self_, !706
        v9 = load v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr {  }, v10, !709
        v12 = get_local __ptr string<2>, __anon_0
        mem_copy_val v12, v7
        v13 = cast_ptr v12 to ptr, !712
        v14 = get_local __ptr { ptr, u64 }, __anon_1, !712
        v15 = const u64 0
        v16 = get_elem_ptr v14, __ptr ptr, v15
        store v13 to v16, !712
        v17 = const u64 1
        v18 = get_elem_ptr v14, __ptr u64, v17
        v19 = const u64 2
        store v19 to v18, !712
        v20 = get_local __ptr slice, __anon_2, !712
        mem_copy_bytes v20, v14, 16
        v21 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v21, v11
        v22 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v22, v20
        v23 = call print_str_1(v21, v22)
        br block2()

        block2():
        v24 = get_local __ptr u8, value_, !722
        v25 = load v24
        v26 = get_local __ptr __ptr { {  }, bool }, self_, !724
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr {  }, v28, !709
        v30 = call fmt_10(v25, v29), !2846
        v31 = get_local __ptr __ptr { {  }, bool }, self_, !728
        v32 = load v31
        v33 = const u64 1
        v34 = get_elem_ptr v32, __ptr bool, v33, !728
        v35 = const bool true, !732
        store v35 to v34, !728
        v36 = get_local __ptr __ptr { {  }, bool }, self_, !734
        v37 = load v36
        mem_copy_val __ret_value, v37
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn finish_72(self !2847: __ptr { {  }, bool }) -> (), !2850 {
        local string<1> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<1> __const = const string<1> "]"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local __ptr { {  }, bool } self_

        entry(self: __ptr { {  }, bool }):
        v0 = get_local __ptr string<1>, __const
        v1 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v1
        v2 = get_local __ptr __ptr { {  }, bool }, self_, !2851
        v3 = load v2
        v4 = const u64 0
        v5 = get_elem_ptr v3, __ptr {  }, v4, !709
        v6 = get_local __ptr string<1>, __anon_0
        mem_copy_val v6, v0
        v7 = cast_ptr v6 to ptr, !2852
        v8 = get_local __ptr { ptr, u64 }, __anon_1, !2852
        v9 = const u64 0
        v10 = get_elem_ptr v8, __ptr ptr, v9
        store v7 to v10, !2852
        v11 = const u64 1
        v12 = get_elem_ptr v8, __ptr u64, v11
        v13 = const u64 1
        store v13 to v12, !2852
        v14 = get_local __ptr slice, __anon_2, !2852
        mem_copy_bytes v14, v8, 16
        v15 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v15, v5
        v16 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v16, v14
        v17 = call print_str_1(v15, v16)
        v18 = const unit ()
        ret () v18
    }

    pub fn fmt_75(self: __ptr {  }, _f !2853: __ptr {  }) -> (), !2856 {
        local mut { {  }, bool } __aggr_memcpy_0
        local string<1> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<1> __const = const string<1> "S"
        local { {  }, bool } __ret_val
        local {  } __tmp_arg
        local slice __tmp_arg0
        local __ptr {  } _f_
        local mut { {  }, bool } type_fix

        entry(self: __ptr {  }, _f: __ptr {  }):
        v0 = get_local __ptr string<1>, __const
        v1 = get_local __ptr __ptr {  }, _f_
        store _f to v1
        v2 = get_local __ptr __ptr {  }, _f_, !2857
        v3 = load v2
        v4 = get_local __ptr string<1>, __anon_0
        mem_copy_val v4, v0
        v5 = cast_ptr v4 to ptr, !2858
        v6 = get_local __ptr { ptr, u64 }, __anon_1, !2858
        v7 = const u64 0
        v8 = get_elem_ptr v6, __ptr ptr, v7
        store v5 to v8, !2858
        v9 = const u64 1
        v10 = get_elem_ptr v6, __ptr u64, v9
        v11 = const u64 1
        store v11 to v10, !2858
        v12 = get_local __ptr slice, __anon_2, !2858
        mem_copy_bytes v12, v6, 16
        v13 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v13, v3
        v14 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v14, v12
        v15 = get_local __ptr { {  }, bool }, __ret_val
        v16 = call debug_struct_77(v13, v14, v15)
        v17 = get_local __ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v17, v16
        v18 = get_local __ptr { {  }, bool }, type_fix
        mem_copy_val v18, v17
        v19 = call finish_76(v18), !2861
        v20 = const unit ()
        ret () v20
    }

    pub fn finish_76(self !2862: __ptr { {  }, bool }) -> (), !2865 {
        local string<1> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<1> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<1> __const = const string<1> " "
        local string<1> __const0 = const string<1> "}"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local __ptr { {  }, bool } self_

        entry(self: __ptr { {  }, bool }):
        v0 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local __ptr __ptr { {  }, bool }, self_, !2866
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr v2, __ptr bool, v3, !634
        v5 = load v4
        cbr v5, block0(), block2(), !2867

        block0():
        v6 = get_local __ptr string<1>, __const
        v7 = get_local __ptr __ptr { {  }, bool }, self_, !2868
        v8 = load v7
        v9 = const u64 0
        v10 = get_elem_ptr v8, __ptr {  }, v9, !640
        v11 = get_local __ptr string<1>, __anon_0
        mem_copy_val v11, v6
        v12 = cast_ptr v11 to ptr, !2869
        v13 = get_local __ptr { ptr, u64 }, __anon_1, !2869
        v14 = const u64 0
        v15 = get_elem_ptr v13, __ptr ptr, v14
        store v12 to v15, !2869
        v16 = const u64 1
        v17 = get_elem_ptr v13, __ptr u64, v16
        v18 = const u64 1
        store v18 to v17, !2869
        v19 = get_local __ptr slice, __anon_2, !2869
        mem_copy_bytes v19, v13, 16
        v20 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v20, v10
        v21 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v21, v19
        v22 = call print_str_1(v20, v21)
        br block2()

        block2():
        v23 = get_local __ptr string<1>, __const0
        v24 = get_local __ptr __ptr { {  }, bool }, self_, !2870
        v25 = load v24
        v26 = const u64 0
        v27 = get_elem_ptr v25, __ptr {  }, v26, !640
        v28 = get_local __ptr string<1>, __anon_3
        mem_copy_val v28, v23
        v29 = cast_ptr v28 to ptr, !2871
        v30 = get_local __ptr { ptr, u64 }, __anon_4, !2871
        v31 = const u64 0
        v32 = get_elem_ptr v30, __ptr ptr, v31
        store v29 to v32, !2871
        v33 = const u64 1
        v34 = get_elem_ptr v30, __ptr u64, v33
        v35 = const u64 1
        store v35 to v34, !2871
        v36 = get_local __ptr slice, __anon_5, !2871
        mem_copy_bytes v36, v30, 16
        v37 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v37, v27
        v38 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v38, v36
        v39 = call print_str_1(v37, v38)
        v40 = const unit ()
        ret () v40
    }

    pub fn debug_struct_77(self: __ptr {  }, name: __ptr slice, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !2874 {
        local string<3> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local { {  }, bool } __anon_3
        local string<3> __const = const string<3> " { "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2

        entry(self: __ptr {  }, name: __ptr slice, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr string<3>, __const
        v1 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v1, self
        v2 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v2, name
        v3 = call print_str_1(v1, v2)
        v4 = get_local __ptr string<3>, __anon_0
        mem_copy_val v4, v0
        v5 = cast_ptr v4 to ptr, !2875
        v6 = get_local __ptr { ptr, u64 }, __anon_1, !2875
        v7 = const u64 0
        v8 = get_elem_ptr v6, __ptr ptr, v7
        store v5 to v8, !2875
        v9 = const u64 1
        v10 = get_elem_ptr v6, __ptr u64, v9
        v11 = const u64 3
        store v11 to v10, !2875
        v12 = get_local __ptr slice, __anon_2, !2875
        mem_copy_bytes v12, v6, 16
        v13 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v13, self
        v14 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v14, v12
        v15 = call print_str_1(v13, v14)
        v16 = get_local __ptr { {  }, bool }, __anon_3, !2876
        v17 = const u64 0
        v18 = get_elem_ptr v16, __ptr {  }, v17
        mem_copy_val v18, self
        v19 = const u64 1
        v20 = get_elem_ptr v16, __ptr bool, v19
        v21 = const bool false, !2877
        store v21 to v20, !2876
        mem_copy_val __ret_value, v16
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn fmt_78(self: __ptr { u64, ( () | {  } ) }, _f !2853: __ptr {  }) -> (), !2879 {
        local mut { {  }, bool } __aggr_memcpy_0
        local string<4> __anon_0
        local string<2> __anon_00
        local { ptr, u64 } __anon_1
        local { ptr, u64 } __anon_10
        local slice __anon_2
        local slice __anon_20
        local string<1> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<4> __const = const string<4> "None"
        local string<1> __const0 = const string<1> "E"
        local string<2> __const1 = const string<2> ", "
        local { u64, ( () | {  } ) } __matched_value_1
        local { {  }, bool } __ret_val
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local {  } __tmp_arg3
        local slice __tmp_arg4
        local {  } __tmp_arg5
        local { {  }, bool } __tmp_block_arg
        local __ptr {  } _f_
        local u64 other_
        local u64 other_0
        local u64 self_0
        local u64 self_1
        local __ptr { {  }, bool } self_2
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0
        local {  } value
        local {  } value_

        entry(self: __ptr { u64, ( () | {  } ) }, _f: __ptr {  }):
        v0 = get_local __ptr __ptr {  }, _f_
        store _f to v0
        v1 = get_local __ptr { u64, ( () | {  } ) }, __matched_value_1, !2880
        mem_copy_val v1, self
        v2 = get_local __ptr u64, self_0, !2883
        v3 = const u64 0
        v4 = get_elem_ptr self, __ptr u64, v3
        mem_copy_val v2, v4
        v5 = get_local __ptr u64, other_, !2883
        v6 = const u64 0, !2884
        store v6 to v5, !2883
        v7 = load v4, !2883
        v8 = get_local __ptr u64, other_, !2885
        v9 = load v8, !2883
        v10 = cmp eq v7 v9, !2883
        cbr v10, block0(), block1(), !2881

        block0():
        v11 = get_local __ptr string<4>, __const
        v12 = get_local __ptr __ptr {  }, _f_, !2886
        v13 = load v12
        v14 = get_local __ptr string<4>, __anon_0
        mem_copy_val v14, v11
        v15 = cast_ptr v14 to ptr, !2887
        v16 = get_local __ptr { ptr, u64 }, __anon_1, !2887
        v17 = const u64 0
        v18 = get_elem_ptr v16, __ptr ptr, v17
        store v15 to v18, !2887
        v19 = const u64 1
        v20 = get_elem_ptr v16, __ptr u64, v19
        v21 = const u64 4
        store v21 to v20, !2887
        v22 = get_local __ptr slice, __anon_2, !2887
        mem_copy_bytes v22, v16, 16
        v23 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v23, v13
        v24 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v24, v22
        v25 = call print_str_1(v23, v24)
        br block5()

        block1():
        v26 = get_local __ptr { u64, ( () | {  } ) }, __matched_value_1, !2884
        v27 = const u64 0
        v28 = get_elem_ptr v26, __ptr u64, v27, !2884
        v29 = get_local __ptr u64, self_1, !2890
        mem_copy_val v29, v28
        v30 = get_local __ptr u64, other_0, !2890
        v31 = const u64 1, !2884
        store v31 to v30, !2890
        v32 = load v28, !2890
        v33 = get_local __ptr u64, other_0, !2891
        v34 = load v33, !2890
        v35 = cmp eq v32 v34, !2890
        cbr v35, block2(), block3(), !2888

        block2():
        v36 = get_local __ptr string<1>, __const0
        v37 = get_local __ptr { u64, ( () | {  } ) }, __matched_value_1, !2884
        v38 = const u64 1
        v39 = const u64 1
        v40 = get_elem_ptr v37, __ptr {  }, v38, v39
        v41 = get_local __ptr {  }, value, !2892
        mem_copy_val v41, v40
        v42 = get_local __ptr __ptr {  }, _f_, !2893
        v43 = load v42
        v44 = get_local __ptr string<1>, __anon_3
        mem_copy_val v44, v36
        v45 = cast_ptr v44 to ptr, !2894
        v46 = get_local __ptr { ptr, u64 }, __anon_4, !2894
        v47 = const u64 0
        v48 = get_elem_ptr v46, __ptr ptr, v47
        store v45 to v48, !2894
        v49 = const u64 1
        v50 = get_elem_ptr v46, __ptr u64, v49
        v51 = const u64 1
        store v51 to v50, !2894
        v52 = get_local __ptr slice, __anon_5, !2894
        mem_copy_bytes v52, v46, 16
        v53 = get_local __ptr {  }, __tmp_arg3
        mem_copy_val v53, v43
        v54 = get_local __ptr slice, __tmp_arg4
        mem_copy_val v54, v52
        v55 = get_local __ptr { {  }, bool }, __ret_val
        v56 = call debug_tuple_62(v53, v54, v55)
        v57 = get_local __ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v57, v56
        v58 = get_local __ptr { {  }, bool }, type_fix
        mem_copy_val v58, v57
        v59 = get_local __ptr __ptr { {  }, bool }, self_2, !2897
        store v58 to v59, !2897
        v60 = get_local __ptr {  }, value_, !2897
        mem_copy_val v60, v40
        v61 = get_local __ptr __ptr { {  }, bool }, self_2, !2898
        v62 = load v61, !2897
        v63 = const u64 1
        v64 = get_elem_ptr v62, __ptr bool, v63, !2899
        v65 = load v64, !2897
        cbr v65, field_79_block0(), field_79_block2(), !2900

        field_79_block0():
        v66 = get_local __ptr string<2>, __const1
        v67 = get_local __ptr __ptr { {  }, bool }, self_2, !2901
        v68 = load v67, !2897
        v69 = const u64 0
        v70 = get_elem_ptr v68, __ptr {  }, v69, !2902
        v71 = get_local __ptr string<2>, __anon_00, !2897
        mem_copy_val v71, v66
        v72 = cast_ptr v71 to ptr, !2903
        v73 = get_local __ptr { ptr, u64 }, __anon_10, !2904
        v74 = const u64 0
        v75 = get_elem_ptr v73, __ptr ptr, v74, !2897
        store v72 to v75, !2905
        v76 = const u64 1
        v77 = get_elem_ptr v73, __ptr u64, v76, !2897
        v78 = const u64 2
        store v78 to v77, !2906
        v79 = get_local __ptr slice, __anon_20, !2907
        mem_copy_bytes v79, v73, 16, !2897
        v80 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v80, v70
        v81 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v81, v79
        v82 = call print_str_1(v80, v81)
        br field_79_block2(), !2897

        field_79_block2():
        v83 = get_local __ptr {  }, value_, !2908
        v84 = get_local __ptr __ptr { {  }, bool }, self_2, !2909
        v85 = load v84, !2897
        v86 = const u64 0
        v87 = get_elem_ptr v85, __ptr {  }, v86, !2910
        v88 = get_local __ptr {  }, __tmp_arg5
        mem_copy_val v88, v83
        v89 = call fmt_75(v88, v87)
        v90 = get_local __ptr __ptr { {  }, bool }, self_2, !2911
        v91 = load v90, !2897
        v92 = const u64 1
        v93 = get_elem_ptr v91, __ptr bool, v92, !2912
        v94 = const bool true, !417
        store v94 to v93, !2913
        v95 = get_local __ptr __ptr { {  }, bool }, self_2, !2914
        v96 = load v95, !2897
        v97 = get_local __ptr { {  }, bool }, __tmp_block_arg
        mem_copy_val v97, v96
        v98 = get_local __ptr { {  }, bool }, type_fix0
        mem_copy_val v98, v97
        v99 = call finish_66(v98), !2917
        br block5()

        block3():
        v100 = const u64 14757395258967588866, !2880
        revert v100, !2880

        block5():
        v101 = const unit ()
        ret () v101
    }

    pub fn fmt_82(self: __ptr { b256 }, _f !2919: __ptr {  }) -> (), !2922 {
        local mut { {  }, bool } __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local string<7> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<4> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<7> __const = const string<7> "Address"
        local string<4> __const0 = const string<4> "bits"
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local {  } __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local b256 __tmp_arg2
        local __ptr {  } _f_
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0

        entry(self: __ptr { b256 }, _f: __ptr {  }):
        v0 = get_local __ptr string<7>, __const
        v1 = get_local __ptr string<4>, __const0
        v2 = get_local __ptr __ptr {  }, _f_
        store _f to v2
        v3 = get_local __ptr __ptr {  }, _f_, !2923
        v4 = load v3
        v5 = get_local __ptr string<7>, __anon_0
        mem_copy_val v5, v0
        v6 = cast_ptr v5 to ptr, !2924
        v7 = get_local __ptr { ptr, u64 }, __anon_1, !2924
        v8 = const u64 0
        v9 = get_elem_ptr v7, __ptr ptr, v8
        store v6 to v9, !2924
        v10 = const u64 1
        v11 = get_elem_ptr v7, __ptr u64, v10
        v12 = const u64 7
        store v12 to v11, !2924
        v13 = get_local __ptr slice, __anon_2, !2924
        mem_copy_bytes v13, v7, 16
        v14 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v14, v4
        v15 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = get_local __ptr { {  }, bool }, __ret_val
        v17 = call debug_struct_77(v14, v15, v16)
        v18 = get_local __ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v18, v17
        v19 = get_local __ptr string<4>, __anon_3
        mem_copy_val v19, v1
        v20 = cast_ptr v19 to ptr, !2925
        v21 = get_local __ptr { ptr, u64 }, __anon_4, !2925
        v22 = const u64 0
        v23 = get_elem_ptr v21, __ptr ptr, v22
        store v20 to v23, !2925
        v24 = const u64 1
        v25 = get_elem_ptr v21, __ptr u64, v24
        v26 = const u64 4
        store v26 to v25, !2925
        v27 = get_local __ptr slice, __anon_5, !2925
        mem_copy_bytes v27, v21, 16
        v28 = const u64 0
        v29 = get_elem_ptr self, __ptr b256, v28, !2926
        v30 = get_local __ptr { {  }, bool }, type_fix
        mem_copy_val v30, v18
        v31 = get_local __ptr slice, __tmp_arg1
        mem_copy_val v31, v27
        v32 = get_local __ptr b256, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local __ptr { {  }, bool }, __ret_val0
        v34 = call field_83(v30, v31, v32, v33)
        v35 = get_local __ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v35, v34
        v36 = get_local __ptr { {  }, bool }, type_fix0
        mem_copy_val v36, v35
        v37 = call finish_76(v36), !2929
        v38 = const unit ()
        ret () v38
    }

    pub fn field_83(self !2930: __ptr { {  }, bool }, name: __ptr slice, value: __ptr b256, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !2933 {
        local string<2> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<2> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<2> __const = const string<2> ", "
        local string<2> __const0 = const string<2> ": "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local {  } __tmp_arg3
        local slice __tmp_arg4
        local b256 __tmp_arg5
        local slice name_
        local __ptr { {  }, bool } self_
        local b256 value_

        entry(self: __ptr { {  }, bool }, name: __ptr slice, value: __ptr b256, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local __ptr slice, name_
        mem_copy_val v1, name
        v2 = get_local __ptr b256, value_
        mem_copy_val v2, value
        v3 = get_local __ptr __ptr { {  }, bool }, self_, !632
        v4 = load v3
        v5 = const u64 1
        v6 = get_elem_ptr v4, __ptr bool, v5, !634
        v7 = load v6
        cbr v7, block0(), block2(), !636

        block0():
        v8 = get_local __ptr string<2>, __const
        v9 = get_local __ptr __ptr { {  }, bool }, self_, !638
        v10 = load v9
        v11 = const u64 0
        v12 = get_elem_ptr v10, __ptr {  }, v11, !640
        v13 = get_local __ptr string<2>, __anon_0
        mem_copy_val v13, v8
        v14 = cast_ptr v13 to ptr, !642
        v15 = get_local __ptr { ptr, u64 }, __anon_1, !642
        v16 = const u64 0
        v17 = get_elem_ptr v15, __ptr ptr, v16
        store v14 to v17, !642
        v18 = const u64 1
        v19 = get_elem_ptr v15, __ptr u64, v18
        v20 = const u64 2
        store v20 to v19, !642
        v21 = get_local __ptr slice, __anon_2, !642
        mem_copy_bytes v21, v15, 16
        v22 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v22, v12
        v23 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v23, v21
        v24 = call print_str_1(v22, v23)
        br block2()

        block2():
        v25 = get_local __ptr string<2>, __const0
        v26 = get_local __ptr __ptr { {  }, bool }, self_, !648
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr {  }, v28, !640
        v30 = get_local __ptr slice, name_, !651
        v31 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v31, v29
        v32 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v32, v30
        v33 = call print_str_1(v31, v32)
        v34 = get_local __ptr __ptr { {  }, bool }, self_, !653
        v35 = load v34
        v36 = const u64 0
        v37 = get_elem_ptr v35, __ptr {  }, v36, !640
        v38 = get_local __ptr string<2>, __anon_3
        mem_copy_val v38, v25
        v39 = cast_ptr v38 to ptr, !656
        v40 = get_local __ptr { ptr, u64 }, __anon_4, !656
        v41 = const u64 0
        v42 = get_elem_ptr v40, __ptr ptr, v41
        store v39 to v42, !656
        v43 = const u64 1
        v44 = get_elem_ptr v40, __ptr u64, v43
        v45 = const u64 2
        store v45 to v44, !656
        v46 = get_local __ptr slice, __anon_5, !656
        mem_copy_bytes v46, v40, 16
        v47 = get_local __ptr {  }, __tmp_arg3
        mem_copy_val v47, v37
        v48 = get_local __ptr slice, __tmp_arg4
        mem_copy_val v48, v46
        v49 = call print_str_1(v47, v48)
        v50 = get_local __ptr b256, value_, !662
        v51 = get_local __ptr __ptr { {  }, bool }, self_, !664
        v52 = load v51
        v53 = const u64 0
        v54 = get_elem_ptr v52, __ptr {  }, v53, !640
        v55 = get_local __ptr b256, __tmp_arg5
        mem_copy_val v55, v50
        v56 = call fmt_52(v55, v54)
        v57 = get_local __ptr __ptr { {  }, bool }, self_, !752
        v58 = load v57
        v59 = const u64 1
        v60 = get_elem_ptr v58, __ptr bool, v59, !752
        v61 = const bool true, !755
        store v61 to v60, !752
        v62 = get_local __ptr __ptr { {  }, bool }, self_, !757
        v63 = load v62
        mem_copy_val __ret_value, v63
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn fmt_85(self: __ptr { b256 }, _f !2935: __ptr {  }) -> (), !2938 {
        local mut { {  }, bool } __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local string<7> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<4> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<7> __const = const string<7> "AssetId"
        local string<4> __const0 = const string<4> "bits"
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local {  } __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local b256 __tmp_arg2
        local __ptr {  } _f_
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0

        entry(self: __ptr { b256 }, _f: __ptr {  }):
        v0 = get_local __ptr string<7>, __const
        v1 = get_local __ptr string<4>, __const0
        v2 = get_local __ptr __ptr {  }, _f_
        store _f to v2
        v3 = get_local __ptr __ptr {  }, _f_, !2939
        v4 = load v3
        v5 = get_local __ptr string<7>, __anon_0
        mem_copy_val v5, v0
        v6 = cast_ptr v5 to ptr, !2940
        v7 = get_local __ptr { ptr, u64 }, __anon_1, !2940
        v8 = const u64 0
        v9 = get_elem_ptr v7, __ptr ptr, v8
        store v6 to v9, !2940
        v10 = const u64 1
        v11 = get_elem_ptr v7, __ptr u64, v10
        v12 = const u64 7
        store v12 to v11, !2940
        v13 = get_local __ptr slice, __anon_2, !2940
        mem_copy_bytes v13, v7, 16
        v14 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v14, v4
        v15 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = get_local __ptr { {  }, bool }, __ret_val
        v17 = call debug_struct_77(v14, v15, v16)
        v18 = get_local __ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v18, v17
        v19 = get_local __ptr string<4>, __anon_3
        mem_copy_val v19, v1
        v20 = cast_ptr v19 to ptr, !2941
        v21 = get_local __ptr { ptr, u64 }, __anon_4, !2941
        v22 = const u64 0
        v23 = get_elem_ptr v21, __ptr ptr, v22
        store v20 to v23, !2941
        v24 = const u64 1
        v25 = get_elem_ptr v21, __ptr u64, v24
        v26 = const u64 4
        store v26 to v25, !2941
        v27 = get_local __ptr slice, __anon_5, !2941
        mem_copy_bytes v27, v21, 16
        v28 = const u64 0
        v29 = get_elem_ptr self, __ptr b256, v28, !2942
        v30 = get_local __ptr { {  }, bool }, type_fix
        mem_copy_val v30, v18
        v31 = get_local __ptr slice, __tmp_arg1
        mem_copy_val v31, v27
        v32 = get_local __ptr b256, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local __ptr { {  }, bool }, __ret_val0
        v34 = call field_83(v30, v31, v32, v33)
        v35 = get_local __ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v35, v34
        v36 = get_local __ptr { {  }, bool }, type_fix0
        mem_copy_val v36, v35
        v37 = call finish_76(v36), !2945
        v38 = const unit ()
        ret () v38
    }

    pub fn push_96(self !2946: __ptr { { ptr, u64 }, u64 }, byte !2947: u8) -> (), !2950 {
        local u8 byte_
        local u64 count_
        local u64 count_0
        local u64 count_1
        local ptr dst_
        local ptr end
        local u64 new_cap
        local u64 new_count_
        local ptr new_ptr
        local u64 offset_
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_000
        local u64 other_1
        local u64 other_2
        local ptr ptr_
        local __ptr { { ptr, u64 }, u64 } self_
        local u64 self_0
        local u64 self_00
        local u64 self_000
        local __ptr { ptr, u64 } self_1
        local u64 self_10
        local ptr self_100
        local u64 self_2
        local ptr self_3
        local ptr self_4
        local u64 self_5
        local u8 val_
        local ptr val_ptr

        entry(self: __ptr { { ptr, u64 }, u64 }, byte: u8):
        v0 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_
        store self to v0
        v1 = get_local __ptr u8, byte_
        store byte to v1
        v2 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !2951
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, __ptr u64, v4, !856
        v6 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !2952
        v7 = load v6
        v8 = const u64 0
        v9 = get_elem_ptr v7, __ptr { ptr, u64 }, v8, !915
        v10 = const u64 1
        v11 = get_elem_ptr v9, __ptr u64, v10, !2953
        v12 = get_local __ptr u64, self_0, !2956
        mem_copy_val v12, v5
        v13 = get_local __ptr u64, other_, !2956
        mem_copy_val v13, v11
        v14 = get_local __ptr u64, self_0, !2957
        v15 = load v14, !2956
        v16 = get_local __ptr u64, other_, !2958
        v17 = load v16, !2956
        v18 = cmp eq v15 v17, !2956
        cbr v18, block0(), block2(), !2954

        block0():
        v19 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !2959
        v20 = load v19
        v21 = const u64 0
        v22 = get_elem_ptr v20, __ptr { ptr, u64 }, v21, !915
        v23 = get_local __ptr __ptr { ptr, u64 }, self_1, !2962
        store v22 to v23, !2962
        v24 = get_local __ptr __ptr { ptr, u64 }, self_1, !2964
        v25 = load v24, !2962
        v26 = const u64 1
        v27 = get_elem_ptr v25, __ptr u64, v26, !2965
        v28 = get_local __ptr u64, self_00, !2968
        mem_copy_val v28, v27
        v29 = get_local __ptr u64, other_0, !2969
        v30 = const u64 0, !2970
        store v30 to v29, !2971
        v31 = get_local __ptr u64, self_00, !2972
        v32 = load v31, !2973
        v33 = get_local __ptr u64, other_0, !2974
        v34 = load v33, !2975
        v35 = cmp eq v32 v34, !2976
        v36 = const u64 1, !2977
        cbr v35, grow_97_block2(v36), grow_97_block1(), !2978

        grow_97_block1():
        v37 = get_local __ptr __ptr { ptr, u64 }, self_1, !2980
        v38 = load v37, !2962
        v39 = const u64 1
        v40 = get_elem_ptr v38, __ptr u64, v39, !2981
        v41 = get_local __ptr u64, self_10, !2984
        v42 = const u64 2, !2985
        store v42 to v41, !2986
        v43 = get_local __ptr u64, other_00, !2987
        mem_copy_val v43, v40
        v44 = get_local __ptr u64, self_10, !2988
        v45 = load v44, !2989
        v46 = get_local __ptr u64, other_00, !2990
        v47 = load v46, !2991
        v48 = mul v45, v47, !2992
        br grow_97_block2(v48), !2962

        grow_97_block2(v49: u64):
        v50 = get_local __ptr u64, new_cap, !2994
        store v49 to v50, !2995
        v51 = get_local __ptr __ptr { ptr, u64 }, self_1, !2997
        v52 = load v51, !2962
        v53 = const u64 0
        v54 = get_elem_ptr v52, __ptr ptr, v53, !2998
        v55 = get_local __ptr __ptr { ptr, u64 }, self_1, !3000
        v56 = load v55, !2962
        v57 = const u64 1
        v58 = get_elem_ptr v56, __ptr u64, v57, !3001
        v59 = get_local __ptr u64, new_cap, !3003
        v60 = get_local __ptr ptr, ptr_, !3006
        mem_copy_val v60, v54
        v61 = get_local __ptr u64, count_, !3007
        mem_copy_val v61, v58
        v62 = get_local __ptr u64, new_count_, !3008
        mem_copy_val v62, v59
        v63 = get_local __ptr u64, new_count_, !3010
        v64 = get_local __ptr u64, count_, !3012
        v65 = get_local __ptr u64, self_2, !3015
        mem_copy_val v65, v63
        v66 = get_local __ptr u64, other_1, !3016
        mem_copy_val v66, v64
        v67 = get_local __ptr u64, self_2, !3017
        v68 = load v67, !3018
        v69 = get_local __ptr u64, other_1, !3019
        v70 = load v69, !3020
        v71 = cmp gt v68 v70, !3021
        cbr v71, grow_97_realloc_bytes_99_block0(), grow_97_realloc_bytes_99_block4(), !3022

        grow_97_realloc_bytes_99_block0():
        v72 = get_local __ptr u64, new_count_, !3024
        v73 = get_local __ptr u64, count_0, !3027
        mem_copy_val v73, v72
        v74 = get_local __ptr u64, count_0, !3028
        v75 = load v74, !3029
        v76 = asm(size: v75) -> ptr hp, !3030 {
            aloc   size, !803
        }
        v77 = get_local __ptr ptr, new_ptr, !3032
        store v76 to v77, !3033
        v78 = get_local __ptr u64, count_, !3035
        v79 = get_local __ptr u64, self_000, !3038
        mem_copy_val v79, v78
        v80 = get_local __ptr u64, other_000, !3039
        v81 = const u64 0, !3040
        store v81 to v80, !3041
        v82 = get_local __ptr u64, self_000, !3042
        v83 = load v82, !3043
        v84 = get_local __ptr u64, other_000, !3044
        v85 = load v84, !3045
        v86 = cmp gt v83 v85, !3046
        cbr v86, grow_97_realloc_bytes_99_block1(), grow_97_realloc_bytes_99_block3(), !3047

        grow_97_realloc_bytes_99_block1():
        v87 = get_local __ptr ptr, ptr_, !3049
        v88 = get_local __ptr ptr, new_ptr, !3051
        v89 = get_local __ptr u64, count_, !3053
        v90 = get_local __ptr ptr, self_100, !3056
        mem_copy_val v90, v87
        v91 = get_local __ptr ptr, dst_, !3057
        mem_copy_val v91, v88
        v92 = get_local __ptr u64, count_1, !3058
        mem_copy_val v92, v89
        v93 = get_local __ptr ptr, dst_, !3060
        v94 = load v93, !3061
        v95 = get_local __ptr ptr, self_100, !3063
        v96 = load v95, !3064
        v97 = get_local __ptr u64, count_1, !3066
        v98 = load v97, !3067
        v99 = asm(dst: v94, src: v96, len: v98) -> (), !3069 {
            mcp    dst src len, !3070
        }
        br grow_97_realloc_bytes_99_block3(), !3071

        grow_97_realloc_bytes_99_block3():
        v100 = get_local __ptr ptr, new_ptr, !3073
        v101 = load v100, !3074
        br grow_97_realloc_bytes_99_block5(v101), !3075

        grow_97_realloc_bytes_99_block4():
        v102 = get_local __ptr ptr, ptr_, !3077
        v103 = load v102, !3078
        br grow_97_realloc_bytes_99_block5(v103), !3079

        grow_97_realloc_bytes_99_block5(v104: ptr):
        v105 = get_local __ptr __ptr { ptr, u64 }, self_1, !3081
        v106 = load v105, !2962
        v107 = const u64 0
        v108 = get_elem_ptr v106, __ptr ptr, v107, !3082
        store v104 to v108, !3083
        v109 = get_local __ptr u64, new_cap, !3085
        v110 = get_local __ptr __ptr { ptr, u64 }, self_1, !3087
        v111 = load v110, !2962
        v112 = const u64 1
        v113 = get_elem_ptr v111, __ptr u64, v112, !3088
        mem_copy_val v113, v109
        br block2()

        block2():
        v114 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3089
        v115 = load v114
        v116 = const u64 0
        v117 = get_elem_ptr v115, __ptr { ptr, u64 }, v116, !915
        v118 = const u64 0
        v119 = get_elem_ptr v117, __ptr ptr, v118, !917
        v120 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3090
        v121 = load v120
        v122 = const u64 1
        v123 = get_elem_ptr v121, __ptr u64, v122, !856
        v124 = get_local __ptr ptr, self_3, !3093
        mem_copy_val v124, v119
        v125 = get_local __ptr u64, offset_, !3093
        mem_copy_val v125, v123
        v126 = get_local __ptr ptr, self_3, !3094
        v127 = load v126, !3093
        v128 = get_local __ptr u64, offset_, !3095
        v129 = load v128, !3093
        v130 = asm(ptr: v127, offset: v129, new) -> ptr new, !3096 {
            add    new ptr offset, !934
        }
        v131 = get_local __ptr ptr, end, !3097
        store v130 to v131, !3097
        v132 = get_local __ptr ptr, end, !3098
        v133 = get_local __ptr u8, byte_, !3099
        v134 = get_local __ptr ptr, self_4, !3102
        mem_copy_val v134, v132
        v135 = get_local __ptr u8, val_, !3102
        mem_copy_val v135, v133
        v136 = get_local __ptr u8, val_, !3104
        v137 = load v136, !3102
        v138 = asm(r1: v137) -> ptr r1, !3106 {
        }
        v139 = get_local __ptr ptr, val_ptr, !3108
        store v138 to v139, !3109
        v140 = get_local __ptr ptr, self_4, !3111
        v141 = load v140, !3102
        v142 = get_local __ptr ptr, val_ptr, !3113
        v143 = load v142, !3102
        v144 = asm(ptr: v141, val: v143) -> (), !3115 {
            sb     ptr val i0, !3116
        }
        v145 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3117
        v146 = load v145
        v147 = const u64 1
        v148 = get_elem_ptr v146, __ptr u64, v147, !856
        v149 = get_local __ptr u64, self_5, !3120
        mem_copy_val v149, v148
        v150 = get_local __ptr u64, other_2, !3120
        v151 = const u64 1, !3121
        store v151 to v150, !3120
        v152 = get_local __ptr u64, self_5, !3122
        v153 = load v152, !3120
        v154 = get_local __ptr u64, other_2, !3123
        v155 = load v154, !3120
        v156 = add v153, v155, !3120
        v157 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3118
        v158 = load v157
        v159 = const u64 1
        v160 = get_elem_ptr v158, __ptr u64, v159, !3118
        store v156 to v160, !3118
        v161 = const unit ()
        ret () v161
    }

    pub fn ge_106(self !3124: u64, other !3125: u64) -> bool, !3128 {
        local u64 other_
        local u64 self_

        entry(self: u64, other: u64):
        v0 = get_local __ptr u64, self_
        store self to v0
        v1 = get_local __ptr u64, other_
        store other to v1
        v2 = get_local __ptr u64, self_, !3131
        v3 = load v2, !3132
        v4 = get_local __ptr u64, other_, !3133
        v5 = load v4, !3132
        v6 = cmp gt v3 v5, !3132
        cbr v6, block1(v6), block0(), !3134

        block0():
        v7 = get_local __ptr u64, self_, !3135
        v8 = get_local __ptr u64, other_, !3136
        v9 = load v7, !3139
        v10 = load v8, !3139
        v11 = cmp eq v9 v10, !3139
        br block1(v11), !3134

        block1(v12: bool):
        ret bool v12
    }

    pub fn fmt_113(self: __ptr { b256 }, _f !3141: __ptr {  }) -> (), !3144 {
        local mut { {  }, bool } __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local string<10> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<4> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<10> __const = const string<10> "ContractId"
        local string<4> __const0 = const string<4> "bits"
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local {  } __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local b256 __tmp_arg2
        local __ptr {  } _f_
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0

        entry(self: __ptr { b256 }, _f: __ptr {  }):
        v0 = get_local __ptr string<10>, __const
        v1 = get_local __ptr string<4>, __const0
        v2 = get_local __ptr __ptr {  }, _f_
        store _f to v2
        v3 = get_local __ptr __ptr {  }, _f_, !3145
        v4 = load v3
        v5 = get_local __ptr string<10>, __anon_0
        mem_copy_val v5, v0
        v6 = cast_ptr v5 to ptr, !3146
        v7 = get_local __ptr { ptr, u64 }, __anon_1, !3146
        v8 = const u64 0
        v9 = get_elem_ptr v7, __ptr ptr, v8
        store v6 to v9, !3146
        v10 = const u64 1
        v11 = get_elem_ptr v7, __ptr u64, v10
        v12 = const u64 10
        store v12 to v11, !3146
        v13 = get_local __ptr slice, __anon_2, !3146
        mem_copy_bytes v13, v7, 16
        v14 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v14, v4
        v15 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = get_local __ptr { {  }, bool }, __ret_val
        v17 = call debug_struct_77(v14, v15, v16)
        v18 = get_local __ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v18, v17
        v19 = get_local __ptr string<4>, __anon_3
        mem_copy_val v19, v1
        v20 = cast_ptr v19 to ptr, !3147
        v21 = get_local __ptr { ptr, u64 }, __anon_4, !3147
        v22 = const u64 0
        v23 = get_elem_ptr v21, __ptr ptr, v22
        store v20 to v23, !3147
        v24 = const u64 1
        v25 = get_elem_ptr v21, __ptr u64, v24
        v26 = const u64 4
        store v26 to v25, !3147
        v27 = get_local __ptr slice, __anon_5, !3147
        mem_copy_bytes v27, v21, 16
        v28 = const u64 0
        v29 = get_elem_ptr self, __ptr b256, v28, !3148
        v30 = get_local __ptr { {  }, bool }, type_fix
        mem_copy_val v30, v18
        v31 = get_local __ptr slice, __tmp_arg1
        mem_copy_val v31, v27
        v32 = get_local __ptr b256, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local __ptr { {  }, bool }, __ret_val0
        v34 = call field_83(v30, v31, v32, v33)
        v35 = get_local __ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v35, v34
        v36 = get_local __ptr { {  }, bool }, type_fix0
        mem_copy_val v36, v35
        v37 = call finish_76(v36), !3151
        v38 = const unit ()
        ret () v38
    }

    pub fn field_120(self !2930: __ptr { {  }, bool }, name: __ptr slice, value !3152: u64, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !3153 {
        local string<2> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<2> __anon_3
        local { ptr, u64 } __anon_4
        local slice __anon_5
        local string<2> __const = const string<2> ", "
        local string<2> __const0 = const string<2> ": "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local {  } __tmp_arg3
        local slice __tmp_arg4
        local slice name_
        local __ptr { {  }, bool } self_
        local u64 value_

        entry(self: __ptr { {  }, bool }, name: __ptr slice, value: u64, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local __ptr slice, name_
        mem_copy_val v1, name
        v2 = get_local __ptr u64, value_
        store value to v2
        v3 = get_local __ptr __ptr { {  }, bool }, self_, !632
        v4 = load v3
        v5 = const u64 1
        v6 = get_elem_ptr v4, __ptr bool, v5, !634
        v7 = load v6
        cbr v7, block0(), block2(), !636

        block0():
        v8 = get_local __ptr string<2>, __const
        v9 = get_local __ptr __ptr { {  }, bool }, self_, !638
        v10 = load v9
        v11 = const u64 0
        v12 = get_elem_ptr v10, __ptr {  }, v11, !640
        v13 = get_local __ptr string<2>, __anon_0
        mem_copy_val v13, v8
        v14 = cast_ptr v13 to ptr, !642
        v15 = get_local __ptr { ptr, u64 }, __anon_1, !642
        v16 = const u64 0
        v17 = get_elem_ptr v15, __ptr ptr, v16
        store v14 to v17, !642
        v18 = const u64 1
        v19 = get_elem_ptr v15, __ptr u64, v18
        v20 = const u64 2
        store v20 to v19, !642
        v21 = get_local __ptr slice, __anon_2, !642
        mem_copy_bytes v21, v15, 16
        v22 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v22, v12
        v23 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v23, v21
        v24 = call print_str_1(v22, v23)
        br block2()

        block2():
        v25 = get_local __ptr string<2>, __const0
        v26 = get_local __ptr __ptr { {  }, bool }, self_, !648
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr {  }, v28, !640
        v30 = get_local __ptr slice, name_, !651
        v31 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v31, v29
        v32 = get_local __ptr slice, __tmp_arg2
        mem_copy_val v32, v30
        v33 = call print_str_1(v31, v32)
        v34 = get_local __ptr __ptr { {  }, bool }, self_, !653
        v35 = load v34
        v36 = const u64 0
        v37 = get_elem_ptr v35, __ptr {  }, v36, !640
        v38 = get_local __ptr string<2>, __anon_3
        mem_copy_val v38, v25
        v39 = cast_ptr v38 to ptr, !656
        v40 = get_local __ptr { ptr, u64 }, __anon_4, !656
        v41 = const u64 0
        v42 = get_elem_ptr v40, __ptr ptr, v41
        store v39 to v42, !656
        v43 = const u64 1
        v44 = get_elem_ptr v40, __ptr u64, v43
        v45 = const u64 2
        store v45 to v44, !656
        v46 = get_local __ptr slice, __anon_5, !656
        mem_copy_bytes v46, v40, 16
        v47 = get_local __ptr {  }, __tmp_arg3
        mem_copy_val v47, v37
        v48 = get_local __ptr slice, __tmp_arg4
        mem_copy_val v48, v46
        v49 = call print_str_1(v47, v48)
        v50 = get_local __ptr u64, value_, !662
        v51 = load v50
        v52 = get_local __ptr __ptr { {  }, bool }, self_, !664
        v53 = load v52
        v54 = const u64 0
        v55 = get_elem_ptr v53, __ptr {  }, v54, !640
        v56 = call fmt_38(v51, v55), !3154
        v57 = get_local __ptr __ptr { {  }, bool }, self_, !752
        v58 = load v57
        v59 = const u64 1
        v60 = get_elem_ptr v58, __ptr bool, v59, !752
        v61 = const bool true, !755
        store v61 to v60, !752
        v62 = get_local __ptr __ptr { {  }, bool }, self_, !757
        v63 = load v62
        mem_copy_val __ret_value, v63
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn field_126(self !2819: __ptr { {  }, bool }, value !2820: u64, __ret_value: __ptr { {  }, bool }) -> __ptr { {  }, bool }, !3155 {
        local string<2> __anon_0
        local { ptr, u64 } __anon_1
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local __ptr { {  }, bool } self_
        local u64 value_

        entry(self: __ptr { {  }, bool }, value: u64, __ret_value: __ptr { {  }, bool }):
        v0 = get_local __ptr __ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local __ptr u64, value_
        store value to v1
        v2 = get_local __ptr __ptr { {  }, bool }, self_, !393
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, __ptr bool, v4, !395
        v6 = load v5
        cbr v6, block0(), block2(), !397

        block0():
        v7 = get_local __ptr string<2>, __const
        v8 = get_local __ptr __ptr { {  }, bool }, self_, !399
        v9 = load v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr {  }, v10, !401
        v12 = get_local __ptr string<2>, __anon_0
        mem_copy_val v12, v7
        v13 = cast_ptr v12 to ptr, !403
        v14 = get_local __ptr { ptr, u64 }, __anon_1, !403
        v15 = const u64 0
        v16 = get_elem_ptr v14, __ptr ptr, v15
        store v13 to v16, !403
        v17 = const u64 1
        v18 = get_elem_ptr v14, __ptr u64, v17
        v19 = const u64 2
        store v19 to v18, !403
        v20 = get_local __ptr slice, __anon_2, !403
        mem_copy_bytes v20, v14, 16
        v21 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v21, v11
        v22 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v22, v20
        v23 = call print_str_1(v21, v22)
        br block2()

        block2():
        v24 = get_local __ptr u64, value_, !409
        v25 = load v24
        v26 = get_local __ptr __ptr { {  }, bool }, self_, !411
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr {  }, v28, !401
        v30 = call fmt_38(v25, v29), !3156
        v31 = get_local __ptr __ptr { {  }, bool }, self_, !414
        v32 = load v31
        v33 = const u64 1
        v34 = get_elem_ptr v32, __ptr bool, v33, !414
        v35 = const bool true, !417
        store v35 to v34, !414
        v36 = get_local __ptr __ptr { {  }, bool }, self_, !419
        v37 = load v36
        mem_copy_val __ret_value, v37
        ret __ptr { {  }, bool } __ret_value
    }

    pub fn number_of_bytes_130(self: __ptr slice) -> u64, !3159 {
        local mut { ptr, u64 } __aggr_memcpy_0
        local { ptr, u64 } __anon_0
        local { ptr, u64 } __tmp_block_arg
        local slice slice_

        entry(self: __ptr slice):
        v0 = get_local __ptr slice, slice_, !3162
        mem_copy_val v0, self
        v1 = get_local __ptr slice, slice_, !3163
        v2 = asm(ptr: v1) -> __ptr { ptr, u64 } ptr {
        }
        v3 = get_local __ptr { ptr, u64 }, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local __ptr { ptr, u64 }, __tmp_block_arg
        mem_copy_val v4, v3
        v5 = get_local __ptr { ptr, u64 }, __anon_0
        mem_copy_val v5, v4
        v6 = get_local __ptr { ptr, u64 }, __tmp_block_arg
        v7 = const u64 1
        v8 = get_elem_ptr v6, __ptr u64, v7
        v9 = load v8
        ret u64 v9
    }

    pub fn new_143(__ret_value: __ptr { { ptr, u64 }, u64 }) -> __ptr { { ptr, u64 }, u64 }, !3166 {
        local { { ptr, u64 }, u64 } __anon_0
        local { ptr, u64 } __anon_00
        local { ptr, u64 } __tmp_block_arg

        entry(__ret_value: __ptr { { ptr, u64 }, u64 }):
        v0 = const u64 0, !3167
        v1 = call alloc_145(v0), !3172
        v2 = get_local __ptr { ptr, u64 }, __anon_00, !3174
        v3 = const u64 0
        v4 = get_elem_ptr v2, __ptr ptr, v3, !3175
        store v1 to v4, !3176
        v5 = const u64 1
        v6 = get_elem_ptr v2, __ptr u64, v5, !3175
        v7 = const u64 0, !3177
        store v7 to v6, !3178
        v8 = get_local __ptr { ptr, u64 }, __tmp_block_arg
        mem_copy_val v8, v2
        v9 = get_local __ptr { { ptr, u64 }, u64 }, __anon_0, !3179
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr { ptr, u64 }, v10
        mem_copy_val v11, v8
        v12 = const u64 1
        v13 = get_elem_ptr v9, __ptr u64, v12
        v14 = const u64 0, !3180
        store v14 to v13, !3179
        mem_copy_val __ret_value, v9
        ret __ptr { { ptr, u64 }, u64 } __ret_value
    }

    pub fn alloc_145(count !3181: u64) -> ptr, !3184 {
        local u64 count_
        local u64 self_

        entry(count: u64):
        v0 = get_local __ptr u64, count_
        store count to v0
        v1 = get_local __ptr u64, self_, !3187
        v2 = const u64 8
        store v2 to v1, !3187
        v3 = get_local __ptr u64, self_, !3188
        v4 = load v3, !3187
        v5 = get_local __ptr u64, count_, !3189
        v6 = load v5, !3187
        v7 = mul v4, v6, !3187
        v8 = asm(size: v7, ptr) -> ptr ptr, !3190 {
            aloc   size, !3191
            move   ptr hp, !3192
        }
        ret ptr v8
    }

    pub fn push_146(self !3193: __ptr { { ptr, u64 }, u64 }, value !3194: u64) -> (), !3197 {
        local u64 count_
        local u64 count_0
        local u64 count_1
        local ptr dst_
        local ptr end
        local u64 len
        local u64 new_cap
        local u64 new_count_
        local ptr new_ptr
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_000
        local u64 other_1
        local u64 other_10
        local u64 other_2
        local u64 other_3
        local ptr ptr_
        local __ptr { { ptr, u64 }, u64 } self_
        local u64 self_0
        local u64 self_00
        local u64 self_000
        local u64 self_0000
        local u64 self_01
        local __ptr { ptr, u64 } self_1
        local u64 self_10
        local ptr self_100
        local u64 self_2
        local ptr self_3
        local ptr self_4
        local u64 self_5
        local u64 val_
        local u64 value_

        entry(self: __ptr { { ptr, u64 }, u64 }, value: u64):
        v0 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_
        store self to v0
        v1 = get_local __ptr u64, value_
        store value to v1
        v2 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3198
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, __ptr u64, v4, !3199
        v6 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3200
        v7 = load v6
        v8 = const u64 0
        v9 = get_elem_ptr v7, __ptr { ptr, u64 }, v8, !3201
        v10 = const u64 1
        v11 = get_elem_ptr v9, __ptr u64, v10, !3202
        v12 = get_local __ptr u64, self_0, !3205
        mem_copy_val v12, v5
        v13 = get_local __ptr u64, other_, !3205
        mem_copy_val v13, v11
        v14 = get_local __ptr u64, self_0, !3206
        v15 = load v14, !3205
        v16 = get_local __ptr u64, other_, !3207
        v17 = load v16, !3205
        v18 = cmp eq v15 v17, !3205
        cbr v18, block0(), block2(), !3203

        block0():
        v19 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3208
        v20 = load v19
        v21 = const u64 0
        v22 = get_elem_ptr v20, __ptr { ptr, u64 }, v21, !3201
        v23 = get_local __ptr __ptr { ptr, u64 }, self_1, !3211
        store v22 to v23, !3211
        v24 = get_local __ptr __ptr { ptr, u64 }, self_1, !3213
        v25 = load v24, !3211
        v26 = const u64 1
        v27 = get_elem_ptr v25, __ptr u64, v26, !3214
        v28 = get_local __ptr u64, self_00, !3217
        mem_copy_val v28, v27
        v29 = get_local __ptr u64, other_0, !3218
        v30 = const u64 0, !3219
        store v30 to v29, !3220
        v31 = get_local __ptr u64, self_00, !3221
        v32 = load v31, !3222
        v33 = get_local __ptr u64, other_0, !3223
        v34 = load v33, !3224
        v35 = cmp eq v32 v34, !3225
        v36 = const u64 1, !3226
        cbr v35, grow_147_block2(v36), grow_147_block1(), !3227

        grow_147_block1():
        v37 = get_local __ptr __ptr { ptr, u64 }, self_1, !3229
        v38 = load v37, !3211
        v39 = const u64 1
        v40 = get_elem_ptr v38, __ptr u64, v39, !3230
        v41 = get_local __ptr u64, self_10, !3233
        v42 = const u64 2, !3234
        store v42 to v41, !3235
        v43 = get_local __ptr u64, other_00, !3236
        mem_copy_val v43, v40
        v44 = get_local __ptr u64, self_10, !3237
        v45 = load v44, !3238
        v46 = get_local __ptr u64, other_00, !3239
        v47 = load v46, !3240
        v48 = mul v45, v47, !3241
        br grow_147_block2(v48), !3211

        grow_147_block2(v49: u64):
        v50 = get_local __ptr u64, new_cap, !3243
        store v49 to v50, !3244
        v51 = get_local __ptr __ptr { ptr, u64 }, self_1, !3246
        v52 = load v51, !3211
        v53 = const u64 0
        v54 = get_elem_ptr v52, __ptr ptr, v53, !3248
        v55 = get_local __ptr __ptr { ptr, u64 }, self_1, !3250
        v56 = load v55, !3211
        v57 = const u64 1
        v58 = get_elem_ptr v56, __ptr u64, v57, !3251
        v59 = get_local __ptr u64, new_cap, !3253
        v60 = get_local __ptr ptr, ptr_, !3256
        mem_copy_val v60, v54
        v61 = get_local __ptr u64, count_, !3257
        mem_copy_val v61, v58
        v62 = get_local __ptr u64, new_count_, !3258
        mem_copy_val v62, v59
        v63 = get_local __ptr u64, new_count_, !3260
        v64 = get_local __ptr u64, count_, !3262
        v65 = get_local __ptr u64, self_2, !3265
        mem_copy_val v65, v63
        v66 = get_local __ptr u64, other_1, !3266
        mem_copy_val v66, v64
        v67 = get_local __ptr u64, self_2, !3267
        v68 = load v67, !3268
        v69 = get_local __ptr u64, other_1, !3269
        v70 = load v69, !3270
        v71 = cmp gt v68 v70, !3271
        cbr v71, grow_147_realloc_148_block0(), grow_147_realloc_148_block4(), !3272

        grow_147_realloc_148_block0():
        v72 = get_local __ptr u64, new_count_, !3274
        v73 = load v72, !3275
        v74 = call alloc_145(v73), !3278
        v75 = get_local __ptr ptr, new_ptr, !3280
        store v74 to v75, !3281
        v76 = get_local __ptr u64, count_, !3283
        v77 = get_local __ptr u64, self_000, !3286
        mem_copy_val v77, v76
        v78 = get_local __ptr u64, other_000, !3287
        v79 = const u64 0, !3288
        store v79 to v78, !3289
        v80 = get_local __ptr u64, self_000, !3290
        v81 = load v80, !3291
        v82 = get_local __ptr u64, other_000, !3292
        v83 = load v82, !3293
        v84 = cmp gt v81 v83, !3294
        cbr v84, grow_147_realloc_148_block1(), grow_147_realloc_148_block3(), !3295

        grow_147_realloc_148_block1():
        v85 = get_local __ptr ptr, ptr_, !3297
        v86 = get_local __ptr ptr, new_ptr, !3299
        v87 = get_local __ptr u64, count_, !3301
        v88 = get_local __ptr ptr, self_100, !3304
        mem_copy_val v88, v85
        v89 = get_local __ptr ptr, dst_, !3305
        mem_copy_val v89, v86
        v90 = get_local __ptr u64, count_0, !3306
        mem_copy_val v90, v87
        v91 = get_local __ptr u64, count_0, !3307
        v92 = get_local __ptr u64, self_0000, !3308
        mem_copy_val v92, v91
        v93 = get_local __ptr u64, other_10, !3309
        v94 = const u64 8
        store v94 to v93, !3310
        v95 = get_local __ptr u64, self_0000, !3311
        v96 = load v95, !3312
        v97 = get_local __ptr u64, other_10, !3313
        v98 = load v97, !3314
        v99 = mul v96, v98, !3315
        v100 = get_local __ptr u64, len, !3316
        store v99 to v100, !3317
        v101 = get_local __ptr ptr, dst_, !3318
        v102 = load v101, !3319
        v103 = get_local __ptr ptr, self_100, !3320
        v104 = load v103, !3321
        v105 = get_local __ptr u64, len, !3322
        v106 = load v105, !3323
        v107 = asm(dst: v102, src: v104, len: v106) -> (), !3324 {
            mcp    dst src len, !1479
        }
        br grow_147_realloc_148_block3(), !3325

        grow_147_realloc_148_block3():
        v108 = get_local __ptr ptr, new_ptr, !3327
        v109 = load v108, !3328
        br grow_147_realloc_148_block5(v109), !3329

        grow_147_realloc_148_block4():
        v110 = get_local __ptr ptr, ptr_, !3331
        v111 = load v110, !3332
        br grow_147_realloc_148_block5(v111), !3333

        grow_147_realloc_148_block5(v112: ptr):
        v113 = get_local __ptr __ptr { ptr, u64 }, self_1, !3335
        v114 = load v113, !3211
        v115 = const u64 0
        v116 = get_elem_ptr v114, __ptr ptr, v115, !3336
        store v112 to v116, !3337
        v117 = get_local __ptr u64, new_cap, !3339
        v118 = get_local __ptr __ptr { ptr, u64 }, self_1, !3341
        v119 = load v118, !3211
        v120 = const u64 1
        v121 = get_elem_ptr v119, __ptr u64, v120, !3342
        mem_copy_val v121, v117
        br block2()

        block2():
        v122 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3343
        v123 = load v122
        v124 = const u64 0
        v125 = get_elem_ptr v123, __ptr { ptr, u64 }, v124, !3201
        v126 = const u64 0
        v127 = get_elem_ptr v125, __ptr ptr, v126, !3247
        v128 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3344
        v129 = load v128
        v130 = const u64 1
        v131 = get_elem_ptr v129, __ptr u64, v130, !3199
        v132 = get_local __ptr ptr, self_3, !3347
        mem_copy_val v132, v127
        v133 = get_local __ptr u64, count_1, !3347
        mem_copy_val v133, v131
        v134 = get_local __ptr ptr, self_3, !3348
        v135 = load v134, !3347
        v136 = get_local __ptr u64, count_1, !3349
        v137 = load v136, !3347
        v138 = const u64 8
        v139 = mul v138, v137, !3347
        v140 = add v135, v139, !3347
        v141 = get_local __ptr ptr, end, !3350
        store v140 to v141, !3350
        v142 = get_local __ptr ptr, end, !3351
        v143 = get_local __ptr u64, value_, !3352
        v144 = get_local __ptr ptr, self_4, !3355
        mem_copy_val v144, v142
        v145 = get_local __ptr u64, val_, !3355
        mem_copy_val v145, v143
        v146 = const bool false
        cbr v146, write_151_block0(), write_151_block1(), !3357

        write_151_block0():
        v147 = get_local __ptr ptr, self_4, !3359
        v148 = load v147, !3355
        v149 = get_local __ptr u64, val_, !3361
        v150 = load v149, !3355
        v151 = const u64 8
        v152 = asm(dst: v148, src: v150, count: v151) -> (), !3363 {
            mcp    dst src count, !3364
        }
        br write_151_block5(), !3355

        write_151_block1():
        v153 = get_local __ptr u64, self_01, !3367
        v154 = const u64 8
        store v154 to v153, !3368
        v155 = get_local __ptr u64, other_2, !3369
        v156 = const u64 1, !3370
        store v156 to v155, !3371
        v157 = get_local __ptr u64, self_01, !3372
        v158 = load v157, !3373
        v159 = get_local __ptr u64, other_2, !3374
        v160 = load v159, !3375
        v161 = cmp eq v158 v160, !3376
        cbr v161, write_151_block2(), write_151_block3(), !3377

        write_151_block2():
        v162 = get_local __ptr ptr, self_4, !3379
        v163 = load v162, !3355
        v164 = get_local __ptr u64, val_, !3381
        v165 = load v164, !3355
        v166 = asm(ptr: v163, val: v165) -> (), !3383 {
            sb     ptr val i0, !3384
        }
        br write_151_block5(), !3355

        write_151_block3():
        v167 = get_local __ptr ptr, self_4, !3386
        v168 = load v167, !3355
        v169 = get_local __ptr u64, val_, !3388
        v170 = load v169, !3355
        v171 = asm(ptr: v168, val: v170) -> (), !3390 {
            sw     ptr val i0, !3391
        }
        br write_151_block5(), !3355

        write_151_block5():
        v172 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3392
        v173 = load v172
        v174 = const u64 1
        v175 = get_elem_ptr v173, __ptr u64, v174, !3199
        v176 = get_local __ptr u64, self_5, !3395
        mem_copy_val v176, v175
        v177 = get_local __ptr u64, other_3, !3395
        v178 = const u64 1, !3396
        store v178 to v177, !3395
        v179 = get_local __ptr u64, self_5, !3397
        v180 = load v179, !3395
        v181 = get_local __ptr u64, other_3, !3398
        v182 = load v181, !3395
        v183 = add v180, v182, !3395
        v184 = get_local __ptr __ptr { { ptr, u64 }, u64 }, self_, !3393
        v185 = load v184
        v186 = const u64 1
        v187 = get_elem_ptr v185, __ptr u64, v186, !3393
        store v183 to v187, !3393
        v188 = const unit ()
        ret () v188
    }

    pub fn fmt_152(self: __ptr { { ptr, u64 }, u64 }, f !3399: __ptr {  }) -> (), !3402 {
        local { {  }, bool } _
        local mut { {  }, bool } __aggr_memcpy_0
        local { { { ptr, u64 }, u64 }, u64 } __anon_0
        local { u64, ( () | u64 ) } __anon_00
        local string<2> __anon_01
        local { u64, ( () | u64 ) } __anon_1
        local { ptr, u64 } __anon_10
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local mut { { { ptr, u64 }, u64 }, u64 } __for_iterable_2
        local mut { u64, ( () | u64 ) } __for_value_opt_1
        local { u64, ( () | u64 ) } __matched_value_3
        local { u64, ( () | u64 ) } __matched_value_4
        local { {  }, bool } __ret_val
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local { { { ptr, u64 }, u64 }, u64 } __tmp_block_arg
        local { u64, ( () | u64 ) } __tmp_block_arg0
        local { {  }, bool } __tmp_block_arg1
        local u64 code_
        local u64 count_
        local u64 elem
        local __ptr {  } f_
        local u64 index_
        local mut { {  }, bool } l
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local { { ptr, u64 }, u64 } self_
        local { { ptr, u64 }, u64 } self_0
        local u64 self_00
        local ptr self_000
        local u64 self_0000
        local u64 self_01
        local u64 self_02
        local __ptr { { { ptr, u64 }, u64 }, u64 } self_1
        local u64 self_10
        local ptr self_100
        local { { ptr, u64 }, u64 } self_2
        local { u64, ( () | u64 ) } self_3
        local { u64, ( () | u64 ) } self_4
        local __ptr { {  }, bool } self_5
        local u64 v
        local u64 value_

        entry(self: __ptr { { ptr, u64 }, u64 }, f: __ptr {  }):
        v0 = get_local __ptr { { ptr, u64 }, u64 }, self_
        mem_copy_val v0, self
        v1 = get_local __ptr __ptr {  }, f_
        store f to v1
        v2 = get_local __ptr __ptr {  }, f_, !3403
        v3 = load v2
        v4 = get_local __ptr {  }, __tmp_arg1
        mem_copy_val v4, v3
        v5 = get_local __ptr { {  }, bool }, __ret_val
        v6 = call debug_list_68(v4, v5)
        v7 = get_local __ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v7, v6
        v8 = get_local __ptr { {  }, bool }, l, !3404
        mem_copy_val v8, v7
        v9 = get_local __ptr { { ptr, u64 }, u64 }, self_, !3405
        v10 = get_local __ptr { { ptr, u64 }, u64 }, self_0, !3408
        mem_copy_val v10, v9
        v11 = get_local __ptr { { ptr, u64 }, u64 }, self_0, !3409
        v12 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __anon_0, !3410
        v13 = const u64 0
        v14 = get_elem_ptr v12, __ptr { { ptr, u64 }, u64 }, v13, !3408
        mem_copy_val v14, v11
        v15 = const u64 1
        v16 = get_elem_ptr v12, __ptr u64, v15, !3408
        v17 = const u64 0, !1676
        store v17 to v16, !3411
        v18 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __tmp_block_arg
        mem_copy_val v18, v12
        v19 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __for_iterable_2
        mem_copy_val v19, v18
        br while()

        while():
        v20 = const bool true
        cbr v20, while_body(), end_while()

        while_body():
        v21 = get_local __ptr { { { ptr, u64 }, u64 }, u64 }, __for_iterable_2
        v22 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3413
        store v21 to v22, !3413
        v23 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3415
        v24 = load v23, !3413
        v25 = const u64 1
        v26 = get_elem_ptr v24, __ptr u64, v25, !3416
        v27 = load v26, !3413
        v28 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3418
        v29 = load v28, !3413
        v30 = const u64 0
        v31 = get_elem_ptr v29, __ptr { { ptr, u64 }, u64 }, v30, !3419
        v32 = const u64 1
        v33 = get_elem_ptr v31, __ptr u64, v32, !3420
        v34 = load v33, !3413
        v35 = call ge_106(v27, v34), !3423
        cbr v35, next_154_block0(), next_154_block1(), !3424

        next_154_block0():
        v36 = get_local __ptr { u64, ( () | u64 ) }, __anon_00, !3425
        v37 = const u64 0
        v38 = get_elem_ptr v36, __ptr u64, v37, !3426
        v39 = const u64 0, !863
        store v39 to v38, !3427
        v40 = get_local __ptr { u64, ( () | u64 ) }, __tmp_block_arg0
        mem_copy_val v40, v36
        br block4(v40), !3429

        next_154_block1():
        v41 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3431
        v42 = load v41, !3413
        v43 = const u64 1
        v44 = get_elem_ptr v42, __ptr u64, v43, !3432
        v45 = get_local __ptr u64, self_00, !3435
        mem_copy_val v45, v44
        v46 = get_local __ptr u64, other_, !3436
        v47 = const u64 1, !3437
        store v47 to v46, !3438
        v48 = get_local __ptr u64, self_00, !3439
        v49 = load v48, !3440
        v50 = get_local __ptr u64, other_, !3441
        v51 = load v50, !3442
        v52 = add v49, v51, !3443
        v53 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3444
        v54 = load v53, !3413
        v55 = const u64 1
        v56 = get_elem_ptr v54, __ptr u64, v55, !3445
        store v52 to v56, !3446
        v57 = get_local __ptr { u64, ( () | u64 ) }, __anon_1, !3447
        v58 = const u64 0
        v59 = get_elem_ptr v57, __ptr u64, v58, !3448
        v60 = const u64 1, !863
        store v60 to v59, !3449
        v61 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3451
        v62 = load v61, !3413
        v63 = const u64 0
        v64 = get_elem_ptr v62, __ptr { { ptr, u64 }, u64 }, v63, !3452
        v65 = get_local __ptr __ptr { { { ptr, u64 }, u64 }, u64 }, self_1, !3454
        v66 = load v65, !3413
        v67 = const u64 1
        v68 = get_elem_ptr v66, __ptr u64, v67, !3455
        v69 = get_local __ptr u64, self_10, !3458
        mem_copy_val v69, v68
        v70 = get_local __ptr u64, other_0, !3459
        v71 = const u64 1, !3460
        store v71 to v70, !3461
        v72 = get_local __ptr u64, self_10, !3462
        v73 = load v72, !3463
        v74 = get_local __ptr u64, other_0, !3464
        v75 = load v74, !3465
        v76 = sub v73, v75, !3466
        v77 = get_local __ptr { { ptr, u64 }, u64 }, self_2, !3469
        mem_copy_val v77, v64
        v78 = get_local __ptr u64, index_, !3470
        store v76 to v78, !3471
        v79 = get_local __ptr { { ptr, u64 }, u64 }, self_2, !3473
        v80 = const u64 0
        v81 = get_elem_ptr v79, __ptr { ptr, u64 }, v80, !3474
        v82 = const u64 0
        v83 = get_elem_ptr v81, __ptr ptr, v82, !3475
        v84 = get_local __ptr u64, index_, !3477
        v85 = get_local __ptr ptr, self_000, !3480
        mem_copy_val v85, v83
        v86 = get_local __ptr u64, count_, !3481
        mem_copy_val v86, v84
        v87 = get_local __ptr ptr, self_000, !3482
        v88 = load v87, !3483
        v89 = get_local __ptr u64, count_, !3484
        v90 = load v89, !3485
        v91 = const u64 8
        v92 = mul v91, v90, !3486
        v93 = add v88, v92, !3487
        v94 = get_local __ptr ptr, self_100, !3490
        store v93 to v94, !3491
        v95 = const bool false
        cbr v95, next_154_get_unchecked_155_read_156_block0(), next_154_get_unchecked_155_read_156_block1(), !3493

        next_154_get_unchecked_155_read_156_block0():
        v96 = get_local __ptr ptr, self_100, !3495
        v97 = load v96, !3496
        v98 = asm(ptr: v97) -> u64 ptr, !3498 {
        }
        br next_154_get_unchecked_155_read_156_block5(v98), !3499

        next_154_get_unchecked_155_read_156_block1():
        v99 = get_local __ptr u64, self_0000, !3502
        v100 = const u64 8
        store v100 to v99, !3503
        v101 = get_local __ptr u64, other_1, !3504
        v102 = const u64 1, !3505
        store v102 to v101, !3506
        v103 = get_local __ptr u64, self_0000, !3507
        v104 = load v103, !3508
        v105 = get_local __ptr u64, other_1, !3509
        v106 = load v105, !3510
        v107 = cmp eq v104 v106, !3511
        cbr v107, next_154_get_unchecked_155_read_156_block2(), next_154_get_unchecked_155_read_156_block3(), !3512

        next_154_get_unchecked_155_read_156_block2():
        v108 = get_local __ptr ptr, self_100, !3514
        v109 = load v108, !3515
        v110 = asm(ptr: v109, val) -> u64 val, !3517 {
            lb     val ptr i0, !3518
        }
        br next_154_get_unchecked_155_read_156_block4(v110), !3519

        next_154_get_unchecked_155_read_156_block3():
        v111 = get_local __ptr ptr, self_100, !3521
        v112 = load v111, !3522
        v113 = asm(ptr: v112, val) -> u64 val, !3524 {
            lw     val ptr i0, !3525
        }
        br next_154_get_unchecked_155_read_156_block4(v113), !3526

        next_154_get_unchecked_155_read_156_block4(v114: u64):
        br next_154_get_unchecked_155_read_156_block5(v114), !3527

        next_154_get_unchecked_155_read_156_block5(v115: u64):
        v116 = const u64 1
        v117 = const u64 1
        v118 = get_elem_ptr v57, __ptr u64, v116, v117, !3528
        store v115 to v118, !3529
        v119 = get_local __ptr { u64, ( () | u64 ) }, __tmp_block_arg0
        mem_copy_val v119, v57
        br block4(v119), !3413

        block4(v120: __ptr { u64, ( () | u64 ) }):
        v121 = get_local __ptr { u64, ( () | u64 ) }, __for_value_opt_1
        mem_copy_val v121, v120
        v122 = get_local __ptr { u64, ( () | u64 ) }, __for_value_opt_1
        v123 = get_local __ptr { u64, ( () | u64 ) }, self_3
        mem_copy_val v123, v122
        v124 = get_local __ptr { u64, ( () | u64 ) }, self_3, !947
        v125 = get_local __ptr { u64, ( () | u64 ) }, __matched_value_3, !948
        mem_copy_val v125, v124
        v126 = get_local __ptr { u64, ( () | u64 ) }, __matched_value_3, !947
        v127 = const u64 0
        v128 = get_elem_ptr v126, __ptr u64, v127, !947
        v129 = get_local __ptr u64, self_01, !3530
        mem_copy_val v129, v128
        v130 = get_local __ptr u64, other_2, !3530
        v131 = const u64 1, !947
        store v131 to v130, !3530
        v132 = get_local __ptr u64, self_01, !3531
        v133 = load v132, !3530
        v134 = get_local __ptr u64, other_2, !3532
        v135 = load v134, !3530
        v136 = cmp eq v133 v135, !3530
        v137 = const bool false, !954
        cbr v136, is_none_157_block2(v137), is_none_157_block1(), !949

        is_none_157_block1():
        v138 = const bool true, !955
        br is_none_157_block2(v138)

        is_none_157_block2(v139: bool):
        cbr v139, end_while(), block1()

        block1():
        v140 = get_local __ptr { u64, ( () | u64 ) }, __for_value_opt_1
        v141 = get_local __ptr { u64, ( () | u64 ) }, self_4, !3533
        mem_copy_val v141, v140
        v142 = get_local __ptr { u64, ( () | u64 ) }, self_4, !3534
        v143 = get_local __ptr { u64, ( () | u64 ) }, __matched_value_4, !3535
        mem_copy_val v143, v142
        v144 = get_local __ptr { u64, ( () | u64 ) }, __matched_value_4, !3536
        v145 = const u64 0
        v146 = get_elem_ptr v144, __ptr u64, v145, !3537
        v147 = get_local __ptr u64, self_02, !3538
        mem_copy_val v147, v146
        v148 = get_local __ptr u64, other_3, !3539
        v149 = const u64 1, !957
        store v149 to v148, !3540
        v150 = get_local __ptr u64, self_02, !3541
        v151 = load v150, !3542
        v152 = get_local __ptr u64, other_3, !3543
        v153 = load v152, !3544
        v154 = cmp eq v151 v153, !3545
        cbr v154, unwrap_158_block0(), unwrap_158_block1(), !3546

        unwrap_158_block0():
        v155 = get_local __ptr { u64, ( () | u64 ) }, __matched_value_4, !3547
        v156 = const u64 1
        v157 = const u64 1
        v158 = get_elem_ptr v155, __ptr u64, v156, v157, !3533
        v159 = get_local __ptr u64, v, !3548
        mem_copy_val v159, v158
        v160 = get_local __ptr u64, v, !3549
        v161 = load v160, !3533
        v162 = get_local __ptr u64, elem, !3550
        store v161 to v162, !3550
        v163 = get_local __ptr { {  }, bool }, l, !3551
        v164 = get_local __ptr u64, elem, !3552
        v165 = get_local __ptr __ptr { {  }, bool }, self_5, !3555
        store v163 to v165, !3555
        v166 = get_local __ptr u64, value_, !3555
        mem_copy_val v166, v164
        v167 = get_local __ptr __ptr { {  }, bool }, self_5, !3556
        v168 = load v167, !3555
        v169 = const u64 1
        v170 = get_elem_ptr v168, __ptr bool, v169, !3557
        v171 = load v170, !3555
        cbr v171, entry_159_block0(), entry_159_block2(), !3558

        unwrap_158_block1():
        v172 = get_local __ptr u64, code_, !3559
        v173 = const u64 0, !986
        store v173 to v172, !3560
        v174 = get_local __ptr u64, code_, !3561
        v175 = load v174, !3562
        revert v175, !3563

        entry_159_block0():
        v176 = get_local __ptr string<2>, __const
        v177 = get_local __ptr __ptr { {  }, bool }, self_5, !3564
        v178 = load v177, !3555
        v179 = const u64 0
        v180 = get_elem_ptr v178, __ptr {  }, v179, !3565
        v181 = get_local __ptr string<2>, __anon_01, !3555
        mem_copy_val v181, v176
        v182 = cast_ptr v181 to ptr, !3566
        v183 = get_local __ptr { ptr, u64 }, __anon_10, !3567
        v184 = const u64 0
        v185 = get_elem_ptr v183, __ptr ptr, v184, !3555
        store v182 to v185, !3568
        v186 = const u64 1
        v187 = get_elem_ptr v183, __ptr u64, v186, !3555
        v188 = const u64 2
        store v188 to v187, !3569
        v189 = get_local __ptr slice, __anon_2, !3570
        mem_copy_bytes v189, v183, 16, !3555
        v190 = get_local __ptr {  }, __tmp_arg
        mem_copy_val v190, v180
        v191 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v191, v189
        v192 = call print_str_1(v190, v191)
        br entry_159_block2(), !3555

        entry_159_block2():
        v193 = get_local __ptr u64, value_, !3571
        v194 = load v193, !3555
        v195 = get_local __ptr __ptr { {  }, bool }, self_5, !3572
        v196 = load v195, !3555
        v197 = const u64 0
        v198 = get_elem_ptr v196, __ptr {  }, v197, !3573
        v199 = call fmt_38(v194, v198), !3574
        v200 = get_local __ptr __ptr { {  }, bool }, self_5, !3575
        v201 = load v200, !3555
        v202 = const u64 1
        v203 = get_elem_ptr v201, __ptr bool, v202, !3576
        v204 = const bool true, !732
        store v204 to v203, !3577
        v205 = get_local __ptr __ptr { {  }, bool }, self_5, !3578
        v206 = load v205, !3555
        v207 = get_local __ptr { {  }, bool }, __tmp_block_arg1
        mem_copy_val v207, v206
        v208 = get_local __ptr { {  }, bool }, _, !3579
        mem_copy_val v208, v207
        br while()

        end_while():
        v209 = get_local __ptr { {  }, bool }, l, !3580
        v210 = call finish_72(v209), !3583
        v211 = const unit ()
        ret () v211
    }
}

!0 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg/src/main.<autogenerated>.sw"
!1 = span !0 0 127
!2 = fn_name_span !0 7 14
!3 = (!1 !2)
!4 = span !0 67 73
!5 = fn_call_path_span !0 67 71
!6 = (!4 !5)
!7 = span !0 48 74
!8 = span !0 105 112
!9 = span !0 91 113
!10 = fn_call_path_span !0 91 97
!11 = (!9 !10)
!12 = "/home/kebradalaonda/p/sway/sway-lib-std/src/codec.sw"
!13 = span !12 70852 70856
!14 = (!9 !10 !13)
!15 = span !12 70868 70881
!16 = fn_call_path_span !12 70868 70879
!17 = (!9 !10 !15 !16)
!18 = (!9 !10 !15 !16)
!19 = (!9 !10 !15 !16)
!20 = (!9 !10 !15 !16)
!21 = (!9 !10 !15 !16)
!22 = (!9 !10 !15 !16)
!23 = (!9 !10 !15 !16)
!24 = (!9 !10 !15 !16)
!25 = span !12 191 254
!26 = (!9 !10 !15 !16 !25)
!27 = (!9 !10 !15 !16)
!28 = span !12 70852 70882
!29 = fn_call_path_span !12 70857 70867
!30 = (!9 !10 !28 !29)
!31 = (!9 !10 !28 !29)
!32 = span !12 4768 4774
!33 = (!9 !10 !28 !29 !32)
!34 = span !12 87 114
!35 = (!9 !10 !28 !29 !34)
!36 = (!9 !10 !28 !29)
!37 = (!9 !10 !28 !29)
!38 = (!9 !10 !28 !29)
!39 = (!9 !10 !28 !29)
!40 = (!9 !10 !28 !29)
!41 = (!9 !10 !28 !29)
!42 = (!9 !10 !28 !29)
!43 = span !12 4783 4787
!44 = (!9 !10 !28 !29 !43)
!45 = (!9 !10 !28 !29)
!46 = (!9 !10 !28 !29)
!47 = (!9 !10 !28 !29)
!48 = (!9 !10 !28 !29)
!49 = (!9 !10 !28 !29)
!50 = (!9 !10 !28 !29)
!51 = (!9 !10 !28 !29)
!52 = (!9 !10 !28 !29)
!53 = (!9 !10 !28 !29)
!54 = (!9 !10 !28 !29)
!55 = (!9 !10 !28 !29)
!56 = (!9 !10 !28 !29)
!57 = (!9 !10 !28 !29)
!58 = (!9 !10 !28 !29)
!59 = (!9 !10 !28 !29)
!60 = span !12 4716 4799
!61 = (!9 !10 !28 !29 !60)
!62 = (!9 !10 !28 !29)
!63 = span !12 70839 70883
!64 = (!9 !10 !63)
!65 = span !12 70888 70894
!66 = (!9 !10 !65)
!67 = span !12 70888 70909
!68 = fn_call_path_span !12 70895 70907
!69 = (!9 !10 !67 !68)
!70 = span !12 573 577
!71 = (!9 !10 !67 !68 !70)
!72 = (!9 !10 !67 !68 !34)
!73 = (!9 !10 !67 !68)
!74 = (!9 !10 !67 !68)
!75 = (!9 !10 !67 !68)
!76 = (!9 !10 !67 !68)
!77 = (!9 !10 !67 !68)
!78 = (!9 !10 !67 !68)
!79 = (!9 !10 !28 !29)
!80 = (!9 !10 !28 !29)
!81 = (!9 !10 !28 !29)
!82 = (!9 !10 !28 !29)
!83 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg/src/main.sw"
!84 = span !83 129 3045
!85 = fn_name_span !83 132 136
!86 = (!84 !85)
!87 = span !83 166 168
!88 = span !83 160 169
!89 = "/home/kebradalaonda/p/sway/sway-lib-std/src/debug.sw"
!90 = span !89 6701 6702
!91 = span !89 6713 6717
!92 = span !89 5397 5403
!93 = (!88 !92)
!94 = span !89 5382 5404
!95 = fn_call_path_span !89 5382 5396
!96 = (!88 !94 !95)
!97 = span !89 400 402
!98 = (!88 !94 !95 !97)
!99 = (!88 !94 !95)
!100 = span !89 390 394
!101 = span !89 382 441
!102 = (!88 !94 !95 !101)
!103 = span !89 414 434
!104 = span !83 152 170
!105 = span !83 190 194
!106 = span !83 184 195
!107 = (!106 !92)
!108 = (!106 !94 !95)
!109 = (!106 !94 !95 !97)
!110 = (!106 !94 !95)
!111 = (!106 !94 !95 !101)
!112 = span !83 176 196
!113 = span !83 215 220
!114 = span !83 209 221
!115 = (!114 !92)
!116 = (!114 !94 !95)
!117 = (!114 !94 !95 !97)
!118 = (!114 !94 !95)
!119 = (!114 !94 !95 !101)
!120 = span !83 201 222
!121 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!122 = span !121 6474 6475
!123 = span !83 236 252
!124 = (!123 !92)
!125 = (!123 !94 !95)
!126 = (!123 !94 !95 !97)
!127 = (!123 !94 !95)
!128 = (!123 !94 !95 !101)
!129 = span !83 228 253
!130 = span !83 272 275
!131 = span !83 266 276
!132 = (!131 !92)
!133 = (!131 !94 !95)
!134 = (!131 !94 !95 !97)
!135 = (!131 !94 !95)
!136 = (!131 !94 !95 !101)
!137 = span !83 258 277
!138 = span !83 296 300
!139 = span !83 290 301
!140 = (!139 !92)
!141 = (!139 !94 !95)
!142 = (!139 !94 !95 !97)
!143 = (!139 !94 !95)
!144 = (!139 !94 !95 !101)
!145 = span !83 282 302
!146 = span !83 321 326
!147 = span !83 315 327
!148 = (!147 !92)
!149 = (!147 !94 !95)
!150 = (!147 !94 !95 !97)
!151 = (!147 !94 !95)
!152 = (!147 !94 !95 !101)
!153 = span !83 307 328
!154 = span !121 6851 6854
!155 = span !83 341 357
!156 = (!155 !92)
!157 = (!155 !94 !95)
!158 = (!155 !94 !95 !97)
!159 = (!155 !94 !95)
!160 = (!155 !94 !95 !101)
!161 = span !83 333 358
!162 = span !121 5031 5032
!163 = span !83 372 389
!164 = (!163 !92)
!165 = (!163 !94 !95)
!166 = (!163 !94 !95 !97)
!167 = (!163 !94 !95)
!168 = (!163 !94 !95 !101)
!169 = span !83 364 390
!170 = span !83 409 413
!171 = span !83 403 414
!172 = (!171 !92)
!173 = (!171 !94 !95)
!174 = (!171 !94 !95 !97)
!175 = (!171 !94 !95)
!176 = (!171 !94 !95 !101)
!177 = span !83 395 415
!178 = span !83 434 439
!179 = span !83 428 440
!180 = (!179 !92)
!181 = (!179 !94 !95)
!182 = (!179 !94 !95 !97)
!183 = (!179 !94 !95)
!184 = (!179 !94 !95 !101)
!185 = span !83 420 441
!186 = span !83 460 466
!187 = span !83 454 467
!188 = (!187 !92)
!189 = (!187 !94 !95)
!190 = (!187 !94 !95 !97)
!191 = (!187 !94 !95)
!192 = (!187 !94 !95 !101)
!193 = span !83 446 468
!194 = span !121 5415 5420
!195 = span !83 481 498
!196 = (!195 !92)
!197 = (!195 !94 !95)
!198 = (!195 !94 !95 !97)
!199 = (!195 !94 !95)
!200 = (!195 !94 !95 !101)
!201 = span !83 473 499
!202 = span !121 3573 3574
!203 = span !83 513 530
!204 = (!203 !92)
!205 = (!203 !94 !95)
!206 = (!203 !94 !95 !97)
!207 = (!203 !94 !95)
!208 = (!203 !94 !95 !101)
!209 = span !83 505 531
!210 = span !83 550 554
!211 = span !83 544 555
!212 = (!211 !92)
!213 = (!211 !94 !95)
!214 = (!211 !94 !95 !97)
!215 = (!211 !94 !95)
!216 = (!211 !94 !95 !101)
!217 = span !83 536 556
!218 = span !83 575 580
!219 = span !83 569 581
!220 = (!219 !92)
!221 = (!219 !94 !95)
!222 = (!219 !94 !95 !97)
!223 = (!219 !94 !95)
!224 = (!219 !94 !95 !101)
!225 = span !83 561 582
!226 = span !83 601 607
!227 = span !83 595 608
!228 = (!227 !92)
!229 = (!227 !94 !95)
!230 = (!227 !94 !95 !97)
!231 = (!227 !94 !95)
!232 = (!227 !94 !95 !101)
!233 = span !83 587 609
!234 = span !121 3962 3972
!235 = span !83 622 639
!236 = (!235 !92)
!237 = (!235 !94 !95)
!238 = (!235 !94 !95 !97)
!239 = (!235 !94 !95)
!240 = (!235 !94 !95 !101)
!241 = span !83 614 640
!242 = span !121 2097 2098
!243 = span !83 654 671
!244 = (!243 !92)
!245 = (!243 !94 !95)
!246 = (!243 !94 !95 !97)
!247 = (!243 !94 !95)
!248 = (!243 !94 !95 !101)
!249 = span !83 646 672
!250 = span !83 691 695
!251 = span !83 685 696
!252 = (!251 !92)
!253 = (!251 !94 !95)
!254 = (!251 !94 !95 !97)
!255 = (!251 !94 !95)
!256 = (!251 !94 !95 !101)
!257 = span !83 677 697
!258 = span !83 716 721
!259 = span !83 710 722
!260 = (!259 !92)
!261 = (!259 !94 !95)
!262 = (!259 !94 !95 !97)
!263 = (!259 !94 !95)
!264 = (!259 !94 !95 !101)
!265 = span !83 702 723
!266 = span !83 742 748
!267 = span !83 736 749
!268 = (!267 !92)
!269 = (!267 !94 !95)
!270 = (!267 !94 !95 !97)
!271 = (!267 !94 !95)
!272 = (!267 !94 !95 !101)
!273 = span !83 728 750
!274 = span !121 2493 2513
!275 = span !83 763 780
!276 = (!275 !92)
!277 = (!275 !94 !95)
!278 = (!275 !94 !95 !97)
!279 = (!275 !94 !95)
!280 = (!275 !94 !95 !101)
!281 = span !83 755 781
!282 = span !83 795 813
!283 = (!282 !92)
!284 = (!282 !94 !95)
!285 = (!282 !94 !95 !97)
!286 = (!282 !94 !95)
!287 = (!282 !94 !95 !101)
!288 = span !83 787 814
!289 = span !83 827 839
!290 = (!289 !92)
!291 = (!289 !94 !95)
!292 = (!289 !94 !95 !97)
!293 = (!289 !94 !95)
!294 = (!289 !94 !95 !101)
!295 = span !83 819 840
!296 = span !83 853 866
!297 = (!296 !92)
!298 = (!296 !94 !95)
!299 = (!296 !94 !95 !97)
!300 = (!296 !94 !95)
!301 = (!296 !94 !95 !101)
!302 = span !83 845 867
!303 = span !83 880 894
!304 = (!303 !92)
!305 = (!303 !94 !95)
!306 = (!303 !94 !95 !97)
!307 = (!303 !94 !95)
!308 = (!303 !94 !95 !101)
!309 = span !83 872 895
!310 = span !83 908 926
!311 = (!310 !92)
!312 = (!310 !94 !95)
!313 = (!310 !94 !95 !97)
!314 = (!310 !94 !95)
!315 = (!310 !94 !95 !101)
!316 = span !83 900 927
!317 = span !83 941 959
!318 = (!317 !92)
!319 = (!317 !94 !95)
!320 = (!317 !94 !95 !97)
!321 = (!317 !94 !95)
!322 = (!317 !94 !95 !101)
!323 = span !83 933 960
!324 = span !83 973 991
!325 = (!324 !92)
!326 = (!324 !94 !95)
!327 = (!324 !94 !95 !97)
!328 = (!324 !94 !95)
!329 = (!324 !94 !95 !101)
!330 = span !83 965 992
!331 = span !83 1027 1030
!332 = span !83 1021 1031
!333 = (!332 !92)
!334 = (!332 !94 !95)
!335 = (!332 !94 !95 !97)
!336 = (!332 !94 !95)
!337 = (!332 !94 !95 !101)
!338 = span !83 1013 1032
!339 = span !83 1045 1071
!340 = span !89 28803 28807
!341 = span !89 28788 28808
!342 = fn_call_path_span !89 28788 28802
!343 = (!341 !342)
!344 = "/home/kebradalaonda/p/sway/sway-lib-std/src/str.sw"
!345 = span !344 485 527
!346 = (!341 !342 !345)
!347 = (!341 !342 !345)
!348 = span !344 552 553
!349 = (!341 !342 !348)
!350 = span !344 542 554
!351 = (!341 !342 !350)
!352 = span !344 532 555
!353 = (!341 !342 !352)
!354 = (!341 !342 !352)
!355 = span !344 610 613
!356 = (!341 !342 !355)
!357 = span !344 571 712
!358 = (!341 !342 !357)
!359 = span !344 625 634
!360 = span !344 644 656
!361 = span !344 666 683
!362 = span !344 561 713
!363 = (!341 !342 !362)
!364 = (!341 !342 !362)
!365 = span !344 727 730
!366 = (!341 !342 !365)
!367 = span !344 732 740
!368 = (!341 !342 !367)
!369 = span !344 726 741
!370 = (!341 !342 !369)
!371 = (!341 !342 !369)
!372 = (!341 !342 !369)
!373 = span !89 28813 28814
!374 = (!339 !92)
!375 = (!339 !94 !95)
!376 = (!339 !94 !95 !97)
!377 = (!339 !94 !95)
!378 = (!339 !94 !95 !101)
!379 = span !83 1037 1072
!380 = span !83 1111 1114
!381 = span !83 1110 1120
!382 = span !83 1116 1119
!383 = span !83 1104 1121
!384 = span !89 40329 40330
!385 = span !89 40343 40345
!386 = span !89 40317 40347
!387 = span !89 40368 40369
!388 = span !89 40376 40380
!389 = span !89 40381 40382
!390 = span !89 40368 40383
!391 = fn_call_path_span !89 40370 40375
!392 = (!390 !391)
!393 = span !89 6423 6427
!394 = (!390 !391 !393)
!395 = span !89 626 642
!396 = (!390 !391 !395)
!397 = span !89 6423 6438
!398 = (!390 !391 !397)
!399 = span !89 6453 6457
!400 = (!390 !391 !399)
!401 = span !89 608 620
!402 = (!390 !391 !401)
!403 = span !89 6470 6474
!404 = (!390 !391 !403)
!405 = (!390 !391 !403)
!406 = (!390 !391 !403)
!407 = (!390 !391 !403)
!408 = (!390 !391 !403)
!409 = span !89 6496 6501
!410 = (!390 !391 !409)
!411 = span !89 6506 6510
!412 = (!390 !391 !411)
!413 = (!390 !391 !401)
!414 = span !89 6524 6546
!415 = (!390 !391 !414)
!416 = (!390 !391 !414)
!417 = span !89 6542 6546
!418 = (!390 !391 !414)
!419 = span !89 6557 6561
!420 = (!390 !391 !419)
!421 = span !89 40356 40384
!422 = span !89 40405 40406
!423 = span !89 40413 40417
!424 = span !89 40418 40419
!425 = span !89 40393 40421
!426 = span !89 40430 40431
!427 = span !89 40430 40440
!428 = fn_call_path_span !89 40432 40438
!429 = (!427 !428)
!430 = (!383 !92)
!431 = (!383 !94 !95)
!432 = (!383 !94 !95 !97)
!433 = (!383 !94 !95)
!434 = (!383 !94 !95 !101)
!435 = span !83 1096 1122
!436 = span !83 1141 1151
!437 = span !83 1142 1145
!438 = span !83 1147 1150
!439 = span !83 1135 1152
!440 = span !89 9192 9193
!441 = span !89 9180 9207
!442 = span !89 9216 9230
!443 = span !89 9228 9229
!444 = span !89 9245 9246
!445 = span !89 9245 9250
!446 = fn_call_path_span !89 9247 9248
!447 = (!445 !446)
!448 = span !89 9249 9250
!449 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!450 = span !449 21076 21080
!451 = (!445 !446 !450)
!452 = span !449 21082 21087
!453 = (!445 !446 !452)
!454 = span !89 9269 9270
!455 = span !89 9277 9281
!456 = span !89 9282 9283
!457 = span !89 9277 9284
!458 = span !89 9265 9285
!459 = span !89 9299 9300
!460 = span !89 9299 9305
!461 = fn_call_path_span !89 9301 9303
!462 = (!460 !461)
!463 = span !89 9304 9305
!464 = span !449 1322 1326
!465 = (!460 !461 !464)
!466 = span !449 1328 1333
!467 = (!460 !461 !466)
!468 = span !89 9326 9327
!469 = span !89 9326 9336
!470 = fn_call_path_span !89 9328 9334
!471 = (!469 !470)
!472 = (!439 !92)
!473 = (!439 !94 !95)
!474 = (!439 !94 !95 !97)
!475 = (!439 !94 !95)
!476 = (!439 !94 !95 !101)
!477 = span !83 1127 1153
!478 = span !83 1181 1191
!479 = span !83 1182 1185
!480 = span !83 1187 1190
!481 = span !83 1193 1194
!482 = span !83 1196 1197
!483 = span !83 1166 1199
!484 = span !89 7986 7987
!485 = span !89 7974 8001
!486 = span !89 8011 8025
!487 = span !89 8023 8024
!488 = span !89 8040 8041
!489 = span !89 8044 8048
!490 = span !89 8044 8054
!491 = fn_call_path_span !89 8049 8052
!492 = (!490 !491)
!493 = "/home/kebradalaonda/p/sway/sway-lib-std/src/slice.sw"
!494 = span !493 243 247
!495 = (!490 !491 !494)
!496 = span !493 221 291
!497 = (!490 !491 !496)
!498 = (!490 !491 !496)
!499 = (!490 !491 !496)
!500 = (!490 !491 !496)
!501 = (!490 !491 !496)
!502 = (!490 !491 !496)
!503 = (!490 !491 !496)
!504 = (!490 !491 !496)
!505 = (!490 !491 !496)
!506 = span !493 300 303
!507 = (!490 !491 !506)
!508 = span !89 8040 8054
!509 = fn_call_path_span !89 8042 8043
!510 = (!508 !509)
!511 = (!508 !509 !450)
!512 = (!508 !509 !452)
!513 = span !89 8094 8098
!514 = span !89 8100 8101
!515 = span !89 8069 8103
!516 = span !89 8120 8121
!517 = span !89 8128 8132
!518 = span !89 8116 8133
!519 = span !89 8147 8148
!520 = span !89 8147 8153
!521 = fn_call_path_span !89 8149 8151
!522 = (!520 !521)
!523 = span !89 8152 8153
!524 = (!520 !521 !464)
!525 = (!520 !521 !466)
!526 = span !89 8174 8175
!527 = span !89 8174 8184
!528 = fn_call_path_span !89 8176 8182
!529 = (!527 !528)
!530 = (!483 !92)
!531 = (!483 !94 !95)
!532 = (!483 !94 !95 !97)
!533 = (!483 !94 !95)
!534 = (!483 !94 !95 !101)
!535 = span !83 1158 1200
!536 = span !83 1243 1248
!537 = span !83 1237 1249
!538 = (!537 !92)
!539 = (!537 !94 !95)
!540 = (!537 !94 !95 !97)
!541 = (!537 !94 !95)
!542 = (!537 !94 !95 !101)
!543 = span !83 1229 1250
!544 = span !83 41 69
!545 = span !83 1263 1277
!546 = (!545 !92)
!547 = (!545 !94 !95)
!548 = (!545 !94 !95 !97)
!549 = (!545 !94 !95)
!550 = (!545 !94 !95 !101)
!551 = span !83 1255 1278
!552 = span !83 1305 1310
!553 = span !83 1291 1312
!554 = (!553 !92)
!555 = (!553 !94 !95)
!556 = (!553 !94 !95 !97)
!557 = (!553 !94 !95)
!558 = (!553 !94 !95 !101)
!559 = span !83 1283 1313
!560 = span !83 1376 1405
!561 = fn_call_path_span !83 1376 1403
!562 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!563 = span !562 1248 1296
!564 = (!560 !561 !563)
!565 = (!560 !561)
!566 = span !83 1370 1406
!567 = (!566 !92)
!568 = (!566 !94 !95)
!569 = (!566 !94 !95 !97)
!570 = (!566 !94 !95)
!571 = (!566 !94 !95 !101)
!572 = span !83 1362 1407
!573 = span !83 1426 1456
!574 = fn_call_path_span !83 1426 1454
!575 = "/home/kebradalaonda/p/sway/sway-lib-std/src/asset_id.sw"
!576 = span !575 31348 31396
!577 = (!573 !574 !576)
!578 = (!573 !574)
!579 = span !83 1420 1457
!580 = (!579 !92)
!581 = (!579 !94 !95)
!582 = (!579 !94 !95 !97)
!583 = (!579 !94 !95)
!584 = (!579 !94 !95 !101)
!585 = span !83 1412 1458
!586 = "/home/kebradalaonda/p/sway/sway-lib-std/src/auth.sw"
!587 = span !586 513 784
!588 = span !83 1471 1530
!589 = "/home/kebradalaonda/p/sway/sway-lib-std/src/auth.<autogenerated>.sw"
!590 = span !589 179 183
!591 = span !589 173 446
!592 = span !589 186 327
!593 = fn_call_path_span !589 186 327
!594 = (!592 !593)
!595 = span !449 16833 16837
!596 = (!592 !593 !595)
!597 = span !449 16839 16844
!598 = (!592 !593 !597)
!599 = span !589 257 259
!600 = span !589 270 302
!601 = span !589 329 442
!602 = fn_call_path_span !589 329 442
!603 = (!601 !602)
!604 = (!601 !602 !595)
!605 = (!601 !602 !597)
!606 = span !589 386 388
!607 = span !589 399 417
!608 = (!588 !92)
!609 = (!588 !94 !95)
!610 = (!588 !94 !95 !97)
!611 = (!588 !94 !95)
!612 = (!588 !94 !95 !101)
!613 = span !83 1463 1531
!614 = span !83 1550 1573
!615 = fn_call_path_span !83 1550 1571
!616 = "/home/kebradalaonda/p/sway/sway-lib-std/src/b512.sw"
!617 = span !616 3414 3442
!618 = (!614 !615 !617)
!619 = (!614 !615)
!620 = span !616 3389 3453
!621 = (!614 !615 !620)
!622 = span !83 1544 1574
!623 = "/home/kebradalaonda/p/sway/sway-lib-std/src/b512.<autogenerated>.sw"
!624 = span !623 168 170
!625 = span !623 184 190
!626 = span !623 198 204
!627 = span !623 206 210
!628 = span !616 529 544
!629 = span !623 168 216
!630 = fn_call_path_span !623 192 197
!631 = (!629 !630)
!632 = span !89 5688 5692
!633 = (!629 !630 !632)
!634 = span !89 492 508
!635 = (!629 !630 !634)
!636 = span !89 5688 5703
!637 = (!629 !630 !636)
!638 = span !89 5718 5722
!639 = (!629 !630 !638)
!640 = span !89 474 486
!641 = (!629 !630 !640)
!642 = span !89 5735 5739
!643 = (!629 !630 !642)
!644 = (!629 !630 !642)
!645 = (!629 !630 !642)
!646 = (!629 !630 !642)
!647 = (!629 !630 !642)
!648 = span !89 5761 5765
!649 = (!629 !630 !648)
!650 = (!629 !630 !640)
!651 = span !89 5778 5782
!652 = (!629 !630 !651)
!653 = span !89 5793 5797
!654 = (!629 !630 !653)
!655 = (!629 !630 !640)
!656 = span !89 5810 5814
!657 = (!629 !630 !656)
!658 = (!629 !630 !656)
!659 = (!629 !630 !656)
!660 = (!629 !630 !656)
!661 = (!629 !630 !656)
!662 = span !89 5825 5830
!663 = (!629 !630 !662)
!664 = span !89 5835 5839
!665 = (!629 !630 !664)
!666 = (!629 !630 !640)
!667 = span !89 5825 5842
!668 = fn_call_path_span !89 5831 5834
!669 = (!629 !630 !667 !668)
!670 = (!629 !630 !667 !668)
!671 = (!629 !630 !667 !668)
!672 = (!629 !630 !667 !668 !440)
!673 = (!629 !630 !667 !668)
!674 = (!629 !630 !667 !668 !441)
!675 = (!629 !630 !667 !668 !442)
!676 = (!629 !630 !667 !668 !442)
!677 = (!629 !630 !667 !668)
!678 = (!629 !630 !667 !668 !444)
!679 = (!629 !630 !667 !668 !445 !446)
!680 = (!629 !630 !667 !668 !445 !446)
!681 = (!629 !630 !667 !668 !445 !446)
!682 = (!629 !630 !667 !668 !445 !446 !450)
!683 = (!629 !630 !667 !668 !445 !446)
!684 = (!629 !630 !667 !668 !445 !446 !452)
!685 = (!629 !630 !667 !668 !445 !446)
!686 = (!629 !630 !667 !668 !445 !446)
!687 = (!629 !630 !667 !668)
!688 = (!629 !630 !667 !668 !454)
!689 = (!629 !630 !667 !668 !455)
!690 = (!629 !630 !667 !668 !456)
!691 = (!629 !630 !667 !668)
!692 = (!629 !630 !667 !668 !457)
!693 = span !89 9269 9285
!694 = fn_call_path_span !89 9271 9276
!695 = (!629 !630 !667 !668 !693 !694)
!696 = (!629 !630 !667 !668 !693 !694)
!697 = (!629 !630 !667 !668 !693 !694)
!698 = span !89 6086 6090
!699 = (!629 !630 !667 !668 !693 !694 !698)
!700 = (!629 !630 !667 !668 !693 !694)
!701 = span !89 558 575
!702 = (!629 !630 !667 !668 !693 !694 !701)
!703 = (!629 !630 !667 !668 !693 !694)
!704 = span !89 6086 6102
!705 = (!629 !630 !667 !668 !693 !694 !704)
!706 = span !89 6117 6121
!707 = (!629 !630 !667 !668 !693 !694 !706)
!708 = (!629 !630 !667 !668 !693 !694)
!709 = span !89 540 552
!710 = (!629 !630 !667 !668 !693 !694 !709)
!711 = (!629 !630 !667 !668 !693 !694)
!712 = span !89 6134 6138
!713 = (!629 !630 !667 !668 !693 !694 !712)
!714 = (!629 !630 !667 !668 !693 !694 !712)
!715 = (!629 !630 !667 !668 !693 !694)
!716 = (!629 !630 !667 !668 !693 !694 !712)
!717 = (!629 !630 !667 !668 !693 !694)
!718 = (!629 !630 !667 !668 !693 !694 !712)
!719 = (!629 !630 !667 !668 !693 !694 !712)
!720 = (!629 !630 !667 !668 !693 !694)
!721 = (!629 !630 !667 !668 !693 !694)
!722 = span !89 6160 6165
!723 = (!629 !630 !667 !668 !693 !694 !722)
!724 = span !89 6170 6174
!725 = (!629 !630 !667 !668 !693 !694 !724)
!726 = (!629 !630 !667 !668 !693 !694)
!727 = (!629 !630 !667 !668 !693 !694 !709)
!728 = span !89 6188 6211
!729 = (!629 !630 !667 !668 !693 !694 !728)
!730 = (!629 !630 !667 !668 !693 !694)
!731 = (!629 !630 !667 !668 !693 !694 !728)
!732 = span !89 6207 6211
!733 = (!629 !630 !667 !668 !693 !694 !728)
!734 = span !89 6222 6226
!735 = (!629 !630 !667 !668 !693 !694 !734)
!736 = (!629 !630 !667 !668 !693 !694)
!737 = (!629 !630 !667 !668 !458)
!738 = (!629 !630 !667 !668 !459)
!739 = (!629 !630 !667 !668 !460 !461)
!740 = (!629 !630 !667 !668 !460 !461)
!741 = (!629 !630 !667 !668 !460 !461)
!742 = (!629 !630 !667 !668 !460 !461 !464)
!743 = (!629 !630 !667 !668 !460 !461)
!744 = (!629 !630 !667 !668 !460 !461 !466)
!745 = (!629 !630 !667 !668 !460 !461)
!746 = (!629 !630 !667 !668 !460 !461)
!747 = (!629 !630 !667 !668 !460)
!748 = (!629 !630 !667 !668 !460)
!749 = (!629 !630 !667 !668)
!750 = (!629 !630 !667 !668 !468)
!751 = (!629 !630 !667 !668 !469 !470)
!752 = span !89 5853 5875
!753 = (!629 !630 !752)
!754 = (!629 !630 !752)
!755 = span !89 5871 5875
!756 = (!629 !630 !752)
!757 = span !89 5886 5890
!758 = (!629 !630 !757)
!759 = span !623 168 226
!760 = fn_call_path_span !623 218 224
!761 = (!759 !760)
!762 = (!622 !92)
!763 = (!622 !94 !95)
!764 = (!622 !94 !95 !97)
!765 = (!622 !94 !95)
!766 = (!622 !94 !95 !101)
!767 = span !83 1536 1575
!768 = "/home/kebradalaonda/p/sway/sway-lib-std/src/block.sw"
!769 = span !768 261 376
!770 = span !83 1611 1664
!771 = "/home/kebradalaonda/p/sway/sway-lib-std/src/block.<autogenerated>.sw"
!772 = span !771 184 188
!773 = span !771 178 317
!774 = span !771 191 313
!775 = fn_call_path_span !771 191 313
!776 = (!774 !775)
!777 = (!774 !775 !595)
!778 = (!774 !775 !597)
!779 = span !771 255 257
!780 = span !771 268 288
!781 = (!770 !92)
!782 = (!770 !94 !95)
!783 = (!770 !94 !95 !97)
!784 = (!770 !94 !95)
!785 = (!770 !94 !95 !101)
!786 = span !83 1603 1665
!787 = span !83 1710 1734
!788 = fn_call_path_span !83 1710 1732
!789 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!790 = span !789 3322 3337
!791 = fn_call_path_span !789 3322 3335
!792 = span !789 574 588
!793 = fn_call_path_span !789 574 585
!794 = (!787 !788 !790 !791 !792 !793)
!795 = span !789 586 587
!796 = (!787 !788 !790 !791 !792 !793)
!797 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!798 = span !797 3325 3330
!799 = (!787 !788 !790 !791 !792 !793 !798)
!800 = (!787 !788 !790 !791 !792 !793)
!801 = span !797 3315 3378
!802 = (!787 !788 !790 !791 !792 !793 !801)
!803 = span !797 3342 3351
!804 = span !789 550 619
!805 = (!787 !788 !790 !791 !804)
!806 = (!787 !788 !790 !791)
!807 = (!787 !788 !790 !791 !804)
!808 = (!787 !788 !790 !791)
!809 = span !789 607 608
!810 = (!787 !788 !790 !791 !804)
!811 = span !789 3298 3368
!812 = (!787 !788 !811)
!813 = (!787 !788)
!814 = span !789 3356 3357
!815 = (!787 !788 !811)
!816 = span !83 1694 1735
!817 = span !83 1744 1749
!818 = span !83 1755 1756
!819 = span !83 1744 1757
!820 = fn_call_path_span !83 1750 1754
!821 = (!819 !820)
!822 = span !83 1767 1772
!823 = span !83 1778 1779
!824 = span !83 1767 1780
!825 = fn_call_path_span !83 1773 1777
!826 = (!824 !825)
!827 = span !83 1790 1795
!828 = span !83 1801 1802
!829 = span !83 1790 1803
!830 = fn_call_path_span !83 1796 1800
!831 = (!829 !830)
!832 = span !83 1813 1818
!833 = span !83 1678 1825
!834 = span !789 35618 35619
!835 = span !789 35606 35633
!836 = span !789 35654 35658
!837 = span !789 35654 35665
!838 = fn_call_path_span !789 35659 35663
!839 = (!837 !838)
!840 = span !789 28227 28231
!841 = (!837 !838 !840)
!842 = span !789 28195 28264
!843 = (!837 !838 !842)
!844 = span !789 28252 28253
!845 = (!837 !838 !842)
!846 = fn_call_path_span !789 35654 35665
!847 = (!837 !846)
!848 = span !789 35377 35381
!849 = (!837 !846 !848)
!850 = span !789 34485 34495
!851 = (!837 !846 !850)
!852 = span !789 35391 35395
!853 = (!837 !846 !852)
!854 = span !789 34466 34479
!855 = (!837 !846 !854)
!856 = span !789 2522 2530
!857 = (!837 !846 !856)
!858 = span !789 35377 35406
!859 = fn_call_path_span !789 35388 35390
!860 = (!837 !846 !858 !859)
!861 = (!837 !846 !858)
!862 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!863 = span !862 2477 2576
!864 = (!837 !846 !863)
!865 = (!837 !846 !863)
!866 = (!837 !846 !863)
!867 = span !789 35421 35432
!868 = (!837 !846 !867)
!869 = span !789 35452 35462
!870 = (!837 !846 !869)
!871 = (!837 !846 !850)
!872 = span !789 35452 35467
!873 = fn_call_path_span !789 35463 35465
!874 = (!837 !846 !872 !873)
!875 = (!837 !846 !872 !873)
!876 = span !789 35466 35467
!877 = (!837 !846 !872 !873)
!878 = (!837 !846 !872 !873 !464)
!879 = (!837 !846 !872 !873)
!880 = (!837 !846 !872 !873 !466)
!881 = (!837 !846 !872 !873)
!882 = (!837 !846 !872 !873)
!883 = (!837 !846 !872)
!884 = (!837 !846 !872)
!885 = (!837 !846 !872)
!886 = (!837 !846 !863)
!887 = (!837 !846 !863)
!888 = (!837 !846 !863)
!889 = span !789 35482 35486
!890 = (!837 !846 !889)
!891 = (!837 !846 !854)
!892 = span !789 35508 35512
!893 = (!837 !846 !892)
!894 = (!837 !846 !850)
!895 = span !789 35508 35522
!896 = fn_call_path_span !789 35519 35520
!897 = (!837 !846 !895 !896)
!898 = (!837 !846 !895 !896)
!899 = span !789 35521 35522
!900 = (!837 !846 !895 !896)
!901 = span !449 4214 4218
!902 = (!837 !846 !895 !896 !901)
!903 = (!837 !846 !895 !896)
!904 = span !449 4220 4225
!905 = (!837 !846 !895 !896 !904)
!906 = (!837 !846 !895 !896)
!907 = (!837 !846 !895 !896)
!908 = span !789 35482 35523
!909 = fn_call_path_span !789 35494 35507
!910 = (!837 !846 !908 !909)
!911 = (!837 !846 !908 !909)
!912 = (!837 !846 !908 !909)
!913 = span !789 7469 7473
!914 = (!837 !846 !908 !909 !913)
!915 = span !789 2461 2474
!916 = (!837 !846 !908 !909 !915)
!917 = span !789 416 428
!918 = (!837 !846 !908 !909 !917)
!919 = span !789 7498 7503
!920 = (!837 !846 !908 !909 !919)
!921 = span !789 7469 7504
!922 = fn_call_path_span !789 7482 7497
!923 = (!837 !846 !908 !909 !921 !922)
!924 = (!837 !846 !908 !909 !921 !922)
!925 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!926 = span !925 6730 6734
!927 = (!837 !846 !908 !909 !921 !922 !926)
!928 = (!837 !846 !908 !909 !921 !922)
!929 = span !925 6744 6750
!930 = (!837 !846 !908 !909 !921 !922 !929)
!931 = (!837 !846 !908 !909 !921 !922)
!932 = span !925 6721 6825
!933 = (!837 !846 !908 !909 !921 !922 !932)
!934 = span !925 6771 6789
!935 = span !789 7469 7516
!936 = fn_call_path_span !789 7505 7514
!937 = (!837 !846 !908 !909 !935 !936)
!938 = (!837 !846 !908 !909 !935 !936)
!939 = span !925 5299 5303
!940 = (!837 !846 !908 !909 !935 !936 !939)
!941 = (!837 !846 !908 !909 !935 !936)
!942 = span !925 5291 5364
!943 = (!837 !846 !908 !909 !935 !936 !942)
!944 = span !925 5323 5334
!945 = (!837 !846 !863)
!946 = (!837 !846 !863)
!947 = span !862 4035 4039
!948 = span !862 4029 4110
!949 = span !862 4054 4077
!950 = fn_call_path_span !862 4054 4077
!951 = (!949 !950)
!952 = (!949 !950 !595)
!953 = (!949 !950 !597)
!954 = span !862 4071 4076
!955 = span !862 4095 4099
!956 = (!837 !846)
!957 = span !862 4995 4999
!958 = (!837 !846 !957)
!959 = span !862 4989 5071
!960 = (!837 !846 !959)
!961 = (!837 !846 !957)
!962 = (!837 !846 !957)
!963 = span !862 5014 5033
!964 = fn_call_path_span !862 5014 5033
!965 = (!837 !846 !963 !964)
!966 = (!837 !846 !963 !964)
!967 = (!837 !846 !963 !964)
!968 = (!837 !846 !963 !964 !595)
!969 = (!837 !846 !963 !964)
!970 = (!837 !846 !963 !964 !597)
!971 = (!837 !846 !963 !964)
!972 = (!837 !846 !963 !964)
!973 = (!837 !846 !963)
!974 = (!837 !846 !957)
!975 = span !862 5025 5026
!976 = (!837 !846 !975)
!977 = span !862 5031 5032
!978 = (!837 !846 !977)
!979 = span !789 35646 35650
!980 = span !789 35688 35689
!981 = span !789 35696 35700
!982 = span !789 35680 35702
!983 = span !862 5051 5060
!984 = fn_call_path_span !862 5051 5057
!985 = (!837 !846 !983 !984)
!986 = span !862 5058 5059
!987 = (!837 !846 !983 !984)
!988 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!989 = span !988 766 770
!990 = (!837 !846 !983 !984 !989)
!991 = (!837 !846 !983 !984)
!992 = span !988 757 771
!993 = (!837 !846 !983 !984 !992)
!994 = span !789 35721 35722
!995 = span !789 35721 35731
!996 = fn_call_path_span !789 35723 35729
!997 = (!995 !996)
!998 = (!833 !92)
!999 = (!833 !94 !95)
!1000 = (!833 !94 !95 !97)
!1001 = (!833 !94 !95)
!1002 = (!833 !94 !95 !101)
!1003 = span !83 1670 1826
!1004 = span !83 1845 1881
!1005 = fn_call_path_span !83 1845 1879
!1006 = "/home/kebradalaonda/p/sway/sway-lib-std/src/contract_id.sw"
!1007 = span !1006 4725 4773
!1008 = (!1004 !1005 !1007)
!1009 = (!1004 !1005)
!1010 = span !83 1839 1882
!1011 = (!1010 !92)
!1012 = (!1010 !94 !95)
!1013 = (!1010 !94 !95 !97)
!1014 = (!1010 !94 !95)
!1015 = (!1010 !94 !95 !101)
!1016 = span !83 1831 1883
!1017 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ecr.sw"
!1018 = span !1017 282 466
!1019 = span !83 1917 1967
!1020 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ecr.<autogenerated>.sw"
!1021 = span !1020 184 188
!1022 = span !1020 178 447
!1023 = span !1020 191 321
!1024 = fn_call_path_span !1020 191 321
!1025 = (!1023 !1024)
!1026 = (!1023 !1024 !595)
!1027 = (!1023 !1024 !597)
!1028 = span !1020 259 261
!1029 = span !1020 272 296
!1030 = span !1020 323 443
!1031 = fn_call_path_span !1020 323 443
!1032 = (!1030 !1031)
!1033 = (!1030 !1031 !595)
!1034 = (!1030 !1031 !597)
!1035 = span !1020 386 388
!1036 = span !1020 399 418
!1037 = (!1019 !92)
!1038 = (!1019 !94 !95)
!1039 = (!1019 !94 !95 !97)
!1040 = (!1019 !94 !95)
!1041 = (!1019 !94 !95 !101)
!1042 = span !83 1909 1968
!1043 = "/home/kebradalaonda/p/sway/sway-lib-std/src/identity.sw"
!1044 = span !1043 503 574
!1045 = span !83 2020 2035
!1046 = fn_call_path_span !83 2020 2033
!1047 = (!1045 !1046 !563)
!1048 = (!1045 !1046)
!1049 = span !83 1981 2037
!1050 = "/home/kebradalaonda/p/sway/sway-lib-std/src/identity.<autogenerated>.sw"
!1051 = span !1050 178 182
!1052 = span !1050 172 446
!1053 = span !1050 185 311
!1054 = fn_call_path_span !1050 185 311
!1055 = (!1053 !1054)
!1056 = (!1053 !1054 !595)
!1057 = (!1053 !1054 !597)
!1058 = span !1050 203 208
!1059 = span !1050 239 241
!1060 = span !1050 254 264
!1061 = span !1050 272 277
!1062 = span !1050 239 278
!1063 = fn_call_path_span !1050 266 271
!1064 = (!1062 !1063)
!1065 = (!1062 !1063 !393)
!1066 = (!1062 !1063 !395)
!1067 = (!1062 !1063 !397)
!1068 = (!1062 !1063 !399)
!1069 = (!1062 !1063 !401)
!1070 = (!1062 !1063 !403)
!1071 = (!1062 !1063 !403)
!1072 = (!1062 !1063 !403)
!1073 = (!1062 !1063 !403)
!1074 = (!1062 !1063 !403)
!1075 = (!1062 !1063 !409)
!1076 = (!1062 !1063 !411)
!1077 = (!1062 !1063 !401)
!1078 = (!1062 !1063 !414)
!1079 = (!1062 !1063 !414)
!1080 = (!1062 !1063 !414)
!1081 = (!1062 !1063 !419)
!1082 = span !1050 239 287
!1083 = fn_call_path_span !1050 279 285
!1084 = (!1082 !1083)
!1085 = span !1050 313 442
!1086 = fn_call_path_span !1050 313 442
!1087 = (!1085 !1086)
!1088 = (!1085 !1086 !595)
!1089 = (!1085 !1086 !597)
!1090 = span !1050 334 339
!1091 = span !1050 370 372
!1092 = span !1050 385 395
!1093 = span !1050 403 408
!1094 = span !1050 370 409
!1095 = fn_call_path_span !1050 397 402
!1096 = (!1094 !1095)
!1097 = (!1094 !1095 !393)
!1098 = (!1094 !1095 !395)
!1099 = (!1094 !1095 !397)
!1100 = (!1094 !1095 !399)
!1101 = (!1094 !1095 !401)
!1102 = (!1094 !1095 !403)
!1103 = (!1094 !1095 !403)
!1104 = (!1094 !1095 !403)
!1105 = (!1094 !1095 !403)
!1106 = (!1094 !1095 !403)
!1107 = (!1094 !1095 !409)
!1108 = (!1094 !1095 !411)
!1109 = (!1094 !1095 !401)
!1110 = (!1094 !1095 !414)
!1111 = (!1094 !1095 !414)
!1112 = (!1094 !1095 !414)
!1113 = (!1094 !1095 !419)
!1114 = span !1050 370 418
!1115 = fn_call_path_span !1050 410 416
!1116 = (!1114 !1115)
!1117 = (!1049 !92)
!1118 = (!1049 !94 !95)
!1119 = (!1049 !94 !95 !97)
!1120 = (!1049 !94 !95)
!1121 = (!1049 !94 !95 !101)
!1122 = span !83 1973 2038
!1123 = "/home/kebradalaonda/p/sway/sway-lib-std/src/inputs.sw"
!1124 = span !1123 1950 2090
!1125 = span !83 2075 2106
!1126 = "/home/kebradalaonda/p/sway/sway-lib-std/src/inputs.<autogenerated>.sw"
!1127 = span !1126 175 179
!1128 = span !1126 169 459
!1129 = span !1126 182 267
!1130 = fn_call_path_span !1126 182 267
!1131 = (!1129 !1130)
!1132 = (!1129 !1130 !595)
!1133 = (!1129 !1130 !597)
!1134 = span !1126 223 225
!1135 = span !1126 236 242
!1136 = span !1126 269 362
!1137 = fn_call_path_span !1126 269 362
!1138 = (!1136 !1137)
!1139 = (!1136 !1137 !595)
!1140 = (!1136 !1137 !597)
!1141 = span !1126 314 316
!1142 = span !1126 327 337
!1143 = span !1126 364 455
!1144 = fn_call_path_span !1126 364 455
!1145 = (!1143 !1144)
!1146 = (!1143 !1144 !595)
!1147 = (!1143 !1144 !597)
!1148 = span !1126 408 410
!1149 = span !1126 421 430
!1150 = (!1125 !92)
!1151 = (!1125 !94 !95)
!1152 = (!1125 !94 !95 !97)
!1153 = (!1125 !94 !95)
!1154 = (!1125 !94 !95 !101)
!1155 = span !83 2067 2107
!1156 = span !83 2228 2258
!1157 = fn_call_path_span !83 2228 2256
!1158 = (!1156 !1157 !576)
!1159 = (!1156 !1157)
!1160 = span !83 2158 2281
!1161 = span !83 2207 2208
!1162 = span !83 2273 2274
!1163 = span !83 2152 2282
!1164 = "/home/kebradalaonda/p/sway/sway-lib-std/src/low_level_call.<autogenerated>.sw"
!1165 = span !1164 174 176
!1166 = span !1164 190 202
!1167 = span !1164 210 217
!1168 = span !1164 219 223
!1169 = "/home/kebradalaonda/p/sway/sway-lib-std/src/low_level_call.sw"
!1170 = span !1169 435 449
!1171 = span !1164 238 248
!1172 = span !1164 250 254
!1173 = span !1169 497 518
!1174 = span !1164 174 264
!1175 = fn_call_path_span !1164 232 237
!1176 = (!1174 !1175)
!1177 = (!1174 !1175 !632)
!1178 = (!1174 !1175 !634)
!1179 = (!1174 !1175 !636)
!1180 = (!1174 !1175 !638)
!1181 = (!1174 !1175 !640)
!1182 = (!1174 !1175 !642)
!1183 = (!1174 !1175 !642)
!1184 = (!1174 !1175 !642)
!1185 = (!1174 !1175 !642)
!1186 = (!1174 !1175 !642)
!1187 = (!1174 !1175 !648)
!1188 = (!1174 !1175 !640)
!1189 = (!1174 !1175 !651)
!1190 = (!1174 !1175 !653)
!1191 = (!1174 !1175 !640)
!1192 = (!1174 !1175 !656)
!1193 = (!1174 !1175 !656)
!1194 = (!1174 !1175 !656)
!1195 = (!1174 !1175 !656)
!1196 = (!1174 !1175 !656)
!1197 = (!1174 !1175 !662)
!1198 = (!1174 !1175 !664)
!1199 = (!1174 !1175 !640)
!1200 = (!1174 !1175 !752)
!1201 = (!1174 !1175 !752)
!1202 = (!1174 !1175 !752)
!1203 = (!1174 !1175 !757)
!1204 = span !1164 272 277
!1205 = span !1164 279 283
!1206 = span !1169 548 560
!1207 = span !1164 174 298
!1208 = fn_call_path_span !1164 290 296
!1209 = (!1207 !1208)
!1210 = (!1163 !92)
!1211 = (!1163 !94 !95)
!1212 = (!1163 !94 !95 !97)
!1213 = (!1163 !94 !95)
!1214 = (!1163 !94 !95 !101)
!1215 = span !83 2144 2283
!1216 = span !83 2328 2331
!1217 = span !83 2296 2333
!1218 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.<autogenerated>.sw"
!1219 = span !1218 200 204
!1220 = span !1218 194 418
!1221 = span !1218 207 293
!1222 = fn_call_path_span !1218 207 293
!1223 = (!1221 !1222)
!1224 = (!1221 !1222 !595)
!1225 = (!1221 !1222 !597)
!1226 = span !1218 249 251
!1227 = span !1218 262 268
!1228 = span !1218 295 414
!1229 = fn_call_path_span !1218 295 414
!1230 = (!1228 !1229)
!1231 = (!1228 !1229 !595)
!1232 = (!1228 !1229 !597)
!1233 = span !1218 308 313
!1234 = span !1218 344 346
!1235 = span !1218 359 367
!1236 = span !1218 375 380
!1237 = span !1218 344 390
!1238 = fn_call_path_span !1218 382 388
!1239 = (!1237 !1238)
!1240 = (!1217 !92)
!1241 = (!1217 !94 !95)
!1242 = (!1217 !94 !95 !97)
!1243 = (!1217 !94 !95)
!1244 = (!1217 !94 !95 !101)
!1245 = span !83 2288 2334
!1246 = "/home/kebradalaonda/p/sway/sway-lib-std/src/outputs.sw"
!1247 = span !1246 1265 1535
!1248 = span !83 2372 2405
!1249 = "/home/kebradalaonda/p/sway/sway-lib-std/src/outputs.<autogenerated>.sw"
!1250 = span !1249 176 180
!1251 = span !1249 170 667
!1252 = span !1249 183 269
!1253 = fn_call_path_span !1249 183 269
!1254 = (!1252 !1253)
!1255 = (!1252 !1253 !595)
!1256 = (!1252 !1253 !597)
!1257 = span !1249 225 227
!1258 = span !1249 238 244
!1259 = span !1249 271 365
!1260 = fn_call_path_span !1249 271 365
!1261 = (!1259 !1260)
!1262 = (!1259 !1260 !595)
!1263 = (!1259 !1260 !597)
!1264 = span !1249 317 319
!1265 = span !1249 330 340
!1266 = span !1249 367 457
!1267 = fn_call_path_span !1249 367 457
!1268 = (!1266 !1267)
!1269 = (!1266 !1267 !595)
!1270 = (!1266 !1267 !597)
!1271 = span !1249 411 413
!1272 = span !1249 424 432
!1273 = span !1249 459 553
!1274 = fn_call_path_span !1249 459 553
!1275 = (!1273 !1274)
!1276 = (!1273 !1274 !595)
!1277 = (!1273 !1274 !597)
!1278 = span !1249 505 507
!1279 = span !1249 518 528
!1280 = span !1249 555 663
!1281 = fn_call_path_span !1249 555 663
!1282 = (!1280 !1281)
!1283 = (!1280 !1281 !595)
!1284 = (!1280 !1281 !597)
!1285 = span !1249 608 610
!1286 = span !1249 621 638
!1287 = (!1248 !92)
!1288 = (!1248 !94 !95)
!1289 = (!1248 !94 !95 !97)
!1290 = (!1248 !94 !95)
!1291 = (!1248 !94 !95 !101)
!1292 = span !83 2364 2406
!1293 = span !83 2425 2428
!1294 = fn_call_path_span !83 2425 2426
!1295 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!1296 = span !1295 1831 1949
!1297 = (!1293 !1294 !1296)
!1298 = (!1293 !1294 !1296)
!1299 = (!1293 !1294 !1296)
!1300 = (!1293 !1294 !1296)
!1301 = span !83 120 124
!1302 = (!1293 !1294 !1296)
!1303 = span !83 2419 2429
!1304 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.<autogenerated>.sw"
!1305 = span !1304 216 220
!1306 = span !1304 210 464
!1307 = span !1304 223 340
!1308 = fn_call_path_span !1304 223 340
!1309 = (!1307 !1308)
!1310 = (!1307 !1308 !595)
!1311 = (!1307 !1308 !597)
!1312 = span !1304 234 239
!1313 = span !1304 270 272
!1314 = span !1304 285 293
!1315 = span !1304 301 306
!1316 = span !1304 270 316
!1317 = fn_call_path_span !1304 308 314
!1318 = (!1316 !1317)
!1319 = span !1304 342 460
!1320 = fn_call_path_span !1304 342 460
!1321 = (!1319 !1320)
!1322 = (!1319 !1320 !595)
!1323 = (!1319 !1320 !597)
!1324 = span !1304 354 359
!1325 = span !1304 390 392
!1326 = span !1304 405 413
!1327 = span !1304 421 426
!1328 = span !1304 390 436
!1329 = fn_call_path_span !1304 428 434
!1330 = (!1328 !1329)
!1331 = (!1303 !92)
!1332 = (!1303 !94 !95)
!1333 = (!1303 !94 !95 !97)
!1334 = (!1303 !94 !95)
!1335 = (!1303 !94 !95 !101)
!1336 = span !83 2411 2430
!1337 = span !83 2509 2516
!1338 = span !83 2473 2517
!1339 = fn_call_path_span !83 2473 2508
!1340 = (!1338 !1339)
!1341 = "/home/kebradalaonda/p/sway/sway-lib-std/src/string.sw"
!1342 = span !1341 3738 3739
!1343 = (!1338 !1339 !1342)
!1344 = span !1341 3723 3746
!1345 = (!1338 !1339 !1344)
!1346 = (!1338 !1339 !1344)
!1347 = span !1341 3769 3770
!1348 = (!1338 !1339 !1347)
!1349 = span !1341 3755 3780
!1350 = (!1338 !1339 !1349)
!1351 = (!1338 !1339 !1349)
!1352 = span !1341 3856 3863
!1353 = (!1338 !1339 !1352)
!1354 = span !1341 3865 3873
!1355 = (!1338 !1339 !1354)
!1356 = span !1341 3828 3874
!1357 = fn_call_path_span !1341 3828 3849
!1358 = (!1338 !1339 !1356 !1357)
!1359 = (!1338 !1339 !1356 !1357)
!1360 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!1361 = span !1360 2363 2366
!1362 = (!1338 !1339 !1356 !1357 !1361)
!1363 = span !1360 2368 2373
!1364 = (!1338 !1339 !1356 !1357 !1363)
!1365 = span !1360 2368 2392
!1366 = fn_call_path_span !1360 2374 2375
!1367 = (!1338 !1339 !1356 !1357 !1365 !1366)
!1368 = (!1338 !1339 !1356 !1357 !1365 !1366)
!1369 = (!1338 !1339 !1356 !1357 !1365 !1366)
!1370 = span !449 7076 7080
!1371 = (!1338 !1339 !1356 !1357 !1365 !1366 !1370)
!1372 = (!1338 !1339 !1356 !1357 !1365 !1366)
!1373 = span !449 7082 7087
!1374 = (!1338 !1339 !1356 !1357 !1365 !1366 !1373)
!1375 = (!1338 !1339 !1356 !1357 !1365 !1366)
!1376 = (!1338 !1339 !1356 !1357 !1365 !1366)
!1377 = span !1360 2362 2393
!1378 = (!1338 !1339 !1356 !1357 !1377)
!1379 = (!1338 !1339 !1356 !1357 !1377)
!1380 = (!1338 !1339 !1356 !1357 !1377)
!1381 = (!1338 !1339 !1356 !1357 !1377)
!1382 = span !1360 2351 2394
!1383 = fn_call_path_span !1360 2351 2361
!1384 = (!1338 !1339 !1356 !1357 !1382 !1383)
!1385 = span !1360 1257 1262
!1386 = (!1338 !1339 !1356 !1357 !1382 !1383 !1385)
!1387 = span !1341 3816 3875
!1388 = fn_call_path_span !1341 3816 3827
!1389 = (!1338 !1339 !1387 !1388)
!1390 = span !789 31734 31739
!1391 = (!1338 !1339 !1387 !1388 !1390)
!1392 = span !789 31719 31740
!1393 = fn_call_path_span !789 31719 31733
!1394 = (!1338 !1339 !1387 !1388 !1392 !1393)
!1395 = span !789 2146 2151
!1396 = (!1338 !1339 !1387 !1388 !1392 !1393 !1395)
!1397 = span !789 2136 2170
!1398 = (!1338 !1339 !1387 !1388 !1392 !1393 !1397)
!1399 = (!1338 !1339 !1387 !1388 !1392 !1393 !1397)
!1400 = span !789 2201 2204
!1401 = (!1338 !1339 !1387 !1388 !1392 !1393 !1400)
!1402 = span !789 2189 2205
!1403 = fn_call_path_span !789 2189 2200
!1404 = (!1338 !1339 !1387 !1388 !1392 !1393 !1402 !1403)
!1405 = (!1338 !1339 !1387 !1388 !1392 !1393 !1402 !1403 !798)
!1406 = (!1338 !1339 !1387 !1388 !1392 !1393 !1402 !1403)
!1407 = (!1338 !1339 !1387 !1388 !1392 !1393 !1402 !1403 !801)
!1408 = span !789 2179 2206
!1409 = (!1338 !1339 !1387 !1388 !1392 !1393 !1408)
!1410 = (!1338 !1339 !1387 !1388 !1392 !1393 !1408)
!1411 = span !789 2218 2221
!1412 = (!1338 !1339 !1387 !1388 !1392 !1393 !1411)
!1413 = span !789 2218 2225
!1414 = fn_call_path_span !789 2222 2223
!1415 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414)
!1416 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414)
!1417 = span !789 2224 2225
!1418 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414)
!1419 = span !449 21005 21009
!1420 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414 !1419)
!1421 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414)
!1422 = span !449 21011 21016
!1423 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414 !1422)
!1424 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414)
!1425 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413 !1414)
!1426 = (!1338 !1339 !1387 !1388 !1392 !1393 !1413)
!1427 = span !789 2240 2245
!1428 = (!1338 !1339 !1387 !1388 !1392 !1393 !1427)
!1429 = span !789 2240 2251
!1430 = fn_call_path_span !789 2246 2249
!1431 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430)
!1432 = span !1360 2922 2926
!1433 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430 !1432)
!1434 = span !1360 2911 2927
!1435 = fn_call_path_span !1360 2911 2921
!1436 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430 !1434 !1435)
!1437 = span !1360 1633 1638
!1438 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430 !1434 !1435 !1437)
!1439 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430)
!1440 = span !1360 2928 2929
!1441 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430 !1440)
!1442 = (!1338 !1339 !1387 !1388 !1392 !1393 !1429 !1430)
!1443 = span !789 2266 2269
!1444 = (!1338 !1339 !1387 !1388 !1392 !1393 !1443)
!1445 = span !789 2271 2274
!1446 = (!1338 !1339 !1387 !1388 !1392 !1393 !1445)
!1447 = span !789 2240 2275
!1448 = fn_call_path_span !789 2252 2259
!1449 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1450 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1451 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1452 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1453 = span !925 3413 3418
!1454 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1453)
!1455 = span !925 3413 3437
!1456 = fn_call_path_span !925 3419 3420
!1457 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456)
!1458 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456)
!1459 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456)
!1460 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456 !1370)
!1461 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456)
!1462 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456 !1373)
!1463 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456)
!1464 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1455 !1456)
!1465 = span !925 3403 3438
!1466 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1465)
!1467 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1465)
!1468 = span !925 3456 3459
!1469 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1468)
!1470 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1471 = span !925 3466 3470
!1472 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1471)
!1473 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1474 = span !925 3477 3480
!1475 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1474)
!1476 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448)
!1477 = span !925 3447 3522
!1478 = (!1338 !1339 !1387 !1388 !1392 !1393 !1447 !1448 !1477)
!1479 = span !925 3496 3511
!1480 = (!1338 !1339 !1387 !1388 !1392 !1393)
!1481 = span !789 2302 2305
!1482 = (!1338 !1339 !1387 !1388 !1392 !1393 !1481)
!1483 = span !789 2307 2310
!1484 = (!1338 !1339 !1387 !1388 !1392 !1393 !1483)
!1485 = span !789 2295 2312
!1486 = (!1338 !1339 !1387 !1388 !1392 !1393 !1485)
!1487 = (!1338 !1339 !1387 !1388 !1392 !1393)
!1488 = (!1338 !1339 !1387 !1388 !1392 !1393)
!1489 = span !789 31759 31764
!1490 = (!1338 !1339 !1387 !1388 !1489)
!1491 = span !789 31695 31793
!1492 = (!1338 !1339 !1387 !1388 !1491)
!1493 = (!1338 !1339 !1387 !1388)
!1494 = (!1338 !1339 !1387 !1388)
!1495 = (!1338 !1339 !1387 !1388 !1491)
!1496 = span !1341 3790 3886
!1497 = (!1338 !1339 !1496)
!1498 = span !83 2467 2518
!1499 = span !1341 9437 9441
!1500 = span !1341 682 694
!1501 = span !1341 9437 9453
!1502 = fn_call_path_span !1341 9448 9451
!1503 = (!1501 !1502)
!1504 = span !789 15609 15613
!1505 = (!1501 !1502 !1504)
!1506 = (!1501 !1502 !915)
!1507 = (!1501 !1502 !917)
!1508 = span !1341 9455 9459
!1509 = span !1341 9455 9471
!1510 = fn_call_path_span !1341 9466 9469
!1511 = (!1509 !1510)
!1512 = span !789 14201 14205
!1513 = (!1509 !1510 !1512)
!1514 = (!1509 !1510 !856)
!1515 = span !1341 9436 9472
!1516 = span !1341 9421 9505
!1517 = span !1341 9514 9515
!1518 = span !1341 9547 9548
!1519 = span !1341 9559 9560
!1520 = span !1341 9571 9572
!1521 = (!1498 !92)
!1522 = (!1498 !94 !95)
!1523 = (!1498 !94 !95 !97)
!1524 = (!1498 !94 !95)
!1525 = (!1498 !94 !95 !101)
!1526 = span !83 2459 2519
!1527 = "/home/kebradalaonda/p/sway/sway-lib-std/src/tx.sw"
!1528 = span !1527 1587 2482
!1529 = span !83 2532 2567
!1530 = "/home/kebradalaonda/p/sway/sway-lib-std/src/tx.<autogenerated>.sw"
!1531 = span !1530 181 185
!1532 = span !1530 175 766
!1533 = span !1530 188 283
!1534 = fn_call_path_span !1530 188 283
!1535 = (!1533 !1534)
!1536 = (!1533 !1534 !595)
!1537 = (!1533 !1534 !597)
!1538 = span !1530 237 239
!1539 = span !1530 250 258
!1540 = span !1530 285 380
!1541 = fn_call_path_span !1530 285 380
!1542 = (!1540 !1541)
!1543 = (!1540 !1541 !595)
!1544 = (!1540 !1541 !597)
!1545 = span !1530 334 336
!1546 = span !1530 347 355
!1547 = span !1530 382 473
!1548 = fn_call_path_span !1530 382 473
!1549 = (!1547 !1548)
!1550 = (!1547 !1548 !595)
!1551 = (!1547 !1548 !597)
!1552 = span !1530 429 431
!1553 = span !1530 442 448
!1554 = span !1530 475 572
!1555 = fn_call_path_span !1530 475 572
!1556 = (!1554 !1555)
!1557 = (!1554 !1555 !595)
!1558 = (!1554 !1555 !597)
!1559 = span !1530 525 527
!1560 = span !1530 538 547
!1561 = span !1530 574 669
!1562 = fn_call_path_span !1530 574 669
!1563 = (!1561 !1562)
!1564 = (!1561 !1562 !595)
!1565 = (!1561 !1562 !597)
!1566 = span !1530 623 625
!1567 = span !1530 636 644
!1568 = span !1530 671 762
!1569 = fn_call_path_span !1530 671 762
!1570 = (!1568 !1569)
!1571 = (!1568 !1569 !595)
!1572 = (!1568 !1569 !597)
!1573 = span !1530 718 720
!1574 = span !1530 731 737
!1575 = (!1529 !92)
!1576 = (!1529 !94 !95)
!1577 = (!1529 !94 !95 !97)
!1578 = (!1529 !94 !95)
!1579 = (!1529 !94 !95 !101)
!1580 = span !83 2524 2568
!1581 = span !83 2609 2632
!1582 = fn_call_path_span !83 2609 2630
!1583 = "/home/kebradalaonda/p/sway/sway-lib-std/src/u128.sw"
!1584 = span !1583 11697 11757
!1585 = (!1581 !1582 !1584)
!1586 = (!1581 !1582)
!1587 = span !1583 11723 11724
!1588 = (!1581 !1582 !1584)
!1589 = span !1583 11745 11746
!1590 = (!1581 !1582 !1584)
!1591 = span !83 2603 2633
!1592 = "/home/kebradalaonda/p/sway/sway-lib-std/src/u128.<autogenerated>.sw"
!1593 = span !1592 168 170
!1594 = span !1592 184 190
!1595 = span !1592 198 205
!1596 = span !1592 207 211
!1597 = span !1583 708 718
!1598 = span !1592 226 233
!1599 = span !1592 235 239
!1600 = span !1583 777 787
!1601 = span !1592 168 256
!1602 = fn_call_path_span !1592 248 254
!1603 = (!1601 !1602)
!1604 = (!1591 !92)
!1605 = (!1591 !94 !95)
!1606 = (!1591 !94 !95 !97)
!1607 = (!1591 !94 !95)
!1608 = (!1591 !94 !95 !101)
!1609 = span !83 2595 2634
!1610 = span !1583 2666 2848
!1611 = span !83 2647 2691
!1612 = span !1592 179 183
!1613 = span !1592 173 301
!1614 = span !1592 186 297
!1615 = fn_call_path_span !1592 186 297
!1616 = (!1614 !1615)
!1617 = (!1614 !1615 !595)
!1618 = (!1614 !1615 !597)
!1619 = span !1592 242 244
!1620 = span !1592 255 272
!1621 = (!1611 !92)
!1622 = (!1611 !94 !95)
!1623 = (!1611 !94 !95 !97)
!1624 = (!1611 !94 !95)
!1625 = (!1611 !94 !95 !101)
!1626 = span !83 2639 2692
!1627 = span !83 2721 2754
!1628 = span !83 2763 2764
!1629 = span !83 2770 2774
!1630 = span !83 2763 2775
!1631 = fn_call_path_span !83 2765 2769
!1632 = (!1630 !1631)
!1633 = span !83 2785 2786
!1634 = span !83 2792 2796
!1635 = span !83 2785 2797
!1636 = fn_call_path_span !83 2787 2791
!1637 = (!1635 !1636)
!1638 = span !83 2807 2808
!1639 = span !83 2814 2818
!1640 = span !83 2807 2819
!1641 = fn_call_path_span !83 2809 2813
!1642 = (!1640 !1641)
!1643 = span !83 2829 2830
!1644 = span !83 2705 2837
!1645 = (!1644 !92)
!1646 = (!1644 !94 !95)
!1647 = (!1644 !94 !95 !97)
!1648 = (!1644 !94 !95)
!1649 = (!1644 !94 !95 !101)
!1650 = span !83 2697 2838
!1651 = span !83 2867 2900
!1652 = span !83 2909 2910
!1653 = span !83 2916 2920
!1654 = span !83 2909 2921
!1655 = fn_call_path_span !83 2911 2915
!1656 = (!1654 !1655)
!1657 = span !83 2931 2932
!1658 = span !83 2938 2942
!1659 = span !83 2931 2943
!1660 = fn_call_path_span !83 2933 2937
!1661 = (!1659 !1660)
!1662 = span !83 2953 2954
!1663 = span !83 2960 2964
!1664 = span !83 2953 2965
!1665 = fn_call_path_span !83 2955 2959
!1666 = (!1664 !1665)
!1667 = span !83 2975 2976
!1668 = span !83 2975 2983
!1669 = fn_call_path_span !83 2977 2981
!1670 = (!1668 !1669)
!1671 = "/home/kebradalaonda/p/sway/sway-lib-std/src/vec.sw"
!1672 = span !1671 17879 17883
!1673 = (!1668 !1669 !1672)
!1674 = span !1671 17849 17916
!1675 = (!1668 !1669 !1674)
!1676 = span !1671 17904 17905
!1677 = (!1668 !1669 !1674)
!1678 = span !83 2851 2990
!1679 = "/home/kebradalaonda/p/sway/sway-lib-std/src/vec.<autogenerated>.sw"
!1680 = span !1679 195 197
!1681 = span !1679 211 220
!1682 = span !1679 228 236
!1683 = span !1679 238 242
!1684 = span !1671 21952 21966
!1685 = span !1679 195 250
!1686 = fn_call_path_span !1679 222 227
!1687 = (!1685 !1686)
!1688 = (!1685 !1686 !632)
!1689 = (!1685 !1686 !634)
!1690 = (!1685 !1686 !636)
!1691 = (!1685 !1686 !638)
!1692 = (!1685 !1686 !640)
!1693 = (!1685 !1686 !642)
!1694 = (!1685 !1686 !642)
!1695 = (!1685 !1686 !642)
!1696 = (!1685 !1686 !642)
!1697 = (!1685 !1686 !642)
!1698 = (!1685 !1686 !648)
!1699 = (!1685 !1686 !640)
!1700 = (!1685 !1686 !651)
!1701 = (!1685 !1686 !653)
!1702 = (!1685 !1686 !640)
!1703 = (!1685 !1686 !656)
!1704 = (!1685 !1686 !656)
!1705 = (!1685 !1686 !656)
!1706 = (!1685 !1686 !656)
!1707 = (!1685 !1686 !656)
!1708 = (!1685 !1686 !662)
!1709 = (!1685 !1686 !664)
!1710 = (!1685 !1686 !640)
!1711 = (!1685 !1686 !752)
!1712 = (!1685 !1686 !752)
!1713 = (!1685 !1686 !752)
!1714 = (!1685 !1686 !757)
!1715 = span !1679 258 265
!1716 = span !1679 267 271
!1717 = span !1671 21972 21982
!1718 = span !1679 195 288
!1719 = fn_call_path_span !1679 280 286
!1720 = (!1718 !1719)
!1721 = (!1678 !92)
!1722 = (!1678 !94 !95)
!1723 = (!1678 !94 !95 !97)
!1724 = (!1678 !94 !95)
!1725 = (!1678 !94 !95 !101)
!1726 = span !83 2843 2991
!1727 = span !83 3037 3042
!1728 = span !83 3031 3043
!1729 = (!1728 !92)
!1730 = (!1728 !94 !95)
!1731 = (!1728 !94 !95 !97)
!1732 = (!1728 !94 !95)
!1733 = (!1728 !94 !95 !101)
!1734 = span !89 923 1013
!1735 = fn_name_span !89 930 939
!1736 = (!1734 !1735)
!1737 = span !89 978 984
!1738 = span !89 986 987
!1739 = span !89 998 999
!1740 = span !89 964 1006
!1741 = fn_call_path_span !89 964 977
!1742 = (!1740 !1741)
!1743 = span !89 182 184
!1744 = span !89 191 194
!1745 = span !89 205 210
!1746 = span !89 165 308
!1747 = fn_name_span !89 168 181
!1748 = (!1746 !1747)
!1749 = span !89 241 243
!1750 = span !89 250 253
!1751 = span !89 262 267
!1752 = span !89 231 235
!1753 = span !89 223 306
!1754 = span !89 279 299
!1755 = span !344 90 219
!1756 = fn_name_span !344 97 103
!1757 = (!1755 !1756)
!1758 = span !344 153 157
!1759 = span !344 131 201
!1760 = span !344 210 213
!1761 = span !344 281 403
!1762 = fn_name_span !344 288 291
!1763 = (!1761 !1762)
!1764 = span !344 337 341
!1765 = span !344 315 385
!1766 = span !89 6762 6766
!1767 = span !89 6776 6777
!1768 = span !89 6755 6909
!1769 = fn_name_span !89 6758 6761
!1770 = (!1768 !1769)
!1771 = span !89 6803 6807
!1772 = span !89 6822 6823
!1773 = span !89 6834 6840
!1774 = span !89 6872 6873
!1775 = span !89 6884 6891
!1776 = span !89 6944 6948
!1777 = span !89 6958 6959
!1778 = span !89 6937 7005
!1779 = fn_name_span !89 6940 6943
!1780 = (!1778 !1779)
!1781 = span !89 6982 6983
!1782 = span !89 6993 6997
!1783 = span !89 6982 6998
!1784 = fn_call_path_span !89 6984 6992
!1785 = (!1783 !1784)
!1786 = span !89 1078 1083
!1787 = (!1783 !1784 !1786)
!1788 = span !89 1062 1084
!1789 = (!1783 !1784 !1788)
!1790 = span !89 1110 1120
!1791 = (!1783 !1784 !1790)
!1792 = span !89 1111 1115
!1793 = (!1783 !1784 !1790)
!1794 = span !89 1093 1121
!1795 = (!1783 !1784 !1794)
!1796 = span !89 1130 1145
!1797 = (!1783 !1784 !1796)
!1798 = span !89 1142 1144
!1799 = (!1783 !1784 !1796)
!1800 = span !89 1160 1164
!1801 = span !89 1192 1197
!1802 = (!1783 !1784 !1801)
!1803 = span !89 1192 1202
!1804 = fn_call_path_span !89 1198 1199
!1805 = (!1783 !1784 !1803 !1804)
!1806 = (!1783 !1784 !1803 !1804)
!1807 = span !89 1200 1202
!1808 = (!1783 !1784 !1803 !1804)
!1809 = span !449 11828 11832
!1810 = (!1783 !1784 !1803 !1804 !1809)
!1811 = (!1783 !1784 !1803 !1804)
!1812 = span !449 11834 11839
!1813 = (!1783 !1784 !1803 !1804 !1812)
!1814 = (!1783 !1784 !1803 !1804)
!1815 = (!1783 !1784 !1803 !1804)
!1816 = span !89 1206 1208
!1817 = span !89 1191 1208
!1818 = fn_call_path_span !89 1204 1205
!1819 = (!1783 !1784 !1817 !1818)
!1820 = span !89 1179 1208
!1821 = (!1783 !1784 !1820)
!1822 = span !89 1186 1187
!1823 = (!1783 !1784 !1822)
!1824 = (!1783 !1784 !1820)
!1825 = (!1783 !1784 !1820)
!1826 = span !89 1249 1254
!1827 = (!1783 !1784 !1826)
!1828 = span !89 1249 1259
!1829 = fn_call_path_span !89 1255 1256
!1830 = (!1783 !1784 !1828 !1829)
!1831 = (!1783 !1784 !1828 !1829)
!1832 = span !89 1257 1259
!1833 = (!1783 !1784 !1828 !1829)
!1834 = span !449 10442 10446
!1835 = (!1783 !1784 !1828 !1829 !1834)
!1836 = (!1783 !1784 !1828 !1829)
!1837 = span !449 10448 10453
!1838 = (!1783 !1784 !1828 !1829 !1837)
!1839 = (!1783 !1784 !1828 !1829)
!1840 = (!1783 !1784 !1828 !1829)
!1841 = span !89 1241 1259
!1842 = (!1783 !1784 !1841)
!1843 = (!1783 !1784 !1841)
!1844 = span !89 1277 1282
!1845 = (!1783 !1784 !1844)
!1846 = span !89 1277 1287
!1847 = fn_call_path_span !89 1283 1285
!1848 = (!1783 !1784 !1846 !1847)
!1849 = (!1783 !1784 !1846 !1847)
!1850 = span !89 1286 1287
!1851 = (!1783 !1784 !1846 !1847)
!1852 = span !449 17189 17193
!1853 = (!1783 !1784 !1846 !1847 !1852)
!1854 = (!1783 !1784 !1846 !1847)
!1855 = span !449 17195 17200
!1856 = (!1783 !1784 !1846 !1847 !1855)
!1857 = (!1783 !1784 !1846 !1847)
!1858 = (!1783 !1784 !1846 !1847)
!1859 = (!1783 !1784 !1846)
!1860 = span !89 1339 1340
!1861 = (!1783 !1784 !1860)
!1862 = span !89 1339 1345
!1863 = fn_call_path_span !89 1341 1343
!1864 = (!1783 !1784 !1862 !1863)
!1865 = (!1783 !1784 !1862 !1863)
!1866 = span !89 1344 1345
!1867 = (!1783 !1784 !1862 !1863)
!1868 = (!1783 !1784 !1862 !1863 !901)
!1869 = (!1783 !1784 !1862 !1863)
!1870 = (!1783 !1784 !1862 !1863 !904)
!1871 = (!1783 !1784 !1862 !1863)
!1872 = (!1783 !1784 !1862 !1863)
!1873 = (!1783 !1784 !1862)
!1874 = (!1783 !1784 !1862)
!1875 = span !89 1380 1386
!1876 = (!1783 !1784 !1875)
!1877 = span !89 1398 1404
!1878 = (!1783 !1784 !1877)
!1879 = span !89 1388 1405
!1880 = (!1783 !1784 !1879)
!1881 = span !89 1416 1417
!1882 = (!1783 !1784 !1881)
!1883 = span !89 1388 1418
!1884 = fn_call_path_span !89 1406 1409
!1885 = (!1783 !1784 !1883 !1884)
!1886 = (!1783 !1784 !1883 !1884)
!1887 = (!1783 !1784 !1883 !1884)
!1888 = span !925 1243 1247
!1889 = (!1783 !1784 !1883 !1884 !1888)
!1890 = (!1783 !1784 !1883 !1884)
!1891 = span !925 1249 1254
!1892 = (!1783 !1784 !1883 !1884 !1891)
!1893 = (!1783 !1784 !1883 !1884)
!1894 = (!1783 !1784 !1883 !1884)
!1895 = (!1783 !1784 !1883 !1884)
!1896 = span !89 1425 1426
!1897 = (!1783 !1784 !1896)
!1898 = span !89 1420 1426
!1899 = fn_call_path_span !89 1423 1424
!1900 = (!1783 !1784 !1898 !1899)
!1901 = span !89 1420 1422
!1902 = (!1783 !1784 !1898 !1899)
!1903 = (!1783 !1784 !1898 !1899)
!1904 = (!1783 !1784 !1898 !1899 !901)
!1905 = (!1783 !1784 !1898 !1899)
!1906 = (!1783 !1784 !1898 !1899 !904)
!1907 = (!1783 !1784 !1898 !1899)
!1908 = (!1783 !1784 !1898 !1899)
!1909 = span !89 1366 1427
!1910 = fn_call_path_span !89 1366 1379
!1911 = (!1783 !1784 !1909 !1910)
!1912 = span !449 2592 2596
!1913 = span !449 2598 2603
!1914 = span !449 2585 3089
!1915 = fn_name_span !449 2588 2591
!1916 = (!1914 !1915)
!1917 = span !449 2649 2664
!1918 = fn_call_path_span !449 2649 2658
!1919 = span !449 42768 42771
!1920 = (!1917 !1918 !1919)
!1921 = (!1917 !1918)
!1922 = span !449 42757 42799
!1923 = (!1917 !1918 !1922)
!1924 = span !449 2676 2681
!1925 = span !449 2666 2682
!1926 = fn_call_path_span !449 2666 2675
!1927 = (!1925 !1926)
!1928 = (!1925 !1926 !1922)
!1929 = span !449 2629 2684
!1930 = span !449 2711 2733
!1931 = fn_call_path_span !449 2711 2720
!1932 = (!1930 !1931)
!1933 = (!1930 !1931 !1919)
!1934 = (!1930 !1931 !1922)
!1935 = span !449 2694 2734
!1936 = span !449 2752 2759
!1937 = span !449 2761 2771
!1938 = span !449 2747 2772
!1939 = span !449 2790 2817
!1940 = fn_call_path_span !449 2790 2815
!1941 = "/home/kebradalaonda/p/sway/sway-lib-std/src/flags.sw"
!1942 = span !1941 6954 6961
!1943 = fn_call_path_span !1941 6954 6959
!1944 = "/home/kebradalaonda/p/sway/sway-lib-std/src/registers.sw"
!1945 = span !1944 6566 6592
!1946 = (!1939 !1940 !1942 !1943 !1945)
!1947 = span !1941 6963 6986
!1948 = (!1939 !1940 !1947)
!1949 = (!1939 !1940)
!1950 = span !1941 6989 6990
!1951 = span !449 2845 2846
!1952 = span !449 2836 2847
!1953 = span !449 2980 2987
!1954 = span !449 2995 3005
!1955 = span !449 3007 3008
!1956 = span !449 2964 3011
!1957 = fn_call_path_span !449 2964 2973
!1958 = (!1956 !1957)
!1959 = span !449 42849 42852
!1960 = (!1956 !1957 !1959)
!1961 = span !449 42838 42879
!1962 = (!1956 !1957 !1961)
!1963 = span !449 3065 3072
!1964 = span !449 3055 3073
!1965 = fn_call_path_span !449 3055 3064
!1966 = (!1964 !1965)
!1967 = (!1964 !1965 !1961)
!1968 = span !89 7041 7045
!1969 = span !89 7055 7056
!1970 = span !89 7034 7103
!1971 = fn_name_span !89 7037 7040
!1972 = (!1970 !1971)
!1973 = span !89 7079 7080
!1974 = span !89 7091 7095
!1975 = span !89 7079 7096
!1976 = fn_call_path_span !89 7081 7090
!1977 = (!1975 !1976)
!1978 = span !89 1501 1506
!1979 = (!1975 !1976 !1978)
!1980 = span !89 1485 1507
!1981 = (!1975 !1976 !1980)
!1982 = span !89 1533 1543
!1983 = (!1975 !1976 !1982)
!1984 = span !89 1534 1538
!1985 = (!1975 !1976 !1982)
!1986 = span !89 1516 1544
!1987 = (!1975 !1976 !1986)
!1988 = span !89 1553 1568
!1989 = (!1975 !1976 !1988)
!1990 = span !89 1565 1567
!1991 = (!1975 !1976 !1988)
!1992 = span !89 1583 1587
!1993 = span !89 1621 1626
!1994 = (!1975 !1976 !1993)
!1995 = span !89 1621 1631
!1996 = fn_call_path_span !89 1627 1628
!1997 = (!1975 !1976 !1995 !1996)
!1998 = (!1975 !1976 !1995 !1996)
!1999 = span !89 1629 1631
!2000 = (!1975 !1976 !1995 !1996)
!2001 = span !449 11731 11735
!2002 = (!1975 !1976 !1995 !1996 !2001)
!2003 = (!1975 !1976 !1995 !1996)
!2004 = span !449 11737 11742
!2005 = (!1975 !1976 !1995 !1996 !2004)
!2006 = (!1975 !1976 !1995 !1996)
!2007 = (!1975 !1976 !1995 !1996)
!2008 = span !89 1614 1670
!2009 = (!1975 !1976 !2008)
!2010 = span !89 1602 1671
!2011 = (!1975 !1976 !2010)
!2012 = (!1975 !1976 !2010)
!2013 = span !89 1696 1701
!2014 = (!1975 !1976 !2013)
!2015 = span !89 1704 1706
!2016 = span !89 1696 1706
!2017 = fn_call_path_span !89 1702 1703
!2018 = (!1975 !1976 !2016 !2017)
!2019 = span !89 1684 1706
!2020 = (!1975 !1976 !2019)
!2021 = span !89 1691 1692
!2022 = (!1975 !1976 !2021)
!2023 = (!1975 !1976 !2019)
!2024 = (!1975 !1976 !2019)
!2025 = span !89 1747 1752
!2026 = (!1975 !1976 !2025)
!2027 = span !89 1747 1757
!2028 = fn_call_path_span !89 1753 1754
!2029 = (!1975 !1976 !2027 !2028)
!2030 = (!1975 !1976 !2027 !2028)
!2031 = span !89 1755 1757
!2032 = (!1975 !1976 !2027 !2028)
!2033 = span !449 10342 10346
!2034 = (!1975 !1976 !2027 !2028 !2033)
!2035 = (!1975 !1976 !2027 !2028)
!2036 = span !449 10348 10353
!2037 = (!1975 !1976 !2027 !2028 !2036)
!2038 = (!1975 !1976 !2027 !2028)
!2039 = (!1975 !1976 !2027 !2028)
!2040 = span !89 1739 1757
!2041 = (!1975 !1976 !2040)
!2042 = (!1975 !1976 !2040)
!2043 = span !89 1775 1780
!2044 = (!1975 !1976 !2043)
!2045 = span !89 1775 1785
!2046 = fn_call_path_span !89 1781 1783
!2047 = (!1975 !1976 !2045 !2046)
!2048 = (!1975 !1976 !2045 !2046)
!2049 = span !89 1784 1785
!2050 = (!1975 !1976 !2045 !2046)
!2051 = span !449 17071 17075
!2052 = (!1975 !1976 !2045 !2046 !2051)
!2053 = (!1975 !1976 !2045 !2046)
!2054 = span !449 17077 17082
!2055 = (!1975 !1976 !2045 !2046 !2054)
!2056 = (!1975 !1976 !2045 !2046)
!2057 = (!1975 !1976 !2045 !2046)
!2058 = (!1975 !1976 !2045)
!2059 = span !89 1837 1838
!2060 = (!1975 !1976 !2059)
!2061 = span !89 1837 1843
!2062 = fn_call_path_span !89 1839 1841
!2063 = (!1975 !1976 !2061 !2062)
!2064 = (!1975 !1976 !2061 !2062)
!2065 = span !89 1842 1843
!2066 = (!1975 !1976 !2061 !2062)
!2067 = (!1975 !1976 !2061 !2062 !901)
!2068 = (!1975 !1976 !2061 !2062)
!2069 = (!1975 !1976 !2061 !2062 !904)
!2070 = (!1975 !1976 !2061 !2062)
!2071 = (!1975 !1976 !2061 !2062)
!2072 = (!1975 !1976 !2061)
!2073 = (!1975 !1976 !2061)
!2074 = span !89 1878 1884
!2075 = (!1975 !1976 !2074)
!2076 = span !89 1896 1902
!2077 = (!1975 !1976 !2076)
!2078 = span !89 1886 1903
!2079 = (!1975 !1976 !2078)
!2080 = span !89 1914 1915
!2081 = (!1975 !1976 !2080)
!2082 = span !89 1886 1916
!2083 = fn_call_path_span !89 1904 1907
!2084 = (!1975 !1976 !2082 !2083)
!2085 = (!1975 !1976 !2082 !2083)
!2086 = (!1975 !1976 !2082 !2083)
!2087 = (!1975 !1976 !2082 !2083 !1888)
!2088 = (!1975 !1976 !2082 !2083)
!2089 = (!1975 !1976 !2082 !2083 !1891)
!2090 = (!1975 !1976 !2082 !2083)
!2091 = (!1975 !1976 !2082 !2083)
!2092 = (!1975 !1976 !2082 !2083)
!2093 = span !89 1923 1924
!2094 = (!1975 !1976 !2093)
!2095 = span !89 1918 1924
!2096 = fn_call_path_span !89 1921 1922
!2097 = (!1975 !1976 !2095 !2096)
!2098 = span !89 1918 1920
!2099 = (!1975 !1976 !2095 !2096)
!2100 = (!1975 !1976 !2095 !2096)
!2101 = (!1975 !1976 !2095 !2096 !901)
!2102 = (!1975 !1976 !2095 !2096)
!2103 = (!1975 !1976 !2095 !2096 !904)
!2104 = (!1975 !1976 !2095 !2096)
!2105 = (!1975 !1976 !2095 !2096)
!2106 = span !89 1864 1925
!2107 = fn_call_path_span !89 1864 1877
!2108 = (!1975 !1976 !2106 !2107)
!2109 = span !89 7139 7143
!2110 = span !89 7153 7154
!2111 = span !89 7132 7201
!2112 = fn_name_span !89 7135 7138
!2113 = (!2111 !2112)
!2114 = span !89 7177 7178
!2115 = span !89 7189 7193
!2116 = span !89 7177 7194
!2117 = fn_call_path_span !89 7179 7188
!2118 = (!2116 !2117)
!2119 = span !89 1999 2004
!2120 = (!2116 !2117 !2119)
!2121 = span !89 1983 2005
!2122 = (!2116 !2117 !2121)
!2123 = span !89 2031 2041
!2124 = (!2116 !2117 !2123)
!2125 = span !89 2032 2036
!2126 = (!2116 !2117 !2123)
!2127 = span !89 2014 2042
!2128 = (!2116 !2117 !2127)
!2129 = span !89 2051 2066
!2130 = (!2116 !2117 !2129)
!2131 = span !89 2063 2065
!2132 = (!2116 !2117 !2129)
!2133 = span !89 2081 2085
!2134 = span !89 2119 2124
!2135 = (!2116 !2117 !2134)
!2136 = span !89 2119 2129
!2137 = fn_call_path_span !89 2125 2126
!2138 = (!2116 !2117 !2136 !2137)
!2139 = (!2116 !2117 !2136 !2137)
!2140 = span !89 2127 2129
!2141 = (!2116 !2117 !2136 !2137)
!2142 = span !449 11633 11637
!2143 = (!2116 !2117 !2136 !2137 !2142)
!2144 = (!2116 !2117 !2136 !2137)
!2145 = span !449 11639 11644
!2146 = (!2116 !2117 !2136 !2137 !2145)
!2147 = (!2116 !2117 !2136 !2137)
!2148 = (!2116 !2117 !2136 !2137)
!2149 = span !89 2112 2168
!2150 = (!2116 !2117 !2149)
!2151 = span !89 2100 2169
!2152 = (!2116 !2117 !2151)
!2153 = (!2116 !2117 !2151)
!2154 = span !89 2194 2199
!2155 = (!2116 !2117 !2154)
!2156 = span !89 2202 2204
!2157 = span !89 2194 2204
!2158 = fn_call_path_span !89 2200 2201
!2159 = (!2116 !2117 !2157 !2158)
!2160 = span !89 2182 2204
!2161 = (!2116 !2117 !2160)
!2162 = span !89 2189 2190
!2163 = (!2116 !2117 !2162)
!2164 = (!2116 !2117 !2160)
!2165 = (!2116 !2117 !2160)
!2166 = span !89 2245 2250
!2167 = (!2116 !2117 !2166)
!2168 = span !89 2245 2255
!2169 = fn_call_path_span !89 2251 2252
!2170 = (!2116 !2117 !2168 !2169)
!2171 = (!2116 !2117 !2168 !2169)
!2172 = span !89 2253 2255
!2173 = (!2116 !2117 !2168 !2169)
!2174 = span !449 10241 10245
!2175 = (!2116 !2117 !2168 !2169 !2174)
!2176 = (!2116 !2117 !2168 !2169)
!2177 = span !449 10247 10252
!2178 = (!2116 !2117 !2168 !2169 !2177)
!2179 = (!2116 !2117 !2168 !2169)
!2180 = (!2116 !2117 !2168 !2169)
!2181 = span !89 2237 2255
!2182 = (!2116 !2117 !2181)
!2183 = (!2116 !2117 !2181)
!2184 = span !89 2273 2278
!2185 = (!2116 !2117 !2184)
!2186 = span !89 2273 2283
!2187 = fn_call_path_span !89 2279 2281
!2188 = (!2116 !2117 !2186 !2187)
!2189 = (!2116 !2117 !2186 !2187)
!2190 = span !89 2282 2283
!2191 = (!2116 !2117 !2186 !2187)
!2192 = span !449 16952 16956
!2193 = (!2116 !2117 !2186 !2187 !2192)
!2194 = (!2116 !2117 !2186 !2187)
!2195 = span !449 16958 16963
!2196 = (!2116 !2117 !2186 !2187 !2195)
!2197 = (!2116 !2117 !2186 !2187)
!2198 = (!2116 !2117 !2186 !2187)
!2199 = (!2116 !2117 !2186)
!2200 = span !89 2335 2336
!2201 = (!2116 !2117 !2200)
!2202 = span !89 2335 2341
!2203 = fn_call_path_span !89 2337 2339
!2204 = (!2116 !2117 !2202 !2203)
!2205 = (!2116 !2117 !2202 !2203)
!2206 = span !89 2340 2341
!2207 = (!2116 !2117 !2202 !2203)
!2208 = (!2116 !2117 !2202 !2203 !901)
!2209 = (!2116 !2117 !2202 !2203)
!2210 = (!2116 !2117 !2202 !2203 !904)
!2211 = (!2116 !2117 !2202 !2203)
!2212 = (!2116 !2117 !2202 !2203)
!2213 = (!2116 !2117 !2202)
!2214 = (!2116 !2117 !2202)
!2215 = span !89 2376 2382
!2216 = (!2116 !2117 !2215)
!2217 = span !89 2394 2400
!2218 = (!2116 !2117 !2217)
!2219 = span !89 2384 2401
!2220 = (!2116 !2117 !2219)
!2221 = span !89 2412 2413
!2222 = (!2116 !2117 !2221)
!2223 = span !89 2384 2414
!2224 = fn_call_path_span !89 2402 2405
!2225 = (!2116 !2117 !2223 !2224)
!2226 = (!2116 !2117 !2223 !2224)
!2227 = (!2116 !2117 !2223 !2224)
!2228 = (!2116 !2117 !2223 !2224 !1888)
!2229 = (!2116 !2117 !2223 !2224)
!2230 = (!2116 !2117 !2223 !2224 !1891)
!2231 = (!2116 !2117 !2223 !2224)
!2232 = (!2116 !2117 !2223 !2224)
!2233 = (!2116 !2117 !2223 !2224)
!2234 = span !89 2421 2422
!2235 = (!2116 !2117 !2234)
!2236 = span !89 2416 2422
!2237 = fn_call_path_span !89 2419 2420
!2238 = (!2116 !2117 !2236 !2237)
!2239 = span !89 2416 2418
!2240 = (!2116 !2117 !2236 !2237)
!2241 = (!2116 !2117 !2236 !2237)
!2242 = (!2116 !2117 !2236 !2237 !901)
!2243 = (!2116 !2117 !2236 !2237)
!2244 = (!2116 !2117 !2236 !2237 !904)
!2245 = (!2116 !2117 !2236 !2237)
!2246 = (!2116 !2117 !2236 !2237)
!2247 = span !89 2362 2423
!2248 = fn_call_path_span !89 2362 2375
!2249 = (!2116 !2117 !2247 !2248)
!2250 = span !89 7237 7241
!2251 = span !89 7251 7252
!2252 = span !89 7230 7299
!2253 = fn_name_span !89 7233 7236
!2254 = (!2252 !2253)
!2255 = span !89 7275 7276
!2256 = span !89 7287 7291
!2257 = span !89 7275 7292
!2258 = fn_call_path_span !89 7277 7286
!2259 = (!2257 !2258)
!2260 = span !89 2497 2502
!2261 = (!2257 !2258 !2260)
!2262 = span !89 2481 2503
!2263 = (!2257 !2258 !2262)
!2264 = span !89 2529 2539
!2265 = (!2257 !2258 !2264)
!2266 = span !89 2530 2534
!2267 = (!2257 !2258 !2264)
!2268 = span !89 2512 2540
!2269 = (!2257 !2258 !2268)
!2270 = span !89 2549 2564
!2271 = (!2257 !2258 !2270)
!2272 = span !89 2561 2563
!2273 = (!2257 !2258 !2270)
!2274 = span !89 2579 2583
!2275 = span !89 2617 2622
!2276 = (!2257 !2258 !2275)
!2277 = span !89 2617 2627
!2278 = fn_call_path_span !89 2623 2624
!2279 = (!2257 !2258 !2277 !2278)
!2280 = (!2257 !2258 !2277 !2278)
!2281 = span !89 2625 2627
!2282 = (!2257 !2258 !2277 !2278)
!2283 = span !449 11535 11539
!2284 = (!2257 !2258 !2277 !2278 !2283)
!2285 = (!2257 !2258 !2277 !2278)
!2286 = span !449 11541 11546
!2287 = (!2257 !2258 !2277 !2278 !2286)
!2288 = (!2257 !2258 !2277 !2278)
!2289 = (!2257 !2258 !2277 !2278)
!2290 = span !89 2610 2666
!2291 = (!2257 !2258 !2290)
!2292 = span !89 2598 2667
!2293 = (!2257 !2258 !2292)
!2294 = (!2257 !2258 !2292)
!2295 = span !89 2692 2697
!2296 = (!2257 !2258 !2295)
!2297 = span !89 2700 2702
!2298 = span !89 2692 2702
!2299 = fn_call_path_span !89 2698 2699
!2300 = (!2257 !2258 !2298 !2299)
!2301 = span !89 2680 2702
!2302 = (!2257 !2258 !2301)
!2303 = span !89 2687 2688
!2304 = (!2257 !2258 !2303)
!2305 = (!2257 !2258 !2301)
!2306 = (!2257 !2258 !2301)
!2307 = span !89 2743 2748
!2308 = (!2257 !2258 !2307)
!2309 = span !89 2743 2753
!2310 = fn_call_path_span !89 2749 2750
!2311 = (!2257 !2258 !2309 !2310)
!2312 = (!2257 !2258 !2309 !2310)
!2313 = span !89 2751 2753
!2314 = (!2257 !2258 !2309 !2310)
!2315 = span !449 9973 9977
!2316 = (!2257 !2258 !2309 !2310 !2315)
!2317 = (!2257 !2258 !2309 !2310)
!2318 = span !449 9979 9984
!2319 = (!2257 !2258 !2309 !2310 !2318)
!2320 = (!2257 !2258 !2309 !2310)
!2321 = (!2257 !2258 !2309 !2310)
!2322 = span !89 2735 2753
!2323 = (!2257 !2258 !2322)
!2324 = (!2257 !2258 !2322)
!2325 = span !89 2771 2776
!2326 = (!2257 !2258 !2325)
!2327 = span !89 2771 2781
!2328 = fn_call_path_span !89 2777 2779
!2329 = (!2257 !2258 !2327 !2328)
!2330 = (!2257 !2258 !2327 !2328)
!2331 = span !89 2780 2781
!2332 = (!2257 !2258 !2327 !2328)
!2333 = (!2257 !2258 !2327 !2328 !595)
!2334 = (!2257 !2258 !2327 !2328)
!2335 = (!2257 !2258 !2327 !2328 !597)
!2336 = (!2257 !2258 !2327 !2328)
!2337 = (!2257 !2258 !2327 !2328)
!2338 = (!2257 !2258 !2327)
!2339 = span !89 2833 2834
!2340 = (!2257 !2258 !2339)
!2341 = span !89 2833 2839
!2342 = fn_call_path_span !89 2835 2837
!2343 = (!2257 !2258 !2341 !2342)
!2344 = (!2257 !2258 !2341 !2342)
!2345 = span !89 2838 2839
!2346 = (!2257 !2258 !2341 !2342)
!2347 = (!2257 !2258 !2341 !2342 !901)
!2348 = (!2257 !2258 !2341 !2342)
!2349 = (!2257 !2258 !2341 !2342 !904)
!2350 = (!2257 !2258 !2341 !2342)
!2351 = (!2257 !2258 !2341 !2342)
!2352 = (!2257 !2258 !2341)
!2353 = (!2257 !2258 !2341)
!2354 = span !89 2874 2880
!2355 = (!2257 !2258 !2354)
!2356 = span !89 2892 2898
!2357 = (!2257 !2258 !2356)
!2358 = span !89 2882 2899
!2359 = (!2257 !2258 !2358)
!2360 = span !89 2910 2911
!2361 = (!2257 !2258 !2360)
!2362 = span !89 2882 2912
!2363 = fn_call_path_span !89 2900 2903
!2364 = (!2257 !2258 !2362 !2363)
!2365 = (!2257 !2258 !2362 !2363)
!2366 = (!2257 !2258 !2362 !2363)
!2367 = (!2257 !2258 !2362 !2363 !1888)
!2368 = (!2257 !2258 !2362 !2363)
!2369 = (!2257 !2258 !2362 !2363 !1891)
!2370 = (!2257 !2258 !2362 !2363)
!2371 = (!2257 !2258 !2362 !2363)
!2372 = (!2257 !2258 !2362 !2363)
!2373 = span !89 2919 2920
!2374 = (!2257 !2258 !2373)
!2375 = span !89 2914 2920
!2376 = fn_call_path_span !89 2917 2918
!2377 = (!2257 !2258 !2375 !2376)
!2378 = span !89 2914 2916
!2379 = (!2257 !2258 !2375 !2376)
!2380 = (!2257 !2258 !2375 !2376)
!2381 = (!2257 !2258 !2375 !2376 !901)
!2382 = (!2257 !2258 !2375 !2376)
!2383 = (!2257 !2258 !2375 !2376 !904)
!2384 = (!2257 !2258 !2375 !2376)
!2385 = (!2257 !2258 !2375 !2376)
!2386 = span !89 2860 2921
!2387 = fn_call_path_span !89 2860 2873
!2388 = (!2257 !2258 !2386 !2387)
!2389 = span !89 7350 7351
!2390 = span !89 7329 7399
!2391 = fn_name_span !89 7332 7335
!2392 = (!2390 !2391)
!2393 = span !89 7374 7375
!2394 = span !89 7387 7391
!2395 = span !89 7374 7392
!2396 = fn_call_path_span !89 7376 7386
!2397 = (!2395 !2396)
!2398 = span !89 2997 3002
!2399 = (!2395 !2396 !2398)
!2400 = span !89 2981 3003
!2401 = (!2395 !2396 !2400)
!2402 = span !89 3131 3141
!2403 = (!2395 !2396 !2402)
!2404 = span !89 3132 3136
!2405 = (!2395 !2396 !2402)
!2406 = span !89 3114 3142
!2407 = (!2395 !2396 !2406)
!2408 = span !89 3151 3166
!2409 = (!2395 !2396 !2408)
!2410 = span !89 3163 3165
!2411 = (!2395 !2396 !2408)
!2412 = span !89 3181 3185
!2413 = span !89 3210 3215
!2414 = (!2395 !2396 !2413)
!2415 = span !89 3210 3220
!2416 = fn_call_path_span !89 3216 3217
!2417 = (!2395 !2396 !2415 !2416)
!2418 = (!2395 !2396 !2415 !2416)
!2419 = span !449 11437 11441
!2420 = (!2395 !2396 !2415 !2416 !2419)
!2421 = span !449 11443 11448
!2422 = (!2395 !2396 !2415 !2416 !2421)
!2423 = (!2395 !2396 !2415 !2416)
!2424 = (!2395 !2396 !2415 !2416)
!2425 = (!2395 !2396 !2415 !2416)
!2426 = span !89 3200 3221
!2427 = (!2395 !2396 !2426)
!2428 = span !89 3266 3269
!2429 = (!2395 !2396 !2428)
!2430 = span !89 3234 3329
!2431 = (!2395 !2396 !2430)
!2432 = (!2395 !2396 !2430)
!2433 = (!2395 !2396 !2430)
!2434 = (!2395 !2396 !2430)
!2435 = (!2395 !2396 !2430)
!2436 = (!2395 !2396 !2430)
!2437 = (!2395 !2396 !2430)
!2438 = (!2395 !2396 !2430)
!2439 = (!2395 !2396 !2430)
!2440 = (!2395 !2396 !2430)
!2441 = (!2395 !2396 !2430)
!2442 = (!2395 !2396 !2430)
!2443 = (!2395 !2396 !2430)
!2444 = (!2395 !2396 !2430)
!2445 = (!2395 !2396 !2430)
!2446 = span !89 3361 3366
!2447 = (!2395 !2396 !2446)
!2448 = span !89 3361 3371
!2449 = fn_call_path_span !89 3367 3368
!2450 = (!2395 !2396 !2448 !2449)
!2451 = (!2395 !2396 !2448 !2449)
!2452 = span !89 3369 3371
!2453 = (!2395 !2396 !2448 !2449)
!2454 = (!2395 !2396 !2448 !2449 !2283)
!2455 = (!2395 !2396 !2448 !2449)
!2456 = (!2395 !2396 !2448 !2449 !2286)
!2457 = (!2395 !2396 !2448 !2449)
!2458 = (!2395 !2396 !2448 !2449)
!2459 = span !89 3354 3410
!2460 = (!2395 !2396 !2459)
!2461 = span !89 3342 3411
!2462 = (!2395 !2396 !2461)
!2463 = (!2395 !2396 !2461)
!2464 = span !89 3436 3441
!2465 = (!2395 !2396 !2464)
!2466 = span !89 3444 3446
!2467 = span !89 3436 3446
!2468 = fn_call_path_span !89 3442 3443
!2469 = (!2395 !2396 !2467 !2468)
!2470 = span !89 3424 3446
!2471 = (!2395 !2396 !2470)
!2472 = span !89 3431 3432
!2473 = (!2395 !2396 !2472)
!2474 = (!2395 !2396 !2470)
!2475 = (!2395 !2396 !2470)
!2476 = span !89 3487 3492
!2477 = (!2395 !2396 !2476)
!2478 = span !89 3487 3497
!2479 = fn_call_path_span !89 3493 3494
!2480 = (!2395 !2396 !2478 !2479)
!2481 = (!2395 !2396 !2478 !2479)
!2482 = span !449 9872 9876
!2483 = (!2395 !2396 !2478 !2479 !2482)
!2484 = span !449 9878 9883
!2485 = (!2395 !2396 !2478 !2479 !2484)
!2486 = (!2395 !2396 !2478 !2479)
!2487 = (!2395 !2396 !2478 !2479)
!2488 = (!2395 !2396 !2478 !2479)
!2489 = span !89 3479 3497
!2490 = (!2395 !2396 !2489)
!2491 = span !89 3515 3520
!2492 = (!2395 !2396 !2491)
!2493 = span !89 3515 3525
!2494 = fn_call_path_span !89 3521 3523
!2495 = (!2395 !2396 !2493 !2494)
!2496 = (!2395 !2396 !2493 !2494)
!2497 = span !449 16592 16596
!2498 = (!2395 !2396 !2493 !2494 !2497)
!2499 = span !449 16598 16603
!2500 = (!2395 !2396 !2493 !2494 !2499)
!2501 = (!2395 !2396 !2493 !2494)
!2502 = (!2395 !2396 !2493 !2494)
!2503 = (!2395 !2396 !2493 !2494)
!2504 = (!2395 !2396 !2493)
!2505 = span !89 3577 3578
!2506 = (!2395 !2396 !2505)
!2507 = span !89 3577 3583
!2508 = fn_call_path_span !89 3579 3581
!2509 = (!2395 !2396 !2507 !2508)
!2510 = (!2395 !2396 !2507 !2508)
!2511 = span !89 3582 3583
!2512 = (!2395 !2396 !2507 !2508)
!2513 = (!2395 !2396 !2507 !2508 !901)
!2514 = (!2395 !2396 !2507 !2508)
!2515 = (!2395 !2396 !2507 !2508 !904)
!2516 = (!2395 !2396 !2507 !2508)
!2517 = (!2395 !2396 !2507 !2508)
!2518 = (!2395 !2396 !2507)
!2519 = (!2395 !2396 !2507)
!2520 = span !89 3618 3624
!2521 = (!2395 !2396 !2520)
!2522 = span !89 3636 3642
!2523 = (!2395 !2396 !2522)
!2524 = span !89 3626 3643
!2525 = (!2395 !2396 !2524)
!2526 = span !89 3654 3655
!2527 = (!2395 !2396 !2526)
!2528 = span !89 3626 3656
!2529 = fn_call_path_span !89 3644 3647
!2530 = (!2395 !2396 !2528 !2529)
!2531 = (!2395 !2396 !2528 !2529)
!2532 = (!2395 !2396 !2528 !2529)
!2533 = (!2395 !2396 !2528 !2529 !1888)
!2534 = (!2395 !2396 !2528 !2529)
!2535 = (!2395 !2396 !2528 !2529 !1891)
!2536 = (!2395 !2396 !2528 !2529)
!2537 = (!2395 !2396 !2528 !2529)
!2538 = (!2395 !2396 !2528 !2529)
!2539 = span !89 3663 3664
!2540 = (!2395 !2396 !2539)
!2541 = span !89 3658 3664
!2542 = fn_call_path_span !89 3661 3662
!2543 = (!2395 !2396 !2541 !2542)
!2544 = span !89 3658 3660
!2545 = (!2395 !2396 !2541 !2542)
!2546 = (!2395 !2396 !2541 !2542)
!2547 = (!2395 !2396 !2541 !2542 !901)
!2548 = (!2395 !2396 !2541 !2542)
!2549 = (!2395 !2396 !2541 !2542 !904)
!2550 = (!2395 !2396 !2541 !2542)
!2551 = (!2395 !2396 !2541 !2542)
!2552 = span !89 3604 3665
!2553 = fn_call_path_span !89 3604 3617
!2554 = (!2395 !2396 !2552 !2553)
!2555 = span !89 7450 7451
!2556 = span !89 7429 7552
!2557 = fn_name_span !89 7432 7435
!2558 = (!2556 !2557)
!2559 = span !89 7501 7505
!2560 = span !89 7474 7545
!2561 = fn_call_path_span !89 7476 7493
!2562 = (!2560 !2561)
!2563 = span !89 7540 7544
!2564 = span !89 3760 3769
!2565 = (!2560 !2561 !2564)
!2566 = span !89 3807 3811
!2567 = (!2560 !2561 !2564)
!2568 = span !89 3864 3868
!2569 = span !89 3749 3879
!2570 = (!2560 !2561 !2569)
!2571 = (!2560 !2561 !2569)
!2572 = span !89 3905 3910
!2573 = (!2560 !2561 !2572)
!2574 = span !89 3889 3911
!2575 = (!2560 !2561 !2574)
!2576 = span !89 4015 4025
!2577 = (!2560 !2561 !2576)
!2578 = span !89 4016 4020
!2579 = (!2560 !2561 !2576)
!2580 = span !89 3998 4026
!2581 = (!2560 !2561 !2580)
!2582 = span !89 4035 4049
!2583 = (!2560 !2561 !2582)
!2584 = span !89 4042 4043
!2585 = (!2560 !2561 !2582)
!2586 = span !89 4047 4049
!2587 = (!2560 !2561 !2582)
!2588 = span !89 4073 4088
!2589 = (!2560 !2561 !2588)
!2590 = span !89 4080 4081
!2591 = (!2560 !2561 !2588)
!2592 = span !89 4085 4088
!2593 = (!2560 !2561 !2588)
!2594 = span !89 4109 4124
!2595 = (!2560 !2561 !2594)
!2596 = span !89 4121 4123
!2597 = (!2560 !2561 !2594)
!2598 = span !89 4139 4143
!2599 = span !89 4168 4173
!2600 = (!2560 !2561 !2599)
!2601 = span !89 4168 4178
!2602 = fn_call_path_span !89 4174 4175
!2603 = (!2560 !2561 !2601 !2602)
!2604 = (!2560 !2561 !2601 !2602)
!2605 = (!2560 !2561 !2601 !2602)
!2606 = (!2560 !2561 !2601 !2602)
!2607 = span !89 4158 4179
!2608 = (!2560 !2561 !2607)
!2609 = span !89 4224 4227
!2610 = (!2560 !2561 !2609)
!2611 = span !89 4192 4287
!2612 = (!2560 !2561 !2611)
!2613 = (!2560 !2561 !2611)
!2614 = span !89 4319 4329
!2615 = fn_call_path_span !89 4325 4326
!2616 = (!2560 !2561 !2614 !2615)
!2617 = span !89 4327 4329
!2618 = (!2560 !2561 !2614 !2615)
!2619 = (!2560 !2561 !2614 !2615)
!2620 = (!2560 !2561 !2614 !2615 !2286)
!2621 = (!2560 !2561 !2614 !2615)
!2622 = (!2560 !2561 !2614 !2615)
!2623 = span !89 4312 4368
!2624 = (!2560 !2561 !2623)
!2625 = span !89 4300 4369
!2626 = (!2560 !2561 !2625)
!2627 = (!2560 !2561 !2625)
!2628 = span !89 4386 4396
!2629 = fn_call_path_span !89 4392 4393
!2630 = (!2560 !2561 !2628 !2629)
!2631 = span !89 4394 4396
!2632 = (!2560 !2561 !2628 !2629)
!2633 = span !449 21567 21571
!2634 = (!2560 !2561 !2628 !2629 !2633)
!2635 = (!2560 !2561 !2628 !2629)
!2636 = span !449 21573 21578
!2637 = (!2560 !2561 !2628 !2629 !2636)
!2638 = (!2560 !2561 !2628 !2629)
!2639 = (!2560 !2561 !2628 !2629)
!2640 = (!2560 !2561 !2628)
!2641 = span !89 4427 4432
!2642 = (!2560 !2561 !2641)
!2643 = span !89 4435 4437
!2644 = span !89 4427 4437
!2645 = fn_call_path_span !89 4433 4434
!2646 = (!2560 !2561 !2644 !2645)
!2647 = span !89 4415 4437
!2648 = (!2560 !2561 !2647)
!2649 = span !89 4422 4423
!2650 = (!2560 !2561 !2649)
!2651 = (!2560 !2561 !2647)
!2652 = (!2560 !2561 !2647)
!2653 = span !89 4508 4513
!2654 = (!2560 !2561 !2653)
!2655 = span !89 4508 4518
!2656 = fn_call_path_span !89 4514 4515
!2657 = (!2560 !2561 !2655 !2656)
!2658 = (!2560 !2561 !2655 !2656)
!2659 = span !89 4516 4518
!2660 = (!2560 !2561 !2655 !2656)
!2661 = span !449 5508 5523
!2662 = fn_call_path_span !449 5508 5517
!2663 = (!2560 !2561 !2655 !2656 !2661 !2662)
!2664 = (!2560 !2561 !2655 !2656 !2661 !2662 !1922)
!2665 = span !449 5535 5540
!2666 = (!2560 !2561 !2655 !2656 !2665)
!2667 = span !449 5525 5541
!2668 = fn_call_path_span !449 5525 5534
!2669 = (!2560 !2561 !2655 !2656 !2667 !2668)
!2670 = (!2560 !2561 !2655 !2656 !2667 !2668)
!2671 = (!2560 !2561 !2655 !2656 !2667 !2668 !1922)
!2672 = (!2560 !2561 !2655 !2656)
!2673 = span !449 5488 5543
!2674 = (!2560 !2561 !2655 !2656 !2673)
!2675 = (!2560 !2561 !2655 !2656 !2673)
!2676 = span !449 5570 5592
!2677 = fn_call_path_span !449 5570 5579
!2678 = (!2560 !2561 !2655 !2656 !2676 !2677)
!2679 = (!2560 !2561 !2655 !2656 !2676 !2677)
!2680 = (!2560 !2561 !2655 !2656 !2676 !2677 !1919)
!2681 = (!2560 !2561 !2655 !2656 !2676 !2677)
!2682 = (!2560 !2561 !2655 !2656 !2676 !2677 !1922)
!2683 = span !449 5553 5593
!2684 = (!2560 !2561 !2655 !2656 !2683)
!2685 = (!2560 !2561 !2655 !2656 !2683)
!2686 = span !449 5611 5618
!2687 = (!2560 !2561 !2655 !2656 !2686)
!2688 = (!2560 !2561 !2655 !2656)
!2689 = span !449 5620 5630
!2690 = (!2560 !2561 !2655 !2656 !2689)
!2691 = (!2560 !2561 !2655 !2656)
!2692 = (!2560 !2561 !2655 !2656)
!2693 = span !449 5606 5631
!2694 = (!2560 !2561 !2655 !2656 !2693)
!2695 = span !449 5649 5676
!2696 = fn_call_path_span !449 5649 5674
!2697 = (!2560 !2561 !2655 !2656 !2695 !2696 !1942 !1943 !1945)
!2698 = (!2560 !2561 !2655 !2656 !2695 !2696 !1947)
!2699 = (!2560 !2561 !2655 !2656 !2695 !2696)
!2700 = (!2560 !2561 !2655 !2656 !2695 !2696)
!2701 = (!2560 !2561 !2655 !2656 !2695 !2696)
!2702 = (!2560 !2561 !2655 !2656 !2695)
!2703 = span !449 5704 5705
!2704 = span !449 5695 5706
!2705 = (!2560 !2561 !2655 !2656 !2704)
!2706 = span !449 5839 5846
!2707 = (!2560 !2561 !2655 !2656 !2706)
!2708 = (!2560 !2561 !2655 !2656)
!2709 = span !449 5854 5864
!2710 = (!2560 !2561 !2655 !2656 !2709)
!2711 = (!2560 !2561 !2655 !2656)
!2712 = span !449 5866 5867
!2713 = (!2560 !2561 !2655 !2656)
!2714 = (!2560 !2561 !2655 !2656)
!2715 = span !449 5823 5870
!2716 = fn_call_path_span !449 5823 5832
!2717 = (!2560 !2561 !2655 !2656 !2715 !2716)
!2718 = (!2560 !2561 !2655 !2656 !2715 !2716)
!2719 = (!2560 !2561 !2655 !2656 !2715 !2716 !1959)
!2720 = (!2560 !2561 !2655 !2656 !2715 !2716)
!2721 = (!2560 !2561 !2655 !2656 !2715 !2716 !1961)
!2722 = (!2560 !2561 !2655 !2656)
!2723 = span !449 5924 5931
!2724 = (!2560 !2561 !2655 !2656 !2723)
!2725 = span !449 5914 5932
!2726 = fn_call_path_span !449 5914 5923
!2727 = (!2560 !2561 !2655 !2656 !2725 !2726)
!2728 = (!2560 !2561 !2655 !2656 !2725 !2726)
!2729 = (!2560 !2561 !2655 !2656 !2725 !2726 !1961)
!2730 = (!2560 !2561 !2655 !2656)
!2731 = span !89 4522 4523
!2732 = (!2560 !2561 !2731)
!2733 = span !89 4507 4523
!2734 = fn_call_path_span !89 4520 4521
!2735 = (!2560 !2561 !2733 !2734)
!2736 = span !89 4495 4523
!2737 = (!2560 !2561 !2736)
!2738 = span !89 4502 4503
!2739 = (!2560 !2561 !2738)
!2740 = (!2560 !2561 !2736)
!2741 = (!2560 !2561 !2736)
!2742 = span !89 4559 4564
!2743 = (!2560 !2561 !2742)
!2744 = span !89 4559 4569
!2745 = fn_call_path_span !89 4565 4566
!2746 = (!2560 !2561 !2744 !2745)
!2747 = (!2560 !2561 !2744 !2745)
!2748 = (!2560 !2561 !2744 !2745)
!2749 = (!2560 !2561 !2744 !2745)
!2750 = span !89 4551 4569
!2751 = (!2560 !2561 !2750)
!2752 = span !89 4587 4597
!2753 = fn_call_path_span !89 4593 4595
!2754 = (!2560 !2561 !2752 !2753)
!2755 = (!2560 !2561 !2752 !2753)
!2756 = (!2560 !2561 !2752 !2753)
!2757 = (!2560 !2561 !2752 !2753)
!2758 = (!2560 !2561 !2752)
!2759 = span !89 4649 4650
!2760 = (!2560 !2561 !2759)
!2761 = span !89 4649 4655
!2762 = fn_call_path_span !89 4651 4653
!2763 = (!2560 !2561 !2761 !2762)
!2764 = (!2560 !2561 !2761 !2762)
!2765 = span !89 4654 4655
!2766 = (!2560 !2561 !2761 !2762)
!2767 = (!2560 !2561 !2761 !2762)
!2768 = (!2560 !2561 !2761 !2762 !904)
!2769 = (!2560 !2561 !2761 !2762)
!2770 = (!2560 !2561 !2761 !2762)
!2771 = (!2560 !2561 !2761)
!2772 = (!2560 !2561 !2761)
!2773 = span !89 4690 4696
!2774 = (!2560 !2561 !2773)
!2775 = span !89 4708 4714
!2776 = (!2560 !2561 !2775)
!2777 = span !89 4698 4715
!2778 = (!2560 !2561 !2777)
!2779 = span !89 4717 4719
!2780 = span !89 4676 4720
!2781 = fn_call_path_span !89 4676 4689
!2782 = (!2560 !2561 !2780 !2781)
!2783 = span !89 7762 7763
!2784 = span !89 7741 7876
!2785 = fn_name_span !89 7744 7747
!2786 = (!2784 !2785)
!2787 = span !89 7786 7787
!2788 = span !89 7819 7820
!2789 = span !89 7846 7847
!2790 = span !89 693 805
!2791 = fn_name_span !89 700 719
!2792 = (!2790 !2791)
!2793 = span !89 744 750
!2794 = span !89 745 749
!2795 = span !89 736 751
!2796 = span !89 774 780
!2797 = span !89 792 793
!2798 = span !89 782 794
!2799 = span !89 796 797
!2800 = span !89 760 798
!2801 = fn_call_path_span !89 760 773
!2802 = (!2800 !2801)
!2803 = span !89 5105 5347
!2804 = fn_name_span !89 5112 5123
!2805 = (!2803 !2804)
!2806 = span !89 5168 5182
!2807 = fn_call_path_span !89 5179 5180
!2808 = (!2806 !2807)
!2809 = span !89 5181 5182
!2810 = (!2806 !2807 !1419)
!2811 = (!2806 !2807 !1422)
!2812 = span !89 5197 5201
!2813 = span !89 5212 5216
!2814 = span !89 5238 5242
!2815 = span !89 5253 5256
!2816 = span !89 5295 5299
!2817 = span !89 5267 5341
!2818 = span !89 5325 5330
!2819 = span !89 6354 6358
!2820 = span !89 6360 6365
!2821 = span !89 6330 6567
!2822 = fn_name_span !89 6337 6342
!2823 = (!2821 !2822)
!2824 = span !89 6496 6513
!2825 = fn_call_path_span !89 6502 6505
!2826 = (!2824 !2825)
!2827 = span !89 6280 6284
!2828 = span !89 6258 6324
!2829 = fn_name_span !89 6265 6271
!2830 = (!2828 !2829)
!2831 = span !89 6296 6300
!2832 = span !89 6313 6316
!2833 = span !89 4943 5099
!2834 = fn_name_span !89 4950 4960
!2835 = (!2833 !2834)
!2836 = span !89 5005 5008
!2837 = span !89 5019 5093
!2838 = span !89 5077 5082
!2839 = span !89 6017 6021
!2840 = span !89 6023 6028
!2841 = span !89 5993 6232
!2842 = fn_name_span !89 6000 6005
!2843 = (!2841 !2842)
!2844 = span !89 6160 6177
!2845 = fn_call_path_span !89 6166 6169
!2846 = (!2844 !2845)
!2847 = span !89 5943 5947
!2848 = span !89 5921 5987
!2849 = fn_name_span !89 5928 5934
!2850 = (!2848 !2849)
!2851 = span !89 5959 5963
!2852 = span !89 5976 5979
!2853 = span !0 132 134
!2854 = span !0 111 209
!2855 = fn_name_span !0 114 117
!2856 = (!2854 !2855)
!2857 = span !0 165 167
!2858 = span !0 181 184
!2859 = span !0 165 194
!2860 = fn_call_path_span !0 186 192
!2861 = (!2859 !2860)
!2862 = span !89 5460 5464
!2863 = span !89 5438 5578
!2864 = fn_name_span !89 5445 5451
!2865 = (!2863 !2864)
!2866 = span !89 5479 5483
!2867 = span !89 5479 5494
!2868 = span !89 5509 5513
!2869 = span !89 5526 5529
!2870 = span !89 5550 5554
!2871 = span !89 5567 5570
!2872 = span !89 4733 4937
!2873 = fn_name_span !89 4740 4752
!2874 = (!2872 !2873)
!2875 = span !89 4840 4845
!2876 = span !89 4856 4931
!2877 = span !89 4915 4920
!2878 = span !0 111 389
!2879 = (!2878 !2855)
!2880 = span !0 165 374
!2881 = span !0 178 259
!2882 = fn_call_path_span !0 178 259
!2883 = (!2881 !2882)
!2884 = span !0 171 175
!2885 = (!2881 !2882 !597)
!2886 = span !0 215 217
!2887 = span !0 228 234
!2888 = span !0 261 370
!2889 = fn_call_path_span !0 261 370
!2890 = (!2888 !2889)
!2891 = (!2888 !2889 !597)
!2892 = span !0 269 274
!2893 = span !0 305 307
!2894 = span !0 320 323
!2895 = span !0 305 337
!2896 = fn_call_path_span !0 325 330
!2897 = (!2895 !2896)
!2898 = (!2895 !2896 !393)
!2899 = (!2895 !2896 !395)
!2900 = (!2895 !2896 !397)
!2901 = (!2895 !2896 !399)
!2902 = (!2895 !2896 !401)
!2903 = (!2895 !2896 !403)
!2904 = (!2895 !2896 !403)
!2905 = (!2895 !2896 !403)
!2906 = (!2895 !2896 !403)
!2907 = (!2895 !2896 !403)
!2908 = (!2895 !2896 !409)
!2909 = (!2895 !2896 !411)
!2910 = (!2895 !2896 !401)
!2911 = (!2895 !2896 !414)
!2912 = (!2895 !2896 !414)
!2913 = (!2895 !2896 !414)
!2914 = (!2895 !2896 !419)
!2915 = span !0 305 346
!2916 = fn_call_path_span !0 338 344
!2917 = (!2915 !2916)
!2918 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.<autogenerated>.sw"
!2919 = span !2918 138 140
!2920 = span !2918 117 247
!2921 = fn_name_span !2918 120 123
!2922 = (!2920 !2921)
!2923 = span !2918 171 173
!2924 = span !2918 187 196
!2925 = span !2918 204 210
!2926 = span !562 429 439
!2927 = span !2918 171 232
!2928 = fn_call_path_span !2918 224 230
!2929 = (!2927 !2928)
!2930 = span !89 5608 5612
!2931 = span !89 5584 5896
!2932 = fn_name_span !89 5591 5596
!2933 = (!2931 !2932)
!2934 = "/home/kebradalaonda/p/sway/sway-lib-std/src/asset_id.<autogenerated>.sw"
!2935 = span !2934 138 140
!2936 = span !2934 117 247
!2937 = fn_name_span !2934 120 123
!2938 = (!2936 !2937)
!2939 = span !2934 171 173
!2940 = span !2934 187 196
!2941 = span !2934 204 210
!2942 = span !575 790 800
!2943 = span !2934 171 232
!2944 = fn_call_path_span !2934 224 230
!2945 = (!2943 !2944)
!2946 = span !789 4979 4983
!2947 = span !789 4985 4989
!2948 = span !789 4959 5429
!2949 = fn_name_span !789 4966 4970
!2950 = (!2948 !2949)
!2951 = span !789 5071 5075
!2952 = span !789 5083 5087
!2953 = span !789 434 442
!2954 = span !789 5071 5095
!2955 = fn_call_path_span !789 5080 5082
!2956 = (!2954 !2955)
!2957 = (!2954 !2955 !595)
!2958 = (!2954 !2955 !597)
!2959 = span !789 5110 5114
!2960 = span !789 5110 5125
!2961 = fn_call_path_span !789 5119 5123
!2962 = (!2960 !2961)
!2963 = span !789 1421 1425
!2964 = (!2960 !2961 !2963)
!2965 = (!2960 !2961 !2953)
!2966 = span !789 1421 1434
!2967 = fn_call_path_span !789 1430 1432
!2968 = (!2960 !2961 !2966 !2967)
!2969 = (!2960 !2961 !2966 !2967)
!2970 = span !789 1433 1434
!2971 = (!2960 !2961 !2966 !2967)
!2972 = (!2960 !2961 !2966 !2967 !595)
!2973 = (!2960 !2961 !2966 !2967)
!2974 = (!2960 !2961 !2966 !2967 !597)
!2975 = (!2960 !2961 !2966 !2967)
!2976 = (!2960 !2961 !2966 !2967)
!2977 = span !789 1437 1438
!2978 = (!2960 !2961 !2966)
!2979 = span !789 1452 1456
!2980 = (!2960 !2961 !2979)
!2981 = (!2960 !2961 !2953)
!2982 = span !789 1448 1460
!2983 = fn_call_path_span !789 1450 1451
!2984 = (!2960 !2961 !2982 !2983)
!2985 = span !789 1448 1449
!2986 = (!2960 !2961 !2982 !2983)
!2987 = (!2960 !2961 !2982 !2983)
!2988 = (!2960 !2961 !2982 !2983 !1370)
!2989 = (!2960 !2961 !2982 !2983)
!2990 = (!2960 !2961 !2982 !2983 !1373)
!2991 = (!2960 !2961 !2982 !2983)
!2992 = (!2960 !2961 !2982 !2983)
!2993 = span !789 1404 1463
!2994 = (!2960 !2961 !2993)
!2995 = (!2960 !2961 !2993)
!2996 = span !789 1497 1501
!2997 = (!2960 !2961 !2996)
!2998 = (!2960 !2961 !917)
!2999 = span !789 1507 1511
!3000 = (!2960 !2961 !2999)
!3001 = (!2960 !2961 !2953)
!3002 = span !789 1517 1524
!3003 = (!2960 !2961 !3002)
!3004 = span !789 1483 1525
!3005 = fn_call_path_span !789 1483 1496
!3006 = (!2960 !2961 !3004 !3005)
!3007 = (!2960 !2961 !3004 !3005)
!3008 = (!2960 !2961 !3004 !3005)
!3009 = span !797 4168 4177
!3010 = (!2960 !2961 !3004 !3005 !3009)
!3011 = span !797 4180 4185
!3012 = (!2960 !2961 !3004 !3005 !3011)
!3013 = span !797 4168 4185
!3014 = fn_call_path_span !797 4178 4179
!3015 = (!2960 !2961 !3004 !3005 !3013 !3014)
!3016 = (!2960 !2961 !3004 !3005 !3013 !3014)
!3017 = (!2960 !2961 !3004 !3005 !3013 !3014 !1419)
!3018 = (!2960 !2961 !3004 !3005 !3013 !3014)
!3019 = (!2960 !2961 !3004 !3005 !3013 !3014 !1422)
!3020 = (!2960 !2961 !3004 !3005 !3013 !3014)
!3021 = (!2960 !2961 !3004 !3005 !3013 !3014)
!3022 = (!2960 !2961 !3004 !3005 !3013)
!3023 = span !797 4222 4231
!3024 = (!2960 !2961 !3004 !3005 !3023)
!3025 = span !797 4210 4232
!3026 = fn_call_path_span !797 4210 4221
!3027 = (!2960 !2961 !3004 !3005 !3025 !3026)
!3028 = (!2960 !2961 !3004 !3005 !3025 !3026 !798)
!3029 = (!2960 !2961 !3004 !3005 !3025 !3026)
!3030 = (!2960 !2961 !3004 !3005 !3025 !3026 !801)
!3031 = span !797 4196 4233
!3032 = (!2960 !2961 !3004 !3005 !3031)
!3033 = (!2960 !2961 !3004 !3005 !3031)
!3034 = span !797 4245 4250
!3035 = (!2960 !2961 !3004 !3005 !3034)
!3036 = span !797 4245 4254
!3037 = fn_call_path_span !797 4251 4252
!3038 = (!2960 !2961 !3004 !3005 !3036 !3037)
!3039 = (!2960 !2961 !3004 !3005 !3036 !3037)
!3040 = span !797 4253 4254
!3041 = (!2960 !2961 !3004 !3005 !3036 !3037)
!3042 = (!2960 !2961 !3004 !3005 !3036 !3037 !1419)
!3043 = (!2960 !2961 !3004 !3005 !3036 !3037)
!3044 = (!2960 !2961 !3004 !3005 !3036 !3037 !1422)
!3045 = (!2960 !2961 !3004 !3005 !3036 !3037)
!3046 = (!2960 !2961 !3004 !3005 !3036 !3037)
!3047 = (!2960 !2961 !3004 !3005 !3036)
!3048 = span !797 4269 4272
!3049 = (!2960 !2961 !3004 !3005 !3048)
!3050 = span !797 4287 4294
!3051 = (!2960 !2961 !3004 !3005 !3050)
!3052 = span !797 4296 4301
!3053 = (!2960 !2961 !3004 !3005 !3052)
!3054 = span !797 4269 4302
!3055 = fn_call_path_span !797 4273 4286
!3056 = (!2960 !2961 !3004 !3005 !3054 !3055)
!3057 = (!2960 !2961 !3004 !3005 !3054 !3055)
!3058 = (!2960 !2961 !3004 !3005 !3054 !3055)
!3059 = span !925 6008 6011
!3060 = (!2960 !2961 !3004 !3005 !3054 !3055 !3059)
!3061 = (!2960 !2961 !3004 !3005 !3054 !3055)
!3062 = span !925 6018 6022
!3063 = (!2960 !2961 !3004 !3005 !3054 !3055 !3062)
!3064 = (!2960 !2961 !3004 !3005 !3054 !3055)
!3065 = span !925 6029 6034
!3066 = (!2960 !2961 !3004 !3005 !3054 !3055 !3065)
!3067 = (!2960 !2961 !3004 !3005 !3054 !3055)
!3068 = span !925 5999 6076
!3069 = (!2960 !2961 !3004 !3005 !3054 !3055 !3068)
!3070 = span !925 6050 6065
!3071 = (!2960 !2961 !3004 !3005)
!3072 = span !797 4322 4329
!3073 = (!2960 !2961 !3004 !3005 !3072)
!3074 = (!2960 !2961 !3004 !3005)
!3075 = (!2960 !2961 !3004 !3005)
!3076 = span !797 4351 4354
!3077 = (!2960 !2961 !3004 !3005 !3076)
!3078 = (!2960 !2961 !3004 !3005)
!3079 = (!2960 !2961 !3004 !3005)
!3080 = span !789 1472 1525
!3081 = (!2960 !2961 !3080)
!3082 = (!2960 !2961 !3080)
!3083 = (!2960 !2961 !3080)
!3084 = span !789 1546 1553
!3085 = (!2960 !2961 !3084)
!3086 = span !789 1535 1553
!3087 = (!2960 !2961 !3086)
!3088 = (!2960 !2961 !3086)
!3089 = span !789 5259 5263
!3090 = span !789 5288 5292
!3091 = span !789 5259 5297
!3092 = fn_call_path_span !789 5272 5287
!3093 = (!3091 !3092)
!3094 = (!3091 !3092 !926)
!3095 = (!3091 !3092 !929)
!3096 = (!3091 !3092 !932)
!3097 = span !789 5249 5298
!3098 = span !789 5349 5352
!3099 = span !789 5364 5368
!3100 = span !789 5349 5369
!3101 = fn_call_path_span !789 5353 5363
!3102 = (!3100 !3101)
!3103 = span !925 4760 4763
!3104 = (!3100 !3101 !3103)
!3105 = span !925 4752 4800
!3106 = (!3100 !3101 !3105)
!3107 = span !925 4738 4801
!3108 = (!3100 !3101 !3107)
!3109 = (!3100 !3101 !3107)
!3110 = span !925 4819 4823
!3111 = (!3100 !3101 !3110)
!3112 = span !925 4830 4837
!3113 = (!3100 !3101 !3112)
!3114 = span !925 4810 4877
!3115 = (!3100 !3101 !3114)
!3116 = span !925 4853 4866
!3117 = span !789 5409 5417
!3118 = span !789 5409 5422
!3119 = fn_call_path_span !789 5418 5420
!3120 = (!3118 !3119)
!3121 = span !789 5421 5422
!3122 = (!3118 !3119 !464)
!3123 = (!3118 !3119 !466)
!3124 = span !449 27545 27549
!3125 = span !449 27551 27556
!3126 = span !449 27539 27620
!3127 = fn_name_span !449 27542 27544
!3128 = (!3126 !3127)
!3129 = span !449 27582 27596
!3130 = fn_call_path_span !449 27587 27589
!3131 = (!3129 !3130 !1419)
!3132 = (!3129 !3130)
!3133 = (!3129 !3130 !1422)
!3134 = span !449 27582 27614
!3135 = span !449 27600 27604
!3136 = span !449 27608 27613
!3137 = span !449 27600 27614
!3138 = fn_call_path_span !449 27605 27607
!3139 = (!3137 !3138)
!3140 = "/home/kebradalaonda/p/sway/sway-lib-std/src/contract_id.<autogenerated>.sw"
!3141 = span !3140 141 143
!3142 = span !3140 120 253
!3143 = fn_name_span !3140 123 126
!3144 = (!3142 !3143)
!3145 = span !3140 174 176
!3146 = span !3140 190 202
!3147 = span !3140 210 216
!3148 = span !1006 442 452
!3149 = span !3140 174 238
!3150 = fn_call_path_span !3140 230 236
!3151 = (!3149 !3150)
!3152 = span !89 5625 5630
!3153 = (!2931 !2932)
!3154 = (!667 !668)
!3155 = (!2821 !2822)
!3156 = (!2824 !2825)
!3157 = span !1360 3913 3983
!3158 = fn_name_span !1360 3920 3935
!3159 = (!3157 !3158)
!3160 = span !1360 3959 3975
!3161 = fn_call_path_span !1360 3959 3969
!3162 = (!3160 !3161)
!3163 = (!3160 !3161 !1437)
!3164 = span !1671 4056 4161
!3165 = fn_name_span !1671 4063 4066
!3166 = (!3164 !3165)
!3167 = span !1671 785 786
!3168 = span !1671 4111 4124
!3169 = fn_call_path_span !1671 4111 4122
!3170 = span !1671 774 787
!3171 = fn_call_path_span !1671 774 779
!3172 = (!3168 !3169 !3170 !3171)
!3173 = span !1671 750 818
!3174 = (!3168 !3169 !3173)
!3175 = (!3168 !3169)
!3176 = (!3168 !3169 !3173)
!3177 = span !1671 806 807
!3178 = (!3168 !3169 !3173)
!3179 = span !1671 4087 4155
!3180 = span !1671 4143 4144
!3181 = span !797 1748 1753
!3182 = span !797 1732 1888
!3183 = fn_name_span !797 1739 1744
!3184 = (!3182 !3183)
!3185 = span !797 1787 1811
!3186 = fn_call_path_span !797 1804 1805
!3187 = (!3185 !3186)
!3188 = (!3185 !3186 !1370)
!3189 = (!3185 !3186 !1373)
!3190 = span !797 1777 1886
!3191 = span !797 1828 1837
!3192 = span !797 1847 1858
!3193 = span !1671 5760 5764
!3194 = span !1671 5766 5771
!3195 = span !1671 5740 6205
!3196 = fn_name_span !1671 5747 5751
!3197 = (!3195 !3196)
!3198 = span !1671 5852 5856
!3199 = span !1671 3543 3551
!3200 = span !1671 5864 5868
!3201 = span !1671 3523 3537
!3202 = span !1671 375 383
!3203 = span !1671 5852 5876
!3204 = fn_call_path_span !1671 5861 5863
!3205 = (!3203 !3204)
!3206 = (!3203 !3204 !595)
!3207 = (!3203 !3204 !597)
!3208 = span !1671 5891 5895
!3209 = span !1671 5891 5906
!3210 = fn_call_path_span !1671 5900 5904
!3211 = (!3209 !3210)
!3212 = span !1671 2978 2982
!3213 = (!3209 !3210 !3212)
!3214 = (!3209 !3210 !3202)
!3215 = span !1671 2978 2991
!3216 = fn_call_path_span !1671 2987 2989
!3217 = (!3209 !3210 !3215 !3216)
!3218 = (!3209 !3210 !3215 !3216)
!3219 = span !1671 2990 2991
!3220 = (!3209 !3210 !3215 !3216)
!3221 = (!3209 !3210 !3215 !3216 !595)
!3222 = (!3209 !3210 !3215 !3216)
!3223 = (!3209 !3210 !3215 !3216 !597)
!3224 = (!3209 !3210 !3215 !3216)
!3225 = (!3209 !3210 !3215 !3216)
!3226 = span !1671 2994 2995
!3227 = (!3209 !3210 !3215)
!3228 = span !1671 3009 3013
!3229 = (!3209 !3210 !3228)
!3230 = (!3209 !3210 !3202)
!3231 = span !1671 3005 3017
!3232 = fn_call_path_span !1671 3007 3008
!3233 = (!3209 !3210 !3231 !3232)
!3234 = span !1671 3005 3006
!3235 = (!3209 !3210 !3231 !3232)
!3236 = (!3209 !3210 !3231 !3232)
!3237 = (!3209 !3210 !3231 !3232 !1370)
!3238 = (!3209 !3210 !3231 !3232)
!3239 = (!3209 !3210 !3231 !3232 !1373)
!3240 = (!3209 !3210 !3231 !3232)
!3241 = (!3209 !3210 !3231 !3232)
!3242 = span !1671 2961 3020
!3243 = (!3209 !3210 !3242)
!3244 = (!3209 !3210 !3242)
!3245 = span !1671 3054 3058
!3246 = (!3209 !3210 !3245)
!3247 = span !1671 357 369
!3248 = (!3209 !3210 !3247)
!3249 = span !1671 3064 3068
!3250 = (!3209 !3210 !3249)
!3251 = (!3209 !3210 !3202)
!3252 = span !1671 3074 3081
!3253 = (!3209 !3210 !3252)
!3254 = span !1671 3041 3082
!3255 = fn_call_path_span !1671 3041 3048
!3256 = (!3209 !3210 !3254 !3255)
!3257 = (!3209 !3210 !3254 !3255)
!3258 = (!3209 !3210 !3254 !3255)
!3259 = span !797 2668 2677
!3260 = (!3209 !3210 !3254 !3255 !3259)
!3261 = span !797 2680 2685
!3262 = (!3209 !3210 !3254 !3255 !3261)
!3263 = span !797 2668 2685
!3264 = fn_call_path_span !797 2678 2679
!3265 = (!3209 !3210 !3254 !3255 !3263 !3264)
!3266 = (!3209 !3210 !3254 !3255 !3263 !3264)
!3267 = (!3209 !3210 !3254 !3255 !3263 !3264 !1419)
!3268 = (!3209 !3210 !3254 !3255 !3263 !3264)
!3269 = (!3209 !3210 !3254 !3255 !3263 !3264 !1422)
!3270 = (!3209 !3210 !3254 !3255 !3263 !3264)
!3271 = (!3209 !3210 !3254 !3255 !3263 !3264)
!3272 = (!3209 !3210 !3254 !3255 !3263)
!3273 = span !797 2721 2730
!3274 = (!3209 !3210 !3254 !3255 !3273)
!3275 = (!3209 !3210 !3254 !3255)
!3276 = span !797 2710 2731
!3277 = fn_call_path_span !797 2710 2715
!3278 = (!3209 !3210 !3254 !3255 !3276 !3277)
!3279 = span !797 2696 2732
!3280 = (!3209 !3210 !3254 !3255 !3279)
!3281 = (!3209 !3210 !3254 !3255 !3279)
!3282 = span !797 2744 2749
!3283 = (!3209 !3210 !3254 !3255 !3282)
!3284 = span !797 2744 2753
!3285 = fn_call_path_span !797 2750 2751
!3286 = (!3209 !3210 !3254 !3255 !3284 !3285)
!3287 = (!3209 !3210 !3254 !3255 !3284 !3285)
!3288 = span !797 2752 2753
!3289 = (!3209 !3210 !3254 !3255 !3284 !3285)
!3290 = (!3209 !3210 !3254 !3255 !3284 !3285 !1419)
!3291 = (!3209 !3210 !3254 !3255 !3284 !3285)
!3292 = (!3209 !3210 !3254 !3255 !3284 !3285 !1422)
!3293 = (!3209 !3210 !3254 !3255 !3284 !3285)
!3294 = (!3209 !3210 !3254 !3255 !3284 !3285)
!3295 = (!3209 !3210 !3254 !3255 !3284)
!3296 = span !797 2768 2771
!3297 = (!3209 !3210 !3254 !3255 !3296)
!3298 = span !797 2785 2792
!3299 = (!3209 !3210 !3254 !3255 !3298)
!3300 = span !797 2794 2799
!3301 = (!3209 !3210 !3254 !3255 !3300)
!3302 = span !797 2768 2800
!3303 = fn_call_path_span !797 2772 2779
!3304 = (!3209 !3210 !3254 !3255 !3302 !3303)
!3305 = (!3209 !3210 !3254 !3255 !3302 !3303)
!3306 = (!3209 !3210 !3254 !3255 !3302 !3303)
!3307 = (!3209 !3210 !3254 !3255 !3302 !3303 !1453)
!3308 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456)
!3309 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456)
!3310 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456)
!3311 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456 !1370)
!3312 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456)
!3313 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456 !1373)
!3314 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456)
!3315 = (!3209 !3210 !3254 !3255 !3302 !3303 !1455 !1456)
!3316 = (!3209 !3210 !3254 !3255 !3302 !3303 !1465)
!3317 = (!3209 !3210 !3254 !3255 !3302 !3303 !1465)
!3318 = (!3209 !3210 !3254 !3255 !3302 !3303 !1468)
!3319 = (!3209 !3210 !3254 !3255 !3302 !3303)
!3320 = (!3209 !3210 !3254 !3255 !3302 !3303 !1471)
!3321 = (!3209 !3210 !3254 !3255 !3302 !3303)
!3322 = (!3209 !3210 !3254 !3255 !3302 !3303 !1474)
!3323 = (!3209 !3210 !3254 !3255 !3302 !3303)
!3324 = (!3209 !3210 !3254 !3255 !3302 !3303 !1477)
!3325 = (!3209 !3210 !3254 !3255)
!3326 = span !797 2820 2827
!3327 = (!3209 !3210 !3254 !3255 !3326)
!3328 = (!3209 !3210 !3254 !3255)
!3329 = (!3209 !3210 !3254 !3255)
!3330 = span !797 2849 2852
!3331 = (!3209 !3210 !3254 !3255 !3330)
!3332 = (!3209 !3210 !3254 !3255)
!3333 = (!3209 !3210 !3254 !3255)
!3334 = span !1671 3030 3082
!3335 = (!3209 !3210 !3334)
!3336 = (!3209 !3210 !3334)
!3337 = (!3209 !3210 !3334)
!3338 = span !1671 3103 3110
!3339 = (!3209 !3210 !3338)
!3340 = span !1671 3092 3110
!3341 = (!3209 !3210 !3340)
!3342 = (!3209 !3210 !3340)
!3343 = span !1671 6040 6044
!3344 = span !1671 6062 6066
!3345 = span !1671 6040 6071
!3346 = fn_call_path_span !1671 6053 6056
!3347 = (!3345 !3346)
!3348 = (!3345 !3346 !1888)
!3349 = (!3345 !3346 !1891)
!3350 = span !1671 6030 6072
!3351 = span !1671 6124 6127
!3352 = span !1671 6139 6144
!3353 = span !1671 6124 6145
!3354 = fn_call_path_span !1671 6128 6133
!3355 = (!3353 !3354)
!3356 = span !925 3927 3953
!3357 = (!3353 !3354 !3356)
!3358 = span !925 3977 3981
!3359 = (!3353 !3354 !3358)
!3360 = span !925 3988 3991
!3361 = (!3353 !3354 !3360)
!3362 = span !925 3968 4070
!3363 = (!3353 !3354 !3362)
!3364 = span !925 4038 4055
!3365 = span !925 4090 4111
!3366 = fn_call_path_span !925 4107 4109
!3367 = (!3353 !3354 !3365 !3366)
!3368 = (!3353 !3354 !3365 !3366)
!3369 = (!3353 !3354 !3365 !3366)
!3370 = span !925 4110 4111
!3371 = (!3353 !3354 !3365 !3366)
!3372 = (!3353 !3354 !3365 !3366 !595)
!3373 = (!3353 !3354 !3365 !3366)
!3374 = (!3353 !3354 !3365 !3366 !597)
!3375 = (!3353 !3354 !3365 !3366)
!3376 = (!3353 !3354 !3365 !3366)
!3377 = (!3353 !3354 !3365)
!3378 = span !925 4135 4139
!3379 = (!3353 !3354 !3378)
!3380 = span !925 4146 4149
!3381 = (!3353 !3354 !3380)
!3382 = span !925 4126 4197
!3383 = (!3353 !3354 !3382)
!3384 = span !925 4169 4182
!3385 = span !925 4237 4241
!3386 = (!3353 !3354 !3385)
!3387 = span !925 4248 4251
!3388 = (!3353 !3354 !3387)
!3389 = span !925 4228 4299
!3390 = (!3353 !3354 !3389)
!3391 = span !925 4271 4284
!3392 = span !1671 6185 6193
!3393 = span !1671 6185 6198
!3394 = fn_call_path_span !1671 6194 6196
!3395 = (!3393 !3394)
!3396 = span !1671 6197 6198
!3397 = (!3393 !3394 !464)
!3398 = (!3393 !3394 !466)
!3399 = span !1671 23721 23722
!3400 = span !1671 23700 23879
!3401 = fn_name_span !1671 23703 23706
!3402 = (!3400 !3401)
!3403 = span !1671 23757 23758
!3404 = span !1671 23745 23772
!3405 = span !1671 23794 23798
!3406 = span !1671 23794 23805
!3407 = fn_call_path_span !1671 23799 23803
!3408 = (!3406 !3407)
!3409 = (!3406 !3407 !1672)
!3410 = (!3406 !3407 !1674)
!3411 = (!3406 !3407 !1674)
!3412 = fn_call_path_span !1671 23794 23805
!3413 = (!3406 !3412)
!3414 = span !1671 22865 22869
!3415 = (!3406 !3412 !3414)
!3416 = (!3406 !3412 !1717)
!3417 = span !1671 22879 22883
!3418 = (!3406 !3412 !3417)
!3419 = (!3406 !3412 !1684)
!3420 = (!3406 !3412 !3199)
!3421 = span !1671 22865 22894
!3422 = fn_call_path_span !1671 22876 22878
!3423 = (!3406 !3412 !3421 !3422)
!3424 = (!3406 !3412 !3421)
!3425 = (!3406 !3412 !863)
!3426 = (!3406 !3412 !863)
!3427 = (!3406 !3412 !863)
!3428 = span !1671 22909 22920
!3429 = (!3406 !3412 !3428)
!3430 = span !1671 22940 22950
!3431 = (!3406 !3412 !3430)
!3432 = (!3406 !3412 !1717)
!3433 = span !1671 22940 22955
!3434 = fn_call_path_span !1671 22951 22953
!3435 = (!3406 !3412 !3433 !3434)
!3436 = (!3406 !3412 !3433 !3434)
!3437 = span !1671 22954 22955
!3438 = (!3406 !3412 !3433 !3434)
!3439 = (!3406 !3412 !3433 !3434 !464)
!3440 = (!3406 !3412 !3433 !3434)
!3441 = (!3406 !3412 !3433 !3434 !466)
!3442 = (!3406 !3412 !3433 !3434)
!3443 = (!3406 !3412 !3433 !3434)
!3444 = (!3406 !3412 !3433)
!3445 = (!3406 !3412 !3433)
!3446 = (!3406 !3412 !3433)
!3447 = (!3406 !3412 !863)
!3448 = (!3406 !3412 !863)
!3449 = (!3406 !3412 !863)
!3450 = span !1671 22970 22974
!3451 = (!3406 !3412 !3450)
!3452 = (!3406 !3412 !1684)
!3453 = span !1671 22996 23000
!3454 = (!3406 !3412 !3453)
!3455 = (!3406 !3412 !1717)
!3456 = span !1671 22996 23010
!3457 = fn_call_path_span !1671 23007 23008
!3458 = (!3406 !3412 !3456 !3457)
!3459 = (!3406 !3412 !3456 !3457)
!3460 = span !1671 23009 23010
!3461 = (!3406 !3412 !3456 !3457)
!3462 = (!3406 !3412 !3456 !3457 !901)
!3463 = (!3406 !3412 !3456 !3457)
!3464 = (!3406 !3412 !3456 !3457 !904)
!3465 = (!3406 !3412 !3456 !3457)
!3466 = (!3406 !3412 !3456 !3457)
!3467 = span !1671 22970 23011
!3468 = fn_call_path_span !1671 22982 22995
!3469 = (!3406 !3412 !3467 !3468)
!3470 = (!3406 !3412 !3467 !3468)
!3471 = (!3406 !3412 !3467 !3468)
!3472 = span !1671 8256 8260
!3473 = (!3406 !3412 !3467 !3468 !3472)
!3474 = (!3406 !3412 !3467 !3468 !3201)
!3475 = (!3406 !3412 !3467 !3468 !3247)
!3476 = span !1671 8278 8283
!3477 = (!3406 !3412 !3467 !3468 !3476)
!3478 = span !1671 8256 8284
!3479 = fn_call_path_span !1671 8269 8272
!3480 = (!3406 !3412 !3467 !3468 !3478 !3479)
!3481 = (!3406 !3412 !3467 !3468 !3478 !3479)
!3482 = (!3406 !3412 !3467 !3468 !3478 !3479 !1888)
!3483 = (!3406 !3412 !3467 !3468 !3478 !3479)
!3484 = (!3406 !3412 !3467 !3468 !3478 !3479 !1891)
!3485 = (!3406 !3412 !3467 !3468 !3478 !3479)
!3486 = (!3406 !3412 !3467 !3468 !3478 !3479)
!3487 = (!3406 !3412 !3467 !3468 !3478 !3479)
!3488 = span !1671 8256 8296
!3489 = fn_call_path_span !1671 8285 8289
!3490 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3491 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3492 = span !925 2382 2408
!3493 = (!3406 !3412 !3467 !3468 !3488 !3489 !3492)
!3494 = span !925 2432 2436
!3495 = (!3406 !3412 !3467 !3468 !3488 !3489 !3494)
!3496 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3497 = span !925 2423 2476
!3498 = (!3406 !3412 !3467 !3468 !3488 !3489 !3497)
!3499 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3500 = span !925 2495 2516
!3501 = fn_call_path_span !925 2512 2514
!3502 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3503 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3504 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3505 = span !925 2515 2516
!3506 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3507 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501 !595)
!3508 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3509 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501 !597)
!3510 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3511 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500 !3501)
!3512 = (!3406 !3412 !3467 !3468 !3488 !3489 !3500)
!3513 = span !925 2540 2544
!3514 = (!3406 !3412 !3467 !3468 !3488 !3489 !3513)
!3515 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3516 = span !925 2531 2620
!3517 = (!3406 !3412 !3467 !3468 !3488 !3489 !3516)
!3518 = span !925 2569 2582
!3519 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3520 = span !925 2659 2663
!3521 = (!3406 !3412 !3467 !3468 !3488 !3489 !3520)
!3522 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3523 = span !925 2650 2739
!3524 = (!3406 !3412 !3467 !3468 !3488 !3489 !3523)
!3525 = span !925 2688 2701
!3526 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3527 = (!3406 !3412 !3467 !3468 !3488 !3489)
!3528 = (!3406 !3412 !863)
!3529 = (!3406 !3412 !863)
!3530 = (!949 !950)
!3531 = (!949 !950 !595)
!3532 = (!949 !950 !597)
!3533 = (!3406 !3412)
!3534 = (!3406 !3412 !957)
!3535 = (!3406 !3412 !959)
!3536 = (!3406 !3412 !957)
!3537 = (!3406 !3412 !957)
!3538 = (!3406 !3412 !963 !964)
!3539 = (!3406 !3412 !963 !964)
!3540 = (!3406 !3412 !963 !964)
!3541 = (!3406 !3412 !963 !964 !595)
!3542 = (!3406 !3412 !963 !964)
!3543 = (!3406 !3412 !963 !964 !597)
!3544 = (!3406 !3412 !963 !964)
!3545 = (!3406 !3412 !963 !964)
!3546 = (!3406 !3412 !963)
!3547 = (!3406 !3412 !957)
!3548 = (!3406 !3412 !975)
!3549 = (!3406 !3412 !977)
!3550 = span !1671 23786 23790
!3551 = span !1671 23828 23829
!3552 = span !1671 23836 23840
!3553 = span !1671 23828 23841
!3554 = fn_call_path_span !1671 23830 23835
!3555 = (!3553 !3554)
!3556 = (!3553 !3554 !698)
!3557 = (!3553 !3554 !701)
!3558 = (!3553 !3554 !704)
!3559 = (!3406 !3412 !983 !984)
!3560 = (!3406 !3412 !983 !984)
!3561 = (!3406 !3412 !983 !984 !989)
!3562 = (!3406 !3412 !983 !984)
!3563 = (!3406 !3412 !983 !984 !992)
!3564 = (!3553 !3554 !706)
!3565 = (!3553 !3554 !709)
!3566 = (!3553 !3554 !712)
!3567 = (!3553 !3554 !712)
!3568 = (!3553 !3554 !712)
!3569 = (!3553 !3554 !712)
!3570 = (!3553 !3554 !712)
!3571 = (!3553 !3554 !722)
!3572 = (!3553 !3554 !724)
!3573 = (!3553 !3554 !709)
!3574 = (!3553 !3554 !2844 !2845)
!3575 = (!3553 !3554 !728)
!3576 = (!3553 !3554 !728)
!3577 = (!3553 !3554 !728)
!3578 = (!3553 !3554 !734)
!3579 = span !1671 23820 23842
!3580 = span !1671 23862 23863
!3581 = span !1671 23862 23872
!3582 = fn_call_path_span !1671 23864 23870
!3583 = (!3581 !3582)

;; ASM: Final program
;; Program kind: Script
.program:
move $$tmp $pc
jmpf $zero i4
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
CONFIGURABLES_OFFSET[0..32]
CONFIGURABLES_OFFSET[32..64]
lw   $$ds $$tmp i1
add  $$ds $$ds $$tmp
cfei i0                       ; allocate stack space for globals
move $$locbase $sp            ; save locals base register for function __entry
cfei i464                     ; allocate 464 bytes for locals and 0 slots for call arguments
addi $r5 $$locbase i272       ; get offset to local
jal  $$reta $pc i82           ; [call]: call main_0
sw   $$locbase $$retv i46     ; store word
addi $r0 $$locbase i368       ; get offset to local
addi $r1 $$locbase i424       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r2 $$locbase i424       ; get offset to local
movi $r0 i1024                ; initialize constant into register
aloc $r0
addi $r1 $$locbase i112       ; get offset to local
sw   $$locbase $hp i14        ; store word
movi $r0 i1024                ; initialize constant into register
sw   $$locbase $r0 i15        ; store word
sw   $$locbase $zero i16      ; store word
mcpi $$locbase $r1 i24        ; copy memory
addi $r0 $$locbase i184       ; get offset to local
mcpi $r0 $$locbase i24        ; copy memory
addi $r1 $$locbase i288       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i432       ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r0 $$locbase i400       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i400       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i136       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r4 $$locbase i18        ; load word
lw   $r1 $$locbase i19        ; load word
lw   $r2 $$locbase i54        ; load word
movi $r3 i8                   ; initialize constant into register
add  $r3 $r1 $r3
gt   $r3 $r3 $r4
jnzf $r3 $zero i1
jmpf $zero i7
movi $r3 i2                   ; initialize constant into register
mul  $r3 $r4 $r3
movi $r4 i8                   ; initialize constant into register
add  $r4 $r3 $r4
aloc $r4
mcp  $hp $r0 $r1
move $r0 $hp                  ; move parameter from branch to block argument
add  $r3 $r0 $r1
sw   $r3 $r2 i0               ; store word
movi $r2 i8                   ; initialize constant into register
add  $r1 $r1 $r2
addi $r2 $$locbase i208       ; get offset to local
sw   $$locbase $r0 i26        ; store word
sw   $$locbase $r4 i27        ; store word
sw   $$locbase $r1 i28        ; store word
addi $r0 $$locbase i48        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
addi $r1 $$locbase i248       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i312       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $$locbase i376       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i376       ; get offset to local
addi $r1 $$locbase i440       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i440       ; get offset to local
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i160       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $r0 i16              ; get offset to aggregate element
addi $r2 $$locbase i232       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i96        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r1 $$locbase i336       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i352       ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
mcpi $r5 $r0 i16              ; copy memory
lw   $r0 $r5 i1               ; load size of returned slice
lw   $r5 $r5 i0               ; load pointer to returned slice
retd  $r5 $r0
pshl i255                     ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function main_0
cfei i20240                   ; allocate 20240 bytes for locals and 0 slots for call arguments
move $r5 $$reta               ; save return address
load $r0 data_NonConfigurable_0; get local constant
load $r1 data_NonConfigurable_1; get local constant
movi $r2 i16600               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $zero i0             ; store byte
addi $r2 $$locbase i2096      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i4480                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i560       ; store word
movi $r2 i25                  ; initialize constant into register
sw   $$locbase $r2 i561       ; store word
movi $r2 i6616                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12000               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12000               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i26580             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17480               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i18560               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i1               ; copy memory
sw   $$locbase $r2 i2183      ; store word
addi $r0 $$locbase i1336      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2440      ; get offset to local
sw   $$locbase $r0 i305       ; store word
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i306       ; store word
movi $r0 i4768                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12016               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12896               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26472             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8936                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10168               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1271      ; store word
sw   $$locbase $one i1272     ; store word
movi $r1 i10600               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14816               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26384             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17576               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2197      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_62; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16600               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $$locbase $r2 i1         ; copy memory
movi $r2 i16688               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $one i0              ; store byte
movi $r2 i11056               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i11336               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1417      ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i1418      ; store word
addi $r2 $$locbase i2128      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14912               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14992               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i26232             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16688               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26572             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_8
addi $r0 $$locbase i2416      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2960      ; get offset to local
sw   $$locbase $r0 i370       ; store word
sw   $$locbase $one i371      ; store word
addi $r0 $$locbase i3200      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15168               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26124             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17584               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2198      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_73; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16688               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16920               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $zero i0             ; store byte
addi $r2 $$locbase i3576      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3768      ; get offset to local
sw   $$locbase $r2 i471       ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i472       ; store word
addi $r2 $$locbase i3960      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12016               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25976             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26316             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_8
movi $r0 i4136                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i4280                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i535       ; store word
sw   $$locbase $one i536      ; store word
movi $r0 i4496                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12192               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25856             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17592               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2199      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
load $r0 data_NonConfigurable_86; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $zero i0             ; store byte
movi $r2 i5176                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i5360                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i670       ; store word
movi $r2 i32                  ; initialize constant into register
sw   $$locbase $r2 i671       ; store word
movi $r2 i5536                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12288               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12368               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25696             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i17096               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26244             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i5688                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i5872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i734       ; store word
sw   $$locbase $one i735      ; store word
movi $r0 i6032                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12464               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12544               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25576             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2210      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_95; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $one i0              ; store byte
movi $r2 i6392                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i6632                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i829       ; store word
movi $r2 i26                  ; initialize constant into register
sw   $$locbase $r2 i830       ; store word
movi $r2 i6832                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12640               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12720               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25416             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25964             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i7264                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i7448                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i931       ; store word
sw   $$locbase $one i932      ; store word
movi $r0 i7648                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12912               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25296             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17768               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2221      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_3; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i48        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16568               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i10                  ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
movi $r2 i8176                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i8376                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1047      ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i1048      ; store word
movi $r2 i8560                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13088               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25132             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25680             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i8720                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i8944                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1118      ; store word
sw   $$locbase $one i1119     ; store word
movi $r0 i9168                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13184               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13264               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25012             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2232      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_17; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16568               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i56        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i100                 ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
movi $r2 i9712                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i9888                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1236      ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i1237      ; store word
movi $r2 i10064               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13360               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13440               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24848             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16576               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25396             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i10128               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1267      ; store word
sw   $$locbase $one i1268     ; store word
movi $r0 i10152               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13616               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24728             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17944               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2243      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16576               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
load $r0 data_NonConfigurable_29; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16584               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i255                 ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
movi $r2 i10184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i10264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1283      ; store word
movi $r2 i32                  ; initialize constant into register
sw   $$locbase $r2 i1284      ; store word
movi $r2 i10440               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13792               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24564             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25112             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i10488               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10496               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1312      ; store word
sw   $$locbase $one i1313     ; store word
movi $r0 i10512               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13936               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24444             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i18016               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2252      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
load $r0 data_NonConfigurable_43; get local constant
load $r1 data_NonConfigurable_2; get local constant
sw   $$locbase $zero i2074    ; store word
movi $r2 i10528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i10568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1321      ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i1322      ; store word
movi $r2 i10584               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14288               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14320               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24292             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2074      ; load word
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25488             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i10616               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1328      ; store word
sw   $$locbase $one i1329     ; store word
movi $r0 i10688               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14464               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24180             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i18024               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2253      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_59; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16592               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2076     ; store word
movi $r2 i10704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i10736               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1342      ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i1343      ; store word
movi $r2 i10752               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14800               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24028             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2076      ; load word
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25224             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i10768               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10776               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1347      ; store word
sw   $$locbase $one i1348     ; store word
movi $r0 i10792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14832               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23916             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i18032               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2254      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_63; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16608               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i88        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i10                  ; initialize constant into register
sw   $$locbase $r2 i2077      ; store word
movi $r2 i10808               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i10936               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1367      ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i1368      ; store word
movi $r2 i10952               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14848               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14848               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23760             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2077      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24956             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i10968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1372      ; store word
sw   $$locbase $one i1373     ; store word
movi $r0 i10992               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23648             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i18040               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2255      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_64; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16616               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i100                 ; initialize constant into register
sw   $$locbase $r2 i2078      ; store word
movi $r2 i11008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i11040               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1380      ; store word
movi $r2 i29                  ; initialize constant into register
sw   $$locbase $r2 i1381      ; store word
movi $r2 i11088               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14880               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14880               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23492             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2078      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24688             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i11104               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i11208               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1401      ; store word
sw   $$locbase $one i1402     ; store word
movi $r0 i11224               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14896               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14896               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23380             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17600               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2200      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i104       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_65; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i65535               ; initialize constant into register
sw   $$locbase $r2 i2079      ; store word
movi $r2 i11240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i11280               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1410      ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i1411      ; store word
movi $r2 i11296               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14912               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14912               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23224             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2079      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24420             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i11312               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i11320               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1415      ; store word
sw   $$locbase $one i1416     ; store word
movi $r0 i11352               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14928               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14928               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23112             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2201      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16632               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i112       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_66; get local constant
load $r1 data_NonConfigurable_2; get local constant
sw   $$locbase $zero i2080    ; store word
movi $r2 i11392               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i11432               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1429      ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i1430      ; store word
movi $r2 i11448               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14944               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14944               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22960             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2080      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24580             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
movi $r0 i11464               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i11472               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1434      ; store word
sw   $$locbase $one i1435     ; store word
movi $r0 i11488               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14960               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22848             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17616               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2202      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_67; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16640               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i120       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2081     ; store word
movi $r2 i11504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i2144      ; get offset to local
sw   $$locbase $r2 i268       ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i269       ; store word
addi $r2 $$locbase i2176      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14976               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22704             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2081      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24324             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i2304      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2312      ; get offset to local
sw   $$locbase $r0 i289       ; store word
sw   $$locbase $one i290      ; store word
addi $r0 $$locbase i2328      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14992               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22604             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2203      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_68; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16648               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i128       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i10                  ; initialize constant into register
sw   $$locbase $r2 i2082      ; store word
addi $r2 $$locbase i2344      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i2376      ; get offset to local
sw   $$locbase $r2 i297       ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i298       ; store word
addi $r2 $$locbase i2392      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15024               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15024               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22460             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2082      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24080             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i2408      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2424      ; get offset to local
sw   $$locbase $r0 i303       ; store word
sw   $$locbase $one i304      ; store word
addi $r0 $$locbase i2648      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15040               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15040               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22360             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17632               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2204      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_69; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16656               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i136       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i100                 ; initialize constant into register
sw   $$locbase $r2 i2083      ; store word
addi $r2 $$locbase i2856      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i2888      ; get offset to local
sw   $$locbase $r2 i361       ; store word
movi $r2 i29                  ; initialize constant into register
sw   $$locbase $r2 i362       ; store word
addi $r2 $$locbase i2904      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15056               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22216             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2083      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23836             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i2920      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2928      ; get offset to local
sw   $$locbase $r0 i366       ; store word
sw   $$locbase $one i367      ; store word
addi $r0 $$locbase i2944      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15072               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15072               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22116             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2205      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16664               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i144       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_70; get local constant
load $r1 data_NonConfigurable_2; get local constant
load $r2 data_NonConfigurable_106; load constant from data section
sw   $$locbase $r2 i2084      ; store word
addi $r2 $$locbase i2976      ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
addi $r0 $$locbase i3016      ; get offset to local
sw   $$locbase $r2 i377       ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i378       ; store word
addi $r2 $$locbase i3072      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15088               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21972             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2084      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23592             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i3088      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3096      ; get offset to local
sw   $$locbase $r0 i387       ; store word
sw   $$locbase $one i388      ; store word
addi $r0 $$locbase i3112      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15104               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15104               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21872             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17648               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2206      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i152       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_71; get local constant
load $r1 data_NonConfigurable_2; get local constant
sw   $$locbase $zero i2085    ; store word
addi $r2 $$locbase i3128      ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
addi $r0 $$locbase i3168      ; get offset to local
sw   $$locbase $r2 i396       ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i397       ; store word
addi $r2 $$locbase i3184      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15120               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15120               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21732             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2085      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23776             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3216      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3224      ; get offset to local
sw   $$locbase $r0 i403       ; store word
sw   $$locbase $one i404      ; store word
addi $r0 $$locbase i3272      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15136               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21632             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2207      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_72; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16680               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i160       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2087     ; store word
addi $r2 $$locbase i3288      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3320      ; get offset to local
sw   $$locbase $r2 i415       ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i416       ; store word
addi $r2 $$locbase i3336      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15152               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15152               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21492             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2087      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23536             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3352      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3360      ; get offset to local
sw   $$locbase $r0 i420       ; store word
sw   $$locbase $one i421      ; store word
addi $r0 $$locbase i3376      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15168               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21392             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17664               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2208      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_74; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16696               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i168       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i10                  ; initialize constant into register
sw   $$locbase $r2 i2088      ; store word
addi $r2 $$locbase i3392      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3456      ; get offset to local
sw   $$locbase $r2 i432       ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i433       ; store word
addi $r2 $$locbase i3472      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15200               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15200               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21248             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2088      ; load word
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23292             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3488      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3496      ; get offset to local
sw   $$locbase $r0 i437       ; store word
sw   $$locbase $one i438      ; store word
addi $r0 $$locbase i3512      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15216               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21148             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2209      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_75; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i176       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i100                 ; initialize constant into register
sw   $$locbase $r2 i2089      ; store word
addi $r2 $$locbase i3528      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3560      ; get offset to local
sw   $$locbase $r2 i445       ; store word
movi $r2 i29                  ; initialize constant into register
sw   $$locbase $r2 i446       ; store word
addi $r2 $$locbase i3608      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15232               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15232               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21004             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2089      ; load word
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23048             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3624      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3640      ; get offset to local
sw   $$locbase $r0 i455       ; store word
sw   $$locbase $one i456      ; store word
addi $r0 $$locbase i3656      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15248               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15248               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20904             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17688               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2211      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i184       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_76; get local constant
load $r1 data_NonConfigurable_2; get local constant
load $r2 data_NonConfigurable_107; load constant from data section
sw   $$locbase $r2 i2090      ; store word
addi $r2 $$locbase i3672      ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
addi $r0 $$locbase i3712      ; get offset to local
sw   $$locbase $r2 i464       ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i465       ; store word
addi $r2 $$locbase i3728      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15264               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i20760             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2090      ; load word
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22804             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3744      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3752      ; get offset to local
sw   $$locbase $r0 i469       ; store word
sw   $$locbase $one i470      ; store word
addi $r0 $$locbase i3784      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15280               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15280               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20660             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17696               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2212      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i16720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i15344               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_77; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16728               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
addi $r1 $$locbase i3816      ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
addi $r0 $$locbase i3856      ; get offset to local
sw   $$locbase $r1 i482       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i483       ; store word
addi $r1 $$locbase i3872      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i15296               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15296               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i20492             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16728               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i13904               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22944             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
addi $r0 $$locbase i3888      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i3896      ; get offset to local
sw   $$locbase $r0 i487       ; store word
sw   $$locbase $one i488      ; store word
addi $r0 $$locbase i3912      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15312               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15312               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20376             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17704               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2213      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_78; get local constant
load $r1 data_NonConfigurable_79; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16728               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
addi $r4 $$locbase i200       ; get offset to local
mcpi $r4 $r3 i32              ; copy memory
movi $r3 i16760               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
addi $r0 $$locbase i3928      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r1 $$locbase i3976      ; get offset to local
sw   $$locbase $r0 i497       ; store word
movi $r0 i28                  ; initialize constant into register
sw   $$locbase $r0 i498       ; store word
addi $r0 $$locbase i3992      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i15328               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i20220             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16760               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i13936               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22672             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
addi $r0 $$locbase i4024      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i4032      ; get offset to local
sw   $$locbase $r0 i504       ; store word
sw   $$locbase $one i505      ; store word
addi $r0 $$locbase i4048      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15344               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12032               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20104             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17712               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2214      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r1 data_NonConfigurable_80; get local constant
load $r2 data_NonConfigurable_81; get local constant
load $r3 data_NonConfigurable_2; get local constant
movi $r0 i16760               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r4 $$locbase i232       ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
movi $r0 i16792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i4064      ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
movi $r1 i4096                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i512       ; store word
movi $r0 i29                  ; initialize constant into register
sw   $$locbase $r0 i513       ; store word
movi $r0 i4112                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12048               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12048               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19940             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13968               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22392             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
movi $r0 i4128                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r3 i8               ; copy memory
movi $r1 i4144                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i518       ; store word
sw   $$locbase $one i519      ; store word
movi $r0 i4160                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12064               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12064               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19812             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2215      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_82; get local constant
load $r1 data_NonConfigurable_83; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16792               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
addi $r4 $$locbase i264       ; get offset to local
mcpi $r4 $r3 i32              ; copy memory
movi $r3 i16824               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
movi $r0 i4176                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i4208                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i526       ; store word
movi $r0 i30                  ; initialize constant into register
sw   $$locbase $r0 i527       ; store word
movi $r0 i4224                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i12080               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i19644             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16824               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14000               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22096             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
movi $r0 i4240                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4248                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i531       ; store word
sw   $$locbase $one i532      ; store word
movi $r0 i4264                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12096               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19516             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2216      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_84; get local constant
movi $r1 i16824               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i296       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i15376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_85; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16856               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i4296                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i4336                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i542       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i543       ; store word
movi $r1 i4352                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12112               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12112               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i19336             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16856               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14032               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21788             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
movi $r0 i4368                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4376                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i547       ; store word
sw   $$locbase $one i548      ; store word
movi $r0 i4392                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12128               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19208             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17736               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2217      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i16856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i328       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i15408               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_87; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16888               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i4408                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i4448                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i556       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i557       ; store word
movi $r1 i4464                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12144               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i19028             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14064               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22168             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_52
movi $r0 i4512                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4536                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i567       ; store word
sw   $$locbase $one i568      ; store word
movi $r0 i4632                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12160               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18900             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17744               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2218      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_84; get local constant
movi $r1 i16888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i360       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i15704               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_88; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16928               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i4648                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i4688                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i586       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i587       ; store word
movi $r1 i4704                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12176               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12176               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i18720             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16928               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14096               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21860             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_52
movi $r0 i4720                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4728                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i591       ; store word
sw   $$locbase $one i592      ; store word
movi $r0 i4744                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12192               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18592             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17752               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2219      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_89; get local constant
load $r1 data_NonConfigurable_90; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16928               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
addi $r4 $$locbase i392       ; get offset to local
mcpi $r4 $r3 i32              ; copy memory
movi $r3 i4760                ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i4928                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r3 i616       ; store word
sw   $$locbase $one i617      ; store word
movi $r3 i5056                ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
movi $r0 i16960               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r3 i16              ; copy memory
movi $r0 i5072                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i5104                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i638       ; store word
movi $r0 i26                  ; initialize constant into register
sw   $$locbase $r0 i639       ; store word
movi $r0 i5120                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12224               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i12224               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i18384             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16960               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14160               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22320             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_57
movi $r0 i5136                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i5144                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i643       ; store word
sw   $$locbase $one i644      ; store word
movi $r0 i5160                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12240               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18256             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17760               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2220      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_89; get local constant
load $r1 data_NonConfigurable_91; get local constant
movi $r2 i16960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i424       ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i5208                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i16976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r0 i5216                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i48              ; copy memory
movi $r1 i5264                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i658       ; store word
movi $r0 i42                  ; initialize constant into register
sw   $$locbase $r0 i659       ; store word
movi $r0 i5280                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12256               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12256               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18084             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19104               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2184      ; store word
movi $r0 i19104               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2459     ; store word
movi $r0 i18536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r0 i2457      ; store word
lw   $r0 $$locbase i2457      ; load word
movi $r1 i8                   ; initialize constant into register
aloc $r1                      ; aloc size
move $r2 $hp                  ; move dest hp
mcp  $hp $r0 $r1              ; mcp dest src size
sw   $$locbase $r2 i2312      ; store word
movi $r0 i18496               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i1472      ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i984       ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r1 i15936               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i2184      ; load word
movi $r2 i14176               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
movi $$tmp i21888             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_57
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5296                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5304                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i663       ; store word
sw   $$locbase $one i664      ; store word
movi $r1 i5320                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12272               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17816             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17776               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2222      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_89; get local constant
load $r1 data_NonConfigurable_92; get local constant
movi $r2 i16976               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i440       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i5336                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i5344                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i668       ; store word
sw   $$locbase $one i669      ; store word
movi $r2 i5376                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i5392                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r2 $r0 i16              ; get offset to aggregate element
sb   $r2 $zero i0             ; store byte
movi $r2 i16984               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
movi $r0 i5416                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i40              ; copy memory
movi $r1 i5456                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i682       ; store word
movi $r0 i33                  ; initialize constant into register
sw   $$locbase $r0 i683       ; store word
movi $r0 i5472                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12288               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12288               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17596             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19152               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
sw   $$locbase $r1 i2187      ; store word
addi $r0 $$locbase i1728      ; get offset to local
addi $r1 $$locbase i2456      ; get offset to local
sw   $$locbase $r0 i307       ; store word
sw   $$locbase $zero i308     ; store word
movi $r0 i4784                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14224               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14224               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11744               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
movi $$tmp i21676             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_tuple_62
addi $r0 $$locbase i1000      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17528               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19152               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i2321      ; store word
movi $r0 i19968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
lw   $r0 $$locbase i2321      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i21
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1344      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2192      ; get offset to local
sw   $$locbase $r1 i274       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i275       ; store word
movi $r1 i4552                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12304               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12304               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17332             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i19968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2321      ; load word
movi $r2 i14192               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21272             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_57
lw   $r0 $$locbase i2321      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2321      ; load word
movi $r1 i16088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17560               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i17560               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19152               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i16              ; get offset to aggregate element
lb   $r1 $r1 i0               ; load byte
movi $r2 i11960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
movi $$tmp i21612             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call field_65
addi $r0 $$locbase i1008      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17568               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i21764             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_66
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5488                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5496                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i687       ; store word
sw   $$locbase $one i688      ; store word
movi $r1 i5512                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12320               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17064             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17784               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2223      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_94; get local constant
movi $r1 i16984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i448       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i5528                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $zero i0             ; store byte
mul  $r2 $one $one            ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i17008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i2               ; copy memory
movi $r1 i5552                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i5592                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i699       ; store word
movi $r1 i33                  ; initialize constant into register
sw   $$locbase $r1 i700       ; store word
movi $r1 i5608                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12336               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12336               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i16880             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i17008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19176               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i2               ; copy memory
sw   $$locbase $r1 i2188      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21536             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1096      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2256    ; store word
movi $r0 i18048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18688               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2271      ; store word
lw   $r0 $$locbase i2336      ; load word
lw   $r1 $$locbase i2271      ; load word
lt   $r0 $r0 $r1
load $$tmp data_NonConfigurable_124; load far jump target address
jnzf $r0 $$tmp i0
movi $r0 i17536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i21760             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5624                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5632                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i704       ; store word
sw   $$locbase $one i705      ; store word
movi $r1 i5648                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12352               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12352               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i16628             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17792               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2224      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_96; get local constant
movi $r1 i17008               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i472       ; get offset to local
mcpi $r2 $r1 i2               ; copy memory
movi $r1 i5664                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $zero i0             ; store byte
mul  $r2 $one $one            ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $one i0              ; store byte
mul  $r2 $zero $one
add  $r1 $r1 $r2
movi $r2 i2                   ; initialize constant into register
sub  $r2 $r2 $zero
movi $r3 i5672                ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
sw   $$locbase $r1 i709       ; store word
sw   $$locbase $r2 i710       ; store word
addi $r1 $$locbase i1272      ; get offset to local
mcpi $r1 $r3 i16              ; copy memory
movi $r2 i17016               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i5696                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i5752                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i719       ; store word
movi $r1 i49                  ; initialize constant into register
sw   $$locbase $r1 i720       ; store word
movi $r1 i5768                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12368               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12384               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i16404             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i17016               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i2189      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21060             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1288      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17544               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2257    ; store word
movi $r0 i18056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19184               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i18792               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i18792               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i1296      ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i16256               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r1 i16256               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i16272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i16272               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i8         ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i16272               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i18096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
lw   $r1 $$locbase i2262      ; load word
movi $r2 i18912               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2286      ; store word
lw   $r0 $$locbase i2364      ; load word
lw   $r1 $$locbase i2286      ; load word
lt   $r0 $r0 $r1
load $$tmp data_NonConfigurable_125; load far jump target address
jnzf $r0 $$tmp i0
movi $r0 i17544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i21176             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5784                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5792                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i724       ; store word
sw   $$locbase $one i725      ; store word
movi $r1 i5808                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i4012         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17800               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2225      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_97; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17016               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i480       ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i5824                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i5856                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i732       ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i733       ; store word
movi $r2 i5888                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12416               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12416               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3975         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14320               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
movi $$tmp i21016             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_75
movi $r0 i5904                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i5912                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i739       ; store word
sw   $$locbase $one i740      ; store word
movi $r0 i5928                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12432               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12432               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3946         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2226      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_98; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i5944                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $zero i743     ; store word
movi $r3 i17032               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i5960                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i5992                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i749       ; store word
movi $r2 i30                  ; initialize constant into register
sw   $$locbase $r2 i750       ; store word
movi $r2 i6008                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12448               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3907         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17032               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i14400               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21224             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_78
movi $r0 i6024                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i6048                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i756       ; store word
sw   $$locbase $one i757      ; store word
movi $r0 i6064                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12464               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12464               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3875         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2227      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_99; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17032               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i496       ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i6080                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $one i760      ; store word
movi $r3 i17048               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i6096                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i6136                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i767       ; store word
movi $r2 i36                  ; initialize constant into register
sw   $$locbase $r2 i768       ; store word
movi $r2 i6152                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12480               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3832         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i14416               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20924             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_78
movi $r0 i6168                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i6176                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i772       ; store word
sw   $$locbase $one i773      ; store word
movi $r0 i6192                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12496               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3800         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17824               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2228      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17048               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i512       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i16096               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1904      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i16128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_100; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i17064               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i6208                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i6264                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i783       ; store word
movi $r1 i52                  ; initialize constant into register
sw   $$locbase $r1 i784       ; store word
movi $r1 i6280                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12512               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12512               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3750         ; [call]: call print_str_1
movi $r0 i17064               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14432               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21048             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_82
movi $r0 i6296                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i6304                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i788       ; store word
sw   $$locbase $one i789      ; store word
movi $r0 i6320                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3720         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17832               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2229      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17064               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i528       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i16160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1936      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i16192               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_101; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i17104               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i6336                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i6424                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i803       ; store word
movi $r1 i53                  ; initialize constant into register
sw   $$locbase $r1 i804       ; store word
movi $r1 i6440                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12560               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3672         ; [call]: call print_str_1
movi $r0 i17104               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14496               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21300             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_85
movi $r0 i6456                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i6464                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i808       ; store word
sw   $$locbase $one i809      ; store word
movi $r0 i6480                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12576               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3642         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17840               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2230      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_102; get local constant
movi $r1 i17104               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i560       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i6496                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i812     ; store word
movi $r2 i17136               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i6504                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i80              ; copy memory
movi $r0 i6584                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i823       ; store word
movi $r1 i75                  ; initialize constant into register
sw   $$locbase $r1 i824       ; store word
movi $r1 i6600                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12592               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12592               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3603         ; [call]: call print_str_1
movi $r0 i17136               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19232               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2036      ; store word
movi $r0 i19232               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11584               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2296    ; store word
lw   $r0 $$locbase i2352      ; load word
lw   $r1 $$locbase i2296      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i34
movi $r0 i11584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2275     ; store word
lw   $r0 $$locbase i2365      ; load word
lw   $r1 $$locbase i2275      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_104; get local constant
movi $r1 i6856                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i9920                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1240      ; store word
movi $r1 i16                  ; initialize constant into register
sw   $$locbase $r1 i1241      ; store word
movi $r1 i10280               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12624               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3547         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_103; get local constant
addi $r1 $$locbase i1968      ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i2472      ; get offset to local
sw   $$locbase $r1 i309       ; store word
movi $r1 i30                  ; initialize constant into register
sw   $$locbase $r1 i310       ; store word
movi $r1 i4800                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12608               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3527         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i6648                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i6656                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i832       ; store word
sw   $$locbase $one i833      ; store word
movi $r1 i6696                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12640               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12640               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3507         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17848               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2231      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i592       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i2000      ; get offset to local
movi $r2 i16224               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_12; get local constant
movi $r3 i32                  ; get array element size
mul  $r3 $zero $r3            ; get offset to array element
add  $r3 $r1 $r3              ; add array element offset to array base
mcpi $r3 $r2 i32              ; copy memory
movi $r2 i15440               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i32                  ; get array element size
mul  $r0 $one $r0             ; get offset to array element
add  $r0 $r1 $r0              ; add array element offset to array base
mcpi $r0 $r2 i32              ; copy memory
addi $r0 $$locbase i2488      ; get offset to local
mcpi $r0 $r1 i64              ; copy memory
movi $r1 i15472               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i64              ; copy memory
load $r0 data_NonConfigurable_4; get local constant
load $r2 data_NonConfigurable_5; get local constant
load $r3 data_NonConfigurable_6; get local constant
movi $r4 i17144               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r1 i64              ; copy memory
movi $r1 i6712                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i48              ; copy memory
movi $r0 i6760                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i845       ; store word
movi $r1 i46                  ; initialize constant into register
sw   $$locbase $r1 i846       ; store word
movi $r1 i6776                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r4 i12656               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
jal  $$reta $pc i3443         ; [call]: call print_str_1
movi $r0 i17144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r4 i19240               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i64              ; copy memory
sw   $$locbase $r1 i2037      ; store word
addi $r0 $$locbase i2064      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i2552      ; get offset to local
sw   $$locbase $r0 i319       ; store word
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i320       ; store word
movi $r0 i4816                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14320               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14336               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
movi $$tmp i19144             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
addi $r0 $$locbase i1320      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i9936                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1242      ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i1243      ; store word
movi $r1 i10296               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i19240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i19688               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
sw   $$locbase $r3 i2353      ; store word
movi $r0 i18112               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i19984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i64              ; copy memory
lw   $r0 $$locbase i2353      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1392      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2208      ; get offset to local
sw   $$locbase $r1 i276       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i277       ; store word
movi $r1 i4568                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12672               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3365         ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
movi $r1 i18112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12688               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i12688               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3353         ; [call]: call print_str_1
movi $r1 i6672                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8992                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1124      ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1125      ; store word
movi $r1 i10216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12704               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3334         ; [call]: call print_str_1
movi $r0 i19984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2353      ; load word
movi $r2 i18576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i64              ; copy memory
sw   $$locbase $r1 i2190      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11992               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i18000             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1328      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17552               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2258    ; store word
movi $r0 i18064               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2300      ; store word
lw   $r0 $$locbase i2330      ; load word
lw   $r1 $$locbase i2300      ; load word
lt   $r0 $r0 $r1
jnzf $r0 $zero i3165
movi $r0 i17552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i18228             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
lw   $r0 $$locbase i2353      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2353      ; load word
movi $r1 i15544               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i18424             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i6792                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i6800                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i850       ; store word
sw   $$locbase $one i851      ; store word
movi $r1 i6816                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12752               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12752               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3262         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2233      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_9; get local constant
movi $r1 i17144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i600       ; get offset to local
mcpi $r2 $r1 i64              ; copy memory
movi $r1 i6848                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i856     ; store word
movi $r2 i17208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i6976                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i72              ; copy memory
movi $r0 i7048                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i881       ; store word
movi $r1 i69                  ; initialize constant into register
sw   $$locbase $r1 i882       ; store word
movi $r1 i7064                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12768               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12768               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3223         ; [call]: call print_str_1
movi $r0 i17208               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19304               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2038      ; store word
movi $r0 i19304               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11592               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11592               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18832               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2303    ; store word
lw   $r0 $$locbase i2354      ; load word
lw   $r1 $$locbase i2303      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_10; get local constant
addi $r1 $$locbase i2072      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i2568      ; get offset to local
sw   $$locbase $r1 i321       ; store word
movi $r1 i18                  ; initialize constant into register
sw   $$locbase $r1 i322       ; store word
movi $r1 i4832                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12784               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12784               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3179         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7080                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7088                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i886       ; store word
sw   $$locbase $one i887      ; store word
movi $r1 i7104                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12800               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3159         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17872               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2234      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i17208               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i664       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2177    ; store word
lw   $r0 $$locbase i2177      ; load word
aloc $r0                      ; aloc size
addi $r0 $$locbase i1400      ; get offset to local
sw   $$locbase $hp i175       ; store word
sw   $$locbase $zero i176     ; store word
movi $r1 i15552               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i1488      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
sw   $$locbase $zero i188     ; store word
movi $r1 i15568               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
load $r0 data_NonConfigurable_11; get local constant
movi $r2 i17376               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $one              ; [call]: pass argument 1
movi $$tmp i19392             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call push_96
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
movi $r1 i2                   ; initialize constant into register
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i19360             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call push_96
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
movi $r1 i3                   ; initialize constant into register
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i19328             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call push_96
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i17216               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i7120                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i144             ; copy memory
movi $r0 i7272                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i909       ; store word
movi $r1 i139                 ; initialize constant into register
sw   $$locbase $r1 i910       ; store word
movi $r1 i7288                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12816               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12816               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3080         ; [call]: call print_str_1
movi $r0 i17216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19312               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
sw   $$locbase $r1 i2185      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11768               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i16980             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1016      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i18088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19312               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18840               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i18840               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1512      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
sw   $$locbase $zero i192     ; store word
movi $r0 i15592               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i11536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
movi $r0 i11536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r0 i2367      ; store word
lw   $r0 $$locbase i2367      ; load word
lw   $r0 $r0 i3               ; load word
lw   $r1 $$locbase i2367      ; load word
lw   $r1 $r1 i2               ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i19584             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call ge_106
jnzf $$retv $zero i49
lw   $r0 $$locbase i2367      ; load word
addi $r0 $r0 i24              ; get offset to aggregate element
movi $r1 i18664               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2305     ; store word
lw   $r0 $$locbase i2333      ; load word
lw   $r1 $$locbase i2305      ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i2367      ; load word
sw   $r1 $r0 i3               ; store word
addi $r0 $$locbase i2584      ; get offset to local
sw   $$locbase $one i323      ; store word
lw   $r1 $$locbase i2367      ; load word
lw   $r2 $$locbase i2367      ; load word
addi $r2 $r2 i24              ; get offset to aggregate element
movi $r3 i18888               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2279     ; store word
lw   $r2 $$locbase i2361      ; load word
lw   $r3 $$locbase i2279      ; load word
sub  $r2 $r2 $r3
movi $r3 i19048               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i24              ; copy memory
sw   $$locbase $r2 i2259      ; store word
movi $r1 i19048               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i18072               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i18648               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
movi $r1 i18160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i2331      ; load word
lw   $r2 $$locbase i2270      ; load word
add  $r1 $r1 $r2              ; add new ptr offset
sw   $$locbase $r1 i2362      ; store word
lw   $r1 $$locbase i2362      ; load word
lb   $r1 $r1 i0               ; lb r2 r1 i0
addi $r2 $r0 i15              ; get offset to aggregate element
sb   $r2 $r1 i0               ; store byte
movi $r1 i15624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
jmpf $zero i5
addi $r0 $$locbase i1416      ; get offset to local
sw   $$locbase $zero i177     ; store word
movi $r1 i15624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i11568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19112               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11712               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18696               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2287     ; store word
lw   $r0 $$locbase i2337      ; load word
lw   $r1 $$locbase i2287      ; load word
eq   $r0 $r0 $r1
move $r1 $zero                ; move parameter from branch to block argument
jnzf $r0 $zero i1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r1 $zero i53
movi $r0 i11568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19200               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19200               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11728               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2297     ; store word
lw   $r0 $$locbase i2351      ; load word
lw   $r1 $$locbase i2297      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i3
sw   $$locbase $zero i2176    ; store word
lw   $r0 $$locbase i2176      ; load word
rvrt $r0
movi $r0 i11728               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r0 $r0 i15              ; get offset to aggregate element
movi $r1 i19888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
movi $r0 i19888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r1 i17456               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sb   $r1 $r0 i0               ; store byte
movi $r0 i18088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17456               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lb   $r1 $r1 i0               ; load byte
movi $r2 i11792               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
movi $$tmp i16456             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call entry_70
addi $r0 $$locbase i1024      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
jmpb $zero i144
movi $r0 i18088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i16608             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7304                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7312                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i914       ; store word
sw   $$locbase $one i915      ; store word
movi $r1 i7328                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12832               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12832               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2870         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17880               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2235      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i672       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i15640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1568      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i15672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_13; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i17240               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i7344                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i64              ; copy memory
movi $r0 i7408                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i926       ; store word
movi $r1 i59                  ; initialize constant into register
sw   $$locbase $r1 i927       ; store word
movi $r1 i7424                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12848               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12848               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i2822         ; [call]: call print_str_1
movi $r0 i17240               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14560               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i18788             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_113
movi $r0 i7440                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i7464                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i933       ; store word
sw   $$locbase $one i934      ; store word
movi $r0 i7480                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2792         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2236      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_14; get local constant
movi $r1 i17240               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i696       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i7496                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $one i937      ; store word
movi $r2 i17272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i7504                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i72              ; copy memory
movi $r0 i7576                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i947       ; store word
movi $r1 i66                  ; initialize constant into register
sw   $$locbase $r1 i948       ; store word
movi $r1 i7592                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12880               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12880               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2753         ; [call]: call print_str_1
movi $r0 i17272               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19344               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2042      ; store word
movi $r0 i19344               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11600               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2306    ; store word
lw   $r0 $$locbase i2358      ; load word
lw   $r1 $$locbase i2306      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i34
movi $r0 i11600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18944               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2280     ; store word
lw   $r0 $$locbase i2368      ; load word
lw   $r1 $$locbase i2280      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_16; get local constant
movi $r1 i6880                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i9952                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1244      ; store word
movi $r1 i17                  ; initialize constant into register
sw   $$locbase $r1 i1245      ; store word
movi $r1 i10312               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12944               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12944               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2697         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_15; get local constant
addi $r1 $$locbase i1600      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i2600      ; get offset to local
sw   $$locbase $r1 i325       ; store word
movi $r1 i22                  ; initialize constant into register
sw   $$locbase $r1 i326       ; store word
movi $r1 i4848                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12928               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2677         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7608                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7616                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i952       ; store word
sw   $$locbase $one i953      ; store word
movi $r1 i7632                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12960               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2657         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17896               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2237      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17272               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i728       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i7664                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i958     ; store word
movi $r2 i15736               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i1624      ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
movi $r2 i15768               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_18; get local constant
addi $r3 $r1 i8               ; get offset to aggregate element
mcpi $r3 $r2 i32              ; copy memory
movi $r2 i17280               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i40              ; copy memory
movi $r1 i7704                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i72              ; copy memory
movi $r0 i7776                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i972       ; store word
movi $r1 i72                  ; initialize constant into register
sw   $$locbase $r1 i973       ; store word
movi $r1 i7792                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12976               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2606         ; [call]: call print_str_1
movi $r0 i17280               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19352               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
sw   $$locbase $r1 i2043      ; store word
movi $r0 i19352               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i11608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18872               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2307    ; store word
lw   $r0 $$locbase i2359      ; load word
lw   $r1 $$locbase i2307      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i99
movi $r0 i11608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19072               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2281     ; store word
lw   $r0 $$locbase i2384      ; load word
lw   $r1 $$locbase i2281      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_19; get local constant
movi $r1 i11608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i20112               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i6904                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9968                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1246      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1247      ; store word
movi $r1 i10328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14256               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14256               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11760               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i3589         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1040      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i20112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19760               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r2 i2391      ; store word
movi $r0 i20144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
lw   $r0 $$locbase i2391      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1664      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2664      ; get offset to local
sw   $$locbase $r1 i333       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i334       ; store word
movi $r1 i4944                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2507         ; [call]: call print_str_1
movi $r0 i20144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2391      ; load word
movi $r2 i14592               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i17532             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_113
lw   $r0 $$locbase i2391      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2391      ; load word
movi $r1 i15808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i3638         ; [call]: call finish_66
jmpf $zero i84
load $r0 data_NonConfigurable_19; get local constant
movi $r1 i11608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i19920               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
addi $r1 $$locbase i1656      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2616      ; get offset to local
sw   $$locbase $r1 i327       ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i328       ; store word
movi $r1 i4864                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14240               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11752               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i3504         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1032      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19752               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r2 i2369      ; store word
movi $r0 i20080               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
lw   $r0 $$locbase i2369      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1432      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2224      ; get offset to local
sw   $$locbase $r1 i278       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i279       ; store word
movi $r1 i4584                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12992               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12992               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2422         ; [call]: call print_str_1
movi $r0 i20080               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2369      ; load word
movi $r2 i14464               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i3936         ; [call]: call fmt_82
noop                          ; [call]: call fmt_82
noop                          ; [call]: call fmt_82
lw   $r0 $$locbase i2369      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2369      ; load word
movi $r1 i15800               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19704               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i3553         ; [call]: call finish_66
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7808                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7816                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i977       ; store word
sw   $$locbase $one i978      ; store word
movi $r1 i7832                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13024               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13024               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2380         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17904               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2238      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_20; get local constant
movi $r1 i17280               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i736       ; get offset to local
mcpi $r2 $r1 i40              ; copy memory
movi $r1 i7848                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i981     ; store word
movi $r2 i17320               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i7856                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i48              ; copy memory
movi $r0 i7904                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i988       ; store word
movi $r1 i47                  ; initialize constant into register
sw   $$locbase $r1 i989       ; store word
movi $r1 i7920                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13040               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13040               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2341         ; [call]: call print_str_1
movi $r0 i17320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19392               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2044      ; store word
movi $r0 i19392               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11648               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18880               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2308    ; store word
lw   $r0 $$locbase i2360      ; load word
lw   $r1 $$locbase i2308      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i67
movi $r0 i11648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18960               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2282     ; store word
lw   $r0 $$locbase i2370      ; load word
lw   $r1 $$locbase i2282      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i35
movi $r0 i11648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2288      ; store word
lw   $r0 $$locbase i2385      ; load word
lw   $r1 $$locbase i2288      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_23; get local constant
movi $r1 i10640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10840               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1355      ; store word
movi $r1 i7                   ; initialize constant into register
sw   $$locbase $r1 i1356      ; store word
movi $r1 i11112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13104               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2274         ; [call]: call print_str_1
jmpf $zero i41
load $r0 data_NonConfigurable_22; get local constant
movi $r1 i6912                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9984                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1248      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1249      ; store word
movi $r1 i10344               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13072               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13072               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2252         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_21; get local constant
addi $r1 $$locbase i1672      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2632      ; get offset to local
sw   $$locbase $r1 i329       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i330       ; store word
movi $r1 i4880                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13056               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2232         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7936                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7944                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i993       ; store word
sw   $$locbase $one i994      ; store word
movi $r1 i7960                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13120               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13120               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2212         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17912               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2239      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17320               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i776       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i15816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1680      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i15848               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_24; get local constant
load $r2 data_NonConfigurable_25; get local constant
load $r3 data_NonConfigurable_26; get local constant
load $r4 data_NonConfigurable_27; get local constant
movi $r6 i7976                ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
sw   $$locbase $one i997      ; store word
addi $r7 $r6 i8               ; get offset to aggregate element
mcpi $r7 $r1 i32              ; copy memory
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1002      ; store word
movi $r1 i17328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r6 i48              ; copy memory
movi $r1 i8024                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i136             ; copy memory
movi $r0 i8160                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1020      ; store word
movi $r1 i130                 ; initialize constant into register
sw   $$locbase $r1 i1021      ; store word
movi $r1 i8208                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13136               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r6 i13136               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r6               ; [call]: pass argument 1
jal  $$reta $pc i2153         ; [call]: call print_str_1
movi $r0 i17328               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r6 i19400               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r0 i48              ; copy memory
sw   $$locbase $r1 i2045      ; store word
addi $r0 $$locbase i1712      ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r1 $$locbase i2680      ; get offset to local
sw   $$locbase $r0 i335       ; store word
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i336       ; store word
movi $r0 i4896                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14352               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14352               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11808               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i3497         ; [call]: call debug_struct_77
addi $r0 $$locbase i1048      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6920                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i10000               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1250      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1251      ; store word
movi $r1 i10360               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
lw   $r2 $$locbase i2425      ; load word
movi $r3 i19824               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i14624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i11832               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r1               ; [call]: pass argument 3
jal  $$reta $pc i4047         ; [call]: call field_120
noop                          ; [call]: call field_120
noop                          ; [call]: call field_120
addi $r0 $$locbase i1056      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i10648               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r4 i8               ; copy memory
movi $r2 i10856               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1357      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1358      ; store word
movi $r1 i11128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i19400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r2 $r2 i8               ; get offset to aggregate element
movi $r3 i19712               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
sw   $$locbase $r3 i2338      ; store word
movi $r0 i18128               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i20176               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
lw   $r0 $$locbase i2338      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1440      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i3032      ; get offset to local
sw   $$locbase $r1 i379       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i380       ; store word
movi $r1 i4600                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13152               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13152               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2047         ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
movi $r1 i18128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13168               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i13168               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i2035         ; [call]: call print_str_1
movi $r1 i6680                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9008                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1126      ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1127      ; store word
movi $r1 i10232               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13184               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2016         ; [call]: call print_str_1
movi $r0 i20176               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2338      ; load word
movi $r2 i14528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i3671         ; [call]: call fmt_85
lw   $r0 $$locbase i2338      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2338      ; load word
movi $r1 i15880               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_28; get local constant
movi $r2 i11368               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i2240      ; get offset to local
sw   $$locbase $r2 i280       ; store word
movi $r2 i3                   ; initialize constant into register
sw   $$locbase $r2 i281       ; store word
addi $r2 $$locbase i2696      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
lw   $r0 $$locbase i2430      ; load word
movi $r3 i19768               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
movi $r1 i14640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i11840               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
move $$arg3 $r2               ; [call]: pass argument 3
jal  $$reta $pc i3925         ; [call]: call field_120
noop                          ; [call]: call field_120
noop                          ; [call]: call field_120
addi $r0 $$locbase i1064      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i3290         ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8224                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8232                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1029      ; store word
sw   $$locbase $one i1030     ; store word
movi $r1 i8248                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13200               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13200               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1947         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2240      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_30; get local constant
movi $r1 i17328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i784       ; get offset to local
mcpi $r2 $r1 i48              ; copy memory
movi $r1 i8264                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $one i1033     ; store word
addi $r2 $r1 i15              ; get offset to aggregate element
sb   $r2 $one i0              ; store byte
movi $r2 i16408               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8280                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i8336                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1042      ; store word
movi $r1 i53                  ; initialize constant into register
sw   $$locbase $r1 i1043      ; store word
movi $r1 i8352                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13216               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1906         ; [call]: call print_str_1
movi $r0 i16408               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19448               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i2046      ; store word
movi $r0 i19448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18712               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2309    ; store word
lw   $r0 $$locbase i2339      ; load word
lw   $r1 $$locbase i2309      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i64
movi $r0 i11656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18968               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2283     ; store word
lw   $r0 $$locbase i2371      ; load word
lw   $r1 $$locbase i2283      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_32; get local constant
movi $r1 i11656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i15              ; get offset to aggregate element
movi $r2 i19952               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i1               ; copy memory
movi $r1 i6928                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10016               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1252      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1253      ; store word
movi $r1 i10376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14272               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11848               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i2889         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1072      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19952               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lb   $r1 $r1 i0               ; load byte
movi $r2 i19832               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i11968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i2931         ; [call]: call field_65
addi $r0 $$locbase i1080      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2973         ; [call]: call finish_66
jmpf $zero i19
load $r0 data_NonConfigurable_31; get local constant
addi $r1 $$locbase i1728      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2712      ; get offset to local
sw   $$locbase $r1 i339       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i340       ; store word
movi $r1 i4912                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13232               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13232               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1800         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8368                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8392                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1049      ; store word
sw   $$locbase $one i1050     ; store word
movi $r1 i8408                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13248               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13248               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1780         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17928               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2241      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_33; get local constant
movi $r1 i16408               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i832       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8424                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i1053    ; store word
movi $r2 i16424               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i8432                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i8488                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1061      ; store word
movi $r1 i49                  ; initialize constant into register
sw   $$locbase $r1 i1062      ; store word
movi $r1 i8504                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13280               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1741         ; [call]: call print_str_1
movi $r0 i16424               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19464               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2047      ; store word
movi $r0 i19464               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2289    ; store word
lw   $r0 $$locbase i2340      ; load word
lw   $r1 $$locbase i2289      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i128
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2284     ; store word
lw   $r0 $$locbase i2372      ; load word
lw   $r1 $$locbase i2284      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i96
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2290      ; store word
lw   $r0 $$locbase i2386      ; load word
lw   $r1 $$locbase i2290      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i63
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i3                   ; initialize constant into register
sw   $$locbase $r0 i2298      ; store word
lw   $r0 $$locbase i2392      ; load word
lw   $r1 $$locbase i2298      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i32
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i2301      ; store word
lw   $r0 $$locbase i2402      ; load word
lw   $r1 $$locbase i2301      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_36; get local constant
addi $r1 $$locbase i3048      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i3240      ; get offset to local
sw   $$locbase $r1 i405       ; store word
movi $r1 i15                  ; initialize constant into register
sw   $$locbase $r1 i406       ; store word
addi $r1 $$locbase i3424      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13360               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13360               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1655         ; [call]: call print_str_1
jmpf $zero i83
load $r0 data_NonConfigurable_35; get local constant
movi $r1 i11376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2256      ; get offset to local
sw   $$locbase $r1 i282       ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i283       ; store word
addi $r1 $$locbase i2744      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13344               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13344               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1635         ; [call]: call print_str_1
jmpf $zero i63
load $r0 data_NonConfigurable_34; get local constant
movi $r1 i10656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10872               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1359      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1360      ; store word
movi $r1 i11144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13328               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13328               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1613         ; [call]: call print_str_1
jmpf $zero i41
load $r0 data_NonConfigurable_22; get local constant
movi $r1 i6936                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10032               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1254      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1255      ; store word
movi $r1 i10392               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13312               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13312               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1591         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_21; get local constant
addi $r1 $$locbase i1736      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2728      ; get offset to local
sw   $$locbase $r1 i341       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i342       ; store word
movi $r1 i4960                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13296               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13296               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1571         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8520                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8528                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1066      ; store word
sw   $$locbase $one i1067     ; store word
movi $r1 i8544                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13376               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13376               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1551         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17936               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2242      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16424               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i848       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i1744      ; get offset to local
sw   $$locbase $zero i218     ; store word
sw   $$locbase $one i219      ; store word
movi $r1 i15888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
load $r0 data_NonConfigurable_37; get local constant
movi $r2 i16432               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8576                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
movi $r0 i8608                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1076      ; store word
movi $r1 i26                  ; initialize constant into register
sw   $$locbase $r1 i1077      ; store word
movi $r1 i8624                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13392               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13392               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1509         ; [call]: call print_str_1
movi $r0 i16432               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19472               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i2048      ; store word
movi $r0 i19472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11680               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2291    ; store word
lw   $r0 $$locbase i2341      ; load word
lw   $r1 $$locbase i2291      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i62
movi $r0 i11680               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2285     ; store word
lw   $r0 $$locbase i2373      ; load word
lw   $r1 $$locbase i2285      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_38; get local constant
movi $r1 i11680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i20208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i6944                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1256      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1257      ; store word
movi $r1 i10408               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14304               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14304               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11952               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i2492         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1112      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
lw   $r1 $$locbase i2526      ; load word
movi $r2 i19776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i11888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i3458         ; [call]: call field_126
addi $r0 $$locbase i1120      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2578         ; [call]: call finish_66
jmpf $zero i47
load $r0 data_NonConfigurable_38; get local constant
movi $r1 i11680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i19960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i1760      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2760      ; get offset to local
sw   $$locbase $r1 i345       ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i346       ; store word
movi $r1 i4976                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14288               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14288               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11944               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i2444         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1088      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
lw   $r1 $$locbase i2495      ; load word
movi $r2 i19840               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i11880               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i3410         ; [call]: call field_126
addi $r0 $$locbase i1104      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2530         ; [call]: call finish_66
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8640                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8648                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1081      ; store word
sw   $$locbase $one i1082     ; store word
movi $r1 i8664                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13408               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13408               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1357         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17952               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2244      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_39; get local constant
movi $r1 i16432               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i856       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8680                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8688                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1086      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1087      ; store word
movi $r1 i8704                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i18544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i18544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i13888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1396         ; [call]: call len_4
sw   $$locbase $$retv i2460   ; store word
movi $r0 i18544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i13872               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1365         ; [call]: call as_ptr_3
sw   $$locbase $$retv i2458   ; store word
movi $r0 i19664               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i18512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i17424               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i18512               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17424               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
sw   $$locbase $one i2292     ; store word
lw   $r1 $$locbase i2436      ; load word
lw   $r2 $$locbase i2292      ; load word
mul  $r1 $r1 $r2
addi $r2 $$locbase i1448      ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i182       ; store word
movi $r0 i18480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r0 i18480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1128      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i15904               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i19608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i14720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i3334         ; [call]: call number_of_bytes_130
sw   $$locbase $$retv i2175   ; store word
movi $r0 i17400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17432               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2179      ; load word
aloc $r0                      ; aloc size
sw   $$locbase $hp i2313      ; store word
movi $r0 i17400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18736               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2276    ; store word
lw   $r0 $$locbase i2342      ; load word
lw   $r1 $$locbase i2276      ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i45
movi $r0 i19624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i18672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19640               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1144      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i15952               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
addi $r1 $$locbase i1360      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i170       ; load word
movi $r1 i18504               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i17400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r0 i2374      ; store word
movi $r0 i17448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i17440               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r0 i17440               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2274     ; store word
lw   $r0 $$locbase i2332      ; load word
lw   $r1 $$locbase i2274      ; load word
mul  $r0 $r0 $r1
sw   $$locbase $r0 i2263      ; store word
lw   $r0 $$locbase i2181      ; load word
lw   $r1 $$locbase i2374      ; load word
lw   $r2 $$locbase i2263      ; load word
mcp  $r0 $r1 $r2              ; mcp dst src len
movi $r0 i18504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17400               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i1376      ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i15968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r1 i19608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14736               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
jal  $$reta $pc i3251         ; [call]: call number_of_bytes_130
move $r1 $$retv               ; [call]: copy the return value
addi $r2 $$locbase i1544      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i195       ; store word
movi $r0 i15984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
addi $r1 $$locbase i1768      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i16008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
load $r1 data_NonConfigurable_40; get local constant
movi $r2 i16448               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
movi $r0 i8728                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i72              ; copy memory
movi $r1 i8800                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1100      ; store word
movi $r0 i67                  ; initialize constant into register
sw   $$locbase $r0 i1101      ; store word
movi $r0 i8816                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13424               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13424               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1142         ; [call]: call print_str_1
movi $r0 i16448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
sw   $$locbase $r1 i2186      ; store word
movi $r0 i19496               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18744               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
lw   $r0 $$locbase i2343      ; load word
movi $r1 i19496               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19000               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
lw   $r1 $$locbase i2377      ; load word
addi $r2 $$locbase i1792      ; get offset to local
sw   $$locbase $r0 i224       ; store word
sw   $$locbase $r1 i225       ; store word
addi $r0 $$locbase i1160      ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r1 i18520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14224               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i2131         ; [call]: call print_string_quotes_58
movi $r0 i18520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i13440               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13456               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1100         ; [call]: call print_str_1
movi $r0 i14224               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i2117         ; [call]: call print_string_quotes_58
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8832                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8840                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1105      ; store word
sw   $$locbase $one i1106     ; store word
movi $r1 i8856                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13472               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1076         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17960               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2245      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_41; get local constant
movi $r1 i16448               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i872       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i8872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i1109    ; store word
movi $r2 i16472               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i8880                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i8960                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1120      ; store word
movi $r1 i51                  ; initialize constant into register
sw   $$locbase $r1 i1121      ; store word
movi $r1 i8976                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13488               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1037         ; [call]: call print_str_1
movi $r0 i16472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2049      ; store word
movi $r0 i19520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11696               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18768               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2293    ; store word
lw   $r0 $$locbase i2346      ; load word
lw   $r1 $$locbase i2293      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i158
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19024               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2277     ; store word
lw   $r0 $$locbase i2378      ; load word
lw   $r1 $$locbase i2277      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i126
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19096               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2294      ; store word
lw   $r0 $$locbase i2387      ; load word
lw   $r1 $$locbase i2294      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i93
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i3                   ; initialize constant into register
sw   $$locbase $r0 i2299      ; store word
lw   $r0 $$locbase i2393      ; load word
lw   $r1 $$locbase i2299      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i62
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19224               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i2302      ; store word
lw   $r0 $$locbase i2403      ; load word
lw   $r1 $$locbase i2302      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i32
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19336               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5                   ; initialize constant into register
sw   $$locbase $r0 i2304      ; store word
lw   $r0 $$locbase i2417      ; load word
lw   $r1 $$locbase i2304      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_48; get local constant
addi $r1 $$locbase i3632      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i3800      ; get offset to local
sw   $$locbase $r1 i475       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i476       ; store word
addi $r1 $$locbase i4008      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13584               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i940          ; [call]: call print_str_1
jmpf $zero i102
load $r0 data_NonConfigurable_47; get local constant
addi $r1 $$locbase i3064      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i3256      ; get offset to local
sw   $$locbase $r1 i407       ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i408       ; store word
addi $r1 $$locbase i3440      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13568               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i921          ; [call]: call print_str_1
jmpf $zero i83
load $r0 data_NonConfigurable_46; get local constant
movi $r1 i11384               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2272      ; get offset to local
sw   $$locbase $r1 i284       ; store word
movi $r1 i7                   ; initialize constant into register
sw   $$locbase $r1 i285       ; store word
addi $r1 $$locbase i2792      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13552               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i901          ; [call]: call print_str_1
jmpf $zero i63
load $r0 data_NonConfigurable_45; get local constant
movi $r1 i10664               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1361      ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i1362      ; store word
movi $r1 i11160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13536               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i879          ; [call]: call print_str_1
jmpf $zero i41
load $r0 data_NonConfigurable_44; get local constant
movi $r1 i6952                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10080               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1260      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1261      ; store word
movi $r1 i10424               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i857          ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_42; get local constant
addi $r1 $$locbase i1808      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2776      ; get offset to local
sw   $$locbase $r1 i347       ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i348       ; store word
movi $r1 i4992                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i837          ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9040                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9048                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1131      ; store word
sw   $$locbase $one i1132     ; store word
movi $r1 i9064                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13600               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i817          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17968               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2246      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i896       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i1816      ; get offset to local
sw   $$locbase $zero i227     ; store word
sw   $$locbase $zero i228     ; store word
movi $r1 i16032               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
load $r0 data_NonConfigurable_49; get local constant
load $r2 data_NonConfigurable_50; get local constant
load $r3 data_NonConfigurable_51; get local constant
load $r4 data_NonConfigurable_52; get local constant
movi $r6 i16480               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r1 i16              ; copy memory
movi $r1 i9080                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i48              ; copy memory
movi $r0 i9128                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1141      ; store word
movi $r1 i46                  ; initialize constant into register
sw   $$locbase $r1 i1142      ; store word
movi $r1 i9144                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13616               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r6 i13632               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r6               ; [call]: pass argument 1
jal  $$reta $pc i769          ; [call]: call print_str_1
movi $r0 i16480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r6 i19528               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r0 i16              ; copy memory
sw   $$locbase $r1 i2039      ; store word
addi $r0 $$locbase i1832      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i2808      ; get offset to local
sw   $$locbase $r0 i351       ; store word
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i352       ; store word
movi $r0 i5008                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14368               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14368               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11816               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i2113         ; [call]: call debug_struct_77
addi $r0 $$locbase i1176      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6960                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i10096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1262      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1263      ; store word
movi $r1 i10456               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
lw   $r2 $$locbase i2441      ; load word
movi $r3 i19848               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i14656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i11856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r1               ; [call]: pass argument 3
jal  $$reta $pc i2663         ; [call]: call field_120
addi $r0 $$locbase i1184      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i10672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r4 i8               ; copy memory
movi $r2 i10904               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1363      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1364      ; store word
movi $r1 i11176               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
lw   $r2 $$locbase i2442      ; load word
movi $r3 i19736               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i14672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i11864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r1               ; [call]: pass argument 3
jal  $$reta $pc i2636         ; [call]: call field_120
addi $r0 $$locbase i1192      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19784               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2003         ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9160                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9184                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1148      ; store word
sw   $$locbase $one i1149     ; store word
movi $r1 i9200                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13648               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i660          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2247      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_53; get local constant
movi $r1 i16480               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i904       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i9216                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i1152    ; store word
movi $r2 i16496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i9224                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i64              ; copy memory
movi $r0 i9288                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1161      ; store word
movi $r1 i61                  ; initialize constant into register
sw   $$locbase $r1 i1162      ; store word
movi $r1 i9304                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13664               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13664               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i621          ; [call]: call print_str_1
movi $r0 i16496               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19544               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2040      ; store word
movi $r0 i19544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11704               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11704               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18776               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2295    ; store word
lw   $r0 $$locbase i2347      ; load word
lw   $r1 $$locbase i2295      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_54; get local constant
addi $r1 $$locbase i1840      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i2824      ; get offset to local
sw   $$locbase $r1 i353       ; store word
movi $r1 i15                  ; initialize constant into register
sw   $$locbase $r1 i354       ; store word
movi $r1 i5024                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13680               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13680               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i577          ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9320                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9328                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1166      ; store word
sw   $$locbase $one i1167     ; store word
movi $r1 i9344                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13696               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i557          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2248      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_55; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i920       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i11896               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
jal  $$reta $pc i2630         ; [call]: call new_143
addi $r2 $$locbase i1200      ; get offset to local
mcpi $r2 $$retv i24           ; copy memory
movi $r3 i19864               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i24              ; copy memory
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $one              ; [call]: pass argument 1
jal  $$reta $pc i2660         ; [call]: call push_146
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
movi $r2 i2                   ; initialize constant into register
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2654         ; [call]: call push_146
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
movi $r2 i3                   ; initialize constant into register
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2648         ; [call]: call push_146
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i16504               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i24              ; copy memory
movi $r2 i9360                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i128             ; copy memory
movi $r0 i9488                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1186      ; store word
movi $r2 i125                 ; initialize constant into register
sw   $$locbase $r2 i1187      ; store word
movi $r2 i9504                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13712               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i491          ; [call]: call print_str_1
movi $r0 i16504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i14752               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i24              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2767         ; [call]: call fmt_152
movi $r0 i9520                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i9528                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1191      ; store word
sw   $$locbase $one i1192     ; store word
movi $r0 i9544                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13728               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i463          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i17992               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2249      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i928       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i11920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i2540         ; [call]: call new_143
addi $r0 $$locbase i1232      ; get offset to local
mcpi $r0 $$retv i24           ; copy memory
movi $r1 i19896               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $one              ; [call]: pass argument 1
jal  $$reta $pc i2570         ; [call]: call push_146
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i2                   ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i2564         ; [call]: call push_146
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i3                   ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i2558         ; [call]: call push_146
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19552               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i19552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1864      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
sw   $$locbase $zero i236     ; store word
movi $r0 i16048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
load $r1 data_NonConfigurable_56; get local constant
load $r2 data_NonConfigurable_57; get local constant
load $r3 data_NonConfigurable_58; get local constant
movi $r4 i16528               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
movi $r0 i9560                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i136             ; copy memory
movi $r1 i9696                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1212      ; store word
movi $r0 i132                 ; initialize constant into register
sw   $$locbase $r0 i1213      ; store word
movi $r0 i9744                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13744               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r4 i13744               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
jal  $$reta $pc i384          ; [call]: call print_str_1
movi $r0 i16528               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r4 i19576               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
sw   $$locbase $r1 i2041      ; store word
addi $r0 $$locbase i1896      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i2840      ; get offset to local
sw   $$locbase $r0 i355       ; store word
movi $r0 i7                   ; initialize constant into register
sw   $$locbase $r0 i356       ; store word
movi $r0 i5040                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14384               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14384               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11824               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i1728         ; [call]: call debug_struct_77
addi $r0 $$locbase i1256      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6968                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i10112               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1264      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1265      ; store word
movi $r1 i10472               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i19576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i19856               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
sw   $$locbase $r3 i2348      ; store word
movi $r0 i18144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i20216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
lw   $r0 $$locbase i2348      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1464      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2288      ; get offset to local
sw   $$locbase $r1 i286       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i287       ; store word
movi $r1 i4616                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13760               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13760               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i308          ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
movi $r1 i18144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i13776               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i296          ; [call]: call print_str_1
movi $r1 i6688                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9024                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1128      ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1129      ; store word
movi $r1 i10248               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13808               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i277          ; [call]: call print_str_1
movi $r0 i20216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2348      ; load word
movi $r2 i14776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i2554         ; [call]: call fmt_152
lw   $r0 $$locbase i2348      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2348      ; load word
movi $r1 i16080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_60; get local constant
movi $r2 i10680               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i10920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1365      ; store word
movi $r2 i5                   ; initialize constant into register
sw   $$locbase $r2 i1366      ; store word
movi $r2 i11192               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
lw   $r0 $$locbase i2450      ; load word
movi $r3 i19744               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
movi $r1 i14688               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i11872               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
move $$arg3 $r2               ; [call]: pass argument 3
jal  $$reta $pc i2184         ; [call]: call field_120
addi $r0 $$locbase i1264      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19792               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1551         ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9760                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9768                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1221      ; store word
sw   $$locbase $one i1222     ; store word
movi $r1 i9784                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13824               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13824               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i208          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i18000               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2250      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_61; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i952       ; get offset to local
mcpi $r3 $r2 i32              ; copy memory
movi $r2 i11                  ; initialize constant into register
sw   $$locbase $r2 i2070      ; store word
movi $r2 i9800                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i9832                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1229      ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i1230      ; store word
movi $r2 i9848                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13840               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13840               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i171          ; [call]: call print_str_1
lw   $r0 $$locbase i2070      ; load word
movi $r2 i17488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i684          ; [call]: call fmt_38
movi $r0 i9864                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i9872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1234      ; store word
sw   $$locbase $one i1235     ; store word
movi $r0 i9904                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13856               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i147          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
movi $r1 i18008               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2251      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
lw   $r0 $$locbase i2070      ; load word
move $$retv $r0               ; set return value
jmpf $zero i130
movi $r0 i17552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18576               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lw   $r2 $$locbase i2258      ; load word
movi $r3 i32                  ; get array element size
mul  $r2 $r2 $r3              ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sw   $$locbase $r0 i2366      ; store word
movi $r0 i20048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
lw   $r0 $$locbase i2366      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1352      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2160      ; get offset to local
sw   $$locbase $r1 i270       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i271       ; store word
movi $r1 i4520                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12720               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12736               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i101          ; [call]: call print_str_1
movi $r0 i20048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2366      ; load word
movi $r2 i14128               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i889          ; [call]: call fmt_52
lw   $r0 $$locbase i2366      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2366      ; load word
movi $r1 i15536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i18064               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19040               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2278     ; store word
lw   $r0 $$locbase i2380      ; load word
lw   $r1 $$locbase i2278      ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i2258      ; store word
jmpb $zero i3238
lw   $r0 $$locbase i2398
lw   $r1 $$locbase i2257      ; load word
mul  $r1 $r1 $one
add  $r0 $r0 $r1
sw   $$locbase $r0 i232       ; store word
lw   $r0 $$locbase i232       ; load word
movi $r1 i18080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
movi $r0 i17544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lb   $r1 $r1 i0               ; load byte
movi $r2 i11784               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i1264         ; [call]: call entry_70
addi $r0 $$locbase i1312      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17544               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i18056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19032               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2273     ; store word
lw   $r0 $$locbase i2379      ; load word
lw   $r1 $$locbase i2273      ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i2257      ; store word
jmpb $zero i4039
movi $r0 i17536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19176               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lw   $r2 $$locbase i2256      ; load word
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
lb   $r1 $r2 i0               ; load byte
movi $r2 i11776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i1234         ; [call]: call entry_70
addi $r0 $$locbase i1224      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i18048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18904               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2272     ; store word
lw   $r0 $$locbase i2363      ; load word
lw   $r1 $$locbase i2272      ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i2256      ; store word
jmpb $zero i4188
cfsi i20240                   ; free 20240 bytes for locals and 0 slots for extra call arguments
move $$reta $r5               ; restore return address
poph i524288                  ; restore registers 40..64
popl i255                     ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function print_str_1
cfei i48                      ; allocate 48 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $$arg1 i16           ; copy memory
addr $r1 data_NonConfigurable_105; get constant's address in data section
lw   $r1 $r1 i0               ; load word
addi $r2 $$locbase i32        ; get offset to local
mcpi $$locbase $r2 i16        ; copy memory
move $$arg0 $$locbase         ; [call]: pass argument 0
jal  $$reta $pc i38           ; [call]: call as_ptr_3
move $r2 $$retv               ; [call]: copy the return value
addi $r3 $$locbase i32        ; get offset to local
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
jal  $$reta $pc i55           ; [call]: call len_4
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $$retv            ; [call]: pass argument 2
jal  $$reta $pc i7            ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i48                      ; free 48 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function syscall_write_2
cfei i24                      ; allocate 24 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (buf)
move $r1 $$arg2               ; save argument 2 (count)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i2      ; store word
sw   $$locbase $r0 i0         ; store word
sw   $$locbase $r1 i1         ; store word
lw   $r0 $$locbase i2         ; load word
lw   $r1 $$locbase i0         ; load word
lw   $r3 $$locbase i1         ; load word
movi $r4 i1000                ; initialize constant into register
ecal $r4 $r0 $r1 $r3          ; ecal id fd buf count
move $$retv $zero             ; set return value
cfsi i24                      ; free 24 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function as_ptr_3
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i56        ; get offset to local
mcpi $r1 $$arg0 i16           ; copy memory
addi $r1 $$locbase i56        ; get offset to local
mcpi $$locbase $r1 i16        ; copy memory
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
addi $r2 $$locbase i48        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
lw   $r1 $$locbase i6         ; load word
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function len_4
cfei i56                      ; allocate 56 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $$arg0 i16           ; copy memory
addi $r1 $$locbase i40        ; get offset to local
mcpi $$locbase $r1 i16        ; copy memory
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
addi $r2 $$locbase i8         ; get offset to aggregate element
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i1         ; load word
move $$retv $r1               ; set return value
cfsi i56                      ; free 56 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_8
cfei i128                     ; allocate 128 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i120       ; get offset to local
sb   $r2 $$arg0 i0            ; store byte
sw   $$locbase $r0 i14        ; store word
addi $r0 $$locbase i120       ; get offset to local
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i18
load $r0 data_NonConfigurable_110; get local constant
addi $r2 $$locbase i40        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $r2 i6         ; store word
movi $r2 i5                   ; initialize constant into register
sw   $$locbase $r2 i7         ; store word
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
addi $r0 $$locbase i96        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
subi $$tmp $pc i488           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
jmpf $zero i16
load $r0 data_NonConfigurable_109; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i2         ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
addi $r0 $$locbase i80        ; get offset to local
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
subi $$tmp $pc i556           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i128                     ; free 128 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_10
cfei i264                     ; allocate 264 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
addi $r1 $$locbase i192       ; get offset to local
sb   $r1 $$arg0 i0            ; store byte
sw   $$locbase $r0 i17        ; store word
addi $r0 $$locbase i192       ; get offset to local
addi $r1 $$locbase i248       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i248       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i72        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i200       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i152       ; get offset to local
movi $r1 i10                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i200       ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i152       ; get offset to local
lb   $r1 $r1 i0               ; load byte
mod  $r0 $r0 $r1
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i70           ; [call]: call add_12
addi $r0 $$locbase i72        ; get offset to local
lw   $r1 $$locbase i18        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i160       ; get offset to local
movi $r1 i10                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i208       ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i160       ; get offset to local
lb   $r1 $r1 i0               ; load byte
div  $r0 $r0 $r1
addi $r1 $$locbase i256       ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i168       ; get offset to local
sb   $r0 $zero i0             ; store byte
addi $r0 $$locbase i216       ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i168       ; get offset to local
lb   $r1 $r1 i0               ; load byte
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i144       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i22       ; store word
lw   $r0 $$locbase i28        ; load word
lw   $r1 $$locbase i22        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i18        ; store word
jmpb $zero i51
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i72        ; get offset to local
addi $r2 $$locbase i144       ; get offset to local
sw   $$locbase $r1 i29        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i29        ; load word
lw   $r2 $$locbase i8         ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i144       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i30        ; store word
addi $r4 $$locbase i184       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i30        ; load word
lw   $r4 $$locbase i23        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i884           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i264                     ; free 264 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function add_12
cfei i48                      ; allocate 48 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (other)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i24        ; get offset to local
sb   $r2 $$arg0 i0            ; store byte
addi $r2 $$locbase i8         ; get offset to local
sb   $r2 $r0 i0               ; store byte
addi $r0 $$locbase i24        ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r2 $$locbase i8         ; get offset to local
lb   $r2 $r2 i0               ; load byte
add  $r0 $r0 $r2
sw   $$locbase $r0 i2         ; store word
addi $r0 $$locbase i32        ; get offset to local
movi $r2 i255                 ; initialize constant into register
sb   $r0 $r2 i0               ; store byte
addi $r0 $$locbase i32        ; get offset to local
lb   $r0 $r0 i0               ; load byte
sw   $$locbase $r0 i0         ; store word
lw   $r0 $$locbase i2         ; load word
lw   $r2 $$locbase i0         ; load word
gt   $r0 $r0 $r2
jnzf $r0 $zero i2
lw   $r0 $$locbase i2         ; load word
jmpf $zero i12
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
and  $r0 $flag $r0
eq   $r0 $r0 $zero
jnzf $r0 $zero i8
lw   $r0 $$locbase i2         ; load word
lw   $r2 $$locbase i0         ; load word
add  $r2 $r2 $one
mod  $r0 $r0 $r2
sw   $$locbase $r0 i5         ; store word
lw   $r0 $$locbase i5         ; load word
move $$retv $r0               ; set return value
jmpf $zero i1
rvrt $zero
cfsi i48                      ; free 48 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_24
cfei i272                     ; allocate 272 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i25     ; store word
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i264       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i26        ; load word
lw   $r1 $$locbase i20        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i72        ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i72        ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i360           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i80        ; get offset to local
lw   $r1 $$locbase i19        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i27        ; load word
lw   $r1 $$locbase i21        ; load word
div  $r0 $r0 $r1
sw   $$locbase $r0 i33        ; store word
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i22      ; store word
lw   $r0 $$locbase i28        ; load word
lw   $r1 $$locbase i22        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i23       ; store word
lw   $r0 $$locbase i29        ; load word
lw   $r1 $$locbase i23        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i19        ; store word
jmpb $zero i46
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i80        ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
sw   $$locbase $r1 i30        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i30        ; load word
lw   $r2 $$locbase i8         ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i152       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i31        ; store word
addi $r4 $$locbase i192       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i31        ; load word
lw   $r4 $$locbase i24        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i1500          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i272                     ; free 272 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_31
cfei i272                     ; allocate 272 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i25     ; store word
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i264       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i26        ; load word
lw   $r1 $$locbase i20        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i72        ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i72        ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i784           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i80        ; get offset to local
lw   $r1 $$locbase i19        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i27        ; load word
lw   $r1 $$locbase i21        ; load word
div  $r0 $r0 $r1
sw   $$locbase $r0 i33        ; store word
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i22      ; store word
lw   $r0 $$locbase i28        ; load word
lw   $r1 $$locbase i22        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i23       ; store word
lw   $r0 $$locbase i29        ; load word
lw   $r1 $$locbase i23        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i19        ; store word
jmpb $zero i46
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i80        ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
sw   $$locbase $r1 i30        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i30        ; load word
lw   $r2 $$locbase i8         ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i152       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i31        ; store word
addi $r4 $$locbase i192       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i31        ; load word
lw   $r4 $$locbase i24        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i1924          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i272                     ; free 272 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_38
cfei i272                     ; allocate 272 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i25     ; store word
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i264       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i26        ; load word
lw   $r1 $$locbase i20        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i72        ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i72        ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i1208          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i80        ; get offset to local
lw   $r1 $$locbase i19        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i27        ; load word
lw   $r1 $$locbase i21        ; load word
div  $r0 $r0 $r1
sw   $$locbase $r0 i33        ; store word
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i22      ; store word
lw   $r0 $$locbase i28        ; load word
lw   $r1 $$locbase i22        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i23       ; store word
lw   $r0 $$locbase i29        ; load word
lw   $r1 $$locbase i23        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i19        ; store word
jmpb $zero i46
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i80        ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
sw   $$locbase $r1 i30        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i30        ; load word
lw   $r2 $$locbase i8         ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i152       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i31        ; store word
addi $r4 $$locbase i192       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i31        ; load word
lw   $r4 $$locbase i24        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i2348          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i272                     ; free 272 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_45
cfei i1048                    ; allocate 1048 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$arg1               ; save argument 1 (f)
move $r4 $$reta               ; save return address
load $$tmp data_NonConfigurable_12; load local variable initializer from data section
addi $r2 $$locbase i520       ; get local variable address
mcpi $r2 $$tmp i32            ; copy initializer from data section to local variable
addi $r2 $$locbase i824       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
sw   $$locbase $r1 i82        ; store word
addi $r0 $$locbase i824       ; get offset to local
addi $r1 $$locbase i984       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i984       ; get offset to local
addi $r1 $$locbase i1016      ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i56        ; get offset to local
move $r3 $zero                ; move parameter from branch to block argument
mul  $r1 $r3 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r2 i48                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
add  $r3 $r3 $one
movi $r1 i80                  ; initialize constant into register
lt   $r1 $r3 $r1
jnzb $r1 $zero i6
addi $r1 $$locbase i576       ; get offset to local
mcpi $r1 $r0 i80              ; copy memory
movi $r0 i79                  ; initialize constant into register
sw   $$locbase $r0 i83        ; store word
load $r0 data_NonConfigurable_80; get local constant
addi $r1 $$locbase i1016      ; get offset to local
addi $r2 $$locbase i856       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
addi $r1 $$locbase i672       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i856       ; get offset to local
addi $r1 $$locbase i672       ; get offset to local
addi $r2 $$locbase i264       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i520       ; get offset to local
addi $r3 $$locbase i424       ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
addi $r1 $$locbase i360       ; get offset to local
wqam $r1 $r2 $r0 $r3
addi $r0 $$locbase i136       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r1 $$locbase i792       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i792       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i200       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i232       ; get offset to local
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i232       ; get offset to local
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i232       ; get offset to local
addi $r0 $r0 i16              ; get offset to aggregate element
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i232       ; get offset to local
addi $r0 $r0 i24              ; get offset to aggregate element
addi $r1 $$locbase i560       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i560       ; get offset to local
addi $r1 $$locbase i888       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i88        ; store word
lw   $r0 $$locbase i111       ; load word
lw   $r1 $$locbase i88        ; load word
mod  $r0 $r0 $r1
load $r1 data_NonConfigurable_80; get local constant
addi $r2 $$locbase i568       ; get offset to local
sb   $r2 $r0 i0               ; store byte
addi $r0 $$locbase i568       ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i1836          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i576       ; get offset to local
lw   $r2 $$locbase i83        ; load word
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $r0 $r2              ; add array element offset to array base
sb   $r2 $$retv i0            ; store byte
addi $r0 $$locbase i1016      ; get offset to local
addi $r2 $$locbase i896       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i712       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i896       ; get offset to local
addi $r1 $$locbase i712       ; get offset to local
addi $r2 $$locbase i296       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i456       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r1 $$locbase i392       ; get offset to local
wqdv $r1 $r2 $r0 i32
addi $r0 $$locbase i168       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
load $r1 data_NonConfigurable_12; get local constant
addi $r2 $$locbase i1016      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i1016      ; get offset to local
addi $r2 $$locbase i928       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i744       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i928       ; get offset to local
addi $r1 $$locbase i744       ; get offset to local
addi $r2 $$locbase i328       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i488       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
wqcm $r0 $r2 $r0 i32
jnzf $r0 $zero i9
addi $r0 $$locbase i664       ; get offset to local
addi $r1 $$locbase i960       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i97       ; store word
lw   $r0 $$locbase i120       ; load word
lw   $r1 $$locbase i97        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i83        ; store word
jmpb $zero i105
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i576       ; get offset to local
addi $r2 $$locbase i664       ; get offset to local
sw   $$locbase $r1 i121       ; store word
addi $r1 $$locbase i552       ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i121       ; load word
lw   $r2 $$locbase i69        ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i664       ; get offset to local
movi $r3 i80                  ; initialize constant into register
sw   $$locbase $r3 i122       ; store word
addi $r3 $$locbase i784       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
lw   $r2 $$locbase i122       ; load word
lw   $r3 $$locbase i98        ; load word
sub  $r2 $r2 $r3
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i3036          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i1048                    ; free 1048 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_52
cfei i760                     ; allocate 760 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r4 $$reta               ; save return address
load $$tmp data_NonConfigurable_12; load local variable initializer from data section
addi $r1 $$locbase i296       ; get local variable address
mcpi $r1 $$tmp i32            ; copy initializer from data section to local variable
addi $r1 $$locbase i512       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i512       ; get offset to local
mcpi $$locbase $r0 i32        ; copy memory
addi $r0 $$locbase i696       ; get offset to local
mcpi $r0 $$locbase i32        ; copy memory
addi $r0 $$locbase i656       ; get offset to local
sb   $r0 $one i0              ; store byte
addi $r0 $$locbase i656       ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r1 i65                  ; initialize constant into register
jnzf $r0 $zero i1
movi $r1 i97                  ; initialize constant into register
addi $r0 $$locbase i328       ; get offset to local
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i696       ; get offset to local
addi $r1 $$locbase i728       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i64        ; get offset to local
move $r3 $zero                ; move parameter from branch to block argument
mul  $r1 $r3 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r2 i48                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
add  $r3 $r3 $one
movi $r1 i66                  ; initialize constant into register
lt   $r1 $r3 $r1
jnzb $r1 $zero i6
addi $r1 $$locbase i352       ; get offset to local
mcpi $r1 $r0 i66              ; copy memory
addi $r0 $$locbase i352       ; get offset to local
mul  $r1 $zero $one           ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r0 i48                  ; initialize constant into register
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i352       ; get offset to local
mul  $r1 $one $one            ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r0 i120                 ; initialize constant into register
sb   $r1 $r0 i0               ; store byte
movi $r0 i65                  ; initialize constant into register
sw   $$locbase $r0 i53        ; store word
addi $r0 $$locbase i728       ; get offset to local
addi $r1 $$locbase i544       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i544       ; get offset to local
addi $r1 $$locbase i296       ; get offset to local
load $r2 data_NonConfigurable_111; get local constant
addi $r3 $$locbase i232       ; get offset to local
wqam $r3 $r0 $r1 $r2
addi $r0 $$locbase i136       ; get offset to local
mcpi $r0 $r3 i32              ; copy memory
addi $r1 $$locbase i472       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i472       ; get offset to local
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i200       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i336       ; get offset to local
addi $r1 $$locbase i32        ; get offset to local
addi $r1 $r1 i24              ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i16                  ; initialize constant into register
sw   $$locbase $r0 i55        ; store word
lw   $r0 $$locbase i7         ; load word
lw   $r1 $$locbase i55        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i344       ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i448       ; get offset to local
movi $r1 i10                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i344       ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i448       ; get offset to local
lb   $r1 $r1 i0               ; load byte
lt   $r0 $r0 $r1
jnzf $r0 $zero i53
addi $r0 $$locbase i344       ; get offset to local
addi $r1 $$locbase i576       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r1 $$locbase i456       ; get offset to local
movi $r2 i10                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i456       ; get offset to local
addi $r2 $$locbase i664       ; get offset to local
mcpi $r2 $r1 i1               ; copy memory
lb   $r1 $r1 i0               ; load byte
sub  $r0 $r0 $r1
sw   $$locbase $r0 i63        ; store word
addi $r0 $$locbase i672       ; get offset to local
movi $r1 i255                 ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i672       ; get offset to local
lb   $r0 $r0 i0               ; load byte
sw   $$locbase $r0 i54        ; store word
lw   $r0 $$locbase i63        ; load word
lw   $r1 $$locbase i54        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i5
addi $r0 $$locbase i504       ; get offset to local
addi $r1 $$locbase i688       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i63        ; load word
jmpf $zero i12
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
and  $r0 $flag $r0
eq   $r0 $r0 $zero
jnzf $r0 $zero i18
lw   $r0 $$locbase i63        ; load word
lw   $r1 $$locbase i54        ; load word
add  $r1 $r1 $one
mod  $r0 $r0 $r1
sw   $$locbase $r0 i85        ; store word
lw   $r0 $$locbase i85        ; load word
addi $r1 $$locbase i328       ; get offset to local
lb   $r1 $r1 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
subi $$tmp $pc i2688          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i352       ; get offset to local
lw   $r1 $$locbase i53        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
jmpf $zero i13
rvrt $zero
addi $r0 $$locbase i344       ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i2744          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i352       ; get offset to local
lw   $r1 $$locbase i53        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i728       ; get offset to local
addi $r1 $$locbase i584       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i584       ; get offset to local
load $r1 data_NonConfigurable_111; get local constant
addi $r2 $$locbase i264       ; get offset to local
wqdv $r2 $r0 $r1 i32
addi $r0 $$locbase i168       ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
addi $r1 $$locbase i728       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r1 $$locbase i616       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i616       ; get offset to local
load $r1 data_NonConfigurable_12; get local constant
wqcm $r0 $r0 $r1 i32
jnzf $r0 $zero i9
addi $r0 $$locbase i424       ; get offset to local
addi $r1 $$locbase i648       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i58       ; store word
lw   $r0 $$locbase i53        ; load word
lw   $r1 $$locbase i58        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i53        ; store word
jmpb $zero i129
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i352       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $r0 i66                  ; initialize constant into register
move $$arg2 $r0               ; [call]: pass argument 2
subi $$tmp $pc i3832          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i760                     ; free 760 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_57
cfei i24                      ; allocate 24 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
sw   $$locbase $$arg1 i2      ; store word
addi $r2 $$locbase i16        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
jal  $$reta $pc i16           ; [call]: call print_string_quotes_58
mcpi $$locbase $r0 i16        ; copy memory
move $$arg0 $$locbase         ; [call]: pass argument 0
move $$arg1 $$locbase         ; [call]: pass argument 1
subi $$tmp $pc i4036          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addi $r0 $$locbase i16        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i7            ; [call]: call print_string_quotes_58
move $$retv $zero             ; set return value
cfsi i24                      ; free 24 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function print_string_quotes_58
cfei i16                      ; allocate 16 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
mul  $r1 $zero $one           ; get offset to array element
add  $r1 $$locbase $r1        ; add array element offset to array base
movi $r2 i34                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $$locbase i1         ; copy memory
addr $r1 data_NonConfigurable_105; get constant's address in data section
lw   $r1 $r1 i0               ; load word
addi $r2 $$locbase i8         ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $one              ; [call]: pass argument 2
subi $$tmp $pc i4036          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
noop                          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i16                      ; free 16 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function debug_tuple_62
cfei i128                     ; allocate 128 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (name)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $$arg1 i16           ; copy memory
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
subi $$tmp $pc i3944          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call len_4
noop                          ; [call]: call len_4
sw   $$locbase $$retv i15     ; store word
sw   $$locbase $zero i14      ; store word
lw   $r0 $$locbase i15        ; load word
lw   $r3 $$locbase i14        ; load word
gt   $r0 $r0 $r3
jnzf $r0 $zero i1
jmpf $zero i9
addi $r0 $$locbase i96        ; get offset to local
addi $r3 $$locbase i48        ; get offset to local
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4308              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_112; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i64        ; get offset to local
addi $r4 $$locbase i64        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4372              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i40        ; get offset to local
sb   $r0 $zero i0             ; store byte
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i128                     ; free 128 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_65
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i7      ; store word
addi $r3 $$locbase i64        ; get offset to local
sb   $r3 $r0 i0               ; store byte
lw   $r0 $$locbase i7         ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i2                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i40        ; get offset to local
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4532              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i64        ; get offset to local
lb   $r0 $r0 i0               ; load byte
lw   $r3 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
subi $$tmp $pc i3972          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
noop                          ; [call]: call fmt_10
lw   $r0 $$locbase i7         ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i7         ; load word
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function finish_66
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
load $r1 data_NonConfigurable_113; get local constant
sw   $$locbase $$arg0 i7      ; store word
mcpi $$locbase $r1 i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i4692              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function debug_list_68
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (__ret_value)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_114; get local constant
mcpi $$locbase $r2 i8         ; copy memory
addi $r2 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i48        ; get offset to local
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4804              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r2 $$locbase i40        ; get offset to local
sb   $r2 $zero i0             ; store byte
mcpi $r0 $r2 i8               ; copy memory
move $$retv $r0               ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function entry_70
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i7      ; store word
addi $r3 $$locbase i64        ; get offset to local
sb   $r3 $r0 i0               ; store byte
lw   $r0 $$locbase i7         ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i2                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i40        ; get offset to local
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4964              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i64        ; get offset to local
lb   $r0 $r0 i0               ; load byte
lw   $r3 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i4408              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
lw   $r0 $$locbase i7         ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i7         ; load word
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function finish_72
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
load $r1 data_NonConfigurable_115; get local constant
sw   $$locbase $$arg0 i7      ; store word
mcpi $$locbase $r1 i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i5124              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_75
cfei i88                      ; allocate 88 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
load $r1 data_NonConfigurable_116; get local constant
sw   $$locbase $$arg1 i9      ; store word
addi $r2 $$locbase i8         ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i16        ; get offset to local
sw   $$locbase $r2 i2         ; store word
sw   $$locbase $one i3        ; store word
addi $r2 $$locbase i32        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i56        ; get offset to local
addi $r3 $$locbase i56        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i48        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i61           ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r1 $$locbase i80        ; get offset to local
mcpi $r1 $$locbase i8         ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i7            ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i88                      ; free 88 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function finish_76
cfei i120                     ; allocate 120 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
sw   $$locbase $$arg0 i14     ; store word
lw   $r1 $$locbase i14        ; load word
lb   $r1 $r1 i0               ; load byte
jnzf $r1 $zero i1
jmpf $zero i16
load $r1 data_NonConfigurable_117; get local constant
mcpi $$locbase $r1 i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i80        ; get offset to local
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i5388              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r1 data_NonConfigurable_118; get local constant
addi $r2 $$locbase i40        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i48        ; get offset to local
sw   $$locbase $r2 i6         ; store word
sw   $$locbase $one i7        ; store word
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i96        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i5456              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i120                     ; free 120 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function debug_struct_77
cfei i80                      ; allocate 80 bytes for locals and 0 slots for call arguments
move $r0 $$arg2               ; save argument 2 (__ret_value)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_119; get local constant
addi $r3 $$locbase i48        ; get offset to local
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $$arg1 i16           ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i5544              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
mcpi $$locbase $r2 i8         ; copy memory
addi $r2 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i3                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i64        ; get offset to local
addi $r4 $$locbase i64        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i5604              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r2 $$locbase i40        ; get offset to local
sb   $r2 $zero i0             ; store byte
mcpi $r0 $r2 i8               ; copy memory
move $$retv $r0               ; set return value
cfsi i80                      ; free 80 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_78
cfei i272                     ; allocate 272 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg1 i26     ; store word
addi $r1 $$locbase i128       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i27      ; store word
lw   $r0 $r0 i0               ; load word
lw   $r1 $$locbase i27        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i71
addi $r0 $$locbase i128       ; get offset to local
addi $r1 $$locbase i240       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i28       ; store word
lw   $r0 $$locbase i16        ; load word
lw   $r1 $$locbase i28        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_120; get local constant
addi $r1 $$locbase i88        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i96        ; get offset to local
sw   $$locbase $r1 i12        ; store word
sw   $$locbase $one i13       ; store word
addi $r1 $$locbase i112       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i184       ; get offset to local
addi $r2 $$locbase i184       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i144       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
subi $$tmp $pc i1624          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_tuple_62
mcpi $$locbase $$retv i8      ; copy memory
addi $r0 $$locbase i256       ; get offset to local
mcpi $r0 $$locbase i8         ; copy memory
sw   $$locbase $r0 i31        ; store word
lw   $r0 $$locbase i31        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i18
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i40        ; get offset to local
sw   $$locbase $r1 i5         ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i6         ; store word
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i168       ; get offset to local
addi $r2 $$locbase i168       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i5920              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i31        ; load word
addi $r1 $$locbase i200       ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i788           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call fmt_75
lw   $r0 $$locbase i31        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i31        ; load word
addi $r1 $$locbase i200       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i264       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
subi $$tmp $pc i1372          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_66
jmpf $zero i18
load $r0 data_NonConfigurable_31; get local constant
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i24        ; get offset to local
sw   $$locbase $r1 i3         ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i4         ; store word
addi $r1 $$locbase i56        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i152       ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i6060              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i272                     ; free 272 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_82
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_121; get local constant
load $r3 data_NonConfigurable_6; get local constant
sw   $$locbase $$arg1 i22     ; store word
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
addi $r2 $$locbase i24        ; get offset to local
sw   $$locbase $r4 i3         ; store word
movi $r4 i7                   ; initialize constant into register
sw   $$locbase $r4 i4         ; store word
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i112       ; get offset to local
addi $r5 $$locbase i112       ; get offset to local
mcpi $r5 $r4 i16              ; copy memory
addi $r4 $$locbase i96        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
move $$arg2 $r4               ; [call]: pass argument 2
subi $$tmp $pc i708           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r2 $$locbase i56        ; get offset to local
mcpi $r2 $r3 i8               ; copy memory
addi $r3 $$locbase i64        ; get offset to local
sw   $$locbase $r2 i8         ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i9         ; store word
addi $r2 $$locbase i80        ; get offset to local
mcpi $r2 $r3 i16              ; copy memory
addi $r3 $$locbase i184       ; get offset to local
mcpi $r3 $$locbase i8         ; copy memory
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i144       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i104       ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r0               ; [call]: pass argument 3
jal  $$reta $pc i14           ; [call]: call field_83
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
subi $$tmp $pc i1016          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_83
cfei i216                     ; allocate 216 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (name)
move $r1 $$arg2               ; save argument 2 (value)
move $r2 $$arg3               ; save argument 3 (__ret_value)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i22     ; store word
addi $r4 $$locbase i160       ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
addi $r0 $$locbase i184       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
lw   $r0 $$locbase i22        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i2         ; store word
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i80        ; get offset to local
addi $r4 $$locbase i80        ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i6468              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
addi $r1 $$locbase i160       ; get offset to local
addi $r4 $$locbase i96        ; get offset to local
addi $r5 $$locbase i96        ; get offset to local
mcpi $r5 $r1 i16              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
movi $$tmp i6512              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $r1 i6         ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i7         ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
addi $r4 $$locbase i112       ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i6576              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i184       ; get offset to local
lw   $r1 $$locbase i22        ; load word
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
subi $$tmp $pc i3420          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call fmt_52
lw   $r0 $$locbase i22        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i22        ; load word
mcpi $r2 $r0 i8               ; copy memory
move $$retv $r2               ; set return value
cfsi i216                     ; free 216 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_85
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_122; get local constant
load $r3 data_NonConfigurable_6; get local constant
sw   $$locbase $$arg1 i22     ; store word
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
addi $r2 $$locbase i24        ; get offset to local
sw   $$locbase $r4 i3         ; store word
movi $r4 i7                   ; initialize constant into register
sw   $$locbase $r4 i4         ; store word
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i112       ; get offset to local
addi $r5 $$locbase i112       ; get offset to local
mcpi $r5 $r4 i16              ; copy memory
addi $r4 $$locbase i96        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
move $$arg2 $r4               ; [call]: pass argument 2
subi $$tmp $pc i1272          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r2 $$locbase i56        ; get offset to local
mcpi $r2 $r3 i8               ; copy memory
addi $r3 $$locbase i64        ; get offset to local
sw   $$locbase $r2 i8         ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i9         ; store word
addi $r2 $$locbase i80        ; get offset to local
mcpi $r2 $r3 i16              ; copy memory
addi $r3 $$locbase i184       ; get offset to local
mcpi $r3 $$locbase i8         ; copy memory
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i144       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i104       ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r0               ; [call]: pass argument 3
subi $$tmp $pc i508           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call field_83
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
subi $$tmp $pc i1584          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function push_96
cfei i240                     ; allocate 240 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (byte)
move $r4 $$reta               ; save return address
sw   $$locbase $$arg0 i17     ; store word
sb   $$locbase $r0 i0         ; store byte
lw   $r0 $$locbase i17        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
lw   $r1 $$locbase i17        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i144       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i18        ; load word
lw   $r1 $$locbase i10        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i79
lw   $r0 $$locbase i17        ; load word
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i21        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i152       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i11      ; store word
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i11        ; load word
eq   $r0 $r0 $r1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r0 $zero i9
lw   $r0 $$locbase i21        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i22        ; store word
addi $r1 $$locbase i96        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i22        ; load word
lw   $r1 $$locbase i12        ; load word
mul  $r1 $r0 $r1
sw   $$locbase $r1 i6         ; store word
lw   $r0 $$locbase i21        ; load word
lw   $r1 $$locbase i21        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i48        ; get offset to local
addi $r3 $$locbase i128       ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i56        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r0 $$locbase i56        ; get offset to local
addi $r1 $$locbase i8         ; get offset to local
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i112       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i24        ; load word
lw   $r1 $$locbase i14        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i2
lw   $r0 $$locbase i16        ; load word
jmpf $zero i29
addi $r0 $$locbase i56        ; get offset to local
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2         ; load word
aloc $r0                      ; aloc size
sw   $$locbase $hp i8         ; store word
addi $r0 $$locbase i8         ; get offset to local
addi $r1 $$locbase i160       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i13      ; store word
lw   $r0 $$locbase i20        ; load word
lw   $r1 $$locbase i13        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i13
addi $r0 $$locbase i128       ; get offset to local
addi $r1 $$locbase i64        ; get offset to local
addi $r2 $$locbase i8         ; get offset to local
addi $r3 $$locbase i184       ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
addi $r0 $$locbase i32        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i24        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
lw   $r0 $$locbase i4         ; load word
lw   $r1 $$locbase i23        ; load word
lw   $r2 $$locbase i3         ; load word
mcp  $r0 $r1 $r2              ; mcp dst src len
lw   $r0 $$locbase i8         ; load word
lw   $r1 $$locbase i21        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i48        ; get offset to local
lw   $r1 $$locbase i21        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r1 $$locbase i17        ; load word
addi $r1 $r1 i16              ; get offset to aggregate element
addi $r2 $$locbase i200       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i72        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i25        ; load word
lw   $r1 $$locbase i9         ; load word
add  $r0 $r0 $r1              ; add new ptr offset
sw   $$locbase $r0 i5         ; store word
addi $r0 $$locbase i40        ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i224       ; get offset to local
mcpi $r0 $$locbase i1         ; copy memory
addi $r0 $$locbase i224       ; get offset to local
lb   $r0 $r0 i0               ; load byte
sw   $$locbase $r0 i29        ; store word
lw   $r0 $$locbase i26        ; load word
lw   $r1 $$locbase i29        ; load word
sb   $r0 $r1 i0               ; sb ptr val i0
lw   $r0 $$locbase i17        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i15       ; store word
lw   $r0 $$locbase i27        ; load word
lw   $r1 $$locbase i15        ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i17        ; load word
sw   $r1 $r0 i2               ; store word
move $$retv $zero             ; set return value
cfsi i240                     ; free 240 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function ge_106
cfei i16                      ; allocate 16 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (other)
move $r1 $$reta               ; save return address
sw   $$locbase $$arg0 i1      ; store word
sw   $$locbase $r0 i0         ; store word
lw   $r0 $$locbase i1         ; load word
lw   $r2 $$locbase i0         ; load word
gt   $r0 $r0 $r2
jnzf $r0 $zero i3
lw   $r0 $$locbase i1         ; load word
lw   $r2 $$locbase i0         ; load word
eq   $r0 $r0 $r2
move $$retv $r0               ; set return value
cfsi i16                      ; free 16 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_113
cfei i208                     ; allocate 208 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_123; get local constant
load $r3 data_NonConfigurable_6; get local constant
sw   $$locbase $$arg1 i23     ; store word
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i32        ; get offset to local
sw   $$locbase $r4 i4         ; store word
movi $r4 i10                  ; initialize constant into register
sw   $$locbase $r4 i5         ; store word
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i120       ; get offset to local
addi $r5 $$locbase i120       ; get offset to local
mcpi $r5 $r4 i16              ; copy memory
addi $r4 $$locbase i104       ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
move $$arg2 $r4               ; [call]: pass argument 2
subi $$tmp $pc i2160          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $r3 i8               ; copy memory
addi $r3 $$locbase i72        ; get offset to local
sw   $$locbase $r2 i9         ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i10        ; store word
addi $r2 $$locbase i88        ; get offset to local
mcpi $r2 $r3 i16              ; copy memory
addi $r3 $$locbase i192       ; get offset to local
mcpi $r3 $$locbase i8         ; copy memory
addi $r4 $$locbase i136       ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i152       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r0               ; [call]: pass argument 3
subi $$tmp $pc i1396          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call field_83
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r2 $$locbase i200       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
subi $$tmp $pc i2472          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i208                     ; free 208 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_120
cfei i160                     ; allocate 160 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (name)
move $r1 $$arg2               ; save argument 2 (value)
move $r2 $$arg3               ; save argument 3 (__ret_value)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i18     ; store word
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
sw   $$locbase $r1 i19        ; store word
lw   $r0 $$locbase i18        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i2         ; store word
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i80        ; get offset to local
addi $r4 $$locbase i80        ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i7920              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
addi $r1 $$locbase i128       ; get offset to local
addi $r4 $$locbase i96        ; get offset to local
addi $r5 $$locbase i96        ; get offset to local
mcpi $r5 $r1 i16              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
movi $$tmp i7964              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $r1 i6         ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i7         ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
addi $r4 $$locbase i112       ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i8028              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i18        ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i5980              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
lw   $r0 $$locbase i18        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i18        ; load word
mcpi $r2 $r0 i8               ; copy memory
move $$retv $r2               ; set return value
cfsi i160                     ; free 160 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_126
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i7      ; store word
sw   $$locbase $r0 i8         ; store word
lw   $r0 $$locbase i7         ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i2                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i40        ; get offset to local
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i8216              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i8         ; load word
lw   $r3 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i6168              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
lw   $r0 $$locbase i7         ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i7         ; load word
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function number_of_bytes_130
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i48        ; get offset to local
mcpi $r1 $$arg0 i16           ; copy memory
addi $r1 $$locbase i48        ; get offset to local
mcpi $$locbase $r1 i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r2 $$locbase i16        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
lw   $r1 $$locbase i5         ; load word
move $$retv $r1               ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function new_143
cfei i56                      ; allocate 56 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
move $$arg0 $zero             ; [call]: pass argument 0
jal  $$reta $pc i15           ; [call]: call alloc_145
addi $r2 $$locbase i24        ; get offset to local
sw   $$locbase $$retv i3      ; store word
sw   $$locbase $zero i4       ; store word
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
mcpi $$locbase $r3 i16        ; copy memory
sw   $$locbase $zero i2       ; store word
mcpi $r0 $$locbase i24        ; copy memory
move $$retv $r0               ; set return value
cfsi i56                      ; free 56 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function alloc_145
cfei i16                      ; allocate 16 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
sw   $$locbase $$arg0 i0      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1         ; store word
lw   $r1 $$locbase i1         ; load word
lw   $r2 $$locbase i0         ; load word
mul  $r1 $r1 $r2
aloc $r1                      ; aloc size
move $$retv $hp               ; set return value
cfsi i16                      ; free 16 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function push_146
cfei i264                     ; allocate 264 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r4 $$reta               ; save return address
sw   $$locbase $$arg0 i18     ; store word
sw   $$locbase $r0 i32        ; store word
lw   $r0 $$locbase i18        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
lw   $r1 $$locbase i18        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i152       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i72        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i9         ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i83
lw   $r0 $$locbase i18        ; load word
sw   $$locbase $r0 i24        ; store word
lw   $r0 $$locbase i24        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i160       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i10      ; store word
lw   $r0 $$locbase i20        ; load word
lw   $r1 $$locbase i10        ; load word
eq   $r0 $r0 $r1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r0 $zero i9
lw   $r0 $$locbase i24        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i25        ; store word
addi $r1 $$locbase i88        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i25        ; load word
lw   $r1 $$locbase i11        ; load word
mul  $r1 $r0 $r1
sw   $$locbase $r1 i6         ; store word
lw   $r0 $$locbase i24        ; load word
lw   $r1 $$locbase i24        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i48        ; get offset to local
addi $r3 $$locbase i136       ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
mcpi $$locbase $r1 i8         ; copy memory
addi $r0 $$locbase i56        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r0 $$locbase i56        ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i104       ; get offset to local
mcpi $r0 $$locbase i8         ; copy memory
lw   $r0 $$locbase i27        ; load word
lw   $r1 $$locbase i13        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i2
lw   $r0 $$locbase i17        ; load word
jmpf $zero i35
lw   $r0 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
subi $$tmp $pc i332           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call alloc_145
sw   $$locbase $$retv i8      ; store word
addi $r0 $$locbase i168       ; get offset to local
mcpi $r0 $$locbase i8         ; copy memory
sw   $$locbase $zero i12      ; store word
lw   $r0 $$locbase i21        ; load word
lw   $r1 $$locbase i12        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i21
addi $r0 $$locbase i136       ; get offset to local
addi $r1 $$locbase i64        ; get offset to local
addi $r2 $$locbase i208       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i24        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$locbase i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
addi $r1 $$locbase i176       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8                   ; initialize constant into register
sw   $$locbase $r0 i14        ; store word
lw   $r0 $$locbase i22        ; load word
lw   $r1 $$locbase i14        ; load word
mul  $r0 $r0 $r1
sw   $$locbase $r0 i5         ; store word
lw   $r0 $$locbase i3         ; load word
lw   $r1 $$locbase i26        ; load word
lw   $r2 $$locbase i5         ; load word
mcp  $r0 $r1 $r2              ; mcp dst src len
lw   $r0 $$locbase i8         ; load word
lw   $r1 $$locbase i24        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i48        ; get offset to local
lw   $r1 $$locbase i24        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i18        ; load word
lw   $r1 $$locbase i18        ; load word
addi $r1 $r1 i16              ; get offset to aggregate element
addi $r2 $$locbase i224       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i16        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i28        ; load word
lw   $r1 $$locbase i2         ; load word
movi $r2 i8                   ; initialize constant into register
mul  $r1 $r2 $r1
add  $r0 $r0 $r1
sw   $$locbase $r0 i4         ; store word
addi $r0 $$locbase i32        ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
addi $r2 $$locbase i232       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i248       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i8                   ; initialize constant into register
sw   $$locbase $r0 i23        ; store word
sw   $$locbase $one i15       ; store word
lw   $r0 $$locbase i23        ; load word
lw   $r1 $$locbase i15        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i4
lw   $r0 $$locbase i29        ; load word
lw   $r1 $$locbase i31        ; load word
sw   $r0 $r1 i0               ; sw ptr val i0
jmpf $zero i3
lw   $r0 $$locbase i29        ; load word
lw   $r1 $$locbase i31        ; load word
sb   $r0 $r1 i0               ; sb ptr val i0
lw   $r0 $$locbase i18        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
addi $r1 $$locbase i240       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i16       ; store word
lw   $r0 $$locbase i30        ; load word
lw   $r1 $$locbase i16        ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i18        ; load word
sw   $r1 $r0 i2               ; store word
move $$retv $zero             ; set return value
cfsi i264                     ; free 264 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_152
cfei i560                     ; allocate 560 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r4 $$reta               ; save return address
addi $r1 $$locbase i368       ; get offset to local
mcpi $r1 $$arg0 i24           ; copy memory
sw   $$locbase $r0 i38        ; store word
addi $r0 $$locbase i224       ; get offset to local
addi $r1 $$locbase i200       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i4476              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r1 $$locbase i320       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i368       ; get offset to local
addi $r1 $$locbase i392       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i392       ; get offset to local
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
sw   $$locbase $zero i5       ; store word
addi $r0 $$locbase i224       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r1 $$locbase i120       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i120       ; get offset to local
sw   $$locbase $r0 i57        ; store word
lw   $r0 $$locbase i57        ; load word
lw   $r0 $r0 i3               ; load word
lw   $r1 $$locbase i57        ; load word
lw   $r1 $r1 i2               ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
subi $$tmp $pc i1840          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call ge_106
jnzf $$retv $zero i52
lw   $r0 $$locbase i57        ; load word
addi $r0 $r0 i24              ; get offset to aggregate element
addi $r1 $$locbase i416       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i41       ; store word
lw   $r0 $$locbase i52        ; load word
lw   $r1 $$locbase i41        ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i57        ; load word
sw   $r1 $r0 i3               ; store word
addi $r0 $$locbase i72        ; get offset to local
sw   $$locbase $one i9        ; store word
lw   $r1 $$locbase i57        ; load word
lw   $r2 $$locbase i57        ; load word
addi $r2 $r2 i24              ; get offset to aggregate element
addi $r3 $$locbase i464       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i42       ; store word
lw   $r2 $$locbase i58        ; load word
lw   $r3 $$locbase i42        ; load word
sub  $r2 $r2 $r3
addi $r3 $$locbase i480       ; get offset to local
mcpi $r3 $r1 i24              ; copy memory
sw   $$locbase $r2 i39        ; store word
addi $r1 $$locbase i480       ; get offset to local
addi $r2 $$locbase i312       ; get offset to local
addi $r3 $$locbase i424       ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
addi $r1 $$locbase i288       ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i53        ; load word
lw   $r2 $$locbase i36        ; load word
movi $r3 i8                   ; initialize constant into register
mul  $r2 $r3 $r2
add  $r1 $r1 $r2
sw   $$locbase $r1 i59        ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i54        ; store word
sw   $$locbase $one i43       ; store word
lw   $r1 $$locbase i54        ; load word
lw   $r2 $$locbase i43        ; load word
eq   $r1 $r1 $r2
jnzf $r1 $zero i3
lw   $r1 $$locbase i59        ; load word
lw   $r1 $r1 i0               ; lw val ptr i0
jmpf $zero i2
lw   $r1 $$locbase i59        ; load word
lb   $r1 $r1 i0               ; lb val ptr i0
sw   $r0 $r1 i1               ; store word
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
jmpf $zero i4
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $zero i6       ; store word
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i152       ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i504       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i504       ; get offset to local
addi $r1 $$locbase i168       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i168       ; get offset to local
addi $r1 $$locbase i440       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i44       ; store word
lw   $r0 $$locbase i55        ; load word
lw   $r1 $$locbase i44        ; load word
eq   $r0 $r0 $r1
move $r1 $zero                ; move parameter from branch to block argument
jnzf $r0 $zero i1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r1 $zero i64
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i520       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i520       ; get offset to local
addi $r1 $$locbase i184       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i184       ; get offset to local
addi $r1 $$locbase i448       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i45       ; store word
lw   $r0 $$locbase i56        ; load word
lw   $r1 $$locbase i45        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i3
sw   $$locbase $zero i35      ; store word
lw   $r0 $$locbase i35        ; load word
rvrt $r0
addi $r0 $$locbase i184       ; get offset to local
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i544       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i68        ; load word
sw   $$locbase $r0 i37        ; store word
addi $r0 $$locbase i320       ; get offset to local
addi $r1 $$locbase i296       ; get offset to local
sw   $$locbase $r0 i67        ; store word
addi $r0 $$locbase i552       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i67        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i18
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i88        ; get offset to local
sw   $$locbase $r1 i11        ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i12        ; store word
addi $r1 $$locbase i104       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i208       ; get offset to local
addi $r2 $$locbase i208       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i9804              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i69        ; load word
lw   $r1 $$locbase i67        ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i7756              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
lw   $r0 $$locbase i67        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i67        ; load word
addi $r1 $$locbase i272       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
mcpi $$locbase $r1 i8         ; copy memory
jmpb $zero i148
addi $r0 $$locbase i320       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i4836              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
move $$retv $zero             ; set return value
cfsi i560                     ; free 560 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
.data:
data_NonConfigurable_0 .bytes[25] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 33 3a 31 33 5d 20 28 29 20 3d 20  [src/main.sw:13:13] () = 
data_NonConfigurable_1 .bytes[2] 28 29  ()
data_NonConfigurable_2 .bytes[1] 0a  .
data_NonConfigurable_3 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 30 3a 31 33 5d 20 31 30 75 38 20 3d 20  [src/main.sw:20:13] 10u8 = 
data_NonConfigurable_4 .bytes[46] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 39 3a 31 33 5d 20 73 74 64 3a 3a 62 35 31 32 3a 3a 42 35 31 32 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:69:13] std::b512::B512::zero() = 
data_NonConfigurable_5 .bytes[4] 42 35 31 32  B512
data_NonConfigurable_6 .bytes[4] 62 69 74 73  bits
data_NonConfigurable_7 .bytes[2] 2c 20  , 
data_NonConfigurable_8 .bytes[2] 3a 20  : 
data_NonConfigurable_9 .bytes[69] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 37 31 3a 31 33 5d 20 73 74 64 3a 3a 62 6c 6f 63 6b 3a 3a 42 6c 6f 63 6b 48 61 73 68 45 72 72 6f 72 3a 3a 42 6c 6f 63 6b 48 65 69 67 68 74 54 6f 6f 48 69 67 68 20 3d 20  [src/main.sw:71:13] std::block::BlockHashError::BlockHeightTooHigh = 
data_NonConfigurable_10 .bytes[18] 42 6c 6f 63 6b 48 65 69 67 68 74 54 6f 6f 48 69 67 68  BlockHeightTooHigh
data_NonConfigurable_11 .bytes[139] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 37 32 3a 31 33 5d 20 7b 0a 20 20 20 20 6c 65 74 20 6d 75 74 20 62 79 74 65 73 20 3d 20 73 74 64 3a 3a 62 79 74 65 73 3a 3a 42 79 74 65 73 3a 3a 6e 65 77 28 29 3b 0a 20 20 20 20 62 79 74 65 73 2e 70 75 73 68 28 31 29 3b 0a 20 20 20 20 62 79 74 65 73 2e 70 75 73 68 28 32 29 3b 0a 20 20 20 20 62 79 74 65 73 2e 70 75 73 68 28 33 29 3b 0a 20 20 20 20 62 79 74 65 73 0a 7d 20 3d 20  [src/main.sw:72:13] {.    let mut bytes = std::bytes::Bytes::new();.    bytes.push(1);.    bytes.push(2);.    bytes.push(3);.    bytes.} = 
data_NonConfigurable_12 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
data_NonConfigurable_13 .bytes[59] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 37 39 3a 31 33 5d 20 73 74 64 3a 3a 63 6f 6e 74 72 61 63 74 5f 69 64 3a 3a 43 6f 6e 74 72 61 63 74 49 64 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:79:13] std::contract_id::ContractId::zero() = 
data_NonConfigurable_14 .bytes[66] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 31 3a 31 33 5d 20 73 74 64 3a 3a 65 63 72 3a 3a 45 63 52 65 63 6f 76 65 72 45 72 72 6f 72 3a 3a 5a 65 72 6f 4c 65 6e 67 74 68 4d 65 73 73 61 67 65 20 3d 20  [src/main.sw:81:13] std::ecr::EcRecoverError::ZeroLengthMessage = 
data_NonConfigurable_15 .bytes[22] 55 6e 72 65 63 6f 76 65 72 61 62 6c 65 50 75 62 6c 69 63 4b 65 79  UnrecoverablePublicKey
data_NonConfigurable_16 .bytes[17] 5a 65 72 6f 4c 65 6e 67 74 68 4d 65 73 73 61 67 65  ZeroLengthMessage
data_NonConfigurable_17 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 31 3a 31 33 5d 20 31 30 30 75 38 20 3d 20  [src/main.sw:21:13] 100u8 = 
data_NonConfigurable_18 .bytes[72] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 32 3a 31 33 5d 20 73 74 64 3a 3a 69 64 65 6e 74 69 74 79 3a 3a 49 64 65 6e 74 69 74 79 3a 3a 41 64 64 72 65 73 73 28 41 64 64 72 65 73 73 3a 3a 7a 65 72 6f 28 29 29 20 3d 20  [src/main.sw:82:13] std::identity::Identity::Address(Address::zero()) = 
data_NonConfigurable_19 .bytes[8] 49 64 65 6e 74 69 74 79  Identity
data_NonConfigurable_20 .bytes[47] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 34 3a 31 33 5d 20 73 74 64 3a 3a 69 6e 70 75 74 73 3a 3a 49 6e 70 75 74 3a 3a 43 6f 69 6e 20 3d 20  [src/main.sw:84:13] std::inputs::Input::Coin = 
data_NonConfigurable_21 .bytes[4] 43 6f 69 6e  Coin
data_NonConfigurable_22 .bytes[8] 43 6f 6e 74 72 61 63 74  Contract
data_NonConfigurable_23 .bytes[7] 4d 65 73 73 61 67 65  Message
data_NonConfigurable_24 .bytes[130] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 36 3a 31 33 5d 20 73 74 64 3a 3a 6c 6f 77 5f 6c 65 76 65 6c 5f 63 61 6c 6c 3a 3a 43 61 6c 6c 50 61 72 61 6d 73 20 7b 0a 20 20 20 20 63 6f 69 6e 73 3a 20 31 2c 0a 20 20 20 20 61 73 73 65 74 5f 69 64 3a 20 73 74 64 3a 3a 61 73 73 65 74 5f 69 64 3a 3a 41 73 73 65 74 49 64 3a 3a 7a 65 72 6f 28 29 2c 0a 20 20 20 20 67 61 73 3a 20 32 2c 0a 7d 20 3d 20  [src/main.sw:86:13] std::low_level_call::CallParams {.    coins: 1,.    asset_id: std::asset_id::AssetId::zero(),.    gas: 2,.} = 
data_NonConfigurable_25 .bytes[10] 43 61 6c 6c 50 61 72 61 6d 73  CallParams
data_NonConfigurable_26 .bytes[5] 63 6f 69 6e 73  coins
data_NonConfigurable_27 .bytes[8] 61 73 73 65 74 5f 69 64  asset_id
data_NonConfigurable_28 .bytes[3] 67 61 73  gas
data_NonConfigurable_29 .bytes[32] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 32 3a 31 33 5d 20 75 38 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:22:13] u8::max() = 
data_NonConfigurable_30 .bytes[53] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 31 3a 31 33 5d 20 73 74 64 3a 3a 6f 70 74 69 6f 6e 3a 3a 4f 70 74 69 6f 6e 3a 3a 53 6f 6d 65 28 31 75 38 29 20 3d 20  [src/main.sw:91:13] std::option::Option::Some(1u8) = 
data_NonConfigurable_31 .bytes[4] 4e 6f 6e 65  None
data_NonConfigurable_32 .bytes[6] 4f 70 74 69 6f 6e  Option
data_NonConfigurable_33 .bytes[49] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 33 3a 31 33 5d 20 73 74 64 3a 3a 6f 75 74 70 75 74 73 3a 3a 4f 75 74 70 75 74 3a 3a 43 6f 69 6e 20 3d 20  [src/main.sw:93:13] std::outputs::Output::Coin = 
data_NonConfigurable_34 .bytes[6] 43 68 61 6e 67 65  Change
data_NonConfigurable_35 .bytes[8] 56 61 72 69 61 62 6c 65  Variable
data_NonConfigurable_36 .bytes[15] 43 6f 6e 74 72 61 63 74 43 72 65 61 74 65 64  ContractCreated
data_NonConfigurable_37 .bytes[26] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 34 3a 31 33 5d 20 66 28 29 20 3d 20  [src/main.sw:94:13] f() = 
data_NonConfigurable_38 .bytes[6] 52 65 73 75 6c 74  Result
data_NonConfigurable_39 .bytes[5] 68 65 6c 6c 6f  hello
data_NonConfigurable_40 .bytes[67] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 36 3a 31 33 5d 20 73 74 64 3a 3a 73 74 72 69 6e 67 3a 3a 53 74 72 69 6e 67 3a 3a 66 72 6f 6d 5f 61 73 63 69 69 5f 73 74 72 28 22 68 65 6c 6c 6f 22 29 20 3d 20  [src/main.sw:96:13] std::string::String::from_ascii_str("hello") = 
data_NonConfigurable_41 .bytes[51] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 37 3a 31 33 5d 20 73 74 64 3a 3a 74 78 3a 3a 54 72 61 6e 73 61 63 74 69 6f 6e 3a 3a 53 63 72 69 70 74 20 3d 20  [src/main.sw:97:13] std::tx::Transaction::Script = 
data_NonConfigurable_42 .bytes[6] 53 63 72 69 70 74  Script
data_NonConfigurable_43 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 34 3a 31 33 5d 20 75 31 36 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:24:13] u16::min() = 
data_NonConfigurable_44 .bytes[6] 43 72 65 61 74 65  Create
data_NonConfigurable_45 .bytes[4] 4d 69 6e 74  Mint
data_NonConfigurable_46 .bytes[7] 55 70 67 72 61 64 65  Upgrade
data_NonConfigurable_47 .bytes[6] 55 70 6c 6f 61 64  Upload
data_NonConfigurable_48 .bytes[4] 42 6c 6f 62  Blob
data_NonConfigurable_49 .bytes[46] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 39 3a 31 33 5d 20 73 74 64 3a 3a 75 31 32 38 3a 3a 55 31 32 38 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:99:13] std::u128::U128::zero() = 
data_NonConfigurable_50 .bytes[4] 55 31 32 38  U128
data_NonConfigurable_51 .bytes[5] 75 70 70 65 72  upper
data_NonConfigurable_52 .bytes[5] 6c 6f 77 65 72  lower
data_NonConfigurable_53 .bytes[61] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 30 30 3a 31 33 5d 20 73 74 64 3a 3a 75 31 32 38 3a 3a 55 31 32 38 45 72 72 6f 72 3a 3a 4c 6f 73 73 4f 66 50 72 65 63 69 73 69 6f 6e 20 3d 20  [src/main.sw:100:13] std::u128::U128Error::LossOfPrecision = 
data_NonConfigurable_54 .bytes[15] 4c 6f 73 73 4f 66 50 72 65 63 69 73 69 6f 6e  LossOfPrecision
data_NonConfigurable_55 .bytes[125] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 30 31 3a 31 33 5d 20 7b 0a 20 20 20 20 6c 65 74 20 6d 75 74 20 76 20 3d 20 73 74 64 3a 3a 76 65 63 3a 3a 56 65 63 3a 3a 6e 65 77 28 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 31 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 32 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 33 75 36 34 29 3b 0a 20 20 20 20 76 0a 7d 20 3d 20  [src/main.sw:101:13] {.    let mut v = std::vec::Vec::new();.    v.push(1u64);.    v.push(2u64);.    v.push(3u64);.    v.} = 
data_NonConfigurable_56 .bytes[132] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 30 38 3a 31 33 5d 20 7b 0a 20 20 20 20 6c 65 74 20 6d 75 74 20 76 20 3d 20 73 74 64 3a 3a 76 65 63 3a 3a 56 65 63 3a 3a 6e 65 77 28 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 31 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 32 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 33 75 36 34 29 3b 0a 20 20 20 20 76 2e 69 74 65 72 28 29 0a 7d 20 3d 20  [src/main.sw:108:13] {.    let mut v = std::vec::Vec::new();.    v.push(1u64);.    v.push(2u64);.    v.push(3u64);.    v.iter().} = 
data_NonConfigurable_57 .bytes[7] 56 65 63 49 74 65 72  VecIter
data_NonConfigurable_58 .bytes[6] 76 61 6c 75 65 73  values
data_NonConfigurable_59 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 35 3a 31 33 5d 20 31 75 31 36 20 3d 20  [src/main.sw:25:13] 1u16 = 
data_NonConfigurable_60 .bytes[5] 69 6e 64 65 78  index
data_NonConfigurable_61 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 31 37 3a 35 5d 20 31 31 75 36 34 20 3d 20  [src/main.sw:117:5] 11u64 = 
data_NonConfigurable_62 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 35 3a 31 33 5d 20 74 72 75 65 20 3d 20  [src/main.sw:15:13] true = 
data_NonConfigurable_63 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 36 3a 31 33 5d 20 31 30 75 31 36 20 3d 20  [src/main.sw:26:13] 10u16 = 
data_NonConfigurable_64 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 37 3a 31 33 5d 20 31 30 30 75 31 36 20 3d 20  [src/main.sw:27:13] 100u16 = 
data_NonConfigurable_65 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 38 3a 31 33 5d 20 75 31 36 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:28:13] u16::max() = 
data_NonConfigurable_66 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 30 3a 31 33 5d 20 75 33 32 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:30:13] u32::min() = 
data_NonConfigurable_67 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 31 3a 31 33 5d 20 31 75 33 32 20 3d 20  [src/main.sw:31:13] 1u32 = 
data_NonConfigurable_68 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 32 3a 31 33 5d 20 31 30 75 33 32 20 3d 20  [src/main.sw:32:13] 10u32 = 
data_NonConfigurable_69 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 33 3a 31 33 5d 20 31 30 30 75 33 32 20 3d 20  [src/main.sw:33:13] 100u32 = 
data_NonConfigurable_70 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 34 3a 31 33 5d 20 75 33 32 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:34:13] u32::max() = 
data_NonConfigurable_71 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 36 3a 31 33 5d 20 75 36 34 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:36:13] u64::min() = 
data_NonConfigurable_72 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 37 3a 31 33 5d 20 31 75 36 34 20 3d 20  [src/main.sw:37:13] 1u64 = 
data_NonConfigurable_73 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 36 3a 31 33 5d 20 66 61 6c 73 65 20 3d 20  [src/main.sw:16:13] false = 
data_NonConfigurable_74 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 38 3a 31 33 5d 20 31 30 75 36 34 20 3d 20  [src/main.sw:38:13] 10u64 = 
data_NonConfigurable_75 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 39 3a 31 33 5d 20 31 30 30 75 36 34 20 3d 20  [src/main.sw:39:13] 100u64 = 
data_NonConfigurable_76 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 30 3a 31 33 5d 20 75 36 34 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:40:13] u64::max() = 
data_NonConfigurable_77 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 32 3a 31 33 5d 20 75 32 35 36 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:42:13] u256::min() = 
data_NonConfigurable_78 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................................
data_NonConfigurable_79 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 33 3a 31 33 5d 20 31 75 32 35 36 20 3d 20  [src/main.sw:43:13] 1u256 = 
data_NonConfigurable_80 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0a  ................................
data_NonConfigurable_81 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 34 3a 31 33 5d 20 31 30 75 32 35 36 20 3d 20  [src/main.sw:44:13] 10u256 = 
data_NonConfigurable_82 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64  ...............................d
data_NonConfigurable_83 .bytes[30] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 35 3a 31 33 5d 20 31 30 30 75 32 35 36 20 3d 20  [src/main.sw:45:13] 100u256 = 
data_NonConfigurable_84 .bytes[32] ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
data_NonConfigurable_85 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 36 3a 31 33 5d 20 75 32 35 36 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:46:13] u256::max() = 
data_NonConfigurable_86 .bytes[32] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 38 3a 31 33 5d 20 75 38 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:18:13] u8::min() = 
data_NonConfigurable_87 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 38 3a 31 33 5d 20 62 32 35 36 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:48:13] b256::min() = 
data_NonConfigurable_88 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 39 3a 31 33 5d 20 62 32 35 36 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:49:13] b256::max() = 
data_NonConfigurable_89 .bytes[1] 41  A
data_NonConfigurable_90 .bytes[26] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 32 3a 31 33 5d 20 22 41 22 20 3d 20  [src/main.sw:52:13] "A" = 
data_NonConfigurable_91 .bytes[42] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 33 3a 31 33 5d 20 5f 5f 74 6f 5f 73 74 72 5f 61 72 72 61 79 28 22 41 22 29 20 3d 20  [src/main.sw:53:13] __to_str_array("A") = 
data_NonConfigurable_92 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 36 3a 31 33 5d 20 28 22 41 22 2c 20 30 75 38 29 20 3d 20  [src/main.sw:56:13] ("A", 0u8) = 
data_NonConfigurable_93 .bytes[0]  
data_NonConfigurable_94 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 37 3a 31 33 5d 20 5b 30 75 38 2c 20 31 75 38 5d 20 3d 20  [src/main.sw:57:13] [0u8, 1u8] = 
data_NonConfigurable_95 .bytes[26] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 39 3a 31 33 5d 20 31 75 38 20 3d 20  [src/main.sw:19:13] 1u8 = 
data_NonConfigurable_96 .bytes[49] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 38 3a 31 33 5d 20 5f 5f 73 6c 69 63 65 28 26 5b 30 75 38 2c 20 31 75 38 5d 2c 20 30 2c 20 32 29 20 3d 20  [src/main.sw:58:13] __slice(&[0u8, 1u8], 0, 2) = 
data_NonConfigurable_97 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 31 3a 31 33 5d 20 53 20 7b 7d 20 3d 20  [src/main.sw:61:13] S {} = 
data_NonConfigurable_98 .bytes[30] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 32 3a 31 33 5d 20 45 3a 3a 4e 6f 6e 65 20 3d 20  [src/main.sw:62:13] E::None = 
data_NonConfigurable_99 .bytes[36] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 33 3a 31 33 5d 20 45 3a 3a 53 6f 6d 65 28 53 20 7b 7d 29 20 3d 20  [src/main.sw:63:13] E::Some(S {}) = 
data_NonConfigurable_100 .bytes[52] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 36 3a 31 33 5d 20 73 74 64 3a 3a 61 64 64 72 65 73 73 3a 3a 41 64 64 72 65 73 73 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:66:13] std::address::Address::zero() = 
data_NonConfigurable_101 .bytes[53] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 37 3a 31 33 5d 20 73 74 64 3a 3a 61 73 73 65 74 5f 69 64 3a 3a 41 73 73 65 74 49 64 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:67:13] std::asset_id::AssetId::zero() = 
data_NonConfigurable_102 .bytes[75] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 38 3a 31 33 5d 20 73 74 64 3a 3a 61 75 74 68 3a 3a 41 75 74 68 45 72 72 6f 72 3a 3a 49 6e 70 75 74 73 4e 6f 74 41 6c 6c 4f 77 6e 65 64 42 79 53 61 6d 65 41 64 64 72 65 73 73 20 3d 20  [src/main.sw:68:13] std::auth::AuthError::InputsNotAllOwnedBySameAddress = 
data_NonConfigurable_103 .bytes[30] 49 6e 70 75 74 73 4e 6f 74 41 6c 6c 4f 77 6e 65 64 42 79 53 61 6d 65 41 64 64 72 65 73 73  InputsNotAllOwnedBySameAddress
data_NonConfigurable_104 .bytes[16] 43 61 6c 6c 65 72 49 73 49 6e 74 65 72 6e 61 6c  CallerIsInternal
data_NonConfigurable_105 .word 2
data_NonConfigurable_106 .word 4294967295
data_NonConfigurable_107 .word 18446744073709551615
data_NonConfigurable_108 .word 14757395258967588866
data_NonConfigurable_109 .bytes[4] 74 72 75 65  true
data_NonConfigurable_110 .bytes[5] 66 61 6c 73 65  false
data_NonConfigurable_111 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10  ................................
data_NonConfigurable_112 .bytes[1] 28  (
data_NonConfigurable_113 .bytes[1] 29  )
data_NonConfigurable_114 .bytes[1] 5b  [
data_NonConfigurable_115 .bytes[1] 5d  ]
data_NonConfigurable_116 .bytes[1] 53  S
data_NonConfigurable_117 .bytes[1] 20   
data_NonConfigurable_118 .bytes[1] 7d  }
data_NonConfigurable_119 .bytes[3] 20 7b 20   { 
data_NonConfigurable_120 .bytes[1] 45  E
data_NonConfigurable_121 .bytes[7] 41 64 64 72 65 73 73  Address
data_NonConfigurable_122 .bytes[7] 41 73 73 65 74 49 64  AssetId
data_NonConfigurable_123 .bytes[10] 43 6f 6e 74 72 61 63 74 49 64  ContractId
data_NonConfigurable_124 .word 4148
data_NonConfigurable_125 .word 3966


    [1;32mFinished[0m debug [unoptimized + fuel] target(s) [42.36 KB] in 2.16s
