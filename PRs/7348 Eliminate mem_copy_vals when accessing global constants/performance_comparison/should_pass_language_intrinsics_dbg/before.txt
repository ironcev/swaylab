    [1;32mBuilding[0m /home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg
   [1;32mCompiling[0m library [1mstd[0m (/home/kebradalaonda/p/sway/sway-lib-std)
// IR: Final
library {
}

   [1;32mCompiling[0m script [1mdbg[0m (/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg)
// IR: Final
script {
    global std::debug::STDERR : u64 = const u64 2
    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    pub entry fn __entry() -> ptr slice, !3 {
        local mut { u64, u64, u64 } __aggr_memcpy_0
        local mut { u64, u64, u64 } __aggr_memcpy_00
        local mut { u64, u64, u64 } __aggr_memcpy_01
        local mut { u64, u64, u64 } __aggr_memcpy_02
        local mut slice __aggr_memcpy_03
        local { u64, u64, u64 } __anon_0
        local { u64, u64, u64 } __anon_00
        local { u64, u64, u64 } __anon_01
        local { { u64, u64, u64 } } __anon_1
        local { u64, u64, u64 } __anon_10
        local { u64, u64 } __anon_11
        local { { u64, u64, u64 } } __anon_2
        local slice __ret_value
        local { { u64, u64, u64 } } __tmp_block_arg
        local { { u64, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { u64, u64, u64 } } buffer
        local { { u64, u64, u64 } } buffer_
        local u64 item_
        local u64 result
        local u64 self_
        local { { u64, u64, u64 } } self_0

        entry():
        v0 = get_local ptr slice, __ret_value
        v1 = call main_0(), !6
        v2 = get_local ptr u64, result, !7
        store v1 to v2, !7
        v3 = get_local ptr u64, result, !8
        v4 = get_local ptr u64, item_, !11
        mem_copy_val v4, v3
        v5 = get_local ptr u64, item_, !14
        v6 = const u64 1024
        v7 = asm(cap: v6) -> u64 hp, !17 {
            aloc   cap
        }
        v8 = int_to_ptr v7 to ptr u8, !18
        v9 = ptr_to_int v8 to u64, !19
        v10 = get_local ptr { u64, u64, u64 }, __anon_0, !20
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !21
        store v9 to v12, !22
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13, !23
        store v6 to v14, !24
        v15 = const u64 2
        v16 = get_elem_ptr v10, ptr u64, v15, !25
        v17 = const u64 0
        store v17 to v16, !26
        v18 = asm(buffer: v10) -> ptr { u64, u64, u64 } buffer {
        }
        v19 = get_local ptr { u64, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v19, v18
        v20 = get_local ptr { { u64, u64, u64 } }, __anon_1, !28
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, u64, u64 }, v21, !29
        mem_copy_val v22, v19
        v23 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg
        mem_copy_val v23, v20
        v24 = get_local ptr u64, self_, !32
        mem_copy_val v24, v5
        v25 = get_local ptr { { u64, u64, u64 } }, buffer_, !33
        mem_copy_val v25, v23
        v26 = get_local ptr { { u64, u64, u64 } }, buffer_, !35
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr { u64, u64, u64 }, v27, !37
        v29 = asm(buffer: v28) -> ptr { u64, u64, u64 } buffer {
        }
        v30 = get_local ptr { u64, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v30, v29
        v31 = get_local ptr { u64, u64, u64 }, __anon_00, !38
        mem_copy_val v31, v30
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32, !39
        v34 = load v33, !40
        v35 = int_to_ptr v34 to ptr u8, !41
        v36 = const u64 1
        v37 = get_elem_ptr v31, ptr u64, v36, !42
        v38 = load v37, !43
        v39 = const u64 2
        v40 = get_elem_ptr v31, ptr u64, v39, !44
        v41 = load v40, !45
        v42 = get_local ptr u64, self_, !47
        v43 = load v42, !48
        v44 = const u64 8
        v45 = add v41, v44, !49
        v46 = cmp gt v45 v38, !50
        cbr v46, encode_162_abi_encode_163_block1(), encode_162_abi_encode_163_block0(v35, v38), !51

        encode_162_abi_encode_163_block0(v47: ptr u8, v48: u64):
        v49 = ptr_to_int v47 to u64, !52
        v50 = add v49, v41, !53
        v51 = int_to_ptr v50 to ptr u64, !54
        store v43 to v51, !55
        v52 = const u64 8
        v53 = add v41, v52, !56
        v54 = ptr_to_int v47 to u64, !57
        v55 = get_local ptr { u64, u64, u64 }, __anon_10, !58
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !59
        store v54 to v57, !60
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !61
        store v48 to v59, !62
        v60 = const u64 2
        v61 = get_elem_ptr v55, ptr u64, v60, !63
        store v53 to v61, !64
        v62 = asm(buffer: v55) -> ptr { u64, u64, u64 } buffer {
        }
        v63 = get_local ptr { u64, u64, u64 }, __aggr_memcpy_01
        mem_copy_val v63, v62
        v64 = get_local ptr { { u64, u64, u64 } }, __anon_2, !66
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr { u64, u64, u64 }, v65, !67
        mem_copy_val v66, v63
        v67 = get_local ptr { { u64, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v67, v64
        v68 = get_local ptr { { u64, u64, u64 } }, buffer, !69
        mem_copy_val v68, v67
        v69 = get_local ptr { { u64, u64, u64 } }, buffer, !71
        v70 = get_local ptr { { u64, u64, u64 } }, self_0, !74
        mem_copy_val v70, v69
        v71 = get_local ptr { { u64, u64, u64 } }, self_0, !76
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64, u64 }, v72, !77
        v74 = asm(buffer: v73) -> ptr { u64, u64, u64 } buffer {
        }
        v75 = get_local ptr { u64, u64, u64 }, __aggr_memcpy_02
        mem_copy_val v75, v74
        v76 = get_local ptr { u64, u64, u64 }, __anon_01, !78
        mem_copy_val v76, v75
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !79
        v79 = load v78, !80
        v80 = int_to_ptr v79 to ptr u8, !81
        v81 = const u64 2
        v82 = get_elem_ptr v76, ptr u64, v81, !82
        v83 = ptr_to_int v80 to u64, !83
        v84 = get_local ptr { u64, u64 }, __anon_11, !84
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr u64, v85, !85
        store v83 to v86, !86
        v87 = const u64 1
        v88 = get_elem_ptr v84, ptr u64, v87, !87
        mem_copy_val v88, v82
        v89 = asm(s: v84) -> ptr slice s {
        }
        v90 = get_local ptr slice, __aggr_memcpy_03
        mem_copy_val v90, v89
        v91 = get_local ptr slice, __tmp_block_arg1
        mem_copy_val v91, v90
        v92 = get_local ptr slice, __tmp_block_arg2
        mem_copy_val v92, v91
        mem_copy_val v0, v92
        ret ptr slice v0

        encode_162_abi_encode_163_block1():
        v93 = const u64 2
        v94 = mul v38, v93, !88
        v95 = add v94, v44, !89
        v96 = asm(new_cap: v95, old_ptr: v35, len: v41) -> ptr u8 hp, !90 {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br encode_162_abi_encode_163_block0(v96, v95), !91
    }

    entry_orig fn main_0() -> u64, !95 {
        local () _
        local u64 _0
        local { {  }, bool } _1
        local bool __
        local bool ___
        local u8 ____
        local u8 _____
        local u8 ______
        local u8 _______
        local u8 ________
        local u64 _________
        local u64 __________
        local u64 ___________
        local u64 ____________
        local u64 _____________
        local u64 ______________
        local u64 _______________
        local u64 ________________
        local u64 _________________
        local u64 __________________
        local u64 ___________________
        local u64 ____________________
        local u64 _____________________
        local u64 ______________________
        local u64 _______________________
        local u256 ________________________
        local u256 _________________________
        local u256 __________________________
        local u256 ___________________________
        local u256 ____________________________
        local b256 _____________________________
        local b256 ______________________________
        local slice _______________________________
        local string<1> ________________________________
        local { slice, u8 } _________________________________
        local [u8; 2] __________________________________
        local __slice[u8] ___________________________________
        local {  } ____________________________________
        local { u64, ( () | {  } ) } _____________________________________
        local { u64, ( () | {  } ) } ______________________________________
        local { b256 } _______________________________________
        local { b256 } ________________________________________
        local { u64 } _________________________________________
        local { [b256; 2] } __________________________________________
        local { u64 } ___________________________________________
        local { { u64, u64 }, u64 } ____________________________________________
        local { b256 } _____________________________________________
        local { u64 } ______________________________________________
        local { u64, ( { b256 } | { b256 } ) } _______________________________________________
        local { u64 } ________________________________________________
        local { u64, { b256 }, u64 } _________________________________________________
        local { u64, ( () | u8 ) } __________________________________________________
        local { u64 } ___________________________________________________
        local { u64, ( u64 | u64 ) } ____________________________________________________
        local { { { u64, u64 }, u64 } } _____________________________________________________
        local { u64 } ______________________________________________________
        local { u64, u64 } _______________________________________________________
        local { u64 } ________________________________________________________
        local { { u64, u64 }, u64 } _________________________________________________________
        local { { { u64, u64 }, u64 }, u64 } __________________________________________________________
        local mut slice __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local mut { {  }, bool } __aggr_memcpy_01
        local mut { {  }, bool } __aggr_memcpy_010
        local mut { {  }, bool } __aggr_memcpy_011
        local mut { {  }, bool } __aggr_memcpy_012
        local mut { {  }, bool } __aggr_memcpy_013
        local mut { {  }, bool } __aggr_memcpy_014
        local mut { {  }, bool } __aggr_memcpy_015
        local mut { {  }, bool } __aggr_memcpy_016
        local mut { {  }, bool } __aggr_memcpy_017
        local mut { {  }, bool } __aggr_memcpy_018
        local mut { {  }, bool } __aggr_memcpy_019
        local mut { {  }, bool } __aggr_memcpy_02
        local mut { {  }, bool } __aggr_memcpy_020
        local mut { {  }, bool } __aggr_memcpy_021
        local mut { {  }, bool } __aggr_memcpy_022
        local mut slice __aggr_memcpy_023
        local mut { u64, u64 } __aggr_memcpy_024
        local mut slice __aggr_memcpy_025
        local mut { {  }, bool } __aggr_memcpy_026
        local mut { {  }, bool } __aggr_memcpy_027
        local mut { {  }, bool } __aggr_memcpy_028
        local mut { { u64, u64 }, u64 } __aggr_memcpy_029
        local mut { {  }, bool } __aggr_memcpy_03
        local mut { { u64, u64 }, u64 } __aggr_memcpy_030
        local mut { {  }, bool } __aggr_memcpy_031
        local mut { {  }, bool } __aggr_memcpy_032
        local mut __slice[u8] __aggr_memcpy_04
        local mut { {  }, bool } __aggr_memcpy_05
        local mut { u64, u64 } __aggr_memcpy_06
        local mut { {  }, bool } __aggr_memcpy_07
        local mut { {  }, bool } __aggr_memcpy_08
        local mut { {  }, bool } __aggr_memcpy_09
        local {  } __anon_0
        local string<2> __anon_00
        local string<2> __anon_000
        local string<2> __anon_0000
        local { u64, u64 } __anon_00000
        local { u64, u64 } __anon_0001
        local string<2> __anon_001
        local { u64, u64 } __anon_002
        local { u64, ( () | u8 ) } __anon_003
        local string<2> __anon_004
        local string<2> __anon_005
        local { u64, u64 } __anon_006
        local string<2> __anon_007
        local { u64, u64 } __anon_01
        local { { u64, u64 }, u64 } __anon_010
        local { { { u64, u64 }, u64 }, u64 } __anon_011
        local { { u64, u64 }, u64 } __anon_0110
        local { b256 } __anon_012
        local string<22> __anon_013
        local { b256 } __anon_014
        local string<8> __anon_015
        local string<2> __anon_016
        local string<4> __anon_017
        local { b256 } __anon_018
        local string<10> __anon_019
        local string<0> __anon_02
        local string<4> __anon_020
        local string<4> __anon_021
        local { u64, ( u64 | u64 ) } __anon_022
        local string<6> __anon_023
        local { { { u64, u64 }, u64 } } __anon_024
        local { u64, u64 } __anon_025
        local string<6> __anon_026
        local { u64, u64 } __anon_027
        local string<4> __anon_028
        local string<15> __anon_029
        local ptr u8 __anon_03
        local { { { u64, u64 }, u64 }, u64 } __anon_030
        local string<7> __anon_031
        local { b256 } __anon_04
        local { b256 } __anon_05
        local string<30> __anon_06
        local [b256; 2] __anon_07
        local string<4> __anon_08
        local string<18> __anon_09
        local string<25> __anon_1
        local slice __anon_10
        local { u64, u64 } __anon_100
        local { u64, u64 } __anon_1000
        local slice __anon_101
        local { u64, u64 } __anon_1010
        local { u64, u64 } __anon_1011
        local { u64, u64 } __anon_1012
        local { u64, u64 } __anon_1013
        local { u64, u64 } __anon_1014
        local { u64, u64 } __anon_1015
        local { u64, u64 } __anon_1016
        local string<1> __anon_102
        local { u64, u64 } __anon_103
        local slice __anon_104
        local {  } __anon_105
        local string<28> __anon_106
        local { u64, u64 } __anon_107
        local slice __anon_108
        local string<1> __anon_109
        local string<1> __anon_11
        local { u64, u64 } __anon_110
        local { u64, u64 } __anon_1100
        local { u64, u64 } __anon_1101
        local { u64, u64 } __anon_1102
        local { [b256; 2] } __anon_1103
        local { u64, u64 } __anon_1104
        local { u64, u64 } __anon_1105
        local { u64, ( () | u8 ) } __anon_1106
        local { u64, u64 } __anon_1107
        local { u64, u64 } __anon_1108
        local { u64, u64 } __anon_1109
        local slice __anon_111
        local { u64, u64 } __anon_1110
        local { u64, u64 } __anon_1111
        local slice __anon_1112
        local { u64, u64 } __anon_1113
        local { u64, u64 } __anon_1114
        local slice __anon_1115
        local { u64, u64 } __anon_1116
        local { u64, u64 } __anon_1117
        local slice __anon_1118
        local { u64, u64 } __anon_1119
        local {  } __anon_112
        local { u64, u64 } __anon_1120
        local { u64, u64 } __anon_1121
        local string<29> __anon_113
        local { u64, u64 } __anon_114
        local slice __anon_115
        local string<1> __anon_116
        local { u64, u64 } __anon_117
        local slice __anon_118
        local {  } __anon_119
        local { u64, u64 } __anon_12
        local string<33> __anon_120
        local { u64, u64 } __anon_121
        local { u64, u64 } __anon_1210
        local string<15> __anon_1211
        local string<6> __anon_1212
        local slice __anon_122
        local string<1> __anon_123
        local { u64, u64 } __anon_124
        local slice __anon_125
        local {  } __anon_126
        local string<33> __anon_127
        local { u64, u64 } __anon_128
        local slice __anon_129
        local slice __anon_13
        local string<1> __anon_130
        local { u64, u64 } __anon_131
        local { u64, u64 } __anon_1310
        local { u64, u64 } __anon_1311
        local slice __anon_132
        local {  } __anon_133
        local string<27> __anon_134
        local { u64, u64 } __anon_135
        local slice __anon_136
        local string<1> __anon_137
        local { u64, u64 } __anon_138
        local slice __anon_139
        local {  } __anon_14
        local {  } __anon_140
        local string<28> __anon_141
        local slice __anon_1410
        local slice __anon_1411
        local { u64, u64 } __anon_142
        local slice __anon_143
        local string<1> __anon_144
        local { u64, u64 } __anon_145
        local slice __anon_146
        local {  } __anon_147
        local string<29> __anon_148
        local { u64, u64 } __anon_149
        local string<28> __anon_15
        local slice __anon_150
        local string<1> __anon_151
        local string<4> __anon_1510
        local { u64, u64 } __anon_152
        local slice __anon_153
        local {  } __anon_154
        local string<33> __anon_155
        local { u64, u64 } __anon_156
        local slice __anon_157
        local string<1> __anon_158
        local { u64, u64 } __anon_159
        local { u64, u64 } __anon_16
        local slice __anon_160
        local {  } __anon_161
        local { u64, u64 } __anon_1610
        local string<34> __anon_162
        local { u64, u64 } __anon_163
        local slice __anon_164
        local string<1> __anon_165
        local { u64, u64 } __anon_166
        local slice __anon_167
        local {  } __anon_168
        local string<28> __anon_169
        local slice __anon_17
        local { u64, u64 } __anon_170
        local slice __anon_171
        local slice __anon_1710
        local string<1> __anon_172
        local { u64, u64 } __anon_173
        local slice __anon_174
        local {  } __anon_175
        local string<29> __anon_176
        local { u64, u64 } __anon_177
        local slice __anon_178
        local string<1> __anon_179
        local string<1> __anon_18
        local { u64, u64 } __anon_180
        local slice __anon_181
        local {  } __anon_182
        local string<30> __anon_183
        local { u64, u64 } __anon_184
        local slice __anon_185
        local string<1> __anon_186
        local { u64, u64 } __anon_187
        local slice __anon_188
        local {  } __anon_189
        local { u64, u64 } __anon_19
        local string<34> __anon_190
        local { u64, u64 } __anon_191
        local slice __anon_192
        local string<1> __anon_193
        local { u64, u64 } __anon_194
        local slice __anon_195
        local {  } __anon_196
        local string<34> __anon_197
        local { u64, u64 } __anon_198
        local slice __anon_199
        local { u64, u64 } __anon_2
        local slice __anon_20
        local string<1> __anon_200
        local slice __anon_2000
        local { u64, u64 } __anon_201
        local slice __anon_2010
        local slice __anon_2011
        local slice __anon_2012
        local slice __anon_2013
        local slice __anon_2014
        local slice __anon_202
        local {  } __anon_203
        local string<34> __anon_204
        local { u64, u64 } __anon_205
        local slice __anon_206
        local string<1> __anon_207
        local { u64, u64 } __anon_208
        local slice __anon_209
        local {  } __anon_21
        local string<1> __anon_210
        local slice __anon_2100
        local slice __anon_2101
        local slice __anon_2102
        local slice __anon_2103
        local slice __anon_2104
        local slice __anon_2105
        local slice __anon_2106
        local slice __anon_2107
        local slice __anon_2108
        local slice __anon_2109
        local { u64, u64 } __anon_211
        local slice __anon_2110
        local slice __anon_2111
        local slice __anon_2112
        local slice __anon_2113
        local slice __anon_2114
        local slice __anon_2115
        local slice __anon_2116
        local slice __anon_212
        local {  } __anon_213
        local string<26> __anon_214
        local { u64, u64 } __anon_215
        local slice __anon_216
        local string<1> __anon_217
        local { u64, u64 } __anon_218
        local slice __anon_219
        local string<32> __anon_22
        local string<1> __anon_220
        local {  } __anon_221
        local string<42> __anon_222
        local { u64, u64 } __anon_223
        local slice __anon_224
        local string<1> __anon_225
        local { u64, u64 } __anon_226
        local slice __anon_227
        local string<1> __anon_228
        local { u64, u64 } __anon_229
        local { u64, u64 } __anon_23
        local slice __anon_230
        local { slice, u8 } __anon_231
        local {  } __anon_232
        local string<33> __anon_233
        local { u64, u64 } __anon_234
        local slice __anon_235
        local string<1> __anon_236
        local { u64, u64 } __anon_237
        local slice __anon_238
        local [u8; 2] __anon_239
        local slice __anon_24
        local {  } __anon_240
        local string<33> __anon_241
        local { u64, u64 } __anon_242
        local slice __anon_243
        local string<1> __anon_244
        local { u64, u64 } __anon_245
        local slice __anon_246
        local [u8; 2] __anon_247
        local { ptr u8, u64 } __anon_248
        local {  } __anon_249
        local string<1> __anon_25
        local string<49> __anon_250
        local { u64, u64 } __anon_251
        local slice __anon_252
        local string<1> __anon_253
        local { u64, u64 } __anon_254
        local slice __anon_255
        local {  } __anon_256
        local {  } __anon_257
        local string<27> __anon_258
        local { u64, u64 } __anon_259
        local { u64, u64 } __anon_26
        local slice __anon_260
        local string<1> __anon_261
        local { u64, u64 } __anon_262
        local slice __anon_263
        local { u64, ( () | {  } ) } __anon_264
        local {  } __anon_265
        local string<30> __anon_266
        local { u64, u64 } __anon_267
        local slice __anon_268
        local string<1> __anon_269
        local slice __anon_27
        local { u64, u64 } __anon_270
        local slice __anon_271
        local { u64, ( () | {  } ) } __anon_272
        local {  } __anon_273
        local {  } __anon_274
        local string<36> __anon_275
        local { u64, u64 } __anon_276
        local slice __anon_277
        local string<1> __anon_278
        local { u64, u64 } __anon_279
        local {  } __anon_28
        local slice __anon_280
        local {  } __anon_281
        local string<52> __anon_282
        local { u64, u64 } __anon_283
        local slice __anon_284
        local string<1> __anon_285
        local { u64, u64 } __anon_286
        local slice __anon_287
        local {  } __anon_288
        local string<53> __anon_289
        local string<26> __anon_29
        local { u64, u64 } __anon_290
        local slice __anon_291
        local string<1> __anon_292
        local { u64, u64 } __anon_293
        local slice __anon_294
        local { u64 } __anon_295
        local {  } __anon_296
        local string<75> __anon_297
        local { u64, u64 } __anon_298
        local slice __anon_299
        local slice __anon_3
        local { u64, u64 } __anon_30
        local string<1> __anon_300
        local { u64, u64 } __anon_301
        local string<2> __anon_3010
        local string<2> __anon_3011
        local string<2> __anon_3012
        local slice __anon_302
        local {  } __anon_303
        local string<46> __anon_304
        local { u64, u64 } __anon_305
        local slice __anon_306
        local string<1> __anon_307
        local { u64, u64 } __anon_308
        local slice __anon_309
        local slice __anon_31
        local { u64 } __anon_310
        local string<16> __anon_3100
        local string<4> __anon_3101
        local string<17> __anon_3102
        local string<8> __anon_3103
        local string<8> __anon_3104
        local string<5> __anon_3105
        local string<6> __anon_3106
        local string<8> __anon_3107
        local string<6> __anon_3108
        local string<6> __anon_3109
        local {  } __anon_311
        local string<5> __anon_3110
        local string<6> __anon_3111
        local string<69> __anon_312
        local { u64, u64 } __anon_313
        local slice __anon_314
        local string<1> __anon_315
        local { u64, u64 } __anon_316
        local slice __anon_317
        local {  } __anon_318
        local string<139> __anon_319
        local string<1> __anon_32
        local { u64, u64 } __anon_320
        local slice __anon_321
        local string<1> __anon_322
        local { u64, u64 } __anon_323
        local slice __anon_324
        local {  } __anon_325
        local string<59> __anon_326
        local { u64, u64 } __anon_327
        local slice __anon_328
        local string<1> __anon_329
        local { u64, u64 } __anon_33
        local { u64, u64 } __anon_330
        local slice __anon_331
        local { u64 } __anon_332
        local {  } __anon_333
        local string<66> __anon_334
        local { u64, u64 } __anon_335
        local slice __anon_336
        local string<1> __anon_337
        local { u64, u64 } __anon_338
        local slice __anon_339
        local slice __anon_34
        local { u64, ( { b256 } | { b256 } ) } __anon_340
        local {  } __anon_341
        local string<72> __anon_342
        local { u64, u64 } __anon_343
        local slice __anon_344
        local string<1> __anon_345
        local { u64, u64 } __anon_346
        local slice __anon_347
        local { u64 } __anon_348
        local {  } __anon_349
        local {  } __anon_35
        local string<47> __anon_350
        local { u64, u64 } __anon_351
        local slice __anon_352
        local string<1> __anon_353
        local { u64, u64 } __anon_354
        local slice __anon_355
        local { u64, { b256 }, u64 } __anon_356
        local {  } __anon_357
        local string<130> __anon_358
        local { u64, u64 } __anon_359
        local string<27> __anon_36
        local slice __anon_360
        local string<1> __anon_361
        local { u64, u64 } __anon_362
        local slice __anon_363
        local { u64, ( () | u8 ) } __anon_364
        local {  } __anon_365
        local string<53> __anon_366
        local { u64, u64 } __anon_367
        local slice __anon_368
        local string<1> __anon_369
        local { u64, u64 } __anon_37
        local { u64, u64 } __anon_370
        local slice __anon_371
        local { u64 } __anon_372
        local {  } __anon_373
        local string<49> __anon_374
        local { u64, u64 } __anon_375
        local slice __anon_376
        local string<1> __anon_377
        local { u64, u64 } __anon_378
        local slice __anon_379
        local slice __anon_38
        local {  } __anon_380
        local string<26> __anon_381
        local { u64, u64 } __anon_382
        local slice __anon_383
        local string<1> __anon_384
        local { u64, u64 } __anon_385
        local slice __anon_386
        local string<5> __anon_387
        local { u64, u64 } __anon_388
        local slice __anon_389
        local string<1> __anon_39
        local {  } __anon_390
        local string<67> __anon_391
        local { u64, u64 } __anon_392
        local slice __anon_393
        local string<1> __anon_394
        local { u64, u64 } __anon_395
        local slice __anon_396
        local { u64 } __anon_397
        local {  } __anon_398
        local string<51> __anon_399
        local string<1> __anon_4
        local { u64, u64 } __anon_40
        local { u64, u64 } __anon_400
        local slice __anon_401
        local { u64, u64 } __anon_4010
        local { u64, u64 } __anon_4011
        local { u64, u64 } __anon_4012
        local string<1> __anon_402
        local { u64, u64 } __anon_403
        local slice __anon_404
        local {  } __anon_405
        local string<46> __anon_406
        local { u64, u64 } __anon_407
        local slice __anon_408
        local string<1> __anon_409
        local slice __anon_41
        local { u64, u64 } __anon_410
        local slice __anon_411
        local { u64 } __anon_412
        local {  } __anon_413
        local string<61> __anon_414
        local { u64, u64 } __anon_415
        local slice __anon_416
        local string<1> __anon_417
        local { u64, u64 } __anon_418
        local slice __anon_419
        local {  } __anon_42
        local {  } __anon_420
        local string<125> __anon_421
        local { u64, u64 } __anon_422
        local slice __anon_423
        local string<1> __anon_424
        local { u64, u64 } __anon_425
        local slice __anon_426
        local {  } __anon_427
        local string<132> __anon_428
        local { u64, u64 } __anon_429
        local string<28> __anon_43
        local slice __anon_430
        local string<1> __anon_431
        local { u64, u64 } __anon_432
        local slice __anon_433
        local {  } __anon_434
        local string<28> __anon_435
        local { u64, u64 } __anon_436
        local slice __anon_437
        local string<1> __anon_438
        local { u64, u64 } __anon_439
        local { u64, u64 } __anon_44
        local slice __anon_440
        local { u64, u64 } __anon_441
        local { u64, u64 } __anon_442
        local { u64, u64 } __anon_443
        local { u64, u64 } __anon_444
        local { u64, u64 } __anon_445
        local { u64, u64 } __anon_446
        local { u64, u64 } __anon_447
        local { u64, u64 } __anon_448
        local { u64, u64 } __anon_449
        local slice __anon_45
        local { u64, u64 } __anon_450
        local { u64, u64 } __anon_451
        local { u64, u64 } __anon_452
        local string<1> __anon_46
        local { u64, u64 } __anon_47
        local slice __anon_48
        local {  } __anon_49
        local { u64, u64 } __anon_5
        local string<32> __anon_50
        local slice __anon_500
        local slice __anon_501
        local slice __anon_502
        local { u64, u64 } __anon_51
        local slice __anon_510
        local slice __anon_511
        local slice __anon_512
        local slice __anon_513
        local slice __anon_514
        local slice __anon_515
        local slice __anon_516
        local slice __anon_517
        local slice __anon_518
        local slice __anon_519
        local slice __anon_52
        local slice __anon_520
        local slice __anon_521
        local string<1> __anon_53
        local { u64, u64 } __anon_54
        local slice __anon_55
        local {  } __anon_56
        local string<33> __anon_57
        local { u64, u64 } __anon_58
        local slice __anon_59
        local slice __anon_6
        local string<1> __anon_60
        local { u64, u64 } __anon_61
        local string<7> __anon_610
        local string<8> __anon_611
        local string<6> __anon_612
        local string<4> __anon_613
        local string<5> __anon_614
        local string<5> __anon_615
        local slice __anon_62
        local {  } __anon_63
        local string<27> __anon_64
        local { u64, u64 } __anon_65
        local slice __anon_66
        local string<1> __anon_67
        local { u64, u64 } __anon_68
        local slice __anon_69
        local {  } __anon_7
        local {  } __anon_70
        local string<28> __anon_71
        local { u64, u64 } __anon_710
        local { u64, u64 } __anon_711
        local { u64, u64 } __anon_712
        local { u64, u64 } __anon_713
        local { u64, u64 } __anon_714
        local { u64, u64 } __anon_715
        local { u64, u64 } __anon_72
        local slice __anon_73
        local string<1> __anon_74
        local { u64, u64 } __anon_75
        local slice __anon_76
        local {  } __anon_77
        local string<29> __anon_78
        local { u64, u64 } __anon_79
        local string<27> __anon_8
        local slice __anon_80
        local string<1> __anon_81
        local slice __anon_810
        local slice __anon_811
        local slice __anon_812
        local slice __anon_813
        local slice __anon_814
        local slice __anon_815
        local { u64, u64 } __anon_82
        local slice __anon_83
        local {  } __anon_84
        local string<33> __anon_85
        local { u64, u64 } __anon_86
        local slice __anon_87
        local string<1> __anon_88
        local { u64, u64 } __anon_89
        local { u64, u64 } __anon_9
        local slice __anon_90
        local {  } __anon_91
        local string<3> __anon_910
        local string<8> __anon_911
        local string<7> __anon_912
        local string<33> __anon_92
        local { u64, u64 } __anon_93
        local slice __anon_94
        local string<1> __anon_95
        local { u64, u64 } __anon_96
        local slice __anon_97
        local {  } __anon_98
        local string<27> __anon_99
        local string<25> __const = const string<25> "[src/main.sw:13:13] () = "
        local string<2> __const0 = const string<2> "()"
        local string<1> __const1 = const string<1> "\x0a"
        local string<27> __const10 = const string<27> "[src/main.sw:20:13] 10u8 = "
        local string<46> __const100 = const string<46> "[src/main.sw:69:13] std::b512::B512::zero() = "
        local string<4> __const101 = const string<4> "B512"
        local string<4> __const102 = const string<4> "bits"
        local string<2> __const103 = const string<2> ", "
        local string<2> __const104 = const string<2> ": "
        local string<2> __const105 = const string<2> ", "
        local string<1> __const106 = const string<1> "\x0a"
        local string<69> __const107 = const string<69> "[src/main.sw:71:13] std::block::BlockHashError::BlockHeightTooHigh = "
        local string<18> __const108 = const string<18> "BlockHeightTooHigh"
        local string<1> __const109 = const string<1> "\x0a"
        local string<1> __const11 = const string<1> "\x0a"
        local string<139> __const110 = const string<139> "[src/main.sw:72:13] {\x0a    let mut bytes = std::bytes::Bytes::new();\x0a    bytes.push(1);\x0a    bytes.push(2);\x0a    bytes.push(3);\x0a    bytes\x0a} = "
        local string<1> __const111 = const string<1> "\x0a"
        local b256 __const112 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<59> __const113 = const string<59> "[src/main.sw:79:13] std::contract_id::ContractId::zero() = "
        local string<1> __const114 = const string<1> "\x0a"
        local string<66> __const115 = const string<66> "[src/main.sw:81:13] std::ecr::EcRecoverError::ZeroLengthMessage = "
        local string<22> __const116 = const string<22> "UnrecoverablePublicKey"
        local string<17> __const117 = const string<17> "ZeroLengthMessage"
        local string<1> __const118 = const string<1> "\x0a"
        local b256 __const119 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<28> __const12 = const string<28> "[src/main.sw:21:13] 100u8 = "
        local string<72> __const120 = const string<72> "[src/main.sw:82:13] std::identity::Identity::Address(Address::zero()) = "
        local string<8> __const121 = const string<8> "Identity"
        local string<2> __const122 = const string<2> ", "
        local string<8> __const123 = const string<8> "Identity"
        local string<2> __const124 = const string<2> ", "
        local string<1> __const125 = const string<1> "\x0a"
        local string<47> __const126 = const string<47> "[src/main.sw:84:13] std::inputs::Input::Coin = "
        local string<4> __const127 = const string<4> "Coin"
        local string<8> __const128 = const string<8> "Contract"
        local string<7> __const129 = const string<7> "Message"
        local string<1> __const13 = const string<1> "\x0a"
        local string<1> __const130 = const string<1> "\x0a"
        local b256 __const131 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<130> __const132 = const string<130> "[src/main.sw:86:13] std::low_level_call::CallParams {\x0a    coins: 1,\x0a    asset_id: std::asset_id::AssetId::zero(),\x0a    gas: 2,\x0a} = "
        local string<10> __const133 = const string<10> "CallParams"
        local string<5> __const134 = const string<5> "coins"
        local string<8> __const135 = const string<8> "asset_id"
        local string<2> __const136 = const string<2> ", "
        local string<2> __const137 = const string<2> ": "
        local string<3> __const138 = const string<3> "gas"
        local string<1> __const139 = const string<1> "\x0a"
        local string<32> __const14 = const string<32> "[src/main.sw:22:13] u8::max() = "
        local string<53> __const140 = const string<53> "[src/main.sw:91:13] std::option::Option::Some(1u8) = "
        local string<4> __const141 = const string<4> "None"
        local string<6> __const142 = const string<6> "Option"
        local string<1> __const143 = const string<1> "\x0a"
        local string<49> __const144 = const string<49> "[src/main.sw:93:13] std::outputs::Output::Coin = "
        local string<4> __const145 = const string<4> "Coin"
        local string<8> __const146 = const string<8> "Contract"
        local string<6> __const147 = const string<6> "Change"
        local string<8> __const148 = const string<8> "Variable"
        local string<15> __const149 = const string<15> "ContractCreated"
        local string<1> __const15 = const string<1> "\x0a"
        local string<1> __const150 = const string<1> "\x0a"
        local string<26> __const151 = const string<26> "[src/main.sw:94:13] f() = "
        local string<6> __const152 = const string<6> "Result"
        local string<6> __const153 = const string<6> "Result"
        local string<1> __const154 = const string<1> "\x0a"
        local string<5> __const155 = const string<5> "hello"
        local string<67> __const156 = const string<67> "[src/main.sw:96:13] std::string::String::from_ascii_str(\x22hello\x22) = "
        local string<1> __const157 = const string<1> "\x0a"
        local string<51> __const158 = const string<51> "[src/main.sw:97:13] std::tx::Transaction::Script = "
        local string<6> __const159 = const string<6> "Script"
        local string<33> __const16 = const string<33> "[src/main.sw:24:13] u16::min() = "
        local string<6> __const160 = const string<6> "Create"
        local string<4> __const161 = const string<4> "Mint"
        local string<7> __const162 = const string<7> "Upgrade"
        local string<6> __const163 = const string<6> "Upload"
        local string<4> __const164 = const string<4> "Blob"
        local string<1> __const165 = const string<1> "\x0a"
        local string<46> __const166 = const string<46> "[src/main.sw:99:13] std::u128::U128::zero() = "
        local string<4> __const167 = const string<4> "U128"
        local string<5> __const168 = const string<5> "upper"
        local string<5> __const169 = const string<5> "lower"
        local string<1> __const17 = const string<1> "\x0a"
        local string<1> __const170 = const string<1> "\x0a"
        local string<61> __const171 = const string<61> "[src/main.sw:100:13] std::u128::U128Error::LossOfPrecision = "
        local string<15> __const172 = const string<15> "LossOfPrecision"
        local string<1> __const173 = const string<1> "\x0a"
        local string<125> __const174 = const string<125> "[src/main.sw:101:13] {\x0a    let mut v = std::vec::Vec::new();\x0a    v.push(1u64);\x0a    v.push(2u64);\x0a    v.push(3u64);\x0a    v\x0a} = "
        local string<1> __const175 = const string<1> "\x0a"
        local string<132> __const176 = const string<132> "[src/main.sw:108:13] {\x0a    let mut v = std::vec::Vec::new();\x0a    v.push(1u64);\x0a    v.push(2u64);\x0a    v.push(3u64);\x0a    v.iter()\x0a} = "
        local string<7> __const177 = const string<7> "VecIter"
        local string<6> __const178 = const string<6> "values"
        local string<2> __const179 = const string<2> ", "
        local string<27> __const18 = const string<27> "[src/main.sw:25:13] 1u16 = "
        local string<2> __const180 = const string<2> ": "
        local string<5> __const181 = const string<5> "index"
        local string<1> __const182 = const string<1> "\x0a"
        local string<28> __const183 = const string<28> "[src/main.sw:117:5] 11u64 = "
        local string<1> __const184 = const string<1> "\x0a"
        local string<1> __const19 = const string<1> "\x0a"
        local string<27> __const2 = const string<27> "[src/main.sw:15:13] true = "
        local string<28> __const20 = const string<28> "[src/main.sw:26:13] 10u16 = "
        local string<1> __const21 = const string<1> "\x0a"
        local string<29> __const22 = const string<29> "[src/main.sw:27:13] 100u16 = "
        local string<1> __const23 = const string<1> "\x0a"
        local string<33> __const24 = const string<33> "[src/main.sw:28:13] u16::max() = "
        local string<1> __const25 = const string<1> "\x0a"
        local string<33> __const26 = const string<33> "[src/main.sw:30:13] u32::min() = "
        local string<1> __const27 = const string<1> "\x0a"
        local string<27> __const28 = const string<27> "[src/main.sw:31:13] 1u32 = "
        local string<1> __const29 = const string<1> "\x0a"
        local string<1> __const3 = const string<1> "\x0a"
        local string<28> __const30 = const string<28> "[src/main.sw:32:13] 10u32 = "
        local string<1> __const31 = const string<1> "\x0a"
        local string<29> __const32 = const string<29> "[src/main.sw:33:13] 100u32 = "
        local string<1> __const33 = const string<1> "\x0a"
        local string<33> __const34 = const string<33> "[src/main.sw:34:13] u32::max() = "
        local string<1> __const35 = const string<1> "\x0a"
        local string<33> __const36 = const string<33> "[src/main.sw:36:13] u64::min() = "
        local string<1> __const37 = const string<1> "\x0a"
        local string<27> __const38 = const string<27> "[src/main.sw:37:13] 1u64 = "
        local string<1> __const39 = const string<1> "\x0a"
        local string<28> __const4 = const string<28> "[src/main.sw:16:13] false = "
        local string<28> __const40 = const string<28> "[src/main.sw:38:13] 10u64 = "
        local string<1> __const41 = const string<1> "\x0a"
        local string<29> __const42 = const string<29> "[src/main.sw:39:13] 100u64 = "
        local string<1> __const43 = const string<1> "\x0a"
        local string<33> __const44 = const string<33> "[src/main.sw:40:13] u64::max() = "
        local string<1> __const45 = const string<1> "\x0a"
        local u256 __const46 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<34> __const47 = const string<34> "[src/main.sw:42:13] u256::min() = "
        local string<1> __const48 = const string<1> "\x0a"
        local u256 __const49 = const u256 0x0000000000000000000000000000000000000000000000000000000000000001
        local string<1> __const5 = const string<1> "\x0a"
        local string<28> __const50 = const string<28> "[src/main.sw:43:13] 1u256 = "
        local string<1> __const51 = const string<1> "\x0a"
        local u256 __const52 = const u256 0x000000000000000000000000000000000000000000000000000000000000000a
        local string<29> __const53 = const string<29> "[src/main.sw:44:13] 10u256 = "
        local string<1> __const54 = const string<1> "\x0a"
        local u256 __const55 = const u256 0x0000000000000000000000000000000000000000000000000000000000000064
        local string<30> __const56 = const string<30> "[src/main.sw:45:13] 100u256 = "
        local string<1> __const57 = const string<1> "\x0a"
        local u256 __const58 = const u256 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        local string<34> __const59 = const string<34> "[src/main.sw:46:13] u256::max() = "
        local string<32> __const6 = const string<32> "[src/main.sw:18:13] u8::min() = "
        local string<1> __const60 = const string<1> "\x0a"
        local b256 __const61 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<34> __const62 = const string<34> "[src/main.sw:48:13] b256::min() = "
        local string<1> __const63 = const string<1> "\x0a"
        local b256 __const64 = const b256 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        local string<34> __const65 = const string<34> "[src/main.sw:49:13] b256::max() = "
        local string<1> __const66 = const string<1> "\x0a"
        local string<1> __const67 = const string<1> "A"
        local string<26> __const68 = const string<26> "[src/main.sw:52:13] \x22A\x22 = "
        local string<1> __const69 = const string<1> "\x0a"
        local string<1> __const7 = const string<1> "\x0a"
        local string<1> __const70 = const string<1> "A"
        local string<42> __const71 = const string<42> "[src/main.sw:53:13] __to_str_array(\x22A\x22) = "
        local string<1> __const72 = const string<1> "\x0a"
        local string<1> __const73 = const string<1> "A"
        local string<33> __const74 = const string<33> "[src/main.sw:56:13] (\x22A\x22, 0u8) = "
        local string<0> __const75 = const string<0> ""
        local string<2> __const76 = const string<2> ", "
        local string<1> __const77 = const string<1> "\x0a"
        local string<33> __const78 = const string<33> "[src/main.sw:57:13] [0u8, 1u8] = "
        local string<1> __const79 = const string<1> "\x0a"
        local string<26> __const8 = const string<26> "[src/main.sw:19:13] 1u8 = "
        local string<49> __const80 = const string<49> "[src/main.sw:58:13] __slice(&[0u8, 1u8], 0, 2) = "
        local string<1> __const81 = const string<1> "\x0a"
        local string<27> __const82 = const string<27> "[src/main.sw:61:13] S {} = "
        local string<1> __const83 = const string<1> "\x0a"
        local string<30> __const84 = const string<30> "[src/main.sw:62:13] E::None = "
        local string<1> __const85 = const string<1> "\x0a"
        local string<36> __const86 = const string<36> "[src/main.sw:63:13] E::Some(S {}) = "
        local string<1> __const87 = const string<1> "\x0a"
        local b256 __const88 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<52> __const89 = const string<52> "[src/main.sw:66:13] std::address::Address::zero() = "
        local string<1> __const9 = const string<1> "\x0a"
        local string<1> __const90 = const string<1> "\x0a"
        local b256 __const91 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local string<53> __const92 = const string<53> "[src/main.sw:67:13] std::asset_id::AssetId::zero() = "
        local string<1> __const93 = const string<1> "\x0a"
        local string<75> __const94 = const string<75> "[src/main.sw:68:13] std::auth::AuthError::InputsNotAllOwnedBySameAddress = "
        local string<30> __const95 = const string<30> "InputsNotAllOwnedBySameAddress"
        local string<16> __const96 = const string<16> "CallerIsInternal"
        local string<1> __const97 = const string<1> "\x0a"
        local b256 __const98 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local b256 __const99 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local mut { { { u64, u64 }, u64 }, u64 } __for_iterable_2
        local mut { u64, ( () | u8 ) } __for_value_opt_1
        local { u64 } __matched_value_1
        local { u64 } __matched_value_10
        local { u64 } __matched_value_11
        local { u64, ( { b256 } | { b256 } ) } __matched_value_12
        local { u64 } __matched_value_13
        local { u64, ( () | u8 ) } __matched_value_14
        local { u64 } __matched_value_15
        local { u64, ( u64 | u64 ) } __matched_value_16
        local { u64 } __matched_value_17
        local { u64 } __matched_value_18
        local { u64, ( () | u8 ) } __matched_value_3
        local { u64, ( () | u8 ) } __matched_value_4
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local { {  }, bool } __ret_val1
        local { {  }, bool } __ret_val10
        local { {  }, bool } __ret_val11
        local { {  }, bool } __ret_val12
        local { {  }, bool } __ret_val13
        local { {  }, bool } __ret_val14
        local { {  }, bool } __ret_val15
        local { {  }, bool } __ret_val16
        local { {  }, bool } __ret_val17
        local { {  }, bool } __ret_val18
        local { {  }, bool } __ret_val19
        local { {  }, bool } __ret_val2
        local { {  }, bool } __ret_val20
        local { {  }, bool } __ret_val21
        local { {  }, bool } __ret_val22
        local { {  }, bool } __ret_val23
        local { {  }, bool } __ret_val24
        local { { u64, u64 }, u64 } __ret_val25
        local { { u64, u64 }, u64 } __ret_val26
        local { {  }, bool } __ret_val3
        local { {  }, bool } __ret_val4
        local { {  }, bool } __ret_val5
        local { {  }, bool } __ret_val6
        local { {  }, bool } __ret_val7
        local { {  }, bool } __ret_val8
        local { {  }, bool } __ret_val9
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg10
        local slice __tmp_arg100
        local {  } __tmp_arg101
        local slice __tmp_arg102
        local {  } __tmp_arg103
        local slice __tmp_arg104
        local {  } __tmp_arg105
        local slice __tmp_arg106
        local {  } __tmp_arg107
        local slice __tmp_arg108
        local {  } __tmp_arg109
        local {  } __tmp_arg11
        local slice __tmp_arg110
        local {  } __tmp_arg111
        local slice __tmp_arg112
        local {  } __tmp_arg113
        local slice __tmp_arg114
        local {  } __tmp_arg115
        local slice __tmp_arg116
        local {  } __tmp_arg117
        local slice __tmp_arg118
        local {  } __tmp_arg119
        local slice __tmp_arg12
        local slice __tmp_arg120
        local {  } __tmp_arg121
        local slice __tmp_arg122
        local {  } __tmp_arg123
        local slice __tmp_arg124
        local {  } __tmp_arg125
        local slice __tmp_arg126
        local {  } __tmp_arg127
        local slice __tmp_arg128
        local {  } __tmp_arg129
        local {  } __tmp_arg13
        local slice __tmp_arg130
        local {  } __tmp_arg131
        local slice __tmp_arg132
        local {  } __tmp_arg133
        local slice __tmp_arg134
        local {  } __tmp_arg135
        local slice __tmp_arg136
        local {  } __tmp_arg137
        local slice __tmp_arg138
        local {  } __tmp_arg139
        local slice __tmp_arg14
        local slice __tmp_arg140
        local {  } __tmp_arg141
        local slice __tmp_arg142
        local {  } __tmp_arg143
        local slice __tmp_arg144
        local {  } __tmp_arg145
        local slice __tmp_arg146
        local {  } __tmp_arg147
        local slice __tmp_arg148
        local {  } __tmp_arg149
        local {  } __tmp_arg15
        local slice __tmp_arg150
        local {  } __tmp_arg151
        local slice __tmp_arg152
        local {  } __tmp_arg153
        local slice __tmp_arg154
        local {  } __tmp_arg155
        local slice __tmp_arg156
        local {  } __tmp_arg157
        local slice __tmp_arg158
        local {  } __tmp_arg159
        local slice __tmp_arg16
        local slice __tmp_arg160
        local {  } __tmp_arg161
        local slice __tmp_arg162
        local {  } __tmp_arg163
        local slice __tmp_arg164
        local {  } __tmp_arg165
        local slice __tmp_arg166
        local {  } __tmp_arg167
        local slice __tmp_arg168
        local {  } __tmp_arg169
        local {  } __tmp_arg17
        local slice __tmp_arg170
        local {  } __tmp_arg171
        local slice __tmp_arg172
        local {  } __tmp_arg173
        local slice __tmp_arg174
        local {  } __tmp_arg175
        local slice __tmp_arg176
        local {  } __tmp_arg177
        local slice __tmp_arg178
        local {  } __tmp_arg179
        local slice __tmp_arg18
        local slice __tmp_arg180
        local {  } __tmp_arg181
        local slice __tmp_arg182
        local {  } __tmp_arg183
        local slice __tmp_arg184
        local {  } __tmp_arg185
        local slice __tmp_arg186
        local {  } __tmp_arg187
        local slice __tmp_arg188
        local {  } __tmp_arg189
        local {  } __tmp_arg19
        local slice __tmp_arg190
        local {  } __tmp_arg191
        local slice __tmp_arg192
        local {  } __tmp_arg193
        local slice __tmp_arg194
        local {  } __tmp_arg195
        local slice __tmp_arg196
        local {  } __tmp_arg197
        local slice __tmp_arg198
        local {  } __tmp_arg199
        local slice __tmp_arg2
        local slice __tmp_arg20
        local slice __tmp_arg200
        local {  } __tmp_arg201
        local slice __tmp_arg202
        local {  } __tmp_arg203
        local slice __tmp_arg204
        local {  } __tmp_arg205
        local slice __tmp_arg206
        local {  } __tmp_arg207
        local slice __tmp_arg208
        local {  } __tmp_arg209
        local {  } __tmp_arg21
        local slice __tmp_arg210
        local {  } __tmp_arg211
        local slice __tmp_arg212
        local {  } __tmp_arg213
        local slice __tmp_arg214
        local {  } __tmp_arg215
        local slice __tmp_arg216
        local {  } __tmp_arg217
        local slice __tmp_arg218
        local {  } __tmp_arg219
        local slice __tmp_arg22
        local slice __tmp_arg220
        local {  } __tmp_arg221
        local slice __tmp_arg222
        local {  } __tmp_arg223
        local slice __tmp_arg224
        local {  } __tmp_arg225
        local slice __tmp_arg226
        local {  } __tmp_arg227
        local slice __tmp_arg228
        local {  } __tmp_arg229
        local {  } __tmp_arg23
        local slice __tmp_arg230
        local {  } __tmp_arg231
        local slice __tmp_arg232
        local {  } __tmp_arg233
        local slice __tmp_arg234
        local {  } __tmp_arg235
        local slice __tmp_arg236
        local {  } __tmp_arg237
        local slice __tmp_arg238
        local {  } __tmp_arg239
        local slice __tmp_arg24
        local slice __tmp_arg240
        local {  } __tmp_arg241
        local slice __tmp_arg242
        local {  } __tmp_arg243
        local slice __tmp_arg244
        local {  } __tmp_arg245
        local slice __tmp_arg246
        local {  } __tmp_arg247
        local slice __tmp_arg248
        local {  } __tmp_arg249
        local {  } __tmp_arg25
        local slice __tmp_arg250
        local {  } __tmp_arg251
        local slice __tmp_arg252
        local {  } __tmp_arg253
        local slice __tmp_arg254
        local {  } __tmp_arg255
        local slice __tmp_arg256
        local {  } __tmp_arg257
        local slice __tmp_arg258
        local {  } __tmp_arg259
        local slice __tmp_arg26
        local slice __tmp_arg260
        local {  } __tmp_arg261
        local slice __tmp_arg262
        local {  } __tmp_arg263
        local slice __tmp_arg264
        local {  } __tmp_arg265
        local slice __tmp_arg266
        local {  } __tmp_arg267
        local slice __tmp_arg268
        local {  } __tmp_arg269
        local {  } __tmp_arg27
        local slice __tmp_arg270
        local {  } __tmp_arg271
        local slice __tmp_arg272
        local {  } __tmp_arg273
        local slice __tmp_arg274
        local {  } __tmp_arg275
        local slice __tmp_arg276
        local {  } __tmp_arg277
        local slice __tmp_arg278
        local {  } __tmp_arg279
        local slice __tmp_arg28
        local slice __tmp_arg280
        local {  } __tmp_arg281
        local slice __tmp_arg282
        local {  } __tmp_arg283
        local slice __tmp_arg284
        local {  } __tmp_arg285
        local slice __tmp_arg286
        local {  } __tmp_arg287
        local slice __tmp_arg288
        local {  } __tmp_arg289
        local {  } __tmp_arg29
        local slice __tmp_arg290
        local {  } __tmp_arg291
        local slice __tmp_arg292
        local {  } __tmp_arg293
        local slice __tmp_arg294
        local {  } __tmp_arg295
        local slice __tmp_arg296
        local {  } __tmp_arg297
        local slice __tmp_arg298
        local {  } __tmp_arg299
        local {  } __tmp_arg3
        local slice __tmp_arg30
        local slice __tmp_arg300
        local {  } __tmp_arg301
        local slice __tmp_arg302
        local {  } __tmp_arg303
        local slice __tmp_arg304
        local {  } __tmp_arg305
        local slice __tmp_arg306
        local slice __tmp_arg307
        local slice __tmp_arg308
        local u256 __tmp_arg309
        local {  } __tmp_arg31
        local u256 __tmp_arg310
        local u256 __tmp_arg311
        local u256 __tmp_arg312
        local u256 __tmp_arg313
        local b256 __tmp_arg314
        local b256 __tmp_arg315
        local b256 __tmp_arg316
        local slice __tmp_arg317
        local slice __tmp_arg318
        local slice __tmp_arg319
        local slice __tmp_arg32
        local {  } __tmp_arg320
        local {  } __tmp_arg321
        local {  } __tmp_arg322
        local slice __tmp_arg323
        local {  } __tmp_arg324
        local slice __tmp_arg325
        local {  } __tmp_arg326
        local slice __tmp_arg327
        local {  } __tmp_arg328
        local slice __tmp_arg329
        local {  } __tmp_arg33
        local {  } __tmp_arg330
        local slice __tmp_arg331
        local {  } __tmp_arg332
        local slice __tmp_arg333
        local {  } __tmp_arg334
        local {  } __tmp_arg335
        local {  } __tmp_arg336
        local {  } __tmp_arg337
        local {  } __tmp_arg338
        local {  } __tmp_arg339
        local slice __tmp_arg34
        local slice __tmp_arg340
        local {  } __tmp_arg341
        local slice __tmp_arg342
        local {  } __tmp_arg343
        local slice __tmp_arg344
        local {  } __tmp_arg345
        local slice __tmp_arg346
        local { u64, ( () | {  } ) } __tmp_arg347
        local { u64, ( () | {  } ) } __tmp_arg348
        local { b256 } __tmp_arg349
        local {  } __tmp_arg35
        local { b256 } __tmp_arg350
        local { b256 } __tmp_arg351
        local { b256 } __tmp_arg352
        local { b256 } __tmp_arg353
        local { b256 } __tmp_arg354
        local slice __tmp_arg355
        local slice __tmp_arg356
        local slice __tmp_arg357
        local slice __tmp_arg358
        local slice __tmp_arg359
        local slice __tmp_arg36
        local slice __tmp_arg360
        local slice __tmp_arg361
        local { { u64, u64 }, u64 } __tmp_arg362
        local { { u64, u64 }, u64 } __tmp_arg363
        local {  } __tmp_arg37
        local slice __tmp_arg38
        local {  } __tmp_arg39
        local slice __tmp_arg4
        local slice __tmp_arg40
        local {  } __tmp_arg41
        local slice __tmp_arg42
        local {  } __tmp_arg43
        local slice __tmp_arg44
        local {  } __tmp_arg45
        local slice __tmp_arg46
        local {  } __tmp_arg47
        local slice __tmp_arg48
        local {  } __tmp_arg49
        local {  } __tmp_arg5
        local slice __tmp_arg50
        local {  } __tmp_arg51
        local slice __tmp_arg52
        local {  } __tmp_arg53
        local slice __tmp_arg54
        local {  } __tmp_arg55
        local slice __tmp_arg56
        local {  } __tmp_arg57
        local slice __tmp_arg58
        local {  } __tmp_arg59
        local slice __tmp_arg6
        local slice __tmp_arg60
        local {  } __tmp_arg61
        local slice __tmp_arg62
        local {  } __tmp_arg63
        local slice __tmp_arg64
        local {  } __tmp_arg65
        local slice __tmp_arg66
        local {  } __tmp_arg67
        local slice __tmp_arg68
        local {  } __tmp_arg69
        local {  } __tmp_arg7
        local slice __tmp_arg70
        local {  } __tmp_arg71
        local slice __tmp_arg72
        local {  } __tmp_arg73
        local slice __tmp_arg74
        local {  } __tmp_arg75
        local slice __tmp_arg76
        local {  } __tmp_arg77
        local slice __tmp_arg78
        local {  } __tmp_arg79
        local slice __tmp_arg8
        local slice __tmp_arg80
        local {  } __tmp_arg81
        local slice __tmp_arg82
        local {  } __tmp_arg83
        local slice __tmp_arg84
        local {  } __tmp_arg85
        local slice __tmp_arg86
        local {  } __tmp_arg87
        local slice __tmp_arg88
        local {  } __tmp_arg89
        local {  } __tmp_arg9
        local slice __tmp_arg90
        local {  } __tmp_arg91
        local slice __tmp_arg92
        local {  } __tmp_arg93
        local slice __tmp_arg94
        local {  } __tmp_arg95
        local slice __tmp_arg96
        local {  } __tmp_arg97
        local slice __tmp_arg98
        local {  } __tmp_arg99
        local u256 __tmp_block_arg
        local u256 __tmp_block_arg0
        local b256 __tmp_block_arg1
        local b256 __tmp_block_arg10
        local { [b256; 2] } __tmp_block_arg11
        local { {  }, bool } __tmp_block_arg12
        local { {  }, bool } __tmp_block_arg13
        local { u64, u64 } __tmp_block_arg14
        local { { u64, u64 }, u64 } __tmp_block_arg15
        local { { { u64, u64 }, u64 }, u64 } __tmp_block_arg16
        local { u64, ( () | u8 ) } __tmp_block_arg17
        local b256 __tmp_block_arg18
        local { b256 } __tmp_block_arg19
        local b256 __tmp_block_arg2
        local b256 __tmp_block_arg20
        local { b256 } __tmp_block_arg21
        local { {  }, bool } __tmp_block_arg22
        local { {  }, bool } __tmp_block_arg23
        local b256 __tmp_block_arg24
        local { b256 } __tmp_block_arg25
        local { {  }, bool } __tmp_block_arg26
        local { u64, ( u64 | u64 ) } __tmp_block_arg27
        local slice __tmp_block_arg28
        local slice __tmp_block_arg29
        local slice __tmp_block_arg3
        local { u64, u64 } __tmp_block_arg30
        local { u64, u64 } __tmp_block_arg31
        local { { u64, u64 }, u64 } __tmp_block_arg32
        local { { { u64, u64 }, u64 } } __tmp_block_arg33
        local { u64, u64 } __tmp_block_arg34
        local { { { u64, u64 }, u64 }, u64 } __tmp_block_arg35
        local { {  }, bool } __tmp_block_arg36
        local { {  }, bool } __tmp_block_arg4
        local b256 __tmp_block_arg5
        local { b256 } __tmp_block_arg6
        local b256 __tmp_block_arg7
        local { b256 } __tmp_block_arg8
        local b256 __tmp_block_arg9
        local { u64, u64 } __tuple_2
        local { u64, u64 } __tuple_2_
        local ptr {  } _f_
        local ptr {  } _f_0
        local ptr {  } _f_1
        local ptr {  } _f_10
        local ptr {  } _f_11
        local ptr {  } _f_12
        local ptr {  } _f_2
        local ptr {  } _f_3
        local ptr {  } _f_4
        local ptr {  } _f_5
        local ptr {  } _f_6
        local ptr {  } _f_7
        local ptr {  } _f_8
        local ptr {  } _f_9
        local u8 arg_10
        local { u64, ( () | u8 ) } arg_100
        local { u64 } arg_102
        local { u64, ( u64 | u64 ) } arg_104
        local { { { u64, u64 }, u64 } } arg_106
        local { u64 } arg_108
        local { u64, u64 } arg_110
        local { u64 } arg_112
        local { { u64, u64 }, u64 } arg_114
        local { { { u64, u64 }, u64 }, u64 } arg_116
        local u64 arg_118
        local u8 arg_12
        local u8 arg_14
        local u8 arg_16
        local u64 arg_18
        local () arg_2
        local u64 arg_20
        local u64 arg_22
        local u64 arg_24
        local u64 arg_26
        local u64 arg_28
        local u64 arg_30
        local u64 arg_32
        local u64 arg_34
        local u64 arg_36
        local u64 arg_38
        local bool arg_4
        local u64 arg_40
        local u64 arg_42
        local u64 arg_44
        local u64 arg_46
        local u256 arg_48
        local u256 arg_50
        local u256 arg_52
        local u256 arg_54
        local u256 arg_56
        local b256 arg_58
        local bool arg_6
        local b256 arg_60
        local slice arg_62
        local string<1> arg_64
        local { slice, u8 } arg_66
        local [u8; 2] arg_68
        local __slice[u8] arg_70
        local {  } arg_72
        local { u64, ( () | {  } ) } arg_74
        local { u64, ( () | {  } ) } arg_76
        local { b256 } arg_78
        local u8 arg_8
        local { b256 } arg_80
        local { u64 } arg_82
        local { [b256; 2] } arg_84
        local { u64 } arg_86
        local { { u64, u64 }, u64 } arg_88
        local { b256 } arg_90
        local { u64 } arg_92
        local { u64, ( { b256 } | { b256 } ) } arg_94
        local { u64 } arg_96
        local { u64, { b256 }, u64 } arg_98
        local mut { { u64, u64 }, u64 } bytes
        local u64 cap
        local u64 code_
        local u64 count_
        local u64 count_0
        local u64 count_00
        local u64 count_000
        local u64 dst_
        local u8 elem
        local ptr {  } f_
        local ptr {  } f_0
        local mut {  } f_1
        local ptr {  } f_10
        local mut {  } f_101
        local mut {  } f_103
        local mut {  } f_105
        local mut {  } f_107
        local mut {  } f_109
        local mut {  } f_11
        local mut {  } f_111
        local mut {  } f_113
        local mut {  } f_115
        local mut {  } f_117
        local ptr {  } f_12
        local mut {  } f_13
        local mut {  } f_15
        local mut {  } f_17
        local mut {  } f_19
        local ptr {  } f_2
        local mut {  } f_21
        local mut {  } f_23
        local mut {  } f_25
        local mut {  } f_27
        local mut {  } f_29
        local mut {  } f_3
        local mut {  } f_31
        local mut {  } f_33
        local mut {  } f_35
        local mut {  } f_37
        local mut {  } f_39
        local ptr {  } f_4
        local mut {  } f_41
        local mut {  } f_43
        local mut {  } f_45
        local mut {  } f_47
        local mut {  } f_49
        local mut {  } f_5
        local mut {  } f_51
        local mut {  } f_53
        local mut {  } f_55
        local mut {  } f_57
        local mut {  } f_59
        local ptr {  } f_6
        local mut {  } f_61
        local mut {  } f_63
        local mut {  } f_65
        local mut {  } f_67
        local mut {  } f_69
        local mut {  } f_7
        local mut {  } f_71
        local mut {  } f_73
        local mut {  } f_75
        local mut {  } f_77
        local mut {  } f_79
        local ptr {  } f_8
        local mut {  } f_81
        local mut {  } f_83
        local mut {  } f_85
        local mut {  } f_87
        local mut {  } f_89
        local mut {  } f_9
        local mut {  } f_91
        local mut {  } f_93
        local mut {  } f_95
        local mut {  } f_97
        local mut {  } f_99
        local mut { {  }, bool } f__
        local mut { {  }, bool } f__0
        local mut { {  }, bool } f__1
        local mut { {  }, bool } f__2
        local mut { {  }, bool } f___
        local mut { {  }, bool } f____
        local u64 fd_
        local u64 fd_0
        local u64 fd_1
        local u64 fd_10
        local u64 fd_11
        local u64 fd_12
        local u64 fd_13
        local u64 fd_14
        local u64 fd_15
        local u64 fd_16
        local u64 fd_17
        local u64 fd_18
        local u64 fd_19
        local u64 fd_2
        local u64 fd_20
        local u64 fd_21
        local u64 fd_22
        local u64 fd_23
        local u64 fd_24
        local u64 fd_25
        local u64 fd_26
        local u64 fd_27
        local u64 fd_28
        local u64 fd_29
        local u64 fd_3
        local u64 fd_30
        local u64 fd_31
        local u64 fd_32
        local u64 fd_33
        local u64 fd_34
        local u64 fd_35
        local u64 fd_36
        local u64 fd_37
        local u64 fd_38
        local u64 fd_39
        local u64 fd_4
        local u64 fd_40
        local u64 fd_41
        local u64 fd_42
        local u64 fd_43
        local u64 fd_44
        local u64 fd_45
        local u64 fd_46
        local u64 fd_47
        local u64 fd_48
        local u64 fd_49
        local u64 fd_5
        local u64 fd_50
        local u64 fd_51
        local u64 fd_52
        local u64 fd_53
        local u64 fd_54
        local u64 fd_55
        local u64 fd_56
        local u64 fd_57
        local u64 fd_6
        local u64 fd_7
        local u64 fd_8
        local u64 fd_9
        local mut u64 i
        local mut u64 i0
        local mut u64 i1
        local u64 index_
        local u8 item
        local mut { {  }, bool } l
        local u64 len
        local u64 len0
        local slice name_
        local slice name_0
        local slice name_1
        local u64 offset_
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_000
        local u64 other_01
        local u64 other_010
        local u64 other_011
        local u64 other_02
        local u64 other_03
        local u64 other_04
        local u64 other_05
        local u64 other_06
        local u64 other_07
        local u64 other_08
        local u64 other_09
        local u64 other_1
        local u64 other_10
        local u64 other_11
        local u64 other_12
        local u64 other_13
        local u64 other_14
        local u64 other_15
        local u64 other_16
        local u64 other_17
        local u64 other_18
        local u64 other_2
        local u64 other_20
        local u64 other_21
        local u64 other_22
        local u64 other_3
        local u64 other_30
        local u64 other_31
        local u64 other_4
        local u64 other_40
        local u64 other_5
        local u64 other_6
        local u64 other_7
        local u64 other_8
        local u64 other_9
        local { u64, u64 } parts_
        local u64 ptr
        local u64 ptr0
        local u64 ptr_
        local slice s
        local string<1> s_
        local slice s_0
        local () self_
        local {  } self_0
        local ptr { {  }, bool } self_00
        local [b256; 2] self_000
        local u64 self_0000
        local u64 self_0001
        local u64 self_0002
        local u64 self_001
        local slice self_002
        local u64 self_01
        local u64 self_010
        local ptr { {  }, bool } self_011
        local u64 self_012
        local u64 self_013
        local u64 self_014
        local u64 self_015
        local { { u64, u64 }, u64 } self_016
        local u64 self_017
        local u64 self_018
        local ptr { {  }, bool } self_019
        local __slice[u8] self_02
        local u64 self_020
        local u64 self_03
        local ptr { {  }, bool } self_04
        local u64 self_05
        local { { u64, u64 }, u64 } self_06
        local u64 self_07
        local u64 self_08
        local u64 self_09
        local {  } self_1
        local {  } self_10
        local u64 self_100
        local u64 self_1000
        local {  } self_11
        local u64 self_110
        local u64 self_111
        local u64 self_112
        local ptr { {  }, bool } self_113
        local ptr { { { u64, u64 }, u64 }, u64 } self_114
        local u64 self_115
        local ptr { {  }, bool } self_116
        local u64 self_117
        local u64 self_118
        local u64 self_119
        local {  } self_12
        local u64 self_120
        local u64 self_121
        local { { u64, u64 }, u64 } self_122
        local u64 self_123
        local {  } self_13
        local {  } self_14
        local {  } self_15
        local {  } self_16
        local {  } self_17
        local {  } self_18
        local {  } self_19
        local {  } self_2
        local {  } self_20
        local {  } self_21
        local u64 self_210
        local u64 self_211
        local { { u64, u64 }, u64 } self_212
        local u64 self_213
        local u64 self_214
        local u64 self_215
        local u64 self_216
        local {  } self_22
        local {  } self_23
        local {  } self_24
        local {  } self_25
        local {  } self_26
        local {  } self_27
        local {  } self_28
        local {  } self_29
        local {  } self_3
        local {  } self_30
        local string<1> self_31
        local { u64, ( () | u8 ) } self_310
        local ptr { {  }, bool } self_311
        local u64 self_312
        local u64 self_313
        local {  } self_32
        local { slice, u8 } self_33
        local {  } self_34
        local [u8; 2] self_35
        local {  } self_36
        local __slice[u8] self_37
        local {  } self_38
        local {  } self_39
        local {  } self_4
        local {  } self_40
        local {  } self_41
        local { u64, ( () | u8 ) } self_410
        local u64 self_411
        local u64 self_412
        local {  } self_42
        local {  } self_43
        local { u64 } self_44
        local {  } self_45
        local { [b256; 2] } self_46
        local {  } self_47
        local { u64 } self_48
        local {  } self_49
        local {  } self_5
        local { { u64, u64 }, u64 } self_50
        local {  } self_51
        local u64 self_510
        local {  } self_52
        local { u64 } self_53
        local {  } self_54
        local { u64, ( { b256 } | { b256 } ) } self_55
        local {  } self_56
        local { u64 } self_57
        local {  } self_58
        local { u64, { b256 }, u64 } self_59
        local {  } self_6
        local {  } self_60
        local { u64, ( () | u8 ) } self_61
        local {  } self_62
        local { u64 } self_63
        local {  } self_64
        local { u64, ( u64 | u64 ) } self_65
        local {  } self_66
        local u64 self_67
        local { { { u64, u64 }, u64 } } self_68
        local {  } self_69
        local {  } self_7
        local { u64 } self_70
        local {  } self_71
        local { u64, u64 } self_72
        local {  } self_73
        local { u64 } self_74
        local {  } self_75
        local {  } self_76
        local { { u64, u64 }, u64 } self_77
        local { { { u64, u64 }, u64 }, u64 } self_78
        local {  } self_79
        local {  } self_8
        local {  } self_80
        local {  } self_9
        local slice slice_
        local slice slice_0
        local slice slice_00
        local u64 src
        local u64 str_ptr
        local u64 str_size
        local u64 str_size0
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0
        local mut { {  }, bool } type_fix00
        local mut { {  }, bool } type_fix01
        local mut { {  }, bool } type_fix02
        local mut { {  }, bool } type_fix03
        local mut { {  }, bool } type_fix04
        local mut { {  }, bool } type_fix05
        local mut { {  }, bool } type_fix1
        local mut { {  }, bool } type_fix10
        local mut { {  }, bool } type_fix11
        local mut { {  }, bool } type_fix12
        local mut { {  }, bool } type_fix13
        local mut { {  }, bool } type_fix14
        local mut { {  }, bool } type_fix2
        local mut { {  }, bool } type_fix20
        local mut { {  }, bool } type_fix21
        local mut { {  }, bool } type_fix3
        local mut { {  }, bool } type_fix4
        local mut { {  }, bool } type_fix5
        local mut { {  }, bool } type_fix6
        local mut { {  }, bool } type_fix7
        local mut { { u64, u64 }, u64 } v
        local u8 v0
        local mut { { u64, u64 }, u64 } v_
        local { b256 } value
        local u8 value0
        local u64 value1
        local slice value_
        local [b256; 2] value_0
        local b256 value_00
        local { b256 } value_01
        local { b256 } value_1
        local { b256 } value_10
        local { b256 } value_2
        local u64 value_3
        local { { u64, u64 }, u64 } value_4

        entry():
        v0 = get_local ptr string<25>, __const
        v1 = get_local ptr string<2>, __const0
        v2 = get_local ptr (), arg_2
        v3 = const unit (), !96
        store v3 to v2
        v4 = get_local ptr {  }, __anon_0, !97
        v5 = get_local ptr {  }, f_1
        mem_copy_val v5, v4
        v6 = get_local ptr {  }, f_1, !97
        v7 = get_local ptr string<25>, __anon_1
        mem_copy_val v7, v0
        v8 = ptr_to_int v7 to u64, !97
        v9 = get_local ptr { u64, u64 }, __anon_2, !97
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10
        store v8 to v11, !97
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 25
        store v14 to v13, !97
        v15 = get_local ptr slice, __anon_3, !97
        mem_copy_bytes v15, v9, 16
        v16 = get_local ptr {  }, __tmp_arg
        mem_copy_val v16, v6
        v17 = get_local ptr slice, __tmp_arg0
        mem_copy_val v17, v15
        v18 = call print_str_1(v16, v17)
        v19 = get_local ptr (), arg_2
        v20 = get_local ptr {  }, f_1
        v21 = get_local ptr (), self_
        mem_copy_val v21, v19
        v22 = get_local ptr ptr {  }, f_
        store v20 to v22
        v23 = get_local ptr ptr {  }, f_, !99
        v24 = load v23
        v25 = get_local ptr string<2>, __anon_00
        mem_copy_val v25, v1
        v26 = ptr_to_int v25 to u64, !100
        v27 = get_local ptr { u64, u64 }, __anon_1100, !100
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr u64, v28
        store v26 to v29, !100
        v30 = const u64 1
        v31 = get_elem_ptr v27, ptr u64, v30
        v32 = const u64 2
        store v32 to v31, !100
        v33 = get_local ptr slice, __anon_2100, !100
        mem_copy_bytes v33, v27, 16
        v34 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v34, v24
        v35 = get_local ptr slice, __tmp_arg2
        mem_copy_val v35, v33
        v36 = call print_str_1(v34, v35)
        v37 = get_local ptr string<1>, __const1
        v38 = get_local ptr {  }, f_1, !97
        v39 = get_local ptr string<1>, __anon_4
        mem_copy_val v39, v37
        v40 = ptr_to_int v39 to u64, !97
        v41 = get_local ptr { u64, u64 }, __anon_5, !97
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42
        store v40 to v43, !97
        v44 = const u64 1
        v45 = get_elem_ptr v41, ptr u64, v44
        v46 = const u64 1
        store v46 to v45, !97
        v47 = get_local ptr slice, __anon_6, !97
        mem_copy_bytes v47, v41, 16
        v48 = get_local ptr {  }, __tmp_arg3
        mem_copy_val v48, v38
        v49 = get_local ptr slice, __tmp_arg4
        mem_copy_val v49, v47
        v50 = call print_str_1(v48, v49)
        v51 = get_local ptr {  }, f_1, !97
        v52 = get_local ptr {  }, self_0, !97
        mem_copy_val v52, v51
        v53 = get_global ptr u64, std::debug::STDERR, !102
        v54 = load v53, !97
        v55 = get_local ptr u64, fd_, !105
        store v54 to v55, !106
        v56 = get_local ptr u64, fd_, !108
        v57 = load v56, !109
        v58 = const u64 1001, !110
        v59 = asm(id: v58, fd: v57) -> (), !112 {
            ecal   id fd zero zero, !113
        }
        v60 = get_local ptr string<27>, __const2
        v61 = get_local ptr string<1>, __const3
        v62 = get_local ptr (), arg_2
        v63 = get_local ptr (), _, !114
        mem_copy_val v63, v62
        v64 = get_local ptr bool, arg_4
        v65 = const bool true, !115
        store v65 to v64
        v66 = get_local ptr {  }, __anon_7, !116
        v67 = get_local ptr {  }, f_3
        mem_copy_val v67, v66
        v68 = get_local ptr {  }, f_3, !116
        v69 = get_local ptr string<27>, __anon_8
        mem_copy_val v69, v60
        v70 = ptr_to_int v69 to u64, !116
        v71 = get_local ptr { u64, u64 }, __anon_9, !116
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72
        store v70 to v73, !116
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr u64, v74
        v76 = const u64 27
        store v76 to v75, !116
        v77 = get_local ptr slice, __anon_10, !116
        mem_copy_bytes v77, v71, 16
        v78 = get_local ptr {  }, __tmp_arg5
        mem_copy_val v78, v68
        v79 = get_local ptr slice, __tmp_arg6
        mem_copy_val v79, v77
        v80 = call print_str_1(v78, v79)
        v81 = get_local ptr bool, arg_4
        v82 = load v81
        v83 = get_local ptr {  }, f_3
        v84 = call fmt_8(v82, v83)
        v85 = get_local ptr {  }, f_3, !116
        v86 = get_local ptr string<1>, __anon_11
        mem_copy_val v86, v61
        v87 = ptr_to_int v86 to u64, !116
        v88 = get_local ptr { u64, u64 }, __anon_12, !116
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr u64, v89
        store v87 to v90, !116
        v91 = const u64 1
        v92 = get_elem_ptr v88, ptr u64, v91
        v93 = const u64 1
        store v93 to v92, !116
        v94 = get_local ptr slice, __anon_13, !116
        mem_copy_bytes v94, v88, 16
        v95 = get_local ptr {  }, __tmp_arg7
        mem_copy_val v95, v85
        v96 = get_local ptr slice, __tmp_arg8
        mem_copy_val v96, v94
        v97 = call print_str_1(v95, v96)
        v98 = get_local ptr {  }, f_3, !116
        v99 = get_local ptr {  }, self_1, !116
        mem_copy_val v99, v98
        v100 = get_global ptr u64, std::debug::STDERR, !117
        v101 = load v100, !116
        v102 = get_local ptr u64, fd_0, !118
        store v101 to v102, !119
        v103 = get_local ptr u64, fd_0, !120
        v104 = load v103, !121
        v105 = asm(id: v58, fd: v104) -> (), !122 {
            ecal   id fd zero zero, !113
        }
        v106 = get_local ptr string<28>, __const4
        v107 = get_local ptr string<1>, __const5
        v108 = get_local ptr bool, arg_4
        v109 = get_local ptr bool, __, !123
        mem_copy_val v109, v108
        v110 = get_local ptr bool, arg_6
        v111 = const bool false, !124
        store v111 to v110
        v112 = get_local ptr {  }, __anon_14, !125
        v113 = get_local ptr {  }, f_5
        mem_copy_val v113, v112
        v114 = get_local ptr {  }, f_5, !125
        v115 = get_local ptr string<28>, __anon_15
        mem_copy_val v115, v106
        v116 = ptr_to_int v115 to u64, !125
        v117 = get_local ptr { u64, u64 }, __anon_16, !125
        v118 = const u64 0
        v119 = get_elem_ptr v117, ptr u64, v118
        store v116 to v119, !125
        v120 = const u64 1
        v121 = get_elem_ptr v117, ptr u64, v120
        v122 = const u64 28
        store v122 to v121, !125
        v123 = get_local ptr slice, __anon_17, !125
        mem_copy_bytes v123, v117, 16
        v124 = get_local ptr {  }, __tmp_arg9
        mem_copy_val v124, v114
        v125 = get_local ptr slice, __tmp_arg10
        mem_copy_val v125, v123
        v126 = call print_str_1(v124, v125)
        v127 = get_local ptr bool, arg_6
        v128 = load v127
        v129 = get_local ptr {  }, f_5
        v130 = call fmt_8(v128, v129)
        v131 = get_local ptr {  }, f_5, !125
        v132 = get_local ptr string<1>, __anon_18
        mem_copy_val v132, v107
        v133 = ptr_to_int v132 to u64, !125
        v134 = get_local ptr { u64, u64 }, __anon_19, !125
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr u64, v135
        store v133 to v136, !125
        v137 = const u64 1
        v138 = get_elem_ptr v134, ptr u64, v137
        v139 = const u64 1
        store v139 to v138, !125
        v140 = get_local ptr slice, __anon_20, !125
        mem_copy_bytes v140, v134, 16
        v141 = get_local ptr {  }, __tmp_arg11
        mem_copy_val v141, v131
        v142 = get_local ptr slice, __tmp_arg12
        mem_copy_val v142, v140
        v143 = call print_str_1(v141, v142)
        v144 = get_local ptr {  }, f_5, !125
        v145 = get_local ptr {  }, self_2, !125
        mem_copy_val v145, v144
        v146 = get_global ptr u64, std::debug::STDERR, !126
        v147 = load v146, !125
        v148 = get_local ptr u64, fd_1, !127
        store v147 to v148, !128
        v149 = get_local ptr u64, fd_1, !129
        v150 = load v149, !130
        v151 = asm(id: v58, fd: v150) -> (), !131 {
            ecal   id fd zero zero, !113
        }
        v152 = get_local ptr bool, arg_6
        v153 = get_local ptr bool, ___, !132
        mem_copy_val v153, v152
        v154 = get_local ptr string<32>, __const6
        v155 = get_local ptr string<1>, __const7
        v156 = get_local ptr u8, arg_8
        v157 = const u8 0, !134
        store v157 to v156
        v158 = get_local ptr {  }, __anon_21, !135
        v159 = get_local ptr {  }, f_7
        mem_copy_val v159, v158
        v160 = get_local ptr {  }, f_7, !135
        v161 = get_local ptr string<32>, __anon_22
        mem_copy_val v161, v154
        v162 = ptr_to_int v161 to u64, !135
        v163 = get_local ptr { u64, u64 }, __anon_23, !135
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr u64, v164
        store v162 to v165, !135
        v166 = const u64 1
        v167 = get_elem_ptr v163, ptr u64, v166
        v168 = const u64 32
        store v168 to v167, !135
        v169 = get_local ptr slice, __anon_24, !135
        mem_copy_bytes v169, v163, 16
        v170 = get_local ptr {  }, __tmp_arg13
        mem_copy_val v170, v160
        v171 = get_local ptr slice, __tmp_arg14
        mem_copy_val v171, v169
        v172 = call print_str_1(v170, v171)
        v173 = get_local ptr u8, arg_8
        v174 = load v173
        v175 = get_local ptr {  }, f_7
        v176 = call fmt_10(v174, v175)
        v177 = get_local ptr {  }, f_7, !135
        v178 = get_local ptr string<1>, __anon_25
        mem_copy_val v178, v155
        v179 = ptr_to_int v178 to u64, !135
        v180 = get_local ptr { u64, u64 }, __anon_26, !135
        v181 = const u64 0
        v182 = get_elem_ptr v180, ptr u64, v181
        store v179 to v182, !135
        v183 = const u64 1
        v184 = get_elem_ptr v180, ptr u64, v183
        v185 = const u64 1
        store v185 to v184, !135
        v186 = get_local ptr slice, __anon_27, !135
        mem_copy_bytes v186, v180, 16
        v187 = get_local ptr {  }, __tmp_arg15
        mem_copy_val v187, v177
        v188 = get_local ptr slice, __tmp_arg16
        mem_copy_val v188, v186
        v189 = call print_str_1(v187, v188)
        v190 = get_local ptr {  }, f_7, !135
        v191 = get_local ptr {  }, self_3, !135
        mem_copy_val v191, v190
        v192 = get_global ptr u64, std::debug::STDERR, !136
        v193 = load v192, !135
        v194 = get_local ptr u64, fd_2, !137
        store v193 to v194, !138
        v195 = get_local ptr u64, fd_2, !139
        v196 = load v195, !140
        v197 = asm(id: v58, fd: v196) -> (), !141 {
            ecal   id fd zero zero, !113
        }
        v198 = get_local ptr string<26>, __const8
        v199 = get_local ptr string<1>, __const9
        v200 = get_local ptr u8, arg_8
        v201 = get_local ptr u8, ____, !142
        mem_copy_val v201, v200
        v202 = get_local ptr u8, arg_10
        v203 = const u8 1, !143
        store v203 to v202
        v204 = get_local ptr {  }, __anon_28, !144
        v205 = get_local ptr {  }, f_9
        mem_copy_val v205, v204
        v206 = get_local ptr {  }, f_9, !144
        v207 = get_local ptr string<26>, __anon_29
        mem_copy_val v207, v198
        v208 = ptr_to_int v207 to u64, !144
        v209 = get_local ptr { u64, u64 }, __anon_30, !144
        v210 = const u64 0
        v211 = get_elem_ptr v209, ptr u64, v210
        store v208 to v211, !144
        v212 = const u64 1
        v213 = get_elem_ptr v209, ptr u64, v212
        v214 = const u64 26
        store v214 to v213, !144
        v215 = get_local ptr slice, __anon_31, !144
        mem_copy_bytes v215, v209, 16
        v216 = get_local ptr {  }, __tmp_arg17
        mem_copy_val v216, v206
        v217 = get_local ptr slice, __tmp_arg18
        mem_copy_val v217, v215
        v218 = call print_str_1(v216, v217)
        v219 = get_local ptr u8, arg_10
        v220 = load v219
        v221 = get_local ptr {  }, f_9
        v222 = call fmt_10(v220, v221)
        v223 = get_local ptr {  }, f_9, !144
        v224 = get_local ptr string<1>, __anon_32
        mem_copy_val v224, v199
        v225 = ptr_to_int v224 to u64, !144
        v226 = get_local ptr { u64, u64 }, __anon_33, !144
        v227 = const u64 0
        v228 = get_elem_ptr v226, ptr u64, v227
        store v225 to v228, !144
        v229 = const u64 1
        v230 = get_elem_ptr v226, ptr u64, v229
        v231 = const u64 1
        store v231 to v230, !144
        v232 = get_local ptr slice, __anon_34, !144
        mem_copy_bytes v232, v226, 16
        v233 = get_local ptr {  }, __tmp_arg19
        mem_copy_val v233, v223
        v234 = get_local ptr slice, __tmp_arg20
        mem_copy_val v234, v232
        v235 = call print_str_1(v233, v234)
        v236 = get_local ptr {  }, f_9, !144
        v237 = get_local ptr {  }, self_4, !144
        mem_copy_val v237, v236
        v238 = get_global ptr u64, std::debug::STDERR, !145
        v239 = load v238, !144
        v240 = get_local ptr u64, fd_3, !146
        store v239 to v240, !147
        v241 = get_local ptr u64, fd_3, !148
        v242 = load v241, !149
        v243 = asm(id: v58, fd: v242) -> (), !150 {
            ecal   id fd zero zero, !113
        }
        v244 = get_local ptr string<27>, __const10
        v245 = get_local ptr string<1>, __const11
        v246 = get_local ptr u8, arg_10
        v247 = get_local ptr u8, _____, !151
        mem_copy_val v247, v246
        v248 = get_local ptr u8, arg_12
        v249 = const u8 10, !152
        store v249 to v248
        v250 = get_local ptr {  }, __anon_35, !153
        v251 = get_local ptr {  }, f_11
        mem_copy_val v251, v250
        v252 = get_local ptr {  }, f_11, !153
        v253 = get_local ptr string<27>, __anon_36
        mem_copy_val v253, v244
        v254 = ptr_to_int v253 to u64, !153
        v255 = get_local ptr { u64, u64 }, __anon_37, !153
        v256 = const u64 0
        v257 = get_elem_ptr v255, ptr u64, v256
        store v254 to v257, !153
        v258 = const u64 1
        v259 = get_elem_ptr v255, ptr u64, v258
        v260 = const u64 27
        store v260 to v259, !153
        v261 = get_local ptr slice, __anon_38, !153
        mem_copy_bytes v261, v255, 16
        v262 = get_local ptr {  }, __tmp_arg21
        mem_copy_val v262, v252
        v263 = get_local ptr slice, __tmp_arg22
        mem_copy_val v263, v261
        v264 = call print_str_1(v262, v263)
        v265 = get_local ptr u8, arg_12
        v266 = load v265
        v267 = get_local ptr {  }, f_11
        v268 = call fmt_10(v266, v267)
        v269 = get_local ptr {  }, f_11, !153
        v270 = get_local ptr string<1>, __anon_39
        mem_copy_val v270, v245
        v271 = ptr_to_int v270 to u64, !153
        v272 = get_local ptr { u64, u64 }, __anon_40, !153
        v273 = const u64 0
        v274 = get_elem_ptr v272, ptr u64, v273
        store v271 to v274, !153
        v275 = const u64 1
        v276 = get_elem_ptr v272, ptr u64, v275
        v277 = const u64 1
        store v277 to v276, !153
        v278 = get_local ptr slice, __anon_41, !153
        mem_copy_bytes v278, v272, 16
        v279 = get_local ptr {  }, __tmp_arg23
        mem_copy_val v279, v269
        v280 = get_local ptr slice, __tmp_arg24
        mem_copy_val v280, v278
        v281 = call print_str_1(v279, v280)
        v282 = get_local ptr {  }, f_11, !153
        v283 = get_local ptr {  }, self_5, !153
        mem_copy_val v283, v282
        v284 = get_global ptr u64, std::debug::STDERR, !154
        v285 = load v284, !153
        v286 = get_local ptr u64, fd_4, !155
        store v285 to v286, !156
        v287 = get_local ptr u64, fd_4, !157
        v288 = load v287, !158
        v289 = asm(id: v58, fd: v288) -> (), !159 {
            ecal   id fd zero zero, !113
        }
        v290 = get_local ptr string<28>, __const12
        v291 = get_local ptr string<1>, __const13
        v292 = get_local ptr u8, arg_12
        v293 = get_local ptr u8, ______, !160
        mem_copy_val v293, v292
        v294 = get_local ptr u8, arg_14
        v295 = const u8 100, !161
        store v295 to v294
        v296 = get_local ptr {  }, __anon_42, !162
        v297 = get_local ptr {  }, f_13
        mem_copy_val v297, v296
        v298 = get_local ptr {  }, f_13, !162
        v299 = get_local ptr string<28>, __anon_43
        mem_copy_val v299, v290
        v300 = ptr_to_int v299 to u64, !162
        v301 = get_local ptr { u64, u64 }, __anon_44, !162
        v302 = const u64 0
        v303 = get_elem_ptr v301, ptr u64, v302
        store v300 to v303, !162
        v304 = const u64 1
        v305 = get_elem_ptr v301, ptr u64, v304
        v306 = const u64 28
        store v306 to v305, !162
        v307 = get_local ptr slice, __anon_45, !162
        mem_copy_bytes v307, v301, 16
        v308 = get_local ptr {  }, __tmp_arg25
        mem_copy_val v308, v298
        v309 = get_local ptr slice, __tmp_arg26
        mem_copy_val v309, v307
        v310 = call print_str_1(v308, v309)
        v311 = get_local ptr u8, arg_14
        v312 = load v311
        v313 = get_local ptr {  }, f_13
        v314 = call fmt_10(v312, v313)
        v315 = get_local ptr {  }, f_13, !162
        v316 = get_local ptr string<1>, __anon_46
        mem_copy_val v316, v291
        v317 = ptr_to_int v316 to u64, !162
        v318 = get_local ptr { u64, u64 }, __anon_47, !162
        v319 = const u64 0
        v320 = get_elem_ptr v318, ptr u64, v319
        store v317 to v320, !162
        v321 = const u64 1
        v322 = get_elem_ptr v318, ptr u64, v321
        v323 = const u64 1
        store v323 to v322, !162
        v324 = get_local ptr slice, __anon_48, !162
        mem_copy_bytes v324, v318, 16
        v325 = get_local ptr {  }, __tmp_arg27
        mem_copy_val v325, v315
        v326 = get_local ptr slice, __tmp_arg28
        mem_copy_val v326, v324
        v327 = call print_str_1(v325, v326)
        v328 = get_local ptr {  }, f_13, !162
        v329 = get_local ptr {  }, self_6, !162
        mem_copy_val v329, v328
        v330 = get_global ptr u64, std::debug::STDERR, !163
        v331 = load v330, !162
        v332 = get_local ptr u64, fd_5, !164
        store v331 to v332, !165
        v333 = get_local ptr u64, fd_5, !166
        v334 = load v333, !167
        v335 = asm(id: v58, fd: v334) -> (), !168 {
            ecal   id fd zero zero, !113
        }
        v336 = get_local ptr u8, arg_14
        v337 = get_local ptr u8, _______, !169
        mem_copy_val v337, v336
        v338 = get_local ptr string<32>, __const14
        v339 = get_local ptr string<1>, __const15
        v340 = get_local ptr u8, arg_16
        v341 = const u8 255, !170
        store v341 to v340
        v342 = get_local ptr {  }, __anon_49, !171
        v343 = get_local ptr {  }, f_15
        mem_copy_val v343, v342
        v344 = get_local ptr {  }, f_15, !171
        v345 = get_local ptr string<32>, __anon_50
        mem_copy_val v345, v338
        v346 = ptr_to_int v345 to u64, !171
        v347 = get_local ptr { u64, u64 }, __anon_51, !171
        v348 = const u64 0
        v349 = get_elem_ptr v347, ptr u64, v348
        store v346 to v349, !171
        v350 = const u64 1
        v351 = get_elem_ptr v347, ptr u64, v350
        v352 = const u64 32
        store v352 to v351, !171
        v353 = get_local ptr slice, __anon_52, !171
        mem_copy_bytes v353, v347, 16
        v354 = get_local ptr {  }, __tmp_arg29
        mem_copy_val v354, v344
        v355 = get_local ptr slice, __tmp_arg30
        mem_copy_val v355, v353
        v356 = call print_str_1(v354, v355)
        v357 = get_local ptr u8, arg_16
        v358 = load v357
        v359 = get_local ptr {  }, f_15
        v360 = call fmt_10(v358, v359)
        v361 = get_local ptr {  }, f_15, !171
        v362 = get_local ptr string<1>, __anon_53
        mem_copy_val v362, v339
        v363 = ptr_to_int v362 to u64, !171
        v364 = get_local ptr { u64, u64 }, __anon_54, !171
        v365 = const u64 0
        v366 = get_elem_ptr v364, ptr u64, v365
        store v363 to v366, !171
        v367 = const u64 1
        v368 = get_elem_ptr v364, ptr u64, v367
        v369 = const u64 1
        store v369 to v368, !171
        v370 = get_local ptr slice, __anon_55, !171
        mem_copy_bytes v370, v364, 16
        v371 = get_local ptr {  }, __tmp_arg31
        mem_copy_val v371, v361
        v372 = get_local ptr slice, __tmp_arg32
        mem_copy_val v372, v370
        v373 = call print_str_1(v371, v372)
        v374 = get_local ptr {  }, f_15, !171
        v375 = get_local ptr {  }, self_7, !171
        mem_copy_val v375, v374
        v376 = get_global ptr u64, std::debug::STDERR, !172
        v377 = load v376, !171
        v378 = get_local ptr u64, fd_6, !173
        store v377 to v378, !174
        v379 = get_local ptr u64, fd_6, !175
        v380 = load v379, !176
        v381 = asm(id: v58, fd: v380) -> (), !177 {
            ecal   id fd zero zero, !113
        }
        v382 = get_local ptr u8, arg_16
        v383 = get_local ptr u8, ________, !178
        mem_copy_val v383, v382
        v384 = get_local ptr string<33>, __const16
        v385 = get_local ptr string<1>, __const17
        v386 = get_local ptr u64, arg_18
        v387 = const u64 0, !179
        store v387 to v386
        v388 = get_local ptr {  }, __anon_56, !180
        v389 = get_local ptr {  }, f_17
        mem_copy_val v389, v388
        v390 = get_local ptr {  }, f_17, !180
        v391 = get_local ptr string<33>, __anon_57
        mem_copy_val v391, v384
        v392 = ptr_to_int v391 to u64, !180
        v393 = get_local ptr { u64, u64 }, __anon_58, !180
        v394 = const u64 0
        v395 = get_elem_ptr v393, ptr u64, v394
        store v392 to v395, !180
        v396 = const u64 1
        v397 = get_elem_ptr v393, ptr u64, v396
        v398 = const u64 33
        store v398 to v397, !180
        v399 = get_local ptr slice, __anon_59, !180
        mem_copy_bytes v399, v393, 16
        v400 = get_local ptr {  }, __tmp_arg33
        mem_copy_val v400, v390
        v401 = get_local ptr slice, __tmp_arg34
        mem_copy_val v401, v399
        v402 = call print_str_1(v400, v401)
        v403 = get_local ptr u64, arg_18
        v404 = load v403
        v405 = get_local ptr {  }, f_17
        v406 = call fmt_24(v404, v405)
        v407 = get_local ptr {  }, f_17, !180
        v408 = get_local ptr string<1>, __anon_60
        mem_copy_val v408, v385
        v409 = ptr_to_int v408 to u64, !180
        v410 = get_local ptr { u64, u64 }, __anon_61, !180
        v411 = const u64 0
        v412 = get_elem_ptr v410, ptr u64, v411
        store v409 to v412, !180
        v413 = const u64 1
        v414 = get_elem_ptr v410, ptr u64, v413
        v415 = const u64 1
        store v415 to v414, !180
        v416 = get_local ptr slice, __anon_62, !180
        mem_copy_bytes v416, v410, 16
        v417 = get_local ptr {  }, __tmp_arg35
        mem_copy_val v417, v407
        v418 = get_local ptr slice, __tmp_arg36
        mem_copy_val v418, v416
        v419 = call print_str_1(v417, v418)
        v420 = get_local ptr {  }, f_17, !180
        v421 = get_local ptr {  }, self_8, !180
        mem_copy_val v421, v420
        v422 = get_global ptr u64, std::debug::STDERR, !181
        v423 = load v422, !180
        v424 = get_local ptr u64, fd_7, !182
        store v423 to v424, !183
        v425 = get_local ptr u64, fd_7, !184
        v426 = load v425, !185
        v427 = asm(id: v58, fd: v426) -> (), !186 {
            ecal   id fd zero zero, !113
        }
        v428 = get_local ptr string<27>, __const18
        v429 = get_local ptr string<1>, __const19
        v430 = get_local ptr u64, arg_18
        v431 = get_local ptr u64, _________, !187
        mem_copy_val v431, v430
        v432 = get_local ptr u64, arg_20
        v433 = const u64 1, !188
        store v433 to v432
        v434 = get_local ptr {  }, __anon_63, !189
        v435 = get_local ptr {  }, f_19
        mem_copy_val v435, v434
        v436 = get_local ptr {  }, f_19, !189
        v437 = get_local ptr string<27>, __anon_64
        mem_copy_val v437, v428
        v438 = ptr_to_int v437 to u64, !189
        v439 = get_local ptr { u64, u64 }, __anon_65, !189
        v440 = const u64 0
        v441 = get_elem_ptr v439, ptr u64, v440
        store v438 to v441, !189
        v442 = const u64 1
        v443 = get_elem_ptr v439, ptr u64, v442
        v444 = const u64 27
        store v444 to v443, !189
        v445 = get_local ptr slice, __anon_66, !189
        mem_copy_bytes v445, v439, 16
        v446 = get_local ptr {  }, __tmp_arg37
        mem_copy_val v446, v436
        v447 = get_local ptr slice, __tmp_arg38
        mem_copy_val v447, v445
        v448 = call print_str_1(v446, v447)
        v449 = get_local ptr u64, arg_20
        v450 = load v449
        v451 = get_local ptr {  }, f_19
        v452 = call fmt_24(v450, v451)
        v453 = get_local ptr {  }, f_19, !189
        v454 = get_local ptr string<1>, __anon_67
        mem_copy_val v454, v429
        v455 = ptr_to_int v454 to u64, !189
        v456 = get_local ptr { u64, u64 }, __anon_68, !189
        v457 = const u64 0
        v458 = get_elem_ptr v456, ptr u64, v457
        store v455 to v458, !189
        v459 = const u64 1
        v460 = get_elem_ptr v456, ptr u64, v459
        v461 = const u64 1
        store v461 to v460, !189
        v462 = get_local ptr slice, __anon_69, !189
        mem_copy_bytes v462, v456, 16
        v463 = get_local ptr {  }, __tmp_arg39
        mem_copy_val v463, v453
        v464 = get_local ptr slice, __tmp_arg40
        mem_copy_val v464, v462
        v465 = call print_str_1(v463, v464)
        v466 = get_local ptr {  }, f_19, !189
        v467 = get_local ptr {  }, self_9, !189
        mem_copy_val v467, v466
        v468 = get_global ptr u64, std::debug::STDERR, !190
        v469 = load v468, !189
        v470 = get_local ptr u64, fd_8, !191
        store v469 to v470, !192
        v471 = get_local ptr u64, fd_8, !193
        v472 = load v471, !194
        v473 = asm(id: v58, fd: v472) -> (), !195 {
            ecal   id fd zero zero, !113
        }
        v474 = get_local ptr string<28>, __const20
        v475 = get_local ptr string<1>, __const21
        v476 = get_local ptr u64, arg_20
        v477 = get_local ptr u64, __________, !196
        mem_copy_val v477, v476
        v478 = get_local ptr u64, arg_22
        v479 = const u64 10, !197
        store v479 to v478
        v480 = get_local ptr {  }, __anon_70, !198
        v481 = get_local ptr {  }, f_21
        mem_copy_val v481, v480
        v482 = get_local ptr {  }, f_21, !198
        v483 = get_local ptr string<28>, __anon_71
        mem_copy_val v483, v474
        v484 = ptr_to_int v483 to u64, !198
        v485 = get_local ptr { u64, u64 }, __anon_72, !198
        v486 = const u64 0
        v487 = get_elem_ptr v485, ptr u64, v486
        store v484 to v487, !198
        v488 = const u64 1
        v489 = get_elem_ptr v485, ptr u64, v488
        v490 = const u64 28
        store v490 to v489, !198
        v491 = get_local ptr slice, __anon_73, !198
        mem_copy_bytes v491, v485, 16
        v492 = get_local ptr {  }, __tmp_arg41
        mem_copy_val v492, v482
        v493 = get_local ptr slice, __tmp_arg42
        mem_copy_val v493, v491
        v494 = call print_str_1(v492, v493)
        v495 = get_local ptr u64, arg_22
        v496 = load v495
        v497 = get_local ptr {  }, f_21
        v498 = call fmt_24(v496, v497)
        v499 = get_local ptr {  }, f_21, !198
        v500 = get_local ptr string<1>, __anon_74
        mem_copy_val v500, v475
        v501 = ptr_to_int v500 to u64, !198
        v502 = get_local ptr { u64, u64 }, __anon_75, !198
        v503 = const u64 0
        v504 = get_elem_ptr v502, ptr u64, v503
        store v501 to v504, !198
        v505 = const u64 1
        v506 = get_elem_ptr v502, ptr u64, v505
        v507 = const u64 1
        store v507 to v506, !198
        v508 = get_local ptr slice, __anon_76, !198
        mem_copy_bytes v508, v502, 16
        v509 = get_local ptr {  }, __tmp_arg43
        mem_copy_val v509, v499
        v510 = get_local ptr slice, __tmp_arg44
        mem_copy_val v510, v508
        v511 = call print_str_1(v509, v510)
        v512 = get_local ptr {  }, f_21, !198
        v513 = get_local ptr {  }, self_10, !198
        mem_copy_val v513, v512
        v514 = get_global ptr u64, std::debug::STDERR, !199
        v515 = load v514, !198
        v516 = get_local ptr u64, fd_9, !200
        store v515 to v516, !201
        v517 = get_local ptr u64, fd_9, !202
        v518 = load v517, !203
        v519 = asm(id: v58, fd: v518) -> (), !204 {
            ecal   id fd zero zero, !113
        }
        v520 = get_local ptr string<29>, __const22
        v521 = get_local ptr string<1>, __const23
        v522 = get_local ptr u64, arg_22
        v523 = get_local ptr u64, ___________, !205
        mem_copy_val v523, v522
        v524 = get_local ptr u64, arg_24
        v525 = const u64 100, !206
        store v525 to v524
        v526 = get_local ptr {  }, __anon_77, !207
        v527 = get_local ptr {  }, f_23
        mem_copy_val v527, v526
        v528 = get_local ptr {  }, f_23, !207
        v529 = get_local ptr string<29>, __anon_78
        mem_copy_val v529, v520
        v530 = ptr_to_int v529 to u64, !207
        v531 = get_local ptr { u64, u64 }, __anon_79, !207
        v532 = const u64 0
        v533 = get_elem_ptr v531, ptr u64, v532
        store v530 to v533, !207
        v534 = const u64 1
        v535 = get_elem_ptr v531, ptr u64, v534
        v536 = const u64 29
        store v536 to v535, !207
        v537 = get_local ptr slice, __anon_80, !207
        mem_copy_bytes v537, v531, 16
        v538 = get_local ptr {  }, __tmp_arg45
        mem_copy_val v538, v528
        v539 = get_local ptr slice, __tmp_arg46
        mem_copy_val v539, v537
        v540 = call print_str_1(v538, v539)
        v541 = get_local ptr u64, arg_24
        v542 = load v541
        v543 = get_local ptr {  }, f_23
        v544 = call fmt_24(v542, v543)
        v545 = get_local ptr {  }, f_23, !207
        v546 = get_local ptr string<1>, __anon_81
        mem_copy_val v546, v521
        v547 = ptr_to_int v546 to u64, !207
        v548 = get_local ptr { u64, u64 }, __anon_82, !207
        v549 = const u64 0
        v550 = get_elem_ptr v548, ptr u64, v549
        store v547 to v550, !207
        v551 = const u64 1
        v552 = get_elem_ptr v548, ptr u64, v551
        v553 = const u64 1
        store v553 to v552, !207
        v554 = get_local ptr slice, __anon_83, !207
        mem_copy_bytes v554, v548, 16
        v555 = get_local ptr {  }, __tmp_arg47
        mem_copy_val v555, v545
        v556 = get_local ptr slice, __tmp_arg48
        mem_copy_val v556, v554
        v557 = call print_str_1(v555, v556)
        v558 = get_local ptr {  }, f_23, !207
        v559 = get_local ptr {  }, self_11, !207
        mem_copy_val v559, v558
        v560 = get_global ptr u64, std::debug::STDERR, !208
        v561 = load v560, !207
        v562 = get_local ptr u64, fd_10, !209
        store v561 to v562, !210
        v563 = get_local ptr u64, fd_10, !211
        v564 = load v563, !212
        v565 = asm(id: v58, fd: v564) -> (), !213 {
            ecal   id fd zero zero, !113
        }
        v566 = get_local ptr u64, arg_24
        v567 = get_local ptr u64, ____________, !214
        mem_copy_val v567, v566
        v568 = get_local ptr string<33>, __const24
        v569 = get_local ptr string<1>, __const25
        v570 = get_local ptr u64, arg_26
        v571 = const u64 65535, !215
        store v571 to v570
        v572 = get_local ptr {  }, __anon_84, !216
        v573 = get_local ptr {  }, f_25
        mem_copy_val v573, v572
        v574 = get_local ptr {  }, f_25, !216
        v575 = get_local ptr string<33>, __anon_85
        mem_copy_val v575, v568
        v576 = ptr_to_int v575 to u64, !216
        v577 = get_local ptr { u64, u64 }, __anon_86, !216
        v578 = const u64 0
        v579 = get_elem_ptr v577, ptr u64, v578
        store v576 to v579, !216
        v580 = const u64 1
        v581 = get_elem_ptr v577, ptr u64, v580
        v582 = const u64 33
        store v582 to v581, !216
        v583 = get_local ptr slice, __anon_87, !216
        mem_copy_bytes v583, v577, 16
        v584 = get_local ptr {  }, __tmp_arg49
        mem_copy_val v584, v574
        v585 = get_local ptr slice, __tmp_arg50
        mem_copy_val v585, v583
        v586 = call print_str_1(v584, v585)
        v587 = get_local ptr u64, arg_26
        v588 = load v587
        v589 = get_local ptr {  }, f_25
        v590 = call fmt_24(v588, v589)
        v591 = get_local ptr {  }, f_25, !216
        v592 = get_local ptr string<1>, __anon_88
        mem_copy_val v592, v569
        v593 = ptr_to_int v592 to u64, !216
        v594 = get_local ptr { u64, u64 }, __anon_89, !216
        v595 = const u64 0
        v596 = get_elem_ptr v594, ptr u64, v595
        store v593 to v596, !216
        v597 = const u64 1
        v598 = get_elem_ptr v594, ptr u64, v597
        v599 = const u64 1
        store v599 to v598, !216
        v600 = get_local ptr slice, __anon_90, !216
        mem_copy_bytes v600, v594, 16
        v601 = get_local ptr {  }, __tmp_arg51
        mem_copy_val v601, v591
        v602 = get_local ptr slice, __tmp_arg52
        mem_copy_val v602, v600
        v603 = call print_str_1(v601, v602)
        v604 = get_local ptr {  }, f_25, !216
        v605 = get_local ptr {  }, self_12, !216
        mem_copy_val v605, v604
        v606 = get_global ptr u64, std::debug::STDERR, !217
        v607 = load v606, !216
        v608 = get_local ptr u64, fd_11, !218
        store v607 to v608, !219
        v609 = get_local ptr u64, fd_11, !220
        v610 = load v609, !221
        v611 = asm(id: v58, fd: v610) -> (), !222 {
            ecal   id fd zero zero, !113
        }
        v612 = get_local ptr u64, arg_26
        v613 = get_local ptr u64, _____________, !223
        mem_copy_val v613, v612
        v614 = get_local ptr string<33>, __const26
        v615 = get_local ptr string<1>, __const27
        v616 = get_local ptr u64, arg_28
        v617 = const u64 0, !224
        store v617 to v616
        v618 = get_local ptr {  }, __anon_91, !225
        v619 = get_local ptr {  }, f_27
        mem_copy_val v619, v618
        v620 = get_local ptr {  }, f_27, !225
        v621 = get_local ptr string<33>, __anon_92
        mem_copy_val v621, v614
        v622 = ptr_to_int v621 to u64, !225
        v623 = get_local ptr { u64, u64 }, __anon_93, !225
        v624 = const u64 0
        v625 = get_elem_ptr v623, ptr u64, v624
        store v622 to v625, !225
        v626 = const u64 1
        v627 = get_elem_ptr v623, ptr u64, v626
        v628 = const u64 33
        store v628 to v627, !225
        v629 = get_local ptr slice, __anon_94, !225
        mem_copy_bytes v629, v623, 16
        v630 = get_local ptr {  }, __tmp_arg53
        mem_copy_val v630, v620
        v631 = get_local ptr slice, __tmp_arg54
        mem_copy_val v631, v629
        v632 = call print_str_1(v630, v631)
        v633 = get_local ptr u64, arg_28
        v634 = load v633
        v635 = get_local ptr {  }, f_27
        v636 = call fmt_31(v634, v635)
        v637 = get_local ptr {  }, f_27, !225
        v638 = get_local ptr string<1>, __anon_95
        mem_copy_val v638, v615
        v639 = ptr_to_int v638 to u64, !225
        v640 = get_local ptr { u64, u64 }, __anon_96, !225
        v641 = const u64 0
        v642 = get_elem_ptr v640, ptr u64, v641
        store v639 to v642, !225
        v643 = const u64 1
        v644 = get_elem_ptr v640, ptr u64, v643
        v645 = const u64 1
        store v645 to v644, !225
        v646 = get_local ptr slice, __anon_97, !225
        mem_copy_bytes v646, v640, 16
        v647 = get_local ptr {  }, __tmp_arg55
        mem_copy_val v647, v637
        v648 = get_local ptr slice, __tmp_arg56
        mem_copy_val v648, v646
        v649 = call print_str_1(v647, v648)
        v650 = get_local ptr {  }, f_27, !225
        v651 = get_local ptr {  }, self_13, !225
        mem_copy_val v651, v650
        v652 = get_global ptr u64, std::debug::STDERR, !226
        v653 = load v652, !225
        v654 = get_local ptr u64, fd_12, !227
        store v653 to v654, !228
        v655 = get_local ptr u64, fd_12, !229
        v656 = load v655, !230
        v657 = asm(id: v58, fd: v656) -> (), !231 {
            ecal   id fd zero zero, !113
        }
        v658 = get_local ptr string<27>, __const28
        v659 = get_local ptr string<1>, __const29
        v660 = get_local ptr u64, arg_28
        v661 = get_local ptr u64, ______________, !232
        mem_copy_val v661, v660
        v662 = get_local ptr u64, arg_30
        v663 = const u64 1, !233
        store v663 to v662
        v664 = get_local ptr {  }, __anon_98, !234
        v665 = get_local ptr {  }, f_29
        mem_copy_val v665, v664
        v666 = get_local ptr {  }, f_29, !234
        v667 = get_local ptr string<27>, __anon_99
        mem_copy_val v667, v658
        v668 = ptr_to_int v667 to u64, !234
        v669 = get_local ptr { u64, u64 }, __anon_100, !234
        v670 = const u64 0
        v671 = get_elem_ptr v669, ptr u64, v670
        store v668 to v671, !234
        v672 = const u64 1
        v673 = get_elem_ptr v669, ptr u64, v672
        v674 = const u64 27
        store v674 to v673, !234
        v675 = get_local ptr slice, __anon_101, !234
        mem_copy_bytes v675, v669, 16
        v676 = get_local ptr {  }, __tmp_arg57
        mem_copy_val v676, v666
        v677 = get_local ptr slice, __tmp_arg58
        mem_copy_val v677, v675
        v678 = call print_str_1(v676, v677)
        v679 = get_local ptr u64, arg_30
        v680 = load v679
        v681 = get_local ptr {  }, f_29
        v682 = call fmt_31(v680, v681)
        v683 = get_local ptr {  }, f_29, !234
        v684 = get_local ptr string<1>, __anon_102
        mem_copy_val v684, v659
        v685 = ptr_to_int v684 to u64, !234
        v686 = get_local ptr { u64, u64 }, __anon_103, !234
        v687 = const u64 0
        v688 = get_elem_ptr v686, ptr u64, v687
        store v685 to v688, !234
        v689 = const u64 1
        v690 = get_elem_ptr v686, ptr u64, v689
        v691 = const u64 1
        store v691 to v690, !234
        v692 = get_local ptr slice, __anon_104, !234
        mem_copy_bytes v692, v686, 16
        v693 = get_local ptr {  }, __tmp_arg59
        mem_copy_val v693, v683
        v694 = get_local ptr slice, __tmp_arg60
        mem_copy_val v694, v692
        v695 = call print_str_1(v693, v694)
        v696 = get_local ptr {  }, f_29, !234
        v697 = get_local ptr {  }, self_14, !234
        mem_copy_val v697, v696
        v698 = get_global ptr u64, std::debug::STDERR, !235
        v699 = load v698, !234
        v700 = get_local ptr u64, fd_13, !236
        store v699 to v700, !237
        v701 = get_local ptr u64, fd_13, !238
        v702 = load v701, !239
        v703 = asm(id: v58, fd: v702) -> (), !240 {
            ecal   id fd zero zero, !113
        }
        v704 = get_local ptr string<28>, __const30
        v705 = get_local ptr string<1>, __const31
        v706 = get_local ptr u64, arg_30
        v707 = get_local ptr u64, _______________, !241
        mem_copy_val v707, v706
        v708 = get_local ptr u64, arg_32
        v709 = const u64 10, !242
        store v709 to v708
        v710 = get_local ptr {  }, __anon_105, !243
        v711 = get_local ptr {  }, f_31
        mem_copy_val v711, v710
        v712 = get_local ptr {  }, f_31, !243
        v713 = get_local ptr string<28>, __anon_106
        mem_copy_val v713, v704
        v714 = ptr_to_int v713 to u64, !243
        v715 = get_local ptr { u64, u64 }, __anon_107, !243
        v716 = const u64 0
        v717 = get_elem_ptr v715, ptr u64, v716
        store v714 to v717, !243
        v718 = const u64 1
        v719 = get_elem_ptr v715, ptr u64, v718
        v720 = const u64 28
        store v720 to v719, !243
        v721 = get_local ptr slice, __anon_108, !243
        mem_copy_bytes v721, v715, 16
        v722 = get_local ptr {  }, __tmp_arg61
        mem_copy_val v722, v712
        v723 = get_local ptr slice, __tmp_arg62
        mem_copy_val v723, v721
        v724 = call print_str_1(v722, v723)
        v725 = get_local ptr u64, arg_32
        v726 = load v725
        v727 = get_local ptr {  }, f_31
        v728 = call fmt_31(v726, v727)
        v729 = get_local ptr {  }, f_31, !243
        v730 = get_local ptr string<1>, __anon_109
        mem_copy_val v730, v705
        v731 = ptr_to_int v730 to u64, !243
        v732 = get_local ptr { u64, u64 }, __anon_110, !243
        v733 = const u64 0
        v734 = get_elem_ptr v732, ptr u64, v733
        store v731 to v734, !243
        v735 = const u64 1
        v736 = get_elem_ptr v732, ptr u64, v735
        v737 = const u64 1
        store v737 to v736, !243
        v738 = get_local ptr slice, __anon_111, !243
        mem_copy_bytes v738, v732, 16
        v739 = get_local ptr {  }, __tmp_arg63
        mem_copy_val v739, v729
        v740 = get_local ptr slice, __tmp_arg64
        mem_copy_val v740, v738
        v741 = call print_str_1(v739, v740)
        v742 = get_local ptr {  }, f_31, !243
        v743 = get_local ptr {  }, self_15, !243
        mem_copy_val v743, v742
        v744 = get_global ptr u64, std::debug::STDERR, !244
        v745 = load v744, !243
        v746 = get_local ptr u64, fd_14, !245
        store v745 to v746, !246
        v747 = get_local ptr u64, fd_14, !247
        v748 = load v747, !248
        v749 = asm(id: v58, fd: v748) -> (), !249 {
            ecal   id fd zero zero, !113
        }
        v750 = get_local ptr string<29>, __const32
        v751 = get_local ptr string<1>, __const33
        v752 = get_local ptr u64, arg_32
        v753 = get_local ptr u64, ________________, !250
        mem_copy_val v753, v752
        v754 = get_local ptr u64, arg_34
        v755 = const u64 100, !251
        store v755 to v754
        v756 = get_local ptr {  }, __anon_112, !252
        v757 = get_local ptr {  }, f_33
        mem_copy_val v757, v756
        v758 = get_local ptr {  }, f_33, !252
        v759 = get_local ptr string<29>, __anon_113
        mem_copy_val v759, v750
        v760 = ptr_to_int v759 to u64, !252
        v761 = get_local ptr { u64, u64 }, __anon_114, !252
        v762 = const u64 0
        v763 = get_elem_ptr v761, ptr u64, v762
        store v760 to v763, !252
        v764 = const u64 1
        v765 = get_elem_ptr v761, ptr u64, v764
        v766 = const u64 29
        store v766 to v765, !252
        v767 = get_local ptr slice, __anon_115, !252
        mem_copy_bytes v767, v761, 16
        v768 = get_local ptr {  }, __tmp_arg65
        mem_copy_val v768, v758
        v769 = get_local ptr slice, __tmp_arg66
        mem_copy_val v769, v767
        v770 = call print_str_1(v768, v769)
        v771 = get_local ptr u64, arg_34
        v772 = load v771
        v773 = get_local ptr {  }, f_33
        v774 = call fmt_31(v772, v773)
        v775 = get_local ptr {  }, f_33, !252
        v776 = get_local ptr string<1>, __anon_116
        mem_copy_val v776, v751
        v777 = ptr_to_int v776 to u64, !252
        v778 = get_local ptr { u64, u64 }, __anon_117, !252
        v779 = const u64 0
        v780 = get_elem_ptr v778, ptr u64, v779
        store v777 to v780, !252
        v781 = const u64 1
        v782 = get_elem_ptr v778, ptr u64, v781
        v783 = const u64 1
        store v783 to v782, !252
        v784 = get_local ptr slice, __anon_118, !252
        mem_copy_bytes v784, v778, 16
        v785 = get_local ptr {  }, __tmp_arg67
        mem_copy_val v785, v775
        v786 = get_local ptr slice, __tmp_arg68
        mem_copy_val v786, v784
        v787 = call print_str_1(v785, v786)
        v788 = get_local ptr {  }, f_33, !252
        v789 = get_local ptr {  }, self_16, !252
        mem_copy_val v789, v788
        v790 = get_global ptr u64, std::debug::STDERR, !253
        v791 = load v790, !252
        v792 = get_local ptr u64, fd_15, !254
        store v791 to v792, !255
        v793 = get_local ptr u64, fd_15, !256
        v794 = load v793, !257
        v795 = asm(id: v58, fd: v794) -> (), !258 {
            ecal   id fd zero zero, !113
        }
        v796 = get_local ptr u64, arg_34
        v797 = get_local ptr u64, _________________, !259
        mem_copy_val v797, v796
        v798 = get_local ptr string<33>, __const34
        v799 = get_local ptr string<1>, __const35
        v800 = get_local ptr u64, arg_36
        v801 = const u64 4294967295, !260
        store v801 to v800
        v802 = get_local ptr {  }, __anon_119, !261
        v803 = get_local ptr {  }, f_35
        mem_copy_val v803, v802
        v804 = get_local ptr {  }, f_35, !261
        v805 = get_local ptr string<33>, __anon_120
        mem_copy_val v805, v798
        v806 = ptr_to_int v805 to u64, !261
        v807 = get_local ptr { u64, u64 }, __anon_121, !261
        v808 = const u64 0
        v809 = get_elem_ptr v807, ptr u64, v808
        store v806 to v809, !261
        v810 = const u64 1
        v811 = get_elem_ptr v807, ptr u64, v810
        v812 = const u64 33
        store v812 to v811, !261
        v813 = get_local ptr slice, __anon_122, !261
        mem_copy_bytes v813, v807, 16
        v814 = get_local ptr {  }, __tmp_arg69
        mem_copy_val v814, v804
        v815 = get_local ptr slice, __tmp_arg70
        mem_copy_val v815, v813
        v816 = call print_str_1(v814, v815)
        v817 = get_local ptr u64, arg_36
        v818 = load v817
        v819 = get_local ptr {  }, f_35
        v820 = call fmt_31(v818, v819)
        v821 = get_local ptr {  }, f_35, !261
        v822 = get_local ptr string<1>, __anon_123
        mem_copy_val v822, v799
        v823 = ptr_to_int v822 to u64, !261
        v824 = get_local ptr { u64, u64 }, __anon_124, !261
        v825 = const u64 0
        v826 = get_elem_ptr v824, ptr u64, v825
        store v823 to v826, !261
        v827 = const u64 1
        v828 = get_elem_ptr v824, ptr u64, v827
        v829 = const u64 1
        store v829 to v828, !261
        v830 = get_local ptr slice, __anon_125, !261
        mem_copy_bytes v830, v824, 16
        v831 = get_local ptr {  }, __tmp_arg71
        mem_copy_val v831, v821
        v832 = get_local ptr slice, __tmp_arg72
        mem_copy_val v832, v830
        v833 = call print_str_1(v831, v832)
        v834 = get_local ptr {  }, f_35, !261
        v835 = get_local ptr {  }, self_17, !261
        mem_copy_val v835, v834
        v836 = get_global ptr u64, std::debug::STDERR, !262
        v837 = load v836, !261
        v838 = get_local ptr u64, fd_16, !263
        store v837 to v838, !264
        v839 = get_local ptr u64, fd_16, !265
        v840 = load v839, !266
        v841 = asm(id: v58, fd: v840) -> (), !267 {
            ecal   id fd zero zero, !113
        }
        v842 = get_local ptr u64, arg_36
        v843 = get_local ptr u64, __________________, !268
        mem_copy_val v843, v842
        v844 = get_local ptr string<33>, __const36
        v845 = get_local ptr string<1>, __const37
        v846 = get_local ptr u64, arg_38
        v847 = const u64 0, !269
        store v847 to v846
        v848 = get_local ptr {  }, __anon_126, !270
        v849 = get_local ptr {  }, f_37
        mem_copy_val v849, v848
        v850 = get_local ptr {  }, f_37, !270
        v851 = get_local ptr string<33>, __anon_127
        mem_copy_val v851, v844
        v852 = ptr_to_int v851 to u64, !270
        v853 = get_local ptr { u64, u64 }, __anon_128, !270
        v854 = const u64 0
        v855 = get_elem_ptr v853, ptr u64, v854
        store v852 to v855, !270
        v856 = const u64 1
        v857 = get_elem_ptr v853, ptr u64, v856
        v858 = const u64 33
        store v858 to v857, !270
        v859 = get_local ptr slice, __anon_129, !270
        mem_copy_bytes v859, v853, 16
        v860 = get_local ptr {  }, __tmp_arg73
        mem_copy_val v860, v850
        v861 = get_local ptr slice, __tmp_arg74
        mem_copy_val v861, v859
        v862 = call print_str_1(v860, v861)
        v863 = get_local ptr u64, arg_38
        v864 = load v863
        v865 = get_local ptr {  }, f_37
        v866 = call fmt_38(v864, v865)
        v867 = get_local ptr {  }, f_37, !270
        v868 = get_local ptr string<1>, __anon_130
        mem_copy_val v868, v845
        v869 = ptr_to_int v868 to u64, !270
        v870 = get_local ptr { u64, u64 }, __anon_131, !270
        v871 = const u64 0
        v872 = get_elem_ptr v870, ptr u64, v871
        store v869 to v872, !270
        v873 = const u64 1
        v874 = get_elem_ptr v870, ptr u64, v873
        v875 = const u64 1
        store v875 to v874, !270
        v876 = get_local ptr slice, __anon_132, !270
        mem_copy_bytes v876, v870, 16
        v877 = get_local ptr {  }, __tmp_arg75
        mem_copy_val v877, v867
        v878 = get_local ptr slice, __tmp_arg76
        mem_copy_val v878, v876
        v879 = call print_str_1(v877, v878)
        v880 = get_local ptr {  }, f_37, !270
        v881 = get_local ptr {  }, self_18, !270
        mem_copy_val v881, v880
        v882 = get_global ptr u64, std::debug::STDERR, !271
        v883 = load v882, !270
        v884 = get_local ptr u64, fd_17, !272
        store v883 to v884, !273
        v885 = get_local ptr u64, fd_17, !274
        v886 = load v885, !275
        v887 = asm(id: v58, fd: v886) -> (), !276 {
            ecal   id fd zero zero, !113
        }
        v888 = get_local ptr string<27>, __const38
        v889 = get_local ptr string<1>, __const39
        v890 = get_local ptr u64, arg_38
        v891 = get_local ptr u64, ___________________, !277
        mem_copy_val v891, v890
        v892 = get_local ptr u64, arg_40
        v893 = const u64 1, !278
        store v893 to v892
        v894 = get_local ptr {  }, __anon_133, !279
        v895 = get_local ptr {  }, f_39
        mem_copy_val v895, v894
        v896 = get_local ptr {  }, f_39, !279
        v897 = get_local ptr string<27>, __anon_134
        mem_copy_val v897, v888
        v898 = ptr_to_int v897 to u64, !279
        v899 = get_local ptr { u64, u64 }, __anon_135, !279
        v900 = const u64 0
        v901 = get_elem_ptr v899, ptr u64, v900
        store v898 to v901, !279
        v902 = const u64 1
        v903 = get_elem_ptr v899, ptr u64, v902
        v904 = const u64 27
        store v904 to v903, !279
        v905 = get_local ptr slice, __anon_136, !279
        mem_copy_bytes v905, v899, 16
        v906 = get_local ptr {  }, __tmp_arg77
        mem_copy_val v906, v896
        v907 = get_local ptr slice, __tmp_arg78
        mem_copy_val v907, v905
        v908 = call print_str_1(v906, v907)
        v909 = get_local ptr u64, arg_40
        v910 = load v909
        v911 = get_local ptr {  }, f_39
        v912 = call fmt_38(v910, v911)
        v913 = get_local ptr {  }, f_39, !279
        v914 = get_local ptr string<1>, __anon_137
        mem_copy_val v914, v889
        v915 = ptr_to_int v914 to u64, !279
        v916 = get_local ptr { u64, u64 }, __anon_138, !279
        v917 = const u64 0
        v918 = get_elem_ptr v916, ptr u64, v917
        store v915 to v918, !279
        v919 = const u64 1
        v920 = get_elem_ptr v916, ptr u64, v919
        v921 = const u64 1
        store v921 to v920, !279
        v922 = get_local ptr slice, __anon_139, !279
        mem_copy_bytes v922, v916, 16
        v923 = get_local ptr {  }, __tmp_arg79
        mem_copy_val v923, v913
        v924 = get_local ptr slice, __tmp_arg80
        mem_copy_val v924, v922
        v925 = call print_str_1(v923, v924)
        v926 = get_local ptr {  }, f_39, !279
        v927 = get_local ptr {  }, self_19, !279
        mem_copy_val v927, v926
        v928 = get_global ptr u64, std::debug::STDERR, !280
        v929 = load v928, !279
        v930 = get_local ptr u64, fd_18, !281
        store v929 to v930, !282
        v931 = get_local ptr u64, fd_18, !283
        v932 = load v931, !284
        v933 = asm(id: v58, fd: v932) -> (), !285 {
            ecal   id fd zero zero, !113
        }
        v934 = get_local ptr string<28>, __const40
        v935 = get_local ptr string<1>, __const41
        v936 = get_local ptr u64, arg_40
        v937 = get_local ptr u64, ____________________, !286
        mem_copy_val v937, v936
        v938 = get_local ptr u64, arg_42
        v939 = const u64 10, !287
        store v939 to v938
        v940 = get_local ptr {  }, __anon_140, !288
        v941 = get_local ptr {  }, f_41
        mem_copy_val v941, v940
        v942 = get_local ptr {  }, f_41, !288
        v943 = get_local ptr string<28>, __anon_141
        mem_copy_val v943, v934
        v944 = ptr_to_int v943 to u64, !288
        v945 = get_local ptr { u64, u64 }, __anon_142, !288
        v946 = const u64 0
        v947 = get_elem_ptr v945, ptr u64, v946
        store v944 to v947, !288
        v948 = const u64 1
        v949 = get_elem_ptr v945, ptr u64, v948
        v950 = const u64 28
        store v950 to v949, !288
        v951 = get_local ptr slice, __anon_143, !288
        mem_copy_bytes v951, v945, 16
        v952 = get_local ptr {  }, __tmp_arg81
        mem_copy_val v952, v942
        v953 = get_local ptr slice, __tmp_arg82
        mem_copy_val v953, v951
        v954 = call print_str_1(v952, v953)
        v955 = get_local ptr u64, arg_42
        v956 = load v955
        v957 = get_local ptr {  }, f_41
        v958 = call fmt_38(v956, v957)
        v959 = get_local ptr {  }, f_41, !288
        v960 = get_local ptr string<1>, __anon_144
        mem_copy_val v960, v935
        v961 = ptr_to_int v960 to u64, !288
        v962 = get_local ptr { u64, u64 }, __anon_145, !288
        v963 = const u64 0
        v964 = get_elem_ptr v962, ptr u64, v963
        store v961 to v964, !288
        v965 = const u64 1
        v966 = get_elem_ptr v962, ptr u64, v965
        v967 = const u64 1
        store v967 to v966, !288
        v968 = get_local ptr slice, __anon_146, !288
        mem_copy_bytes v968, v962, 16
        v969 = get_local ptr {  }, __tmp_arg83
        mem_copy_val v969, v959
        v970 = get_local ptr slice, __tmp_arg84
        mem_copy_val v970, v968
        v971 = call print_str_1(v969, v970)
        v972 = get_local ptr {  }, f_41, !288
        v973 = get_local ptr {  }, self_20, !288
        mem_copy_val v973, v972
        v974 = get_global ptr u64, std::debug::STDERR, !289
        v975 = load v974, !288
        v976 = get_local ptr u64, fd_19, !290
        store v975 to v976, !291
        v977 = get_local ptr u64, fd_19, !292
        v978 = load v977, !293
        v979 = asm(id: v58, fd: v978) -> (), !294 {
            ecal   id fd zero zero, !113
        }
        v980 = get_local ptr string<29>, __const42
        v981 = get_local ptr string<1>, __const43
        v982 = get_local ptr u64, arg_42
        v983 = get_local ptr u64, _____________________, !295
        mem_copy_val v983, v982
        v984 = get_local ptr u64, arg_44
        v985 = const u64 100, !296
        store v985 to v984
        v986 = get_local ptr {  }, __anon_147, !297
        v987 = get_local ptr {  }, f_43
        mem_copy_val v987, v986
        v988 = get_local ptr {  }, f_43, !297
        v989 = get_local ptr string<29>, __anon_148
        mem_copy_val v989, v980
        v990 = ptr_to_int v989 to u64, !297
        v991 = get_local ptr { u64, u64 }, __anon_149, !297
        v992 = const u64 0
        v993 = get_elem_ptr v991, ptr u64, v992
        store v990 to v993, !297
        v994 = const u64 1
        v995 = get_elem_ptr v991, ptr u64, v994
        v996 = const u64 29
        store v996 to v995, !297
        v997 = get_local ptr slice, __anon_150, !297
        mem_copy_bytes v997, v991, 16
        v998 = get_local ptr {  }, __tmp_arg85
        mem_copy_val v998, v988
        v999 = get_local ptr slice, __tmp_arg86
        mem_copy_val v999, v997
        v1000 = call print_str_1(v998, v999)
        v1001 = get_local ptr u64, arg_44
        v1002 = load v1001
        v1003 = get_local ptr {  }, f_43
        v1004 = call fmt_38(v1002, v1003)
        v1005 = get_local ptr {  }, f_43, !297
        v1006 = get_local ptr string<1>, __anon_151
        mem_copy_val v1006, v981
        v1007 = ptr_to_int v1006 to u64, !297
        v1008 = get_local ptr { u64, u64 }, __anon_152, !297
        v1009 = const u64 0
        v1010 = get_elem_ptr v1008, ptr u64, v1009
        store v1007 to v1010, !297
        v1011 = const u64 1
        v1012 = get_elem_ptr v1008, ptr u64, v1011
        v1013 = const u64 1
        store v1013 to v1012, !297
        v1014 = get_local ptr slice, __anon_153, !297
        mem_copy_bytes v1014, v1008, 16
        v1015 = get_local ptr {  }, __tmp_arg87
        mem_copy_val v1015, v1005
        v1016 = get_local ptr slice, __tmp_arg88
        mem_copy_val v1016, v1014
        v1017 = call print_str_1(v1015, v1016)
        v1018 = get_local ptr {  }, f_43, !297
        v1019 = get_local ptr {  }, self_21, !297
        mem_copy_val v1019, v1018
        v1020 = get_global ptr u64, std::debug::STDERR, !298
        v1021 = load v1020, !297
        v1022 = get_local ptr u64, fd_20, !299
        store v1021 to v1022, !300
        v1023 = get_local ptr u64, fd_20, !301
        v1024 = load v1023, !302
        v1025 = asm(id: v58, fd: v1024) -> (), !303 {
            ecal   id fd zero zero, !113
        }
        v1026 = get_local ptr u64, arg_44
        v1027 = get_local ptr u64, ______________________, !304
        mem_copy_val v1027, v1026
        v1028 = get_local ptr string<33>, __const44
        v1029 = get_local ptr string<1>, __const45
        v1030 = get_local ptr u64, arg_46
        v1031 = const u64 18446744073709551615, !305
        store v1031 to v1030
        v1032 = get_local ptr {  }, __anon_154, !306
        v1033 = get_local ptr {  }, f_45
        mem_copy_val v1033, v1032
        v1034 = get_local ptr {  }, f_45, !306
        v1035 = get_local ptr string<33>, __anon_155
        mem_copy_val v1035, v1028
        v1036 = ptr_to_int v1035 to u64, !306
        v1037 = get_local ptr { u64, u64 }, __anon_156, !306
        v1038 = const u64 0
        v1039 = get_elem_ptr v1037, ptr u64, v1038
        store v1036 to v1039, !306
        v1040 = const u64 1
        v1041 = get_elem_ptr v1037, ptr u64, v1040
        v1042 = const u64 33
        store v1042 to v1041, !306
        v1043 = get_local ptr slice, __anon_157, !306
        mem_copy_bytes v1043, v1037, 16
        v1044 = get_local ptr {  }, __tmp_arg89
        mem_copy_val v1044, v1034
        v1045 = get_local ptr slice, __tmp_arg90
        mem_copy_val v1045, v1043
        v1046 = call print_str_1(v1044, v1045)
        v1047 = get_local ptr u64, arg_46
        v1048 = load v1047
        v1049 = get_local ptr {  }, f_45
        v1050 = call fmt_38(v1048, v1049)
        v1051 = get_local ptr {  }, f_45, !306
        v1052 = get_local ptr string<1>, __anon_158
        mem_copy_val v1052, v1029
        v1053 = ptr_to_int v1052 to u64, !306
        v1054 = get_local ptr { u64, u64 }, __anon_159, !306
        v1055 = const u64 0
        v1056 = get_elem_ptr v1054, ptr u64, v1055
        store v1053 to v1056, !306
        v1057 = const u64 1
        v1058 = get_elem_ptr v1054, ptr u64, v1057
        v1059 = const u64 1
        store v1059 to v1058, !306
        v1060 = get_local ptr slice, __anon_160, !306
        mem_copy_bytes v1060, v1054, 16
        v1061 = get_local ptr {  }, __tmp_arg91
        mem_copy_val v1061, v1051
        v1062 = get_local ptr slice, __tmp_arg92
        mem_copy_val v1062, v1060
        v1063 = call print_str_1(v1061, v1062)
        v1064 = get_local ptr {  }, f_45, !306
        v1065 = get_local ptr {  }, self_22, !306
        mem_copy_val v1065, v1064
        v1066 = get_global ptr u64, std::debug::STDERR, !307
        v1067 = load v1066, !306
        v1068 = get_local ptr u64, fd_21, !308
        store v1067 to v1068, !309
        v1069 = get_local ptr u64, fd_21, !310
        v1070 = load v1069, !311
        v1071 = asm(id: v58, fd: v1070) -> (), !312 {
            ecal   id fd zero zero, !113
        }
        v1072 = get_local ptr u256, __const46
        v1073 = get_local ptr u64, arg_46
        v1074 = get_local ptr u64, _______________________, !313
        mem_copy_val v1074, v1073
        v1075 = get_local ptr u256, __tmp_block_arg
        mem_copy_val v1075, v1072
        v1076 = get_local ptr string<34>, __const47
        v1077 = get_local ptr string<1>, __const48
        v1078 = get_local ptr u256, arg_48
        mem_copy_val v1078, v1075
        v1079 = get_local ptr {  }, __anon_161, !314
        v1080 = get_local ptr {  }, f_47
        mem_copy_val v1080, v1079
        v1081 = get_local ptr {  }, f_47, !314
        v1082 = get_local ptr string<34>, __anon_162
        mem_copy_val v1082, v1076
        v1083 = ptr_to_int v1082 to u64, !314
        v1084 = get_local ptr { u64, u64 }, __anon_163, !314
        v1085 = const u64 0
        v1086 = get_elem_ptr v1084, ptr u64, v1085
        store v1083 to v1086, !314
        v1087 = const u64 1
        v1088 = get_elem_ptr v1084, ptr u64, v1087
        v1089 = const u64 34
        store v1089 to v1088, !314
        v1090 = get_local ptr slice, __anon_164, !314
        mem_copy_bytes v1090, v1084, 16
        v1091 = get_local ptr {  }, __tmp_arg93
        mem_copy_val v1091, v1081
        v1092 = get_local ptr slice, __tmp_arg94
        mem_copy_val v1092, v1090
        v1093 = call print_str_1(v1091, v1092)
        v1094 = get_local ptr u256, arg_48
        v1095 = get_local ptr {  }, f_47
        v1096 = get_local ptr u256, __tmp_arg309
        mem_copy_val v1096, v1094
        v1097 = call fmt_45(v1096, v1095)
        v1098 = get_local ptr {  }, f_47, !314
        v1099 = get_local ptr string<1>, __anon_165
        mem_copy_val v1099, v1077
        v1100 = ptr_to_int v1099 to u64, !314
        v1101 = get_local ptr { u64, u64 }, __anon_166, !314
        v1102 = const u64 0
        v1103 = get_elem_ptr v1101, ptr u64, v1102
        store v1100 to v1103, !314
        v1104 = const u64 1
        v1105 = get_elem_ptr v1101, ptr u64, v1104
        v1106 = const u64 1
        store v1106 to v1105, !314
        v1107 = get_local ptr slice, __anon_167, !314
        mem_copy_bytes v1107, v1101, 16
        v1108 = get_local ptr {  }, __tmp_arg95
        mem_copy_val v1108, v1098
        v1109 = get_local ptr slice, __tmp_arg96
        mem_copy_val v1109, v1107
        v1110 = call print_str_1(v1108, v1109)
        v1111 = get_local ptr {  }, f_47, !314
        v1112 = get_local ptr {  }, self_23, !314
        mem_copy_val v1112, v1111
        v1113 = get_global ptr u64, std::debug::STDERR, !315
        v1114 = load v1113, !314
        v1115 = get_local ptr u64, fd_22, !316
        store v1114 to v1115, !317
        v1116 = get_local ptr u64, fd_22, !318
        v1117 = load v1116, !319
        v1118 = asm(id: v58, fd: v1117) -> (), !320 {
            ecal   id fd zero zero, !113
        }
        v1119 = get_local ptr u256, __const49
        v1120 = get_local ptr string<28>, __const50
        v1121 = get_local ptr string<1>, __const51
        v1122 = get_local ptr u256, arg_48
        v1123 = get_local ptr u256, ________________________, !321
        mem_copy_val v1123, v1122
        v1124 = get_local ptr u256, arg_50
        mem_copy_val v1124, v1119
        v1125 = get_local ptr {  }, __anon_168, !322
        v1126 = get_local ptr {  }, f_49
        mem_copy_val v1126, v1125
        v1127 = get_local ptr {  }, f_49, !322
        v1128 = get_local ptr string<28>, __anon_169
        mem_copy_val v1128, v1120
        v1129 = ptr_to_int v1128 to u64, !322
        v1130 = get_local ptr { u64, u64 }, __anon_170, !322
        v1131 = const u64 0
        v1132 = get_elem_ptr v1130, ptr u64, v1131
        store v1129 to v1132, !322
        v1133 = const u64 1
        v1134 = get_elem_ptr v1130, ptr u64, v1133
        v1135 = const u64 28
        store v1135 to v1134, !322
        v1136 = get_local ptr slice, __anon_171, !322
        mem_copy_bytes v1136, v1130, 16
        v1137 = get_local ptr {  }, __tmp_arg97
        mem_copy_val v1137, v1127
        v1138 = get_local ptr slice, __tmp_arg98
        mem_copy_val v1138, v1136
        v1139 = call print_str_1(v1137, v1138)
        v1140 = get_local ptr u256, arg_50
        v1141 = get_local ptr {  }, f_49
        v1142 = get_local ptr u256, __tmp_arg310
        mem_copy_val v1142, v1140
        v1143 = call fmt_45(v1142, v1141)
        v1144 = get_local ptr {  }, f_49, !322
        v1145 = get_local ptr string<1>, __anon_172
        mem_copy_val v1145, v1121
        v1146 = ptr_to_int v1145 to u64, !322
        v1147 = get_local ptr { u64, u64 }, __anon_173, !322
        v1148 = const u64 0
        v1149 = get_elem_ptr v1147, ptr u64, v1148
        store v1146 to v1149, !322
        v1150 = const u64 1
        v1151 = get_elem_ptr v1147, ptr u64, v1150
        v1152 = const u64 1
        store v1152 to v1151, !322
        v1153 = get_local ptr slice, __anon_174, !322
        mem_copy_bytes v1153, v1147, 16
        v1154 = get_local ptr {  }, __tmp_arg99
        mem_copy_val v1154, v1144
        v1155 = get_local ptr slice, __tmp_arg100
        mem_copy_val v1155, v1153
        v1156 = call print_str_1(v1154, v1155)
        v1157 = get_local ptr {  }, f_49, !322
        v1158 = get_local ptr {  }, self_24, !322
        mem_copy_val v1158, v1157
        v1159 = get_global ptr u64, std::debug::STDERR, !323
        v1160 = load v1159, !322
        v1161 = get_local ptr u64, fd_23, !324
        store v1160 to v1161, !325
        v1162 = get_local ptr u64, fd_23, !326
        v1163 = load v1162, !327
        v1164 = asm(id: v58, fd: v1163) -> (), !328 {
            ecal   id fd zero zero, !113
        }
        v1165 = get_local ptr u256, __const52
        v1166 = get_local ptr string<29>, __const53
        v1167 = get_local ptr string<1>, __const54
        v1168 = get_local ptr u256, arg_50
        v1169 = get_local ptr u256, _________________________, !329
        mem_copy_val v1169, v1168
        v1170 = get_local ptr u256, arg_52
        mem_copy_val v1170, v1165
        v1171 = get_local ptr {  }, __anon_175, !330
        v1172 = get_local ptr {  }, f_51
        mem_copy_val v1172, v1171
        v1173 = get_local ptr {  }, f_51, !330
        v1174 = get_local ptr string<29>, __anon_176
        mem_copy_val v1174, v1166
        v1175 = ptr_to_int v1174 to u64, !330
        v1176 = get_local ptr { u64, u64 }, __anon_177, !330
        v1177 = const u64 0
        v1178 = get_elem_ptr v1176, ptr u64, v1177
        store v1175 to v1178, !330
        v1179 = const u64 1
        v1180 = get_elem_ptr v1176, ptr u64, v1179
        v1181 = const u64 29
        store v1181 to v1180, !330
        v1182 = get_local ptr slice, __anon_178, !330
        mem_copy_bytes v1182, v1176, 16
        v1183 = get_local ptr {  }, __tmp_arg101
        mem_copy_val v1183, v1173
        v1184 = get_local ptr slice, __tmp_arg102
        mem_copy_val v1184, v1182
        v1185 = call print_str_1(v1183, v1184)
        v1186 = get_local ptr u256, arg_52
        v1187 = get_local ptr {  }, f_51
        v1188 = get_local ptr u256, __tmp_arg311
        mem_copy_val v1188, v1186
        v1189 = call fmt_45(v1188, v1187)
        v1190 = get_local ptr {  }, f_51, !330
        v1191 = get_local ptr string<1>, __anon_179
        mem_copy_val v1191, v1167
        v1192 = ptr_to_int v1191 to u64, !330
        v1193 = get_local ptr { u64, u64 }, __anon_180, !330
        v1194 = const u64 0
        v1195 = get_elem_ptr v1193, ptr u64, v1194
        store v1192 to v1195, !330
        v1196 = const u64 1
        v1197 = get_elem_ptr v1193, ptr u64, v1196
        v1198 = const u64 1
        store v1198 to v1197, !330
        v1199 = get_local ptr slice, __anon_181, !330
        mem_copy_bytes v1199, v1193, 16
        v1200 = get_local ptr {  }, __tmp_arg103
        mem_copy_val v1200, v1190
        v1201 = get_local ptr slice, __tmp_arg104
        mem_copy_val v1201, v1199
        v1202 = call print_str_1(v1200, v1201)
        v1203 = get_local ptr {  }, f_51, !330
        v1204 = get_local ptr {  }, self_25, !330
        mem_copy_val v1204, v1203
        v1205 = get_global ptr u64, std::debug::STDERR, !331
        v1206 = load v1205, !330
        v1207 = get_local ptr u64, fd_24, !332
        store v1206 to v1207, !333
        v1208 = get_local ptr u64, fd_24, !334
        v1209 = load v1208, !335
        v1210 = asm(id: v58, fd: v1209) -> (), !336 {
            ecal   id fd zero zero, !113
        }
        v1211 = get_local ptr u256, __const55
        v1212 = get_local ptr string<30>, __const56
        v1213 = get_local ptr string<1>, __const57
        v1214 = get_local ptr u256, arg_52
        v1215 = get_local ptr u256, __________________________, !337
        mem_copy_val v1215, v1214
        v1216 = get_local ptr u256, arg_54
        mem_copy_val v1216, v1211
        v1217 = get_local ptr {  }, __anon_182, !338
        v1218 = get_local ptr {  }, f_53
        mem_copy_val v1218, v1217
        v1219 = get_local ptr {  }, f_53, !338
        v1220 = get_local ptr string<30>, __anon_183
        mem_copy_val v1220, v1212
        v1221 = ptr_to_int v1220 to u64, !338
        v1222 = get_local ptr { u64, u64 }, __anon_184, !338
        v1223 = const u64 0
        v1224 = get_elem_ptr v1222, ptr u64, v1223
        store v1221 to v1224, !338
        v1225 = const u64 1
        v1226 = get_elem_ptr v1222, ptr u64, v1225
        v1227 = const u64 30
        store v1227 to v1226, !338
        v1228 = get_local ptr slice, __anon_185, !338
        mem_copy_bytes v1228, v1222, 16
        v1229 = get_local ptr {  }, __tmp_arg105
        mem_copy_val v1229, v1219
        v1230 = get_local ptr slice, __tmp_arg106
        mem_copy_val v1230, v1228
        v1231 = call print_str_1(v1229, v1230)
        v1232 = get_local ptr u256, arg_54
        v1233 = get_local ptr {  }, f_53
        v1234 = get_local ptr u256, __tmp_arg312
        mem_copy_val v1234, v1232
        v1235 = call fmt_45(v1234, v1233)
        v1236 = get_local ptr {  }, f_53, !338
        v1237 = get_local ptr string<1>, __anon_186
        mem_copy_val v1237, v1213
        v1238 = ptr_to_int v1237 to u64, !338
        v1239 = get_local ptr { u64, u64 }, __anon_187, !338
        v1240 = const u64 0
        v1241 = get_elem_ptr v1239, ptr u64, v1240
        store v1238 to v1241, !338
        v1242 = const u64 1
        v1243 = get_elem_ptr v1239, ptr u64, v1242
        v1244 = const u64 1
        store v1244 to v1243, !338
        v1245 = get_local ptr slice, __anon_188, !338
        mem_copy_bytes v1245, v1239, 16
        v1246 = get_local ptr {  }, __tmp_arg107
        mem_copy_val v1246, v1236
        v1247 = get_local ptr slice, __tmp_arg108
        mem_copy_val v1247, v1245
        v1248 = call print_str_1(v1246, v1247)
        v1249 = get_local ptr {  }, f_53, !338
        v1250 = get_local ptr {  }, self_26, !338
        mem_copy_val v1250, v1249
        v1251 = get_global ptr u64, std::debug::STDERR, !339
        v1252 = load v1251, !338
        v1253 = get_local ptr u64, fd_25, !340
        store v1252 to v1253, !341
        v1254 = get_local ptr u64, fd_25, !342
        v1255 = load v1254, !343
        v1256 = asm(id: v58, fd: v1255) -> (), !344 {
            ecal   id fd zero zero, !113
        }
        v1257 = get_local ptr u256, __const58
        v1258 = get_local ptr u256, arg_54
        v1259 = get_local ptr u256, ___________________________, !345
        mem_copy_val v1259, v1258
        v1260 = get_local ptr u256, __tmp_block_arg0
        mem_copy_val v1260, v1257
        v1261 = get_local ptr string<34>, __const59
        v1262 = get_local ptr string<1>, __const60
        v1263 = get_local ptr u256, arg_56
        mem_copy_val v1263, v1260
        v1264 = get_local ptr {  }, __anon_189, !346
        v1265 = get_local ptr {  }, f_55
        mem_copy_val v1265, v1264
        v1266 = get_local ptr {  }, f_55, !346
        v1267 = get_local ptr string<34>, __anon_190
        mem_copy_val v1267, v1261
        v1268 = ptr_to_int v1267 to u64, !346
        v1269 = get_local ptr { u64, u64 }, __anon_191, !346
        v1270 = const u64 0
        v1271 = get_elem_ptr v1269, ptr u64, v1270
        store v1268 to v1271, !346
        v1272 = const u64 1
        v1273 = get_elem_ptr v1269, ptr u64, v1272
        v1274 = const u64 34
        store v1274 to v1273, !346
        v1275 = get_local ptr slice, __anon_192, !346
        mem_copy_bytes v1275, v1269, 16
        v1276 = get_local ptr {  }, __tmp_arg109
        mem_copy_val v1276, v1266
        v1277 = get_local ptr slice, __tmp_arg110
        mem_copy_val v1277, v1275
        v1278 = call print_str_1(v1276, v1277)
        v1279 = get_local ptr u256, arg_56
        v1280 = get_local ptr {  }, f_55
        v1281 = get_local ptr u256, __tmp_arg313
        mem_copy_val v1281, v1279
        v1282 = call fmt_45(v1281, v1280)
        v1283 = get_local ptr {  }, f_55, !346
        v1284 = get_local ptr string<1>, __anon_193
        mem_copy_val v1284, v1262
        v1285 = ptr_to_int v1284 to u64, !346
        v1286 = get_local ptr { u64, u64 }, __anon_194, !346
        v1287 = const u64 0
        v1288 = get_elem_ptr v1286, ptr u64, v1287
        store v1285 to v1288, !346
        v1289 = const u64 1
        v1290 = get_elem_ptr v1286, ptr u64, v1289
        v1291 = const u64 1
        store v1291 to v1290, !346
        v1292 = get_local ptr slice, __anon_195, !346
        mem_copy_bytes v1292, v1286, 16
        v1293 = get_local ptr {  }, __tmp_arg111
        mem_copy_val v1293, v1283
        v1294 = get_local ptr slice, __tmp_arg112
        mem_copy_val v1294, v1292
        v1295 = call print_str_1(v1293, v1294)
        v1296 = get_local ptr {  }, f_55, !346
        v1297 = get_local ptr {  }, self_27, !346
        mem_copy_val v1297, v1296
        v1298 = get_global ptr u64, std::debug::STDERR, !347
        v1299 = load v1298, !346
        v1300 = get_local ptr u64, fd_26, !348
        store v1299 to v1300, !349
        v1301 = get_local ptr u64, fd_26, !350
        v1302 = load v1301, !351
        v1303 = asm(id: v58, fd: v1302) -> (), !352 {
            ecal   id fd zero zero, !113
        }
        v1304 = get_local ptr b256, __const61
        v1305 = get_local ptr u256, arg_56
        v1306 = get_local ptr u256, ____________________________, !353
        mem_copy_val v1306, v1305
        v1307 = get_local ptr b256, __tmp_block_arg1
        mem_copy_val v1307, v1304
        v1308 = get_local ptr string<34>, __const62
        v1309 = get_local ptr string<1>, __const63
        v1310 = get_local ptr b256, arg_58
        mem_copy_val v1310, v1307
        v1311 = get_local ptr {  }, __anon_196, !354
        v1312 = get_local ptr {  }, f_57
        mem_copy_val v1312, v1311
        v1313 = get_local ptr {  }, f_57, !354
        v1314 = get_local ptr string<34>, __anon_197
        mem_copy_val v1314, v1308
        v1315 = ptr_to_int v1314 to u64, !354
        v1316 = get_local ptr { u64, u64 }, __anon_198, !354
        v1317 = const u64 0
        v1318 = get_elem_ptr v1316, ptr u64, v1317
        store v1315 to v1318, !354
        v1319 = const u64 1
        v1320 = get_elem_ptr v1316, ptr u64, v1319
        v1321 = const u64 34
        store v1321 to v1320, !354
        v1322 = get_local ptr slice, __anon_199, !354
        mem_copy_bytes v1322, v1316, 16
        v1323 = get_local ptr {  }, __tmp_arg113
        mem_copy_val v1323, v1313
        v1324 = get_local ptr slice, __tmp_arg114
        mem_copy_val v1324, v1322
        v1325 = call print_str_1(v1323, v1324)
        v1326 = get_local ptr b256, arg_58
        v1327 = get_local ptr {  }, f_57
        v1328 = get_local ptr b256, __tmp_arg314
        mem_copy_val v1328, v1326
        v1329 = call fmt_52(v1328, v1327)
        v1330 = get_local ptr {  }, f_57, !354
        v1331 = get_local ptr string<1>, __anon_200
        mem_copy_val v1331, v1309
        v1332 = ptr_to_int v1331 to u64, !354
        v1333 = get_local ptr { u64, u64 }, __anon_201, !354
        v1334 = const u64 0
        v1335 = get_elem_ptr v1333, ptr u64, v1334
        store v1332 to v1335, !354
        v1336 = const u64 1
        v1337 = get_elem_ptr v1333, ptr u64, v1336
        v1338 = const u64 1
        store v1338 to v1337, !354
        v1339 = get_local ptr slice, __anon_202, !354
        mem_copy_bytes v1339, v1333, 16
        v1340 = get_local ptr {  }, __tmp_arg115
        mem_copy_val v1340, v1330
        v1341 = get_local ptr slice, __tmp_arg116
        mem_copy_val v1341, v1339
        v1342 = call print_str_1(v1340, v1341)
        v1343 = get_local ptr {  }, f_57, !354
        v1344 = get_local ptr {  }, self_28, !354
        mem_copy_val v1344, v1343
        v1345 = get_global ptr u64, std::debug::STDERR, !355
        v1346 = load v1345, !354
        v1347 = get_local ptr u64, fd_27, !356
        store v1346 to v1347, !357
        v1348 = get_local ptr u64, fd_27, !358
        v1349 = load v1348, !359
        v1350 = asm(id: v58, fd: v1349) -> (), !360 {
            ecal   id fd zero zero, !113
        }
        v1351 = get_local ptr b256, __const64
        v1352 = get_local ptr b256, arg_58
        v1353 = get_local ptr b256, _____________________________, !361
        mem_copy_val v1353, v1352
        v1354 = get_local ptr b256, __tmp_block_arg2
        mem_copy_val v1354, v1351
        v1355 = get_local ptr string<34>, __const65
        v1356 = get_local ptr string<1>, __const66
        v1357 = get_local ptr b256, arg_60
        mem_copy_val v1357, v1354
        v1358 = get_local ptr {  }, __anon_203, !362
        v1359 = get_local ptr {  }, f_59
        mem_copy_val v1359, v1358
        v1360 = get_local ptr {  }, f_59, !362
        v1361 = get_local ptr string<34>, __anon_204
        mem_copy_val v1361, v1355
        v1362 = ptr_to_int v1361 to u64, !362
        v1363 = get_local ptr { u64, u64 }, __anon_205, !362
        v1364 = const u64 0
        v1365 = get_elem_ptr v1363, ptr u64, v1364
        store v1362 to v1365, !362
        v1366 = const u64 1
        v1367 = get_elem_ptr v1363, ptr u64, v1366
        v1368 = const u64 34
        store v1368 to v1367, !362
        v1369 = get_local ptr slice, __anon_206, !362
        mem_copy_bytes v1369, v1363, 16
        v1370 = get_local ptr {  }, __tmp_arg117
        mem_copy_val v1370, v1360
        v1371 = get_local ptr slice, __tmp_arg118
        mem_copy_val v1371, v1369
        v1372 = call print_str_1(v1370, v1371)
        v1373 = get_local ptr b256, arg_60
        v1374 = get_local ptr {  }, f_59
        v1375 = get_local ptr b256, __tmp_arg315
        mem_copy_val v1375, v1373
        v1376 = call fmt_52(v1375, v1374)
        v1377 = get_local ptr {  }, f_59, !362
        v1378 = get_local ptr string<1>, __anon_207
        mem_copy_val v1378, v1356
        v1379 = ptr_to_int v1378 to u64, !362
        v1380 = get_local ptr { u64, u64 }, __anon_208, !362
        v1381 = const u64 0
        v1382 = get_elem_ptr v1380, ptr u64, v1381
        store v1379 to v1382, !362
        v1383 = const u64 1
        v1384 = get_elem_ptr v1380, ptr u64, v1383
        v1385 = const u64 1
        store v1385 to v1384, !362
        v1386 = get_local ptr slice, __anon_209, !362
        mem_copy_bytes v1386, v1380, 16
        v1387 = get_local ptr {  }, __tmp_arg119
        mem_copy_val v1387, v1377
        v1388 = get_local ptr slice, __tmp_arg120
        mem_copy_val v1388, v1386
        v1389 = call print_str_1(v1387, v1388)
        v1390 = get_local ptr {  }, f_59, !362
        v1391 = get_local ptr {  }, self_29, !362
        mem_copy_val v1391, v1390
        v1392 = get_global ptr u64, std::debug::STDERR, !363
        v1393 = load v1392, !362
        v1394 = get_local ptr u64, fd_28, !364
        store v1393 to v1394, !365
        v1395 = get_local ptr u64, fd_28, !366
        v1396 = load v1395, !367
        v1397 = asm(id: v58, fd: v1396) -> (), !368 {
            ecal   id fd zero zero, !113
        }
        v1398 = get_local ptr string<1>, __const67
        v1399 = get_local ptr string<26>, __const68
        v1400 = get_local ptr string<1>, __const69
        v1401 = get_local ptr b256, arg_60
        v1402 = get_local ptr b256, ______________________________, !369
        mem_copy_val v1402, v1401
        v1403 = get_local ptr string<1>, __anon_210
        mem_copy_val v1403, v1398
        v1404 = ptr_to_int v1403 to u64, !370
        v1405 = get_local ptr { u64, u64 }, __anon_211, !370
        v1406 = const u64 0
        v1407 = get_elem_ptr v1405, ptr u64, v1406
        store v1404 to v1407, !370
        v1408 = const u64 1
        v1409 = get_elem_ptr v1405, ptr u64, v1408
        v1410 = const u64 1
        store v1410 to v1409, !370
        v1411 = get_local ptr slice, __anon_212, !370
        mem_copy_bytes v1411, v1405, 16
        v1412 = get_local ptr slice, arg_62
        mem_copy_val v1412, v1411
        v1413 = get_local ptr {  }, __anon_213, !371
        v1414 = get_local ptr {  }, f_61
        mem_copy_val v1414, v1413
        v1415 = get_local ptr {  }, f_61, !371
        v1416 = get_local ptr string<26>, __anon_214
        mem_copy_val v1416, v1399
        v1417 = ptr_to_int v1416 to u64, !371
        v1418 = get_local ptr { u64, u64 }, __anon_215, !371
        v1419 = const u64 0
        v1420 = get_elem_ptr v1418, ptr u64, v1419
        store v1417 to v1420, !371
        v1421 = const u64 1
        v1422 = get_elem_ptr v1418, ptr u64, v1421
        v1423 = const u64 26
        store v1423 to v1422, !371
        v1424 = get_local ptr slice, __anon_216, !371
        mem_copy_bytes v1424, v1418, 16
        v1425 = get_local ptr {  }, __tmp_arg121
        mem_copy_val v1425, v1415
        v1426 = get_local ptr slice, __tmp_arg122
        mem_copy_val v1426, v1424
        v1427 = call print_str_1(v1425, v1426)
        v1428 = get_local ptr slice, arg_62
        v1429 = get_local ptr {  }, f_61
        v1430 = get_local ptr slice, __tmp_arg317
        mem_copy_val v1430, v1428
        v1431 = call fmt_57(v1430, v1429)
        v1432 = get_local ptr {  }, f_61, !371
        v1433 = get_local ptr string<1>, __anon_217
        mem_copy_val v1433, v1400
        v1434 = ptr_to_int v1433 to u64, !371
        v1435 = get_local ptr { u64, u64 }, __anon_218, !371
        v1436 = const u64 0
        v1437 = get_elem_ptr v1435, ptr u64, v1436
        store v1434 to v1437, !371
        v1438 = const u64 1
        v1439 = get_elem_ptr v1435, ptr u64, v1438
        v1440 = const u64 1
        store v1440 to v1439, !371
        v1441 = get_local ptr slice, __anon_219, !371
        mem_copy_bytes v1441, v1435, 16
        v1442 = get_local ptr {  }, __tmp_arg123
        mem_copy_val v1442, v1432
        v1443 = get_local ptr slice, __tmp_arg124
        mem_copy_val v1443, v1441
        v1444 = call print_str_1(v1442, v1443)
        v1445 = get_local ptr {  }, f_61, !371
        v1446 = get_local ptr {  }, self_30, !371
        mem_copy_val v1446, v1445
        v1447 = get_global ptr u64, std::debug::STDERR, !372
        v1448 = load v1447, !371
        v1449 = get_local ptr u64, fd_29, !373
        store v1448 to v1449, !374
        v1450 = get_local ptr u64, fd_29, !375
        v1451 = load v1450, !376
        v1452 = asm(id: v58, fd: v1451) -> (), !377 {
            ecal   id fd zero zero, !113
        }
        v1453 = get_local ptr string<1>, __const70
        v1454 = get_local ptr string<42>, __const71
        v1455 = get_local ptr slice, arg_62
        v1456 = get_local ptr slice, _______________________________, !378
        mem_copy_val v1456, v1455
        v1457 = get_local ptr string<1>, __anon_220
        mem_copy_val v1457, v1453
        v1458 = get_local ptr string<1>, arg_64
        mem_copy_val v1458, v1457
        v1459 = get_local ptr {  }, __anon_221, !379
        v1460 = get_local ptr {  }, f_63
        mem_copy_val v1460, v1459
        v1461 = get_local ptr {  }, f_63, !379
        v1462 = get_local ptr string<42>, __anon_222
        mem_copy_val v1462, v1454
        v1463 = ptr_to_int v1462 to u64, !379
        v1464 = get_local ptr { u64, u64 }, __anon_223, !379
        v1465 = const u64 0
        v1466 = get_elem_ptr v1464, ptr u64, v1465
        store v1463 to v1466, !379
        v1467 = const u64 1
        v1468 = get_elem_ptr v1464, ptr u64, v1467
        v1469 = const u64 42
        store v1469 to v1468, !379
        v1470 = get_local ptr slice, __anon_224, !379
        mem_copy_bytes v1470, v1464, 16
        v1471 = get_local ptr {  }, __tmp_arg125
        mem_copy_val v1471, v1461
        v1472 = get_local ptr slice, __tmp_arg126
        mem_copy_val v1472, v1470
        v1473 = call print_str_1(v1471, v1472)
        v1474 = get_local ptr string<1>, arg_64
        v1475 = get_local ptr {  }, f_63
        v1476 = get_local ptr string<1>, self_31
        mem_copy_val v1476, v1474
        v1477 = get_local ptr ptr {  }, f_0
        store v1475 to v1477
        v1478 = get_local ptr string<1>, self_31, !380
        v1479 = get_local ptr string<1>, s_, !383
        mem_copy_val v1479, v1478
        v1480 = get_local ptr u64, str_size, !386
        v1481 = const u64 1
        store v1481 to v1480, !387
        v1482 = get_local ptr string<1>, s_, !389
        v1483 = ptr_to_int v1482 to u64, !391
        v1484 = get_local ptr u64, src, !393
        store v1483 to v1484, !394
        v1485 = get_local ptr u64, src, !396
        v1486 = load v1485, !383
        v1487 = const u64 8
        v1488 = asm(size: v1487, dest, src: v1486) -> u64 dest, !398 {
            aloc   size, !399
            move   dest hp, !400
            mcp    dest src size, !401
        }
        v1489 = get_local ptr u64, ptr, !403
        store v1488 to v1489, !404
        v1490 = get_local ptr u64, ptr, !406
        v1491 = get_local ptr u64, str_size, !408
        v1492 = get_local ptr { u64, u64 }, __anon_01, !410
        v1493 = const u64 0
        v1494 = get_elem_ptr v1492, ptr u64, v1493, !411
        mem_copy_val v1494, v1490
        v1495 = const u64 1
        v1496 = get_elem_ptr v1492, ptr u64, v1495, !412
        mem_copy_val v1496, v1491
        v1497 = asm(s: v1492) -> ptr slice s {
        }
        v1498 = get_local ptr slice, __aggr_memcpy_0
        mem_copy_val v1498, v1497
        v1499 = get_local ptr slice, __tmp_block_arg3
        mem_copy_val v1499, v1498
        v1500 = get_local ptr ptr {  }, f_0, !413
        v1501 = load v1500
        v1502 = get_local ptr slice, __tmp_arg318
        mem_copy_val v1502, v1499
        v1503 = call fmt_57(v1502, v1501)
        v1504 = get_local ptr string<1>, __const72
        v1505 = get_local ptr {  }, f_63, !379
        v1506 = get_local ptr string<1>, __anon_225
        mem_copy_val v1506, v1504
        v1507 = ptr_to_int v1506 to u64, !379
        v1508 = get_local ptr { u64, u64 }, __anon_226, !379
        v1509 = const u64 0
        v1510 = get_elem_ptr v1508, ptr u64, v1509
        store v1507 to v1510, !379
        v1511 = const u64 1
        v1512 = get_elem_ptr v1508, ptr u64, v1511
        v1513 = const u64 1
        store v1513 to v1512, !379
        v1514 = get_local ptr slice, __anon_227, !379
        mem_copy_bytes v1514, v1508, 16
        v1515 = get_local ptr {  }, __tmp_arg127
        mem_copy_val v1515, v1505
        v1516 = get_local ptr slice, __tmp_arg128
        mem_copy_val v1516, v1514
        v1517 = call print_str_1(v1515, v1516)
        v1518 = get_local ptr {  }, f_63, !379
        v1519 = get_local ptr {  }, self_32, !379
        mem_copy_val v1519, v1518
        v1520 = get_global ptr u64, std::debug::STDERR, !414
        v1521 = load v1520, !379
        v1522 = get_local ptr u64, fd_30, !415
        store v1521 to v1522, !416
        v1523 = get_local ptr u64, fd_30, !417
        v1524 = load v1523, !418
        v1525 = asm(id: v58, fd: v1524) -> (), !419 {
            ecal   id fd zero zero, !113
        }
        v1526 = get_local ptr string<1>, __const73
        v1527 = get_local ptr string<33>, __const74
        v1528 = get_local ptr string<0>, __const75
        v1529 = get_local ptr string<1>, arg_64
        v1530 = get_local ptr string<1>, ________________________________, !420
        mem_copy_val v1530, v1529
        v1531 = get_local ptr string<1>, __anon_228
        mem_copy_val v1531, v1526
        v1532 = ptr_to_int v1531 to u64, !421
        v1533 = get_local ptr { u64, u64 }, __anon_229, !421
        v1534 = const u64 0
        v1535 = get_elem_ptr v1533, ptr u64, v1534
        store v1532 to v1535, !421
        v1536 = const u64 1
        v1537 = get_elem_ptr v1533, ptr u64, v1536
        v1538 = const u64 1
        store v1538 to v1537, !421
        v1539 = get_local ptr slice, __anon_230, !421
        mem_copy_bytes v1539, v1533, 16
        v1540 = get_local ptr { slice, u8 }, __anon_231, !422
        v1541 = const u64 0
        v1542 = get_elem_ptr v1540, ptr slice, v1541, !422
        mem_copy_val v1542, v1539
        v1543 = const u64 1
        v1544 = get_elem_ptr v1540, ptr u8, v1543, !422
        v1545 = const u8 0, !423
        store v1545 to v1544, !422
        v1546 = get_local ptr { slice, u8 }, arg_66
        mem_copy_val v1546, v1540
        v1547 = get_local ptr {  }, __anon_232, !424
        v1548 = get_local ptr {  }, f_65
        mem_copy_val v1548, v1547
        v1549 = get_local ptr {  }, f_65, !424
        v1550 = get_local ptr string<33>, __anon_233
        mem_copy_val v1550, v1527
        v1551 = ptr_to_int v1550 to u64, !424
        v1552 = get_local ptr { u64, u64 }, __anon_234, !424
        v1553 = const u64 0
        v1554 = get_elem_ptr v1552, ptr u64, v1553
        store v1551 to v1554, !424
        v1555 = const u64 1
        v1556 = get_elem_ptr v1552, ptr u64, v1555
        v1557 = const u64 33
        store v1557 to v1556, !424
        v1558 = get_local ptr slice, __anon_235, !424
        mem_copy_bytes v1558, v1552, 16
        v1559 = get_local ptr {  }, __tmp_arg129
        mem_copy_val v1559, v1549
        v1560 = get_local ptr slice, __tmp_arg130
        mem_copy_val v1560, v1558
        v1561 = call print_str_1(v1559, v1560)
        v1562 = get_local ptr { slice, u8 }, arg_66
        v1563 = get_local ptr {  }, f_65
        v1564 = get_local ptr { slice, u8 }, self_33
        mem_copy_val v1564, v1562
        v1565 = get_local ptr ptr {  }, f_2
        store v1563 to v1565
        v1566 = get_local ptr ptr {  }, f_2, !425
        v1567 = load v1566
        v1568 = get_local ptr string<0>, __anon_02
        mem_copy_val v1568, v1528
        v1569 = ptr_to_int v1568 to u64, !426
        v1570 = get_local ptr { u64, u64 }, __anon_1101, !426
        v1571 = const u64 0
        v1572 = get_elem_ptr v1570, ptr u64, v1571
        store v1569 to v1572, !426
        v1573 = const u64 1
        v1574 = get_elem_ptr v1570, ptr u64, v1573
        v1575 = const u64 0
        store v1575 to v1574, !426
        v1576 = get_local ptr slice, __anon_2101, !426
        mem_copy_bytes v1576, v1570, 16
        v1577 = get_local ptr {  }, __tmp_arg322
        mem_copy_val v1577, v1567
        v1578 = get_local ptr slice, __tmp_arg323
        mem_copy_val v1578, v1576
        v1579 = get_local ptr { {  }, bool }, __ret_val
        v1580 = call debug_tuple_62(v1577, v1578, v1579)
        v1581 = get_local ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v1581, v1580
        v1582 = get_local ptr { {  }, bool }, f__, !427
        mem_copy_val v1582, v1581
        v1583 = get_local ptr { {  }, bool }, f__, !428
        v1584 = get_local ptr { slice, u8 }, self_33, !429
        v1585 = const u64 0
        v1586 = get_elem_ptr v1584, ptr slice, v1585, !430
        v1587 = get_local ptr ptr { {  }, bool }, self_00, !433
        store v1583 to v1587, !433
        v1588 = get_local ptr slice, value_, !433
        mem_copy_val v1588, v1586
        v1589 = get_local ptr ptr { {  }, bool }, self_00, !435
        v1590 = load v1589, !433
        v1591 = const u64 1
        v1592 = get_elem_ptr v1590, ptr bool, v1591, !437
        v1593 = load v1592, !433
        cbr v1593, fmt_61_field_64_block0(), fmt_61_field_64_block2(), !439

        fmt_61_field_64_block0():
        v1594 = get_local ptr string<2>, __const76
        v1595 = get_local ptr ptr { {  }, bool }, self_00, !441
        v1596 = load v1595, !433
        v1597 = const u64 0
        v1598 = get_elem_ptr v1596, ptr {  }, v1597, !443
        v1599 = get_local ptr string<2>, __anon_000, !433
        mem_copy_val v1599, v1594
        v1600 = ptr_to_int v1599 to u64, !445
        v1601 = get_local ptr { u64, u64 }, __anon_1010, !446
        v1602 = const u64 0
        v1603 = get_elem_ptr v1601, ptr u64, v1602, !433
        store v1600 to v1603, !447
        v1604 = const u64 1
        v1605 = get_elem_ptr v1601, ptr u64, v1604, !433
        v1606 = const u64 2
        store v1606 to v1605, !448
        v1607 = get_local ptr slice, __anon_2010, !449
        mem_copy_bytes v1607, v1601, 16, !433
        v1608 = get_local ptr {  }, __tmp_arg131
        mem_copy_val v1608, v1598
        v1609 = get_local ptr slice, __tmp_arg132
        mem_copy_val v1609, v1607
        v1610 = call print_str_1(v1608, v1609)
        br fmt_61_field_64_block2(), !433

        fmt_61_field_64_block2():
        v1611 = get_local ptr slice, value_, !451
        v1612 = get_local ptr ptr { {  }, bool }, self_00, !453
        v1613 = load v1612, !433
        v1614 = const u64 0
        v1615 = get_elem_ptr v1613, ptr {  }, v1614, !454
        v1616 = get_local ptr slice, __tmp_arg319
        mem_copy_val v1616, v1611
        v1617 = call fmt_57(v1616, v1615)
        v1618 = get_local ptr ptr { {  }, bool }, self_00, !456
        v1619 = load v1618, !433
        v1620 = const u64 1
        v1621 = get_elem_ptr v1619, ptr bool, v1620, !457
        v1622 = const bool true, !458
        store v1622 to v1621, !459
        v1623 = get_local ptr ptr { {  }, bool }, self_00, !461
        v1624 = load v1623, !433
        v1625 = get_local ptr { {  }, bool }, __tmp_block_arg4
        mem_copy_val v1625, v1624
        v1626 = get_local ptr { {  }, bool }, f___, !462
        mem_copy_val v1626, v1625
        v1627 = get_local ptr { {  }, bool }, f___, !463
        v1628 = get_local ptr { slice, u8 }, self_33, !464
        v1629 = const u64 1
        v1630 = get_elem_ptr v1628, ptr u8, v1629, !465
        v1631 = load v1630
        v1632 = get_local ptr { {  }, bool }, __ret_val5
        v1633 = call field_65(v1627, v1631, v1632)
        v1634 = get_local ptr { {  }, bool }, __aggr_memcpy_01
        mem_copy_val v1634, v1633
        v1635 = get_local ptr { {  }, bool }, f____, !466
        mem_copy_val v1635, v1634
        v1636 = get_local ptr { {  }, bool }, f____, !467
        v1637 = call finish_66(v1636), !470
        v1638 = get_local ptr string<1>, __const77
        v1639 = get_local ptr {  }, f_65, !424
        v1640 = get_local ptr string<1>, __anon_236
        mem_copy_val v1640, v1638
        v1641 = ptr_to_int v1640 to u64, !424
        v1642 = get_local ptr { u64, u64 }, __anon_237, !424
        v1643 = const u64 0
        v1644 = get_elem_ptr v1642, ptr u64, v1643
        store v1641 to v1644, !424
        v1645 = const u64 1
        v1646 = get_elem_ptr v1642, ptr u64, v1645
        v1647 = const u64 1
        store v1647 to v1646, !424
        v1648 = get_local ptr slice, __anon_238, !424
        mem_copy_bytes v1648, v1642, 16
        v1649 = get_local ptr {  }, __tmp_arg133
        mem_copy_val v1649, v1639
        v1650 = get_local ptr slice, __tmp_arg134
        mem_copy_val v1650, v1648
        v1651 = call print_str_1(v1649, v1650)
        v1652 = get_local ptr {  }, f_65, !424
        v1653 = get_local ptr {  }, self_34, !424
        mem_copy_val v1653, v1652
        v1654 = get_global ptr u64, std::debug::STDERR, !471
        v1655 = load v1654, !424
        v1656 = get_local ptr u64, fd_31, !472
        store v1655 to v1656, !473
        v1657 = get_local ptr u64, fd_31, !474
        v1658 = load v1657, !475
        v1659 = asm(id: v58, fd: v1658) -> (), !476 {
            ecal   id fd zero zero, !113
        }
        v1660 = get_local ptr string<33>, __const78
        v1661 = get_local ptr { slice, u8 }, arg_66
        v1662 = get_local ptr { slice, u8 }, _________________________________, !477
        mem_copy_val v1662, v1661
        v1663 = get_local ptr [u8; 2], __anon_239, !478
        v1664 = const u64 0
        v1665 = get_elem_ptr v1663, ptr u8, v1664
        v1666 = const u8 0, !479
        store v1666 to v1665, !478
        v1667 = const u64 1
        v1668 = get_elem_ptr v1663, ptr u8, v1667
        v1669 = const u8 1, !480
        store v1669 to v1668, !478
        v1670 = get_local ptr [u8; 2], arg_68
        mem_copy_val v1670, v1663
        v1671 = get_local ptr {  }, __anon_240, !481
        v1672 = get_local ptr {  }, f_67
        mem_copy_val v1672, v1671
        v1673 = get_local ptr {  }, f_67, !481
        v1674 = get_local ptr string<33>, __anon_241
        mem_copy_val v1674, v1660
        v1675 = ptr_to_int v1674 to u64, !481
        v1676 = get_local ptr { u64, u64 }, __anon_242, !481
        v1677 = const u64 0
        v1678 = get_elem_ptr v1676, ptr u64, v1677
        store v1675 to v1678, !481
        v1679 = const u64 1
        v1680 = get_elem_ptr v1676, ptr u64, v1679
        v1681 = const u64 33
        store v1681 to v1680, !481
        v1682 = get_local ptr slice, __anon_243, !481
        mem_copy_bytes v1682, v1676, 16
        v1683 = get_local ptr {  }, __tmp_arg135
        mem_copy_val v1683, v1673
        v1684 = get_local ptr slice, __tmp_arg136
        mem_copy_val v1684, v1682
        v1685 = call print_str_1(v1683, v1684)
        v1686 = get_local ptr [u8; 2], arg_68
        v1687 = get_local ptr {  }, f_67
        v1688 = get_local ptr [u8; 2], self_35
        mem_copy_val v1688, v1686
        v1689 = get_local ptr ptr {  }, f_4
        store v1687 to v1689
        v1690 = get_local ptr ptr {  }, f_4, !482
        v1691 = load v1690
        v1692 = get_local ptr {  }, __tmp_arg334
        mem_copy_val v1692, v1691
        v1693 = get_local ptr { {  }, bool }, __ret_val7
        v1694 = call debug_list_68(v1692, v1693)
        v1695 = get_local ptr { {  }, bool }, __aggr_memcpy_02
        mem_copy_val v1695, v1694
        v1696 = get_local ptr { {  }, bool }, f__0, !483
        mem_copy_val v1696, v1695
        v1697 = get_local ptr u64, i, !484
        v1698 = const u64 0, !485
        store v1698 to v1697, !484
        br fmt_67_while()

        fmt_67_while():
        v1699 = get_local ptr u64, i, !486
        v1700 = get_local ptr u64, self_01, !489
        mem_copy_val v1700, v1699
        v1701 = get_local ptr u64, other_, !489
        v1702 = const u64 2, !490
        store v1702 to v1701, !489
        v1703 = get_local ptr u64, self_01, !493
        v1704 = load v1703, !489
        v1705 = get_local ptr u64, other_, !495
        v1706 = load v1705, !489
        v1707 = cmp lt v1704 v1706, !489
        cbr v1707, fmt_67_while_body(), fmt_67_end_while()

        fmt_67_while_body():
        v1708 = get_local ptr { {  }, bool }, f__0, !496
        v1709 = get_local ptr [u8; 2], self_35, !497
        v1710 = get_local ptr u64, i, !498
        v1711 = load v1710
        v1712 = get_elem_ptr v1709, ptr u8, v1711, !499
        v1713 = load v1712
        v1714 = get_local ptr { {  }, bool }, __ret_val11
        v1715 = call entry_70(v1708, v1713, v1714)
        v1716 = get_local ptr { {  }, bool }, __aggr_memcpy_03
        mem_copy_val v1716, v1715
        v1717 = get_local ptr { {  }, bool }, f__0, !500
        mem_copy_val v1717, v1716
        v1718 = get_local ptr u64, i, !501
        v1719 = get_local ptr u64, self_110, !504
        mem_copy_val v1719, v1718
        v1720 = get_local ptr u64, other_0, !504
        v1721 = const u64 1, !505
        store v1721 to v1720, !504
        v1722 = get_local ptr u64, self_110, !507
        v1723 = load v1722, !504
        v1724 = get_local ptr u64, other_0, !509
        v1725 = load v1724, !504
        v1726 = add v1723, v1725, !504
        v1727 = get_local ptr u64, i, !502
        store v1726 to v1727, !502
        br fmt_67_while()

        fmt_67_end_while():
        v1728 = get_local ptr { {  }, bool }, f__0, !510
        v1729 = call finish_72(v1728), !513
        v1730 = get_local ptr string<1>, __const79
        v1731 = get_local ptr {  }, f_67, !481
        v1732 = get_local ptr string<1>, __anon_244
        mem_copy_val v1732, v1730
        v1733 = ptr_to_int v1732 to u64, !481
        v1734 = get_local ptr { u64, u64 }, __anon_245, !481
        v1735 = const u64 0
        v1736 = get_elem_ptr v1734, ptr u64, v1735
        store v1733 to v1736, !481
        v1737 = const u64 1
        v1738 = get_elem_ptr v1734, ptr u64, v1737
        v1739 = const u64 1
        store v1739 to v1738, !481
        v1740 = get_local ptr slice, __anon_246, !481
        mem_copy_bytes v1740, v1734, 16
        v1741 = get_local ptr {  }, __tmp_arg137
        mem_copy_val v1741, v1731
        v1742 = get_local ptr slice, __tmp_arg138
        mem_copy_val v1742, v1740
        v1743 = call print_str_1(v1741, v1742)
        v1744 = get_local ptr {  }, f_67, !481
        v1745 = get_local ptr {  }, self_36, !481
        mem_copy_val v1745, v1744
        v1746 = get_global ptr u64, std::debug::STDERR, !514
        v1747 = load v1746, !481
        v1748 = get_local ptr u64, fd_32, !515
        store v1747 to v1748, !516
        v1749 = get_local ptr u64, fd_32, !517
        v1750 = load v1749, !518
        v1751 = asm(id: v58, fd: v1750) -> (), !519 {
            ecal   id fd zero zero, !113
        }
        v1752 = get_local ptr string<49>, __const80
        v1753 = get_local ptr [u8; 2], arg_68
        v1754 = get_local ptr [u8; 2], __________________________________, !520
        mem_copy_val v1754, v1753
        v1755 = get_local ptr [u8; 2], __anon_247, !521
        v1756 = const u64 0
        v1757 = get_elem_ptr v1755, ptr u8, v1756
        v1758 = const u8 0, !522
        store v1758 to v1757, !521
        v1759 = const u64 1
        v1760 = get_elem_ptr v1755, ptr u8, v1759
        v1761 = const u8 1, !523
        store v1761 to v1760, !521
        v1762 = const u64 0, !524
        v1763 = const u64 1
        v1764 = asm(idx: v1762, elem_ir_type_size: v1763, ptr: v1755, offset_temp, ptr_out) -> ptr u8 ptr_out {
            mul    offset_temp idx elem_ir_type_size
            add    ptr_out ptr offset_temp
        }
        v1765 = const u64 2, !525
        v1766 = sub v1765, v1762
        v1767 = get_local ptr { ptr u8, u64 }, __anon_248
        v1768 = const u64 0
        v1769 = get_elem_ptr v1767, ptr ptr u8, v1768
        store v1764 to v1769
        v1770 = const u64 1
        v1771 = get_elem_ptr v1767, ptr u64, v1770
        store v1766 to v1771
        v1772 = asm(s: v1767) -> ptr __slice[u8] s {
        }
        v1773 = get_local ptr __slice[u8], __aggr_memcpy_04
        mem_copy_val v1773, v1772
        v1774 = get_local ptr __slice[u8], arg_70
        mem_copy_val v1774, v1773
        v1775 = get_local ptr {  }, __anon_249, !526
        v1776 = get_local ptr {  }, f_69
        mem_copy_val v1776, v1775
        v1777 = get_local ptr {  }, f_69, !526
        v1778 = get_local ptr string<49>, __anon_250
        mem_copy_val v1778, v1752
        v1779 = ptr_to_int v1778 to u64, !526
        v1780 = get_local ptr { u64, u64 }, __anon_251, !526
        v1781 = const u64 0
        v1782 = get_elem_ptr v1780, ptr u64, v1781
        store v1779 to v1782, !526
        v1783 = const u64 1
        v1784 = get_elem_ptr v1780, ptr u64, v1783
        v1785 = const u64 49
        store v1785 to v1784, !526
        v1786 = get_local ptr slice, __anon_252, !526
        mem_copy_bytes v1786, v1780, 16
        v1787 = get_local ptr {  }, __tmp_arg139
        mem_copy_val v1787, v1777
        v1788 = get_local ptr slice, __tmp_arg140
        mem_copy_val v1788, v1786
        v1789 = call print_str_1(v1787, v1788)
        v1790 = get_local ptr __slice[u8], arg_70
        v1791 = get_local ptr {  }, f_69
        v1792 = get_local ptr __slice[u8], self_37
        mem_copy_val v1792, v1790
        v1793 = get_local ptr ptr {  }, f_6
        store v1791 to v1793
        v1794 = get_local ptr ptr {  }, f_6, !527
        v1795 = load v1794
        v1796 = get_local ptr {  }, __tmp_arg335
        mem_copy_val v1796, v1795
        v1797 = get_local ptr { {  }, bool }, __ret_val8
        v1798 = call debug_list_68(v1796, v1797)
        v1799 = get_local ptr { {  }, bool }, __aggr_memcpy_05
        mem_copy_val v1799, v1798
        v1800 = get_local ptr { {  }, bool }, f__1, !528
        mem_copy_val v1800, v1799
        v1801 = get_local ptr u64, i0, !529
        v1802 = const u64 0, !530
        store v1802 to v1801, !529
        br fmt_73_while()

        fmt_73_while():
        v1803 = get_local ptr u64, i0, !531
        v1804 = get_local ptr __slice[u8], self_37, !532
        v1805 = get_local ptr __slice[u8], self_02, !535
        mem_copy_val v1805, v1804
        v1806 = get_local ptr __slice[u8], self_02, !538
        v1807 = asm(s: v1806) -> ptr { u64, u64 } s {
        }
        v1808 = get_local ptr { u64, u64 }, __aggr_memcpy_06
        mem_copy_val v1808, v1807
        v1809 = get_local ptr { u64, u64 }, __tuple_2, !540
        mem_copy_val v1809, v1808
        v1810 = get_local ptr { u64, u64 }, __tuple_2, !541
        v1811 = get_local ptr { u64, u64 }, __tuple_2_, !542
        mem_copy_val v1811, v1810
        v1812 = get_local ptr { u64, u64 }, __tuple_2_, !543
        v1813 = const u64 0
        v1814 = get_elem_ptr v1812, ptr u64, v1813, !544
        v1815 = get_local ptr u64, _0, !545
        mem_copy_val v1815, v1814
        v1816 = get_local ptr { u64, u64 }, __tuple_2_, !546
        v1817 = const u64 1
        v1818 = get_elem_ptr v1816, ptr u64, v1817, !547
        v1819 = get_local ptr u64, len, !548
        mem_copy_val v1819, v1818
        v1820 = get_local ptr u64, len, !550
        v1821 = load v1820, !535
        v1822 = get_local ptr u64, self_111, !553
        mem_copy_val v1822, v1803
        v1823 = get_local ptr u64, other_1, !553
        store v1821 to v1823, !553
        v1824 = get_local ptr u64, self_111, !554
        v1825 = load v1824, !553
        v1826 = get_local ptr u64, other_1, !555
        v1827 = load v1826, !553
        v1828 = cmp lt v1825 v1827, !553
        cbr v1828, fmt_73_while_body(), fmt_73_end_while()

        fmt_73_while_body():
        v1829 = get_local ptr __slice[u8], self_37, !556
        v1830 = asm(ptr: v1829, ptr_out) -> ptr u8 ptr_out {
            lw     ptr_out ptr i0
        }
        v1831 = get_local ptr u64, i0, !557
        v1832 = load v1831
        v1833 = const u64 1
        v1834 = asm(idx: v1832, elem_ir_type_size: v1833, ptr: v1830, offset_temp, ptr_out) -> ptr u8 ptr_out {
            mul    offset_temp idx elem_ir_type_size
            add    ptr_out ptr offset_temp
        }
        v1835 = get_local ptr ptr u8, __anon_03
        store v1834 to v1835
        v1836 = load v1835
        v1837 = get_local ptr u8, item, !558
        mem_copy_val v1837, v1836
        v1838 = get_local ptr { {  }, bool }, f__1, !559
        v1839 = get_local ptr u8, item, !560
        v1840 = load v1839
        v1841 = get_local ptr { {  }, bool }, __ret_val12
        v1842 = call entry_70(v1838, v1840, v1841)
        v1843 = get_local ptr { {  }, bool }, __aggr_memcpy_07
        mem_copy_val v1843, v1842
        v1844 = get_local ptr { {  }, bool }, f__1, !561
        mem_copy_val v1844, v1843
        v1845 = get_local ptr u64, i0, !562
        v1846 = get_local ptr u64, self_210, !565
        mem_copy_val v1846, v1845
        v1847 = get_local ptr u64, other_00, !565
        v1848 = const u64 1, !566
        store v1848 to v1847, !565
        v1849 = get_local ptr u64, self_210, !567
        v1850 = load v1849, !565
        v1851 = get_local ptr u64, other_00, !568
        v1852 = load v1851, !565
        v1853 = add v1850, v1852, !565
        v1854 = get_local ptr u64, i0, !563
        store v1853 to v1854, !563
        br fmt_73_while()

        fmt_73_end_while():
        v1855 = get_local ptr { {  }, bool }, f__1, !569
        v1856 = call finish_72(v1855), !572
        v1857 = get_local ptr string<1>, __const81
        v1858 = get_local ptr {  }, f_69, !526
        v1859 = get_local ptr string<1>, __anon_253
        mem_copy_val v1859, v1857
        v1860 = ptr_to_int v1859 to u64, !526
        v1861 = get_local ptr { u64, u64 }, __anon_254, !526
        v1862 = const u64 0
        v1863 = get_elem_ptr v1861, ptr u64, v1862
        store v1860 to v1863, !526
        v1864 = const u64 1
        v1865 = get_elem_ptr v1861, ptr u64, v1864
        v1866 = const u64 1
        store v1866 to v1865, !526
        v1867 = get_local ptr slice, __anon_255, !526
        mem_copy_bytes v1867, v1861, 16
        v1868 = get_local ptr {  }, __tmp_arg141
        mem_copy_val v1868, v1858
        v1869 = get_local ptr slice, __tmp_arg142
        mem_copy_val v1869, v1867
        v1870 = call print_str_1(v1868, v1869)
        v1871 = get_local ptr {  }, f_69, !526
        v1872 = get_local ptr {  }, self_38, !526
        mem_copy_val v1872, v1871
        v1873 = get_global ptr u64, std::debug::STDERR, !573
        v1874 = load v1873, !526
        v1875 = get_local ptr u64, fd_33, !574
        store v1874 to v1875, !575
        v1876 = get_local ptr u64, fd_33, !576
        v1877 = load v1876, !577
        v1878 = asm(id: v58, fd: v1877) -> (), !578 {
            ecal   id fd zero zero, !113
        }
        v1879 = get_local ptr string<27>, __const82
        v1880 = get_local ptr string<1>, __const83
        v1881 = get_local ptr __slice[u8], arg_70
        v1882 = get_local ptr __slice[u8], ___________________________________, !579
        mem_copy_val v1882, v1881
        v1883 = get_local ptr {  }, __anon_256, !580
        v1884 = get_local ptr {  }, arg_72
        mem_copy_val v1884, v1883
        v1885 = get_local ptr {  }, __anon_257, !581
        v1886 = get_local ptr {  }, f_71
        mem_copy_val v1886, v1885
        v1887 = get_local ptr {  }, f_71, !581
        v1888 = get_local ptr string<27>, __anon_258
        mem_copy_val v1888, v1879
        v1889 = ptr_to_int v1888 to u64, !581
        v1890 = get_local ptr { u64, u64 }, __anon_259, !581
        v1891 = const u64 0
        v1892 = get_elem_ptr v1890, ptr u64, v1891
        store v1889 to v1892, !581
        v1893 = const u64 1
        v1894 = get_elem_ptr v1890, ptr u64, v1893
        v1895 = const u64 27
        store v1895 to v1894, !581
        v1896 = get_local ptr slice, __anon_260, !581
        mem_copy_bytes v1896, v1890, 16
        v1897 = get_local ptr {  }, __tmp_arg143
        mem_copy_val v1897, v1887
        v1898 = get_local ptr slice, __tmp_arg144
        mem_copy_val v1898, v1896
        v1899 = call print_str_1(v1897, v1898)
        v1900 = get_local ptr {  }, arg_72
        v1901 = get_local ptr {  }, f_71
        v1902 = get_local ptr {  }, __tmp_arg338
        mem_copy_val v1902, v1900
        v1903 = call fmt_75(v1902, v1901)
        v1904 = get_local ptr {  }, f_71, !581
        v1905 = get_local ptr string<1>, __anon_261
        mem_copy_val v1905, v1880
        v1906 = ptr_to_int v1905 to u64, !581
        v1907 = get_local ptr { u64, u64 }, __anon_262, !581
        v1908 = const u64 0
        v1909 = get_elem_ptr v1907, ptr u64, v1908
        store v1906 to v1909, !581
        v1910 = const u64 1
        v1911 = get_elem_ptr v1907, ptr u64, v1910
        v1912 = const u64 1
        store v1912 to v1911, !581
        v1913 = get_local ptr slice, __anon_263, !581
        mem_copy_bytes v1913, v1907, 16
        v1914 = get_local ptr {  }, __tmp_arg145
        mem_copy_val v1914, v1904
        v1915 = get_local ptr slice, __tmp_arg146
        mem_copy_val v1915, v1913
        v1916 = call print_str_1(v1914, v1915)
        v1917 = get_local ptr {  }, f_71, !581
        v1918 = get_local ptr {  }, self_39, !581
        mem_copy_val v1918, v1917
        v1919 = get_global ptr u64, std::debug::STDERR, !582
        v1920 = load v1919, !581
        v1921 = get_local ptr u64, fd_34, !583
        store v1920 to v1921, !584
        v1922 = get_local ptr u64, fd_34, !585
        v1923 = load v1922, !586
        v1924 = asm(id: v58, fd: v1923) -> (), !587 {
            ecal   id fd zero zero, !113
        }
        v1925 = get_local ptr string<30>, __const84
        v1926 = get_local ptr string<1>, __const85
        v1927 = get_local ptr {  }, arg_72
        v1928 = get_local ptr {  }, ____________________________________, !588
        mem_copy_val v1928, v1927
        v1929 = get_local ptr { u64, ( () | {  } ) }, __anon_264, !589
        v1930 = const u64 0
        v1931 = get_elem_ptr v1929, ptr u64, v1930, !589
        v1932 = const u64 0, !589
        store v1932 to v1931, !589
        v1933 = get_local ptr { u64, ( () | {  } ) }, arg_74
        mem_copy_val v1933, v1929
        v1934 = get_local ptr {  }, __anon_265, !590
        v1935 = get_local ptr {  }, f_73
        mem_copy_val v1935, v1934
        v1936 = get_local ptr {  }, f_73, !590
        v1937 = get_local ptr string<30>, __anon_266
        mem_copy_val v1937, v1925
        v1938 = ptr_to_int v1937 to u64, !590
        v1939 = get_local ptr { u64, u64 }, __anon_267, !590
        v1940 = const u64 0
        v1941 = get_elem_ptr v1939, ptr u64, v1940
        store v1938 to v1941, !590
        v1942 = const u64 1
        v1943 = get_elem_ptr v1939, ptr u64, v1942
        v1944 = const u64 30
        store v1944 to v1943, !590
        v1945 = get_local ptr slice, __anon_268, !590
        mem_copy_bytes v1945, v1939, 16
        v1946 = get_local ptr {  }, __tmp_arg147
        mem_copy_val v1946, v1936
        v1947 = get_local ptr slice, __tmp_arg148
        mem_copy_val v1947, v1945
        v1948 = call print_str_1(v1946, v1947)
        v1949 = get_local ptr { u64, ( () | {  } ) }, arg_74
        v1950 = get_local ptr {  }, f_73
        v1951 = get_local ptr { u64, ( () | {  } ) }, __tmp_arg347
        mem_copy_val v1951, v1949
        v1952 = call fmt_78(v1951, v1950)
        v1953 = get_local ptr {  }, f_73, !590
        v1954 = get_local ptr string<1>, __anon_269
        mem_copy_val v1954, v1926
        v1955 = ptr_to_int v1954 to u64, !590
        v1956 = get_local ptr { u64, u64 }, __anon_270, !590
        v1957 = const u64 0
        v1958 = get_elem_ptr v1956, ptr u64, v1957
        store v1955 to v1958, !590
        v1959 = const u64 1
        v1960 = get_elem_ptr v1956, ptr u64, v1959
        v1961 = const u64 1
        store v1961 to v1960, !590
        v1962 = get_local ptr slice, __anon_271, !590
        mem_copy_bytes v1962, v1956, 16
        v1963 = get_local ptr {  }, __tmp_arg149
        mem_copy_val v1963, v1953
        v1964 = get_local ptr slice, __tmp_arg150
        mem_copy_val v1964, v1962
        v1965 = call print_str_1(v1963, v1964)
        v1966 = get_local ptr {  }, f_73, !590
        v1967 = get_local ptr {  }, self_40, !590
        mem_copy_val v1967, v1966
        v1968 = get_global ptr u64, std::debug::STDERR, !591
        v1969 = load v1968, !590
        v1970 = get_local ptr u64, fd_35, !592
        store v1969 to v1970, !593
        v1971 = get_local ptr u64, fd_35, !594
        v1972 = load v1971, !595
        v1973 = asm(id: v58, fd: v1972) -> (), !596 {
            ecal   id fd zero zero, !113
        }
        v1974 = get_local ptr string<36>, __const86
        v1975 = get_local ptr string<1>, __const87
        v1976 = get_local ptr { u64, ( () | {  } ) }, arg_74
        v1977 = get_local ptr { u64, ( () | {  } ) }, _____________________________________, !597
        mem_copy_val v1977, v1976
        v1978 = get_local ptr { u64, ( () | {  } ) }, __anon_272, !589
        v1979 = const u64 0
        v1980 = get_elem_ptr v1978, ptr u64, v1979, !589
        v1981 = const u64 1, !589
        store v1981 to v1980, !589
        v1982 = get_local ptr {  }, __anon_273, !598
        v1983 = const u64 1
        v1984 = const u64 1
        v1985 = get_elem_ptr v1978, ptr {  }, v1983, v1984, !589
        mem_copy_val v1985, v1982
        v1986 = get_local ptr { u64, ( () | {  } ) }, arg_76
        mem_copy_val v1986, v1978
        v1987 = get_local ptr {  }, __anon_274, !599
        v1988 = get_local ptr {  }, f_75
        mem_copy_val v1988, v1987
        v1989 = get_local ptr {  }, f_75, !599
        v1990 = get_local ptr string<36>, __anon_275
        mem_copy_val v1990, v1974
        v1991 = ptr_to_int v1990 to u64, !599
        v1992 = get_local ptr { u64, u64 }, __anon_276, !599
        v1993 = const u64 0
        v1994 = get_elem_ptr v1992, ptr u64, v1993
        store v1991 to v1994, !599
        v1995 = const u64 1
        v1996 = get_elem_ptr v1992, ptr u64, v1995
        v1997 = const u64 36
        store v1997 to v1996, !599
        v1998 = get_local ptr slice, __anon_277, !599
        mem_copy_bytes v1998, v1992, 16
        v1999 = get_local ptr {  }, __tmp_arg151
        mem_copy_val v1999, v1989
        v2000 = get_local ptr slice, __tmp_arg152
        mem_copy_val v2000, v1998
        v2001 = call print_str_1(v1999, v2000)
        v2002 = get_local ptr { u64, ( () | {  } ) }, arg_76
        v2003 = get_local ptr {  }, f_75
        v2004 = get_local ptr { u64, ( () | {  } ) }, __tmp_arg348
        mem_copy_val v2004, v2002
        v2005 = call fmt_78(v2004, v2003)
        v2006 = get_local ptr {  }, f_75, !599
        v2007 = get_local ptr string<1>, __anon_278
        mem_copy_val v2007, v1975
        v2008 = ptr_to_int v2007 to u64, !599
        v2009 = get_local ptr { u64, u64 }, __anon_279, !599
        v2010 = const u64 0
        v2011 = get_elem_ptr v2009, ptr u64, v2010
        store v2008 to v2011, !599
        v2012 = const u64 1
        v2013 = get_elem_ptr v2009, ptr u64, v2012
        v2014 = const u64 1
        store v2014 to v2013, !599
        v2015 = get_local ptr slice, __anon_280, !599
        mem_copy_bytes v2015, v2009, 16
        v2016 = get_local ptr {  }, __tmp_arg153
        mem_copy_val v2016, v2006
        v2017 = get_local ptr slice, __tmp_arg154
        mem_copy_val v2017, v2015
        v2018 = call print_str_1(v2016, v2017)
        v2019 = get_local ptr {  }, f_75, !599
        v2020 = get_local ptr {  }, self_41, !599
        mem_copy_val v2020, v2019
        v2021 = get_global ptr u64, std::debug::STDERR, !600
        v2022 = load v2021, !599
        v2023 = get_local ptr u64, fd_36, !601
        store v2022 to v2023, !602
        v2024 = get_local ptr u64, fd_36, !603
        v2025 = load v2024, !604
        v2026 = asm(id: v58, fd: v2025) -> (), !605 {
            ecal   id fd zero zero, !113
        }
        v2027 = get_local ptr b256, __const88
        v2028 = get_local ptr { u64, ( () | {  } ) }, arg_76
        v2029 = get_local ptr { u64, ( () | {  } ) }, ______________________________________, !606
        mem_copy_val v2029, v2028
        v2030 = get_local ptr b256, __tmp_block_arg5
        mem_copy_val v2030, v2027
        v2031 = get_local ptr { b256 }, __anon_04, !611
        v2032 = const u64 0
        v2033 = get_elem_ptr v2031, ptr b256, v2032, !612
        mem_copy_val v2033, v2030
        v2034 = get_local ptr { b256 }, __tmp_block_arg6
        mem_copy_val v2034, v2031
        v2035 = get_local ptr string<52>, __const89
        v2036 = get_local ptr string<1>, __const90
        v2037 = get_local ptr { b256 }, arg_78
        mem_copy_val v2037, v2034
        v2038 = get_local ptr {  }, __anon_281, !613
        v2039 = get_local ptr {  }, f_77
        mem_copy_val v2039, v2038
        v2040 = get_local ptr {  }, f_77, !613
        v2041 = get_local ptr string<52>, __anon_282
        mem_copy_val v2041, v2035
        v2042 = ptr_to_int v2041 to u64, !613
        v2043 = get_local ptr { u64, u64 }, __anon_283, !613
        v2044 = const u64 0
        v2045 = get_elem_ptr v2043, ptr u64, v2044
        store v2042 to v2045, !613
        v2046 = const u64 1
        v2047 = get_elem_ptr v2043, ptr u64, v2046
        v2048 = const u64 52
        store v2048 to v2047, !613
        v2049 = get_local ptr slice, __anon_284, !613
        mem_copy_bytes v2049, v2043, 16
        v2050 = get_local ptr {  }, __tmp_arg155
        mem_copy_val v2050, v2040
        v2051 = get_local ptr slice, __tmp_arg156
        mem_copy_val v2051, v2049
        v2052 = call print_str_1(v2050, v2051)
        v2053 = get_local ptr { b256 }, arg_78
        v2054 = get_local ptr {  }, f_77
        v2055 = get_local ptr { b256 }, __tmp_arg349
        mem_copy_val v2055, v2053
        v2056 = call fmt_82(v2055, v2054)
        v2057 = get_local ptr {  }, f_77, !613
        v2058 = get_local ptr string<1>, __anon_285
        mem_copy_val v2058, v2036
        v2059 = ptr_to_int v2058 to u64, !613
        v2060 = get_local ptr { u64, u64 }, __anon_286, !613
        v2061 = const u64 0
        v2062 = get_elem_ptr v2060, ptr u64, v2061
        store v2059 to v2062, !613
        v2063 = const u64 1
        v2064 = get_elem_ptr v2060, ptr u64, v2063
        v2065 = const u64 1
        store v2065 to v2064, !613
        v2066 = get_local ptr slice, __anon_287, !613
        mem_copy_bytes v2066, v2060, 16
        v2067 = get_local ptr {  }, __tmp_arg157
        mem_copy_val v2067, v2057
        v2068 = get_local ptr slice, __tmp_arg158
        mem_copy_val v2068, v2066
        v2069 = call print_str_1(v2067, v2068)
        v2070 = get_local ptr {  }, f_77, !613
        v2071 = get_local ptr {  }, self_42, !613
        mem_copy_val v2071, v2070
        v2072 = get_global ptr u64, std::debug::STDERR, !614
        v2073 = load v2072, !613
        v2074 = get_local ptr u64, fd_37, !615
        store v2073 to v2074, !616
        v2075 = get_local ptr u64, fd_37, !617
        v2076 = load v2075, !618
        v2077 = asm(id: v58, fd: v2076) -> (), !619 {
            ecal   id fd zero zero, !113
        }
        v2078 = get_local ptr b256, __const91
        v2079 = get_local ptr { b256 }, arg_78
        v2080 = get_local ptr { b256 }, _______________________________________, !620
        mem_copy_val v2080, v2079
        v2081 = get_local ptr b256, __tmp_block_arg7
        mem_copy_val v2081, v2078
        v2082 = get_local ptr { b256 }, __anon_05, !625
        v2083 = const u64 0
        v2084 = get_elem_ptr v2082, ptr b256, v2083, !626
        mem_copy_val v2084, v2081
        v2085 = get_local ptr { b256 }, __tmp_block_arg8
        mem_copy_val v2085, v2082
        v2086 = get_local ptr string<53>, __const92
        v2087 = get_local ptr string<1>, __const93
        v2088 = get_local ptr { b256 }, arg_80
        mem_copy_val v2088, v2085
        v2089 = get_local ptr {  }, __anon_288, !627
        v2090 = get_local ptr {  }, f_79
        mem_copy_val v2090, v2089
        v2091 = get_local ptr {  }, f_79, !627
        v2092 = get_local ptr string<53>, __anon_289
        mem_copy_val v2092, v2086
        v2093 = ptr_to_int v2092 to u64, !627
        v2094 = get_local ptr { u64, u64 }, __anon_290, !627
        v2095 = const u64 0
        v2096 = get_elem_ptr v2094, ptr u64, v2095
        store v2093 to v2096, !627
        v2097 = const u64 1
        v2098 = get_elem_ptr v2094, ptr u64, v2097
        v2099 = const u64 53
        store v2099 to v2098, !627
        v2100 = get_local ptr slice, __anon_291, !627
        mem_copy_bytes v2100, v2094, 16
        v2101 = get_local ptr {  }, __tmp_arg159
        mem_copy_val v2101, v2091
        v2102 = get_local ptr slice, __tmp_arg160
        mem_copy_val v2102, v2100
        v2103 = call print_str_1(v2101, v2102)
        v2104 = get_local ptr { b256 }, arg_80
        v2105 = get_local ptr {  }, f_79
        v2106 = get_local ptr { b256 }, __tmp_arg351
        mem_copy_val v2106, v2104
        v2107 = call fmt_85(v2106, v2105)
        v2108 = get_local ptr {  }, f_79, !627
        v2109 = get_local ptr string<1>, __anon_292
        mem_copy_val v2109, v2087
        v2110 = ptr_to_int v2109 to u64, !627
        v2111 = get_local ptr { u64, u64 }, __anon_293, !627
        v2112 = const u64 0
        v2113 = get_elem_ptr v2111, ptr u64, v2112
        store v2110 to v2113, !627
        v2114 = const u64 1
        v2115 = get_elem_ptr v2111, ptr u64, v2114
        v2116 = const u64 1
        store v2116 to v2115, !627
        v2117 = get_local ptr slice, __anon_294, !627
        mem_copy_bytes v2117, v2111, 16
        v2118 = get_local ptr {  }, __tmp_arg161
        mem_copy_val v2118, v2108
        v2119 = get_local ptr slice, __tmp_arg162
        mem_copy_val v2119, v2117
        v2120 = call print_str_1(v2118, v2119)
        v2121 = get_local ptr {  }, f_79, !627
        v2122 = get_local ptr {  }, self_43, !627
        mem_copy_val v2122, v2121
        v2123 = get_global ptr u64, std::debug::STDERR, !628
        v2124 = load v2123, !627
        v2125 = get_local ptr u64, fd_38, !629
        store v2124 to v2125, !630
        v2126 = get_local ptr u64, fd_38, !631
        v2127 = load v2126, !632
        v2128 = asm(id: v58, fd: v2127) -> (), !633 {
            ecal   id fd zero zero, !113
        }
        v2129 = get_local ptr string<75>, __const94
        v2130 = get_local ptr { b256 }, arg_80
        v2131 = get_local ptr { b256 }, ________________________________________, !634
        mem_copy_val v2131, v2130
        v2132 = get_local ptr { u64 }, __anon_295, !636
        v2133 = const u64 0
        v2134 = get_elem_ptr v2132, ptr u64, v2133, !636
        v2135 = const u64 0, !636
        store v2135 to v2134, !636
        v2136 = get_local ptr { u64 }, arg_82
        mem_copy_val v2136, v2132
        v2137 = get_local ptr {  }, __anon_296, !637
        v2138 = get_local ptr {  }, f_81
        mem_copy_val v2138, v2137
        v2139 = get_local ptr {  }, f_81, !637
        v2140 = get_local ptr string<75>, __anon_297
        mem_copy_val v2140, v2129
        v2141 = ptr_to_int v2140 to u64, !637
        v2142 = get_local ptr { u64, u64 }, __anon_298, !637
        v2143 = const u64 0
        v2144 = get_elem_ptr v2142, ptr u64, v2143
        store v2141 to v2144, !637
        v2145 = const u64 1
        v2146 = get_elem_ptr v2142, ptr u64, v2145
        v2147 = const u64 75
        store v2147 to v2146, !637
        v2148 = get_local ptr slice, __anon_299, !637
        mem_copy_bytes v2148, v2142, 16
        v2149 = get_local ptr {  }, __tmp_arg163
        mem_copy_val v2149, v2139
        v2150 = get_local ptr slice, __tmp_arg164
        mem_copy_val v2150, v2148
        v2151 = call print_str_1(v2149, v2150)
        v2152 = get_local ptr { u64 }, arg_82
        v2153 = get_local ptr {  }, f_81
        v2154 = get_local ptr { u64 }, self_44
        mem_copy_val v2154, v2152
        v2155 = get_local ptr ptr {  }, _f_
        store v2153 to v2155
        v2156 = get_local ptr { u64 }, self_44, !639
        v2157 = get_local ptr { u64 }, __matched_value_1, !640
        mem_copy_val v2157, v2156
        v2158 = get_local ptr { u64 }, __matched_value_1, !639
        v2159 = const u64 0
        v2160 = get_elem_ptr v2158, ptr u64, v2159, !639
        v2161 = get_local ptr u64, self_03, !643
        mem_copy_val v2161, v2160
        v2162 = get_local ptr u64, other_2, !643
        v2163 = const u64 0, !639
        store v2163 to v2162, !643
        v2164 = get_local ptr u64, self_03, !645
        v2165 = load v2164, !643
        v2166 = get_local ptr u64, other_2, !647
        v2167 = load v2166, !643
        v2168 = cmp eq v2165 v2167, !643
        cbr v2168, fmt_86_block0(), fmt_86_block1(), !641

        fmt_86_block0():
        v2169 = get_local ptr string<30>, __const95
        v2170 = get_local ptr ptr {  }, _f_, !648
        v2171 = load v2170
        v2172 = get_local ptr string<30>, __anon_06
        mem_copy_val v2172, v2169
        v2173 = ptr_to_int v2172 to u64, !649
        v2174 = get_local ptr { u64, u64 }, __anon_1102, !649
        v2175 = const u64 0
        v2176 = get_elem_ptr v2174, ptr u64, v2175
        store v2173 to v2176, !649
        v2177 = const u64 1
        v2178 = get_elem_ptr v2174, ptr u64, v2177
        v2179 = const u64 30
        store v2179 to v2178, !649
        v2180 = get_local ptr slice, __anon_2102, !649
        mem_copy_bytes v2180, v2174, 16
        v2181 = get_local ptr {  }, __tmp_arg165
        mem_copy_val v2181, v2171
        v2182 = get_local ptr slice, __tmp_arg166
        mem_copy_val v2182, v2180
        v2183 = call print_str_1(v2181, v2182)
        br fmt_86_block5()

        fmt_86_block1():
        v2184 = get_local ptr { u64 }, __matched_value_1, !639
        v2185 = const u64 0
        v2186 = get_elem_ptr v2184, ptr u64, v2185, !639
        v2187 = get_local ptr u64, self_112, !652
        mem_copy_val v2187, v2186
        v2188 = get_local ptr u64, other_01, !652
        v2189 = const u64 1, !639
        store v2189 to v2188, !652
        v2190 = get_local ptr u64, self_112, !653
        v2191 = load v2190, !652
        v2192 = get_local ptr u64, other_01, !654
        v2193 = load v2192, !652
        v2194 = cmp eq v2191 v2193, !652
        cbr v2194, fmt_86_block2(), fmt_86_block3(), !650

        fmt_86_block2():
        v2195 = get_local ptr string<16>, __const96
        v2196 = get_local ptr ptr {  }, _f_, !655
        v2197 = load v2196
        v2198 = get_local ptr string<16>, __anon_3100
        mem_copy_val v2198, v2195
        v2199 = ptr_to_int v2198 to u64, !656
        v2200 = get_local ptr { u64, u64 }, __anon_441, !656
        v2201 = const u64 0
        v2202 = get_elem_ptr v2200, ptr u64, v2201
        store v2199 to v2202, !656
        v2203 = const u64 1
        v2204 = get_elem_ptr v2200, ptr u64, v2203
        v2205 = const u64 16
        store v2205 to v2204, !656
        v2206 = get_local ptr slice, __anon_510, !656
        mem_copy_bytes v2206, v2200, 16
        v2207 = get_local ptr {  }, __tmp_arg167
        mem_copy_val v2207, v2197
        v2208 = get_local ptr slice, __tmp_arg168
        mem_copy_val v2208, v2206
        v2209 = call print_str_1(v2207, v2208)
        br fmt_86_block5()

        fmt_86_block3():
        v2210 = const u64 14757395258967588866, !640
        revert v2210, !640

        fmt_86_block5():
        v2211 = get_local ptr string<1>, __const97
        v2212 = get_local ptr {  }, f_81, !637
        v2213 = get_local ptr string<1>, __anon_300
        mem_copy_val v2213, v2211
        v2214 = ptr_to_int v2213 to u64, !637
        v2215 = get_local ptr { u64, u64 }, __anon_301, !637
        v2216 = const u64 0
        v2217 = get_elem_ptr v2215, ptr u64, v2216
        store v2214 to v2217, !637
        v2218 = const u64 1
        v2219 = get_elem_ptr v2215, ptr u64, v2218
        v2220 = const u64 1
        store v2220 to v2219, !637
        v2221 = get_local ptr slice, __anon_302, !637
        mem_copy_bytes v2221, v2215, 16
        v2222 = get_local ptr {  }, __tmp_arg169
        mem_copy_val v2222, v2212
        v2223 = get_local ptr slice, __tmp_arg170
        mem_copy_val v2223, v2221
        v2224 = call print_str_1(v2222, v2223)
        v2225 = get_local ptr {  }, f_81, !637
        v2226 = get_local ptr {  }, self_45, !637
        mem_copy_val v2226, v2225
        v2227 = get_global ptr u64, std::debug::STDERR, !657
        v2228 = load v2227, !637
        v2229 = get_local ptr u64, fd_39, !658
        store v2228 to v2229, !659
        v2230 = get_local ptr u64, fd_39, !660
        v2231 = load v2230, !661
        v2232 = asm(id: v58, fd: v2231) -> (), !662 {
            ecal   id fd zero zero, !113
        }
        v2233 = get_local ptr b256, __const98
        v2234 = get_local ptr { u64 }, arg_82
        v2235 = get_local ptr { u64 }, _________________________________________, !663
        mem_copy_val v2235, v2234
        v2236 = get_local ptr [b256; 2], __anon_07, !668
        v2237 = get_local ptr b256, __tmp_block_arg9
        mem_copy_val v2237, v2233
        v2238 = get_local ptr b256, __const99
        v2239 = const u64 0
        v2240 = get_elem_ptr v2236, ptr b256, v2239, !669
        mem_copy_val v2240, v2237
        v2241 = get_local ptr b256, __tmp_block_arg10
        mem_copy_val v2241, v2238
        v2242 = const u64 1
        v2243 = get_elem_ptr v2236, ptr b256, v2242, !669
        mem_copy_val v2243, v2241
        v2244 = get_local ptr { [b256; 2] }, __anon_1103, !671
        v2245 = const u64 0
        v2246 = get_elem_ptr v2244, ptr [b256; 2], v2245, !669
        mem_copy_val v2246, v2236
        v2247 = get_local ptr { [b256; 2] }, __tmp_block_arg11
        mem_copy_val v2247, v2244
        v2248 = get_local ptr string<46>, __const100
        v2249 = get_local ptr string<4>, __const101
        v2250 = get_local ptr string<4>, __const102
        v2251 = get_local ptr { [b256; 2] }, arg_84
        mem_copy_val v2251, v2247
        v2252 = get_local ptr {  }, __anon_303, !672
        v2253 = get_local ptr {  }, f_83
        mem_copy_val v2253, v2252
        v2254 = get_local ptr {  }, f_83, !672
        v2255 = get_local ptr string<46>, __anon_304
        mem_copy_val v2255, v2248
        v2256 = ptr_to_int v2255 to u64, !672
        v2257 = get_local ptr { u64, u64 }, __anon_305, !672
        v2258 = const u64 0
        v2259 = get_elem_ptr v2257, ptr u64, v2258
        store v2256 to v2259, !672
        v2260 = const u64 1
        v2261 = get_elem_ptr v2257, ptr u64, v2260
        v2262 = const u64 46
        store v2262 to v2261, !672
        v2263 = get_local ptr slice, __anon_306, !672
        mem_copy_bytes v2263, v2257, 16
        v2264 = get_local ptr {  }, __tmp_arg171
        mem_copy_val v2264, v2254
        v2265 = get_local ptr slice, __tmp_arg172
        mem_copy_val v2265, v2263
        v2266 = call print_str_1(v2264, v2265)
        v2267 = get_local ptr { [b256; 2] }, arg_84
        v2268 = get_local ptr {  }, f_83
        v2269 = get_local ptr { [b256; 2] }, self_46
        mem_copy_val v2269, v2267
        v2270 = get_local ptr ptr {  }, _f_0
        store v2268 to v2270
        v2271 = get_local ptr ptr {  }, _f_0, !674
        v2272 = load v2271
        v2273 = get_local ptr string<4>, __anon_08
        mem_copy_val v2273, v2249
        v2274 = ptr_to_int v2273 to u64, !675
        v2275 = get_local ptr { u64, u64 }, __anon_1104, !675
        v2276 = const u64 0
        v2277 = get_elem_ptr v2275, ptr u64, v2276
        store v2274 to v2277, !675
        v2278 = const u64 1
        v2279 = get_elem_ptr v2275, ptr u64, v2278
        v2280 = const u64 4
        store v2280 to v2279, !675
        v2281 = get_local ptr slice, __anon_2103, !675
        mem_copy_bytes v2281, v2275, 16
        v2282 = get_local ptr {  }, __tmp_arg339
        mem_copy_val v2282, v2272
        v2283 = get_local ptr slice, __tmp_arg340
        mem_copy_val v2283, v2281
        v2284 = get_local ptr { {  }, bool }, __ret_val14
        v2285 = call debug_struct_77(v2282, v2283, v2284)
        v2286 = get_local ptr { {  }, bool }, __aggr_memcpy_08
        mem_copy_val v2286, v2285
        v2287 = get_local ptr string<4>, __anon_3101
        mem_copy_val v2287, v2250
        v2288 = ptr_to_int v2287 to u64, !676
        v2289 = get_local ptr { u64, u64 }, __anon_442, !676
        v2290 = const u64 0
        v2291 = get_elem_ptr v2289, ptr u64, v2290
        store v2288 to v2291, !676
        v2292 = const u64 1
        v2293 = get_elem_ptr v2289, ptr u64, v2292
        v2294 = const u64 4
        store v2294 to v2293, !676
        v2295 = get_local ptr slice, __anon_511, !676
        mem_copy_bytes v2295, v2289, 16
        v2296 = get_local ptr { [b256; 2] }, self_46, !677
        v2297 = const u64 0
        v2298 = get_elem_ptr v2296, ptr [b256; 2], v2297, !678
        v2299 = get_local ptr { {  }, bool }, type_fix
        mem_copy_val v2299, v2286
        v2300 = get_local ptr ptr { {  }, bool }, self_04, !681
        store v2299 to v2300, !681
        v2301 = get_local ptr slice, name_, !681
        mem_copy_val v2301, v2295
        v2302 = get_local ptr [b256; 2], value_0, !681
        mem_copy_val v2302, v2298
        v2303 = get_local ptr ptr { {  }, bool }, self_04, !683
        v2304 = load v2303, !681
        v2305 = const u64 1
        v2306 = get_elem_ptr v2304, ptr bool, v2305, !685
        v2307 = load v2306, !681
        cbr v2307, fmt_88_field_89_block0(), fmt_88_field_89_block2(), !687

        fmt_88_field_89_block0():
        v2308 = get_local ptr string<2>, __const103
        v2309 = get_local ptr ptr { {  }, bool }, self_04, !689
        v2310 = load v2309, !681
        v2311 = const u64 0
        v2312 = get_elem_ptr v2310, ptr {  }, v2311, !691
        v2313 = get_local ptr string<2>, __anon_001, !681
        mem_copy_val v2313, v2308
        v2314 = ptr_to_int v2313 to u64, !693
        v2315 = get_local ptr { u64, u64 }, __anon_1011, !694
        v2316 = const u64 0
        v2317 = get_elem_ptr v2315, ptr u64, v2316, !681
        store v2314 to v2317, !695
        v2318 = const u64 1
        v2319 = get_elem_ptr v2315, ptr u64, v2318, !681
        v2320 = const u64 2
        store v2320 to v2319, !696
        v2321 = get_local ptr slice, __anon_2011, !697
        mem_copy_bytes v2321, v2315, 16, !681
        v2322 = get_local ptr {  }, __tmp_arg173
        mem_copy_val v2322, v2312
        v2323 = get_local ptr slice, __tmp_arg174
        mem_copy_val v2323, v2321
        v2324 = call print_str_1(v2322, v2323)
        br fmt_88_field_89_block2(), !681

        fmt_88_field_89_block2():
        v2325 = get_local ptr string<2>, __const104
        v2326 = get_local ptr ptr { {  }, bool }, self_04, !699
        v2327 = load v2326, !681
        v2328 = const u64 0
        v2329 = get_elem_ptr v2327, ptr {  }, v2328, !700
        v2330 = get_local ptr slice, name_, !702
        v2331 = get_local ptr {  }, __tmp_arg175
        mem_copy_val v2331, v2329
        v2332 = get_local ptr slice, __tmp_arg176
        mem_copy_val v2332, v2330
        v2333 = call print_str_1(v2331, v2332)
        v2334 = get_local ptr ptr { {  }, bool }, self_04, !704
        v2335 = load v2334, !681
        v2336 = const u64 0
        v2337 = get_elem_ptr v2335, ptr {  }, v2336, !705
        v2338 = get_local ptr string<2>, __anon_3010, !681
        mem_copy_val v2338, v2325
        v2339 = ptr_to_int v2338 to u64, !707
        v2340 = get_local ptr { u64, u64 }, __anon_4010, !708
        v2341 = const u64 0
        v2342 = get_elem_ptr v2340, ptr u64, v2341, !681
        store v2339 to v2342, !709
        v2343 = const u64 1
        v2344 = get_elem_ptr v2340, ptr u64, v2343, !681
        v2345 = const u64 2
        store v2345 to v2344, !710
        v2346 = get_local ptr slice, __anon_500, !711
        mem_copy_bytes v2346, v2340, 16, !681
        v2347 = get_local ptr {  }, __tmp_arg177
        mem_copy_val v2347, v2337
        v2348 = get_local ptr slice, __tmp_arg178
        mem_copy_val v2348, v2346
        v2349 = call print_str_1(v2347, v2348)
        v2350 = get_local ptr [b256; 2], value_0, !713
        v2351 = get_local ptr ptr { {  }, bool }, self_04, !715
        v2352 = load v2351, !681
        v2353 = const u64 0
        v2354 = get_elem_ptr v2352, ptr {  }, v2353, !716
        v2355 = get_local ptr [b256; 2], self_000, !719
        mem_copy_val v2355, v2350
        v2356 = get_local ptr ptr {  }, f_8, !720
        store v2354 to v2356, !721
        v2357 = get_local ptr ptr {  }, f_8, !722
        v2358 = load v2357, !723
        v2359 = get_local ptr {  }, __tmp_arg336
        mem_copy_val v2359, v2358
        v2360 = get_local ptr { {  }, bool }, __ret_val9
        v2361 = call debug_list_68(v2359, v2360)
        v2362 = get_local ptr { {  }, bool }, __aggr_memcpy_09
        mem_copy_val v2362, v2361
        v2363 = get_local ptr { {  }, bool }, f__2, !724
        mem_copy_val v2363, v2362
        v2364 = get_local ptr u64, i1, !725
        v2365 = const u64 0, !485
        store v2365 to v2364, !726
        br fmt_88_field_89_fmt_90_while(), !727

        fmt_88_field_89_fmt_90_while():
        v2366 = get_local ptr u64, i1, !728
        v2367 = get_local ptr u64, self_0000, !729
        mem_copy_val v2367, v2366
        v2368 = get_local ptr u64, other_3, !730
        v2369 = const u64 2, !490
        store v2369 to v2368, !731
        v2370 = get_local ptr u64, self_0000, !732
        v2371 = load v2370, !733
        v2372 = get_local ptr u64, other_3, !734
        v2373 = load v2372, !735
        v2374 = cmp lt v2371 v2373, !736
        cbr v2374, fmt_88_field_89_fmt_90_while_body(), fmt_88_field_89_fmt_90_end_while(), !737

        fmt_88_field_89_fmt_90_while_body():
        v2375 = get_local ptr { {  }, bool }, f__2, !738
        v2376 = get_local ptr [b256; 2], self_000, !739
        v2377 = get_local ptr u64, i1, !740
        v2378 = load v2377, !741
        v2379 = get_elem_ptr v2376, ptr b256, v2378, !742
        v2380 = get_local ptr ptr { {  }, bool }, self_113, !745
        store v2375 to v2380, !746
        v2381 = get_local ptr b256, value_00, !747
        mem_copy_val v2381, v2379
        v2382 = get_local ptr ptr { {  }, bool }, self_113, !749
        v2383 = load v2382, !750
        v2384 = const u64 1
        v2385 = get_elem_ptr v2383, ptr bool, v2384, !752
        v2386 = load v2385, !753
        cbr v2386, fmt_88_field_89_fmt_90_entry_91_block0(), fmt_88_field_89_fmt_90_entry_91_block2(), !755

        fmt_88_field_89_fmt_90_entry_91_block0():
        v2387 = get_local ptr string<2>, __const105
        v2388 = get_local ptr ptr { {  }, bool }, self_113, !757
        v2389 = load v2388, !758
        v2390 = const u64 0
        v2391 = get_elem_ptr v2389, ptr {  }, v2390, !760
        v2392 = get_local ptr string<2>, __anon_0000, !761
        mem_copy_val v2392, v2387
        v2393 = ptr_to_int v2392 to u64, !763
        v2394 = get_local ptr { u64, u64 }, __anon_1000, !764
        v2395 = const u64 0
        v2396 = get_elem_ptr v2394, ptr u64, v2395, !765
        store v2393 to v2396, !766
        v2397 = const u64 1
        v2398 = get_elem_ptr v2394, ptr u64, v2397, !767
        v2399 = const u64 2
        store v2399 to v2398, !768
        v2400 = get_local ptr slice, __anon_2000, !769
        mem_copy_bytes v2400, v2394, 16, !770
        v2401 = get_local ptr {  }, __tmp_arg179
        mem_copy_val v2401, v2391
        v2402 = get_local ptr slice, __tmp_arg180
        mem_copy_val v2402, v2400
        v2403 = call print_str_1(v2401, v2402)
        br fmt_88_field_89_fmt_90_entry_91_block2(), !771

        fmt_88_field_89_fmt_90_entry_91_block2():
        v2404 = get_local ptr b256, value_00, !773
        v2405 = get_local ptr ptr { {  }, bool }, self_113, !775
        v2406 = load v2405, !776
        v2407 = const u64 0
        v2408 = get_elem_ptr v2406, ptr {  }, v2407, !777
        v2409 = get_local ptr b256, __tmp_arg316
        mem_copy_val v2409, v2404
        v2410 = call fmt_52(v2409, v2408)
        v2411 = get_local ptr ptr { {  }, bool }, self_113, !779
        v2412 = load v2411, !780
        v2413 = const u64 1
        v2414 = get_elem_ptr v2412, ptr bool, v2413, !781
        v2415 = const bool true, !782
        store v2415 to v2414, !783
        v2416 = get_local ptr ptr { {  }, bool }, self_113, !785
        v2417 = load v2416, !786
        v2418 = get_local ptr { {  }, bool }, __tmp_block_arg12
        mem_copy_val v2418, v2417
        v2419 = get_local ptr { {  }, bool }, f__2, !787
        mem_copy_val v2419, v2418
        v2420 = get_local ptr u64, i1, !788
        v2421 = get_local ptr u64, self_211, !789
        mem_copy_val v2421, v2420
        v2422 = get_local ptr u64, other_02, !790
        v2423 = const u64 1, !505
        store v2423 to v2422, !791
        v2424 = get_local ptr u64, self_211, !792
        v2425 = load v2424, !793
        v2426 = get_local ptr u64, other_02, !794
        v2427 = load v2426, !795
        v2428 = add v2425, v2427, !796
        v2429 = get_local ptr u64, i1, !797
        store v2428 to v2429, !798
        br fmt_88_field_89_fmt_90_while(), !799

        fmt_88_field_89_fmt_90_end_while():
        v2430 = get_local ptr { {  }, bool }, f__2, !800
        v2431 = call finish_72(v2430), !801
        v2432 = get_local ptr ptr { {  }, bool }, self_04, !803
        v2433 = load v2432, !681
        v2434 = const u64 1
        v2435 = get_elem_ptr v2433, ptr bool, v2434, !804
        v2436 = const bool true, !805
        store v2436 to v2435, !806
        v2437 = get_local ptr ptr { {  }, bool }, self_04, !808
        v2438 = load v2437, !681
        v2439 = get_local ptr { {  }, bool }, __tmp_block_arg13
        mem_copy_val v2439, v2438
        v2440 = get_local ptr { {  }, bool }, type_fix0
        mem_copy_val v2440, v2439
        v2441 = call finish_76(v2440), !811
        v2442 = get_local ptr string<1>, __const106
        v2443 = get_local ptr {  }, f_83, !672
        v2444 = get_local ptr string<1>, __anon_307
        mem_copy_val v2444, v2442
        v2445 = ptr_to_int v2444 to u64, !672
        v2446 = get_local ptr { u64, u64 }, __anon_308, !672
        v2447 = const u64 0
        v2448 = get_elem_ptr v2446, ptr u64, v2447
        store v2445 to v2448, !672
        v2449 = const u64 1
        v2450 = get_elem_ptr v2446, ptr u64, v2449
        v2451 = const u64 1
        store v2451 to v2450, !672
        v2452 = get_local ptr slice, __anon_309, !672
        mem_copy_bytes v2452, v2446, 16
        v2453 = get_local ptr {  }, __tmp_arg181
        mem_copy_val v2453, v2443
        v2454 = get_local ptr slice, __tmp_arg182
        mem_copy_val v2454, v2452
        v2455 = call print_str_1(v2453, v2454)
        v2456 = get_local ptr {  }, f_83, !672
        v2457 = get_local ptr {  }, self_47, !672
        mem_copy_val v2457, v2456
        v2458 = get_global ptr u64, std::debug::STDERR, !812
        v2459 = load v2458, !672
        v2460 = get_local ptr u64, fd_40, !813
        store v2459 to v2460, !814
        v2461 = get_local ptr u64, fd_40, !815
        v2462 = load v2461, !816
        v2463 = asm(id: v58, fd: v2462) -> (), !817 {
            ecal   id fd zero zero, !113
        }
        v2464 = get_local ptr string<69>, __const107
        v2465 = get_local ptr { [b256; 2] }, arg_84
        v2466 = get_local ptr { [b256; 2] }, __________________________________________, !818
        mem_copy_val v2466, v2465
        v2467 = get_local ptr { u64 }, __anon_310, !820
        v2468 = const u64 0
        v2469 = get_elem_ptr v2467, ptr u64, v2468, !820
        v2470 = const u64 0, !820
        store v2470 to v2469, !820
        v2471 = get_local ptr { u64 }, arg_86
        mem_copy_val v2471, v2467
        v2472 = get_local ptr {  }, __anon_311, !821
        v2473 = get_local ptr {  }, f_85
        mem_copy_val v2473, v2472
        v2474 = get_local ptr {  }, f_85, !821
        v2475 = get_local ptr string<69>, __anon_312
        mem_copy_val v2475, v2464
        v2476 = ptr_to_int v2475 to u64, !821
        v2477 = get_local ptr { u64, u64 }, __anon_313, !821
        v2478 = const u64 0
        v2479 = get_elem_ptr v2477, ptr u64, v2478
        store v2476 to v2479, !821
        v2480 = const u64 1
        v2481 = get_elem_ptr v2477, ptr u64, v2480
        v2482 = const u64 69
        store v2482 to v2481, !821
        v2483 = get_local ptr slice, __anon_314, !821
        mem_copy_bytes v2483, v2477, 16
        v2484 = get_local ptr {  }, __tmp_arg183
        mem_copy_val v2484, v2474
        v2485 = get_local ptr slice, __tmp_arg184
        mem_copy_val v2485, v2483
        v2486 = call print_str_1(v2484, v2485)
        v2487 = get_local ptr { u64 }, arg_86
        v2488 = get_local ptr {  }, f_85
        v2489 = get_local ptr { u64 }, self_48
        mem_copy_val v2489, v2487
        v2490 = get_local ptr ptr {  }, _f_1
        store v2488 to v2490
        v2491 = get_local ptr { u64 }, self_48, !823
        v2492 = get_local ptr { u64 }, __matched_value_10, !824
        mem_copy_val v2492, v2491
        v2493 = get_local ptr { u64 }, __matched_value_10, !823
        v2494 = const u64 0
        v2495 = get_elem_ptr v2493, ptr u64, v2494, !823
        v2496 = get_local ptr u64, self_05, !827
        mem_copy_val v2496, v2495
        v2497 = get_local ptr u64, other_4, !827
        v2498 = const u64 0, !823
        store v2498 to v2497, !827
        v2499 = get_local ptr u64, self_05, !828
        v2500 = load v2499, !827
        v2501 = get_local ptr u64, other_4, !829
        v2502 = load v2501, !827
        v2503 = cmp eq v2500 v2502, !827
        cbr v2503, fmt_92_block0(), fmt_92_block1(), !825

        fmt_92_block0():
        v2504 = get_local ptr string<18>, __const108
        v2505 = get_local ptr ptr {  }, _f_1, !830
        v2506 = load v2505
        v2507 = get_local ptr string<18>, __anon_09
        mem_copy_val v2507, v2504
        v2508 = ptr_to_int v2507 to u64, !831
        v2509 = get_local ptr { u64, u64 }, __anon_1105, !831
        v2510 = const u64 0
        v2511 = get_elem_ptr v2509, ptr u64, v2510
        store v2508 to v2511, !831
        v2512 = const u64 1
        v2513 = get_elem_ptr v2509, ptr u64, v2512
        v2514 = const u64 18
        store v2514 to v2513, !831
        v2515 = get_local ptr slice, __anon_2104, !831
        mem_copy_bytes v2515, v2509, 16
        v2516 = get_local ptr {  }, __tmp_arg185
        mem_copy_val v2516, v2506
        v2517 = get_local ptr slice, __tmp_arg186
        mem_copy_val v2517, v2515
        v2518 = call print_str_1(v2516, v2517)
        v2519 = get_local ptr string<1>, __const109
        v2520 = get_local ptr {  }, f_85, !821
        v2521 = get_local ptr string<1>, __anon_315
        mem_copy_val v2521, v2519
        v2522 = ptr_to_int v2521 to u64, !821
        v2523 = get_local ptr { u64, u64 }, __anon_316, !821
        v2524 = const u64 0
        v2525 = get_elem_ptr v2523, ptr u64, v2524
        store v2522 to v2525, !821
        v2526 = const u64 1
        v2527 = get_elem_ptr v2523, ptr u64, v2526
        v2528 = const u64 1
        store v2528 to v2527, !821
        v2529 = get_local ptr slice, __anon_317, !821
        mem_copy_bytes v2529, v2523, 16
        v2530 = get_local ptr {  }, __tmp_arg187
        mem_copy_val v2530, v2520
        v2531 = get_local ptr slice, __tmp_arg188
        mem_copy_val v2531, v2529
        v2532 = call print_str_1(v2530, v2531)
        v2533 = get_local ptr {  }, f_85, !821
        v2534 = get_local ptr {  }, self_49, !821
        mem_copy_val v2534, v2533
        v2535 = get_global ptr u64, std::debug::STDERR, !832
        v2536 = load v2535, !821
        v2537 = get_local ptr u64, fd_41, !833
        store v2536 to v2537, !834
        v2538 = get_local ptr u64, fd_41, !835
        v2539 = load v2538, !836
        v2540 = asm(id: v58, fd: v2539) -> (), !837 {
            ecal   id fd zero zero, !113
        }
        v2541 = get_local ptr { u64 }, arg_86
        v2542 = get_local ptr { u64 }, ___________________________________________, !838
        mem_copy_val v2542, v2541
        v2543 = get_local ptr u64, count_, !846
        v2544 = const u64 0, !847
        store v2544 to v2543, !848
        v2545 = get_local ptr u64, count_, !851
        v2546 = load v2545, !852
        v2547 = asm(size: v2546) -> u64 hp, !854 {
            aloc   size, !855
        }
        v2548 = get_local ptr { u64, u64 }, __anon_002, !857
        v2549 = const u64 0
        v2550 = get_elem_ptr v2548, ptr u64, v2549, !858
        store v2547 to v2550, !859
        v2551 = const u64 1
        v2552 = get_elem_ptr v2548, ptr u64, v2551, !860
        v2553 = const u64 0, !861
        store v2553 to v2552, !862
        v2554 = get_local ptr { u64, u64 }, __tmp_block_arg14
        mem_copy_val v2554, v2548
        v2555 = get_local ptr { { u64, u64 }, u64 }, __anon_010, !864
        v2556 = const u64 0
        v2557 = get_elem_ptr v2555, ptr { u64, u64 }, v2556, !865
        mem_copy_val v2557, v2554
        v2558 = const u64 1
        v2559 = get_elem_ptr v2555, ptr u64, v2558, !865
        v2560 = const u64 0, !866
        store v2560 to v2559, !867
        v2561 = get_local ptr { { u64, u64 }, u64 }, __tmp_block_arg15
        mem_copy_val v2561, v2555
        v2562 = get_local ptr string<139>, __const110
        v2563 = get_local ptr { { u64, u64 }, u64 }, bytes, !868
        mem_copy_val v2563, v2561
        v2564 = get_local ptr { { u64, u64 }, u64 }, bytes, !869
        v2565 = const u8 1, !870
        v2566 = call push_96(v2564, v2565), !873
        v2567 = get_local ptr { { u64, u64 }, u64 }, bytes, !874
        v2568 = const u8 2, !875
        v2569 = call push_96(v2567, v2568), !878
        v2570 = get_local ptr { { u64, u64 }, u64 }, bytes, !879
        v2571 = const u8 3, !880
        v2572 = call push_96(v2570, v2571), !883
        v2573 = get_local ptr { { u64, u64 }, u64 }, bytes, !884
        v2574 = get_local ptr { { u64, u64 }, u64 }, arg_88
        mem_copy_val v2574, v2573
        v2575 = get_local ptr {  }, __anon_318, !885
        v2576 = get_local ptr {  }, f_87
        mem_copy_val v2576, v2575
        v2577 = get_local ptr {  }, f_87, !885
        v2578 = get_local ptr string<139>, __anon_319
        mem_copy_val v2578, v2562
        v2579 = ptr_to_int v2578 to u64, !885
        v2580 = get_local ptr { u64, u64 }, __anon_320, !885
        v2581 = const u64 0
        v2582 = get_elem_ptr v2580, ptr u64, v2581
        store v2579 to v2582, !885
        v2583 = const u64 1
        v2584 = get_elem_ptr v2580, ptr u64, v2583
        v2585 = const u64 139
        store v2585 to v2584, !885
        v2586 = get_local ptr slice, __anon_321, !885
        mem_copy_bytes v2586, v2580, 16
        v2587 = get_local ptr {  }, __tmp_arg189
        mem_copy_val v2587, v2577
        v2588 = get_local ptr slice, __tmp_arg190
        mem_copy_val v2588, v2586
        v2589 = call print_str_1(v2587, v2588)
        v2590 = get_local ptr { { u64, u64 }, u64 }, arg_88
        v2591 = get_local ptr {  }, f_87
        v2592 = get_local ptr { { u64, u64 }, u64 }, self_50
        mem_copy_val v2592, v2590
        v2593 = get_local ptr ptr {  }, f_10
        store v2591 to v2593
        v2594 = get_local ptr ptr {  }, f_10, !886
        v2595 = load v2594
        v2596 = get_local ptr {  }, __tmp_arg337
        mem_copy_val v2596, v2595
        v2597 = get_local ptr { {  }, bool }, __ret_val10
        v2598 = call debug_list_68(v2596, v2597)
        v2599 = get_local ptr { {  }, bool }, __aggr_memcpy_010
        mem_copy_val v2599, v2598
        v2600 = get_local ptr { {  }, bool }, l, !887
        mem_copy_val v2600, v2599
        v2601 = get_local ptr { { u64, u64 }, u64 }, self_50, !888
        v2602 = get_local ptr { { u64, u64 }, u64 }, self_06, !891
        mem_copy_val v2602, v2601
        v2603 = get_local ptr { { u64, u64 }, u64 }, self_06, !893
        v2604 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __anon_011, !895
        v2605 = const u64 0
        v2606 = get_elem_ptr v2604, ptr { { u64, u64 }, u64 }, v2605, !891
        mem_copy_val v2606, v2603
        v2607 = const u64 1
        v2608 = get_elem_ptr v2604, ptr u64, v2607, !891
        v2609 = const u64 0, !896
        store v2609 to v2608, !897
        v2610 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __tmp_block_arg16
        mem_copy_val v2610, v2604
        v2611 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __for_iterable_2
        mem_copy_val v2611, v2610
        br fmt_103_while()

        fmt_92_block1():
        v2612 = const u64 14757395258967588866, !824
        revert v2612, !824

        fmt_103_while():
        v2613 = const bool true
        cbr v2613, fmt_103_while_body(), fmt_103_end_while()

        fmt_103_while_body():
        v2614 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __for_iterable_2
        v2615 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !899
        store v2614 to v2615, !899
        v2616 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !901
        v2617 = load v2616, !899
        v2618 = const u64 1
        v2619 = get_elem_ptr v2617, ptr u64, v2618, !903
        v2620 = load v2619, !899
        v2621 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !905
        v2622 = load v2621, !899
        v2623 = const u64 0
        v2624 = get_elem_ptr v2622, ptr { { u64, u64 }, u64 }, v2623, !907
        v2625 = const u64 1
        v2626 = get_elem_ptr v2624, ptr u64, v2625, !909
        v2627 = load v2626, !899
        v2628 = call ge_106(v2620, v2627), !912
        cbr v2628, fmt_103_next_105_block0(), fmt_103_next_105_block1(), !913

        fmt_103_next_105_block0():
        v2629 = get_local ptr { u64, ( () | u8 ) }, __anon_003, !916
        v2630 = const u64 0
        v2631 = get_elem_ptr v2629, ptr u64, v2630, !917
        v2632 = const u64 0, !915
        store v2632 to v2631, !918
        v2633 = get_local ptr { u64, ( () | u8 ) }, __tmp_block_arg17
        mem_copy_val v2633, v2629
        br fmt_103_block4(v2633), !920

        fmt_103_next_105_block1():
        v2634 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !922
        v2635 = load v2634, !899
        v2636 = const u64 1
        v2637 = get_elem_ptr v2635, ptr u64, v2636, !923
        v2638 = get_local ptr u64, self_001, !926
        mem_copy_val v2638, v2637
        v2639 = get_local ptr u64, other_5, !927
        v2640 = const u64 1, !928
        store v2640 to v2639, !929
        v2641 = get_local ptr u64, self_001, !930
        v2642 = load v2641, !931
        v2643 = get_local ptr u64, other_5, !932
        v2644 = load v2643, !933
        v2645 = add v2642, v2644, !934
        v2646 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !935
        v2647 = load v2646, !899
        v2648 = const u64 1
        v2649 = get_elem_ptr v2647, ptr u64, v2648, !936
        store v2645 to v2649, !937
        v2650 = get_local ptr { u64, ( () | u8 ) }, __anon_1106, !938
        v2651 = const u64 0
        v2652 = get_elem_ptr v2650, ptr u64, v2651, !939
        v2653 = const u64 1, !915
        store v2653 to v2652, !940
        v2654 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !942
        v2655 = load v2654, !899
        v2656 = const u64 0
        v2657 = get_elem_ptr v2655, ptr { { u64, u64 }, u64 }, v2656, !943
        v2658 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_114, !945
        v2659 = load v2658, !899
        v2660 = const u64 1
        v2661 = get_elem_ptr v2659, ptr u64, v2660, !946
        v2662 = get_local ptr u64, self_100, !949
        mem_copy_val v2662, v2661
        v2663 = get_local ptr u64, other_03, !950
        v2664 = const u64 1, !951
        store v2664 to v2663, !952
        v2665 = get_local ptr u64, self_100, !954
        v2666 = load v2665, !955
        v2667 = get_local ptr u64, other_03, !957
        v2668 = load v2667, !958
        v2669 = sub v2666, v2668, !959
        v2670 = get_local ptr { { u64, u64 }, u64 }, self_212, !962
        mem_copy_val v2670, v2657
        v2671 = get_local ptr u64, index_, !963
        store v2669 to v2671, !964
        v2672 = get_local ptr { { u64, u64 }, u64 }, self_212, !966
        v2673 = const u64 0
        v2674 = get_elem_ptr v2672, ptr { u64, u64 }, v2673, !968
        v2675 = const u64 0
        v2676 = get_elem_ptr v2674, ptr u64, v2675, !970
        v2677 = get_local ptr u64, index_, !972
        v2678 = get_local ptr u64, self_0001, !975
        mem_copy_val v2678, v2676
        v2679 = get_local ptr u64, offset_, !976
        mem_copy_val v2679, v2677
        v2680 = get_local ptr u64, self_0001, !979
        v2681 = load v2680, !980
        v2682 = get_local ptr u64, offset_, !982
        v2683 = load v2682, !983
        v2684 = asm(ptr: v2681, offset: v2683, new) -> u64 new, !985 {
            add    new ptr offset, !986
        }
        v2685 = get_local ptr u64, self_1000, !989
        store v2684 to v2685, !990
        v2686 = get_local ptr u64, self_1000, !992
        v2687 = load v2686, !993
        v2688 = asm(r1: v2687, r2) -> u8 r2, !995 {
            lb     r2 r1 i0, !996
        }
        v2689 = const u64 1
        v2690 = const u64 1
        v2691 = get_elem_ptr v2650, ptr u8, v2689, v2690, !997
        store v2688 to v2691, !998
        v2692 = get_local ptr { u64, ( () | u8 ) }, __tmp_block_arg17
        mem_copy_val v2692, v2650
        br fmt_103_block4(v2692), !899

        fmt_103_block4(v2693: ptr { u64, ( () | u8 ) }):
        v2694 = get_local ptr { u64, ( () | u8 ) }, __for_value_opt_1
        mem_copy_val v2694, v2693
        v2695 = get_local ptr { u64, ( () | u8 ) }, __for_value_opt_1
        v2696 = get_local ptr { u64, ( () | u8 ) }, self_310
        mem_copy_val v2696, v2695
        v2697 = get_local ptr { u64, ( () | u8 ) }, self_310, !999
        v2698 = get_local ptr { u64, ( () | u8 ) }, __matched_value_3, !1000
        mem_copy_val v2698, v2697
        v2699 = get_local ptr { u64, ( () | u8 ) }, __matched_value_3, !999
        v2700 = const u64 0
        v2701 = get_elem_ptr v2699, ptr u64, v2700, !999
        v2702 = get_local ptr u64, self_010, !1003
        mem_copy_val v2702, v2701
        v2703 = get_local ptr u64, other_10, !1003
        v2704 = const u64 1, !999
        store v2704 to v2703, !1003
        v2705 = get_local ptr u64, self_010, !1004
        v2706 = load v2705, !1003
        v2707 = get_local ptr u64, other_10, !1005
        v2708 = load v2707, !1003
        v2709 = cmp eq v2706 v2708, !1003
        v2710 = const bool false, !1006
        cbr v2709, fmt_103_is_none_109_block2(v2710), fmt_103_is_none_109_block1(), !1001

        fmt_103_is_none_109_block1():
        v2711 = const bool true, !1007
        br fmt_103_is_none_109_block2(v2711)

        fmt_103_is_none_109_block2(v2712: bool):
        cbr v2712, fmt_103_end_while(), fmt_103_block1()

        fmt_103_block1():
        v2713 = get_local ptr { u64, ( () | u8 ) }, __for_value_opt_1
        v2714 = get_local ptr { u64, ( () | u8 ) }, self_410, !1008
        mem_copy_val v2714, v2713
        v2715 = get_local ptr { u64, ( () | u8 ) }, self_410, !1010
        v2716 = get_local ptr { u64, ( () | u8 ) }, __matched_value_4, !1012
        mem_copy_val v2716, v2715
        v2717 = get_local ptr { u64, ( () | u8 ) }, __matched_value_4, !1013
        v2718 = const u64 0
        v2719 = get_elem_ptr v2717, ptr u64, v2718, !1014
        v2720 = get_local ptr u64, self_020, !1017
        mem_copy_val v2720, v2719
        v2721 = get_local ptr u64, other_20, !1018
        v2722 = const u64 1, !1009
        store v2722 to v2721, !1019
        v2723 = get_local ptr u64, self_020, !1020
        v2724 = load v2723, !1021
        v2725 = get_local ptr u64, other_20, !1022
        v2726 = load v2725, !1023
        v2727 = cmp eq v2724 v2726, !1024
        cbr v2727, fmt_103_unwrap_110_block0(), fmt_103_unwrap_110_block1(), !1025

        fmt_103_unwrap_110_block0():
        v2728 = get_local ptr { u64, ( () | u8 ) }, __matched_value_4, !1026
        v2729 = const u64 1
        v2730 = const u64 1
        v2731 = get_elem_ptr v2728, ptr u8, v2729, v2730, !1008
        v2732 = get_local ptr u8, v0, !1028
        mem_copy_val v2732, v2731
        v2733 = get_local ptr u8, v0, !1030
        v2734 = load v2733, !1008
        v2735 = get_local ptr u8, elem, !1031
        store v2734 to v2735, !1031
        v2736 = get_local ptr { {  }, bool }, l, !1032
        v2737 = get_local ptr u8, elem, !1033
        v2738 = load v2737
        v2739 = get_local ptr { {  }, bool }, __ret_val13
        v2740 = call entry_70(v2736, v2738, v2739)
        v2741 = get_local ptr { {  }, bool }, __aggr_memcpy_011
        mem_copy_val v2741, v2740
        v2742 = get_local ptr { {  }, bool }, _1, !1034
        mem_copy_val v2742, v2741
        br fmt_103_while()

        fmt_103_unwrap_110_block1():
        v2743 = get_local ptr u64, code_, !1037
        v2744 = const u64 0, !1038
        store v2744 to v2743, !1039
        v2745 = get_local ptr u64, code_, !1042
        v2746 = load v2745, !1043
        revert v2746, !1045

        fmt_103_end_while():
        v2747 = get_local ptr { {  }, bool }, l, !1046
        v2748 = call finish_72(v2747), !1049
        v2749 = get_local ptr string<1>, __const111
        v2750 = get_local ptr {  }, f_87, !885
        v2751 = get_local ptr string<1>, __anon_322
        mem_copy_val v2751, v2749
        v2752 = ptr_to_int v2751 to u64, !885
        v2753 = get_local ptr { u64, u64 }, __anon_323, !885
        v2754 = const u64 0
        v2755 = get_elem_ptr v2753, ptr u64, v2754
        store v2752 to v2755, !885
        v2756 = const u64 1
        v2757 = get_elem_ptr v2753, ptr u64, v2756
        v2758 = const u64 1
        store v2758 to v2757, !885
        v2759 = get_local ptr slice, __anon_324, !885
        mem_copy_bytes v2759, v2753, 16
        v2760 = get_local ptr {  }, __tmp_arg191
        mem_copy_val v2760, v2750
        v2761 = get_local ptr slice, __tmp_arg192
        mem_copy_val v2761, v2759
        v2762 = call print_str_1(v2760, v2761)
        v2763 = get_local ptr {  }, f_87, !885
        v2764 = get_local ptr {  }, self_51, !885
        mem_copy_val v2764, v2763
        v2765 = get_global ptr u64, std::debug::STDERR, !1050
        v2766 = load v2765, !885
        v2767 = get_local ptr u64, fd_42, !1051
        store v2766 to v2767, !1052
        v2768 = get_local ptr u64, fd_42, !1053
        v2769 = load v2768, !1054
        v2770 = asm(id: v58, fd: v2769) -> (), !1055 {
            ecal   id fd zero zero, !113
        }
        v2771 = get_local ptr b256, __const112
        v2772 = get_local ptr { { u64, u64 }, u64 }, arg_88
        v2773 = get_local ptr { { u64, u64 }, u64 }, ____________________________________________, !1056
        mem_copy_val v2773, v2772
        v2774 = get_local ptr b256, __tmp_block_arg18
        mem_copy_val v2774, v2771
        v2775 = get_local ptr { b256 }, __anon_012, !1061
        v2776 = const u64 0
        v2777 = get_elem_ptr v2775, ptr b256, v2776, !1062
        mem_copy_val v2777, v2774
        v2778 = get_local ptr { b256 }, __tmp_block_arg19
        mem_copy_val v2778, v2775
        v2779 = get_local ptr string<59>, __const113
        v2780 = get_local ptr string<1>, __const114
        v2781 = get_local ptr { b256 }, arg_90
        mem_copy_val v2781, v2778
        v2782 = get_local ptr {  }, __anon_325, !1063
        v2783 = get_local ptr {  }, f_89
        mem_copy_val v2783, v2782
        v2784 = get_local ptr {  }, f_89, !1063
        v2785 = get_local ptr string<59>, __anon_326
        mem_copy_val v2785, v2779
        v2786 = ptr_to_int v2785 to u64, !1063
        v2787 = get_local ptr { u64, u64 }, __anon_327, !1063
        v2788 = const u64 0
        v2789 = get_elem_ptr v2787, ptr u64, v2788
        store v2786 to v2789, !1063
        v2790 = const u64 1
        v2791 = get_elem_ptr v2787, ptr u64, v2790
        v2792 = const u64 59
        store v2792 to v2791, !1063
        v2793 = get_local ptr slice, __anon_328, !1063
        mem_copy_bytes v2793, v2787, 16
        v2794 = get_local ptr {  }, __tmp_arg193
        mem_copy_val v2794, v2784
        v2795 = get_local ptr slice, __tmp_arg194
        mem_copy_val v2795, v2793
        v2796 = call print_str_1(v2794, v2795)
        v2797 = get_local ptr { b256 }, arg_90
        v2798 = get_local ptr {  }, f_89
        v2799 = get_local ptr { b256 }, __tmp_arg353
        mem_copy_val v2799, v2797
        v2800 = call fmt_113(v2799, v2798)
        v2801 = get_local ptr {  }, f_89, !1063
        v2802 = get_local ptr string<1>, __anon_329
        mem_copy_val v2802, v2780
        v2803 = ptr_to_int v2802 to u64, !1063
        v2804 = get_local ptr { u64, u64 }, __anon_330, !1063
        v2805 = const u64 0
        v2806 = get_elem_ptr v2804, ptr u64, v2805
        store v2803 to v2806, !1063
        v2807 = const u64 1
        v2808 = get_elem_ptr v2804, ptr u64, v2807
        v2809 = const u64 1
        store v2809 to v2808, !1063
        v2810 = get_local ptr slice, __anon_331, !1063
        mem_copy_bytes v2810, v2804, 16
        v2811 = get_local ptr {  }, __tmp_arg195
        mem_copy_val v2811, v2801
        v2812 = get_local ptr slice, __tmp_arg196
        mem_copy_val v2812, v2810
        v2813 = call print_str_1(v2811, v2812)
        v2814 = get_local ptr {  }, f_89, !1063
        v2815 = get_local ptr {  }, self_52, !1063
        mem_copy_val v2815, v2814
        v2816 = get_global ptr u64, std::debug::STDERR, !1064
        v2817 = load v2816, !1063
        v2818 = get_local ptr u64, fd_43, !1065
        store v2817 to v2818, !1066
        v2819 = get_local ptr u64, fd_43, !1067
        v2820 = load v2819, !1068
        v2821 = asm(id: v58, fd: v2820) -> (), !1069 {
            ecal   id fd zero zero, !113
        }
        v2822 = get_local ptr string<66>, __const115
        v2823 = get_local ptr { b256 }, arg_90
        v2824 = get_local ptr { b256 }, _____________________________________________, !1070
        mem_copy_val v2824, v2823
        v2825 = get_local ptr { u64 }, __anon_332, !1072
        v2826 = const u64 0
        v2827 = get_elem_ptr v2825, ptr u64, v2826, !1072
        v2828 = const u64 1, !1072
        store v2828 to v2827, !1072
        v2829 = get_local ptr { u64 }, arg_92
        mem_copy_val v2829, v2825
        v2830 = get_local ptr {  }, __anon_333, !1073
        v2831 = get_local ptr {  }, f_91
        mem_copy_val v2831, v2830
        v2832 = get_local ptr {  }, f_91, !1073
        v2833 = get_local ptr string<66>, __anon_334
        mem_copy_val v2833, v2822
        v2834 = ptr_to_int v2833 to u64, !1073
        v2835 = get_local ptr { u64, u64 }, __anon_335, !1073
        v2836 = const u64 0
        v2837 = get_elem_ptr v2835, ptr u64, v2836
        store v2834 to v2837, !1073
        v2838 = const u64 1
        v2839 = get_elem_ptr v2835, ptr u64, v2838
        v2840 = const u64 66
        store v2840 to v2839, !1073
        v2841 = get_local ptr slice, __anon_336, !1073
        mem_copy_bytes v2841, v2835, 16
        v2842 = get_local ptr {  }, __tmp_arg197
        mem_copy_val v2842, v2832
        v2843 = get_local ptr slice, __tmp_arg198
        mem_copy_val v2843, v2841
        v2844 = call print_str_1(v2842, v2843)
        v2845 = get_local ptr { u64 }, arg_92
        v2846 = get_local ptr {  }, f_91
        v2847 = get_local ptr { u64 }, self_53
        mem_copy_val v2847, v2845
        v2848 = get_local ptr ptr {  }, _f_2
        store v2846 to v2848
        v2849 = get_local ptr { u64 }, self_53, !1075
        v2850 = get_local ptr { u64 }, __matched_value_11, !1076
        mem_copy_val v2850, v2849
        v2851 = get_local ptr { u64 }, __matched_value_11, !1075
        v2852 = const u64 0
        v2853 = get_elem_ptr v2851, ptr u64, v2852, !1075
        v2854 = get_local ptr u64, self_07, !1079
        mem_copy_val v2854, v2853
        v2855 = get_local ptr u64, other_6, !1079
        v2856 = const u64 0, !1075
        store v2856 to v2855, !1079
        v2857 = get_local ptr u64, self_07, !1080
        v2858 = load v2857, !1079
        v2859 = get_local ptr u64, other_6, !1081
        v2860 = load v2859, !1079
        v2861 = cmp eq v2858 v2860, !1079
        cbr v2861, fmt_114_block0(), fmt_114_block1(), !1077

        fmt_114_block0():
        v2862 = get_local ptr string<22>, __const116
        v2863 = get_local ptr ptr {  }, _f_2, !1082
        v2864 = load v2863
        v2865 = get_local ptr string<22>, __anon_013
        mem_copy_val v2865, v2862
        v2866 = ptr_to_int v2865 to u64, !1083
        v2867 = get_local ptr { u64, u64 }, __anon_1107, !1083
        v2868 = const u64 0
        v2869 = get_elem_ptr v2867, ptr u64, v2868
        store v2866 to v2869, !1083
        v2870 = const u64 1
        v2871 = get_elem_ptr v2867, ptr u64, v2870
        v2872 = const u64 22
        store v2872 to v2871, !1083
        v2873 = get_local ptr slice, __anon_2105, !1083
        mem_copy_bytes v2873, v2867, 16
        v2874 = get_local ptr {  }, __tmp_arg199
        mem_copy_val v2874, v2864
        v2875 = get_local ptr slice, __tmp_arg200
        mem_copy_val v2875, v2873
        v2876 = call print_str_1(v2874, v2875)
        br fmt_114_block5()

        fmt_114_block1():
        v2877 = get_local ptr { u64 }, __matched_value_11, !1075
        v2878 = const u64 0
        v2879 = get_elem_ptr v2877, ptr u64, v2878, !1075
        v2880 = get_local ptr u64, self_115, !1086
        mem_copy_val v2880, v2879
        v2881 = get_local ptr u64, other_04, !1086
        v2882 = const u64 1, !1075
        store v2882 to v2881, !1086
        v2883 = get_local ptr u64, self_115, !1087
        v2884 = load v2883, !1086
        v2885 = get_local ptr u64, other_04, !1088
        v2886 = load v2885, !1086
        v2887 = cmp eq v2884 v2886, !1086
        cbr v2887, fmt_114_block2(), fmt_114_block3(), !1084

        fmt_114_block2():
        v2888 = get_local ptr string<17>, __const117
        v2889 = get_local ptr ptr {  }, _f_2, !1089
        v2890 = load v2889
        v2891 = get_local ptr string<17>, __anon_3102
        mem_copy_val v2891, v2888
        v2892 = ptr_to_int v2891 to u64, !1090
        v2893 = get_local ptr { u64, u64 }, __anon_443, !1090
        v2894 = const u64 0
        v2895 = get_elem_ptr v2893, ptr u64, v2894
        store v2892 to v2895, !1090
        v2896 = const u64 1
        v2897 = get_elem_ptr v2893, ptr u64, v2896
        v2898 = const u64 17
        store v2898 to v2897, !1090
        v2899 = get_local ptr slice, __anon_512, !1090
        mem_copy_bytes v2899, v2893, 16
        v2900 = get_local ptr {  }, __tmp_arg201
        mem_copy_val v2900, v2890
        v2901 = get_local ptr slice, __tmp_arg202
        mem_copy_val v2901, v2899
        v2902 = call print_str_1(v2900, v2901)
        br fmt_114_block5()

        fmt_114_block3():
        v2903 = const u64 14757395258967588866, !1076
        revert v2903, !1076

        fmt_114_block5():
        v2904 = get_local ptr string<1>, __const118
        v2905 = get_local ptr {  }, f_91, !1073
        v2906 = get_local ptr string<1>, __anon_337
        mem_copy_val v2906, v2904
        v2907 = ptr_to_int v2906 to u64, !1073
        v2908 = get_local ptr { u64, u64 }, __anon_338, !1073
        v2909 = const u64 0
        v2910 = get_elem_ptr v2908, ptr u64, v2909
        store v2907 to v2910, !1073
        v2911 = const u64 1
        v2912 = get_elem_ptr v2908, ptr u64, v2911
        v2913 = const u64 1
        store v2913 to v2912, !1073
        v2914 = get_local ptr slice, __anon_339, !1073
        mem_copy_bytes v2914, v2908, 16
        v2915 = get_local ptr {  }, __tmp_arg203
        mem_copy_val v2915, v2905
        v2916 = get_local ptr slice, __tmp_arg204
        mem_copy_val v2916, v2914
        v2917 = call print_str_1(v2915, v2916)
        v2918 = get_local ptr {  }, f_91, !1073
        v2919 = get_local ptr {  }, self_54, !1073
        mem_copy_val v2919, v2918
        v2920 = get_global ptr u64, std::debug::STDERR, !1091
        v2921 = load v2920, !1073
        v2922 = get_local ptr u64, fd_44, !1092
        store v2921 to v2922, !1093
        v2923 = get_local ptr u64, fd_44, !1094
        v2924 = load v2923, !1095
        v2925 = asm(id: v58, fd: v2924) -> (), !1096 {
            ecal   id fd zero zero, !113
        }
        v2926 = get_local ptr b256, __const119
        v2927 = get_local ptr { u64 }, arg_92
        v2928 = get_local ptr { u64 }, ______________________________________________, !1097
        mem_copy_val v2928, v2927
        v2929 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __anon_340, !1099
        v2930 = const u64 0
        v2931 = get_elem_ptr v2929, ptr u64, v2930, !1099
        v2932 = const u64 0, !1099
        store v2932 to v2931, !1099
        v2933 = get_local ptr b256, __tmp_block_arg20
        mem_copy_val v2933, v2926
        v2934 = get_local ptr { b256 }, __anon_014, !1102
        v2935 = get_elem_ptr v2934, ptr b256, v2032, !1103
        mem_copy_val v2935, v2933
        v2936 = get_local ptr { b256 }, __tmp_block_arg21
        mem_copy_val v2936, v2934
        v2937 = get_local ptr string<72>, __const120
        v2938 = const u64 1
        v2939 = const u64 0
        v2940 = get_elem_ptr v2929, ptr { b256 }, v2938, v2939, !1099
        mem_copy_val v2940, v2936
        v2941 = get_local ptr { u64, ( { b256 } | { b256 } ) }, arg_94
        mem_copy_val v2941, v2929
        v2942 = get_local ptr {  }, __anon_341, !1104
        v2943 = get_local ptr {  }, f_93
        mem_copy_val v2943, v2942
        v2944 = get_local ptr {  }, f_93, !1104
        v2945 = get_local ptr string<72>, __anon_342
        mem_copy_val v2945, v2937
        v2946 = ptr_to_int v2945 to u64, !1104
        v2947 = get_local ptr { u64, u64 }, __anon_343, !1104
        v2948 = const u64 0
        v2949 = get_elem_ptr v2947, ptr u64, v2948
        store v2946 to v2949, !1104
        v2950 = const u64 1
        v2951 = get_elem_ptr v2947, ptr u64, v2950
        v2952 = const u64 72
        store v2952 to v2951, !1104
        v2953 = get_local ptr slice, __anon_344, !1104
        mem_copy_bytes v2953, v2947, 16
        v2954 = get_local ptr {  }, __tmp_arg205
        mem_copy_val v2954, v2944
        v2955 = get_local ptr slice, __tmp_arg206
        mem_copy_val v2955, v2953
        v2956 = call print_str_1(v2954, v2955)
        v2957 = get_local ptr { u64, ( { b256 } | { b256 } ) }, arg_94
        v2958 = get_local ptr {  }, f_93
        v2959 = get_local ptr { u64, ( { b256 } | { b256 } ) }, self_55
        mem_copy_val v2959, v2957
        v2960 = get_local ptr ptr {  }, _f_3
        store v2958 to v2960
        v2961 = get_local ptr { u64, ( { b256 } | { b256 } ) }, self_55, !1106
        v2962 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1107
        mem_copy_val v2962, v2961
        v2963 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1106
        v2964 = const u64 0
        v2965 = get_elem_ptr v2963, ptr u64, v2964, !1106
        v2966 = get_local ptr u64, self_08, !1110
        mem_copy_val v2966, v2965
        v2967 = get_local ptr u64, other_7, !1110
        v2968 = const u64 0, !1106
        store v2968 to v2967, !1110
        v2969 = get_local ptr u64, self_08, !1111
        v2970 = load v2969, !1110
        v2971 = get_local ptr u64, other_7, !1112
        v2972 = load v2971, !1110
        v2973 = cmp eq v2970 v2972, !1110
        cbr v2973, fmt_115_block0(), fmt_115_block1(), !1108

        fmt_115_block0():
        v2974 = get_local ptr string<8>, __const121
        v2975 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1106
        v2976 = const u64 1
        v2977 = const u64 0
        v2978 = get_elem_ptr v2975, ptr { b256 }, v2976, v2977
        v2979 = get_local ptr { b256 }, value, !1113
        mem_copy_val v2979, v2978
        v2980 = get_local ptr ptr {  }, _f_3, !1114
        v2981 = load v2980
        v2982 = get_local ptr string<8>, __anon_015
        mem_copy_val v2982, v2974
        v2983 = ptr_to_int v2982 to u64, !1115
        v2984 = get_local ptr { u64, u64 }, __anon_1108, !1115
        v2985 = const u64 0
        v2986 = get_elem_ptr v2984, ptr u64, v2985
        store v2983 to v2986, !1115
        v2987 = const u64 1
        v2988 = get_elem_ptr v2984, ptr u64, v2987
        v2989 = const u64 8
        store v2989 to v2988, !1115
        v2990 = get_local ptr slice, __anon_2106, !1115
        mem_copy_bytes v2990, v2984, 16
        v2991 = get_local ptr {  }, __tmp_arg324
        mem_copy_val v2991, v2981
        v2992 = get_local ptr slice, __tmp_arg325
        mem_copy_val v2992, v2990
        v2993 = get_local ptr { {  }, bool }, __ret_val0
        v2994 = call debug_tuple_62(v2991, v2992, v2993)
        v2995 = get_local ptr { {  }, bool }, __aggr_memcpy_012
        mem_copy_val v2995, v2994
        v2996 = get_local ptr { b256 }, value, !1116
        v2997 = get_local ptr { {  }, bool }, type_fix1
        mem_copy_val v2997, v2995
        v2998 = get_local ptr ptr { {  }, bool }, self_116, !1119
        store v2997 to v2998, !1119
        v2999 = get_local ptr { b256 }, value_01, !1119
        mem_copy_val v2999, v2996
        v3000 = get_local ptr ptr { {  }, bool }, self_116, !1120
        v3001 = load v3000, !1119
        v3002 = const u64 1
        v3003 = get_elem_ptr v3001, ptr bool, v3002, !1121
        v3004 = load v3003, !1119
        cbr v3004, fmt_115_field_116_block0(), fmt_115_field_116_block2(), !1122

        fmt_115_field_116_block0():
        v3005 = get_local ptr string<2>, __const122
        v3006 = get_local ptr ptr { {  }, bool }, self_116, !1123
        v3007 = load v3006, !1119
        v3008 = const u64 0
        v3009 = get_elem_ptr v3007, ptr {  }, v3008, !1124
        v3010 = get_local ptr string<2>, __anon_004, !1119
        mem_copy_val v3010, v3005
        v3011 = ptr_to_int v3010 to u64, !1125
        v3012 = get_local ptr { u64, u64 }, __anon_1012, !1126
        v3013 = const u64 0
        v3014 = get_elem_ptr v3012, ptr u64, v3013, !1119
        store v3011 to v3014, !1127
        v3015 = const u64 1
        v3016 = get_elem_ptr v3012, ptr u64, v3015, !1119
        v3017 = const u64 2
        store v3017 to v3016, !1128
        v3018 = get_local ptr slice, __anon_2012, !1129
        mem_copy_bytes v3018, v3012, 16, !1119
        v3019 = get_local ptr {  }, __tmp_arg207
        mem_copy_val v3019, v3009
        v3020 = get_local ptr slice, __tmp_arg208
        mem_copy_val v3020, v3018
        v3021 = call print_str_1(v3019, v3020)
        br fmt_115_field_116_block2(), !1119

        fmt_115_field_116_block2():
        v3022 = get_local ptr { b256 }, value_01, !1130
        v3023 = get_local ptr ptr { {  }, bool }, self_116, !1131
        v3024 = load v3023, !1119
        v3025 = const u64 0
        v3026 = get_elem_ptr v3024, ptr {  }, v3025, !1132
        v3027 = get_local ptr { b256 }, __tmp_arg350
        mem_copy_val v3027, v3022
        v3028 = call fmt_82(v3027, v3026)
        v3029 = get_local ptr ptr { {  }, bool }, self_116, !1133
        v3030 = load v3029, !1119
        v3031 = const u64 1
        v3032 = get_elem_ptr v3030, ptr bool, v3031, !1134
        v3033 = const bool true, !458
        store v3033 to v3032, !1135
        v3034 = get_local ptr ptr { {  }, bool }, self_116, !1136
        v3035 = load v3034, !1119
        v3036 = get_local ptr { {  }, bool }, __tmp_block_arg22
        mem_copy_val v3036, v3035
        v3037 = get_local ptr { {  }, bool }, type_fix00
        mem_copy_val v3037, v3036
        v3038 = call finish_66(v3037), !1139
        br fmt_115_block5()

        fmt_115_block1():
        v3039 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1106
        v3040 = const u64 0
        v3041 = get_elem_ptr v3039, ptr u64, v3040, !1106
        v3042 = get_local ptr u64, self_213, !1142
        mem_copy_val v3042, v3041
        v3043 = get_local ptr u64, other_05, !1142
        v3044 = const u64 1, !1106
        store v3044 to v3043, !1142
        v3045 = get_local ptr u64, self_213, !1143
        v3046 = load v3045, !1142
        v3047 = get_local ptr u64, other_05, !1144
        v3048 = load v3047, !1142
        v3049 = cmp eq v3046 v3048, !1142
        cbr v3049, fmt_115_block2(), fmt_115_block3(), !1140

        fmt_115_block2():
        v3050 = get_local ptr string<8>, __const123
        v3051 = get_local ptr { u64, ( { b256 } | { b256 } ) }, __matched_value_12, !1106
        v3052 = const u64 1
        v3053 = const u64 1
        v3054 = get_elem_ptr v3051, ptr { b256 }, v3052, v3053
        v3055 = get_local ptr { b256 }, value_1, !1145
        mem_copy_val v3055, v3054
        v3056 = get_local ptr ptr {  }, _f_3, !1146
        v3057 = load v3056
        v3058 = get_local ptr string<8>, __anon_3103
        mem_copy_val v3058, v3050
        v3059 = ptr_to_int v3058 to u64, !1147
        v3060 = get_local ptr { u64, u64 }, __anon_444, !1147
        v3061 = const u64 0
        v3062 = get_elem_ptr v3060, ptr u64, v3061
        store v3059 to v3062, !1147
        v3063 = const u64 1
        v3064 = get_elem_ptr v3060, ptr u64, v3063
        v3065 = const u64 8
        store v3065 to v3064, !1147
        v3066 = get_local ptr slice, __anon_513, !1147
        mem_copy_bytes v3066, v3060, 16
        v3067 = get_local ptr {  }, __tmp_arg326
        mem_copy_val v3067, v3057
        v3068 = get_local ptr slice, __tmp_arg327
        mem_copy_val v3068, v3066
        v3069 = get_local ptr { {  }, bool }, __ret_val1
        v3070 = call debug_tuple_62(v3067, v3068, v3069)
        v3071 = get_local ptr { {  }, bool }, __aggr_memcpy_013
        mem_copy_val v3071, v3070
        v3072 = get_local ptr { b256 }, value_1, !1148
        v3073 = get_local ptr { {  }, bool }, type_fix10
        mem_copy_val v3073, v3071
        v3074 = get_local ptr ptr { {  }, bool }, self_311, !1151
        store v3073 to v3074, !1151
        v3075 = get_local ptr { b256 }, value_10, !1151
        mem_copy_val v3075, v3072
        v3076 = get_local ptr ptr { {  }, bool }, self_311, !1152
        v3077 = load v3076, !1151
        v3078 = const u64 1
        v3079 = get_elem_ptr v3077, ptr bool, v3078, !1153
        v3080 = load v3079, !1151
        cbr v3080, fmt_115_field_117_block0(), fmt_115_field_117_block2(), !1154

        fmt_115_field_117_block0():
        v3081 = get_local ptr string<2>, __const124
        v3082 = get_local ptr ptr { {  }, bool }, self_311, !1155
        v3083 = load v3082, !1151
        v3084 = const u64 0
        v3085 = get_elem_ptr v3083, ptr {  }, v3084, !1156
        v3086 = get_local ptr string<2>, __anon_016, !1151
        mem_copy_val v3086, v3081
        v3087 = ptr_to_int v3086 to u64, !1157
        v3088 = get_local ptr { u64, u64 }, __anon_1110, !1158
        v3089 = const u64 0
        v3090 = get_elem_ptr v3088, ptr u64, v3089, !1151
        store v3087 to v3090, !1159
        v3091 = const u64 1
        v3092 = get_elem_ptr v3088, ptr u64, v3091, !1151
        v3093 = const u64 2
        store v3093 to v3092, !1160
        v3094 = get_local ptr slice, __anon_2110, !1161
        mem_copy_bytes v3094, v3088, 16, !1151
        v3095 = get_local ptr {  }, __tmp_arg209
        mem_copy_val v3095, v3085
        v3096 = get_local ptr slice, __tmp_arg210
        mem_copy_val v3096, v3094
        v3097 = call print_str_1(v3095, v3096)
        br fmt_115_field_117_block2(), !1151

        fmt_115_field_117_block2():
        v3098 = get_local ptr { b256 }, value_10, !1162
        v3099 = get_local ptr ptr { {  }, bool }, self_311, !1163
        v3100 = load v3099, !1151
        v3101 = const u64 0
        v3102 = get_elem_ptr v3100, ptr {  }, v3101, !1164
        v3103 = get_local ptr { b256 }, __tmp_arg354
        mem_copy_val v3103, v3098
        v3104 = call fmt_113(v3103, v3102)
        v3105 = get_local ptr ptr { {  }, bool }, self_311, !1165
        v3106 = load v3105, !1151
        v3107 = const u64 1
        v3108 = get_elem_ptr v3106, ptr bool, v3107, !1166
        v3109 = const bool true, !458
        store v3109 to v3108, !1167
        v3110 = get_local ptr ptr { {  }, bool }, self_311, !1168
        v3111 = load v3110, !1151
        v3112 = get_local ptr { {  }, bool }, __tmp_block_arg23
        mem_copy_val v3112, v3111
        v3113 = get_local ptr { {  }, bool }, type_fix2
        mem_copy_val v3113, v3112
        v3114 = call finish_66(v3113), !1171
        br fmt_115_block5()

        fmt_115_block3():
        v3115 = const u64 14757395258967588866, !1107
        revert v3115, !1107

        fmt_115_block5():
        v3116 = get_local ptr string<1>, __const125
        v3117 = get_local ptr {  }, f_93, !1104
        v3118 = get_local ptr string<1>, __anon_345
        mem_copy_val v3118, v3116
        v3119 = ptr_to_int v3118 to u64, !1104
        v3120 = get_local ptr { u64, u64 }, __anon_346, !1104
        v3121 = const u64 0
        v3122 = get_elem_ptr v3120, ptr u64, v3121
        store v3119 to v3122, !1104
        v3123 = const u64 1
        v3124 = get_elem_ptr v3120, ptr u64, v3123
        v3125 = const u64 1
        store v3125 to v3124, !1104
        v3126 = get_local ptr slice, __anon_347, !1104
        mem_copy_bytes v3126, v3120, 16
        v3127 = get_local ptr {  }, __tmp_arg211
        mem_copy_val v3127, v3117
        v3128 = get_local ptr slice, __tmp_arg212
        mem_copy_val v3128, v3126
        v3129 = call print_str_1(v3127, v3128)
        v3130 = get_local ptr {  }, f_93, !1104
        v3131 = get_local ptr {  }, self_56, !1104
        mem_copy_val v3131, v3130
        v3132 = get_global ptr u64, std::debug::STDERR, !1172
        v3133 = load v3132, !1104
        v3134 = get_local ptr u64, fd_45, !1173
        store v3133 to v3134, !1174
        v3135 = get_local ptr u64, fd_45, !1175
        v3136 = load v3135, !1176
        v3137 = asm(id: v58, fd: v3136) -> (), !1177 {
            ecal   id fd zero zero, !113
        }
        v3138 = get_local ptr string<47>, __const126
        v3139 = get_local ptr { u64, ( { b256 } | { b256 } ) }, arg_94
        v3140 = get_local ptr { u64, ( { b256 } | { b256 } ) }, _______________________________________________, !1178
        mem_copy_val v3140, v3139
        v3141 = get_local ptr { u64 }, __anon_348, !1180
        v3142 = const u64 0
        v3143 = get_elem_ptr v3141, ptr u64, v3142, !1180
        v3144 = const u64 0, !1180
        store v3144 to v3143, !1180
        v3145 = get_local ptr { u64 }, arg_96
        mem_copy_val v3145, v3141
        v3146 = get_local ptr {  }, __anon_349, !1181
        v3147 = get_local ptr {  }, f_95
        mem_copy_val v3147, v3146
        v3148 = get_local ptr {  }, f_95, !1181
        v3149 = get_local ptr string<47>, __anon_350
        mem_copy_val v3149, v3138
        v3150 = ptr_to_int v3149 to u64, !1181
        v3151 = get_local ptr { u64, u64 }, __anon_351, !1181
        v3152 = const u64 0
        v3153 = get_elem_ptr v3151, ptr u64, v3152
        store v3150 to v3153, !1181
        v3154 = const u64 1
        v3155 = get_elem_ptr v3151, ptr u64, v3154
        v3156 = const u64 47
        store v3156 to v3155, !1181
        v3157 = get_local ptr slice, __anon_352, !1181
        mem_copy_bytes v3157, v3151, 16
        v3158 = get_local ptr {  }, __tmp_arg213
        mem_copy_val v3158, v3148
        v3159 = get_local ptr slice, __tmp_arg214
        mem_copy_val v3159, v3157
        v3160 = call print_str_1(v3158, v3159)
        v3161 = get_local ptr { u64 }, arg_96
        v3162 = get_local ptr {  }, f_95
        v3163 = get_local ptr { u64 }, self_57
        mem_copy_val v3163, v3161
        v3164 = get_local ptr ptr {  }, _f_4
        store v3162 to v3164
        v3165 = get_local ptr { u64 }, self_57, !1183
        v3166 = get_local ptr { u64 }, __matched_value_13, !1184
        mem_copy_val v3166, v3165
        v3167 = get_local ptr { u64 }, __matched_value_13, !1183
        v3168 = const u64 0
        v3169 = get_elem_ptr v3167, ptr u64, v3168, !1183
        v3170 = get_local ptr u64, self_09, !1187
        mem_copy_val v3170, v3169
        v3171 = get_local ptr u64, other_8, !1187
        v3172 = const u64 0, !1183
        store v3172 to v3171, !1187
        v3173 = get_local ptr u64, self_09, !1188
        v3174 = load v3173, !1187
        v3175 = get_local ptr u64, other_8, !1189
        v3176 = load v3175, !1187
        v3177 = cmp eq v3174 v3176, !1187
        cbr v3177, fmt_118_block0(), fmt_118_block1(), !1185

        fmt_118_block0():
        v3178 = get_local ptr string<4>, __const127
        v3179 = get_local ptr ptr {  }, _f_4, !1190
        v3180 = load v3179
        v3181 = get_local ptr string<4>, __anon_017
        mem_copy_val v3181, v3178
        v3182 = ptr_to_int v3181 to u64, !1191
        v3183 = get_local ptr { u64, u64 }, __anon_1109, !1191
        v3184 = const u64 0
        v3185 = get_elem_ptr v3183, ptr u64, v3184
        store v3182 to v3185, !1191
        v3186 = const u64 1
        v3187 = get_elem_ptr v3183, ptr u64, v3186
        v3188 = const u64 4
        store v3188 to v3187, !1191
        v3189 = get_local ptr slice, __anon_2107, !1191
        mem_copy_bytes v3189, v3183, 16
        v3190 = get_local ptr {  }, __tmp_arg215
        mem_copy_val v3190, v3180
        v3191 = get_local ptr slice, __tmp_arg216
        mem_copy_val v3191, v3189
        v3192 = call print_str_1(v3190, v3191)
        br fmt_118_block8()

        fmt_118_block1():
        v3193 = get_local ptr { u64 }, __matched_value_13, !1183
        v3194 = const u64 0
        v3195 = get_elem_ptr v3193, ptr u64, v3194, !1183
        v3196 = get_local ptr u64, self_117, !1194
        mem_copy_val v3196, v3195
        v3197 = get_local ptr u64, other_06, !1194
        v3198 = const u64 1, !1183
        store v3198 to v3197, !1194
        v3199 = get_local ptr u64, self_117, !1195
        v3200 = load v3199, !1194
        v3201 = get_local ptr u64, other_06, !1196
        v3202 = load v3201, !1194
        v3203 = cmp eq v3200 v3202, !1194
        cbr v3203, fmt_118_block2(), fmt_118_block3(), !1192

        fmt_118_block2():
        v3204 = get_local ptr string<8>, __const128
        v3205 = get_local ptr ptr {  }, _f_4, !1197
        v3206 = load v3205
        v3207 = get_local ptr string<8>, __anon_3104
        mem_copy_val v3207, v3204
        v3208 = ptr_to_int v3207 to u64, !1198
        v3209 = get_local ptr { u64, u64 }, __anon_445, !1198
        v3210 = const u64 0
        v3211 = get_elem_ptr v3209, ptr u64, v3210
        store v3208 to v3211, !1198
        v3212 = const u64 1
        v3213 = get_elem_ptr v3209, ptr u64, v3212
        v3214 = const u64 8
        store v3214 to v3213, !1198
        v3215 = get_local ptr slice, __anon_514, !1198
        mem_copy_bytes v3215, v3209, 16
        v3216 = get_local ptr {  }, __tmp_arg217
        mem_copy_val v3216, v3206
        v3217 = get_local ptr slice, __tmp_arg218
        mem_copy_val v3217, v3215
        v3218 = call print_str_1(v3216, v3217)
        br fmt_118_block8()

        fmt_118_block3():
        v3219 = get_local ptr { u64 }, __matched_value_13, !1183
        v3220 = const u64 0
        v3221 = get_elem_ptr v3219, ptr u64, v3220, !1183
        v3222 = get_local ptr u64, self_214, !1201
        mem_copy_val v3222, v3221
        v3223 = get_local ptr u64, other_11, !1201
        v3224 = const u64 2, !1183
        store v3224 to v3223, !1201
        v3225 = get_local ptr u64, self_214, !1202
        v3226 = load v3225, !1201
        v3227 = get_local ptr u64, other_11, !1203
        v3228 = load v3227, !1201
        v3229 = cmp eq v3226 v3228, !1201
        cbr v3229, fmt_118_block4(), fmt_118_block5(), !1199

        fmt_118_block4():
        v3230 = get_local ptr string<7>, __const129
        v3231 = get_local ptr ptr {  }, _f_4, !1204
        v3232 = load v3231
        v3233 = get_local ptr string<7>, __anon_610
        mem_copy_val v3233, v3230
        v3234 = ptr_to_int v3233 to u64, !1205
        v3235 = get_local ptr { u64, u64 }, __anon_710, !1205
        v3236 = const u64 0
        v3237 = get_elem_ptr v3235, ptr u64, v3236
        store v3234 to v3237, !1205
        v3238 = const u64 1
        v3239 = get_elem_ptr v3235, ptr u64, v3238
        v3240 = const u64 7
        store v3240 to v3239, !1205
        v3241 = get_local ptr slice, __anon_810, !1205
        mem_copy_bytes v3241, v3235, 16
        v3242 = get_local ptr {  }, __tmp_arg219
        mem_copy_val v3242, v3232
        v3243 = get_local ptr slice, __tmp_arg220
        mem_copy_val v3243, v3241
        v3244 = call print_str_1(v3242, v3243)
        br fmt_118_block8()

        fmt_118_block5():
        v3245 = const u64 14757395258967588866, !1184
        revert v3245, !1184

        fmt_118_block8():
        v3246 = get_local ptr string<1>, __const130
        v3247 = get_local ptr {  }, f_95, !1181
        v3248 = get_local ptr string<1>, __anon_353
        mem_copy_val v3248, v3246
        v3249 = ptr_to_int v3248 to u64, !1181
        v3250 = get_local ptr { u64, u64 }, __anon_354, !1181
        v3251 = const u64 0
        v3252 = get_elem_ptr v3250, ptr u64, v3251
        store v3249 to v3252, !1181
        v3253 = const u64 1
        v3254 = get_elem_ptr v3250, ptr u64, v3253
        v3255 = const u64 1
        store v3255 to v3254, !1181
        v3256 = get_local ptr slice, __anon_355, !1181
        mem_copy_bytes v3256, v3250, 16
        v3257 = get_local ptr {  }, __tmp_arg221
        mem_copy_val v3257, v3247
        v3258 = get_local ptr slice, __tmp_arg222
        mem_copy_val v3258, v3256
        v3259 = call print_str_1(v3257, v3258)
        v3260 = get_local ptr {  }, f_95, !1181
        v3261 = get_local ptr {  }, self_58, !1181
        mem_copy_val v3261, v3260
        v3262 = get_global ptr u64, std::debug::STDERR, !1206
        v3263 = load v3262, !1181
        v3264 = get_local ptr u64, fd_46, !1207
        store v3263 to v3264, !1208
        v3265 = get_local ptr u64, fd_46, !1209
        v3266 = load v3265, !1210
        v3267 = asm(id: v58, fd: v3266) -> (), !1211 {
            ecal   id fd zero zero, !113
        }
        v3268 = get_local ptr b256, __const131
        v3269 = get_local ptr { u64 }, arg_96
        v3270 = get_local ptr { u64 }, ________________________________________________, !1212
        mem_copy_val v3270, v3269
        v3271 = get_local ptr b256, __tmp_block_arg24
        mem_copy_val v3271, v3268
        v3272 = get_local ptr { b256 }, __anon_018, !1215
        v3273 = get_elem_ptr v3272, ptr b256, v2083, !1216
        mem_copy_val v3273, v3271
        v3274 = get_local ptr { b256 }, __tmp_block_arg25
        mem_copy_val v3274, v3272
        v3275 = get_local ptr string<130>, __const132
        v3276 = get_local ptr string<10>, __const133
        v3277 = get_local ptr string<5>, __const134
        v3278 = get_local ptr string<8>, __const135
        v3279 = get_local ptr { u64, { b256 }, u64 }, __anon_356, !1217
        v3280 = const u64 0
        v3281 = get_elem_ptr v3279, ptr u64, v3280
        v3282 = const u64 1, !1218
        store v3282 to v3281, !1217
        v3283 = const u64 1
        v3284 = get_elem_ptr v3279, ptr { b256 }, v3283
        mem_copy_val v3284, v3274
        v3285 = const u64 2
        v3286 = get_elem_ptr v3279, ptr u64, v3285
        v3287 = const u64 2, !1219
        store v3287 to v3286, !1217
        v3288 = get_local ptr { u64, { b256 }, u64 }, arg_98
        mem_copy_val v3288, v3279
        v3289 = get_local ptr {  }, __anon_357, !1220
        v3290 = get_local ptr {  }, f_97
        mem_copy_val v3290, v3289
        v3291 = get_local ptr {  }, f_97, !1220
        v3292 = get_local ptr string<130>, __anon_358
        mem_copy_val v3292, v3275
        v3293 = ptr_to_int v3292 to u64, !1220
        v3294 = get_local ptr { u64, u64 }, __anon_359, !1220
        v3295 = const u64 0
        v3296 = get_elem_ptr v3294, ptr u64, v3295
        store v3293 to v3296, !1220
        v3297 = const u64 1
        v3298 = get_elem_ptr v3294, ptr u64, v3297
        v3299 = const u64 130
        store v3299 to v3298, !1220
        v3300 = get_local ptr slice, __anon_360, !1220
        mem_copy_bytes v3300, v3294, 16
        v3301 = get_local ptr {  }, __tmp_arg223
        mem_copy_val v3301, v3291
        v3302 = get_local ptr slice, __tmp_arg224
        mem_copy_val v3302, v3300
        v3303 = call print_str_1(v3301, v3302)
        v3304 = get_local ptr { u64, { b256 }, u64 }, arg_98
        v3305 = get_local ptr {  }, f_97
        v3306 = get_local ptr { u64, { b256 }, u64 }, self_59
        mem_copy_val v3306, v3304
        v3307 = get_local ptr ptr {  }, _f_5
        store v3305 to v3307
        v3308 = get_local ptr ptr {  }, _f_5, !1222
        v3309 = load v3308
        v3310 = get_local ptr string<10>, __anon_019
        mem_copy_val v3310, v3276
        v3311 = ptr_to_int v3310 to u64, !1223
        v3312 = get_local ptr { u64, u64 }, __anon_1111, !1223
        v3313 = const u64 0
        v3314 = get_elem_ptr v3312, ptr u64, v3313
        store v3311 to v3314, !1223
        v3315 = const u64 1
        v3316 = get_elem_ptr v3312, ptr u64, v3315
        v3317 = const u64 10
        store v3317 to v3316, !1223
        v3318 = get_local ptr slice, __anon_2108, !1223
        mem_copy_bytes v3318, v3312, 16
        v3319 = get_local ptr {  }, __tmp_arg341
        mem_copy_val v3319, v3309
        v3320 = get_local ptr slice, __tmp_arg342
        mem_copy_val v3320, v3318
        v3321 = get_local ptr { {  }, bool }, __ret_val15
        v3322 = call debug_struct_77(v3319, v3320, v3321)
        v3323 = get_local ptr { {  }, bool }, __aggr_memcpy_014
        mem_copy_val v3323, v3322
        v3324 = get_local ptr string<5>, __anon_3105
        mem_copy_val v3324, v3277
        v3325 = ptr_to_int v3324 to u64, !1224
        v3326 = get_local ptr { u64, u64 }, __anon_446, !1224
        v3327 = const u64 0
        v3328 = get_elem_ptr v3326, ptr u64, v3327
        store v3325 to v3328, !1224
        v3329 = const u64 1
        v3330 = get_elem_ptr v3326, ptr u64, v3329
        v3331 = const u64 5
        store v3331 to v3330, !1224
        v3332 = get_local ptr slice, __anon_515, !1224
        mem_copy_bytes v3332, v3326, 16
        v3333 = get_local ptr { u64, { b256 }, u64 }, self_59, !1225
        v3334 = const u64 0
        v3335 = get_elem_ptr v3333, ptr u64, v3334, !1227
        v3336 = load v3335
        v3337 = get_local ptr { {  }, bool }, type_fix3
        mem_copy_val v3337, v3323
        v3338 = get_local ptr slice, __tmp_arg355
        mem_copy_val v3338, v3332
        v3339 = get_local ptr { {  }, bool }, __ret_val18
        v3340 = call field_120(v3337, v3338, v3336, v3339)
        v3341 = get_local ptr { {  }, bool }, __aggr_memcpy_015
        mem_copy_val v3341, v3340
        v3342 = get_local ptr string<8>, __anon_611
        mem_copy_val v3342, v3278
        v3343 = ptr_to_int v3342 to u64, !1228
        v3344 = get_local ptr { u64, u64 }, __anon_711, !1228
        v3345 = const u64 0
        v3346 = get_elem_ptr v3344, ptr u64, v3345
        store v3343 to v3346, !1228
        v3347 = const u64 1
        v3348 = get_elem_ptr v3344, ptr u64, v3347
        v3349 = const u64 8
        store v3349 to v3348, !1228
        v3350 = get_local ptr slice, __anon_811, !1228
        mem_copy_bytes v3350, v3344, 16
        v3351 = get_local ptr { u64, { b256 }, u64 }, self_59, !1229
        v3352 = const u64 1
        v3353 = get_elem_ptr v3351, ptr { b256 }, v3352, !1230
        v3354 = get_local ptr { {  }, bool }, type_fix01
        mem_copy_val v3354, v3341
        v3355 = get_local ptr ptr { {  }, bool }, self_011, !1233
        store v3354 to v3355, !1233
        v3356 = get_local ptr slice, name_0, !1233
        mem_copy_val v3356, v3350
        v3357 = get_local ptr { b256 }, value_2, !1233
        mem_copy_val v3357, v3353
        v3358 = get_local ptr ptr { {  }, bool }, self_011, !1234
        v3359 = load v3358, !1233
        v3360 = const u64 1
        v3361 = get_elem_ptr v3359, ptr bool, v3360, !1235
        v3362 = load v3361, !1233
        cbr v3362, fmt_119_field_121_block0(), fmt_119_field_121_block2(), !1236

        fmt_119_field_121_block0():
        v3363 = get_local ptr string<2>, __const136
        v3364 = get_local ptr ptr { {  }, bool }, self_011, !1237
        v3365 = load v3364, !1233
        v3366 = const u64 0
        v3367 = get_elem_ptr v3365, ptr {  }, v3366, !1238
        v3368 = get_local ptr string<2>, __anon_005, !1233
        mem_copy_val v3368, v3363
        v3369 = ptr_to_int v3368 to u64, !1239
        v3370 = get_local ptr { u64, u64 }, __anon_1210, !1240
        v3371 = const u64 0
        v3372 = get_elem_ptr v3370, ptr u64, v3371, !1233
        store v3369 to v3372, !1241
        v3373 = const u64 1
        v3374 = get_elem_ptr v3370, ptr u64, v3373, !1233
        v3375 = const u64 2
        store v3375 to v3374, !1242
        v3376 = get_local ptr slice, __anon_2013, !1243
        mem_copy_bytes v3376, v3370, 16, !1233
        v3377 = get_local ptr {  }, __tmp_arg225
        mem_copy_val v3377, v3367
        v3378 = get_local ptr slice, __tmp_arg226
        mem_copy_val v3378, v3376
        v3379 = call print_str_1(v3377, v3378)
        br fmt_119_field_121_block2(), !1233

        fmt_119_field_121_block2():
        v3380 = get_local ptr string<2>, __const137
        v3381 = get_local ptr ptr { {  }, bool }, self_011, !1244
        v3382 = load v3381, !1233
        v3383 = const u64 0
        v3384 = get_elem_ptr v3382, ptr {  }, v3383, !1245
        v3385 = get_local ptr slice, name_0, !1246
        v3386 = get_local ptr {  }, __tmp_arg227
        mem_copy_val v3386, v3384
        v3387 = get_local ptr slice, __tmp_arg228
        mem_copy_val v3387, v3385
        v3388 = call print_str_1(v3386, v3387)
        v3389 = get_local ptr ptr { {  }, bool }, self_011, !1247
        v3390 = load v3389, !1233
        v3391 = const u64 0
        v3392 = get_elem_ptr v3390, ptr {  }, v3391, !1248
        v3393 = get_local ptr string<2>, __anon_3011, !1233
        mem_copy_val v3393, v3380
        v3394 = ptr_to_int v3393 to u64, !1249
        v3395 = get_local ptr { u64, u64 }, __anon_4011, !1250
        v3396 = const u64 0
        v3397 = get_elem_ptr v3395, ptr u64, v3396, !1233
        store v3394 to v3397, !1251
        v3398 = const u64 1
        v3399 = get_elem_ptr v3395, ptr u64, v3398, !1233
        v3400 = const u64 2
        store v3400 to v3399, !1252
        v3401 = get_local ptr slice, __anon_501, !1253
        mem_copy_bytes v3401, v3395, 16, !1233
        v3402 = get_local ptr {  }, __tmp_arg229
        mem_copy_val v3402, v3392
        v3403 = get_local ptr slice, __tmp_arg230
        mem_copy_val v3403, v3401
        v3404 = call print_str_1(v3402, v3403)
        v3405 = get_local ptr { b256 }, value_2, !1254
        v3406 = get_local ptr ptr { {  }, bool }, self_011, !1255
        v3407 = load v3406, !1233
        v3408 = const u64 0
        v3409 = get_elem_ptr v3407, ptr {  }, v3408, !1256
        v3410 = get_local ptr { b256 }, __tmp_arg352
        mem_copy_val v3410, v3405
        v3411 = call fmt_85(v3410, v3409)
        v3412 = get_local ptr ptr { {  }, bool }, self_011, !1257
        v3413 = load v3412, !1233
        v3414 = const u64 1
        v3415 = get_elem_ptr v3413, ptr bool, v3414, !1258
        v3416 = const bool true, !805
        store v3416 to v3415, !1259
        v3417 = get_local ptr ptr { {  }, bool }, self_011, !1260
        v3418 = load v3417, !1233
        v3419 = get_local ptr { {  }, bool }, __tmp_block_arg26
        mem_copy_val v3419, v3418
        v3420 = get_local ptr string<3>, __const138
        v3421 = get_local ptr string<3>, __anon_910
        mem_copy_val v3421, v3420
        v3422 = ptr_to_int v3421 to u64, !1261
        v3423 = get_local ptr { u64, u64 }, __anon_1013, !1261
        v3424 = const u64 0
        v3425 = get_elem_ptr v3423, ptr u64, v3424
        store v3422 to v3425, !1261
        v3426 = const u64 1
        v3427 = get_elem_ptr v3423, ptr u64, v3426
        v3428 = const u64 3
        store v3428 to v3427, !1261
        v3429 = get_local ptr slice, __anon_1112, !1261
        mem_copy_bytes v3429, v3423, 16
        v3430 = get_local ptr { u64, { b256 }, u64 }, self_59, !1262
        v3431 = const u64 2
        v3432 = get_elem_ptr v3430, ptr u64, v3431, !1263
        v3433 = load v3432
        v3434 = get_local ptr { {  }, bool }, type_fix11
        mem_copy_val v3434, v3419
        v3435 = get_local ptr slice, __tmp_arg356
        mem_copy_val v3435, v3429
        v3436 = get_local ptr { {  }, bool }, __ret_val19
        v3437 = call field_120(v3434, v3435, v3433, v3436)
        v3438 = get_local ptr { {  }, bool }, __aggr_memcpy_016
        mem_copy_val v3438, v3437
        v3439 = get_local ptr { {  }, bool }, type_fix20
        mem_copy_val v3439, v3438
        v3440 = call finish_76(v3439), !1266
        v3441 = get_local ptr string<1>, __const139
        v3442 = get_local ptr {  }, f_97, !1220
        v3443 = get_local ptr string<1>, __anon_361
        mem_copy_val v3443, v3441
        v3444 = ptr_to_int v3443 to u64, !1220
        v3445 = get_local ptr { u64, u64 }, __anon_362, !1220
        v3446 = const u64 0
        v3447 = get_elem_ptr v3445, ptr u64, v3446
        store v3444 to v3447, !1220
        v3448 = const u64 1
        v3449 = get_elem_ptr v3445, ptr u64, v3448
        v3450 = const u64 1
        store v3450 to v3449, !1220
        v3451 = get_local ptr slice, __anon_363, !1220
        mem_copy_bytes v3451, v3445, 16
        v3452 = get_local ptr {  }, __tmp_arg231
        mem_copy_val v3452, v3442
        v3453 = get_local ptr slice, __tmp_arg232
        mem_copy_val v3453, v3451
        v3454 = call print_str_1(v3452, v3453)
        v3455 = get_local ptr {  }, f_97, !1220
        v3456 = get_local ptr {  }, self_60, !1220
        mem_copy_val v3456, v3455
        v3457 = get_global ptr u64, std::debug::STDERR, !1267
        v3458 = load v3457, !1220
        v3459 = get_local ptr u64, fd_47, !1268
        store v3458 to v3459, !1269
        v3460 = get_local ptr u64, fd_47, !1270
        v3461 = load v3460, !1271
        v3462 = asm(id: v58, fd: v3461) -> (), !1272 {
            ecal   id fd zero zero, !113
        }
        v3463 = get_local ptr string<53>, __const140
        v3464 = get_local ptr { u64, { b256 }, u64 }, arg_98
        v3465 = get_local ptr { u64, { b256 }, u64 }, _________________________________________________, !1273
        mem_copy_val v3465, v3464
        v3466 = get_local ptr { u64, ( () | u8 ) }, __anon_364, !915
        v3467 = const u64 0
        v3468 = get_elem_ptr v3466, ptr u64, v3467, !915
        v3469 = const u64 1, !915
        store v3469 to v3468, !915
        v3470 = const u64 1
        v3471 = const u64 1
        v3472 = get_elem_ptr v3466, ptr u8, v3470, v3471, !915
        v3473 = const u8 1, !1274
        store v3473 to v3472, !915
        v3474 = get_local ptr { u64, ( () | u8 ) }, arg_100
        mem_copy_val v3474, v3466
        v3475 = get_local ptr {  }, __anon_365, !1275
        v3476 = get_local ptr {  }, f_99
        mem_copy_val v3476, v3475
        v3477 = get_local ptr {  }, f_99, !1275
        v3478 = get_local ptr string<53>, __anon_366
        mem_copy_val v3478, v3463
        v3479 = ptr_to_int v3478 to u64, !1275
        v3480 = get_local ptr { u64, u64 }, __anon_367, !1275
        v3481 = const u64 0
        v3482 = get_elem_ptr v3480, ptr u64, v3481
        store v3479 to v3482, !1275
        v3483 = const u64 1
        v3484 = get_elem_ptr v3480, ptr u64, v3483
        v3485 = const u64 53
        store v3485 to v3484, !1275
        v3486 = get_local ptr slice, __anon_368, !1275
        mem_copy_bytes v3486, v3480, 16
        v3487 = get_local ptr {  }, __tmp_arg233
        mem_copy_val v3487, v3477
        v3488 = get_local ptr slice, __tmp_arg234
        mem_copy_val v3488, v3486
        v3489 = call print_str_1(v3487, v3488)
        v3490 = get_local ptr { u64, ( () | u8 ) }, arg_100
        v3491 = get_local ptr {  }, f_99
        v3492 = get_local ptr { u64, ( () | u8 ) }, self_61
        mem_copy_val v3492, v3490
        v3493 = get_local ptr ptr {  }, _f_6
        store v3491 to v3493
        v3494 = get_local ptr { u64, ( () | u8 ) }, self_61, !1277
        v3495 = get_local ptr { u64, ( () | u8 ) }, __matched_value_14, !1278
        mem_copy_val v3495, v3494
        v3496 = get_local ptr { u64, ( () | u8 ) }, __matched_value_14, !1277
        v3497 = const u64 0
        v3498 = get_elem_ptr v3496, ptr u64, v3497, !1277
        v3499 = get_local ptr u64, self_012, !1281
        mem_copy_val v3499, v3498
        v3500 = get_local ptr u64, other_9, !1281
        v3501 = const u64 0, !1277
        store v3501 to v3500, !1281
        v3502 = get_local ptr u64, self_012, !1282
        v3503 = load v3502, !1281
        v3504 = get_local ptr u64, other_9, !1283
        v3505 = load v3504, !1281
        v3506 = cmp eq v3503 v3505, !1281
        cbr v3506, fmt_122_block0(), fmt_122_block1(), !1279

        fmt_122_block0():
        v3507 = get_local ptr string<4>, __const141
        v3508 = get_local ptr ptr {  }, _f_6, !1284
        v3509 = load v3508
        v3510 = get_local ptr string<4>, __anon_020
        mem_copy_val v3510, v3507
        v3511 = ptr_to_int v3510 to u64, !1285
        v3512 = get_local ptr { u64, u64 }, __anon_1113, !1285
        v3513 = const u64 0
        v3514 = get_elem_ptr v3512, ptr u64, v3513
        store v3511 to v3514, !1285
        v3515 = const u64 1
        v3516 = get_elem_ptr v3512, ptr u64, v3515
        v3517 = const u64 4
        store v3517 to v3516, !1285
        v3518 = get_local ptr slice, __anon_2109, !1285
        mem_copy_bytes v3518, v3512, 16
        v3519 = get_local ptr {  }, __tmp_arg235
        mem_copy_val v3519, v3509
        v3520 = get_local ptr slice, __tmp_arg236
        mem_copy_val v3520, v3518
        v3521 = call print_str_1(v3519, v3520)
        br fmt_122_block5()

        fmt_122_block1():
        v3522 = get_local ptr { u64, ( () | u8 ) }, __matched_value_14, !1277
        v3523 = const u64 0
        v3524 = get_elem_ptr v3522, ptr u64, v3523, !1277
        v3525 = get_local ptr u64, self_118, !1288
        mem_copy_val v3525, v3524
        v3526 = get_local ptr u64, other_07, !1288
        v3527 = const u64 1, !1277
        store v3527 to v3526, !1288
        v3528 = get_local ptr u64, self_118, !1289
        v3529 = load v3528, !1288
        v3530 = get_local ptr u64, other_07, !1290
        v3531 = load v3530, !1288
        v3532 = cmp eq v3529 v3531, !1288
        cbr v3532, fmt_122_block2(), fmt_122_block3(), !1286

        fmt_122_block2():
        v3533 = get_local ptr string<6>, __const142
        v3534 = get_local ptr { u64, ( () | u8 ) }, __matched_value_14, !1277
        v3535 = const u64 1
        v3536 = const u64 1
        v3537 = get_elem_ptr v3534, ptr u8, v3535, v3536
        v3538 = get_local ptr u8, value0, !1291
        mem_copy_val v3538, v3537
        v3539 = get_local ptr ptr {  }, _f_6, !1292
        v3540 = load v3539
        v3541 = get_local ptr string<6>, __anon_3106
        mem_copy_val v3541, v3533
        v3542 = ptr_to_int v3541 to u64, !1293
        v3543 = get_local ptr { u64, u64 }, __anon_447, !1293
        v3544 = const u64 0
        v3545 = get_elem_ptr v3543, ptr u64, v3544
        store v3542 to v3545, !1293
        v3546 = const u64 1
        v3547 = get_elem_ptr v3543, ptr u64, v3546
        v3548 = const u64 6
        store v3548 to v3547, !1293
        v3549 = get_local ptr slice, __anon_516, !1293
        mem_copy_bytes v3549, v3543, 16
        v3550 = get_local ptr {  }, __tmp_arg328
        mem_copy_val v3550, v3540
        v3551 = get_local ptr slice, __tmp_arg329
        mem_copy_val v3551, v3549
        v3552 = get_local ptr { {  }, bool }, __ret_val2
        v3553 = call debug_tuple_62(v3550, v3551, v3552)
        v3554 = get_local ptr { {  }, bool }, __aggr_memcpy_017
        mem_copy_val v3554, v3553
        v3555 = get_local ptr u8, value0, !1294
        v3556 = load v3555
        v3557 = get_local ptr { {  }, bool }, type_fix4
        mem_copy_val v3557, v3554
        v3558 = get_local ptr { {  }, bool }, __ret_val6
        v3559 = call field_65(v3557, v3556, v3558)
        v3560 = get_local ptr { {  }, bool }, __aggr_memcpy_018
        mem_copy_val v3560, v3559
        v3561 = get_local ptr { {  }, bool }, type_fix02
        mem_copy_val v3561, v3560
        v3562 = call finish_66(v3561), !1297
        br fmt_122_block5()

        fmt_122_block3():
        v3563 = const u64 14757395258967588866, !1278
        revert v3563, !1278

        fmt_122_block5():
        v3564 = get_local ptr string<1>, __const143
        v3565 = get_local ptr {  }, f_99, !1275
        v3566 = get_local ptr string<1>, __anon_369
        mem_copy_val v3566, v3564
        v3567 = ptr_to_int v3566 to u64, !1275
        v3568 = get_local ptr { u64, u64 }, __anon_370, !1275
        v3569 = const u64 0
        v3570 = get_elem_ptr v3568, ptr u64, v3569
        store v3567 to v3570, !1275
        v3571 = const u64 1
        v3572 = get_elem_ptr v3568, ptr u64, v3571
        v3573 = const u64 1
        store v3573 to v3572, !1275
        v3574 = get_local ptr slice, __anon_371, !1275
        mem_copy_bytes v3574, v3568, 16
        v3575 = get_local ptr {  }, __tmp_arg237
        mem_copy_val v3575, v3565
        v3576 = get_local ptr slice, __tmp_arg238
        mem_copy_val v3576, v3574
        v3577 = call print_str_1(v3575, v3576)
        v3578 = get_local ptr {  }, f_99, !1275
        v3579 = get_local ptr {  }, self_62, !1275
        mem_copy_val v3579, v3578
        v3580 = get_global ptr u64, std::debug::STDERR, !1298
        v3581 = load v3580, !1275
        v3582 = get_local ptr u64, fd_48, !1299
        store v3581 to v3582, !1300
        v3583 = get_local ptr u64, fd_48, !1301
        v3584 = load v3583, !1302
        v3585 = asm(id: v58, fd: v3584) -> (), !1303 {
            ecal   id fd zero zero, !113
        }
        v3586 = get_local ptr string<49>, __const144
        v3587 = get_local ptr { u64, ( () | u8 ) }, arg_100
        v3588 = get_local ptr { u64, ( () | u8 ) }, __________________________________________________, !1304
        mem_copy_val v3588, v3587
        v3589 = get_local ptr { u64 }, __anon_372, !1306
        v3590 = const u64 0
        v3591 = get_elem_ptr v3589, ptr u64, v3590, !1306
        v3592 = const u64 0, !1306
        store v3592 to v3591, !1306
        v3593 = get_local ptr { u64 }, arg_102
        mem_copy_val v3593, v3589
        v3594 = get_local ptr {  }, __anon_373, !1307
        v3595 = get_local ptr {  }, f_101
        mem_copy_val v3595, v3594
        v3596 = get_local ptr {  }, f_101, !1307
        v3597 = get_local ptr string<49>, __anon_374
        mem_copy_val v3597, v3586
        v3598 = ptr_to_int v3597 to u64, !1307
        v3599 = get_local ptr { u64, u64 }, __anon_375, !1307
        v3600 = const u64 0
        v3601 = get_elem_ptr v3599, ptr u64, v3600
        store v3598 to v3601, !1307
        v3602 = const u64 1
        v3603 = get_elem_ptr v3599, ptr u64, v3602
        v3604 = const u64 49
        store v3604 to v3603, !1307
        v3605 = get_local ptr slice, __anon_376, !1307
        mem_copy_bytes v3605, v3599, 16
        v3606 = get_local ptr {  }, __tmp_arg239
        mem_copy_val v3606, v3596
        v3607 = get_local ptr slice, __tmp_arg240
        mem_copy_val v3607, v3605
        v3608 = call print_str_1(v3606, v3607)
        v3609 = get_local ptr { u64 }, arg_102
        v3610 = get_local ptr {  }, f_101
        v3611 = get_local ptr { u64 }, self_63
        mem_copy_val v3611, v3609
        v3612 = get_local ptr ptr {  }, _f_7
        store v3610 to v3612
        v3613 = get_local ptr { u64 }, self_63, !1309
        v3614 = get_local ptr { u64 }, __matched_value_15, !1310
        mem_copy_val v3614, v3613
        v3615 = get_local ptr { u64 }, __matched_value_15, !1309
        v3616 = const u64 0
        v3617 = get_elem_ptr v3615, ptr u64, v3616, !1309
        v3618 = get_local ptr u64, self_013, !1313
        mem_copy_val v3618, v3617
        v3619 = get_local ptr u64, other_12, !1313
        v3620 = const u64 0, !1309
        store v3620 to v3619, !1313
        v3621 = get_local ptr u64, self_013, !1314
        v3622 = load v3621, !1313
        v3623 = get_local ptr u64, other_12, !1315
        v3624 = load v3623, !1313
        v3625 = cmp eq v3622 v3624, !1313
        cbr v3625, fmt_123_block0(), fmt_123_block1(), !1311

        fmt_123_block0():
        v3626 = get_local ptr string<4>, __const145
        v3627 = get_local ptr ptr {  }, _f_7, !1316
        v3628 = load v3627
        v3629 = get_local ptr string<4>, __anon_021
        mem_copy_val v3629, v3626
        v3630 = ptr_to_int v3629 to u64, !1317
        v3631 = get_local ptr { u64, u64 }, __anon_1114, !1317
        v3632 = const u64 0
        v3633 = get_elem_ptr v3631, ptr u64, v3632
        store v3630 to v3633, !1317
        v3634 = const u64 1
        v3635 = get_elem_ptr v3631, ptr u64, v3634
        v3636 = const u64 4
        store v3636 to v3635, !1317
        v3637 = get_local ptr slice, __anon_2111, !1317
        mem_copy_bytes v3637, v3631, 16
        v3638 = get_local ptr {  }, __tmp_arg241
        mem_copy_val v3638, v3628
        v3639 = get_local ptr slice, __tmp_arg242
        mem_copy_val v3639, v3637
        v3640 = call print_str_1(v3638, v3639)
        br fmt_123_block14()

        fmt_123_block1():
        v3641 = get_local ptr { u64 }, __matched_value_15, !1309
        v3642 = const u64 0
        v3643 = get_elem_ptr v3641, ptr u64, v3642, !1309
        v3644 = get_local ptr u64, self_119, !1320
        mem_copy_val v3644, v3643
        v3645 = get_local ptr u64, other_08, !1320
        v3646 = const u64 1, !1309
        store v3646 to v3645, !1320
        v3647 = get_local ptr u64, self_119, !1321
        v3648 = load v3647, !1320
        v3649 = get_local ptr u64, other_08, !1322
        v3650 = load v3649, !1320
        v3651 = cmp eq v3648 v3650, !1320
        cbr v3651, fmt_123_block2(), fmt_123_block3(), !1318

        fmt_123_block2():
        v3652 = get_local ptr string<8>, __const146
        v3653 = get_local ptr ptr {  }, _f_7, !1323
        v3654 = load v3653
        v3655 = get_local ptr string<8>, __anon_3107
        mem_copy_val v3655, v3652
        v3656 = ptr_to_int v3655 to u64, !1324
        v3657 = get_local ptr { u64, u64 }, __anon_448, !1324
        v3658 = const u64 0
        v3659 = get_elem_ptr v3657, ptr u64, v3658
        store v3656 to v3659, !1324
        v3660 = const u64 1
        v3661 = get_elem_ptr v3657, ptr u64, v3660
        v3662 = const u64 8
        store v3662 to v3661, !1324
        v3663 = get_local ptr slice, __anon_517, !1324
        mem_copy_bytes v3663, v3657, 16
        v3664 = get_local ptr {  }, __tmp_arg243
        mem_copy_val v3664, v3654
        v3665 = get_local ptr slice, __tmp_arg244
        mem_copy_val v3665, v3663
        v3666 = call print_str_1(v3664, v3665)
        br fmt_123_block14()

        fmt_123_block3():
        v3667 = get_local ptr { u64 }, __matched_value_15, !1309
        v3668 = const u64 0
        v3669 = get_elem_ptr v3667, ptr u64, v3668, !1309
        v3670 = get_local ptr u64, self_215, !1327
        mem_copy_val v3670, v3669
        v3671 = get_local ptr u64, other_13, !1327
        v3672 = const u64 2, !1309
        store v3672 to v3671, !1327
        v3673 = get_local ptr u64, self_215, !1328
        v3674 = load v3673, !1327
        v3675 = get_local ptr u64, other_13, !1329
        v3676 = load v3675, !1327
        v3677 = cmp eq v3674 v3676, !1327
        cbr v3677, fmt_123_block4(), fmt_123_block5(), !1325

        fmt_123_block4():
        v3678 = get_local ptr string<6>, __const147
        v3679 = get_local ptr ptr {  }, _f_7, !1330
        v3680 = load v3679
        v3681 = get_local ptr string<6>, __anon_612
        mem_copy_val v3681, v3678
        v3682 = ptr_to_int v3681 to u64, !1331
        v3683 = get_local ptr { u64, u64 }, __anon_712, !1331
        v3684 = const u64 0
        v3685 = get_elem_ptr v3683, ptr u64, v3684
        store v3682 to v3685, !1331
        v3686 = const u64 1
        v3687 = get_elem_ptr v3683, ptr u64, v3686
        v3688 = const u64 6
        store v3688 to v3687, !1331
        v3689 = get_local ptr slice, __anon_812, !1331
        mem_copy_bytes v3689, v3683, 16
        v3690 = get_local ptr {  }, __tmp_arg245
        mem_copy_val v3690, v3680
        v3691 = get_local ptr slice, __tmp_arg246
        mem_copy_val v3691, v3689
        v3692 = call print_str_1(v3690, v3691)
        br fmt_123_block14()

        fmt_123_block5():
        v3693 = get_local ptr { u64 }, __matched_value_15, !1309
        v3694 = const u64 0
        v3695 = get_elem_ptr v3693, ptr u64, v3694, !1309
        v3696 = get_local ptr u64, self_312, !1334
        mem_copy_val v3696, v3695
        v3697 = get_local ptr u64, other_21, !1334
        v3698 = const u64 3, !1309
        store v3698 to v3697, !1334
        v3699 = get_local ptr u64, self_312, !1335
        v3700 = load v3699, !1334
        v3701 = get_local ptr u64, other_21, !1336
        v3702 = load v3701, !1334
        v3703 = cmp eq v3700 v3702, !1334
        cbr v3703, fmt_123_block6(), fmt_123_block7(), !1332

        fmt_123_block6():
        v3704 = get_local ptr string<8>, __const148
        v3705 = get_local ptr ptr {  }, _f_7, !1337
        v3706 = load v3705
        v3707 = get_local ptr string<8>, __anon_911
        mem_copy_val v3707, v3704
        v3708 = ptr_to_int v3707 to u64, !1338
        v3709 = get_local ptr { u64, u64 }, __anon_1014, !1338
        v3710 = const u64 0
        v3711 = get_elem_ptr v3709, ptr u64, v3710
        store v3708 to v3711, !1338
        v3712 = const u64 1
        v3713 = get_elem_ptr v3709, ptr u64, v3712
        v3714 = const u64 8
        store v3714 to v3713, !1338
        v3715 = get_local ptr slice, __anon_1115, !1338
        mem_copy_bytes v3715, v3709, 16
        v3716 = get_local ptr {  }, __tmp_arg247
        mem_copy_val v3716, v3706
        v3717 = get_local ptr slice, __tmp_arg248
        mem_copy_val v3717, v3715
        v3718 = call print_str_1(v3716, v3717)
        br fmt_123_block14()

        fmt_123_block7():
        v3719 = get_local ptr { u64 }, __matched_value_15, !1309
        v3720 = const u64 0
        v3721 = get_elem_ptr v3719, ptr u64, v3720, !1309
        v3722 = get_local ptr u64, self_411, !1341
        mem_copy_val v3722, v3721
        v3723 = get_local ptr u64, other_30, !1341
        v3724 = const u64 4, !1309
        store v3724 to v3723, !1341
        v3725 = get_local ptr u64, self_411, !1342
        v3726 = load v3725, !1341
        v3727 = get_local ptr u64, other_30, !1343
        v3728 = load v3727, !1341
        v3729 = cmp eq v3726 v3728, !1341
        cbr v3729, fmt_123_block8(), fmt_123_block9(), !1339

        fmt_123_block8():
        v3730 = get_local ptr string<15>, __const149
        v3731 = get_local ptr ptr {  }, _f_7, !1344
        v3732 = load v3731
        v3733 = get_local ptr string<15>, __anon_1211
        mem_copy_val v3733, v3730
        v3734 = ptr_to_int v3733 to u64, !1345
        v3735 = get_local ptr { u64, u64 }, __anon_1310, !1345
        v3736 = const u64 0
        v3737 = get_elem_ptr v3735, ptr u64, v3736
        store v3734 to v3737, !1345
        v3738 = const u64 1
        v3739 = get_elem_ptr v3735, ptr u64, v3738
        v3740 = const u64 15
        store v3740 to v3739, !1345
        v3741 = get_local ptr slice, __anon_1410, !1345
        mem_copy_bytes v3741, v3735, 16
        v3742 = get_local ptr {  }, __tmp_arg249
        mem_copy_val v3742, v3732
        v3743 = get_local ptr slice, __tmp_arg250
        mem_copy_val v3743, v3741
        v3744 = call print_str_1(v3742, v3743)
        br fmt_123_block14()

        fmt_123_block9():
        v3745 = const u64 14757395258967588866, !1310
        revert v3745, !1310

        fmt_123_block14():
        v3746 = get_local ptr string<1>, __const150
        v3747 = get_local ptr {  }, f_101, !1307
        v3748 = get_local ptr string<1>, __anon_377
        mem_copy_val v3748, v3746
        v3749 = ptr_to_int v3748 to u64, !1307
        v3750 = get_local ptr { u64, u64 }, __anon_378, !1307
        v3751 = const u64 0
        v3752 = get_elem_ptr v3750, ptr u64, v3751
        store v3749 to v3752, !1307
        v3753 = const u64 1
        v3754 = get_elem_ptr v3750, ptr u64, v3753
        v3755 = const u64 1
        store v3755 to v3754, !1307
        v3756 = get_local ptr slice, __anon_379, !1307
        mem_copy_bytes v3756, v3750, 16
        v3757 = get_local ptr {  }, __tmp_arg251
        mem_copy_val v3757, v3747
        v3758 = get_local ptr slice, __tmp_arg252
        mem_copy_val v3758, v3756
        v3759 = call print_str_1(v3757, v3758)
        v3760 = get_local ptr {  }, f_101, !1307
        v3761 = get_local ptr {  }, self_64, !1307
        mem_copy_val v3761, v3760
        v3762 = get_global ptr u64, std::debug::STDERR, !1346
        v3763 = load v3762, !1307
        v3764 = get_local ptr u64, fd_49, !1347
        store v3763 to v3764, !1348
        v3765 = get_local ptr u64, fd_49, !1349
        v3766 = load v3765, !1350
        v3767 = asm(id: v58, fd: v3766) -> (), !1351 {
            ecal   id fd zero zero, !113
        }
        v3768 = get_local ptr { u64 }, arg_102
        v3769 = get_local ptr { u64 }, ___________________________________________________, !1352
        mem_copy_val v3769, v3768
        v3770 = get_local ptr { u64, ( u64 | u64 ) }, __anon_022, !1357
        v3771 = const u64 0
        v3772 = get_elem_ptr v3770, ptr u64, v3771, !1358
        v3773 = const u64 0, !1356
        store v3773 to v3772, !1359
        v3774 = const u64 1
        v3775 = const u64 0
        v3776 = get_elem_ptr v3770, ptr u64, v3774, v3775, !1360
        v3777 = const u64 1, !1361
        store v3777 to v3776, !1362
        v3778 = get_local ptr { u64, ( u64 | u64 ) }, __tmp_block_arg27
        mem_copy_val v3778, v3770
        v3779 = get_local ptr string<26>, __const151
        v3780 = get_local ptr { u64, ( u64 | u64 ) }, arg_104
        mem_copy_val v3780, v3778
        v3781 = get_local ptr {  }, __anon_380, !1363
        v3782 = get_local ptr {  }, f_103
        mem_copy_val v3782, v3781
        v3783 = get_local ptr {  }, f_103, !1363
        v3784 = get_local ptr string<26>, __anon_381
        mem_copy_val v3784, v3779
        v3785 = ptr_to_int v3784 to u64, !1363
        v3786 = get_local ptr { u64, u64 }, __anon_382, !1363
        v3787 = const u64 0
        v3788 = get_elem_ptr v3786, ptr u64, v3787
        store v3785 to v3788, !1363
        v3789 = const u64 1
        v3790 = get_elem_ptr v3786, ptr u64, v3789
        v3791 = const u64 26
        store v3791 to v3790, !1363
        v3792 = get_local ptr slice, __anon_383, !1363
        mem_copy_bytes v3792, v3786, 16
        v3793 = get_local ptr {  }, __tmp_arg253
        mem_copy_val v3793, v3783
        v3794 = get_local ptr slice, __tmp_arg254
        mem_copy_val v3794, v3792
        v3795 = call print_str_1(v3793, v3794)
        v3796 = get_local ptr { u64, ( u64 | u64 ) }, arg_104
        v3797 = get_local ptr {  }, f_103
        v3798 = get_local ptr { u64, ( u64 | u64 ) }, self_65
        mem_copy_val v3798, v3796
        v3799 = get_local ptr ptr {  }, _f_8
        store v3797 to v3799
        v3800 = get_local ptr { u64, ( u64 | u64 ) }, self_65, !1365
        v3801 = get_local ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1366
        mem_copy_val v3801, v3800
        v3802 = get_local ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1365
        v3803 = const u64 0
        v3804 = get_elem_ptr v3802, ptr u64, v3803, !1365
        v3805 = get_local ptr u64, self_014, !1369
        mem_copy_val v3805, v3804
        v3806 = get_local ptr u64, other_14, !1369
        v3807 = const u64 0, !1365
        store v3807 to v3806, !1369
        v3808 = get_local ptr u64, self_014, !1370
        v3809 = load v3808, !1369
        v3810 = get_local ptr u64, other_14, !1371
        v3811 = load v3810, !1369
        v3812 = cmp eq v3809 v3811, !1369
        cbr v3812, fmt_125_block0(), fmt_125_block1(), !1367

        fmt_125_block0():
        v3813 = get_local ptr string<6>, __const152
        v3814 = get_local ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1365
        v3815 = const u64 1
        v3816 = const u64 0
        v3817 = get_elem_ptr v3814, ptr u64, v3815, v3816
        v3818 = get_local ptr u64, value1, !1372
        mem_copy_val v3818, v3817
        v3819 = get_local ptr ptr {  }, _f_8, !1373
        v3820 = load v3819
        v3821 = get_local ptr string<6>, __anon_023
        mem_copy_val v3821, v3813
        v3822 = ptr_to_int v3821 to u64, !1374
        v3823 = get_local ptr { u64, u64 }, __anon_1116, !1374
        v3824 = const u64 0
        v3825 = get_elem_ptr v3823, ptr u64, v3824
        store v3822 to v3825, !1374
        v3826 = const u64 1
        v3827 = get_elem_ptr v3823, ptr u64, v3826
        v3828 = const u64 6
        store v3828 to v3827, !1374
        v3829 = get_local ptr slice, __anon_2112, !1374
        mem_copy_bytes v3829, v3823, 16
        v3830 = get_local ptr {  }, __tmp_arg330
        mem_copy_val v3830, v3820
        v3831 = get_local ptr slice, __tmp_arg331
        mem_copy_val v3831, v3829
        v3832 = get_local ptr { {  }, bool }, __ret_val3
        v3833 = call debug_tuple_62(v3830, v3831, v3832)
        v3834 = get_local ptr { {  }, bool }, __aggr_memcpy_019
        mem_copy_val v3834, v3833
        v3835 = get_local ptr u64, value1, !1375
        v3836 = load v3835
        v3837 = get_local ptr { {  }, bool }, type_fix5
        mem_copy_val v3837, v3834
        v3838 = get_local ptr { {  }, bool }, __ret_val23
        v3839 = call field_126(v3837, v3836, v3838)
        v3840 = get_local ptr { {  }, bool }, __aggr_memcpy_020
        mem_copy_val v3840, v3839
        v3841 = get_local ptr { {  }, bool }, type_fix03
        mem_copy_val v3841, v3840
        v3842 = call finish_66(v3841), !1378
        br fmt_125_block5()

        fmt_125_block1():
        v3843 = get_local ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1365
        v3844 = const u64 0
        v3845 = get_elem_ptr v3843, ptr u64, v3844, !1365
        v3846 = get_local ptr u64, self_120, !1381
        mem_copy_val v3846, v3845
        v3847 = get_local ptr u64, other_09, !1381
        v3848 = const u64 1, !1365
        store v3848 to v3847, !1381
        v3849 = get_local ptr u64, self_120, !1382
        v3850 = load v3849, !1381
        v3851 = get_local ptr u64, other_09, !1383
        v3852 = load v3851, !1381
        v3853 = cmp eq v3850 v3852, !1381
        cbr v3853, fmt_125_block2(), fmt_125_block3(), !1379

        fmt_125_block2():
        v3854 = get_local ptr string<6>, __const153
        v3855 = get_local ptr { u64, ( u64 | u64 ) }, __matched_value_16, !1365
        v3856 = const u64 1
        v3857 = const u64 1
        v3858 = get_elem_ptr v3855, ptr u64, v3856, v3857
        v3859 = get_local ptr u64, value_3, !1384
        mem_copy_val v3859, v3858
        v3860 = get_local ptr ptr {  }, _f_8, !1385
        v3861 = load v3860
        v3862 = get_local ptr string<6>, __anon_3108
        mem_copy_val v3862, v3854
        v3863 = ptr_to_int v3862 to u64, !1386
        v3864 = get_local ptr { u64, u64 }, __anon_449, !1386
        v3865 = const u64 0
        v3866 = get_elem_ptr v3864, ptr u64, v3865
        store v3863 to v3866, !1386
        v3867 = const u64 1
        v3868 = get_elem_ptr v3864, ptr u64, v3867
        v3869 = const u64 6
        store v3869 to v3868, !1386
        v3870 = get_local ptr slice, __anon_518, !1386
        mem_copy_bytes v3870, v3864, 16
        v3871 = get_local ptr {  }, __tmp_arg332
        mem_copy_val v3871, v3861
        v3872 = get_local ptr slice, __tmp_arg333
        mem_copy_val v3872, v3870
        v3873 = get_local ptr { {  }, bool }, __ret_val4
        v3874 = call debug_tuple_62(v3871, v3872, v3873)
        v3875 = get_local ptr { {  }, bool }, __aggr_memcpy_021
        mem_copy_val v3875, v3874
        v3876 = get_local ptr u64, value_3, !1387
        v3877 = load v3876
        v3878 = get_local ptr { {  }, bool }, type_fix12
        mem_copy_val v3878, v3875
        v3879 = get_local ptr { {  }, bool }, __ret_val24
        v3880 = call field_126(v3878, v3877, v3879)
        v3881 = get_local ptr { {  }, bool }, __aggr_memcpy_022
        mem_copy_val v3881, v3880
        v3882 = get_local ptr { {  }, bool }, type_fix21
        mem_copy_val v3882, v3881
        v3883 = call finish_66(v3882), !1390
        br fmt_125_block5()

        fmt_125_block3():
        v3884 = const u64 14757395258967588866, !1366
        revert v3884, !1366

        fmt_125_block5():
        v3885 = get_local ptr string<1>, __const154
        v3886 = get_local ptr {  }, f_103, !1363
        v3887 = get_local ptr string<1>, __anon_384
        mem_copy_val v3887, v3885
        v3888 = ptr_to_int v3887 to u64, !1363
        v3889 = get_local ptr { u64, u64 }, __anon_385, !1363
        v3890 = const u64 0
        v3891 = get_elem_ptr v3889, ptr u64, v3890
        store v3888 to v3891, !1363
        v3892 = const u64 1
        v3893 = get_elem_ptr v3889, ptr u64, v3892
        v3894 = const u64 1
        store v3894 to v3893, !1363
        v3895 = get_local ptr slice, __anon_386, !1363
        mem_copy_bytes v3895, v3889, 16
        v3896 = get_local ptr {  }, __tmp_arg255
        mem_copy_val v3896, v3886
        v3897 = get_local ptr slice, __tmp_arg256
        mem_copy_val v3897, v3895
        v3898 = call print_str_1(v3896, v3897)
        v3899 = get_local ptr {  }, f_103, !1363
        v3900 = get_local ptr {  }, self_66, !1363
        mem_copy_val v3900, v3899
        v3901 = get_global ptr u64, std::debug::STDERR, !1391
        v3902 = load v3901, !1363
        v3903 = get_local ptr u64, fd_50, !1392
        store v3902 to v3903, !1393
        v3904 = get_local ptr u64, fd_50, !1394
        v3905 = load v3904, !1395
        v3906 = asm(id: v58, fd: v3905) -> (), !1396 {
            ecal   id fd zero zero, !113
        }
        v3907 = get_local ptr string<5>, __const155
        v3908 = get_local ptr { u64, ( u64 | u64 ) }, arg_104
        v3909 = get_local ptr { u64, ( u64 | u64 ) }, ____________________________________________________, !1397
        mem_copy_val v3909, v3908
        v3910 = get_local ptr string<5>, __anon_387
        mem_copy_val v3910, v3907
        v3911 = ptr_to_int v3910 to u64, !1398
        v3912 = get_local ptr { u64, u64 }, __anon_388, !1398
        v3913 = const u64 0
        v3914 = get_elem_ptr v3912, ptr u64, v3913
        store v3911 to v3914, !1398
        v3915 = const u64 1
        v3916 = get_elem_ptr v3912, ptr u64, v3915
        v3917 = const u64 5
        store v3917 to v3916, !1398
        v3918 = get_local ptr slice, __anon_389, !1398
        mem_copy_bytes v3918, v3912, 16
        v3919 = get_local ptr slice, s_0, !1401
        mem_copy_val v3919, v3918
        v3920 = get_local ptr slice, s_0, !1404
        v3921 = get_local ptr slice, __tmp_arg308
        mem_copy_val v3921, v3920
        v3922 = call len_4(v3921)
        v3923 = get_local ptr u64, str_size0, !1406
        store v3922 to v3923, !1407
        v3924 = get_local ptr slice, s_0, !1409
        v3925 = get_local ptr slice, __tmp_arg307
        mem_copy_val v3925, v3924
        v3926 = call as_ptr_3(v3925)
        v3927 = get_local ptr u64, str_ptr, !1411
        store v3926 to v3927, !1412
        v3928 = get_local ptr u64, str_ptr, !1414
        v3929 = get_local ptr u64, str_size0, !1416
        v3930 = get_local ptr u64, ptr_, !1419
        mem_copy_val v3930, v3928
        v3931 = get_local ptr u64, count_0, !1420
        mem_copy_val v3931, v3929
        v3932 = get_local ptr u64, ptr_, !1423
        v3933 = get_local ptr u64, count_0, !1425
        v3934 = get_local ptr u64, self_67, !1428
        mem_copy_val v3934, v3933
        v3935 = get_local ptr u64, other_15, !1429
        v3936 = const u64 1
        store v3936 to v3935, !1430
        v3937 = get_local ptr u64, self_67, !1432
        v3938 = load v3937, !1433
        v3939 = get_local ptr u64, other_15, !1435
        v3940 = load v3939, !1436
        v3941 = mul v3938, v3940, !1437
        v3942 = get_local ptr { u64, u64 }, __anon_006, !1439
        v3943 = const u64 0
        v3944 = get_elem_ptr v3942, ptr u64, v3943, !1440
        mem_copy_val v3944, v3932
        v3945 = const u64 1
        v3946 = get_elem_ptr v3942, ptr u64, v3945, !1441
        store v3941 to v3946, !1442
        v3947 = get_local ptr { u64, u64 }, parts_, !1445
        mem_copy_val v3947, v3942
        v3948 = get_local ptr { u64, u64 }, parts_, !1447
        v3949 = asm(ptr: v3948) -> ptr slice ptr {
        }
        v3950 = get_local ptr slice, __aggr_memcpy_023
        mem_copy_val v3950, v3949
        v3951 = get_local ptr slice, __tmp_block_arg28
        mem_copy_val v3951, v3950
        v3952 = get_local ptr slice, __tmp_block_arg29
        mem_copy_val v3952, v3951
        v3953 = get_local ptr slice, slice_, !1450
        mem_copy_val v3953, v3952
        v3954 = get_local ptr slice, slice_, !1452
        v3955 = get_local ptr slice, slice_0, !1455
        mem_copy_val v3955, v3954
        v3956 = get_local ptr slice, slice_0, !1457
        v3957 = get_local ptr slice, __tmp_arg360
        mem_copy_val v3957, v3956
        v3958 = call number_of_bytes_130(v3957)
        v3959 = get_local ptr u64, cap, !1459
        store v3958 to v3959, !1460
        v3960 = get_local ptr u64, cap, !1462
        v3961 = get_local ptr u64, count_00, !1465
        mem_copy_val v3961, v3960
        v3962 = get_local ptr u64, count_00, !1466
        v3963 = load v3962, !1467
        v3964 = asm(size: v3963) -> u64 hp, !1468 {
            aloc   size, !855
        }
        v3965 = get_local ptr u64, ptr0, !1470
        store v3964 to v3965, !1471
        v3966 = get_local ptr u64, cap, !1473
        v3967 = get_local ptr u64, self_015, !1476
        mem_copy_val v3967, v3966
        v3968 = get_local ptr u64, other_010, !1477
        v3969 = const u64 0, !1478
        store v3969 to v3968, !1479
        v3970 = get_local ptr u64, self_015, !1481
        v3971 = load v3970, !1482
        v3972 = get_local ptr u64, other_010, !1484
        v3973 = load v3972, !1485
        v3974 = cmp gt v3971 v3973, !1486
        cbr v3974, from_ascii_str_127_from_128_from_129_block0(), from_ascii_str_127_from_128_from_129_block2(), !1487

        from_ascii_str_127_from_128_from_129_block0():
        v3975 = get_local ptr slice, slice_0, !1489
        v3976 = get_local ptr slice, self_002, !1492
        mem_copy_val v3976, v3975
        v3977 = get_local ptr slice, self_002, !1494
        v3978 = get_local ptr slice, slice_00, !1497
        mem_copy_val v3978, v3977
        v3979 = get_local ptr slice, slice_00, !1499
        v3980 = asm(ptr: v3979) -> ptr { u64, u64 } ptr {
        }
        v3981 = get_local ptr { u64, u64 }, __aggr_memcpy_024
        mem_copy_val v3981, v3980
        v3982 = get_local ptr { u64, u64 }, __tmp_block_arg30
        mem_copy_val v3982, v3981
        v3983 = get_local ptr { u64, u64 }, __anon_00000, !1500
        mem_copy_val v3983, v3982
        v3984 = const u64 0
        v3985 = get_elem_ptr v3983, ptr u64, v3984, !1502
        v3986 = load v3985, !1503
        v3987 = get_local ptr u64, ptr0, !1505
        v3988 = get_local ptr u64, cap, !1507
        v3989 = get_local ptr u64, self_121, !1510
        store v3986 to v3989, !1511
        v3990 = get_local ptr u64, dst_, !1512
        mem_copy_val v3990, v3987
        v3991 = get_local ptr u64, count_000, !1513
        mem_copy_val v3991, v3988
        v3992 = get_local ptr u64, count_000, !1515
        v3993 = get_local ptr u64, self_0002, !1518
        mem_copy_val v3993, v3992
        v3994 = get_local ptr u64, other_000, !1519
        v3995 = const u64 1
        store v3995 to v3994, !1520
        v3996 = get_local ptr u64, self_0002, !1521
        v3997 = load v3996, !1522
        v3998 = get_local ptr u64, other_000, !1523
        v3999 = load v3998, !1524
        v4000 = mul v3997, v3999, !1525
        v4001 = get_local ptr u64, len0, !1527
        store v4000 to v4001, !1528
        v4002 = get_local ptr u64, dst_, !1530
        v4003 = load v4002, !1531
        v4004 = get_local ptr u64, self_121, !1533
        v4005 = load v4004, !1534
        v4006 = get_local ptr u64, len0, !1536
        v4007 = load v4006, !1537
        v4008 = asm(dst: v4003, src: v4005, len: v4007) -> (), !1539 {
            mcp    dst src len, !1540
        }
        br from_ascii_str_127_from_128_from_129_block2(), !1541

        from_ascii_str_127_from_128_from_129_block2():
        v4009 = get_local ptr u64, ptr0, !1543
        v4010 = get_local ptr u64, cap, !1545
        v4011 = get_local ptr { u64, u64 }, __anon_0001, !1547
        v4012 = const u64 0
        v4013 = get_elem_ptr v4011, ptr u64, v4012, !1548
        mem_copy_val v4013, v4009
        v4014 = const u64 1
        v4015 = get_elem_ptr v4011, ptr u64, v4014, !1549
        mem_copy_val v4015, v4010
        v4016 = get_local ptr { u64, u64 }, __tmp_block_arg31
        mem_copy_val v4016, v4011
        v4017 = get_local ptr slice, slice_, !1551
        v4018 = get_local ptr slice, __tmp_arg361
        mem_copy_val v4018, v4017
        v4019 = call number_of_bytes_130(v4018)
        v4020 = get_local ptr { { u64, u64 }, u64 }, __anon_0110, !1553
        v4021 = const u64 0
        v4022 = get_elem_ptr v4020, ptr { u64, u64 }, v4021, !1554
        mem_copy_val v4022, v4016
        v4023 = const u64 1
        v4024 = get_elem_ptr v4020, ptr u64, v4023, !1555
        store v4019 to v4024, !1556
        v4025 = get_local ptr { { u64, u64 }, u64 }, __tmp_block_arg32
        mem_copy_val v4025, v4020
        v4026 = get_local ptr { { { u64, u64 }, u64 } }, __anon_024, !1558
        v4027 = const u64 0
        v4028 = get_elem_ptr v4026, ptr { { u64, u64 }, u64 }, v4027, !1401
        mem_copy_val v4028, v4025
        v4029 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_block_arg33
        mem_copy_val v4029, v4026
        v4030 = get_local ptr string<67>, __const156
        v4031 = get_local ptr { { { u64, u64 }, u64 } }, arg_106
        mem_copy_val v4031, v4029
        v4032 = get_local ptr {  }, __anon_390, !1559
        v4033 = get_local ptr {  }, f_105
        mem_copy_val v4033, v4032
        v4034 = get_local ptr {  }, f_105, !1559
        v4035 = get_local ptr string<67>, __anon_391
        mem_copy_val v4035, v4030
        v4036 = ptr_to_int v4035 to u64, !1559
        v4037 = get_local ptr { u64, u64 }, __anon_392, !1559
        v4038 = const u64 0
        v4039 = get_elem_ptr v4037, ptr u64, v4038
        store v4036 to v4039, !1559
        v4040 = const u64 1
        v4041 = get_elem_ptr v4037, ptr u64, v4040
        v4042 = const u64 67
        store v4042 to v4041, !1559
        v4043 = get_local ptr slice, __anon_393, !1559
        mem_copy_bytes v4043, v4037, 16
        v4044 = get_local ptr {  }, __tmp_arg257
        mem_copy_val v4044, v4034
        v4045 = get_local ptr slice, __tmp_arg258
        mem_copy_val v4045, v4043
        v4046 = call print_str_1(v4044, v4045)
        v4047 = get_local ptr { { { u64, u64 }, u64 } }, arg_106
        v4048 = get_local ptr {  }, f_105
        v4049 = get_local ptr { { { u64, u64 }, u64 } }, self_68
        mem_copy_val v4049, v4047
        v4050 = get_local ptr ptr {  }, f_12
        store v4048 to v4050
        v4051 = get_local ptr { { { u64, u64 }, u64 } }, self_68, !1560
        v4052 = const u64 0
        v4053 = get_elem_ptr v4051, ptr { { u64, u64 }, u64 }, v4052, !1561
        v4054 = get_local ptr { { u64, u64 }, u64 }, self_016, !1564
        mem_copy_val v4054, v4053
        v4055 = get_local ptr { { u64, u64 }, u64 }, self_016, !1566
        v4056 = const u64 0
        v4057 = get_elem_ptr v4055, ptr { u64, u64 }, v4056, !1567
        v4058 = const u64 0
        v4059 = get_elem_ptr v4057, ptr u64, v4058, !1568
        v4060 = load v4059, !1564
        v4061 = get_local ptr { { { u64, u64 }, u64 } }, self_68, !1569
        v4062 = const u64 0
        v4063 = get_elem_ptr v4061, ptr { { u64, u64 }, u64 }, v4062, !1561
        v4064 = get_local ptr { { u64, u64 }, u64 }, self_122, !1572
        mem_copy_val v4064, v4063
        v4065 = get_local ptr { { u64, u64 }, u64 }, self_122, !1574
        v4066 = const u64 1
        v4067 = get_elem_ptr v4065, ptr u64, v4066, !1575
        v4068 = load v4067, !1572
        v4069 = get_local ptr { u64, u64 }, __anon_025, !1576
        v4070 = const u64 0
        v4071 = get_elem_ptr v4069, ptr u64, v4070, !1576
        store v4060 to v4071, !1576
        v4072 = const u64 1
        v4073 = get_elem_ptr v4069, ptr u64, v4072, !1576
        store v4068 to v4073, !1576
        v4074 = asm(s: v4069) -> ptr slice s {
        }
        v4075 = get_local ptr slice, __aggr_memcpy_025
        mem_copy_val v4075, v4074
        v4076 = get_local ptr slice, s, !1577
        mem_copy_val v4076, v4075
        v4077 = get_local ptr ptr {  }, f_12, !1578
        v4078 = load v4077
        v4079 = get_local ptr {  }, __tmp_arg320
        mem_copy_val v4079, v4078
        v4080 = call print_string_quotes_58(v4079)
        v4081 = get_local ptr ptr {  }, f_12, !1579
        v4082 = load v4081
        v4083 = get_local ptr slice, s, !1580
        v4084 = get_local ptr {  }, __tmp_arg259
        mem_copy_val v4084, v4082
        v4085 = get_local ptr slice, __tmp_arg260
        mem_copy_val v4085, v4083
        v4086 = call print_str_1(v4084, v4085)
        v4087 = get_local ptr ptr {  }, f_12, !1581
        v4088 = load v4087
        v4089 = get_local ptr {  }, __tmp_arg321
        mem_copy_val v4089, v4088
        v4090 = call print_string_quotes_58(v4089)
        v4091 = get_local ptr string<1>, __const157
        v4092 = get_local ptr {  }, f_105, !1559
        v4093 = get_local ptr string<1>, __anon_394
        mem_copy_val v4093, v4091
        v4094 = ptr_to_int v4093 to u64, !1559
        v4095 = get_local ptr { u64, u64 }, __anon_395, !1559
        v4096 = const u64 0
        v4097 = get_elem_ptr v4095, ptr u64, v4096
        store v4094 to v4097, !1559
        v4098 = const u64 1
        v4099 = get_elem_ptr v4095, ptr u64, v4098
        v4100 = const u64 1
        store v4100 to v4099, !1559
        v4101 = get_local ptr slice, __anon_396, !1559
        mem_copy_bytes v4101, v4095, 16
        v4102 = get_local ptr {  }, __tmp_arg261
        mem_copy_val v4102, v4092
        v4103 = get_local ptr slice, __tmp_arg262
        mem_copy_val v4103, v4101
        v4104 = call print_str_1(v4102, v4103)
        v4105 = get_local ptr {  }, f_105, !1559
        v4106 = get_local ptr {  }, self_69, !1559
        mem_copy_val v4106, v4105
        v4107 = get_global ptr u64, std::debug::STDERR, !1582
        v4108 = load v4107, !1559
        v4109 = get_local ptr u64, fd_51, !1583
        store v4108 to v4109, !1584
        v4110 = get_local ptr u64, fd_51, !1585
        v4111 = load v4110, !1586
        v4112 = asm(id: v58, fd: v4111) -> (), !1587 {
            ecal   id fd zero zero, !113
        }
        v4113 = get_local ptr string<51>, __const158
        v4114 = get_local ptr { { { u64, u64 }, u64 } }, arg_106
        v4115 = get_local ptr { { { u64, u64 }, u64 } }, _____________________________________________________, !1588
        mem_copy_val v4115, v4114
        v4116 = get_local ptr { u64 }, __anon_397, !1590
        v4117 = const u64 0
        v4118 = get_elem_ptr v4116, ptr u64, v4117, !1590
        v4119 = const u64 0, !1590
        store v4119 to v4118, !1590
        v4120 = get_local ptr { u64 }, arg_108
        mem_copy_val v4120, v4116
        v4121 = get_local ptr {  }, __anon_398, !1591
        v4122 = get_local ptr {  }, f_107
        mem_copy_val v4122, v4121
        v4123 = get_local ptr {  }, f_107, !1591
        v4124 = get_local ptr string<51>, __anon_399
        mem_copy_val v4124, v4113
        v4125 = ptr_to_int v4124 to u64, !1591
        v4126 = get_local ptr { u64, u64 }, __anon_400, !1591
        v4127 = const u64 0
        v4128 = get_elem_ptr v4126, ptr u64, v4127
        store v4125 to v4128, !1591
        v4129 = const u64 1
        v4130 = get_elem_ptr v4126, ptr u64, v4129
        v4131 = const u64 51
        store v4131 to v4130, !1591
        v4132 = get_local ptr slice, __anon_401, !1591
        mem_copy_bytes v4132, v4126, 16
        v4133 = get_local ptr {  }, __tmp_arg263
        mem_copy_val v4133, v4123
        v4134 = get_local ptr slice, __tmp_arg264
        mem_copy_val v4134, v4132
        v4135 = call print_str_1(v4133, v4134)
        v4136 = get_local ptr { u64 }, arg_108
        v4137 = get_local ptr {  }, f_107
        v4138 = get_local ptr { u64 }, self_70
        mem_copy_val v4138, v4136
        v4139 = get_local ptr ptr {  }, _f_9
        store v4137 to v4139
        v4140 = get_local ptr { u64 }, self_70, !1593
        v4141 = get_local ptr { u64 }, __matched_value_17, !1594
        mem_copy_val v4141, v4140
        v4142 = get_local ptr { u64 }, __matched_value_17, !1593
        v4143 = const u64 0
        v4144 = get_elem_ptr v4142, ptr u64, v4143, !1593
        v4145 = get_local ptr u64, self_017, !1597
        mem_copy_val v4145, v4144
        v4146 = get_local ptr u64, other_16, !1597
        v4147 = const u64 0, !1593
        store v4147 to v4146, !1597
        v4148 = get_local ptr u64, self_017, !1598
        v4149 = load v4148, !1597
        v4150 = get_local ptr u64, other_16, !1599
        v4151 = load v4150, !1597
        v4152 = cmp eq v4149 v4151, !1597
        cbr v4152, fmt_139_block0(), fmt_139_block1(), !1595

        fmt_139_block0():
        v4153 = get_local ptr string<6>, __const159
        v4154 = get_local ptr ptr {  }, _f_9, !1600
        v4155 = load v4154
        v4156 = get_local ptr string<6>, __anon_026
        mem_copy_val v4156, v4153
        v4157 = ptr_to_int v4156 to u64, !1601
        v4158 = get_local ptr { u64, u64 }, __anon_1117, !1601
        v4159 = const u64 0
        v4160 = get_elem_ptr v4158, ptr u64, v4159
        store v4157 to v4160, !1601
        v4161 = const u64 1
        v4162 = get_elem_ptr v4158, ptr u64, v4161
        v4163 = const u64 6
        store v4163 to v4162, !1601
        v4164 = get_local ptr slice, __anon_2113, !1601
        mem_copy_bytes v4164, v4158, 16
        v4165 = get_local ptr {  }, __tmp_arg265
        mem_copy_val v4165, v4155
        v4166 = get_local ptr slice, __tmp_arg266
        mem_copy_val v4166, v4164
        v4167 = call print_str_1(v4165, v4166)
        br fmt_139_block17()

        fmt_139_block1():
        v4168 = get_local ptr { u64 }, __matched_value_17, !1593
        v4169 = const u64 0
        v4170 = get_elem_ptr v4168, ptr u64, v4169, !1593
        v4171 = get_local ptr u64, self_123, !1604
        mem_copy_val v4171, v4170
        v4172 = get_local ptr u64, other_011, !1604
        v4173 = const u64 1, !1593
        store v4173 to v4172, !1604
        v4174 = get_local ptr u64, self_123, !1605
        v4175 = load v4174, !1604
        v4176 = get_local ptr u64, other_011, !1606
        v4177 = load v4176, !1604
        v4178 = cmp eq v4175 v4177, !1604
        cbr v4178, fmt_139_block2(), fmt_139_block3(), !1602

        fmt_139_block2():
        v4179 = get_local ptr string<6>, __const160
        v4180 = get_local ptr ptr {  }, _f_9, !1607
        v4181 = load v4180
        v4182 = get_local ptr string<6>, __anon_3109
        mem_copy_val v4182, v4179
        v4183 = ptr_to_int v4182 to u64, !1608
        v4184 = get_local ptr { u64, u64 }, __anon_450, !1608
        v4185 = const u64 0
        v4186 = get_elem_ptr v4184, ptr u64, v4185
        store v4183 to v4186, !1608
        v4187 = const u64 1
        v4188 = get_elem_ptr v4184, ptr u64, v4187
        v4189 = const u64 6
        store v4189 to v4188, !1608
        v4190 = get_local ptr slice, __anon_519, !1608
        mem_copy_bytes v4190, v4184, 16
        v4191 = get_local ptr {  }, __tmp_arg267
        mem_copy_val v4191, v4181
        v4192 = get_local ptr slice, __tmp_arg268
        mem_copy_val v4192, v4190
        v4193 = call print_str_1(v4191, v4192)
        br fmt_139_block17()

        fmt_139_block3():
        v4194 = get_local ptr { u64 }, __matched_value_17, !1593
        v4195 = const u64 0
        v4196 = get_elem_ptr v4194, ptr u64, v4195, !1593
        v4197 = get_local ptr u64, self_216, !1611
        mem_copy_val v4197, v4196
        v4198 = get_local ptr u64, other_17, !1611
        v4199 = const u64 2, !1593
        store v4199 to v4198, !1611
        v4200 = get_local ptr u64, self_216, !1612
        v4201 = load v4200, !1611
        v4202 = get_local ptr u64, other_17, !1613
        v4203 = load v4202, !1611
        v4204 = cmp eq v4201 v4203, !1611
        cbr v4204, fmt_139_block4(), fmt_139_block5(), !1609

        fmt_139_block4():
        v4205 = get_local ptr string<4>, __const161
        v4206 = get_local ptr ptr {  }, _f_9, !1614
        v4207 = load v4206
        v4208 = get_local ptr string<4>, __anon_613
        mem_copy_val v4208, v4205
        v4209 = ptr_to_int v4208 to u64, !1615
        v4210 = get_local ptr { u64, u64 }, __anon_713, !1615
        v4211 = const u64 0
        v4212 = get_elem_ptr v4210, ptr u64, v4211
        store v4209 to v4212, !1615
        v4213 = const u64 1
        v4214 = get_elem_ptr v4210, ptr u64, v4213
        v4215 = const u64 4
        store v4215 to v4214, !1615
        v4216 = get_local ptr slice, __anon_813, !1615
        mem_copy_bytes v4216, v4210, 16
        v4217 = get_local ptr {  }, __tmp_arg269
        mem_copy_val v4217, v4207
        v4218 = get_local ptr slice, __tmp_arg270
        mem_copy_val v4218, v4216
        v4219 = call print_str_1(v4217, v4218)
        br fmt_139_block17()

        fmt_139_block5():
        v4220 = get_local ptr { u64 }, __matched_value_17, !1593
        v4221 = const u64 0
        v4222 = get_elem_ptr v4220, ptr u64, v4221, !1593
        v4223 = get_local ptr u64, self_313, !1618
        mem_copy_val v4223, v4222
        v4224 = get_local ptr u64, other_22, !1618
        v4225 = const u64 3, !1593
        store v4225 to v4224, !1618
        v4226 = get_local ptr u64, self_313, !1619
        v4227 = load v4226, !1618
        v4228 = get_local ptr u64, other_22, !1620
        v4229 = load v4228, !1618
        v4230 = cmp eq v4227 v4229, !1618
        cbr v4230, fmt_139_block6(), fmt_139_block7(), !1616

        fmt_139_block6():
        v4231 = get_local ptr string<7>, __const162
        v4232 = get_local ptr ptr {  }, _f_9, !1621
        v4233 = load v4232
        v4234 = get_local ptr string<7>, __anon_912
        mem_copy_val v4234, v4231
        v4235 = ptr_to_int v4234 to u64, !1622
        v4236 = get_local ptr { u64, u64 }, __anon_1015, !1622
        v4237 = const u64 0
        v4238 = get_elem_ptr v4236, ptr u64, v4237
        store v4235 to v4238, !1622
        v4239 = const u64 1
        v4240 = get_elem_ptr v4236, ptr u64, v4239
        v4241 = const u64 7
        store v4241 to v4240, !1622
        v4242 = get_local ptr slice, __anon_1118, !1622
        mem_copy_bytes v4242, v4236, 16
        v4243 = get_local ptr {  }, __tmp_arg271
        mem_copy_val v4243, v4233
        v4244 = get_local ptr slice, __tmp_arg272
        mem_copy_val v4244, v4242
        v4245 = call print_str_1(v4243, v4244)
        br fmt_139_block17()

        fmt_139_block7():
        v4246 = get_local ptr { u64 }, __matched_value_17, !1593
        v4247 = const u64 0
        v4248 = get_elem_ptr v4246, ptr u64, v4247, !1593
        v4249 = get_local ptr u64, self_412, !1625
        mem_copy_val v4249, v4248
        v4250 = get_local ptr u64, other_31, !1625
        v4251 = const u64 4, !1593
        store v4251 to v4250, !1625
        v4252 = get_local ptr u64, self_412, !1626
        v4253 = load v4252, !1625
        v4254 = get_local ptr u64, other_31, !1627
        v4255 = load v4254, !1625
        v4256 = cmp eq v4253 v4255, !1625
        cbr v4256, fmt_139_block8(), fmt_139_block9(), !1623

        fmt_139_block8():
        v4257 = get_local ptr string<6>, __const163
        v4258 = get_local ptr ptr {  }, _f_9, !1628
        v4259 = load v4258
        v4260 = get_local ptr string<6>, __anon_1212
        mem_copy_val v4260, v4257
        v4261 = ptr_to_int v4260 to u64, !1629
        v4262 = get_local ptr { u64, u64 }, __anon_1311, !1629
        v4263 = const u64 0
        v4264 = get_elem_ptr v4262, ptr u64, v4263
        store v4261 to v4264, !1629
        v4265 = const u64 1
        v4266 = get_elem_ptr v4262, ptr u64, v4265
        v4267 = const u64 6
        store v4267 to v4266, !1629
        v4268 = get_local ptr slice, __anon_1411, !1629
        mem_copy_bytes v4268, v4262, 16
        v4269 = get_local ptr {  }, __tmp_arg273
        mem_copy_val v4269, v4259
        v4270 = get_local ptr slice, __tmp_arg274
        mem_copy_val v4270, v4268
        v4271 = call print_str_1(v4269, v4270)
        br fmt_139_block17()

        fmt_139_block9():
        v4272 = get_local ptr { u64 }, __matched_value_17, !1593
        v4273 = const u64 0
        v4274 = get_elem_ptr v4272, ptr u64, v4273, !1593
        v4275 = get_local ptr u64, self_510, !1632
        mem_copy_val v4275, v4274
        v4276 = get_local ptr u64, other_40, !1632
        v4277 = const u64 5, !1593
        store v4277 to v4276, !1632
        v4278 = get_local ptr u64, self_510, !1633
        v4279 = load v4278, !1632
        v4280 = get_local ptr u64, other_40, !1634
        v4281 = load v4280, !1632
        v4282 = cmp eq v4279 v4281, !1632
        cbr v4282, fmt_139_block10(), fmt_139_block11(), !1630

        fmt_139_block10():
        v4283 = get_local ptr string<4>, __const164
        v4284 = get_local ptr ptr {  }, _f_9, !1635
        v4285 = load v4284
        v4286 = get_local ptr string<4>, __anon_1510
        mem_copy_val v4286, v4283
        v4287 = ptr_to_int v4286 to u64, !1636
        v4288 = get_local ptr { u64, u64 }, __anon_1610, !1636
        v4289 = const u64 0
        v4290 = get_elem_ptr v4288, ptr u64, v4289
        store v4287 to v4290, !1636
        v4291 = const u64 1
        v4292 = get_elem_ptr v4288, ptr u64, v4291
        v4293 = const u64 4
        store v4293 to v4292, !1636
        v4294 = get_local ptr slice, __anon_1710, !1636
        mem_copy_bytes v4294, v4288, 16
        v4295 = get_local ptr {  }, __tmp_arg275
        mem_copy_val v4295, v4285
        v4296 = get_local ptr slice, __tmp_arg276
        mem_copy_val v4296, v4294
        v4297 = call print_str_1(v4295, v4296)
        br fmt_139_block17()

        fmt_139_block11():
        v4298 = const u64 14757395258967588866, !1594
        revert v4298, !1594

        fmt_139_block17():
        v4299 = get_local ptr string<1>, __const165
        v4300 = get_local ptr {  }, f_107, !1591
        v4301 = get_local ptr string<1>, __anon_402
        mem_copy_val v4301, v4299
        v4302 = ptr_to_int v4301 to u64, !1591
        v4303 = get_local ptr { u64, u64 }, __anon_403, !1591
        v4304 = const u64 0
        v4305 = get_elem_ptr v4303, ptr u64, v4304
        store v4302 to v4305, !1591
        v4306 = const u64 1
        v4307 = get_elem_ptr v4303, ptr u64, v4306
        v4308 = const u64 1
        store v4308 to v4307, !1591
        v4309 = get_local ptr slice, __anon_404, !1591
        mem_copy_bytes v4309, v4303, 16
        v4310 = get_local ptr {  }, __tmp_arg277
        mem_copy_val v4310, v4300
        v4311 = get_local ptr slice, __tmp_arg278
        mem_copy_val v4311, v4309
        v4312 = call print_str_1(v4310, v4311)
        v4313 = get_local ptr {  }, f_107, !1591
        v4314 = get_local ptr {  }, self_71, !1591
        mem_copy_val v4314, v4313
        v4315 = get_global ptr u64, std::debug::STDERR, !1637
        v4316 = load v4315, !1591
        v4317 = get_local ptr u64, fd_52, !1638
        store v4316 to v4317, !1639
        v4318 = get_local ptr u64, fd_52, !1640
        v4319 = load v4318, !1641
        v4320 = asm(id: v58, fd: v4319) -> (), !1642 {
            ecal   id fd zero zero, !113
        }
        v4321 = get_local ptr { u64 }, arg_108
        v4322 = get_local ptr { u64 }, ______________________________________________________, !1643
        mem_copy_val v4322, v4321
        v4323 = get_local ptr { u64, u64 }, __anon_027, !1648
        v4324 = const u64 0
        v4325 = get_elem_ptr v4323, ptr u64, v4324, !1649
        v4326 = const u64 0, !1650
        store v4326 to v4325, !1651
        v4327 = const u64 1
        v4328 = get_elem_ptr v4323, ptr u64, v4327, !1649
        v4329 = const u64 0, !1652
        store v4329 to v4328, !1653
        v4330 = get_local ptr { u64, u64 }, __tmp_block_arg34
        mem_copy_val v4330, v4323
        v4331 = get_local ptr string<46>, __const166
        v4332 = get_local ptr string<4>, __const167
        v4333 = get_local ptr string<5>, __const168
        v4334 = get_local ptr string<5>, __const169
        v4335 = get_local ptr { u64, u64 }, arg_110
        mem_copy_val v4335, v4330
        v4336 = get_local ptr {  }, __anon_405, !1654
        v4337 = get_local ptr {  }, f_109
        mem_copy_val v4337, v4336
        v4338 = get_local ptr {  }, f_109, !1654
        v4339 = get_local ptr string<46>, __anon_406
        mem_copy_val v4339, v4331
        v4340 = ptr_to_int v4339 to u64, !1654
        v4341 = get_local ptr { u64, u64 }, __anon_407, !1654
        v4342 = const u64 0
        v4343 = get_elem_ptr v4341, ptr u64, v4342
        store v4340 to v4343, !1654
        v4344 = const u64 1
        v4345 = get_elem_ptr v4341, ptr u64, v4344
        v4346 = const u64 46
        store v4346 to v4345, !1654
        v4347 = get_local ptr slice, __anon_408, !1654
        mem_copy_bytes v4347, v4341, 16
        v4348 = get_local ptr {  }, __tmp_arg279
        mem_copy_val v4348, v4338
        v4349 = get_local ptr slice, __tmp_arg280
        mem_copy_val v4349, v4347
        v4350 = call print_str_1(v4348, v4349)
        v4351 = get_local ptr { u64, u64 }, arg_110
        v4352 = get_local ptr {  }, f_109
        v4353 = get_local ptr { u64, u64 }, self_72
        mem_copy_val v4353, v4351
        v4354 = get_local ptr ptr {  }, _f_10
        store v4352 to v4354
        v4355 = get_local ptr ptr {  }, _f_10, !1656
        v4356 = load v4355
        v4357 = get_local ptr string<4>, __anon_028
        mem_copy_val v4357, v4332
        v4358 = ptr_to_int v4357 to u64, !1657
        v4359 = get_local ptr { u64, u64 }, __anon_1119, !1657
        v4360 = const u64 0
        v4361 = get_elem_ptr v4359, ptr u64, v4360
        store v4358 to v4361, !1657
        v4362 = const u64 1
        v4363 = get_elem_ptr v4359, ptr u64, v4362
        v4364 = const u64 4
        store v4364 to v4363, !1657
        v4365 = get_local ptr slice, __anon_2114, !1657
        mem_copy_bytes v4365, v4359, 16
        v4366 = get_local ptr {  }, __tmp_arg343
        mem_copy_val v4366, v4356
        v4367 = get_local ptr slice, __tmp_arg344
        mem_copy_val v4367, v4365
        v4368 = get_local ptr { {  }, bool }, __ret_val16
        v4369 = call debug_struct_77(v4366, v4367, v4368)
        v4370 = get_local ptr { {  }, bool }, __aggr_memcpy_026
        mem_copy_val v4370, v4369
        v4371 = get_local ptr string<5>, __anon_3110
        mem_copy_val v4371, v4333
        v4372 = ptr_to_int v4371 to u64, !1658
        v4373 = get_local ptr { u64, u64 }, __anon_451, !1658
        v4374 = const u64 0
        v4375 = get_elem_ptr v4373, ptr u64, v4374
        store v4372 to v4375, !1658
        v4376 = const u64 1
        v4377 = get_elem_ptr v4373, ptr u64, v4376
        v4378 = const u64 5
        store v4378 to v4377, !1658
        v4379 = get_local ptr slice, __anon_520, !1658
        mem_copy_bytes v4379, v4373, 16
        v4380 = get_local ptr { u64, u64 }, self_72, !1659
        v4381 = const u64 0
        v4382 = get_elem_ptr v4380, ptr u64, v4381, !1660
        v4383 = load v4382
        v4384 = get_local ptr { {  }, bool }, type_fix6
        mem_copy_val v4384, v4370
        v4385 = get_local ptr slice, __tmp_arg357
        mem_copy_val v4385, v4379
        v4386 = get_local ptr { {  }, bool }, __ret_val20
        v4387 = call field_120(v4384, v4385, v4383, v4386)
        v4388 = get_local ptr { {  }, bool }, __aggr_memcpy_027
        mem_copy_val v4388, v4387
        v4389 = get_local ptr string<5>, __anon_614
        mem_copy_val v4389, v4334
        v4390 = ptr_to_int v4389 to u64, !1661
        v4391 = get_local ptr { u64, u64 }, __anon_714, !1661
        v4392 = const u64 0
        v4393 = get_elem_ptr v4391, ptr u64, v4392
        store v4390 to v4393, !1661
        v4394 = const u64 1
        v4395 = get_elem_ptr v4391, ptr u64, v4394
        v4396 = const u64 5
        store v4396 to v4395, !1661
        v4397 = get_local ptr slice, __anon_814, !1661
        mem_copy_bytes v4397, v4391, 16
        v4398 = get_local ptr { u64, u64 }, self_72, !1662
        v4399 = const u64 1
        v4400 = get_elem_ptr v4398, ptr u64, v4399, !1663
        v4401 = load v4400
        v4402 = get_local ptr { {  }, bool }, type_fix04
        mem_copy_val v4402, v4388
        v4403 = get_local ptr slice, __tmp_arg358
        mem_copy_val v4403, v4397
        v4404 = get_local ptr { {  }, bool }, __ret_val21
        v4405 = call field_120(v4402, v4403, v4401, v4404)
        v4406 = get_local ptr { {  }, bool }, __aggr_memcpy_028
        mem_copy_val v4406, v4405
        v4407 = get_local ptr { {  }, bool }, type_fix13
        mem_copy_val v4407, v4406
        v4408 = call finish_76(v4407), !1666
        v4409 = get_local ptr string<1>, __const170
        v4410 = get_local ptr {  }, f_109, !1654
        v4411 = get_local ptr string<1>, __anon_409
        mem_copy_val v4411, v4409
        v4412 = ptr_to_int v4411 to u64, !1654
        v4413 = get_local ptr { u64, u64 }, __anon_410, !1654
        v4414 = const u64 0
        v4415 = get_elem_ptr v4413, ptr u64, v4414
        store v4412 to v4415, !1654
        v4416 = const u64 1
        v4417 = get_elem_ptr v4413, ptr u64, v4416
        v4418 = const u64 1
        store v4418 to v4417, !1654
        v4419 = get_local ptr slice, __anon_411, !1654
        mem_copy_bytes v4419, v4413, 16
        v4420 = get_local ptr {  }, __tmp_arg281
        mem_copy_val v4420, v4410
        v4421 = get_local ptr slice, __tmp_arg282
        mem_copy_val v4421, v4419
        v4422 = call print_str_1(v4420, v4421)
        v4423 = get_local ptr {  }, f_109, !1654
        v4424 = get_local ptr {  }, self_73, !1654
        mem_copy_val v4424, v4423
        v4425 = get_global ptr u64, std::debug::STDERR, !1667
        v4426 = load v4425, !1654
        v4427 = get_local ptr u64, fd_53, !1668
        store v4426 to v4427, !1669
        v4428 = get_local ptr u64, fd_53, !1670
        v4429 = load v4428, !1671
        v4430 = asm(id: v58, fd: v4429) -> (), !1672 {
            ecal   id fd zero zero, !113
        }
        v4431 = get_local ptr string<61>, __const171
        v4432 = get_local ptr { u64, u64 }, arg_110
        v4433 = get_local ptr { u64, u64 }, _______________________________________________________, !1673
        mem_copy_val v4433, v4432
        v4434 = get_local ptr { u64 }, __anon_412, !1674
        v4435 = const u64 0
        v4436 = get_elem_ptr v4434, ptr u64, v4435, !1674
        v4437 = const u64 0, !1674
        store v4437 to v4436, !1674
        v4438 = get_local ptr { u64 }, arg_112
        mem_copy_val v4438, v4434
        v4439 = get_local ptr {  }, __anon_413, !1675
        v4440 = get_local ptr {  }, f_111
        mem_copy_val v4440, v4439
        v4441 = get_local ptr {  }, f_111, !1675
        v4442 = get_local ptr string<61>, __anon_414
        mem_copy_val v4442, v4431
        v4443 = ptr_to_int v4442 to u64, !1675
        v4444 = get_local ptr { u64, u64 }, __anon_415, !1675
        v4445 = const u64 0
        v4446 = get_elem_ptr v4444, ptr u64, v4445
        store v4443 to v4446, !1675
        v4447 = const u64 1
        v4448 = get_elem_ptr v4444, ptr u64, v4447
        v4449 = const u64 61
        store v4449 to v4448, !1675
        v4450 = get_local ptr slice, __anon_416, !1675
        mem_copy_bytes v4450, v4444, 16
        v4451 = get_local ptr {  }, __tmp_arg283
        mem_copy_val v4451, v4441
        v4452 = get_local ptr slice, __tmp_arg284
        mem_copy_val v4452, v4450
        v4453 = call print_str_1(v4451, v4452)
        v4454 = get_local ptr { u64 }, arg_112
        v4455 = get_local ptr {  }, f_111
        v4456 = get_local ptr { u64 }, self_74
        mem_copy_val v4456, v4454
        v4457 = get_local ptr ptr {  }, _f_11
        store v4455 to v4457
        v4458 = get_local ptr { u64 }, self_74, !1676
        v4459 = get_local ptr { u64 }, __matched_value_18, !1677
        mem_copy_val v4459, v4458
        v4460 = get_local ptr { u64 }, __matched_value_18, !1676
        v4461 = const u64 0
        v4462 = get_elem_ptr v4460, ptr u64, v4461, !1676
        v4463 = get_local ptr u64, self_018, !1680
        mem_copy_val v4463, v4462
        v4464 = get_local ptr u64, other_18, !1680
        v4465 = const u64 0, !1676
        store v4465 to v4464, !1680
        v4466 = get_local ptr u64, self_018, !1681
        v4467 = load v4466, !1680
        v4468 = get_local ptr u64, other_18, !1682
        v4469 = load v4468, !1680
        v4470 = cmp eq v4467 v4469, !1680
        cbr v4470, fmt_142_block0(), fmt_142_block1(), !1678

        fmt_142_block0():
        v4471 = get_local ptr string<15>, __const172
        v4472 = get_local ptr ptr {  }, _f_11, !1683
        v4473 = load v4472
        v4474 = get_local ptr string<15>, __anon_029
        mem_copy_val v4474, v4471
        v4475 = ptr_to_int v4474 to u64, !1684
        v4476 = get_local ptr { u64, u64 }, __anon_1120, !1684
        v4477 = const u64 0
        v4478 = get_elem_ptr v4476, ptr u64, v4477
        store v4475 to v4478, !1684
        v4479 = const u64 1
        v4480 = get_elem_ptr v4476, ptr u64, v4479
        v4481 = const u64 15
        store v4481 to v4480, !1684
        v4482 = get_local ptr slice, __anon_2115, !1684
        mem_copy_bytes v4482, v4476, 16
        v4483 = get_local ptr {  }, __tmp_arg285
        mem_copy_val v4483, v4473
        v4484 = get_local ptr slice, __tmp_arg286
        mem_copy_val v4484, v4482
        v4485 = call print_str_1(v4483, v4484)
        v4486 = get_local ptr string<1>, __const173
        v4487 = get_local ptr {  }, f_111, !1675
        v4488 = get_local ptr string<1>, __anon_417
        mem_copy_val v4488, v4486
        v4489 = ptr_to_int v4488 to u64, !1675
        v4490 = get_local ptr { u64, u64 }, __anon_418, !1675
        v4491 = const u64 0
        v4492 = get_elem_ptr v4490, ptr u64, v4491
        store v4489 to v4492, !1675
        v4493 = const u64 1
        v4494 = get_elem_ptr v4490, ptr u64, v4493
        v4495 = const u64 1
        store v4495 to v4494, !1675
        v4496 = get_local ptr slice, __anon_419, !1675
        mem_copy_bytes v4496, v4490, 16
        v4497 = get_local ptr {  }, __tmp_arg287
        mem_copy_val v4497, v4487
        v4498 = get_local ptr slice, __tmp_arg288
        mem_copy_val v4498, v4496
        v4499 = call print_str_1(v4497, v4498)
        v4500 = get_local ptr {  }, f_111, !1675
        v4501 = get_local ptr {  }, self_75, !1675
        mem_copy_val v4501, v4500
        v4502 = get_global ptr u64, std::debug::STDERR, !1685
        v4503 = load v4502, !1675
        v4504 = get_local ptr u64, fd_54, !1686
        store v4503 to v4504, !1687
        v4505 = get_local ptr u64, fd_54, !1688
        v4506 = load v4505, !1689
        v4507 = asm(id: v58, fd: v4506) -> (), !1690 {
            ecal   id fd zero zero, !113
        }
        v4508 = get_local ptr string<125>, __const174
        v4509 = get_local ptr string<1>, __const175
        v4510 = get_local ptr { u64 }, arg_112
        v4511 = get_local ptr { u64 }, ________________________________________________________, !1691
        mem_copy_val v4511, v4510
        v4512 = get_local ptr { { u64, u64 }, u64 }, __ret_val25
        v4513 = call new_143(v4512)
        v4514 = get_local ptr { { u64, u64 }, u64 }, __aggr_memcpy_029
        mem_copy_val v4514, v4513
        v4515 = get_local ptr { { u64, u64 }, u64 }, v, !1692
        mem_copy_val v4515, v4514
        v4516 = get_local ptr { { u64, u64 }, u64 }, v, !1693
        v4517 = const u64 1, !1694
        v4518 = call push_146(v4516, v4517), !1697
        v4519 = get_local ptr { { u64, u64 }, u64 }, v, !1698
        v4520 = const u64 2, !1699
        v4521 = call push_146(v4519, v4520), !1702
        v4522 = get_local ptr { { u64, u64 }, u64 }, v, !1703
        v4523 = const u64 3, !1704
        v4524 = call push_146(v4522, v4523), !1707
        v4525 = get_local ptr { { u64, u64 }, u64 }, v, !1708
        v4526 = get_local ptr { { u64, u64 }, u64 }, arg_114
        mem_copy_val v4526, v4525
        v4527 = get_local ptr {  }, __anon_420, !1709
        v4528 = get_local ptr {  }, f_113
        mem_copy_val v4528, v4527
        v4529 = get_local ptr {  }, f_113, !1709
        v4530 = get_local ptr string<125>, __anon_421
        mem_copy_val v4530, v4508
        v4531 = ptr_to_int v4530 to u64, !1709
        v4532 = get_local ptr { u64, u64 }, __anon_422, !1709
        v4533 = const u64 0
        v4534 = get_elem_ptr v4532, ptr u64, v4533
        store v4531 to v4534, !1709
        v4535 = const u64 1
        v4536 = get_elem_ptr v4532, ptr u64, v4535
        v4537 = const u64 125
        store v4537 to v4536, !1709
        v4538 = get_local ptr slice, __anon_423, !1709
        mem_copy_bytes v4538, v4532, 16
        v4539 = get_local ptr {  }, __tmp_arg289
        mem_copy_val v4539, v4529
        v4540 = get_local ptr slice, __tmp_arg290
        mem_copy_val v4540, v4538
        v4541 = call print_str_1(v4539, v4540)
        v4542 = get_local ptr { { u64, u64 }, u64 }, arg_114
        v4543 = get_local ptr {  }, f_113
        v4544 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg362
        mem_copy_val v4544, v4542
        v4545 = call fmt_152(v4544, v4543)
        v4546 = get_local ptr {  }, f_113, !1709
        v4547 = get_local ptr string<1>, __anon_424
        mem_copy_val v4547, v4509
        v4548 = ptr_to_int v4547 to u64, !1709
        v4549 = get_local ptr { u64, u64 }, __anon_425, !1709
        v4550 = const u64 0
        v4551 = get_elem_ptr v4549, ptr u64, v4550
        store v4548 to v4551, !1709
        v4552 = const u64 1
        v4553 = get_elem_ptr v4549, ptr u64, v4552
        v4554 = const u64 1
        store v4554 to v4553, !1709
        v4555 = get_local ptr slice, __anon_426, !1709
        mem_copy_bytes v4555, v4549, 16
        v4556 = get_local ptr {  }, __tmp_arg291
        mem_copy_val v4556, v4546
        v4557 = get_local ptr slice, __tmp_arg292
        mem_copy_val v4557, v4555
        v4558 = call print_str_1(v4556, v4557)
        v4559 = get_local ptr {  }, f_113, !1709
        v4560 = get_local ptr {  }, self_76, !1709
        mem_copy_val v4560, v4559
        v4561 = get_global ptr u64, std::debug::STDERR, !1710
        v4562 = load v4561, !1709
        v4563 = get_local ptr u64, fd_55, !1711
        store v4562 to v4563, !1712
        v4564 = get_local ptr u64, fd_55, !1713
        v4565 = load v4564, !1714
        v4566 = asm(id: v58, fd: v4565) -> (), !1715 {
            ecal   id fd zero zero, !113
        }
        v4567 = get_local ptr { { u64, u64 }, u64 }, arg_114
        v4568 = get_local ptr { { u64, u64 }, u64 }, _________________________________________________________, !1716
        mem_copy_val v4568, v4567
        v4569 = get_local ptr { { u64, u64 }, u64 }, __ret_val26
        v4570 = call new_143(v4569)
        v4571 = get_local ptr { { u64, u64 }, u64 }, __aggr_memcpy_030
        mem_copy_val v4571, v4570
        v4572 = get_local ptr { { u64, u64 }, u64 }, v_, !1717
        mem_copy_val v4572, v4571
        v4573 = get_local ptr { { u64, u64 }, u64 }, v_, !1718
        v4574 = const u64 1, !1719
        v4575 = call push_146(v4573, v4574), !1722
        v4576 = get_local ptr { { u64, u64 }, u64 }, v_, !1723
        v4577 = const u64 2, !1724
        v4578 = call push_146(v4576, v4577), !1727
        v4579 = get_local ptr { { u64, u64 }, u64 }, v_, !1728
        v4580 = const u64 3, !1729
        v4581 = call push_146(v4579, v4580), !1732
        v4582 = get_local ptr { { u64, u64 }, u64 }, v_, !1733
        v4583 = get_local ptr { { u64, u64 }, u64 }, self_77, !1736
        mem_copy_val v4583, v4582
        v4584 = get_local ptr { { u64, u64 }, u64 }, self_77, !1739
        v4585 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __anon_030, !1741
        v4586 = const u64 0
        v4587 = get_elem_ptr v4585, ptr { { u64, u64 }, u64 }, v4586, !1736
        mem_copy_val v4587, v4584
        v4588 = const u64 1
        v4589 = get_elem_ptr v4585, ptr u64, v4588, !1736
        v4590 = const u64 0, !1742
        store v4590 to v4589, !1743
        v4591 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __tmp_block_arg35
        mem_copy_val v4591, v4585
        v4592 = get_local ptr string<132>, __const176
        v4593 = get_local ptr string<7>, __const177
        v4594 = get_local ptr string<6>, __const178
        v4595 = get_local ptr { { { u64, u64 }, u64 }, u64 }, arg_116
        mem_copy_val v4595, v4591
        v4596 = get_local ptr {  }, __anon_427, !1744
        v4597 = get_local ptr {  }, f_115
        mem_copy_val v4597, v4596
        v4598 = get_local ptr {  }, f_115, !1744
        v4599 = get_local ptr string<132>, __anon_428
        mem_copy_val v4599, v4592
        v4600 = ptr_to_int v4599 to u64, !1744
        v4601 = get_local ptr { u64, u64 }, __anon_429, !1744
        v4602 = const u64 0
        v4603 = get_elem_ptr v4601, ptr u64, v4602
        store v4600 to v4603, !1744
        v4604 = const u64 1
        v4605 = get_elem_ptr v4601, ptr u64, v4604
        v4606 = const u64 132
        store v4606 to v4605, !1744
        v4607 = get_local ptr slice, __anon_430, !1744
        mem_copy_bytes v4607, v4601, 16
        v4608 = get_local ptr {  }, __tmp_arg293
        mem_copy_val v4608, v4598
        v4609 = get_local ptr slice, __tmp_arg294
        mem_copy_val v4609, v4607
        v4610 = call print_str_1(v4608, v4609)
        v4611 = get_local ptr { { { u64, u64 }, u64 }, u64 }, arg_116
        v4612 = get_local ptr {  }, f_115
        v4613 = get_local ptr { { { u64, u64 }, u64 }, u64 }, self_78
        mem_copy_val v4613, v4611
        v4614 = get_local ptr ptr {  }, _f_12
        store v4612 to v4614
        v4615 = get_local ptr ptr {  }, _f_12, !1746
        v4616 = load v4615
        v4617 = get_local ptr string<7>, __anon_031
        mem_copy_val v4617, v4593
        v4618 = ptr_to_int v4617 to u64, !1747
        v4619 = get_local ptr { u64, u64 }, __anon_1121, !1747
        v4620 = const u64 0
        v4621 = get_elem_ptr v4619, ptr u64, v4620
        store v4618 to v4621, !1747
        v4622 = const u64 1
        v4623 = get_elem_ptr v4619, ptr u64, v4622
        v4624 = const u64 7
        store v4624 to v4623, !1747
        v4625 = get_local ptr slice, __anon_2116, !1747
        mem_copy_bytes v4625, v4619, 16
        v4626 = get_local ptr {  }, __tmp_arg345
        mem_copy_val v4626, v4616
        v4627 = get_local ptr slice, __tmp_arg346
        mem_copy_val v4627, v4625
        v4628 = get_local ptr { {  }, bool }, __ret_val17
        v4629 = call debug_struct_77(v4626, v4627, v4628)
        v4630 = get_local ptr { {  }, bool }, __aggr_memcpy_031
        mem_copy_val v4630, v4629
        v4631 = get_local ptr string<6>, __anon_3111
        mem_copy_val v4631, v4594
        v4632 = ptr_to_int v4631 to u64, !1748
        v4633 = get_local ptr { u64, u64 }, __anon_452, !1748
        v4634 = const u64 0
        v4635 = get_elem_ptr v4633, ptr u64, v4634
        store v4632 to v4635, !1748
        v4636 = const u64 1
        v4637 = get_elem_ptr v4633, ptr u64, v4636
        v4638 = const u64 6
        store v4638 to v4637, !1748
        v4639 = get_local ptr slice, __anon_521, !1748
        mem_copy_bytes v4639, v4633, 16
        v4640 = get_local ptr { { { u64, u64 }, u64 }, u64 }, self_78, !1749
        v4641 = const u64 0
        v4642 = get_elem_ptr v4640, ptr { { u64, u64 }, u64 }, v4641, !1750
        v4643 = get_local ptr { {  }, bool }, type_fix7
        mem_copy_val v4643, v4630
        v4644 = get_local ptr ptr { {  }, bool }, self_019, !1753
        store v4643 to v4644, !1753
        v4645 = get_local ptr slice, name_1, !1753
        mem_copy_val v4645, v4639
        v4646 = get_local ptr { { u64, u64 }, u64 }, value_4, !1753
        mem_copy_val v4646, v4642
        v4647 = get_local ptr ptr { {  }, bool }, self_019, !1754
        v4648 = load v4647, !1753
        v4649 = const u64 1
        v4650 = get_elem_ptr v4648, ptr bool, v4649, !1755
        v4651 = load v4650, !1753
        cbr v4651, fmt_160_field_161_block0(), fmt_160_field_161_block2(), !1756

        fmt_142_block1():
        v4652 = const u64 14757395258967588866, !1677
        revert v4652, !1677

        fmt_160_field_161_block0():
        v4653 = get_local ptr string<2>, __const179
        v4654 = get_local ptr ptr { {  }, bool }, self_019, !1757
        v4655 = load v4654, !1753
        v4656 = const u64 0
        v4657 = get_elem_ptr v4655, ptr {  }, v4656, !1758
        v4658 = get_local ptr string<2>, __anon_007, !1753
        mem_copy_val v4658, v4653
        v4659 = ptr_to_int v4658 to u64, !1759
        v4660 = get_local ptr { u64, u64 }, __anon_1016, !1760
        v4661 = const u64 0
        v4662 = get_elem_ptr v4660, ptr u64, v4661, !1753
        store v4659 to v4662, !1761
        v4663 = const u64 1
        v4664 = get_elem_ptr v4660, ptr u64, v4663, !1753
        v4665 = const u64 2
        store v4665 to v4664, !1762
        v4666 = get_local ptr slice, __anon_2014, !1763
        mem_copy_bytes v4666, v4660, 16, !1753
        v4667 = get_local ptr {  }, __tmp_arg295
        mem_copy_val v4667, v4657
        v4668 = get_local ptr slice, __tmp_arg296
        mem_copy_val v4668, v4666
        v4669 = call print_str_1(v4667, v4668)
        br fmt_160_field_161_block2(), !1753

        fmt_160_field_161_block2():
        v4670 = get_local ptr string<2>, __const180
        v4671 = get_local ptr ptr { {  }, bool }, self_019, !1764
        v4672 = load v4671, !1753
        v4673 = const u64 0
        v4674 = get_elem_ptr v4672, ptr {  }, v4673, !1765
        v4675 = get_local ptr slice, name_1, !1766
        v4676 = get_local ptr {  }, __tmp_arg297
        mem_copy_val v4676, v4674
        v4677 = get_local ptr slice, __tmp_arg298
        mem_copy_val v4677, v4675
        v4678 = call print_str_1(v4676, v4677)
        v4679 = get_local ptr ptr { {  }, bool }, self_019, !1767
        v4680 = load v4679, !1753
        v4681 = const u64 0
        v4682 = get_elem_ptr v4680, ptr {  }, v4681, !1768
        v4683 = get_local ptr string<2>, __anon_3012, !1753
        mem_copy_val v4683, v4670
        v4684 = ptr_to_int v4683 to u64, !1769
        v4685 = get_local ptr { u64, u64 }, __anon_4012, !1770
        v4686 = const u64 0
        v4687 = get_elem_ptr v4685, ptr u64, v4686, !1753
        store v4684 to v4687, !1771
        v4688 = const u64 1
        v4689 = get_elem_ptr v4685, ptr u64, v4688, !1753
        v4690 = const u64 2
        store v4690 to v4689, !1772
        v4691 = get_local ptr slice, __anon_502, !1773
        mem_copy_bytes v4691, v4685, 16, !1753
        v4692 = get_local ptr {  }, __tmp_arg299
        mem_copy_val v4692, v4682
        v4693 = get_local ptr slice, __tmp_arg300
        mem_copy_val v4693, v4691
        v4694 = call print_str_1(v4692, v4693)
        v4695 = get_local ptr { { u64, u64 }, u64 }, value_4, !1774
        v4696 = get_local ptr ptr { {  }, bool }, self_019, !1775
        v4697 = load v4696, !1753
        v4698 = const u64 0
        v4699 = get_elem_ptr v4697, ptr {  }, v4698, !1776
        v4700 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg363
        mem_copy_val v4700, v4695
        v4701 = call fmt_152(v4700, v4699)
        v4702 = get_local ptr ptr { {  }, bool }, self_019, !1777
        v4703 = load v4702, !1753
        v4704 = const u64 1
        v4705 = get_elem_ptr v4703, ptr bool, v4704, !1778
        v4706 = const bool true, !805
        store v4706 to v4705, !1779
        v4707 = get_local ptr ptr { {  }, bool }, self_019, !1780
        v4708 = load v4707, !1753
        v4709 = get_local ptr { {  }, bool }, __tmp_block_arg36
        mem_copy_val v4709, v4708
        v4710 = get_local ptr string<5>, __const181
        v4711 = get_local ptr string<5>, __anon_615
        mem_copy_val v4711, v4710
        v4712 = ptr_to_int v4711 to u64, !1781
        v4713 = get_local ptr { u64, u64 }, __anon_715, !1781
        v4714 = const u64 0
        v4715 = get_elem_ptr v4713, ptr u64, v4714
        store v4712 to v4715, !1781
        v4716 = const u64 1
        v4717 = get_elem_ptr v4713, ptr u64, v4716
        v4718 = const u64 5
        store v4718 to v4717, !1781
        v4719 = get_local ptr slice, __anon_815, !1781
        mem_copy_bytes v4719, v4713, 16
        v4720 = get_local ptr { { { u64, u64 }, u64 }, u64 }, self_78, !1782
        v4721 = const u64 1
        v4722 = get_elem_ptr v4720, ptr u64, v4721, !1783
        v4723 = load v4722
        v4724 = get_local ptr { {  }, bool }, type_fix05
        mem_copy_val v4724, v4709
        v4725 = get_local ptr slice, __tmp_arg359
        mem_copy_val v4725, v4719
        v4726 = get_local ptr { {  }, bool }, __ret_val22
        v4727 = call field_120(v4724, v4725, v4723, v4726)
        v4728 = get_local ptr { {  }, bool }, __aggr_memcpy_032
        mem_copy_val v4728, v4727
        v4729 = get_local ptr { {  }, bool }, type_fix14
        mem_copy_val v4729, v4728
        v4730 = call finish_76(v4729), !1786
        v4731 = get_local ptr string<1>, __const182
        v4732 = get_local ptr {  }, f_115, !1744
        v4733 = get_local ptr string<1>, __anon_431
        mem_copy_val v4733, v4731
        v4734 = ptr_to_int v4733 to u64, !1744
        v4735 = get_local ptr { u64, u64 }, __anon_432, !1744
        v4736 = const u64 0
        v4737 = get_elem_ptr v4735, ptr u64, v4736
        store v4734 to v4737, !1744
        v4738 = const u64 1
        v4739 = get_elem_ptr v4735, ptr u64, v4738
        v4740 = const u64 1
        store v4740 to v4739, !1744
        v4741 = get_local ptr slice, __anon_433, !1744
        mem_copy_bytes v4741, v4735, 16
        v4742 = get_local ptr {  }, __tmp_arg301
        mem_copy_val v4742, v4732
        v4743 = get_local ptr slice, __tmp_arg302
        mem_copy_val v4743, v4741
        v4744 = call print_str_1(v4742, v4743)
        v4745 = get_local ptr {  }, f_115, !1744
        v4746 = get_local ptr {  }, self_79, !1744
        mem_copy_val v4746, v4745
        v4747 = get_global ptr u64, std::debug::STDERR, !1787
        v4748 = load v4747, !1744
        v4749 = get_local ptr u64, fd_56, !1788
        store v4748 to v4749, !1789
        v4750 = get_local ptr u64, fd_56, !1790
        v4751 = load v4750, !1791
        v4752 = asm(id: v58, fd: v4751) -> (), !1792 {
            ecal   id fd zero zero, !113
        }
        v4753 = get_local ptr string<28>, __const183
        v4754 = get_local ptr string<1>, __const184
        v4755 = get_local ptr { { { u64, u64 }, u64 }, u64 }, arg_116
        v4756 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __________________________________________________________, !1793
        mem_copy_val v4756, v4755
        v4757 = get_local ptr u64, arg_118
        v4758 = const u64 11, !1794
        store v4758 to v4757
        v4759 = get_local ptr {  }, __anon_434, !1795
        v4760 = get_local ptr {  }, f_117
        mem_copy_val v4760, v4759
        v4761 = get_local ptr {  }, f_117, !1795
        v4762 = get_local ptr string<28>, __anon_435
        mem_copy_val v4762, v4753
        v4763 = ptr_to_int v4762 to u64, !1795
        v4764 = get_local ptr { u64, u64 }, __anon_436, !1795
        v4765 = const u64 0
        v4766 = get_elem_ptr v4764, ptr u64, v4765
        store v4763 to v4766, !1795
        v4767 = const u64 1
        v4768 = get_elem_ptr v4764, ptr u64, v4767
        v4769 = const u64 28
        store v4769 to v4768, !1795
        v4770 = get_local ptr slice, __anon_437, !1795
        mem_copy_bytes v4770, v4764, 16
        v4771 = get_local ptr {  }, __tmp_arg303
        mem_copy_val v4771, v4761
        v4772 = get_local ptr slice, __tmp_arg304
        mem_copy_val v4772, v4770
        v4773 = call print_str_1(v4771, v4772)
        v4774 = get_local ptr u64, arg_118
        v4775 = load v4774
        v4776 = get_local ptr {  }, f_117
        v4777 = call fmt_38(v4775, v4776)
        v4778 = get_local ptr {  }, f_117, !1795
        v4779 = get_local ptr string<1>, __anon_438
        mem_copy_val v4779, v4754
        v4780 = ptr_to_int v4779 to u64, !1795
        v4781 = get_local ptr { u64, u64 }, __anon_439, !1795
        v4782 = const u64 0
        v4783 = get_elem_ptr v4781, ptr u64, v4782
        store v4780 to v4783, !1795
        v4784 = const u64 1
        v4785 = get_elem_ptr v4781, ptr u64, v4784
        v4786 = const u64 1
        store v4786 to v4785, !1795
        v4787 = get_local ptr slice, __anon_440, !1795
        mem_copy_bytes v4787, v4781, 16
        v4788 = get_local ptr {  }, __tmp_arg305
        mem_copy_val v4788, v4778
        v4789 = get_local ptr slice, __tmp_arg306
        mem_copy_val v4789, v4787
        v4790 = call print_str_1(v4788, v4789)
        v4791 = get_local ptr {  }, f_117, !1795
        v4792 = get_local ptr {  }, self_80, !1795
        mem_copy_val v4792, v4791
        v4793 = get_global ptr u64, std::debug::STDERR, !1796
        v4794 = load v4793, !1795
        v4795 = get_local ptr u64, fd_57, !1797
        store v4794 to v4795, !1798
        v4796 = get_local ptr u64, fd_57, !1799
        v4797 = load v4796, !1800
        v4798 = asm(id: v58, fd: v4797) -> (), !1801 {
            ecal   id fd zero zero, !113
        }
        v4799 = get_local ptr u64, arg_118
        v4800 = load v4799
        ret u64 v4800
    }

    pub fn print_str_1(self: ptr {  }, s: ptr slice) -> (), !1804 {
        local slice __tmp_arg
        local slice __tmp_arg0

        entry(self: ptr {  }, s: ptr slice):
        v0 = get_global ptr u64, std::debug::STDERR, !1805
        v1 = load v0
        v2 = get_local ptr slice, __tmp_arg
        mem_copy_val v2, s
        v3 = call as_ptr_3(v2)
        v4 = get_local ptr slice, __tmp_arg0
        mem_copy_val v4, s
        v5 = call len_4(v4)
        v6 = call syscall_write_2(v1, v3, v5), !1808
        v7 = const unit ()
        ret () v7
    }

    fn syscall_write_2(fd !1809: u64, buf !1810: u64, count !1811: u64) -> (), !1814 {
        local u64 buf_
        local u64 count_
        local u64 fd_

        entry(fd: u64, buf: u64, count: u64):
        v0 = get_local ptr u64, fd_
        store fd to v0
        v1 = get_local ptr u64, buf_
        store buf to v1
        v2 = get_local ptr u64, count_
        store count to v2
        v3 = get_local ptr u64, fd_, !1815
        v4 = load v3
        v5 = get_local ptr u64, buf_, !1816
        v6 = load v5
        v7 = get_local ptr u64, count_, !1817
        v8 = load v7
        v9 = const u64 1000, !1818
        v10 = asm(id: v9, fd: v4, buf: v6, count: v8) -> (), !1819 {
            ecal   id fd buf count, !1820
        }
        v11 = const unit ()
        ret () v11
    }

    pub fn as_ptr_3(self: ptr slice) -> u64, !1823 {
        local mut { u64, u64 } __aggr_memcpy_0
        local { u64, u64 } __tuple_1
        local u64 ptr
        local slice self_

        entry(self: ptr slice):
        v0 = get_local ptr slice, self_
        mem_copy_val v0, self
        v1 = get_local ptr slice, self_, !1824
        v2 = asm(s: v1) -> ptr { u64, u64 } s {
        }
        v3 = get_local ptr { u64, u64 }, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local ptr { u64, u64 }, __tuple_1, !1825
        mem_copy_val v4, v3
        v5 = get_local ptr u64, ptr, !1825
        v6 = get_local ptr { u64, u64 }, __aggr_memcpy_0
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        mem_copy_val v5, v8
        v9 = load v8
        ret u64 v9
    }

    pub fn len_4(self: ptr slice) -> u64, !1828 {
        local mut { u64, u64 } __aggr_memcpy_0
        local { u64, u64 } __tuple_2
        local u64 len
        local slice self_

        entry(self: ptr slice):
        v0 = get_local ptr slice, self_
        mem_copy_val v0, self
        v1 = get_local ptr slice, self_, !1829
        v2 = asm(s: v1) -> ptr { u64, u64 } s {
        }
        v3 = get_local ptr { u64, u64 }, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local ptr { u64, u64 }, __tuple_2, !1830
        mem_copy_val v4, v3
        v5 = get_local ptr u64, len, !1830
        v6 = get_local ptr { u64, u64 }, __aggr_memcpy_0
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7
        mem_copy_val v5, v8
        v9 = load v8
        ret u64 v9
    }

    pub fn fmt_8(self !1831: bool, f !1832: ptr {  }) -> (), !1835 {
        local string<4> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<5> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<4> __const = const string<4> "true"
        local string<5> __const0 = const string<5> "false"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local ptr {  } f_
        local bool self_

        entry(self: bool, f: ptr {  }):
        v0 = get_local ptr bool, self_
        store self to v0
        v1 = get_local ptr ptr {  }, f_
        store f to v1
        v2 = get_local ptr bool, self_, !1836
        v3 = load v2
        cbr v3, block0(), block1(), !1836

        block0():
        v4 = get_local ptr string<4>, __const
        v5 = get_local ptr ptr {  }, f_, !1837
        v6 = load v5
        v7 = get_local ptr string<4>, __anon_0
        mem_copy_val v7, v4
        v8 = ptr_to_int v7 to u64, !1838
        v9 = get_local ptr { u64, u64 }, __anon_1, !1838
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr u64, v10
        store v8 to v11, !1838
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 4
        store v14 to v13, !1838
        v15 = get_local ptr slice, __anon_2, !1838
        mem_copy_bytes v15, v9, 16
        v16 = get_local ptr {  }, __tmp_arg
        mem_copy_val v16, v6
        v17 = get_local ptr slice, __tmp_arg0
        mem_copy_val v17, v15
        v18 = call print_str_1(v16, v17)
        br block2()

        block1():
        v19 = get_local ptr string<5>, __const0
        v20 = get_local ptr ptr {  }, f_, !1839
        v21 = load v20
        v22 = get_local ptr string<5>, __anon_3
        mem_copy_val v22, v19
        v23 = ptr_to_int v22 to u64, !1840
        v24 = get_local ptr { u64, u64 }, __anon_4, !1840
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25
        store v23 to v26, !1840
        v27 = const u64 1
        v28 = get_elem_ptr v24, ptr u64, v27
        v29 = const u64 5
        store v29 to v28, !1840
        v30 = get_local ptr slice, __anon_5, !1840
        mem_copy_bytes v30, v24, 16
        v31 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v31, v21
        v32 = get_local ptr slice, __tmp_arg2
        mem_copy_val v32, v30
        v33 = call print_str_1(v31, v32)
        br block2()

        block2():
        v34 = const unit ()
        ret () v34
    }

    pub fn fmt_10(self !1841: u8, f !1842: ptr {  }) -> (), !1845 {
        local [u8; 64] __anon_0
        local u64 count_
        local mut [u8; 64] digits
        local ptr {  } f_
        local mut u64 i
        local u8 other_
        local u8 other_0
        local u8 other_1
        local u64 other_2
        local u64 other_3
        local u8 self_
        local {  } self_0
        local u8 self_00
        local u8 self_1
        local u8 self_2
        local u64 self_3
        local u64 self_4
        local u64 self_5
        local mut u8 value__

        entry(self: u8, f: ptr {  }):
        v0 = get_local ptr u8, self_
        store self to v0
        v1 = get_local ptr ptr {  }, f_
        store f to v1
        v2 = get_local ptr ptr {  }, f_, !1846
        v3 = load v2
        v4 = get_local ptr {  }, self_0, !1849
        mem_copy_val v4, v3
        v5 = get_local ptr u8, self_, !1851
        v6 = get_local ptr u8, value__, !1853
        mem_copy_val v6, v5
        v7 = get_local ptr [u8; 64], __anon_0, !1855
        v8 = const u64 0
        br print_u8_11_array_init_loop(v8), !1849

        print_u8_11_array_init_loop(v9: u64):
        v10 = get_elem_ptr v7, ptr u8, v9, !1849
        v11 = const u8 48, !1856
        store v11 to v10, !1857
        v12 = const u64 1
        v13 = add v9, v12, !1849
        v14 = const u64 64
        v15 = cmp lt v13 v14, !1849
        cbr v15, print_u8_11_array_init_loop(v13), print_u8_11_array_init_exit(), !1849

        print_u8_11_array_init_exit():
        v16 = get_local ptr [u8; 64], digits, !1859
        mem_copy_val v16, v7
        v17 = get_local ptr u64, i, !1861
        v18 = const u64 63, !1862
        store v18 to v17, !1863
        br print_u8_11_while(), !1849

        print_u8_11_while():
        v19 = const bool true, !1864
        cbr v19, print_u8_11_while_body(), print_u8_11_end_while(), !1849

        print_u8_11_while_body():
        v20 = get_local ptr u8, value__, !1866
        v21 = get_local ptr u8, self_00, !1869
        mem_copy_val v21, v20
        v22 = get_local ptr u8, other_, !1870
        v23 = const u8 10, !1871
        store v23 to v22, !1872
        v24 = load v20, !1873
        v25 = get_local ptr u8, other_, !1875
        v26 = load v25, !1876
        v27 = mod v24, v26, !1877
        v28 = const u8 48, !1878
        v29 = call add_12(v27, v28), !1881
        v30 = get_local ptr [u8; 64], digits, !1883
        v31 = get_local ptr u64, i, !1885
        v32 = load v31, !1849
        v33 = get_elem_ptr v30, ptr u8, v32, !1886
        store v29 to v33, !1887
        v34 = get_local ptr u8, value__, !1889
        v35 = get_local ptr u8, self_1, !1892
        mem_copy_val v35, v34
        v36 = get_local ptr u8, other_0, !1893
        v37 = const u8 10, !1894
        store v37 to v36, !1895
        v38 = load v34, !1896
        v39 = get_local ptr u8, other_0, !1898
        v40 = load v39, !1899
        v41 = div v38, v40, !1900
        v42 = get_local ptr u8, value__, !1902
        store v41 to v42, !1903
        v43 = get_local ptr u8, value__, !1905
        v44 = get_local ptr u8, self_2, !1908
        mem_copy_val v44, v43
        v45 = get_local ptr u8, other_1, !1909
        v46 = const u8 0, !1910
        store v46 to v45, !1911
        v47 = load v43, !1912
        v48 = get_local ptr u8, other_1, !1914
        v49 = load v48, !1915
        v50 = cmp eq v47 v49, !1916
        cbr v50, print_u8_11_end_while(), print_u8_11_block1(), !1917

        print_u8_11_block1():
        v51 = get_local ptr u64, i, !1919
        v52 = get_local ptr u64, self_3, !1922
        mem_copy_val v52, v51
        v53 = get_local ptr u64, other_2, !1923
        v54 = const u64 1, !1924
        store v54 to v53, !1925
        v55 = load v51, !1926
        v56 = get_local ptr u64, other_2, !1927
        v57 = load v56, !1928
        v58 = sub v55, v57, !1929
        v59 = get_local ptr u64, i, !1930
        store v58 to v59, !1931
        br print_u8_11_while(), !1849

        print_u8_11_end_while():
        v60 = get_global ptr u64, std::debug::STDERR, !1933
        v61 = load v60, !1849
        v62 = get_local ptr [u8; 64], digits, !1935
        v63 = ptr_to_int v62 to u64, !1937
        v64 = get_local ptr u64, i, !1939
        v65 = get_local ptr u64, self_4, !1942
        store v63 to v65, !1943
        v66 = get_local ptr u64, count_, !1944
        mem_copy_val v66, v64
        v67 = get_local ptr u64, self_4, !1946
        v68 = load v67, !1947
        v69 = load v64, !1948
        v70 = const u64 1
        v71 = mul v70, v69, !1949
        v72 = add v68, v71, !1950
        v73 = get_local ptr u64, i, !1952
        v74 = get_local ptr u64, self_5, !1955
        v75 = const u64 64, !1956
        store v75 to v74, !1957
        v76 = get_local ptr u64, other_3, !1958
        mem_copy_val v76, v73
        v77 = get_local ptr u64, self_5, !1959
        v78 = load v77, !1960
        v79 = load v73, !1961
        v80 = sub v78, v79, !1962
        v81 = call syscall_write_2(v61, v72, v80), !1965
        v82 = const unit ()
        ret () v82
    }

    pub fn add_12(self !1966: u8, other !1967: u8) -> u8, !1970 {
        local u64 max_u8_u64
        local u8 other_
        local u64 res_u64
        local u8 self_
        local u8 val_0
        local u8 val_1
        local u64 val_2
        local u64 val_3

        entry(self: u8, other: u8):
        v0 = get_local ptr u8, self_
        store self to v0
        v1 = get_local ptr u8, other_
        store other to v1
        v2 = get_local ptr u8, self_, !1974
        v3 = load v2, !1975
        v4 = asm(input: v3) -> u64 input, !1977 {
        }
        v5 = get_local ptr u8, other_, !1978
        v6 = get_local ptr u8, val_0, !1981
        mem_copy_val v6, v5
        v7 = load v5, !1981
        v8 = asm(input: v7) -> u64 input, !1982 {
        }
        v9 = add v4, v8
        v10 = get_local ptr u64, res_u64, !1983
        store v9 to v10, !1983
        v11 = get_local ptr u8, val_1, !1986
        v12 = const u8 255, !170
        store v12 to v11, !1986
        v13 = get_local ptr u8, val_1, !1987
        v14 = load v13, !1986
        v15 = asm(input: v14) -> u64 input, !1988 {
        }
        v16 = get_local ptr u64, max_u8_u64, !1989
        store v15 to v16, !1989
        v17 = get_local ptr u64, res_u64, !1990
        v18 = load v17
        v19 = get_local ptr u64, max_u8_u64, !1991
        v20 = load v19
        v21 = cmp gt v18 v20
        cbr v21, block0(), block4(), !1992

        block0():
        v22 = asm() -> u64 flag, !2000 {
        }
        v23 = get_global ptr u64, std::flags::F_WRAPPING_DISABLE_MASK, !2002
        v24 = load v23, !2003
        v25 = and v22, v24, !2003
        v26 = const u64 0, !2004
        v27 = cmp eq v25 v26, !2003
        cbr v27, block1(), block2(), !1993

        block1():
        v28 = const u64 0, !2005
        revert v28, !2006

        block2():
        v29 = get_local ptr u64, res_u64, !2007
        v30 = load v29
        v31 = get_local ptr u64, max_u8_u64, !2008
        v32 = load v31
        v33 = const u64 1, !2009
        v34 = add v32, v33
        v35 = mod v30, v34
        v36 = get_local ptr u64, val_2, !2012
        store v35 to v36, !2012
        v37 = get_local ptr u64, val_2, !2014
        v38 = load v37, !2012
        v39 = asm(input: v38) -> u8 input, !2016 {
        }
        br block5(v39)

        block4():
        v40 = get_local ptr u64, res_u64, !2017
        v41 = get_local ptr u64, val_3, !2020
        mem_copy_val v41, v40
        v42 = load v40, !2020
        v43 = asm(input: v42) -> u8 input, !2021 {
        }
        br block5(v43)

        block5(v44: u8):
        ret u8 v44
    }

    pub fn fmt_24(self !2022: u64, f !2023: ptr {  }) -> (), !2026 {
        local [u8; 64] __anon_0
        local u64 count_
        local u8 digit
        local mut [u8; 64] digits
        local ptr {  } f_
        local mut u64 i
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_
        local {  } self_0
        local u64 self_00
        local u64 self_1
        local u64 self_2
        local u64 self_3
        local u64 self_4
        local u64 self_5
        local mut u64 value__

        entry(self: u64, f: ptr {  }):
        v0 = get_local ptr u64, self_
        store self to v0
        v1 = get_local ptr ptr {  }, f_
        store f to v1
        v2 = get_local ptr ptr {  }, f_, !2027
        v3 = load v2
        v4 = get_local ptr {  }, self_0, !2030
        mem_copy_val v4, v3
        v5 = get_local ptr u64, self_, !2032
        v6 = get_local ptr u64, value__, !2034
        mem_copy_val v6, v5
        v7 = get_local ptr [u8; 64], __anon_0, !2036
        v8 = const u64 0
        br print_u16_25_array_init_loop(v8), !2030

        print_u16_25_array_init_loop(v9: u64):
        v10 = get_elem_ptr v7, ptr u8, v9, !2030
        v11 = const u8 48, !2037
        store v11 to v10, !2038
        v12 = const u64 1
        v13 = add v9, v12, !2030
        v14 = const u64 64
        v15 = cmp lt v13 v14, !2030
        cbr v15, print_u16_25_array_init_loop(v13), print_u16_25_array_init_exit(), !2030

        print_u16_25_array_init_exit():
        v16 = get_local ptr [u8; 64], digits, !2040
        mem_copy_val v16, v7
        v17 = get_local ptr u64, i, !2042
        v18 = const u64 63, !2043
        store v18 to v17, !2044
        br print_u16_25_while(), !2030

        print_u16_25_while():
        v19 = const bool true, !2045
        cbr v19, print_u16_25_while_body(), print_u16_25_end_while(), !2030

        print_u16_25_while_body():
        v20 = get_local ptr u64, value__, !2047
        v21 = get_local ptr u64, self_00, !2050
        mem_copy_val v21, v20
        v22 = get_local ptr u64, other_, !2051
        v23 = const u64 10, !2052
        store v23 to v22, !2053
        v24 = load v20, !2054
        v25 = get_local ptr u64, other_, !2056
        v26 = load v25, !2057
        v27 = mod v24, v26, !2058
        v28 = asm(v: v27) -> u8 v, !2060 {
        }
        v29 = get_local ptr u8, digit, !2062
        store v28 to v29, !2063
        v30 = get_local ptr u8, digit, !2065
        v31 = load v30, !2030
        v32 = const u8 48, !2066
        v33 = call add_12(v31, v32), !2069
        v34 = get_local ptr [u8; 64], digits, !2071
        v35 = get_local ptr u64, i, !2073
        v36 = load v35, !2030
        v37 = get_elem_ptr v34, ptr u8, v36, !2074
        store v33 to v37, !2075
        v38 = get_local ptr u64, value__, !2077
        v39 = get_local ptr u64, self_1, !2080
        mem_copy_val v39, v38
        v40 = get_local ptr u64, other_0, !2081
        v41 = const u64 10, !2082
        store v41 to v40, !2083
        v42 = load v38, !2084
        v43 = get_local ptr u64, other_0, !2086
        v44 = load v43, !2087
        v45 = div v42, v44, !2088
        v46 = get_local ptr u64, value__, !2090
        store v45 to v46, !2091
        v47 = get_local ptr u64, value__, !2093
        v48 = get_local ptr u64, self_2, !2096
        mem_copy_val v48, v47
        v49 = get_local ptr u64, other_1, !2097
        v50 = const u64 0, !2098
        store v50 to v49, !2099
        v51 = load v47, !2100
        v52 = get_local ptr u64, other_1, !2102
        v53 = load v52, !2103
        v54 = cmp eq v51 v53, !2104
        cbr v54, print_u16_25_end_while(), print_u16_25_block1(), !2105

        print_u16_25_block1():
        v55 = get_local ptr u64, i, !2107
        v56 = get_local ptr u64, self_3, !2110
        mem_copy_val v56, v55
        v57 = get_local ptr u64, other_2, !2111
        v58 = const u64 1, !2112
        store v58 to v57, !2113
        v59 = load v55, !2114
        v60 = get_local ptr u64, other_2, !2115
        v61 = load v60, !2116
        v62 = sub v59, v61, !2117
        v63 = get_local ptr u64, i, !2118
        store v62 to v63, !2119
        br print_u16_25_while(), !2030

        print_u16_25_end_while():
        v64 = get_global ptr u64, std::debug::STDERR, !2121
        v65 = load v64, !2030
        v66 = get_local ptr [u8; 64], digits, !2123
        v67 = ptr_to_int v66 to u64, !2125
        v68 = get_local ptr u64, i, !2127
        v69 = get_local ptr u64, self_4, !2130
        store v67 to v69, !2131
        v70 = get_local ptr u64, count_, !2132
        mem_copy_val v70, v68
        v71 = get_local ptr u64, self_4, !2133
        v72 = load v71, !2134
        v73 = load v68, !2135
        v74 = const u64 1
        v75 = mul v74, v73, !2136
        v76 = add v72, v75, !2137
        v77 = get_local ptr u64, i, !2139
        v78 = get_local ptr u64, self_5, !2142
        v79 = const u64 64, !2143
        store v79 to v78, !2144
        v80 = get_local ptr u64, other_3, !2145
        mem_copy_val v80, v77
        v81 = get_local ptr u64, self_5, !2146
        v82 = load v81, !2147
        v83 = load v77, !2148
        v84 = sub v82, v83, !2149
        v85 = call syscall_write_2(v65, v76, v84), !2152
        v86 = const unit ()
        ret () v86
    }

    pub fn fmt_31(self !2153: u64, f !2154: ptr {  }) -> (), !2157 {
        local [u8; 64] __anon_0
        local u64 count_
        local u8 digit
        local mut [u8; 64] digits
        local ptr {  } f_
        local mut u64 i
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_
        local {  } self_0
        local u64 self_00
        local u64 self_1
        local u64 self_2
        local u64 self_3
        local u64 self_4
        local u64 self_5
        local mut u64 value__

        entry(self: u64, f: ptr {  }):
        v0 = get_local ptr u64, self_
        store self to v0
        v1 = get_local ptr ptr {  }, f_
        store f to v1
        v2 = get_local ptr ptr {  }, f_, !2158
        v3 = load v2
        v4 = get_local ptr {  }, self_0, !2161
        mem_copy_val v4, v3
        v5 = get_local ptr u64, self_, !2163
        v6 = get_local ptr u64, value__, !2165
        mem_copy_val v6, v5
        v7 = get_local ptr [u8; 64], __anon_0, !2167
        v8 = const u64 0
        br print_u32_32_array_init_loop(v8), !2161

        print_u32_32_array_init_loop(v9: u64):
        v10 = get_elem_ptr v7, ptr u8, v9, !2161
        v11 = const u8 48, !2168
        store v11 to v10, !2169
        v12 = const u64 1
        v13 = add v9, v12, !2161
        v14 = const u64 64
        v15 = cmp lt v13 v14, !2161
        cbr v15, print_u32_32_array_init_loop(v13), print_u32_32_array_init_exit(), !2161

        print_u32_32_array_init_exit():
        v16 = get_local ptr [u8; 64], digits, !2171
        mem_copy_val v16, v7
        v17 = get_local ptr u64, i, !2173
        v18 = const u64 63, !2174
        store v18 to v17, !2175
        br print_u32_32_while(), !2161

        print_u32_32_while():
        v19 = const bool true, !2176
        cbr v19, print_u32_32_while_body(), print_u32_32_end_while(), !2161

        print_u32_32_while_body():
        v20 = get_local ptr u64, value__, !2178
        v21 = get_local ptr u64, self_00, !2181
        mem_copy_val v21, v20
        v22 = get_local ptr u64, other_, !2182
        v23 = const u64 10, !2183
        store v23 to v22, !2184
        v24 = load v20, !2185
        v25 = get_local ptr u64, other_, !2187
        v26 = load v25, !2188
        v27 = mod v24, v26, !2189
        v28 = asm(v: v27) -> u8 v, !2191 {
        }
        v29 = get_local ptr u8, digit, !2193
        store v28 to v29, !2194
        v30 = get_local ptr u8, digit, !2196
        v31 = load v30, !2161
        v32 = const u8 48, !2197
        v33 = call add_12(v31, v32), !2200
        v34 = get_local ptr [u8; 64], digits, !2202
        v35 = get_local ptr u64, i, !2204
        v36 = load v35, !2161
        v37 = get_elem_ptr v34, ptr u8, v36, !2205
        store v33 to v37, !2206
        v38 = get_local ptr u64, value__, !2208
        v39 = get_local ptr u64, self_1, !2211
        mem_copy_val v39, v38
        v40 = get_local ptr u64, other_0, !2212
        v41 = const u64 10, !2213
        store v41 to v40, !2214
        v42 = load v38, !2215
        v43 = get_local ptr u64, other_0, !2217
        v44 = load v43, !2218
        v45 = div v42, v44, !2219
        v46 = get_local ptr u64, value__, !2221
        store v45 to v46, !2222
        v47 = get_local ptr u64, value__, !2224
        v48 = get_local ptr u64, self_2, !2227
        mem_copy_val v48, v47
        v49 = get_local ptr u64, other_1, !2228
        v50 = const u64 0, !2229
        store v50 to v49, !2230
        v51 = load v47, !2231
        v52 = get_local ptr u64, other_1, !2233
        v53 = load v52, !2234
        v54 = cmp eq v51 v53, !2235
        cbr v54, print_u32_32_end_while(), print_u32_32_block1(), !2236

        print_u32_32_block1():
        v55 = get_local ptr u64, i, !2238
        v56 = get_local ptr u64, self_3, !2241
        mem_copy_val v56, v55
        v57 = get_local ptr u64, other_2, !2242
        v58 = const u64 1, !2243
        store v58 to v57, !2244
        v59 = load v55, !2245
        v60 = get_local ptr u64, other_2, !2246
        v61 = load v60, !2247
        v62 = sub v59, v61, !2248
        v63 = get_local ptr u64, i, !2249
        store v62 to v63, !2250
        br print_u32_32_while(), !2161

        print_u32_32_end_while():
        v64 = get_global ptr u64, std::debug::STDERR, !2252
        v65 = load v64, !2161
        v66 = get_local ptr [u8; 64], digits, !2254
        v67 = ptr_to_int v66 to u64, !2256
        v68 = get_local ptr u64, i, !2258
        v69 = get_local ptr u64, self_4, !2261
        store v67 to v69, !2262
        v70 = get_local ptr u64, count_, !2263
        mem_copy_val v70, v68
        v71 = get_local ptr u64, self_4, !2264
        v72 = load v71, !2265
        v73 = load v68, !2266
        v74 = const u64 1
        v75 = mul v74, v73, !2267
        v76 = add v72, v75, !2268
        v77 = get_local ptr u64, i, !2270
        v78 = get_local ptr u64, self_5, !2273
        v79 = const u64 64, !2274
        store v79 to v78, !2275
        v80 = get_local ptr u64, other_3, !2276
        mem_copy_val v80, v77
        v81 = get_local ptr u64, self_5, !2277
        v82 = load v81, !2278
        v83 = load v77, !2279
        v84 = sub v82, v83, !2280
        v85 = call syscall_write_2(v65, v76, v84), !2283
        v86 = const unit ()
        ret () v86
    }

    pub fn fmt_38(self !2284: u64, f !2285: ptr {  }) -> (), !2288 {
        local [u8; 64] __anon_0
        local u64 count_
        local u8 digit
        local mut [u8; 64] digits
        local ptr {  } f_
        local mut u64 i
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_
        local {  } self_0
        local u64 self_00
        local u64 self_1
        local u64 self_2
        local u64 self_3
        local u64 self_4
        local u64 self_5
        local mut u64 value__

        entry(self: u64, f: ptr {  }):
        v0 = get_local ptr u64, self_
        store self to v0
        v1 = get_local ptr ptr {  }, f_
        store f to v1
        v2 = get_local ptr ptr {  }, f_, !2289
        v3 = load v2
        v4 = get_local ptr {  }, self_0, !2292
        mem_copy_val v4, v3
        v5 = get_local ptr u64, self_, !2294
        v6 = get_local ptr u64, value__, !2296
        mem_copy_val v6, v5
        v7 = get_local ptr [u8; 64], __anon_0, !2298
        v8 = const u64 0
        br print_u64_39_array_init_loop(v8), !2292

        print_u64_39_array_init_loop(v9: u64):
        v10 = get_elem_ptr v7, ptr u8, v9, !2292
        v11 = const u8 48, !2299
        store v11 to v10, !2300
        v12 = const u64 1
        v13 = add v9, v12, !2292
        v14 = const u64 64
        v15 = cmp lt v13 v14, !2292
        cbr v15, print_u64_39_array_init_loop(v13), print_u64_39_array_init_exit(), !2292

        print_u64_39_array_init_exit():
        v16 = get_local ptr [u8; 64], digits, !2302
        mem_copy_val v16, v7
        v17 = get_local ptr u64, i, !2304
        v18 = const u64 63, !2305
        store v18 to v17, !2306
        br print_u64_39_while(), !2292

        print_u64_39_while():
        v19 = const bool true, !2307
        cbr v19, print_u64_39_while_body(), print_u64_39_end_while(), !2292

        print_u64_39_while_body():
        v20 = get_local ptr u64, value__, !2309
        v21 = get_local ptr u64, self_00, !2312
        mem_copy_val v21, v20
        v22 = get_local ptr u64, other_, !2313
        v23 = const u64 10, !2314
        store v23 to v22, !2315
        v24 = load v20, !2316
        v25 = get_local ptr u64, other_, !2318
        v26 = load v25, !2319
        v27 = mod v24, v26, !2320
        v28 = asm(v: v27) -> u8 v, !2322 {
        }
        v29 = get_local ptr u8, digit, !2324
        store v28 to v29, !2325
        v30 = get_local ptr u8, digit, !2327
        v31 = load v30, !2292
        v32 = const u8 48, !2328
        v33 = call add_12(v31, v32), !2331
        v34 = get_local ptr [u8; 64], digits, !2333
        v35 = get_local ptr u64, i, !2335
        v36 = load v35, !2292
        v37 = get_elem_ptr v34, ptr u8, v36, !2336
        store v33 to v37, !2337
        v38 = get_local ptr u64, value__, !2339
        v39 = get_local ptr u64, self_1, !2342
        mem_copy_val v39, v38
        v40 = get_local ptr u64, other_0, !2343
        v41 = const u64 10, !2344
        store v41 to v40, !2345
        v42 = load v38, !2346
        v43 = get_local ptr u64, other_0, !2348
        v44 = load v43, !2349
        v45 = div v42, v44, !2350
        v46 = get_local ptr u64, value__, !2352
        store v45 to v46, !2353
        v47 = get_local ptr u64, value__, !2355
        v48 = get_local ptr u64, self_2, !2358
        mem_copy_val v48, v47
        v49 = get_local ptr u64, other_1, !2359
        v50 = const u64 0, !2360
        store v50 to v49, !2361
        v51 = load v47, !2362
        v52 = get_local ptr u64, other_1, !2363
        v53 = load v52, !2364
        v54 = cmp eq v51 v53, !2365
        cbr v54, print_u64_39_end_while(), print_u64_39_block1(), !2366

        print_u64_39_block1():
        v55 = get_local ptr u64, i, !2368
        v56 = get_local ptr u64, self_3, !2371
        mem_copy_val v56, v55
        v57 = get_local ptr u64, other_2, !2372
        v58 = const u64 1, !2373
        store v58 to v57, !2374
        v59 = load v55, !2375
        v60 = get_local ptr u64, other_2, !2376
        v61 = load v60, !2377
        v62 = sub v59, v61, !2378
        v63 = get_local ptr u64, i, !2379
        store v62 to v63, !2380
        br print_u64_39_while(), !2292

        print_u64_39_end_while():
        v64 = get_global ptr u64, std::debug::STDERR, !2382
        v65 = load v64, !2292
        v66 = get_local ptr [u8; 64], digits, !2384
        v67 = ptr_to_int v66 to u64, !2386
        v68 = get_local ptr u64, i, !2388
        v69 = get_local ptr u64, self_4, !2391
        store v67 to v69, !2392
        v70 = get_local ptr u64, count_, !2393
        mem_copy_val v70, v68
        v71 = get_local ptr u64, self_4, !2394
        v72 = load v71, !2395
        v73 = load v68, !2396
        v74 = const u64 1
        v75 = mul v74, v73, !2397
        v76 = add v72, v75, !2398
        v77 = get_local ptr u64, i, !2400
        v78 = get_local ptr u64, self_5, !2403
        v79 = const u64 64, !2404
        store v79 to v78, !2405
        v80 = get_local ptr u64, other_3, !2406
        mem_copy_val v80, v77
        v81 = get_local ptr u64, self_5, !2407
        v82 = load v81, !2408
        v83 = load v77, !2409
        v84 = sub v82, v83, !2410
        v85 = call syscall_write_2(v65, v76, v84), !2413
        v86 = const unit ()
        ret () v86
    }

    pub fn fmt_45(self: ptr u256, f !2414: ptr {  }) -> (), !2417 {
        local u64 _
        local u64 __
        local u64 ___
        local mut { u64, u64, u64, u64 } __aggr_memcpy_0
        local [u8; 80] __anon_0
        local u256 __const = const u256 0x000000000000000000000000000000000000000000000000000000000000000a
        local u256 __const0 = const u256 0x000000000000000000000000000000000000000000000000000000000000000a
        local u256 __const1 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u256 __tmp_block_arg
        local u256 __tmp_block_arg0
        local { u64, u64, u64, u64 } __tuple_1
        local mut u256 __wide_result
        local mut u256 __wide_result0
        local mut u256 __wide_zero = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u64 count_
        local u64 digit
        local u8 digit_
        local mut [u8; 80] digits
        local ptr {  } f_
        local mut u64 i
        local u64 other_0
        local u64 other_3
        local u64 other_4
        local u256 rem
        local {  } self_0
        local u256 self_00
        local u256 self_2
        local u256 self_3
        local u64 self_4
        local u64 self_5
        local u64 self_6
        local mut u256 value__

        entry(self: ptr u256, f: ptr {  }):
        v0 = get_local ptr ptr {  }, f_
        store f to v0
        v1 = get_local ptr ptr {  }, f_, !2418
        v2 = load v1
        v3 = get_local ptr {  }, self_0, !2421
        mem_copy_val v3, v2
        v4 = get_local ptr u256, value__, !2423
        mem_copy_val v4, self
        v5 = get_local ptr [u8; 80], __anon_0, !2425
        v6 = const u64 0
        br print_u256_46_array_init_loop(v6), !2421

        print_u256_46_array_init_loop(v7: u64):
        v8 = get_elem_ptr v5, ptr u8, v7, !2421
        v9 = const u8 48, !2426
        store v9 to v8, !2427
        v10 = const u64 1
        v11 = add v7, v10, !2421
        v12 = const u64 80
        v13 = cmp lt v11 v12, !2421
        cbr v13, print_u256_46_array_init_loop(v11), print_u256_46_array_init_exit(), !2421

        print_u256_46_array_init_exit():
        v14 = get_local ptr [u8; 80], digits, !2429
        mem_copy_val v14, v5
        v15 = get_local ptr u64, i, !2431
        v16 = const u64 79, !2432
        store v16 to v15, !2433
        br print_u256_46_while(), !2421

        print_u256_46_while():
        v17 = const bool true, !2434
        cbr v17, print_u256_46_while_body(), print_u256_46_end_while(), !2421

        print_u256_46_while_body():
        v18 = get_local ptr u256, value__, !2436
        v19 = get_local ptr u256, self_00, !2439
        mem_copy_val v19, v18
        v20 = get_local ptr u256, self_00, !2440
        v21 = get_local ptr u256, __wide_zero, !2441
        v22 = get_local ptr u256, __const, !2442
        v23 = get_local ptr u256, __wide_result, !2441
        wide mod v20, v21, v22 to v23, !2441
        v24 = get_local ptr u256, __tmp_block_arg
        mem_copy_val v24, v23
        v25 = get_local ptr u256, rem, !2444
        mem_copy_val v25, v24
        v26 = get_local ptr u256, rem, !2446
        v27 = asm(rem: v26) -> ptr { u64, u64, u64, u64 } rem {
        }
        v28 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v28, v27
        v29 = get_local ptr { u64, u64, u64, u64 }, __tuple_1, !2448
        mem_copy_val v29, v28
        v30 = get_local ptr u64, _, !2449
        v31 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_0
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr u64, v32
        mem_copy_val v30, v33
        v34 = get_local ptr u64, __, !2450
        v35 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_0
        v36 = const u64 1
        v37 = get_elem_ptr v35, ptr u64, v36
        mem_copy_val v34, v37
        v38 = get_local ptr u64, ___, !2451
        v39 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_0
        v40 = const u64 2
        v41 = get_elem_ptr v39, ptr u64, v40
        mem_copy_val v38, v41
        v42 = get_local ptr u64, digit, !2452
        v43 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_0
        v44 = const u64 3
        v45 = get_elem_ptr v43, ptr u64, v44
        mem_copy_val v42, v45
        v46 = get_local ptr u64, other_0, !2455
        v47 = const u64 10, !2456
        store v47 to v46, !2457
        v48 = load v45, !2458
        v49 = get_local ptr u64, other_0, !2459
        v50 = load v49, !2460
        v51 = mod v48, v50, !2461
        v52 = asm(v: v51) -> u8 v, !2463 {
        }
        v53 = get_local ptr u8, digit_, !2465
        store v52 to v53, !2466
        v54 = get_local ptr u8, digit_, !2468
        v55 = load v54, !2421
        v56 = const u8 48, !2469
        v57 = call add_12(v55, v56), !2472
        v58 = get_local ptr [u8; 80], digits, !2474
        v59 = get_local ptr u64, i, !2476
        v60 = load v59, !2421
        v61 = get_elem_ptr v58, ptr u8, v60, !2477
        store v57 to v61, !2478
        v62 = get_local ptr u256, value__, !2480
        v63 = get_local ptr u256, self_2, !2483
        mem_copy_val v63, v62
        v64 = get_local ptr u256, self_2, !2484
        v65 = get_local ptr u256, __const0, !2485
        v66 = get_local ptr u256, __wide_result0, !2486
        wide div v64, v65 to v66, !2486
        v67 = get_local ptr u256, __tmp_block_arg0
        mem_copy_val v67, v66
        v68 = get_local ptr u256, value__, !2488
        mem_copy_val v68, v67
        v69 = get_local ptr u256, self_3, !2491
        mem_copy_val v69, v67
        v70 = get_local ptr u256, self_3, !2492
        v71 = get_local ptr u256, __const1, !2493
        v72 = wide cmp eq v70 v71, !2494
        cbr v72, print_u256_46_end_while(), print_u256_46_block1(), !2495

        print_u256_46_block1():
        v73 = get_local ptr u64, i, !2497
        v74 = get_local ptr u64, self_4, !2500
        mem_copy_val v74, v73
        v75 = get_local ptr u64, other_3, !2501
        v76 = const u64 1, !2502
        store v76 to v75, !2503
        v77 = load v73, !2504
        v78 = get_local ptr u64, other_3, !2505
        v79 = load v78, !2506
        v80 = sub v77, v79, !2507
        v81 = get_local ptr u64, i, !2508
        store v80 to v81, !2509
        br print_u256_46_while(), !2421

        print_u256_46_end_while():
        v82 = get_global ptr u64, std::debug::STDERR, !2511
        v83 = load v82, !2421
        v84 = get_local ptr [u8; 80], digits, !2513
        v85 = ptr_to_int v84 to u64, !2515
        v86 = get_local ptr u64, i, !2517
        v87 = get_local ptr u64, self_5, !2520
        store v85 to v87, !2521
        v88 = get_local ptr u64, count_, !2522
        mem_copy_val v88, v86
        v89 = get_local ptr u64, self_5, !2523
        v90 = load v89, !2524
        v91 = load v86, !2525
        v92 = const u64 1
        v93 = mul v92, v91, !2526
        v94 = add v90, v93, !2527
        v95 = get_local ptr u64, i, !2529
        v96 = get_local ptr u64, self_6, !2532
        v97 = const u64 80, !2533
        store v97 to v96, !2534
        v98 = get_local ptr u64, other_4, !2535
        mem_copy_val v98, v95
        v99 = get_local ptr u64, self_6, !2536
        v100 = load v99, !2537
        v101 = load v95, !2538
        v102 = sub v100, v101, !2539
        v103 = call syscall_write_2(v83, v94, v102), !2542
        v104 = const unit ()
        ret () v104
    }

    pub fn fmt_52(self: ptr b256, f !2543: ptr {  }) -> (), !2546 {
        local u64 _
        local u64 __
        local u64 ___
        local mut u256 __aggr_memcpy_0
        local mut { u64, u64, u64, u64 } __aggr_memcpy_00
        local [u8; 66] __anon_0
        local u256 __const = const u256 0x0000000000000000000000000000000000000000000000000000000000000010
        local u256 __const0 = const u256 0x0000000000000000000000000000000000000000000000000000000000000010
        local u256 __const1 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u256 __tmp_block_arg
        local u256 __tmp_block_arg0
        local { u64, u64, u64, u64 } __tuple_2
        local mut u256 __wide_result
        local mut u256 __wide_result0
        local mut u256 __wide_zero = const u256 0x0000000000000000000000000000000000000000000000000000000000000000
        local u8 a
        local u64 digit
        local u8 digit_
        local mut [u8; 66] digits
        local ptr {  } f_
        local mut u64 i
        local u64 max_u8_u64
        local u64 other_0
        local u8 other_1
        local u8 other_2
        local u64 other_5
        local u256 rem
        local u64 res_u64
        local b256 self_
        local {  } self_0
        local u256 self_00
        local u8 self_3
        local u256 self_4
        local u256 self_5
        local u64 self_6
        local bool uppercase_
        local u8 val_0
        local u8 val_1
        local u64 val_2
        local u64 val_3
        local u256 value_
        local mut u256 value__

        entry(self: ptr b256, f: ptr {  }):
        v0 = get_local ptr b256, self_
        mem_copy_val v0, self
        v1 = get_local ptr ptr {  }, f_
        store f to v1
        v2 = get_local ptr ptr {  }, f_, !2547
        v3 = load v2
        v4 = get_local ptr b256, self_, !2548
        v5 = asm(s: v4) -> ptr u256 s {
        }
        v6 = get_local ptr u256, __aggr_memcpy_0
        mem_copy_val v6, v5
        v7 = get_local ptr {  }, self_0, !2551
        mem_copy_val v7, v3
        v8 = get_local ptr u256, value_, !2551
        mem_copy_val v8, v6
        v9 = get_local ptr bool, uppercase_, !2551
        v10 = const bool true, !2552
        store v10 to v9, !2551
        v11 = get_local ptr bool, uppercase_, !2554
        v12 = load v11, !2551
        v13 = const u8 65, !2555
        cbr v12, print_u256_as_hex_53_block2(v13), print_u256_as_hex_53_block1(), !2556

        print_u256_as_hex_53_block1():
        v14 = const u8 97, !2557
        br print_u256_as_hex_53_block2(v14), !2551

        print_u256_as_hex_53_block2(v15: u8):
        v16 = get_local ptr u8, a, !2559
        store v15 to v16, !2560
        v17 = get_local ptr u256, value_, !2562
        v18 = get_local ptr u256, value__, !2564
        mem_copy_val v18, v17
        v19 = get_local ptr [u8; 66], __anon_0, !2566
        v20 = const u64 0
        br print_u256_as_hex_53_array_init_loop(v20), !2551

        print_u256_as_hex_53_array_init_loop(v21: u64):
        v22 = get_elem_ptr v19, ptr u8, v21, !2551
        v23 = const u8 48, !2567
        store v23 to v22, !2568
        v24 = const u64 1
        v25 = add v21, v24, !2551
        v26 = const u64 66
        v27 = cmp lt v25 v26, !2551
        cbr v27, print_u256_as_hex_53_array_init_loop(v25), print_u256_as_hex_53_array_init_exit(), !2551

        print_u256_as_hex_53_array_init_exit():
        v28 = get_local ptr [u8; 66], digits, !2570
        mem_copy_val v28, v19
        v29 = get_local ptr [u8; 66], digits, !2572
        v30 = const u64 0, !2573
        v31 = get_elem_ptr v29, ptr u8, v30, !2574
        v32 = const u8 48, !2575
        store v32 to v31, !2576
        v33 = get_local ptr [u8; 66], digits, !2578
        v34 = const u64 1, !2579
        v35 = get_elem_ptr v33, ptr u8, v34, !2580
        v36 = const u8 120, !2581
        store v36 to v35, !2582
        v37 = get_local ptr u64, i, !2584
        v38 = const u64 65, !2585
        store v38 to v37, !2586
        br print_u256_as_hex_53_while(), !2551

        print_u256_as_hex_53_while():
        v39 = const bool true, !2587
        cbr v39, print_u256_as_hex_53_while_body(), print_u256_as_hex_53_end_while(), !2551

        print_u256_as_hex_53_while_body():
        v40 = get_local ptr u256, value__, !2589
        v41 = get_local ptr u256, self_00, !2592
        mem_copy_val v41, v40
        v42 = get_local ptr u256, self_00, !2593
        v43 = get_local ptr u256, __wide_zero, !2594
        v44 = get_local ptr u256, __const, !2595
        v45 = get_local ptr u256, __wide_result, !2594
        wide mod v42, v43, v44 to v45, !2594
        v46 = get_local ptr u256, __tmp_block_arg
        mem_copy_val v46, v45
        v47 = get_local ptr u256, rem, !2597
        mem_copy_val v47, v46
        v48 = get_local ptr u256, rem, !2599
        v49 = asm(rem: v48) -> ptr { u64, u64, u64, u64 } rem {
        }
        v50 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v50, v49
        v51 = get_local ptr { u64, u64, u64, u64 }, __tuple_2, !2601
        mem_copy_val v51, v50
        v52 = get_local ptr u64, _, !2602
        v53 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54
        mem_copy_val v52, v55
        v56 = get_local ptr u64, __, !2603
        v57 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        v58 = const u64 1
        v59 = get_elem_ptr v57, ptr u64, v58
        mem_copy_val v56, v59
        v60 = get_local ptr u64, ___, !2604
        v61 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        v62 = const u64 2
        v63 = get_elem_ptr v61, ptr u64, v62
        mem_copy_val v60, v63
        v64 = get_local ptr u64, digit, !2605
        v65 = get_local ptr { u64, u64, u64, u64 }, __aggr_memcpy_00
        v66 = const u64 3
        v67 = get_elem_ptr v65, ptr u64, v66
        mem_copy_val v64, v67
        v68 = get_local ptr u64, other_0, !2608
        v69 = const u64 16, !2609
        store v69 to v68, !2610
        v70 = load v67, !2611
        v71 = get_local ptr u64, other_0, !2612
        v72 = load v71, !2613
        v73 = mod v70, v72, !2614
        v74 = asm(v: v73) -> u8 v, !2616 {
        }
        v75 = get_local ptr u8, digit_, !2618
        store v74 to v75, !2619
        v76 = get_local ptr u8, other_1, !2622
        v77 = const u8 10, !2623
        store v77 to v76, !2624
        v78 = get_local ptr u8, digit_, !2626
        v79 = load v78, !2627
        v80 = get_local ptr u8, other_1, !2629
        v81 = load v80, !2630
        v82 = cmp lt v79 v81, !2631
        cbr v82, print_u256_as_hex_53_block3(), print_u256_as_hex_53_block4(), !2632

        print_u256_as_hex_53_block3():
        v83 = get_local ptr u8, digit_, !2634
        v84 = load v83, !2551
        v85 = const u8 48, !2635
        v86 = call add_12(v84, v85), !2638
        v87 = get_local ptr [u8; 66], digits, !2640
        v88 = get_local ptr u64, i, !2642
        v89 = load v88, !2551
        v90 = get_elem_ptr v87, ptr u8, v89, !2643
        store v86 to v90, !2644
        br print_u256_as_hex_53_block5(), !2551

        print_u256_as_hex_53_block4():
        v91 = get_local ptr u8, digit_, !2646
        v92 = get_local ptr u8, self_3, !2649
        mem_copy_val v92, v91
        v93 = get_local ptr u8, other_2, !2650
        v94 = const u8 10, !2651
        store v94 to v93, !2652
        v95 = load v91, !2655
        v96 = asm(input: v95) -> u64 input, !2656 {
        }
        v97 = get_local ptr u8, other_2, !2658
        v98 = get_local ptr u8, val_0, !2661
        mem_copy_val v98, v97
        v99 = load v97, !2662
        v100 = asm(input: v99) -> u64 input, !2663 {
        }
        v101 = sub v96, v100, !2664
        v102 = get_local ptr u64, res_u64, !2666
        store v101 to v102, !2667
        v103 = get_local ptr u8, val_1, !2670
        v104 = const u8 255, !170
        store v104 to v103, !2671
        v105 = get_local ptr u8, val_1, !2672
        v106 = load v105, !2673
        v107 = asm(input: v106) -> u64 input, !2674 {
        }
        v108 = get_local ptr u64, max_u8_u64, !2676
        store v107 to v108, !2677
        v109 = get_local ptr u64, res_u64, !2679
        v110 = load v109, !2680
        v111 = get_local ptr u64, max_u8_u64, !2682
        v112 = load v111, !2683
        v113 = cmp gt v110 v112, !2684
        cbr v113, print_u256_as_hex_53_subtract_55_block0(), print_u256_as_hex_53_subtract_55_block4(), !2686

        print_u256_as_hex_53_subtract_55_block0():
        v114 = asm() -> u64 flag, !2689 {
        }
        v115 = get_global ptr u64, std::flags::F_WRAPPING_DISABLE_MASK, !2690
        v116 = load v115, !2691
        v117 = and v114, v116, !2692
        v118 = const u64 0, !2004
        v119 = cmp eq v117 v118, !2693
        cbr v119, print_u256_as_hex_53_subtract_55_block1(), print_u256_as_hex_53_subtract_55_block2(), !2694

        print_u256_as_hex_53_subtract_55_block1():
        v120 = const u64 0, !2695
        revert v120, !2697

        print_u256_as_hex_53_subtract_55_block2():
        v121 = get_local ptr u64, res_u64, !2699
        v122 = load v121, !2700
        v123 = get_local ptr u64, max_u8_u64, !2702
        v124 = load v123, !2703
        v125 = const u64 1, !2704
        v126 = add v124, v125, !2705
        v127 = mod v122, v126, !2706
        v128 = get_local ptr u64, val_2, !2709
        store v127 to v128, !2710
        v129 = get_local ptr u64, val_2, !2711
        v130 = load v129, !2712
        v131 = asm(input: v130) -> u8 input, !2713 {
        }
        br print_u256_as_hex_53_subtract_55_block5(v131), !2714

        print_u256_as_hex_53_subtract_55_block4():
        v132 = get_local ptr u64, res_u64, !2716
        v133 = get_local ptr u64, val_3, !2719
        mem_copy_val v133, v132
        v134 = load v132, !2720
        v135 = asm(input: v134) -> u8 input, !2721 {
        }
        br print_u256_as_hex_53_subtract_55_block5(v135), !2722

        print_u256_as_hex_53_subtract_55_block5(v136: u8):
        v137 = get_local ptr u8, a, !2724
        v138 = load v137, !2551
        v139 = call add_12(v136, v138), !2727
        v140 = get_local ptr [u8; 66], digits, !2729
        v141 = get_local ptr u64, i, !2731
        v142 = load v141, !2551
        v143 = get_elem_ptr v140, ptr u8, v142, !2732
        store v139 to v143, !2733
        br print_u256_as_hex_53_block5(), !2551

        print_u256_as_hex_53_block5():
        v144 = get_local ptr u256, value__, !2735
        v145 = get_local ptr u256, self_4, !2738
        mem_copy_val v145, v144
        v146 = get_local ptr u256, self_4, !2739
        v147 = get_local ptr u256, __const0, !2740
        v148 = get_local ptr u256, __wide_result0, !2741
        wide div v146, v147 to v148, !2741
        v149 = get_local ptr u256, __tmp_block_arg0
        mem_copy_val v149, v148
        v150 = get_local ptr u256, value__, !2743
        mem_copy_val v150, v149
        v151 = get_local ptr u256, self_5, !2746
        mem_copy_val v151, v149
        v152 = get_local ptr u256, self_5, !2747
        v153 = get_local ptr u256, __const1, !2748
        v154 = wide cmp eq v152 v153, !2749
        cbr v154, print_u256_as_hex_53_end_while(), print_u256_as_hex_53_block7(), !2750

        print_u256_as_hex_53_block7():
        v155 = get_local ptr u64, i, !2752
        v156 = get_local ptr u64, self_6, !2755
        mem_copy_val v156, v155
        v157 = get_local ptr u64, other_5, !2756
        v158 = const u64 1, !2757
        store v158 to v157, !2758
        v159 = load v155, !2759
        v160 = get_local ptr u64, other_5, !2760
        v161 = load v160, !2761
        v162 = sub v159, v161, !2762
        v163 = get_local ptr u64, i, !2763
        store v162 to v163, !2764
        br print_u256_as_hex_53_while(), !2551

        print_u256_as_hex_53_end_while():
        v164 = get_global ptr u64, std::debug::STDERR, !2766
        v165 = load v164, !2551
        v166 = get_local ptr [u8; 66], digits, !2768
        v167 = ptr_to_int v166 to u64, !2770
        v168 = const u64 66, !2771
        v169 = call syscall_write_2(v165, v167, v168), !2774
        v170 = const unit ()
        ret () v170
    }

    pub fn fmt_57(self: ptr slice, f !2775: ptr {  }) -> (), !2778 {
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local {  } __tmp_arg2
        local ptr {  } f_

        entry(self: ptr slice, f: ptr {  }):
        v0 = get_local ptr ptr {  }, f_
        store f to v0
        v1 = get_local ptr ptr {  }, f_, !2779
        v2 = load v1
        v3 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v3, v2
        v4 = call print_string_quotes_58(v3)
        v5 = get_local ptr ptr {  }, f_, !2780
        v6 = load v5
        v7 = get_local ptr {  }, __tmp_arg
        mem_copy_val v7, v6
        v8 = get_local ptr slice, __tmp_arg0
        mem_copy_val v8, self
        v9 = call print_str_1(v7, v8)
        v10 = get_local ptr ptr {  }, f_, !2781
        v11 = load v10
        v12 = get_local ptr {  }, __tmp_arg2
        mem_copy_val v12, v11
        v13 = call print_string_quotes_58(v12)
        v14 = const unit ()
        ret () v14
    }

    pub fn print_string_quotes_58(self: ptr {  }) -> (), !2784 {
        local [u8; 1] __anon_0
        local [u8; 1] c

        entry(self: ptr {  }):
        v0 = get_local ptr [u8; 1], __anon_0, !2785
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u8, v1
        v3 = const u8 34, !2786
        store v3 to v2, !2785
        v4 = get_local ptr [u8; 1], c, !2787
        mem_copy_val v4, v0
        v5 = get_global ptr u64, std::debug::STDERR, !2788
        v6 = load v5
        v7 = get_local ptr [u8; 1], c, !2789
        v8 = ptr_to_int v7 to u64, !2790
        v9 = const u64 1, !2791
        v10 = call syscall_write_2(v6, v8, v9), !2794
        v11 = const unit ()
        ret () v11
    }

    pub fn debug_tuple_62(self: ptr {  }, name: ptr slice, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !2797 {
        local string<1> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { {  }, bool } __anon_3
        local string<1> __const = const string<1> "("
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local slice __tmp_arg3
        local slice name_
        local u64 other_
        local {  } self_
        local u64 self_0

        entry(self: ptr {  }, name: ptr slice, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr {  }, self_
        mem_copy_val v0, self
        v1 = get_local ptr slice, name_
        mem_copy_val v1, name
        v2 = get_local ptr slice, __tmp_arg3
        mem_copy_val v2, name
        v3 = call len_4(v2)
        v4 = get_local ptr u64, self_0, !2800
        store v3 to v4, !2800
        v5 = get_local ptr u64, other_, !2800
        v6 = const u64 0, !2801
        store v6 to v5, !2800
        v7 = get_local ptr u64, self_0, !2802
        v8 = load v7, !2800
        v9 = get_local ptr u64, other_, !2803
        v10 = load v9, !2800
        v11 = cmp gt v8 v10, !2800
        cbr v11, block0(), block2(), !2798

        block0():
        v12 = get_local ptr {  }, self_, !2804
        v13 = get_local ptr slice, name_, !2805
        v14 = get_local ptr {  }, __tmp_arg
        mem_copy_val v14, v12
        v15 = get_local ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = call print_str_1(v14, v15)
        br block2()

        block2():
        v17 = get_local ptr string<1>, __const
        v18 = get_local ptr {  }, self_, !2806
        v19 = get_local ptr string<1>, __anon_0
        mem_copy_val v19, v17
        v20 = ptr_to_int v19 to u64, !2807
        v21 = get_local ptr { u64, u64 }, __anon_1, !2807
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store v20 to v23, !2807
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24
        v26 = const u64 1
        store v26 to v25, !2807
        v27 = get_local ptr slice, __anon_2, !2807
        mem_copy_bytes v27, v21, 16
        v28 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v28, v18
        v29 = get_local ptr slice, __tmp_arg2
        mem_copy_val v29, v27
        v30 = call print_str_1(v28, v29)
        v31 = get_local ptr {  }, self_, !2808
        v32 = get_local ptr { {  }, bool }, __anon_3, !2809
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr {  }, v33
        mem_copy_val v34, v31
        v35 = const u64 1
        v36 = get_elem_ptr v32, ptr bool, v35
        v37 = const bool false, !2810
        store v37 to v36, !2809
        mem_copy_val __ret_value, v32
        ret ptr { {  }, bool } __ret_value
    }

    pub fn field_65(self !2811: ptr { {  }, bool }, value !2812: u8, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !2815 {
        local string<2> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local ptr { {  }, bool } self_
        local u8 value_

        entry(self: ptr { {  }, bool }, value: u8, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local ptr u8, value_
        store value to v1
        v2 = get_local ptr ptr { {  }, bool }, self_, !434
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr bool, v4, !436
        v6 = load v5
        cbr v6, block0(), block2(), !438

        block0():
        v7 = get_local ptr string<2>, __const
        v8 = get_local ptr ptr { {  }, bool }, self_, !440
        v9 = load v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr {  }, v10, !442
        v12 = get_local ptr string<2>, __anon_0
        mem_copy_val v12, v7
        v13 = ptr_to_int v12 to u64, !444
        v14 = get_local ptr { u64, u64 }, __anon_1, !444
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16, !444
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        v19 = const u64 2
        store v19 to v18, !444
        v20 = get_local ptr slice, __anon_2, !444
        mem_copy_bytes v20, v14, 16
        v21 = get_local ptr {  }, __tmp_arg
        mem_copy_val v21, v11
        v22 = get_local ptr slice, __tmp_arg0
        mem_copy_val v22, v20
        v23 = call print_str_1(v21, v22)
        br block2()

        block2():
        v24 = get_local ptr u8, value_, !450
        v25 = load v24
        v26 = get_local ptr ptr { {  }, bool }, self_, !452
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr {  }, v28, !442
        v30 = call fmt_10(v25, v29), !2818
        v31 = get_local ptr ptr { {  }, bool }, self_, !455
        v32 = load v31
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr bool, v33, !455
        v35 = const bool true, !458
        store v35 to v34, !455
        v36 = get_local ptr ptr { {  }, bool }, self_, !460
        v37 = load v36
        mem_copy_val __ret_value, v37
        ret ptr { {  }, bool } __ret_value
    }

    pub fn finish_66(self !2819: ptr { {  }, bool }) -> (), !2822 {
        local string<1> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<1> __const = const string<1> ")"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local ptr { {  }, bool } self_

        entry(self: ptr { {  }, bool }):
        v0 = get_local ptr string<1>, __const
        v1 = get_local ptr ptr { {  }, bool }, self_
        store self to v1
        v2 = get_local ptr ptr { {  }, bool }, self_, !2823
        v3 = load v2
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr {  }, v4, !442
        v6 = get_local ptr string<1>, __anon_0
        mem_copy_val v6, v0
        v7 = ptr_to_int v6 to u64, !2824
        v8 = get_local ptr { u64, u64 }, __anon_1, !2824
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v7 to v10, !2824
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        v13 = const u64 1
        store v13 to v12, !2824
        v14 = get_local ptr slice, __anon_2, !2824
        mem_copy_bytes v14, v8, 16
        v15 = get_local ptr {  }, __tmp_arg
        mem_copy_val v15, v5
        v16 = get_local ptr slice, __tmp_arg0
        mem_copy_val v16, v14
        v17 = call print_str_1(v15, v16)
        v18 = const unit ()
        ret () v18
    }

    pub fn debug_list_68(self: ptr {  }, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !2827 {
        local string<1> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { {  }, bool } __anon_3
        local string<1> __const = const string<1> "["
        local {  } __tmp_arg
        local slice __tmp_arg0

        entry(self: ptr {  }, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr string<1>, __const
        v1 = get_local ptr string<1>, __anon_0
        mem_copy_val v1, v0
        v2 = ptr_to_int v1 to u64, !2828
        v3 = get_local ptr { u64, u64 }, __anon_1, !2828
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4
        store v2 to v5, !2828
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 1
        store v8 to v7, !2828
        v9 = get_local ptr slice, __anon_2, !2828
        mem_copy_bytes v9, v3, 16
        v10 = get_local ptr {  }, __tmp_arg
        mem_copy_val v10, self
        v11 = get_local ptr slice, __tmp_arg0
        mem_copy_val v11, v9
        v12 = call print_str_1(v10, v11)
        v13 = get_local ptr { {  }, bool }, __anon_3, !2829
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr {  }, v14
        mem_copy_val v15, self
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr bool, v16
        v18 = const bool false, !2830
        store v18 to v17, !2829
        mem_copy_val __ret_value, v13
        ret ptr { {  }, bool } __ret_value
    }

    pub fn entry_70(self !2831: ptr { {  }, bool }, value !2832: u8, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !2835 {
        local string<2> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local ptr { {  }, bool } self_
        local u8 value_

        entry(self: ptr { {  }, bool }, value: u8, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local ptr u8, value_
        store value to v1
        v2 = get_local ptr ptr { {  }, bool }, self_, !748
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr bool, v4, !751
        v6 = load v5
        cbr v6, block0(), block2(), !754

        block0():
        v7 = get_local ptr string<2>, __const
        v8 = get_local ptr ptr { {  }, bool }, self_, !756
        v9 = load v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr {  }, v10, !759
        v12 = get_local ptr string<2>, __anon_0
        mem_copy_val v12, v7
        v13 = ptr_to_int v12 to u64, !762
        v14 = get_local ptr { u64, u64 }, __anon_1, !762
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16, !762
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        v19 = const u64 2
        store v19 to v18, !762
        v20 = get_local ptr slice, __anon_2, !762
        mem_copy_bytes v20, v14, 16
        v21 = get_local ptr {  }, __tmp_arg
        mem_copy_val v21, v11
        v22 = get_local ptr slice, __tmp_arg0
        mem_copy_val v22, v20
        v23 = call print_str_1(v21, v22)
        br block2()

        block2():
        v24 = get_local ptr u8, value_, !772
        v25 = load v24
        v26 = get_local ptr ptr { {  }, bool }, self_, !774
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr {  }, v28, !759
        v30 = call fmt_10(v25, v29), !2838
        v31 = get_local ptr ptr { {  }, bool }, self_, !778
        v32 = load v31
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr bool, v33, !778
        v35 = const bool true, !782
        store v35 to v34, !778
        v36 = get_local ptr ptr { {  }, bool }, self_, !784
        v37 = load v36
        mem_copy_val __ret_value, v37
        ret ptr { {  }, bool } __ret_value
    }

    pub fn finish_72(self !2839: ptr { {  }, bool }) -> (), !2842 {
        local string<1> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<1> __const = const string<1> "]"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local ptr { {  }, bool } self_

        entry(self: ptr { {  }, bool }):
        v0 = get_local ptr string<1>, __const
        v1 = get_local ptr ptr { {  }, bool }, self_
        store self to v1
        v2 = get_local ptr ptr { {  }, bool }, self_, !2843
        v3 = load v2
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr {  }, v4, !759
        v6 = get_local ptr string<1>, __anon_0
        mem_copy_val v6, v0
        v7 = ptr_to_int v6 to u64, !2844
        v8 = get_local ptr { u64, u64 }, __anon_1, !2844
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9
        store v7 to v10, !2844
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11
        v13 = const u64 1
        store v13 to v12, !2844
        v14 = get_local ptr slice, __anon_2, !2844
        mem_copy_bytes v14, v8, 16
        v15 = get_local ptr {  }, __tmp_arg
        mem_copy_val v15, v5
        v16 = get_local ptr slice, __tmp_arg0
        mem_copy_val v16, v14
        v17 = call print_str_1(v15, v16)
        v18 = const unit ()
        ret () v18
    }

    pub fn fmt_75(self: ptr {  }, _f !2845: ptr {  }) -> (), !2848 {
        local mut { {  }, bool } __aggr_memcpy_0
        local string<1> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<1> __const = const string<1> "S"
        local { {  }, bool } __ret_val
        local {  } __tmp_arg
        local slice __tmp_arg0
        local ptr {  } _f_
        local mut { {  }, bool } type_fix

        entry(self: ptr {  }, _f: ptr {  }):
        v0 = get_local ptr string<1>, __const
        v1 = get_local ptr ptr {  }, _f_
        store _f to v1
        v2 = get_local ptr ptr {  }, _f_, !2849
        v3 = load v2
        v4 = get_local ptr string<1>, __anon_0
        mem_copy_val v4, v0
        v5 = ptr_to_int v4 to u64, !2850
        v6 = get_local ptr { u64, u64 }, __anon_1, !2850
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8, !2850
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 1
        store v11 to v10, !2850
        v12 = get_local ptr slice, __anon_2, !2850
        mem_copy_bytes v12, v6, 16
        v13 = get_local ptr {  }, __tmp_arg
        mem_copy_val v13, v3
        v14 = get_local ptr slice, __tmp_arg0
        mem_copy_val v14, v12
        v15 = get_local ptr { {  }, bool }, __ret_val
        v16 = call debug_struct_77(v13, v14, v15)
        v17 = get_local ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v17, v16
        v18 = get_local ptr { {  }, bool }, type_fix
        mem_copy_val v18, v17
        v19 = call finish_76(v18), !2853
        v20 = const unit ()
        ret () v20
    }

    pub fn finish_76(self !2854: ptr { {  }, bool }) -> (), !2857 {
        local string<1> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<1> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<1> __const = const string<1> " "
        local string<1> __const0 = const string<1> "}"
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local ptr { {  }, bool } self_

        entry(self: ptr { {  }, bool }):
        v0 = get_local ptr ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local ptr ptr { {  }, bool }, self_, !2858
        v2 = load v1
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr bool, v3, !684
        v5 = load v4
        cbr v5, block0(), block2(), !2859

        block0():
        v6 = get_local ptr string<1>, __const
        v7 = get_local ptr ptr { {  }, bool }, self_, !2860
        v8 = load v7
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr {  }, v9, !690
        v11 = get_local ptr string<1>, __anon_0
        mem_copy_val v11, v6
        v12 = ptr_to_int v11 to u64, !2861
        v13 = get_local ptr { u64, u64 }, __anon_1, !2861
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14
        store v12 to v15, !2861
        v16 = const u64 1
        v17 = get_elem_ptr v13, ptr u64, v16
        v18 = const u64 1
        store v18 to v17, !2861
        v19 = get_local ptr slice, __anon_2, !2861
        mem_copy_bytes v19, v13, 16
        v20 = get_local ptr {  }, __tmp_arg
        mem_copy_val v20, v10
        v21 = get_local ptr slice, __tmp_arg0
        mem_copy_val v21, v19
        v22 = call print_str_1(v20, v21)
        br block2()

        block2():
        v23 = get_local ptr string<1>, __const0
        v24 = get_local ptr ptr { {  }, bool }, self_, !2862
        v25 = load v24
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr {  }, v26, !690
        v28 = get_local ptr string<1>, __anon_3
        mem_copy_val v28, v23
        v29 = ptr_to_int v28 to u64, !2863
        v30 = get_local ptr { u64, u64 }, __anon_4, !2863
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr u64, v31
        store v29 to v32, !2863
        v33 = const u64 1
        v34 = get_elem_ptr v30, ptr u64, v33
        v35 = const u64 1
        store v35 to v34, !2863
        v36 = get_local ptr slice, __anon_5, !2863
        mem_copy_bytes v36, v30, 16
        v37 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v37, v27
        v38 = get_local ptr slice, __tmp_arg2
        mem_copy_val v38, v36
        v39 = call print_str_1(v37, v38)
        v40 = const unit ()
        ret () v40
    }

    pub fn debug_struct_77(self: ptr {  }, name: ptr slice, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !2866 {
        local string<3> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local { {  }, bool } __anon_3
        local string<3> __const = const string<3> " { "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2

        entry(self: ptr {  }, name: ptr slice, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr string<3>, __const
        v1 = get_local ptr {  }, __tmp_arg
        mem_copy_val v1, self
        v2 = get_local ptr slice, __tmp_arg0
        mem_copy_val v2, name
        v3 = call print_str_1(v1, v2)
        v4 = get_local ptr string<3>, __anon_0
        mem_copy_val v4, v0
        v5 = ptr_to_int v4 to u64, !2867
        v6 = get_local ptr { u64, u64 }, __anon_1, !2867
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr u64, v7
        store v5 to v8, !2867
        v9 = const u64 1
        v10 = get_elem_ptr v6, ptr u64, v9
        v11 = const u64 3
        store v11 to v10, !2867
        v12 = get_local ptr slice, __anon_2, !2867
        mem_copy_bytes v12, v6, 16
        v13 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v13, self
        v14 = get_local ptr slice, __tmp_arg2
        mem_copy_val v14, v12
        v15 = call print_str_1(v13, v14)
        v16 = get_local ptr { {  }, bool }, __anon_3, !2868
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr {  }, v17
        mem_copy_val v18, self
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr bool, v19
        v21 = const bool false, !2869
        store v21 to v20, !2868
        mem_copy_val __ret_value, v16
        ret ptr { {  }, bool } __ret_value
    }

    pub fn fmt_78(self: ptr { u64, ( () | {  } ) }, _f !2845: ptr {  }) -> (), !2871 {
        local mut { {  }, bool } __aggr_memcpy_0
        local string<4> __anon_0
        local string<2> __anon_00
        local { u64, u64 } __anon_1
        local { u64, u64 } __anon_10
        local slice __anon_2
        local slice __anon_20
        local string<1> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<4> __const = const string<4> "None"
        local string<1> __const0 = const string<1> "E"
        local string<2> __const1 = const string<2> ", "
        local { u64, ( () | {  } ) } __matched_value_1
        local { {  }, bool } __ret_val
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local {  } __tmp_arg3
        local slice __tmp_arg4
        local {  } __tmp_arg5
        local { {  }, bool } __tmp_block_arg
        local ptr {  } _f_
        local u64 other_
        local u64 other_0
        local u64 self_0
        local u64 self_1
        local ptr { {  }, bool } self_2
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0
        local {  } value
        local {  } value_

        entry(self: ptr { u64, ( () | {  } ) }, _f: ptr {  }):
        v0 = get_local ptr ptr {  }, _f_
        store _f to v0
        v1 = get_local ptr { u64, ( () | {  } ) }, __matched_value_1, !2872
        mem_copy_val v1, self
        v2 = get_local ptr u64, self_0, !2875
        v3 = const u64 0
        v4 = get_elem_ptr self, ptr u64, v3
        mem_copy_val v2, v4
        v5 = get_local ptr u64, other_, !2875
        v6 = const u64 0, !2876
        store v6 to v5, !2875
        v7 = load v4, !2875
        v8 = get_local ptr u64, other_, !2877
        v9 = load v8, !2875
        v10 = cmp eq v7 v9, !2875
        cbr v10, block0(), block1(), !2873

        block0():
        v11 = get_local ptr string<4>, __const
        v12 = get_local ptr ptr {  }, _f_, !2878
        v13 = load v12
        v14 = get_local ptr string<4>, __anon_0
        mem_copy_val v14, v11
        v15 = ptr_to_int v14 to u64, !2879
        v16 = get_local ptr { u64, u64 }, __anon_1, !2879
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr u64, v17
        store v15 to v18, !2879
        v19 = const u64 1
        v20 = get_elem_ptr v16, ptr u64, v19
        v21 = const u64 4
        store v21 to v20, !2879
        v22 = get_local ptr slice, __anon_2, !2879
        mem_copy_bytes v22, v16, 16
        v23 = get_local ptr {  }, __tmp_arg
        mem_copy_val v23, v13
        v24 = get_local ptr slice, __tmp_arg0
        mem_copy_val v24, v22
        v25 = call print_str_1(v23, v24)
        br block5()

        block1():
        v26 = get_local ptr { u64, ( () | {  } ) }, __matched_value_1, !2876
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !2876
        v29 = get_local ptr u64, self_1, !2882
        mem_copy_val v29, v28
        v30 = get_local ptr u64, other_0, !2882
        v31 = const u64 1, !2876
        store v31 to v30, !2882
        v32 = load v28, !2882
        v33 = get_local ptr u64, other_0, !2883
        v34 = load v33, !2882
        v35 = cmp eq v32 v34, !2882
        cbr v35, block2(), block3(), !2880

        block2():
        v36 = get_local ptr string<1>, __const0
        v37 = get_local ptr { u64, ( () | {  } ) }, __matched_value_1, !2876
        v38 = const u64 1
        v39 = const u64 1
        v40 = get_elem_ptr v37, ptr {  }, v38, v39
        v41 = get_local ptr {  }, value, !2884
        mem_copy_val v41, v40
        v42 = get_local ptr ptr {  }, _f_, !2885
        v43 = load v42
        v44 = get_local ptr string<1>, __anon_3
        mem_copy_val v44, v36
        v45 = ptr_to_int v44 to u64, !2886
        v46 = get_local ptr { u64, u64 }, __anon_4, !2886
        v47 = const u64 0
        v48 = get_elem_ptr v46, ptr u64, v47
        store v45 to v48, !2886
        v49 = const u64 1
        v50 = get_elem_ptr v46, ptr u64, v49
        v51 = const u64 1
        store v51 to v50, !2886
        v52 = get_local ptr slice, __anon_5, !2886
        mem_copy_bytes v52, v46, 16
        v53 = get_local ptr {  }, __tmp_arg3
        mem_copy_val v53, v43
        v54 = get_local ptr slice, __tmp_arg4
        mem_copy_val v54, v52
        v55 = get_local ptr { {  }, bool }, __ret_val
        v56 = call debug_tuple_62(v53, v54, v55)
        v57 = get_local ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v57, v56
        v58 = get_local ptr { {  }, bool }, type_fix
        mem_copy_val v58, v57
        v59 = get_local ptr ptr { {  }, bool }, self_2, !2889
        store v58 to v59, !2889
        v60 = get_local ptr {  }, value_, !2889
        mem_copy_val v60, v40
        v61 = get_local ptr ptr { {  }, bool }, self_2, !2890
        v62 = load v61, !2889
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr bool, v63, !2891
        v65 = load v64, !2889
        cbr v65, field_79_block0(), field_79_block2(), !2892

        field_79_block0():
        v66 = get_local ptr string<2>, __const1
        v67 = get_local ptr ptr { {  }, bool }, self_2, !2893
        v68 = load v67, !2889
        v69 = const u64 0
        v70 = get_elem_ptr v68, ptr {  }, v69, !2894
        v71 = get_local ptr string<2>, __anon_00, !2889
        mem_copy_val v71, v66
        v72 = ptr_to_int v71 to u64, !2895
        v73 = get_local ptr { u64, u64 }, __anon_10, !2896
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !2889
        store v72 to v75, !2897
        v76 = const u64 1
        v77 = get_elem_ptr v73, ptr u64, v76, !2889
        v78 = const u64 2
        store v78 to v77, !2898
        v79 = get_local ptr slice, __anon_20, !2899
        mem_copy_bytes v79, v73, 16, !2889
        v80 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v80, v70
        v81 = get_local ptr slice, __tmp_arg2
        mem_copy_val v81, v79
        v82 = call print_str_1(v80, v81)
        br field_79_block2(), !2889

        field_79_block2():
        v83 = get_local ptr {  }, value_, !2900
        v84 = get_local ptr ptr { {  }, bool }, self_2, !2901
        v85 = load v84, !2889
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr {  }, v86, !2902
        v88 = get_local ptr {  }, __tmp_arg5
        mem_copy_val v88, v83
        v89 = call fmt_75(v88, v87)
        v90 = get_local ptr ptr { {  }, bool }, self_2, !2903
        v91 = load v90, !2889
        v92 = const u64 1
        v93 = get_elem_ptr v91, ptr bool, v92, !2904
        v94 = const bool true, !458
        store v94 to v93, !2905
        v95 = get_local ptr ptr { {  }, bool }, self_2, !2906
        v96 = load v95, !2889
        v97 = get_local ptr { {  }, bool }, __tmp_block_arg
        mem_copy_val v97, v96
        v98 = get_local ptr { {  }, bool }, type_fix0
        mem_copy_val v98, v97
        v99 = call finish_66(v98), !2909
        br block5()

        block3():
        v100 = const u64 14757395258967588866, !2872
        revert v100, !2872

        block5():
        v101 = const unit ()
        ret () v101
    }

    pub fn fmt_82(self: ptr { b256 }, _f !2911: ptr {  }) -> (), !2914 {
        local mut { {  }, bool } __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local string<7> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<4> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<7> __const = const string<7> "Address"
        local string<4> __const0 = const string<4> "bits"
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local {  } __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local b256 __tmp_arg2
        local ptr {  } _f_
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0

        entry(self: ptr { b256 }, _f: ptr {  }):
        v0 = get_local ptr string<7>, __const
        v1 = get_local ptr string<4>, __const0
        v2 = get_local ptr ptr {  }, _f_
        store _f to v2
        v3 = get_local ptr ptr {  }, _f_, !2915
        v4 = load v3
        v5 = get_local ptr string<7>, __anon_0
        mem_copy_val v5, v0
        v6 = ptr_to_int v5 to u64, !2916
        v7 = get_local ptr { u64, u64 }, __anon_1, !2916
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8
        store v6 to v9, !2916
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        v12 = const u64 7
        store v12 to v11, !2916
        v13 = get_local ptr slice, __anon_2, !2916
        mem_copy_bytes v13, v7, 16
        v14 = get_local ptr {  }, __tmp_arg
        mem_copy_val v14, v4
        v15 = get_local ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = get_local ptr { {  }, bool }, __ret_val
        v17 = call debug_struct_77(v14, v15, v16)
        v18 = get_local ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v18, v17
        v19 = get_local ptr string<4>, __anon_3
        mem_copy_val v19, v1
        v20 = ptr_to_int v19 to u64, !2917
        v21 = get_local ptr { u64, u64 }, __anon_4, !2917
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store v20 to v23, !2917
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24
        v26 = const u64 4
        store v26 to v25, !2917
        v27 = get_local ptr slice, __anon_5, !2917
        mem_copy_bytes v27, v21, 16
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr b256, v28, !2918
        v30 = get_local ptr { {  }, bool }, type_fix
        mem_copy_val v30, v18
        v31 = get_local ptr slice, __tmp_arg1
        mem_copy_val v31, v27
        v32 = get_local ptr b256, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local ptr { {  }, bool }, __ret_val0
        v34 = call field_83(v30, v31, v32, v33)
        v35 = get_local ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v35, v34
        v36 = get_local ptr { {  }, bool }, type_fix0
        mem_copy_val v36, v35
        v37 = call finish_76(v36), !2921
        v38 = const unit ()
        ret () v38
    }

    pub fn field_83(self !2922: ptr { {  }, bool }, name: ptr slice, value: ptr b256, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !2925 {
        local string<2> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<2> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<2> __const = const string<2> ", "
        local string<2> __const0 = const string<2> ": "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local {  } __tmp_arg3
        local slice __tmp_arg4
        local b256 __tmp_arg5
        local slice name_
        local ptr { {  }, bool } self_
        local b256 value_

        entry(self: ptr { {  }, bool }, name: ptr slice, value: ptr b256, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local ptr slice, name_
        mem_copy_val v1, name
        v2 = get_local ptr b256, value_
        mem_copy_val v2, value
        v3 = get_local ptr ptr { {  }, bool }, self_, !682
        v4 = load v3
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr bool, v5, !684
        v7 = load v6
        cbr v7, block0(), block2(), !686

        block0():
        v8 = get_local ptr string<2>, __const
        v9 = get_local ptr ptr { {  }, bool }, self_, !688
        v10 = load v9
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr {  }, v11, !690
        v13 = get_local ptr string<2>, __anon_0
        mem_copy_val v13, v8
        v14 = ptr_to_int v13 to u64, !692
        v15 = get_local ptr { u64, u64 }, __anon_1, !692
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17, !692
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        v20 = const u64 2
        store v20 to v19, !692
        v21 = get_local ptr slice, __anon_2, !692
        mem_copy_bytes v21, v15, 16
        v22 = get_local ptr {  }, __tmp_arg
        mem_copy_val v22, v12
        v23 = get_local ptr slice, __tmp_arg0
        mem_copy_val v23, v21
        v24 = call print_str_1(v22, v23)
        br block2()

        block2():
        v25 = get_local ptr string<2>, __const0
        v26 = get_local ptr ptr { {  }, bool }, self_, !698
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr {  }, v28, !690
        v30 = get_local ptr slice, name_, !701
        v31 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v31, v29
        v32 = get_local ptr slice, __tmp_arg2
        mem_copy_val v32, v30
        v33 = call print_str_1(v31, v32)
        v34 = get_local ptr ptr { {  }, bool }, self_, !703
        v35 = load v34
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr {  }, v36, !690
        v38 = get_local ptr string<2>, __anon_3
        mem_copy_val v38, v25
        v39 = ptr_to_int v38 to u64, !706
        v40 = get_local ptr { u64, u64 }, __anon_4, !706
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41
        store v39 to v42, !706
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43
        v45 = const u64 2
        store v45 to v44, !706
        v46 = get_local ptr slice, __anon_5, !706
        mem_copy_bytes v46, v40, 16
        v47 = get_local ptr {  }, __tmp_arg3
        mem_copy_val v47, v37
        v48 = get_local ptr slice, __tmp_arg4
        mem_copy_val v48, v46
        v49 = call print_str_1(v47, v48)
        v50 = get_local ptr b256, value_, !712
        v51 = get_local ptr ptr { {  }, bool }, self_, !714
        v52 = load v51
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr {  }, v53, !690
        v55 = get_local ptr b256, __tmp_arg5
        mem_copy_val v55, v50
        v56 = call fmt_52(v55, v54)
        v57 = get_local ptr ptr { {  }, bool }, self_, !802
        v58 = load v57
        v59 = const u64 1
        v60 = get_elem_ptr v58, ptr bool, v59, !802
        v61 = const bool true, !805
        store v61 to v60, !802
        v62 = get_local ptr ptr { {  }, bool }, self_, !807
        v63 = load v62
        mem_copy_val __ret_value, v63
        ret ptr { {  }, bool } __ret_value
    }

    pub fn fmt_85(self: ptr { b256 }, _f !2927: ptr {  }) -> (), !2930 {
        local mut { {  }, bool } __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local string<7> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<4> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<7> __const = const string<7> "AssetId"
        local string<4> __const0 = const string<4> "bits"
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local {  } __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local b256 __tmp_arg2
        local ptr {  } _f_
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0

        entry(self: ptr { b256 }, _f: ptr {  }):
        v0 = get_local ptr string<7>, __const
        v1 = get_local ptr string<4>, __const0
        v2 = get_local ptr ptr {  }, _f_
        store _f to v2
        v3 = get_local ptr ptr {  }, _f_, !2931
        v4 = load v3
        v5 = get_local ptr string<7>, __anon_0
        mem_copy_val v5, v0
        v6 = ptr_to_int v5 to u64, !2932
        v7 = get_local ptr { u64, u64 }, __anon_1, !2932
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8
        store v6 to v9, !2932
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        v12 = const u64 7
        store v12 to v11, !2932
        v13 = get_local ptr slice, __anon_2, !2932
        mem_copy_bytes v13, v7, 16
        v14 = get_local ptr {  }, __tmp_arg
        mem_copy_val v14, v4
        v15 = get_local ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = get_local ptr { {  }, bool }, __ret_val
        v17 = call debug_struct_77(v14, v15, v16)
        v18 = get_local ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v18, v17
        v19 = get_local ptr string<4>, __anon_3
        mem_copy_val v19, v1
        v20 = ptr_to_int v19 to u64, !2933
        v21 = get_local ptr { u64, u64 }, __anon_4, !2933
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store v20 to v23, !2933
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24
        v26 = const u64 4
        store v26 to v25, !2933
        v27 = get_local ptr slice, __anon_5, !2933
        mem_copy_bytes v27, v21, 16
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr b256, v28, !2934
        v30 = get_local ptr { {  }, bool }, type_fix
        mem_copy_val v30, v18
        v31 = get_local ptr slice, __tmp_arg1
        mem_copy_val v31, v27
        v32 = get_local ptr b256, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local ptr { {  }, bool }, __ret_val0
        v34 = call field_83(v30, v31, v32, v33)
        v35 = get_local ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v35, v34
        v36 = get_local ptr { {  }, bool }, type_fix0
        mem_copy_val v36, v35
        v37 = call finish_76(v36), !2937
        v38 = const unit ()
        ret () v38
    }

    pub fn push_96(self !2938: ptr { { u64, u64 }, u64 }, byte !2939: u8) -> (), !2942 {
        local u8 byte_
        local u64 count_
        local u64 end
        local u64 new_cap
        local u64 new_count_
        local u64 new_ptr
        local u64 offset_
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_000
        local u64 other_2
        local u64 ptr_
        local ptr { { u64, u64 }, u64 } self_
        local u64 self_0
        local u64 self_00
        local ptr { u64, u64 } self_1
        local u64 self_10
        local u64 self_3
        local u64 self_5
        local u64 val_ptr

        entry(self: ptr { { u64, u64 }, u64 }, byte: u8):
        v0 = get_local ptr ptr { { u64, u64 }, u64 }, self_
        store self to v0
        v1 = get_local ptr u8, byte_
        store byte to v1
        v2 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !2943
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !908
        v6 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !2944
        v7 = load v6
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8, !967
        v10 = const u64 1
        v11 = get_elem_ptr v9, ptr u64, v10, !2945
        v12 = get_local ptr u64, self_0, !2948
        mem_copy_val v12, v5
        v13 = get_local ptr u64, other_, !2948
        mem_copy_val v13, v11
        v14 = get_local ptr u64, self_0, !2949
        v15 = load v14, !2948
        v16 = get_local ptr u64, other_, !2950
        v17 = load v16, !2948
        v18 = cmp eq v15 v17, !2948
        cbr v18, block0(), block2(), !2946

        block0():
        v19 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !2951
        v20 = load v19
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, u64 }, v21, !967
        v23 = get_local ptr ptr { u64, u64 }, self_1, !2954
        store v22 to v23, !2954
        v24 = get_local ptr ptr { u64, u64 }, self_1, !2956
        v25 = load v24, !2954
        v26 = const u64 1
        v27 = get_elem_ptr v25, ptr u64, v26, !2957
        v28 = get_local ptr u64, self_00, !2960
        mem_copy_val v28, v27
        v29 = get_local ptr u64, other_0, !2961
        v30 = const u64 0, !2962
        store v30 to v29, !2963
        v31 = get_local ptr u64, self_00, !2964
        v32 = load v31, !2965
        v33 = get_local ptr u64, other_0, !2966
        v34 = load v33, !2967
        v35 = cmp eq v32 v34, !2968
        v36 = const u64 1, !2969
        cbr v35, grow_97_block2(v36), grow_97_block1(), !2970

        grow_97_block1():
        v37 = get_local ptr ptr { u64, u64 }, self_1, !2972
        v38 = load v37, !2954
        v39 = const u64 1
        v40 = get_elem_ptr v38, ptr u64, v39, !2973
        v41 = get_local ptr u64, self_10, !2976
        v42 = const u64 2, !2977
        store v42 to v41, !2978
        v43 = get_local ptr u64, other_00, !2979
        mem_copy_val v43, v40
        v44 = get_local ptr u64, self_10, !2980
        v45 = load v44, !2981
        v46 = get_local ptr u64, other_00, !2982
        v47 = load v46, !2983
        v48 = mul v45, v47, !2984
        br grow_97_block2(v48), !2954

        grow_97_block2(v49: u64):
        v50 = get_local ptr u64, new_cap, !2986
        store v49 to v50, !2987
        v51 = get_local ptr ptr { u64, u64 }, self_1, !2989
        v52 = load v51, !2954
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !2990
        v55 = get_local ptr ptr { u64, u64 }, self_1, !2992
        v56 = load v55, !2954
        v57 = const u64 1
        v58 = get_elem_ptr v56, ptr u64, v57, !2993
        v59 = get_local ptr u64, new_cap, !2995
        v60 = get_local ptr u64, ptr_, !2998
        mem_copy_val v60, v54
        v61 = get_local ptr u64, count_, !2999
        mem_copy_val v61, v58
        v62 = get_local ptr u64, new_count_, !3000
        mem_copy_val v62, v59
        v63 = load v59, !3003
        v64 = get_local ptr u64, count_, !3004
        v65 = load v64, !3005
        v66 = cmp gt v63 v65, !3006
        cbr v66, grow_97_realloc_bytes_99_block0(), grow_97_realloc_bytes_99_block4(), !3007

        grow_97_realloc_bytes_99_block0():
        v67 = get_local ptr u64, new_count_, !3009
        v68 = load v67, !3012
        v69 = asm(size: v68) -> u64 hp, !3013 {
            aloc   size, !855
        }
        v70 = get_local ptr u64, new_ptr, !3015
        store v69 to v70, !3016
        v71 = get_local ptr u64, count_, !3018
        v72 = get_local ptr u64, other_000, !3021
        v73 = const u64 0, !3022
        store v73 to v72, !3023
        v74 = load v71, !3024
        v75 = get_local ptr u64, other_000, !3025
        v76 = load v75, !3026
        v77 = cmp gt v74 v76, !3027
        cbr v77, grow_97_realloc_bytes_99_block1(), grow_97_realloc_bytes_99_block3(), !3028

        grow_97_realloc_bytes_99_block1():
        v78 = get_local ptr u64, ptr_, !3030
        v79 = get_local ptr u64, new_ptr, !3032
        v80 = get_local ptr u64, count_, !3034
        v81 = load v79, !3037
        v82 = load v78, !3038
        v83 = load v80, !3039
        v84 = asm(dst: v81, src: v82, len: v83) -> (), !3041 {
            mcp    dst src len, !3042
        }
        br grow_97_realloc_bytes_99_block3(), !3043

        grow_97_realloc_bytes_99_block3():
        v85 = get_local ptr u64, new_ptr, !3045
        v86 = load v85, !3046
        br grow_97_realloc_bytes_99_block5(v86), !3047

        grow_97_realloc_bytes_99_block4():
        v87 = get_local ptr u64, ptr_, !3049
        v88 = load v87, !3050
        br grow_97_realloc_bytes_99_block5(v88), !3051

        grow_97_realloc_bytes_99_block5(v89: u64):
        v90 = get_local ptr ptr { u64, u64 }, self_1, !3053
        v91 = load v90, !2954
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !3054
        store v89 to v93, !3055
        v94 = get_local ptr u64, new_cap, !3057
        v95 = get_local ptr ptr { u64, u64 }, self_1, !3059
        v96 = load v95, !2954
        v97 = const u64 1
        v98 = get_elem_ptr v96, ptr u64, v97, !3060
        mem_copy_val v98, v94
        br block2()

        block2():
        v99 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3061
        v100 = load v99
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr { u64, u64 }, v101, !967
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !969
        v105 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3062
        v106 = load v105
        v107 = const u64 1
        v108 = get_elem_ptr v106, ptr u64, v107, !908
        v109 = get_local ptr u64, self_3, !3065
        mem_copy_val v109, v104
        v110 = get_local ptr u64, offset_, !3065
        mem_copy_val v110, v108
        v111 = get_local ptr u64, self_3, !3066
        v112 = load v111, !3065
        v113 = get_local ptr u64, offset_, !3067
        v114 = load v113, !3065
        v115 = asm(ptr: v112, offset: v114, new) -> u64 new, !3068 {
            add    new ptr offset, !986
        }
        v116 = get_local ptr u64, end, !3069
        store v115 to v116, !3069
        v117 = get_local ptr u8, byte_, !3070
        v118 = load v117, !3073
        v119 = asm(r1: v118) -> u64 r1, !3075 {
        }
        v120 = get_local ptr u64, val_ptr, !3077
        store v119 to v120, !3078
        v121 = get_local ptr u64, end, !3080
        v122 = load v121, !3073
        v123 = get_local ptr u64, val_ptr, !3082
        v124 = load v123, !3073
        v125 = asm(ptr: v122, val: v124) -> (), !3084 {
            sb     ptr val i0, !3085
        }
        v126 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3086
        v127 = load v126
        v128 = const u64 1
        v129 = get_elem_ptr v127, ptr u64, v128, !908
        v130 = get_local ptr u64, self_5, !3089
        mem_copy_val v130, v129
        v131 = get_local ptr u64, other_2, !3089
        v132 = const u64 1, !3090
        store v132 to v131, !3089
        v133 = get_local ptr u64, self_5, !3091
        v134 = load v133, !3089
        v135 = get_local ptr u64, other_2, !3092
        v136 = load v135, !3089
        v137 = add v134, v136, !3089
        v138 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3087
        v139 = load v138
        v140 = const u64 1
        v141 = get_elem_ptr v139, ptr u64, v140, !3087
        store v137 to v141, !3087
        v142 = const unit ()
        ret () v142
    }

    pub fn ge_106(self !3093: u64, other !3094: u64) -> bool, !3097 {
        local u64 other_
        local u64 self_

        entry(self: u64, other: u64):
        v0 = get_local ptr u64, self_
        store self to v0
        v1 = get_local ptr u64, other_
        store other to v1
        v2 = get_local ptr u64, self_, !3100
        v3 = load v2, !3101
        v4 = get_local ptr u64, other_, !3102
        v5 = load v4, !3101
        v6 = cmp gt v3 v5, !3101
        cbr v6, block1(v6), block0(), !3103

        block0():
        v7 = get_local ptr u64, self_, !3104
        v8 = get_local ptr u64, other_, !3105
        v9 = load v7, !3108
        v10 = load v8, !3108
        v11 = cmp eq v9 v10, !3108
        br block1(v11), !3103

        block1(v12: bool):
        ret bool v12
    }

    pub fn fmt_113(self: ptr { b256 }, _f !3110: ptr {  }) -> (), !3113 {
        local mut { {  }, bool } __aggr_memcpy_0
        local mut { {  }, bool } __aggr_memcpy_00
        local string<10> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<4> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<10> __const = const string<10> "ContractId"
        local string<4> __const0 = const string<4> "bits"
        local { {  }, bool } __ret_val
        local { {  }, bool } __ret_val0
        local {  } __tmp_arg
        local slice __tmp_arg0
        local slice __tmp_arg1
        local b256 __tmp_arg2
        local ptr {  } _f_
        local mut { {  }, bool } type_fix
        local mut { {  }, bool } type_fix0

        entry(self: ptr { b256 }, _f: ptr {  }):
        v0 = get_local ptr string<10>, __const
        v1 = get_local ptr string<4>, __const0
        v2 = get_local ptr ptr {  }, _f_
        store _f to v2
        v3 = get_local ptr ptr {  }, _f_, !3114
        v4 = load v3
        v5 = get_local ptr string<10>, __anon_0
        mem_copy_val v5, v0
        v6 = ptr_to_int v5 to u64, !3115
        v7 = get_local ptr { u64, u64 }, __anon_1, !3115
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr u64, v8
        store v6 to v9, !3115
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        v12 = const u64 10
        store v12 to v11, !3115
        v13 = get_local ptr slice, __anon_2, !3115
        mem_copy_bytes v13, v7, 16
        v14 = get_local ptr {  }, __tmp_arg
        mem_copy_val v14, v4
        v15 = get_local ptr slice, __tmp_arg0
        mem_copy_val v15, v13
        v16 = get_local ptr { {  }, bool }, __ret_val
        v17 = call debug_struct_77(v14, v15, v16)
        v18 = get_local ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v18, v17
        v19 = get_local ptr string<4>, __anon_3
        mem_copy_val v19, v1
        v20 = ptr_to_int v19 to u64, !3116
        v21 = get_local ptr { u64, u64 }, __anon_4, !3116
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr u64, v22
        store v20 to v23, !3116
        v24 = const u64 1
        v25 = get_elem_ptr v21, ptr u64, v24
        v26 = const u64 4
        store v26 to v25, !3116
        v27 = get_local ptr slice, __anon_5, !3116
        mem_copy_bytes v27, v21, 16
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr b256, v28, !3117
        v30 = get_local ptr { {  }, bool }, type_fix
        mem_copy_val v30, v18
        v31 = get_local ptr slice, __tmp_arg1
        mem_copy_val v31, v27
        v32 = get_local ptr b256, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local ptr { {  }, bool }, __ret_val0
        v34 = call field_83(v30, v31, v32, v33)
        v35 = get_local ptr { {  }, bool }, __aggr_memcpy_00
        mem_copy_val v35, v34
        v36 = get_local ptr { {  }, bool }, type_fix0
        mem_copy_val v36, v35
        v37 = call finish_76(v36), !3120
        v38 = const unit ()
        ret () v38
    }

    pub fn field_120(self !2922: ptr { {  }, bool }, name: ptr slice, value !3121: u64, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !3122 {
        local string<2> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<2> __anon_3
        local { u64, u64 } __anon_4
        local slice __anon_5
        local string<2> __const = const string<2> ", "
        local string<2> __const0 = const string<2> ": "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local slice __tmp_arg2
        local {  } __tmp_arg3
        local slice __tmp_arg4
        local slice name_
        local ptr { {  }, bool } self_
        local u64 value_

        entry(self: ptr { {  }, bool }, name: ptr slice, value: u64, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local ptr slice, name_
        mem_copy_val v1, name
        v2 = get_local ptr u64, value_
        store value to v2
        v3 = get_local ptr ptr { {  }, bool }, self_, !682
        v4 = load v3
        v5 = const u64 1
        v6 = get_elem_ptr v4, ptr bool, v5, !684
        v7 = load v6
        cbr v7, block0(), block2(), !686

        block0():
        v8 = get_local ptr string<2>, __const
        v9 = get_local ptr ptr { {  }, bool }, self_, !688
        v10 = load v9
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr {  }, v11, !690
        v13 = get_local ptr string<2>, __anon_0
        mem_copy_val v13, v8
        v14 = ptr_to_int v13 to u64, !692
        v15 = get_local ptr { u64, u64 }, __anon_1, !692
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16
        store v14 to v17, !692
        v18 = const u64 1
        v19 = get_elem_ptr v15, ptr u64, v18
        v20 = const u64 2
        store v20 to v19, !692
        v21 = get_local ptr slice, __anon_2, !692
        mem_copy_bytes v21, v15, 16
        v22 = get_local ptr {  }, __tmp_arg
        mem_copy_val v22, v12
        v23 = get_local ptr slice, __tmp_arg0
        mem_copy_val v23, v21
        v24 = call print_str_1(v22, v23)
        br block2()

        block2():
        v25 = get_local ptr string<2>, __const0
        v26 = get_local ptr ptr { {  }, bool }, self_, !698
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr {  }, v28, !690
        v30 = get_local ptr slice, name_, !701
        v31 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v31, v29
        v32 = get_local ptr slice, __tmp_arg2
        mem_copy_val v32, v30
        v33 = call print_str_1(v31, v32)
        v34 = get_local ptr ptr { {  }, bool }, self_, !703
        v35 = load v34
        v36 = const u64 0
        v37 = get_elem_ptr v35, ptr {  }, v36, !690
        v38 = get_local ptr string<2>, __anon_3
        mem_copy_val v38, v25
        v39 = ptr_to_int v38 to u64, !706
        v40 = get_local ptr { u64, u64 }, __anon_4, !706
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41
        store v39 to v42, !706
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43
        v45 = const u64 2
        store v45 to v44, !706
        v46 = get_local ptr slice, __anon_5, !706
        mem_copy_bytes v46, v40, 16
        v47 = get_local ptr {  }, __tmp_arg3
        mem_copy_val v47, v37
        v48 = get_local ptr slice, __tmp_arg4
        mem_copy_val v48, v46
        v49 = call print_str_1(v47, v48)
        v50 = get_local ptr u64, value_, !712
        v51 = load v50
        v52 = get_local ptr ptr { {  }, bool }, self_, !714
        v53 = load v52
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr {  }, v54, !690
        v56 = call fmt_38(v51, v55), !3123
        v57 = get_local ptr ptr { {  }, bool }, self_, !802
        v58 = load v57
        v59 = const u64 1
        v60 = get_elem_ptr v58, ptr bool, v59, !802
        v61 = const bool true, !805
        store v61 to v60, !802
        v62 = get_local ptr ptr { {  }, bool }, self_, !807
        v63 = load v62
        mem_copy_val __ret_value, v63
        ret ptr { {  }, bool } __ret_value
    }

    pub fn field_126(self !2811: ptr { {  }, bool }, value !2812: u64, __ret_value: ptr { {  }, bool }) -> ptr { {  }, bool }, !3124 {
        local string<2> __anon_0
        local { u64, u64 } __anon_1
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local {  } __tmp_arg
        local slice __tmp_arg0
        local ptr { {  }, bool } self_
        local u64 value_

        entry(self: ptr { {  }, bool }, value: u64, __ret_value: ptr { {  }, bool }):
        v0 = get_local ptr ptr { {  }, bool }, self_
        store self to v0
        v1 = get_local ptr u64, value_
        store value to v1
        v2 = get_local ptr ptr { {  }, bool }, self_, !434
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr bool, v4, !436
        v6 = load v5
        cbr v6, block0(), block2(), !438

        block0():
        v7 = get_local ptr string<2>, __const
        v8 = get_local ptr ptr { {  }, bool }, self_, !440
        v9 = load v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr {  }, v10, !442
        v12 = get_local ptr string<2>, __anon_0
        mem_copy_val v12, v7
        v13 = ptr_to_int v12 to u64, !444
        v14 = get_local ptr { u64, u64 }, __anon_1, !444
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15
        store v13 to v16, !444
        v17 = const u64 1
        v18 = get_elem_ptr v14, ptr u64, v17
        v19 = const u64 2
        store v19 to v18, !444
        v20 = get_local ptr slice, __anon_2, !444
        mem_copy_bytes v20, v14, 16
        v21 = get_local ptr {  }, __tmp_arg
        mem_copy_val v21, v11
        v22 = get_local ptr slice, __tmp_arg0
        mem_copy_val v22, v20
        v23 = call print_str_1(v21, v22)
        br block2()

        block2():
        v24 = get_local ptr u64, value_, !450
        v25 = load v24
        v26 = get_local ptr ptr { {  }, bool }, self_, !452
        v27 = load v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr {  }, v28, !442
        v30 = call fmt_38(v25, v29), !3125
        v31 = get_local ptr ptr { {  }, bool }, self_, !455
        v32 = load v31
        v33 = const u64 1
        v34 = get_elem_ptr v32, ptr bool, v33, !455
        v35 = const bool true, !458
        store v35 to v34, !455
        v36 = get_local ptr ptr { {  }, bool }, self_, !460
        v37 = load v36
        mem_copy_val __ret_value, v37
        ret ptr { {  }, bool } __ret_value
    }

    pub fn number_of_bytes_130(self: ptr slice) -> u64, !3128 {
        local mut { u64, u64 } __aggr_memcpy_0
        local { u64, u64 } __anon_0
        local { u64, u64 } __tmp_block_arg
        local slice slice_

        entry(self: ptr slice):
        v0 = get_local ptr slice, slice_, !3131
        mem_copy_val v0, self
        v1 = get_local ptr slice, slice_, !3132
        v2 = asm(ptr: v1) -> ptr { u64, u64 } ptr {
        }
        v3 = get_local ptr { u64, u64 }, __aggr_memcpy_0
        mem_copy_val v3, v2
        v4 = get_local ptr { u64, u64 }, __tmp_block_arg
        mem_copy_val v4, v3
        v5 = get_local ptr { u64, u64 }, __anon_0
        mem_copy_val v5, v4
        v6 = get_local ptr { u64, u64 }, __tmp_block_arg
        v7 = const u64 1
        v8 = get_elem_ptr v6, ptr u64, v7
        v9 = load v8
        ret u64 v9
    }

    pub fn new_143(__ret_value: ptr { { u64, u64 }, u64 }) -> ptr { { u64, u64 }, u64 }, !3135 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __tmp_block_arg

        entry(__ret_value: ptr { { u64, u64 }, u64 }):
        v0 = const u64 0, !3136
        v1 = call alloc_145(v0), !3141
        v2 = get_local ptr { u64, u64 }, __anon_00, !3143
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !3144
        store v1 to v4, !3145
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !3144
        v7 = const u64 0, !3146
        store v7 to v6, !3147
        v8 = get_local ptr { u64, u64 }, __tmp_block_arg
        mem_copy_val v8, v2
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !3148
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10
        mem_copy_val v11, v8
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 0, !3149
        store v14 to v13, !3148
        mem_copy_val __ret_value, v9
        ret ptr { { u64, u64 }, u64 } __ret_value
    }

    pub fn alloc_145(count !3150: u64) -> u64, !3153 {
        local u64 count_
        local u64 self_

        entry(count: u64):
        v0 = get_local ptr u64, count_
        store count to v0
        v1 = get_local ptr u64, self_, !3156
        v2 = const u64 8
        store v2 to v1, !3156
        v3 = get_local ptr u64, self_, !3157
        v4 = load v3, !3156
        v5 = get_local ptr u64, count_, !3158
        v6 = load v5, !3156
        v7 = mul v4, v6, !3156
        v8 = asm(size: v7, ptr) -> u64 ptr, !3159 {
            aloc   size, !3160
            move   ptr hp, !3161
        }
        ret u64 v8
    }

    pub fn push_146(self !3162: ptr { { u64, u64 }, u64 }, value !3163: u64) -> (), !3166 {
        local u64 count_
        local u64 count_1
        local u64 dst_
        local u64 end
        local u64 len
        local u64 new_cap
        local u64 new_count_
        local u64 new_ptr
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_000
        local u64 other_10
        local u64 other_2
        local u64 other_3
        local u64 ptr_
        local ptr { { u64, u64 }, u64 } self_
        local u64 self_0
        local u64 self_00
        local u64 self_01
        local ptr { u64, u64 } self_1
        local u64 self_10
        local u64 self_100
        local u64 self_3
        local u64 self_4
        local u64 self_5
        local u64 val_
        local u64 value_

        entry(self: ptr { { u64, u64 }, u64 }, value: u64):
        v0 = get_local ptr ptr { { u64, u64 }, u64 }, self_
        store self to v0
        v1 = get_local ptr u64, value_
        store value to v1
        v2 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3167
        v3 = load v2
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !3168
        v6 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3169
        v7 = load v6
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8, !3170
        v10 = const u64 1
        v11 = get_elem_ptr v9, ptr u64, v10, !3171
        v12 = get_local ptr u64, self_0, !3174
        mem_copy_val v12, v5
        v13 = get_local ptr u64, other_, !3174
        mem_copy_val v13, v11
        v14 = get_local ptr u64, self_0, !3175
        v15 = load v14, !3174
        v16 = get_local ptr u64, other_, !3176
        v17 = load v16, !3174
        v18 = cmp eq v15 v17, !3174
        cbr v18, block0(), block2(), !3172

        block0():
        v19 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3177
        v20 = load v19
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { u64, u64 }, v21, !3170
        v23 = get_local ptr ptr { u64, u64 }, self_1, !3180
        store v22 to v23, !3180
        v24 = get_local ptr ptr { u64, u64 }, self_1, !3182
        v25 = load v24, !3180
        v26 = const u64 1
        v27 = get_elem_ptr v25, ptr u64, v26, !3183
        v28 = get_local ptr u64, self_00, !3186
        mem_copy_val v28, v27
        v29 = get_local ptr u64, other_0, !3187
        v30 = const u64 0, !3188
        store v30 to v29, !3189
        v31 = get_local ptr u64, self_00, !3190
        v32 = load v31, !3191
        v33 = get_local ptr u64, other_0, !3192
        v34 = load v33, !3193
        v35 = cmp eq v32 v34, !3194
        v36 = const u64 1, !3195
        cbr v35, grow_147_block2(v36), grow_147_block1(), !3196

        grow_147_block1():
        v37 = get_local ptr ptr { u64, u64 }, self_1, !3198
        v38 = load v37, !3180
        v39 = const u64 1
        v40 = get_elem_ptr v38, ptr u64, v39, !3199
        v41 = get_local ptr u64, self_10, !3202
        v42 = const u64 2, !3203
        store v42 to v41, !3204
        v43 = get_local ptr u64, other_00, !3205
        mem_copy_val v43, v40
        v44 = get_local ptr u64, self_10, !3206
        v45 = load v44, !3207
        v46 = get_local ptr u64, other_00, !3208
        v47 = load v46, !3209
        v48 = mul v45, v47, !3210
        br grow_147_block2(v48), !3180

        grow_147_block2(v49: u64):
        v50 = get_local ptr u64, new_cap, !3212
        store v49 to v50, !3213
        v51 = get_local ptr ptr { u64, u64 }, self_1, !3215
        v52 = load v51, !3180
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !3217
        v55 = get_local ptr ptr { u64, u64 }, self_1, !3219
        v56 = load v55, !3180
        v57 = const u64 1
        v58 = get_elem_ptr v56, ptr u64, v57, !3220
        v59 = get_local ptr u64, new_cap, !3222
        v60 = get_local ptr u64, ptr_, !3225
        mem_copy_val v60, v54
        v61 = get_local ptr u64, count_, !3226
        mem_copy_val v61, v58
        v62 = get_local ptr u64, new_count_, !3227
        mem_copy_val v62, v59
        v63 = load v59, !3230
        v64 = get_local ptr u64, count_, !3231
        v65 = load v64, !3232
        v66 = cmp gt v63 v65, !3233
        cbr v66, grow_147_realloc_148_block0(), grow_147_realloc_148_block4(), !3234

        grow_147_realloc_148_block0():
        v67 = get_local ptr u64, new_count_, !3236
        v68 = load v67, !3237
        v69 = call alloc_145(v68), !3240
        v70 = get_local ptr u64, new_ptr, !3242
        store v69 to v70, !3243
        v71 = get_local ptr u64, count_, !3245
        v72 = get_local ptr u64, other_000, !3248
        v73 = const u64 0, !3249
        store v73 to v72, !3250
        v74 = load v71, !3251
        v75 = get_local ptr u64, other_000, !3252
        v76 = load v75, !3253
        v77 = cmp gt v74 v76, !3254
        cbr v77, grow_147_realloc_148_block1(), grow_147_realloc_148_block3(), !3255

        grow_147_realloc_148_block1():
        v78 = get_local ptr u64, ptr_, !3257
        v79 = get_local ptr u64, new_ptr, !3259
        v80 = get_local ptr u64, count_, !3261
        v81 = get_local ptr u64, self_100, !3264
        mem_copy_val v81, v78
        v82 = get_local ptr u64, dst_, !3265
        mem_copy_val v82, v79
        v83 = get_local ptr u64, other_10, !3266
        v84 = const u64 8
        store v84 to v83, !3267
        v85 = load v80, !3268
        v86 = get_local ptr u64, other_10, !3269
        v87 = load v86, !3270
        v88 = mul v85, v87, !3271
        v89 = get_local ptr u64, len, !3272
        store v88 to v89, !3273
        v90 = get_local ptr u64, dst_, !3274
        v91 = load v90, !3275
        v92 = get_local ptr u64, self_100, !3276
        v93 = load v92, !3277
        v94 = get_local ptr u64, len, !3278
        v95 = load v94, !3279
        v96 = asm(dst: v91, src: v93, len: v95) -> (), !3280 {
            mcp    dst src len, !1540
        }
        br grow_147_realloc_148_block3(), !3281

        grow_147_realloc_148_block3():
        v97 = get_local ptr u64, new_ptr, !3283
        v98 = load v97, !3284
        br grow_147_realloc_148_block5(v98), !3285

        grow_147_realloc_148_block4():
        v99 = get_local ptr u64, ptr_, !3287
        v100 = load v99, !3288
        br grow_147_realloc_148_block5(v100), !3289

        grow_147_realloc_148_block5(v101: u64):
        v102 = get_local ptr ptr { u64, u64 }, self_1, !3291
        v103 = load v102, !3180
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !3292
        store v101 to v105, !3293
        v106 = get_local ptr u64, new_cap, !3295
        v107 = get_local ptr ptr { u64, u64 }, self_1, !3297
        v108 = load v107, !3180
        v109 = const u64 1
        v110 = get_elem_ptr v108, ptr u64, v109, !3298
        mem_copy_val v110, v106
        br block2()

        block2():
        v111 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3299
        v112 = load v111
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr { u64, u64 }, v113, !3170
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr u64, v115, !3216
        v117 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3300
        v118 = load v117
        v119 = const u64 1
        v120 = get_elem_ptr v118, ptr u64, v119, !3168
        v121 = get_local ptr u64, self_3, !3303
        mem_copy_val v121, v116
        v122 = get_local ptr u64, count_1, !3303
        mem_copy_val v122, v120
        v123 = get_local ptr u64, self_3, !3304
        v124 = load v123, !3303
        v125 = get_local ptr u64, count_1, !3306
        v126 = load v125, !3303
        v127 = const u64 8
        v128 = mul v127, v126, !3303
        v129 = add v124, v128, !3303
        v130 = get_local ptr u64, end, !3307
        store v129 to v130, !3307
        v131 = get_local ptr u64, end, !3308
        v132 = get_local ptr u64, value_, !3309
        v133 = get_local ptr u64, self_4, !3312
        mem_copy_val v133, v131
        v134 = get_local ptr u64, val_, !3312
        mem_copy_val v134, v132
        v135 = const bool false
        cbr v135, write_151_block0(), write_151_block1(), !3314

        write_151_block0():
        v136 = get_local ptr u64, self_4, !3316
        v137 = load v136, !3312
        v138 = get_local ptr u64, val_, !3318
        v139 = load v138, !3312
        v140 = const u64 8
        v141 = asm(dst: v137, src: v139, count: v140) -> (), !3320 {
            mcp    dst src count, !3321
        }
        br write_151_block5(), !3312

        write_151_block1():
        v142 = get_local ptr u64, self_01, !3324
        v143 = const u64 8
        store v143 to v142, !3325
        v144 = get_local ptr u64, other_2, !3326
        v145 = const u64 1, !3327
        store v145 to v144, !3328
        v146 = get_local ptr u64, self_01, !3329
        v147 = load v146, !3330
        v148 = get_local ptr u64, other_2, !3331
        v149 = load v148, !3332
        v150 = cmp eq v147 v149, !3333
        cbr v150, write_151_block2(), write_151_block3(), !3334

        write_151_block2():
        v151 = get_local ptr u64, self_4, !3336
        v152 = load v151, !3312
        v153 = get_local ptr u64, val_, !3338
        v154 = load v153, !3312
        v155 = asm(ptr: v152, val: v154) -> (), !3340 {
            sb     ptr val i0, !3341
        }
        br write_151_block5(), !3312

        write_151_block3():
        v156 = get_local ptr u64, self_4, !3343
        v157 = load v156, !3312
        v158 = get_local ptr u64, val_, !3345
        v159 = load v158, !3312
        v160 = asm(ptr: v157, val: v159) -> (), !3347 {
            sw     ptr val i0, !3348
        }
        br write_151_block5(), !3312

        write_151_block5():
        v161 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3349
        v162 = load v161
        v163 = const u64 1
        v164 = get_elem_ptr v162, ptr u64, v163, !3168
        v165 = get_local ptr u64, self_5, !3352
        mem_copy_val v165, v164
        v166 = get_local ptr u64, other_3, !3352
        v167 = const u64 1, !3353
        store v167 to v166, !3352
        v168 = get_local ptr u64, self_5, !3354
        v169 = load v168, !3352
        v170 = get_local ptr u64, other_3, !3355
        v171 = load v170, !3352
        v172 = add v169, v171, !3352
        v173 = get_local ptr ptr { { u64, u64 }, u64 }, self_, !3350
        v174 = load v173
        v175 = const u64 1
        v176 = get_elem_ptr v174, ptr u64, v175, !3350
        store v172 to v176, !3350
        v177 = const unit ()
        ret () v177
    }

    pub fn fmt_152(self: ptr { { u64, u64 }, u64 }, f !3356: ptr {  }) -> (), !3359 {
        local mut { {  }, bool } __aggr_memcpy_0
        local { { { u64, u64 }, u64 }, u64 } __anon_0
        local { u64, ( () | u64 ) } __anon_00
        local string<2> __anon_01
        local { u64, ( () | u64 ) } __anon_1
        local { u64, u64 } __anon_10
        local slice __anon_2
        local string<2> __const = const string<2> ", "
        local mut { { { u64, u64 }, u64 }, u64 } __for_iterable_2
        local mut { u64, ( () | u64 ) } __for_value_opt_1
        local { u64, ( () | u64 ) } __matched_value_4
        local { {  }, bool } __ret_val
        local {  } __tmp_arg
        local slice __tmp_arg0
        local {  } __tmp_arg1
        local { { { u64, u64 }, u64 }, u64 } __tmp_block_arg
        local { u64, ( () | u64 ) } __tmp_block_arg0
        local u64 code_
        local u64 elem
        local ptr {  } f_
        local u64 index_
        local mut { {  }, bool } l
        local u64 other_
        local u64 other_0
        local u64 other_1
        local u64 other_2
        local u64 other_3
        local u64 self_00
        local u64 self_000
        local u64 self_0000
        local u64 self_01
        local u64 self_02
        local ptr { { { u64, u64 }, u64 }, u64 } self_1
        local u64 self_10
        local u64 self_100
        local { { u64, u64 }, u64 } self_2
        local { u64, ( () | u64 ) } self_4
        local ptr { {  }, bool } self_5
        local u64 v
        local u64 value_

        entry(self: ptr { { u64, u64 }, u64 }, f: ptr {  }):
        v0 = get_local ptr ptr {  }, f_
        store f to v0
        v1 = get_local ptr ptr {  }, f_, !3360
        v2 = load v1
        v3 = get_local ptr {  }, __tmp_arg1
        mem_copy_val v3, v2
        v4 = get_local ptr { {  }, bool }, __ret_val
        v5 = call debug_list_68(v3, v4)
        v6 = get_local ptr { {  }, bool }, __aggr_memcpy_0
        mem_copy_val v6, v5
        v7 = get_local ptr { {  }, bool }, l, !3361
        mem_copy_val v7, v6
        v8 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __anon_0, !3364
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !3365
        mem_copy_val v10, self
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !3365
        v13 = const u64 0, !1742
        store v13 to v12, !3366
        v14 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __tmp_block_arg
        mem_copy_val v14, v8
        v15 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __for_iterable_2
        mem_copy_val v15, v14
        br while()

        while():
        v16 = const bool true
        cbr v16, while_body(), end_while()

        while_body():
        v17 = get_local ptr { { { u64, u64 }, u64 }, u64 }, __for_iterable_2
        v18 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3368
        store v17 to v18, !3368
        v19 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3370
        v20 = load v19, !3368
        v21 = const u64 1
        v22 = get_elem_ptr v20, ptr u64, v21, !3371
        v23 = load v22, !3368
        v24 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3373
        v25 = load v24, !3368
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { { u64, u64 }, u64 }, v26, !3374
        v28 = const u64 1
        v29 = get_elem_ptr v27, ptr u64, v28, !3375
        v30 = load v29, !3368
        v31 = call ge_106(v23, v30), !3378
        cbr v31, next_154_block0(), next_154_block1(), !3379

        next_154_block0():
        v32 = get_local ptr { u64, ( () | u64 ) }, __anon_00, !3380
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !3381
        v35 = const u64 0, !915
        store v35 to v34, !3382
        v36 = get_local ptr { u64, ( () | u64 ) }, __tmp_block_arg0
        mem_copy_val v36, v32
        br block4(v36), !3384

        next_154_block1():
        v37 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3386
        v38 = load v37, !3368
        v39 = const u64 1
        v40 = get_elem_ptr v38, ptr u64, v39, !3387
        v41 = get_local ptr u64, self_00, !3390
        mem_copy_val v41, v40
        v42 = get_local ptr u64, other_, !3391
        v43 = const u64 1, !3392
        store v43 to v42, !3393
        v44 = get_local ptr u64, self_00, !3394
        v45 = load v44, !3395
        v46 = get_local ptr u64, other_, !3396
        v47 = load v46, !3397
        v48 = add v45, v47, !3398
        v49 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3399
        v50 = load v49, !3368
        v51 = const u64 1
        v52 = get_elem_ptr v50, ptr u64, v51, !3400
        store v48 to v52, !3401
        v53 = get_local ptr { u64, ( () | u64 ) }, __anon_1, !3402
        v54 = const u64 0
        v55 = get_elem_ptr v53, ptr u64, v54, !3403
        v56 = const u64 1, !915
        store v56 to v55, !3404
        v57 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3406
        v58 = load v57, !3368
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { { u64, u64 }, u64 }, v59, !3407
        v61 = get_local ptr ptr { { { u64, u64 }, u64 }, u64 }, self_1, !3409
        v62 = load v61, !3368
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !3410
        v65 = get_local ptr u64, self_10, !3413
        mem_copy_val v65, v64
        v66 = get_local ptr u64, other_0, !3414
        v67 = const u64 1, !3415
        store v67 to v66, !3416
        v68 = get_local ptr u64, self_10, !3417
        v69 = load v68, !3418
        v70 = get_local ptr u64, other_0, !3419
        v71 = load v70, !3420
        v72 = sub v69, v71, !3421
        v73 = get_local ptr { { u64, u64 }, u64 }, self_2, !3424
        mem_copy_val v73, v60
        v74 = get_local ptr u64, index_, !3425
        store v72 to v74, !3426
        v75 = get_local ptr { { u64, u64 }, u64 }, self_2, !3428
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr { u64, u64 }, v76, !3429
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !3430
        v80 = get_local ptr u64, self_000, !3433
        mem_copy_val v80, v79
        v81 = load v79, !3434
        v82 = get_local ptr u64, index_, !3435
        v83 = load v82, !3436
        v84 = const u64 8
        v85 = mul v84, v83, !3437
        v86 = add v81, v85, !3438
        v87 = get_local ptr u64, self_100, !3441
        store v86 to v87, !3442
        v88 = const bool false
        cbr v88, next_154_get_unchecked_155_read_156_block0(), next_154_get_unchecked_155_read_156_block1(), !3444

        next_154_get_unchecked_155_read_156_block0():
        v89 = get_local ptr u64, self_100, !3446
        v90 = load v89, !3447
        v91 = asm(ptr: v90) -> u64 ptr, !3449 {
        }
        br next_154_get_unchecked_155_read_156_block5(v91), !3450

        next_154_get_unchecked_155_read_156_block1():
        v92 = get_local ptr u64, self_0000, !3453
        v93 = const u64 8
        store v93 to v92, !3454
        v94 = get_local ptr u64, other_1, !3455
        v95 = const u64 1, !3456
        store v95 to v94, !3457
        v96 = get_local ptr u64, self_0000, !3458
        v97 = load v96, !3459
        v98 = get_local ptr u64, other_1, !3460
        v99 = load v98, !3461
        v100 = cmp eq v97 v99, !3462
        cbr v100, next_154_get_unchecked_155_read_156_block2(), next_154_get_unchecked_155_read_156_block3(), !3463

        next_154_get_unchecked_155_read_156_block2():
        v101 = get_local ptr u64, self_100, !3465
        v102 = load v101, !3466
        v103 = asm(ptr: v102, val) -> u64 val, !3468 {
            lb     val ptr i0, !3469
        }
        br next_154_get_unchecked_155_read_156_block4(v103), !3470

        next_154_get_unchecked_155_read_156_block3():
        v104 = get_local ptr u64, self_100, !3472
        v105 = load v104, !3473
        v106 = asm(ptr: v105, val) -> u64 val, !3475 {
            lw     val ptr i0, !3476
        }
        br next_154_get_unchecked_155_read_156_block4(v106), !3477

        next_154_get_unchecked_155_read_156_block4(v107: u64):
        br next_154_get_unchecked_155_read_156_block5(v107), !3478

        next_154_get_unchecked_155_read_156_block5(v108: u64):
        v109 = const u64 1
        v110 = const u64 1
        v111 = get_elem_ptr v53, ptr u64, v109, v110, !3479
        store v108 to v111, !3480
        v112 = get_local ptr { u64, ( () | u64 ) }, __tmp_block_arg0
        mem_copy_val v112, v53
        br block4(v112), !3368

        block4(v113: ptr { u64, ( () | u64 ) }):
        v114 = get_local ptr { u64, ( () | u64 ) }, __for_value_opt_1
        mem_copy_val v114, v113
        v115 = get_local ptr u64, self_01, !3481
        v116 = get_local ptr { u64, ( () | u64 ) }, __tmp_block_arg0
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr u64, v117
        mem_copy_val v115, v118
        v119 = get_local ptr u64, other_2, !3481
        v120 = const u64 1, !999
        store v120 to v119, !3481
        v121 = load v118, !3481
        v122 = get_local ptr u64, other_2, !3482
        v123 = load v122, !3481
        v124 = cmp eq v121 v123, !3481
        v125 = const bool false, !1006
        cbr v124, is_none_157_block2(v125), is_none_157_block1(), !1001

        is_none_157_block1():
        v126 = const bool true, !1007
        br is_none_157_block2(v126)

        is_none_157_block2(v127: bool):
        cbr v127, end_while(), block1()

        block1():
        v128 = get_local ptr { u64, ( () | u64 ) }, __for_value_opt_1
        v129 = get_local ptr { u64, ( () | u64 ) }, self_4, !3483
        mem_copy_val v129, v128
        v130 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !3484
        mem_copy_val v130, v128
        v131 = get_local ptr u64, self_02, !3485
        v132 = get_local ptr { u64, ( () | u64 ) }, __for_value_opt_1
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133
        mem_copy_val v131, v134
        v135 = get_local ptr u64, other_3, !3486
        v136 = const u64 1, !1009
        store v136 to v135, !3487
        v137 = get_local ptr { u64, ( () | u64 ) }, __for_value_opt_1
        v138 = get_elem_ptr v137, ptr u64, v133
        v139 = load v138, !3488
        v140 = get_local ptr u64, other_3, !3489
        v141 = load v140, !3490
        v142 = cmp eq v139 v141, !3491
        cbr v142, unwrap_158_block0(), unwrap_158_block1(), !3492

        unwrap_158_block0():
        v143 = get_local ptr { u64, ( () | u64 ) }, __matched_value_4, !3493
        v144 = const u64 1
        v145 = const u64 1
        v146 = get_elem_ptr v143, ptr u64, v144, v145, !3483
        v147 = get_local ptr u64, v, !3494
        mem_copy_val v147, v146
        v148 = load v146, !3483
        v149 = get_local ptr u64, elem, !3495
        store v148 to v149, !3495
        v150 = get_local ptr { {  }, bool }, l, !3496
        v151 = get_local ptr u64, elem, !3497
        v152 = get_local ptr ptr { {  }, bool }, self_5, !3500
        store v150 to v152, !3500
        v153 = get_local ptr u64, value_, !3500
        mem_copy_val v153, v151
        v154 = get_local ptr ptr { {  }, bool }, self_5, !3501
        v155 = load v154, !3500
        v156 = const u64 1
        v157 = get_elem_ptr v155, ptr bool, v156, !3502
        v158 = load v157, !3500
        cbr v158, entry_159_block0(), entry_159_block2(), !3503

        unwrap_158_block1():
        v159 = get_local ptr u64, code_, !3504
        v160 = const u64 0, !1038
        store v160 to v159, !3505
        v161 = get_local ptr u64, code_, !3506
        v162 = load v161, !3507
        revert v162, !3508

        entry_159_block0():
        v163 = get_local ptr string<2>, __const
        v164 = get_local ptr ptr { {  }, bool }, self_5, !3509
        v165 = load v164, !3500
        v166 = const u64 0
        v167 = get_elem_ptr v165, ptr {  }, v166, !3510
        v168 = get_local ptr string<2>, __anon_01, !3500
        mem_copy_val v168, v163
        v169 = ptr_to_int v168 to u64, !3511
        v170 = get_local ptr { u64, u64 }, __anon_10, !3512
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !3500
        store v169 to v172, !3513
        v173 = const u64 1
        v174 = get_elem_ptr v170, ptr u64, v173, !3500
        v175 = const u64 2
        store v175 to v174, !3514
        v176 = get_local ptr slice, __anon_2, !3515
        mem_copy_bytes v176, v170, 16, !3500
        v177 = get_local ptr {  }, __tmp_arg
        mem_copy_val v177, v167
        v178 = get_local ptr slice, __tmp_arg0
        mem_copy_val v178, v176
        v179 = call print_str_1(v177, v178)
        br entry_159_block2(), !3500

        entry_159_block2():
        v180 = get_local ptr u64, value_, !3516
        v181 = load v180, !3500
        v182 = get_local ptr ptr { {  }, bool }, self_5, !3517
        v183 = load v182, !3500
        v184 = const u64 0
        v185 = get_elem_ptr v183, ptr {  }, v184, !3518
        v186 = call fmt_38(v181, v185), !3519
        v187 = get_local ptr ptr { {  }, bool }, self_5, !3520
        v188 = load v187, !3500
        v189 = const u64 1
        v190 = get_elem_ptr v188, ptr bool, v189, !3521
        v191 = const bool true, !782
        store v191 to v190, !3522
        br while()

        end_while():
        v192 = get_local ptr { {  }, bool }, l, !3523
        v193 = call finish_72(v192), !3526
        v194 = const unit ()
        ret () v194
    }
}

!0 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg/src/main.<autogenerated>.sw"
!1 = span !0 0 125
!2 = fn_name_span !0 7 14
!3 = (!1 !2)
!4 = span !0 66 72
!5 = fn_call_path_span !0 66 70
!6 = (!4 !5)
!7 = span !0 48 73
!8 = span !0 104 110
!9 = span !0 90 111
!10 = fn_call_path_span !0 90 96
!11 = (!9 !10)
!12 = "/home/kebradalaonda/p/sway/sway-lib-std/src/codec.sw"
!13 = span !12 70852 70856
!14 = (!9 !10 !13)
!15 = span !12 70868 70881
!16 = fn_call_path_span !12 70868 70879
!17 = (!9 !10 !15 !16)
!18 = (!9 !10 !15 !16)
!19 = (!9 !10 !15 !16)
!20 = (!9 !10 !15 !16)
!21 = (!9 !10 !15 !16)
!22 = (!9 !10 !15 !16)
!23 = (!9 !10 !15 !16)
!24 = (!9 !10 !15 !16)
!25 = (!9 !10 !15 !16)
!26 = (!9 !10 !15 !16)
!27 = span !12 191 254
!28 = (!9 !10 !15 !16 !27)
!29 = (!9 !10 !15 !16)
!30 = span !12 70852 70882
!31 = fn_call_path_span !12 70857 70867
!32 = (!9 !10 !30 !31)
!33 = (!9 !10 !30 !31)
!34 = span !12 4768 4774
!35 = (!9 !10 !30 !31 !34)
!36 = span !12 87 114
!37 = (!9 !10 !30 !31 !36)
!38 = (!9 !10 !30 !31)
!39 = (!9 !10 !30 !31)
!40 = (!9 !10 !30 !31)
!41 = (!9 !10 !30 !31)
!42 = (!9 !10 !30 !31)
!43 = (!9 !10 !30 !31)
!44 = (!9 !10 !30 !31)
!45 = (!9 !10 !30 !31)
!46 = span !12 4783 4787
!47 = (!9 !10 !30 !31 !46)
!48 = (!9 !10 !30 !31)
!49 = (!9 !10 !30 !31)
!50 = (!9 !10 !30 !31)
!51 = (!9 !10 !30 !31)
!52 = (!9 !10 !30 !31)
!53 = (!9 !10 !30 !31)
!54 = (!9 !10 !30 !31)
!55 = (!9 !10 !30 !31)
!56 = (!9 !10 !30 !31)
!57 = (!9 !10 !30 !31)
!58 = (!9 !10 !30 !31)
!59 = (!9 !10 !30 !31)
!60 = (!9 !10 !30 !31)
!61 = (!9 !10 !30 !31)
!62 = (!9 !10 !30 !31)
!63 = (!9 !10 !30 !31)
!64 = (!9 !10 !30 !31)
!65 = span !12 4716 4799
!66 = (!9 !10 !30 !31 !65)
!67 = (!9 !10 !30 !31)
!68 = span !12 70839 70883
!69 = (!9 !10 !68)
!70 = span !12 70888 70894
!71 = (!9 !10 !70)
!72 = span !12 70888 70909
!73 = fn_call_path_span !12 70895 70907
!74 = (!9 !10 !72 !73)
!75 = span !12 573 577
!76 = (!9 !10 !72 !73 !75)
!77 = (!9 !10 !72 !73 !36)
!78 = (!9 !10 !72 !73)
!79 = (!9 !10 !72 !73)
!80 = (!9 !10 !72 !73)
!81 = (!9 !10 !72 !73)
!82 = (!9 !10 !72 !73)
!83 = (!9 !10 !72 !73)
!84 = (!9 !10 !72 !73)
!85 = (!9 !10 !72 !73)
!86 = (!9 !10 !72 !73)
!87 = (!9 !10 !72 !73)
!88 = (!9 !10 !30 !31)
!89 = (!9 !10 !30 !31)
!90 = (!9 !10 !30 !31)
!91 = (!9 !10 !30 !31)
!92 = "/home/kebradalaonda/p/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/intrinsics/dbg/src/main.sw"
!93 = span !92 129 3045
!94 = fn_name_span !92 132 136
!95 = (!93 !94)
!96 = span !92 166 168
!97 = span !92 160 169
!98 = "/home/kebradalaonda/p/sway/sway-lib-std/src/debug.sw"
!99 = span !98 6701 6702
!100 = span !98 6713 6717
!101 = span !98 5397 5403
!102 = (!97 !101)
!103 = span !98 5382 5404
!104 = fn_call_path_span !98 5382 5396
!105 = (!97 !103 !104)
!106 = (!97 !103 !104)
!107 = span !98 400 402
!108 = (!97 !103 !104 !107)
!109 = (!97 !103 !104)
!110 = span !98 390 394
!111 = span !98 382 441
!112 = (!97 !103 !104 !111)
!113 = span !98 414 434
!114 = span !92 152 170
!115 = span !92 190 194
!116 = span !92 184 195
!117 = (!116 !101)
!118 = (!116 !103 !104)
!119 = (!116 !103 !104)
!120 = (!116 !103 !104 !107)
!121 = (!116 !103 !104)
!122 = (!116 !103 !104 !111)
!123 = span !92 176 196
!124 = span !92 215 220
!125 = span !92 209 221
!126 = (!125 !101)
!127 = (!125 !103 !104)
!128 = (!125 !103 !104)
!129 = (!125 !103 !104 !107)
!130 = (!125 !103 !104)
!131 = (!125 !103 !104 !111)
!132 = span !92 201 222
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!134 = span !133 6474 6475
!135 = span !92 236 252
!136 = (!135 !101)
!137 = (!135 !103 !104)
!138 = (!135 !103 !104)
!139 = (!135 !103 !104 !107)
!140 = (!135 !103 !104)
!141 = (!135 !103 !104 !111)
!142 = span !92 228 253
!143 = span !92 272 275
!144 = span !92 266 276
!145 = (!144 !101)
!146 = (!144 !103 !104)
!147 = (!144 !103 !104)
!148 = (!144 !103 !104 !107)
!149 = (!144 !103 !104)
!150 = (!144 !103 !104 !111)
!151 = span !92 258 277
!152 = span !92 296 300
!153 = span !92 290 301
!154 = (!153 !101)
!155 = (!153 !103 !104)
!156 = (!153 !103 !104)
!157 = (!153 !103 !104 !107)
!158 = (!153 !103 !104)
!159 = (!153 !103 !104 !111)
!160 = span !92 282 302
!161 = span !92 321 326
!162 = span !92 315 327
!163 = (!162 !101)
!164 = (!162 !103 !104)
!165 = (!162 !103 !104)
!166 = (!162 !103 !104 !107)
!167 = (!162 !103 !104)
!168 = (!162 !103 !104 !111)
!169 = span !92 307 328
!170 = span !133 6851 6854
!171 = span !92 341 357
!172 = (!171 !101)
!173 = (!171 !103 !104)
!174 = (!171 !103 !104)
!175 = (!171 !103 !104 !107)
!176 = (!171 !103 !104)
!177 = (!171 !103 !104 !111)
!178 = span !92 333 358
!179 = span !133 5031 5032
!180 = span !92 372 389
!181 = (!180 !101)
!182 = (!180 !103 !104)
!183 = (!180 !103 !104)
!184 = (!180 !103 !104 !107)
!185 = (!180 !103 !104)
!186 = (!180 !103 !104 !111)
!187 = span !92 364 390
!188 = span !92 409 413
!189 = span !92 403 414
!190 = (!189 !101)
!191 = (!189 !103 !104)
!192 = (!189 !103 !104)
!193 = (!189 !103 !104 !107)
!194 = (!189 !103 !104)
!195 = (!189 !103 !104 !111)
!196 = span !92 395 415
!197 = span !92 434 439
!198 = span !92 428 440
!199 = (!198 !101)
!200 = (!198 !103 !104)
!201 = (!198 !103 !104)
!202 = (!198 !103 !104 !107)
!203 = (!198 !103 !104)
!204 = (!198 !103 !104 !111)
!205 = span !92 420 441
!206 = span !92 460 466
!207 = span !92 454 467
!208 = (!207 !101)
!209 = (!207 !103 !104)
!210 = (!207 !103 !104)
!211 = (!207 !103 !104 !107)
!212 = (!207 !103 !104)
!213 = (!207 !103 !104 !111)
!214 = span !92 446 468
!215 = span !133 5415 5420
!216 = span !92 481 498
!217 = (!216 !101)
!218 = (!216 !103 !104)
!219 = (!216 !103 !104)
!220 = (!216 !103 !104 !107)
!221 = (!216 !103 !104)
!222 = (!216 !103 !104 !111)
!223 = span !92 473 499
!224 = span !133 3573 3574
!225 = span !92 513 530
!226 = (!225 !101)
!227 = (!225 !103 !104)
!228 = (!225 !103 !104)
!229 = (!225 !103 !104 !107)
!230 = (!225 !103 !104)
!231 = (!225 !103 !104 !111)
!232 = span !92 505 531
!233 = span !92 550 554
!234 = span !92 544 555
!235 = (!234 !101)
!236 = (!234 !103 !104)
!237 = (!234 !103 !104)
!238 = (!234 !103 !104 !107)
!239 = (!234 !103 !104)
!240 = (!234 !103 !104 !111)
!241 = span !92 536 556
!242 = span !92 575 580
!243 = span !92 569 581
!244 = (!243 !101)
!245 = (!243 !103 !104)
!246 = (!243 !103 !104)
!247 = (!243 !103 !104 !107)
!248 = (!243 !103 !104)
!249 = (!243 !103 !104 !111)
!250 = span !92 561 582
!251 = span !92 601 607
!252 = span !92 595 608
!253 = (!252 !101)
!254 = (!252 !103 !104)
!255 = (!252 !103 !104)
!256 = (!252 !103 !104 !107)
!257 = (!252 !103 !104)
!258 = (!252 !103 !104 !111)
!259 = span !92 587 609
!260 = span !133 3962 3972
!261 = span !92 622 639
!262 = (!261 !101)
!263 = (!261 !103 !104)
!264 = (!261 !103 !104)
!265 = (!261 !103 !104 !107)
!266 = (!261 !103 !104)
!267 = (!261 !103 !104 !111)
!268 = span !92 614 640
!269 = span !133 2097 2098
!270 = span !92 654 671
!271 = (!270 !101)
!272 = (!270 !103 !104)
!273 = (!270 !103 !104)
!274 = (!270 !103 !104 !107)
!275 = (!270 !103 !104)
!276 = (!270 !103 !104 !111)
!277 = span !92 646 672
!278 = span !92 691 695
!279 = span !92 685 696
!280 = (!279 !101)
!281 = (!279 !103 !104)
!282 = (!279 !103 !104)
!283 = (!279 !103 !104 !107)
!284 = (!279 !103 !104)
!285 = (!279 !103 !104 !111)
!286 = span !92 677 697
!287 = span !92 716 721
!288 = span !92 710 722
!289 = (!288 !101)
!290 = (!288 !103 !104)
!291 = (!288 !103 !104)
!292 = (!288 !103 !104 !107)
!293 = (!288 !103 !104)
!294 = (!288 !103 !104 !111)
!295 = span !92 702 723
!296 = span !92 742 748
!297 = span !92 736 749
!298 = (!297 !101)
!299 = (!297 !103 !104)
!300 = (!297 !103 !104)
!301 = (!297 !103 !104 !107)
!302 = (!297 !103 !104)
!303 = (!297 !103 !104 !111)
!304 = span !92 728 750
!305 = span !133 2493 2513
!306 = span !92 763 780
!307 = (!306 !101)
!308 = (!306 !103 !104)
!309 = (!306 !103 !104)
!310 = (!306 !103 !104 !107)
!311 = (!306 !103 !104)
!312 = (!306 !103 !104 !111)
!313 = span !92 755 781
!314 = span !92 795 813
!315 = (!314 !101)
!316 = (!314 !103 !104)
!317 = (!314 !103 !104)
!318 = (!314 !103 !104 !107)
!319 = (!314 !103 !104)
!320 = (!314 !103 !104 !111)
!321 = span !92 787 814
!322 = span !92 827 839
!323 = (!322 !101)
!324 = (!322 !103 !104)
!325 = (!322 !103 !104)
!326 = (!322 !103 !104 !107)
!327 = (!322 !103 !104)
!328 = (!322 !103 !104 !111)
!329 = span !92 819 840
!330 = span !92 853 866
!331 = (!330 !101)
!332 = (!330 !103 !104)
!333 = (!330 !103 !104)
!334 = (!330 !103 !104 !107)
!335 = (!330 !103 !104)
!336 = (!330 !103 !104 !111)
!337 = span !92 845 867
!338 = span !92 880 894
!339 = (!338 !101)
!340 = (!338 !103 !104)
!341 = (!338 !103 !104)
!342 = (!338 !103 !104 !107)
!343 = (!338 !103 !104)
!344 = (!338 !103 !104 !111)
!345 = span !92 872 895
!346 = span !92 908 926
!347 = (!346 !101)
!348 = (!346 !103 !104)
!349 = (!346 !103 !104)
!350 = (!346 !103 !104 !107)
!351 = (!346 !103 !104)
!352 = (!346 !103 !104 !111)
!353 = span !92 900 927
!354 = span !92 941 959
!355 = (!354 !101)
!356 = (!354 !103 !104)
!357 = (!354 !103 !104)
!358 = (!354 !103 !104 !107)
!359 = (!354 !103 !104)
!360 = (!354 !103 !104 !111)
!361 = span !92 933 960
!362 = span !92 973 991
!363 = (!362 !101)
!364 = (!362 !103 !104)
!365 = (!362 !103 !104)
!366 = (!362 !103 !104 !107)
!367 = (!362 !103 !104)
!368 = (!362 !103 !104 !111)
!369 = span !92 965 992
!370 = span !92 1027 1030
!371 = span !92 1021 1031
!372 = (!371 !101)
!373 = (!371 !103 !104)
!374 = (!371 !103 !104)
!375 = (!371 !103 !104 !107)
!376 = (!371 !103 !104)
!377 = (!371 !103 !104 !111)
!378 = span !92 1013 1032
!379 = span !92 1045 1071
!380 = span !98 28803 28807
!381 = span !98 28788 28808
!382 = fn_call_path_span !98 28788 28802
!383 = (!381 !382)
!384 = "/home/kebradalaonda/p/sway/sway-lib-std/src/str.sw"
!385 = span !384 485 527
!386 = (!381 !382 !385)
!387 = (!381 !382 !385)
!388 = span !384 552 553
!389 = (!381 !382 !388)
!390 = span !384 542 554
!391 = (!381 !382 !390)
!392 = span !384 532 555
!393 = (!381 !382 !392)
!394 = (!381 !382 !392)
!395 = span !384 610 613
!396 = (!381 !382 !395)
!397 = span !384 571 712
!398 = (!381 !382 !397)
!399 = span !384 625 634
!400 = span !384 644 656
!401 = span !384 666 683
!402 = span !384 561 713
!403 = (!381 !382 !402)
!404 = (!381 !382 !402)
!405 = span !384 727 730
!406 = (!381 !382 !405)
!407 = span !384 732 740
!408 = (!381 !382 !407)
!409 = span !384 726 741
!410 = (!381 !382 !409)
!411 = (!381 !382 !409)
!412 = (!381 !382 !409)
!413 = span !98 28813 28814
!414 = (!379 !101)
!415 = (!379 !103 !104)
!416 = (!379 !103 !104)
!417 = (!379 !103 !104 !107)
!418 = (!379 !103 !104)
!419 = (!379 !103 !104 !111)
!420 = span !92 1037 1072
!421 = span !92 1111 1114
!422 = span !92 1110 1120
!423 = span !92 1116 1119
!424 = span !92 1104 1121
!425 = span !98 40329 40330
!426 = span !98 40343 40345
!427 = span !98 40317 40347
!428 = span !98 40368 40369
!429 = span !98 40376 40380
!430 = span !98 40381 40382
!431 = span !98 40368 40383
!432 = fn_call_path_span !98 40370 40375
!433 = (!431 !432)
!434 = span !98 6423 6427
!435 = (!431 !432 !434)
!436 = span !98 626 642
!437 = (!431 !432 !436)
!438 = span !98 6423 6438
!439 = (!431 !432 !438)
!440 = span !98 6453 6457
!441 = (!431 !432 !440)
!442 = span !98 608 620
!443 = (!431 !432 !442)
!444 = span !98 6470 6474
!445 = (!431 !432 !444)
!446 = (!431 !432 !444)
!447 = (!431 !432 !444)
!448 = (!431 !432 !444)
!449 = (!431 !432 !444)
!450 = span !98 6496 6501
!451 = (!431 !432 !450)
!452 = span !98 6506 6510
!453 = (!431 !432 !452)
!454 = (!431 !432 !442)
!455 = span !98 6524 6546
!456 = (!431 !432 !455)
!457 = (!431 !432 !455)
!458 = span !98 6542 6546
!459 = (!431 !432 !455)
!460 = span !98 6557 6561
!461 = (!431 !432 !460)
!462 = span !98 40356 40384
!463 = span !98 40405 40406
!464 = span !98 40413 40417
!465 = span !98 40418 40419
!466 = span !98 40393 40421
!467 = span !98 40430 40431
!468 = span !98 40430 40440
!469 = fn_call_path_span !98 40432 40438
!470 = (!468 !469)
!471 = (!424 !101)
!472 = (!424 !103 !104)
!473 = (!424 !103 !104)
!474 = (!424 !103 !104 !107)
!475 = (!424 !103 !104)
!476 = (!424 !103 !104 !111)
!477 = span !92 1096 1122
!478 = span !92 1141 1151
!479 = span !92 1142 1145
!480 = span !92 1147 1150
!481 = span !92 1135 1152
!482 = span !98 9192 9193
!483 = span !98 9180 9207
!484 = span !98 9216 9230
!485 = span !98 9228 9229
!486 = span !98 9245 9246
!487 = span !98 9245 9250
!488 = fn_call_path_span !98 9247 9248
!489 = (!487 !488)
!490 = span !98 9249 9250
!491 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!492 = span !491 21076 21080
!493 = (!487 !488 !492)
!494 = span !491 21082 21087
!495 = (!487 !488 !494)
!496 = span !98 9269 9270
!497 = span !98 9277 9281
!498 = span !98 9282 9283
!499 = span !98 9277 9284
!500 = span !98 9265 9285
!501 = span !98 9299 9300
!502 = span !98 9299 9305
!503 = fn_call_path_span !98 9301 9303
!504 = (!502 !503)
!505 = span !98 9304 9305
!506 = span !491 1322 1326
!507 = (!502 !503 !506)
!508 = span !491 1328 1333
!509 = (!502 !503 !508)
!510 = span !98 9326 9327
!511 = span !98 9326 9336
!512 = fn_call_path_span !98 9328 9334
!513 = (!511 !512)
!514 = (!481 !101)
!515 = (!481 !103 !104)
!516 = (!481 !103 !104)
!517 = (!481 !103 !104 !107)
!518 = (!481 !103 !104)
!519 = (!481 !103 !104 !111)
!520 = span !92 1127 1153
!521 = span !92 1181 1191
!522 = span !92 1182 1185
!523 = span !92 1187 1190
!524 = span !92 1193 1194
!525 = span !92 1196 1197
!526 = span !92 1166 1199
!527 = span !98 7986 7987
!528 = span !98 7974 8001
!529 = span !98 8011 8025
!530 = span !98 8023 8024
!531 = span !98 8040 8041
!532 = span !98 8044 8048
!533 = span !98 8044 8054
!534 = fn_call_path_span !98 8049 8052
!535 = (!533 !534)
!536 = "/home/kebradalaonda/p/sway/sway-lib-std/src/slice.sw"
!537 = span !536 243 247
!538 = (!533 !534 !537)
!539 = span !536 221 291
!540 = (!533 !534 !539)
!541 = (!533 !534 !539)
!542 = (!533 !534 !539)
!543 = (!533 !534 !539)
!544 = (!533 !534 !539)
!545 = (!533 !534 !539)
!546 = (!533 !534 !539)
!547 = (!533 !534 !539)
!548 = (!533 !534 !539)
!549 = span !536 300 303
!550 = (!533 !534 !549)
!551 = span !98 8040 8054
!552 = fn_call_path_span !98 8042 8043
!553 = (!551 !552)
!554 = (!551 !552 !492)
!555 = (!551 !552 !494)
!556 = span !98 8094 8098
!557 = span !98 8100 8101
!558 = span !98 8069 8103
!559 = span !98 8120 8121
!560 = span !98 8128 8132
!561 = span !98 8116 8133
!562 = span !98 8147 8148
!563 = span !98 8147 8153
!564 = fn_call_path_span !98 8149 8151
!565 = (!563 !564)
!566 = span !98 8152 8153
!567 = (!563 !564 !506)
!568 = (!563 !564 !508)
!569 = span !98 8174 8175
!570 = span !98 8174 8184
!571 = fn_call_path_span !98 8176 8182
!572 = (!570 !571)
!573 = (!526 !101)
!574 = (!526 !103 !104)
!575 = (!526 !103 !104)
!576 = (!526 !103 !104 !107)
!577 = (!526 !103 !104)
!578 = (!526 !103 !104 !111)
!579 = span !92 1158 1200
!580 = span !92 1243 1248
!581 = span !92 1237 1249
!582 = (!581 !101)
!583 = (!581 !103 !104)
!584 = (!581 !103 !104)
!585 = (!581 !103 !104 !107)
!586 = (!581 !103 !104)
!587 = (!581 !103 !104 !111)
!588 = span !92 1229 1250
!589 = span !92 41 69
!590 = span !92 1263 1277
!591 = (!590 !101)
!592 = (!590 !103 !104)
!593 = (!590 !103 !104)
!594 = (!590 !103 !104 !107)
!595 = (!590 !103 !104)
!596 = (!590 !103 !104 !111)
!597 = span !92 1255 1278
!598 = span !92 1305 1310
!599 = span !92 1291 1312
!600 = (!599 !101)
!601 = (!599 !103 !104)
!602 = (!599 !103 !104)
!603 = (!599 !103 !104 !107)
!604 = (!599 !103 !104)
!605 = (!599 !103 !104 !111)
!606 = span !92 1283 1313
!607 = span !92 1376 1405
!608 = fn_call_path_span !92 1376 1403
!609 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!610 = span !609 1248 1296
!611 = (!607 !608 !610)
!612 = (!607 !608)
!613 = span !92 1370 1406
!614 = (!613 !101)
!615 = (!613 !103 !104)
!616 = (!613 !103 !104)
!617 = (!613 !103 !104 !107)
!618 = (!613 !103 !104)
!619 = (!613 !103 !104 !111)
!620 = span !92 1362 1407
!621 = span !92 1426 1456
!622 = fn_call_path_span !92 1426 1454
!623 = "/home/kebradalaonda/p/sway/sway-lib-std/src/asset_id.sw"
!624 = span !623 31348 31396
!625 = (!621 !622 !624)
!626 = (!621 !622)
!627 = span !92 1420 1457
!628 = (!627 !101)
!629 = (!627 !103 !104)
!630 = (!627 !103 !104)
!631 = (!627 !103 !104 !107)
!632 = (!627 !103 !104)
!633 = (!627 !103 !104 !111)
!634 = span !92 1412 1458
!635 = "/home/kebradalaonda/p/sway/sway-lib-std/src/auth.sw"
!636 = span !635 513 784
!637 = span !92 1471 1530
!638 = "/home/kebradalaonda/p/sway/sway-lib-std/src/auth.<autogenerated>.sw"
!639 = span !638 179 183
!640 = span !638 173 446
!641 = span !638 186 327
!642 = fn_call_path_span !638 186 327
!643 = (!641 !642)
!644 = span !491 16833 16837
!645 = (!641 !642 !644)
!646 = span !491 16839 16844
!647 = (!641 !642 !646)
!648 = span !638 257 259
!649 = span !638 270 302
!650 = span !638 329 442
!651 = fn_call_path_span !638 329 442
!652 = (!650 !651)
!653 = (!650 !651 !644)
!654 = (!650 !651 !646)
!655 = span !638 386 388
!656 = span !638 399 417
!657 = (!637 !101)
!658 = (!637 !103 !104)
!659 = (!637 !103 !104)
!660 = (!637 !103 !104 !107)
!661 = (!637 !103 !104)
!662 = (!637 !103 !104 !111)
!663 = span !92 1463 1531
!664 = span !92 1550 1573
!665 = fn_call_path_span !92 1550 1571
!666 = "/home/kebradalaonda/p/sway/sway-lib-std/src/b512.sw"
!667 = span !666 3414 3442
!668 = (!664 !665 !667)
!669 = (!664 !665)
!670 = span !666 3389 3453
!671 = (!664 !665 !670)
!672 = span !92 1544 1574
!673 = "/home/kebradalaonda/p/sway/sway-lib-std/src/b512.<autogenerated>.sw"
!674 = span !673 168 170
!675 = span !673 184 190
!676 = span !673 198 204
!677 = span !673 206 210
!678 = span !666 529 544
!679 = span !673 168 216
!680 = fn_call_path_span !673 192 197
!681 = (!679 !680)
!682 = span !98 5688 5692
!683 = (!679 !680 !682)
!684 = span !98 492 508
!685 = (!679 !680 !684)
!686 = span !98 5688 5703
!687 = (!679 !680 !686)
!688 = span !98 5718 5722
!689 = (!679 !680 !688)
!690 = span !98 474 486
!691 = (!679 !680 !690)
!692 = span !98 5735 5739
!693 = (!679 !680 !692)
!694 = (!679 !680 !692)
!695 = (!679 !680 !692)
!696 = (!679 !680 !692)
!697 = (!679 !680 !692)
!698 = span !98 5761 5765
!699 = (!679 !680 !698)
!700 = (!679 !680 !690)
!701 = span !98 5778 5782
!702 = (!679 !680 !701)
!703 = span !98 5793 5797
!704 = (!679 !680 !703)
!705 = (!679 !680 !690)
!706 = span !98 5810 5814
!707 = (!679 !680 !706)
!708 = (!679 !680 !706)
!709 = (!679 !680 !706)
!710 = (!679 !680 !706)
!711 = (!679 !680 !706)
!712 = span !98 5825 5830
!713 = (!679 !680 !712)
!714 = span !98 5835 5839
!715 = (!679 !680 !714)
!716 = (!679 !680 !690)
!717 = span !98 5825 5842
!718 = fn_call_path_span !98 5831 5834
!719 = (!679 !680 !717 !718)
!720 = (!679 !680 !717 !718)
!721 = (!679 !680 !717 !718)
!722 = (!679 !680 !717 !718 !482)
!723 = (!679 !680 !717 !718)
!724 = (!679 !680 !717 !718 !483)
!725 = (!679 !680 !717 !718 !484)
!726 = (!679 !680 !717 !718 !484)
!727 = (!679 !680 !717 !718)
!728 = (!679 !680 !717 !718 !486)
!729 = (!679 !680 !717 !718 !487 !488)
!730 = (!679 !680 !717 !718 !487 !488)
!731 = (!679 !680 !717 !718 !487 !488)
!732 = (!679 !680 !717 !718 !487 !488 !492)
!733 = (!679 !680 !717 !718 !487 !488)
!734 = (!679 !680 !717 !718 !487 !488 !494)
!735 = (!679 !680 !717 !718 !487 !488)
!736 = (!679 !680 !717 !718 !487 !488)
!737 = (!679 !680 !717 !718)
!738 = (!679 !680 !717 !718 !496)
!739 = (!679 !680 !717 !718 !497)
!740 = (!679 !680 !717 !718 !498)
!741 = (!679 !680 !717 !718)
!742 = (!679 !680 !717 !718 !499)
!743 = span !98 9269 9285
!744 = fn_call_path_span !98 9271 9276
!745 = (!679 !680 !717 !718 !743 !744)
!746 = (!679 !680 !717 !718 !743 !744)
!747 = (!679 !680 !717 !718 !743 !744)
!748 = span !98 6086 6090
!749 = (!679 !680 !717 !718 !743 !744 !748)
!750 = (!679 !680 !717 !718 !743 !744)
!751 = span !98 558 575
!752 = (!679 !680 !717 !718 !743 !744 !751)
!753 = (!679 !680 !717 !718 !743 !744)
!754 = span !98 6086 6102
!755 = (!679 !680 !717 !718 !743 !744 !754)
!756 = span !98 6117 6121
!757 = (!679 !680 !717 !718 !743 !744 !756)
!758 = (!679 !680 !717 !718 !743 !744)
!759 = span !98 540 552
!760 = (!679 !680 !717 !718 !743 !744 !759)
!761 = (!679 !680 !717 !718 !743 !744)
!762 = span !98 6134 6138
!763 = (!679 !680 !717 !718 !743 !744 !762)
!764 = (!679 !680 !717 !718 !743 !744 !762)
!765 = (!679 !680 !717 !718 !743 !744)
!766 = (!679 !680 !717 !718 !743 !744 !762)
!767 = (!679 !680 !717 !718 !743 !744)
!768 = (!679 !680 !717 !718 !743 !744 !762)
!769 = (!679 !680 !717 !718 !743 !744 !762)
!770 = (!679 !680 !717 !718 !743 !744)
!771 = (!679 !680 !717 !718 !743 !744)
!772 = span !98 6160 6165
!773 = (!679 !680 !717 !718 !743 !744 !772)
!774 = span !98 6170 6174
!775 = (!679 !680 !717 !718 !743 !744 !774)
!776 = (!679 !680 !717 !718 !743 !744)
!777 = (!679 !680 !717 !718 !743 !744 !759)
!778 = span !98 6188 6211
!779 = (!679 !680 !717 !718 !743 !744 !778)
!780 = (!679 !680 !717 !718 !743 !744)
!781 = (!679 !680 !717 !718 !743 !744 !778)
!782 = span !98 6207 6211
!783 = (!679 !680 !717 !718 !743 !744 !778)
!784 = span !98 6222 6226
!785 = (!679 !680 !717 !718 !743 !744 !784)
!786 = (!679 !680 !717 !718 !743 !744)
!787 = (!679 !680 !717 !718 !500)
!788 = (!679 !680 !717 !718 !501)
!789 = (!679 !680 !717 !718 !502 !503)
!790 = (!679 !680 !717 !718 !502 !503)
!791 = (!679 !680 !717 !718 !502 !503)
!792 = (!679 !680 !717 !718 !502 !503 !506)
!793 = (!679 !680 !717 !718 !502 !503)
!794 = (!679 !680 !717 !718 !502 !503 !508)
!795 = (!679 !680 !717 !718 !502 !503)
!796 = (!679 !680 !717 !718 !502 !503)
!797 = (!679 !680 !717 !718 !502)
!798 = (!679 !680 !717 !718 !502)
!799 = (!679 !680 !717 !718)
!800 = (!679 !680 !717 !718 !510)
!801 = (!679 !680 !717 !718 !511 !512)
!802 = span !98 5853 5875
!803 = (!679 !680 !802)
!804 = (!679 !680 !802)
!805 = span !98 5871 5875
!806 = (!679 !680 !802)
!807 = span !98 5886 5890
!808 = (!679 !680 !807)
!809 = span !673 168 226
!810 = fn_call_path_span !673 218 224
!811 = (!809 !810)
!812 = (!672 !101)
!813 = (!672 !103 !104)
!814 = (!672 !103 !104)
!815 = (!672 !103 !104 !107)
!816 = (!672 !103 !104)
!817 = (!672 !103 !104 !111)
!818 = span !92 1536 1575
!819 = "/home/kebradalaonda/p/sway/sway-lib-std/src/block.sw"
!820 = span !819 261 376
!821 = span !92 1611 1664
!822 = "/home/kebradalaonda/p/sway/sway-lib-std/src/block.<autogenerated>.sw"
!823 = span !822 184 188
!824 = span !822 178 317
!825 = span !822 191 313
!826 = fn_call_path_span !822 191 313
!827 = (!825 !826)
!828 = (!825 !826 !644)
!829 = (!825 !826 !646)
!830 = span !822 255 257
!831 = span !822 268 288
!832 = (!821 !101)
!833 = (!821 !103 !104)
!834 = (!821 !103 !104)
!835 = (!821 !103 !104 !107)
!836 = (!821 !103 !104)
!837 = (!821 !103 !104 !111)
!838 = span !92 1603 1665
!839 = span !92 1710 1734
!840 = fn_call_path_span !92 1710 1732
!841 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!842 = span !841 3322 3337
!843 = fn_call_path_span !841 3322 3335
!844 = span !841 574 588
!845 = fn_call_path_span !841 574 585
!846 = (!839 !840 !842 !843 !844 !845)
!847 = span !841 586 587
!848 = (!839 !840 !842 !843 !844 !845)
!849 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!850 = span !849 3325 3330
!851 = (!839 !840 !842 !843 !844 !845 !850)
!852 = (!839 !840 !842 !843 !844 !845)
!853 = span !849 3315 3378
!854 = (!839 !840 !842 !843 !844 !845 !853)
!855 = span !849 3342 3351
!856 = span !841 550 619
!857 = (!839 !840 !842 !843 !856)
!858 = (!839 !840 !842 !843)
!859 = (!839 !840 !842 !843 !856)
!860 = (!839 !840 !842 !843)
!861 = span !841 607 608
!862 = (!839 !840 !842 !843 !856)
!863 = span !841 3298 3368
!864 = (!839 !840 !863)
!865 = (!839 !840)
!866 = span !841 3356 3357
!867 = (!839 !840 !863)
!868 = span !92 1694 1735
!869 = span !92 1744 1749
!870 = span !92 1755 1756
!871 = span !92 1744 1757
!872 = fn_call_path_span !92 1750 1754
!873 = (!871 !872)
!874 = span !92 1767 1772
!875 = span !92 1778 1779
!876 = span !92 1767 1780
!877 = fn_call_path_span !92 1773 1777
!878 = (!876 !877)
!879 = span !92 1790 1795
!880 = span !92 1801 1802
!881 = span !92 1790 1803
!882 = fn_call_path_span !92 1796 1800
!883 = (!881 !882)
!884 = span !92 1813 1818
!885 = span !92 1678 1825
!886 = span !841 35618 35619
!887 = span !841 35606 35633
!888 = span !841 35654 35658
!889 = span !841 35654 35665
!890 = fn_call_path_span !841 35659 35663
!891 = (!889 !890)
!892 = span !841 28227 28231
!893 = (!889 !890 !892)
!894 = span !841 28195 28264
!895 = (!889 !890 !894)
!896 = span !841 28252 28253
!897 = (!889 !890 !894)
!898 = fn_call_path_span !841 35654 35665
!899 = (!889 !898)
!900 = span !841 35377 35381
!901 = (!889 !898 !900)
!902 = span !841 34485 34495
!903 = (!889 !898 !902)
!904 = span !841 35391 35395
!905 = (!889 !898 !904)
!906 = span !841 34466 34479
!907 = (!889 !898 !906)
!908 = span !841 2522 2530
!909 = (!889 !898 !908)
!910 = span !841 35377 35406
!911 = fn_call_path_span !841 35388 35390
!912 = (!889 !898 !910 !911)
!913 = (!889 !898 !910)
!914 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!915 = span !914 2477 2576
!916 = (!889 !898 !915)
!917 = (!889 !898 !915)
!918 = (!889 !898 !915)
!919 = span !841 35421 35432
!920 = (!889 !898 !919)
!921 = span !841 35452 35462
!922 = (!889 !898 !921)
!923 = (!889 !898 !902)
!924 = span !841 35452 35467
!925 = fn_call_path_span !841 35463 35465
!926 = (!889 !898 !924 !925)
!927 = (!889 !898 !924 !925)
!928 = span !841 35466 35467
!929 = (!889 !898 !924 !925)
!930 = (!889 !898 !924 !925 !506)
!931 = (!889 !898 !924 !925)
!932 = (!889 !898 !924 !925 !508)
!933 = (!889 !898 !924 !925)
!934 = (!889 !898 !924 !925)
!935 = (!889 !898 !924)
!936 = (!889 !898 !924)
!937 = (!889 !898 !924)
!938 = (!889 !898 !915)
!939 = (!889 !898 !915)
!940 = (!889 !898 !915)
!941 = span !841 35482 35486
!942 = (!889 !898 !941)
!943 = (!889 !898 !906)
!944 = span !841 35508 35512
!945 = (!889 !898 !944)
!946 = (!889 !898 !902)
!947 = span !841 35508 35522
!948 = fn_call_path_span !841 35519 35520
!949 = (!889 !898 !947 !948)
!950 = (!889 !898 !947 !948)
!951 = span !841 35521 35522
!952 = (!889 !898 !947 !948)
!953 = span !491 4214 4218
!954 = (!889 !898 !947 !948 !953)
!955 = (!889 !898 !947 !948)
!956 = span !491 4220 4225
!957 = (!889 !898 !947 !948 !956)
!958 = (!889 !898 !947 !948)
!959 = (!889 !898 !947 !948)
!960 = span !841 35482 35523
!961 = fn_call_path_span !841 35494 35507
!962 = (!889 !898 !960 !961)
!963 = (!889 !898 !960 !961)
!964 = (!889 !898 !960 !961)
!965 = span !841 7469 7473
!966 = (!889 !898 !960 !961 !965)
!967 = span !841 2461 2474
!968 = (!889 !898 !960 !961 !967)
!969 = span !841 416 428
!970 = (!889 !898 !960 !961 !969)
!971 = span !841 7498 7503
!972 = (!889 !898 !960 !961 !971)
!973 = span !841 7469 7504
!974 = fn_call_path_span !841 7482 7497
!975 = (!889 !898 !960 !961 !973 !974)
!976 = (!889 !898 !960 !961 !973 !974)
!977 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!978 = span !977 6730 6734
!979 = (!889 !898 !960 !961 !973 !974 !978)
!980 = (!889 !898 !960 !961 !973 !974)
!981 = span !977 6744 6750
!982 = (!889 !898 !960 !961 !973 !974 !981)
!983 = (!889 !898 !960 !961 !973 !974)
!984 = span !977 6721 6825
!985 = (!889 !898 !960 !961 !973 !974 !984)
!986 = span !977 6771 6789
!987 = span !841 7469 7516
!988 = fn_call_path_span !841 7505 7514
!989 = (!889 !898 !960 !961 !987 !988)
!990 = (!889 !898 !960 !961 !987 !988)
!991 = span !977 5299 5303
!992 = (!889 !898 !960 !961 !987 !988 !991)
!993 = (!889 !898 !960 !961 !987 !988)
!994 = span !977 5291 5364
!995 = (!889 !898 !960 !961 !987 !988 !994)
!996 = span !977 5323 5334
!997 = (!889 !898 !915)
!998 = (!889 !898 !915)
!999 = span !914 4035 4039
!1000 = span !914 4029 4110
!1001 = span !914 4054 4077
!1002 = fn_call_path_span !914 4054 4077
!1003 = (!1001 !1002)
!1004 = (!1001 !1002 !644)
!1005 = (!1001 !1002 !646)
!1006 = span !914 4071 4076
!1007 = span !914 4095 4099
!1008 = (!889 !898)
!1009 = span !914 4995 4999
!1010 = (!889 !898 !1009)
!1011 = span !914 4989 5071
!1012 = (!889 !898 !1011)
!1013 = (!889 !898 !1009)
!1014 = (!889 !898 !1009)
!1015 = span !914 5014 5033
!1016 = fn_call_path_span !914 5014 5033
!1017 = (!889 !898 !1015 !1016)
!1018 = (!889 !898 !1015 !1016)
!1019 = (!889 !898 !1015 !1016)
!1020 = (!889 !898 !1015 !1016 !644)
!1021 = (!889 !898 !1015 !1016)
!1022 = (!889 !898 !1015 !1016 !646)
!1023 = (!889 !898 !1015 !1016)
!1024 = (!889 !898 !1015 !1016)
!1025 = (!889 !898 !1015)
!1026 = (!889 !898 !1009)
!1027 = span !914 5025 5026
!1028 = (!889 !898 !1027)
!1029 = span !914 5031 5032
!1030 = (!889 !898 !1029)
!1031 = span !841 35646 35650
!1032 = span !841 35688 35689
!1033 = span !841 35696 35700
!1034 = span !841 35680 35702
!1035 = span !914 5051 5060
!1036 = fn_call_path_span !914 5051 5057
!1037 = (!889 !898 !1035 !1036)
!1038 = span !914 5058 5059
!1039 = (!889 !898 !1035 !1036)
!1040 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!1041 = span !1040 766 770
!1042 = (!889 !898 !1035 !1036 !1041)
!1043 = (!889 !898 !1035 !1036)
!1044 = span !1040 757 771
!1045 = (!889 !898 !1035 !1036 !1044)
!1046 = span !841 35721 35722
!1047 = span !841 35721 35731
!1048 = fn_call_path_span !841 35723 35729
!1049 = (!1047 !1048)
!1050 = (!885 !101)
!1051 = (!885 !103 !104)
!1052 = (!885 !103 !104)
!1053 = (!885 !103 !104 !107)
!1054 = (!885 !103 !104)
!1055 = (!885 !103 !104 !111)
!1056 = span !92 1670 1826
!1057 = span !92 1845 1881
!1058 = fn_call_path_span !92 1845 1879
!1059 = "/home/kebradalaonda/p/sway/sway-lib-std/src/contract_id.sw"
!1060 = span !1059 4725 4773
!1061 = (!1057 !1058 !1060)
!1062 = (!1057 !1058)
!1063 = span !92 1839 1882
!1064 = (!1063 !101)
!1065 = (!1063 !103 !104)
!1066 = (!1063 !103 !104)
!1067 = (!1063 !103 !104 !107)
!1068 = (!1063 !103 !104)
!1069 = (!1063 !103 !104 !111)
!1070 = span !92 1831 1883
!1071 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ecr.sw"
!1072 = span !1071 282 466
!1073 = span !92 1917 1967
!1074 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ecr.<autogenerated>.sw"
!1075 = span !1074 184 188
!1076 = span !1074 178 447
!1077 = span !1074 191 321
!1078 = fn_call_path_span !1074 191 321
!1079 = (!1077 !1078)
!1080 = (!1077 !1078 !644)
!1081 = (!1077 !1078 !646)
!1082 = span !1074 259 261
!1083 = span !1074 272 296
!1084 = span !1074 323 443
!1085 = fn_call_path_span !1074 323 443
!1086 = (!1084 !1085)
!1087 = (!1084 !1085 !644)
!1088 = (!1084 !1085 !646)
!1089 = span !1074 386 388
!1090 = span !1074 399 418
!1091 = (!1073 !101)
!1092 = (!1073 !103 !104)
!1093 = (!1073 !103 !104)
!1094 = (!1073 !103 !104 !107)
!1095 = (!1073 !103 !104)
!1096 = (!1073 !103 !104 !111)
!1097 = span !92 1909 1968
!1098 = "/home/kebradalaonda/p/sway/sway-lib-std/src/identity.sw"
!1099 = span !1098 503 574
!1100 = span !92 2020 2035
!1101 = fn_call_path_span !92 2020 2033
!1102 = (!1100 !1101 !610)
!1103 = (!1100 !1101)
!1104 = span !92 1981 2037
!1105 = "/home/kebradalaonda/p/sway/sway-lib-std/src/identity.<autogenerated>.sw"
!1106 = span !1105 178 182
!1107 = span !1105 172 446
!1108 = span !1105 185 311
!1109 = fn_call_path_span !1105 185 311
!1110 = (!1108 !1109)
!1111 = (!1108 !1109 !644)
!1112 = (!1108 !1109 !646)
!1113 = span !1105 203 208
!1114 = span !1105 239 241
!1115 = span !1105 254 264
!1116 = span !1105 272 277
!1117 = span !1105 239 278
!1118 = fn_call_path_span !1105 266 271
!1119 = (!1117 !1118)
!1120 = (!1117 !1118 !434)
!1121 = (!1117 !1118 !436)
!1122 = (!1117 !1118 !438)
!1123 = (!1117 !1118 !440)
!1124 = (!1117 !1118 !442)
!1125 = (!1117 !1118 !444)
!1126 = (!1117 !1118 !444)
!1127 = (!1117 !1118 !444)
!1128 = (!1117 !1118 !444)
!1129 = (!1117 !1118 !444)
!1130 = (!1117 !1118 !450)
!1131 = (!1117 !1118 !452)
!1132 = (!1117 !1118 !442)
!1133 = (!1117 !1118 !455)
!1134 = (!1117 !1118 !455)
!1135 = (!1117 !1118 !455)
!1136 = (!1117 !1118 !460)
!1137 = span !1105 239 287
!1138 = fn_call_path_span !1105 279 285
!1139 = (!1137 !1138)
!1140 = span !1105 313 442
!1141 = fn_call_path_span !1105 313 442
!1142 = (!1140 !1141)
!1143 = (!1140 !1141 !644)
!1144 = (!1140 !1141 !646)
!1145 = span !1105 334 339
!1146 = span !1105 370 372
!1147 = span !1105 385 395
!1148 = span !1105 403 408
!1149 = span !1105 370 409
!1150 = fn_call_path_span !1105 397 402
!1151 = (!1149 !1150)
!1152 = (!1149 !1150 !434)
!1153 = (!1149 !1150 !436)
!1154 = (!1149 !1150 !438)
!1155 = (!1149 !1150 !440)
!1156 = (!1149 !1150 !442)
!1157 = (!1149 !1150 !444)
!1158 = (!1149 !1150 !444)
!1159 = (!1149 !1150 !444)
!1160 = (!1149 !1150 !444)
!1161 = (!1149 !1150 !444)
!1162 = (!1149 !1150 !450)
!1163 = (!1149 !1150 !452)
!1164 = (!1149 !1150 !442)
!1165 = (!1149 !1150 !455)
!1166 = (!1149 !1150 !455)
!1167 = (!1149 !1150 !455)
!1168 = (!1149 !1150 !460)
!1169 = span !1105 370 418
!1170 = fn_call_path_span !1105 410 416
!1171 = (!1169 !1170)
!1172 = (!1104 !101)
!1173 = (!1104 !103 !104)
!1174 = (!1104 !103 !104)
!1175 = (!1104 !103 !104 !107)
!1176 = (!1104 !103 !104)
!1177 = (!1104 !103 !104 !111)
!1178 = span !92 1973 2038
!1179 = "/home/kebradalaonda/p/sway/sway-lib-std/src/inputs.sw"
!1180 = span !1179 1950 2090
!1181 = span !92 2075 2106
!1182 = "/home/kebradalaonda/p/sway/sway-lib-std/src/inputs.<autogenerated>.sw"
!1183 = span !1182 175 179
!1184 = span !1182 169 459
!1185 = span !1182 182 267
!1186 = fn_call_path_span !1182 182 267
!1187 = (!1185 !1186)
!1188 = (!1185 !1186 !644)
!1189 = (!1185 !1186 !646)
!1190 = span !1182 223 225
!1191 = span !1182 236 242
!1192 = span !1182 269 362
!1193 = fn_call_path_span !1182 269 362
!1194 = (!1192 !1193)
!1195 = (!1192 !1193 !644)
!1196 = (!1192 !1193 !646)
!1197 = span !1182 314 316
!1198 = span !1182 327 337
!1199 = span !1182 364 455
!1200 = fn_call_path_span !1182 364 455
!1201 = (!1199 !1200)
!1202 = (!1199 !1200 !644)
!1203 = (!1199 !1200 !646)
!1204 = span !1182 408 410
!1205 = span !1182 421 430
!1206 = (!1181 !101)
!1207 = (!1181 !103 !104)
!1208 = (!1181 !103 !104)
!1209 = (!1181 !103 !104 !107)
!1210 = (!1181 !103 !104)
!1211 = (!1181 !103 !104 !111)
!1212 = span !92 2067 2107
!1213 = span !92 2228 2258
!1214 = fn_call_path_span !92 2228 2256
!1215 = (!1213 !1214 !624)
!1216 = (!1213 !1214)
!1217 = span !92 2158 2281
!1218 = span !92 2207 2208
!1219 = span !92 2273 2274
!1220 = span !92 2152 2282
!1221 = "/home/kebradalaonda/p/sway/sway-lib-std/src/low_level_call.<autogenerated>.sw"
!1222 = span !1221 174 176
!1223 = span !1221 190 202
!1224 = span !1221 210 217
!1225 = span !1221 219 223
!1226 = "/home/kebradalaonda/p/sway/sway-lib-std/src/low_level_call.sw"
!1227 = span !1226 435 449
!1228 = span !1221 238 248
!1229 = span !1221 250 254
!1230 = span !1226 497 518
!1231 = span !1221 174 264
!1232 = fn_call_path_span !1221 232 237
!1233 = (!1231 !1232)
!1234 = (!1231 !1232 !682)
!1235 = (!1231 !1232 !684)
!1236 = (!1231 !1232 !686)
!1237 = (!1231 !1232 !688)
!1238 = (!1231 !1232 !690)
!1239 = (!1231 !1232 !692)
!1240 = (!1231 !1232 !692)
!1241 = (!1231 !1232 !692)
!1242 = (!1231 !1232 !692)
!1243 = (!1231 !1232 !692)
!1244 = (!1231 !1232 !698)
!1245 = (!1231 !1232 !690)
!1246 = (!1231 !1232 !701)
!1247 = (!1231 !1232 !703)
!1248 = (!1231 !1232 !690)
!1249 = (!1231 !1232 !706)
!1250 = (!1231 !1232 !706)
!1251 = (!1231 !1232 !706)
!1252 = (!1231 !1232 !706)
!1253 = (!1231 !1232 !706)
!1254 = (!1231 !1232 !712)
!1255 = (!1231 !1232 !714)
!1256 = (!1231 !1232 !690)
!1257 = (!1231 !1232 !802)
!1258 = (!1231 !1232 !802)
!1259 = (!1231 !1232 !802)
!1260 = (!1231 !1232 !807)
!1261 = span !1221 272 277
!1262 = span !1221 279 283
!1263 = span !1226 548 560
!1264 = span !1221 174 298
!1265 = fn_call_path_span !1221 290 296
!1266 = (!1264 !1265)
!1267 = (!1220 !101)
!1268 = (!1220 !103 !104)
!1269 = (!1220 !103 !104)
!1270 = (!1220 !103 !104 !107)
!1271 = (!1220 !103 !104)
!1272 = (!1220 !103 !104 !111)
!1273 = span !92 2144 2283
!1274 = span !92 2328 2331
!1275 = span !92 2296 2333
!1276 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.<autogenerated>.sw"
!1277 = span !1276 200 204
!1278 = span !1276 194 418
!1279 = span !1276 207 293
!1280 = fn_call_path_span !1276 207 293
!1281 = (!1279 !1280)
!1282 = (!1279 !1280 !644)
!1283 = (!1279 !1280 !646)
!1284 = span !1276 249 251
!1285 = span !1276 262 268
!1286 = span !1276 295 414
!1287 = fn_call_path_span !1276 295 414
!1288 = (!1286 !1287)
!1289 = (!1286 !1287 !644)
!1290 = (!1286 !1287 !646)
!1291 = span !1276 308 313
!1292 = span !1276 344 346
!1293 = span !1276 359 367
!1294 = span !1276 375 380
!1295 = span !1276 344 390
!1296 = fn_call_path_span !1276 382 388
!1297 = (!1295 !1296)
!1298 = (!1275 !101)
!1299 = (!1275 !103 !104)
!1300 = (!1275 !103 !104)
!1301 = (!1275 !103 !104 !107)
!1302 = (!1275 !103 !104)
!1303 = (!1275 !103 !104 !111)
!1304 = span !92 2288 2334
!1305 = "/home/kebradalaonda/p/sway/sway-lib-std/src/outputs.sw"
!1306 = span !1305 1265 1535
!1307 = span !92 2372 2405
!1308 = "/home/kebradalaonda/p/sway/sway-lib-std/src/outputs.<autogenerated>.sw"
!1309 = span !1308 176 180
!1310 = span !1308 170 667
!1311 = span !1308 183 269
!1312 = fn_call_path_span !1308 183 269
!1313 = (!1311 !1312)
!1314 = (!1311 !1312 !644)
!1315 = (!1311 !1312 !646)
!1316 = span !1308 225 227
!1317 = span !1308 238 244
!1318 = span !1308 271 365
!1319 = fn_call_path_span !1308 271 365
!1320 = (!1318 !1319)
!1321 = (!1318 !1319 !644)
!1322 = (!1318 !1319 !646)
!1323 = span !1308 317 319
!1324 = span !1308 330 340
!1325 = span !1308 367 457
!1326 = fn_call_path_span !1308 367 457
!1327 = (!1325 !1326)
!1328 = (!1325 !1326 !644)
!1329 = (!1325 !1326 !646)
!1330 = span !1308 411 413
!1331 = span !1308 424 432
!1332 = span !1308 459 553
!1333 = fn_call_path_span !1308 459 553
!1334 = (!1332 !1333)
!1335 = (!1332 !1333 !644)
!1336 = (!1332 !1333 !646)
!1337 = span !1308 505 507
!1338 = span !1308 518 528
!1339 = span !1308 555 663
!1340 = fn_call_path_span !1308 555 663
!1341 = (!1339 !1340)
!1342 = (!1339 !1340 !644)
!1343 = (!1339 !1340 !646)
!1344 = span !1308 608 610
!1345 = span !1308 621 638
!1346 = (!1307 !101)
!1347 = (!1307 !103 !104)
!1348 = (!1307 !103 !104)
!1349 = (!1307 !103 !104 !107)
!1350 = (!1307 !103 !104)
!1351 = (!1307 !103 !104 !111)
!1352 = span !92 2364 2406
!1353 = span !92 2425 2428
!1354 = fn_call_path_span !92 2425 2426
!1355 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!1356 = span !1355 1831 1949
!1357 = (!1353 !1354 !1356)
!1358 = (!1353 !1354 !1356)
!1359 = (!1353 !1354 !1356)
!1360 = (!1353 !1354 !1356)
!1361 = span !92 120 124
!1362 = (!1353 !1354 !1356)
!1363 = span !92 2419 2429
!1364 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.<autogenerated>.sw"
!1365 = span !1364 216 220
!1366 = span !1364 210 464
!1367 = span !1364 223 340
!1368 = fn_call_path_span !1364 223 340
!1369 = (!1367 !1368)
!1370 = (!1367 !1368 !644)
!1371 = (!1367 !1368 !646)
!1372 = span !1364 234 239
!1373 = span !1364 270 272
!1374 = span !1364 285 293
!1375 = span !1364 301 306
!1376 = span !1364 270 316
!1377 = fn_call_path_span !1364 308 314
!1378 = (!1376 !1377)
!1379 = span !1364 342 460
!1380 = fn_call_path_span !1364 342 460
!1381 = (!1379 !1380)
!1382 = (!1379 !1380 !644)
!1383 = (!1379 !1380 !646)
!1384 = span !1364 354 359
!1385 = span !1364 390 392
!1386 = span !1364 405 413
!1387 = span !1364 421 426
!1388 = span !1364 390 436
!1389 = fn_call_path_span !1364 428 434
!1390 = (!1388 !1389)
!1391 = (!1363 !101)
!1392 = (!1363 !103 !104)
!1393 = (!1363 !103 !104)
!1394 = (!1363 !103 !104 !107)
!1395 = (!1363 !103 !104)
!1396 = (!1363 !103 !104 !111)
!1397 = span !92 2411 2430
!1398 = span !92 2509 2516
!1399 = span !92 2473 2517
!1400 = fn_call_path_span !92 2473 2508
!1401 = (!1399 !1400)
!1402 = "/home/kebradalaonda/p/sway/sway-lib-std/src/string.sw"
!1403 = span !1402 3738 3739
!1404 = (!1399 !1400 !1403)
!1405 = span !1402 3723 3746
!1406 = (!1399 !1400 !1405)
!1407 = (!1399 !1400 !1405)
!1408 = span !1402 3769 3770
!1409 = (!1399 !1400 !1408)
!1410 = span !1402 3755 3780
!1411 = (!1399 !1400 !1410)
!1412 = (!1399 !1400 !1410)
!1413 = span !1402 3856 3863
!1414 = (!1399 !1400 !1413)
!1415 = span !1402 3865 3873
!1416 = (!1399 !1400 !1415)
!1417 = span !1402 3828 3874
!1418 = fn_call_path_span !1402 3828 3849
!1419 = (!1399 !1400 !1417 !1418)
!1420 = (!1399 !1400 !1417 !1418)
!1421 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!1422 = span !1421 2363 2366
!1423 = (!1399 !1400 !1417 !1418 !1422)
!1424 = span !1421 2368 2373
!1425 = (!1399 !1400 !1417 !1418 !1424)
!1426 = span !1421 2368 2392
!1427 = fn_call_path_span !1421 2374 2375
!1428 = (!1399 !1400 !1417 !1418 !1426 !1427)
!1429 = (!1399 !1400 !1417 !1418 !1426 !1427)
!1430 = (!1399 !1400 !1417 !1418 !1426 !1427)
!1431 = span !491 7076 7080
!1432 = (!1399 !1400 !1417 !1418 !1426 !1427 !1431)
!1433 = (!1399 !1400 !1417 !1418 !1426 !1427)
!1434 = span !491 7082 7087
!1435 = (!1399 !1400 !1417 !1418 !1426 !1427 !1434)
!1436 = (!1399 !1400 !1417 !1418 !1426 !1427)
!1437 = (!1399 !1400 !1417 !1418 !1426 !1427)
!1438 = span !1421 2362 2393
!1439 = (!1399 !1400 !1417 !1418 !1438)
!1440 = (!1399 !1400 !1417 !1418 !1438)
!1441 = (!1399 !1400 !1417 !1418 !1438)
!1442 = (!1399 !1400 !1417 !1418 !1438)
!1443 = span !1421 2351 2394
!1444 = fn_call_path_span !1421 2351 2361
!1445 = (!1399 !1400 !1417 !1418 !1443 !1444)
!1446 = span !1421 1257 1262
!1447 = (!1399 !1400 !1417 !1418 !1443 !1444 !1446)
!1448 = span !1402 3816 3875
!1449 = fn_call_path_span !1402 3816 3827
!1450 = (!1399 !1400 !1448 !1449)
!1451 = span !841 31734 31739
!1452 = (!1399 !1400 !1448 !1449 !1451)
!1453 = span !841 31719 31740
!1454 = fn_call_path_span !841 31719 31733
!1455 = (!1399 !1400 !1448 !1449 !1453 !1454)
!1456 = span !841 2146 2151
!1457 = (!1399 !1400 !1448 !1449 !1453 !1454 !1456)
!1458 = span !841 2136 2170
!1459 = (!1399 !1400 !1448 !1449 !1453 !1454 !1458)
!1460 = (!1399 !1400 !1448 !1449 !1453 !1454 !1458)
!1461 = span !841 2201 2204
!1462 = (!1399 !1400 !1448 !1449 !1453 !1454 !1461)
!1463 = span !841 2189 2205
!1464 = fn_call_path_span !841 2189 2200
!1465 = (!1399 !1400 !1448 !1449 !1453 !1454 !1463 !1464)
!1466 = (!1399 !1400 !1448 !1449 !1453 !1454 !1463 !1464 !850)
!1467 = (!1399 !1400 !1448 !1449 !1453 !1454 !1463 !1464)
!1468 = (!1399 !1400 !1448 !1449 !1453 !1454 !1463 !1464 !853)
!1469 = span !841 2179 2206
!1470 = (!1399 !1400 !1448 !1449 !1453 !1454 !1469)
!1471 = (!1399 !1400 !1448 !1449 !1453 !1454 !1469)
!1472 = span !841 2218 2221
!1473 = (!1399 !1400 !1448 !1449 !1453 !1454 !1472)
!1474 = span !841 2218 2225
!1475 = fn_call_path_span !841 2222 2223
!1476 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475)
!1477 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475)
!1478 = span !841 2224 2225
!1479 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475)
!1480 = span !491 21005 21009
!1481 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475 !1480)
!1482 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475)
!1483 = span !491 21011 21016
!1484 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475 !1483)
!1485 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475)
!1486 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474 !1475)
!1487 = (!1399 !1400 !1448 !1449 !1453 !1454 !1474)
!1488 = span !841 2240 2245
!1489 = (!1399 !1400 !1448 !1449 !1453 !1454 !1488)
!1490 = span !841 2240 2251
!1491 = fn_call_path_span !841 2246 2249
!1492 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491)
!1493 = span !1421 2922 2926
!1494 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491 !1493)
!1495 = span !1421 2911 2927
!1496 = fn_call_path_span !1421 2911 2921
!1497 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491 !1495 !1496)
!1498 = span !1421 1633 1638
!1499 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491 !1495 !1496 !1498)
!1500 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491)
!1501 = span !1421 2928 2929
!1502 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491 !1501)
!1503 = (!1399 !1400 !1448 !1449 !1453 !1454 !1490 !1491)
!1504 = span !841 2266 2269
!1505 = (!1399 !1400 !1448 !1449 !1453 !1454 !1504)
!1506 = span !841 2271 2274
!1507 = (!1399 !1400 !1448 !1449 !1453 !1454 !1506)
!1508 = span !841 2240 2275
!1509 = fn_call_path_span !841 2252 2259
!1510 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1511 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1512 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1513 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1514 = span !977 3413 3418
!1515 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1514)
!1516 = span !977 3413 3437
!1517 = fn_call_path_span !977 3419 3420
!1518 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517)
!1519 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517)
!1520 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517)
!1521 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517 !1431)
!1522 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517)
!1523 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517 !1434)
!1524 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517)
!1525 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1516 !1517)
!1526 = span !977 3403 3438
!1527 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1526)
!1528 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1526)
!1529 = span !977 3456 3459
!1530 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1529)
!1531 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1532 = span !977 3466 3470
!1533 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1532)
!1534 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1535 = span !977 3477 3480
!1536 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1535)
!1537 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509)
!1538 = span !977 3447 3522
!1539 = (!1399 !1400 !1448 !1449 !1453 !1454 !1508 !1509 !1538)
!1540 = span !977 3496 3511
!1541 = (!1399 !1400 !1448 !1449 !1453 !1454)
!1542 = span !841 2302 2305
!1543 = (!1399 !1400 !1448 !1449 !1453 !1454 !1542)
!1544 = span !841 2307 2310
!1545 = (!1399 !1400 !1448 !1449 !1453 !1454 !1544)
!1546 = span !841 2295 2312
!1547 = (!1399 !1400 !1448 !1449 !1453 !1454 !1546)
!1548 = (!1399 !1400 !1448 !1449 !1453 !1454)
!1549 = (!1399 !1400 !1448 !1449 !1453 !1454)
!1550 = span !841 31759 31764
!1551 = (!1399 !1400 !1448 !1449 !1550)
!1552 = span !841 31695 31793
!1553 = (!1399 !1400 !1448 !1449 !1552)
!1554 = (!1399 !1400 !1448 !1449)
!1555 = (!1399 !1400 !1448 !1449)
!1556 = (!1399 !1400 !1448 !1449 !1552)
!1557 = span !1402 3790 3886
!1558 = (!1399 !1400 !1557)
!1559 = span !92 2467 2518
!1560 = span !1402 9437 9441
!1561 = span !1402 682 694
!1562 = span !1402 9437 9453
!1563 = fn_call_path_span !1402 9448 9451
!1564 = (!1562 !1563)
!1565 = span !841 15609 15613
!1566 = (!1562 !1563 !1565)
!1567 = (!1562 !1563 !967)
!1568 = (!1562 !1563 !969)
!1569 = span !1402 9455 9459
!1570 = span !1402 9455 9471
!1571 = fn_call_path_span !1402 9466 9469
!1572 = (!1570 !1571)
!1573 = span !841 14201 14205
!1574 = (!1570 !1571 !1573)
!1575 = (!1570 !1571 !908)
!1576 = span !1402 9436 9472
!1577 = span !1402 9421 9505
!1578 = span !1402 9514 9515
!1579 = span !1402 9547 9548
!1580 = span !1402 9559 9560
!1581 = span !1402 9571 9572
!1582 = (!1559 !101)
!1583 = (!1559 !103 !104)
!1584 = (!1559 !103 !104)
!1585 = (!1559 !103 !104 !107)
!1586 = (!1559 !103 !104)
!1587 = (!1559 !103 !104 !111)
!1588 = span !92 2459 2519
!1589 = "/home/kebradalaonda/p/sway/sway-lib-std/src/tx.sw"
!1590 = span !1589 1587 2482
!1591 = span !92 2532 2567
!1592 = "/home/kebradalaonda/p/sway/sway-lib-std/src/tx.<autogenerated>.sw"
!1593 = span !1592 181 185
!1594 = span !1592 175 766
!1595 = span !1592 188 283
!1596 = fn_call_path_span !1592 188 283
!1597 = (!1595 !1596)
!1598 = (!1595 !1596 !644)
!1599 = (!1595 !1596 !646)
!1600 = span !1592 237 239
!1601 = span !1592 250 258
!1602 = span !1592 285 380
!1603 = fn_call_path_span !1592 285 380
!1604 = (!1602 !1603)
!1605 = (!1602 !1603 !644)
!1606 = (!1602 !1603 !646)
!1607 = span !1592 334 336
!1608 = span !1592 347 355
!1609 = span !1592 382 473
!1610 = fn_call_path_span !1592 382 473
!1611 = (!1609 !1610)
!1612 = (!1609 !1610 !644)
!1613 = (!1609 !1610 !646)
!1614 = span !1592 429 431
!1615 = span !1592 442 448
!1616 = span !1592 475 572
!1617 = fn_call_path_span !1592 475 572
!1618 = (!1616 !1617)
!1619 = (!1616 !1617 !644)
!1620 = (!1616 !1617 !646)
!1621 = span !1592 525 527
!1622 = span !1592 538 547
!1623 = span !1592 574 669
!1624 = fn_call_path_span !1592 574 669
!1625 = (!1623 !1624)
!1626 = (!1623 !1624 !644)
!1627 = (!1623 !1624 !646)
!1628 = span !1592 623 625
!1629 = span !1592 636 644
!1630 = span !1592 671 762
!1631 = fn_call_path_span !1592 671 762
!1632 = (!1630 !1631)
!1633 = (!1630 !1631 !644)
!1634 = (!1630 !1631 !646)
!1635 = span !1592 718 720
!1636 = span !1592 731 737
!1637 = (!1591 !101)
!1638 = (!1591 !103 !104)
!1639 = (!1591 !103 !104)
!1640 = (!1591 !103 !104 !107)
!1641 = (!1591 !103 !104)
!1642 = (!1591 !103 !104 !111)
!1643 = span !92 2524 2568
!1644 = span !92 2609 2632
!1645 = fn_call_path_span !92 2609 2630
!1646 = "/home/kebradalaonda/p/sway/sway-lib-std/src/u128.sw"
!1647 = span !1646 11697 11757
!1648 = (!1644 !1645 !1647)
!1649 = (!1644 !1645)
!1650 = span !1646 11723 11724
!1651 = (!1644 !1645 !1647)
!1652 = span !1646 11745 11746
!1653 = (!1644 !1645 !1647)
!1654 = span !92 2603 2633
!1655 = "/home/kebradalaonda/p/sway/sway-lib-std/src/u128.<autogenerated>.sw"
!1656 = span !1655 168 170
!1657 = span !1655 184 190
!1658 = span !1655 198 205
!1659 = span !1655 207 211
!1660 = span !1646 708 718
!1661 = span !1655 226 233
!1662 = span !1655 235 239
!1663 = span !1646 777 787
!1664 = span !1655 168 256
!1665 = fn_call_path_span !1655 248 254
!1666 = (!1664 !1665)
!1667 = (!1654 !101)
!1668 = (!1654 !103 !104)
!1669 = (!1654 !103 !104)
!1670 = (!1654 !103 !104 !107)
!1671 = (!1654 !103 !104)
!1672 = (!1654 !103 !104 !111)
!1673 = span !92 2595 2634
!1674 = span !1646 2666 2848
!1675 = span !92 2647 2691
!1676 = span !1655 179 183
!1677 = span !1655 173 301
!1678 = span !1655 186 297
!1679 = fn_call_path_span !1655 186 297
!1680 = (!1678 !1679)
!1681 = (!1678 !1679 !644)
!1682 = (!1678 !1679 !646)
!1683 = span !1655 242 244
!1684 = span !1655 255 272
!1685 = (!1675 !101)
!1686 = (!1675 !103 !104)
!1687 = (!1675 !103 !104)
!1688 = (!1675 !103 !104 !107)
!1689 = (!1675 !103 !104)
!1690 = (!1675 !103 !104 !111)
!1691 = span !92 2639 2692
!1692 = span !92 2721 2754
!1693 = span !92 2763 2764
!1694 = span !92 2770 2774
!1695 = span !92 2763 2775
!1696 = fn_call_path_span !92 2765 2769
!1697 = (!1695 !1696)
!1698 = span !92 2785 2786
!1699 = span !92 2792 2796
!1700 = span !92 2785 2797
!1701 = fn_call_path_span !92 2787 2791
!1702 = (!1700 !1701)
!1703 = span !92 2807 2808
!1704 = span !92 2814 2818
!1705 = span !92 2807 2819
!1706 = fn_call_path_span !92 2809 2813
!1707 = (!1705 !1706)
!1708 = span !92 2829 2830
!1709 = span !92 2705 2837
!1710 = (!1709 !101)
!1711 = (!1709 !103 !104)
!1712 = (!1709 !103 !104)
!1713 = (!1709 !103 !104 !107)
!1714 = (!1709 !103 !104)
!1715 = (!1709 !103 !104 !111)
!1716 = span !92 2697 2838
!1717 = span !92 2867 2900
!1718 = span !92 2909 2910
!1719 = span !92 2916 2920
!1720 = span !92 2909 2921
!1721 = fn_call_path_span !92 2911 2915
!1722 = (!1720 !1721)
!1723 = span !92 2931 2932
!1724 = span !92 2938 2942
!1725 = span !92 2931 2943
!1726 = fn_call_path_span !92 2933 2937
!1727 = (!1725 !1726)
!1728 = span !92 2953 2954
!1729 = span !92 2960 2964
!1730 = span !92 2953 2965
!1731 = fn_call_path_span !92 2955 2959
!1732 = (!1730 !1731)
!1733 = span !92 2975 2976
!1734 = span !92 2975 2983
!1735 = fn_call_path_span !92 2977 2981
!1736 = (!1734 !1735)
!1737 = "/home/kebradalaonda/p/sway/sway-lib-std/src/vec.sw"
!1738 = span !1737 17879 17883
!1739 = (!1734 !1735 !1738)
!1740 = span !1737 17849 17916
!1741 = (!1734 !1735 !1740)
!1742 = span !1737 17904 17905
!1743 = (!1734 !1735 !1740)
!1744 = span !92 2851 2990
!1745 = "/home/kebradalaonda/p/sway/sway-lib-std/src/vec.<autogenerated>.sw"
!1746 = span !1745 195 197
!1747 = span !1745 211 220
!1748 = span !1745 228 236
!1749 = span !1745 238 242
!1750 = span !1737 21952 21966
!1751 = span !1745 195 250
!1752 = fn_call_path_span !1745 222 227
!1753 = (!1751 !1752)
!1754 = (!1751 !1752 !682)
!1755 = (!1751 !1752 !684)
!1756 = (!1751 !1752 !686)
!1757 = (!1751 !1752 !688)
!1758 = (!1751 !1752 !690)
!1759 = (!1751 !1752 !692)
!1760 = (!1751 !1752 !692)
!1761 = (!1751 !1752 !692)
!1762 = (!1751 !1752 !692)
!1763 = (!1751 !1752 !692)
!1764 = (!1751 !1752 !698)
!1765 = (!1751 !1752 !690)
!1766 = (!1751 !1752 !701)
!1767 = (!1751 !1752 !703)
!1768 = (!1751 !1752 !690)
!1769 = (!1751 !1752 !706)
!1770 = (!1751 !1752 !706)
!1771 = (!1751 !1752 !706)
!1772 = (!1751 !1752 !706)
!1773 = (!1751 !1752 !706)
!1774 = (!1751 !1752 !712)
!1775 = (!1751 !1752 !714)
!1776 = (!1751 !1752 !690)
!1777 = (!1751 !1752 !802)
!1778 = (!1751 !1752 !802)
!1779 = (!1751 !1752 !802)
!1780 = (!1751 !1752 !807)
!1781 = span !1745 258 265
!1782 = span !1745 267 271
!1783 = span !1737 21972 21982
!1784 = span !1745 195 288
!1785 = fn_call_path_span !1745 280 286
!1786 = (!1784 !1785)
!1787 = (!1744 !101)
!1788 = (!1744 !103 !104)
!1789 = (!1744 !103 !104)
!1790 = (!1744 !103 !104 !107)
!1791 = (!1744 !103 !104)
!1792 = (!1744 !103 !104 !111)
!1793 = span !92 2843 2991
!1794 = span !92 3037 3042
!1795 = span !92 3031 3043
!1796 = (!1795 !101)
!1797 = (!1795 !103 !104)
!1798 = (!1795 !103 !104)
!1799 = (!1795 !103 !104 !107)
!1800 = (!1795 !103 !104)
!1801 = (!1795 !103 !104 !111)
!1802 = span !98 923 1013
!1803 = fn_name_span !98 930 939
!1804 = (!1802 !1803)
!1805 = span !98 978 984
!1806 = span !98 964 1006
!1807 = fn_call_path_span !98 964 977
!1808 = (!1806 !1807)
!1809 = span !98 182 184
!1810 = span !98 191 194
!1811 = span !98 205 210
!1812 = span !98 165 308
!1813 = fn_name_span !98 168 181
!1814 = (!1812 !1813)
!1815 = span !98 241 243
!1816 = span !98 250 253
!1817 = span !98 262 267
!1818 = span !98 231 235
!1819 = span !98 223 306
!1820 = span !98 279 299
!1821 = span !384 90 219
!1822 = fn_name_span !384 97 103
!1823 = (!1821 !1822)
!1824 = span !384 153 157
!1825 = span !384 131 201
!1826 = span !384 281 403
!1827 = fn_name_span !384 288 291
!1828 = (!1826 !1827)
!1829 = span !384 337 341
!1830 = span !384 315 385
!1831 = span !98 6762 6766
!1832 = span !98 6776 6777
!1833 = span !98 6755 6909
!1834 = fn_name_span !98 6758 6761
!1835 = (!1833 !1834)
!1836 = span !98 6803 6807
!1837 = span !98 6822 6823
!1838 = span !98 6834 6840
!1839 = span !98 6872 6873
!1840 = span !98 6884 6891
!1841 = span !98 6944 6948
!1842 = span !98 6958 6959
!1843 = span !98 6937 7005
!1844 = fn_name_span !98 6940 6943
!1845 = (!1843 !1844)
!1846 = span !98 6982 6983
!1847 = span !98 6982 6998
!1848 = fn_call_path_span !98 6984 6992
!1849 = (!1847 !1848)
!1850 = span !98 1078 1083
!1851 = (!1847 !1848 !1850)
!1852 = span !98 1062 1084
!1853 = (!1847 !1848 !1852)
!1854 = span !98 1110 1120
!1855 = (!1847 !1848 !1854)
!1856 = span !98 1111 1115
!1857 = (!1847 !1848 !1854)
!1858 = span !98 1093 1121
!1859 = (!1847 !1848 !1858)
!1860 = span !98 1130 1145
!1861 = (!1847 !1848 !1860)
!1862 = span !98 1142 1144
!1863 = (!1847 !1848 !1860)
!1864 = span !98 1160 1164
!1865 = span !98 1192 1197
!1866 = (!1847 !1848 !1865)
!1867 = span !98 1192 1202
!1868 = fn_call_path_span !98 1198 1199
!1869 = (!1847 !1848 !1867 !1868)
!1870 = (!1847 !1848 !1867 !1868)
!1871 = span !98 1200 1202
!1872 = (!1847 !1848 !1867 !1868)
!1873 = (!1847 !1848 !1867 !1868)
!1874 = span !491 11834 11839
!1875 = (!1847 !1848 !1867 !1868 !1874)
!1876 = (!1847 !1848 !1867 !1868)
!1877 = (!1847 !1848 !1867 !1868)
!1878 = span !98 1206 1208
!1879 = span !98 1191 1208
!1880 = fn_call_path_span !98 1204 1205
!1881 = (!1847 !1848 !1879 !1880)
!1882 = span !98 1179 1208
!1883 = (!1847 !1848 !1882)
!1884 = span !98 1186 1187
!1885 = (!1847 !1848 !1884)
!1886 = (!1847 !1848 !1882)
!1887 = (!1847 !1848 !1882)
!1888 = span !98 1249 1254
!1889 = (!1847 !1848 !1888)
!1890 = span !98 1249 1259
!1891 = fn_call_path_span !98 1255 1256
!1892 = (!1847 !1848 !1890 !1891)
!1893 = (!1847 !1848 !1890 !1891)
!1894 = span !98 1257 1259
!1895 = (!1847 !1848 !1890 !1891)
!1896 = (!1847 !1848 !1890 !1891)
!1897 = span !491 10448 10453
!1898 = (!1847 !1848 !1890 !1891 !1897)
!1899 = (!1847 !1848 !1890 !1891)
!1900 = (!1847 !1848 !1890 !1891)
!1901 = span !98 1241 1259
!1902 = (!1847 !1848 !1901)
!1903 = (!1847 !1848 !1901)
!1904 = span !98 1277 1282
!1905 = (!1847 !1848 !1904)
!1906 = span !98 1277 1287
!1907 = fn_call_path_span !98 1283 1285
!1908 = (!1847 !1848 !1906 !1907)
!1909 = (!1847 !1848 !1906 !1907)
!1910 = span !98 1286 1287
!1911 = (!1847 !1848 !1906 !1907)
!1912 = (!1847 !1848 !1906 !1907)
!1913 = span !491 17195 17200
!1914 = (!1847 !1848 !1906 !1907 !1913)
!1915 = (!1847 !1848 !1906 !1907)
!1916 = (!1847 !1848 !1906 !1907)
!1917 = (!1847 !1848 !1906)
!1918 = span !98 1339 1340
!1919 = (!1847 !1848 !1918)
!1920 = span !98 1339 1345
!1921 = fn_call_path_span !98 1341 1343
!1922 = (!1847 !1848 !1920 !1921)
!1923 = (!1847 !1848 !1920 !1921)
!1924 = span !98 1344 1345
!1925 = (!1847 !1848 !1920 !1921)
!1926 = (!1847 !1848 !1920 !1921)
!1927 = (!1847 !1848 !1920 !1921 !956)
!1928 = (!1847 !1848 !1920 !1921)
!1929 = (!1847 !1848 !1920 !1921)
!1930 = (!1847 !1848 !1920)
!1931 = (!1847 !1848 !1920)
!1932 = span !98 1380 1386
!1933 = (!1847 !1848 !1932)
!1934 = span !98 1398 1404
!1935 = (!1847 !1848 !1934)
!1936 = span !98 1388 1405
!1937 = (!1847 !1848 !1936)
!1938 = span !98 1416 1417
!1939 = (!1847 !1848 !1938)
!1940 = span !98 1388 1418
!1941 = fn_call_path_span !98 1406 1409
!1942 = (!1847 !1848 !1940 !1941)
!1943 = (!1847 !1848 !1940 !1941)
!1944 = (!1847 !1848 !1940 !1941)
!1945 = span !977 1243 1247
!1946 = (!1847 !1848 !1940 !1941 !1945)
!1947 = (!1847 !1848 !1940 !1941)
!1948 = (!1847 !1848 !1940 !1941)
!1949 = (!1847 !1848 !1940 !1941)
!1950 = (!1847 !1848 !1940 !1941)
!1951 = span !98 1425 1426
!1952 = (!1847 !1848 !1951)
!1953 = span !98 1420 1426
!1954 = fn_call_path_span !98 1423 1424
!1955 = (!1847 !1848 !1953 !1954)
!1956 = span !98 1420 1422
!1957 = (!1847 !1848 !1953 !1954)
!1958 = (!1847 !1848 !1953 !1954)
!1959 = (!1847 !1848 !1953 !1954 !953)
!1960 = (!1847 !1848 !1953 !1954)
!1961 = (!1847 !1848 !1953 !1954)
!1962 = (!1847 !1848 !1953 !1954)
!1963 = span !98 1366 1427
!1964 = fn_call_path_span !98 1366 1379
!1965 = (!1847 !1848 !1963 !1964)
!1966 = span !491 2592 2596
!1967 = span !491 2598 2603
!1968 = span !491 2585 3089
!1969 = fn_name_span !491 2588 2591
!1970 = (!1968 !1969)
!1971 = span !491 2649 2664
!1972 = fn_call_path_span !491 2649 2658
!1973 = span !491 42768 42771
!1974 = (!1971 !1972 !1973)
!1975 = (!1971 !1972)
!1976 = span !491 42757 42799
!1977 = (!1971 !1972 !1976)
!1978 = span !491 2676 2681
!1979 = span !491 2666 2682
!1980 = fn_call_path_span !491 2666 2675
!1981 = (!1979 !1980)
!1982 = (!1979 !1980 !1976)
!1983 = span !491 2629 2684
!1984 = span !491 2711 2733
!1985 = fn_call_path_span !491 2711 2720
!1986 = (!1984 !1985)
!1987 = (!1984 !1985 !1973)
!1988 = (!1984 !1985 !1976)
!1989 = span !491 2694 2734
!1990 = span !491 2752 2759
!1991 = span !491 2761 2771
!1992 = span !491 2747 2772
!1993 = span !491 2790 2817
!1994 = fn_call_path_span !491 2790 2815
!1995 = "/home/kebradalaonda/p/sway/sway-lib-std/src/flags.sw"
!1996 = span !1995 6954 6961
!1997 = fn_call_path_span !1995 6954 6959
!1998 = "/home/kebradalaonda/p/sway/sway-lib-std/src/registers.sw"
!1999 = span !1998 6566 6592
!2000 = (!1993 !1994 !1996 !1997 !1999)
!2001 = span !1995 6963 6986
!2002 = (!1993 !1994 !2001)
!2003 = (!1993 !1994)
!2004 = span !1995 6989 6990
!2005 = span !491 2845 2846
!2006 = span !491 2836 2847
!2007 = span !491 2980 2987
!2008 = span !491 2995 3005
!2009 = span !491 3007 3008
!2010 = span !491 2964 3011
!2011 = fn_call_path_span !491 2964 2973
!2012 = (!2010 !2011)
!2013 = span !491 42849 42852
!2014 = (!2010 !2011 !2013)
!2015 = span !491 42838 42879
!2016 = (!2010 !2011 !2015)
!2017 = span !491 3065 3072
!2018 = span !491 3055 3073
!2019 = fn_call_path_span !491 3055 3064
!2020 = (!2018 !2019)
!2021 = (!2018 !2019 !2015)
!2022 = span !98 7041 7045
!2023 = span !98 7055 7056
!2024 = span !98 7034 7103
!2025 = fn_name_span !98 7037 7040
!2026 = (!2024 !2025)
!2027 = span !98 7079 7080
!2028 = span !98 7079 7096
!2029 = fn_call_path_span !98 7081 7090
!2030 = (!2028 !2029)
!2031 = span !98 1501 1506
!2032 = (!2028 !2029 !2031)
!2033 = span !98 1485 1507
!2034 = (!2028 !2029 !2033)
!2035 = span !98 1533 1543
!2036 = (!2028 !2029 !2035)
!2037 = span !98 1534 1538
!2038 = (!2028 !2029 !2035)
!2039 = span !98 1516 1544
!2040 = (!2028 !2029 !2039)
!2041 = span !98 1553 1568
!2042 = (!2028 !2029 !2041)
!2043 = span !98 1565 1567
!2044 = (!2028 !2029 !2041)
!2045 = span !98 1583 1587
!2046 = span !98 1621 1626
!2047 = (!2028 !2029 !2046)
!2048 = span !98 1621 1631
!2049 = fn_call_path_span !98 1627 1628
!2050 = (!2028 !2029 !2048 !2049)
!2051 = (!2028 !2029 !2048 !2049)
!2052 = span !98 1629 1631
!2053 = (!2028 !2029 !2048 !2049)
!2054 = (!2028 !2029 !2048 !2049)
!2055 = span !491 11737 11742
!2056 = (!2028 !2029 !2048 !2049 !2055)
!2057 = (!2028 !2029 !2048 !2049)
!2058 = (!2028 !2029 !2048 !2049)
!2059 = span !98 1614 1670
!2060 = (!2028 !2029 !2059)
!2061 = span !98 1602 1671
!2062 = (!2028 !2029 !2061)
!2063 = (!2028 !2029 !2061)
!2064 = span !98 1696 1701
!2065 = (!2028 !2029 !2064)
!2066 = span !98 1704 1706
!2067 = span !98 1696 1706
!2068 = fn_call_path_span !98 1702 1703
!2069 = (!2028 !2029 !2067 !2068)
!2070 = span !98 1684 1706
!2071 = (!2028 !2029 !2070)
!2072 = span !98 1691 1692
!2073 = (!2028 !2029 !2072)
!2074 = (!2028 !2029 !2070)
!2075 = (!2028 !2029 !2070)
!2076 = span !98 1747 1752
!2077 = (!2028 !2029 !2076)
!2078 = span !98 1747 1757
!2079 = fn_call_path_span !98 1753 1754
!2080 = (!2028 !2029 !2078 !2079)
!2081 = (!2028 !2029 !2078 !2079)
!2082 = span !98 1755 1757
!2083 = (!2028 !2029 !2078 !2079)
!2084 = (!2028 !2029 !2078 !2079)
!2085 = span !491 10348 10353
!2086 = (!2028 !2029 !2078 !2079 !2085)
!2087 = (!2028 !2029 !2078 !2079)
!2088 = (!2028 !2029 !2078 !2079)
!2089 = span !98 1739 1757
!2090 = (!2028 !2029 !2089)
!2091 = (!2028 !2029 !2089)
!2092 = span !98 1775 1780
!2093 = (!2028 !2029 !2092)
!2094 = span !98 1775 1785
!2095 = fn_call_path_span !98 1781 1783
!2096 = (!2028 !2029 !2094 !2095)
!2097 = (!2028 !2029 !2094 !2095)
!2098 = span !98 1784 1785
!2099 = (!2028 !2029 !2094 !2095)
!2100 = (!2028 !2029 !2094 !2095)
!2101 = span !491 17077 17082
!2102 = (!2028 !2029 !2094 !2095 !2101)
!2103 = (!2028 !2029 !2094 !2095)
!2104 = (!2028 !2029 !2094 !2095)
!2105 = (!2028 !2029 !2094)
!2106 = span !98 1837 1838
!2107 = (!2028 !2029 !2106)
!2108 = span !98 1837 1843
!2109 = fn_call_path_span !98 1839 1841
!2110 = (!2028 !2029 !2108 !2109)
!2111 = (!2028 !2029 !2108 !2109)
!2112 = span !98 1842 1843
!2113 = (!2028 !2029 !2108 !2109)
!2114 = (!2028 !2029 !2108 !2109)
!2115 = (!2028 !2029 !2108 !2109 !956)
!2116 = (!2028 !2029 !2108 !2109)
!2117 = (!2028 !2029 !2108 !2109)
!2118 = (!2028 !2029 !2108)
!2119 = (!2028 !2029 !2108)
!2120 = span !98 1878 1884
!2121 = (!2028 !2029 !2120)
!2122 = span !98 1896 1902
!2123 = (!2028 !2029 !2122)
!2124 = span !98 1886 1903
!2125 = (!2028 !2029 !2124)
!2126 = span !98 1914 1915
!2127 = (!2028 !2029 !2126)
!2128 = span !98 1886 1916
!2129 = fn_call_path_span !98 1904 1907
!2130 = (!2028 !2029 !2128 !2129)
!2131 = (!2028 !2029 !2128 !2129)
!2132 = (!2028 !2029 !2128 !2129)
!2133 = (!2028 !2029 !2128 !2129 !1945)
!2134 = (!2028 !2029 !2128 !2129)
!2135 = (!2028 !2029 !2128 !2129)
!2136 = (!2028 !2029 !2128 !2129)
!2137 = (!2028 !2029 !2128 !2129)
!2138 = span !98 1923 1924
!2139 = (!2028 !2029 !2138)
!2140 = span !98 1918 1924
!2141 = fn_call_path_span !98 1921 1922
!2142 = (!2028 !2029 !2140 !2141)
!2143 = span !98 1918 1920
!2144 = (!2028 !2029 !2140 !2141)
!2145 = (!2028 !2029 !2140 !2141)
!2146 = (!2028 !2029 !2140 !2141 !953)
!2147 = (!2028 !2029 !2140 !2141)
!2148 = (!2028 !2029 !2140 !2141)
!2149 = (!2028 !2029 !2140 !2141)
!2150 = span !98 1864 1925
!2151 = fn_call_path_span !98 1864 1877
!2152 = (!2028 !2029 !2150 !2151)
!2153 = span !98 7139 7143
!2154 = span !98 7153 7154
!2155 = span !98 7132 7201
!2156 = fn_name_span !98 7135 7138
!2157 = (!2155 !2156)
!2158 = span !98 7177 7178
!2159 = span !98 7177 7194
!2160 = fn_call_path_span !98 7179 7188
!2161 = (!2159 !2160)
!2162 = span !98 1999 2004
!2163 = (!2159 !2160 !2162)
!2164 = span !98 1983 2005
!2165 = (!2159 !2160 !2164)
!2166 = span !98 2031 2041
!2167 = (!2159 !2160 !2166)
!2168 = span !98 2032 2036
!2169 = (!2159 !2160 !2166)
!2170 = span !98 2014 2042
!2171 = (!2159 !2160 !2170)
!2172 = span !98 2051 2066
!2173 = (!2159 !2160 !2172)
!2174 = span !98 2063 2065
!2175 = (!2159 !2160 !2172)
!2176 = span !98 2081 2085
!2177 = span !98 2119 2124
!2178 = (!2159 !2160 !2177)
!2179 = span !98 2119 2129
!2180 = fn_call_path_span !98 2125 2126
!2181 = (!2159 !2160 !2179 !2180)
!2182 = (!2159 !2160 !2179 !2180)
!2183 = span !98 2127 2129
!2184 = (!2159 !2160 !2179 !2180)
!2185 = (!2159 !2160 !2179 !2180)
!2186 = span !491 11639 11644
!2187 = (!2159 !2160 !2179 !2180 !2186)
!2188 = (!2159 !2160 !2179 !2180)
!2189 = (!2159 !2160 !2179 !2180)
!2190 = span !98 2112 2168
!2191 = (!2159 !2160 !2190)
!2192 = span !98 2100 2169
!2193 = (!2159 !2160 !2192)
!2194 = (!2159 !2160 !2192)
!2195 = span !98 2194 2199
!2196 = (!2159 !2160 !2195)
!2197 = span !98 2202 2204
!2198 = span !98 2194 2204
!2199 = fn_call_path_span !98 2200 2201
!2200 = (!2159 !2160 !2198 !2199)
!2201 = span !98 2182 2204
!2202 = (!2159 !2160 !2201)
!2203 = span !98 2189 2190
!2204 = (!2159 !2160 !2203)
!2205 = (!2159 !2160 !2201)
!2206 = (!2159 !2160 !2201)
!2207 = span !98 2245 2250
!2208 = (!2159 !2160 !2207)
!2209 = span !98 2245 2255
!2210 = fn_call_path_span !98 2251 2252
!2211 = (!2159 !2160 !2209 !2210)
!2212 = (!2159 !2160 !2209 !2210)
!2213 = span !98 2253 2255
!2214 = (!2159 !2160 !2209 !2210)
!2215 = (!2159 !2160 !2209 !2210)
!2216 = span !491 10247 10252
!2217 = (!2159 !2160 !2209 !2210 !2216)
!2218 = (!2159 !2160 !2209 !2210)
!2219 = (!2159 !2160 !2209 !2210)
!2220 = span !98 2237 2255
!2221 = (!2159 !2160 !2220)
!2222 = (!2159 !2160 !2220)
!2223 = span !98 2273 2278
!2224 = (!2159 !2160 !2223)
!2225 = span !98 2273 2283
!2226 = fn_call_path_span !98 2279 2281
!2227 = (!2159 !2160 !2225 !2226)
!2228 = (!2159 !2160 !2225 !2226)
!2229 = span !98 2282 2283
!2230 = (!2159 !2160 !2225 !2226)
!2231 = (!2159 !2160 !2225 !2226)
!2232 = span !491 16958 16963
!2233 = (!2159 !2160 !2225 !2226 !2232)
!2234 = (!2159 !2160 !2225 !2226)
!2235 = (!2159 !2160 !2225 !2226)
!2236 = (!2159 !2160 !2225)
!2237 = span !98 2335 2336
!2238 = (!2159 !2160 !2237)
!2239 = span !98 2335 2341
!2240 = fn_call_path_span !98 2337 2339
!2241 = (!2159 !2160 !2239 !2240)
!2242 = (!2159 !2160 !2239 !2240)
!2243 = span !98 2340 2341
!2244 = (!2159 !2160 !2239 !2240)
!2245 = (!2159 !2160 !2239 !2240)
!2246 = (!2159 !2160 !2239 !2240 !956)
!2247 = (!2159 !2160 !2239 !2240)
!2248 = (!2159 !2160 !2239 !2240)
!2249 = (!2159 !2160 !2239)
!2250 = (!2159 !2160 !2239)
!2251 = span !98 2376 2382
!2252 = (!2159 !2160 !2251)
!2253 = span !98 2394 2400
!2254 = (!2159 !2160 !2253)
!2255 = span !98 2384 2401
!2256 = (!2159 !2160 !2255)
!2257 = span !98 2412 2413
!2258 = (!2159 !2160 !2257)
!2259 = span !98 2384 2414
!2260 = fn_call_path_span !98 2402 2405
!2261 = (!2159 !2160 !2259 !2260)
!2262 = (!2159 !2160 !2259 !2260)
!2263 = (!2159 !2160 !2259 !2260)
!2264 = (!2159 !2160 !2259 !2260 !1945)
!2265 = (!2159 !2160 !2259 !2260)
!2266 = (!2159 !2160 !2259 !2260)
!2267 = (!2159 !2160 !2259 !2260)
!2268 = (!2159 !2160 !2259 !2260)
!2269 = span !98 2421 2422
!2270 = (!2159 !2160 !2269)
!2271 = span !98 2416 2422
!2272 = fn_call_path_span !98 2419 2420
!2273 = (!2159 !2160 !2271 !2272)
!2274 = span !98 2416 2418
!2275 = (!2159 !2160 !2271 !2272)
!2276 = (!2159 !2160 !2271 !2272)
!2277 = (!2159 !2160 !2271 !2272 !953)
!2278 = (!2159 !2160 !2271 !2272)
!2279 = (!2159 !2160 !2271 !2272)
!2280 = (!2159 !2160 !2271 !2272)
!2281 = span !98 2362 2423
!2282 = fn_call_path_span !98 2362 2375
!2283 = (!2159 !2160 !2281 !2282)
!2284 = span !98 7237 7241
!2285 = span !98 7251 7252
!2286 = span !98 7230 7299
!2287 = fn_name_span !98 7233 7236
!2288 = (!2286 !2287)
!2289 = span !98 7275 7276
!2290 = span !98 7275 7292
!2291 = fn_call_path_span !98 7277 7286
!2292 = (!2290 !2291)
!2293 = span !98 2497 2502
!2294 = (!2290 !2291 !2293)
!2295 = span !98 2481 2503
!2296 = (!2290 !2291 !2295)
!2297 = span !98 2529 2539
!2298 = (!2290 !2291 !2297)
!2299 = span !98 2530 2534
!2300 = (!2290 !2291 !2297)
!2301 = span !98 2512 2540
!2302 = (!2290 !2291 !2301)
!2303 = span !98 2549 2564
!2304 = (!2290 !2291 !2303)
!2305 = span !98 2561 2563
!2306 = (!2290 !2291 !2303)
!2307 = span !98 2579 2583
!2308 = span !98 2617 2622
!2309 = (!2290 !2291 !2308)
!2310 = span !98 2617 2627
!2311 = fn_call_path_span !98 2623 2624
!2312 = (!2290 !2291 !2310 !2311)
!2313 = (!2290 !2291 !2310 !2311)
!2314 = span !98 2625 2627
!2315 = (!2290 !2291 !2310 !2311)
!2316 = (!2290 !2291 !2310 !2311)
!2317 = span !491 11541 11546
!2318 = (!2290 !2291 !2310 !2311 !2317)
!2319 = (!2290 !2291 !2310 !2311)
!2320 = (!2290 !2291 !2310 !2311)
!2321 = span !98 2610 2666
!2322 = (!2290 !2291 !2321)
!2323 = span !98 2598 2667
!2324 = (!2290 !2291 !2323)
!2325 = (!2290 !2291 !2323)
!2326 = span !98 2692 2697
!2327 = (!2290 !2291 !2326)
!2328 = span !98 2700 2702
!2329 = span !98 2692 2702
!2330 = fn_call_path_span !98 2698 2699
!2331 = (!2290 !2291 !2329 !2330)
!2332 = span !98 2680 2702
!2333 = (!2290 !2291 !2332)
!2334 = span !98 2687 2688
!2335 = (!2290 !2291 !2334)
!2336 = (!2290 !2291 !2332)
!2337 = (!2290 !2291 !2332)
!2338 = span !98 2743 2748
!2339 = (!2290 !2291 !2338)
!2340 = span !98 2743 2753
!2341 = fn_call_path_span !98 2749 2750
!2342 = (!2290 !2291 !2340 !2341)
!2343 = (!2290 !2291 !2340 !2341)
!2344 = span !98 2751 2753
!2345 = (!2290 !2291 !2340 !2341)
!2346 = (!2290 !2291 !2340 !2341)
!2347 = span !491 9979 9984
!2348 = (!2290 !2291 !2340 !2341 !2347)
!2349 = (!2290 !2291 !2340 !2341)
!2350 = (!2290 !2291 !2340 !2341)
!2351 = span !98 2735 2753
!2352 = (!2290 !2291 !2351)
!2353 = (!2290 !2291 !2351)
!2354 = span !98 2771 2776
!2355 = (!2290 !2291 !2354)
!2356 = span !98 2771 2781
!2357 = fn_call_path_span !98 2777 2779
!2358 = (!2290 !2291 !2356 !2357)
!2359 = (!2290 !2291 !2356 !2357)
!2360 = span !98 2780 2781
!2361 = (!2290 !2291 !2356 !2357)
!2362 = (!2290 !2291 !2356 !2357)
!2363 = (!2290 !2291 !2356 !2357 !646)
!2364 = (!2290 !2291 !2356 !2357)
!2365 = (!2290 !2291 !2356 !2357)
!2366 = (!2290 !2291 !2356)
!2367 = span !98 2833 2834
!2368 = (!2290 !2291 !2367)
!2369 = span !98 2833 2839
!2370 = fn_call_path_span !98 2835 2837
!2371 = (!2290 !2291 !2369 !2370)
!2372 = (!2290 !2291 !2369 !2370)
!2373 = span !98 2838 2839
!2374 = (!2290 !2291 !2369 !2370)
!2375 = (!2290 !2291 !2369 !2370)
!2376 = (!2290 !2291 !2369 !2370 !956)
!2377 = (!2290 !2291 !2369 !2370)
!2378 = (!2290 !2291 !2369 !2370)
!2379 = (!2290 !2291 !2369)
!2380 = (!2290 !2291 !2369)
!2381 = span !98 2874 2880
!2382 = (!2290 !2291 !2381)
!2383 = span !98 2892 2898
!2384 = (!2290 !2291 !2383)
!2385 = span !98 2882 2899
!2386 = (!2290 !2291 !2385)
!2387 = span !98 2910 2911
!2388 = (!2290 !2291 !2387)
!2389 = span !98 2882 2912
!2390 = fn_call_path_span !98 2900 2903
!2391 = (!2290 !2291 !2389 !2390)
!2392 = (!2290 !2291 !2389 !2390)
!2393 = (!2290 !2291 !2389 !2390)
!2394 = (!2290 !2291 !2389 !2390 !1945)
!2395 = (!2290 !2291 !2389 !2390)
!2396 = (!2290 !2291 !2389 !2390)
!2397 = (!2290 !2291 !2389 !2390)
!2398 = (!2290 !2291 !2389 !2390)
!2399 = span !98 2919 2920
!2400 = (!2290 !2291 !2399)
!2401 = span !98 2914 2920
!2402 = fn_call_path_span !98 2917 2918
!2403 = (!2290 !2291 !2401 !2402)
!2404 = span !98 2914 2916
!2405 = (!2290 !2291 !2401 !2402)
!2406 = (!2290 !2291 !2401 !2402)
!2407 = (!2290 !2291 !2401 !2402 !953)
!2408 = (!2290 !2291 !2401 !2402)
!2409 = (!2290 !2291 !2401 !2402)
!2410 = (!2290 !2291 !2401 !2402)
!2411 = span !98 2860 2921
!2412 = fn_call_path_span !98 2860 2873
!2413 = (!2290 !2291 !2411 !2412)
!2414 = span !98 7350 7351
!2415 = span !98 7329 7399
!2416 = fn_name_span !98 7332 7335
!2417 = (!2415 !2416)
!2418 = span !98 7374 7375
!2419 = span !98 7374 7392
!2420 = fn_call_path_span !98 7376 7386
!2421 = (!2419 !2420)
!2422 = span !98 2981 3003
!2423 = (!2419 !2420 !2422)
!2424 = span !98 3131 3141
!2425 = (!2419 !2420 !2424)
!2426 = span !98 3132 3136
!2427 = (!2419 !2420 !2424)
!2428 = span !98 3114 3142
!2429 = (!2419 !2420 !2428)
!2430 = span !98 3151 3166
!2431 = (!2419 !2420 !2430)
!2432 = span !98 3163 3165
!2433 = (!2419 !2420 !2430)
!2434 = span !98 3181 3185
!2435 = span !98 3210 3215
!2436 = (!2419 !2420 !2435)
!2437 = span !98 3210 3220
!2438 = fn_call_path_span !98 3216 3217
!2439 = (!2419 !2420 !2437 !2438)
!2440 = (!2419 !2420 !2437 !2438)
!2441 = (!2419 !2420 !2437 !2438)
!2442 = (!2419 !2420 !2437 !2438)
!2443 = span !98 3200 3221
!2444 = (!2419 !2420 !2443)
!2445 = span !98 3266 3269
!2446 = (!2419 !2420 !2445)
!2447 = span !98 3234 3329
!2448 = (!2419 !2420 !2447)
!2449 = (!2419 !2420 !2447)
!2450 = (!2419 !2420 !2447)
!2451 = (!2419 !2420 !2447)
!2452 = (!2419 !2420 !2447)
!2453 = span !98 3361 3371
!2454 = fn_call_path_span !98 3367 3368
!2455 = (!2419 !2420 !2453 !2454)
!2456 = span !98 3369 3371
!2457 = (!2419 !2420 !2453 !2454)
!2458 = (!2419 !2420 !2453 !2454)
!2459 = (!2419 !2420 !2453 !2454 !2317)
!2460 = (!2419 !2420 !2453 !2454)
!2461 = (!2419 !2420 !2453 !2454)
!2462 = span !98 3354 3410
!2463 = (!2419 !2420 !2462)
!2464 = span !98 3342 3411
!2465 = (!2419 !2420 !2464)
!2466 = (!2419 !2420 !2464)
!2467 = span !98 3436 3441
!2468 = (!2419 !2420 !2467)
!2469 = span !98 3444 3446
!2470 = span !98 3436 3446
!2471 = fn_call_path_span !98 3442 3443
!2472 = (!2419 !2420 !2470 !2471)
!2473 = span !98 3424 3446
!2474 = (!2419 !2420 !2473)
!2475 = span !98 3431 3432
!2476 = (!2419 !2420 !2475)
!2477 = (!2419 !2420 !2473)
!2478 = (!2419 !2420 !2473)
!2479 = span !98 3487 3492
!2480 = (!2419 !2420 !2479)
!2481 = span !98 3487 3497
!2482 = fn_call_path_span !98 3493 3494
!2483 = (!2419 !2420 !2481 !2482)
!2484 = (!2419 !2420 !2481 !2482)
!2485 = (!2419 !2420 !2481 !2482)
!2486 = (!2419 !2420 !2481 !2482)
!2487 = span !98 3479 3497
!2488 = (!2419 !2420 !2487)
!2489 = span !98 3515 3525
!2490 = fn_call_path_span !98 3521 3523
!2491 = (!2419 !2420 !2489 !2490)
!2492 = (!2419 !2420 !2489 !2490)
!2493 = (!2419 !2420 !2489 !2490)
!2494 = (!2419 !2420 !2489 !2490)
!2495 = (!2419 !2420 !2489)
!2496 = span !98 3577 3578
!2497 = (!2419 !2420 !2496)
!2498 = span !98 3577 3583
!2499 = fn_call_path_span !98 3579 3581
!2500 = (!2419 !2420 !2498 !2499)
!2501 = (!2419 !2420 !2498 !2499)
!2502 = span !98 3582 3583
!2503 = (!2419 !2420 !2498 !2499)
!2504 = (!2419 !2420 !2498 !2499)
!2505 = (!2419 !2420 !2498 !2499 !956)
!2506 = (!2419 !2420 !2498 !2499)
!2507 = (!2419 !2420 !2498 !2499)
!2508 = (!2419 !2420 !2498)
!2509 = (!2419 !2420 !2498)
!2510 = span !98 3618 3624
!2511 = (!2419 !2420 !2510)
!2512 = span !98 3636 3642
!2513 = (!2419 !2420 !2512)
!2514 = span !98 3626 3643
!2515 = (!2419 !2420 !2514)
!2516 = span !98 3654 3655
!2517 = (!2419 !2420 !2516)
!2518 = span !98 3626 3656
!2519 = fn_call_path_span !98 3644 3647
!2520 = (!2419 !2420 !2518 !2519)
!2521 = (!2419 !2420 !2518 !2519)
!2522 = (!2419 !2420 !2518 !2519)
!2523 = (!2419 !2420 !2518 !2519 !1945)
!2524 = (!2419 !2420 !2518 !2519)
!2525 = (!2419 !2420 !2518 !2519)
!2526 = (!2419 !2420 !2518 !2519)
!2527 = (!2419 !2420 !2518 !2519)
!2528 = span !98 3663 3664
!2529 = (!2419 !2420 !2528)
!2530 = span !98 3658 3664
!2531 = fn_call_path_span !98 3661 3662
!2532 = (!2419 !2420 !2530 !2531)
!2533 = span !98 3658 3660
!2534 = (!2419 !2420 !2530 !2531)
!2535 = (!2419 !2420 !2530 !2531)
!2536 = (!2419 !2420 !2530 !2531 !953)
!2537 = (!2419 !2420 !2530 !2531)
!2538 = (!2419 !2420 !2530 !2531)
!2539 = (!2419 !2420 !2530 !2531)
!2540 = span !98 3604 3665
!2541 = fn_call_path_span !98 3604 3617
!2542 = (!2419 !2420 !2540 !2541)
!2543 = span !98 7450 7451
!2544 = span !98 7429 7552
!2545 = fn_name_span !98 7432 7435
!2546 = (!2544 !2545)
!2547 = span !98 7474 7475
!2548 = span !98 7501 7505
!2549 = span !98 7474 7545
!2550 = fn_call_path_span !98 7476 7493
!2551 = (!2549 !2550)
!2552 = span !98 7540 7544
!2553 = span !98 3760 3769
!2554 = (!2549 !2550 !2553)
!2555 = span !98 3807 3811
!2556 = (!2549 !2550 !2553)
!2557 = span !98 3864 3868
!2558 = span !98 3749 3879
!2559 = (!2549 !2550 !2558)
!2560 = (!2549 !2550 !2558)
!2561 = span !98 3905 3910
!2562 = (!2549 !2550 !2561)
!2563 = span !98 3889 3911
!2564 = (!2549 !2550 !2563)
!2565 = span !98 4015 4025
!2566 = (!2549 !2550 !2565)
!2567 = span !98 4016 4020
!2568 = (!2549 !2550 !2565)
!2569 = span !98 3998 4026
!2570 = (!2549 !2550 !2569)
!2571 = span !98 4035 4049
!2572 = (!2549 !2550 !2571)
!2573 = span !98 4042 4043
!2574 = (!2549 !2550 !2571)
!2575 = span !98 4047 4049
!2576 = (!2549 !2550 !2571)
!2577 = span !98 4073 4088
!2578 = (!2549 !2550 !2577)
!2579 = span !98 4080 4081
!2580 = (!2549 !2550 !2577)
!2581 = span !98 4085 4088
!2582 = (!2549 !2550 !2577)
!2583 = span !98 4109 4124
!2584 = (!2549 !2550 !2583)
!2585 = span !98 4121 4123
!2586 = (!2549 !2550 !2583)
!2587 = span !98 4139 4143
!2588 = span !98 4168 4173
!2589 = (!2549 !2550 !2588)
!2590 = span !98 4168 4178
!2591 = fn_call_path_span !98 4174 4175
!2592 = (!2549 !2550 !2590 !2591)
!2593 = (!2549 !2550 !2590 !2591)
!2594 = (!2549 !2550 !2590 !2591)
!2595 = (!2549 !2550 !2590 !2591)
!2596 = span !98 4158 4179
!2597 = (!2549 !2550 !2596)
!2598 = span !98 4224 4227
!2599 = (!2549 !2550 !2598)
!2600 = span !98 4192 4287
!2601 = (!2549 !2550 !2600)
!2602 = (!2549 !2550 !2600)
!2603 = (!2549 !2550 !2600)
!2604 = (!2549 !2550 !2600)
!2605 = (!2549 !2550 !2600)
!2606 = span !98 4319 4329
!2607 = fn_call_path_span !98 4325 4326
!2608 = (!2549 !2550 !2606 !2607)
!2609 = span !98 4327 4329
!2610 = (!2549 !2550 !2606 !2607)
!2611 = (!2549 !2550 !2606 !2607)
!2612 = (!2549 !2550 !2606 !2607 !2317)
!2613 = (!2549 !2550 !2606 !2607)
!2614 = (!2549 !2550 !2606 !2607)
!2615 = span !98 4312 4368
!2616 = (!2549 !2550 !2615)
!2617 = span !98 4300 4369
!2618 = (!2549 !2550 !2617)
!2619 = (!2549 !2550 !2617)
!2620 = span !98 4386 4396
!2621 = fn_call_path_span !98 4392 4393
!2622 = (!2549 !2550 !2620 !2621)
!2623 = span !98 4394 4396
!2624 = (!2549 !2550 !2620 !2621)
!2625 = span !491 21567 21571
!2626 = (!2549 !2550 !2620 !2621 !2625)
!2627 = (!2549 !2550 !2620 !2621)
!2628 = span !491 21573 21578
!2629 = (!2549 !2550 !2620 !2621 !2628)
!2630 = (!2549 !2550 !2620 !2621)
!2631 = (!2549 !2550 !2620 !2621)
!2632 = (!2549 !2550 !2620)
!2633 = span !98 4427 4432
!2634 = (!2549 !2550 !2633)
!2635 = span !98 4435 4437
!2636 = span !98 4427 4437
!2637 = fn_call_path_span !98 4433 4434
!2638 = (!2549 !2550 !2636 !2637)
!2639 = span !98 4415 4437
!2640 = (!2549 !2550 !2639)
!2641 = span !98 4422 4423
!2642 = (!2549 !2550 !2641)
!2643 = (!2549 !2550 !2639)
!2644 = (!2549 !2550 !2639)
!2645 = span !98 4508 4513
!2646 = (!2549 !2550 !2645)
!2647 = span !98 4508 4518
!2648 = fn_call_path_span !98 4514 4515
!2649 = (!2549 !2550 !2647 !2648)
!2650 = (!2549 !2550 !2647 !2648)
!2651 = span !98 4516 4518
!2652 = (!2549 !2550 !2647 !2648)
!2653 = span !491 5508 5523
!2654 = fn_call_path_span !491 5508 5517
!2655 = (!2549 !2550 !2647 !2648 !2653 !2654)
!2656 = (!2549 !2550 !2647 !2648 !2653 !2654 !1976)
!2657 = span !491 5535 5540
!2658 = (!2549 !2550 !2647 !2648 !2657)
!2659 = span !491 5525 5541
!2660 = fn_call_path_span !491 5525 5534
!2661 = (!2549 !2550 !2647 !2648 !2659 !2660)
!2662 = (!2549 !2550 !2647 !2648 !2659 !2660)
!2663 = (!2549 !2550 !2647 !2648 !2659 !2660 !1976)
!2664 = (!2549 !2550 !2647 !2648)
!2665 = span !491 5488 5543
!2666 = (!2549 !2550 !2647 !2648 !2665)
!2667 = (!2549 !2550 !2647 !2648 !2665)
!2668 = span !491 5570 5592
!2669 = fn_call_path_span !491 5570 5579
!2670 = (!2549 !2550 !2647 !2648 !2668 !2669)
!2671 = (!2549 !2550 !2647 !2648 !2668 !2669)
!2672 = (!2549 !2550 !2647 !2648 !2668 !2669 !1973)
!2673 = (!2549 !2550 !2647 !2648 !2668 !2669)
!2674 = (!2549 !2550 !2647 !2648 !2668 !2669 !1976)
!2675 = span !491 5553 5593
!2676 = (!2549 !2550 !2647 !2648 !2675)
!2677 = (!2549 !2550 !2647 !2648 !2675)
!2678 = span !491 5611 5618
!2679 = (!2549 !2550 !2647 !2648 !2678)
!2680 = (!2549 !2550 !2647 !2648)
!2681 = span !491 5620 5630
!2682 = (!2549 !2550 !2647 !2648 !2681)
!2683 = (!2549 !2550 !2647 !2648)
!2684 = (!2549 !2550 !2647 !2648)
!2685 = span !491 5606 5631
!2686 = (!2549 !2550 !2647 !2648 !2685)
!2687 = span !491 5649 5676
!2688 = fn_call_path_span !491 5649 5674
!2689 = (!2549 !2550 !2647 !2648 !2687 !2688 !1996 !1997 !1999)
!2690 = (!2549 !2550 !2647 !2648 !2687 !2688 !2001)
!2691 = (!2549 !2550 !2647 !2648 !2687 !2688)
!2692 = (!2549 !2550 !2647 !2648 !2687 !2688)
!2693 = (!2549 !2550 !2647 !2648 !2687 !2688)
!2694 = (!2549 !2550 !2647 !2648 !2687)
!2695 = span !491 5704 5705
!2696 = span !491 5695 5706
!2697 = (!2549 !2550 !2647 !2648 !2696)
!2698 = span !491 5839 5846
!2699 = (!2549 !2550 !2647 !2648 !2698)
!2700 = (!2549 !2550 !2647 !2648)
!2701 = span !491 5854 5864
!2702 = (!2549 !2550 !2647 !2648 !2701)
!2703 = (!2549 !2550 !2647 !2648)
!2704 = span !491 5866 5867
!2705 = (!2549 !2550 !2647 !2648)
!2706 = (!2549 !2550 !2647 !2648)
!2707 = span !491 5823 5870
!2708 = fn_call_path_span !491 5823 5832
!2709 = (!2549 !2550 !2647 !2648 !2707 !2708)
!2710 = (!2549 !2550 !2647 !2648 !2707 !2708)
!2711 = (!2549 !2550 !2647 !2648 !2707 !2708 !2013)
!2712 = (!2549 !2550 !2647 !2648 !2707 !2708)
!2713 = (!2549 !2550 !2647 !2648 !2707 !2708 !2015)
!2714 = (!2549 !2550 !2647 !2648)
!2715 = span !491 5924 5931
!2716 = (!2549 !2550 !2647 !2648 !2715)
!2717 = span !491 5914 5932
!2718 = fn_call_path_span !491 5914 5923
!2719 = (!2549 !2550 !2647 !2648 !2717 !2718)
!2720 = (!2549 !2550 !2647 !2648 !2717 !2718)
!2721 = (!2549 !2550 !2647 !2648 !2717 !2718 !2015)
!2722 = (!2549 !2550 !2647 !2648)
!2723 = span !98 4522 4523
!2724 = (!2549 !2550 !2723)
!2725 = span !98 4507 4523
!2726 = fn_call_path_span !98 4520 4521
!2727 = (!2549 !2550 !2725 !2726)
!2728 = span !98 4495 4523
!2729 = (!2549 !2550 !2728)
!2730 = span !98 4502 4503
!2731 = (!2549 !2550 !2730)
!2732 = (!2549 !2550 !2728)
!2733 = (!2549 !2550 !2728)
!2734 = span !98 4559 4564
!2735 = (!2549 !2550 !2734)
!2736 = span !98 4559 4569
!2737 = fn_call_path_span !98 4565 4566
!2738 = (!2549 !2550 !2736 !2737)
!2739 = (!2549 !2550 !2736 !2737)
!2740 = (!2549 !2550 !2736 !2737)
!2741 = (!2549 !2550 !2736 !2737)
!2742 = span !98 4551 4569
!2743 = (!2549 !2550 !2742)
!2744 = span !98 4587 4597
!2745 = fn_call_path_span !98 4593 4595
!2746 = (!2549 !2550 !2744 !2745)
!2747 = (!2549 !2550 !2744 !2745)
!2748 = (!2549 !2550 !2744 !2745)
!2749 = (!2549 !2550 !2744 !2745)
!2750 = (!2549 !2550 !2744)
!2751 = span !98 4649 4650
!2752 = (!2549 !2550 !2751)
!2753 = span !98 4649 4655
!2754 = fn_call_path_span !98 4651 4653
!2755 = (!2549 !2550 !2753 !2754)
!2756 = (!2549 !2550 !2753 !2754)
!2757 = span !98 4654 4655
!2758 = (!2549 !2550 !2753 !2754)
!2759 = (!2549 !2550 !2753 !2754)
!2760 = (!2549 !2550 !2753 !2754 !956)
!2761 = (!2549 !2550 !2753 !2754)
!2762 = (!2549 !2550 !2753 !2754)
!2763 = (!2549 !2550 !2753)
!2764 = (!2549 !2550 !2753)
!2765 = span !98 4690 4696
!2766 = (!2549 !2550 !2765)
!2767 = span !98 4708 4714
!2768 = (!2549 !2550 !2767)
!2769 = span !98 4698 4715
!2770 = (!2549 !2550 !2769)
!2771 = span !98 4717 4719
!2772 = span !98 4676 4720
!2773 = fn_call_path_span !98 4676 4689
!2774 = (!2549 !2550 !2772 !2773)
!2775 = span !98 7762 7763
!2776 = span !98 7741 7876
!2777 = fn_name_span !98 7744 7747
!2778 = (!2776 !2777)
!2779 = span !98 7786 7787
!2780 = span !98 7819 7820
!2781 = span !98 7846 7847
!2782 = span !98 693 805
!2783 = fn_name_span !98 700 719
!2784 = (!2782 !2783)
!2785 = span !98 744 750
!2786 = span !98 745 749
!2787 = span !98 736 751
!2788 = span !98 774 780
!2789 = span !98 792 793
!2790 = span !98 782 794
!2791 = span !98 796 797
!2792 = span !98 760 798
!2793 = fn_call_path_span !98 760 773
!2794 = (!2792 !2793)
!2795 = span !98 5105 5347
!2796 = fn_name_span !98 5112 5123
!2797 = (!2795 !2796)
!2798 = span !98 5168 5182
!2799 = fn_call_path_span !98 5179 5180
!2800 = (!2798 !2799)
!2801 = span !98 5181 5182
!2802 = (!2798 !2799 !1480)
!2803 = (!2798 !2799 !1483)
!2804 = span !98 5197 5201
!2805 = span !98 5212 5216
!2806 = span !98 5238 5242
!2807 = span !98 5253 5256
!2808 = span !98 5295 5299
!2809 = span !98 5267 5341
!2810 = span !98 5325 5330
!2811 = span !98 6354 6358
!2812 = span !98 6360 6365
!2813 = span !98 6330 6567
!2814 = fn_name_span !98 6337 6342
!2815 = (!2813 !2814)
!2816 = span !98 6496 6513
!2817 = fn_call_path_span !98 6502 6505
!2818 = (!2816 !2817)
!2819 = span !98 6280 6284
!2820 = span !98 6258 6324
!2821 = fn_name_span !98 6265 6271
!2822 = (!2820 !2821)
!2823 = span !98 6296 6300
!2824 = span !98 6313 6316
!2825 = span !98 4943 5099
!2826 = fn_name_span !98 4950 4960
!2827 = (!2825 !2826)
!2828 = span !98 5005 5008
!2829 = span !98 5019 5093
!2830 = span !98 5077 5082
!2831 = span !98 6017 6021
!2832 = span !98 6023 6028
!2833 = span !98 5993 6232
!2834 = fn_name_span !98 6000 6005
!2835 = (!2833 !2834)
!2836 = span !98 6160 6177
!2837 = fn_call_path_span !98 6166 6169
!2838 = (!2836 !2837)
!2839 = span !98 5943 5947
!2840 = span !98 5921 5987
!2841 = fn_name_span !98 5928 5934
!2842 = (!2840 !2841)
!2843 = span !98 5959 5963
!2844 = span !98 5976 5979
!2845 = span !0 132 134
!2846 = span !0 111 209
!2847 = fn_name_span !0 114 117
!2848 = (!2846 !2847)
!2849 = span !0 165 167
!2850 = span !0 181 184
!2851 = span !0 165 194
!2852 = fn_call_path_span !0 186 192
!2853 = (!2851 !2852)
!2854 = span !98 5460 5464
!2855 = span !98 5438 5578
!2856 = fn_name_span !98 5445 5451
!2857 = (!2855 !2856)
!2858 = span !98 5479 5483
!2859 = span !98 5479 5494
!2860 = span !98 5509 5513
!2861 = span !98 5526 5529
!2862 = span !98 5550 5554
!2863 = span !98 5567 5570
!2864 = span !98 4733 4937
!2865 = fn_name_span !98 4740 4752
!2866 = (!2864 !2865)
!2867 = span !98 4840 4845
!2868 = span !98 4856 4931
!2869 = span !98 4915 4920
!2870 = span !0 111 389
!2871 = (!2870 !2847)
!2872 = span !0 165 374
!2873 = span !0 178 259
!2874 = fn_call_path_span !0 178 259
!2875 = (!2873 !2874)
!2876 = span !0 171 175
!2877 = (!2873 !2874 !646)
!2878 = span !0 215 217
!2879 = span !0 228 234
!2880 = span !0 261 370
!2881 = fn_call_path_span !0 261 370
!2882 = (!2880 !2881)
!2883 = (!2880 !2881 !646)
!2884 = span !0 269 274
!2885 = span !0 305 307
!2886 = span !0 320 323
!2887 = span !0 305 337
!2888 = fn_call_path_span !0 325 330
!2889 = (!2887 !2888)
!2890 = (!2887 !2888 !434)
!2891 = (!2887 !2888 !436)
!2892 = (!2887 !2888 !438)
!2893 = (!2887 !2888 !440)
!2894 = (!2887 !2888 !442)
!2895 = (!2887 !2888 !444)
!2896 = (!2887 !2888 !444)
!2897 = (!2887 !2888 !444)
!2898 = (!2887 !2888 !444)
!2899 = (!2887 !2888 !444)
!2900 = (!2887 !2888 !450)
!2901 = (!2887 !2888 !452)
!2902 = (!2887 !2888 !442)
!2903 = (!2887 !2888 !455)
!2904 = (!2887 !2888 !455)
!2905 = (!2887 !2888 !455)
!2906 = (!2887 !2888 !460)
!2907 = span !0 305 346
!2908 = fn_call_path_span !0 338 344
!2909 = (!2907 !2908)
!2910 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.<autogenerated>.sw"
!2911 = span !2910 138 140
!2912 = span !2910 117 247
!2913 = fn_name_span !2910 120 123
!2914 = (!2912 !2913)
!2915 = span !2910 171 173
!2916 = span !2910 187 196
!2917 = span !2910 204 210
!2918 = span !609 429 439
!2919 = span !2910 171 232
!2920 = fn_call_path_span !2910 224 230
!2921 = (!2919 !2920)
!2922 = span !98 5608 5612
!2923 = span !98 5584 5896
!2924 = fn_name_span !98 5591 5596
!2925 = (!2923 !2924)
!2926 = "/home/kebradalaonda/p/sway/sway-lib-std/src/asset_id.<autogenerated>.sw"
!2927 = span !2926 138 140
!2928 = span !2926 117 247
!2929 = fn_name_span !2926 120 123
!2930 = (!2928 !2929)
!2931 = span !2926 171 173
!2932 = span !2926 187 196
!2933 = span !2926 204 210
!2934 = span !623 790 800
!2935 = span !2926 171 232
!2936 = fn_call_path_span !2926 224 230
!2937 = (!2935 !2936)
!2938 = span !841 4979 4983
!2939 = span !841 4985 4989
!2940 = span !841 4959 5429
!2941 = fn_name_span !841 4966 4970
!2942 = (!2940 !2941)
!2943 = span !841 5071 5075
!2944 = span !841 5083 5087
!2945 = span !841 434 442
!2946 = span !841 5071 5095
!2947 = fn_call_path_span !841 5080 5082
!2948 = (!2946 !2947)
!2949 = (!2946 !2947 !644)
!2950 = (!2946 !2947 !646)
!2951 = span !841 5110 5114
!2952 = span !841 5110 5125
!2953 = fn_call_path_span !841 5119 5123
!2954 = (!2952 !2953)
!2955 = span !841 1421 1425
!2956 = (!2952 !2953 !2955)
!2957 = (!2952 !2953 !2945)
!2958 = span !841 1421 1434
!2959 = fn_call_path_span !841 1430 1432
!2960 = (!2952 !2953 !2958 !2959)
!2961 = (!2952 !2953 !2958 !2959)
!2962 = span !841 1433 1434
!2963 = (!2952 !2953 !2958 !2959)
!2964 = (!2952 !2953 !2958 !2959 !644)
!2965 = (!2952 !2953 !2958 !2959)
!2966 = (!2952 !2953 !2958 !2959 !646)
!2967 = (!2952 !2953 !2958 !2959)
!2968 = (!2952 !2953 !2958 !2959)
!2969 = span !841 1437 1438
!2970 = (!2952 !2953 !2958)
!2971 = span !841 1452 1456
!2972 = (!2952 !2953 !2971)
!2973 = (!2952 !2953 !2945)
!2974 = span !841 1448 1460
!2975 = fn_call_path_span !841 1450 1451
!2976 = (!2952 !2953 !2974 !2975)
!2977 = span !841 1448 1449
!2978 = (!2952 !2953 !2974 !2975)
!2979 = (!2952 !2953 !2974 !2975)
!2980 = (!2952 !2953 !2974 !2975 !1431)
!2981 = (!2952 !2953 !2974 !2975)
!2982 = (!2952 !2953 !2974 !2975 !1434)
!2983 = (!2952 !2953 !2974 !2975)
!2984 = (!2952 !2953 !2974 !2975)
!2985 = span !841 1404 1463
!2986 = (!2952 !2953 !2985)
!2987 = (!2952 !2953 !2985)
!2988 = span !841 1497 1501
!2989 = (!2952 !2953 !2988)
!2990 = (!2952 !2953 !969)
!2991 = span !841 1507 1511
!2992 = (!2952 !2953 !2991)
!2993 = (!2952 !2953 !2945)
!2994 = span !841 1517 1524
!2995 = (!2952 !2953 !2994)
!2996 = span !841 1483 1525
!2997 = fn_call_path_span !841 1483 1496
!2998 = (!2952 !2953 !2996 !2997)
!2999 = (!2952 !2953 !2996 !2997)
!3000 = (!2952 !2953 !2996 !2997)
!3001 = span !849 4168 4185
!3002 = fn_call_path_span !849 4178 4179
!3003 = (!2952 !2953 !2996 !2997 !3001 !3002)
!3004 = (!2952 !2953 !2996 !2997 !3001 !3002 !1483)
!3005 = (!2952 !2953 !2996 !2997 !3001 !3002)
!3006 = (!2952 !2953 !2996 !2997 !3001 !3002)
!3007 = (!2952 !2953 !2996 !2997 !3001)
!3008 = span !849 4222 4231
!3009 = (!2952 !2953 !2996 !2997 !3008)
!3010 = span !849 4210 4232
!3011 = fn_call_path_span !849 4210 4221
!3012 = (!2952 !2953 !2996 !2997 !3010 !3011)
!3013 = (!2952 !2953 !2996 !2997 !3010 !3011 !853)
!3014 = span !849 4196 4233
!3015 = (!2952 !2953 !2996 !2997 !3014)
!3016 = (!2952 !2953 !2996 !2997 !3014)
!3017 = span !849 4245 4250
!3018 = (!2952 !2953 !2996 !2997 !3017)
!3019 = span !849 4245 4254
!3020 = fn_call_path_span !849 4251 4252
!3021 = (!2952 !2953 !2996 !2997 !3019 !3020)
!3022 = span !849 4253 4254
!3023 = (!2952 !2953 !2996 !2997 !3019 !3020)
!3024 = (!2952 !2953 !2996 !2997 !3019 !3020)
!3025 = (!2952 !2953 !2996 !2997 !3019 !3020 !1483)
!3026 = (!2952 !2953 !2996 !2997 !3019 !3020)
!3027 = (!2952 !2953 !2996 !2997 !3019 !3020)
!3028 = (!2952 !2953 !2996 !2997 !3019)
!3029 = span !849 4269 4272
!3030 = (!2952 !2953 !2996 !2997 !3029)
!3031 = span !849 4287 4294
!3032 = (!2952 !2953 !2996 !2997 !3031)
!3033 = span !849 4296 4301
!3034 = (!2952 !2953 !2996 !2997 !3033)
!3035 = span !849 4269 4302
!3036 = fn_call_path_span !849 4273 4286
!3037 = (!2952 !2953 !2996 !2997 !3035 !3036)
!3038 = (!2952 !2953 !2996 !2997 !3035 !3036)
!3039 = (!2952 !2953 !2996 !2997 !3035 !3036)
!3040 = span !977 5999 6076
!3041 = (!2952 !2953 !2996 !2997 !3035 !3036 !3040)
!3042 = span !977 6050 6065
!3043 = (!2952 !2953 !2996 !2997)
!3044 = span !849 4322 4329
!3045 = (!2952 !2953 !2996 !2997 !3044)
!3046 = (!2952 !2953 !2996 !2997)
!3047 = (!2952 !2953 !2996 !2997)
!3048 = span !849 4351 4354
!3049 = (!2952 !2953 !2996 !2997 !3048)
!3050 = (!2952 !2953 !2996 !2997)
!3051 = (!2952 !2953 !2996 !2997)
!3052 = span !841 1472 1525
!3053 = (!2952 !2953 !3052)
!3054 = (!2952 !2953 !3052)
!3055 = (!2952 !2953 !3052)
!3056 = span !841 1546 1553
!3057 = (!2952 !2953 !3056)
!3058 = span !841 1535 1553
!3059 = (!2952 !2953 !3058)
!3060 = (!2952 !2953 !3058)
!3061 = span !841 5259 5263
!3062 = span !841 5288 5292
!3063 = span !841 5259 5297
!3064 = fn_call_path_span !841 5272 5287
!3065 = (!3063 !3064)
!3066 = (!3063 !3064 !978)
!3067 = (!3063 !3064 !981)
!3068 = (!3063 !3064 !984)
!3069 = span !841 5249 5298
!3070 = span !841 5364 5368
!3071 = span !841 5349 5369
!3072 = fn_call_path_span !841 5353 5363
!3073 = (!3071 !3072)
!3074 = span !977 4752 4800
!3075 = (!3071 !3072 !3074)
!3076 = span !977 4738 4801
!3077 = (!3071 !3072 !3076)
!3078 = (!3071 !3072 !3076)
!3079 = span !977 4819 4823
!3080 = (!3071 !3072 !3079)
!3081 = span !977 4830 4837
!3082 = (!3071 !3072 !3081)
!3083 = span !977 4810 4877
!3084 = (!3071 !3072 !3083)
!3085 = span !977 4853 4866
!3086 = span !841 5409 5417
!3087 = span !841 5409 5422
!3088 = fn_call_path_span !841 5418 5420
!3089 = (!3087 !3088)
!3090 = span !841 5421 5422
!3091 = (!3087 !3088 !506)
!3092 = (!3087 !3088 !508)
!3093 = span !491 27545 27549
!3094 = span !491 27551 27556
!3095 = span !491 27539 27620
!3096 = fn_name_span !491 27542 27544
!3097 = (!3095 !3096)
!3098 = span !491 27582 27596
!3099 = fn_call_path_span !491 27587 27589
!3100 = (!3098 !3099 !1480)
!3101 = (!3098 !3099)
!3102 = (!3098 !3099 !1483)
!3103 = span !491 27582 27614
!3104 = span !491 27600 27604
!3105 = span !491 27608 27613
!3106 = span !491 27600 27614
!3107 = fn_call_path_span !491 27605 27607
!3108 = (!3106 !3107)
!3109 = "/home/kebradalaonda/p/sway/sway-lib-std/src/contract_id.<autogenerated>.sw"
!3110 = span !3109 141 143
!3111 = span !3109 120 253
!3112 = fn_name_span !3109 123 126
!3113 = (!3111 !3112)
!3114 = span !3109 174 176
!3115 = span !3109 190 202
!3116 = span !3109 210 216
!3117 = span !1059 442 452
!3118 = span !3109 174 238
!3119 = fn_call_path_span !3109 230 236
!3120 = (!3118 !3119)
!3121 = span !98 5625 5630
!3122 = (!2923 !2924)
!3123 = (!717 !718)
!3124 = (!2813 !2814)
!3125 = (!2816 !2817)
!3126 = span !1421 3913 3983
!3127 = fn_name_span !1421 3920 3935
!3128 = (!3126 !3127)
!3129 = span !1421 3959 3975
!3130 = fn_call_path_span !1421 3959 3969
!3131 = (!3129 !3130)
!3132 = (!3129 !3130 !1498)
!3133 = span !1737 4056 4161
!3134 = fn_name_span !1737 4063 4066
!3135 = (!3133 !3134)
!3136 = span !1737 785 786
!3137 = span !1737 4111 4124
!3138 = fn_call_path_span !1737 4111 4122
!3139 = span !1737 774 787
!3140 = fn_call_path_span !1737 774 779
!3141 = (!3137 !3138 !3139 !3140)
!3142 = span !1737 750 818
!3143 = (!3137 !3138 !3142)
!3144 = (!3137 !3138)
!3145 = (!3137 !3138 !3142)
!3146 = span !1737 806 807
!3147 = (!3137 !3138 !3142)
!3148 = span !1737 4087 4155
!3149 = span !1737 4143 4144
!3150 = span !849 1748 1753
!3151 = span !849 1732 1888
!3152 = fn_name_span !849 1739 1744
!3153 = (!3151 !3152)
!3154 = span !849 1787 1811
!3155 = fn_call_path_span !849 1804 1805
!3156 = (!3154 !3155)
!3157 = (!3154 !3155 !1431)
!3158 = (!3154 !3155 !1434)
!3159 = span !849 1777 1886
!3160 = span !849 1828 1837
!3161 = span !849 1847 1858
!3162 = span !1737 5760 5764
!3163 = span !1737 5766 5771
!3164 = span !1737 5740 6205
!3165 = fn_name_span !1737 5747 5751
!3166 = (!3164 !3165)
!3167 = span !1737 5852 5856
!3168 = span !1737 3543 3551
!3169 = span !1737 5864 5868
!3170 = span !1737 3523 3537
!3171 = span !1737 375 383
!3172 = span !1737 5852 5876
!3173 = fn_call_path_span !1737 5861 5863
!3174 = (!3172 !3173)
!3175 = (!3172 !3173 !644)
!3176 = (!3172 !3173 !646)
!3177 = span !1737 5891 5895
!3178 = span !1737 5891 5906
!3179 = fn_call_path_span !1737 5900 5904
!3180 = (!3178 !3179)
!3181 = span !1737 2978 2982
!3182 = (!3178 !3179 !3181)
!3183 = (!3178 !3179 !3171)
!3184 = span !1737 2978 2991
!3185 = fn_call_path_span !1737 2987 2989
!3186 = (!3178 !3179 !3184 !3185)
!3187 = (!3178 !3179 !3184 !3185)
!3188 = span !1737 2990 2991
!3189 = (!3178 !3179 !3184 !3185)
!3190 = (!3178 !3179 !3184 !3185 !644)
!3191 = (!3178 !3179 !3184 !3185)
!3192 = (!3178 !3179 !3184 !3185 !646)
!3193 = (!3178 !3179 !3184 !3185)
!3194 = (!3178 !3179 !3184 !3185)
!3195 = span !1737 2994 2995
!3196 = (!3178 !3179 !3184)
!3197 = span !1737 3009 3013
!3198 = (!3178 !3179 !3197)
!3199 = (!3178 !3179 !3171)
!3200 = span !1737 3005 3017
!3201 = fn_call_path_span !1737 3007 3008
!3202 = (!3178 !3179 !3200 !3201)
!3203 = span !1737 3005 3006
!3204 = (!3178 !3179 !3200 !3201)
!3205 = (!3178 !3179 !3200 !3201)
!3206 = (!3178 !3179 !3200 !3201 !1431)
!3207 = (!3178 !3179 !3200 !3201)
!3208 = (!3178 !3179 !3200 !3201 !1434)
!3209 = (!3178 !3179 !3200 !3201)
!3210 = (!3178 !3179 !3200 !3201)
!3211 = span !1737 2961 3020
!3212 = (!3178 !3179 !3211)
!3213 = (!3178 !3179 !3211)
!3214 = span !1737 3054 3058
!3215 = (!3178 !3179 !3214)
!3216 = span !1737 357 369
!3217 = (!3178 !3179 !3216)
!3218 = span !1737 3064 3068
!3219 = (!3178 !3179 !3218)
!3220 = (!3178 !3179 !3171)
!3221 = span !1737 3074 3081
!3222 = (!3178 !3179 !3221)
!3223 = span !1737 3041 3082
!3224 = fn_call_path_span !1737 3041 3048
!3225 = (!3178 !3179 !3223 !3224)
!3226 = (!3178 !3179 !3223 !3224)
!3227 = (!3178 !3179 !3223 !3224)
!3228 = span !849 2668 2685
!3229 = fn_call_path_span !849 2678 2679
!3230 = (!3178 !3179 !3223 !3224 !3228 !3229)
!3231 = (!3178 !3179 !3223 !3224 !3228 !3229 !1483)
!3232 = (!3178 !3179 !3223 !3224 !3228 !3229)
!3233 = (!3178 !3179 !3223 !3224 !3228 !3229)
!3234 = (!3178 !3179 !3223 !3224 !3228)
!3235 = span !849 2721 2730
!3236 = (!3178 !3179 !3223 !3224 !3235)
!3237 = (!3178 !3179 !3223 !3224)
!3238 = span !849 2710 2731
!3239 = fn_call_path_span !849 2710 2715
!3240 = (!3178 !3179 !3223 !3224 !3238 !3239)
!3241 = span !849 2696 2732
!3242 = (!3178 !3179 !3223 !3224 !3241)
!3243 = (!3178 !3179 !3223 !3224 !3241)
!3244 = span !849 2744 2749
!3245 = (!3178 !3179 !3223 !3224 !3244)
!3246 = span !849 2744 2753
!3247 = fn_call_path_span !849 2750 2751
!3248 = (!3178 !3179 !3223 !3224 !3246 !3247)
!3249 = span !849 2752 2753
!3250 = (!3178 !3179 !3223 !3224 !3246 !3247)
!3251 = (!3178 !3179 !3223 !3224 !3246 !3247)
!3252 = (!3178 !3179 !3223 !3224 !3246 !3247 !1483)
!3253 = (!3178 !3179 !3223 !3224 !3246 !3247)
!3254 = (!3178 !3179 !3223 !3224 !3246 !3247)
!3255 = (!3178 !3179 !3223 !3224 !3246)
!3256 = span !849 2768 2771
!3257 = (!3178 !3179 !3223 !3224 !3256)
!3258 = span !849 2785 2792
!3259 = (!3178 !3179 !3223 !3224 !3258)
!3260 = span !849 2794 2799
!3261 = (!3178 !3179 !3223 !3224 !3260)
!3262 = span !849 2768 2800
!3263 = fn_call_path_span !849 2772 2779
!3264 = (!3178 !3179 !3223 !3224 !3262 !3263)
!3265 = (!3178 !3179 !3223 !3224 !3262 !3263)
!3266 = (!3178 !3179 !3223 !3224 !3262 !3263 !1516 !1517)
!3267 = (!3178 !3179 !3223 !3224 !3262 !3263 !1516 !1517)
!3268 = (!3178 !3179 !3223 !3224 !3262 !3263 !1516 !1517)
!3269 = (!3178 !3179 !3223 !3224 !3262 !3263 !1516 !1517 !1434)
!3270 = (!3178 !3179 !3223 !3224 !3262 !3263 !1516 !1517)
!3271 = (!3178 !3179 !3223 !3224 !3262 !3263 !1516 !1517)
!3272 = (!3178 !3179 !3223 !3224 !3262 !3263 !1526)
!3273 = (!3178 !3179 !3223 !3224 !3262 !3263 !1526)
!3274 = (!3178 !3179 !3223 !3224 !3262 !3263 !1529)
!3275 = (!3178 !3179 !3223 !3224 !3262 !3263)
!3276 = (!3178 !3179 !3223 !3224 !3262 !3263 !1532)
!3277 = (!3178 !3179 !3223 !3224 !3262 !3263)
!3278 = (!3178 !3179 !3223 !3224 !3262 !3263 !1535)
!3279 = (!3178 !3179 !3223 !3224 !3262 !3263)
!3280 = (!3178 !3179 !3223 !3224 !3262 !3263 !1538)
!3281 = (!3178 !3179 !3223 !3224)
!3282 = span !849 2820 2827
!3283 = (!3178 !3179 !3223 !3224 !3282)
!3284 = (!3178 !3179 !3223 !3224)
!3285 = (!3178 !3179 !3223 !3224)
!3286 = span !849 2849 2852
!3287 = (!3178 !3179 !3223 !3224 !3286)
!3288 = (!3178 !3179 !3223 !3224)
!3289 = (!3178 !3179 !3223 !3224)
!3290 = span !1737 3030 3082
!3291 = (!3178 !3179 !3290)
!3292 = (!3178 !3179 !3290)
!3293 = (!3178 !3179 !3290)
!3294 = span !1737 3103 3110
!3295 = (!3178 !3179 !3294)
!3296 = span !1737 3092 3110
!3297 = (!3178 !3179 !3296)
!3298 = (!3178 !3179 !3296)
!3299 = span !1737 6040 6044
!3300 = span !1737 6062 6066
!3301 = span !1737 6040 6071
!3302 = fn_call_path_span !1737 6053 6056
!3303 = (!3301 !3302)
!3304 = (!3301 !3302 !1945)
!3305 = span !977 1249 1254
!3306 = (!3301 !3302 !3305)
!3307 = span !1737 6030 6072
!3308 = span !1737 6124 6127
!3309 = span !1737 6139 6144
!3310 = span !1737 6124 6145
!3311 = fn_call_path_span !1737 6128 6133
!3312 = (!3310 !3311)
!3313 = span !977 3927 3953
!3314 = (!3310 !3311 !3313)
!3315 = span !977 3977 3981
!3316 = (!3310 !3311 !3315)
!3317 = span !977 3988 3991
!3318 = (!3310 !3311 !3317)
!3319 = span !977 3968 4070
!3320 = (!3310 !3311 !3319)
!3321 = span !977 4038 4055
!3322 = span !977 4090 4111
!3323 = fn_call_path_span !977 4107 4109
!3324 = (!3310 !3311 !3322 !3323)
!3325 = (!3310 !3311 !3322 !3323)
!3326 = (!3310 !3311 !3322 !3323)
!3327 = span !977 4110 4111
!3328 = (!3310 !3311 !3322 !3323)
!3329 = (!3310 !3311 !3322 !3323 !644)
!3330 = (!3310 !3311 !3322 !3323)
!3331 = (!3310 !3311 !3322 !3323 !646)
!3332 = (!3310 !3311 !3322 !3323)
!3333 = (!3310 !3311 !3322 !3323)
!3334 = (!3310 !3311 !3322)
!3335 = span !977 4135 4139
!3336 = (!3310 !3311 !3335)
!3337 = span !977 4146 4149
!3338 = (!3310 !3311 !3337)
!3339 = span !977 4126 4197
!3340 = (!3310 !3311 !3339)
!3341 = span !977 4169 4182
!3342 = span !977 4237 4241
!3343 = (!3310 !3311 !3342)
!3344 = span !977 4248 4251
!3345 = (!3310 !3311 !3344)
!3346 = span !977 4228 4299
!3347 = (!3310 !3311 !3346)
!3348 = span !977 4271 4284
!3349 = span !1737 6185 6193
!3350 = span !1737 6185 6198
!3351 = fn_call_path_span !1737 6194 6196
!3352 = (!3350 !3351)
!3353 = span !1737 6197 6198
!3354 = (!3350 !3351 !506)
!3355 = (!3350 !3351 !508)
!3356 = span !1737 23721 23722
!3357 = span !1737 23700 23879
!3358 = fn_name_span !1737 23703 23706
!3359 = (!3357 !3358)
!3360 = span !1737 23757 23758
!3361 = span !1737 23745 23772
!3362 = span !1737 23794 23805
!3363 = fn_call_path_span !1737 23799 23803
!3364 = (!3362 !3363 !1740)
!3365 = (!3362 !3363)
!3366 = (!3362 !3363 !1740)
!3367 = fn_call_path_span !1737 23794 23805
!3368 = (!3362 !3367)
!3369 = span !1737 22865 22869
!3370 = (!3362 !3367 !3369)
!3371 = (!3362 !3367 !1783)
!3372 = span !1737 22879 22883
!3373 = (!3362 !3367 !3372)
!3374 = (!3362 !3367 !1750)
!3375 = (!3362 !3367 !3168)
!3376 = span !1737 22865 22894
!3377 = fn_call_path_span !1737 22876 22878
!3378 = (!3362 !3367 !3376 !3377)
!3379 = (!3362 !3367 !3376)
!3380 = (!3362 !3367 !915)
!3381 = (!3362 !3367 !915)
!3382 = (!3362 !3367 !915)
!3383 = span !1737 22909 22920
!3384 = (!3362 !3367 !3383)
!3385 = span !1737 22940 22950
!3386 = (!3362 !3367 !3385)
!3387 = (!3362 !3367 !1783)
!3388 = span !1737 22940 22955
!3389 = fn_call_path_span !1737 22951 22953
!3390 = (!3362 !3367 !3388 !3389)
!3391 = (!3362 !3367 !3388 !3389)
!3392 = span !1737 22954 22955
!3393 = (!3362 !3367 !3388 !3389)
!3394 = (!3362 !3367 !3388 !3389 !506)
!3395 = (!3362 !3367 !3388 !3389)
!3396 = (!3362 !3367 !3388 !3389 !508)
!3397 = (!3362 !3367 !3388 !3389)
!3398 = (!3362 !3367 !3388 !3389)
!3399 = (!3362 !3367 !3388)
!3400 = (!3362 !3367 !3388)
!3401 = (!3362 !3367 !3388)
!3402 = (!3362 !3367 !915)
!3403 = (!3362 !3367 !915)
!3404 = (!3362 !3367 !915)
!3405 = span !1737 22970 22974
!3406 = (!3362 !3367 !3405)
!3407 = (!3362 !3367 !1750)
!3408 = span !1737 22996 23000
!3409 = (!3362 !3367 !3408)
!3410 = (!3362 !3367 !1783)
!3411 = span !1737 22996 23010
!3412 = fn_call_path_span !1737 23007 23008
!3413 = (!3362 !3367 !3411 !3412)
!3414 = (!3362 !3367 !3411 !3412)
!3415 = span !1737 23009 23010
!3416 = (!3362 !3367 !3411 !3412)
!3417 = (!3362 !3367 !3411 !3412 !953)
!3418 = (!3362 !3367 !3411 !3412)
!3419 = (!3362 !3367 !3411 !3412 !956)
!3420 = (!3362 !3367 !3411 !3412)
!3421 = (!3362 !3367 !3411 !3412)
!3422 = span !1737 22970 23011
!3423 = fn_call_path_span !1737 22982 22995
!3424 = (!3362 !3367 !3422 !3423)
!3425 = (!3362 !3367 !3422 !3423)
!3426 = (!3362 !3367 !3422 !3423)
!3427 = span !1737 8256 8260
!3428 = (!3362 !3367 !3422 !3423 !3427)
!3429 = (!3362 !3367 !3422 !3423 !3170)
!3430 = (!3362 !3367 !3422 !3423 !3216)
!3431 = span !1737 8256 8284
!3432 = fn_call_path_span !1737 8269 8272
!3433 = (!3362 !3367 !3422 !3423 !3431 !3432)
!3434 = (!3362 !3367 !3422 !3423 !3431 !3432)
!3435 = (!3362 !3367 !3422 !3423 !3431 !3432 !3305)
!3436 = (!3362 !3367 !3422 !3423 !3431 !3432)
!3437 = (!3362 !3367 !3422 !3423 !3431 !3432)
!3438 = (!3362 !3367 !3422 !3423 !3431 !3432)
!3439 = span !1737 8256 8296
!3440 = fn_call_path_span !1737 8285 8289
!3441 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3442 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3443 = span !977 2382 2408
!3444 = (!3362 !3367 !3422 !3423 !3439 !3440 !3443)
!3445 = span !977 2432 2436
!3446 = (!3362 !3367 !3422 !3423 !3439 !3440 !3445)
!3447 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3448 = span !977 2423 2476
!3449 = (!3362 !3367 !3422 !3423 !3439 !3440 !3448)
!3450 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3451 = span !977 2495 2516
!3452 = fn_call_path_span !977 2512 2514
!3453 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3454 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3455 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3456 = span !977 2515 2516
!3457 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3458 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452 !644)
!3459 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3460 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452 !646)
!3461 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3462 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451 !3452)
!3463 = (!3362 !3367 !3422 !3423 !3439 !3440 !3451)
!3464 = span !977 2540 2544
!3465 = (!3362 !3367 !3422 !3423 !3439 !3440 !3464)
!3466 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3467 = span !977 2531 2620
!3468 = (!3362 !3367 !3422 !3423 !3439 !3440 !3467)
!3469 = span !977 2569 2582
!3470 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3471 = span !977 2659 2663
!3472 = (!3362 !3367 !3422 !3423 !3439 !3440 !3471)
!3473 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3474 = span !977 2650 2739
!3475 = (!3362 !3367 !3422 !3423 !3439 !3440 !3474)
!3476 = span !977 2688 2701
!3477 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3478 = (!3362 !3367 !3422 !3423 !3439 !3440)
!3479 = (!3362 !3367 !915)
!3480 = (!3362 !3367 !915)
!3481 = (!1001 !1002)
!3482 = (!1001 !1002 !646)
!3483 = (!3362 !3367)
!3484 = (!3362 !3367 !1011)
!3485 = (!3362 !3367 !1015 !1016)
!3486 = (!3362 !3367 !1015 !1016)
!3487 = (!3362 !3367 !1015 !1016)
!3488 = (!3362 !3367 !1015 !1016)
!3489 = (!3362 !3367 !1015 !1016 !646)
!3490 = (!3362 !3367 !1015 !1016)
!3491 = (!3362 !3367 !1015 !1016)
!3492 = (!3362 !3367 !1015)
!3493 = (!3362 !3367 !1009)
!3494 = (!3362 !3367 !1027)
!3495 = span !1737 23786 23790
!3496 = span !1737 23828 23829
!3497 = span !1737 23836 23840
!3498 = span !1737 23828 23841
!3499 = fn_call_path_span !1737 23830 23835
!3500 = (!3498 !3499)
!3501 = (!3498 !3499 !748)
!3502 = (!3498 !3499 !751)
!3503 = (!3498 !3499 !754)
!3504 = (!3362 !3367 !1035 !1036)
!3505 = (!3362 !3367 !1035 !1036)
!3506 = (!3362 !3367 !1035 !1036 !1041)
!3507 = (!3362 !3367 !1035 !1036)
!3508 = (!3362 !3367 !1035 !1036 !1044)
!3509 = (!3498 !3499 !756)
!3510 = (!3498 !3499 !759)
!3511 = (!3498 !3499 !762)
!3512 = (!3498 !3499 !762)
!3513 = (!3498 !3499 !762)
!3514 = (!3498 !3499 !762)
!3515 = (!3498 !3499 !762)
!3516 = (!3498 !3499 !772)
!3517 = (!3498 !3499 !774)
!3518 = (!3498 !3499 !759)
!3519 = (!3498 !3499 !2836 !2837)
!3520 = (!3498 !3499 !778)
!3521 = (!3498 !3499 !778)
!3522 = (!3498 !3499 !778)
!3523 = span !1737 23862 23863
!3524 = span !1737 23862 23872
!3525 = fn_call_path_span !1737 23864 23870
!3526 = (!3524 !3525)

;; ASM: Final program
;; Program kind: Script
.program:
move $$tmp $pc
jmpf $zero i4
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
CONFIGURABLES_OFFSET[0..32]
CONFIGURABLES_OFFSET[32..64]
lw   $$ds $$tmp i1
add  $$ds $$ds $$tmp
cfei i0                       ; allocate stack space for globals
move $$locbase $sp            ; save locals base register for function __entry
cfei i464                     ; allocate 464 bytes for locals and 0 slots for call arguments
addi $r5 $$locbase i272       ; get offset to local
jal  $$reta $pc i83           ; [call]: call main_0
sw   $$locbase $$retv i53     ; store word
addi $r0 $$locbase i424       ; get offset to local
addi $r1 $$locbase i416       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r2 $$locbase i416       ; get offset to local
movi $r0 i1024                ; initialize constant into register
aloc $r0
addi $r1 $$locbase i112       ; get offset to local
sw   $$locbase $hp i14        ; store word
movi $r0 i1024                ; initialize constant into register
sw   $$locbase $r0 i15        ; store word
sw   $$locbase $zero i16      ; store word
mcpi $$locbase $r1 i24        ; copy memory
addi $r0 $$locbase i184       ; get offset to local
mcpi $r0 $$locbase i24        ; copy memory
addi $r1 $$locbase i288       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i432       ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r0 $$locbase i392       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i392       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i136       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r4 $$locbase i18        ; load word
lw   $r1 $$locbase i19        ; load word
lw   $r2 $$locbase i54        ; load word
movi $r3 i8                   ; initialize constant into register
add  $r3 $r1 $r3
gt   $r3 $r3 $r4
jnzf $r3 $zero i1
jmpf $zero i7
movi $r3 i2                   ; initialize constant into register
mul  $r3 $r4 $r3
movi $r4 i8                   ; initialize constant into register
add  $r4 $r3 $r4
aloc $r4
mcp  $hp $r0 $r1
move $r0 $hp                  ; move parameter from branch to block argument
add  $r3 $r0 $r1
sw   $r3 $r2 i0               ; store word
movi $r2 i8                   ; initialize constant into register
add  $r1 $r1 $r2
addi $r2 $$locbase i208       ; get offset to local
sw   $$locbase $r0 i26        ; store word
sw   $$locbase $r4 i27        ; store word
sw   $$locbase $r1 i28        ; store word
addi $r0 $$locbase i48        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
addi $r1 $$locbase i248       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i312       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $$locbase i368       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i368       ; get offset to local
addi $r1 $$locbase i440       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i440       ; get offset to local
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i160       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
lw   $r1 $$locbase i20        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
addi $r2 $$locbase i232       ; get offset to local
sw   $$locbase $r1 i29        ; store word
addi $r1 $r2 i8               ; get offset to aggregate element
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i96        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r1 $$locbase i336       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i352       ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
mcpi $r5 $r0 i16              ; copy memory
lw   $r0 $r5 i1               ; load size of returned slice
lw   $r5 $r5 i0               ; load pointer to returned slice
retd  $r5 $r0
pshl i255                     ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function main_0
cfei i20240                   ; allocate 20240 bytes for locals and 0 slots for call arguments
move $r5 $$reta               ; save return address
load $r0 data_NonConfigurable_0; get local constant
load $r1 data_NonConfigurable_1; get local constant
movi $r2 i16600               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $zero i0             ; store byte
addi $r2 $$locbase i2096      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i4480                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i560       ; store word
movi $r2 i25                  ; initialize constant into register
sw   $$locbase $r2 i561       ; store word
movi $r2 i6616                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12000               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12000               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i26336             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17480               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i18560               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i1               ; copy memory
sw   $$locbase $r2 i2183      ; store word
addi $r0 $$locbase i1336      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2440      ; get offset to local
sw   $$locbase $r0 i305       ; store word
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i306       ; store word
movi $r0 i4768                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12016               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12896               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26228             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8936                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10168               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1271      ; store word
sw   $$locbase $one i1272     ; store word
movi $r1 i10600               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14816               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26140             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2197      ; store word
lw   $r0 $$locbase i2197      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_62; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16600               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $$locbase $r2 i1         ; copy memory
movi $r2 i16688               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $one i0              ; store byte
movi $r2 i11056               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i11336               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1417      ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i1418      ; store word
addi $r2 $$locbase i2128      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14912               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14992               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25992             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16688               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26308             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_8
addi $r0 $$locbase i2416      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2960      ; get offset to local
sw   $$locbase $r0 i370       ; store word
sw   $$locbase $one i371      ; store word
addi $r0 $$locbase i3200      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15168               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25884             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2198      ; store word
lw   $r0 $$locbase i2198      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_73; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16688               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16920               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $zero i0             ; store byte
addi $r2 $$locbase i3576      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3768      ; get offset to local
sw   $$locbase $r2 i471       ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i472       ; store word
addi $r2 $$locbase i3960      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12016               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25740             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i26056             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_8
movi $r0 i4136                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i4280                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i535       ; store word
sw   $$locbase $one i536      ; store word
movi $r0 i4496                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12192               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25620             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2199      ; store word
lw   $r0 $$locbase i2199      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
load $r0 data_NonConfigurable_86; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $zero i0             ; store byte
movi $r2 i5176                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i5360                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i670       ; store word
movi $r2 i32                  ; initialize constant into register
sw   $$locbase $r2 i671       ; store word
movi $r2 i5536                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12288               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12368               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25464             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i17096               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25988             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i5688                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i5872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i734       ; store word
sw   $$locbase $one i735      ; store word
movi $r0 i6032                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12464               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12544               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25344             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2210      ; store word
lw   $r0 $$locbase i2210      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_95; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sb   $r2 $one i0              ; store byte
movi $r2 i6392                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i6632                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i829       ; store word
movi $r2 i26                  ; initialize constant into register
sw   $$locbase $r2 i830       ; store word
movi $r2 i6832                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12640               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12720               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i25188             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25712             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i7264                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i7448                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i931       ; store word
sw   $$locbase $one i932      ; store word
movi $r0 i7648                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12912               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25068             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2221      ; store word
lw   $r0 $$locbase i2221      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_3; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i48        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16568               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i10                  ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
movi $r2 i8176                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i8376                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1047      ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i1048      ; store word
movi $r2 i8560                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13088               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24908             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25432             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i8720                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i8944                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1118      ; store word
sw   $$locbase $one i1119     ; store word
movi $r0 i9168                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13184               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13264               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24788             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2232      ; store word
lw   $r0 $$locbase i2232      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_17; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16568               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i56        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
movi $r2 i16576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i100                 ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
movi $r2 i9712                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i9888                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1236      ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i1237      ; store word
movi $r2 i10064               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13360               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13440               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24628             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16576               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25152             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i10128               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1267      ; store word
sw   $$locbase $one i1268     ; store word
movi $r0 i10152               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13616               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24508             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2243      ; store word
lw   $r0 $$locbase i2243      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16576               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
load $r0 data_NonConfigurable_29; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16584               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i255                 ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
movi $r2 i10184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i10264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1283      ; store word
movi $r2 i32                  ; initialize constant into register
sw   $$locbase $r2 i1284      ; store word
movi $r2 i10440               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13792               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24348             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24872             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
movi $r0 i10488               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10496               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1312      ; store word
sw   $$locbase $one i1313     ; store word
movi $r0 i10512               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13936               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24228             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2252      ; store word
lw   $r0 $$locbase i2252      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
load $r0 data_NonConfigurable_43; get local constant
load $r1 data_NonConfigurable_2; get local constant
sw   $$locbase $zero i2074    ; store word
movi $r2 i10528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i10568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1321      ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i1322      ; store word
movi $r2 i10584               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14288               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14320               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i24080             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2074      ; load word
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i25248             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i10616               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1328      ; store word
sw   $$locbase $one i1329     ; store word
movi $r0 i10688               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14464               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23968             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2253      ; store word
lw   $r0 $$locbase i2253      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_59; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16592               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2076     ; store word
movi $r2 i10704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i10736               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1342      ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i1343      ; store word
movi $r2 i10752               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14800               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23820             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2076      ; load word
movi $r2 i17496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24988             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i10768               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10776               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1347      ; store word
sw   $$locbase $one i1348     ; store word
movi $r0 i10792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14832               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23708             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2254      ; store word
lw   $r0 $$locbase i2254      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_63; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16608               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i88        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i10                  ; initialize constant into register
sw   $$locbase $r2 i2077      ; store word
movi $r2 i10808               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i10936               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1367      ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i1368      ; store word
movi $r2 i10952               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14848               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14848               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23556             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2077      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24724             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i10968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i10976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1372      ; store word
sw   $$locbase $one i1373     ; store word
movi $r0 i10992               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23444             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2255      ; store word
lw   $r0 $$locbase i2255      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_64; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16616               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i100                 ; initialize constant into register
sw   $$locbase $r2 i2078      ; store word
movi $r2 i11008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i11040               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1380      ; store word
movi $r2 i29                  ; initialize constant into register
sw   $$locbase $r2 i1381      ; store word
movi $r2 i11088               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14880               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14880               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23292             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2078      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24460             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i11104               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i11208               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1401      ; store word
sw   $$locbase $one i1402     ; store word
movi $r0 i11224               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14896               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14896               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23180             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2200      ; store word
lw   $r0 $$locbase i2200      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i104       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_65; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i65535               ; initialize constant into register
sw   $$locbase $r2 i2079      ; store word
movi $r2 i11240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i11280               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1410      ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i1411      ; store word
movi $r2 i11296               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14912               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14912               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i23028             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2079      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24196             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_24
movi $r0 i11312               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i11320               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1415      ; store word
sw   $$locbase $one i1416     ; store word
movi $r0 i11352               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14928               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14928               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22916             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2201      ; store word
lw   $r0 $$locbase i2201      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16632               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i112       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_66; get local constant
load $r1 data_NonConfigurable_2; get local constant
sw   $$locbase $zero i2080    ; store word
movi $r2 i11392               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i11432               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1429      ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i1430      ; store word
movi $r2 i11448               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14944               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14944               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22768             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2080      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24348             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
movi $r0 i11464               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i11472               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1434      ; store word
sw   $$locbase $one i1435     ; store word
movi $r0 i11488               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14960               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22656             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2202      ; store word
lw   $r0 $$locbase i2202      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_67; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16640               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i120       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2081     ; store word
movi $r2 i11504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i2144      ; get offset to local
sw   $$locbase $r2 i268       ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i269       ; store word
addi $r2 $$locbase i2176      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i14976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i14976               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22516             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2081      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i24096             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i2304      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2312      ; get offset to local
sw   $$locbase $r0 i289       ; store word
sw   $$locbase $one i290      ; store word
addi $r0 $$locbase i2328      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14992               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22416             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2203      ; store word
lw   $r0 $$locbase i2203      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_68; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16648               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i128       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i10                  ; initialize constant into register
sw   $$locbase $r2 i2082      ; store word
addi $r2 $$locbase i2344      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i2376      ; get offset to local
sw   $$locbase $r2 i297       ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i298       ; store word
addi $r2 $$locbase i2392      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15024               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15024               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22276             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2082      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23856             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i2408      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2424      ; get offset to local
sw   $$locbase $r0 i303       ; store word
sw   $$locbase $one i304      ; store word
addi $r0 $$locbase i2648      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15040               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15040               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22176             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2204      ; store word
lw   $r0 $$locbase i2204      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_69; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16656               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i136       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i100                 ; initialize constant into register
sw   $$locbase $r2 i2083      ; store word
addi $r2 $$locbase i2856      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i2888      ; get offset to local
sw   $$locbase $r2 i361       ; store word
movi $r2 i29                  ; initialize constant into register
sw   $$locbase $r2 i362       ; store word
addi $r2 $$locbase i2904      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15056               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i22036             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2083      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23616             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i2920      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i2928      ; get offset to local
sw   $$locbase $r0 i366       ; store word
sw   $$locbase $one i367      ; store word
addi $r0 $$locbase i2944      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15072               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15072               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21936             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2205      ; store word
lw   $r0 $$locbase i2205      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16664               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i144       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_70; get local constant
load $r1 data_NonConfigurable_2; get local constant
load $r2 data_NonConfigurable_106; load constant from data section
sw   $$locbase $r2 i2084      ; store word
addi $r2 $$locbase i2976      ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
addi $r0 $$locbase i3016      ; get offset to local
sw   $$locbase $r2 i377       ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i378       ; store word
addi $r2 $$locbase i3072      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15088               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21796             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2084      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23376             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_31
addi $r0 $$locbase i3088      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3096      ; get offset to local
sw   $$locbase $r0 i387       ; store word
sw   $$locbase $one i388      ; store word
addi $r0 $$locbase i3112      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15104               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15104               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21696             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2206      ; store word
lw   $r0 $$locbase i2206      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i152       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_71; get local constant
load $r1 data_NonConfigurable_2; get local constant
sw   $$locbase $zero i2085    ; store word
addi $r2 $$locbase i3128      ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
addi $r0 $$locbase i3168      ; get offset to local
sw   $$locbase $r2 i396       ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i397       ; store word
addi $r2 $$locbase i3184      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15120               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15120               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21560             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2085      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23552             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3216      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3224      ; get offset to local
sw   $$locbase $r0 i403       ; store word
sw   $$locbase $one i404      ; store word
addi $r0 $$locbase i3272      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15136               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21460             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2207      ; store word
lw   $r0 $$locbase i2207      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_72; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16680               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i160       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2087     ; store word
addi $r2 $$locbase i3288      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3320      ; get offset to local
sw   $$locbase $r2 i415       ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i416       ; store word
addi $r2 $$locbase i3336      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15152               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15152               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21324             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2087      ; load word
movi $r2 i17504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23316             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3352      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3360      ; get offset to local
sw   $$locbase $r0 i420       ; store word
sw   $$locbase $one i421      ; store word
addi $r0 $$locbase i3376      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15168               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i21224             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2208      ; store word
lw   $r0 $$locbase i2208      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_74; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16696               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i168       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i10                  ; initialize constant into register
sw   $$locbase $r2 i2088      ; store word
addi $r2 $$locbase i3392      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3456      ; get offset to local
sw   $$locbase $r2 i432       ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i433       ; store word
addi $r2 $$locbase i3472      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15200               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15200               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i21084             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2088      ; load word
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i23076             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3488      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3496      ; get offset to local
sw   $$locbase $r0 i437       ; store word
sw   $$locbase $one i438      ; store word
addi $r0 $$locbase i3512      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15216               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20984             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2209      ; store word
lw   $r0 $$locbase i2209      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_75; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i176       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i100                 ; initialize constant into register
sw   $$locbase $r2 i2089      ; store word
addi $r2 $$locbase i3528      ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3560      ; get offset to local
sw   $$locbase $r2 i445       ; store word
movi $r2 i29                  ; initialize constant into register
sw   $$locbase $r2 i446       ; store word
addi $r2 $$locbase i3608      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15232               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15232               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i20844             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2089      ; load word
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22836             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3624      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3640      ; get offset to local
sw   $$locbase $r0 i455       ; store word
sw   $$locbase $one i456      ; store word
addi $r0 $$locbase i3656      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15248               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15248               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20744             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2211      ; store word
lw   $r0 $$locbase i2211      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i184       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_76; get local constant
load $r1 data_NonConfigurable_2; get local constant
load $r2 data_NonConfigurable_107; load constant from data section
sw   $$locbase $r2 i2090      ; store word
addi $r2 $$locbase i3672      ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
addi $r0 $$locbase i3712      ; get offset to local
sw   $$locbase $r2 i464       ; store word
movi $r2 i33                  ; initialize constant into register
sw   $$locbase $r2 i465       ; store word
addi $r2 $$locbase i3728      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i15264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15264               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i20604             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i2090      ; load word
movi $r2 i17512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i22596             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
addi $r0 $$locbase i3744      ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i3752      ; get offset to local
sw   $$locbase $r0 i469       ; store word
sw   $$locbase $one i470      ; store word
addi $r0 $$locbase i3784      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15280               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15280               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20504             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2212      ; store word
lw   $r0 $$locbase i2212      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i16720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i15344               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_77; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16728               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
addi $r1 $$locbase i3816      ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
addi $r0 $$locbase i3856      ; get offset to local
sw   $$locbase $r1 i482       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i483       ; store word
addi $r1 $$locbase i3872      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i15296               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i15296               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i20340             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16728               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i13904               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22728             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
addi $r0 $$locbase i3888      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i3896      ; get offset to local
sw   $$locbase $r0 i487       ; store word
sw   $$locbase $one i488      ; store word
addi $r0 $$locbase i3912      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15312               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15312               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20224             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2213      ; store word
lw   $r0 $$locbase i2213      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_78; get local constant
load $r1 data_NonConfigurable_79; get local constant
load $r3 data_NonConfigurable_2; get local constant
movi $r2 i16728               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r4 $$locbase i200       ; get offset to local
mcpi $r4 $r2 i32              ; copy memory
movi $r2 i16760               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i3928      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r1 $$locbase i3976      ; get offset to local
sw   $$locbase $r0 i497       ; store word
movi $r0 i28                  ; initialize constant into register
sw   $$locbase $r0 i498       ; store word
addi $r0 $$locbase i3992      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i15328               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20072             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16760               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13936               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22460             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
addi $r0 $$locbase i4024      ; get offset to local
mcpi $r0 $r3 i8               ; copy memory
addi $r1 $$locbase i4032      ; get offset to local
sw   $$locbase $r0 i504       ; store word
sw   $$locbase $one i505      ; store word
addi $r0 $$locbase i4048      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15344               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12032               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19956             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2214      ; store word
lw   $r0 $$locbase i2214      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_80; get local constant
load $r1 data_NonConfigurable_81; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16760               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
addi $r4 $$locbase i232       ; get offset to local
mcpi $r4 $r3 i32              ; copy memory
movi $r3 i16792               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
addi $r0 $$locbase i4064      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i4096                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i512       ; store word
movi $r0 i29                  ; initialize constant into register
sw   $$locbase $r0 i513       ; store word
movi $r0 i4112                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12048               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i12048               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i19796             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i13968               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22184             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
movi $r0 i4128                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4144                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i518       ; store word
sw   $$locbase $one i519      ; store word
movi $r0 i4160                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12064               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12064               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19668             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2215      ; store word
lw   $r0 $$locbase i2215      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_82; get local constant
load $r1 data_NonConfigurable_83; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16792               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
addi $r4 $$locbase i264       ; get offset to local
mcpi $r4 $r3 i32              ; copy memory
movi $r3 i16824               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
movi $r0 i4176                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i4208                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i526       ; store word
movi $r0 i30                  ; initialize constant into register
sw   $$locbase $r0 i527       ; store word
movi $r0 i4224                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i12080               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i19504             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16824               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14000               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21892             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
movi $r0 i4240                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4248                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i531       ; store word
sw   $$locbase $one i532      ; store word
movi $r0 i4264                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12096               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19376             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2216      ; store word
lw   $r0 $$locbase i2216      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_84; get local constant
movi $r1 i16824               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i296       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i15376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_85; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16856               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i4296                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i4336                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i542       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i543       ; store word
movi $r1 i4352                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12112               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12112               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i19200             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16856               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14032               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21588             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_45
movi $r0 i4368                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4376                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i547       ; store word
sw   $$locbase $one i548      ; store word
movi $r0 i4392                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12128               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i19072             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2217      ; store word
lw   $r0 $$locbase i2217      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i16856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i328       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i15408               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_87; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16888               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i4408                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i4448                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i556       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i557       ; store word
movi $r1 i4464                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12144               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i18896             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14064               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21836             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_52
movi $r0 i4512                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4536                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i567       ; store word
sw   $$locbase $one i568      ; store word
movi $r0 i4632                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12160               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18768             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2218      ; store word
lw   $r0 $$locbase i2218      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_84; get local constant
movi $r1 i16888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i360       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i15704               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_88; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16928               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i4648                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i4688                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i586       ; store word
movi $r1 i34                  ; initialize constant into register
sw   $$locbase $r1 i587       ; store word
movi $r1 i4704                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12176               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12176               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i18592             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16928               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17512               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14096               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21532             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_52
movi $r0 i4720                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i4728                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i591       ; store word
sw   $$locbase $one i592      ; store word
movi $r0 i4744                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12192               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18464             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2219      ; store word
lw   $r0 $$locbase i2219      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_89; get local constant
load $r1 data_NonConfigurable_90; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i16928               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
addi $r4 $$locbase i392       ; get offset to local
mcpi $r4 $r3 i32              ; copy memory
movi $r3 i4760                ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i4928                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r3 i616       ; store word
sw   $$locbase $one i617      ; store word
movi $r3 i5056                ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
movi $r0 i16960               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r3 i16              ; copy memory
movi $r0 i5072                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i5104                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i638       ; store word
movi $r0 i26                  ; initialize constant into register
sw   $$locbase $r0 i639       ; store word
movi $r0 i5120                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12224               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i12224               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i18260             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16960               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14160               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i22048             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_57
movi $r0 i5136                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i5144                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i643       ; store word
sw   $$locbase $one i644      ; store word
movi $r0 i5160                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12240               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i18132             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2220      ; store word
lw   $r0 $$locbase i2220      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_89; get local constant
load $r1 data_NonConfigurable_91; get local constant
movi $r2 i16960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i424       ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i5208                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i16976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r0 i5216                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i48              ; copy memory
movi $r1 i5264                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i658       ; store word
movi $r0 i42                  ; initialize constant into register
sw   $$locbase $r0 i659       ; store word
movi $r0 i5280                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12256               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12256               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17964             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19104               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2184      ; store word
movi $r0 i19104               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2459     ; store word
movi $r0 i18536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r0 i2457      ; store word
lw   $r0 $$locbase i2457      ; load word
movi $r1 i8                   ; initialize constant into register
aloc $r1                      ; aloc size
move $r2 $hp                  ; move dest hp
mcp  $hp $r0 $r1              ; mcp dest src size
sw   $$locbase $r2 i2312      ; store word
movi $r0 i18496               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i1472      ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i984       ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r1 i15936               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i2184      ; load word
movi $r2 i14176               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
movi $$tmp i21620             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_57
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5296                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5304                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i663       ; store word
sw   $$locbase $one i664      ; store word
movi $r1 i5320                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12272               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17696             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2222      ; store word
lw   $r0 $$locbase i2222      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_89; get local constant
load $r1 data_NonConfigurable_92; get local constant
movi $r2 i16976               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i440       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i5336                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i5344                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i668       ; store word
sw   $$locbase $one i669      ; store word
movi $r2 i5376                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i5392                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r2 $r0 i16              ; get offset to aggregate element
sb   $r2 $zero i0             ; store byte
movi $r2 i16984               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
movi $r0 i5416                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i40              ; copy memory
movi $r1 i5456                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i682       ; store word
movi $r0 i33                  ; initialize constant into register
sw   $$locbase $r0 i683       ; store word
movi $r0 i5472                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12288               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12288               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17480             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i16984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19152               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
sw   $$locbase $r1 i2187      ; store word
addi $r0 $$locbase i1728      ; get offset to local
addi $r1 $$locbase i2456      ; get offset to local
sw   $$locbase $r0 i307       ; store word
sw   $$locbase $zero i308     ; store word
movi $r0 i4784                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14224               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14224               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11744               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
movi $$tmp i21412             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_tuple_62
addi $r0 $$locbase i1000      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17528               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19152               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i2321      ; store word
movi $r0 i19968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
lw   $r0 $$locbase i2321      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i21
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1344      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2192      ; get offset to local
sw   $$locbase $r1 i274       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i275       ; store word
movi $r1 i4552                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12304               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12304               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i17216             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i19968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2321      ; load word
movi $r2 i14192               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21008             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_57
lw   $r0 $$locbase i2321      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2321      ; load word
movi $r1 i16088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17560               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i17560               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19152               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i16              ; get offset to aggregate element
lb   $r1 $r1 i0               ; load byte
movi $r2 i11960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
movi $$tmp i21344             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call field_65
addi $r0 $$locbase i1008      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17568               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i21492             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_66
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5488                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5496                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i687       ; store word
sw   $$locbase $one i688      ; store word
movi $r1 i5512                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12320               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i16948             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2223      ; store word
lw   $r0 $$locbase i2223      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_94; get local constant
movi $r1 i16984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i448       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i5528                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $zero i0             ; store byte
mul  $r2 $one $one            ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i17008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i2               ; copy memory
movi $r1 i5552                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i5592                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i699       ; store word
movi $r1 i33                  ; initialize constant into register
sw   $$locbase $r1 i700       ; store word
movi $r1 i5608                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12336               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12336               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i16768             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
movi $r0 i17008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19176               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i2               ; copy memory
sw   $$locbase $r1 i2188      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21268             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1096      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2256    ; store word
movi $r0 i18048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18688               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2271      ; store word
lw   $r0 $$locbase i2336      ; load word
lw   $r1 $$locbase i2271      ; load word
lt   $r0 $r0 $r1
load $$tmp data_NonConfigurable_124; load far jump target address
jnzf $r0 $$tmp i0
movi $r0 i17536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i21492             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5624                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5632                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i704       ; store word
sw   $$locbase $one i705      ; store word
movi $r1 i5648                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12352               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12352               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i16516             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2224      ; store word
lw   $r0 $$locbase i2224      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_96; get local constant
movi $r1 i17008               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i472       ; get offset to local
mcpi $r2 $r1 i2               ; copy memory
movi $r1 i5664                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $zero i0             ; store byte
mul  $r2 $one $one            ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sb   $r2 $one i0              ; store byte
mul  $r2 $zero $one
add  $r1 $r1 $r2
movi $r2 i2                   ; initialize constant into register
sub  $r2 $r2 $zero
movi $r3 i5672                ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
sw   $$locbase $r1 i709       ; store word
sw   $$locbase $r2 i710       ; store word
addi $r1 $$locbase i1272      ; get offset to local
mcpi $r1 $r3 i16              ; copy memory
movi $r2 i17016               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i5696                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i5752                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i719       ; store word
movi $r1 i49                  ; initialize constant into register
sw   $$locbase $r1 i720       ; store word
movi $r1 i5768                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12368               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12384               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i4075         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17016               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i2189      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i20796             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1288      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17544               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2257    ; store word
movi $r0 i18056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19184               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i18792               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i18792               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i1296      ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i16256               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r1 i16256               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i16272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i16272               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i8         ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i16272               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i18096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
lw   $r1 $$locbase i2262      ; load word
movi $r2 i18912               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2286      ; store word
lw   $r0 $$locbase i2364      ; load word
lw   $r1 $$locbase i2286      ; load word
lt   $r0 $r0 $r1
load $$tmp data_NonConfigurable_125; load far jump target address
jnzf $r0 $$tmp i0
movi $r0 i17544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i20912             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i5784                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5792                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i724       ; store word
sw   $$locbase $one i725      ; store word
movi $r1 i5808                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3985         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2225      ; store word
lw   $r0 $$locbase i2225      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_97; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17016               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i480       ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i5824                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i5856                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i732       ; store word
movi $r2 i27                  ; initialize constant into register
sw   $$locbase $r2 i733       ; store word
movi $r2 i5888                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12416               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12416               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3949         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14320               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
movi $$tmp i20756             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_75
movi $r0 i5904                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i5912                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i739       ; store word
sw   $$locbase $one i740      ; store word
movi $r0 i5928                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12432               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12432               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3920         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2226      ; store word
lw   $r0 $$locbase i2226      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_98; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i5944                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $zero i743     ; store word
movi $r3 i17032               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i5960                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i5992                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i749       ; store word
movi $r2 i30                  ; initialize constant into register
sw   $$locbase $r2 i750       ; store word
movi $r2 i6008                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12448               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3882         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17032               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i14400               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20968             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_78
movi $r0 i6024                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i6048                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i756       ; store word
sw   $$locbase $one i757      ; store word
movi $r0 i6064                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12464               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12464               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3850         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2227      ; store word
lw   $r0 $$locbase i2227      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_99; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i17032               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i496       ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i6080                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $one i760      ; store word
movi $r3 i17048               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
movi $r2 i6096                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
movi $r0 i6136                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i767       ; store word
movi $r2 i36                  ; initialize constant into register
sw   $$locbase $r2 i768       ; store word
movi $r2 i6152                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i12480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12480               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3808         ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
movi $r0 i17048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i14416               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i20672             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_78
movi $r0 i6168                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i6176                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i772       ; store word
sw   $$locbase $one i773      ; store word
movi $r0 i6192                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12496               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3776         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2228      ; store word
lw   $r0 $$locbase i2228      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17048               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i512       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i16096               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1904      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i16128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_100; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i17064               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i6208                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i6264                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i783       ; store word
movi $r1 i52                  ; initialize constant into register
sw   $$locbase $r1 i784       ; store word
movi $r1 i6280                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12512               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12512               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3729         ; [call]: call print_str_1
movi $r0 i17064               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14432               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i20808             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_82
movi $r0 i6296                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i6304                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i788       ; store word
sw   $$locbase $one i789      ; store word
movi $r0 i6320                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3699         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2229      ; store word
lw   $r0 $$locbase i2229      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17064               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i528       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i16160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1936      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i16192               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_101; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i17104               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i6336                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i6424                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i803       ; store word
movi $r1 i53                  ; initialize constant into register
sw   $$locbase $r1 i804       ; store word
movi $r1 i6440                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12560               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3652         ; [call]: call print_str_1
movi $r0 i17104               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14496               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i21064             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_85
movi $r0 i6456                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i6464                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i808       ; store word
sw   $$locbase $one i809      ; store word
movi $r0 i6480                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12576               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3622         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2230      ; store word
lw   $r0 $$locbase i2230      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_102; get local constant
movi $r1 i17104               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i560       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i6496                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i812     ; store word
movi $r2 i17136               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i6504                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i80              ; copy memory
movi $r0 i6584                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i823       ; store word
movi $r1 i75                  ; initialize constant into register
sw   $$locbase $r1 i824       ; store word
movi $r1 i6600                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12592               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12592               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3584         ; [call]: call print_str_1
movi $r0 i17136               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19232               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2036      ; store word
movi $r0 i19232               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11584               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2296    ; store word
lw   $r0 $$locbase i2352      ; load word
lw   $r1 $$locbase i2296      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i34
movi $r0 i11584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2275     ; store word
lw   $r0 $$locbase i2365      ; load word
lw   $r1 $$locbase i2275      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_104; get local constant
movi $r1 i6856                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i9920                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1240      ; store word
movi $r1 i16                  ; initialize constant into register
sw   $$locbase $r1 i1241      ; store word
movi $r1 i10280               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12624               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3528         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_103; get local constant
addi $r1 $$locbase i1968      ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i2472      ; get offset to local
sw   $$locbase $r1 i309       ; store word
movi $r1 i30                  ; initialize constant into register
sw   $$locbase $r1 i310       ; store word
movi $r1 i4800                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12608               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3508         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i6648                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i6656                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i832       ; store word
sw   $$locbase $one i833      ; store word
movi $r1 i6696                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12640               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12640               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3488         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2231      ; store word
lw   $r0 $$locbase i2231      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i592       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i2000      ; get offset to local
movi $r2 i16224               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_12; get local constant
movi $r3 i32                  ; get array element size
mul  $r3 $zero $r3            ; get offset to array element
add  $r3 $r1 $r3              ; add array element offset to array base
mcpi $r3 $r2 i32              ; copy memory
movi $r2 i15440               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i32                  ; get array element size
mul  $r0 $one $r0             ; get offset to array element
add  $r0 $r1 $r0              ; add array element offset to array base
mcpi $r0 $r2 i32              ; copy memory
addi $r0 $$locbase i2488      ; get offset to local
mcpi $r0 $r1 i64              ; copy memory
movi $r1 i15472               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i64              ; copy memory
load $r0 data_NonConfigurable_4; get local constant
load $r2 data_NonConfigurable_5; get local constant
load $r3 data_NonConfigurable_6; get local constant
movi $r4 i17144               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r1 i64              ; copy memory
movi $r1 i6712                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i48              ; copy memory
movi $r0 i6760                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i845       ; store word
movi $r1 i46                  ; initialize constant into register
sw   $$locbase $r1 i846       ; store word
movi $r1 i6776                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r4 i12656               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
jal  $$reta $pc i3425         ; [call]: call print_str_1
movi $r0 i17144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r4 i19240               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i64              ; copy memory
sw   $$locbase $r1 i2037      ; store word
addi $r0 $$locbase i2064      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i2552      ; get offset to local
sw   $$locbase $r0 i319       ; store word
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i320       ; store word
movi $r0 i4816                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14320               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14336               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
movi $$tmp i18916             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
addi $r0 $$locbase i1320      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i9936                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1242      ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i1243      ; store word
movi $r1 i10296               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i19240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i19688               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
sw   $$locbase $r3 i2353      ; store word
movi $r0 i18112               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i19984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i64              ; copy memory
lw   $r0 $$locbase i2353      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1392      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2208      ; get offset to local
sw   $$locbase $r1 i276       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i277       ; store word
movi $r1 i4568                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12672               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3347         ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
movi $r1 i18112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12688               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i12688               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i3335         ; [call]: call print_str_1
movi $r1 i6672                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8992                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1124      ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1125      ; store word
movi $r1 i10216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12704               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12704               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3316         ; [call]: call print_str_1
movi $r0 i19984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2353      ; load word
movi $r2 i18576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i64              ; copy memory
sw   $$locbase $r1 i2190      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11992               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i17772             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1328      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17552               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2258    ; store word
movi $r0 i18064               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2300      ; store word
lw   $r0 $$locbase i2330      ; load word
lw   $r1 $$locbase i2300      ; load word
lt   $r0 $r0 $r1
jnzf $r0 $zero i3147
movi $r0 i17552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i18000             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
lw   $r0 $$locbase i2353      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2353      ; load word
movi $r1 i15544               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i18196             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i6792                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i6800                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i850       ; store word
sw   $$locbase $one i851      ; store word
movi $r1 i6816                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12752               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12752               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3244         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2233      ; store word
lw   $r0 $$locbase i2233      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_9; get local constant
movi $r1 i17144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i600       ; get offset to local
mcpi $r2 $r1 i64              ; copy memory
movi $r1 i6848                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i856     ; store word
movi $r2 i17208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i6976                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i72              ; copy memory
movi $r0 i7048                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i881       ; store word
movi $r1 i69                  ; initialize constant into register
sw   $$locbase $r1 i882       ; store word
movi $r1 i7064                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12768               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12768               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3206         ; [call]: call print_str_1
movi $r0 i17208               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19304               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2038      ; store word
movi $r0 i19304               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11592               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11592               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18832               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2303    ; store word
lw   $r0 $$locbase i2354      ; load word
lw   $r1 $$locbase i2303      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_10; get local constant
addi $r1 $$locbase i2072      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i2568      ; get offset to local
sw   $$locbase $r1 i321       ; store word
movi $r1 i18                  ; initialize constant into register
sw   $$locbase $r1 i322       ; store word
movi $r1 i4832                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12784               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12784               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3162         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7080                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7088                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i886       ; store word
sw   $$locbase $one i887      ; store word
movi $r1 i7104                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12800               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3142         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2234      ; store word
lw   $r0 $$locbase i2234      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i17208               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i664       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2177    ; store word
lw   $r0 $$locbase i2177      ; load word
aloc $r0                      ; aloc size
addi $r0 $$locbase i1400      ; get offset to local
sw   $$locbase $hp i175       ; store word
sw   $$locbase $zero i176     ; store word
movi $r1 i15552               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i1488      ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
sw   $$locbase $zero i188     ; store word
movi $r1 i15568               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
load $r0 data_NonConfigurable_11; get local constant
movi $r2 i17376               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $one              ; [call]: pass argument 1
movi $$tmp i19172             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call push_96
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
movi $r1 i2                   ; initialize constant into register
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i19140             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call push_96
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
movi $r1 i3                   ; initialize constant into register
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i19108             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call push_96
movi $r1 i17376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i17216               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i7120                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i144             ; copy memory
movi $r0 i7272                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i909       ; store word
movi $r1 i139                 ; initialize constant into register
sw   $$locbase $r1 i910       ; store word
movi $r1 i7288                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12816               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12816               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i3064         ; [call]: call print_str_1
movi $r0 i17216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19312               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
sw   $$locbase $r1 i2185      ; store word
movi $r0 i14320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11768               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i16760             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
addi $r0 $$locbase i1016      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i18088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19312               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18840               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i18840               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1512      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
sw   $$locbase $zero i192     ; store word
movi $r0 i15592               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i11536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
movi $r0 i11536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r0 i2367      ; store word
lw   $r0 $$locbase i2367      ; load word
lw   $r0 $r0 i3               ; load word
lw   $r1 $$locbase i2367      ; load word
lw   $r1 $r1 i2               ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i19256             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call ge_106
jnzf $$retv $zero i49
lw   $r0 $$locbase i2367      ; load word
addi $r0 $r0 i24              ; get offset to aggregate element
movi $r1 i18664               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2305     ; store word
lw   $r0 $$locbase i2333      ; load word
lw   $r1 $$locbase i2305      ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i2367      ; load word
sw   $r1 $r0 i3               ; store word
addi $r0 $$locbase i2584      ; get offset to local
sw   $$locbase $one i323      ; store word
lw   $r1 $$locbase i2367      ; load word
lw   $r2 $$locbase i2367      ; load word
addi $r2 $r2 i24              ; get offset to aggregate element
movi $r3 i18888               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i2279     ; store word
lw   $r2 $$locbase i2361      ; load word
lw   $r3 $$locbase i2279      ; load word
sub  $r2 $r2 $r3
movi $r3 i19048               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i24              ; copy memory
sw   $$locbase $r2 i2259      ; store word
movi $r1 i19048               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i18072               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i18648               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
movi $r1 i18160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i2331      ; load word
lw   $r2 $$locbase i2270      ; load word
add  $r1 $r1 $r2              ; add new ptr offset
sw   $$locbase $r1 i2362      ; store word
lw   $r1 $$locbase i2362      ; load word
lb   $r1 $r1 i0               ; lb r2 r1 i0
addi $r2 $r0 i15              ; get offset to aggregate element
sb   $r2 $r1 i0               ; store byte
movi $r1 i15624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
jmpf $zero i5
addi $r0 $$locbase i1416      ; get offset to local
sw   $$locbase $zero i177     ; store word
movi $r1 i15624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i11568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19112               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11712               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18696               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2287     ; store word
lw   $r0 $$locbase i2337      ; load word
lw   $r1 $$locbase i2287      ; load word
eq   $r0 $r0 $r1
move $r1 $zero                ; move parameter from branch to block argument
jnzf $r0 $zero i1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r1 $zero i53
movi $r0 i11568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19200               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19200               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11728               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2297     ; store word
lw   $r0 $$locbase i2351      ; load word
lw   $r1 $$locbase i2297      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i3
sw   $$locbase $zero i2176    ; store word
lw   $r0 $$locbase i2176      ; load word
rvrt $r0
movi $r0 i11728               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r0 $r0 i15              ; get offset to aggregate element
movi $r1 i19888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
movi $r0 i19888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r1 i17456               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sb   $r1 $r0 i0               ; store byte
movi $r0 i18088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17456               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lb   $r1 $r1 i0               ; load byte
movi $r2 i11792               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i4060         ; [call]: call entry_70
noop                          ; [call]: call entry_70
noop                          ; [call]: call entry_70
addi $r0 $$locbase i1024      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
jmpb $zero i144
movi $r0 i18088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i16388             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7304                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7312                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i914       ; store word
sw   $$locbase $one i915      ; store word
movi $r1 i7328                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12832               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12832               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2854         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2235      ; store word
lw   $r0 $$locbase i2235      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i672       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i15640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1568      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i15672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_13; get local constant
load $r2 data_NonConfigurable_2; get local constant
movi $r3 i17240               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i32              ; copy memory
movi $r1 i7344                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i64              ; copy memory
movi $r0 i7408                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i926       ; store word
movi $r1 i59                  ; initialize constant into register
sw   $$locbase $r1 i927       ; store word
movi $r1 i7424                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12848               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i12848               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i2807         ; [call]: call print_str_1
movi $r0 i17240               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r3 i14560               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i32              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i18464             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_113
movi $r0 i7440                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r1 i7464                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i933       ; store word
sw   $$locbase $one i934      ; store word
movi $r0 i7480                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i12864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i12864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2777         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2236      ; store word
lw   $r0 $$locbase i2236      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_14; get local constant
movi $r1 i17240               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i696       ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i7496                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $one i937      ; store word
movi $r2 i17272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i7504                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i72              ; copy memory
movi $r0 i7576                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i947       ; store word
movi $r1 i66                  ; initialize constant into register
sw   $$locbase $r1 i948       ; store word
movi $r1 i7592                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12880               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12880               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2739         ; [call]: call print_str_1
movi $r0 i17272               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19344               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2042      ; store word
movi $r0 i19344               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11600               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2306    ; store word
lw   $r0 $$locbase i2358      ; load word
lw   $r1 $$locbase i2306      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i34
movi $r0 i11600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18944               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2280     ; store word
lw   $r0 $$locbase i2368      ; load word
lw   $r1 $$locbase i2280      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_16; get local constant
movi $r1 i6880                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i9952                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1244      ; store word
movi $r1 i17                  ; initialize constant into register
sw   $$locbase $r1 i1245      ; store word
movi $r1 i10312               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12944               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12944               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2683         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_15; get local constant
addi $r1 $$locbase i1600      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i2600      ; get offset to local
sw   $$locbase $r1 i325       ; store word
movi $r1 i22                  ; initialize constant into register
sw   $$locbase $r1 i326       ; store word
movi $r1 i4848                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12928               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2663         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7608                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7616                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i952       ; store word
sw   $$locbase $one i953      ; store word
movi $r1 i7632                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12960               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2643         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2237      ; store word
lw   $r0 $$locbase i2237      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17272               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i728       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i7664                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i958     ; store word
movi $r2 i15736               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i1624      ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
movi $r2 i15768               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_18; get local constant
addi $r3 $r1 i8               ; get offset to aggregate element
mcpi $r3 $r2 i32              ; copy memory
movi $r2 i17280               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i40              ; copy memory
movi $r1 i7704                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i72              ; copy memory
movi $r0 i7776                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i972       ; store word
movi $r1 i72                  ; initialize constant into register
sw   $$locbase $r1 i973       ; store word
movi $r1 i7792                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12976               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12976               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2593         ; [call]: call print_str_1
movi $r0 i17280               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19352               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i40              ; copy memory
sw   $$locbase $r1 i2043      ; store word
movi $r0 i19352               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i11608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18872               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2307    ; store word
lw   $r0 $$locbase i2359      ; load word
lw   $r1 $$locbase i2307      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i99
movi $r0 i11608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19072               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2281     ; store word
lw   $r0 $$locbase i2384      ; load word
lw   $r1 $$locbase i2281      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_19; get local constant
movi $r1 i11608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i20112               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
movi $r1 i6904                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9968                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1246      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1247      ; store word
movi $r1 i10328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14256               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14256               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11760               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i3539         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1040      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i20112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19760               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r2 i2391      ; store word
movi $r0 i20144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
lw   $r0 $$locbase i2391      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1664      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2664      ; get offset to local
sw   $$locbase $r1 i333       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i334       ; store word
movi $r1 i4944                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13008               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2494         ; [call]: call print_str_1
movi $r0 i20144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2391      ; load word
movi $r2 i14592               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i17216             ; load call target address
add  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_113
lw   $r0 $$locbase i2391      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2391      ; load word
movi $r1 i15808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19800               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i3586         ; [call]: call finish_66
jmpf $zero i84
load $r0 data_NonConfigurable_19; get local constant
movi $r1 i11608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i19920               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i32              ; copy memory
addi $r1 $$locbase i1656      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2616      ; get offset to local
sw   $$locbase $r1 i327       ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i328       ; store word
movi $r1 i4864                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14240               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14240               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11752               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i3454         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1032      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19752               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r2 i2369      ; store word
movi $r0 i20080               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
lw   $r0 $$locbase i2369      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1432      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2224      ; get offset to local
sw   $$locbase $r1 i278       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i279       ; store word
movi $r1 i4584                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12992               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12992               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2409         ; [call]: call print_str_1
movi $r0 i20080               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2369      ; load word
movi $r2 i14464               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i3884         ; [call]: call fmt_82
noop                          ; [call]: call fmt_82
noop                          ; [call]: call fmt_82
lw   $r0 $$locbase i2369      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2369      ; load word
movi $r1 i15800               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i19704               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i3501         ; [call]: call finish_66
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7808                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7816                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i977       ; store word
sw   $$locbase $one i978      ; store word
movi $r1 i7832                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13024               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13024               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2367         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2238      ; store word
lw   $r0 $$locbase i2238      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_20; get local constant
movi $r1 i17280               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i736       ; get offset to local
mcpi $r2 $r1 i40              ; copy memory
movi $r1 i7848                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i981     ; store word
movi $r2 i17320               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i7856                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i48              ; copy memory
movi $r0 i7904                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i988       ; store word
movi $r1 i47                  ; initialize constant into register
sw   $$locbase $r1 i989       ; store word
movi $r1 i7920                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13040               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13040               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2329         ; [call]: call print_str_1
movi $r0 i17320               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19392               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2044      ; store word
movi $r0 i19392               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11648               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18880               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2308    ; store word
lw   $r0 $$locbase i2360      ; load word
lw   $r1 $$locbase i2308      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i67
movi $r0 i11648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18960               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2282     ; store word
lw   $r0 $$locbase i2370      ; load word
lw   $r1 $$locbase i2282      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i35
movi $r0 i11648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2288      ; store word
lw   $r0 $$locbase i2385      ; load word
lw   $r1 $$locbase i2288      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_23; get local constant
movi $r1 i10640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10840               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1355      ; store word
movi $r1 i7                   ; initialize constant into register
sw   $$locbase $r1 i1356      ; store word
movi $r1 i11112               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13088               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13104               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2262         ; [call]: call print_str_1
jmpf $zero i41
load $r0 data_NonConfigurable_22; get local constant
movi $r1 i6912                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9984                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1248      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1249      ; store word
movi $r1 i10344               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13072               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13072               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2240         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_21; get local constant
addi $r1 $$locbase i1672      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2632      ; get offset to local
sw   $$locbase $r1 i329       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i330       ; store word
movi $r1 i4880                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13056               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2220         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i7936                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i7944                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i993       ; store word
sw   $$locbase $one i994      ; store word
movi $r1 i7960                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13120               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13120               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2200         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2239      ; store word
lw   $r0 $$locbase i2239      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_12; get local constant
movi $r1 i17320               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i776       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i15816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i1680      ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
movi $r1 i15848               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
load $r0 data_NonConfigurable_24; get local constant
load $r2 data_NonConfigurable_25; get local constant
load $r3 data_NonConfigurable_26; get local constant
load $r4 data_NonConfigurable_27; get local constant
movi $r6 i7976                ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
sw   $$locbase $one i997      ; store word
addi $r7 $r6 i8               ; get offset to aggregate element
mcpi $r7 $r1 i32              ; copy memory
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1002      ; store word
movi $r1 i17328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r6 i48              ; copy memory
movi $r1 i8024                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i136             ; copy memory
movi $r0 i8160                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1020      ; store word
movi $r1 i130                 ; initialize constant into register
sw   $$locbase $r1 i1021      ; store word
movi $r1 i8208                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13136               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r6 i13136               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r6               ; [call]: pass argument 1
jal  $$reta $pc i2142         ; [call]: call print_str_1
movi $r0 i17328               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r6 i19400               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r0 i48              ; copy memory
sw   $$locbase $r1 i2045      ; store word
addi $r0 $$locbase i1712      ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r1 $$locbase i2680      ; get offset to local
sw   $$locbase $r0 i335       ; store word
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i336       ; store word
movi $r0 i4896                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14352               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14352               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11808               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i3447         ; [call]: call debug_struct_77
addi $r0 $$locbase i1048      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6920                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i10000               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1250      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1251      ; store word
movi $r1 i10360               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
lw   $r2 $$locbase i2425      ; load word
movi $r3 i19824               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i14624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i11832               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r1               ; [call]: pass argument 3
jal  $$reta $pc i3970         ; [call]: call field_120
noop                          ; [call]: call field_120
noop                          ; [call]: call field_120
addi $r0 $$locbase i1056      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i10648               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r4 i8               ; copy memory
movi $r2 i10856               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1357      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1358      ; store word
movi $r1 i11128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i19400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r2 $r2 i8               ; get offset to aggregate element
movi $r3 i19712               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
sw   $$locbase $r3 i2338      ; store word
movi $r0 i18128               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i20176               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
lw   $r0 $$locbase i2338      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1440      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i3032      ; get offset to local
sw   $$locbase $r1 i379       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i380       ; store word
movi $r1 i4600                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13152               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13152               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2036         ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
movi $r1 i18128               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13168               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i13168               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i2024         ; [call]: call print_str_1
movi $r1 i6680                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9008                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1126      ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1127      ; store word
movi $r1 i10232               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13184               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13184               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2005         ; [call]: call print_str_1
movi $r0 i20176               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2338      ; load word
movi $r2 i14528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i3621         ; [call]: call fmt_85
lw   $r0 $$locbase i2338      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2338      ; load word
movi $r1 i15880               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_28; get local constant
movi $r2 i11368               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i2240      ; get offset to local
sw   $$locbase $r2 i280       ; store word
movi $r2 i3                   ; initialize constant into register
sw   $$locbase $r2 i281       ; store word
addi $r2 $$locbase i2696      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
lw   $r0 $$locbase i2430      ; load word
movi $r3 i19768               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
movi $r1 i14640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i11840               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
move $$arg3 $r2               ; [call]: pass argument 3
jal  $$reta $pc i3848         ; [call]: call field_120
noop                          ; [call]: call field_120
noop                          ; [call]: call field_120
addi $r0 $$locbase i1064      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19808               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i3240         ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8224                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8232                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1029      ; store word
sw   $$locbase $one i1030     ; store word
movi $r1 i8248                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13200               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13200               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1936         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2240      ; store word
lw   $r0 $$locbase i2240      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_30; get local constant
movi $r1 i17328               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i784       ; get offset to local
mcpi $r2 $r1 i48              ; copy memory
movi $r1 i8264                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $one i1033     ; store word
addi $r2 $r1 i15              ; get offset to aggregate element
sb   $r2 $one i0              ; store byte
movi $r2 i16408               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8280                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i8336                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1042      ; store word
movi $r1 i53                  ; initialize constant into register
sw   $$locbase $r1 i1043      ; store word
movi $r1 i8352                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13216               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1896         ; [call]: call print_str_1
movi $r0 i16408               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17528               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19448               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i2046      ; store word
movi $r0 i19448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18712               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2309    ; store word
lw   $r0 $$locbase i2339      ; load word
lw   $r1 $$locbase i2309      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i64
movi $r0 i11656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18968               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2283     ; store word
lw   $r0 $$locbase i2371      ; load word
lw   $r1 $$locbase i2283      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_32; get local constant
movi $r1 i11656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i15              ; get offset to aggregate element
movi $r2 i19952               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i1               ; copy memory
movi $r1 i6928                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10016               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1252      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1253      ; store word
movi $r1 i10376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14272               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14272               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11848               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i2842         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1072      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19952               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lb   $r1 $r1 i0               ; load byte
movi $r2 i19832               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i11968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i2883         ; [call]: call field_65
addi $r0 $$locbase i1080      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2924         ; [call]: call finish_66
jmpf $zero i19
load $r0 data_NonConfigurable_31; get local constant
addi $r1 $$locbase i1728      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2712      ; get offset to local
sw   $$locbase $r1 i339       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i340       ; store word
movi $r1 i4912                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13232               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13232               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1790         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8368                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8392                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1049      ; store word
sw   $$locbase $one i1050     ; store word
movi $r1 i8408                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13248               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13248               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1770         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2241      ; store word
lw   $r0 $$locbase i2241      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_33; get local constant
movi $r1 i16408               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i832       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8424                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i1053    ; store word
movi $r2 i16424               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i8432                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i8488                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1061      ; store word
movi $r1 i49                  ; initialize constant into register
sw   $$locbase $r1 i1062      ; store word
movi $r1 i8504                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13264               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13280               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1732         ; [call]: call print_str_1
movi $r0 i16424               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19464               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2047      ; store word
movi $r0 i19464               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2289    ; store word
lw   $r0 $$locbase i2340      ; load word
lw   $r1 $$locbase i2289      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i128
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18976               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2284     ; store word
lw   $r0 $$locbase i2372      ; load word
lw   $r1 $$locbase i2284      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i96
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19088               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2290      ; store word
lw   $r0 $$locbase i2386      ; load word
lw   $r1 $$locbase i2290      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i63
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19136               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i3                   ; initialize constant into register
sw   $$locbase $r0 i2298      ; store word
lw   $r0 $$locbase i2392      ; load word
lw   $r1 $$locbase i2298      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i32
movi $r0 i11672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19216               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i2301      ; store word
lw   $r0 $$locbase i2402      ; load word
lw   $r1 $$locbase i2301      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_36; get local constant
addi $r1 $$locbase i3048      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i3240      ; get offset to local
sw   $$locbase $r1 i405       ; store word
movi $r1 i15                  ; initialize constant into register
sw   $$locbase $r1 i406       ; store word
addi $r1 $$locbase i3424      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13360               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13360               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1646         ; [call]: call print_str_1
jmpf $zero i83
load $r0 data_NonConfigurable_35; get local constant
movi $r1 i11376               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2256      ; get offset to local
sw   $$locbase $r1 i282       ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i283       ; store word
addi $r1 $$locbase i2744      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13344               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13344               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1626         ; [call]: call print_str_1
jmpf $zero i63
load $r0 data_NonConfigurable_34; get local constant
movi $r1 i10656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10872               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1359      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1360      ; store word
movi $r1 i11144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13328               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13328               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1604         ; [call]: call print_str_1
jmpf $zero i41
load $r0 data_NonConfigurable_22; get local constant
movi $r1 i6936                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10032               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1254      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1255      ; store word
movi $r1 i10392               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13312               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13312               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1582         ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_21; get local constant
addi $r1 $$locbase i1736      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2728      ; get offset to local
sw   $$locbase $r1 i341       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i342       ; store word
movi $r1 i4960                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13296               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13296               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1562         ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8520                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8528                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1066      ; store word
sw   $$locbase $one i1067     ; store word
movi $r1 i8544                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13376               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13376               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1542         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2242      ; store word
lw   $r0 $$locbase i2242      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16424               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i848       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i1744      ; get offset to local
sw   $$locbase $zero i218     ; store word
sw   $$locbase $one i219      ; store word
movi $r1 i15888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
load $r0 data_NonConfigurable_37; get local constant
movi $r2 i16432               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8576                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
movi $r0 i8608                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1076      ; store word
movi $r1 i26                  ; initialize constant into register
sw   $$locbase $r1 i1077      ; store word
movi $r1 i8624                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13392               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13392               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1501         ; [call]: call print_str_1
movi $r0 i16432               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19472               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i2048      ; store word
movi $r0 i19472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i11680               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2291    ; store word
lw   $r0 $$locbase i2341      ; load word
lw   $r1 $$locbase i2291      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i62
movi $r0 i11680               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18984               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2285     ; store word
lw   $r0 $$locbase i2373      ; load word
lw   $r1 $$locbase i2285      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_38; get local constant
movi $r1 i11680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i20208               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i6944                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1256      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1257      ; store word
movi $r1 i10408               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14304               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14304               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11952               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i2447         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1112      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
lw   $r1 $$locbase i2526      ; load word
movi $r2 i19776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i11888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i3384         ; [call]: call field_126
addi $r0 $$locbase i1120      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19816               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2531         ; [call]: call finish_66
jmpf $zero i47
load $r0 data_NonConfigurable_38; get local constant
movi $r1 i11680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
movi $r2 i19960               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i1760      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2760      ; get offset to local
sw   $$locbase $r1 i345       ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i346       ; store word
movi $r1 i4976                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14288               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i14288               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i11944               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i2399         ; [call]: call debug_tuple_62
addi $r0 $$locbase i1088      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
lw   $r1 $$locbase i2495      ; load word
movi $r2 i19840               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i11880               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i3336         ; [call]: call field_126
addi $r0 $$locbase i1104      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i2483         ; [call]: call finish_66
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8640                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8648                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1081      ; store word
sw   $$locbase $one i1082     ; store word
movi $r1 i8664                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13408               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13408               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1349         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2244      ; store word
lw   $r0 $$locbase i2244      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_39; get local constant
movi $r1 i16432               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i856       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i8680                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8688                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1086      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1087      ; store word
movi $r1 i8704                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i18544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i18544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i13888               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1383         ; [call]: call len_4
sw   $$locbase $$retv i2460   ; store word
movi $r0 i18544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i13872               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1355         ; [call]: call as_ptr_3
sw   $$locbase $$retv i2458   ; store word
movi $r0 i19664               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19680               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i18512               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i17424               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i18512               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17424               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
sw   $$locbase $one i2292     ; store word
lw   $r1 $$locbase i2436      ; load word
lw   $r2 $$locbase i2292      ; load word
mul  $r1 $r1 $r2
addi $r2 $$locbase i1448      ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i182       ; store word
movi $r0 i18480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r0 i18480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1128      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i15904               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i15920               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i19608               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19624               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i14720               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i3261         ; [call]: call number_of_bytes_130
sw   $$locbase $$retv i2175   ; store word
movi $r0 i17400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17432               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i2179      ; load word
aloc $r0                      ; aloc size
sw   $$locbase $hp i2313      ; store word
movi $r0 i17400               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18736               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2276    ; store word
lw   $r0 $$locbase i2342      ; load word
lw   $r1 $$locbase i2276      ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i45
movi $r0 i19624               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i18672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19640               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i19640               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1144      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i15952               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
addi $r1 $$locbase i1360      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i170       ; load word
movi $r1 i18504               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i17400               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r0 i2374      ; store word
movi $r0 i17448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i17440               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
movi $r0 i17440               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18656               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2274     ; store word
lw   $r0 $$locbase i2332      ; load word
lw   $r1 $$locbase i2274      ; load word
mul  $r0 $r0 $r1
sw   $$locbase $r0 i2263      ; store word
lw   $r0 $$locbase i2181      ; load word
lw   $r1 $$locbase i2374      ; load word
lw   $r2 $$locbase i2263      ; load word
mcp  $r0 $r1 $r2              ; mcp dst src len
movi $r0 i18504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17400               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i1376      ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i15968               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r1 i19608               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14736               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
jal  $$reta $pc i3178         ; [call]: call number_of_bytes_130
move $r1 $$retv               ; [call]: copy the return value
addi $r2 $$locbase i1544      ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
sw   $$locbase $r1 i195       ; store word
movi $r0 i15984               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
addi $r1 $$locbase i1768      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i16008               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
load $r1 data_NonConfigurable_40; get local constant
movi $r2 i16448               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
movi $r0 i8728                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i72              ; copy memory
movi $r1 i8800                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1100      ; store word
movi $r0 i67                  ; initialize constant into register
sw   $$locbase $r0 i1101      ; store word
movi $r0 i8816                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13424               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13424               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1135         ; [call]: call print_str_1
movi $r0 i16448               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
sw   $$locbase $r1 i2186      ; store word
movi $r0 i19496               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18744               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
lw   $r0 $$locbase i2343      ; load word
movi $r1 i19496               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19000               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
lw   $r1 $$locbase i2377      ; load word
addi $r2 $$locbase i1792      ; get offset to local
sw   $$locbase $r0 i224       ; store word
sw   $$locbase $r1 i225       ; store word
addi $r0 $$locbase i1160      ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
movi $r1 i18520               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i14224               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i2087         ; [call]: call print_string_quotes_58
movi $r0 i18520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i13440               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13456               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1093         ; [call]: call print_str_1
movi $r0 i14224               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i2073         ; [call]: call print_string_quotes_58
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i8832                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i8840                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1105      ; store word
sw   $$locbase $one i1106     ; store word
movi $r1 i8856                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13472               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1069         ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2245      ; store word
lw   $r0 $$locbase i2245      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_41; get local constant
movi $r1 i16448               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i872       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
movi $r1 i8872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i1109    ; store word
movi $r2 i16472               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i8880                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i56              ; copy memory
movi $r0 i8960                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1120      ; store word
movi $r1 i51                  ; initialize constant into register
sw   $$locbase $r1 i1121      ; store word
movi $r1 i8976                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13488               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i1031         ; [call]: call print_str_1
movi $r0 i16472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2049      ; store word
movi $r0 i19520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11696               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18768               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2293    ; store word
lw   $r0 $$locbase i2346      ; load word
lw   $r1 $$locbase i2293      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i158
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19024               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2277     ; store word
lw   $r0 $$locbase i2378      ; load word
lw   $r1 $$locbase i2277      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i126
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19096               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i2                   ; initialize constant into register
sw   $$locbase $r0 i2294      ; store word
lw   $r0 $$locbase i2387      ; load word
lw   $r1 $$locbase i2294      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i93
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i3                   ; initialize constant into register
sw   $$locbase $r0 i2299      ; store word
lw   $r0 $$locbase i2393      ; load word
lw   $r1 $$locbase i2299      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i62
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19224               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i2302      ; store word
lw   $r0 $$locbase i2403      ; load word
lw   $r1 $$locbase i2302      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i32
movi $r0 i11696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19336               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i5                   ; initialize constant into register
sw   $$locbase $r0 i2304      ; store word
lw   $r0 $$locbase i2417      ; load word
lw   $r1 $$locbase i2304      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_48; get local constant
addi $r1 $$locbase i3632      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i3800      ; get offset to local
sw   $$locbase $r1 i475       ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i476       ; store word
addi $r1 $$locbase i4008      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13584               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13584               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i934          ; [call]: call print_str_1
jmpf $zero i102
load $r0 data_NonConfigurable_47; get local constant
addi $r1 $$locbase i3064      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i3256      ; get offset to local
sw   $$locbase $r1 i407       ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i408       ; store word
addi $r1 $$locbase i3440      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13568               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13568               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i915          ; [call]: call print_str_1
jmpf $zero i83
load $r0 data_NonConfigurable_46; get local constant
movi $r1 i11384               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2272      ; get offset to local
sw   $$locbase $r1 i284       ; store word
movi $r1 i7                   ; initialize constant into register
sw   $$locbase $r1 i285       ; store word
addi $r1 $$locbase i2792      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13552               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i895          ; [call]: call print_str_1
jmpf $zero i63
load $r0 data_NonConfigurable_45; get local constant
movi $r1 i10664               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10888               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1361      ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i1362      ; store word
movi $r1 i11160               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13536               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i873          ; [call]: call print_str_1
jmpf $zero i41
load $r0 data_NonConfigurable_44; get local constant
movi $r1 i6952                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10080               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1260      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1261      ; store word
movi $r1 i10424               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13520               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13520               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i851          ; [call]: call print_str_1
jmpf $zero i19
load $r0 data_NonConfigurable_42; get local constant
addi $r1 $$locbase i1808      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2776      ; get offset to local
sw   $$locbase $r1 i347       ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i348       ; store word
movi $r1 i4992                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13504               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i831          ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9040                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9048                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1131      ; store word
sw   $$locbase $one i1132     ; store word
movi $r1 i9064                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13600               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13600               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i811          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2246      ; store word
lw   $r0 $$locbase i2246      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16472               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i896       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i1816      ; get offset to local
sw   $$locbase $zero i227     ; store word
sw   $$locbase $zero i228     ; store word
movi $r1 i16032               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
load $r0 data_NonConfigurable_49; get local constant
load $r2 data_NonConfigurable_50; get local constant
load $r3 data_NonConfigurable_51; get local constant
load $r4 data_NonConfigurable_52; get local constant
movi $r6 i16480               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r1 i16              ; copy memory
movi $r1 i9080                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i48              ; copy memory
movi $r0 i9128                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1141      ; store word
movi $r1 i46                  ; initialize constant into register
sw   $$locbase $r1 i1142      ; store word
movi $r1 i9144                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13616               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r6 i13632               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r6               ; [call]: pass argument 1
jal  $$reta $pc i764          ; [call]: call print_str_1
movi $r0 i16480               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r6 i19528               ; get offset to local
add  $r6 $$locbase $r6        ; get offset to local
mcpi $r6 $r0 i16              ; copy memory
sw   $$locbase $r1 i2039      ; store word
addi $r0 $$locbase i1832      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i2808      ; get offset to local
sw   $$locbase $r0 i351       ; store word
movi $r0 i4                   ; initialize constant into register
sw   $$locbase $r0 i352       ; store word
movi $r0 i5008                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14368               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14368               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11816               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i2069         ; [call]: call debug_struct_77
addi $r0 $$locbase i1176      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6960                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i10096               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1262      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1263      ; store word
movi $r1 i10456               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
lw   $r2 $$locbase i2441      ; load word
movi $r3 i19848               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i14656               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i11856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r1               ; [call]: pass argument 3
jal  $$reta $pc i2592         ; [call]: call field_120
addi $r0 $$locbase i1184      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i10672               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r4 i8               ; copy memory
movi $r2 i10904               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1363      ; store word
movi $r1 i5                   ; initialize constant into register
sw   $$locbase $r1 i1364      ; store word
movi $r1 i11176               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
lw   $r2 $$locbase i2442      ; load word
movi $r3 i19736               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
movi $r0 i14672               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i11864               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r1               ; [call]: pass argument 3
jal  $$reta $pc i2565         ; [call]: call field_120
addi $r0 $$locbase i1192      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19784               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1959         ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9160                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9184                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1148      ; store word
sw   $$locbase $one i1149     ; store word
movi $r1 i9200                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13648               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13648               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i655          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2247      ; store word
lw   $r0 $$locbase i2247      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_53; get local constant
movi $r1 i16480               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
addi $r2 $$locbase i904       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
movi $r1 i9216                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $zero i1152    ; store word
movi $r2 i16496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
movi $r1 i9224                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i64              ; copy memory
movi $r0 i9288                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1161      ; store word
movi $r1 i61                  ; initialize constant into register
sw   $$locbase $r1 i1162      ; store word
movi $r1 i9304                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13664               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13664               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i617          ; [call]: call print_str_1
movi $r0 i16496               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i19544               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
sw   $$locbase $r1 i2040      ; store word
movi $r0 i19544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i11704               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i11704               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18776               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i2295    ; store word
lw   $r0 $$locbase i2347      ; load word
lw   $r1 $$locbase i2295      ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_54; get local constant
addi $r1 $$locbase i1840      ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i2824      ; get offset to local
sw   $$locbase $r1 i353       ; store word
movi $r1 i15                  ; initialize constant into register
sw   $$locbase $r1 i354       ; store word
movi $r1 i5024                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13680               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13680               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i573          ; [call]: call print_str_1
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9320                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9328                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1166      ; store word
sw   $$locbase $one i1167     ; store word
movi $r1 i9344                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13696               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13696               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i553          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2248      ; store word
lw   $r0 $$locbase i2248      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_55; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16496               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i920       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
movi $r2 i11896               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
jal  $$reta $pc i2561         ; [call]: call new_143
addi $r2 $$locbase i1200      ; get offset to local
mcpi $r2 $$retv i24           ; copy memory
movi $r3 i19864               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i24              ; copy memory
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $one              ; [call]: pass argument 1
jal  $$reta $pc i2591         ; [call]: call push_146
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
movi $r2 i2                   ; initialize constant into register
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2585         ; [call]: call push_146
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
movi $r2 i3                   ; initialize constant into register
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2579         ; [call]: call push_146
movi $r2 i19864               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i16504               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i24              ; copy memory
movi $r2 i9360                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i128             ; copy memory
movi $r0 i9488                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1186      ; store word
movi $r2 i125                 ; initialize constant into register
sw   $$locbase $r2 i1187      ; store word
movi $r2 i9504                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13712               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13712               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i488          ; [call]: call print_str_1
movi $r0 i16504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i17488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i14752               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i24              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i2686         ; [call]: call fmt_152
movi $r0 i9520                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i9528                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1191      ; store word
sw   $$locbase $one i1192     ; store word
movi $r0 i9544                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13728               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13728               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i460          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2249      ; store word
lw   $r0 $$locbase i2249      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
movi $r0 i16504               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i928       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i11920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i2472         ; [call]: call new_143
addi $r0 $$locbase i1232      ; get offset to local
mcpi $r0 $$retv i24           ; copy memory
movi $r1 i19896               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $one              ; [call]: pass argument 1
jal  $$reta $pc i2502         ; [call]: call push_146
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i2                   ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i2496         ; [call]: call push_146
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i3                   ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i2490         ; [call]: call push_146
movi $r0 i19896               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19552               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
movi $r0 i19552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
addi $r1 $$locbase i1864      ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
sw   $$locbase $zero i236     ; store word
movi $r0 i16048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
load $r1 data_NonConfigurable_56; get local constant
load $r2 data_NonConfigurable_57; get local constant
load $r3 data_NonConfigurable_58; get local constant
movi $r4 i16528               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
movi $r0 i9560                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i136             ; copy memory
movi $r1 i9696                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1212      ; store word
movi $r0 i132                 ; initialize constant into register
sw   $$locbase $r0 i1213      ; store word
movi $r0 i9744                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13744               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r4 i13744               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
jal  $$reta $pc i382          ; [call]: call print_str_1
movi $r0 i16528               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i17488               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r4 i19576               ; get offset to local
add  $r4 $$locbase $r4        ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
sw   $$locbase $r1 i2041      ; store word
addi $r0 $$locbase i1896      ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
addi $r1 $$locbase i2840      ; get offset to local
sw   $$locbase $r0 i355       ; store word
movi $r0 i7                   ; initialize constant into register
sw   $$locbase $r0 i356       ; store word
movi $r0 i5040                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i14384               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i14384               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i11824               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
jal  $$reta $pc i1687         ; [call]: call debug_struct_77
addi $r0 $$locbase i1256      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i6968                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r3 i8               ; copy memory
movi $r2 i10112               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
sw   $$locbase $r1 i1264      ; store word
movi $r1 i6                   ; initialize constant into register
sw   $$locbase $r1 i1265      ; store word
movi $r1 i10472               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i19576               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i19856               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
sw   $$locbase $r3 i2348      ; store word
movi $r0 i18144               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r0 i20216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
lw   $r0 $$locbase i2348      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1464      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2288      ; get offset to local
sw   $$locbase $r1 i286       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i287       ; store word
movi $r1 i4616                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13760               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13760               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i306          ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
movi $r1 i18144               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
movi $r3 i13776               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i294          ; [call]: call print_str_1
movi $r1 i6688                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9024                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1128      ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i1129      ; store word
movi $r1 i10248               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13792               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13808               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i275          ; [call]: call print_str_1
movi $r0 i20216               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2348      ; load word
movi $r2 i14776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i24              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i2474         ; [call]: call fmt_152
lw   $r0 $$locbase i2348      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2348      ; load word
movi $r1 i16080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
load $r0 data_NonConfigurable_60; get local constant
movi $r2 i10680               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
movi $r0 i10920               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1365      ; store word
movi $r2 i5                   ; initialize constant into register
sw   $$locbase $r2 i1366      ; store word
movi $r2 i11192               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
lw   $r0 $$locbase i2450      ; load word
movi $r3 i19744               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r1 i8               ; copy memory
movi $r1 i14688               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
movi $r2 i11872               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r0               ; [call]: pass argument 2
move $$arg3 $r2               ; [call]: pass argument 3
jal  $$reta $pc i2116         ; [call]: call field_120
addi $r0 $$locbase i1264      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i19792               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i1510         ; [call]: call finish_76
load $r0 data_NonConfigurable_2; get local constant
movi $r1 i9760                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i9768                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r1 i1221      ; store word
sw   $$locbase $one i1222     ; store word
movi $r1 i9784                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i13824               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i13824               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i206          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2250      ; store word
lw   $r0 $$locbase i2250      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
load $r0 data_NonConfigurable_61; get local constant
load $r1 data_NonConfigurable_2; get local constant
movi $r2 i16528               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
addi $r3 $$locbase i952       ; get offset to local
mcpi $r3 $r2 i32              ; copy memory
movi $r2 i11                  ; initialize constant into register
sw   $$locbase $r2 i2070      ; store word
movi $r2 i9800                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
movi $r0 i9832                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
sw   $$locbase $r2 i1229      ; store word
movi $r2 i28                  ; initialize constant into register
sw   $$locbase $r2 i1230      ; store word
movi $r2 i9848                ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
movi $r0 i13840               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r3 i13840               ; get offset to local
add  $r3 $$locbase $r3        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i170          ; [call]: call print_str_1
lw   $r0 $$locbase i2070      ; load word
movi $r2 i17488               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i670          ; [call]: call fmt_38
movi $r0 i9864                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r1 i9872                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
sw   $$locbase $r0 i1234      ; store word
sw   $$locbase $one i1235     ; store word
movi $r0 i9904                ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
movi $r1 i13856               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
movi $r2 i13856               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i146          ; [call]: call print_str_1
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
sw   $$locbase $r0 i2251      ; store word
lw   $r0 $$locbase i2251      ; load word
movi $r1 i1001                ; initialize constant into register
ecal $r1 $r0 $zero $zero      ; ecal id fd zero zero
lw   $r0 $$locbase i2070      ; load word
move $$retv $r0               ; set return value
jmpf $zero i130
movi $r0 i17552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18576               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lw   $r2 $$locbase i2258      ; load word
movi $r3 i32                  ; get array element size
mul  $r2 $r2 $r3              ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
sw   $$locbase $r0 i2366      ; store word
movi $r0 i20048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
lw   $r0 $$locbase i2366      ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i19
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i1352      ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i2160      ; get offset to local
sw   $$locbase $r1 i270       ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i271       ; store word
movi $r1 i4520                ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
movi $r0 i12720               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r2 i12736               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i101          ; [call]: call print_str_1
movi $r0 i20048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
lw   $r1 $$locbase i2366      ; load word
movi $r2 i14128               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i839          ; [call]: call fmt_52
lw   $r0 $$locbase i2366      ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i2366      ; load word
movi $r1 i15536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i17552               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i18064               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19040               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2278     ; store word
lw   $r0 $$locbase i2380      ; load word
lw   $r1 $$locbase i2278      ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i2258      ; store word
jmpb $zero i3220
lw   $r0 $$locbase i2398
lw   $r1 $$locbase i2257      ; load word
mul  $r1 $r1 $one
add  $r0 $r0 $r1
sw   $$locbase $r0 i232       ; store word
lw   $r0 $$locbase i232       ; load word
movi $r1 i18080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
movi $r0 i17544               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18080               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lb   $r1 $r1 i0               ; load byte
movi $r2 i11784               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i1225         ; [call]: call entry_70
addi $r0 $$locbase i1312      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17544               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i18056               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19032               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2273     ; store word
lw   $r0 $$locbase i2379      ; load word
lw   $r1 $$locbase i2273      ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i2257      ; store word
jmpb $zero i4012
movi $r0 i17536               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i19176               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
lw   $r2 $$locbase i2256      ; load word
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $r1 $r2              ; add array element offset to array base
lb   $r1 $r2 i0               ; load byte
movi $r2 i11776               ; get offset to local
add  $r2 $$locbase $r2        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i1195         ; [call]: call entry_70
addi $r0 $$locbase i1224      ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
movi $r1 i17536               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i18048               ; get offset to local
add  $r0 $$locbase $r0        ; get offset to local
movi $r1 i18904               ; get offset to local
add  $r1 $$locbase $r1        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i2272     ; store word
lw   $r0 $$locbase i2363      ; load word
lw   $r1 $$locbase i2272      ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i2256      ; store word
jmpb $zero i4160
cfsi i20240                   ; free 20240 bytes for locals and 0 slots for extra call arguments
move $$reta $r5               ; restore return address
poph i524288                  ; restore registers 40..64
popl i255                     ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function print_str_1
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (s)
move $r1 $$reta               ; save return address
addr $r2 data_NonConfigurable_105; get constant's address in data section
lw   $r2 $r2 i0               ; load word
mcpi $$locbase $$arg1 i16     ; copy memory
move $$arg0 $$locbase         ; [call]: pass argument 0
jal  $$reta $pc i37           ; [call]: call as_ptr_3
move $r3 $$retv               ; [call]: copy the return value
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
jal  $$reta $pc i52           ; [call]: call len_4
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
move $$arg2 $$retv            ; [call]: pass argument 2
jal  $$reta $pc i7            ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function syscall_write_2
cfei i24                      ; allocate 24 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (buf)
move $r1 $$arg2               ; save argument 2 (count)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i2      ; store word
sw   $$locbase $r0 i0         ; store word
sw   $$locbase $r1 i1         ; store word
lw   $r0 $$locbase i2         ; load word
lw   $r1 $$locbase i0         ; load word
lw   $r3 $$locbase i1         ; load word
movi $r4 i1000                ; initialize constant into register
ecal $r4 $r0 $r1 $r3          ; ecal id fd buf count
move $$retv $zero             ; set return value
cfsi i24                      ; free 24 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function as_ptr_3
cfei i56                      ; allocate 56 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $$arg0 i16           ; copy memory
addi $r1 $$locbase i40        ; get offset to local
mcpi $$locbase $r1 i16        ; copy memory
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $$locbase i8         ; copy memory
lw   $r1 $$locbase i0         ; load word
move $$retv $r1               ; set return value
cfsi i56                      ; free 56 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function len_4
cfei i56                      ; allocate 56 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $$arg0 i16           ; copy memory
addi $r1 $$locbase i40        ; get offset to local
mcpi $$locbase $r1 i16        ; copy memory
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
addi $r2 $$locbase i8         ; get offset to aggregate element
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i1         ; load word
move $$retv $r1               ; set return value
cfsi i56                      ; free 56 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_8
cfei i128                     ; allocate 128 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i120       ; get offset to local
sb   $r2 $$arg0 i0            ; store byte
sw   $$locbase $r0 i14        ; store word
addi $r0 $$locbase i120       ; get offset to local
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i18
load $r0 data_NonConfigurable_110; get local constant
addi $r2 $$locbase i40        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $r2 i6         ; store word
movi $r2 i5                   ; initialize constant into register
sw   $$locbase $r2 i7         ; store word
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
addi $r0 $$locbase i96        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
subi $$tmp $pc i464           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
jmpf $zero i16
load $r0 data_NonConfigurable_109; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i2         ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r0 i16              ; copy memory
addi $r0 $$locbase i80        ; get offset to local
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
subi $$tmp $pc i532           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i128                     ; free 128 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_10
cfei i256                     ; allocate 256 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
addi $r1 $$locbase i192       ; get offset to local
sb   $r1 $$arg0 i0            ; store byte
sw   $$locbase $r0 i17        ; store word
addi $r0 $$locbase i192       ; get offset to local
addi $r1 $$locbase i248       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i72        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i248       ; get offset to local
addi $r1 $$locbase i200       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r1 $$locbase i152       ; get offset to local
movi $r2 i10                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i152       ; get offset to local
lb   $r1 $r1 i0               ; load byte
mod  $r0 $r0 $r1
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i68           ; [call]: call add_12
addi $r0 $$locbase i72        ; get offset to local
lw   $r1 $$locbase i18        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i248       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r1 $$locbase i160       ; get offset to local
movi $r2 i10                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i160       ; get offset to local
lb   $r1 $r1 i0               ; load byte
div  $r0 $r0 $r1
addi $r1 $$locbase i248       ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i248       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r1 $$locbase i168       ; get offset to local
sb   $r1 $zero i0             ; store byte
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i168       ; get offset to local
lb   $r1 $r1 i0               ; load byte
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i144       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i22       ; store word
lw   $r0 $$locbase i18        ; load word
lw   $r1 $$locbase i22        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i18        ; store word
jmpb $zero i48
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i72        ; get offset to local
addi $r2 $$locbase i144       ; get offset to local
sw   $$locbase $r1 i29        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i29        ; load word
lw   $r2 $$locbase i18        ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i144       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i30        ; store word
addi $r4 $$locbase i184       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i30        ; load word
lw   $r4 $$locbase i18        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i848           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i256                     ; free 256 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function add_12
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (other)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i24        ; get offset to local
sb   $r2 $$arg0 i0            ; store byte
addi $r2 $$locbase i8         ; get offset to local
sb   $r2 $r0 i0               ; store byte
addi $r0 $$locbase i24        ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r2 $$locbase i8         ; get offset to local
addi $r3 $$locbase i32        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
lb   $r2 $r2 i0               ; load byte
add  $r0 $r0 $r2
sw   $$locbase $r0 i2         ; store word
addi $r0 $$locbase i40        ; get offset to local
movi $r2 i255                 ; initialize constant into register
sb   $r0 $r2 i0               ; store byte
addi $r0 $$locbase i40        ; get offset to local
lb   $r0 $r0 i0               ; load byte
sw   $$locbase $r0 i0         ; store word
lw   $r0 $$locbase i2         ; load word
lw   $r2 $$locbase i0         ; load word
gt   $r0 $r0 $r2
jnzf $r0 $zero i5
addi $r0 $$locbase i16        ; get offset to local
addi $r2 $$locbase i56        ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
lw   $r0 $$locbase i2         ; load word
jmpf $zero i12
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
and  $r0 $flag $r0
eq   $r0 $r0 $zero
jnzf $r0 $zero i8
lw   $r0 $$locbase i2         ; load word
lw   $r2 $$locbase i0         ; load word
add  $r2 $r2 $one
mod  $r0 $r0 $r2
sw   $$locbase $r0 i6         ; store word
lw   $r0 $$locbase i6         ; load word
move $$retv $r0               ; set return value
jmpf $zero i1
rvrt $zero
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_24
cfei i264                     ; allocate 264 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i25     ; store word
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i20        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i72        ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i72        ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i368           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i80        ; get offset to local
lw   $r1 $$locbase i19        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i21        ; load word
div  $r0 $r0 $r1
sw   $$locbase $r0 i32        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i22      ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i22        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i23       ; store word
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i23        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i19        ; store word
jmpb $zero i46
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i80        ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
sw   $$locbase $r1 i30        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i30        ; load word
lw   $r2 $$locbase i19        ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i152       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i31        ; store word
addi $r4 $$locbase i192       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i31        ; load word
lw   $r4 $$locbase i19        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i1472          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i264                     ; free 264 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_31
cfei i264                     ; allocate 264 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i25     ; store word
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i20        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i72        ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i72        ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i780           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i80        ; get offset to local
lw   $r1 $$locbase i19        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i21        ; load word
div  $r0 $r0 $r1
sw   $$locbase $r0 i32        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i22      ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i22        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i23       ; store word
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i23        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i19        ; store word
jmpb $zero i46
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i80        ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
sw   $$locbase $r1 i30        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i30        ; load word
lw   $r2 $$locbase i19        ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i152       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i31        ; store word
addi $r4 $$locbase i192       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i31        ; load word
lw   $r4 $$locbase i19        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i1884          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i264                     ; free 264 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_38
cfei i264                     ; allocate 264 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (f)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i25     ; store word
sw   $$locbase $r0 i18        ; store word
addi $r0 $$locbase i200       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
move $r2 $zero                ; move parameter from branch to block argument
mul  $r0 $r2 $one             ; get offset to array element
add  $r0 $$locbase $r0        ; add array element offset to array base
movi $r1 i48                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
add  $r2 $r2 $one
movi $r0 i64                  ; initialize constant into register
lt   $r0 $r2 $r0
jnzb $r0 $zero i6
addi $r0 $$locbase i80        ; get offset to local
mcpi $r0 $$locbase i64        ; copy memory
movi $r0 i63                  ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i208       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i20        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i72        ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i72        ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i1192          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i80        ; get offset to local
lw   $r1 $$locbase i19        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i21        ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i21        ; load word
div  $r0 $r0 $r1
sw   $$locbase $r0 i32        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i224       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i22      ; store word
lw   $r0 $$locbase i32        ; load word
lw   $r1 $$locbase i22        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i9
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i23       ; store word
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i23        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i19        ; store word
jmpb $zero i46
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i80        ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
sw   $$locbase $r1 i30        ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i30        ; load word
lw   $r2 $$locbase i19        ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i152       ; get offset to local
movi $r4 i64                  ; initialize constant into register
sw   $$locbase $r4 i31        ; store word
addi $r4 $$locbase i192       ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
lw   $r2 $$locbase i31        ; load word
lw   $r4 $$locbase i19        ; load word
sub  $r2 $r2 $r4
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i2296          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i264                     ; free 264 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_45
cfei i656                     ; allocate 656 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$arg1               ; save argument 1 (f)
move $r4 $$reta               ; save return address
load $$tmp data_NonConfigurable_12; load local variable initializer from data section
addi $r2 $$locbase i296       ; get local variable address
mcpi $r2 $$tmp i32            ; copy initializer from data section to local variable
sw   $$locbase $r1 i54        ; store word
addi $r1 $$locbase i624       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i56        ; get offset to local
move $r3 $zero                ; move parameter from branch to block argument
mul  $r1 $r3 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r2 i48                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
add  $r3 $r3 $one
movi $r1 i80                  ; initialize constant into register
lt   $r1 $r3 $r1
jnzb $r1 $zero i6
addi $r1 $$locbase i352       ; get offset to local
mcpi $r1 $r0 i80              ; copy memory
movi $r0 i79                  ; initialize constant into register
sw   $$locbase $r0 i55        ; store word
addi $r0 $$locbase i624       ; get offset to local
addi $r1 $$locbase i504       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i504       ; get offset to local
addi $r1 $$locbase i296       ; get offset to local
load $r2 data_NonConfigurable_80; get local constant
addi $r3 $$locbase i232       ; get offset to local
wqam $r3 $r0 $r1 $r2
addi $r0 $$locbase i136       ; get offset to local
mcpi $r0 $r3 i32              ; copy memory
addi $r1 $$locbase i472       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i472       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i200       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i24        ; get offset to local
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i16        ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
addi $r1 $r1 i16              ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i336       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
addi $r1 $r1 i24              ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i10                  ; initialize constant into register
sw   $$locbase $r0 i56        ; store word
lw   $r0 $$locbase i6         ; load word
lw   $r1 $$locbase i56        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i344       ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i344       ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i1736          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i352       ; get offset to local
lw   $r1 $$locbase i55        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i624       ; get offset to local
addi $r1 $$locbase i536       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i536       ; get offset to local
load $r1 data_NonConfigurable_80; get local constant
addi $r2 $$locbase i264       ; get offset to local
wqdv $r2 $r0 $r1 i32
addi $r0 $$locbase i168       ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
addi $r1 $$locbase i624       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r1 $$locbase i568       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i568       ; get offset to local
load $r1 data_NonConfigurable_12; get local constant
wqcm $r0 $r0 $r1 i32
jnzf $r0 $zero i9
addi $r0 $$locbase i440       ; get offset to local
addi $r1 $$locbase i600       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i57       ; store word
lw   $r0 $$locbase i55        ; load word
lw   $r1 $$locbase i57        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i55        ; store word
jmpb $zero i77
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i352       ; get offset to local
addi $r2 $$locbase i440       ; get offset to local
sw   $$locbase $r1 i76        ; store word
addi $r1 $$locbase i328       ; get offset to local
mcpi $r1 $r2 i8               ; copy memory
lw   $r1 $$locbase i76        ; load word
lw   $r2 $$locbase i55        ; load word
mul  $r2 $one $r2
add  $r1 $r1 $r2
addi $r2 $$locbase i440       ; get offset to local
movi $r3 i80                  ; initialize constant into register
sw   $$locbase $r3 i77        ; store word
addi $r3 $$locbase i464       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
lw   $r2 $$locbase i77        ; load word
lw   $r3 $$locbase i55        ; load word
sub  $r2 $r2 $r3
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
subi $$tmp $pc i2848          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i656                     ; free 656 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_52
cfei i792                     ; allocate 792 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$arg1               ; save argument 1 (f)
move $r4 $$reta               ; save return address
load $$tmp data_NonConfigurable_12; load local variable initializer from data section
addi $r2 $$locbase i320       ; get local variable address
mcpi $r2 $$tmp i32            ; copy initializer from data section to local variable
addi $r2 $$locbase i544       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
sw   $$locbase $r1 i56        ; store word
addi $r0 $$locbase i544       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i728       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i688       ; get offset to local
sb   $r0 $one i0              ; store byte
addi $r0 $$locbase i688       ; get offset to local
lb   $r0 $r0 i0               ; load byte
movi $r1 i65                  ; initialize constant into register
jnzf $r0 $zero i1
movi $r1 i97                  ; initialize constant into register
addi $r0 $$locbase i352       ; get offset to local
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i728       ; get offset to local
addi $r1 $$locbase i760       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i88        ; get offset to local
move $r3 $zero                ; move parameter from branch to block argument
mul  $r1 $r3 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r2 i48                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
add  $r3 $r3 $one
movi $r1 i66                  ; initialize constant into register
lt   $r1 $r3 $r1
jnzb $r1 $zero i6
addi $r1 $$locbase i376       ; get offset to local
mcpi $r1 $r0 i66              ; copy memory
addi $r0 $$locbase i376       ; get offset to local
mul  $r1 $zero $one           ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r0 i48                  ; initialize constant into register
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i376       ; get offset to local
mul  $r1 $one $one            ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r0 i120                 ; initialize constant into register
sb   $r1 $r0 i0               ; store byte
movi $r0 i65                  ; initialize constant into register
sw   $$locbase $r0 i57        ; store word
addi $r0 $$locbase i760       ; get offset to local
addi $r1 $$locbase i576       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i576       ; get offset to local
addi $r1 $$locbase i320       ; get offset to local
load $r2 data_NonConfigurable_111; get local constant
addi $r3 $$locbase i256       ; get offset to local
wqam $r3 $r0 $r1 $r2
addi $r0 $$locbase i160       ; get offset to local
mcpi $r0 $r3 i32              ; copy memory
addi $r1 $$locbase i504       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i504       ; get offset to local
addi $r1 $$locbase i56        ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i224       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r0 $$locbase i56        ; get offset to local
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
addi $r1 $$locbase i56        ; get offset to local
addi $r1 $r1 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i16        ; get offset to local
addi $r1 $$locbase i56        ; get offset to local
addi $r1 $r1 i16              ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i360       ; get offset to local
addi $r1 $$locbase i56        ; get offset to local
addi $r1 $r1 i24              ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i16                  ; initialize constant into register
sw   $$locbase $r0 i59        ; store word
lw   $r0 $$locbase i10        ; load word
lw   $r1 $$locbase i59        ; load word
mod  $r0 $r0 $r1
addi $r1 $$locbase i368       ; get offset to local
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i480       ; get offset to local
movi $r1 i10                  ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i368       ; get offset to local
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i480       ; get offset to local
lb   $r1 $r1 i0               ; load byte
lt   $r0 $r0 $r1
jnzf $r0 $zero i53
addi $r0 $$locbase i368       ; get offset to local
addi $r1 $$locbase i608       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r1 $$locbase i488       ; get offset to local
movi $r2 i10                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
lb   $r0 $r0 i0               ; load byte
addi $r1 $$locbase i488       ; get offset to local
addi $r2 $$locbase i696       ; get offset to local
mcpi $r2 $r1 i1               ; copy memory
lb   $r1 $r1 i0               ; load byte
sub  $r0 $r0 $r1
sw   $$locbase $r0 i67        ; store word
addi $r0 $$locbase i704       ; get offset to local
movi $r1 i255                 ; initialize constant into register
sb   $r0 $r1 i0               ; store byte
addi $r0 $$locbase i704       ; get offset to local
lb   $r0 $r0 i0               ; load byte
sw   $$locbase $r0 i58        ; store word
lw   $r0 $$locbase i67        ; load word
lw   $r1 $$locbase i58        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i5
addi $r0 $$locbase i536       ; get offset to local
addi $r1 $$locbase i720       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i67        ; load word
jmpf $zero i12
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
and  $r0 $flag $r0
eq   $r0 $r0 $zero
jnzf $r0 $zero i18
lw   $r0 $$locbase i67        ; load word
lw   $r1 $$locbase i58        ; load word
add  $r1 $r1 $one
mod  $r0 $r0 $r1
sw   $$locbase $r0 i89        ; store word
lw   $r0 $$locbase i89        ; load word
addi $r1 $$locbase i352       ; get offset to local
lb   $r1 $r1 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
subi $$tmp $pc i2588          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i376       ; get offset to local
lw   $r1 $$locbase i57        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
jmpf $zero i13
rvrt $zero
addi $r0 $$locbase i368       ; get offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
movi $r0 i48                  ; initialize constant into register
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i2644          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call add_12
addi $r0 $$locbase i376       ; get offset to local
lw   $r1 $$locbase i57        ; load word
mul  $r1 $r1 $one             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
sb   $r1 $$retv i0            ; store byte
addi $r0 $$locbase i760       ; get offset to local
addi $r1 $$locbase i616       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i616       ; get offset to local
load $r1 data_NonConfigurable_111; get local constant
addi $r2 $$locbase i288       ; get offset to local
wqdv $r2 $r0 $r1 i32
addi $r0 $$locbase i192       ; get offset to local
mcpi $r0 $r2 i32              ; copy memory
addi $r1 $$locbase i760       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r1 $$locbase i648       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i648       ; get offset to local
load $r1 data_NonConfigurable_12; get local constant
wqcm $r0 $r0 $r1 i32
jnzf $r0 $zero i9
addi $r0 $$locbase i456       ; get offset to local
addi $r1 $$locbase i680       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i62       ; store word
lw   $r0 $$locbase i57        ; load word
lw   $r1 $$locbase i62        ; load word
sub  $r0 $r0 $r1
sw   $$locbase $r0 i57        ; store word
jmpb $zero i139
addr $r0 data_NonConfigurable_105; get constant's address in data section
lw   $r0 $r0 i0               ; load word
addi $r1 $$locbase i376       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $r0 i66                  ; initialize constant into register
move $$arg2 $r0               ; [call]: pass argument 2
subi $$tmp $pc i3696          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i792                     ; free 792 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_57
cfei i24                      ; allocate 24 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
sw   $$locbase $$arg1 i2      ; store word
addi $r2 $$locbase i16        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
jal  $$reta $pc i16           ; [call]: call print_string_quotes_58
mcpi $$locbase $r0 i16        ; copy memory
move $$arg0 $$locbase         ; [call]: pass argument 0
move $$arg1 $$locbase         ; [call]: pass argument 1
subi $$tmp $pc i3888          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
noop                          ; [call]: call print_str_1
addi $r0 $$locbase i16        ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i7            ; [call]: call print_string_quotes_58
move $$retv $zero             ; set return value
cfsi i24                      ; free 24 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function print_string_quotes_58
cfei i16                      ; allocate 16 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
mul  $r1 $zero $one           ; get offset to array element
add  $r1 $$locbase $r1        ; add array element offset to array base
movi $r2 i34                  ; initialize constant into register
sb   $r1 $r2 i0               ; store byte
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $$locbase i1         ; copy memory
addr $r1 data_NonConfigurable_105; get constant's address in data section
lw   $r1 $r1 i0               ; load word
addi $r2 $$locbase i8         ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $one              ; [call]: pass argument 2
subi $$tmp $pc i3900          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call syscall_write_2
noop                          ; [call]: call syscall_write_2
move $$retv $zero             ; set return value
cfsi i16                      ; free 16 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function debug_tuple_62
cfei i128                     ; allocate 128 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (name)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $$arg1 i16           ; copy memory
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
subi $$tmp $pc i3820          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call len_4
sw   $$locbase $$retv i15     ; store word
sw   $$locbase $zero i14      ; store word
lw   $r0 $$locbase i15        ; load word
lw   $r3 $$locbase i14        ; load word
gt   $r0 $r0 $r3
jnzf $r0 $zero i1
jmpf $zero i9
addi $r0 $$locbase i96        ; get offset to local
addi $r3 $$locbase i48        ; get offset to local
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4156              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_112; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i64        ; get offset to local
addi $r4 $$locbase i64        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4220              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i40        ; get offset to local
sb   $r0 $zero i0             ; store byte
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i128                     ; free 128 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_65
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i7      ; store word
addi $r3 $$locbase i64        ; get offset to local
sb   $r3 $r0 i0               ; store byte
lw   $r0 $$locbase i7         ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i2                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i40        ; get offset to local
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4380              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i64        ; get offset to local
lb   $r0 $r0 i0               ; load byte
lw   $r3 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
subi $$tmp $pc i3844          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
lw   $r0 $$locbase i7         ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i7         ; load word
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function finish_66
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
load $r1 data_NonConfigurable_113; get local constant
sw   $$locbase $$arg0 i7      ; store word
mcpi $$locbase $r1 i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i4536              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function debug_list_68
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (__ret_value)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_114; get local constant
mcpi $$locbase $r2 i8         ; copy memory
addi $r2 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i48        ; get offset to local
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4648              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r2 $$locbase i40        ; get offset to local
sb   $r2 $zero i0             ; store byte
mcpi $r0 $r2 i8               ; copy memory
move $$retv $r0               ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function entry_70
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i7      ; store word
addi $r3 $$locbase i64        ; get offset to local
sb   $r3 $r0 i0               ; store byte
lw   $r0 $$locbase i7         ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i2                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i40        ; get offset to local
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i4808              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i64        ; get offset to local
lb   $r0 $r0 i0               ; load byte
lw   $r3 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i4276              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_10
lw   $r0 $$locbase i7         ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i7         ; load word
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function finish_72
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
load $r1 data_NonConfigurable_115; get local constant
sw   $$locbase $$arg0 i7      ; store word
mcpi $$locbase $r1 i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i4968              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_75
cfei i88                      ; allocate 88 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
load $r1 data_NonConfigurable_116; get local constant
sw   $$locbase $$arg1 i9      ; store word
addi $r2 $$locbase i8         ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i16        ; get offset to local
sw   $$locbase $r2 i2         ; store word
sw   $$locbase $one i3        ; store word
addi $r2 $$locbase i32        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i56        ; get offset to local
addi $r3 $$locbase i56        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i48        ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
jal  $$reta $pc i61           ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r1 $$locbase i80        ; get offset to local
mcpi $r1 $$locbase i8         ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i7            ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i88                      ; free 88 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function finish_76
cfei i120                     ; allocate 120 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
sw   $$locbase $$arg0 i14     ; store word
lw   $r1 $$locbase i14        ; load word
lb   $r1 $r1 i0               ; load byte
jnzf $r1 $zero i1
jmpf $zero i16
load $r1 data_NonConfigurable_117; get local constant
mcpi $$locbase $r1 i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
sw   $$locbase $one i2        ; store word
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i80        ; get offset to local
addi $r3 $$locbase i80        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i5232              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r1 data_NonConfigurable_118; get local constant
addi $r2 $$locbase i40        ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i48        ; get offset to local
sw   $$locbase $r2 i6         ; store word
sw   $$locbase $one i7        ; store word
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i96        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i5300              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i120                     ; free 120 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function debug_struct_77
cfei i80                      ; allocate 80 bytes for locals and 0 slots for call arguments
move $r0 $$arg2               ; save argument 2 (__ret_value)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_119; get local constant
addi $r3 $$locbase i48        ; get offset to local
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $$arg1 i16           ; copy memory
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i5388              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
mcpi $$locbase $r2 i8         ; copy memory
addi $r2 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i3                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i64        ; get offset to local
addi $r4 $$locbase i64        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i5448              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r2 $$locbase i40        ; get offset to local
sb   $r2 $zero i0             ; store byte
mcpi $r0 $r2 i8               ; copy memory
move $$retv $r0               ; set return value
cfsi i80                      ; free 80 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_78
cfei i272                     ; allocate 272 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg1 i26     ; store word
addi $r1 $$locbase i128       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i27      ; store word
lw   $r0 $r0 i0               ; load word
lw   $r1 $$locbase i27        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i71
addi $r0 $$locbase i128       ; get offset to local
addi $r1 $$locbase i240       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i28       ; store word
lw   $r0 $$locbase i16        ; load word
lw   $r1 $$locbase i28        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_108; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_120; get local constant
addi $r1 $$locbase i88        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i96        ; get offset to local
sw   $$locbase $r1 i12        ; store word
sw   $$locbase $one i13       ; store word
addi $r1 $$locbase i112       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i184       ; get offset to local
addi $r2 $$locbase i184       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i144       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
subi $$tmp $pc i1616          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_tuple_62
mcpi $$locbase $$retv i8      ; copy memory
addi $r0 $$locbase i256       ; get offset to local
mcpi $r0 $$locbase i8         ; copy memory
sw   $$locbase $r0 i31        ; store word
lw   $r0 $$locbase i31        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i18
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i16        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i40        ; get offset to local
sw   $$locbase $r1 i5         ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i6         ; store word
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i168       ; get offset to local
addi $r2 $$locbase i168       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i5764              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i31        ; load word
addi $r1 $$locbase i200       ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
subi $$tmp $pc i788           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call fmt_75
lw   $r0 $$locbase i31        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i31        ; load word
addi $r1 $$locbase i200       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i264       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
subi $$tmp $pc i1372          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_66
jmpf $zero i18
load $r0 data_NonConfigurable_31; get local constant
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i24        ; get offset to local
sw   $$locbase $r1 i3         ; store word
movi $r1 i4                   ; initialize constant into register
sw   $$locbase $r1 i4         ; store word
addi $r1 $$locbase i56        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i152       ; get offset to local
addi $r2 $$locbase i152       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i5904              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
move $$retv $zero             ; set return value
cfsi i272                     ; free 272 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_82
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_121; get local constant
load $r3 data_NonConfigurable_6; get local constant
sw   $$locbase $$arg1 i22     ; store word
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
addi $r2 $$locbase i24        ; get offset to local
sw   $$locbase $r4 i3         ; store word
movi $r4 i7                   ; initialize constant into register
sw   $$locbase $r4 i4         ; store word
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i112       ; get offset to local
addi $r5 $$locbase i112       ; get offset to local
mcpi $r5 $r4 i16              ; copy memory
addi $r4 $$locbase i96        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
move $$arg2 $r4               ; [call]: pass argument 2
subi $$tmp $pc i708           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r2 $$locbase i56        ; get offset to local
mcpi $r2 $r3 i8               ; copy memory
addi $r3 $$locbase i64        ; get offset to local
sw   $$locbase $r2 i8         ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i9         ; store word
addi $r2 $$locbase i80        ; get offset to local
mcpi $r2 $r3 i16              ; copy memory
addi $r3 $$locbase i184       ; get offset to local
mcpi $r3 $$locbase i8         ; copy memory
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i144       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i104       ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r0               ; [call]: pass argument 3
jal  $$reta $pc i14           ; [call]: call field_83
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
subi $$tmp $pc i1016          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_83
cfei i216                     ; allocate 216 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (name)
move $r1 $$arg2               ; save argument 2 (value)
move $r2 $$arg3               ; save argument 3 (__ret_value)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i22     ; store word
addi $r4 $$locbase i160       ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
addi $r0 $$locbase i184       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
lw   $r0 $$locbase i22        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i2         ; store word
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i80        ; get offset to local
addi $r4 $$locbase i80        ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i6312              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
addi $r1 $$locbase i160       ; get offset to local
addi $r4 $$locbase i96        ; get offset to local
addi $r5 $$locbase i96        ; get offset to local
mcpi $r5 $r1 i16              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
movi $$tmp i6356              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $r1 i6         ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i7         ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
addi $r4 $$locbase i112       ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i6420              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r0 $$locbase i184       ; get offset to local
lw   $r1 $$locbase i22        ; load word
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r0 i32              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
subi $$tmp $pc i3464          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call fmt_52
lw   $r0 $$locbase i22        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i22        ; load word
mcpi $r2 $r0 i8               ; copy memory
move $$retv $r2               ; set return value
cfsi i216                     ; free 216 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_85
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_122; get local constant
load $r3 data_NonConfigurable_6; get local constant
sw   $$locbase $$arg1 i22     ; store word
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
addi $r2 $$locbase i24        ; get offset to local
sw   $$locbase $r4 i3         ; store word
movi $r4 i7                   ; initialize constant into register
sw   $$locbase $r4 i4         ; store word
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i112       ; get offset to local
addi $r5 $$locbase i112       ; get offset to local
mcpi $r5 $r4 i16              ; copy memory
addi $r4 $$locbase i96        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
move $$arg2 $r4               ; [call]: pass argument 2
subi $$tmp $pc i1272          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r2 $$locbase i56        ; get offset to local
mcpi $r2 $r3 i8               ; copy memory
addi $r3 $$locbase i64        ; get offset to local
sw   $$locbase $r2 i8         ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i9         ; store word
addi $r2 $$locbase i80        ; get offset to local
mcpi $r2 $r3 i16              ; copy memory
addi $r3 $$locbase i184       ; get offset to local
mcpi $r3 $$locbase i8         ; copy memory
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i144       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i104       ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r0               ; [call]: pass argument 3
subi $$tmp $pc i508           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call field_83
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
subi $$tmp $pc i1584          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function push_96
cfei i168                     ; allocate 168 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (byte)
move $r4 $$reta               ; save return address
sw   $$locbase $$arg0 i13     ; store word
sb   $$locbase $r0 i0         ; store byte
lw   $r0 $$locbase i13        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
lw   $r1 $$locbase i13        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i112       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i56        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i14        ; load word
lw   $r1 $$locbase i7         ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i58
lw   $r0 $$locbase i13        ; load word
sw   $$locbase $r0 i16        ; store word
lw   $r0 $$locbase i16        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i120       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i8       ; store word
lw   $r0 $$locbase i15        ; load word
lw   $r1 $$locbase i8         ; load word
eq   $r0 $r0 $r1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r0 $zero i9
lw   $r0 $$locbase i16        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i17        ; store word
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r1 $$locbase i9         ; load word
mul  $r1 $r0 $r1
sw   $$locbase $r1 i3         ; store word
lw   $r0 $$locbase i16        ; load word
lw   $r1 $$locbase i16        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i24        ; get offset to local
addi $r3 $$locbase i96        ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i32        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
lw   $r0 $$locbase i3         ; load word
lw   $r1 $$locbase i1         ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i2
lw   $r0 $$locbase i12        ; load word
jmpf $zero i14
lw   $r0 $$locbase i4         ; load word
aloc $r0                      ; aloc size
sw   $$locbase $hp i5         ; store word
sw   $$locbase $zero i10      ; store word
lw   $r0 $$locbase i1         ; load word
lw   $r1 $$locbase i10        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i4
lw   $r0 $$locbase i5         ; load word
lw   $r1 $$locbase i12        ; load word
lw   $r2 $$locbase i1         ; load word
mcp  $r0 $r1 $r2              ; mcp dst src len
lw   $r0 $$locbase i5         ; load word
lw   $r1 $$locbase i16        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i24        ; get offset to local
lw   $r1 $$locbase i16        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i13        ; load word
lw   $r1 $$locbase i13        ; load word
addi $r1 $r1 i16              ; get offset to aggregate element
addi $r2 $$locbase i144       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i18        ; load word
lw   $r1 $$locbase i6         ; load word
add  $r0 $r0 $r1              ; add new ptr offset
sw   $$locbase $r0 i2         ; store word
lb   $r0 $$locbase i0         ; load byte
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i2         ; load word
lw   $r1 $$locbase i20        ; load word
sb   $r0 $r1 i0               ; sb ptr val i0
lw   $r0 $$locbase i13        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
addi $r1 $$locbase i152       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i11       ; store word
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i11        ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i13        ; load word
sw   $r1 $r0 i2               ; store word
move $$retv $zero             ; set return value
cfsi i168                     ; free 168 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function ge_106
cfei i16                      ; allocate 16 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (other)
move $r1 $$reta               ; save return address
sw   $$locbase $$arg0 i1      ; store word
sw   $$locbase $r0 i0         ; store word
lw   $r0 $$locbase i1         ; load word
lw   $r2 $$locbase i0         ; load word
gt   $r0 $r0 $r2
jnzf $r0 $zero i3
lw   $r0 $$locbase i1         ; load word
lw   $r2 $$locbase i0         ; load word
eq   $r0 $r0 $r2
move $$retv $r0               ; set return value
cfsi i16                      ; free 16 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_113
cfei i208                     ; allocate 208 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$reta               ; save return address
load $r2 data_NonConfigurable_123; get local constant
load $r3 data_NonConfigurable_6; get local constant
sw   $$locbase $$arg1 i23     ; store word
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i32        ; get offset to local
sw   $$locbase $r4 i4         ; store word
movi $r4 i10                  ; initialize constant into register
sw   $$locbase $r4 i5         ; store word
addi $r4 $$locbase i48        ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i120       ; get offset to local
addi $r5 $$locbase i120       ; get offset to local
mcpi $r5 $r4 i16              ; copy memory
addi $r4 $$locbase i104       ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
move $$arg2 $r4               ; [call]: pass argument 2
subi $$tmp $pc i2052          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call debug_struct_77
mcpi $$locbase $$retv i8      ; copy memory
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $r3 i8               ; copy memory
addi $r3 $$locbase i72        ; get offset to local
sw   $$locbase $r2 i9         ; store word
movi $r2 i4                   ; initialize constant into register
sw   $$locbase $r2 i10        ; store word
addi $r2 $$locbase i88        ; get offset to local
mcpi $r2 $r3 i16              ; copy memory
addi $r3 $$locbase i192       ; get offset to local
mcpi $r3 $$locbase i8         ; copy memory
addi $r4 $$locbase i136       ; get offset to local
mcpi $r4 $r2 i16              ; copy memory
addi $r2 $$locbase i152       ; get offset to local
mcpi $r2 $r0 i32              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
move $$arg2 $r2               ; [call]: pass argument 2
move $$arg3 $r0               ; [call]: pass argument 3
subi $$tmp $pc i1288          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call field_83
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $$retv i8            ; copy memory
addi $r2 $$locbase i200       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
move $$arg0 $r2               ; [call]: pass argument 0
subi $$tmp $pc i2364          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call finish_76
move $$retv $zero             ; set return value
cfsi i208                     ; free 208 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_120
cfei i160                     ; allocate 160 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (name)
move $r1 $$arg2               ; save argument 2 (value)
move $r2 $$arg3               ; save argument 3 (__ret_value)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i18     ; store word
addi $r4 $$locbase i128       ; get offset to local
mcpi $r4 $r0 i16              ; copy memory
sw   $$locbase $r1 i19        ; store word
lw   $r0 $$locbase i18        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i2         ; store word
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i80        ; get offset to local
addi $r4 $$locbase i80        ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i7656              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
load $r0 data_NonConfigurable_8; get local constant
addi $r1 $$locbase i128       ; get offset to local
addi $r4 $$locbase i96        ; get offset to local
addi $r5 $$locbase i96        ; get offset to local
mcpi $r5 $r1 i16              ; copy memory
move $$arg0 $r4               ; [call]: pass argument 0
move $$arg1 $r5               ; [call]: pass argument 1
movi $$tmp i7700              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i48        ; get offset to local
sw   $$locbase $r1 i6         ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i7         ; store word
addi $r1 $$locbase i64        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
addi $r4 $$locbase i112       ; get offset to local
mcpi $r4 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i7764              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i18        ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i5768              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
lw   $r0 $$locbase i18        ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i18        ; load word
mcpi $r2 $r0 i8               ; copy memory
move $$retv $r2               ; set return value
cfsi i160                     ; free 160 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function field_126
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
sw   $$locbase $$arg0 i7      ; store word
sw   $$locbase $r0 i8         ; store word
lw   $r0 $$locbase i7         ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i17
load $r0 data_NonConfigurable_7; get local constant
mcpi $$locbase $r0 i8         ; copy memory
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $$locbase i1   ; store word
movi $r3 i2                   ; initialize constant into register
sw   $$locbase $r3 i2         ; store word
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r0 i16              ; copy memory
addi $r0 $$locbase i40        ; get offset to local
addi $r4 $$locbase i40        ; get offset to local
mcpi $r4 $r3 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r4               ; [call]: pass argument 1
movi $$tmp i7952              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i8         ; load word
lw   $r3 $$locbase i7         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
movi $$tmp i5956              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
lw   $r0 $$locbase i7         ; load word
sb   $r0 $one i0              ; store byte
lw   $r0 $$locbase i7         ; load word
mcpi $r1 $r0 i8               ; copy memory
move $$retv $r1               ; set return value
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function number_of_bytes_130
cfei i64                      ; allocate 64 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
addi $r1 $$locbase i48        ; get offset to local
mcpi $r1 $$arg0 i16           ; copy memory
addi $r1 $$locbase i48        ; get offset to local
mcpi $$locbase $r1 i16        ; copy memory
addi $r1 $$locbase i32        ; get offset to local
mcpi $r1 $$locbase i16        ; copy memory
addi $r2 $$locbase i16        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
lw   $r1 $$locbase i5         ; load word
move $$retv $r1               ; set return value
cfsi i64                      ; free 64 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function new_143
cfei i56                      ; allocate 56 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
move $$arg0 $zero             ; [call]: pass argument 0
jal  $$reta $pc i15           ; [call]: call alloc_145
addi $r2 $$locbase i24        ; get offset to local
sw   $$locbase $$retv i3      ; store word
sw   $$locbase $zero i4       ; store word
addi $r3 $$locbase i40        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
mcpi $$locbase $r3 i16        ; copy memory
sw   $$locbase $zero i2       ; store word
mcpi $r0 $$locbase i24        ; copy memory
move $$retv $r0               ; set return value
cfsi i56                      ; free 56 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function alloc_145
cfei i16                      ; allocate 16 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
sw   $$locbase $$arg0 i0      ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i1         ; store word
lw   $r1 $$locbase i1         ; load word
lw   $r2 $$locbase i0         ; load word
mul  $r1 $r1 $r2
aloc $r1                      ; aloc size
move $$retv $hp               ; set return value
cfsi i16                      ; free 16 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function push_146
cfei i224                     ; allocate 224 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (value)
move $r4 $$reta               ; save return address
sw   $$locbase $$arg0 i16     ; store word
sw   $$locbase $r0 i27        ; store word
lw   $r0 $$locbase i16        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
lw   $r1 $$locbase i16        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i136       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i64        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r1 $$locbase i8         ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i71
lw   $r0 $$locbase i16        ; load word
sw   $$locbase $r0 i20        ; store word
lw   $r0 $$locbase i20        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i144       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $zero i9       ; store word
lw   $r0 $$locbase i18        ; load word
lw   $r1 $$locbase i9         ; load word
eq   $r0 $r0 $r1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r0 $zero i9
lw   $r0 $$locbase i20        ; load word
addi $r0 $r0 i8               ; get offset to aggregate element
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i21        ; store word
addi $r1 $$locbase i80        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i21        ; load word
lw   $r1 $$locbase i10        ; load word
mul  $r1 $r0 $r1
sw   $$locbase $r1 i5         ; store word
lw   $r0 $$locbase i20        ; load word
lw   $r1 $$locbase i20        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
addi $r2 $$locbase i40        ; get offset to local
addi $r3 $$locbase i120       ; get offset to local
mcpi $r3 $r0 i8               ; copy memory
mcpi $$locbase $r1 i8         ; copy memory
addi $r0 $$locbase i48        ; get offset to local
mcpi $r0 $r2 i8               ; copy memory
lw   $r0 $$locbase i5         ; load word
lw   $r1 $$locbase i0         ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i2
lw   $r0 $$locbase i15        ; load word
jmpf $zero i28
lw   $r0 $$locbase i6         ; load word
move $$arg0 $r0               ; [call]: pass argument 0
subi $$tmp $pc i312           ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call alloc_145
sw   $$locbase $$retv i7      ; store word
sw   $$locbase $zero i11      ; store word
lw   $r0 $$locbase i0         ; load word
lw   $r1 $$locbase i11        ; load word
gt   $r0 $r0 $r1
jnzf $r0 $zero i1
jmpf $zero i16
addi $r0 $$locbase i120       ; get offset to local
addi $r1 $$locbase i56        ; get offset to local
addi $r2 $$locbase i176       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i16        ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i8                   ; initialize constant into register
sw   $$locbase $r0 i12        ; store word
lw   $r0 $$locbase i0         ; load word
lw   $r1 $$locbase i12        ; load word
mul  $r0 $r0 $r1
sw   $$locbase $r0 i4         ; store word
lw   $r0 $$locbase i2         ; load word
lw   $r1 $$locbase i22        ; load word
lw   $r2 $$locbase i4         ; load word
mcp  $r0 $r1 $r2              ; mcp dst src len
lw   $r0 $$locbase i7         ; load word
lw   $r1 $$locbase i20        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i40        ; get offset to local
lw   $r1 $$locbase i20        ; load word
addi $r1 $r1 i8               ; get offset to aggregate element
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i16        ; load word
lw   $r1 $$locbase i16        ; load word
addi $r1 $r1 i16              ; get offset to aggregate element
addi $r2 $$locbase i184       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i8         ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i23        ; load word
lw   $r1 $$locbase i1         ; load word
movi $r2 i8                   ; initialize constant into register
mul  $r1 $r2 $r1
add  $r0 $r0 $r1
sw   $$locbase $r0 i3         ; store word
addi $r0 $$locbase i24        ; get offset to local
addi $r1 $$locbase i216       ; get offset to local
addi $r2 $$locbase i192       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i208       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
movi $r0 i8                   ; initialize constant into register
sw   $$locbase $r0 i19        ; store word
sw   $$locbase $one i13       ; store word
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i13        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i4
lw   $r0 $$locbase i24        ; load word
lw   $r1 $$locbase i26        ; load word
sw   $r0 $r1 i0               ; sw ptr val i0
jmpf $zero i3
lw   $r0 $$locbase i24        ; load word
lw   $r1 $$locbase i26        ; load word
sb   $r0 $r1 i0               ; sb ptr val i0
lw   $r0 $$locbase i16        ; load word
addi $r0 $r0 i16              ; get offset to aggregate element
addi $r1 $$locbase i200       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i14       ; store word
lw   $r0 $$locbase i25        ; load word
lw   $r1 $$locbase i14        ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i16        ; load word
sw   $r1 $r0 i2               ; store word
move $$retv $zero             ; set return value
cfsi i224                     ; free 224 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function fmt_152
cfei i456                     ; allocate 456 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r4 $$reta               ; save return address
sw   $$locbase $$arg1 i33     ; store word
addi $r1 $$locbase i200       ; get offset to local
addi $r2 $$locbase i176       ; get offset to local
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i4312              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call debug_list_68
mcpi $$locbase $$retv i8      ; copy memory
addi $r1 $$locbase i280       ; get offset to local
mcpi $r1 $$locbase i8         ; copy memory
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
sw   $$locbase $zero i4       ; store word
addi $r0 $$locbase i200       ; get offset to local
mcpi $r0 $r1 i32              ; copy memory
addi $r1 $$locbase i112       ; get offset to local
mcpi $r1 $r0 i32              ; copy memory
addi $r0 $$locbase i112       ; get offset to local
sw   $$locbase $r0 i46        ; store word
lw   $r0 $$locbase i46        ; load word
lw   $r0 $r0 i3               ; load word
lw   $r1 $$locbase i46        ; load word
lw   $r1 $r1 i2               ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
subi $$tmp $pc i1764          ; load far jump target address
jal  $$reta $$tmp i0          ; [call]: call ge_106
jnzf $$retv $zero i49
lw   $r0 $$locbase i46        ; load word
addi $r0 $r0 i24              ; get offset to aggregate element
addi $r1 $$locbase i328       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i36       ; store word
lw   $r0 $$locbase i41        ; load word
lw   $r1 $$locbase i36        ; load word
add  $r0 $r0 $r1
lw   $r1 $$locbase i46        ; load word
sw   $r1 $r0 i3               ; store word
addi $r0 $$locbase i64        ; get offset to local
sw   $$locbase $one i8        ; store word
lw   $r1 $$locbase i46        ; load word
lw   $r2 $$locbase i46        ; load word
addi $r2 $r2 i24              ; get offset to aggregate element
addi $r3 $$locbase i376       ; get offset to local
mcpi $r3 $r2 i8               ; copy memory
sw   $$locbase $one i37       ; store word
lw   $r2 $$locbase i47        ; load word
lw   $r3 $$locbase i37        ; load word
sub  $r2 $r2 $r3
addi $r3 $$locbase i392       ; get offset to local
mcpi $r3 $r1 i24              ; copy memory
sw   $$locbase $r2 i34        ; store word
addi $r1 $$locbase i392       ; get offset to local
addi $r2 $$locbase i336       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
lw   $r1 $$locbase i49        ; load word
lw   $r2 $$locbase i34        ; load word
movi $r3 i8                   ; initialize constant into register
mul  $r2 $r3 $r2
add  $r1 $r1 $r2
sw   $$locbase $r1 i48        ; store word
movi $r1 i8                   ; initialize constant into register
sw   $$locbase $r1 i43        ; store word
sw   $$locbase $one i38       ; store word
lw   $r1 $$locbase i43        ; load word
lw   $r2 $$locbase i38        ; load word
eq   $r1 $r1 $r2
jnzf $r1 $zero i3
lw   $r1 $$locbase i48        ; load word
lw   $r1 $r1 i0               ; lw val ptr i0
jmpf $zero i2
lw   $r1 $$locbase i48        ; load word
lb   $r1 $r1 i0               ; lb val ptr i0
sw   $r0 $r1 i1               ; store word
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
jmpf $zero i4
addi $r0 $$locbase i40        ; get offset to local
sw   $$locbase $zero i5       ; store word
addi $r1 $$locbase i232       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i144       ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
addi $r0 $$locbase i352       ; get offset to local
addi $r1 $$locbase i232       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
sw   $$locbase $one i39       ; store word
lw   $r0 $$locbase i29        ; load word
lw   $r1 $$locbase i39        ; load word
eq   $r0 $r0 $r1
move $r1 $zero                ; move parameter from branch to block argument
jnzf $r0 $zero i1
move $r1 $one                 ; move parameter from branch to block argument
jnzf $r1 $zero i59
addi $r0 $$locbase i144       ; get offset to local
addi $r1 $$locbase i416       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r1 $$locbase i160       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i360       ; get offset to local
addi $r1 $$locbase i144       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
sw   $$locbase $one i40       ; store word
lw   $r0 $$locbase i18        ; load word
lw   $r1 $$locbase i40        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i3
sw   $$locbase $zero i31      ; store word
lw   $r0 $$locbase i31        ; load word
rvrt $r0
addi $r0 $$locbase i160       ; get offset to local
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i440       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i21        ; load word
sw   $$locbase $r0 i32        ; store word
addi $r0 $$locbase i280       ; get offset to local
addi $r1 $$locbase i256       ; get offset to local
sw   $$locbase $r0 i54        ; store word
addi $r0 $$locbase i448       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
lw   $r0 $$locbase i54        ; load word
lb   $r0 $r0 i0               ; load byte
jnzf $r0 $zero i1
jmpf $zero i18
load $r0 data_NonConfigurable_7; get local constant
addi $r1 $$locbase i56        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i80        ; get offset to local
sw   $$locbase $r1 i10        ; store word
movi $r1 i2                   ; initialize constant into register
sw   $$locbase $r1 i11        ; store word
addi $r1 $$locbase i96        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i184       ; get offset to local
addi $r2 $$locbase i184       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
movi $$tmp i9424              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call print_str_1
lw   $r0 $$locbase i56        ; load word
lw   $r1 $$locbase i54        ; load word
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
movi $$tmp i7428              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call fmt_38
lw   $r0 $$locbase i54        ; load word
sb   $r0 $one i0              ; store byte
jmpb $zero i134
addi $r0 $$locbase i280       ; get offset to local
move $$arg0 $r0               ; [call]: pass argument 0
movi $$tmp i4596              ; load call target address
sub  $$tmp $pc $$tmp          ; load call target address
jal  $$reta $$tmp i0          ; [call]: call finish_72
move $$retv $zero             ; set return value
cfsi i456                     ; free 456 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
.data:
data_NonConfigurable_0 .bytes[25] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 33 3a 31 33 5d 20 28 29 20 3d 20  [src/main.sw:13:13] () = 
data_NonConfigurable_1 .bytes[2] 28 29  ()
data_NonConfigurable_2 .bytes[1] 0a  .
data_NonConfigurable_3 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 30 3a 31 33 5d 20 31 30 75 38 20 3d 20  [src/main.sw:20:13] 10u8 = 
data_NonConfigurable_4 .bytes[46] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 39 3a 31 33 5d 20 73 74 64 3a 3a 62 35 31 32 3a 3a 42 35 31 32 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:69:13] std::b512::B512::zero() = 
data_NonConfigurable_5 .bytes[4] 42 35 31 32  B512
data_NonConfigurable_6 .bytes[4] 62 69 74 73  bits
data_NonConfigurable_7 .bytes[2] 2c 20  , 
data_NonConfigurable_8 .bytes[2] 3a 20  : 
data_NonConfigurable_9 .bytes[69] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 37 31 3a 31 33 5d 20 73 74 64 3a 3a 62 6c 6f 63 6b 3a 3a 42 6c 6f 63 6b 48 61 73 68 45 72 72 6f 72 3a 3a 42 6c 6f 63 6b 48 65 69 67 68 74 54 6f 6f 48 69 67 68 20 3d 20  [src/main.sw:71:13] std::block::BlockHashError::BlockHeightTooHigh = 
data_NonConfigurable_10 .bytes[18] 42 6c 6f 63 6b 48 65 69 67 68 74 54 6f 6f 48 69 67 68  BlockHeightTooHigh
data_NonConfigurable_11 .bytes[139] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 37 32 3a 31 33 5d 20 7b 0a 20 20 20 20 6c 65 74 20 6d 75 74 20 62 79 74 65 73 20 3d 20 73 74 64 3a 3a 62 79 74 65 73 3a 3a 42 79 74 65 73 3a 3a 6e 65 77 28 29 3b 0a 20 20 20 20 62 79 74 65 73 2e 70 75 73 68 28 31 29 3b 0a 20 20 20 20 62 79 74 65 73 2e 70 75 73 68 28 32 29 3b 0a 20 20 20 20 62 79 74 65 73 2e 70 75 73 68 28 33 29 3b 0a 20 20 20 20 62 79 74 65 73 0a 7d 20 3d 20  [src/main.sw:72:13] {.    let mut bytes = std::bytes::Bytes::new();.    bytes.push(1);.    bytes.push(2);.    bytes.push(3);.    bytes.} = 
data_NonConfigurable_12 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................................
data_NonConfigurable_13 .bytes[59] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 37 39 3a 31 33 5d 20 73 74 64 3a 3a 63 6f 6e 74 72 61 63 74 5f 69 64 3a 3a 43 6f 6e 74 72 61 63 74 49 64 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:79:13] std::contract_id::ContractId::zero() = 
data_NonConfigurable_14 .bytes[66] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 31 3a 31 33 5d 20 73 74 64 3a 3a 65 63 72 3a 3a 45 63 52 65 63 6f 76 65 72 45 72 72 6f 72 3a 3a 5a 65 72 6f 4c 65 6e 67 74 68 4d 65 73 73 61 67 65 20 3d 20  [src/main.sw:81:13] std::ecr::EcRecoverError::ZeroLengthMessage = 
data_NonConfigurable_15 .bytes[22] 55 6e 72 65 63 6f 76 65 72 61 62 6c 65 50 75 62 6c 69 63 4b 65 79  UnrecoverablePublicKey
data_NonConfigurable_16 .bytes[17] 5a 65 72 6f 4c 65 6e 67 74 68 4d 65 73 73 61 67 65  ZeroLengthMessage
data_NonConfigurable_17 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 31 3a 31 33 5d 20 31 30 30 75 38 20 3d 20  [src/main.sw:21:13] 100u8 = 
data_NonConfigurable_18 .bytes[72] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 32 3a 31 33 5d 20 73 74 64 3a 3a 69 64 65 6e 74 69 74 79 3a 3a 49 64 65 6e 74 69 74 79 3a 3a 41 64 64 72 65 73 73 28 41 64 64 72 65 73 73 3a 3a 7a 65 72 6f 28 29 29 20 3d 20  [src/main.sw:82:13] std::identity::Identity::Address(Address::zero()) = 
data_NonConfigurable_19 .bytes[8] 49 64 65 6e 74 69 74 79  Identity
data_NonConfigurable_20 .bytes[47] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 34 3a 31 33 5d 20 73 74 64 3a 3a 69 6e 70 75 74 73 3a 3a 49 6e 70 75 74 3a 3a 43 6f 69 6e 20 3d 20  [src/main.sw:84:13] std::inputs::Input::Coin = 
data_NonConfigurable_21 .bytes[4] 43 6f 69 6e  Coin
data_NonConfigurable_22 .bytes[8] 43 6f 6e 74 72 61 63 74  Contract
data_NonConfigurable_23 .bytes[7] 4d 65 73 73 61 67 65  Message
data_NonConfigurable_24 .bytes[130] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 38 36 3a 31 33 5d 20 73 74 64 3a 3a 6c 6f 77 5f 6c 65 76 65 6c 5f 63 61 6c 6c 3a 3a 43 61 6c 6c 50 61 72 61 6d 73 20 7b 0a 20 20 20 20 63 6f 69 6e 73 3a 20 31 2c 0a 20 20 20 20 61 73 73 65 74 5f 69 64 3a 20 73 74 64 3a 3a 61 73 73 65 74 5f 69 64 3a 3a 41 73 73 65 74 49 64 3a 3a 7a 65 72 6f 28 29 2c 0a 20 20 20 20 67 61 73 3a 20 32 2c 0a 7d 20 3d 20  [src/main.sw:86:13] std::low_level_call::CallParams {.    coins: 1,.    asset_id: std::asset_id::AssetId::zero(),.    gas: 2,.} = 
data_NonConfigurable_25 .bytes[10] 43 61 6c 6c 50 61 72 61 6d 73  CallParams
data_NonConfigurable_26 .bytes[5] 63 6f 69 6e 73  coins
data_NonConfigurable_27 .bytes[8] 61 73 73 65 74 5f 69 64  asset_id
data_NonConfigurable_28 .bytes[3] 67 61 73  gas
data_NonConfigurable_29 .bytes[32] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 32 3a 31 33 5d 20 75 38 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:22:13] u8::max() = 
data_NonConfigurable_30 .bytes[53] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 31 3a 31 33 5d 20 73 74 64 3a 3a 6f 70 74 69 6f 6e 3a 3a 4f 70 74 69 6f 6e 3a 3a 53 6f 6d 65 28 31 75 38 29 20 3d 20  [src/main.sw:91:13] std::option::Option::Some(1u8) = 
data_NonConfigurable_31 .bytes[4] 4e 6f 6e 65  None
data_NonConfigurable_32 .bytes[6] 4f 70 74 69 6f 6e  Option
data_NonConfigurable_33 .bytes[49] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 33 3a 31 33 5d 20 73 74 64 3a 3a 6f 75 74 70 75 74 73 3a 3a 4f 75 74 70 75 74 3a 3a 43 6f 69 6e 20 3d 20  [src/main.sw:93:13] std::outputs::Output::Coin = 
data_NonConfigurable_34 .bytes[6] 43 68 61 6e 67 65  Change
data_NonConfigurable_35 .bytes[8] 56 61 72 69 61 62 6c 65  Variable
data_NonConfigurable_36 .bytes[15] 43 6f 6e 74 72 61 63 74 43 72 65 61 74 65 64  ContractCreated
data_NonConfigurable_37 .bytes[26] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 34 3a 31 33 5d 20 66 28 29 20 3d 20  [src/main.sw:94:13] f() = 
data_NonConfigurable_38 .bytes[6] 52 65 73 75 6c 74  Result
data_NonConfigurable_39 .bytes[5] 68 65 6c 6c 6f  hello
data_NonConfigurable_40 .bytes[67] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 36 3a 31 33 5d 20 73 74 64 3a 3a 73 74 72 69 6e 67 3a 3a 53 74 72 69 6e 67 3a 3a 66 72 6f 6d 5f 61 73 63 69 69 5f 73 74 72 28 22 68 65 6c 6c 6f 22 29 20 3d 20  [src/main.sw:96:13] std::string::String::from_ascii_str("hello") = 
data_NonConfigurable_41 .bytes[51] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 37 3a 31 33 5d 20 73 74 64 3a 3a 74 78 3a 3a 54 72 61 6e 73 61 63 74 69 6f 6e 3a 3a 53 63 72 69 70 74 20 3d 20  [src/main.sw:97:13] std::tx::Transaction::Script = 
data_NonConfigurable_42 .bytes[6] 53 63 72 69 70 74  Script
data_NonConfigurable_43 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 34 3a 31 33 5d 20 75 31 36 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:24:13] u16::min() = 
data_NonConfigurable_44 .bytes[6] 43 72 65 61 74 65  Create
data_NonConfigurable_45 .bytes[4] 4d 69 6e 74  Mint
data_NonConfigurable_46 .bytes[7] 55 70 67 72 61 64 65  Upgrade
data_NonConfigurable_47 .bytes[6] 55 70 6c 6f 61 64  Upload
data_NonConfigurable_48 .bytes[4] 42 6c 6f 62  Blob
data_NonConfigurable_49 .bytes[46] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 39 39 3a 31 33 5d 20 73 74 64 3a 3a 75 31 32 38 3a 3a 55 31 32 38 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:99:13] std::u128::U128::zero() = 
data_NonConfigurable_50 .bytes[4] 55 31 32 38  U128
data_NonConfigurable_51 .bytes[5] 75 70 70 65 72  upper
data_NonConfigurable_52 .bytes[5] 6c 6f 77 65 72  lower
data_NonConfigurable_53 .bytes[61] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 30 30 3a 31 33 5d 20 73 74 64 3a 3a 75 31 32 38 3a 3a 55 31 32 38 45 72 72 6f 72 3a 3a 4c 6f 73 73 4f 66 50 72 65 63 69 73 69 6f 6e 20 3d 20  [src/main.sw:100:13] std::u128::U128Error::LossOfPrecision = 
data_NonConfigurable_54 .bytes[15] 4c 6f 73 73 4f 66 50 72 65 63 69 73 69 6f 6e  LossOfPrecision
data_NonConfigurable_55 .bytes[125] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 30 31 3a 31 33 5d 20 7b 0a 20 20 20 20 6c 65 74 20 6d 75 74 20 76 20 3d 20 73 74 64 3a 3a 76 65 63 3a 3a 56 65 63 3a 3a 6e 65 77 28 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 31 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 32 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 33 75 36 34 29 3b 0a 20 20 20 20 76 0a 7d 20 3d 20  [src/main.sw:101:13] {.    let mut v = std::vec::Vec::new();.    v.push(1u64);.    v.push(2u64);.    v.push(3u64);.    v.} = 
data_NonConfigurable_56 .bytes[132] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 30 38 3a 31 33 5d 20 7b 0a 20 20 20 20 6c 65 74 20 6d 75 74 20 76 20 3d 20 73 74 64 3a 3a 76 65 63 3a 3a 56 65 63 3a 3a 6e 65 77 28 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 31 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 32 75 36 34 29 3b 0a 20 20 20 20 76 2e 70 75 73 68 28 33 75 36 34 29 3b 0a 20 20 20 20 76 2e 69 74 65 72 28 29 0a 7d 20 3d 20  [src/main.sw:108:13] {.    let mut v = std::vec::Vec::new();.    v.push(1u64);.    v.push(2u64);.    v.push(3u64);.    v.iter().} = 
data_NonConfigurable_57 .bytes[7] 56 65 63 49 74 65 72  VecIter
data_NonConfigurable_58 .bytes[6] 76 61 6c 75 65 73  values
data_NonConfigurable_59 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 35 3a 31 33 5d 20 31 75 31 36 20 3d 20  [src/main.sw:25:13] 1u16 = 
data_NonConfigurable_60 .bytes[5] 69 6e 64 65 78  index
data_NonConfigurable_61 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 31 37 3a 35 5d 20 31 31 75 36 34 20 3d 20  [src/main.sw:117:5] 11u64 = 
data_NonConfigurable_62 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 35 3a 31 33 5d 20 74 72 75 65 20 3d 20  [src/main.sw:15:13] true = 
data_NonConfigurable_63 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 36 3a 31 33 5d 20 31 30 75 31 36 20 3d 20  [src/main.sw:26:13] 10u16 = 
data_NonConfigurable_64 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 37 3a 31 33 5d 20 31 30 30 75 31 36 20 3d 20  [src/main.sw:27:13] 100u16 = 
data_NonConfigurable_65 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 32 38 3a 31 33 5d 20 75 31 36 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:28:13] u16::max() = 
data_NonConfigurable_66 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 30 3a 31 33 5d 20 75 33 32 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:30:13] u32::min() = 
data_NonConfigurable_67 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 31 3a 31 33 5d 20 31 75 33 32 20 3d 20  [src/main.sw:31:13] 1u32 = 
data_NonConfigurable_68 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 32 3a 31 33 5d 20 31 30 75 33 32 20 3d 20  [src/main.sw:32:13] 10u32 = 
data_NonConfigurable_69 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 33 3a 31 33 5d 20 31 30 30 75 33 32 20 3d 20  [src/main.sw:33:13] 100u32 = 
data_NonConfigurable_70 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 34 3a 31 33 5d 20 75 33 32 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:34:13] u32::max() = 
data_NonConfigurable_71 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 36 3a 31 33 5d 20 75 36 34 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:36:13] u64::min() = 
data_NonConfigurable_72 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 37 3a 31 33 5d 20 31 75 36 34 20 3d 20  [src/main.sw:37:13] 1u64 = 
data_NonConfigurable_73 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 36 3a 31 33 5d 20 66 61 6c 73 65 20 3d 20  [src/main.sw:16:13] false = 
data_NonConfigurable_74 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 38 3a 31 33 5d 20 31 30 75 36 34 20 3d 20  [src/main.sw:38:13] 10u64 = 
data_NonConfigurable_75 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 33 39 3a 31 33 5d 20 31 30 30 75 36 34 20 3d 20  [src/main.sw:39:13] 100u64 = 
data_NonConfigurable_76 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 30 3a 31 33 5d 20 75 36 34 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:40:13] u64::max() = 
data_NonConfigurable_77 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 32 3a 31 33 5d 20 75 32 35 36 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:42:13] u256::min() = 
data_NonConfigurable_78 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................................
data_NonConfigurable_79 .bytes[28] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 33 3a 31 33 5d 20 31 75 32 35 36 20 3d 20  [src/main.sw:43:13] 1u256 = 
data_NonConfigurable_80 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0a  ................................
data_NonConfigurable_81 .bytes[29] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 34 3a 31 33 5d 20 31 30 75 32 35 36 20 3d 20  [src/main.sw:44:13] 10u256 = 
data_NonConfigurable_82 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64  ...............................d
data_NonConfigurable_83 .bytes[30] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 35 3a 31 33 5d 20 31 30 30 75 32 35 36 20 3d 20  [src/main.sw:45:13] 100u256 = 
data_NonConfigurable_84 .bytes[32] ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff  ................................
data_NonConfigurable_85 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 36 3a 31 33 5d 20 75 32 35 36 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:46:13] u256::max() = 
data_NonConfigurable_86 .bytes[32] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 38 3a 31 33 5d 20 75 38 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:18:13] u8::min() = 
data_NonConfigurable_87 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 38 3a 31 33 5d 20 62 32 35 36 3a 3a 6d 69 6e 28 29 20 3d 20  [src/main.sw:48:13] b256::min() = 
data_NonConfigurable_88 .bytes[34] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 34 39 3a 31 33 5d 20 62 32 35 36 3a 3a 6d 61 78 28 29 20 3d 20  [src/main.sw:49:13] b256::max() = 
data_NonConfigurable_89 .bytes[1] 41  A
data_NonConfigurable_90 .bytes[26] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 32 3a 31 33 5d 20 22 41 22 20 3d 20  [src/main.sw:52:13] "A" = 
data_NonConfigurable_91 .bytes[42] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 33 3a 31 33 5d 20 5f 5f 74 6f 5f 73 74 72 5f 61 72 72 61 79 28 22 41 22 29 20 3d 20  [src/main.sw:53:13] __to_str_array("A") = 
data_NonConfigurable_92 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 36 3a 31 33 5d 20 28 22 41 22 2c 20 30 75 38 29 20 3d 20  [src/main.sw:56:13] ("A", 0u8) = 
data_NonConfigurable_93 .bytes[0]  
data_NonConfigurable_94 .bytes[33] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 37 3a 31 33 5d 20 5b 30 75 38 2c 20 31 75 38 5d 20 3d 20  [src/main.sw:57:13] [0u8, 1u8] = 
data_NonConfigurable_95 .bytes[26] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 31 39 3a 31 33 5d 20 31 75 38 20 3d 20  [src/main.sw:19:13] 1u8 = 
data_NonConfigurable_96 .bytes[49] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 35 38 3a 31 33 5d 20 5f 5f 73 6c 69 63 65 28 26 5b 30 75 38 2c 20 31 75 38 5d 2c 20 30 2c 20 32 29 20 3d 20  [src/main.sw:58:13] __slice(&[0u8, 1u8], 0, 2) = 
data_NonConfigurable_97 .bytes[27] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 31 3a 31 33 5d 20 53 20 7b 7d 20 3d 20  [src/main.sw:61:13] S {} = 
data_NonConfigurable_98 .bytes[30] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 32 3a 31 33 5d 20 45 3a 3a 4e 6f 6e 65 20 3d 20  [src/main.sw:62:13] E::None = 
data_NonConfigurable_99 .bytes[36] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 33 3a 31 33 5d 20 45 3a 3a 53 6f 6d 65 28 53 20 7b 7d 29 20 3d 20  [src/main.sw:63:13] E::Some(S {}) = 
data_NonConfigurable_100 .bytes[52] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 36 3a 31 33 5d 20 73 74 64 3a 3a 61 64 64 72 65 73 73 3a 3a 41 64 64 72 65 73 73 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:66:13] std::address::Address::zero() = 
data_NonConfigurable_101 .bytes[53] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 37 3a 31 33 5d 20 73 74 64 3a 3a 61 73 73 65 74 5f 69 64 3a 3a 41 73 73 65 74 49 64 3a 3a 7a 65 72 6f 28 29 20 3d 20  [src/main.sw:67:13] std::asset_id::AssetId::zero() = 
data_NonConfigurable_102 .bytes[75] 5b 73 72 63 2f 6d 61 69 6e 2e 73 77 3a 36 38 3a 31 33 5d 20 73 74 64 3a 3a 61 75 74 68 3a 3a 41 75 74 68 45 72 72 6f 72 3a 3a 49 6e 70 75 74 73 4e 6f 74 41 6c 6c 4f 77 6e 65 64 42 79 53 61 6d 65 41 64 64 72 65 73 73 20 3d 20  [src/main.sw:68:13] std::auth::AuthError::InputsNotAllOwnedBySameAddress = 
data_NonConfigurable_103 .bytes[30] 49 6e 70 75 74 73 4e 6f 74 41 6c 6c 4f 77 6e 65 64 42 79 53 61 6d 65 41 64 64 72 65 73 73  InputsNotAllOwnedBySameAddress
data_NonConfigurable_104 .bytes[16] 43 61 6c 6c 65 72 49 73 49 6e 74 65 72 6e 61 6c  CallerIsInternal
data_NonConfigurable_105 .word 2
data_NonConfigurable_106 .word 4294967295
data_NonConfigurable_107 .word 18446744073709551615
data_NonConfigurable_108 .word 14757395258967588866
data_NonConfigurable_109 .bytes[4] 74 72 75 65  true
data_NonConfigurable_110 .bytes[5] 66 61 6c 73 65  false
data_NonConfigurable_111 .bytes[32] 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10  ................................
data_NonConfigurable_112 .bytes[1] 28  (
data_NonConfigurable_113 .bytes[1] 29  )
data_NonConfigurable_114 .bytes[1] 5b  [
data_NonConfigurable_115 .bytes[1] 5d  ]
data_NonConfigurable_116 .bytes[1] 53  S
data_NonConfigurable_117 .bytes[1] 20   
data_NonConfigurable_118 .bytes[1] 7d  }
data_NonConfigurable_119 .bytes[3] 20 7b 20   { 
data_NonConfigurable_120 .bytes[1] 45  E
data_NonConfigurable_121 .bytes[7] 41 64 64 72 65 73 73  Address
data_NonConfigurable_122 .bytes[7] 41 73 73 65 74 49 64  AssetId
data_NonConfigurable_123 .bytes[10] 43 6f 6e 74 72 61 63 74 49 64  ContractId
data_NonConfigurable_124 .word 4120
data_NonConfigurable_125 .word 3939


    [1;32mFinished[0m debug [unoptimized + fuel] target(s) [41.736 KB] in 2.08s
