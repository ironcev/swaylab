    [1;32mBuilding[0m /home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/
   [1;32mCompiling[0m library [1mstd[0m (/home/kebradalaonda/p/sway/sway-lib-std)
// IR: Initial
library {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
}

// IR: [globals-dce] Dead globals (functions and variables) elimination
library {
}

// IR: Final
library {
}

   [1;32mCompiling[0m script [1mplays[0m (/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue)
// IR: Initial
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        entry():
        v0 = call play_0(), !6
        v1 = const unit ()
        ret () v1
    }

    pub fn play_0() -> (), !10 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_1(), !13
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !14
        store v0 to v1, !14
        v2 = call new_5(), !17
        v3 = get_local ptr { [u8; 64] }, secp256k1, !18
        store v2 to v3, !18
        v4 = get_local ptr { [u8; 64] }, secp256k1, !19
        v5 = load v4
        v6 = get_local ptr { [u8; 64] }, secp256k1, !20
        v7 = load v6
        v8 = call eq_6(v5, v7), !23
        v9 = get_local ptr bool, _, !24
        store v8 to v9, !24
        v10 = get_local ptr { [u8; 64] }, secp256k1, !25
        v11 = load v10
        v12 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v13 = load v12
        v14 = call address_7(v11, v13), !29
        v15 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !30
        store v14 to v15, !30
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        v17 = load v16
        v18 = get_local ptr { { { u64, u64 }, u64 } }, message, !32
        v19 = load v18
        v20 = call address_7(v17, v19), !35
        v21 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !36
        store v20 to v21, !36
        v22 = const unit ()
        ret () v22
    }

    pub fn new_1() -> { { { u64, u64 }, u64 } }, !40 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !43
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !44
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !44
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !48 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_3(), !51
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !52
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !52
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !53
        store v6 to v5, !52
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_3() -> { u64, u64 }, !56 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !57
        v1 = call alloc_bytes_4(v0), !60
        v2 = get_local ptr { u64, u64 }, __anon_0, !61
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !61
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !62
        store v7 to v6, !61
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !64: u64) -> u64, !67 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !68 {
            aloc   size, !69
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !72 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !73
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !74
        store v4 to v3, !73
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !75
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !75
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !76: { [u8; 64] }, other !77: { [u8; 64] }) -> bool, !81 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !82
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !82
        v8 = const u64 64, !83
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !84 {
            meq    result r2 r3 r4, !85
        }
        ret bool v9
    }

    pub fn address_7(self !86: { [u8; 64] }, message !87: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !90 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64 } e
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = call recover_8(self, message), !93
        v1 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !94
        store v0 to v1, !94
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !91
        v5 = load v4
        v6 = const u64 0, !91
        v7 = call eq_15(v5, v6), !97
        cbr v7, block0(), block1(), !95

        block0():
        v8 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v9 = const u64 1
        v10 = const u64 0
        v11 = get_elem_ptr v8, ptr { { { u64, u64 }, u64 } }, v9, v10
        v12 = load v11
        v13 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !98
        store v12 to v13, !98
        v14 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !100
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !100
        v17 = const u64 0, !100
        store v17 to v16, !100
        v18 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !101
        v19 = load v18
        v20 = call sha256_24(v19), !104
        v21 = call from_23(v20), !107
        v22 = const u64 1
        v23 = const u64 0
        v24 = get_elem_ptr v14, ptr { b256 }, v22, v23, !100
        store v21 to v24, !100
        v25 = load v14
        br block5(v25)

        block1():
        v26 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !91
        v29 = load v28
        v30 = const u64 1, !91
        v31 = call eq_15(v29, v30), !110
        cbr v31, block2(), block3(), !108

        block2():
        v32 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v32, ptr { u64 }, v33, v34
        v36 = load v35
        v37 = get_local ptr { u64 }, e, !111
        store v36 to v37, !111
        v38 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !100
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !100
        v41 = const u64 1, !100
        store v41 to v40, !100
        v42 = get_local ptr { u64 }, e, !112
        v43 = load v42
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v38, ptr { u64 }, v44, v45, !100
        store v43 to v46, !100
        v47 = load v38
        br block4(v47)

        block3():
        v48 = const u64 14757395258967588866, !94
        revert v48, !94

        block4(v49: { u64, ( { b256 } | { u64 } ) }):
        br block5(v49)

        block5(v50: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v50
    }

    pub fn recover_8(self !113: { [u8; 64] }, message !114: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !117 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !100
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !100
        v3 = const u64 0, !100
        store v3 to v2, !100
        v4 = call try_into_17(message), !120
        v5 = call unwrap_14(v4), !123
        v6 = call from_9(v5), !126
        v7 = const u64 1
        v8 = const u64 0
        v9 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v7, v8, !100
        store v6 to v9, !100
        v10 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v10
    }

    pub fn from_9(bits !128: b256) -> { { { u64, u64 }, u64 } }, !131 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(bits: b256):
        v0 = call from_10(bits), !134
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !135
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !135
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn from_10(b !136: b256) -> { { u64, u64 }, u64 }, !139 {
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !140
        v1 = call with_capacity_11(v0), !143
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !144
        store v1 to v2, !144
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !145
        v6 = const u64 32, !146
        store v6 to v5, !145
        v7 = ptr_to_int b to u64, !147
        v8 = get_local ptr { { u64, u64 }, u64 }, bytes, !148
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !149
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !150
        v13 = load v12
        v14 = const u64 32, !151
        v15 = call copy_bytes_to_13(v7, v13, v14), !154
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !155
        v17 = load v16
        ret { { u64, u64 }, u64 } v17
    }

    pub fn with_capacity_11(capacity !156: u64) -> { { u64, u64 }, u64 }, !159 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_12(capacity), !162
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !163
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !163
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !164
        store v6 to v5, !163
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_12(capacity !165: u64) -> { u64, u64 }, !168 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_4(capacity), !171
        v1 = get_local ptr { u64, u64 }, __anon_0, !172
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !172
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !172
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !174: u64, dst !175: u64, count !176: u64) -> (), !179 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !180 {
            mcp    dst src len, !181
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !183: { u64, ( () | b256 ) }) -> b256, !186 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !187
        store self to v0, !187
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !188
        v4 = load v3
        v5 = const u64 1, !188
        v6 = call eq_15(v4, v5), !191
        cbr v6, block0(), block1(), !189

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !192
        store v11 to v12, !192
        v13 = get_local ptr b256, inner_value, !193
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !194
        v16 = call revert_16(v15), !197
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn eq_15(self !199: u64, other !200: u64) -> bool, !203 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !205: u64) -> never, !208 {
        entry(code: u64):
        revert code, !209
    }

    pub fn try_into_17(self !210: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !213 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !214
        v4 = load v3
        v5 = call len_20(v4), !217
        v6 = const u64 32, !218
        v7 = call neq_18(v5, v6), !221
        cbr v7, block0(), block1(), !219

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !222
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !222
        v11 = const u64 0, !222
        store v11 to v10, !222
        v12 = load v8
        ret { u64, ( () | b256 ) } v12, !223

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !222
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !222
        v18 = const u64 1, !222
        store v18 to v17, !222
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !214
        v23 = load v22
        v24 = call ptr_21(v23), !226
        v25 = asm(bits: v24) -> b256 bits, !227 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !222
        store v25 to v28, !222
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !228: u64, other !229: u64) -> bool, !232 {
        entry(self: u64, other: u64):
        v0 = call eq_15(self, other), !235
        v1 = call not_19(v0), !238
        ret bool v1
    }

    pub fn not_19(self !239: bool) -> bool, !242 {
        entry(self: bool):
        v0 = const bool false, !243
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !244: { { u64, u64 }, u64 }) -> u64, !247 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !248
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !249: { { u64, u64 }, u64 }) -> u64, !252 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !149
        v4 = load v3
        v5 = call ptr_22(v4), !255
        ret u64 v5
    }

    pub fn ptr_22(self !256: { u64, u64 }) -> u64, !259 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !150
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !261: b256) -> { b256 }, !264 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !265
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !265
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !267: { { { u64, u64 }, u64 } }) -> b256, !270 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !273
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !274
        store v0 to v1, !274
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !275
        v3 = call hash_26(s, v2), !278
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !279
        v5 = load v4
        v6 = call sha256_43(v5), !282
        ret b256 v6
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !285 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !288
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !289
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !289
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn hash_26(self !290: { { { u64, u64 }, u64 } }, state !291: ptr { { { u64, u64 }, u64 } }) -> (), !294 {
        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !295
        v4 = load v3
        v5 = call write_27(state, v4), !298
        v6 = const unit ()
        ret () v6
    }

    pub fn write_27(self !299: ptr { { { u64, u64 }, u64 } }, bytes !300: { { u64, u64 }, u64 }) -> (), !303 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !304
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !307
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !308: ptr { { u64, u64 }, u64 }, other !309: ptr { { u64, u64 }, u64 }) -> (), !312 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !315
        v2 = get_local ptr u64, other_len, !316
        store v1 to v2, !316
        v3 = get_local ptr u64, other_len, !317
        v4 = load v3
        v5 = const u64 0, !318
        v6 = call eq_15(v4, v5), !321
        cbr v6, block0(), block1(), !319

        block0():
        v7 = const unit (), !322
        ret () v7, !322

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !248
        v12 = load v11
        v13 = const u64 0, !323
        v14 = call eq_15(v12, v13), !326
        cbr v14, block3(), block4(), !324

        block3():
        v15 = load other
        store v15 to self, !327
        v16 = const unit (), !328
        ret () v16, !328

        block4():
        v17 = const unit ()
        br block5(v17)

        block5(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr self, ptr u64, v19, !248
        v21 = load v20
        v22 = get_local ptr u64, other_len, !329
        v23 = load v22
        v24 = call add_29(v21, v23), !332
        v25 = get_local ptr u64, both_len, !333
        store v24 to v25, !333
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !248
        v28 = load v27
        v29 = get_local ptr u64, other_start, !334
        store v28 to v29, !334
        v30 = const u64 0
        v31 = get_elem_ptr self, ptr { u64, u64 }, v30, !149
        v32 = load v31
        v33 = call capacity_31(v32), !337
        v34 = get_local ptr u64, both_len, !338
        v35 = load v34
        v36 = call lt_30(v33, v35), !341
        cbr v36, block6(), block7(), !339

        block6():
        v37 = const u64 0
        v38 = get_elem_ptr self, ptr { u64, u64 }, v37, !149
        v39 = load v38
        v40 = call ptr_22(v39), !344
        v41 = const u64 0
        v42 = get_elem_ptr self, ptr { u64, u64 }, v41, !149
        v43 = load v42
        v44 = call capacity_31(v43), !347
        v45 = get_local ptr u64, both_len, !348
        v46 = load v45
        v47 = call realloc_bytes_35(v40, v44, v46), !351
        v48 = get_local ptr u64, both_len, !352
        v49 = load v48
        v50 = call from_parts_32(v47, v49), !355
        v51 = get_local ptr slice, new_slice, !356
        store v50 to v51, !356
        v52 = get_local ptr slice, new_slice, !357
        v53 = load v52
        v54 = call from_37(v53), !360
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !361
        store v54 to v56, !361
        v57 = const unit ()
        br block8(v57)

        block7():
        v58 = const unit ()
        br block8(v58)

        block8(v59: ()):
        v60 = const u64 0
        v61 = get_elem_ptr self, ptr { u64, u64 }, v60, !149
        v62 = load v61
        v63 = call ptr_22(v62), !364
        v64 = get_local ptr u64, other_start, !365
        v65 = load v64
        v66 = call add_uint_offset_42(v63, v65), !368
        v67 = get_local ptr u64, new_ptr, !369
        store v66 to v67, !369
        v68 = load other
        v69 = call ptr_21(v68), !372
        v70 = get_local ptr u64, new_ptr, !373
        v71 = load v70
        v72 = get_local ptr u64, other_len, !374
        v73 = load v72
        v74 = call copy_bytes_to_13(v69, v71, v73), !377
        v75 = get_local ptr u64, both_len, !378
        v76 = load v75
        v77 = const u64 1
        v78 = get_elem_ptr self, ptr u64, v77, !379
        store v76 to v78, !379
        v79 = const unit ()
        ret () v79
    }

    pub fn add_29(self !380: u64, other !381: u64) -> u64, !384 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !385: u64, other !386: u64) -> bool, !389 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !390: { u64, u64 }) -> u64, !393 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !394
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !396: u64, count !397: u64) -> slice, !400 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !403
        v2 = get_local ptr { u64, u64 }, __anon_0, !404
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !404
        store ptr to v4, !404
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !404
        store v1 to v6, !404
        v7 = load v2
        v8 = call from_parts_33(v7), !407
        ret slice v8
    }

    fn from_parts_33(parts !408: { u64, u64 }) -> slice, !411 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !412 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !413: u64, other !414: u64) -> u64, !417 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !418: u64, count !419: u64, new_count !420: u64) -> u64, !423 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !426
        cbr v0, block0(), block4(), !424

        block0():
        v1 = call alloc_bytes_4(new_count), !429
        v2 = get_local ptr u64, new_ptr, !430
        store v1 to v2, !430
        v3 = const u64 0, !431
        v4 = call gt_36(count, v3), !434
        cbr v4, block1(), block2(), !432

        block1():
        v5 = get_local ptr u64, new_ptr, !435
        v6 = load v5
        v7 = call copy_bytes_to_13(ptr, v6, count), !438
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !439
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn gt_36(self !440: u64, other !441: u64) -> bool, !444 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !445: slice) -> { u64, u64 }, !448 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_38(slice), !451
        v1 = get_local ptr u64, cap, !452
        store v0 to v1, !452
        v2 = get_local ptr u64, cap, !453
        v3 = load v2
        v4 = call alloc_bytes_4(v3), !456
        v5 = get_local ptr u64, ptr, !457
        store v4 to v5, !457
        v6 = get_local ptr u64, cap, !458
        v7 = load v6
        v8 = const u64 0, !459
        v9 = call gt_36(v7, v8), !462
        cbr v9, block0(), block1(), !460

        block0():
        v10 = call ptr_41(slice), !465
        v11 = get_local ptr u64, ptr, !466
        v12 = load v11
        v13 = get_local ptr u64, cap, !467
        v14 = load v13
        v15 = call copy_to_40(v10, v12, v14), !470
        v16 = const unit ()
        br block2(v16)

        block1():
        v17 = const unit ()
        br block2(v17)

        block2(v18: ()):
        v19 = get_local ptr u64, ptr, !471
        v20 = load v19
        v21 = get_local ptr u64, cap, !472
        v22 = load v21
        v23 = get_local ptr { u64, u64 }, __anon_0, !473
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v20 to v25, !473
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v22 to v27, !473
        v28 = load v23
        ret { u64, u64 } v28
    }

    pub fn number_of_bytes_38(self !474: slice) -> u64, !477 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !480
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !481
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !482: slice) -> { u64, u64 }, !485 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !486 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !487: u64, dst !488: u64, count !489: u64) -> (), !492 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !495
        v2 = get_local ptr u64, len, !496
        store v1 to v2, !496
        v3 = get_local ptr u64, len, !497
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !498 {
            mcp    dst src len, !499
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn ptr_41(self !500: slice) -> u64, !503 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !506
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !507
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !508: u64, offset !509: u64) -> u64, !512 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !513 {
            add    new ptr offset, !514
        }
        ret u64 v0
    }

    pub fn sha256_43(self !515: { { { u64, u64 }, u64 } }) -> b256, !518 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_44(), !521
        v1 = get_local ptr b256, result_buffer, !522
        store v0 to v1, !522
        v2 = get_local ptr b256, result_buffer, !523
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !304
        v7 = load v6
        v8 = call ptr_21(v7), !526
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !304
        v13 = load v12
        v14 = call len_20(v13), !529
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !530 {
            s256   hash ptr bytes, !531
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !535 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !536
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = (!4 !5)
!7 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!8 = span !7 972 1177
!9 = fn_name_span !7 979 983
!10 = (!8 !9)
!11 = span !7 1006 1020
!12 = fn_call_path_span !7 1006 1018
!13 = (!11 !12)
!14 = span !7 992 1021
!15 = span !7 1042 1058
!16 = fn_call_path_span !7 1042 1056
!17 = (!15 !16)
!18 = span !7 1026 1059
!19 = span !7 1072 1081
!20 = span !7 1085 1094
!21 = span !7 1072 1094
!22 = fn_call_path_span !7 1082 1084
!23 = (!21 !22)
!24 = span !7 1064 1095
!25 = span !7 1108 1117
!26 = span !7 1126 1133
!27 = span !7 1108 1134
!28 = fn_call_path_span !7 1118 1125
!29 = (!27 !28)
!30 = span !7 1100 1135
!31 = span !7 1148 1157
!32 = span !7 1166 1173
!33 = span !7 1148 1174
!34 = fn_call_path_span !7 1158 1165
!35 = (!33 !34)
!36 = span !7 1140 1175
!37 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!38 = span !37 718 804
!39 = fn_name_span !37 725 728
!40 = (!38 !39)
!41 = span !37 775 787
!42 = fn_call_path_span !37 775 785
!43 = (!41 !42)
!44 = span !37 749 798
!45 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!46 = span !45 3024 3131
!47 = fn_name_span !45 3031 3034
!48 = (!46 !47)
!49 = span !45 3079 3094
!50 = fn_call_path_span !45 3079 3092
!51 = (!49 !50)
!52 = span !45 3055 3125
!53 = span !45 3113 3114
!54 = span !45 503 609
!55 = fn_name_span !45 510 513
!56 = (!54 !55)
!57 = span !45 570 571
!58 = span !45 558 572
!59 = fn_call_path_span !45 558 569
!60 = (!58 !59)
!61 = span !45 534 603
!62 = span !45 591 592
!63 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!64 = span !63 3286 3291
!65 = span !63 3267 3380
!66 = fn_name_span !63 3274 3285
!67 = (!65 !66)
!68 = span !63 3315 3378
!69 = span !63 3342 3351
!70 = span !7 258 340
!71 = fn_name_span !7 265 268
!72 = (!70 !71)
!73 = span !7 314 323
!74 = span !7 315 318
!75 = span !7 289 334
!76 = span !7 805 809
!77 = span !7 811 816
!78 = span !7 799 968
!79 = fn_name_span !7 802 804
!80 = inline "never"
!81 = (!78 !79 !80)
!82 = span !7 218 232
!83 = span !7 889 891
!84 = span !7 842 962
!85 = span !7 907 926
!86 = span !7 507 511
!87 = span !7 513 520
!88 = span !7 492 714
!89 = fn_name_span !7 499 506
!90 = (!88 !89)
!91 = span !7 582 603
!92 = fn_call_path_span !7 587 594
!93 = (!91 !92)
!94 = span !7 576 708
!95 = span !7 618 668
!96 = fn_call_path_span !7 618 668
!97 = (!95 !96)
!98 = span !7 621 628
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!100 = span !99 1815 1933
!101 = span !7 657 664
!102 = span !7 650 665
!103 = fn_call_path_span !7 650 656
!104 = (!102 !103)
!105 = span !7 636 666
!106 = fn_call_path_span !7 636 649
!107 = (!105 !106)
!108 = span !7 681 698
!109 = fn_call_path_span !7 681 698
!110 = (!108 !109)
!111 = span !7 685 686
!112 = span !7 695 696
!113 = span !7 361 365
!114 = span !7 367 374
!115 = span !7 346 486
!116 = fn_name_span !7 353 360
!117 = (!115 !116)
!118 = span !7 451 469
!119 = fn_call_path_span !7 459 467
!120 = (!118 !119)
!121 = span !7 451 478
!122 = fn_call_path_span !7 470 476
!123 = (!121 !122)
!124 = span !7 435 479
!125 = fn_call_path_span !7 435 450
!126 = (!124 !125)
!127 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!128 = span !127 3077 3081
!129 = span !127 3069 3167
!130 = fn_name_span !127 3072 3076
!131 = (!129 !130)
!132 = span !127 3133 3150
!133 = fn_call_path_span !127 3133 3144
!134 = (!132 !133)
!135 = span !127 3107 3161
!136 = span !45 28831 28832
!137 = span !45 28823 29132
!138 = fn_name_span !45 28826 28830
!139 = (!137 !138)
!140 = span !45 28953 28955
!141 = span !45 28933 28956
!142 = fn_call_path_span !45 28933 28952
!143 = (!141 !142)
!144 = span !45 28917 28957
!145 = span !45 28966 28980
!146 = span !45 28978 28980
!147 = span !45 29065 29077
!148 = span !45 29092 29097
!149 = span !45 2445 2458
!150 = span !45 400 412
!151 = span !45 29107 29109
!152 = span !45 29065 29110
!153 = fn_call_path_span !45 29078 29091
!154 = (!152 !153)
!155 = span !45 29121 29126
!156 = span !45 4100 4108
!157 = span !45 4079 4227
!158 = fn_name_span !45 4086 4099
!159 = (!157 !158)
!160 = span !45 4157 4190
!161 = fn_call_path_span !45 4157 4180
!162 = (!160 !161)
!163 = span !45 4133 4221
!164 = span !45 4209 4210
!165 = span !45 806 814
!166 = span !45 785 928
!167 = fn_name_span !45 792 805
!168 = (!166 !167)
!169 = span !45 863 884
!170 = fn_call_path_span !45 863 874
!171 = (!169 !170)
!172 = span !45 839 922
!173 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!174 = span !173 5960 5964
!175 = span !173 5966 5969
!176 = span !173 5977 5982
!177 = span !173 5939 6083
!178 = fn_name_span !173 5946 5959
!179 = (!177 !178)
!180 = span !173 5999 6076
!181 = span !173 6050 6065
!182 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!183 = span !182 4952 4956
!184 = span !182 4938 5081
!185 = fn_name_span !182 4945 4951
!186 = (!184 !185)
!187 = span !182 4973 5075
!188 = span !182 4979 4983
!189 = span !182 4998 5037
!190 = fn_call_path_span !182 4998 5037
!191 = (!189 !190)
!192 = span !182 5009 5020
!193 = span !182 5025 5036
!194 = span !182 5062 5063
!195 = span !182 5055 5064
!196 = fn_call_path_span !182 5055 5061
!197 = (!195 !196)
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!199 = span !198 16751 16755
!200 = span !198 16757 16762
!201 = span !198 16745 16811
!202 = fn_name_span !198 16748 16750
!203 = (!201 !202)
!204 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!205 = span !204 735 739
!206 = span !204 721 773
!207 = fn_name_span !204 728 734
!208 = (!206 !207)
!209 = span !204 757 771
!210 = span !37 1538 1542
!211 = span !37 1526 1716
!212 = fn_name_span !37 1529 1537
!213 = (!211 !212)
!214 = span !37 329 341
!215 = span !37 1573 1589
!216 = fn_call_path_span !37 1584 1587
!217 = (!215 !216)
!218 = span !37 1593 1595
!219 = span !37 1573 1595
!220 = fn_call_path_span !37 1590 1592
!221 = (!219 !220)
!222 = span !182 2461 2560
!223 = span !37 1610 1621
!224 = span !37 1657 1673
!225 = fn_call_path_span !37 1668 1671
!226 = (!224 !225)
!227 = span !37 1647 1709
!228 = span !198 15477 15481
!229 = span !198 15483 15488
!230 = span !198 15470 15542
!231 = fn_name_span !198 15473 15476
!232 = (!230 !231)
!233 = span !198 15515 15529
!234 = fn_call_path_span !198 15520 15522
!235 = (!233 !234)
!236 = span !198 15514 15536
!237 = fn_call_path_span !198 15531 15534
!238 = (!236 !237)
!239 = span !198 12498 12502
!240 = span !198 12491 12545
!241 = fn_name_span !198 12494 12497
!242 = (!240 !241)
!243 = span !198 12533 12538
!244 = span !45 13782 13786
!245 = span !45 13771 13819
!246 = fn_name_span !45 13778 13781
!247 = (!245 !246)
!248 = span !45 2506 2514
!249 = span !45 15186 15190
!250 = span !45 15175 15233
!251 = fn_name_span !45 15182 15185
!252 = (!250 !251)
!253 = span !45 15213 15227
!254 = fn_call_path_span !45 15222 15225
!255 = (!253 !254)
!256 = span !45 989 993
!257 = span !45 978 1030
!258 = fn_name_span !45 985 988
!259 = (!257 !258)
!260 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!261 = span !260 2340 2344
!262 = span !260 2332 2389
!263 = fn_name_span !260 2335 2339
!264 = (!262 !263)
!265 = span !260 2370 2383
!266 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!267 = span !266 9026 9027
!268 = span !266 9009 9138
!269 = fn_name_span !266 9016 9022
!270 = (!268 !269 !80)
!271 = span !266 9082 9095
!272 = fn_call_path_span !266 9082 9093
!273 = (!271 !272)
!274 = span !266 9065 9096
!275 = span !266 9108 9114
!276 = span !266 9101 9115
!277 = fn_call_path_span !266 9103 9107
!278 = (!276 !277)
!279 = span !266 9121 9127
!280 = span !266 9121 9136
!281 = fn_call_path_span !266 9128 9134
!282 = (!280 !281)
!283 = span !266 177 263
!284 = fn_name_span !266 184 187
!285 = (!283 !284)
!286 = span !266 234 246
!287 = fn_call_path_span !266 234 244
!288 = (!286 !287)
!289 = span !266 208 257
!290 = span !127 5084 5088
!291 = span !127 5098 5103
!292 = span !127 5076 5153
!293 = fn_name_span !127 5079 5083
!294 = (!292 !293)
!295 = span !127 524 536
!296 = span !127 5123 5146
!297 = fn_call_path_span !127 5129 5134
!298 = (!296 !297)
!299 = span !266 335 339
!300 = span !266 341 346
!301 = span !266 314 396
!302 = fn_name_span !266 321 326
!303 = (!301 !302)
!304 = span !266 142 154
!305 = span !266 365 389
!306 = fn_call_path_span !266 376 382
!307 = (!305 !306)
!308 = span !45 18345 18349
!309 = span !45 18359 18364
!310 = span !45 18323 19270
!311 = fn_name_span !45 18330 18336
!312 = (!310 !311)
!313 = span !45 18398 18409
!314 = fn_call_path_span !45 18404 18407
!315 = (!313 !314)
!316 = span !45 18382 18410
!317 = span !45 18422 18431
!318 = span !45 18435 18436
!319 = span !45 18422 18436
!320 = fn_call_path_span !45 18432 18434
!321 = (!319 !320)
!322 = span !45 18451 18457
!323 = span !45 18572 18573
!324 = span !45 18560 18573
!325 = fn_call_path_span !45 18569 18571
!326 = (!324 !325)
!327 = span !45 18588 18600
!328 = span !45 18614 18620
!329 = span !45 18668 18677
!330 = span !45 18657 18677
!331 = fn_call_path_span !45 18666 18667
!332 = (!330 !331)
!333 = span !45 18642 18678
!334 = span !45 18687 18714
!335 = span !45 18808 18827
!336 = fn_call_path_span !45 18817 18825
!337 = (!335 !336)
!338 = span !45 18830 18838
!339 = span !45 18808 18838
!340 = fn_call_path_span !45 18828 18829
!341 = (!339 !340)
!342 = span !45 18928 18942
!343 = fn_call_path_span !45 18937 18940
!344 = (!342 !343)
!345 = span !45 18944 18963
!346 = fn_call_path_span !45 18953 18961
!347 = (!345 !346)
!348 = span !45 18965 18973
!349 = span !45 18914 18974
!350 = fn_call_path_span !45 18914 18927
!351 = (!349 !350)
!352 = span !45 18992 19000
!353 = span !45 18869 19015
!354 = fn_call_path_span !45 18869 18890
!355 = (!353 !354)
!356 = span !45 18853 19016
!357 = span !45 19055 19064
!358 = span !45 19040 19065
!359 = fn_call_path_span !45 19040 19054
!360 = (!358 !359)
!361 = span !45 19029 19065
!362 = span !45 19100 19114
!363 = fn_call_path_span !45 19109 19112
!364 = (!362 !363)
!365 = span !45 19131 19142
!366 = span !45 19100 19143
!367 = fn_call_path_span !45 19115 19130
!368 = (!366 !367)
!369 = span !45 19086 19144
!370 = span !45 19153 19164
!371 = fn_call_path_span !45 19159 19162
!372 = (!370 !371)
!373 = span !45 19179 19186
!374 = span !45 19188 19197
!375 = span !45 19153 19198
!376 = fn_call_path_span !45 19165 19178
!377 = (!375 !376)
!378 = span !45 19255 19263
!379 = span !45 19244 19263
!380 = span !198 1239 1243
!381 = span !198 1245 1250
!382 = span !198 1232 1300
!383 = fn_name_span !198 1235 1238
!384 = (!382 !383)
!385 = span !198 20651 20655
!386 = span !198 20657 20662
!387 = span !198 20645 20711
!388 = fn_name_span !198 20648 20650
!389 = (!387 !388)
!390 = span !45 1097 1101
!391 = span !45 1081 1134
!392 = fn_name_span !45 1088 1096
!393 = (!391 !392)
!394 = span !45 418 426
!395 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!396 = span !395 2307 2310
!397 = span !395 2321 2326
!398 = span !395 2286 2400
!399 = fn_name_span !395 2293 2303
!400 = (!398 !399)
!401 = span !395 2368 2392
!402 = fn_call_path_span !395 2374 2375
!403 = (!401 !402)
!404 = span !395 2362 2393
!405 = span !395 2351 2394
!406 = fn_call_path_span !395 2351 2361
!407 = (!405 !406)
!408 = span !395 1206 1211
!409 = span !395 1192 1296
!410 = fn_name_span !395 1195 1205
!411 = (!409 !410)
!412 = span !395 1248 1294
!413 = span !198 6993 6997
!414 = span !198 6999 7004
!415 = span !198 6981 7054
!416 = fn_name_span !198 6984 6992
!417 = (!415 !416)
!418 = span !63 4106 4109
!419 = span !63 4120 4125
!420 = span !63 4132 4141
!421 = span !63 4085 4362
!422 = fn_name_span !63 4092 4105
!423 = (!421 !422)
!424 = span !63 4168 4185
!425 = fn_call_path_span !63 4178 4179
!426 = (!424 !425)
!427 = span !63 4210 4232
!428 = fn_call_path_span !63 4210 4221
!429 = (!427 !428)
!430 = span !63 4196 4233
!431 = span !63 4253 4254
!432 = span !63 4245 4254
!433 = fn_call_path_span !63 4251 4252
!434 = (!432 !433)
!435 = span !63 4287 4294
!436 = span !63 4269 4302
!437 = fn_call_path_span !63 4273 4286
!438 = (!436 !437)
!439 = span !63 4322 4329
!440 = span !198 20580 20584
!441 = span !198 20586 20591
!442 = span !198 20574 20640
!443 = fn_name_span !198 20577 20579
!444 = (!442 !443)
!445 = span !45 2084 2089
!446 = span !45 2076 2302
!447 = fn_name_span !45 2079 2083
!448 = (!446 !447)
!449 = span !45 2130 2153
!450 = fn_call_path_span !45 2136 2151
!451 = (!449 !450)
!452 = span !45 2120 2154
!453 = span !45 2185 2188
!454 = span !45 2173 2189
!455 = fn_call_path_span !45 2173 2184
!456 = (!454 !455)
!457 = span !45 2163 2190
!458 = span !45 2202 2205
!459 = span !45 2208 2209
!460 = span !45 2202 2209
!461 = fn_call_path_span !45 2206 2207
!462 = (!460 !461)
!463 = span !45 2224 2235
!464 = fn_call_path_span !45 2230 2233
!465 = (!463 !464)
!466 = span !45 2250 2253
!467 = span !45 2255 2258
!468 = span !45 2224 2259
!469 = fn_call_path_span !45 2236 2243
!470 = (!468 !469)
!471 = span !45 2286 2289
!472 = span !45 2291 2294
!473 = span !45 2279 2296
!474 = span !395 3936 3940
!475 = span !395 3913 3983
!476 = fn_name_span !395 3920 3935
!477 = (!475 !476)
!478 = span !395 3959 3975
!479 = fn_call_path_span !395 3959 3969
!480 = (!478 !479)
!481 = span !395 3976 3977
!482 = span !395 1582 1587
!483 = span !395 1568 1677
!484 = fn_name_span !395 1571 1581
!485 = (!483 !484)
!486 = span !395 1624 1675
!487 = span !173 3364 3368
!488 = span !173 3370 3373
!489 = span !173 3381 3386
!490 = span !173 3346 3529
!491 = fn_name_span !173 3353 3360
!492 = (!490 !491)
!493 = span !173 3413 3437
!494 = fn_call_path_span !173 3419 3420
!495 = (!493 !494)
!496 = span !173 3403 3438
!497 = span !173 3477 3480
!498 = span !173 3447 3522
!499 = span !173 3496 3511
!500 = span !395 2884 2888
!501 = span !395 2873 2935
!502 = fn_name_span !395 2880 2883
!503 = (!501 !502)
!504 = span !395 2911 2927
!505 = fn_call_path_span !395 2911 2921
!506 = (!504 !505)
!507 = span !395 2928 2929
!508 = span !173 6684 6688
!509 = span !173 6690 6696
!510 = span !173 6661 6831
!511 = fn_name_span !173 6668 6683
!512 = (!510 !511)
!513 = span !173 6721 6825
!514 = span !173 6771 6789
!515 = span !266 416 420
!516 = span !266 402 678
!517 = fn_name_span !266 409 415
!518 = (!516 !517)
!519 = span !266 464 475
!520 = fn_call_path_span !266 464 473
!521 = (!519 !520)
!522 = span !266 440 476
!523 = span !266 508 521
!524 = span !266 540 556
!525 = fn_call_path_span !266 551 554
!526 = (!524 !525)
!527 = span !266 577 593
!528 = fn_call_path_span !266 588 591
!529 = (!527 !528)
!530 = span !266 485 672
!531 = span !266 619 638
!532 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!533 = span !532 7873 7976
!534 = fn_name_span !532 7880 7883
!535 = (!533 !534)
!536 = span !532 7904 7970

// IR: [mem2reg] Promotion of memory to SSA registers
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        entry():
        v0 = call play_0(), !6
        v1 = const unit ()
        ret () v1
    }

    pub fn play_0() -> (), !10 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_1(), !13
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !14
        store v0 to v1, !14
        v2 = call new_5(), !17
        v3 = get_local ptr { [u8; 64] }, secp256k1, !18
        store v2 to v3, !18
        v4 = get_local ptr { [u8; 64] }, secp256k1, !19
        v5 = load v4
        v6 = get_local ptr { [u8; 64] }, secp256k1, !20
        v7 = load v6
        v8 = call eq_6(v5, v7), !23
        v9 = get_local ptr bool, _, !24
        v10 = get_local ptr { [u8; 64] }, secp256k1, !25
        v11 = load v10
        v12 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v13 = load v12
        v14 = call address_7(v11, v13), !29
        v15 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !30
        store v14 to v15, !30
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        v17 = load v16
        v18 = get_local ptr { { { u64, u64 }, u64 } }, message, !32
        v19 = load v18
        v20 = call address_7(v17, v19), !35
        v21 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !36
        store v20 to v21, !36
        v22 = const unit ()
        ret () v22
    }

    pub fn new_1() -> { { { u64, u64 }, u64 } }, !40 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !43
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !44
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !44
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !48 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_3(), !51
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !52
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !52
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !53
        store v6 to v5, !52
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_3() -> { u64, u64 }, !56 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !57
        v1 = call alloc_bytes_4(v0), !60
        v2 = get_local ptr { u64, u64 }, __anon_0, !61
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !61
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !62
        store v7 to v6, !61
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !64: u64) -> u64, !67 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !68 {
            aloc   size, !69
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !72 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !73
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !74
        store v4 to v3, !73
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !75
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !75
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !76: { [u8; 64] }, other !77: { [u8; 64] }) -> bool, !81 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !82
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !82
        v8 = const u64 64, !83
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !84 {
            meq    result r2 r3 r4, !85
        }
        ret bool v9
    }

    pub fn address_7(self !86: { [u8; 64] }, message !87: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !90 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64 } e
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = call recover_8(self, message), !93
        v1 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !94
        store v0 to v1, !94
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !91
        v5 = load v4
        v6 = const u64 0, !91
        v7 = call eq_15(v5, v6), !97
        cbr v7, block0(), block1(), !95

        block0():
        v8 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v9 = const u64 1
        v10 = const u64 0
        v11 = get_elem_ptr v8, ptr { { { u64, u64 }, u64 } }, v9, v10
        v12 = load v11
        v13 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !98
        store v12 to v13, !98
        v14 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !100
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !100
        v17 = const u64 0, !100
        store v17 to v16, !100
        v18 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !101
        v19 = load v18
        v20 = call sha256_24(v19), !104
        v21 = call from_23(v20), !107
        v22 = const u64 1
        v23 = const u64 0
        v24 = get_elem_ptr v14, ptr { b256 }, v22, v23, !100
        store v21 to v24, !100
        v25 = load v14
        br block5(v25)

        block1():
        v26 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !91
        v29 = load v28
        v30 = const u64 1, !91
        v31 = call eq_15(v29, v30), !110
        cbr v31, block2(), block3(), !108

        block2():
        v32 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v32, ptr { u64 }, v33, v34
        v36 = load v35
        v37 = get_local ptr { u64 }, e, !111
        store v36 to v37, !111
        v38 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !100
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !100
        v41 = const u64 1, !100
        store v41 to v40, !100
        v42 = get_local ptr { u64 }, e, !112
        v43 = load v42
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v38, ptr { u64 }, v44, v45, !100
        store v43 to v46, !100
        v47 = load v38
        br block4(v47)

        block3():
        v48 = const u64 14757395258967588866, !94
        revert v48, !94

        block4(v49: { u64, ( { b256 } | { u64 } ) }):
        br block5(v49)

        block5(v50: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v50
    }

    pub fn recover_8(self !113: { [u8; 64] }, message !114: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !117 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !100
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !100
        v3 = const u64 0, !100
        store v3 to v2, !100
        v4 = call try_into_17(message), !120
        v5 = call unwrap_14(v4), !123
        v6 = call from_9(v5), !126
        v7 = const u64 1
        v8 = const u64 0
        v9 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v7, v8, !100
        store v6 to v9, !100
        v10 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v10
    }

    pub fn from_9(bits !128: b256) -> { { { u64, u64 }, u64 } }, !131 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(bits: b256):
        v0 = call from_10(bits), !134
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !135
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !135
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn from_10(b !136: b256) -> { { u64, u64 }, u64 }, !139 {
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !140
        v1 = call with_capacity_11(v0), !143
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !144
        store v1 to v2, !144
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !145
        v6 = const u64 32, !146
        store v6 to v5, !145
        v7 = ptr_to_int b to u64, !147
        v8 = get_local ptr { { u64, u64 }, u64 }, bytes, !148
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !149
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !150
        v13 = load v12
        v14 = const u64 32, !151
        v15 = call copy_bytes_to_13(v7, v13, v14), !154
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !155
        v17 = load v16
        ret { { u64, u64 }, u64 } v17
    }

    pub fn with_capacity_11(capacity !156: u64) -> { { u64, u64 }, u64 }, !159 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_12(capacity), !162
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !163
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !163
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !164
        store v6 to v5, !163
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_12(capacity !165: u64) -> { u64, u64 }, !168 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_4(capacity), !171
        v1 = get_local ptr { u64, u64 }, __anon_0, !172
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !172
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !172
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !174: u64, dst !175: u64, count !176: u64) -> (), !179 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !180 {
            mcp    dst src len, !181
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !183: { u64, ( () | b256 ) }) -> b256, !186 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !187
        store self to v0, !187
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !188
        v4 = load v3
        v5 = const u64 1, !188
        v6 = call eq_15(v4, v5), !191
        cbr v6, block0(), block1(), !189

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !192
        store v11 to v12, !192
        v13 = get_local ptr b256, inner_value, !193
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !194
        v16 = call revert_16(v15), !197
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn eq_15(self !199: u64, other !200: u64) -> bool, !203 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !205: u64) -> never, !208 {
        entry(code: u64):
        revert code, !209
    }

    pub fn try_into_17(self !210: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !213 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !214
        v4 = load v3
        v5 = call len_20(v4), !217
        v6 = const u64 32, !218
        v7 = call neq_18(v5, v6), !221
        cbr v7, block0(), block1(), !219

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !222
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !222
        v11 = const u64 0, !222
        store v11 to v10, !222
        v12 = load v8
        ret { u64, ( () | b256 ) } v12, !223

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !222
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !222
        v18 = const u64 1, !222
        store v18 to v17, !222
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !214
        v23 = load v22
        v24 = call ptr_21(v23), !226
        v25 = asm(bits: v24) -> b256 bits, !227 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !222
        store v25 to v28, !222
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !228: u64, other !229: u64) -> bool, !232 {
        entry(self: u64, other: u64):
        v0 = call eq_15(self, other), !235
        v1 = call not_19(v0), !238
        ret bool v1
    }

    pub fn not_19(self !239: bool) -> bool, !242 {
        entry(self: bool):
        v0 = const bool false, !243
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !244: { { u64, u64 }, u64 }) -> u64, !247 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !248
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !249: { { u64, u64 }, u64 }) -> u64, !252 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !149
        v4 = load v3
        v5 = call ptr_22(v4), !255
        ret u64 v5
    }

    pub fn ptr_22(self !256: { u64, u64 }) -> u64, !259 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !150
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !261: b256) -> { b256 }, !264 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !265
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !265
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !267: { { { u64, u64 }, u64 } }) -> b256, !270 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !273
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !274
        store v0 to v1, !274
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !275
        v3 = call hash_26(s, v2), !278
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !279
        v5 = load v4
        v6 = call sha256_43(v5), !282
        ret b256 v6
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !285 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !288
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !289
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !289
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn hash_26(self !290: { { { u64, u64 }, u64 } }, state !291: ptr { { { u64, u64 }, u64 } }) -> (), !294 {
        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !295
        v4 = load v3
        v5 = call write_27(state, v4), !298
        v6 = const unit ()
        ret () v6
    }

    pub fn write_27(self !299: ptr { { { u64, u64 }, u64 } }, bytes !300: { { u64, u64 }, u64 }) -> (), !303 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !304
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !307
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !308: ptr { { u64, u64 }, u64 }, other !309: ptr { { u64, u64 }, u64 }) -> (), !312 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !315
        v2 = get_local ptr u64, other_len, !316
        v3 = get_local ptr u64, other_len, !317
        v4 = const u64 0, !318
        v5 = call eq_15(v1, v4), !321
        cbr v5, block0(), block1(), !319

        block0():
        v6 = const unit (), !322
        ret () v6, !322

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !248
        v11 = load v10
        v12 = const u64 0, !323
        v13 = call eq_15(v11, v12), !326
        cbr v13, block3(), block4(), !324

        block3():
        v14 = load other
        store v14 to self, !327
        v15 = const unit (), !328
        ret () v15, !328

        block4():
        v16 = const unit ()
        br block5(v16)

        block5(v17: ()):
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !248
        v20 = load v19
        v21 = get_local ptr u64, other_len, !329
        v22 = call add_29(v20, v1), !332
        v23 = get_local ptr u64, both_len, !333
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !248
        v26 = load v25
        v27 = get_local ptr u64, other_start, !334
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr { u64, u64 }, v28, !149
        v30 = load v29
        v31 = call capacity_31(v30), !337
        v32 = get_local ptr u64, both_len, !338
        v33 = call lt_30(v31, v22), !341
        cbr v33, block6(), block7(), !339

        block6():
        v34 = const u64 0
        v35 = get_elem_ptr self, ptr { u64, u64 }, v34, !149
        v36 = load v35
        v37 = call ptr_22(v36), !344
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !149
        v40 = load v39
        v41 = call capacity_31(v40), !347
        v42 = get_local ptr u64, both_len, !348
        v43 = call realloc_bytes_35(v37, v41, v22), !351
        v44 = get_local ptr u64, both_len, !352
        v45 = call from_parts_32(v43, v22), !355
        v46 = get_local ptr slice, new_slice, !356
        store v45 to v46, !356
        v47 = get_local ptr slice, new_slice, !357
        v48 = load v47
        v49 = call from_37(v48), !360
        v50 = const u64 0
        v51 = get_elem_ptr self, ptr { u64, u64 }, v50, !361
        store v49 to v51, !361
        v52 = const unit ()
        br block8(v52)

        block7():
        v53 = const unit ()
        br block8(v53)

        block8(v54: ()):
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !149
        v57 = load v56
        v58 = call ptr_22(v57), !364
        v59 = get_local ptr u64, other_start, !365
        v60 = call add_uint_offset_42(v58, v26), !368
        v61 = get_local ptr u64, new_ptr, !369
        v62 = load other
        v63 = call ptr_21(v62), !372
        v64 = get_local ptr u64, new_ptr, !373
        v65 = get_local ptr u64, other_len, !374
        v66 = call copy_bytes_to_13(v63, v60, v1), !377
        v67 = get_local ptr u64, both_len, !378
        v68 = const u64 1
        v69 = get_elem_ptr self, ptr u64, v68, !379
        store v22 to v69, !379
        v70 = const unit ()
        ret () v70
    }

    pub fn add_29(self !380: u64, other !381: u64) -> u64, !384 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !385: u64, other !386: u64) -> bool, !389 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !390: { u64, u64 }) -> u64, !393 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !394
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !396: u64, count !397: u64) -> slice, !400 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !403
        v2 = get_local ptr { u64, u64 }, __anon_0, !404
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !404
        store ptr to v4, !404
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !404
        store v1 to v6, !404
        v7 = load v2
        v8 = call from_parts_33(v7), !407
        ret slice v8
    }

    fn from_parts_33(parts !408: { u64, u64 }) -> slice, !411 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !412 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !413: u64, other !414: u64) -> u64, !417 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !418: u64, count !419: u64, new_count !420: u64) -> u64, !423 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !426
        cbr v0, block0(), block4(), !424

        block0():
        v1 = call alloc_bytes_4(new_count), !429
        v2 = get_local ptr u64, new_ptr, !430
        v3 = const u64 0, !431
        v4 = call gt_36(count, v3), !434
        cbr v4, block1(), block2(), !432

        block1():
        v5 = get_local ptr u64, new_ptr, !435
        v6 = call copy_bytes_to_13(ptr, v1, count), !438
        v7 = const unit ()
        br block3(v7)

        block2():
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !439
        br block5(v1)

        block4():
        br block5(ptr)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !440: u64, other !441: u64) -> bool, !444 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !445: slice) -> { u64, u64 }, !448 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_38(slice), !451
        v1 = get_local ptr u64, cap, !452
        v2 = get_local ptr u64, cap, !453
        v3 = call alloc_bytes_4(v0), !456
        v4 = get_local ptr u64, ptr, !457
        v5 = get_local ptr u64, cap, !458
        v6 = const u64 0, !459
        v7 = call gt_36(v0, v6), !462
        cbr v7, block0(), block1(), !460

        block0():
        v8 = call ptr_41(slice), !465
        v9 = get_local ptr u64, ptr, !466
        v10 = get_local ptr u64, cap, !467
        v11 = call copy_to_40(v8, v3, v0), !470
        v12 = const unit ()
        br block2(v12)

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr u64, ptr, !471
        v16 = get_local ptr u64, cap, !472
        v17 = get_local ptr { u64, u64 }, __anon_0, !473
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v3 to v19, !473
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20
        store v0 to v21, !473
        v22 = load v17
        ret { u64, u64 } v22
    }

    pub fn number_of_bytes_38(self !474: slice) -> u64, !477 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !480
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !481
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !482: slice) -> { u64, u64 }, !485 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !486 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !487: u64, dst !488: u64, count !489: u64) -> (), !492 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !495
        v2 = get_local ptr u64, len, !496
        v3 = get_local ptr u64, len, !497
        v4 = asm(dst: dst, src: self, len: v1) -> (), !498 {
            mcp    dst src len, !499
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn ptr_41(self !500: slice) -> u64, !503 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !506
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !507
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !508: u64, offset !509: u64) -> u64, !512 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !513 {
            add    new ptr offset, !514
        }
        ret u64 v0
    }

    pub fn sha256_43(self !515: { { { u64, u64 }, u64 } }) -> b256, !518 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_44(), !521
        v1 = get_local ptr b256, result_buffer, !522
        store v0 to v1, !522
        v2 = get_local ptr b256, result_buffer, !523
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !304
        v7 = load v6
        v8 = call ptr_21(v7), !526
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !304
        v13 = load v12
        v14 = call len_20(v13), !529
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !530 {
            s256   hash ptr bytes, !531
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !535 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !536
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = (!4 !5)
!7 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!8 = span !7 972 1177
!9 = fn_name_span !7 979 983
!10 = (!8 !9)
!11 = span !7 1006 1020
!12 = fn_call_path_span !7 1006 1018
!13 = (!11 !12)
!14 = span !7 992 1021
!15 = span !7 1042 1058
!16 = fn_call_path_span !7 1042 1056
!17 = (!15 !16)
!18 = span !7 1026 1059
!19 = span !7 1072 1081
!20 = span !7 1085 1094
!21 = span !7 1072 1094
!22 = fn_call_path_span !7 1082 1084
!23 = (!21 !22)
!24 = span !7 1064 1095
!25 = span !7 1108 1117
!26 = span !7 1126 1133
!27 = span !7 1108 1134
!28 = fn_call_path_span !7 1118 1125
!29 = (!27 !28)
!30 = span !7 1100 1135
!31 = span !7 1148 1157
!32 = span !7 1166 1173
!33 = span !7 1148 1174
!34 = fn_call_path_span !7 1158 1165
!35 = (!33 !34)
!36 = span !7 1140 1175
!37 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!38 = span !37 718 804
!39 = fn_name_span !37 725 728
!40 = (!38 !39)
!41 = span !37 775 787
!42 = fn_call_path_span !37 775 785
!43 = (!41 !42)
!44 = span !37 749 798
!45 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!46 = span !45 3024 3131
!47 = fn_name_span !45 3031 3034
!48 = (!46 !47)
!49 = span !45 3079 3094
!50 = fn_call_path_span !45 3079 3092
!51 = (!49 !50)
!52 = span !45 3055 3125
!53 = span !45 3113 3114
!54 = span !45 503 609
!55 = fn_name_span !45 510 513
!56 = (!54 !55)
!57 = span !45 570 571
!58 = span !45 558 572
!59 = fn_call_path_span !45 558 569
!60 = (!58 !59)
!61 = span !45 534 603
!62 = span !45 591 592
!63 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!64 = span !63 3286 3291
!65 = span !63 3267 3380
!66 = fn_name_span !63 3274 3285
!67 = (!65 !66)
!68 = span !63 3315 3378
!69 = span !63 3342 3351
!70 = span !7 258 340
!71 = fn_name_span !7 265 268
!72 = (!70 !71)
!73 = span !7 314 323
!74 = span !7 315 318
!75 = span !7 289 334
!76 = span !7 805 809
!77 = span !7 811 816
!78 = span !7 799 968
!79 = fn_name_span !7 802 804
!80 = inline "never"
!81 = (!78 !79 !80)
!82 = span !7 218 232
!83 = span !7 889 891
!84 = span !7 842 962
!85 = span !7 907 926
!86 = span !7 507 511
!87 = span !7 513 520
!88 = span !7 492 714
!89 = fn_name_span !7 499 506
!90 = (!88 !89)
!91 = span !7 582 603
!92 = fn_call_path_span !7 587 594
!93 = (!91 !92)
!94 = span !7 576 708
!95 = span !7 618 668
!96 = fn_call_path_span !7 618 668
!97 = (!95 !96)
!98 = span !7 621 628
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!100 = span !99 1815 1933
!101 = span !7 657 664
!102 = span !7 650 665
!103 = fn_call_path_span !7 650 656
!104 = (!102 !103)
!105 = span !7 636 666
!106 = fn_call_path_span !7 636 649
!107 = (!105 !106)
!108 = span !7 681 698
!109 = fn_call_path_span !7 681 698
!110 = (!108 !109)
!111 = span !7 685 686
!112 = span !7 695 696
!113 = span !7 361 365
!114 = span !7 367 374
!115 = span !7 346 486
!116 = fn_name_span !7 353 360
!117 = (!115 !116)
!118 = span !7 451 469
!119 = fn_call_path_span !7 459 467
!120 = (!118 !119)
!121 = span !7 451 478
!122 = fn_call_path_span !7 470 476
!123 = (!121 !122)
!124 = span !7 435 479
!125 = fn_call_path_span !7 435 450
!126 = (!124 !125)
!127 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!128 = span !127 3077 3081
!129 = span !127 3069 3167
!130 = fn_name_span !127 3072 3076
!131 = (!129 !130)
!132 = span !127 3133 3150
!133 = fn_call_path_span !127 3133 3144
!134 = (!132 !133)
!135 = span !127 3107 3161
!136 = span !45 28831 28832
!137 = span !45 28823 29132
!138 = fn_name_span !45 28826 28830
!139 = (!137 !138)
!140 = span !45 28953 28955
!141 = span !45 28933 28956
!142 = fn_call_path_span !45 28933 28952
!143 = (!141 !142)
!144 = span !45 28917 28957
!145 = span !45 28966 28980
!146 = span !45 28978 28980
!147 = span !45 29065 29077
!148 = span !45 29092 29097
!149 = span !45 2445 2458
!150 = span !45 400 412
!151 = span !45 29107 29109
!152 = span !45 29065 29110
!153 = fn_call_path_span !45 29078 29091
!154 = (!152 !153)
!155 = span !45 29121 29126
!156 = span !45 4100 4108
!157 = span !45 4079 4227
!158 = fn_name_span !45 4086 4099
!159 = (!157 !158)
!160 = span !45 4157 4190
!161 = fn_call_path_span !45 4157 4180
!162 = (!160 !161)
!163 = span !45 4133 4221
!164 = span !45 4209 4210
!165 = span !45 806 814
!166 = span !45 785 928
!167 = fn_name_span !45 792 805
!168 = (!166 !167)
!169 = span !45 863 884
!170 = fn_call_path_span !45 863 874
!171 = (!169 !170)
!172 = span !45 839 922
!173 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!174 = span !173 5960 5964
!175 = span !173 5966 5969
!176 = span !173 5977 5982
!177 = span !173 5939 6083
!178 = fn_name_span !173 5946 5959
!179 = (!177 !178)
!180 = span !173 5999 6076
!181 = span !173 6050 6065
!182 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!183 = span !182 4952 4956
!184 = span !182 4938 5081
!185 = fn_name_span !182 4945 4951
!186 = (!184 !185)
!187 = span !182 4973 5075
!188 = span !182 4979 4983
!189 = span !182 4998 5037
!190 = fn_call_path_span !182 4998 5037
!191 = (!189 !190)
!192 = span !182 5009 5020
!193 = span !182 5025 5036
!194 = span !182 5062 5063
!195 = span !182 5055 5064
!196 = fn_call_path_span !182 5055 5061
!197 = (!195 !196)
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!199 = span !198 16751 16755
!200 = span !198 16757 16762
!201 = span !198 16745 16811
!202 = fn_name_span !198 16748 16750
!203 = (!201 !202)
!204 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!205 = span !204 735 739
!206 = span !204 721 773
!207 = fn_name_span !204 728 734
!208 = (!206 !207)
!209 = span !204 757 771
!210 = span !37 1538 1542
!211 = span !37 1526 1716
!212 = fn_name_span !37 1529 1537
!213 = (!211 !212)
!214 = span !37 329 341
!215 = span !37 1573 1589
!216 = fn_call_path_span !37 1584 1587
!217 = (!215 !216)
!218 = span !37 1593 1595
!219 = span !37 1573 1595
!220 = fn_call_path_span !37 1590 1592
!221 = (!219 !220)
!222 = span !182 2461 2560
!223 = span !37 1610 1621
!224 = span !37 1657 1673
!225 = fn_call_path_span !37 1668 1671
!226 = (!224 !225)
!227 = span !37 1647 1709
!228 = span !198 15477 15481
!229 = span !198 15483 15488
!230 = span !198 15470 15542
!231 = fn_name_span !198 15473 15476
!232 = (!230 !231)
!233 = span !198 15515 15529
!234 = fn_call_path_span !198 15520 15522
!235 = (!233 !234)
!236 = span !198 15514 15536
!237 = fn_call_path_span !198 15531 15534
!238 = (!236 !237)
!239 = span !198 12498 12502
!240 = span !198 12491 12545
!241 = fn_name_span !198 12494 12497
!242 = (!240 !241)
!243 = span !198 12533 12538
!244 = span !45 13782 13786
!245 = span !45 13771 13819
!246 = fn_name_span !45 13778 13781
!247 = (!245 !246)
!248 = span !45 2506 2514
!249 = span !45 15186 15190
!250 = span !45 15175 15233
!251 = fn_name_span !45 15182 15185
!252 = (!250 !251)
!253 = span !45 15213 15227
!254 = fn_call_path_span !45 15222 15225
!255 = (!253 !254)
!256 = span !45 989 993
!257 = span !45 978 1030
!258 = fn_name_span !45 985 988
!259 = (!257 !258)
!260 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!261 = span !260 2340 2344
!262 = span !260 2332 2389
!263 = fn_name_span !260 2335 2339
!264 = (!262 !263)
!265 = span !260 2370 2383
!266 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!267 = span !266 9026 9027
!268 = span !266 9009 9138
!269 = fn_name_span !266 9016 9022
!270 = (!268 !269 !80)
!271 = span !266 9082 9095
!272 = fn_call_path_span !266 9082 9093
!273 = (!271 !272)
!274 = span !266 9065 9096
!275 = span !266 9108 9114
!276 = span !266 9101 9115
!277 = fn_call_path_span !266 9103 9107
!278 = (!276 !277)
!279 = span !266 9121 9127
!280 = span !266 9121 9136
!281 = fn_call_path_span !266 9128 9134
!282 = (!280 !281)
!283 = span !266 177 263
!284 = fn_name_span !266 184 187
!285 = (!283 !284)
!286 = span !266 234 246
!287 = fn_call_path_span !266 234 244
!288 = (!286 !287)
!289 = span !266 208 257
!290 = span !127 5084 5088
!291 = span !127 5098 5103
!292 = span !127 5076 5153
!293 = fn_name_span !127 5079 5083
!294 = (!292 !293)
!295 = span !127 524 536
!296 = span !127 5123 5146
!297 = fn_call_path_span !127 5129 5134
!298 = (!296 !297)
!299 = span !266 335 339
!300 = span !266 341 346
!301 = span !266 314 396
!302 = fn_name_span !266 321 326
!303 = (!301 !302)
!304 = span !266 142 154
!305 = span !266 365 389
!306 = fn_call_path_span !266 376 382
!307 = (!305 !306)
!308 = span !45 18345 18349
!309 = span !45 18359 18364
!310 = span !45 18323 19270
!311 = fn_name_span !45 18330 18336
!312 = (!310 !311)
!313 = span !45 18398 18409
!314 = fn_call_path_span !45 18404 18407
!315 = (!313 !314)
!316 = span !45 18382 18410
!317 = span !45 18422 18431
!318 = span !45 18435 18436
!319 = span !45 18422 18436
!320 = fn_call_path_span !45 18432 18434
!321 = (!319 !320)
!322 = span !45 18451 18457
!323 = span !45 18572 18573
!324 = span !45 18560 18573
!325 = fn_call_path_span !45 18569 18571
!326 = (!324 !325)
!327 = span !45 18588 18600
!328 = span !45 18614 18620
!329 = span !45 18668 18677
!330 = span !45 18657 18677
!331 = fn_call_path_span !45 18666 18667
!332 = (!330 !331)
!333 = span !45 18642 18678
!334 = span !45 18687 18714
!335 = span !45 18808 18827
!336 = fn_call_path_span !45 18817 18825
!337 = (!335 !336)
!338 = span !45 18830 18838
!339 = span !45 18808 18838
!340 = fn_call_path_span !45 18828 18829
!341 = (!339 !340)
!342 = span !45 18928 18942
!343 = fn_call_path_span !45 18937 18940
!344 = (!342 !343)
!345 = span !45 18944 18963
!346 = fn_call_path_span !45 18953 18961
!347 = (!345 !346)
!348 = span !45 18965 18973
!349 = span !45 18914 18974
!350 = fn_call_path_span !45 18914 18927
!351 = (!349 !350)
!352 = span !45 18992 19000
!353 = span !45 18869 19015
!354 = fn_call_path_span !45 18869 18890
!355 = (!353 !354)
!356 = span !45 18853 19016
!357 = span !45 19055 19064
!358 = span !45 19040 19065
!359 = fn_call_path_span !45 19040 19054
!360 = (!358 !359)
!361 = span !45 19029 19065
!362 = span !45 19100 19114
!363 = fn_call_path_span !45 19109 19112
!364 = (!362 !363)
!365 = span !45 19131 19142
!366 = span !45 19100 19143
!367 = fn_call_path_span !45 19115 19130
!368 = (!366 !367)
!369 = span !45 19086 19144
!370 = span !45 19153 19164
!371 = fn_call_path_span !45 19159 19162
!372 = (!370 !371)
!373 = span !45 19179 19186
!374 = span !45 19188 19197
!375 = span !45 19153 19198
!376 = fn_call_path_span !45 19165 19178
!377 = (!375 !376)
!378 = span !45 19255 19263
!379 = span !45 19244 19263
!380 = span !198 1239 1243
!381 = span !198 1245 1250
!382 = span !198 1232 1300
!383 = fn_name_span !198 1235 1238
!384 = (!382 !383)
!385 = span !198 20651 20655
!386 = span !198 20657 20662
!387 = span !198 20645 20711
!388 = fn_name_span !198 20648 20650
!389 = (!387 !388)
!390 = span !45 1097 1101
!391 = span !45 1081 1134
!392 = fn_name_span !45 1088 1096
!393 = (!391 !392)
!394 = span !45 418 426
!395 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!396 = span !395 2307 2310
!397 = span !395 2321 2326
!398 = span !395 2286 2400
!399 = fn_name_span !395 2293 2303
!400 = (!398 !399)
!401 = span !395 2368 2392
!402 = fn_call_path_span !395 2374 2375
!403 = (!401 !402)
!404 = span !395 2362 2393
!405 = span !395 2351 2394
!406 = fn_call_path_span !395 2351 2361
!407 = (!405 !406)
!408 = span !395 1206 1211
!409 = span !395 1192 1296
!410 = fn_name_span !395 1195 1205
!411 = (!409 !410)
!412 = span !395 1248 1294
!413 = span !198 6993 6997
!414 = span !198 6999 7004
!415 = span !198 6981 7054
!416 = fn_name_span !198 6984 6992
!417 = (!415 !416)
!418 = span !63 4106 4109
!419 = span !63 4120 4125
!420 = span !63 4132 4141
!421 = span !63 4085 4362
!422 = fn_name_span !63 4092 4105
!423 = (!421 !422)
!424 = span !63 4168 4185
!425 = fn_call_path_span !63 4178 4179
!426 = (!424 !425)
!427 = span !63 4210 4232
!428 = fn_call_path_span !63 4210 4221
!429 = (!427 !428)
!430 = span !63 4196 4233
!431 = span !63 4253 4254
!432 = span !63 4245 4254
!433 = fn_call_path_span !63 4251 4252
!434 = (!432 !433)
!435 = span !63 4287 4294
!436 = span !63 4269 4302
!437 = fn_call_path_span !63 4273 4286
!438 = (!436 !437)
!439 = span !63 4322 4329
!440 = span !198 20580 20584
!441 = span !198 20586 20591
!442 = span !198 20574 20640
!443 = fn_name_span !198 20577 20579
!444 = (!442 !443)
!445 = span !45 2084 2089
!446 = span !45 2076 2302
!447 = fn_name_span !45 2079 2083
!448 = (!446 !447)
!449 = span !45 2130 2153
!450 = fn_call_path_span !45 2136 2151
!451 = (!449 !450)
!452 = span !45 2120 2154
!453 = span !45 2185 2188
!454 = span !45 2173 2189
!455 = fn_call_path_span !45 2173 2184
!456 = (!454 !455)
!457 = span !45 2163 2190
!458 = span !45 2202 2205
!459 = span !45 2208 2209
!460 = span !45 2202 2209
!461 = fn_call_path_span !45 2206 2207
!462 = (!460 !461)
!463 = span !45 2224 2235
!464 = fn_call_path_span !45 2230 2233
!465 = (!463 !464)
!466 = span !45 2250 2253
!467 = span !45 2255 2258
!468 = span !45 2224 2259
!469 = fn_call_path_span !45 2236 2243
!470 = (!468 !469)
!471 = span !45 2286 2289
!472 = span !45 2291 2294
!473 = span !45 2279 2296
!474 = span !395 3936 3940
!475 = span !395 3913 3983
!476 = fn_name_span !395 3920 3935
!477 = (!475 !476)
!478 = span !395 3959 3975
!479 = fn_call_path_span !395 3959 3969
!480 = (!478 !479)
!481 = span !395 3976 3977
!482 = span !395 1582 1587
!483 = span !395 1568 1677
!484 = fn_name_span !395 1571 1581
!485 = (!483 !484)
!486 = span !395 1624 1675
!487 = span !173 3364 3368
!488 = span !173 3370 3373
!489 = span !173 3381 3386
!490 = span !173 3346 3529
!491 = fn_name_span !173 3353 3360
!492 = (!490 !491)
!493 = span !173 3413 3437
!494 = fn_call_path_span !173 3419 3420
!495 = (!493 !494)
!496 = span !173 3403 3438
!497 = span !173 3477 3480
!498 = span !173 3447 3522
!499 = span !173 3496 3511
!500 = span !395 2884 2888
!501 = span !395 2873 2935
!502 = fn_name_span !395 2880 2883
!503 = (!501 !502)
!504 = span !395 2911 2927
!505 = fn_call_path_span !395 2911 2921
!506 = (!504 !505)
!507 = span !395 2928 2929
!508 = span !173 6684 6688
!509 = span !173 6690 6696
!510 = span !173 6661 6831
!511 = fn_name_span !173 6668 6683
!512 = (!510 !511)
!513 = span !173 6721 6825
!514 = span !173 6771 6789
!515 = span !266 416 420
!516 = span !266 402 678
!517 = fn_name_span !266 409 415
!518 = (!516 !517)
!519 = span !266 464 475
!520 = fn_call_path_span !266 464 473
!521 = (!519 !520)
!522 = span !266 440 476
!523 = span !266 508 521
!524 = span !266 540 556
!525 = fn_call_path_span !266 551 554
!526 = (!524 !525)
!527 = span !266 577 593
!528 = fn_call_path_span !266 588 591
!529 = (!527 !528)
!530 = span !266 485 672
!531 = span !266 619 638
!532 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!533 = span !532 7873 7976
!534 = fn_name_span !532 7880 7883
!535 = (!533 !534)
!536 = span !532 7904 7970

// IR: [fn-dedup-release] Function deduplication with metadata ignored
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        entry():
        v0 = call play_0(), !6
        v1 = const unit ()
        ret () v1
    }

    pub fn play_0() -> (), !10 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !13
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !14
        store v0 to v1, !14
        v2 = call new_5(), !17
        v3 = get_local ptr { [u8; 64] }, secp256k1, !18
        store v2 to v3, !18
        v4 = get_local ptr { [u8; 64] }, secp256k1, !19
        v5 = load v4
        v6 = get_local ptr { [u8; 64] }, secp256k1, !20
        v7 = load v6
        v8 = call eq_6(v5, v7), !23
        v9 = get_local ptr bool, _, !24
        v10 = get_local ptr { [u8; 64] }, secp256k1, !25
        v11 = load v10
        v12 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v13 = load v12
        v14 = call address_7(v11, v13), !29
        v15 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !30
        store v14 to v15, !30
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        v17 = load v16
        v18 = get_local ptr { { { u64, u64 }, u64 } }, message, !32
        v19 = load v18
        v20 = call address_7(v17, v19), !35
        v21 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !36
        store v20 to v21, !36
        v22 = const unit ()
        ret () v22
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !40 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_3(), !43
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !44
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !44
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !45
        store v6 to v5, !44
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_3() -> { u64, u64 }, !48 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !49
        v1 = call alloc_bytes_4(v0), !52
        v2 = get_local ptr { u64, u64 }, __anon_0, !53
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !53
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !54
        store v7 to v6, !53
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !56: u64) -> u64, !59 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !60 {
            aloc   size, !61
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !64 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !65
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !66
        store v4 to v3, !65
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !67
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !67
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !68: { [u8; 64] }, other !69: { [u8; 64] }) -> bool, !73 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !74
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !74
        v8 = const u64 64, !75
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !76 {
            meq    result r2 r3 r4, !77
        }
        ret bool v9
    }

    pub fn address_7(self !78: { [u8; 64] }, message !79: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !82 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64 } e
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = call recover_8(self, message), !85
        v1 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !86
        store v0 to v1, !86
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !83
        v5 = load v4
        v6 = const u64 0, !83
        v7 = call eq_15(v5, v6), !89
        cbr v7, block0(), block1(), !87

        block0():
        v8 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v9 = const u64 1
        v10 = const u64 0
        v11 = get_elem_ptr v8, ptr { { { u64, u64 }, u64 } }, v9, v10
        v12 = load v11
        v13 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !90
        store v12 to v13, !90
        v14 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !92
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !92
        v17 = const u64 0, !92
        store v17 to v16, !92
        v18 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !93
        v19 = load v18
        v20 = call sha256_24(v19), !96
        v21 = call from_23(v20), !99
        v22 = const u64 1
        v23 = const u64 0
        v24 = get_elem_ptr v14, ptr { b256 }, v22, v23, !92
        store v21 to v24, !92
        v25 = load v14
        br block5(v25)

        block1():
        v26 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !83
        v29 = load v28
        v30 = const u64 1, !83
        v31 = call eq_15(v29, v30), !102
        cbr v31, block2(), block3(), !100

        block2():
        v32 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v32, ptr { u64 }, v33, v34
        v36 = load v35
        v37 = get_local ptr { u64 }, e, !103
        store v36 to v37, !103
        v38 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !92
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !92
        v41 = const u64 1, !92
        store v41 to v40, !92
        v42 = get_local ptr { u64 }, e, !104
        v43 = load v42
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v38, ptr { u64 }, v44, v45, !92
        store v43 to v46, !92
        v47 = load v38
        br block4(v47)

        block3():
        v48 = const u64 14757395258967588866, !86
        revert v48, !86

        block4(v49: { u64, ( { b256 } | { u64 } ) }):
        br block5(v49)

        block5(v50: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v50
    }

    pub fn recover_8(self !105: { [u8; 64] }, message !106: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !109 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !92
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !92
        v3 = const u64 0, !92
        store v3 to v2, !92
        v4 = call try_into_17(message), !112
        v5 = call unwrap_14(v4), !115
        v6 = call from_9(v5), !118
        v7 = const u64 1
        v8 = const u64 0
        v9 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v7, v8, !92
        store v6 to v9, !92
        v10 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v10
    }

    pub fn from_9(bits !120: b256) -> { { { u64, u64 }, u64 } }, !123 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(bits: b256):
        v0 = call from_10(bits), !126
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !127
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !127
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn from_10(b !128: b256) -> { { u64, u64 }, u64 }, !131 {
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !132
        v1 = call with_capacity_11(v0), !135
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !136
        store v1 to v2, !136
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !137
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !137
        v6 = const u64 32, !138
        store v6 to v5, !137
        v7 = ptr_to_int b to u64, !139
        v8 = get_local ptr { { u64, u64 }, u64 }, bytes, !140
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !141
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !142
        v13 = load v12
        v14 = const u64 32, !143
        v15 = call copy_bytes_to_13(v7, v13, v14), !146
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !147
        v17 = load v16
        ret { { u64, u64 }, u64 } v17
    }

    pub fn with_capacity_11(capacity !148: u64) -> { { u64, u64 }, u64 }, !151 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_12(capacity), !154
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !155
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !155
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !156
        store v6 to v5, !155
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_12(capacity !157: u64) -> { u64, u64 }, !160 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_4(capacity), !163
        v1 = get_local ptr { u64, u64 }, __anon_0, !164
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !164
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !164
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !166: u64, dst !167: u64, count !168: u64) -> (), !171 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !172 {
            mcp    dst src len, !173
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !175: { u64, ( () | b256 ) }) -> b256, !178 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !179
        store self to v0, !179
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !180
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !180
        v4 = load v3
        v5 = const u64 1, !180
        v6 = call eq_15(v4, v5), !183
        cbr v6, block0(), block1(), !181

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !180
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !184
        store v11 to v12, !184
        v13 = get_local ptr b256, inner_value, !185
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !186
        v16 = call revert_16(v15), !189
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn eq_15(self !191: u64, other !192: u64) -> bool, !195 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !197: u64) -> never, !200 {
        entry(code: u64):
        revert code, !201
    }

    pub fn try_into_17(self !203: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !206 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !207
        v4 = load v3
        v5 = call len_20(v4), !210
        v6 = const u64 32, !211
        v7 = call neq_18(v5, v6), !214
        cbr v7, block0(), block1(), !212

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !215
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !215
        v11 = const u64 0, !215
        store v11 to v10, !215
        v12 = load v8
        ret { u64, ( () | b256 ) } v12, !216

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !215
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !215
        v18 = const u64 1, !215
        store v18 to v17, !215
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !207
        v23 = load v22
        v24 = call ptr_21(v23), !219
        v25 = asm(bits: v24) -> b256 bits, !220 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !215
        store v25 to v28, !215
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !221: u64, other !222: u64) -> bool, !225 {
        entry(self: u64, other: u64):
        v0 = call eq_15(self, other), !228
        v1 = call not_19(v0), !231
        ret bool v1
    }

    pub fn not_19(self !232: bool) -> bool, !235 {
        entry(self: bool):
        v0 = const bool false, !236
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !237: { { u64, u64 }, u64 }) -> u64, !240 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !242: { { u64, u64 }, u64 }) -> u64, !245 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !141
        v4 = load v3
        v5 = call ptr_22(v4), !248
        ret u64 v5
    }

    pub fn ptr_22(self !249: { u64, u64 }) -> u64, !252 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !142
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !254: b256) -> { b256 }, !257 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !258
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !258
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !260: { { { u64, u64 }, u64 } }) -> b256, !263 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !266
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !267
        store v0 to v1, !267
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !268
        v3 = call hash_26(s, v2), !271
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !272
        v5 = load v4
        v6 = call sha256_43(v5), !275
        ret b256 v6
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !278 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !281
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !282
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !282
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn hash_26(self !283: { { { u64, u64 }, u64 } }, state !284: ptr { { { u64, u64 }, u64 } }) -> (), !287 {
        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !288
        v4 = load v3
        v5 = call write_27(state, v4), !291
        v6 = const unit ()
        ret () v6
    }

    pub fn write_27(self !292: ptr { { { u64, u64 }, u64 } }, bytes !293: { { u64, u64 }, u64 }) -> (), !296 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !297
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !300
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !301: ptr { { u64, u64 }, u64 }, other !302: ptr { { u64, u64 }, u64 }) -> (), !305 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !308
        v2 = get_local ptr u64, other_len, !309
        v3 = get_local ptr u64, other_len, !310
        v4 = const u64 0, !311
        v5 = call eq_15(v1, v4), !314
        cbr v5, block0(), block1(), !312

        block0():
        v6 = const unit (), !315
        ret () v6, !315

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !241
        v11 = load v10
        v12 = const u64 0, !316
        v13 = call eq_15(v11, v12), !319
        cbr v13, block3(), block4(), !317

        block3():
        v14 = load other
        store v14 to self, !320
        v15 = const unit (), !321
        ret () v15, !321

        block4():
        v16 = const unit ()
        br block5(v16)

        block5(v17: ()):
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !241
        v20 = load v19
        v21 = get_local ptr u64, other_len, !322
        v22 = call add_29(v20, v1), !325
        v23 = get_local ptr u64, both_len, !326
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !241
        v26 = load v25
        v27 = get_local ptr u64, other_start, !327
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr { u64, u64 }, v28, !141
        v30 = load v29
        v31 = call capacity_31(v30), !330
        v32 = get_local ptr u64, both_len, !331
        v33 = call lt_30(v31, v22), !334
        cbr v33, block6(), block7(), !332

        block6():
        v34 = const u64 0
        v35 = get_elem_ptr self, ptr { u64, u64 }, v34, !141
        v36 = load v35
        v37 = call ptr_22(v36), !337
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !141
        v40 = load v39
        v41 = call capacity_31(v40), !340
        v42 = get_local ptr u64, both_len, !341
        v43 = call realloc_bytes_35(v37, v41, v22), !344
        v44 = get_local ptr u64, both_len, !345
        v45 = call from_parts_32(v43, v22), !348
        v46 = get_local ptr slice, new_slice, !349
        store v45 to v46, !349
        v47 = get_local ptr slice, new_slice, !350
        v48 = load v47
        v49 = call from_37(v48), !353
        v50 = const u64 0
        v51 = get_elem_ptr self, ptr { u64, u64 }, v50, !354
        store v49 to v51, !354
        v52 = const unit ()
        br block8(v52)

        block7():
        v53 = const unit ()
        br block8(v53)

        block8(v54: ()):
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !141
        v57 = load v56
        v58 = call ptr_22(v57), !357
        v59 = get_local ptr u64, other_start, !358
        v60 = call add_uint_offset_42(v58, v26), !361
        v61 = get_local ptr u64, new_ptr, !362
        v62 = load other
        v63 = call ptr_21(v62), !365
        v64 = get_local ptr u64, new_ptr, !366
        v65 = get_local ptr u64, other_len, !367
        v66 = call copy_bytes_to_13(v63, v60, v1), !370
        v67 = get_local ptr u64, both_len, !371
        v68 = const u64 1
        v69 = get_elem_ptr self, ptr u64, v68, !372
        store v22 to v69, !372
        v70 = const unit ()
        ret () v70
    }

    pub fn add_29(self !373: u64, other !374: u64) -> u64, !377 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !378: u64, other !379: u64) -> bool, !382 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !383: { u64, u64 }) -> u64, !386 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !387
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !389: u64, count !390: u64) -> slice, !393 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !396
        v2 = get_local ptr { u64, u64 }, __anon_0, !397
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !397
        store ptr to v4, !397
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !397
        store v1 to v6, !397
        v7 = load v2
        v8 = call from_parts_33(v7), !400
        ret slice v8
    }

    fn from_parts_33(parts !401: { u64, u64 }) -> slice, !404 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !405 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !406: u64, other !407: u64) -> u64, !410 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !411: u64, count !412: u64, new_count !413: u64) -> u64, !416 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !419
        cbr v0, block0(), block4(), !417

        block0():
        v1 = call alloc_bytes_4(new_count), !422
        v2 = get_local ptr u64, new_ptr, !423
        v3 = const u64 0, !424
        v4 = call gt_36(count, v3), !427
        cbr v4, block1(), block2(), !425

        block1():
        v5 = get_local ptr u64, new_ptr, !428
        v6 = call copy_bytes_to_13(ptr, v1, count), !431
        v7 = const unit ()
        br block3(v7)

        block2():
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !432
        br block5(v1)

        block4():
        br block5(ptr)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !433: u64, other !434: u64) -> bool, !437 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !438: slice) -> { u64, u64 }, !441 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_38(slice), !444
        v1 = get_local ptr u64, cap, !445
        v2 = get_local ptr u64, cap, !446
        v3 = call alloc_bytes_4(v0), !449
        v4 = get_local ptr u64, ptr, !450
        v5 = get_local ptr u64, cap, !451
        v6 = const u64 0, !452
        v7 = call gt_36(v0, v6), !455
        cbr v7, block0(), block1(), !453

        block0():
        v8 = call ptr_41(slice), !458
        v9 = get_local ptr u64, ptr, !459
        v10 = get_local ptr u64, cap, !460
        v11 = call copy_to_40(v8, v3, v0), !463
        v12 = const unit ()
        br block2(v12)

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr u64, ptr, !464
        v16 = get_local ptr u64, cap, !465
        v17 = get_local ptr { u64, u64 }, __anon_0, !466
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v3 to v19, !466
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20
        store v0 to v21, !466
        v22 = load v17
        ret { u64, u64 } v22
    }

    pub fn number_of_bytes_38(self !467: slice) -> u64, !470 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !473
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !474
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !475: slice) -> { u64, u64 }, !478 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !479 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !480: u64, dst !481: u64, count !482: u64) -> (), !485 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !488
        v2 = get_local ptr u64, len, !489
        v3 = get_local ptr u64, len, !490
        v4 = asm(dst: dst, src: self, len: v1) -> (), !491 {
            mcp    dst src len, !492
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn ptr_41(self !493: slice) -> u64, !496 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !499
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !500
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !501: u64, offset !502: u64) -> u64, !505 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !506 {
            add    new ptr offset, !507
        }
        ret u64 v0
    }

    pub fn sha256_43(self !508: { { { u64, u64 }, u64 } }) -> b256, !511 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_44(), !514
        v1 = get_local ptr b256, result_buffer, !515
        store v0 to v1, !515
        v2 = get_local ptr b256, result_buffer, !516
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !297
        v7 = load v6
        v8 = call ptr_21(v7), !519
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !297
        v13 = load v12
        v14 = call len_20(v13), !522
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !523 {
            s256   hash ptr bytes, !524
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !528 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !529
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = (!4 !5)
!7 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!8 = span !7 972 1177
!9 = fn_name_span !7 979 983
!10 = (!8 !9)
!11 = span !7 1006 1020
!12 = fn_call_path_span !7 1006 1018
!13 = (!11 !12)
!14 = span !7 992 1021
!15 = span !7 1042 1058
!16 = fn_call_path_span !7 1042 1056
!17 = (!15 !16)
!18 = span !7 1026 1059
!19 = span !7 1072 1081
!20 = span !7 1085 1094
!21 = span !7 1072 1094
!22 = fn_call_path_span !7 1082 1084
!23 = (!21 !22)
!24 = span !7 1064 1095
!25 = span !7 1108 1117
!26 = span !7 1126 1133
!27 = span !7 1108 1134
!28 = fn_call_path_span !7 1118 1125
!29 = (!27 !28)
!30 = span !7 1100 1135
!31 = span !7 1148 1157
!32 = span !7 1166 1173
!33 = span !7 1148 1174
!34 = fn_call_path_span !7 1158 1165
!35 = (!33 !34)
!36 = span !7 1140 1175
!37 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!38 = span !37 3024 3131
!39 = fn_name_span !37 3031 3034
!40 = (!38 !39)
!41 = span !37 3079 3094
!42 = fn_call_path_span !37 3079 3092
!43 = (!41 !42)
!44 = span !37 3055 3125
!45 = span !37 3113 3114
!46 = span !37 503 609
!47 = fn_name_span !37 510 513
!48 = (!46 !47)
!49 = span !37 570 571
!50 = span !37 558 572
!51 = fn_call_path_span !37 558 569
!52 = (!50 !51)
!53 = span !37 534 603
!54 = span !37 591 592
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!56 = span !55 3286 3291
!57 = span !55 3267 3380
!58 = fn_name_span !55 3274 3285
!59 = (!57 !58)
!60 = span !55 3315 3378
!61 = span !55 3342 3351
!62 = span !7 258 340
!63 = fn_name_span !7 265 268
!64 = (!62 !63)
!65 = span !7 314 323
!66 = span !7 315 318
!67 = span !7 289 334
!68 = span !7 805 809
!69 = span !7 811 816
!70 = span !7 799 968
!71 = fn_name_span !7 802 804
!72 = inline "never"
!73 = (!70 !71 !72)
!74 = span !7 218 232
!75 = span !7 889 891
!76 = span !7 842 962
!77 = span !7 907 926
!78 = span !7 507 511
!79 = span !7 513 520
!80 = span !7 492 714
!81 = fn_name_span !7 499 506
!82 = (!80 !81)
!83 = span !7 582 603
!84 = fn_call_path_span !7 587 594
!85 = (!83 !84)
!86 = span !7 576 708
!87 = span !7 618 668
!88 = fn_call_path_span !7 618 668
!89 = (!87 !88)
!90 = span !7 621 628
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!92 = span !91 1815 1933
!93 = span !7 657 664
!94 = span !7 650 665
!95 = fn_call_path_span !7 650 656
!96 = (!94 !95)
!97 = span !7 636 666
!98 = fn_call_path_span !7 636 649
!99 = (!97 !98)
!100 = span !7 681 698
!101 = fn_call_path_span !7 681 698
!102 = (!100 !101)
!103 = span !7 685 686
!104 = span !7 695 696
!105 = span !7 361 365
!106 = span !7 367 374
!107 = span !7 346 486
!108 = fn_name_span !7 353 360
!109 = (!107 !108)
!110 = span !7 451 469
!111 = fn_call_path_span !7 459 467
!112 = (!110 !111)
!113 = span !7 451 478
!114 = fn_call_path_span !7 470 476
!115 = (!113 !114)
!116 = span !7 435 479
!117 = fn_call_path_span !7 435 450
!118 = (!116 !117)
!119 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!120 = span !119 3077 3081
!121 = span !119 3069 3167
!122 = fn_name_span !119 3072 3076
!123 = (!121 !122)
!124 = span !119 3133 3150
!125 = fn_call_path_span !119 3133 3144
!126 = (!124 !125)
!127 = span !119 3107 3161
!128 = span !37 28831 28832
!129 = span !37 28823 29132
!130 = fn_name_span !37 28826 28830
!131 = (!129 !130)
!132 = span !37 28953 28955
!133 = span !37 28933 28956
!134 = fn_call_path_span !37 28933 28952
!135 = (!133 !134)
!136 = span !37 28917 28957
!137 = span !37 28966 28980
!138 = span !37 28978 28980
!139 = span !37 29065 29077
!140 = span !37 29092 29097
!141 = span !37 2445 2458
!142 = span !37 400 412
!143 = span !37 29107 29109
!144 = span !37 29065 29110
!145 = fn_call_path_span !37 29078 29091
!146 = (!144 !145)
!147 = span !37 29121 29126
!148 = span !37 4100 4108
!149 = span !37 4079 4227
!150 = fn_name_span !37 4086 4099
!151 = (!149 !150)
!152 = span !37 4157 4190
!153 = fn_call_path_span !37 4157 4180
!154 = (!152 !153)
!155 = span !37 4133 4221
!156 = span !37 4209 4210
!157 = span !37 806 814
!158 = span !37 785 928
!159 = fn_name_span !37 792 805
!160 = (!158 !159)
!161 = span !37 863 884
!162 = fn_call_path_span !37 863 874
!163 = (!161 !162)
!164 = span !37 839 922
!165 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!166 = span !165 5960 5964
!167 = span !165 5966 5969
!168 = span !165 5977 5982
!169 = span !165 5939 6083
!170 = fn_name_span !165 5946 5959
!171 = (!169 !170)
!172 = span !165 5999 6076
!173 = span !165 6050 6065
!174 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!175 = span !174 4952 4956
!176 = span !174 4938 5081
!177 = fn_name_span !174 4945 4951
!178 = (!176 !177)
!179 = span !174 4973 5075
!180 = span !174 4979 4983
!181 = span !174 4998 5037
!182 = fn_call_path_span !174 4998 5037
!183 = (!181 !182)
!184 = span !174 5009 5020
!185 = span !174 5025 5036
!186 = span !174 5062 5063
!187 = span !174 5055 5064
!188 = fn_call_path_span !174 5055 5061
!189 = (!187 !188)
!190 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!191 = span !190 16751 16755
!192 = span !190 16757 16762
!193 = span !190 16745 16811
!194 = fn_name_span !190 16748 16750
!195 = (!193 !194)
!196 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!197 = span !196 735 739
!198 = span !196 721 773
!199 = fn_name_span !196 728 734
!200 = (!198 !199)
!201 = span !196 757 771
!202 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!203 = span !202 1538 1542
!204 = span !202 1526 1716
!205 = fn_name_span !202 1529 1537
!206 = (!204 !205)
!207 = span !202 329 341
!208 = span !202 1573 1589
!209 = fn_call_path_span !202 1584 1587
!210 = (!208 !209)
!211 = span !202 1593 1595
!212 = span !202 1573 1595
!213 = fn_call_path_span !202 1590 1592
!214 = (!212 !213)
!215 = span !174 2461 2560
!216 = span !202 1610 1621
!217 = span !202 1657 1673
!218 = fn_call_path_span !202 1668 1671
!219 = (!217 !218)
!220 = span !202 1647 1709
!221 = span !190 15477 15481
!222 = span !190 15483 15488
!223 = span !190 15470 15542
!224 = fn_name_span !190 15473 15476
!225 = (!223 !224)
!226 = span !190 15515 15529
!227 = fn_call_path_span !190 15520 15522
!228 = (!226 !227)
!229 = span !190 15514 15536
!230 = fn_call_path_span !190 15531 15534
!231 = (!229 !230)
!232 = span !190 12498 12502
!233 = span !190 12491 12545
!234 = fn_name_span !190 12494 12497
!235 = (!233 !234)
!236 = span !190 12533 12538
!237 = span !37 13782 13786
!238 = span !37 13771 13819
!239 = fn_name_span !37 13778 13781
!240 = (!238 !239)
!241 = span !37 2506 2514
!242 = span !37 15186 15190
!243 = span !37 15175 15233
!244 = fn_name_span !37 15182 15185
!245 = (!243 !244)
!246 = span !37 15213 15227
!247 = fn_call_path_span !37 15222 15225
!248 = (!246 !247)
!249 = span !37 989 993
!250 = span !37 978 1030
!251 = fn_name_span !37 985 988
!252 = (!250 !251)
!253 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!254 = span !253 2340 2344
!255 = span !253 2332 2389
!256 = fn_name_span !253 2335 2339
!257 = (!255 !256)
!258 = span !253 2370 2383
!259 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!260 = span !259 9026 9027
!261 = span !259 9009 9138
!262 = fn_name_span !259 9016 9022
!263 = (!261 !262 !72)
!264 = span !259 9082 9095
!265 = fn_call_path_span !259 9082 9093
!266 = (!264 !265)
!267 = span !259 9065 9096
!268 = span !259 9108 9114
!269 = span !259 9101 9115
!270 = fn_call_path_span !259 9103 9107
!271 = (!269 !270)
!272 = span !259 9121 9127
!273 = span !259 9121 9136
!274 = fn_call_path_span !259 9128 9134
!275 = (!273 !274)
!276 = span !259 177 263
!277 = fn_name_span !259 184 187
!278 = (!276 !277)
!279 = span !259 234 246
!280 = fn_call_path_span !259 234 244
!281 = (!279 !280)
!282 = span !259 208 257
!283 = span !119 5084 5088
!284 = span !119 5098 5103
!285 = span !119 5076 5153
!286 = fn_name_span !119 5079 5083
!287 = (!285 !286)
!288 = span !119 524 536
!289 = span !119 5123 5146
!290 = fn_call_path_span !119 5129 5134
!291 = (!289 !290)
!292 = span !259 335 339
!293 = span !259 341 346
!294 = span !259 314 396
!295 = fn_name_span !259 321 326
!296 = (!294 !295)
!297 = span !259 142 154
!298 = span !259 365 389
!299 = fn_call_path_span !259 376 382
!300 = (!298 !299)
!301 = span !37 18345 18349
!302 = span !37 18359 18364
!303 = span !37 18323 19270
!304 = fn_name_span !37 18330 18336
!305 = (!303 !304)
!306 = span !37 18398 18409
!307 = fn_call_path_span !37 18404 18407
!308 = (!306 !307)
!309 = span !37 18382 18410
!310 = span !37 18422 18431
!311 = span !37 18435 18436
!312 = span !37 18422 18436
!313 = fn_call_path_span !37 18432 18434
!314 = (!312 !313)
!315 = span !37 18451 18457
!316 = span !37 18572 18573
!317 = span !37 18560 18573
!318 = fn_call_path_span !37 18569 18571
!319 = (!317 !318)
!320 = span !37 18588 18600
!321 = span !37 18614 18620
!322 = span !37 18668 18677
!323 = span !37 18657 18677
!324 = fn_call_path_span !37 18666 18667
!325 = (!323 !324)
!326 = span !37 18642 18678
!327 = span !37 18687 18714
!328 = span !37 18808 18827
!329 = fn_call_path_span !37 18817 18825
!330 = (!328 !329)
!331 = span !37 18830 18838
!332 = span !37 18808 18838
!333 = fn_call_path_span !37 18828 18829
!334 = (!332 !333)
!335 = span !37 18928 18942
!336 = fn_call_path_span !37 18937 18940
!337 = (!335 !336)
!338 = span !37 18944 18963
!339 = fn_call_path_span !37 18953 18961
!340 = (!338 !339)
!341 = span !37 18965 18973
!342 = span !37 18914 18974
!343 = fn_call_path_span !37 18914 18927
!344 = (!342 !343)
!345 = span !37 18992 19000
!346 = span !37 18869 19015
!347 = fn_call_path_span !37 18869 18890
!348 = (!346 !347)
!349 = span !37 18853 19016
!350 = span !37 19055 19064
!351 = span !37 19040 19065
!352 = fn_call_path_span !37 19040 19054
!353 = (!351 !352)
!354 = span !37 19029 19065
!355 = span !37 19100 19114
!356 = fn_call_path_span !37 19109 19112
!357 = (!355 !356)
!358 = span !37 19131 19142
!359 = span !37 19100 19143
!360 = fn_call_path_span !37 19115 19130
!361 = (!359 !360)
!362 = span !37 19086 19144
!363 = span !37 19153 19164
!364 = fn_call_path_span !37 19159 19162
!365 = (!363 !364)
!366 = span !37 19179 19186
!367 = span !37 19188 19197
!368 = span !37 19153 19198
!369 = fn_call_path_span !37 19165 19178
!370 = (!368 !369)
!371 = span !37 19255 19263
!372 = span !37 19244 19263
!373 = span !190 1239 1243
!374 = span !190 1245 1250
!375 = span !190 1232 1300
!376 = fn_name_span !190 1235 1238
!377 = (!375 !376)
!378 = span !190 20651 20655
!379 = span !190 20657 20662
!380 = span !190 20645 20711
!381 = fn_name_span !190 20648 20650
!382 = (!380 !381)
!383 = span !37 1097 1101
!384 = span !37 1081 1134
!385 = fn_name_span !37 1088 1096
!386 = (!384 !385)
!387 = span !37 418 426
!388 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!389 = span !388 2307 2310
!390 = span !388 2321 2326
!391 = span !388 2286 2400
!392 = fn_name_span !388 2293 2303
!393 = (!391 !392)
!394 = span !388 2368 2392
!395 = fn_call_path_span !388 2374 2375
!396 = (!394 !395)
!397 = span !388 2362 2393
!398 = span !388 2351 2394
!399 = fn_call_path_span !388 2351 2361
!400 = (!398 !399)
!401 = span !388 1206 1211
!402 = span !388 1192 1296
!403 = fn_name_span !388 1195 1205
!404 = (!402 !403)
!405 = span !388 1248 1294
!406 = span !190 6993 6997
!407 = span !190 6999 7004
!408 = span !190 6981 7054
!409 = fn_name_span !190 6984 6992
!410 = (!408 !409)
!411 = span !55 4106 4109
!412 = span !55 4120 4125
!413 = span !55 4132 4141
!414 = span !55 4085 4362
!415 = fn_name_span !55 4092 4105
!416 = (!414 !415)
!417 = span !55 4168 4185
!418 = fn_call_path_span !55 4178 4179
!419 = (!417 !418)
!420 = span !55 4210 4232
!421 = fn_call_path_span !55 4210 4221
!422 = (!420 !421)
!423 = span !55 4196 4233
!424 = span !55 4253 4254
!425 = span !55 4245 4254
!426 = fn_call_path_span !55 4251 4252
!427 = (!425 !426)
!428 = span !55 4287 4294
!429 = span !55 4269 4302
!430 = fn_call_path_span !55 4273 4286
!431 = (!429 !430)
!432 = span !55 4322 4329
!433 = span !190 20580 20584
!434 = span !190 20586 20591
!435 = span !190 20574 20640
!436 = fn_name_span !190 20577 20579
!437 = (!435 !436)
!438 = span !37 2084 2089
!439 = span !37 2076 2302
!440 = fn_name_span !37 2079 2083
!441 = (!439 !440)
!442 = span !37 2130 2153
!443 = fn_call_path_span !37 2136 2151
!444 = (!442 !443)
!445 = span !37 2120 2154
!446 = span !37 2185 2188
!447 = span !37 2173 2189
!448 = fn_call_path_span !37 2173 2184
!449 = (!447 !448)
!450 = span !37 2163 2190
!451 = span !37 2202 2205
!452 = span !37 2208 2209
!453 = span !37 2202 2209
!454 = fn_call_path_span !37 2206 2207
!455 = (!453 !454)
!456 = span !37 2224 2235
!457 = fn_call_path_span !37 2230 2233
!458 = (!456 !457)
!459 = span !37 2250 2253
!460 = span !37 2255 2258
!461 = span !37 2224 2259
!462 = fn_call_path_span !37 2236 2243
!463 = (!461 !462)
!464 = span !37 2286 2289
!465 = span !37 2291 2294
!466 = span !37 2279 2296
!467 = span !388 3936 3940
!468 = span !388 3913 3983
!469 = fn_name_span !388 3920 3935
!470 = (!468 !469)
!471 = span !388 3959 3975
!472 = fn_call_path_span !388 3959 3969
!473 = (!471 !472)
!474 = span !388 3976 3977
!475 = span !388 1582 1587
!476 = span !388 1568 1677
!477 = fn_name_span !388 1571 1581
!478 = (!476 !477)
!479 = span !388 1624 1675
!480 = span !165 3364 3368
!481 = span !165 3370 3373
!482 = span !165 3381 3386
!483 = span !165 3346 3529
!484 = fn_name_span !165 3353 3360
!485 = (!483 !484)
!486 = span !165 3413 3437
!487 = fn_call_path_span !165 3419 3420
!488 = (!486 !487)
!489 = span !165 3403 3438
!490 = span !165 3477 3480
!491 = span !165 3447 3522
!492 = span !165 3496 3511
!493 = span !388 2884 2888
!494 = span !388 2873 2935
!495 = fn_name_span !388 2880 2883
!496 = (!494 !495)
!497 = span !388 2911 2927
!498 = fn_call_path_span !388 2911 2921
!499 = (!497 !498)
!500 = span !388 2928 2929
!501 = span !165 6684 6688
!502 = span !165 6690 6696
!503 = span !165 6661 6831
!504 = fn_name_span !165 6668 6683
!505 = (!503 !504)
!506 = span !165 6721 6825
!507 = span !165 6771 6789
!508 = span !259 416 420
!509 = span !259 402 678
!510 = fn_name_span !259 409 415
!511 = (!509 !510)
!512 = span !259 464 475
!513 = fn_call_path_span !259 464 473
!514 = (!512 !513)
!515 = span !259 440 476
!516 = span !259 508 521
!517 = span !259 540 556
!518 = fn_call_path_span !259 551 554
!519 = (!517 !518)
!520 = span !259 577 593
!521 = fn_call_path_span !259 588 591
!522 = (!520 !521)
!523 = span !259 485 672
!524 = span !259 619 638
!525 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!526 = span !525 7873 7976
!527 = fn_name_span !525 7880 7883
!528 = (!526 !527)
!529 = span !525 7904 7970

// IR: [inline] Function inlining
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        br play_0_block0(v15), !30

        play_0_block0(v16: { [u8; 64] }):
        v17 = get_local ptr { [u8; 64] }, secp256k1, !32
        store v16 to v17, !33
        v18 = get_local ptr { [u8; 64] }, secp256k1, !35
        v19 = load v18, !36
        v20 = get_local ptr { [u8; 64] }, secp256k1, !38
        v21 = load v20, !36
        v22 = call eq_6(v19, v21), !41
        v23 = get_local ptr bool, _, !43
        v24 = get_local ptr { [u8; 64] }, secp256k1, !45
        v25 = load v24, !36
        v26 = get_local ptr { { { u64, u64 }, u64 } }, message, !47
        v27 = load v26, !36
        v28 = call address_7(v25, v27), !50
        v29 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !52
        store v28 to v29, !53
        v30 = get_local ptr { [u8; 64] }, secp256k1, !55
        v31 = load v30, !36
        v32 = get_local ptr { { { u64, u64 }, u64 } }, message, !57
        v33 = load v32, !36
        v34 = call address_7(v31, v33), !60
        v35 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !62
        store v34 to v35, !63
        v36 = const unit ()
        br block0(v36), !36

        block0(v37: ()):
        v38 = const unit ()
        ret () v38
    }

    pub fn play_0() -> (), !66 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !67
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !10
        store v0 to v1, !10
        v2 = get_local ptr [u8; 64], __anon_0, !68
        v3 = const u64 0
        br new_5_array_init_loop(v3), !69

        new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !69
        v6 = const u8 0, !19
        store v6 to v5, !70
        v7 = const u64 1
        v8 = add v4, v7, !69
        v9 = const u64 64
        v10 = cmp lt v8 v9, !69
        cbr v10, new_5_array_init_loop(v8), new_5_array_init_exit(), !69

        new_5_array_init_exit():
        v11 = load v2, !69
        v12 = get_local ptr { [u8; 64] }, __anon_1, !71
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !69
        store v11 to v14, !72
        v15 = load v12, !69
        br block0(v15), !69

        block0(v16: { [u8; 64] }):
        v17 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v16 to v17, !31
        v18 = get_local ptr { [u8; 64] }, secp256k1, !34
        v19 = load v18
        v20 = get_local ptr { [u8; 64] }, secp256k1, !37
        v21 = load v20
        v22 = call eq_6(v19, v21), !73
        v23 = get_local ptr bool, _, !42
        v24 = get_local ptr { [u8; 64] }, secp256k1, !44
        v25 = load v24
        v26 = get_local ptr { { { u64, u64 }, u64 } }, message, !46
        v27 = load v26
        v28 = call address_7(v25, v27), !74
        v29 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !51
        store v28 to v29, !51
        v30 = get_local ptr { [u8; 64] }, secp256k1, !54
        v31 = load v30
        v32 = get_local ptr { { { u64, u64 }, u64 } }, message, !56
        v33 = load v32
        v34 = call address_7(v31, v33), !75
        v35 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !61
        store v34 to v35, !61
        v36 = const unit ()
        ret () v36
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !79 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry():
        v0 = const u64 0, !80
        v1 = asm(size: v0) -> u64 hp, !87 {
            aloc   size, !88
        }
        br new_3_block0(v1), !89

        new_3_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_00, !91
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !92
        store v2 to v5, !93
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !92
        v8 = const u64 0, !94
        store v8 to v7, !95
        v9 = load v3, !92
        br block0(v9), !92

        block0(v10: { u64, u64 }):
        v11 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !96
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { u64, u64 }, v12
        store v10 to v13, !96
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14
        v16 = const u64 0, !97
        store v16 to v15, !96
        v17 = load v11
        ret { { u64, u64 }, u64 } v17
    }

    pub fn new_3() -> { u64, u64 }, !100 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !80
        v1 = asm(size: v0) -> u64 hp, !101 {
            aloc   size, !88
        }
        br block0(v1), !102

        block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_0, !90
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4
        store v2 to v5, !90
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0, !94
        store v8 to v7, !90
        v9 = load v3
        ret { u64, u64 } v9
    }

    pub fn alloc_bytes_4(count !103: u64) -> u64, !106 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !86 {
            aloc   size, !88
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !109 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !15
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !19
        store v4 to v3, !15
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !25
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !25
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !110: { [u8; 64] }, other !111: { [u8; 64] }) -> bool, !115 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !116
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !116
        v8 = const u64 64, !117
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !118 {
            meq    result r2 r3 r4, !119
        }
        ret bool v9
    }

    pub fn address_7(self !120: { [u8; 64] }, message !121: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !124 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !129
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !130
        v3 = const u64 0, !128
        store v3 to v2, !131
        v4 = ptr_to_int message to u64, !134
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !135
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !138
        v8 = load v7, !139
        v9 = call len_20(v8), !142
        v10 = const u64 32, !143
        v11 = cmp eq v9 v10, !149
        br recover_8_try_into_17_neq_18_block0(v11), !150

        recover_8_try_into_17_neq_18_block0(v12: bool):
        v13 = const bool false, !151
        v14 = cmp eq v12 v13, !154
        br recover_8_try_into_17_neq_18_block1(v14), !155

        recover_8_try_into_17_neq_18_block1(v15: bool):
        br recover_8_try_into_17_block3(v15), !156

        recover_8_try_into_17_block3(v16: bool):
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !157

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !160
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !161
        v20 = const u64 0, !159
        store v20 to v19, !162
        v21 = load v17, !163
        br recover_8_block0(v21), !165

        recover_8_try_into_17_block1():
        v22 = const unit ()
        br recover_8_try_into_17_block2(v22), !166

        recover_8_try_into_17_block2(v23: ()):
        v24 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !167
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !168
        v27 = const u64 1, !159
        store v27 to v26, !169
        v28 = ptr_to_int message to u64, !170
        v29 = int_to_ptr v28 to ptr { { { u64, u64 }, u64 } }, !171
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { { u64, u64 }, u64 }, v30, !172
        v32 = load v31, !173
        v33 = call ptr_21(v32), !176
        v34 = asm(bits: v33) -> b256 bits, !178 {
        }
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v24, ptr b256, v35, v36, !179
        store v34 to v37, !180
        v38 = load v24, !181
        br recover_8_block0(v38), !182

        recover_8_block0(v39: { u64, ( () | b256 ) }):
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !186
        store v39 to v40, !187
        v41 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !189
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !190
        v44 = load v43, !191
        v45 = const u64 1, !188
        v46 = cmp eq v44 v45, !194
        br recover_8_unwrap_14_block3(v46), !195

        recover_8_unwrap_14_block3(v47: bool):
        cbr v47, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !196

        recover_8_unwrap_14_block0():
        v48 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !197
        v49 = const u64 1
        v50 = const u64 1
        v51 = get_elem_ptr v48, ptr b256, v49, v50, !198
        v52 = load v51, !199
        v53 = get_local ptr b256, inner_value, !201
        store v52 to v53, !202
        v54 = get_local ptr b256, inner_value, !204
        v55 = load v54, !205
        br recover_8_unwrap_14_block2(v55), !206

        recover_8_unwrap_14_block1():
        v56 = const u64 0, !207
        revert v56, !212

        recover_8_unwrap_14_block4(v57: never):
        br recover_8_unwrap_14_block2(v57), !213

        recover_8_unwrap_14_block2(v58: b256):
        br recover_8_block1(v58), !214

        recover_8_block1(v59: b256):
        v60 = const u64 32, !215
        v61 = asm(size: v60) -> u64 hp, !227 {
            aloc   size, !88
        }
        br recover_8_from_9_from_10_with_capacity_11_with_capacity_12_block0(v61), !228

        recover_8_from_9_from_10_with_capacity_11_with_capacity_12_block0(v62: u64):
        v63 = get_local ptr { u64, u64 }, __anon_00000, !230
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !231
        store v62 to v65, !232
        v66 = const u64 1
        v67 = get_elem_ptr v63, ptr u64, v66, !233
        store v60 to v67, !234
        v68 = load v63, !235
        br recover_8_from_9_from_10_with_capacity_11_block0(v68), !236

        recover_8_from_9_from_10_with_capacity_11_block0(v69: { u64, u64 }):
        v70 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !238
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr { u64, u64 }, v71, !239
        store v69 to v72, !240
        v73 = const u64 1
        v74 = get_elem_ptr v70, ptr u64, v73, !241
        v75 = const u64 0, !242
        store v75 to v74, !243
        v76 = load v70, !244
        br recover_8_from_9_from_10_block0(v76), !245

        recover_8_from_9_from_10_block0(v77: { { u64, u64 }, u64 }):
        v78 = get_local ptr { { u64, u64 }, u64 }, bytes, !247
        store v77 to v78, !248
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !250
        v80 = const u64 1
        v81 = get_elem_ptr v79, ptr u64, v80, !251
        v82 = const u64 32, !252
        store v82 to v81, !253
        v83 = ptr_to_int v59 to u64, !255
        v84 = get_local ptr { { u64, u64 }, u64 }, bytes, !257
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { u64, u64 }, v85, !259
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !261
        v89 = load v88, !262
        v90 = const u64 32, !263
        v91 = asm(dst: v89, src: v83, len: v90) -> (), !268 {
            mcp    dst src len, !269
        }
        v92 = const unit ()
        br recover_8_from_9_from_10_block1(v92), !270

        recover_8_from_9_from_10_block1(v93: ()):
        v94 = get_local ptr { { u64, u64 }, u64 }, bytes, !272
        v95 = load v94, !273
        br recover_8_from_9_block0(v95), !274

        recover_8_from_9_block0(v96: { { u64, u64 }, u64 }):
        v97 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !276
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr { { u64, u64 }, u64 }, v98, !277
        store v96 to v99, !278
        v100 = load v97, !279
        br recover_8_block2(v100), !280

        recover_8_block2(v101: { { { u64, u64 }, u64 } }):
        v102 = const u64 1
        v103 = const u64 0
        v104 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v102, v103, !281
        store v101 to v104, !282
        v105 = load v0, !283
        br block6(v105), !283

        block6(v106: { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }):
        v107 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !284
        store v106 to v107, !284
        v108 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !125
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u64, v109, !125
        v111 = load v110
        v112 = const u64 0, !125
        v113 = cmp eq v111 v112, !287
        br block7(v113), !287

        block7(v114: bool):
        cbr v114, block0(), block1(), !285

        block0():
        v115 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !125
        v116 = const u64 1
        v117 = const u64 0
        v118 = get_elem_ptr v115, ptr { { { u64, u64 }, u64 } }, v116, v117
        v119 = load v118
        v120 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !288
        store v119 to v120, !288
        v121 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !128
        v122 = const u64 0
        v123 = get_elem_ptr v121, ptr u64, v122, !128
        v124 = const u64 0, !128
        store v124 to v123, !128
        v125 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !289
        v126 = load v125
        v127 = call sha256_24(v126), !292
        v128 = get_local ptr { b256 }, __anon_02, !297
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr b256, v129, !298
        store v127 to v130, !299
        v131 = load v128, !298
        br block8(v131), !298

        block8(v132: { b256 }):
        v133 = const u64 1
        v134 = const u64 0
        v135 = get_elem_ptr v121, ptr { b256 }, v133, v134, !128
        store v132 to v135, !128
        v136 = load v121
        br block5(v136)

        block1():
        v137 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !125
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !125
        v140 = load v139
        v141 = const u64 1, !125
        v142 = cmp eq v140 v141, !302
        br block9(v142), !302

        block9(v143: bool):
        cbr v143, block2(), block3(), !300

        block2():
        v144 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !125
        v145 = const u64 1
        v146 = const u64 1
        v147 = get_elem_ptr v144, ptr { u64 }, v145, v146
        v148 = load v147
        v149 = get_local ptr { u64 }, e, !303
        store v148 to v149, !303
        v150 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !128
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr u64, v151, !128
        v153 = const u64 1, !128
        store v153 to v152, !128
        v154 = get_local ptr { u64 }, e, !304
        v155 = load v154
        v156 = const u64 1
        v157 = const u64 1
        v158 = get_elem_ptr v150, ptr { u64 }, v156, v157, !128
        store v155 to v158, !128
        v159 = load v150
        br block4(v159)

        block3():
        v160 = const u64 14757395258967588866, !284
        revert v160, !284

        block4(v161: { u64, ( { b256 } | { u64 } ) }):
        br block5(v161)

        block5(v162: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v162
    }

    pub fn recover_8(self !305: { [u8; 64] }, message !306: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !309 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0
        local { u64, ( () | b256 ) } __anon_00
        local { { u64, u64 }, u64 } __anon_000
        local { u64, u64 } __anon_0000
        local { { { u64, u64 }, u64 } } __anon_01
        local { u64, ( () | b256 ) } __anon_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local b256 inner_value

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !128
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !128
        v3 = const u64 0, !128
        store v3 to v2, !128
        v4 = ptr_to_int message to u64, !310
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !310
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !311
        v8 = load v7, !310
        v9 = call len_20(v8), !312
        v10 = const u64 32, !143
        v11 = cmp eq v9 v10, !313
        br try_into_17_neq_18_block0(v11), !314

        try_into_17_neq_18_block0(v12: bool):
        v13 = const bool false, !151
        v14 = cmp eq v12 v13, !315
        br try_into_17_neq_18_block1(v14), !316

        try_into_17_neq_18_block1(v15: bool):
        br try_into_17_block3(v15), !317

        try_into_17_block3(v16: bool):
        cbr v16, try_into_17_block0(), try_into_17_block1(), !318

        try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_00, !319
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !320
        v20 = const u64 0, !159
        store v20 to v19, !321
        v21 = load v17, !310
        br block0(v21), !322

        try_into_17_block1():
        v22 = const unit ()
        br try_into_17_block2(v22), !310

        try_into_17_block2(v23: ()):
        v24 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !323
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !324
        v27 = const u64 1, !159
        store v27 to v26, !325
        v28 = ptr_to_int message to u64, !310
        v29 = int_to_ptr v28 to ptr { { { u64, u64 }, u64 } }, !310
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { { u64, u64 }, u64 }, v30, !326
        v32 = load v31, !310
        v33 = call ptr_21(v32), !327
        v34 = asm(bits: v33) -> b256 bits, !328 {
        }
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v24, ptr b256, v35, v36, !329
        store v34 to v37, !330
        v38 = load v24, !310
        br block0(v38), !310

        block0(v39: { u64, ( () | b256 ) }):
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !331
        store v39 to v40, !332
        v41 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !333
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !334
        v44 = load v43, !335
        v45 = const u64 1, !188
        v46 = cmp eq v44 v45, !336
        br unwrap_14_block3(v46), !337

        unwrap_14_block3(v47: bool):
        cbr v47, unwrap_14_block0(), unwrap_14_block1(), !338

        unwrap_14_block0():
        v48 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !339
        v49 = const u64 1
        v50 = const u64 1
        v51 = get_elem_ptr v48, ptr b256, v49, v50, !335
        v52 = load v51, !335
        v53 = get_local ptr b256, inner_value, !340
        store v52 to v53, !341
        v54 = get_local ptr b256, inner_value, !342
        v55 = load v54, !335
        br unwrap_14_block2(v55), !335

        unwrap_14_block1():
        v56 = const u64 0, !207
        revert v56, !343

        unwrap_14_block4(v57: never):
        br unwrap_14_block2(v57), !335

        unwrap_14_block2(v58: b256):
        br block1(v58), !335

        block1(v59: b256):
        v60 = const u64 32, !215
        v61 = asm(size: v60) -> u64 hp, !344 {
            aloc   size, !88
        }
        br from_9_from_10_with_capacity_11_with_capacity_12_block0(v61), !345

        from_9_from_10_with_capacity_11_with_capacity_12_block0(v62: u64):
        v63 = get_local ptr { u64, u64 }, __anon_0000, !346
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !347
        store v62 to v65, !348
        v66 = const u64 1
        v67 = get_elem_ptr v63, ptr u64, v66, !349
        store v60 to v67, !350
        v68 = load v63, !351
        br from_9_from_10_with_capacity_11_block0(v68), !352

        from_9_from_10_with_capacity_11_block0(v69: { u64, u64 }):
        v70 = get_local ptr { { u64, u64 }, u64 }, __anon_000, !353
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr { u64, u64 }, v71, !354
        store v69 to v72, !355
        v73 = const u64 1
        v74 = get_elem_ptr v70, ptr u64, v73, !356
        v75 = const u64 0, !242
        store v75 to v74, !357
        v76 = load v70, !358
        br from_9_from_10_block0(v76), !359

        from_9_from_10_block0(v77: { { u64, u64 }, u64 }):
        v78 = get_local ptr { { u64, u64 }, u64 }, bytes, !360
        store v77 to v78, !361
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !362
        v80 = const u64 1
        v81 = get_elem_ptr v79, ptr u64, v80, !363
        v82 = const u64 32, !252
        store v82 to v81, !364
        v83 = ptr_to_int v59 to u64, !365
        v84 = get_local ptr { { u64, u64 }, u64 }, bytes, !366
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { u64, u64 }, v85, !367
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !368
        v89 = load v88, !369
        v90 = const u64 32, !263
        v91 = asm(dst: v89, src: v83, len: v90) -> (), !370 {
            mcp    dst src len, !269
        }
        v92 = const unit ()
        br from_9_from_10_block1(v92), !371

        from_9_from_10_block1(v93: ()):
        v94 = get_local ptr { { u64, u64 }, u64 }, bytes, !372
        v95 = load v94, !373
        br from_9_block0(v95), !374

        from_9_block0(v96: { { u64, u64 }, u64 }):
        v97 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !375
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr { { u64, u64 }, u64 }, v98, !376
        store v96 to v99, !377
        v100 = load v97, !376
        br block2(v100), !376

        block2(v101: { { { u64, u64 }, u64 } }):
        v102 = const u64 1
        v103 = const u64 0
        v104 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v102, v103, !128
        store v101 to v104, !128
        v105 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v105
    }

    pub fn from_9(bits !378: b256) -> { { { u64, u64 }, u64 } }, !381 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local mut { { u64, u64 }, u64 } bytes

        entry(bits: b256):
        v0 = const u64 32, !215
        v1 = asm(size: v0) -> u64 hp, !382 {
            aloc   size, !88
        }
        br from_10_with_capacity_11_with_capacity_12_block0(v1), !383

        from_10_with_capacity_11_with_capacity_12_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_000, !384
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !385
        store v2 to v5, !386
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !387
        store v0 to v7, !388
        v8 = load v3, !389
        br from_10_with_capacity_11_block0(v8), !390

        from_10_with_capacity_11_block0(v9: { u64, u64 }):
        v10 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !391
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { u64, u64 }, v11, !392
        store v9 to v12, !393
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13, !394
        v15 = const u64 0, !242
        store v15 to v14, !395
        v16 = load v10, !396
        br from_10_block0(v16), !397

        from_10_block0(v17: { { u64, u64 }, u64 }):
        v18 = get_local ptr { { u64, u64 }, u64 }, bytes, !398
        store v17 to v18, !399
        v19 = get_local ptr { { u64, u64 }, u64 }, bytes, !400
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr u64, v20, !401
        v22 = const u64 32, !252
        store v22 to v21, !402
        v23 = ptr_to_int bits to u64, !403
        v24 = get_local ptr { { u64, u64 }, u64 }, bytes, !404
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, u64 }, v25, !405
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !406
        v29 = load v28, !407
        v30 = const u64 32, !263
        v31 = asm(dst: v29, src: v23, len: v30) -> (), !408 {
            mcp    dst src len, !269
        }
        v32 = const unit ()
        br from_10_block1(v32), !409

        from_10_block1(v33: ()):
        v34 = get_local ptr { { u64, u64 }, u64 }, bytes, !410
        v35 = load v34, !407
        br block0(v35), !407

        block0(v36: { { u64, u64 }, u64 }):
        v37 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !275
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { { u64, u64 }, u64 }, v38
        store v36 to v39, !275
        v40 = load v37
        ret { { { u64, u64 }, u64 } } v40
    }

    pub fn from_10(b !411: b256) -> { { u64, u64 }, u64 }, !414 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !215
        v1 = asm(size: v0) -> u64 hp, !415 {
            aloc   size, !88
        }
        br with_capacity_11_with_capacity_12_block0(v1), !416

        with_capacity_11_with_capacity_12_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_00, !417
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !418
        store v2 to v5, !419
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !420
        store v0 to v7, !421
        v8 = load v3, !422
        br with_capacity_11_block0(v8), !423

        with_capacity_11_block0(v9: { u64, u64 }):
        v10 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !424
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { u64, u64 }, v11, !425
        store v9 to v12, !426
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13, !425
        v15 = const u64 0, !242
        store v15 to v14, !427
        v16 = load v10, !425
        br block0(v16), !425

        block0(v17: { { u64, u64 }, u64 }):
        v18 = get_local ptr { { u64, u64 }, u64 }, bytes, !246
        store v17 to v18, !246
        v19 = get_local ptr { { u64, u64 }, u64 }, bytes, !249
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr u64, v20, !249
        v22 = const u64 32, !252
        store v22 to v21, !249
        v23 = ptr_to_int b to u64, !254
        v24 = get_local ptr { { u64, u64 }, u64 }, bytes, !256
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, u64 }, v25, !258
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !260
        v29 = load v28
        v30 = const u64 32, !263
        v31 = asm(dst: v29, src: v23, len: v30) -> (), !428 {
            mcp    dst src len, !269
        }
        v32 = const unit ()
        br block1(v32), !429

        block1(v33: ()):
        v34 = get_local ptr { { u64, u64 }, u64 }, bytes, !271
        v35 = load v34
        ret { { u64, u64 }, u64 } v35
    }

    pub fn with_capacity_11(capacity !430: u64) -> { { u64, u64 }, u64 }, !433 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !434 {
            aloc   size, !88
        }
        br with_capacity_12_block0(v0), !435

        with_capacity_12_block0(v1: u64):
        v2 = get_local ptr { u64, u64 }, __anon_00, !436
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !437
        store v1 to v4, !438
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !437
        store capacity to v6, !439
        v7 = load v2, !437
        br block0(v7), !437

        block0(v8: { u64, u64 }):
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !237
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10
        store v8 to v11, !237
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 0, !242
        store v14 to v13, !237
        v15 = load v9
        ret { { u64, u64 }, u64 } v15
    }

    pub fn with_capacity_12(capacity !440: u64) -> { u64, u64 }, !443 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !444 {
            aloc   size, !88
        }
        br block0(v0), !445

        block0(v1: u64):
        v2 = get_local ptr { u64, u64 }, __anon_0, !229
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !229
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store capacity to v6, !229
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub fn copy_bytes_to_13(self !446: u64, dst !447: u64, count !448: u64) -> (), !451 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !267 {
            mcp    dst src len, !269
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !452: { u64, ( () | b256 ) }) -> b256, !455 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !185
        store self to v0, !185
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !188
        v4 = load v3
        v5 = const u64 1, !188
        v6 = cmp eq v4 v5, !456
        br block3(v6), !456

        block3(v7: bool):
        cbr v7, block0(), block1(), !192

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr b256, v9, v10
        v12 = load v11
        v13 = get_local ptr b256, inner_value, !200
        store v12 to v13, !200
        v14 = get_local ptr b256, inner_value, !203
        v15 = load v14
        br block2(v15)

        block1():
        v16 = const u64 0, !207
        revert v16, !457

        block4(v17: never):
        br block2(v17)

        block2(v18: b256):
        ret b256 v18
    }

    pub fn eq_15(self !458: u64, other !459: u64) -> bool, !462 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !463: u64) -> never, !466 {
        entry(code: u64):
        revert code, !211
    }

    pub fn try_into_17(self !467: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !470 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !137
        v4 = load v3
        v5 = call len_20(v4), !471
        v6 = const u64 32, !143
        v7 = cmp eq v5 v6, !472
        br neq_18_block0(v7), !473

        neq_18_block0(v8: bool):
        v9 = const bool false, !151
        v10 = cmp eq v8 v9, !474
        br neq_18_block1(v10), !475

        neq_18_block1(v11: bool):
        br block3(v11), !476

        block3(v12: bool):
        cbr v12, block0(), block1(), !144

        block0():
        v13 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !159
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !159
        v16 = const u64 0, !159
        store v16 to v15, !159
        v17 = load v13
        ret { u64, ( () | b256 ) } v17, !164

        block1():
        v18 = const unit ()
        br block2(v18)

        block2(v19: ()):
        v20 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !159
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !159
        v23 = const u64 1, !159
        store v23 to v22, !159
        v24 = ptr_to_int self to u64
        v25 = int_to_ptr v24 to ptr { { { u64, u64 }, u64 } }
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { { u64, u64 }, u64 }, v26, !137
        v28 = load v27
        v29 = call ptr_21(v28), !477
        v30 = asm(bits: v29) -> b256 bits, !177 {
        }
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v20, ptr b256, v31, v32, !159
        store v30 to v33, !159
        v34 = load v20
        ret { u64, ( () | b256 ) } v34
    }

    pub fn neq_18(self !478: u64, other !479: u64) -> bool, !482 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other, !483
        br block0(v0), !483

        block0(v1: bool):
        v2 = const bool false, !151
        v3 = cmp eq v1 v2, !484
        br block1(v3), !484

        block1(v4: bool):
        ret bool v4
    }

    pub fn not_19(self !485: bool) -> bool, !488 {
        entry(self: bool):
        v0 = const bool false, !151
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !489: { { u64, u64 }, u64 }) -> u64, !492 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !493
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !494: { { u64, u64 }, u64 }) -> u64, !497 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !258
        v4 = load v3
        v5 = call ptr_22(v4), !500
        ret u64 v5
    }

    pub fn ptr_22(self !501: { u64, u64 }) -> u64, !504 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !260
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !505: b256) -> { b256 }, !508 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !296
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !296
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !510: { { { u64, u64 }, u64 } }) -> b256, !513 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local mut { { { u64, u64 }, u64 } } hasher
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !516
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !517
        store v0 to v1, !517
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !518
        v3 = ptr_to_int s to u64, !521
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !521
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !523
        v7 = load v6, !521
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !527
        v10 = ptr_to_int v7 to u64, !528
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !529
        v12 = load v11, !532
        v13 = call len_20(v12), !535
        v14 = get_local ptr u64, other_len, !537
        v15 = get_local ptr u64, other_len, !539
        v16 = const u64 0, !540
        v17 = cmp eq v13 v16, !543
        br hash_26_write_27_append_28_block9(v17), !544

        hash_26_write_27_append_28_block9(v18: bool):
        cbr v18, hash_26_write_27_append_28_block0(), hash_26_write_27_append_28_block1(), !545

        hash_26_write_27_append_28_block0():
        v19 = const unit (), !546
        br hash_26_write_27_block0(v19), !547

        hash_26_write_27_append_28_block1():
        v20 = const unit ()
        br hash_26_write_27_append_28_block2(v20), !548

        hash_26_write_27_append_28_block2(v21: ()):
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !549
        v24 = load v23, !550
        v25 = const u64 0, !551
        v26 = cmp eq v24 v25, !554
        br hash_26_write_27_append_28_block10(v26), !555

        hash_26_write_27_append_28_block10(v27: bool):
        cbr v27, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !556

        hash_26_write_27_append_28_block3():
        v28 = load v11, !557
        store v28 to v9, !559
        v29 = const unit (), !560
        br hash_26_write_27_block0(v29), !561

        hash_26_write_27_append_28_block4():
        v30 = const unit ()
        br hash_26_write_27_append_28_block5(v30), !562

        hash_26_write_27_append_28_block5(v31: ()):
        v32 = const u64 1
        v33 = get_elem_ptr v9, ptr u64, v32, !563
        v34 = load v33, !564
        v35 = get_local ptr u64, other_len, !566
        v36 = add v34, v13, !569
        br hash_26_write_27_append_28_block11(v36), !570

        hash_26_write_27_append_28_block11(v37: u64):
        v38 = get_local ptr u64, both_len, !572
        v39 = const u64 1
        v40 = get_elem_ptr v9, ptr u64, v39, !573
        v41 = load v40, !574
        v42 = get_local ptr u64, other_start, !576
        v43 = const u64 0
        v44 = get_elem_ptr v9, ptr { u64, u64 }, v43, !577
        v45 = load v44, !578
        v46 = call capacity_31(v45), !581
        v47 = get_local ptr u64, both_len, !583
        v48 = cmp lt v46 v37, !586
        br hash_26_write_27_append_28_block12(v48), !587

        hash_26_write_27_append_28_block12(v49: bool):
        cbr v49, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block7(), !588

        hash_26_write_27_append_28_block6():
        v50 = const u64 0
        v51 = get_elem_ptr v9, ptr { u64, u64 }, v50, !589
        v52 = load v51, !590
        v53 = call ptr_22(v52), !593
        v54 = const u64 0
        v55 = get_elem_ptr v9, ptr { u64, u64 }, v54, !594
        v56 = load v55, !595
        v57 = call capacity_31(v56), !598
        v58 = get_local ptr u64, both_len, !600
        v59 = cmp gt v37 v57, !605
        br hash_26_write_27_append_28_realloc_bytes_35_block6(v59), !606

        hash_26_write_27_append_28_realloc_bytes_35_block6(v60: bool):
        cbr v60, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block4(), !607

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v61 = asm(size: v37) -> u64 hp, !610 {
            aloc   size, !88
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block7(v61), !611

        hash_26_write_27_append_28_realloc_bytes_35_block7(v62: u64):
        v63 = get_local ptr u64, new_ptr0, !613
        v64 = const u64 0, !614
        v65 = cmp gt v57 v64, !617
        br hash_26_write_27_append_28_realloc_bytes_35_block8(v65), !618

        hash_26_write_27_append_28_realloc_bytes_35_block8(v66: bool):
        cbr v66, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block2(), !619

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v67 = get_local ptr u64, new_ptr0, !621
        v68 = asm(dst: v62, src: v53, len: v57) -> (), !624 {
            mcp    dst src len, !269
        }
        v69 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block9(v69), !625

        hash_26_write_27_append_28_realloc_bytes_35_block9(v70: ()):
        v71 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v71), !626

        hash_26_write_27_append_28_realloc_bytes_35_block2():
        v72 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v72), !627

        hash_26_write_27_append_28_realloc_bytes_35_block3(v73: ()):
        v74 = get_local ptr u64, new_ptr0, !629
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v62), !630

        hash_26_write_27_append_28_realloc_bytes_35_block4():
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v53), !631

        hash_26_write_27_append_28_realloc_bytes_35_block5(v75: u64):
        br hash_26_write_27_append_28_block13(v75), !632

        hash_26_write_27_append_28_block13(v76: u64):
        v77 = get_local ptr u64, both_len, !634
        v78 = const u64 1
        v79 = mul v37, v78, !640
        br hash_26_write_27_append_28_from_parts_32_block0(v79), !641

        hash_26_write_27_append_28_from_parts_32_block0(v80: u64):
        v81 = get_local ptr { u64, u64 }, __anon_0, !643
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr u64, v82, !644
        store v76 to v83, !645
        v84 = const u64 1
        v85 = get_elem_ptr v81, ptr u64, v84, !646
        store v80 to v85, !647
        v86 = load v81, !648
        v87 = asm(ptr: v86) -> slice ptr, !652 {
        }
        br hash_26_write_27_append_28_from_parts_32_block1(v87), !653

        hash_26_write_27_append_28_from_parts_32_block1(v88: slice):
        br hash_26_write_27_append_28_block14(v88), !654

        hash_26_write_27_append_28_block14(v89: slice):
        v90 = get_local ptr slice, new_slice, !656
        store v89 to v90, !657
        v91 = get_local ptr slice, new_slice, !659
        v92 = load v91, !660
        v93 = asm(ptr: v92) -> { u64, u64 } ptr, !668 {
        }
        br hash_26_write_27_append_28_from_37_number_of_bytes_38_block0(v93), !669

        hash_26_write_27_append_28_from_37_number_of_bytes_38_block0(v94: { u64, u64 }):
        v95 = get_local ptr { u64, u64 }, __anon_000, !670
        store v94 to v95, !671
        v96 = const u64 1
        v97 = get_elem_ptr v95, ptr u64, v96, !673
        v98 = load v97, !674
        br hash_26_write_27_append_28_from_37_block3(v98), !675

        hash_26_write_27_append_28_from_37_block3(v99: u64):
        v100 = get_local ptr u64, cap, !677
        v101 = get_local ptr u64, cap, !679
        v102 = asm(size: v99) -> u64 hp, !682 {
            aloc   size, !88
        }
        br hash_26_write_27_append_28_from_37_block4(v102), !683

        hash_26_write_27_append_28_from_37_block4(v103: u64):
        v104 = get_local ptr u64, ptr, !685
        v105 = get_local ptr u64, cap, !687
        v106 = const u64 0, !688
        v107 = cmp gt v99 v106, !691
        br hash_26_write_27_append_28_from_37_block5(v107), !692

        hash_26_write_27_append_28_from_37_block5(v108: bool):
        cbr v108, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block1(), !693

        hash_26_write_27_append_28_from_37_block0():
        v109 = asm(ptr: v92) -> { u64, u64 } ptr, !698 {
        }
        br hash_26_write_27_append_28_from_37_ptr_41_block0(v109), !699

        hash_26_write_27_append_28_from_37_ptr_41_block0(v110: { u64, u64 }):
        v111 = get_local ptr { u64, u64 }, __anon_01, !700
        store v110 to v111, !701
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !703
        v114 = load v113, !704
        br hash_26_write_27_append_28_from_37_block6(v114), !705

        hash_26_write_27_append_28_from_37_block6(v115: u64):
        v116 = get_local ptr u64, ptr, !707
        v117 = get_local ptr u64, cap, !709
        v118 = const u64 1
        v119 = mul v99, v118, !714
        br hash_26_write_27_append_28_from_37_copy_to_40_block0(v119), !715

        hash_26_write_27_append_28_from_37_copy_to_40_block0(v120: u64):
        v121 = get_local ptr u64, len, !717
        v122 = get_local ptr u64, len, !719
        v123 = asm(dst: v103, src: v115, len: v120) -> (), !721 {
            mcp    dst src len, !722
        }
        v124 = const unit ()
        br hash_26_write_27_append_28_from_37_block7(v124), !723

        hash_26_write_27_append_28_from_37_block7(v125: ()):
        v126 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v126), !724

        hash_26_write_27_append_28_from_37_block1():
        v127 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v127), !725

        hash_26_write_27_append_28_from_37_block2(v128: ()):
        v129 = get_local ptr u64, ptr, !727
        v130 = get_local ptr u64, cap, !729
        v131 = get_local ptr { u64, u64 }, __anon_00, !731
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !732
        store v103 to v133, !733
        v134 = const u64 1
        v135 = get_elem_ptr v131, ptr u64, v134, !734
        store v99 to v135, !735
        v136 = load v131, !736
        br hash_26_write_27_append_28_block15(v136), !737

        hash_26_write_27_append_28_block15(v137: { u64, u64 }):
        v138 = const u64 0
        v139 = get_elem_ptr v9, ptr { u64, u64 }, v138, !739
        store v137 to v139, !740
        v140 = const unit ()
        br hash_26_write_27_append_28_block8(v140), !741

        hash_26_write_27_append_28_block7():
        v141 = const unit ()
        br hash_26_write_27_append_28_block8(v141), !742

        hash_26_write_27_append_28_block8(v142: ()):
        v143 = const u64 0
        v144 = get_elem_ptr v9, ptr { u64, u64 }, v143, !743
        v145 = load v144, !744
        v146 = call ptr_22(v145), !747
        v147 = get_local ptr u64, other_start, !749
        v148 = asm(ptr: v146, offset: v41, new) -> u64 new, !753 {
            add    new ptr offset, !754
        }
        br hash_26_write_27_append_28_block16(v148), !755

        hash_26_write_27_append_28_block16(v149: u64):
        v150 = get_local ptr u64, new_ptr, !757
        v151 = load v11, !758
        v152 = call ptr_21(v151), !761
        v153 = get_local ptr u64, new_ptr, !763
        v154 = get_local ptr u64, other_len, !765
        v155 = asm(dst: v149, src: v152, len: v13) -> (), !768 {
            mcp    dst src len, !269
        }
        br hash_26_write_27_append_28_block17(v69), !769

        hash_26_write_27_append_28_block17(v156: ()):
        v157 = get_local ptr u64, both_len, !771
        v158 = const u64 1
        v159 = get_elem_ptr v9, ptr u64, v158, !773
        store v37 to v159, !774
        v160 = const unit ()
        br hash_26_write_27_block0(v160), !775

        hash_26_write_27_block0(v161: ()):
        v162 = const unit ()
        br hash_26_block0(v162), !776

        hash_26_block0(v163: ()):
        v164 = const unit ()
        br block0(v164), !521

        block0(v165: ()):
        v166 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !777
        v167 = load v166
        v168 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !779
        br sha256_43_block0(v168), !784

        sha256_43_block0(v169: b256):
        v170 = get_local ptr b256, result_buffer, !786
        store v169 to v170, !787
        v171 = get_local ptr b256, result_buffer, !789
        v172 = ptr_to_int v167 to u64, !790
        v173 = int_to_ptr v172 to ptr { { { u64, u64 }, u64 } }, !790
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr { { u64, u64 }, u64 }, v174, !791
        v176 = load v175, !790
        v177 = call ptr_21(v176), !794
        v178 = ptr_to_int v167 to u64, !790
        v179 = int_to_ptr v178 to ptr { { { u64, u64 }, u64 } }, !790
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr { { u64, u64 }, u64 }, v180, !795
        v182 = load v181, !790
        v183 = call len_20(v182), !798
        v184 = asm(hash: v171, ptr: v177, bytes: v183) -> b256 hash, !800 {
            s256   hash ptr bytes, !801
        }
        br block1(v184), !790

        block1(v185: b256):
        ret b256 v185
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !804 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !80
        v1 = asm(size: v0) -> u64 hp, !807 {
            aloc   size, !88
        }
        br new_2_new_3_block0(v1), !808

        new_2_new_3_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_000, !809
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !810
        store v2 to v5, !811
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !812
        v8 = const u64 0, !94
        store v8 to v7, !813
        v9 = load v3, !814
        br new_2_block0(v9), !815

        new_2_block0(v10: { u64, u64 }):
        v11 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !816
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { u64, u64 }, v12, !817
        store v10 to v13, !818
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14, !817
        v16 = const u64 0, !97
        store v16 to v15, !819
        v17 = load v11, !817
        br block0(v17), !817

        block0(v18: { { u64, u64 }, u64 }):
        v19 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !820
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { { u64, u64 }, u64 }, v20
        store v18 to v21, !820
        v22 = load v19
        ret { { { u64, u64 }, u64 } } v22
    }

    pub fn hash_26(self !821: { { { u64, u64 }, u64 } }, state !822: ptr { { { u64, u64 }, u64 } }) -> (), !825 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !522
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr state, ptr { { u64, u64 }, u64 }, v5, !826
        v7 = ptr_to_int v4 to u64, !827
        v8 = int_to_ptr v7 to ptr { { u64, u64 }, u64 }, !827
        v9 = load v8, !828
        v10 = call len_20(v9), !829
        v11 = get_local ptr u64, other_len, !830
        v12 = get_local ptr u64, other_len, !831
        v13 = const u64 0, !540
        v14 = cmp eq v10 v13, !832
        br write_27_append_28_block9(v14), !833

        write_27_append_28_block9(v15: bool):
        cbr v15, write_27_append_28_block0(), write_27_append_28_block1(), !834

        write_27_append_28_block0():
        v16 = const unit (), !546
        br write_27_block0(v16), !835

        write_27_append_28_block1():
        v17 = const unit ()
        br write_27_append_28_block2(v17), !836

        write_27_append_28_block2(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr v6, ptr u64, v19, !837
        v21 = load v20, !838
        v22 = const u64 0, !551
        v23 = cmp eq v21 v22, !839
        br write_27_append_28_block10(v23), !840

        write_27_append_28_block10(v24: bool):
        cbr v24, write_27_append_28_block3(), write_27_append_28_block4(), !841

        write_27_append_28_block3():
        v25 = load v8, !842
        store v25 to v6, !843
        v26 = const unit (), !560
        br write_27_block0(v26), !844

        write_27_append_28_block4():
        v27 = const unit ()
        br write_27_append_28_block5(v27), !845

        write_27_append_28_block5(v28: ()):
        v29 = const u64 1
        v30 = get_elem_ptr v6, ptr u64, v29, !846
        v31 = load v30, !847
        v32 = get_local ptr u64, other_len, !848
        v33 = add v31, v10, !849
        br write_27_append_28_block11(v33), !850

        write_27_append_28_block11(v34: u64):
        v35 = get_local ptr u64, both_len, !851
        v36 = const u64 1
        v37 = get_elem_ptr v6, ptr u64, v36, !852
        v38 = load v37, !853
        v39 = get_local ptr u64, other_start, !854
        v40 = const u64 0
        v41 = get_elem_ptr v6, ptr { u64, u64 }, v40, !855
        v42 = load v41, !856
        v43 = call capacity_31(v42), !857
        v44 = get_local ptr u64, both_len, !858
        v45 = cmp lt v43 v34, !859
        br write_27_append_28_block12(v45), !860

        write_27_append_28_block12(v46: bool):
        cbr v46, write_27_append_28_block6(), write_27_append_28_block7(), !861

        write_27_append_28_block6():
        v47 = const u64 0
        v48 = get_elem_ptr v6, ptr { u64, u64 }, v47, !862
        v49 = load v48, !863
        v50 = call ptr_22(v49), !864
        v51 = const u64 0
        v52 = get_elem_ptr v6, ptr { u64, u64 }, v51, !865
        v53 = load v52, !866
        v54 = call capacity_31(v53), !867
        v55 = get_local ptr u64, both_len, !868
        v56 = cmp gt v34 v54, !869
        br write_27_append_28_realloc_bytes_35_block6(v56), !870

        write_27_append_28_realloc_bytes_35_block6(v57: bool):
        cbr v57, write_27_append_28_realloc_bytes_35_block0(), write_27_append_28_realloc_bytes_35_block4(), !871

        write_27_append_28_realloc_bytes_35_block0():
        v58 = asm(size: v34) -> u64 hp, !872 {
            aloc   size, !88
        }
        br write_27_append_28_realloc_bytes_35_block7(v58), !873

        write_27_append_28_realloc_bytes_35_block7(v59: u64):
        v60 = get_local ptr u64, new_ptr0, !874
        v61 = const u64 0, !614
        v62 = cmp gt v54 v61, !875
        br write_27_append_28_realloc_bytes_35_block8(v62), !876

        write_27_append_28_realloc_bytes_35_block8(v63: bool):
        cbr v63, write_27_append_28_realloc_bytes_35_block1(), write_27_append_28_realloc_bytes_35_block2(), !877

        write_27_append_28_realloc_bytes_35_block1():
        v64 = get_local ptr u64, new_ptr0, !878
        v65 = asm(dst: v59, src: v50, len: v54) -> (), !879 {
            mcp    dst src len, !269
        }
        v66 = const unit ()
        br write_27_append_28_realloc_bytes_35_block9(v66), !880

        write_27_append_28_realloc_bytes_35_block9(v67: ()):
        v68 = const unit ()
        br write_27_append_28_realloc_bytes_35_block3(v68), !881

        write_27_append_28_realloc_bytes_35_block2():
        v69 = const unit ()
        br write_27_append_28_realloc_bytes_35_block3(v69), !882

        write_27_append_28_realloc_bytes_35_block3(v70: ()):
        v71 = get_local ptr u64, new_ptr0, !883
        br write_27_append_28_realloc_bytes_35_block5(v59), !884

        write_27_append_28_realloc_bytes_35_block4():
        br write_27_append_28_realloc_bytes_35_block5(v50), !885

        write_27_append_28_realloc_bytes_35_block5(v72: u64):
        br write_27_append_28_block13(v72), !886

        write_27_append_28_block13(v73: u64):
        v74 = get_local ptr u64, both_len, !887
        v75 = const u64 1
        v76 = mul v34, v75, !888
        br write_27_append_28_from_parts_32_block0(v76), !889

        write_27_append_28_from_parts_32_block0(v77: u64):
        v78 = get_local ptr { u64, u64 }, __anon_0, !890
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr u64, v79, !891
        store v73 to v80, !892
        v81 = const u64 1
        v82 = get_elem_ptr v78, ptr u64, v81, !893
        store v77 to v82, !894
        v83 = load v78, !895
        v84 = asm(ptr: v83) -> slice ptr, !896 {
        }
        br write_27_append_28_from_parts_32_block1(v84), !897

        write_27_append_28_from_parts_32_block1(v85: slice):
        br write_27_append_28_block14(v85), !898

        write_27_append_28_block14(v86: slice):
        v87 = get_local ptr slice, new_slice, !899
        store v86 to v87, !900
        v88 = get_local ptr slice, new_slice, !901
        v89 = load v88, !902
        v90 = asm(ptr: v89) -> { u64, u64 } ptr, !903 {
        }
        br write_27_append_28_from_37_number_of_bytes_38_block0(v90), !904

        write_27_append_28_from_37_number_of_bytes_38_block0(v91: { u64, u64 }):
        v92 = get_local ptr { u64, u64 }, __anon_000, !905
        store v91 to v92, !906
        v93 = const u64 1
        v94 = get_elem_ptr v92, ptr u64, v93, !907
        v95 = load v94, !908
        br write_27_append_28_from_37_block3(v95), !909

        write_27_append_28_from_37_block3(v96: u64):
        v97 = get_local ptr u64, cap, !910
        v98 = get_local ptr u64, cap, !911
        v99 = asm(size: v96) -> u64 hp, !912 {
            aloc   size, !88
        }
        br write_27_append_28_from_37_block4(v99), !913

        write_27_append_28_from_37_block4(v100: u64):
        v101 = get_local ptr u64, ptr, !914
        v102 = get_local ptr u64, cap, !915
        v103 = const u64 0, !688
        v104 = cmp gt v96 v103, !916
        br write_27_append_28_from_37_block5(v104), !917

        write_27_append_28_from_37_block5(v105: bool):
        cbr v105, write_27_append_28_from_37_block0(), write_27_append_28_from_37_block1(), !918

        write_27_append_28_from_37_block0():
        v106 = asm(ptr: v89) -> { u64, u64 } ptr, !919 {
        }
        br write_27_append_28_from_37_ptr_41_block0(v106), !920

        write_27_append_28_from_37_ptr_41_block0(v107: { u64, u64 }):
        v108 = get_local ptr { u64, u64 }, __anon_01, !921
        store v107 to v108, !922
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u64, v109, !923
        v111 = load v110, !924
        br write_27_append_28_from_37_block6(v111), !925

        write_27_append_28_from_37_block6(v112: u64):
        v113 = get_local ptr u64, ptr, !926
        v114 = get_local ptr u64, cap, !927
        v115 = const u64 1
        v116 = mul v96, v115, !928
        br write_27_append_28_from_37_copy_to_40_block0(v116), !929

        write_27_append_28_from_37_copy_to_40_block0(v117: u64):
        v118 = get_local ptr u64, len, !930
        v119 = get_local ptr u64, len, !931
        v120 = asm(dst: v100, src: v112, len: v117) -> (), !932 {
            mcp    dst src len, !722
        }
        v121 = const unit ()
        br write_27_append_28_from_37_block7(v121), !933

        write_27_append_28_from_37_block7(v122: ()):
        v123 = const unit ()
        br write_27_append_28_from_37_block2(v123), !934

        write_27_append_28_from_37_block1():
        v124 = const unit ()
        br write_27_append_28_from_37_block2(v124), !935

        write_27_append_28_from_37_block2(v125: ()):
        v126 = get_local ptr u64, ptr, !936
        v127 = get_local ptr u64, cap, !937
        v128 = get_local ptr { u64, u64 }, __anon_00, !938
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr u64, v129, !939
        store v100 to v130, !940
        v131 = const u64 1
        v132 = get_elem_ptr v128, ptr u64, v131, !941
        store v96 to v132, !942
        v133 = load v128, !943
        br write_27_append_28_block15(v133), !944

        write_27_append_28_block15(v134: { u64, u64 }):
        v135 = const u64 0
        v136 = get_elem_ptr v6, ptr { u64, u64 }, v135, !945
        store v134 to v136, !946
        v137 = const unit ()
        br write_27_append_28_block8(v137), !947

        write_27_append_28_block7():
        v138 = const unit ()
        br write_27_append_28_block8(v138), !948

        write_27_append_28_block8(v139: ()):
        v140 = const u64 0
        v141 = get_elem_ptr v6, ptr { u64, u64 }, v140, !949
        v142 = load v141, !950
        v143 = call ptr_22(v142), !951
        v144 = get_local ptr u64, other_start, !952
        v145 = asm(ptr: v143, offset: v38, new) -> u64 new, !953 {
            add    new ptr offset, !754
        }
        br write_27_append_28_block16(v145), !954

        write_27_append_28_block16(v146: u64):
        v147 = get_local ptr u64, new_ptr, !955
        v148 = load v8, !956
        v149 = call ptr_21(v148), !957
        v150 = get_local ptr u64, new_ptr, !958
        v151 = get_local ptr u64, other_len, !959
        v152 = asm(dst: v146, src: v149, len: v10) -> (), !960 {
            mcp    dst src len, !269
        }
        br write_27_append_28_block17(v66), !961

        write_27_append_28_block17(v153: ()):
        v154 = get_local ptr u64, both_len, !962
        v155 = const u64 1
        v156 = get_elem_ptr v6, ptr u64, v155, !963
        store v34 to v156, !964
        v157 = const unit ()
        br write_27_block0(v157), !965

        write_27_block0(v158: ()):
        v159 = const unit ()
        br block0(v159), !827

        block0(v160: ()):
        v161 = const unit ()
        ret () v161
    }

    pub fn write_27(self !966: ptr { { { u64, u64 }, u64 } }, bytes !967: { { u64, u64 }, u64 }) -> (), !970 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !526
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !971
        v5 = call len_20(v4), !972
        v6 = get_local ptr u64, other_len, !973
        v7 = get_local ptr u64, other_len, !974
        v8 = const u64 0, !540
        v9 = cmp eq v5 v8, !975
        br append_28_block9(v9), !976

        append_28_block9(v10: bool):
        cbr v10, append_28_block0(), append_28_block1(), !977

        append_28_block0():
        v11 = const unit (), !546
        br block0(v11), !978

        append_28_block1():
        v12 = const unit ()
        br append_28_block2(v12), !971

        append_28_block2(v13: ()):
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v14, !979
        v16 = load v15, !971
        v17 = const u64 0, !551
        v18 = cmp eq v16 v17, !980
        br append_28_block10(v18), !981

        append_28_block10(v19: bool):
        cbr v19, append_28_block3(), append_28_block4(), !982

        append_28_block3():
        v20 = load v3, !971
        store v20 to v1, !983
        v21 = const unit (), !560
        br block0(v21), !984

        append_28_block4():
        v22 = const unit ()
        br append_28_block5(v22), !971

        append_28_block5(v23: ()):
        v24 = const u64 1
        v25 = get_elem_ptr v1, ptr u64, v24, !985
        v26 = load v25, !971
        v27 = get_local ptr u64, other_len, !986
        v28 = add v26, v5, !987
        br append_28_block11(v28), !988

        append_28_block11(v29: u64):
        v30 = get_local ptr u64, both_len, !989
        v31 = const u64 1
        v32 = get_elem_ptr v1, ptr u64, v31, !990
        v33 = load v32, !971
        v34 = get_local ptr u64, other_start, !991
        v35 = const u64 0
        v36 = get_elem_ptr v1, ptr { u64, u64 }, v35, !992
        v37 = load v36, !971
        v38 = call capacity_31(v37), !993
        v39 = get_local ptr u64, both_len, !994
        v40 = cmp lt v38 v29, !995
        br append_28_block12(v40), !996

        append_28_block12(v41: bool):
        cbr v41, append_28_block6(), append_28_block7(), !997

        append_28_block6():
        v42 = const u64 0
        v43 = get_elem_ptr v1, ptr { u64, u64 }, v42, !998
        v44 = load v43, !971
        v45 = call ptr_22(v44), !999
        v46 = const u64 0
        v47 = get_elem_ptr v1, ptr { u64, u64 }, v46, !1000
        v48 = load v47, !971
        v49 = call capacity_31(v48), !1001
        v50 = get_local ptr u64, both_len, !1002
        v51 = cmp gt v29 v49, !1003
        br append_28_realloc_bytes_35_block6(v51), !1004

        append_28_realloc_bytes_35_block6(v52: bool):
        cbr v52, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block4(), !1005

        append_28_realloc_bytes_35_block0():
        v53 = asm(size: v29) -> u64 hp, !1006 {
            aloc   size, !88
        }
        br append_28_realloc_bytes_35_block7(v53), !1007

        append_28_realloc_bytes_35_block7(v54: u64):
        v55 = get_local ptr u64, new_ptr0, !1008
        v56 = const u64 0, !614
        v57 = cmp gt v49 v56, !1009
        br append_28_realloc_bytes_35_block8(v57), !1010

        append_28_realloc_bytes_35_block8(v58: bool):
        cbr v58, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block2(), !1011

        append_28_realloc_bytes_35_block1():
        v59 = get_local ptr u64, new_ptr0, !1012
        v60 = asm(dst: v54, src: v45, len: v49) -> (), !1013 {
            mcp    dst src len, !269
        }
        v61 = const unit ()
        br append_28_realloc_bytes_35_block9(v61), !1014

        append_28_realloc_bytes_35_block9(v62: ()):
        v63 = const unit ()
        br append_28_realloc_bytes_35_block3(v63), !1015

        append_28_realloc_bytes_35_block2():
        v64 = const unit ()
        br append_28_realloc_bytes_35_block3(v64), !1016

        append_28_realloc_bytes_35_block3(v65: ()):
        v66 = get_local ptr u64, new_ptr0, !1017
        br append_28_realloc_bytes_35_block5(v54), !1018

        append_28_realloc_bytes_35_block4():
        br append_28_realloc_bytes_35_block5(v45), !1019

        append_28_realloc_bytes_35_block5(v67: u64):
        br append_28_block13(v67), !1020

        append_28_block13(v68: u64):
        v69 = get_local ptr u64, both_len, !1021
        v70 = const u64 1
        v71 = mul v29, v70, !1022
        br append_28_from_parts_32_block0(v71), !1023

        append_28_from_parts_32_block0(v72: u64):
        v73 = get_local ptr { u64, u64 }, __anon_0, !1024
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !1025
        store v68 to v75, !1026
        v76 = const u64 1
        v77 = get_elem_ptr v73, ptr u64, v76, !1027
        store v72 to v77, !1028
        v78 = load v73, !1029
        v79 = asm(ptr: v78) -> slice ptr, !1030 {
        }
        br append_28_from_parts_32_block1(v79), !1031

        append_28_from_parts_32_block1(v80: slice):
        br append_28_block14(v80), !1032

        append_28_block14(v81: slice):
        v82 = get_local ptr slice, new_slice, !1033
        store v81 to v82, !1034
        v83 = get_local ptr slice, new_slice, !1035
        v84 = load v83, !971
        v85 = asm(ptr: v84) -> { u64, u64 } ptr, !1036 {
        }
        br append_28_from_37_number_of_bytes_38_block0(v85), !1037

        append_28_from_37_number_of_bytes_38_block0(v86: { u64, u64 }):
        v87 = get_local ptr { u64, u64 }, __anon_000, !1038
        store v86 to v87, !1039
        v88 = const u64 1
        v89 = get_elem_ptr v87, ptr u64, v88, !1040
        v90 = load v89, !1041
        br append_28_from_37_block3(v90), !1042

        append_28_from_37_block3(v91: u64):
        v92 = get_local ptr u64, cap, !1043
        v93 = get_local ptr u64, cap, !1044
        v94 = asm(size: v91) -> u64 hp, !1045 {
            aloc   size, !88
        }
        br append_28_from_37_block4(v94), !1046

        append_28_from_37_block4(v95: u64):
        v96 = get_local ptr u64, ptr, !1047
        v97 = get_local ptr u64, cap, !1048
        v98 = const u64 0, !688
        v99 = cmp gt v91 v98, !1049
        br append_28_from_37_block5(v99), !1050

        append_28_from_37_block5(v100: bool):
        cbr v100, append_28_from_37_block0(), append_28_from_37_block1(), !1051

        append_28_from_37_block0():
        v101 = asm(ptr: v84) -> { u64, u64 } ptr, !1052 {
        }
        br append_28_from_37_ptr_41_block0(v101), !1053

        append_28_from_37_ptr_41_block0(v102: { u64, u64 }):
        v103 = get_local ptr { u64, u64 }, __anon_01, !1054
        store v102 to v103, !1055
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !1056
        v106 = load v105, !1057
        br append_28_from_37_block6(v106), !1058

        append_28_from_37_block6(v107: u64):
        v108 = get_local ptr u64, ptr, !1059
        v109 = get_local ptr u64, cap, !1060
        v110 = const u64 1
        v111 = mul v91, v110, !1061
        br append_28_from_37_copy_to_40_block0(v111), !1062

        append_28_from_37_copy_to_40_block0(v112: u64):
        v113 = get_local ptr u64, len, !1063
        v114 = get_local ptr u64, len, !1064
        v115 = asm(dst: v95, src: v107, len: v112) -> (), !1065 {
            mcp    dst src len, !722
        }
        v116 = const unit ()
        br append_28_from_37_block7(v116), !1066

        append_28_from_37_block7(v117: ()):
        v118 = const unit ()
        br append_28_from_37_block2(v118), !1067

        append_28_from_37_block1():
        v119 = const unit ()
        br append_28_from_37_block2(v119), !1068

        append_28_from_37_block2(v120: ()):
        v121 = get_local ptr u64, ptr, !1069
        v122 = get_local ptr u64, cap, !1070
        v123 = get_local ptr { u64, u64 }, __anon_00, !1071
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr u64, v124, !1072
        store v95 to v125, !1073
        v126 = const u64 1
        v127 = get_elem_ptr v123, ptr u64, v126, !1074
        store v91 to v127, !1075
        v128 = load v123, !1076
        br append_28_block15(v128), !1077

        append_28_block15(v129: { u64, u64 }):
        v130 = const u64 0
        v131 = get_elem_ptr v1, ptr { u64, u64 }, v130, !1078
        store v129 to v131, !1079
        v132 = const unit ()
        br append_28_block8(v132), !971

        append_28_block7():
        v133 = const unit ()
        br append_28_block8(v133), !971

        append_28_block8(v134: ()):
        v135 = const u64 0
        v136 = get_elem_ptr v1, ptr { u64, u64 }, v135, !1080
        v137 = load v136, !971
        v138 = call ptr_22(v137), !1081
        v139 = get_local ptr u64, other_start, !1082
        v140 = asm(ptr: v138, offset: v33, new) -> u64 new, !1083 {
            add    new ptr offset, !754
        }
        br append_28_block16(v140), !1084

        append_28_block16(v141: u64):
        v142 = get_local ptr u64, new_ptr, !1085
        v143 = load v3, !971
        v144 = call ptr_21(v143), !1086
        v145 = get_local ptr u64, new_ptr, !1087
        v146 = get_local ptr u64, other_len, !1088
        v147 = asm(dst: v141, src: v144, len: v5) -> (), !1089 {
            mcp    dst src len, !269
        }
        br append_28_block17(v61), !1090

        append_28_block17(v148: ()):
        v149 = get_local ptr u64, both_len, !1091
        v150 = const u64 1
        v151 = get_elem_ptr v1, ptr u64, v150, !1092
        store v29 to v151, !1093
        v152 = const unit ()
        br block0(v152), !971

        block0(v153: ()):
        v154 = const unit ()
        ret () v154
    }

    pub fn append_28(self !1094: ptr { { u64, u64 }, u64 }, other !1095: ptr { { u64, u64 }, u64 }) -> (), !1098 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !1099
        v2 = get_local ptr u64, other_len, !536
        v3 = get_local ptr u64, other_len, !538
        v4 = const u64 0, !540
        v5 = cmp eq v1 v4, !1100
        br block9(v5), !1100

        block9(v6: bool):
        cbr v6, block0(), block1(), !541

        block0():
        v7 = const unit (), !546
        ret () v7, !546

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !493
        v12 = load v11
        v13 = const u64 0, !551
        v14 = cmp eq v12 v13, !1101
        br block10(v14), !1101

        block10(v15: bool):
        cbr v15, block3(), block4(), !552

        block3():
        v16 = load other
        store v16 to self, !558
        v17 = const unit (), !560
        ret () v17, !560

        block4():
        v18 = const unit ()
        br block5(v18)

        block5(v19: ()):
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !493
        v22 = load v21
        v23 = get_local ptr u64, other_len, !565
        v24 = add v22, v1, !1102
        br block11(v24), !1102

        block11(v25: u64):
        v26 = get_local ptr u64, both_len, !571
        v27 = const u64 1
        v28 = get_elem_ptr self, ptr u64, v27, !493
        v29 = load v28
        v30 = get_local ptr u64, other_start, !575
        v31 = const u64 0
        v32 = get_elem_ptr self, ptr { u64, u64 }, v31, !258
        v33 = load v32
        v34 = call capacity_31(v33), !1103
        v35 = get_local ptr u64, both_len, !582
        v36 = cmp lt v34 v25, !1104
        br block12(v36), !1104

        block12(v37: bool):
        cbr v37, block6(), block7(), !584

        block6():
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !258
        v40 = load v39
        v41 = call ptr_22(v40), !1105
        v42 = const u64 0
        v43 = get_elem_ptr self, ptr { u64, u64 }, v42, !258
        v44 = load v43
        v45 = call capacity_31(v44), !1106
        v46 = get_local ptr u64, both_len, !599
        v47 = cmp gt v25 v45, !1107
        br realloc_bytes_35_block6(v47), !1108

        realloc_bytes_35_block6(v48: bool):
        cbr v48, realloc_bytes_35_block0(), realloc_bytes_35_block4(), !1109

        realloc_bytes_35_block0():
        v49 = asm(size: v25) -> u64 hp, !1110 {
            aloc   size, !88
        }
        br realloc_bytes_35_block7(v49), !1111

        realloc_bytes_35_block7(v50: u64):
        v51 = get_local ptr u64, new_ptr0, !1112
        v52 = const u64 0, !614
        v53 = cmp gt v45 v52, !1113
        br realloc_bytes_35_block8(v53), !1114

        realloc_bytes_35_block8(v54: bool):
        cbr v54, realloc_bytes_35_block1(), realloc_bytes_35_block2(), !1115

        realloc_bytes_35_block1():
        v55 = get_local ptr u64, new_ptr0, !1116
        v56 = asm(dst: v50, src: v41, len: v45) -> (), !1117 {
            mcp    dst src len, !269
        }
        v57 = const unit ()
        br realloc_bytes_35_block9(v57), !1118

        realloc_bytes_35_block9(v58: ()):
        v59 = const unit ()
        br realloc_bytes_35_block3(v59), !1119

        realloc_bytes_35_block2():
        v60 = const unit ()
        br realloc_bytes_35_block3(v60), !1119

        realloc_bytes_35_block3(v61: ()):
        v62 = get_local ptr u64, new_ptr0, !1120
        br realloc_bytes_35_block5(v50), !1119

        realloc_bytes_35_block4():
        br realloc_bytes_35_block5(v41), !1119

        realloc_bytes_35_block5(v63: u64):
        br block13(v63), !1119

        block13(v64: u64):
        v65 = get_local ptr u64, both_len, !633
        v66 = const u64 1
        v67 = mul v25, v66, !1121
        br from_parts_32_block0(v67), !1122

        from_parts_32_block0(v68: u64):
        v69 = get_local ptr { u64, u64 }, __anon_0, !1123
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !1124
        store v64 to v71, !1125
        v72 = const u64 1
        v73 = get_elem_ptr v69, ptr u64, v72, !1126
        store v68 to v73, !1127
        v74 = load v69, !1128
        v75 = asm(ptr: v74) -> slice ptr, !1129 {
        }
        br from_parts_32_block1(v75), !1130

        from_parts_32_block1(v76: slice):
        br block14(v76), !1128

        block14(v77: slice):
        v78 = get_local ptr slice, new_slice, !655
        store v77 to v78, !655
        v79 = get_local ptr slice, new_slice, !658
        v80 = load v79
        v81 = asm(ptr: v80) -> { u64, u64 } ptr, !1131 {
        }
        br from_37_number_of_bytes_38_block0(v81), !1132

        from_37_number_of_bytes_38_block0(v82: { u64, u64 }):
        v83 = get_local ptr { u64, u64 }, __anon_000, !1133
        store v82 to v83, !1134
        v84 = const u64 1
        v85 = get_elem_ptr v83, ptr u64, v84, !1135
        v86 = load v85, !1136
        br from_37_block3(v86), !1137

        from_37_block3(v87: u64):
        v88 = get_local ptr u64, cap, !1138
        v89 = get_local ptr u64, cap, !1139
        v90 = asm(size: v87) -> u64 hp, !1140 {
            aloc   size, !88
        }
        br from_37_block4(v90), !1141

        from_37_block4(v91: u64):
        v92 = get_local ptr u64, ptr, !1142
        v93 = get_local ptr u64, cap, !1143
        v94 = const u64 0, !688
        v95 = cmp gt v87 v94, !1144
        br from_37_block5(v95), !1145

        from_37_block5(v96: bool):
        cbr v96, from_37_block0(), from_37_block1(), !1146

        from_37_block0():
        v97 = asm(ptr: v80) -> { u64, u64 } ptr, !1147 {
        }
        br from_37_ptr_41_block0(v97), !1148

        from_37_ptr_41_block0(v98: { u64, u64 }):
        v99 = get_local ptr { u64, u64 }, __anon_01, !1149
        store v98 to v99, !1150
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !1151
        v102 = load v101, !1152
        br from_37_block6(v102), !1153

        from_37_block6(v103: u64):
        v104 = get_local ptr u64, ptr, !1154
        v105 = get_local ptr u64, cap, !1155
        v106 = const u64 1
        v107 = mul v87, v106, !1156
        br from_37_copy_to_40_block0(v107), !1157

        from_37_copy_to_40_block0(v108: u64):
        v109 = get_local ptr u64, len, !1158
        v110 = get_local ptr u64, len, !1159
        v111 = asm(dst: v91, src: v103, len: v108) -> (), !1160 {
            mcp    dst src len, !722
        }
        v112 = const unit ()
        br from_37_block7(v112), !1161

        from_37_block7(v113: ()):
        v114 = const unit ()
        br from_37_block2(v114), !1162

        from_37_block1():
        v115 = const unit ()
        br from_37_block2(v115), !1162

        from_37_block2(v116: ()):
        v117 = get_local ptr u64, ptr, !1163
        v118 = get_local ptr u64, cap, !1164
        v119 = get_local ptr { u64, u64 }, __anon_00, !1165
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr u64, v120, !1162
        store v91 to v121, !1166
        v122 = const u64 1
        v123 = get_elem_ptr v119, ptr u64, v122, !1162
        store v87 to v123, !1167
        v124 = load v119, !1162
        br block15(v124), !1162

        block15(v125: { u64, u64 }):
        v126 = const u64 0
        v127 = get_elem_ptr self, ptr { u64, u64 }, v126, !738
        store v125 to v127, !738
        v128 = const unit ()
        br block8(v128)

        block7():
        v129 = const unit ()
        br block8(v129)

        block8(v130: ()):
        v131 = const u64 0
        v132 = get_elem_ptr self, ptr { u64, u64 }, v131, !258
        v133 = load v132
        v134 = call ptr_22(v133), !1168
        v135 = get_local ptr u64, other_start, !748
        v136 = asm(ptr: v134, offset: v29, new) -> u64 new, !1169 {
            add    new ptr offset, !754
        }
        br block16(v136), !1170

        block16(v137: u64):
        v138 = get_local ptr u64, new_ptr, !756
        v139 = load other
        v140 = call ptr_21(v139), !1171
        v141 = get_local ptr u64, new_ptr, !762
        v142 = get_local ptr u64, other_len, !764
        v143 = asm(dst: v137, src: v140, len: v1) -> (), !1172 {
            mcp    dst src len, !269
        }
        br block17(v57), !1173

        block17(v144: ()):
        v145 = get_local ptr u64, both_len, !770
        v146 = const u64 1
        v147 = get_elem_ptr self, ptr u64, v146, !772
        store v25 to v147, !772
        v148 = const unit ()
        ret () v148
    }

    pub fn add_29(self !1174: u64, other !1175: u64) -> u64, !1178 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !1179: u64, other !1180: u64) -> bool, !1183 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !1184: { u64, u64 }) -> u64, !1187 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1188
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !1189: u64, count !1190: u64) -> slice, !1193 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1194
        br block0(v1), !1194

        block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_0, !642
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !642
        store ptr to v5, !642
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !642
        store v2 to v7, !642
        v8 = load v3
        v9 = asm(ptr: v8) -> slice ptr, !1195 {
        }
        br block1(v9), !1196

        block1(v10: slice):
        ret slice v10
    }

    fn from_parts_33(parts !1197: { u64, u64 }) -> slice, !1200 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !651 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !1201: u64, other !1202: u64) -> u64, !1205 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !1206: u64, count !1207: u64, new_count !1208: u64) -> u64, !1211 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = cmp gt new_count count, !1212
        br block6(v0), !1212

        block6(v1: bool):
        cbr v1, block0(), block4(), !603

        block0():
        v2 = asm(size: new_count) -> u64 hp, !1213 {
            aloc   size, !88
        }
        br block7(v2), !1214

        block7(v3: u64):
        v4 = get_local ptr u64, new_ptr, !612
        v5 = const u64 0, !614
        v6 = cmp gt count v5, !1215
        br block8(v6), !1215

        block8(v7: bool):
        cbr v7, block1(), block2(), !615

        block1():
        v8 = get_local ptr u64, new_ptr, !620
        v9 = asm(dst: v3, src: ptr, len: count) -> (), !1216 {
            mcp    dst src len, !269
        }
        v10 = const unit ()
        br block9(v10), !1217

        block9(v11: ()):
        v12 = const unit ()
        br block3(v12)

        block2():
        v13 = const unit ()
        br block3(v13)

        block3(v14: ()):
        v15 = get_local ptr u64, new_ptr, !628
        br block5(v3)

        block4():
        br block5(ptr)

        block5(v16: u64):
        ret u64 v16
    }

    pub fn gt_36(self !1218: u64, other !1219: u64) -> bool, !1222 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !1223: slice) -> { u64, u64 }, !1226 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_01
        local u64 cap
        local u64 len
        local u64 ptr

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !1227 {
        }
        br number_of_bytes_38_block0(v0), !1228

        number_of_bytes_38_block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_00, !1229
        store v1 to v2, !1229
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !1230
        v5 = load v4, !1229
        br block3(v5), !1229

        block3(v6: u64):
        v7 = get_local ptr u64, cap, !676
        v8 = get_local ptr u64, cap, !678
        v9 = asm(size: v6) -> u64 hp, !1231 {
            aloc   size, !88
        }
        br block4(v9), !1232

        block4(v10: u64):
        v11 = get_local ptr u64, ptr, !684
        v12 = get_local ptr u64, cap, !686
        v13 = const u64 0, !688
        v14 = cmp gt v6 v13, !1233
        br block5(v14), !1233

        block5(v15: bool):
        cbr v15, block0(), block1(), !689

        block0():
        v16 = asm(ptr: slice) -> { u64, u64 } ptr, !1234 {
        }
        br ptr_41_block0(v16), !1235

        ptr_41_block0(v17: { u64, u64 }):
        v18 = get_local ptr { u64, u64 }, __anon_01, !1236
        store v17 to v18, !1236
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !1237
        v21 = load v20, !1236
        br block6(v21), !1236

        block6(v22: u64):
        v23 = get_local ptr u64, ptr, !706
        v24 = get_local ptr u64, cap, !708
        v25 = const u64 1
        v26 = mul v6, v25, !1238
        br copy_to_40_block0(v26), !1239

        copy_to_40_block0(v27: u64):
        v28 = get_local ptr u64, len, !1240
        v29 = get_local ptr u64, len, !1241
        v30 = asm(dst: v10, src: v22, len: v27) -> (), !1242 {
            mcp    dst src len, !722
        }
        v31 = const unit ()
        br block7(v31), !1243

        block7(v32: ()):
        v33 = const unit ()
        br block2(v33)

        block1():
        v34 = const unit ()
        br block2(v34)

        block2(v35: ()):
        v36 = get_local ptr u64, ptr, !726
        v37 = get_local ptr u64, cap, !728
        v38 = get_local ptr { u64, u64 }, __anon_0, !730
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39
        store v10 to v40, !730
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr u64, v41
        store v6 to v42, !730
        v43 = load v38
        ret { u64, u64 } v43
    }

    pub fn number_of_bytes_38(self !1244: slice) -> u64, !1247 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1248 {
        }
        br block0(v0), !1249

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !672
        v5 = load v4
        ret u64 v5
    }

    fn into_parts_39(slice !1250: slice) -> { u64, u64 }, !1253 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !667 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !1254: u64, dst !1255: u64, count !1256: u64) -> (), !1259 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1260
        br block0(v1), !1260

        block0(v2: u64):
        v3 = get_local ptr u64, len, !716
        v4 = get_local ptr u64, len, !718
        v5 = asm(dst: dst, src: self, len: v2) -> (), !720 {
            mcp    dst src len, !722
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn ptr_41(self !1261: slice) -> u64, !1264 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1265 {
        }
        br block0(v0), !1266

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !702
        v5 = load v4
        ret u64 v5
    }

    pub fn add_uint_offset_42(self !1267: u64, offset !1268: u64) -> u64, !1271 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !752 {
            add    new ptr offset, !754
        }
        ret u64 v0
    }

    pub fn sha256_43(self !1272: { { { u64, u64 }, u64 } }) -> b256, !1275 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !779
        br block0(v0), !1276

        block0(v1: b256):
        v2 = get_local ptr b256, result_buffer, !785
        store v1 to v2, !785
        v3 = get_local ptr b256, result_buffer, !788
        v4 = ptr_to_int self to u64
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !526
        v8 = load v7
        v9 = call ptr_21(v8), !1277
        v10 = ptr_to_int self to u64
        v11 = int_to_ptr v10 to ptr { { { u64, u64 }, u64 } }
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { { u64, u64 }, u64 }, v12, !526
        v14 = load v13
        v15 = call len_20(v14), !1278
        v16 = asm(hash: v3, ptr: v9, bytes: v15) -> b256 hash, !799 {
            s256   hash ptr bytes, !801
        }
        ret b256 v16
    }

    pub fn min_44() -> b256, !1281 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !779
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = (!4 !5 !13 !14)
!31 = span !6 1026 1059
!32 = (!4 !5 !31)
!33 = (!4 !5 !31)
!34 = span !6 1072 1081
!35 = (!4 !5 !34)
!36 = (!4 !5)
!37 = span !6 1085 1094
!38 = (!4 !5 !37)
!39 = span !6 1072 1094
!40 = fn_call_path_span !6 1082 1084
!41 = (!4 !5 !39 !40)
!42 = span !6 1064 1095
!43 = (!4 !5 !42)
!44 = span !6 1108 1117
!45 = (!4 !5 !44)
!46 = span !6 1126 1133
!47 = (!4 !5 !46)
!48 = span !6 1108 1134
!49 = fn_call_path_span !6 1118 1125
!50 = (!4 !5 !48 !49)
!51 = span !6 1100 1135
!52 = (!4 !5 !51)
!53 = (!4 !5 !51)
!54 = span !6 1148 1157
!55 = (!4 !5 !54)
!56 = span !6 1166 1173
!57 = (!4 !5 !56)
!58 = span !6 1148 1174
!59 = fn_call_path_span !6 1158 1165
!60 = (!4 !5 !58 !59)
!61 = span !6 1140 1175
!62 = (!4 !5 !61)
!63 = (!4 !5 !61)
!64 = span !6 972 1177
!65 = fn_name_span !6 979 983
!66 = (!64 !65)
!67 = (!7 !8)
!68 = (!13 !14 !15)
!69 = (!13 !14)
!70 = (!13 !14 !15)
!71 = (!13 !14 !25)
!72 = (!13 !14 !25)
!73 = (!39 !40)
!74 = (!48 !49)
!75 = (!58 !59)
!76 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!77 = span !76 3024 3131
!78 = fn_name_span !76 3031 3034
!79 = (!77 !78)
!80 = span !76 570 571
!81 = span !76 3079 3094
!82 = fn_call_path_span !76 3079 3092
!83 = span !76 558 572
!84 = fn_call_path_span !76 558 569
!85 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!86 = span !85 3315 3378
!87 = (!81 !82 !83 !84 !86)
!88 = span !85 3342 3351
!89 = (!81 !82 !83 !84)
!90 = span !76 534 603
!91 = (!81 !82 !90)
!92 = (!81 !82)
!93 = (!81 !82 !90)
!94 = span !76 591 592
!95 = (!81 !82 !90)
!96 = span !76 3055 3125
!97 = span !76 3113 3114
!98 = span !76 503 609
!99 = fn_name_span !76 510 513
!100 = (!98 !99)
!101 = (!83 !84 !86)
!102 = (!83 !84)
!103 = span !85 3286 3291
!104 = span !85 3267 3380
!105 = fn_name_span !85 3274 3285
!106 = (!104 !105)
!107 = span !6 258 340
!108 = fn_name_span !6 265 268
!109 = (!107 !108)
!110 = span !6 805 809
!111 = span !6 811 816
!112 = span !6 799 968
!113 = fn_name_span !6 802 804
!114 = inline "never"
!115 = (!112 !113 !114)
!116 = span !6 218 232
!117 = span !6 889 891
!118 = span !6 842 962
!119 = span !6 907 926
!120 = span !6 507 511
!121 = span !6 513 520
!122 = span !6 492 714
!123 = fn_name_span !6 499 506
!124 = (!122 !123)
!125 = span !6 582 603
!126 = fn_call_path_span !6 587 594
!127 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!128 = span !127 1815 1933
!129 = (!125 !126 !128)
!130 = (!125 !126 !128)
!131 = (!125 !126 !128)
!132 = span !6 451 469
!133 = fn_call_path_span !6 459 467
!134 = (!125 !126 !132 !133)
!135 = (!125 !126 !132 !133)
!136 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!137 = span !136 329 341
!138 = (!125 !126 !132 !133 !137)
!139 = (!125 !126 !132 !133)
!140 = span !136 1573 1589
!141 = fn_call_path_span !136 1584 1587
!142 = (!125 !126 !132 !133 !140 !141)
!143 = span !136 1593 1595
!144 = span !136 1573 1595
!145 = fn_call_path_span !136 1590 1592
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!147 = span !146 15515 15529
!148 = fn_call_path_span !146 15520 15522
!149 = (!125 !126 !132 !133 !144 !145 !147 !148)
!150 = (!125 !126 !132 !133 !144 !145 !147 !148)
!151 = span !146 12533 12538
!152 = span !146 15514 15536
!153 = fn_call_path_span !146 15531 15534
!154 = (!125 !126 !132 !133 !144 !145 !152 !153)
!155 = (!125 !126 !132 !133 !144 !145 !152 !153)
!156 = (!125 !126 !132 !133 !144 !145)
!157 = (!125 !126 !132 !133 !144)
!158 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!159 = span !158 2461 2560
!160 = (!125 !126 !132 !133 !159)
!161 = (!125 !126 !132 !133 !159)
!162 = (!125 !126 !132 !133 !159)
!163 = (!125 !126 !132 !133)
!164 = span !136 1610 1621
!165 = (!125 !126 !132 !133 !164)
!166 = (!125 !126 !132 !133)
!167 = (!125 !126 !132 !133 !159)
!168 = (!125 !126 !132 !133 !159)
!169 = (!125 !126 !132 !133 !159)
!170 = (!125 !126 !132 !133)
!171 = (!125 !126 !132 !133)
!172 = (!125 !126 !132 !133 !137)
!173 = (!125 !126 !132 !133)
!174 = span !136 1657 1673
!175 = fn_call_path_span !136 1668 1671
!176 = (!125 !126 !132 !133 !174 !175)
!177 = span !136 1647 1709
!178 = (!125 !126 !132 !133 !177)
!179 = (!125 !126 !132 !133 !159)
!180 = (!125 !126 !132 !133 !159)
!181 = (!125 !126 !132 !133)
!182 = (!125 !126 !132 !133)
!183 = span !6 451 478
!184 = fn_call_path_span !6 470 476
!185 = span !158 4973 5075
!186 = (!125 !126 !183 !184 !185)
!187 = (!125 !126 !183 !184 !185)
!188 = span !158 4979 4983
!189 = (!125 !126 !183 !184 !188)
!190 = (!125 !126 !183 !184 !188)
!191 = (!125 !126 !183 !184)
!192 = span !158 4998 5037
!193 = fn_call_path_span !158 4998 5037
!194 = (!125 !126 !183 !184 !192 !193)
!195 = (!125 !126 !183 !184 !192 !193)
!196 = (!125 !126 !183 !184 !192)
!197 = (!125 !126 !183 !184 !188)
!198 = (!125 !126 !183 !184)
!199 = (!125 !126 !183 !184)
!200 = span !158 5009 5020
!201 = (!125 !126 !183 !184 !200)
!202 = (!125 !126 !183 !184 !200)
!203 = span !158 5025 5036
!204 = (!125 !126 !183 !184 !203)
!205 = (!125 !126 !183 !184)
!206 = (!125 !126 !183 !184)
!207 = span !158 5062 5063
!208 = span !158 5055 5064
!209 = fn_call_path_span !158 5055 5061
!210 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!211 = span !210 757 771
!212 = (!125 !126 !183 !184 !208 !209 !211)
!213 = (!125 !126 !183 !184)
!214 = (!125 !126 !183 !184)
!215 = span !76 28953 28955
!216 = span !6 435 479
!217 = fn_call_path_span !6 435 450
!218 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!219 = span !218 3133 3150
!220 = fn_call_path_span !218 3133 3144
!221 = span !76 28933 28956
!222 = fn_call_path_span !76 28933 28952
!223 = span !76 4157 4190
!224 = fn_call_path_span !76 4157 4180
!225 = span !76 863 884
!226 = fn_call_path_span !76 863 874
!227 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224 !225 !226 !86)
!228 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224 !225 !226)
!229 = span !76 839 922
!230 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224 !229)
!231 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224)
!232 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224 !229)
!233 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224)
!234 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224 !229)
!235 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224)
!236 = (!125 !126 !216 !217 !219 !220 !221 !222 !223 !224)
!237 = span !76 4133 4221
!238 = (!125 !126 !216 !217 !219 !220 !221 !222 !237)
!239 = (!125 !126 !216 !217 !219 !220 !221 !222)
!240 = (!125 !126 !216 !217 !219 !220 !221 !222 !237)
!241 = (!125 !126 !216 !217 !219 !220 !221 !222)
!242 = span !76 4209 4210
!243 = (!125 !126 !216 !217 !219 !220 !221 !222 !237)
!244 = (!125 !126 !216 !217 !219 !220 !221 !222)
!245 = (!125 !126 !216 !217 !219 !220 !221 !222)
!246 = span !76 28917 28957
!247 = (!125 !126 !216 !217 !219 !220 !246)
!248 = (!125 !126 !216 !217 !219 !220 !246)
!249 = span !76 28966 28980
!250 = (!125 !126 !216 !217 !219 !220 !249)
!251 = (!125 !126 !216 !217 !219 !220 !249)
!252 = span !76 28978 28980
!253 = (!125 !126 !216 !217 !219 !220 !249)
!254 = span !76 29065 29077
!255 = (!125 !126 !216 !217 !219 !220 !254)
!256 = span !76 29092 29097
!257 = (!125 !126 !216 !217 !219 !220 !256)
!258 = span !76 2445 2458
!259 = (!125 !126 !216 !217 !219 !220 !258)
!260 = span !76 400 412
!261 = (!125 !126 !216 !217 !219 !220 !260)
!262 = (!125 !126 !216 !217 !219 !220)
!263 = span !76 29107 29109
!264 = span !76 29065 29110
!265 = fn_call_path_span !76 29078 29091
!266 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!267 = span !266 5999 6076
!268 = (!125 !126 !216 !217 !219 !220 !264 !265 !267)
!269 = span !266 6050 6065
!270 = (!125 !126 !216 !217 !219 !220 !264 !265)
!271 = span !76 29121 29126
!272 = (!125 !126 !216 !217 !219 !220 !271)
!273 = (!125 !126 !216 !217 !219 !220)
!274 = (!125 !126 !216 !217 !219 !220)
!275 = span !218 3107 3161
!276 = (!125 !126 !216 !217 !275)
!277 = (!125 !126 !216 !217)
!278 = (!125 !126 !216 !217 !275)
!279 = (!125 !126 !216 !217)
!280 = (!125 !126 !216 !217)
!281 = (!125 !126 !128)
!282 = (!125 !126 !128)
!283 = (!125 !126)
!284 = span !6 576 708
!285 = span !6 618 668
!286 = fn_call_path_span !6 618 668
!287 = (!285 !286)
!288 = span !6 621 628
!289 = span !6 657 664
!290 = span !6 650 665
!291 = fn_call_path_span !6 650 656
!292 = (!290 !291)
!293 = span !6 636 666
!294 = fn_call_path_span !6 636 649
!295 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!296 = span !295 2370 2383
!297 = (!293 !294 !296)
!298 = (!293 !294)
!299 = (!293 !294 !296)
!300 = span !6 681 698
!301 = fn_call_path_span !6 681 698
!302 = (!300 !301)
!303 = span !6 685 686
!304 = span !6 695 696
!305 = span !6 361 365
!306 = span !6 367 374
!307 = span !6 346 486
!308 = fn_name_span !6 353 360
!309 = (!307 !308)
!310 = (!132 !133)
!311 = (!132 !133 !137)
!312 = (!132 !133 !140 !141)
!313 = (!132 !133 !144 !145 !147 !148)
!314 = (!132 !133 !144 !145 !147 !148)
!315 = (!132 !133 !144 !145 !152 !153)
!316 = (!132 !133 !144 !145 !152 !153)
!317 = (!132 !133 !144 !145)
!318 = (!132 !133 !144)
!319 = (!132 !133 !159)
!320 = (!132 !133 !159)
!321 = (!132 !133 !159)
!322 = (!132 !133 !164)
!323 = (!132 !133 !159)
!324 = (!132 !133 !159)
!325 = (!132 !133 !159)
!326 = (!132 !133 !137)
!327 = (!132 !133 !174 !175)
!328 = (!132 !133 !177)
!329 = (!132 !133 !159)
!330 = (!132 !133 !159)
!331 = (!183 !184 !185)
!332 = (!183 !184 !185)
!333 = (!183 !184 !188)
!334 = (!183 !184 !188)
!335 = (!183 !184)
!336 = (!183 !184 !192 !193)
!337 = (!183 !184 !192 !193)
!338 = (!183 !184 !192)
!339 = (!183 !184 !188)
!340 = (!183 !184 !200)
!341 = (!183 !184 !200)
!342 = (!183 !184 !203)
!343 = (!183 !184 !208 !209 !211)
!344 = (!216 !217 !219 !220 !221 !222 !223 !224 !225 !226 !86)
!345 = (!216 !217 !219 !220 !221 !222 !223 !224 !225 !226)
!346 = (!216 !217 !219 !220 !221 !222 !223 !224 !229)
!347 = (!216 !217 !219 !220 !221 !222 !223 !224)
!348 = (!216 !217 !219 !220 !221 !222 !223 !224 !229)
!349 = (!216 !217 !219 !220 !221 !222 !223 !224)
!350 = (!216 !217 !219 !220 !221 !222 !223 !224 !229)
!351 = (!216 !217 !219 !220 !221 !222 !223 !224)
!352 = (!216 !217 !219 !220 !221 !222 !223 !224)
!353 = (!216 !217 !219 !220 !221 !222 !237)
!354 = (!216 !217 !219 !220 !221 !222)
!355 = (!216 !217 !219 !220 !221 !222 !237)
!356 = (!216 !217 !219 !220 !221 !222)
!357 = (!216 !217 !219 !220 !221 !222 !237)
!358 = (!216 !217 !219 !220 !221 !222)
!359 = (!216 !217 !219 !220 !221 !222)
!360 = (!216 !217 !219 !220 !246)
!361 = (!216 !217 !219 !220 !246)
!362 = (!216 !217 !219 !220 !249)
!363 = (!216 !217 !219 !220 !249)
!364 = (!216 !217 !219 !220 !249)
!365 = (!216 !217 !219 !220 !254)
!366 = (!216 !217 !219 !220 !256)
!367 = (!216 !217 !219 !220 !258)
!368 = (!216 !217 !219 !220 !260)
!369 = (!216 !217 !219 !220)
!370 = (!216 !217 !219 !220 !264 !265 !267)
!371 = (!216 !217 !219 !220 !264 !265)
!372 = (!216 !217 !219 !220 !271)
!373 = (!216 !217 !219 !220)
!374 = (!216 !217 !219 !220)
!375 = (!216 !217 !275)
!376 = (!216 !217)
!377 = (!216 !217 !275)
!378 = span !218 3077 3081
!379 = span !218 3069 3167
!380 = fn_name_span !218 3072 3076
!381 = (!379 !380)
!382 = (!219 !220 !221 !222 !223 !224 !225 !226 !86)
!383 = (!219 !220 !221 !222 !223 !224 !225 !226)
!384 = (!219 !220 !221 !222 !223 !224 !229)
!385 = (!219 !220 !221 !222 !223 !224)
!386 = (!219 !220 !221 !222 !223 !224 !229)
!387 = (!219 !220 !221 !222 !223 !224)
!388 = (!219 !220 !221 !222 !223 !224 !229)
!389 = (!219 !220 !221 !222 !223 !224)
!390 = (!219 !220 !221 !222 !223 !224)
!391 = (!219 !220 !221 !222 !237)
!392 = (!219 !220 !221 !222)
!393 = (!219 !220 !221 !222 !237)
!394 = (!219 !220 !221 !222)
!395 = (!219 !220 !221 !222 !237)
!396 = (!219 !220 !221 !222)
!397 = (!219 !220 !221 !222)
!398 = (!219 !220 !246)
!399 = (!219 !220 !246)
!400 = (!219 !220 !249)
!401 = (!219 !220 !249)
!402 = (!219 !220 !249)
!403 = (!219 !220 !254)
!404 = (!219 !220 !256)
!405 = (!219 !220 !258)
!406 = (!219 !220 !260)
!407 = (!219 !220)
!408 = (!219 !220 !264 !265 !267)
!409 = (!219 !220 !264 !265)
!410 = (!219 !220 !271)
!411 = span !76 28831 28832
!412 = span !76 28823 29132
!413 = fn_name_span !76 28826 28830
!414 = (!412 !413)
!415 = (!221 !222 !223 !224 !225 !226 !86)
!416 = (!221 !222 !223 !224 !225 !226)
!417 = (!221 !222 !223 !224 !229)
!418 = (!221 !222 !223 !224)
!419 = (!221 !222 !223 !224 !229)
!420 = (!221 !222 !223 !224)
!421 = (!221 !222 !223 !224 !229)
!422 = (!221 !222 !223 !224)
!423 = (!221 !222 !223 !224)
!424 = (!221 !222 !237)
!425 = (!221 !222)
!426 = (!221 !222 !237)
!427 = (!221 !222 !237)
!428 = (!264 !265 !267)
!429 = (!264 !265)
!430 = span !76 4100 4108
!431 = span !76 4079 4227
!432 = fn_name_span !76 4086 4099
!433 = (!431 !432)
!434 = (!223 !224 !225 !226 !86)
!435 = (!223 !224 !225 !226)
!436 = (!223 !224 !229)
!437 = (!223 !224)
!438 = (!223 !224 !229)
!439 = (!223 !224 !229)
!440 = span !76 806 814
!441 = span !76 785 928
!442 = fn_name_span !76 792 805
!443 = (!441 !442)
!444 = (!225 !226 !86)
!445 = (!225 !226)
!446 = span !266 5960 5964
!447 = span !266 5966 5969
!448 = span !266 5977 5982
!449 = span !266 5939 6083
!450 = fn_name_span !266 5946 5959
!451 = (!449 !450)
!452 = span !158 4952 4956
!453 = span !158 4938 5081
!454 = fn_name_span !158 4945 4951
!455 = (!453 !454)
!456 = (!192 !193)
!457 = (!208 !209 !211)
!458 = span !146 16751 16755
!459 = span !146 16757 16762
!460 = span !146 16745 16811
!461 = fn_name_span !146 16748 16750
!462 = (!460 !461)
!463 = span !210 735 739
!464 = span !210 721 773
!465 = fn_name_span !210 728 734
!466 = (!464 !465)
!467 = span !136 1538 1542
!468 = span !136 1526 1716
!469 = fn_name_span !136 1529 1537
!470 = (!468 !469)
!471 = (!140 !141)
!472 = (!144 !145 !147 !148)
!473 = (!144 !145 !147 !148)
!474 = (!144 !145 !152 !153)
!475 = (!144 !145 !152 !153)
!476 = (!144 !145)
!477 = (!174 !175)
!478 = span !146 15477 15481
!479 = span !146 15483 15488
!480 = span !146 15470 15542
!481 = fn_name_span !146 15473 15476
!482 = (!480 !481)
!483 = (!147 !148)
!484 = (!152 !153)
!485 = span !146 12498 12502
!486 = span !146 12491 12545
!487 = fn_name_span !146 12494 12497
!488 = (!486 !487)
!489 = span !76 13782 13786
!490 = span !76 13771 13819
!491 = fn_name_span !76 13778 13781
!492 = (!490 !491)
!493 = span !76 2506 2514
!494 = span !76 15186 15190
!495 = span !76 15175 15233
!496 = fn_name_span !76 15182 15185
!497 = (!495 !496)
!498 = span !76 15213 15227
!499 = fn_call_path_span !76 15222 15225
!500 = (!498 !499)
!501 = span !76 989 993
!502 = span !76 978 1030
!503 = fn_name_span !76 985 988
!504 = (!502 !503)
!505 = span !295 2340 2344
!506 = span !295 2332 2389
!507 = fn_name_span !295 2335 2339
!508 = (!506 !507)
!509 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!510 = span !509 9026 9027
!511 = span !509 9009 9138
!512 = fn_name_span !509 9016 9022
!513 = (!511 !512 !114)
!514 = span !509 9082 9095
!515 = fn_call_path_span !509 9082 9093
!516 = (!514 !515)
!517 = span !509 9065 9096
!518 = span !509 9108 9114
!519 = span !509 9101 9115
!520 = fn_call_path_span !509 9103 9107
!521 = (!519 !520)
!522 = span !218 524 536
!523 = (!519 !520 !522)
!524 = span !218 5123 5146
!525 = fn_call_path_span !218 5129 5134
!526 = span !509 142 154
!527 = (!519 !520 !524 !525 !526)
!528 = (!519 !520 !524 !525)
!529 = (!519 !520 !524 !525)
!530 = span !509 365 389
!531 = fn_call_path_span !509 376 382
!532 = (!519 !520 !524 !525 !530 !531)
!533 = span !76 18398 18409
!534 = fn_call_path_span !76 18404 18407
!535 = (!519 !520 !524 !525 !530 !531 !533 !534)
!536 = span !76 18382 18410
!537 = (!519 !520 !524 !525 !530 !531 !536)
!538 = span !76 18422 18431
!539 = (!519 !520 !524 !525 !530 !531 !538)
!540 = span !76 18435 18436
!541 = span !76 18422 18436
!542 = fn_call_path_span !76 18432 18434
!543 = (!519 !520 !524 !525 !530 !531 !541 !542)
!544 = (!519 !520 !524 !525 !530 !531 !541 !542)
!545 = (!519 !520 !524 !525 !530 !531 !541)
!546 = span !76 18451 18457
!547 = (!519 !520 !524 !525 !530 !531 !546)
!548 = (!519 !520 !524 !525 !530 !531)
!549 = (!519 !520 !524 !525 !530 !531 !493)
!550 = (!519 !520 !524 !525 !530 !531)
!551 = span !76 18572 18573
!552 = span !76 18560 18573
!553 = fn_call_path_span !76 18569 18571
!554 = (!519 !520 !524 !525 !530 !531 !552 !553)
!555 = (!519 !520 !524 !525 !530 !531 !552 !553)
!556 = (!519 !520 !524 !525 !530 !531 !552)
!557 = (!519 !520 !524 !525 !530 !531)
!558 = span !76 18588 18600
!559 = (!519 !520 !524 !525 !530 !531 !558)
!560 = span !76 18614 18620
!561 = (!519 !520 !524 !525 !530 !531 !560)
!562 = (!519 !520 !524 !525 !530 !531)
!563 = (!519 !520 !524 !525 !530 !531 !493)
!564 = (!519 !520 !524 !525 !530 !531)
!565 = span !76 18668 18677
!566 = (!519 !520 !524 !525 !530 !531 !565)
!567 = span !76 18657 18677
!568 = fn_call_path_span !76 18666 18667
!569 = (!519 !520 !524 !525 !530 !531 !567 !568)
!570 = (!519 !520 !524 !525 !530 !531 !567 !568)
!571 = span !76 18642 18678
!572 = (!519 !520 !524 !525 !530 !531 !571)
!573 = (!519 !520 !524 !525 !530 !531 !493)
!574 = (!519 !520 !524 !525 !530 !531)
!575 = span !76 18687 18714
!576 = (!519 !520 !524 !525 !530 !531 !575)
!577 = (!519 !520 !524 !525 !530 !531 !258)
!578 = (!519 !520 !524 !525 !530 !531)
!579 = span !76 18808 18827
!580 = fn_call_path_span !76 18817 18825
!581 = (!519 !520 !524 !525 !530 !531 !579 !580)
!582 = span !76 18830 18838
!583 = (!519 !520 !524 !525 !530 !531 !582)
!584 = span !76 18808 18838
!585 = fn_call_path_span !76 18828 18829
!586 = (!519 !520 !524 !525 !530 !531 !584 !585)
!587 = (!519 !520 !524 !525 !530 !531 !584 !585)
!588 = (!519 !520 !524 !525 !530 !531 !584)
!589 = (!519 !520 !524 !525 !530 !531 !258)
!590 = (!519 !520 !524 !525 !530 !531)
!591 = span !76 18928 18942
!592 = fn_call_path_span !76 18937 18940
!593 = (!519 !520 !524 !525 !530 !531 !591 !592)
!594 = (!519 !520 !524 !525 !530 !531 !258)
!595 = (!519 !520 !524 !525 !530 !531)
!596 = span !76 18944 18963
!597 = fn_call_path_span !76 18953 18961
!598 = (!519 !520 !524 !525 !530 !531 !596 !597)
!599 = span !76 18965 18973
!600 = (!519 !520 !524 !525 !530 !531 !599)
!601 = span !76 18914 18974
!602 = fn_call_path_span !76 18914 18927
!603 = span !85 4168 4185
!604 = fn_call_path_span !85 4178 4179
!605 = (!519 !520 !524 !525 !530 !531 !601 !602 !603 !604)
!606 = (!519 !520 !524 !525 !530 !531 !601 !602 !603 !604)
!607 = (!519 !520 !524 !525 !530 !531 !601 !602 !603)
!608 = span !85 4210 4232
!609 = fn_call_path_span !85 4210 4221
!610 = (!519 !520 !524 !525 !530 !531 !601 !602 !608 !609 !86)
!611 = (!519 !520 !524 !525 !530 !531 !601 !602 !608 !609)
!612 = span !85 4196 4233
!613 = (!519 !520 !524 !525 !530 !531 !601 !602 !612)
!614 = span !85 4253 4254
!615 = span !85 4245 4254
!616 = fn_call_path_span !85 4251 4252
!617 = (!519 !520 !524 !525 !530 !531 !601 !602 !615 !616)
!618 = (!519 !520 !524 !525 !530 !531 !601 !602 !615 !616)
!619 = (!519 !520 !524 !525 !530 !531 !601 !602 !615)
!620 = span !85 4287 4294
!621 = (!519 !520 !524 !525 !530 !531 !601 !602 !620)
!622 = span !85 4269 4302
!623 = fn_call_path_span !85 4273 4286
!624 = (!519 !520 !524 !525 !530 !531 !601 !602 !622 !623 !267)
!625 = (!519 !520 !524 !525 !530 !531 !601 !602 !622 !623)
!626 = (!519 !520 !524 !525 !530 !531 !601 !602)
!627 = (!519 !520 !524 !525 !530 !531 !601 !602)
!628 = span !85 4322 4329
!629 = (!519 !520 !524 !525 !530 !531 !601 !602 !628)
!630 = (!519 !520 !524 !525 !530 !531 !601 !602)
!631 = (!519 !520 !524 !525 !530 !531 !601 !602)
!632 = (!519 !520 !524 !525 !530 !531 !601 !602)
!633 = span !76 18992 19000
!634 = (!519 !520 !524 !525 !530 !531 !633)
!635 = span !76 18869 19015
!636 = fn_call_path_span !76 18869 18890
!637 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!638 = span !637 2368 2392
!639 = fn_call_path_span !637 2374 2375
!640 = (!519 !520 !524 !525 !530 !531 !635 !636 !638 !639)
!641 = (!519 !520 !524 !525 !530 !531 !635 !636 !638 !639)
!642 = span !637 2362 2393
!643 = (!519 !520 !524 !525 !530 !531 !635 !636 !642)
!644 = (!519 !520 !524 !525 !530 !531 !635 !636 !642)
!645 = (!519 !520 !524 !525 !530 !531 !635 !636 !642)
!646 = (!519 !520 !524 !525 !530 !531 !635 !636 !642)
!647 = (!519 !520 !524 !525 !530 !531 !635 !636 !642)
!648 = (!519 !520 !524 !525 !530 !531 !635 !636)
!649 = span !637 2351 2394
!650 = fn_call_path_span !637 2351 2361
!651 = span !637 1248 1294
!652 = (!519 !520 !524 !525 !530 !531 !635 !636 !649 !650 !651)
!653 = (!519 !520 !524 !525 !530 !531 !635 !636 !649 !650)
!654 = (!519 !520 !524 !525 !530 !531 !635 !636)
!655 = span !76 18853 19016
!656 = (!519 !520 !524 !525 !530 !531 !655)
!657 = (!519 !520 !524 !525 !530 !531 !655)
!658 = span !76 19055 19064
!659 = (!519 !520 !524 !525 !530 !531 !658)
!660 = (!519 !520 !524 !525 !530 !531)
!661 = span !76 19040 19065
!662 = fn_call_path_span !76 19040 19054
!663 = span !76 2130 2153
!664 = fn_call_path_span !76 2136 2151
!665 = span !637 3959 3975
!666 = fn_call_path_span !637 3959 3969
!667 = span !637 1624 1675
!668 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664 !665 !666 !667)
!669 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664 !665 !666)
!670 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664)
!671 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664)
!672 = span !637 3976 3977
!673 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664 !672)
!674 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664)
!675 = (!519 !520 !524 !525 !530 !531 !661 !662 !663 !664)
!676 = span !76 2120 2154
!677 = (!519 !520 !524 !525 !530 !531 !661 !662 !676)
!678 = span !76 2185 2188
!679 = (!519 !520 !524 !525 !530 !531 !661 !662 !678)
!680 = span !76 2173 2189
!681 = fn_call_path_span !76 2173 2184
!682 = (!519 !520 !524 !525 !530 !531 !661 !662 !680 !681 !86)
!683 = (!519 !520 !524 !525 !530 !531 !661 !662 !680 !681)
!684 = span !76 2163 2190
!685 = (!519 !520 !524 !525 !530 !531 !661 !662 !684)
!686 = span !76 2202 2205
!687 = (!519 !520 !524 !525 !530 !531 !661 !662 !686)
!688 = span !76 2208 2209
!689 = span !76 2202 2209
!690 = fn_call_path_span !76 2206 2207
!691 = (!519 !520 !524 !525 !530 !531 !661 !662 !689 !690)
!692 = (!519 !520 !524 !525 !530 !531 !661 !662 !689 !690)
!693 = (!519 !520 !524 !525 !530 !531 !661 !662 !689)
!694 = span !76 2224 2235
!695 = fn_call_path_span !76 2230 2233
!696 = span !637 2911 2927
!697 = fn_call_path_span !637 2911 2921
!698 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695 !696 !697 !667)
!699 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695 !696 !697)
!700 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695)
!701 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695)
!702 = span !637 2928 2929
!703 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695 !702)
!704 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695)
!705 = (!519 !520 !524 !525 !530 !531 !661 !662 !694 !695)
!706 = span !76 2250 2253
!707 = (!519 !520 !524 !525 !530 !531 !661 !662 !706)
!708 = span !76 2255 2258
!709 = (!519 !520 !524 !525 !530 !531 !661 !662 !708)
!710 = span !76 2224 2259
!711 = fn_call_path_span !76 2236 2243
!712 = span !266 3413 3437
!713 = fn_call_path_span !266 3419 3420
!714 = (!519 !520 !524 !525 !530 !531 !661 !662 !710 !711 !712 !713)
!715 = (!519 !520 !524 !525 !530 !531 !661 !662 !710 !711 !712 !713)
!716 = span !266 3403 3438
!717 = (!519 !520 !524 !525 !530 !531 !661 !662 !710 !711 !716)
!718 = span !266 3477 3480
!719 = (!519 !520 !524 !525 !530 !531 !661 !662 !710 !711 !718)
!720 = span !266 3447 3522
!721 = (!519 !520 !524 !525 !530 !531 !661 !662 !710 !711 !720)
!722 = span !266 3496 3511
!723 = (!519 !520 !524 !525 !530 !531 !661 !662 !710 !711)
!724 = (!519 !520 !524 !525 !530 !531 !661 !662)
!725 = (!519 !520 !524 !525 !530 !531 !661 !662)
!726 = span !76 2286 2289
!727 = (!519 !520 !524 !525 !530 !531 !661 !662 !726)
!728 = span !76 2291 2294
!729 = (!519 !520 !524 !525 !530 !531 !661 !662 !728)
!730 = span !76 2279 2296
!731 = (!519 !520 !524 !525 !530 !531 !661 !662 !730)
!732 = (!519 !520 !524 !525 !530 !531 !661 !662)
!733 = (!519 !520 !524 !525 !530 !531 !661 !662 !730)
!734 = (!519 !520 !524 !525 !530 !531 !661 !662)
!735 = (!519 !520 !524 !525 !530 !531 !661 !662 !730)
!736 = (!519 !520 !524 !525 !530 !531 !661 !662)
!737 = (!519 !520 !524 !525 !530 !531 !661 !662)
!738 = span !76 19029 19065
!739 = (!519 !520 !524 !525 !530 !531 !738)
!740 = (!519 !520 !524 !525 !530 !531 !738)
!741 = (!519 !520 !524 !525 !530 !531)
!742 = (!519 !520 !524 !525 !530 !531)
!743 = (!519 !520 !524 !525 !530 !531 !258)
!744 = (!519 !520 !524 !525 !530 !531)
!745 = span !76 19100 19114
!746 = fn_call_path_span !76 19109 19112
!747 = (!519 !520 !524 !525 !530 !531 !745 !746)
!748 = span !76 19131 19142
!749 = (!519 !520 !524 !525 !530 !531 !748)
!750 = span !76 19100 19143
!751 = fn_call_path_span !76 19115 19130
!752 = span !266 6721 6825
!753 = (!519 !520 !524 !525 !530 !531 !750 !751 !752)
!754 = span !266 6771 6789
!755 = (!519 !520 !524 !525 !530 !531 !750 !751)
!756 = span !76 19086 19144
!757 = (!519 !520 !524 !525 !530 !531 !756)
!758 = (!519 !520 !524 !525 !530 !531)
!759 = span !76 19153 19164
!760 = fn_call_path_span !76 19159 19162
!761 = (!519 !520 !524 !525 !530 !531 !759 !760)
!762 = span !76 19179 19186
!763 = (!519 !520 !524 !525 !530 !531 !762)
!764 = span !76 19188 19197
!765 = (!519 !520 !524 !525 !530 !531 !764)
!766 = span !76 19153 19198
!767 = fn_call_path_span !76 19165 19178
!768 = (!519 !520 !524 !525 !530 !531 !766 !767 !267)
!769 = (!519 !520 !524 !525 !530 !531 !766 !767)
!770 = span !76 19255 19263
!771 = (!519 !520 !524 !525 !530 !531 !770)
!772 = span !76 19244 19263
!773 = (!519 !520 !524 !525 !530 !531 !772)
!774 = (!519 !520 !524 !525 !530 !531 !772)
!775 = (!519 !520 !524 !525 !530 !531)
!776 = (!519 !520 !524 !525)
!777 = span !509 9121 9127
!778 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!779 = span !778 7904 7970
!780 = span !509 9121 9136
!781 = fn_call_path_span !509 9128 9134
!782 = span !509 464 475
!783 = fn_call_path_span !509 464 473
!784 = (!780 !781 !782 !783)
!785 = span !509 440 476
!786 = (!780 !781 !785)
!787 = (!780 !781 !785)
!788 = span !509 508 521
!789 = (!780 !781 !788)
!790 = (!780 !781)
!791 = (!780 !781 !526)
!792 = span !509 540 556
!793 = fn_call_path_span !509 551 554
!794 = (!780 !781 !792 !793)
!795 = (!780 !781 !526)
!796 = span !509 577 593
!797 = fn_call_path_span !509 588 591
!798 = (!780 !781 !796 !797)
!799 = span !509 485 672
!800 = (!780 !781 !799)
!801 = span !509 619 638
!802 = span !509 177 263
!803 = fn_name_span !509 184 187
!804 = (!802 !803)
!805 = span !509 234 246
!806 = fn_call_path_span !509 234 244
!807 = (!805 !806 !81 !82 !83 !84 !86)
!808 = (!805 !806 !81 !82 !83 !84)
!809 = (!805 !806 !81 !82 !90)
!810 = (!805 !806 !81 !82)
!811 = (!805 !806 !81 !82 !90)
!812 = (!805 !806 !81 !82)
!813 = (!805 !806 !81 !82 !90)
!814 = (!805 !806 !81 !82)
!815 = (!805 !806 !81 !82)
!816 = (!805 !806 !96)
!817 = (!805 !806)
!818 = (!805 !806 !96)
!819 = (!805 !806 !96)
!820 = span !509 208 257
!821 = span !218 5084 5088
!822 = span !218 5098 5103
!823 = span !218 5076 5153
!824 = fn_name_span !218 5079 5083
!825 = (!823 !824)
!826 = (!524 !525 !526)
!827 = (!524 !525)
!828 = (!524 !525 !530 !531)
!829 = (!524 !525 !530 !531 !533 !534)
!830 = (!524 !525 !530 !531 !536)
!831 = (!524 !525 !530 !531 !538)
!832 = (!524 !525 !530 !531 !541 !542)
!833 = (!524 !525 !530 !531 !541 !542)
!834 = (!524 !525 !530 !531 !541)
!835 = (!524 !525 !530 !531 !546)
!836 = (!524 !525 !530 !531)
!837 = (!524 !525 !530 !531 !493)
!838 = (!524 !525 !530 !531)
!839 = (!524 !525 !530 !531 !552 !553)
!840 = (!524 !525 !530 !531 !552 !553)
!841 = (!524 !525 !530 !531 !552)
!842 = (!524 !525 !530 !531)
!843 = (!524 !525 !530 !531 !558)
!844 = (!524 !525 !530 !531 !560)
!845 = (!524 !525 !530 !531)
!846 = (!524 !525 !530 !531 !493)
!847 = (!524 !525 !530 !531)
!848 = (!524 !525 !530 !531 !565)
!849 = (!524 !525 !530 !531 !567 !568)
!850 = (!524 !525 !530 !531 !567 !568)
!851 = (!524 !525 !530 !531 !571)
!852 = (!524 !525 !530 !531 !493)
!853 = (!524 !525 !530 !531)
!854 = (!524 !525 !530 !531 !575)
!855 = (!524 !525 !530 !531 !258)
!856 = (!524 !525 !530 !531)
!857 = (!524 !525 !530 !531 !579 !580)
!858 = (!524 !525 !530 !531 !582)
!859 = (!524 !525 !530 !531 !584 !585)
!860 = (!524 !525 !530 !531 !584 !585)
!861 = (!524 !525 !530 !531 !584)
!862 = (!524 !525 !530 !531 !258)
!863 = (!524 !525 !530 !531)
!864 = (!524 !525 !530 !531 !591 !592)
!865 = (!524 !525 !530 !531 !258)
!866 = (!524 !525 !530 !531)
!867 = (!524 !525 !530 !531 !596 !597)
!868 = (!524 !525 !530 !531 !599)
!869 = (!524 !525 !530 !531 !601 !602 !603 !604)
!870 = (!524 !525 !530 !531 !601 !602 !603 !604)
!871 = (!524 !525 !530 !531 !601 !602 !603)
!872 = (!524 !525 !530 !531 !601 !602 !608 !609 !86)
!873 = (!524 !525 !530 !531 !601 !602 !608 !609)
!874 = (!524 !525 !530 !531 !601 !602 !612)
!875 = (!524 !525 !530 !531 !601 !602 !615 !616)
!876 = (!524 !525 !530 !531 !601 !602 !615 !616)
!877 = (!524 !525 !530 !531 !601 !602 !615)
!878 = (!524 !525 !530 !531 !601 !602 !620)
!879 = (!524 !525 !530 !531 !601 !602 !622 !623 !267)
!880 = (!524 !525 !530 !531 !601 !602 !622 !623)
!881 = (!524 !525 !530 !531 !601 !602)
!882 = (!524 !525 !530 !531 !601 !602)
!883 = (!524 !525 !530 !531 !601 !602 !628)
!884 = (!524 !525 !530 !531 !601 !602)
!885 = (!524 !525 !530 !531 !601 !602)
!886 = (!524 !525 !530 !531 !601 !602)
!887 = (!524 !525 !530 !531 !633)
!888 = (!524 !525 !530 !531 !635 !636 !638 !639)
!889 = (!524 !525 !530 !531 !635 !636 !638 !639)
!890 = (!524 !525 !530 !531 !635 !636 !642)
!891 = (!524 !525 !530 !531 !635 !636 !642)
!892 = (!524 !525 !530 !531 !635 !636 !642)
!893 = (!524 !525 !530 !531 !635 !636 !642)
!894 = (!524 !525 !530 !531 !635 !636 !642)
!895 = (!524 !525 !530 !531 !635 !636)
!896 = (!524 !525 !530 !531 !635 !636 !649 !650 !651)
!897 = (!524 !525 !530 !531 !635 !636 !649 !650)
!898 = (!524 !525 !530 !531 !635 !636)
!899 = (!524 !525 !530 !531 !655)
!900 = (!524 !525 !530 !531 !655)
!901 = (!524 !525 !530 !531 !658)
!902 = (!524 !525 !530 !531)
!903 = (!524 !525 !530 !531 !661 !662 !663 !664 !665 !666 !667)
!904 = (!524 !525 !530 !531 !661 !662 !663 !664 !665 !666)
!905 = (!524 !525 !530 !531 !661 !662 !663 !664)
!906 = (!524 !525 !530 !531 !661 !662 !663 !664)
!907 = (!524 !525 !530 !531 !661 !662 !663 !664 !672)
!908 = (!524 !525 !530 !531 !661 !662 !663 !664)
!909 = (!524 !525 !530 !531 !661 !662 !663 !664)
!910 = (!524 !525 !530 !531 !661 !662 !676)
!911 = (!524 !525 !530 !531 !661 !662 !678)
!912 = (!524 !525 !530 !531 !661 !662 !680 !681 !86)
!913 = (!524 !525 !530 !531 !661 !662 !680 !681)
!914 = (!524 !525 !530 !531 !661 !662 !684)
!915 = (!524 !525 !530 !531 !661 !662 !686)
!916 = (!524 !525 !530 !531 !661 !662 !689 !690)
!917 = (!524 !525 !530 !531 !661 !662 !689 !690)
!918 = (!524 !525 !530 !531 !661 !662 !689)
!919 = (!524 !525 !530 !531 !661 !662 !694 !695 !696 !697 !667)
!920 = (!524 !525 !530 !531 !661 !662 !694 !695 !696 !697)
!921 = (!524 !525 !530 !531 !661 !662 !694 !695)
!922 = (!524 !525 !530 !531 !661 !662 !694 !695)
!923 = (!524 !525 !530 !531 !661 !662 !694 !695 !702)
!924 = (!524 !525 !530 !531 !661 !662 !694 !695)
!925 = (!524 !525 !530 !531 !661 !662 !694 !695)
!926 = (!524 !525 !530 !531 !661 !662 !706)
!927 = (!524 !525 !530 !531 !661 !662 !708)
!928 = (!524 !525 !530 !531 !661 !662 !710 !711 !712 !713)
!929 = (!524 !525 !530 !531 !661 !662 !710 !711 !712 !713)
!930 = (!524 !525 !530 !531 !661 !662 !710 !711 !716)
!931 = (!524 !525 !530 !531 !661 !662 !710 !711 !718)
!932 = (!524 !525 !530 !531 !661 !662 !710 !711 !720)
!933 = (!524 !525 !530 !531 !661 !662 !710 !711)
!934 = (!524 !525 !530 !531 !661 !662)
!935 = (!524 !525 !530 !531 !661 !662)
!936 = (!524 !525 !530 !531 !661 !662 !726)
!937 = (!524 !525 !530 !531 !661 !662 !728)
!938 = (!524 !525 !530 !531 !661 !662 !730)
!939 = (!524 !525 !530 !531 !661 !662)
!940 = (!524 !525 !530 !531 !661 !662 !730)
!941 = (!524 !525 !530 !531 !661 !662)
!942 = (!524 !525 !530 !531 !661 !662 !730)
!943 = (!524 !525 !530 !531 !661 !662)
!944 = (!524 !525 !530 !531 !661 !662)
!945 = (!524 !525 !530 !531 !738)
!946 = (!524 !525 !530 !531 !738)
!947 = (!524 !525 !530 !531)
!948 = (!524 !525 !530 !531)
!949 = (!524 !525 !530 !531 !258)
!950 = (!524 !525 !530 !531)
!951 = (!524 !525 !530 !531 !745 !746)
!952 = (!524 !525 !530 !531 !748)
!953 = (!524 !525 !530 !531 !750 !751 !752)
!954 = (!524 !525 !530 !531 !750 !751)
!955 = (!524 !525 !530 !531 !756)
!956 = (!524 !525 !530 !531)
!957 = (!524 !525 !530 !531 !759 !760)
!958 = (!524 !525 !530 !531 !762)
!959 = (!524 !525 !530 !531 !764)
!960 = (!524 !525 !530 !531 !766 !767 !267)
!961 = (!524 !525 !530 !531 !766 !767)
!962 = (!524 !525 !530 !531 !770)
!963 = (!524 !525 !530 !531 !772)
!964 = (!524 !525 !530 !531 !772)
!965 = (!524 !525 !530 !531)
!966 = span !509 335 339
!967 = span !509 341 346
!968 = span !509 314 396
!969 = fn_name_span !509 321 326
!970 = (!968 !969)
!971 = (!530 !531)
!972 = (!530 !531 !533 !534)
!973 = (!530 !531 !536)
!974 = (!530 !531 !538)
!975 = (!530 !531 !541 !542)
!976 = (!530 !531 !541 !542)
!977 = (!530 !531 !541)
!978 = (!530 !531 !546)
!979 = (!530 !531 !493)
!980 = (!530 !531 !552 !553)
!981 = (!530 !531 !552 !553)
!982 = (!530 !531 !552)
!983 = (!530 !531 !558)
!984 = (!530 !531 !560)
!985 = (!530 !531 !493)
!986 = (!530 !531 !565)
!987 = (!530 !531 !567 !568)
!988 = (!530 !531 !567 !568)
!989 = (!530 !531 !571)
!990 = (!530 !531 !493)
!991 = (!530 !531 !575)
!992 = (!530 !531 !258)
!993 = (!530 !531 !579 !580)
!994 = (!530 !531 !582)
!995 = (!530 !531 !584 !585)
!996 = (!530 !531 !584 !585)
!997 = (!530 !531 !584)
!998 = (!530 !531 !258)
!999 = (!530 !531 !591 !592)
!1000 = (!530 !531 !258)
!1001 = (!530 !531 !596 !597)
!1002 = (!530 !531 !599)
!1003 = (!530 !531 !601 !602 !603 !604)
!1004 = (!530 !531 !601 !602 !603 !604)
!1005 = (!530 !531 !601 !602 !603)
!1006 = (!530 !531 !601 !602 !608 !609 !86)
!1007 = (!530 !531 !601 !602 !608 !609)
!1008 = (!530 !531 !601 !602 !612)
!1009 = (!530 !531 !601 !602 !615 !616)
!1010 = (!530 !531 !601 !602 !615 !616)
!1011 = (!530 !531 !601 !602 !615)
!1012 = (!530 !531 !601 !602 !620)
!1013 = (!530 !531 !601 !602 !622 !623 !267)
!1014 = (!530 !531 !601 !602 !622 !623)
!1015 = (!530 !531 !601 !602)
!1016 = (!530 !531 !601 !602)
!1017 = (!530 !531 !601 !602 !628)
!1018 = (!530 !531 !601 !602)
!1019 = (!530 !531 !601 !602)
!1020 = (!530 !531 !601 !602)
!1021 = (!530 !531 !633)
!1022 = (!530 !531 !635 !636 !638 !639)
!1023 = (!530 !531 !635 !636 !638 !639)
!1024 = (!530 !531 !635 !636 !642)
!1025 = (!530 !531 !635 !636 !642)
!1026 = (!530 !531 !635 !636 !642)
!1027 = (!530 !531 !635 !636 !642)
!1028 = (!530 !531 !635 !636 !642)
!1029 = (!530 !531 !635 !636)
!1030 = (!530 !531 !635 !636 !649 !650 !651)
!1031 = (!530 !531 !635 !636 !649 !650)
!1032 = (!530 !531 !635 !636)
!1033 = (!530 !531 !655)
!1034 = (!530 !531 !655)
!1035 = (!530 !531 !658)
!1036 = (!530 !531 !661 !662 !663 !664 !665 !666 !667)
!1037 = (!530 !531 !661 !662 !663 !664 !665 !666)
!1038 = (!530 !531 !661 !662 !663 !664)
!1039 = (!530 !531 !661 !662 !663 !664)
!1040 = (!530 !531 !661 !662 !663 !664 !672)
!1041 = (!530 !531 !661 !662 !663 !664)
!1042 = (!530 !531 !661 !662 !663 !664)
!1043 = (!530 !531 !661 !662 !676)
!1044 = (!530 !531 !661 !662 !678)
!1045 = (!530 !531 !661 !662 !680 !681 !86)
!1046 = (!530 !531 !661 !662 !680 !681)
!1047 = (!530 !531 !661 !662 !684)
!1048 = (!530 !531 !661 !662 !686)
!1049 = (!530 !531 !661 !662 !689 !690)
!1050 = (!530 !531 !661 !662 !689 !690)
!1051 = (!530 !531 !661 !662 !689)
!1052 = (!530 !531 !661 !662 !694 !695 !696 !697 !667)
!1053 = (!530 !531 !661 !662 !694 !695 !696 !697)
!1054 = (!530 !531 !661 !662 !694 !695)
!1055 = (!530 !531 !661 !662 !694 !695)
!1056 = (!530 !531 !661 !662 !694 !695 !702)
!1057 = (!530 !531 !661 !662 !694 !695)
!1058 = (!530 !531 !661 !662 !694 !695)
!1059 = (!530 !531 !661 !662 !706)
!1060 = (!530 !531 !661 !662 !708)
!1061 = (!530 !531 !661 !662 !710 !711 !712 !713)
!1062 = (!530 !531 !661 !662 !710 !711 !712 !713)
!1063 = (!530 !531 !661 !662 !710 !711 !716)
!1064 = (!530 !531 !661 !662 !710 !711 !718)
!1065 = (!530 !531 !661 !662 !710 !711 !720)
!1066 = (!530 !531 !661 !662 !710 !711)
!1067 = (!530 !531 !661 !662)
!1068 = (!530 !531 !661 !662)
!1069 = (!530 !531 !661 !662 !726)
!1070 = (!530 !531 !661 !662 !728)
!1071 = (!530 !531 !661 !662 !730)
!1072 = (!530 !531 !661 !662)
!1073 = (!530 !531 !661 !662 !730)
!1074 = (!530 !531 !661 !662)
!1075 = (!530 !531 !661 !662 !730)
!1076 = (!530 !531 !661 !662)
!1077 = (!530 !531 !661 !662)
!1078 = (!530 !531 !738)
!1079 = (!530 !531 !738)
!1080 = (!530 !531 !258)
!1081 = (!530 !531 !745 !746)
!1082 = (!530 !531 !748)
!1083 = (!530 !531 !750 !751 !752)
!1084 = (!530 !531 !750 !751)
!1085 = (!530 !531 !756)
!1086 = (!530 !531 !759 !760)
!1087 = (!530 !531 !762)
!1088 = (!530 !531 !764)
!1089 = (!530 !531 !766 !767 !267)
!1090 = (!530 !531 !766 !767)
!1091 = (!530 !531 !770)
!1092 = (!530 !531 !772)
!1093 = (!530 !531 !772)
!1094 = span !76 18345 18349
!1095 = span !76 18359 18364
!1096 = span !76 18323 19270
!1097 = fn_name_span !76 18330 18336
!1098 = (!1096 !1097)
!1099 = (!533 !534)
!1100 = (!541 !542)
!1101 = (!552 !553)
!1102 = (!567 !568)
!1103 = (!579 !580)
!1104 = (!584 !585)
!1105 = (!591 !592)
!1106 = (!596 !597)
!1107 = (!601 !602 !603 !604)
!1108 = (!601 !602 !603 !604)
!1109 = (!601 !602 !603)
!1110 = (!601 !602 !608 !609 !86)
!1111 = (!601 !602 !608 !609)
!1112 = (!601 !602 !612)
!1113 = (!601 !602 !615 !616)
!1114 = (!601 !602 !615 !616)
!1115 = (!601 !602 !615)
!1116 = (!601 !602 !620)
!1117 = (!601 !602 !622 !623 !267)
!1118 = (!601 !602 !622 !623)
!1119 = (!601 !602)
!1120 = (!601 !602 !628)
!1121 = (!635 !636 !638 !639)
!1122 = (!635 !636 !638 !639)
!1123 = (!635 !636 !642)
!1124 = (!635 !636 !642)
!1125 = (!635 !636 !642)
!1126 = (!635 !636 !642)
!1127 = (!635 !636 !642)
!1128 = (!635 !636)
!1129 = (!635 !636 !649 !650 !651)
!1130 = (!635 !636 !649 !650)
!1131 = (!661 !662 !663 !664 !665 !666 !667)
!1132 = (!661 !662 !663 !664 !665 !666)
!1133 = (!661 !662 !663 !664)
!1134 = (!661 !662 !663 !664)
!1135 = (!661 !662 !663 !664 !672)
!1136 = (!661 !662 !663 !664)
!1137 = (!661 !662 !663 !664)
!1138 = (!661 !662 !676)
!1139 = (!661 !662 !678)
!1140 = (!661 !662 !680 !681 !86)
!1141 = (!661 !662 !680 !681)
!1142 = (!661 !662 !684)
!1143 = (!661 !662 !686)
!1144 = (!661 !662 !689 !690)
!1145 = (!661 !662 !689 !690)
!1146 = (!661 !662 !689)
!1147 = (!661 !662 !694 !695 !696 !697 !667)
!1148 = (!661 !662 !694 !695 !696 !697)
!1149 = (!661 !662 !694 !695)
!1150 = (!661 !662 !694 !695)
!1151 = (!661 !662 !694 !695 !702)
!1152 = (!661 !662 !694 !695)
!1153 = (!661 !662 !694 !695)
!1154 = (!661 !662 !706)
!1155 = (!661 !662 !708)
!1156 = (!661 !662 !710 !711 !712 !713)
!1157 = (!661 !662 !710 !711 !712 !713)
!1158 = (!661 !662 !710 !711 !716)
!1159 = (!661 !662 !710 !711 !718)
!1160 = (!661 !662 !710 !711 !720)
!1161 = (!661 !662 !710 !711)
!1162 = (!661 !662)
!1163 = (!661 !662 !726)
!1164 = (!661 !662 !728)
!1165 = (!661 !662 !730)
!1166 = (!661 !662 !730)
!1167 = (!661 !662 !730)
!1168 = (!745 !746)
!1169 = (!750 !751 !752)
!1170 = (!750 !751)
!1171 = (!759 !760)
!1172 = (!766 !767 !267)
!1173 = (!766 !767)
!1174 = span !146 1239 1243
!1175 = span !146 1245 1250
!1176 = span !146 1232 1300
!1177 = fn_name_span !146 1235 1238
!1178 = (!1176 !1177)
!1179 = span !146 20651 20655
!1180 = span !146 20657 20662
!1181 = span !146 20645 20711
!1182 = fn_name_span !146 20648 20650
!1183 = (!1181 !1182)
!1184 = span !76 1097 1101
!1185 = span !76 1081 1134
!1186 = fn_name_span !76 1088 1096
!1187 = (!1185 !1186)
!1188 = span !76 418 426
!1189 = span !637 2307 2310
!1190 = span !637 2321 2326
!1191 = span !637 2286 2400
!1192 = fn_name_span !637 2293 2303
!1193 = (!1191 !1192)
!1194 = (!638 !639)
!1195 = (!649 !650 !651)
!1196 = (!649 !650)
!1197 = span !637 1206 1211
!1198 = span !637 1192 1296
!1199 = fn_name_span !637 1195 1205
!1200 = (!1198 !1199)
!1201 = span !146 6993 6997
!1202 = span !146 6999 7004
!1203 = span !146 6981 7054
!1204 = fn_name_span !146 6984 6992
!1205 = (!1203 !1204)
!1206 = span !85 4106 4109
!1207 = span !85 4120 4125
!1208 = span !85 4132 4141
!1209 = span !85 4085 4362
!1210 = fn_name_span !85 4092 4105
!1211 = (!1209 !1210)
!1212 = (!603 !604)
!1213 = (!608 !609 !86)
!1214 = (!608 !609)
!1215 = (!615 !616)
!1216 = (!622 !623 !267)
!1217 = (!622 !623)
!1218 = span !146 20580 20584
!1219 = span !146 20586 20591
!1220 = span !146 20574 20640
!1221 = fn_name_span !146 20577 20579
!1222 = (!1220 !1221)
!1223 = span !76 2084 2089
!1224 = span !76 2076 2302
!1225 = fn_name_span !76 2079 2083
!1226 = (!1224 !1225)
!1227 = (!663 !664 !665 !666 !667)
!1228 = (!663 !664 !665 !666)
!1229 = (!663 !664)
!1230 = (!663 !664 !672)
!1231 = (!680 !681 !86)
!1232 = (!680 !681)
!1233 = (!689 !690)
!1234 = (!694 !695 !696 !697 !667)
!1235 = (!694 !695 !696 !697)
!1236 = (!694 !695)
!1237 = (!694 !695 !702)
!1238 = (!710 !711 !712 !713)
!1239 = (!710 !711 !712 !713)
!1240 = (!710 !711 !716)
!1241 = (!710 !711 !718)
!1242 = (!710 !711 !720)
!1243 = (!710 !711)
!1244 = span !637 3936 3940
!1245 = span !637 3913 3983
!1246 = fn_name_span !637 3920 3935
!1247 = (!1245 !1246)
!1248 = (!665 !666 !667)
!1249 = (!665 !666)
!1250 = span !637 1582 1587
!1251 = span !637 1568 1677
!1252 = fn_name_span !637 1571 1581
!1253 = (!1251 !1252)
!1254 = span !266 3364 3368
!1255 = span !266 3370 3373
!1256 = span !266 3381 3386
!1257 = span !266 3346 3529
!1258 = fn_name_span !266 3353 3360
!1259 = (!1257 !1258)
!1260 = (!712 !713)
!1261 = span !637 2884 2888
!1262 = span !637 2873 2935
!1263 = fn_name_span !637 2880 2883
!1264 = (!1262 !1263)
!1265 = (!696 !697 !667)
!1266 = (!696 !697)
!1267 = span !266 6684 6688
!1268 = span !266 6690 6696
!1269 = span !266 6661 6831
!1270 = fn_name_span !266 6668 6683
!1271 = (!1269 !1270)
!1272 = span !509 416 420
!1273 = span !509 402 678
!1274 = fn_name_span !509 409 415
!1275 = (!1273 !1274)
!1276 = (!782 !783)
!1277 = (!792 !793)
!1278 = (!796 !797)
!1279 = span !778 7873 7976
!1280 = fn_name_span !778 7880 7883
!1281 = (!1279 !1280)

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr bool, _, !42
        v23 = get_local ptr { [u8; 64] }, secp256k1, !44
        v24 = load v23, !35
        v25 = get_local ptr { { { u64, u64 }, u64 } }, message, !46
        v26 = load v25, !35
        v27 = call address_7(v24, v26), !49
        v28 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !51
        store v27 to v28, !52
        v29 = get_local ptr { [u8; 64] }, secp256k1, !54
        v30 = load v29, !35
        v31 = get_local ptr { { { u64, u64 }, u64 } }, message, !56
        v32 = load v31, !35
        v33 = call address_7(v30, v32), !59
        v34 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !61
        store v33 to v34, !62
        v35 = const unit ()
        ret () v35
    }

    pub fn play_0() -> (), !65 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !66
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !10
        store v0 to v1, !10
        v2 = get_local ptr [u8; 64], __anon_0, !67
        v3 = const u64 0
        br new_5_array_init_loop(v3), !68

        new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !68
        v6 = const u8 0, !19
        store v6 to v5, !69
        v7 = const u64 1
        v8 = add v4, v7, !68
        v9 = const u64 64
        v10 = cmp lt v8 v9, !68
        cbr v10, new_5_array_init_loop(v8), new_5_array_init_exit(), !68

        new_5_array_init_exit():
        v11 = load v2, !68
        v12 = get_local ptr { [u8; 64] }, __anon_1, !70
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !68
        store v11 to v14, !71
        v15 = load v12, !68
        v16 = get_local ptr { [u8; 64] }, secp256k1, !30
        store v15 to v16, !30
        v17 = get_local ptr { [u8; 64] }, secp256k1, !33
        v18 = load v17
        v19 = get_local ptr { [u8; 64] }, secp256k1, !36
        v20 = load v19
        v21 = call eq_6(v18, v20), !72
        v22 = get_local ptr bool, _, !41
        v23 = get_local ptr { [u8; 64] }, secp256k1, !43
        v24 = load v23
        v25 = get_local ptr { { { u64, u64 }, u64 } }, message, !45
        v26 = load v25
        v27 = call address_7(v24, v26), !73
        v28 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !50
        store v27 to v28, !50
        v29 = get_local ptr { [u8; 64] }, secp256k1, !53
        v30 = load v29
        v31 = get_local ptr { { { u64, u64 }, u64 } }, message, !55
        v32 = load v31
        v33 = call address_7(v30, v32), !74
        v34 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !60
        store v33 to v34, !60
        v35 = const unit ()
        ret () v35
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !78 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry():
        v0 = const u64 0, !79
        v1 = asm(size: v0) -> u64 hp, !86 {
            aloc   size, !87
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !89
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !90
        store v1 to v4, !91
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !90
        v7 = const u64 0, !92
        store v7 to v6, !93
        v8 = load v2, !90
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !94
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10
        store v8 to v11, !94
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 0, !95
        store v14 to v13, !94
        v15 = load v9
        ret { { u64, u64 }, u64 } v15
    }

    pub fn new_3() -> { u64, u64 }, !98 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !79
        v1 = asm(size: v0) -> u64 hp, !99 {
            aloc   size, !87
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !88
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !88
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !92
        store v7 to v6, !88
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !100: u64) -> u64, !103 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !85 {
            aloc   size, !87
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !106 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !15
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !19
        store v4 to v3, !15
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !25
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !25
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !107: { [u8; 64] }, other !108: { [u8; 64] }) -> bool, !112 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !113
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !113
        v8 = const u64 64, !114
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !115 {
            meq    result r2 r3 r4, !116
        }
        ret bool v9
    }

    pub fn address_7(self !117: { [u8; 64] }, message !118: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !121 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !126
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !127
        v3 = const u64 0, !125
        store v3 to v2, !128
        v4 = ptr_to_int message to u64, !131
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !132
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !135
        v8 = load v7, !136
        v9 = call len_20(v8), !139
        v10 = const u64 32, !140
        v11 = cmp eq v9 v10, !146
        v12 = const bool false, !147
        v13 = cmp eq v11 v12, !150
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !151

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !154
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !155
        v17 = const u64 0, !153
        store v17 to v16, !156
        v18 = load v14, !157
        br recover_8_block0(v18), !159

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !160
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !161
        v22 = const u64 1, !153
        store v22 to v21, !162
        v23 = ptr_to_int message to u64, !163
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !164
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !165
        v27 = load v26, !166
        v28 = call ptr_21(v27), !169
        v29 = asm(bits: v28) -> b256 bits, !171 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !172
        store v29 to v32, !173
        v33 = load v19, !174
        br recover_8_block0(v33), !175

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !179
        store v34 to v35, !180
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !182
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !183
        v39 = load v38, !184
        v40 = const u64 1, !181
        v41 = cmp eq v39 v40, !187
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !188

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !189
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !190
        v46 = load v45, !191
        v47 = get_local ptr b256, inner_value, !193
        store v46 to v47, !194
        v48 = get_local ptr b256, inner_value, !196
        v49 = load v48, !197
        v50 = const u64 32, !198
        v51 = asm(size: v50) -> u64 hp, !210 {
            aloc   size, !87
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !212
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !213
        store v51 to v54, !214
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !215
        store v50 to v56, !216
        v57 = load v52, !217
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !219
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !220
        store v57 to v60, !221
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !222
        v63 = const u64 0, !223
        store v63 to v62, !224
        v64 = load v58, !225
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !227
        store v64 to v65, !228
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !230
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !231
        v69 = const u64 32, !232
        store v69 to v68, !233
        v70 = ptr_to_int v49 to u64, !235
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !237
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !239
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !241
        v76 = load v75, !242
        v77 = const u64 32, !243
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !248 {
            mcp    dst src len, !249
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !251
        v80 = load v79, !252
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !254
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !255
        store v80 to v83, !256
        v84 = load v81, !257
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !258
        store v84 to v87, !259
        v88 = load v0, !260
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !261
        store v88 to v89, !261
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !122
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !122
        v93 = load v92
        v94 = const u64 0, !122
        v95 = cmp eq v93 v94, !264
        cbr v95, block0(), block1(), !262

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !265
        revert v96, !270

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !122
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !271
        store v101 to v102, !271
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !125
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !125
        v106 = const u64 0, !125
        store v106 to v105, !125
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !272
        v108 = load v107
        v109 = call sha256_24(v108), !275
        v110 = get_local ptr { b256 }, __anon_02, !280
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !281
        store v109 to v112, !282
        v113 = load v110, !281
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !125
        store v113 to v116, !125
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !122
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !122
        v121 = load v120
        v122 = const u64 1, !122
        v123 = cmp eq v121 v122, !285
        cbr v123, block2(), block3(), !283

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !122
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !286
        store v128 to v129, !286
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !125
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !125
        v133 = const u64 1, !125
        store v133 to v132, !125
        v134 = get_local ptr { u64 }, e, !287
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !125
        store v135 to v138, !125
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !261
        revert v140, !261

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn recover_8(self !288: { [u8; 64] }, message !289: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !292 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0
        local { u64, ( () | b256 ) } __anon_00
        local { { u64, u64 }, u64 } __anon_000
        local { u64, u64 } __anon_0000
        local { { { u64, u64 }, u64 } } __anon_01
        local { u64, ( () | b256 ) } __anon_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local b256 inner_value

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !125
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !125
        v3 = const u64 0, !125
        store v3 to v2, !125
        v4 = ptr_to_int message to u64, !293
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !293
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !294
        v8 = load v7, !293
        v9 = call len_20(v8), !295
        v10 = const u64 32, !140
        v11 = cmp eq v9 v10, !296
        v12 = const bool false, !147
        v13 = cmp eq v11 v12, !297
        cbr v13, try_into_17_block0(), try_into_17_block1(), !298

        try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_00, !299
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !300
        v17 = const u64 0, !153
        store v17 to v16, !301
        v18 = load v14, !293
        br block0(v18), !302

        try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !303
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !304
        v22 = const u64 1, !153
        store v22 to v21, !305
        v23 = ptr_to_int message to u64, !293
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !293
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !306
        v27 = load v26, !293
        v28 = call ptr_21(v27), !307
        v29 = asm(bits: v28) -> b256 bits, !308 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !309
        store v29 to v32, !310
        v33 = load v19, !293
        br block0(v33), !293

        block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !311
        store v34 to v35, !312
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !313
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !314
        v39 = load v38, !315
        v40 = const u64 1, !181
        v41 = cmp eq v39 v40, !316
        cbr v41, unwrap_14_block0(), unwrap_14_block1(), !317

        unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !318
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !315
        v46 = load v45, !315
        v47 = get_local ptr b256, inner_value, !319
        store v46 to v47, !320
        v48 = get_local ptr b256, inner_value, !321
        v49 = load v48, !315
        v50 = const u64 32, !198
        v51 = asm(size: v50) -> u64 hp, !322 {
            aloc   size, !87
        }
        v52 = get_local ptr { u64, u64 }, __anon_0000, !323
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !324
        store v51 to v54, !325
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !326
        store v50 to v56, !327
        v57 = load v52, !328
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_000, !329
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !330
        store v57 to v60, !331
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !332
        v63 = const u64 0, !223
        store v63 to v62, !333
        v64 = load v58, !334
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !335
        store v64 to v65, !336
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !337
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !338
        v69 = const u64 32, !232
        store v69 to v68, !339
        v70 = ptr_to_int v49 to u64, !340
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !341
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !342
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !343
        v76 = load v75, !344
        v77 = const u64 32, !243
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !345 {
            mcp    dst src len, !249
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !346
        v80 = load v79, !347
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !348
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !349
        store v80 to v83, !350
        v84 = load v81, !349
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !125
        store v84 to v87, !125
        v88 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v88

        unwrap_14_block1():
        v89 = const u64 0, !265
        revert v89, !351
    }

    pub fn from_9(bits !352: b256) -> { { { u64, u64 }, u64 } }, !355 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local mut { { u64, u64 }, u64 } bytes

        entry(bits: b256):
        v0 = const u64 32, !198
        v1 = asm(size: v0) -> u64 hp, !356 {
            aloc   size, !87
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !357
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !358
        store v1 to v4, !359
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !360
        store v0 to v6, !361
        v7 = load v2, !362
        v8 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !363
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !364
        store v7 to v10, !365
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !366
        v13 = const u64 0, !223
        store v13 to v12, !367
        v14 = load v8, !368
        v15 = get_local ptr { { u64, u64 }, u64 }, bytes, !369
        store v14 to v15, !370
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !371
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !372
        v19 = const u64 32, !232
        store v19 to v18, !373
        v20 = ptr_to_int bits to u64, !374
        v21 = get_local ptr { { u64, u64 }, u64 }, bytes, !375
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64, u64 }, v22, !376
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !377
        v26 = load v25, !378
        v27 = const u64 32, !243
        v28 = asm(dst: v26, src: v20, len: v27) -> (), !379 {
            mcp    dst src len, !249
        }
        v29 = get_local ptr { { u64, u64 }, u64 }, bytes, !380
        v30 = load v29, !378
        v31 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !253
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { { u64, u64 }, u64 }, v32
        store v30 to v33, !253
        v34 = load v31
        ret { { { u64, u64 }, u64 } } v34
    }

    pub fn from_10(b !381: b256) -> { { u64, u64 }, u64 }, !384 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !198
        v1 = asm(size: v0) -> u64 hp, !385 {
            aloc   size, !87
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !386
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !387
        store v1 to v4, !388
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !389
        store v0 to v6, !390
        v7 = load v2, !391
        v8 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !392
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !393
        store v7 to v10, !394
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !393
        v13 = const u64 0, !223
        store v13 to v12, !395
        v14 = load v8, !393
        v15 = get_local ptr { { u64, u64 }, u64 }, bytes, !226
        store v14 to v15, !226
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !229
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !229
        v19 = const u64 32, !232
        store v19 to v18, !229
        v20 = ptr_to_int b to u64, !234
        v21 = get_local ptr { { u64, u64 }, u64 }, bytes, !236
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64, u64 }, v22, !238
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !240
        v26 = load v25
        v27 = const u64 32, !243
        v28 = asm(dst: v26, src: v20, len: v27) -> (), !396 {
            mcp    dst src len, !249
        }
        v29 = get_local ptr { { u64, u64 }, u64 }, bytes, !250
        v30 = load v29
        ret { { u64, u64 }, u64 } v30
    }

    pub fn with_capacity_11(capacity !397: u64) -> { { u64, u64 }, u64 }, !400 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !401 {
            aloc   size, !87
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !402
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !403
        store v0 to v3, !404
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !403
        store capacity to v5, !405
        v6 = load v1, !403
        v7 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !218
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8
        store v6 to v9, !218
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        v12 = const u64 0, !223
        store v12 to v11, !218
        v13 = load v7
        ret { { u64, u64 }, u64 } v13
    }

    pub fn with_capacity_12(capacity !406: u64) -> { u64, u64 }, !409 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !410 {
            aloc   size, !87
        }
        v1 = get_local ptr { u64, u64 }, __anon_0, !211
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !211
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !211
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !411: u64, dst !412: u64, count !413: u64) -> (), !416 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !247 {
            mcp    dst src len, !249
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !417: { u64, ( () | b256 ) }) -> b256, !420 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !178
        store self to v0, !178
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !181
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !181
        v4 = load v3
        v5 = const u64 1, !181
        v6 = cmp eq v4 v5, !421
        cbr v6, block0(), block1(), !185

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !181
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !192
        store v11 to v12, !192
        v13 = get_local ptr b256, inner_value, !195
        v14 = load v13
        ret b256 v14

        block1():
        v15 = const u64 0, !265
        revert v15, !422
    }

    pub fn eq_15(self !423: u64, other !424: u64) -> bool, !427 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !428: u64) -> never, !431 {
        entry(code: u64):
        revert code, !269
    }

    pub fn try_into_17(self !432: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !435 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !134
        v4 = load v3
        v5 = call len_20(v4), !436
        v6 = const u64 32, !140
        v7 = cmp eq v5 v6, !437
        v8 = const bool false, !147
        v9 = cmp eq v7 v8, !438
        cbr v9, block0(), block1(), !141

        block0():
        v10 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !153
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !153
        v13 = const u64 0, !153
        store v13 to v12, !153
        v14 = load v10
        ret { u64, ( () | b256 ) } v14, !158

        block1():
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !153
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !153
        v18 = const u64 1, !153
        store v18 to v17, !153
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !134
        v23 = load v22
        v24 = call ptr_21(v23), !439
        v25 = asm(bits: v24) -> b256 bits, !170 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !153
        store v25 to v28, !153
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !440: u64, other !441: u64) -> bool, !444 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other, !445
        v1 = const bool false, !147
        v2 = cmp eq v0 v1, !446
        ret bool v2
    }

    pub fn not_19(self !447: bool) -> bool, !450 {
        entry(self: bool):
        v0 = const bool false, !147
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !451: { { u64, u64 }, u64 }) -> u64, !454 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !455
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !456: { { u64, u64 }, u64 }) -> u64, !459 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !238
        v4 = load v3
        v5 = call ptr_22(v4), !462
        ret u64 v5
    }

    pub fn ptr_22(self !463: { u64, u64 }) -> u64, !466 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !240
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !467: b256) -> { b256 }, !470 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !279
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !279
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !472: { { { u64, u64 }, u64 } }) -> b256, !475 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local mut { { { u64, u64 }, u64 } } hasher
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !478
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !479
        store v0 to v1, !479
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !480
        v3 = ptr_to_int s to u64, !483
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !483
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !485
        v7 = load v6, !483
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !489
        v10 = ptr_to_int v7 to u64, !490
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !491
        v12 = load v11, !494
        v13 = call len_20(v12), !497
        v14 = get_local ptr u64, other_len, !499
        v15 = get_local ptr u64, other_len, !501
        v16 = const u64 0, !502
        v17 = cmp eq v13 v16, !505
        v18 = const unit (), !506
        cbr v17, hash_26_write_27_block0(v18), hash_26_write_27_append_28_block1(), !507

        hash_26_write_27_append_28_block1():
        v19 = const u64 1
        v20 = get_elem_ptr v9, ptr u64, v19, !508
        v21 = load v20, !509
        v22 = const u64 0, !510
        v23 = cmp eq v21 v22, !513
        cbr v23, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !514

        hash_26_write_27_append_28_block3():
        v24 = load v11, !515
        store v24 to v9, !517
        v25 = const unit (), !518
        br hash_26_write_27_block0(v25), !519

        hash_26_write_27_append_28_block4():
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !520
        v28 = load v27, !521
        v29 = get_local ptr u64, other_len, !523
        v30 = add v28, v13, !526
        v31 = get_local ptr u64, both_len, !528
        v32 = const u64 1
        v33 = get_elem_ptr v9, ptr u64, v32, !529
        v34 = load v33, !530
        v35 = get_local ptr u64, other_start, !532
        v36 = const u64 0
        v37 = get_elem_ptr v9, ptr { u64, u64 }, v36, !533
        v38 = load v37, !534
        v39 = call capacity_31(v38), !537
        v40 = get_local ptr u64, both_len, !539
        v41 = cmp lt v39 v30, !542
        v42 = const unit ()
        cbr v41, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(v42), !543

        hash_26_write_27_append_28_block6():
        v43 = const u64 0
        v44 = get_elem_ptr v9, ptr { u64, u64 }, v43, !544
        v45 = load v44, !545
        v46 = call ptr_22(v45), !548
        v47 = const u64 0
        v48 = get_elem_ptr v9, ptr { u64, u64 }, v47, !549
        v49 = load v48, !550
        v50 = call capacity_31(v49), !553
        v51 = get_local ptr u64, both_len, !555
        v52 = cmp gt v30 v50, !560
        cbr v52, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v46), !561

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v53 = asm(size: v30) -> u64 hp, !564 {
            aloc   size, !87
        }
        v54 = get_local ptr u64, new_ptr0, !566
        v55 = const u64 0, !567
        v56 = cmp gt v50 v55, !570
        v57 = const unit ()
        cbr v56, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(v57), !571

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v58 = get_local ptr u64, new_ptr0, !573
        v59 = asm(dst: v53, src: v46, len: v50) -> (), !576 {
            mcp    dst src len, !249
        }
        v60 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v60), !577

        hash_26_write_27_append_28_realloc_bytes_35_block3(v61: ()):
        v62 = get_local ptr u64, new_ptr0, !579
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v53), !580

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr u64, both_len, !582
        v65 = const u64 1
        v66 = mul v30, v65, !588
        v67 = get_local ptr { u64, u64 }, __anon_0, !590
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !591
        store v63 to v69, !592
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr u64, v70, !593
        store v66 to v71, !594
        v72 = load v67, !595
        v73 = asm(ptr: v72) -> slice ptr, !599 {
        }
        v74 = get_local ptr slice, new_slice, !601
        store v73 to v74, !602
        v75 = get_local ptr slice, new_slice, !604
        v76 = load v75, !605
        v77 = asm(ptr: v76) -> { u64, u64 } ptr, !613 {
        }
        v78 = get_local ptr { u64, u64 }, __anon_000, !614
        store v77 to v78, !615
        v79 = const u64 1
        v80 = get_elem_ptr v78, ptr u64, v79, !617
        v81 = load v80, !618
        v82 = get_local ptr u64, cap, !620
        v83 = get_local ptr u64, cap, !622
        v84 = asm(size: v81) -> u64 hp, !625 {
            aloc   size, !87
        }
        v85 = get_local ptr u64, ptr, !627
        v86 = get_local ptr u64, cap, !629
        v87 = const u64 0, !630
        v88 = cmp gt v81 v87, !633
        v89 = const unit ()
        cbr v88, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(v89), !634

        hash_26_write_27_append_28_from_37_block0():
        v90 = asm(ptr: v76) -> { u64, u64 } ptr, !639 {
        }
        v91 = get_local ptr { u64, u64 }, __anon_01, !640
        store v90 to v91, !641
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !643
        v94 = load v93, !644
        v95 = get_local ptr u64, ptr, !646
        v96 = get_local ptr u64, cap, !648
        v97 = const u64 1
        v98 = mul v81, v97, !653
        v99 = get_local ptr u64, len, !655
        v100 = get_local ptr u64, len, !657
        v101 = asm(dst: v84, src: v94, len: v98) -> (), !659 {
            mcp    dst src len, !660
        }
        v102 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v102), !661

        hash_26_write_27_append_28_from_37_block2(v103: ()):
        v104 = get_local ptr u64, ptr, !663
        v105 = get_local ptr u64, cap, !665
        v106 = get_local ptr { u64, u64 }, __anon_00, !667
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !668
        store v84 to v108, !669
        v109 = const u64 1
        v110 = get_elem_ptr v106, ptr u64, v109, !670
        store v81 to v110, !671
        v111 = load v106, !672
        v112 = const u64 0
        v113 = get_elem_ptr v9, ptr { u64, u64 }, v112, !674
        store v111 to v113, !675
        v114 = const unit ()
        br hash_26_write_27_append_28_block8(v114), !676

        hash_26_write_27_append_28_block8(v115: ()):
        v116 = const u64 0
        v117 = get_elem_ptr v9, ptr { u64, u64 }, v116, !677
        v118 = load v117, !678
        v119 = call ptr_22(v118), !681
        v120 = get_local ptr u64, other_start, !683
        v121 = asm(ptr: v119, offset: v34, new) -> u64 new, !687 {
            add    new ptr offset, !688
        }
        v122 = get_local ptr u64, new_ptr, !690
        v123 = load v11, !691
        v124 = call ptr_21(v123), !694
        v125 = get_local ptr u64, new_ptr, !696
        v126 = get_local ptr u64, other_len, !698
        v127 = asm(dst: v121, src: v124, len: v13) -> (), !701 {
            mcp    dst src len, !249
        }
        v128 = get_local ptr u64, both_len, !703
        v129 = const u64 1
        v130 = get_elem_ptr v9, ptr u64, v129, !705
        store v30 to v130, !706
        v131 = const unit ()
        br hash_26_write_27_block0(v131), !707

        hash_26_write_27_block0(v132: ()):
        v133 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !708
        v134 = load v133
        v135 = get_local ptr b256, result_buffer, !712
        v136 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !714
        store v136 to v135, !715
        v137 = get_local ptr b256, result_buffer, !717
        v138 = ptr_to_int v134 to u64, !718
        v139 = int_to_ptr v138 to ptr { { { u64, u64 }, u64 } }, !718
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr { { u64, u64 }, u64 }, v140, !719
        v142 = load v141, !718
        v143 = call ptr_21(v142), !722
        v144 = ptr_to_int v134 to u64, !718
        v145 = int_to_ptr v144 to ptr { { { u64, u64 }, u64 } }, !718
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr { { u64, u64 }, u64 }, v146, !723
        v148 = load v147, !718
        v149 = call len_20(v148), !726
        v150 = asm(hash: v137, ptr: v143, bytes: v149) -> b256 hash, !728 {
            s256   hash ptr bytes, !729
        }
        ret b256 v150
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !732 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !79
        v1 = asm(size: v0) -> u64 hp, !735 {
            aloc   size, !87
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !736
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !737
        store v1 to v4, !738
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !739
        v7 = const u64 0, !92
        store v7 to v6, !740
        v8 = load v2, !741
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !742
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !743
        store v8 to v11, !744
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !743
        v14 = const u64 0, !95
        store v14 to v13, !745
        v15 = load v9, !743
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !746
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !746
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn hash_26(self !747: { { { u64, u64 }, u64 } }, state !748: ptr { { { u64, u64 }, u64 } }) -> (), !751 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !484
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr state, ptr { { u64, u64 }, u64 }, v5, !752
        v7 = ptr_to_int v4 to u64, !753
        v8 = int_to_ptr v7 to ptr { { u64, u64 }, u64 }, !753
        v9 = load v8, !754
        v10 = call len_20(v9), !755
        v11 = get_local ptr u64, other_len, !756
        v12 = get_local ptr u64, other_len, !757
        v13 = const u64 0, !502
        v14 = cmp eq v10 v13, !758
        v15 = const unit (), !506
        cbr v14, write_27_block0(v15), write_27_append_28_block1(), !759

        write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v6, ptr u64, v16, !760
        v18 = load v17, !761
        v19 = const u64 0, !510
        v20 = cmp eq v18 v19, !762
        cbr v20, write_27_append_28_block3(), write_27_append_28_block4(), !763

        write_27_append_28_block3():
        v21 = load v8, !764
        store v21 to v6, !765
        v22 = const unit (), !518
        br write_27_block0(v22), !766

        write_27_append_28_block4():
        v23 = const u64 1
        v24 = get_elem_ptr v6, ptr u64, v23, !767
        v25 = load v24, !768
        v26 = get_local ptr u64, other_len, !769
        v27 = add v25, v10, !770
        v28 = get_local ptr u64, both_len, !771
        v29 = const u64 1
        v30 = get_elem_ptr v6, ptr u64, v29, !772
        v31 = load v30, !773
        v32 = get_local ptr u64, other_start, !774
        v33 = const u64 0
        v34 = get_elem_ptr v6, ptr { u64, u64 }, v33, !775
        v35 = load v34, !776
        v36 = call capacity_31(v35), !777
        v37 = get_local ptr u64, both_len, !778
        v38 = cmp lt v36 v27, !779
        v39 = const unit ()
        cbr v38, write_27_append_28_block6(), write_27_append_28_block8(v39), !780

        write_27_append_28_block6():
        v40 = const u64 0
        v41 = get_elem_ptr v6, ptr { u64, u64 }, v40, !781
        v42 = load v41, !782
        v43 = call ptr_22(v42), !783
        v44 = const u64 0
        v45 = get_elem_ptr v6, ptr { u64, u64 }, v44, !784
        v46 = load v45, !785
        v47 = call capacity_31(v46), !786
        v48 = get_local ptr u64, both_len, !787
        v49 = cmp gt v27 v47, !788
        cbr v49, write_27_append_28_realloc_bytes_35_block0(), write_27_append_28_realloc_bytes_35_block5(v43), !789

        write_27_append_28_realloc_bytes_35_block0():
        v50 = asm(size: v27) -> u64 hp, !790 {
            aloc   size, !87
        }
        v51 = get_local ptr u64, new_ptr0, !791
        v52 = const u64 0, !567
        v53 = cmp gt v47 v52, !792
        v54 = const unit ()
        cbr v53, write_27_append_28_realloc_bytes_35_block1(), write_27_append_28_realloc_bytes_35_block3(v54), !793

        write_27_append_28_realloc_bytes_35_block1():
        v55 = get_local ptr u64, new_ptr0, !794
        v56 = asm(dst: v50, src: v43, len: v47) -> (), !795 {
            mcp    dst src len, !249
        }
        v57 = const unit ()
        br write_27_append_28_realloc_bytes_35_block3(v57), !796

        write_27_append_28_realloc_bytes_35_block3(v58: ()):
        v59 = get_local ptr u64, new_ptr0, !797
        br write_27_append_28_realloc_bytes_35_block5(v50), !798

        write_27_append_28_realloc_bytes_35_block5(v60: u64):
        v61 = get_local ptr u64, both_len, !799
        v62 = const u64 1
        v63 = mul v27, v62, !800
        v64 = get_local ptr { u64, u64 }, __anon_0, !801
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !802
        store v60 to v66, !803
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67, !804
        store v63 to v68, !805
        v69 = load v64, !806
        v70 = asm(ptr: v69) -> slice ptr, !807 {
        }
        v71 = get_local ptr slice, new_slice, !808
        store v70 to v71, !809
        v72 = get_local ptr slice, new_slice, !810
        v73 = load v72, !811
        v74 = asm(ptr: v73) -> { u64, u64 } ptr, !812 {
        }
        v75 = get_local ptr { u64, u64 }, __anon_000, !813
        store v74 to v75, !814
        v76 = const u64 1
        v77 = get_elem_ptr v75, ptr u64, v76, !815
        v78 = load v77, !816
        v79 = get_local ptr u64, cap, !817
        v80 = get_local ptr u64, cap, !818
        v81 = asm(size: v78) -> u64 hp, !819 {
            aloc   size, !87
        }
        v82 = get_local ptr u64, ptr, !820
        v83 = get_local ptr u64, cap, !821
        v84 = const u64 0, !630
        v85 = cmp gt v78 v84, !822
        v86 = const unit ()
        cbr v85, write_27_append_28_from_37_block0(), write_27_append_28_from_37_block2(v86), !823

        write_27_append_28_from_37_block0():
        v87 = asm(ptr: v73) -> { u64, u64 } ptr, !824 {
        }
        v88 = get_local ptr { u64, u64 }, __anon_01, !825
        store v87 to v88, !826
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr u64, v89, !827
        v91 = load v90, !828
        v92 = get_local ptr u64, ptr, !829
        v93 = get_local ptr u64, cap, !830
        v94 = const u64 1
        v95 = mul v78, v94, !831
        v96 = get_local ptr u64, len, !832
        v97 = get_local ptr u64, len, !833
        v98 = asm(dst: v81, src: v91, len: v95) -> (), !834 {
            mcp    dst src len, !660
        }
        v99 = const unit ()
        br write_27_append_28_from_37_block2(v99), !835

        write_27_append_28_from_37_block2(v100: ()):
        v101 = get_local ptr u64, ptr, !836
        v102 = get_local ptr u64, cap, !837
        v103 = get_local ptr { u64, u64 }, __anon_00, !838
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !839
        store v81 to v105, !840
        v106 = const u64 1
        v107 = get_elem_ptr v103, ptr u64, v106, !841
        store v78 to v107, !842
        v108 = load v103, !843
        v109 = const u64 0
        v110 = get_elem_ptr v6, ptr { u64, u64 }, v109, !844
        store v108 to v110, !845
        v111 = const unit ()
        br write_27_append_28_block8(v111), !846

        write_27_append_28_block8(v112: ()):
        v113 = const u64 0
        v114 = get_elem_ptr v6, ptr { u64, u64 }, v113, !847
        v115 = load v114, !848
        v116 = call ptr_22(v115), !849
        v117 = get_local ptr u64, other_start, !850
        v118 = asm(ptr: v116, offset: v31, new) -> u64 new, !851 {
            add    new ptr offset, !688
        }
        v119 = get_local ptr u64, new_ptr, !852
        v120 = load v8, !853
        v121 = call ptr_21(v120), !854
        v122 = get_local ptr u64, new_ptr, !855
        v123 = get_local ptr u64, other_len, !856
        v124 = asm(dst: v118, src: v121, len: v10) -> (), !857 {
            mcp    dst src len, !249
        }
        v125 = get_local ptr u64, both_len, !858
        v126 = const u64 1
        v127 = get_elem_ptr v6, ptr u64, v126, !859
        store v27 to v127, !860
        v128 = const unit ()
        br write_27_block0(v128), !861

        write_27_block0(v129: ()):
        v130 = const unit ()
        ret () v130
    }

    pub fn write_27(self !862: ptr { { { u64, u64 }, u64 } }, bytes !863: { { u64, u64 }, u64 }) -> (), !866 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !488
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !867
        v5 = call len_20(v4), !868
        v6 = get_local ptr u64, other_len, !869
        v7 = get_local ptr u64, other_len, !870
        v8 = const u64 0, !502
        v9 = cmp eq v5 v8, !871
        v10 = const unit (), !506
        cbr v9, block0(v10), append_28_block1(), !872

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !873
        v13 = load v12, !867
        v14 = const u64 0, !510
        v15 = cmp eq v13 v14, !874
        cbr v15, append_28_block3(), append_28_block4(), !875

        append_28_block3():
        v16 = load v3, !867
        store v16 to v1, !876
        v17 = const unit (), !518
        br block0(v17), !877

        append_28_block4():
        v18 = const u64 1
        v19 = get_elem_ptr v1, ptr u64, v18, !878
        v20 = load v19, !867
        v21 = get_local ptr u64, other_len, !879
        v22 = add v20, v5, !880
        v23 = get_local ptr u64, both_len, !881
        v24 = const u64 1
        v25 = get_elem_ptr v1, ptr u64, v24, !882
        v26 = load v25, !867
        v27 = get_local ptr u64, other_start, !883
        v28 = const u64 0
        v29 = get_elem_ptr v1, ptr { u64, u64 }, v28, !884
        v30 = load v29, !867
        v31 = call capacity_31(v30), !885
        v32 = get_local ptr u64, both_len, !886
        v33 = cmp lt v31 v22, !887
        v34 = const unit ()
        cbr v33, append_28_block6(), append_28_block8(v34), !888

        append_28_block6():
        v35 = const u64 0
        v36 = get_elem_ptr v1, ptr { u64, u64 }, v35, !889
        v37 = load v36, !867
        v38 = call ptr_22(v37), !890
        v39 = const u64 0
        v40 = get_elem_ptr v1, ptr { u64, u64 }, v39, !891
        v41 = load v40, !867
        v42 = call capacity_31(v41), !892
        v43 = get_local ptr u64, both_len, !893
        v44 = cmp gt v22 v42, !894
        cbr v44, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v38), !895

        append_28_realloc_bytes_35_block0():
        v45 = asm(size: v22) -> u64 hp, !896 {
            aloc   size, !87
        }
        v46 = get_local ptr u64, new_ptr0, !897
        v47 = const u64 0, !567
        v48 = cmp gt v42 v47, !898
        v49 = const unit ()
        cbr v48, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v49), !899

        append_28_realloc_bytes_35_block1():
        v50 = get_local ptr u64, new_ptr0, !900
        v51 = asm(dst: v45, src: v38, len: v42) -> (), !901 {
            mcp    dst src len, !249
        }
        v52 = const unit ()
        br append_28_realloc_bytes_35_block3(v52), !902

        append_28_realloc_bytes_35_block3(v53: ()):
        v54 = get_local ptr u64, new_ptr0, !903
        br append_28_realloc_bytes_35_block5(v45), !904

        append_28_realloc_bytes_35_block5(v55: u64):
        v56 = get_local ptr u64, both_len, !905
        v57 = const u64 1
        v58 = mul v22, v57, !906
        v59 = get_local ptr { u64, u64 }, __anon_0, !907
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !908
        store v55 to v61, !909
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !910
        store v58 to v63, !911
        v64 = load v59, !912
        v65 = asm(ptr: v64) -> slice ptr, !913 {
        }
        v66 = get_local ptr slice, new_slice, !914
        store v65 to v66, !915
        v67 = get_local ptr slice, new_slice, !916
        v68 = load v67, !867
        v69 = asm(ptr: v68) -> { u64, u64 } ptr, !917 {
        }
        v70 = get_local ptr { u64, u64 }, __anon_000, !918
        store v69 to v70, !919
        v71 = const u64 1
        v72 = get_elem_ptr v70, ptr u64, v71, !920
        v73 = load v72, !921
        v74 = get_local ptr u64, cap, !922
        v75 = get_local ptr u64, cap, !923
        v76 = asm(size: v73) -> u64 hp, !924 {
            aloc   size, !87
        }
        v77 = get_local ptr u64, ptr, !925
        v78 = get_local ptr u64, cap, !926
        v79 = const u64 0, !630
        v80 = cmp gt v73 v79, !927
        v81 = const unit ()
        cbr v80, append_28_from_37_block0(), append_28_from_37_block2(v81), !928

        append_28_from_37_block0():
        v82 = asm(ptr: v68) -> { u64, u64 } ptr, !929 {
        }
        v83 = get_local ptr { u64, u64 }, __anon_01, !930
        store v82 to v83, !931
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !932
        v86 = load v85, !933
        v87 = get_local ptr u64, ptr, !934
        v88 = get_local ptr u64, cap, !935
        v89 = const u64 1
        v90 = mul v73, v89, !936
        v91 = get_local ptr u64, len, !937
        v92 = get_local ptr u64, len, !938
        v93 = asm(dst: v76, src: v86, len: v90) -> (), !939 {
            mcp    dst src len, !660
        }
        v94 = const unit ()
        br append_28_from_37_block2(v94), !940

        append_28_from_37_block2(v95: ()):
        v96 = get_local ptr u64, ptr, !941
        v97 = get_local ptr u64, cap, !942
        v98 = get_local ptr { u64, u64 }, __anon_00, !943
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr u64, v99, !944
        store v76 to v100, !945
        v101 = const u64 1
        v102 = get_elem_ptr v98, ptr u64, v101, !946
        store v73 to v102, !947
        v103 = load v98, !948
        v104 = const u64 0
        v105 = get_elem_ptr v1, ptr { u64, u64 }, v104, !949
        store v103 to v105, !950
        v106 = const unit ()
        br append_28_block8(v106), !867

        append_28_block8(v107: ()):
        v108 = const u64 0
        v109 = get_elem_ptr v1, ptr { u64, u64 }, v108, !951
        v110 = load v109, !867
        v111 = call ptr_22(v110), !952
        v112 = get_local ptr u64, other_start, !953
        v113 = asm(ptr: v111, offset: v26, new) -> u64 new, !954 {
            add    new ptr offset, !688
        }
        v114 = get_local ptr u64, new_ptr, !955
        v115 = load v3, !867
        v116 = call ptr_21(v115), !956
        v117 = get_local ptr u64, new_ptr, !957
        v118 = get_local ptr u64, other_len, !958
        v119 = asm(dst: v113, src: v116, len: v5) -> (), !959 {
            mcp    dst src len, !249
        }
        v120 = get_local ptr u64, both_len, !960
        v121 = const u64 1
        v122 = get_elem_ptr v1, ptr u64, v121, !961
        store v22 to v122, !962
        v123 = const unit ()
        br block0(v123), !867

        block0(v124: ()):
        v125 = const unit ()
        ret () v125
    }

    pub fn append_28(self !963: ptr { { u64, u64 }, u64 }, other !964: ptr { { u64, u64 }, u64 }) -> (), !967 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !968
        v2 = get_local ptr u64, other_len, !498
        v3 = get_local ptr u64, other_len, !500
        v4 = const u64 0, !502
        v5 = cmp eq v1 v4, !969
        cbr v5, block0(), block1(), !503

        block0():
        v6 = const unit (), !506
        ret () v6, !506

        block1():
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !455
        v9 = load v8
        v10 = const u64 0, !510
        v11 = cmp eq v9 v10, !970
        cbr v11, block3(), block4(), !511

        block3():
        v12 = load other
        store v12 to self, !516
        v13 = const unit (), !518
        ret () v13, !518

        block4():
        v14 = const u64 1
        v15 = get_elem_ptr self, ptr u64, v14, !455
        v16 = load v15
        v17 = get_local ptr u64, other_len, !522
        v18 = add v16, v1, !971
        v19 = get_local ptr u64, both_len, !527
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !455
        v22 = load v21
        v23 = get_local ptr u64, other_start, !531
        v24 = const u64 0
        v25 = get_elem_ptr self, ptr { u64, u64 }, v24, !238
        v26 = load v25
        v27 = call capacity_31(v26), !972
        v28 = get_local ptr u64, both_len, !538
        v29 = cmp lt v27 v18, !973
        v30 = const unit ()
        cbr v29, block6(), block8(v30), !540

        block6():
        v31 = const u64 0
        v32 = get_elem_ptr self, ptr { u64, u64 }, v31, !238
        v33 = load v32
        v34 = call ptr_22(v33), !974
        v35 = const u64 0
        v36 = get_elem_ptr self, ptr { u64, u64 }, v35, !238
        v37 = load v36
        v38 = call capacity_31(v37), !975
        v39 = get_local ptr u64, both_len, !554
        v40 = cmp gt v18 v38, !976
        cbr v40, realloc_bytes_35_block0(), realloc_bytes_35_block5(v34), !977

        realloc_bytes_35_block0():
        v41 = asm(size: v18) -> u64 hp, !978 {
            aloc   size, !87
        }
        v42 = get_local ptr u64, new_ptr0, !979
        v43 = const u64 0, !567
        v44 = cmp gt v38 v43, !980
        v45 = const unit ()
        cbr v44, realloc_bytes_35_block1(), realloc_bytes_35_block3(v45), !981

        realloc_bytes_35_block1():
        v46 = get_local ptr u64, new_ptr0, !982
        v47 = asm(dst: v41, src: v34, len: v38) -> (), !983 {
            mcp    dst src len, !249
        }
        v48 = const unit ()
        br realloc_bytes_35_block3(v48), !984

        realloc_bytes_35_block3(v49: ()):
        v50 = get_local ptr u64, new_ptr0, !985
        br realloc_bytes_35_block5(v41), !984

        realloc_bytes_35_block5(v51: u64):
        v52 = get_local ptr u64, both_len, !581
        v53 = const u64 1
        v54 = mul v18, v53, !986
        v55 = get_local ptr { u64, u64 }, __anon_0, !987
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !988
        store v51 to v57, !989
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !990
        store v54 to v59, !991
        v60 = load v55, !992
        v61 = asm(ptr: v60) -> slice ptr, !993 {
        }
        v62 = get_local ptr slice, new_slice, !600
        store v61 to v62, !600
        v63 = get_local ptr slice, new_slice, !603
        v64 = load v63
        v65 = asm(ptr: v64) -> { u64, u64 } ptr, !994 {
        }
        v66 = get_local ptr { u64, u64 }, __anon_000, !995
        store v65 to v66, !996
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !997
        v69 = load v68, !998
        v70 = get_local ptr u64, cap, !999
        v71 = get_local ptr u64, cap, !1000
        v72 = asm(size: v69) -> u64 hp, !1001 {
            aloc   size, !87
        }
        v73 = get_local ptr u64, ptr, !1002
        v74 = get_local ptr u64, cap, !1003
        v75 = const u64 0, !630
        v76 = cmp gt v69 v75, !1004
        v77 = const unit ()
        cbr v76, from_37_block0(), from_37_block2(v77), !1005

        from_37_block0():
        v78 = asm(ptr: v64) -> { u64, u64 } ptr, !1006 {
        }
        v79 = get_local ptr { u64, u64 }, __anon_01, !1007
        store v78 to v79, !1008
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr u64, v80, !1009
        v82 = load v81, !1010
        v83 = get_local ptr u64, ptr, !1011
        v84 = get_local ptr u64, cap, !1012
        v85 = const u64 1
        v86 = mul v69, v85, !1013
        v87 = get_local ptr u64, len, !1014
        v88 = get_local ptr u64, len, !1015
        v89 = asm(dst: v72, src: v82, len: v86) -> (), !1016 {
            mcp    dst src len, !660
        }
        v90 = const unit ()
        br from_37_block2(v90), !1017

        from_37_block2(v91: ()):
        v92 = get_local ptr u64, ptr, !1018
        v93 = get_local ptr u64, cap, !1019
        v94 = get_local ptr { u64, u64 }, __anon_00, !1020
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95, !1017
        store v72 to v96, !1021
        v97 = const u64 1
        v98 = get_elem_ptr v94, ptr u64, v97, !1017
        store v69 to v98, !1022
        v99 = load v94, !1017
        v100 = const u64 0
        v101 = get_elem_ptr self, ptr { u64, u64 }, v100, !673
        store v99 to v101, !673
        v102 = const unit ()
        br block8(v102)

        block8(v103: ()):
        v104 = const u64 0
        v105 = get_elem_ptr self, ptr { u64, u64 }, v104, !238
        v106 = load v105
        v107 = call ptr_22(v106), !1023
        v108 = get_local ptr u64, other_start, !682
        v109 = asm(ptr: v107, offset: v22, new) -> u64 new, !1024 {
            add    new ptr offset, !688
        }
        v110 = get_local ptr u64, new_ptr, !689
        v111 = load other
        v112 = call ptr_21(v111), !1025
        v113 = get_local ptr u64, new_ptr, !695
        v114 = get_local ptr u64, other_len, !697
        v115 = asm(dst: v109, src: v112, len: v1) -> (), !1026 {
            mcp    dst src len, !249
        }
        v116 = get_local ptr u64, both_len, !702
        v117 = const u64 1
        v118 = get_elem_ptr self, ptr u64, v117, !704
        store v18 to v118, !704
        v119 = const unit ()
        ret () v119
    }

    pub fn add_29(self !1027: u64, other !1028: u64) -> u64, !1031 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !1032: u64, other !1033: u64) -> bool, !1036 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !1037: { u64, u64 }) -> u64, !1040 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1041
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !1042: u64, count !1043: u64) -> slice, !1046 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1047
        v2 = get_local ptr { u64, u64 }, __anon_0, !589
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !589
        store ptr to v4, !589
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !589
        store v1 to v6, !589
        v7 = load v2
        v8 = asm(ptr: v7) -> slice ptr, !1048 {
        }
        ret slice v8
    }

    fn from_parts_33(parts !1049: { u64, u64 }) -> slice, !1052 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !598 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !1053: u64, other !1054: u64) -> u64, !1057 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !1058: u64, count !1059: u64, new_count !1060: u64) -> u64, !1063 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = cmp gt new_count count, !1064
        cbr v0, block0(), block5(ptr), !558

        block0():
        v1 = asm(size: new_count) -> u64 hp, !1065 {
            aloc   size, !87
        }
        v2 = get_local ptr u64, new_ptr, !565
        v3 = const u64 0, !567
        v4 = cmp gt count v3, !1066
        v5 = const unit ()
        cbr v4, block1(), block3(v5), !568

        block1():
        v6 = get_local ptr u64, new_ptr, !572
        v7 = asm(dst: v1, src: ptr, len: count) -> (), !1067 {
            mcp    dst src len, !249
        }
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !578
        br block5(v1)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !1068: u64, other !1069: u64) -> bool, !1072 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !1073: slice) -> { u64, u64 }, !1076 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_01
        local u64 cap
        local u64 len
        local u64 ptr

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !1077 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !1078
        store v0 to v1, !1078
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1079
        v4 = load v3, !1078
        v5 = get_local ptr u64, cap, !619
        v6 = get_local ptr u64, cap, !621
        v7 = asm(size: v4) -> u64 hp, !1080 {
            aloc   size, !87
        }
        v8 = get_local ptr u64, ptr, !626
        v9 = get_local ptr u64, cap, !628
        v10 = const u64 0, !630
        v11 = cmp gt v4 v10, !1081
        v12 = const unit ()
        cbr v11, block0(), block2(v12), !631

        block0():
        v13 = asm(ptr: slice) -> { u64, u64 } ptr, !1082 {
        }
        v14 = get_local ptr { u64, u64 }, __anon_01, !1083
        store v13 to v14, !1083
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1084
        v17 = load v16, !1083
        v18 = get_local ptr u64, ptr, !645
        v19 = get_local ptr u64, cap, !647
        v20 = const u64 1
        v21 = mul v4, v20, !1085
        v22 = get_local ptr u64, len, !1086
        v23 = get_local ptr u64, len, !1087
        v24 = asm(dst: v7, src: v17, len: v21) -> (), !1088 {
            mcp    dst src len, !660
        }
        v25 = const unit ()
        br block2(v25)

        block2(v26: ()):
        v27 = get_local ptr u64, ptr, !662
        v28 = get_local ptr u64, cap, !664
        v29 = get_local ptr { u64, u64 }, __anon_0, !666
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v7 to v31, !666
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        store v4 to v33, !666
        v34 = load v29
        ret { u64, u64 } v34
    }

    pub fn number_of_bytes_38(self !1089: slice) -> u64, !1092 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1093 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !616
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !1094: slice) -> { u64, u64 }, !1097 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !612 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !1098: u64, dst !1099: u64, count !1100: u64) -> (), !1103 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1104
        v2 = get_local ptr u64, len, !654
        v3 = get_local ptr u64, len, !656
        v4 = asm(dst: dst, src: self, len: v1) -> (), !658 {
            mcp    dst src len, !660
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn ptr_41(self !1105: slice) -> u64, !1108 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1109 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !642
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !1110: u64, offset !1111: u64) -> u64, !1114 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !686 {
            add    new ptr offset, !688
        }
        ret u64 v0
    }

    pub fn sha256_43(self !1115: { { { u64, u64 }, u64 } }) -> b256, !1118 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr b256, result_buffer, !711
        v1 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !714
        store v1 to v0, !711
        v2 = get_local ptr b256, result_buffer, !716
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !488
        v7 = load v6
        v8 = call ptr_21(v7), !1119
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !488
        v13 = load v12
        v14 = call len_20(v13), !1120
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !727 {
            s256   hash ptr bytes, !729
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !1123 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !714
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1064 1095
!42 = (!4 !5 !41)
!43 = span !6 1108 1117
!44 = (!4 !5 !43)
!45 = span !6 1126 1133
!46 = (!4 !5 !45)
!47 = span !6 1108 1134
!48 = fn_call_path_span !6 1118 1125
!49 = (!4 !5 !47 !48)
!50 = span !6 1100 1135
!51 = (!4 !5 !50)
!52 = (!4 !5 !50)
!53 = span !6 1148 1157
!54 = (!4 !5 !53)
!55 = span !6 1166 1173
!56 = (!4 !5 !55)
!57 = span !6 1148 1174
!58 = fn_call_path_span !6 1158 1165
!59 = (!4 !5 !57 !58)
!60 = span !6 1140 1175
!61 = (!4 !5 !60)
!62 = (!4 !5 !60)
!63 = span !6 972 1177
!64 = fn_name_span !6 979 983
!65 = (!63 !64)
!66 = (!7 !8)
!67 = (!13 !14 !15)
!68 = (!13 !14)
!69 = (!13 !14 !15)
!70 = (!13 !14 !25)
!71 = (!13 !14 !25)
!72 = (!38 !39)
!73 = (!47 !48)
!74 = (!57 !58)
!75 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!76 = span !75 3024 3131
!77 = fn_name_span !75 3031 3034
!78 = (!76 !77)
!79 = span !75 570 571
!80 = span !75 3079 3094
!81 = fn_call_path_span !75 3079 3092
!82 = span !75 558 572
!83 = fn_call_path_span !75 558 569
!84 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!85 = span !84 3315 3378
!86 = (!80 !81 !82 !83 !85)
!87 = span !84 3342 3351
!88 = span !75 534 603
!89 = (!80 !81 !88)
!90 = (!80 !81)
!91 = (!80 !81 !88)
!92 = span !75 591 592
!93 = (!80 !81 !88)
!94 = span !75 3055 3125
!95 = span !75 3113 3114
!96 = span !75 503 609
!97 = fn_name_span !75 510 513
!98 = (!96 !97)
!99 = (!82 !83 !85)
!100 = span !84 3286 3291
!101 = span !84 3267 3380
!102 = fn_name_span !84 3274 3285
!103 = (!101 !102)
!104 = span !6 258 340
!105 = fn_name_span !6 265 268
!106 = (!104 !105)
!107 = span !6 805 809
!108 = span !6 811 816
!109 = span !6 799 968
!110 = fn_name_span !6 802 804
!111 = inline "never"
!112 = (!109 !110 !111)
!113 = span !6 218 232
!114 = span !6 889 891
!115 = span !6 842 962
!116 = span !6 907 926
!117 = span !6 507 511
!118 = span !6 513 520
!119 = span !6 492 714
!120 = fn_name_span !6 499 506
!121 = (!119 !120)
!122 = span !6 582 603
!123 = fn_call_path_span !6 587 594
!124 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!125 = span !124 1815 1933
!126 = (!122 !123 !125)
!127 = (!122 !123 !125)
!128 = (!122 !123 !125)
!129 = span !6 451 469
!130 = fn_call_path_span !6 459 467
!131 = (!122 !123 !129 !130)
!132 = (!122 !123 !129 !130)
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!134 = span !133 329 341
!135 = (!122 !123 !129 !130 !134)
!136 = (!122 !123 !129 !130)
!137 = span !133 1573 1589
!138 = fn_call_path_span !133 1584 1587
!139 = (!122 !123 !129 !130 !137 !138)
!140 = span !133 1593 1595
!141 = span !133 1573 1595
!142 = fn_call_path_span !133 1590 1592
!143 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!144 = span !143 15515 15529
!145 = fn_call_path_span !143 15520 15522
!146 = (!122 !123 !129 !130 !141 !142 !144 !145)
!147 = span !143 12533 12538
!148 = span !143 15514 15536
!149 = fn_call_path_span !143 15531 15534
!150 = (!122 !123 !129 !130 !141 !142 !148 !149)
!151 = (!122 !123 !129 !130 !141)
!152 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!153 = span !152 2461 2560
!154 = (!122 !123 !129 !130 !153)
!155 = (!122 !123 !129 !130 !153)
!156 = (!122 !123 !129 !130 !153)
!157 = (!122 !123 !129 !130)
!158 = span !133 1610 1621
!159 = (!122 !123 !129 !130 !158)
!160 = (!122 !123 !129 !130 !153)
!161 = (!122 !123 !129 !130 !153)
!162 = (!122 !123 !129 !130 !153)
!163 = (!122 !123 !129 !130)
!164 = (!122 !123 !129 !130)
!165 = (!122 !123 !129 !130 !134)
!166 = (!122 !123 !129 !130)
!167 = span !133 1657 1673
!168 = fn_call_path_span !133 1668 1671
!169 = (!122 !123 !129 !130 !167 !168)
!170 = span !133 1647 1709
!171 = (!122 !123 !129 !130 !170)
!172 = (!122 !123 !129 !130 !153)
!173 = (!122 !123 !129 !130 !153)
!174 = (!122 !123 !129 !130)
!175 = (!122 !123 !129 !130)
!176 = span !6 451 478
!177 = fn_call_path_span !6 470 476
!178 = span !152 4973 5075
!179 = (!122 !123 !176 !177 !178)
!180 = (!122 !123 !176 !177 !178)
!181 = span !152 4979 4983
!182 = (!122 !123 !176 !177 !181)
!183 = (!122 !123 !176 !177 !181)
!184 = (!122 !123 !176 !177)
!185 = span !152 4998 5037
!186 = fn_call_path_span !152 4998 5037
!187 = (!122 !123 !176 !177 !185 !186)
!188 = (!122 !123 !176 !177 !185)
!189 = (!122 !123 !176 !177 !181)
!190 = (!122 !123 !176 !177)
!191 = (!122 !123 !176 !177)
!192 = span !152 5009 5020
!193 = (!122 !123 !176 !177 !192)
!194 = (!122 !123 !176 !177 !192)
!195 = span !152 5025 5036
!196 = (!122 !123 !176 !177 !195)
!197 = (!122 !123 !176 !177)
!198 = span !75 28953 28955
!199 = span !6 435 479
!200 = fn_call_path_span !6 435 450
!201 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!202 = span !201 3133 3150
!203 = fn_call_path_span !201 3133 3144
!204 = span !75 28933 28956
!205 = fn_call_path_span !75 28933 28952
!206 = span !75 4157 4190
!207 = fn_call_path_span !75 4157 4180
!208 = span !75 863 884
!209 = fn_call_path_span !75 863 874
!210 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207 !208 !209 !85)
!211 = span !75 839 922
!212 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207 !211)
!213 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207)
!214 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207 !211)
!215 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207)
!216 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207 !211)
!217 = (!122 !123 !199 !200 !202 !203 !204 !205 !206 !207)
!218 = span !75 4133 4221
!219 = (!122 !123 !199 !200 !202 !203 !204 !205 !218)
!220 = (!122 !123 !199 !200 !202 !203 !204 !205)
!221 = (!122 !123 !199 !200 !202 !203 !204 !205 !218)
!222 = (!122 !123 !199 !200 !202 !203 !204 !205)
!223 = span !75 4209 4210
!224 = (!122 !123 !199 !200 !202 !203 !204 !205 !218)
!225 = (!122 !123 !199 !200 !202 !203 !204 !205)
!226 = span !75 28917 28957
!227 = (!122 !123 !199 !200 !202 !203 !226)
!228 = (!122 !123 !199 !200 !202 !203 !226)
!229 = span !75 28966 28980
!230 = (!122 !123 !199 !200 !202 !203 !229)
!231 = (!122 !123 !199 !200 !202 !203 !229)
!232 = span !75 28978 28980
!233 = (!122 !123 !199 !200 !202 !203 !229)
!234 = span !75 29065 29077
!235 = (!122 !123 !199 !200 !202 !203 !234)
!236 = span !75 29092 29097
!237 = (!122 !123 !199 !200 !202 !203 !236)
!238 = span !75 2445 2458
!239 = (!122 !123 !199 !200 !202 !203 !238)
!240 = span !75 400 412
!241 = (!122 !123 !199 !200 !202 !203 !240)
!242 = (!122 !123 !199 !200 !202 !203)
!243 = span !75 29107 29109
!244 = span !75 29065 29110
!245 = fn_call_path_span !75 29078 29091
!246 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!247 = span !246 5999 6076
!248 = (!122 !123 !199 !200 !202 !203 !244 !245 !247)
!249 = span !246 6050 6065
!250 = span !75 29121 29126
!251 = (!122 !123 !199 !200 !202 !203 !250)
!252 = (!122 !123 !199 !200 !202 !203)
!253 = span !201 3107 3161
!254 = (!122 !123 !199 !200 !253)
!255 = (!122 !123 !199 !200)
!256 = (!122 !123 !199 !200 !253)
!257 = (!122 !123 !199 !200)
!258 = (!122 !123 !125)
!259 = (!122 !123 !125)
!260 = (!122 !123)
!261 = span !6 576 708
!262 = span !6 618 668
!263 = fn_call_path_span !6 618 668
!264 = (!262 !263)
!265 = span !152 5062 5063
!266 = span !152 5055 5064
!267 = fn_call_path_span !152 5055 5061
!268 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!269 = span !268 757 771
!270 = (!122 !123 !176 !177 !266 !267 !269)
!271 = span !6 621 628
!272 = span !6 657 664
!273 = span !6 650 665
!274 = fn_call_path_span !6 650 656
!275 = (!273 !274)
!276 = span !6 636 666
!277 = fn_call_path_span !6 636 649
!278 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!279 = span !278 2370 2383
!280 = (!276 !277 !279)
!281 = (!276 !277)
!282 = (!276 !277 !279)
!283 = span !6 681 698
!284 = fn_call_path_span !6 681 698
!285 = (!283 !284)
!286 = span !6 685 686
!287 = span !6 695 696
!288 = span !6 361 365
!289 = span !6 367 374
!290 = span !6 346 486
!291 = fn_name_span !6 353 360
!292 = (!290 !291)
!293 = (!129 !130)
!294 = (!129 !130 !134)
!295 = (!129 !130 !137 !138)
!296 = (!129 !130 !141 !142 !144 !145)
!297 = (!129 !130 !141 !142 !148 !149)
!298 = (!129 !130 !141)
!299 = (!129 !130 !153)
!300 = (!129 !130 !153)
!301 = (!129 !130 !153)
!302 = (!129 !130 !158)
!303 = (!129 !130 !153)
!304 = (!129 !130 !153)
!305 = (!129 !130 !153)
!306 = (!129 !130 !134)
!307 = (!129 !130 !167 !168)
!308 = (!129 !130 !170)
!309 = (!129 !130 !153)
!310 = (!129 !130 !153)
!311 = (!176 !177 !178)
!312 = (!176 !177 !178)
!313 = (!176 !177 !181)
!314 = (!176 !177 !181)
!315 = (!176 !177)
!316 = (!176 !177 !185 !186)
!317 = (!176 !177 !185)
!318 = (!176 !177 !181)
!319 = (!176 !177 !192)
!320 = (!176 !177 !192)
!321 = (!176 !177 !195)
!322 = (!199 !200 !202 !203 !204 !205 !206 !207 !208 !209 !85)
!323 = (!199 !200 !202 !203 !204 !205 !206 !207 !211)
!324 = (!199 !200 !202 !203 !204 !205 !206 !207)
!325 = (!199 !200 !202 !203 !204 !205 !206 !207 !211)
!326 = (!199 !200 !202 !203 !204 !205 !206 !207)
!327 = (!199 !200 !202 !203 !204 !205 !206 !207 !211)
!328 = (!199 !200 !202 !203 !204 !205 !206 !207)
!329 = (!199 !200 !202 !203 !204 !205 !218)
!330 = (!199 !200 !202 !203 !204 !205)
!331 = (!199 !200 !202 !203 !204 !205 !218)
!332 = (!199 !200 !202 !203 !204 !205)
!333 = (!199 !200 !202 !203 !204 !205 !218)
!334 = (!199 !200 !202 !203 !204 !205)
!335 = (!199 !200 !202 !203 !226)
!336 = (!199 !200 !202 !203 !226)
!337 = (!199 !200 !202 !203 !229)
!338 = (!199 !200 !202 !203 !229)
!339 = (!199 !200 !202 !203 !229)
!340 = (!199 !200 !202 !203 !234)
!341 = (!199 !200 !202 !203 !236)
!342 = (!199 !200 !202 !203 !238)
!343 = (!199 !200 !202 !203 !240)
!344 = (!199 !200 !202 !203)
!345 = (!199 !200 !202 !203 !244 !245 !247)
!346 = (!199 !200 !202 !203 !250)
!347 = (!199 !200 !202 !203)
!348 = (!199 !200 !253)
!349 = (!199 !200)
!350 = (!199 !200 !253)
!351 = (!176 !177 !266 !267 !269)
!352 = span !201 3077 3081
!353 = span !201 3069 3167
!354 = fn_name_span !201 3072 3076
!355 = (!353 !354)
!356 = (!202 !203 !204 !205 !206 !207 !208 !209 !85)
!357 = (!202 !203 !204 !205 !206 !207 !211)
!358 = (!202 !203 !204 !205 !206 !207)
!359 = (!202 !203 !204 !205 !206 !207 !211)
!360 = (!202 !203 !204 !205 !206 !207)
!361 = (!202 !203 !204 !205 !206 !207 !211)
!362 = (!202 !203 !204 !205 !206 !207)
!363 = (!202 !203 !204 !205 !218)
!364 = (!202 !203 !204 !205)
!365 = (!202 !203 !204 !205 !218)
!366 = (!202 !203 !204 !205)
!367 = (!202 !203 !204 !205 !218)
!368 = (!202 !203 !204 !205)
!369 = (!202 !203 !226)
!370 = (!202 !203 !226)
!371 = (!202 !203 !229)
!372 = (!202 !203 !229)
!373 = (!202 !203 !229)
!374 = (!202 !203 !234)
!375 = (!202 !203 !236)
!376 = (!202 !203 !238)
!377 = (!202 !203 !240)
!378 = (!202 !203)
!379 = (!202 !203 !244 !245 !247)
!380 = (!202 !203 !250)
!381 = span !75 28831 28832
!382 = span !75 28823 29132
!383 = fn_name_span !75 28826 28830
!384 = (!382 !383)
!385 = (!204 !205 !206 !207 !208 !209 !85)
!386 = (!204 !205 !206 !207 !211)
!387 = (!204 !205 !206 !207)
!388 = (!204 !205 !206 !207 !211)
!389 = (!204 !205 !206 !207)
!390 = (!204 !205 !206 !207 !211)
!391 = (!204 !205 !206 !207)
!392 = (!204 !205 !218)
!393 = (!204 !205)
!394 = (!204 !205 !218)
!395 = (!204 !205 !218)
!396 = (!244 !245 !247)
!397 = span !75 4100 4108
!398 = span !75 4079 4227
!399 = fn_name_span !75 4086 4099
!400 = (!398 !399)
!401 = (!206 !207 !208 !209 !85)
!402 = (!206 !207 !211)
!403 = (!206 !207)
!404 = (!206 !207 !211)
!405 = (!206 !207 !211)
!406 = span !75 806 814
!407 = span !75 785 928
!408 = fn_name_span !75 792 805
!409 = (!407 !408)
!410 = (!208 !209 !85)
!411 = span !246 5960 5964
!412 = span !246 5966 5969
!413 = span !246 5977 5982
!414 = span !246 5939 6083
!415 = fn_name_span !246 5946 5959
!416 = (!414 !415)
!417 = span !152 4952 4956
!418 = span !152 4938 5081
!419 = fn_name_span !152 4945 4951
!420 = (!418 !419)
!421 = (!185 !186)
!422 = (!266 !267 !269)
!423 = span !143 16751 16755
!424 = span !143 16757 16762
!425 = span !143 16745 16811
!426 = fn_name_span !143 16748 16750
!427 = (!425 !426)
!428 = span !268 735 739
!429 = span !268 721 773
!430 = fn_name_span !268 728 734
!431 = (!429 !430)
!432 = span !133 1538 1542
!433 = span !133 1526 1716
!434 = fn_name_span !133 1529 1537
!435 = (!433 !434)
!436 = (!137 !138)
!437 = (!141 !142 !144 !145)
!438 = (!141 !142 !148 !149)
!439 = (!167 !168)
!440 = span !143 15477 15481
!441 = span !143 15483 15488
!442 = span !143 15470 15542
!443 = fn_name_span !143 15473 15476
!444 = (!442 !443)
!445 = (!144 !145)
!446 = (!148 !149)
!447 = span !143 12498 12502
!448 = span !143 12491 12545
!449 = fn_name_span !143 12494 12497
!450 = (!448 !449)
!451 = span !75 13782 13786
!452 = span !75 13771 13819
!453 = fn_name_span !75 13778 13781
!454 = (!452 !453)
!455 = span !75 2506 2514
!456 = span !75 15186 15190
!457 = span !75 15175 15233
!458 = fn_name_span !75 15182 15185
!459 = (!457 !458)
!460 = span !75 15213 15227
!461 = fn_call_path_span !75 15222 15225
!462 = (!460 !461)
!463 = span !75 989 993
!464 = span !75 978 1030
!465 = fn_name_span !75 985 988
!466 = (!464 !465)
!467 = span !278 2340 2344
!468 = span !278 2332 2389
!469 = fn_name_span !278 2335 2339
!470 = (!468 !469)
!471 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!472 = span !471 9026 9027
!473 = span !471 9009 9138
!474 = fn_name_span !471 9016 9022
!475 = (!473 !474 !111)
!476 = span !471 9082 9095
!477 = fn_call_path_span !471 9082 9093
!478 = (!476 !477)
!479 = span !471 9065 9096
!480 = span !471 9108 9114
!481 = span !471 9101 9115
!482 = fn_call_path_span !471 9103 9107
!483 = (!481 !482)
!484 = span !201 524 536
!485 = (!481 !482 !484)
!486 = span !201 5123 5146
!487 = fn_call_path_span !201 5129 5134
!488 = span !471 142 154
!489 = (!481 !482 !486 !487 !488)
!490 = (!481 !482 !486 !487)
!491 = (!481 !482 !486 !487)
!492 = span !471 365 389
!493 = fn_call_path_span !471 376 382
!494 = (!481 !482 !486 !487 !492 !493)
!495 = span !75 18398 18409
!496 = fn_call_path_span !75 18404 18407
!497 = (!481 !482 !486 !487 !492 !493 !495 !496)
!498 = span !75 18382 18410
!499 = (!481 !482 !486 !487 !492 !493 !498)
!500 = span !75 18422 18431
!501 = (!481 !482 !486 !487 !492 !493 !500)
!502 = span !75 18435 18436
!503 = span !75 18422 18436
!504 = fn_call_path_span !75 18432 18434
!505 = (!481 !482 !486 !487 !492 !493 !503 !504)
!506 = span !75 18451 18457
!507 = (!481 !482 !486 !487 !492 !493 !503)
!508 = (!481 !482 !486 !487 !492 !493 !455)
!509 = (!481 !482 !486 !487 !492 !493)
!510 = span !75 18572 18573
!511 = span !75 18560 18573
!512 = fn_call_path_span !75 18569 18571
!513 = (!481 !482 !486 !487 !492 !493 !511 !512)
!514 = (!481 !482 !486 !487 !492 !493 !511)
!515 = (!481 !482 !486 !487 !492 !493)
!516 = span !75 18588 18600
!517 = (!481 !482 !486 !487 !492 !493 !516)
!518 = span !75 18614 18620
!519 = (!481 !482 !486 !487 !492 !493 !518)
!520 = (!481 !482 !486 !487 !492 !493 !455)
!521 = (!481 !482 !486 !487 !492 !493)
!522 = span !75 18668 18677
!523 = (!481 !482 !486 !487 !492 !493 !522)
!524 = span !75 18657 18677
!525 = fn_call_path_span !75 18666 18667
!526 = (!481 !482 !486 !487 !492 !493 !524 !525)
!527 = span !75 18642 18678
!528 = (!481 !482 !486 !487 !492 !493 !527)
!529 = (!481 !482 !486 !487 !492 !493 !455)
!530 = (!481 !482 !486 !487 !492 !493)
!531 = span !75 18687 18714
!532 = (!481 !482 !486 !487 !492 !493 !531)
!533 = (!481 !482 !486 !487 !492 !493 !238)
!534 = (!481 !482 !486 !487 !492 !493)
!535 = span !75 18808 18827
!536 = fn_call_path_span !75 18817 18825
!537 = (!481 !482 !486 !487 !492 !493 !535 !536)
!538 = span !75 18830 18838
!539 = (!481 !482 !486 !487 !492 !493 !538)
!540 = span !75 18808 18838
!541 = fn_call_path_span !75 18828 18829
!542 = (!481 !482 !486 !487 !492 !493 !540 !541)
!543 = (!481 !482 !486 !487 !492 !493 !540)
!544 = (!481 !482 !486 !487 !492 !493 !238)
!545 = (!481 !482 !486 !487 !492 !493)
!546 = span !75 18928 18942
!547 = fn_call_path_span !75 18937 18940
!548 = (!481 !482 !486 !487 !492 !493 !546 !547)
!549 = (!481 !482 !486 !487 !492 !493 !238)
!550 = (!481 !482 !486 !487 !492 !493)
!551 = span !75 18944 18963
!552 = fn_call_path_span !75 18953 18961
!553 = (!481 !482 !486 !487 !492 !493 !551 !552)
!554 = span !75 18965 18973
!555 = (!481 !482 !486 !487 !492 !493 !554)
!556 = span !75 18914 18974
!557 = fn_call_path_span !75 18914 18927
!558 = span !84 4168 4185
!559 = fn_call_path_span !84 4178 4179
!560 = (!481 !482 !486 !487 !492 !493 !556 !557 !558 !559)
!561 = (!481 !482 !486 !487 !492 !493 !556 !557 !558)
!562 = span !84 4210 4232
!563 = fn_call_path_span !84 4210 4221
!564 = (!481 !482 !486 !487 !492 !493 !556 !557 !562 !563 !85)
!565 = span !84 4196 4233
!566 = (!481 !482 !486 !487 !492 !493 !556 !557 !565)
!567 = span !84 4253 4254
!568 = span !84 4245 4254
!569 = fn_call_path_span !84 4251 4252
!570 = (!481 !482 !486 !487 !492 !493 !556 !557 !568 !569)
!571 = (!481 !482 !486 !487 !492 !493 !556 !557 !568)
!572 = span !84 4287 4294
!573 = (!481 !482 !486 !487 !492 !493 !556 !557 !572)
!574 = span !84 4269 4302
!575 = fn_call_path_span !84 4273 4286
!576 = (!481 !482 !486 !487 !492 !493 !556 !557 !574 !575 !247)
!577 = (!481 !482 !486 !487 !492 !493 !556 !557)
!578 = span !84 4322 4329
!579 = (!481 !482 !486 !487 !492 !493 !556 !557 !578)
!580 = (!481 !482 !486 !487 !492 !493 !556 !557)
!581 = span !75 18992 19000
!582 = (!481 !482 !486 !487 !492 !493 !581)
!583 = span !75 18869 19015
!584 = fn_call_path_span !75 18869 18890
!585 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!586 = span !585 2368 2392
!587 = fn_call_path_span !585 2374 2375
!588 = (!481 !482 !486 !487 !492 !493 !583 !584 !586 !587)
!589 = span !585 2362 2393
!590 = (!481 !482 !486 !487 !492 !493 !583 !584 !589)
!591 = (!481 !482 !486 !487 !492 !493 !583 !584 !589)
!592 = (!481 !482 !486 !487 !492 !493 !583 !584 !589)
!593 = (!481 !482 !486 !487 !492 !493 !583 !584 !589)
!594 = (!481 !482 !486 !487 !492 !493 !583 !584 !589)
!595 = (!481 !482 !486 !487 !492 !493 !583 !584)
!596 = span !585 2351 2394
!597 = fn_call_path_span !585 2351 2361
!598 = span !585 1248 1294
!599 = (!481 !482 !486 !487 !492 !493 !583 !584 !596 !597 !598)
!600 = span !75 18853 19016
!601 = (!481 !482 !486 !487 !492 !493 !600)
!602 = (!481 !482 !486 !487 !492 !493 !600)
!603 = span !75 19055 19064
!604 = (!481 !482 !486 !487 !492 !493 !603)
!605 = (!481 !482 !486 !487 !492 !493)
!606 = span !75 19040 19065
!607 = fn_call_path_span !75 19040 19054
!608 = span !75 2130 2153
!609 = fn_call_path_span !75 2136 2151
!610 = span !585 3959 3975
!611 = fn_call_path_span !585 3959 3969
!612 = span !585 1624 1675
!613 = (!481 !482 !486 !487 !492 !493 !606 !607 !608 !609 !610 !611 !612)
!614 = (!481 !482 !486 !487 !492 !493 !606 !607 !608 !609)
!615 = (!481 !482 !486 !487 !492 !493 !606 !607 !608 !609)
!616 = span !585 3976 3977
!617 = (!481 !482 !486 !487 !492 !493 !606 !607 !608 !609 !616)
!618 = (!481 !482 !486 !487 !492 !493 !606 !607 !608 !609)
!619 = span !75 2120 2154
!620 = (!481 !482 !486 !487 !492 !493 !606 !607 !619)
!621 = span !75 2185 2188
!622 = (!481 !482 !486 !487 !492 !493 !606 !607 !621)
!623 = span !75 2173 2189
!624 = fn_call_path_span !75 2173 2184
!625 = (!481 !482 !486 !487 !492 !493 !606 !607 !623 !624 !85)
!626 = span !75 2163 2190
!627 = (!481 !482 !486 !487 !492 !493 !606 !607 !626)
!628 = span !75 2202 2205
!629 = (!481 !482 !486 !487 !492 !493 !606 !607 !628)
!630 = span !75 2208 2209
!631 = span !75 2202 2209
!632 = fn_call_path_span !75 2206 2207
!633 = (!481 !482 !486 !487 !492 !493 !606 !607 !631 !632)
!634 = (!481 !482 !486 !487 !492 !493 !606 !607 !631)
!635 = span !75 2224 2235
!636 = fn_call_path_span !75 2230 2233
!637 = span !585 2911 2927
!638 = fn_call_path_span !585 2911 2921
!639 = (!481 !482 !486 !487 !492 !493 !606 !607 !635 !636 !637 !638 !612)
!640 = (!481 !482 !486 !487 !492 !493 !606 !607 !635 !636)
!641 = (!481 !482 !486 !487 !492 !493 !606 !607 !635 !636)
!642 = span !585 2928 2929
!643 = (!481 !482 !486 !487 !492 !493 !606 !607 !635 !636 !642)
!644 = (!481 !482 !486 !487 !492 !493 !606 !607 !635 !636)
!645 = span !75 2250 2253
!646 = (!481 !482 !486 !487 !492 !493 !606 !607 !645)
!647 = span !75 2255 2258
!648 = (!481 !482 !486 !487 !492 !493 !606 !607 !647)
!649 = span !75 2224 2259
!650 = fn_call_path_span !75 2236 2243
!651 = span !246 3413 3437
!652 = fn_call_path_span !246 3419 3420
!653 = (!481 !482 !486 !487 !492 !493 !606 !607 !649 !650 !651 !652)
!654 = span !246 3403 3438
!655 = (!481 !482 !486 !487 !492 !493 !606 !607 !649 !650 !654)
!656 = span !246 3477 3480
!657 = (!481 !482 !486 !487 !492 !493 !606 !607 !649 !650 !656)
!658 = span !246 3447 3522
!659 = (!481 !482 !486 !487 !492 !493 !606 !607 !649 !650 !658)
!660 = span !246 3496 3511
!661 = (!481 !482 !486 !487 !492 !493 !606 !607)
!662 = span !75 2286 2289
!663 = (!481 !482 !486 !487 !492 !493 !606 !607 !662)
!664 = span !75 2291 2294
!665 = (!481 !482 !486 !487 !492 !493 !606 !607 !664)
!666 = span !75 2279 2296
!667 = (!481 !482 !486 !487 !492 !493 !606 !607 !666)
!668 = (!481 !482 !486 !487 !492 !493 !606 !607)
!669 = (!481 !482 !486 !487 !492 !493 !606 !607 !666)
!670 = (!481 !482 !486 !487 !492 !493 !606 !607)
!671 = (!481 !482 !486 !487 !492 !493 !606 !607 !666)
!672 = (!481 !482 !486 !487 !492 !493 !606 !607)
!673 = span !75 19029 19065
!674 = (!481 !482 !486 !487 !492 !493 !673)
!675 = (!481 !482 !486 !487 !492 !493 !673)
!676 = (!481 !482 !486 !487 !492 !493)
!677 = (!481 !482 !486 !487 !492 !493 !238)
!678 = (!481 !482 !486 !487 !492 !493)
!679 = span !75 19100 19114
!680 = fn_call_path_span !75 19109 19112
!681 = (!481 !482 !486 !487 !492 !493 !679 !680)
!682 = span !75 19131 19142
!683 = (!481 !482 !486 !487 !492 !493 !682)
!684 = span !75 19100 19143
!685 = fn_call_path_span !75 19115 19130
!686 = span !246 6721 6825
!687 = (!481 !482 !486 !487 !492 !493 !684 !685 !686)
!688 = span !246 6771 6789
!689 = span !75 19086 19144
!690 = (!481 !482 !486 !487 !492 !493 !689)
!691 = (!481 !482 !486 !487 !492 !493)
!692 = span !75 19153 19164
!693 = fn_call_path_span !75 19159 19162
!694 = (!481 !482 !486 !487 !492 !493 !692 !693)
!695 = span !75 19179 19186
!696 = (!481 !482 !486 !487 !492 !493 !695)
!697 = span !75 19188 19197
!698 = (!481 !482 !486 !487 !492 !493 !697)
!699 = span !75 19153 19198
!700 = fn_call_path_span !75 19165 19178
!701 = (!481 !482 !486 !487 !492 !493 !699 !700 !247)
!702 = span !75 19255 19263
!703 = (!481 !482 !486 !487 !492 !493 !702)
!704 = span !75 19244 19263
!705 = (!481 !482 !486 !487 !492 !493 !704)
!706 = (!481 !482 !486 !487 !492 !493 !704)
!707 = (!481 !482 !486 !487 !492 !493)
!708 = span !471 9121 9127
!709 = span !471 9121 9136
!710 = fn_call_path_span !471 9128 9134
!711 = span !471 440 476
!712 = (!709 !710 !711)
!713 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!714 = span !713 7904 7970
!715 = (!709 !710 !711)
!716 = span !471 508 521
!717 = (!709 !710 !716)
!718 = (!709 !710)
!719 = (!709 !710 !488)
!720 = span !471 540 556
!721 = fn_call_path_span !471 551 554
!722 = (!709 !710 !720 !721)
!723 = (!709 !710 !488)
!724 = span !471 577 593
!725 = fn_call_path_span !471 588 591
!726 = (!709 !710 !724 !725)
!727 = span !471 485 672
!728 = (!709 !710 !727)
!729 = span !471 619 638
!730 = span !471 177 263
!731 = fn_name_span !471 184 187
!732 = (!730 !731)
!733 = span !471 234 246
!734 = fn_call_path_span !471 234 244
!735 = (!733 !734 !80 !81 !82 !83 !85)
!736 = (!733 !734 !80 !81 !88)
!737 = (!733 !734 !80 !81)
!738 = (!733 !734 !80 !81 !88)
!739 = (!733 !734 !80 !81)
!740 = (!733 !734 !80 !81 !88)
!741 = (!733 !734 !80 !81)
!742 = (!733 !734 !94)
!743 = (!733 !734)
!744 = (!733 !734 !94)
!745 = (!733 !734 !94)
!746 = span !471 208 257
!747 = span !201 5084 5088
!748 = span !201 5098 5103
!749 = span !201 5076 5153
!750 = fn_name_span !201 5079 5083
!751 = (!749 !750)
!752 = (!486 !487 !488)
!753 = (!486 !487)
!754 = (!486 !487 !492 !493)
!755 = (!486 !487 !492 !493 !495 !496)
!756 = (!486 !487 !492 !493 !498)
!757 = (!486 !487 !492 !493 !500)
!758 = (!486 !487 !492 !493 !503 !504)
!759 = (!486 !487 !492 !493 !503)
!760 = (!486 !487 !492 !493 !455)
!761 = (!486 !487 !492 !493)
!762 = (!486 !487 !492 !493 !511 !512)
!763 = (!486 !487 !492 !493 !511)
!764 = (!486 !487 !492 !493)
!765 = (!486 !487 !492 !493 !516)
!766 = (!486 !487 !492 !493 !518)
!767 = (!486 !487 !492 !493 !455)
!768 = (!486 !487 !492 !493)
!769 = (!486 !487 !492 !493 !522)
!770 = (!486 !487 !492 !493 !524 !525)
!771 = (!486 !487 !492 !493 !527)
!772 = (!486 !487 !492 !493 !455)
!773 = (!486 !487 !492 !493)
!774 = (!486 !487 !492 !493 !531)
!775 = (!486 !487 !492 !493 !238)
!776 = (!486 !487 !492 !493)
!777 = (!486 !487 !492 !493 !535 !536)
!778 = (!486 !487 !492 !493 !538)
!779 = (!486 !487 !492 !493 !540 !541)
!780 = (!486 !487 !492 !493 !540)
!781 = (!486 !487 !492 !493 !238)
!782 = (!486 !487 !492 !493)
!783 = (!486 !487 !492 !493 !546 !547)
!784 = (!486 !487 !492 !493 !238)
!785 = (!486 !487 !492 !493)
!786 = (!486 !487 !492 !493 !551 !552)
!787 = (!486 !487 !492 !493 !554)
!788 = (!486 !487 !492 !493 !556 !557 !558 !559)
!789 = (!486 !487 !492 !493 !556 !557 !558)
!790 = (!486 !487 !492 !493 !556 !557 !562 !563 !85)
!791 = (!486 !487 !492 !493 !556 !557 !565)
!792 = (!486 !487 !492 !493 !556 !557 !568 !569)
!793 = (!486 !487 !492 !493 !556 !557 !568)
!794 = (!486 !487 !492 !493 !556 !557 !572)
!795 = (!486 !487 !492 !493 !556 !557 !574 !575 !247)
!796 = (!486 !487 !492 !493 !556 !557)
!797 = (!486 !487 !492 !493 !556 !557 !578)
!798 = (!486 !487 !492 !493 !556 !557)
!799 = (!486 !487 !492 !493 !581)
!800 = (!486 !487 !492 !493 !583 !584 !586 !587)
!801 = (!486 !487 !492 !493 !583 !584 !589)
!802 = (!486 !487 !492 !493 !583 !584 !589)
!803 = (!486 !487 !492 !493 !583 !584 !589)
!804 = (!486 !487 !492 !493 !583 !584 !589)
!805 = (!486 !487 !492 !493 !583 !584 !589)
!806 = (!486 !487 !492 !493 !583 !584)
!807 = (!486 !487 !492 !493 !583 !584 !596 !597 !598)
!808 = (!486 !487 !492 !493 !600)
!809 = (!486 !487 !492 !493 !600)
!810 = (!486 !487 !492 !493 !603)
!811 = (!486 !487 !492 !493)
!812 = (!486 !487 !492 !493 !606 !607 !608 !609 !610 !611 !612)
!813 = (!486 !487 !492 !493 !606 !607 !608 !609)
!814 = (!486 !487 !492 !493 !606 !607 !608 !609)
!815 = (!486 !487 !492 !493 !606 !607 !608 !609 !616)
!816 = (!486 !487 !492 !493 !606 !607 !608 !609)
!817 = (!486 !487 !492 !493 !606 !607 !619)
!818 = (!486 !487 !492 !493 !606 !607 !621)
!819 = (!486 !487 !492 !493 !606 !607 !623 !624 !85)
!820 = (!486 !487 !492 !493 !606 !607 !626)
!821 = (!486 !487 !492 !493 !606 !607 !628)
!822 = (!486 !487 !492 !493 !606 !607 !631 !632)
!823 = (!486 !487 !492 !493 !606 !607 !631)
!824 = (!486 !487 !492 !493 !606 !607 !635 !636 !637 !638 !612)
!825 = (!486 !487 !492 !493 !606 !607 !635 !636)
!826 = (!486 !487 !492 !493 !606 !607 !635 !636)
!827 = (!486 !487 !492 !493 !606 !607 !635 !636 !642)
!828 = (!486 !487 !492 !493 !606 !607 !635 !636)
!829 = (!486 !487 !492 !493 !606 !607 !645)
!830 = (!486 !487 !492 !493 !606 !607 !647)
!831 = (!486 !487 !492 !493 !606 !607 !649 !650 !651 !652)
!832 = (!486 !487 !492 !493 !606 !607 !649 !650 !654)
!833 = (!486 !487 !492 !493 !606 !607 !649 !650 !656)
!834 = (!486 !487 !492 !493 !606 !607 !649 !650 !658)
!835 = (!486 !487 !492 !493 !606 !607)
!836 = (!486 !487 !492 !493 !606 !607 !662)
!837 = (!486 !487 !492 !493 !606 !607 !664)
!838 = (!486 !487 !492 !493 !606 !607 !666)
!839 = (!486 !487 !492 !493 !606 !607)
!840 = (!486 !487 !492 !493 !606 !607 !666)
!841 = (!486 !487 !492 !493 !606 !607)
!842 = (!486 !487 !492 !493 !606 !607 !666)
!843 = (!486 !487 !492 !493 !606 !607)
!844 = (!486 !487 !492 !493 !673)
!845 = (!486 !487 !492 !493 !673)
!846 = (!486 !487 !492 !493)
!847 = (!486 !487 !492 !493 !238)
!848 = (!486 !487 !492 !493)
!849 = (!486 !487 !492 !493 !679 !680)
!850 = (!486 !487 !492 !493 !682)
!851 = (!486 !487 !492 !493 !684 !685 !686)
!852 = (!486 !487 !492 !493 !689)
!853 = (!486 !487 !492 !493)
!854 = (!486 !487 !492 !493 !692 !693)
!855 = (!486 !487 !492 !493 !695)
!856 = (!486 !487 !492 !493 !697)
!857 = (!486 !487 !492 !493 !699 !700 !247)
!858 = (!486 !487 !492 !493 !702)
!859 = (!486 !487 !492 !493 !704)
!860 = (!486 !487 !492 !493 !704)
!861 = (!486 !487 !492 !493)
!862 = span !471 335 339
!863 = span !471 341 346
!864 = span !471 314 396
!865 = fn_name_span !471 321 326
!866 = (!864 !865)
!867 = (!492 !493)
!868 = (!492 !493 !495 !496)
!869 = (!492 !493 !498)
!870 = (!492 !493 !500)
!871 = (!492 !493 !503 !504)
!872 = (!492 !493 !503)
!873 = (!492 !493 !455)
!874 = (!492 !493 !511 !512)
!875 = (!492 !493 !511)
!876 = (!492 !493 !516)
!877 = (!492 !493 !518)
!878 = (!492 !493 !455)
!879 = (!492 !493 !522)
!880 = (!492 !493 !524 !525)
!881 = (!492 !493 !527)
!882 = (!492 !493 !455)
!883 = (!492 !493 !531)
!884 = (!492 !493 !238)
!885 = (!492 !493 !535 !536)
!886 = (!492 !493 !538)
!887 = (!492 !493 !540 !541)
!888 = (!492 !493 !540)
!889 = (!492 !493 !238)
!890 = (!492 !493 !546 !547)
!891 = (!492 !493 !238)
!892 = (!492 !493 !551 !552)
!893 = (!492 !493 !554)
!894 = (!492 !493 !556 !557 !558 !559)
!895 = (!492 !493 !556 !557 !558)
!896 = (!492 !493 !556 !557 !562 !563 !85)
!897 = (!492 !493 !556 !557 !565)
!898 = (!492 !493 !556 !557 !568 !569)
!899 = (!492 !493 !556 !557 !568)
!900 = (!492 !493 !556 !557 !572)
!901 = (!492 !493 !556 !557 !574 !575 !247)
!902 = (!492 !493 !556 !557)
!903 = (!492 !493 !556 !557 !578)
!904 = (!492 !493 !556 !557)
!905 = (!492 !493 !581)
!906 = (!492 !493 !583 !584 !586 !587)
!907 = (!492 !493 !583 !584 !589)
!908 = (!492 !493 !583 !584 !589)
!909 = (!492 !493 !583 !584 !589)
!910 = (!492 !493 !583 !584 !589)
!911 = (!492 !493 !583 !584 !589)
!912 = (!492 !493 !583 !584)
!913 = (!492 !493 !583 !584 !596 !597 !598)
!914 = (!492 !493 !600)
!915 = (!492 !493 !600)
!916 = (!492 !493 !603)
!917 = (!492 !493 !606 !607 !608 !609 !610 !611 !612)
!918 = (!492 !493 !606 !607 !608 !609)
!919 = (!492 !493 !606 !607 !608 !609)
!920 = (!492 !493 !606 !607 !608 !609 !616)
!921 = (!492 !493 !606 !607 !608 !609)
!922 = (!492 !493 !606 !607 !619)
!923 = (!492 !493 !606 !607 !621)
!924 = (!492 !493 !606 !607 !623 !624 !85)
!925 = (!492 !493 !606 !607 !626)
!926 = (!492 !493 !606 !607 !628)
!927 = (!492 !493 !606 !607 !631 !632)
!928 = (!492 !493 !606 !607 !631)
!929 = (!492 !493 !606 !607 !635 !636 !637 !638 !612)
!930 = (!492 !493 !606 !607 !635 !636)
!931 = (!492 !493 !606 !607 !635 !636)
!932 = (!492 !493 !606 !607 !635 !636 !642)
!933 = (!492 !493 !606 !607 !635 !636)
!934 = (!492 !493 !606 !607 !645)
!935 = (!492 !493 !606 !607 !647)
!936 = (!492 !493 !606 !607 !649 !650 !651 !652)
!937 = (!492 !493 !606 !607 !649 !650 !654)
!938 = (!492 !493 !606 !607 !649 !650 !656)
!939 = (!492 !493 !606 !607 !649 !650 !658)
!940 = (!492 !493 !606 !607)
!941 = (!492 !493 !606 !607 !662)
!942 = (!492 !493 !606 !607 !664)
!943 = (!492 !493 !606 !607 !666)
!944 = (!492 !493 !606 !607)
!945 = (!492 !493 !606 !607 !666)
!946 = (!492 !493 !606 !607)
!947 = (!492 !493 !606 !607 !666)
!948 = (!492 !493 !606 !607)
!949 = (!492 !493 !673)
!950 = (!492 !493 !673)
!951 = (!492 !493 !238)
!952 = (!492 !493 !679 !680)
!953 = (!492 !493 !682)
!954 = (!492 !493 !684 !685 !686)
!955 = (!492 !493 !689)
!956 = (!492 !493 !692 !693)
!957 = (!492 !493 !695)
!958 = (!492 !493 !697)
!959 = (!492 !493 !699 !700 !247)
!960 = (!492 !493 !702)
!961 = (!492 !493 !704)
!962 = (!492 !493 !704)
!963 = span !75 18345 18349
!964 = span !75 18359 18364
!965 = span !75 18323 19270
!966 = fn_name_span !75 18330 18336
!967 = (!965 !966)
!968 = (!495 !496)
!969 = (!503 !504)
!970 = (!511 !512)
!971 = (!524 !525)
!972 = (!535 !536)
!973 = (!540 !541)
!974 = (!546 !547)
!975 = (!551 !552)
!976 = (!556 !557 !558 !559)
!977 = (!556 !557 !558)
!978 = (!556 !557 !562 !563 !85)
!979 = (!556 !557 !565)
!980 = (!556 !557 !568 !569)
!981 = (!556 !557 !568)
!982 = (!556 !557 !572)
!983 = (!556 !557 !574 !575 !247)
!984 = (!556 !557)
!985 = (!556 !557 !578)
!986 = (!583 !584 !586 !587)
!987 = (!583 !584 !589)
!988 = (!583 !584 !589)
!989 = (!583 !584 !589)
!990 = (!583 !584 !589)
!991 = (!583 !584 !589)
!992 = (!583 !584)
!993 = (!583 !584 !596 !597 !598)
!994 = (!606 !607 !608 !609 !610 !611 !612)
!995 = (!606 !607 !608 !609)
!996 = (!606 !607 !608 !609)
!997 = (!606 !607 !608 !609 !616)
!998 = (!606 !607 !608 !609)
!999 = (!606 !607 !619)
!1000 = (!606 !607 !621)
!1001 = (!606 !607 !623 !624 !85)
!1002 = (!606 !607 !626)
!1003 = (!606 !607 !628)
!1004 = (!606 !607 !631 !632)
!1005 = (!606 !607 !631)
!1006 = (!606 !607 !635 !636 !637 !638 !612)
!1007 = (!606 !607 !635 !636)
!1008 = (!606 !607 !635 !636)
!1009 = (!606 !607 !635 !636 !642)
!1010 = (!606 !607 !635 !636)
!1011 = (!606 !607 !645)
!1012 = (!606 !607 !647)
!1013 = (!606 !607 !649 !650 !651 !652)
!1014 = (!606 !607 !649 !650 !654)
!1015 = (!606 !607 !649 !650 !656)
!1016 = (!606 !607 !649 !650 !658)
!1017 = (!606 !607)
!1018 = (!606 !607 !662)
!1019 = (!606 !607 !664)
!1020 = (!606 !607 !666)
!1021 = (!606 !607 !666)
!1022 = (!606 !607 !666)
!1023 = (!679 !680)
!1024 = (!684 !685 !686)
!1025 = (!692 !693)
!1026 = (!699 !700 !247)
!1027 = span !143 1239 1243
!1028 = span !143 1245 1250
!1029 = span !143 1232 1300
!1030 = fn_name_span !143 1235 1238
!1031 = (!1029 !1030)
!1032 = span !143 20651 20655
!1033 = span !143 20657 20662
!1034 = span !143 20645 20711
!1035 = fn_name_span !143 20648 20650
!1036 = (!1034 !1035)
!1037 = span !75 1097 1101
!1038 = span !75 1081 1134
!1039 = fn_name_span !75 1088 1096
!1040 = (!1038 !1039)
!1041 = span !75 418 426
!1042 = span !585 2307 2310
!1043 = span !585 2321 2326
!1044 = span !585 2286 2400
!1045 = fn_name_span !585 2293 2303
!1046 = (!1044 !1045)
!1047 = (!586 !587)
!1048 = (!596 !597 !598)
!1049 = span !585 1206 1211
!1050 = span !585 1192 1296
!1051 = fn_name_span !585 1195 1205
!1052 = (!1050 !1051)
!1053 = span !143 6993 6997
!1054 = span !143 6999 7004
!1055 = span !143 6981 7054
!1056 = fn_name_span !143 6984 6992
!1057 = (!1055 !1056)
!1058 = span !84 4106 4109
!1059 = span !84 4120 4125
!1060 = span !84 4132 4141
!1061 = span !84 4085 4362
!1062 = fn_name_span !84 4092 4105
!1063 = (!1061 !1062)
!1064 = (!558 !559)
!1065 = (!562 !563 !85)
!1066 = (!568 !569)
!1067 = (!574 !575 !247)
!1068 = span !143 20580 20584
!1069 = span !143 20586 20591
!1070 = span !143 20574 20640
!1071 = fn_name_span !143 20577 20579
!1072 = (!1070 !1071)
!1073 = span !75 2084 2089
!1074 = span !75 2076 2302
!1075 = fn_name_span !75 2079 2083
!1076 = (!1074 !1075)
!1077 = (!608 !609 !610 !611 !612)
!1078 = (!608 !609)
!1079 = (!608 !609 !616)
!1080 = (!623 !624 !85)
!1081 = (!631 !632)
!1082 = (!635 !636 !637 !638 !612)
!1083 = (!635 !636)
!1084 = (!635 !636 !642)
!1085 = (!649 !650 !651 !652)
!1086 = (!649 !650 !654)
!1087 = (!649 !650 !656)
!1088 = (!649 !650 !658)
!1089 = span !585 3936 3940
!1090 = span !585 3913 3983
!1091 = fn_name_span !585 3920 3935
!1092 = (!1090 !1091)
!1093 = (!610 !611 !612)
!1094 = span !585 1582 1587
!1095 = span !585 1568 1677
!1096 = fn_name_span !585 1571 1581
!1097 = (!1095 !1096)
!1098 = span !246 3364 3368
!1099 = span !246 3370 3373
!1100 = span !246 3381 3386
!1101 = span !246 3346 3529
!1102 = fn_name_span !246 3353 3360
!1103 = (!1101 !1102)
!1104 = (!651 !652)
!1105 = span !585 2884 2888
!1106 = span !585 2873 2935
!1107 = fn_name_span !585 2880 2883
!1108 = (!1106 !1107)
!1109 = (!637 !638 !612)
!1110 = span !246 6684 6688
!1111 = span !246 6690 6696
!1112 = span !246 6661 6831
!1113 = fn_name_span !246 6668 6683
!1114 = (!1112 !1113)
!1115 = span !471 416 420
!1116 = span !471 402 678
!1117 = fn_name_span !471 409 415
!1118 = (!1116 !1117)
!1119 = (!720 !721)
!1120 = (!724 !725)
!1121 = span !713 7873 7976
!1122 = fn_name_span !713 7880 7883
!1123 = (!1121 !1122)

// IR: [globals-dce] Dead globals (functions and variables) elimination
script {
    entry fn main() -> (), !3 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr bool, _, !42
        v23 = get_local ptr { [u8; 64] }, secp256k1, !44
        v24 = load v23, !35
        v25 = get_local ptr { { { u64, u64 }, u64 } }, message, !46
        v26 = load v25, !35
        v27 = call address_7(v24, v26), !49
        v28 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !51
        store v27 to v28, !52
        v29 = get_local ptr { [u8; 64] }, secp256k1, !54
        v30 = load v29, !35
        v31 = get_local ptr { { { u64, u64 }, u64 } }, message, !56
        v32 = load v31, !35
        v33 = call address_7(v30, v32), !59
        v34 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !61
        store v33 to v34, !62
        v35 = const unit ()
        ret () v35
    }

    pub fn eq_6(self !63: { [u8; 64] }, other !64: { [u8; 64] }) -> bool, !68 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !69
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !69
        v8 = const u64 64, !70
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !71 {
            meq    result r2 r3 r4, !72
        }
        ret bool v9
    }

    pub fn address_7(self !73: { [u8; 64] }, message !74: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !77 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !82
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !83
        v3 = const u64 0, !81
        store v3 to v2, !84
        v4 = ptr_to_int message to u64, !87
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !88
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !91
        v8 = load v7, !92
        v9 = call len_20(v8), !95
        v10 = const u64 32, !96
        v11 = cmp eq v9 v10, !102
        v12 = const bool false, !103
        v13 = cmp eq v11 v12, !106
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !107

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !110
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !111
        v17 = const u64 0, !109
        store v17 to v16, !112
        v18 = load v14, !113
        br recover_8_block0(v18), !115

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !116
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !117
        v22 = const u64 1, !109
        store v22 to v21, !118
        v23 = ptr_to_int message to u64, !119
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !120
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !121
        v27 = load v26, !122
        v28 = call ptr_21(v27), !125
        v29 = asm(bits: v28) -> b256 bits, !127 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !128
        store v29 to v32, !129
        v33 = load v19, !130
        br recover_8_block0(v33), !131

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !135
        store v34 to v35, !136
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !138
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !139
        v39 = load v38, !140
        v40 = const u64 1, !137
        v41 = cmp eq v39 v40, !143
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !144

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !145
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !146
        v46 = load v45, !147
        v47 = get_local ptr b256, inner_value, !149
        store v46 to v47, !150
        v48 = get_local ptr b256, inner_value, !152
        v49 = load v48, !153
        v50 = const u64 32, !155
        v51 = asm(size: v50) -> u64 hp, !169 {
            aloc   size, !170
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !172
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !173
        store v51 to v54, !174
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !175
        store v50 to v56, !176
        v57 = load v52, !177
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !179
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !180
        store v57 to v60, !181
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !182
        v63 = const u64 0, !183
        store v63 to v62, !184
        v64 = load v58, !185
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !187
        store v64 to v65, !188
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !190
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !191
        v69 = const u64 32, !192
        store v69 to v68, !193
        v70 = ptr_to_int v49 to u64, !195
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !197
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !199
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !201
        v76 = load v75, !202
        v77 = const u64 32, !203
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !208 {
            mcp    dst src len, !209
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !211
        v80 = load v79, !212
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !214
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !215
        store v80 to v83, !216
        v84 = load v81, !217
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !218
        store v84 to v87, !219
        v88 = load v0, !220
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !221
        store v88 to v89, !221
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !78
        v93 = load v92
        v94 = const u64 0, !78
        v95 = cmp eq v93 v94, !224
        cbr v95, block0(), block1(), !222

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !225
        revert v96, !230

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !231
        store v101 to v102, !231
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !81
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !81
        v106 = const u64 0, !81
        store v106 to v105, !81
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !232
        v108 = load v107
        v109 = call sha256_24(v108), !235
        v110 = get_local ptr { b256 }, __anon_02, !240
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !241
        store v109 to v112, !242
        v113 = load v110, !241
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !81
        store v113 to v116, !81
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !78
        v121 = load v120
        v122 = const u64 1, !78
        v123 = cmp eq v121 v122, !245
        cbr v123, block2(), block3(), !243

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !246
        store v128 to v129, !246
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !81
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !81
        v133 = const u64 1, !81
        store v133 to v132, !81
        v134 = get_local ptr { u64 }, e, !247
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !81
        store v135 to v138, !81
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !221
        revert v140, !221

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !248: { { u64, u64 }, u64 }) -> u64, !251 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !252
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !253: { { u64, u64 }, u64 }) -> u64, !256 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !198
        v4 = load v3
        v5 = call ptr_22(v4), !259
        ret u64 v5
    }

    pub fn ptr_22(self !260: { u64, u64 }) -> u64, !263 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !200
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !265: { { { u64, u64 }, u64 } }) -> b256, !268 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local mut { { { u64, u64 }, u64 } } hasher
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !271
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !272
        store v0 to v1, !272
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !273
        v3 = ptr_to_int s to u64, !276
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !276
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !278
        v7 = load v6, !276
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !282
        v10 = ptr_to_int v7 to u64, !283
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !284
        v12 = load v11, !287
        v13 = call len_20(v12), !290
        v14 = get_local ptr u64, other_len, !292
        v15 = get_local ptr u64, other_len, !294
        v16 = const u64 0, !295
        v17 = cmp eq v13 v16, !298
        v18 = const unit (), !299
        cbr v17, hash_26_write_27_block0(v18), hash_26_write_27_append_28_block1(), !300

        hash_26_write_27_append_28_block1():
        v19 = const u64 1
        v20 = get_elem_ptr v9, ptr u64, v19, !301
        v21 = load v20, !302
        v22 = const u64 0, !303
        v23 = cmp eq v21 v22, !306
        cbr v23, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !307

        hash_26_write_27_append_28_block3():
        v24 = load v11, !308
        store v24 to v9, !310
        v25 = const unit (), !311
        br hash_26_write_27_block0(v25), !312

        hash_26_write_27_append_28_block4():
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !313
        v28 = load v27, !314
        v29 = get_local ptr u64, other_len, !316
        v30 = add v28, v13, !319
        v31 = get_local ptr u64, both_len, !321
        v32 = const u64 1
        v33 = get_elem_ptr v9, ptr u64, v32, !322
        v34 = load v33, !323
        v35 = get_local ptr u64, other_start, !325
        v36 = const u64 0
        v37 = get_elem_ptr v9, ptr { u64, u64 }, v36, !326
        v38 = load v37, !327
        v39 = call capacity_31(v38), !330
        v40 = get_local ptr u64, both_len, !332
        v41 = cmp lt v39 v30, !335
        v42 = const unit ()
        cbr v41, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(v42), !336

        hash_26_write_27_append_28_block6():
        v43 = const u64 0
        v44 = get_elem_ptr v9, ptr { u64, u64 }, v43, !337
        v45 = load v44, !338
        v46 = call ptr_22(v45), !341
        v47 = const u64 0
        v48 = get_elem_ptr v9, ptr { u64, u64 }, v47, !342
        v49 = load v48, !343
        v50 = call capacity_31(v49), !346
        v51 = get_local ptr u64, both_len, !348
        v52 = cmp gt v30 v50, !353
        cbr v52, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v46), !354

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v53 = asm(size: v30) -> u64 hp, !357 {
            aloc   size, !170
        }
        v54 = get_local ptr u64, new_ptr0, !359
        v55 = const u64 0, !360
        v56 = cmp gt v50 v55, !363
        v57 = const unit ()
        cbr v56, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(v57), !364

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v58 = get_local ptr u64, new_ptr0, !366
        v59 = asm(dst: v53, src: v46, len: v50) -> (), !369 {
            mcp    dst src len, !209
        }
        v60 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v60), !370

        hash_26_write_27_append_28_realloc_bytes_35_block3(v61: ()):
        v62 = get_local ptr u64, new_ptr0, !372
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v53), !373

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr u64, both_len, !375
        v65 = const u64 1
        v66 = mul v30, v65, !381
        v67 = get_local ptr { u64, u64 }, __anon_0, !383
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !384
        store v63 to v69, !385
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr u64, v70, !386
        store v66 to v71, !387
        v72 = load v67, !388
        v73 = asm(ptr: v72) -> slice ptr, !392 {
        }
        v74 = get_local ptr slice, new_slice, !394
        store v73 to v74, !395
        v75 = get_local ptr slice, new_slice, !397
        v76 = load v75, !398
        v77 = asm(ptr: v76) -> { u64, u64 } ptr, !406 {
        }
        v78 = get_local ptr { u64, u64 }, __anon_000, !407
        store v77 to v78, !408
        v79 = const u64 1
        v80 = get_elem_ptr v78, ptr u64, v79, !410
        v81 = load v80, !411
        v82 = get_local ptr u64, cap, !413
        v83 = get_local ptr u64, cap, !415
        v84 = asm(size: v81) -> u64 hp, !418 {
            aloc   size, !170
        }
        v85 = get_local ptr u64, ptr, !420
        v86 = get_local ptr u64, cap, !422
        v87 = const u64 0, !423
        v88 = cmp gt v81 v87, !426
        v89 = const unit ()
        cbr v88, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(v89), !427

        hash_26_write_27_append_28_from_37_block0():
        v90 = asm(ptr: v76) -> { u64, u64 } ptr, !432 {
        }
        v91 = get_local ptr { u64, u64 }, __anon_01, !433
        store v90 to v91, !434
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !436
        v94 = load v93, !437
        v95 = get_local ptr u64, ptr, !439
        v96 = get_local ptr u64, cap, !441
        v97 = const u64 1
        v98 = mul v81, v97, !446
        v99 = get_local ptr u64, len, !448
        v100 = get_local ptr u64, len, !450
        v101 = asm(dst: v84, src: v94, len: v98) -> (), !452 {
            mcp    dst src len, !453
        }
        v102 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v102), !454

        hash_26_write_27_append_28_from_37_block2(v103: ()):
        v104 = get_local ptr u64, ptr, !456
        v105 = get_local ptr u64, cap, !458
        v106 = get_local ptr { u64, u64 }, __anon_00, !460
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !461
        store v84 to v108, !462
        v109 = const u64 1
        v110 = get_elem_ptr v106, ptr u64, v109, !463
        store v81 to v110, !464
        v111 = load v106, !465
        v112 = const u64 0
        v113 = get_elem_ptr v9, ptr { u64, u64 }, v112, !467
        store v111 to v113, !468
        v114 = const unit ()
        br hash_26_write_27_append_28_block8(v114), !469

        hash_26_write_27_append_28_block8(v115: ()):
        v116 = const u64 0
        v117 = get_elem_ptr v9, ptr { u64, u64 }, v116, !470
        v118 = load v117, !471
        v119 = call ptr_22(v118), !474
        v120 = get_local ptr u64, other_start, !476
        v121 = asm(ptr: v119, offset: v34, new) -> u64 new, !480 {
            add    new ptr offset, !481
        }
        v122 = get_local ptr u64, new_ptr, !483
        v123 = load v11, !484
        v124 = call ptr_21(v123), !487
        v125 = get_local ptr u64, new_ptr, !489
        v126 = get_local ptr u64, other_len, !491
        v127 = asm(dst: v121, src: v124, len: v13) -> (), !494 {
            mcp    dst src len, !209
        }
        v128 = get_local ptr u64, both_len, !496
        v129 = const u64 1
        v130 = get_elem_ptr v9, ptr u64, v129, !498
        store v30 to v130, !499
        v131 = const unit ()
        br hash_26_write_27_block0(v131), !500

        hash_26_write_27_block0(v132: ()):
        v133 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !501
        v134 = load v133
        v135 = get_local ptr b256, result_buffer, !505
        v136 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !507
        store v136 to v135, !508
        v137 = get_local ptr b256, result_buffer, !510
        v138 = ptr_to_int v134 to u64, !511
        v139 = int_to_ptr v138 to ptr { { { u64, u64 }, u64 } }, !511
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr { { u64, u64 }, u64 }, v140, !512
        v142 = load v141, !511
        v143 = call ptr_21(v142), !515
        v144 = ptr_to_int v134 to u64, !511
        v145 = int_to_ptr v144 to ptr { { { u64, u64 }, u64 } }, !511
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr { { u64, u64 }, u64 }, v146, !516
        v148 = load v147, !511
        v149 = call len_20(v148), !519
        v150 = asm(hash: v137, ptr: v143, bytes: v149) -> b256 hash, !521 {
            s256   hash ptr bytes, !522
        }
        ret b256 v150
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !525 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !526
        v1 = asm(size: v0) -> u64 hp, !533 {
            aloc   size, !170
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !535
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !536
        store v1 to v4, !537
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !538
        v7 = const u64 0, !539
        store v7 to v6, !540
        v8 = load v2, !541
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !543
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !544
        store v8 to v11, !545
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !544
        v14 = const u64 0, !546
        store v14 to v13, !547
        v15 = load v9, !544
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !548
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !548
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !549: { u64, u64 }) -> u64, !552 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !553
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1064 1095
!42 = (!4 !5 !41)
!43 = span !6 1108 1117
!44 = (!4 !5 !43)
!45 = span !6 1126 1133
!46 = (!4 !5 !45)
!47 = span !6 1108 1134
!48 = fn_call_path_span !6 1118 1125
!49 = (!4 !5 !47 !48)
!50 = span !6 1100 1135
!51 = (!4 !5 !50)
!52 = (!4 !5 !50)
!53 = span !6 1148 1157
!54 = (!4 !5 !53)
!55 = span !6 1166 1173
!56 = (!4 !5 !55)
!57 = span !6 1148 1174
!58 = fn_call_path_span !6 1158 1165
!59 = (!4 !5 !57 !58)
!60 = span !6 1140 1175
!61 = (!4 !5 !60)
!62 = (!4 !5 !60)
!63 = span !6 805 809
!64 = span !6 811 816
!65 = span !6 799 968
!66 = fn_name_span !6 802 804
!67 = inline "never"
!68 = (!65 !66 !67)
!69 = span !6 218 232
!70 = span !6 889 891
!71 = span !6 842 962
!72 = span !6 907 926
!73 = span !6 507 511
!74 = span !6 513 520
!75 = span !6 492 714
!76 = fn_name_span !6 499 506
!77 = (!75 !76)
!78 = span !6 582 603
!79 = fn_call_path_span !6 587 594
!80 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!81 = span !80 1815 1933
!82 = (!78 !79 !81)
!83 = (!78 !79 !81)
!84 = (!78 !79 !81)
!85 = span !6 451 469
!86 = fn_call_path_span !6 459 467
!87 = (!78 !79 !85 !86)
!88 = (!78 !79 !85 !86)
!89 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!90 = span !89 329 341
!91 = (!78 !79 !85 !86 !90)
!92 = (!78 !79 !85 !86)
!93 = span !89 1573 1589
!94 = fn_call_path_span !89 1584 1587
!95 = (!78 !79 !85 !86 !93 !94)
!96 = span !89 1593 1595
!97 = span !89 1573 1595
!98 = fn_call_path_span !89 1590 1592
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!100 = span !99 15515 15529
!101 = fn_call_path_span !99 15520 15522
!102 = (!78 !79 !85 !86 !97 !98 !100 !101)
!103 = span !99 12533 12538
!104 = span !99 15514 15536
!105 = fn_call_path_span !99 15531 15534
!106 = (!78 !79 !85 !86 !97 !98 !104 !105)
!107 = (!78 !79 !85 !86 !97)
!108 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!109 = span !108 2461 2560
!110 = (!78 !79 !85 !86 !109)
!111 = (!78 !79 !85 !86 !109)
!112 = (!78 !79 !85 !86 !109)
!113 = (!78 !79 !85 !86)
!114 = span !89 1610 1621
!115 = (!78 !79 !85 !86 !114)
!116 = (!78 !79 !85 !86 !109)
!117 = (!78 !79 !85 !86 !109)
!118 = (!78 !79 !85 !86 !109)
!119 = (!78 !79 !85 !86)
!120 = (!78 !79 !85 !86)
!121 = (!78 !79 !85 !86 !90)
!122 = (!78 !79 !85 !86)
!123 = span !89 1657 1673
!124 = fn_call_path_span !89 1668 1671
!125 = (!78 !79 !85 !86 !123 !124)
!126 = span !89 1647 1709
!127 = (!78 !79 !85 !86 !126)
!128 = (!78 !79 !85 !86 !109)
!129 = (!78 !79 !85 !86 !109)
!130 = (!78 !79 !85 !86)
!131 = (!78 !79 !85 !86)
!132 = span !6 451 478
!133 = fn_call_path_span !6 470 476
!134 = span !108 4973 5075
!135 = (!78 !79 !132 !133 !134)
!136 = (!78 !79 !132 !133 !134)
!137 = span !108 4979 4983
!138 = (!78 !79 !132 !133 !137)
!139 = (!78 !79 !132 !133 !137)
!140 = (!78 !79 !132 !133)
!141 = span !108 4998 5037
!142 = fn_call_path_span !108 4998 5037
!143 = (!78 !79 !132 !133 !141 !142)
!144 = (!78 !79 !132 !133 !141)
!145 = (!78 !79 !132 !133 !137)
!146 = (!78 !79 !132 !133)
!147 = (!78 !79 !132 !133)
!148 = span !108 5009 5020
!149 = (!78 !79 !132 !133 !148)
!150 = (!78 !79 !132 !133 !148)
!151 = span !108 5025 5036
!152 = (!78 !79 !132 !133 !151)
!153 = (!78 !79 !132 !133)
!154 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!155 = span !154 28953 28955
!156 = span !6 435 479
!157 = fn_call_path_span !6 435 450
!158 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!159 = span !158 3133 3150
!160 = fn_call_path_span !158 3133 3144
!161 = span !154 28933 28956
!162 = fn_call_path_span !154 28933 28952
!163 = span !154 4157 4190
!164 = fn_call_path_span !154 4157 4180
!165 = span !154 863 884
!166 = fn_call_path_span !154 863 874
!167 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!168 = span !167 3315 3378
!169 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !165 !166 !168)
!170 = span !167 3342 3351
!171 = span !154 839 922
!172 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !171)
!173 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164)
!174 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !171)
!175 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164)
!176 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !171)
!177 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164)
!178 = span !154 4133 4221
!179 = (!78 !79 !156 !157 !159 !160 !161 !162 !178)
!180 = (!78 !79 !156 !157 !159 !160 !161 !162)
!181 = (!78 !79 !156 !157 !159 !160 !161 !162 !178)
!182 = (!78 !79 !156 !157 !159 !160 !161 !162)
!183 = span !154 4209 4210
!184 = (!78 !79 !156 !157 !159 !160 !161 !162 !178)
!185 = (!78 !79 !156 !157 !159 !160 !161 !162)
!186 = span !154 28917 28957
!187 = (!78 !79 !156 !157 !159 !160 !186)
!188 = (!78 !79 !156 !157 !159 !160 !186)
!189 = span !154 28966 28980
!190 = (!78 !79 !156 !157 !159 !160 !189)
!191 = (!78 !79 !156 !157 !159 !160 !189)
!192 = span !154 28978 28980
!193 = (!78 !79 !156 !157 !159 !160 !189)
!194 = span !154 29065 29077
!195 = (!78 !79 !156 !157 !159 !160 !194)
!196 = span !154 29092 29097
!197 = (!78 !79 !156 !157 !159 !160 !196)
!198 = span !154 2445 2458
!199 = (!78 !79 !156 !157 !159 !160 !198)
!200 = span !154 400 412
!201 = (!78 !79 !156 !157 !159 !160 !200)
!202 = (!78 !79 !156 !157 !159 !160)
!203 = span !154 29107 29109
!204 = span !154 29065 29110
!205 = fn_call_path_span !154 29078 29091
!206 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!207 = span !206 5999 6076
!208 = (!78 !79 !156 !157 !159 !160 !204 !205 !207)
!209 = span !206 6050 6065
!210 = span !154 29121 29126
!211 = (!78 !79 !156 !157 !159 !160 !210)
!212 = (!78 !79 !156 !157 !159 !160)
!213 = span !158 3107 3161
!214 = (!78 !79 !156 !157 !213)
!215 = (!78 !79 !156 !157)
!216 = (!78 !79 !156 !157 !213)
!217 = (!78 !79 !156 !157)
!218 = (!78 !79 !81)
!219 = (!78 !79 !81)
!220 = (!78 !79)
!221 = span !6 576 708
!222 = span !6 618 668
!223 = fn_call_path_span !6 618 668
!224 = (!222 !223)
!225 = span !108 5062 5063
!226 = span !108 5055 5064
!227 = fn_call_path_span !108 5055 5061
!228 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!229 = span !228 757 771
!230 = (!78 !79 !132 !133 !226 !227 !229)
!231 = span !6 621 628
!232 = span !6 657 664
!233 = span !6 650 665
!234 = fn_call_path_span !6 650 656
!235 = (!233 !234)
!236 = span !6 636 666
!237 = fn_call_path_span !6 636 649
!238 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!239 = span !238 2370 2383
!240 = (!236 !237 !239)
!241 = (!236 !237)
!242 = (!236 !237 !239)
!243 = span !6 681 698
!244 = fn_call_path_span !6 681 698
!245 = (!243 !244)
!246 = span !6 685 686
!247 = span !6 695 696
!248 = span !154 13782 13786
!249 = span !154 13771 13819
!250 = fn_name_span !154 13778 13781
!251 = (!249 !250)
!252 = span !154 2506 2514
!253 = span !154 15186 15190
!254 = span !154 15175 15233
!255 = fn_name_span !154 15182 15185
!256 = (!254 !255)
!257 = span !154 15213 15227
!258 = fn_call_path_span !154 15222 15225
!259 = (!257 !258)
!260 = span !154 989 993
!261 = span !154 978 1030
!262 = fn_name_span !154 985 988
!263 = (!261 !262)
!264 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!265 = span !264 9026 9027
!266 = span !264 9009 9138
!267 = fn_name_span !264 9016 9022
!268 = (!266 !267 !67)
!269 = span !264 9082 9095
!270 = fn_call_path_span !264 9082 9093
!271 = (!269 !270)
!272 = span !264 9065 9096
!273 = span !264 9108 9114
!274 = span !264 9101 9115
!275 = fn_call_path_span !264 9103 9107
!276 = (!274 !275)
!277 = span !158 524 536
!278 = (!274 !275 !277)
!279 = span !158 5123 5146
!280 = fn_call_path_span !158 5129 5134
!281 = span !264 142 154
!282 = (!274 !275 !279 !280 !281)
!283 = (!274 !275 !279 !280)
!284 = (!274 !275 !279 !280)
!285 = span !264 365 389
!286 = fn_call_path_span !264 376 382
!287 = (!274 !275 !279 !280 !285 !286)
!288 = span !154 18398 18409
!289 = fn_call_path_span !154 18404 18407
!290 = (!274 !275 !279 !280 !285 !286 !288 !289)
!291 = span !154 18382 18410
!292 = (!274 !275 !279 !280 !285 !286 !291)
!293 = span !154 18422 18431
!294 = (!274 !275 !279 !280 !285 !286 !293)
!295 = span !154 18435 18436
!296 = span !154 18422 18436
!297 = fn_call_path_span !154 18432 18434
!298 = (!274 !275 !279 !280 !285 !286 !296 !297)
!299 = span !154 18451 18457
!300 = (!274 !275 !279 !280 !285 !286 !296)
!301 = (!274 !275 !279 !280 !285 !286 !252)
!302 = (!274 !275 !279 !280 !285 !286)
!303 = span !154 18572 18573
!304 = span !154 18560 18573
!305 = fn_call_path_span !154 18569 18571
!306 = (!274 !275 !279 !280 !285 !286 !304 !305)
!307 = (!274 !275 !279 !280 !285 !286 !304)
!308 = (!274 !275 !279 !280 !285 !286)
!309 = span !154 18588 18600
!310 = (!274 !275 !279 !280 !285 !286 !309)
!311 = span !154 18614 18620
!312 = (!274 !275 !279 !280 !285 !286 !311)
!313 = (!274 !275 !279 !280 !285 !286 !252)
!314 = (!274 !275 !279 !280 !285 !286)
!315 = span !154 18668 18677
!316 = (!274 !275 !279 !280 !285 !286 !315)
!317 = span !154 18657 18677
!318 = fn_call_path_span !154 18666 18667
!319 = (!274 !275 !279 !280 !285 !286 !317 !318)
!320 = span !154 18642 18678
!321 = (!274 !275 !279 !280 !285 !286 !320)
!322 = (!274 !275 !279 !280 !285 !286 !252)
!323 = (!274 !275 !279 !280 !285 !286)
!324 = span !154 18687 18714
!325 = (!274 !275 !279 !280 !285 !286 !324)
!326 = (!274 !275 !279 !280 !285 !286 !198)
!327 = (!274 !275 !279 !280 !285 !286)
!328 = span !154 18808 18827
!329 = fn_call_path_span !154 18817 18825
!330 = (!274 !275 !279 !280 !285 !286 !328 !329)
!331 = span !154 18830 18838
!332 = (!274 !275 !279 !280 !285 !286 !331)
!333 = span !154 18808 18838
!334 = fn_call_path_span !154 18828 18829
!335 = (!274 !275 !279 !280 !285 !286 !333 !334)
!336 = (!274 !275 !279 !280 !285 !286 !333)
!337 = (!274 !275 !279 !280 !285 !286 !198)
!338 = (!274 !275 !279 !280 !285 !286)
!339 = span !154 18928 18942
!340 = fn_call_path_span !154 18937 18940
!341 = (!274 !275 !279 !280 !285 !286 !339 !340)
!342 = (!274 !275 !279 !280 !285 !286 !198)
!343 = (!274 !275 !279 !280 !285 !286)
!344 = span !154 18944 18963
!345 = fn_call_path_span !154 18953 18961
!346 = (!274 !275 !279 !280 !285 !286 !344 !345)
!347 = span !154 18965 18973
!348 = (!274 !275 !279 !280 !285 !286 !347)
!349 = span !154 18914 18974
!350 = fn_call_path_span !154 18914 18927
!351 = span !167 4168 4185
!352 = fn_call_path_span !167 4178 4179
!353 = (!274 !275 !279 !280 !285 !286 !349 !350 !351 !352)
!354 = (!274 !275 !279 !280 !285 !286 !349 !350 !351)
!355 = span !167 4210 4232
!356 = fn_call_path_span !167 4210 4221
!357 = (!274 !275 !279 !280 !285 !286 !349 !350 !355 !356 !168)
!358 = span !167 4196 4233
!359 = (!274 !275 !279 !280 !285 !286 !349 !350 !358)
!360 = span !167 4253 4254
!361 = span !167 4245 4254
!362 = fn_call_path_span !167 4251 4252
!363 = (!274 !275 !279 !280 !285 !286 !349 !350 !361 !362)
!364 = (!274 !275 !279 !280 !285 !286 !349 !350 !361)
!365 = span !167 4287 4294
!366 = (!274 !275 !279 !280 !285 !286 !349 !350 !365)
!367 = span !167 4269 4302
!368 = fn_call_path_span !167 4273 4286
!369 = (!274 !275 !279 !280 !285 !286 !349 !350 !367 !368 !207)
!370 = (!274 !275 !279 !280 !285 !286 !349 !350)
!371 = span !167 4322 4329
!372 = (!274 !275 !279 !280 !285 !286 !349 !350 !371)
!373 = (!274 !275 !279 !280 !285 !286 !349 !350)
!374 = span !154 18992 19000
!375 = (!274 !275 !279 !280 !285 !286 !374)
!376 = span !154 18869 19015
!377 = fn_call_path_span !154 18869 18890
!378 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!379 = span !378 2368 2392
!380 = fn_call_path_span !378 2374 2375
!381 = (!274 !275 !279 !280 !285 !286 !376 !377 !379 !380)
!382 = span !378 2362 2393
!383 = (!274 !275 !279 !280 !285 !286 !376 !377 !382)
!384 = (!274 !275 !279 !280 !285 !286 !376 !377 !382)
!385 = (!274 !275 !279 !280 !285 !286 !376 !377 !382)
!386 = (!274 !275 !279 !280 !285 !286 !376 !377 !382)
!387 = (!274 !275 !279 !280 !285 !286 !376 !377 !382)
!388 = (!274 !275 !279 !280 !285 !286 !376 !377)
!389 = span !378 2351 2394
!390 = fn_call_path_span !378 2351 2361
!391 = span !378 1248 1294
!392 = (!274 !275 !279 !280 !285 !286 !376 !377 !389 !390 !391)
!393 = span !154 18853 19016
!394 = (!274 !275 !279 !280 !285 !286 !393)
!395 = (!274 !275 !279 !280 !285 !286 !393)
!396 = span !154 19055 19064
!397 = (!274 !275 !279 !280 !285 !286 !396)
!398 = (!274 !275 !279 !280 !285 !286)
!399 = span !154 19040 19065
!400 = fn_call_path_span !154 19040 19054
!401 = span !154 2130 2153
!402 = fn_call_path_span !154 2136 2151
!403 = span !378 3959 3975
!404 = fn_call_path_span !378 3959 3969
!405 = span !378 1624 1675
!406 = (!274 !275 !279 !280 !285 !286 !399 !400 !401 !402 !403 !404 !405)
!407 = (!274 !275 !279 !280 !285 !286 !399 !400 !401 !402)
!408 = (!274 !275 !279 !280 !285 !286 !399 !400 !401 !402)
!409 = span !378 3976 3977
!410 = (!274 !275 !279 !280 !285 !286 !399 !400 !401 !402 !409)
!411 = (!274 !275 !279 !280 !285 !286 !399 !400 !401 !402)
!412 = span !154 2120 2154
!413 = (!274 !275 !279 !280 !285 !286 !399 !400 !412)
!414 = span !154 2185 2188
!415 = (!274 !275 !279 !280 !285 !286 !399 !400 !414)
!416 = span !154 2173 2189
!417 = fn_call_path_span !154 2173 2184
!418 = (!274 !275 !279 !280 !285 !286 !399 !400 !416 !417 !168)
!419 = span !154 2163 2190
!420 = (!274 !275 !279 !280 !285 !286 !399 !400 !419)
!421 = span !154 2202 2205
!422 = (!274 !275 !279 !280 !285 !286 !399 !400 !421)
!423 = span !154 2208 2209
!424 = span !154 2202 2209
!425 = fn_call_path_span !154 2206 2207
!426 = (!274 !275 !279 !280 !285 !286 !399 !400 !424 !425)
!427 = (!274 !275 !279 !280 !285 !286 !399 !400 !424)
!428 = span !154 2224 2235
!429 = fn_call_path_span !154 2230 2233
!430 = span !378 2911 2927
!431 = fn_call_path_span !378 2911 2921
!432 = (!274 !275 !279 !280 !285 !286 !399 !400 !428 !429 !430 !431 !405)
!433 = (!274 !275 !279 !280 !285 !286 !399 !400 !428 !429)
!434 = (!274 !275 !279 !280 !285 !286 !399 !400 !428 !429)
!435 = span !378 2928 2929
!436 = (!274 !275 !279 !280 !285 !286 !399 !400 !428 !429 !435)
!437 = (!274 !275 !279 !280 !285 !286 !399 !400 !428 !429)
!438 = span !154 2250 2253
!439 = (!274 !275 !279 !280 !285 !286 !399 !400 !438)
!440 = span !154 2255 2258
!441 = (!274 !275 !279 !280 !285 !286 !399 !400 !440)
!442 = span !154 2224 2259
!443 = fn_call_path_span !154 2236 2243
!444 = span !206 3413 3437
!445 = fn_call_path_span !206 3419 3420
!446 = (!274 !275 !279 !280 !285 !286 !399 !400 !442 !443 !444 !445)
!447 = span !206 3403 3438
!448 = (!274 !275 !279 !280 !285 !286 !399 !400 !442 !443 !447)
!449 = span !206 3477 3480
!450 = (!274 !275 !279 !280 !285 !286 !399 !400 !442 !443 !449)
!451 = span !206 3447 3522
!452 = (!274 !275 !279 !280 !285 !286 !399 !400 !442 !443 !451)
!453 = span !206 3496 3511
!454 = (!274 !275 !279 !280 !285 !286 !399 !400)
!455 = span !154 2286 2289
!456 = (!274 !275 !279 !280 !285 !286 !399 !400 !455)
!457 = span !154 2291 2294
!458 = (!274 !275 !279 !280 !285 !286 !399 !400 !457)
!459 = span !154 2279 2296
!460 = (!274 !275 !279 !280 !285 !286 !399 !400 !459)
!461 = (!274 !275 !279 !280 !285 !286 !399 !400)
!462 = (!274 !275 !279 !280 !285 !286 !399 !400 !459)
!463 = (!274 !275 !279 !280 !285 !286 !399 !400)
!464 = (!274 !275 !279 !280 !285 !286 !399 !400 !459)
!465 = (!274 !275 !279 !280 !285 !286 !399 !400)
!466 = span !154 19029 19065
!467 = (!274 !275 !279 !280 !285 !286 !466)
!468 = (!274 !275 !279 !280 !285 !286 !466)
!469 = (!274 !275 !279 !280 !285 !286)
!470 = (!274 !275 !279 !280 !285 !286 !198)
!471 = (!274 !275 !279 !280 !285 !286)
!472 = span !154 19100 19114
!473 = fn_call_path_span !154 19109 19112
!474 = (!274 !275 !279 !280 !285 !286 !472 !473)
!475 = span !154 19131 19142
!476 = (!274 !275 !279 !280 !285 !286 !475)
!477 = span !154 19100 19143
!478 = fn_call_path_span !154 19115 19130
!479 = span !206 6721 6825
!480 = (!274 !275 !279 !280 !285 !286 !477 !478 !479)
!481 = span !206 6771 6789
!482 = span !154 19086 19144
!483 = (!274 !275 !279 !280 !285 !286 !482)
!484 = (!274 !275 !279 !280 !285 !286)
!485 = span !154 19153 19164
!486 = fn_call_path_span !154 19159 19162
!487 = (!274 !275 !279 !280 !285 !286 !485 !486)
!488 = span !154 19179 19186
!489 = (!274 !275 !279 !280 !285 !286 !488)
!490 = span !154 19188 19197
!491 = (!274 !275 !279 !280 !285 !286 !490)
!492 = span !154 19153 19198
!493 = fn_call_path_span !154 19165 19178
!494 = (!274 !275 !279 !280 !285 !286 !492 !493 !207)
!495 = span !154 19255 19263
!496 = (!274 !275 !279 !280 !285 !286 !495)
!497 = span !154 19244 19263
!498 = (!274 !275 !279 !280 !285 !286 !497)
!499 = (!274 !275 !279 !280 !285 !286 !497)
!500 = (!274 !275 !279 !280 !285 !286)
!501 = span !264 9121 9127
!502 = span !264 9121 9136
!503 = fn_call_path_span !264 9128 9134
!504 = span !264 440 476
!505 = (!502 !503 !504)
!506 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!507 = span !506 7904 7970
!508 = (!502 !503 !504)
!509 = span !264 508 521
!510 = (!502 !503 !509)
!511 = (!502 !503)
!512 = (!502 !503 !281)
!513 = span !264 540 556
!514 = fn_call_path_span !264 551 554
!515 = (!502 !503 !513 !514)
!516 = (!502 !503 !281)
!517 = span !264 577 593
!518 = fn_call_path_span !264 588 591
!519 = (!502 !503 !517 !518)
!520 = span !264 485 672
!521 = (!502 !503 !520)
!522 = span !264 619 638
!523 = span !264 177 263
!524 = fn_name_span !264 184 187
!525 = (!523 !524)
!526 = span !154 570 571
!527 = span !264 234 246
!528 = fn_call_path_span !264 234 244
!529 = span !154 3079 3094
!530 = fn_call_path_span !154 3079 3092
!531 = span !154 558 572
!532 = fn_call_path_span !154 558 569
!533 = (!527 !528 !529 !530 !531 !532 !168)
!534 = span !154 534 603
!535 = (!527 !528 !529 !530 !534)
!536 = (!527 !528 !529 !530)
!537 = (!527 !528 !529 !530 !534)
!538 = (!527 !528 !529 !530)
!539 = span !154 591 592
!540 = (!527 !528 !529 !530 !534)
!541 = (!527 !528 !529 !530)
!542 = span !154 3055 3125
!543 = (!527 !528 !542)
!544 = (!527 !528)
!545 = (!527 !528 !542)
!546 = span !154 3113 3114
!547 = (!527 !528 !542)
!548 = span !264 208 257
!549 = span !154 1097 1101
!550 = span !154 1081 1134
!551 = fn_name_span !154 1088 1096
!552 = (!550 !551)
!553 = span !154 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr { [u8; 64] }, secp256k1, !42
        v23 = load v22, !35
        v24 = get_local ptr { { { u64, u64 }, u64 } }, message, !44
        v25 = load v24, !35
        v26 = call address_7(v23, v25), !47
        v27 = get_local ptr { [u8; 64] }, secp256k1, !49
        v28 = load v27, !35
        v29 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v30 = load v29, !35
        v31 = call address_7(v28, v30), !54
        v32 = const unit ()
        ret () v32
    }

    pub fn eq_6(self !55: { [u8; 64] }, other !56: { [u8; 64] }) -> bool, !60 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !61
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !61
        v8 = const u64 64, !62
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !63 {
            meq    result r2 r3 r4, !64
        }
        ret bool v9
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = ptr_to_int message to u64, !111
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !112
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !113
        v27 = load v26, !114
        v28 = call ptr_21(v27), !117
        v29 = asm(bits: v28) -> b256 bits, !119 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !120
        store v29 to v32, !121
        v33 = load v19, !122
        br recover_8_block0(v33), !123

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        store v34 to v35, !128
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !130
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !131
        v39 = load v38, !132
        v40 = const u64 1, !129
        v41 = cmp eq v39 v40, !135
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !136

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !137
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !138
        v46 = load v45, !139
        v47 = get_local ptr b256, inner_value, !141
        store v46 to v47, !142
        v48 = get_local ptr b256, inner_value, !144
        v49 = load v48, !145
        v50 = const u64 32, !147
        v51 = asm(size: v50) -> u64 hp, !161 {
            aloc   size, !162
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !164
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !165
        store v51 to v54, !166
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !167
        store v50 to v56, !168
        v57 = load v52, !169
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !171
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !172
        store v57 to v60, !173
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !174
        v63 = const u64 0, !175
        store v63 to v62, !176
        v64 = load v58, !177
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        store v64 to v65, !180
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !182
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !183
        v69 = const u64 32, !184
        store v69 to v68, !185
        v70 = ptr_to_int v49 to u64, !187
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !189
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !191
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !193
        v76 = load v75, !194
        v77 = const u64 32, !195
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !200 {
            mcp    dst src len, !201
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !203
        v80 = load v79, !204
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !206
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !207
        store v80 to v83, !208
        v84 = load v81, !209
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !210
        store v84 to v87, !211
        v88 = load v0, !212
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !213
        store v88 to v89, !213
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !70
        v93 = load v92
        v94 = const u64 0, !70
        v95 = cmp eq v93 v94, !216
        cbr v95, block0(), block1(), !214

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !217
        revert v96, !222

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !223
        store v101 to v102, !223
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !73
        v106 = const u64 0, !73
        store v106 to v105, !73
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !224
        v108 = load v107
        v109 = call sha256_24(v108), !227
        v110 = get_local ptr { b256 }, __anon_02, !232
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !233
        store v109 to v112, !234
        v113 = load v110, !233
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !73
        store v113 to v116, !73
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !70
        v121 = load v120
        v122 = const u64 1, !70
        v123 = cmp eq v121 v122, !237
        cbr v123, block2(), block3(), !235

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !238
        store v128 to v129, !238
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !73
        v133 = const u64 1, !73
        store v133 to v132, !73
        v134 = get_local ptr { u64 }, e, !239
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !73
        store v135 to v138, !73
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !213
        revert v140, !213

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !240: { { u64, u64 }, u64 }) -> u64, !243 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !244
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !245: { { u64, u64 }, u64 }) -> u64, !248 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !190
        v4 = load v3
        v5 = call ptr_22(v4), !251
        ret u64 v5
    }

    pub fn ptr_22(self !252: { u64, u64 }) -> u64, !255 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !192
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !257: { { { u64, u64 }, u64 } }) -> b256, !260 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !263
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !264
        store v0 to v1, !264
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !265
        v3 = ptr_to_int s to u64, !268
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !268
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !270
        v7 = load v6, !268
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !274
        v10 = ptr_to_int v7 to u64, !275
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !276
        v12 = load v11, !279
        v13 = call len_20(v12), !282
        v14 = const u64 0, !283
        v15 = cmp eq v13 v14, !286
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !287

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !288
        v18 = load v17, !289
        v19 = const u64 0, !290
        v20 = cmp eq v18 v19, !293
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !294

        hash_26_write_27_append_28_block3():
        v21 = load v11, !295
        store v21 to v9, !297
        br hash_26_write_27_block0(), !299

        hash_26_write_27_append_28_block4():
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !300
        v24 = load v23, !301
        v25 = add v24, v13, !304
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !305
        v28 = load v27, !306
        v29 = const u64 0
        v30 = get_elem_ptr v9, ptr { u64, u64 }, v29, !307
        v31 = load v30, !308
        v32 = call capacity_31(v31), !311
        v33 = cmp lt v32 v25, !314
        cbr v33, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !315

        hash_26_write_27_append_28_block6():
        v34 = const u64 0
        v35 = get_elem_ptr v9, ptr { u64, u64 }, v34, !316
        v36 = load v35, !317
        v37 = call ptr_22(v36), !320
        v38 = const u64 0
        v39 = get_elem_ptr v9, ptr { u64, u64 }, v38, !321
        v40 = load v39, !322
        v41 = call capacity_31(v40), !325
        v42 = cmp gt v25 v41, !330
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !331

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v25) -> u64 hp, !334 {
            aloc   size, !162
        }
        v44 = const u64 0, !335
        v45 = cmp gt v41 v44, !338
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(), !339

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v37, len: v41) -> (), !342 {
            mcp    dst src len, !201
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block3(), !343

        hash_26_write_27_append_28_realloc_bytes_35_block3():
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !344

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = const u64 1
        v49 = mul v25, v48, !350
        v50 = get_local ptr { u64, u64 }, __anon_0, !352
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr u64, v51, !353
        store v47 to v52, !354
        v53 = const u64 1
        v54 = get_elem_ptr v50, ptr u64, v53, !355
        store v49 to v54, !356
        v55 = load v50, !357
        v56 = asm(ptr: v55) -> slice ptr, !361 {
        }
        v57 = get_local ptr slice, new_slice, !363
        store v56 to v57, !364
        v58 = get_local ptr slice, new_slice, !366
        v59 = load v58, !367
        v60 = asm(ptr: v59) -> { u64, u64 } ptr, !375 {
        }
        v61 = get_local ptr { u64, u64 }, __anon_000, !376
        store v60 to v61, !377
        v62 = const u64 1
        v63 = get_elem_ptr v61, ptr u64, v62, !379
        v64 = load v63, !380
        v65 = asm(size: v64) -> u64 hp, !383 {
            aloc   size, !162
        }
        v66 = const u64 0, !384
        v67 = cmp gt v64 v66, !387
        cbr v67, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !388

        hash_26_write_27_append_28_from_37_block0():
        v68 = asm(ptr: v59) -> { u64, u64 } ptr, !393 {
        }
        v69 = get_local ptr { u64, u64 }, __anon_01, !394
        store v68 to v69, !395
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !397
        v72 = load v71, !398
        v73 = const u64 1
        v74 = mul v64, v73, !403
        v75 = asm(dst: v65, src: v72, len: v74) -> (), !405 {
            mcp    dst src len, !406
        }
        br hash_26_write_27_append_28_from_37_block2(), !407

        hash_26_write_27_append_28_from_37_block2():
        v76 = get_local ptr { u64, u64 }, __anon_00, !409
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !410
        store v65 to v78, !411
        v79 = const u64 1
        v80 = get_elem_ptr v76, ptr u64, v79, !412
        store v64 to v80, !413
        v81 = load v76, !414
        v82 = const u64 0
        v83 = get_elem_ptr v9, ptr { u64, u64 }, v82, !416
        store v81 to v83, !417
        br hash_26_write_27_append_28_block8(), !418

        hash_26_write_27_append_28_block8():
        v84 = const u64 0
        v85 = get_elem_ptr v9, ptr { u64, u64 }, v84, !419
        v86 = load v85, !420
        v87 = call ptr_22(v86), !423
        v88 = asm(ptr: v87, offset: v28, new) -> u64 new, !427 {
            add    new ptr offset, !428
        }
        v89 = load v11, !429
        v90 = call ptr_21(v89), !432
        v91 = asm(dst: v88, src: v90, len: v13) -> (), !435 {
            mcp    dst src len, !201
        }
        v92 = const u64 1
        v93 = get_elem_ptr v9, ptr u64, v92, !437
        store v25 to v93, !438
        br hash_26_write_27_block0(), !439

        hash_26_write_27_block0():
        v94 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !440
        v95 = load v94
        v96 = get_local ptr b256, result_buffer, !444
        v97 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !446
        store v97 to v96, !447
        v98 = get_local ptr b256, result_buffer, !449
        v99 = ptr_to_int v95 to u64, !450
        v100 = int_to_ptr v99 to ptr { { { u64, u64 }, u64 } }, !450
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr { { u64, u64 }, u64 }, v101, !451
        v103 = load v102, !450
        v104 = call ptr_21(v103), !454
        v105 = ptr_to_int v95 to u64, !450
        v106 = int_to_ptr v105 to ptr { { { u64, u64 }, u64 } }, !450
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { { u64, u64 }, u64 }, v107, !455
        v109 = load v108, !450
        v110 = call len_20(v109), !458
        v111 = asm(hash: v98, ptr: v104, bytes: v110) -> b256 hash, !460 {
            s256   hash ptr bytes, !461
        }
        ret b256 v111
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !464 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !465
        v1 = asm(size: v0) -> u64 hp, !472 {
            aloc   size, !162
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !474
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !475
        store v1 to v4, !476
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !477
        v7 = const u64 0, !478
        store v7 to v6, !479
        v8 = load v2, !480
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !482
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !483
        store v8 to v11, !484
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !483
        v14 = const u64 0, !485
        store v14 to v13, !486
        v15 = load v9, !483
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !487
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !487
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !488: { u64, u64 }) -> u64, !491 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !492
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1108 1117
!42 = (!4 !5 !41)
!43 = span !6 1126 1133
!44 = (!4 !5 !43)
!45 = span !6 1108 1134
!46 = fn_call_path_span !6 1118 1125
!47 = (!4 !5 !45 !46)
!48 = span !6 1148 1157
!49 = (!4 !5 !48)
!50 = span !6 1166 1173
!51 = (!4 !5 !50)
!52 = span !6 1148 1174
!53 = fn_call_path_span !6 1158 1165
!54 = (!4 !5 !52 !53)
!55 = span !6 805 809
!56 = span !6 811 816
!57 = span !6 799 968
!58 = fn_name_span !6 802 804
!59 = inline "never"
!60 = (!57 !58 !59)
!61 = span !6 218 232
!62 = span !6 889 891
!63 = span !6 842 962
!64 = span !6 907 926
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = (!70 !71 !77 !78)
!113 = (!70 !71 !77 !78 !82)
!114 = (!70 !71 !77 !78)
!115 = span !81 1657 1673
!116 = fn_call_path_span !81 1668 1671
!117 = (!70 !71 !77 !78 !115 !116)
!118 = span !81 1647 1709
!119 = (!70 !71 !77 !78 !118)
!120 = (!70 !71 !77 !78 !101)
!121 = (!70 !71 !77 !78 !101)
!122 = (!70 !71 !77 !78)
!123 = (!70 !71 !77 !78)
!124 = span !6 451 478
!125 = fn_call_path_span !6 470 476
!126 = span !100 4973 5075
!127 = (!70 !71 !124 !125 !126)
!128 = (!70 !71 !124 !125 !126)
!129 = span !100 4979 4983
!130 = (!70 !71 !124 !125 !129)
!131 = (!70 !71 !124 !125 !129)
!132 = (!70 !71 !124 !125)
!133 = span !100 4998 5037
!134 = fn_call_path_span !100 4998 5037
!135 = (!70 !71 !124 !125 !133 !134)
!136 = (!70 !71 !124 !125 !133)
!137 = (!70 !71 !124 !125 !129)
!138 = (!70 !71 !124 !125)
!139 = (!70 !71 !124 !125)
!140 = span !100 5009 5020
!141 = (!70 !71 !124 !125 !140)
!142 = (!70 !71 !124 !125 !140)
!143 = span !100 5025 5036
!144 = (!70 !71 !124 !125 !143)
!145 = (!70 !71 !124 !125)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!147 = span !146 28953 28955
!148 = span !6 435 479
!149 = fn_call_path_span !6 435 450
!150 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!151 = span !150 3133 3150
!152 = fn_call_path_span !150 3133 3144
!153 = span !146 28933 28956
!154 = fn_call_path_span !146 28933 28952
!155 = span !146 4157 4190
!156 = fn_call_path_span !146 4157 4180
!157 = span !146 863 884
!158 = fn_call_path_span !146 863 874
!159 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!160 = span !159 3315 3378
!161 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !157 !158 !160)
!162 = span !159 3342 3351
!163 = span !146 839 922
!164 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!165 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!166 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!167 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!168 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!169 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!170 = span !146 4133 4221
!171 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!172 = (!70 !71 !148 !149 !151 !152 !153 !154)
!173 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!174 = (!70 !71 !148 !149 !151 !152 !153 !154)
!175 = span !146 4209 4210
!176 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!177 = (!70 !71 !148 !149 !151 !152 !153 !154)
!178 = span !146 28917 28957
!179 = (!70 !71 !148 !149 !151 !152 !178)
!180 = (!70 !71 !148 !149 !151 !152 !178)
!181 = span !146 28966 28980
!182 = (!70 !71 !148 !149 !151 !152 !181)
!183 = (!70 !71 !148 !149 !151 !152 !181)
!184 = span !146 28978 28980
!185 = (!70 !71 !148 !149 !151 !152 !181)
!186 = span !146 29065 29077
!187 = (!70 !71 !148 !149 !151 !152 !186)
!188 = span !146 29092 29097
!189 = (!70 !71 !148 !149 !151 !152 !188)
!190 = span !146 2445 2458
!191 = (!70 !71 !148 !149 !151 !152 !190)
!192 = span !146 400 412
!193 = (!70 !71 !148 !149 !151 !152 !192)
!194 = (!70 !71 !148 !149 !151 !152)
!195 = span !146 29107 29109
!196 = span !146 29065 29110
!197 = fn_call_path_span !146 29078 29091
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!199 = span !198 5999 6076
!200 = (!70 !71 !148 !149 !151 !152 !196 !197 !199)
!201 = span !198 6050 6065
!202 = span !146 29121 29126
!203 = (!70 !71 !148 !149 !151 !152 !202)
!204 = (!70 !71 !148 !149 !151 !152)
!205 = span !150 3107 3161
!206 = (!70 !71 !148 !149 !205)
!207 = (!70 !71 !148 !149)
!208 = (!70 !71 !148 !149 !205)
!209 = (!70 !71 !148 !149)
!210 = (!70 !71 !73)
!211 = (!70 !71 !73)
!212 = (!70 !71)
!213 = span !6 576 708
!214 = span !6 618 668
!215 = fn_call_path_span !6 618 668
!216 = (!214 !215)
!217 = span !100 5062 5063
!218 = span !100 5055 5064
!219 = fn_call_path_span !100 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!70 !71 !124 !125 !218 !219 !221)
!223 = span !6 621 628
!224 = span !6 657 664
!225 = span !6 650 665
!226 = fn_call_path_span !6 650 656
!227 = (!225 !226)
!228 = span !6 636 666
!229 = fn_call_path_span !6 636 649
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!231 = span !230 2370 2383
!232 = (!228 !229 !231)
!233 = (!228 !229)
!234 = (!228 !229 !231)
!235 = span !6 681 698
!236 = fn_call_path_span !6 681 698
!237 = (!235 !236)
!238 = span !6 685 686
!239 = span !6 695 696
!240 = span !146 13782 13786
!241 = span !146 13771 13819
!242 = fn_name_span !146 13778 13781
!243 = (!241 !242)
!244 = span !146 2506 2514
!245 = span !146 15186 15190
!246 = span !146 15175 15233
!247 = fn_name_span !146 15182 15185
!248 = (!246 !247)
!249 = span !146 15213 15227
!250 = fn_call_path_span !146 15222 15225
!251 = (!249 !250)
!252 = span !146 989 993
!253 = span !146 978 1030
!254 = fn_name_span !146 985 988
!255 = (!253 !254)
!256 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!257 = span !256 9026 9027
!258 = span !256 9009 9138
!259 = fn_name_span !256 9016 9022
!260 = (!258 !259 !59)
!261 = span !256 9082 9095
!262 = fn_call_path_span !256 9082 9093
!263 = (!261 !262)
!264 = span !256 9065 9096
!265 = span !256 9108 9114
!266 = span !256 9101 9115
!267 = fn_call_path_span !256 9103 9107
!268 = (!266 !267)
!269 = span !150 524 536
!270 = (!266 !267 !269)
!271 = span !150 5123 5146
!272 = fn_call_path_span !150 5129 5134
!273 = span !256 142 154
!274 = (!266 !267 !271 !272 !273)
!275 = (!266 !267 !271 !272)
!276 = (!266 !267 !271 !272)
!277 = span !256 365 389
!278 = fn_call_path_span !256 376 382
!279 = (!266 !267 !271 !272 !277 !278)
!280 = span !146 18398 18409
!281 = fn_call_path_span !146 18404 18407
!282 = (!266 !267 !271 !272 !277 !278 !280 !281)
!283 = span !146 18435 18436
!284 = span !146 18422 18436
!285 = fn_call_path_span !146 18432 18434
!286 = (!266 !267 !271 !272 !277 !278 !284 !285)
!287 = (!266 !267 !271 !272 !277 !278 !284)
!288 = (!266 !267 !271 !272 !277 !278 !244)
!289 = (!266 !267 !271 !272 !277 !278)
!290 = span !146 18572 18573
!291 = span !146 18560 18573
!292 = fn_call_path_span !146 18569 18571
!293 = (!266 !267 !271 !272 !277 !278 !291 !292)
!294 = (!266 !267 !271 !272 !277 !278 !291)
!295 = (!266 !267 !271 !272 !277 !278)
!296 = span !146 18588 18600
!297 = (!266 !267 !271 !272 !277 !278 !296)
!298 = span !146 18614 18620
!299 = (!266 !267 !271 !272 !277 !278 !298)
!300 = (!266 !267 !271 !272 !277 !278 !244)
!301 = (!266 !267 !271 !272 !277 !278)
!302 = span !146 18657 18677
!303 = fn_call_path_span !146 18666 18667
!304 = (!266 !267 !271 !272 !277 !278 !302 !303)
!305 = (!266 !267 !271 !272 !277 !278 !244)
!306 = (!266 !267 !271 !272 !277 !278)
!307 = (!266 !267 !271 !272 !277 !278 !190)
!308 = (!266 !267 !271 !272 !277 !278)
!309 = span !146 18808 18827
!310 = fn_call_path_span !146 18817 18825
!311 = (!266 !267 !271 !272 !277 !278 !309 !310)
!312 = span !146 18808 18838
!313 = fn_call_path_span !146 18828 18829
!314 = (!266 !267 !271 !272 !277 !278 !312 !313)
!315 = (!266 !267 !271 !272 !277 !278 !312)
!316 = (!266 !267 !271 !272 !277 !278 !190)
!317 = (!266 !267 !271 !272 !277 !278)
!318 = span !146 18928 18942
!319 = fn_call_path_span !146 18937 18940
!320 = (!266 !267 !271 !272 !277 !278 !318 !319)
!321 = (!266 !267 !271 !272 !277 !278 !190)
!322 = (!266 !267 !271 !272 !277 !278)
!323 = span !146 18944 18963
!324 = fn_call_path_span !146 18953 18961
!325 = (!266 !267 !271 !272 !277 !278 !323 !324)
!326 = span !146 18914 18974
!327 = fn_call_path_span !146 18914 18927
!328 = span !159 4168 4185
!329 = fn_call_path_span !159 4178 4179
!330 = (!266 !267 !271 !272 !277 !278 !326 !327 !328 !329)
!331 = (!266 !267 !271 !272 !277 !278 !326 !327 !328)
!332 = span !159 4210 4232
!333 = fn_call_path_span !159 4210 4221
!334 = (!266 !267 !271 !272 !277 !278 !326 !327 !332 !333 !160)
!335 = span !159 4253 4254
!336 = span !159 4245 4254
!337 = fn_call_path_span !159 4251 4252
!338 = (!266 !267 !271 !272 !277 !278 !326 !327 !336 !337)
!339 = (!266 !267 !271 !272 !277 !278 !326 !327 !336)
!340 = span !159 4269 4302
!341 = fn_call_path_span !159 4273 4286
!342 = (!266 !267 !271 !272 !277 !278 !326 !327 !340 !341 !199)
!343 = (!266 !267 !271 !272 !277 !278 !326 !327)
!344 = (!266 !267 !271 !272 !277 !278 !326 !327)
!345 = span !146 18869 19015
!346 = fn_call_path_span !146 18869 18890
!347 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!348 = span !347 2368 2392
!349 = fn_call_path_span !347 2374 2375
!350 = (!266 !267 !271 !272 !277 !278 !345 !346 !348 !349)
!351 = span !347 2362 2393
!352 = (!266 !267 !271 !272 !277 !278 !345 !346 !351)
!353 = (!266 !267 !271 !272 !277 !278 !345 !346 !351)
!354 = (!266 !267 !271 !272 !277 !278 !345 !346 !351)
!355 = (!266 !267 !271 !272 !277 !278 !345 !346 !351)
!356 = (!266 !267 !271 !272 !277 !278 !345 !346 !351)
!357 = (!266 !267 !271 !272 !277 !278 !345 !346)
!358 = span !347 2351 2394
!359 = fn_call_path_span !347 2351 2361
!360 = span !347 1248 1294
!361 = (!266 !267 !271 !272 !277 !278 !345 !346 !358 !359 !360)
!362 = span !146 18853 19016
!363 = (!266 !267 !271 !272 !277 !278 !362)
!364 = (!266 !267 !271 !272 !277 !278 !362)
!365 = span !146 19055 19064
!366 = (!266 !267 !271 !272 !277 !278 !365)
!367 = (!266 !267 !271 !272 !277 !278)
!368 = span !146 19040 19065
!369 = fn_call_path_span !146 19040 19054
!370 = span !146 2130 2153
!371 = fn_call_path_span !146 2136 2151
!372 = span !347 3959 3975
!373 = fn_call_path_span !347 3959 3969
!374 = span !347 1624 1675
!375 = (!266 !267 !271 !272 !277 !278 !368 !369 !370 !371 !372 !373 !374)
!376 = (!266 !267 !271 !272 !277 !278 !368 !369 !370 !371)
!377 = (!266 !267 !271 !272 !277 !278 !368 !369 !370 !371)
!378 = span !347 3976 3977
!379 = (!266 !267 !271 !272 !277 !278 !368 !369 !370 !371 !378)
!380 = (!266 !267 !271 !272 !277 !278 !368 !369 !370 !371)
!381 = span !146 2173 2189
!382 = fn_call_path_span !146 2173 2184
!383 = (!266 !267 !271 !272 !277 !278 !368 !369 !381 !382 !160)
!384 = span !146 2208 2209
!385 = span !146 2202 2209
!386 = fn_call_path_span !146 2206 2207
!387 = (!266 !267 !271 !272 !277 !278 !368 !369 !385 !386)
!388 = (!266 !267 !271 !272 !277 !278 !368 !369 !385)
!389 = span !146 2224 2235
!390 = fn_call_path_span !146 2230 2233
!391 = span !347 2911 2927
!392 = fn_call_path_span !347 2911 2921
!393 = (!266 !267 !271 !272 !277 !278 !368 !369 !389 !390 !391 !392 !374)
!394 = (!266 !267 !271 !272 !277 !278 !368 !369 !389 !390)
!395 = (!266 !267 !271 !272 !277 !278 !368 !369 !389 !390)
!396 = span !347 2928 2929
!397 = (!266 !267 !271 !272 !277 !278 !368 !369 !389 !390 !396)
!398 = (!266 !267 !271 !272 !277 !278 !368 !369 !389 !390)
!399 = span !146 2224 2259
!400 = fn_call_path_span !146 2236 2243
!401 = span !198 3413 3437
!402 = fn_call_path_span !198 3419 3420
!403 = (!266 !267 !271 !272 !277 !278 !368 !369 !399 !400 !401 !402)
!404 = span !198 3447 3522
!405 = (!266 !267 !271 !272 !277 !278 !368 !369 !399 !400 !404)
!406 = span !198 3496 3511
!407 = (!266 !267 !271 !272 !277 !278 !368 !369)
!408 = span !146 2279 2296
!409 = (!266 !267 !271 !272 !277 !278 !368 !369 !408)
!410 = (!266 !267 !271 !272 !277 !278 !368 !369)
!411 = (!266 !267 !271 !272 !277 !278 !368 !369 !408)
!412 = (!266 !267 !271 !272 !277 !278 !368 !369)
!413 = (!266 !267 !271 !272 !277 !278 !368 !369 !408)
!414 = (!266 !267 !271 !272 !277 !278 !368 !369)
!415 = span !146 19029 19065
!416 = (!266 !267 !271 !272 !277 !278 !415)
!417 = (!266 !267 !271 !272 !277 !278 !415)
!418 = (!266 !267 !271 !272 !277 !278)
!419 = (!266 !267 !271 !272 !277 !278 !190)
!420 = (!266 !267 !271 !272 !277 !278)
!421 = span !146 19100 19114
!422 = fn_call_path_span !146 19109 19112
!423 = (!266 !267 !271 !272 !277 !278 !421 !422)
!424 = span !146 19100 19143
!425 = fn_call_path_span !146 19115 19130
!426 = span !198 6721 6825
!427 = (!266 !267 !271 !272 !277 !278 !424 !425 !426)
!428 = span !198 6771 6789
!429 = (!266 !267 !271 !272 !277 !278)
!430 = span !146 19153 19164
!431 = fn_call_path_span !146 19159 19162
!432 = (!266 !267 !271 !272 !277 !278 !430 !431)
!433 = span !146 19153 19198
!434 = fn_call_path_span !146 19165 19178
!435 = (!266 !267 !271 !272 !277 !278 !433 !434 !199)
!436 = span !146 19244 19263
!437 = (!266 !267 !271 !272 !277 !278 !436)
!438 = (!266 !267 !271 !272 !277 !278 !436)
!439 = (!266 !267 !271 !272 !277 !278)
!440 = span !256 9121 9127
!441 = span !256 9121 9136
!442 = fn_call_path_span !256 9128 9134
!443 = span !256 440 476
!444 = (!441 !442 !443)
!445 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!446 = span !445 7904 7970
!447 = (!441 !442 !443)
!448 = span !256 508 521
!449 = (!441 !442 !448)
!450 = (!441 !442)
!451 = (!441 !442 !273)
!452 = span !256 540 556
!453 = fn_call_path_span !256 551 554
!454 = (!441 !442 !452 !453)
!455 = (!441 !442 !273)
!456 = span !256 577 593
!457 = fn_call_path_span !256 588 591
!458 = (!441 !442 !456 !457)
!459 = span !256 485 672
!460 = (!441 !442 !459)
!461 = span !256 619 638
!462 = span !256 177 263
!463 = fn_name_span !256 184 187
!464 = (!462 !463)
!465 = span !146 570 571
!466 = span !256 234 246
!467 = fn_call_path_span !256 234 244
!468 = span !146 3079 3094
!469 = fn_call_path_span !146 3079 3092
!470 = span !146 558 572
!471 = fn_call_path_span !146 558 569
!472 = (!466 !467 !468 !469 !470 !471 !160)
!473 = span !146 534 603
!474 = (!466 !467 !468 !469 !473)
!475 = (!466 !467 !468 !469)
!476 = (!466 !467 !468 !469 !473)
!477 = (!466 !467 !468 !469)
!478 = span !146 591 592
!479 = (!466 !467 !468 !469 !473)
!480 = (!466 !467 !468 !469)
!481 = span !146 3055 3125
!482 = (!466 !467 !481)
!483 = (!466 !467)
!484 = (!466 !467 !481)
!485 = span !146 3113 3114
!486 = (!466 !467 !481)
!487 = span !256 208 257
!488 = span !146 1097 1101
!489 = span !146 1081 1134
!490 = fn_name_span !146 1088 1096
!491 = (!489 !490)
!492 = span !146 418 426

// IR: [const-folding] Constant folding
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr { [u8; 64] }, secp256k1, !42
        v23 = load v22, !35
        v24 = get_local ptr { { { u64, u64 }, u64 } }, message, !44
        v25 = load v24, !35
        v26 = call address_7(v23, v25), !47
        v27 = get_local ptr { [u8; 64] }, secp256k1, !49
        v28 = load v27, !35
        v29 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v30 = load v29, !35
        v31 = call address_7(v28, v30), !54
        v32 = const unit ()
        ret () v32
    }

    pub fn eq_6(self !55: { [u8; 64] }, other !56: { [u8; 64] }) -> bool, !60 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !61
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !61
        v8 = const u64 64, !62
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !63 {
            meq    result r2 r3 r4, !64
        }
        ret bool v9
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = ptr_to_int message to u64, !111
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !112
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !113
        v27 = load v26, !114
        v28 = call ptr_21(v27), !117
        v29 = asm(bits: v28) -> b256 bits, !119 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !120
        store v29 to v32, !121
        v33 = load v19, !122
        br recover_8_block0(v33), !123

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        store v34 to v35, !128
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !130
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !131
        v39 = load v38, !132
        v40 = const u64 1, !129
        v41 = cmp eq v39 v40, !135
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !136

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !137
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !138
        v46 = load v45, !139
        v47 = get_local ptr b256, inner_value, !141
        store v46 to v47, !142
        v48 = get_local ptr b256, inner_value, !144
        v49 = load v48, !145
        v50 = const u64 32, !147
        v51 = asm(size: v50) -> u64 hp, !161 {
            aloc   size, !162
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !164
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !165
        store v51 to v54, !166
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !167
        store v50 to v56, !168
        v57 = load v52, !169
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !171
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !172
        store v57 to v60, !173
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !174
        v63 = const u64 0, !175
        store v63 to v62, !176
        v64 = load v58, !177
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        store v64 to v65, !180
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !182
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !183
        v69 = const u64 32, !184
        store v69 to v68, !185
        v70 = ptr_to_int v49 to u64, !187
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !189
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !191
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !193
        v76 = load v75, !194
        v77 = const u64 32, !195
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !200 {
            mcp    dst src len, !201
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !203
        v80 = load v79, !204
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !206
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !207
        store v80 to v83, !208
        v84 = load v81, !209
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !210
        store v84 to v87, !211
        v88 = load v0, !212
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !213
        store v88 to v89, !213
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !70
        v93 = load v92
        v94 = const u64 0, !70
        v95 = cmp eq v93 v94, !216
        cbr v95, block0(), block1(), !214

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !217
        revert v96, !222

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !223
        store v101 to v102, !223
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !73
        v106 = const u64 0, !73
        store v106 to v105, !73
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !224
        v108 = load v107
        v109 = call sha256_24(v108), !227
        v110 = get_local ptr { b256 }, __anon_02, !232
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !233
        store v109 to v112, !234
        v113 = load v110, !233
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !73
        store v113 to v116, !73
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !70
        v121 = load v120
        v122 = const u64 1, !70
        v123 = cmp eq v121 v122, !237
        cbr v123, block2(), block3(), !235

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !238
        store v128 to v129, !238
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !73
        v133 = const u64 1, !73
        store v133 to v132, !73
        v134 = get_local ptr { u64 }, e, !239
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !73
        store v135 to v138, !73
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !213
        revert v140, !213

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !240: { { u64, u64 }, u64 }) -> u64, !243 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !244
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !245: { { u64, u64 }, u64 }) -> u64, !248 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !190
        v4 = load v3
        v5 = call ptr_22(v4), !251
        ret u64 v5
    }

    pub fn ptr_22(self !252: { u64, u64 }) -> u64, !255 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !192
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !257: { { { u64, u64 }, u64 } }) -> b256, !260 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !263
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !264
        store v0 to v1, !264
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !265
        v3 = ptr_to_int s to u64, !268
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !268
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !270
        v7 = load v6, !268
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !274
        v10 = ptr_to_int v7 to u64, !275
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !276
        v12 = load v11, !279
        v13 = call len_20(v12), !282
        v14 = const u64 0, !283
        v15 = cmp eq v13 v14, !286
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !287

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !288
        v18 = load v17, !289
        v19 = const u64 0, !290
        v20 = cmp eq v18 v19, !293
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !294

        hash_26_write_27_append_28_block3():
        v21 = load v11, !295
        store v21 to v9, !297
        br hash_26_write_27_block0(), !299

        hash_26_write_27_append_28_block4():
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !300
        v24 = load v23, !301
        v25 = add v24, v13, !304
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !305
        v28 = load v27, !306
        v29 = const u64 0
        v30 = get_elem_ptr v9, ptr { u64, u64 }, v29, !307
        v31 = load v30, !308
        v32 = call capacity_31(v31), !311
        v33 = cmp lt v32 v25, !314
        cbr v33, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !315

        hash_26_write_27_append_28_block6():
        v34 = const u64 0
        v35 = get_elem_ptr v9, ptr { u64, u64 }, v34, !316
        v36 = load v35, !317
        v37 = call ptr_22(v36), !320
        v38 = const u64 0
        v39 = get_elem_ptr v9, ptr { u64, u64 }, v38, !321
        v40 = load v39, !322
        v41 = call capacity_31(v40), !325
        v42 = cmp gt v25 v41, !330
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !331

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v25) -> u64 hp, !334 {
            aloc   size, !162
        }
        v44 = const u64 0, !335
        v45 = cmp gt v41 v44, !338
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(), !339

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v37, len: v41) -> (), !342 {
            mcp    dst src len, !201
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block3(), !343

        hash_26_write_27_append_28_realloc_bytes_35_block3():
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !344

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = get_local ptr { u64, u64 }, __anon_0, !349
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !350
        store v47 to v50, !351
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !352
        store v25 to v52, !353
        v53 = load v48, !354
        v54 = asm(ptr: v53) -> slice ptr, !358 {
        }
        v55 = get_local ptr slice, new_slice, !360
        store v54 to v55, !361
        v56 = get_local ptr slice, new_slice, !363
        v57 = load v56, !364
        v58 = asm(ptr: v57) -> { u64, u64 } ptr, !372 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_000, !373
        store v58 to v59, !374
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr u64, v60, !376
        v62 = load v61, !377
        v63 = asm(size: v62) -> u64 hp, !380 {
            aloc   size, !162
        }
        v64 = const u64 0, !381
        v65 = cmp gt v62 v64, !384
        cbr v65, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !385

        hash_26_write_27_append_28_from_37_block0():
        v66 = asm(ptr: v57) -> { u64, u64 } ptr, !390 {
        }
        v67 = get_local ptr { u64, u64 }, __anon_01, !391
        store v66 to v67, !392
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !394
        v70 = load v69, !395
        v71 = asm(dst: v63, src: v70, len: v62) -> (), !399 {
            mcp    dst src len, !400
        }
        br hash_26_write_27_append_28_from_37_block2(), !401

        hash_26_write_27_append_28_from_37_block2():
        v72 = get_local ptr { u64, u64 }, __anon_00, !403
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !404
        store v63 to v74, !405
        v75 = const u64 1
        v76 = get_elem_ptr v72, ptr u64, v75, !406
        store v62 to v76, !407
        v77 = load v72, !408
        v78 = const u64 0
        v79 = get_elem_ptr v9, ptr { u64, u64 }, v78, !410
        store v77 to v79, !411
        br hash_26_write_27_append_28_block8(), !412

        hash_26_write_27_append_28_block8():
        v80 = const u64 0
        v81 = get_elem_ptr v9, ptr { u64, u64 }, v80, !413
        v82 = load v81, !414
        v83 = call ptr_22(v82), !417
        v84 = asm(ptr: v83, offset: v28, new) -> u64 new, !421 {
            add    new ptr offset, !422
        }
        v85 = load v11, !423
        v86 = call ptr_21(v85), !426
        v87 = asm(dst: v84, src: v86, len: v13) -> (), !429 {
            mcp    dst src len, !201
        }
        v88 = const u64 1
        v89 = get_elem_ptr v9, ptr u64, v88, !431
        store v25 to v89, !432
        br hash_26_write_27_block0(), !433

        hash_26_write_27_block0():
        v90 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !434
        v91 = load v90
        v92 = get_local ptr b256, result_buffer, !438
        v93 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !440
        store v93 to v92, !441
        v94 = get_local ptr b256, result_buffer, !443
        v95 = ptr_to_int v91 to u64, !444
        v96 = int_to_ptr v95 to ptr { { { u64, u64 }, u64 } }, !444
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { { u64, u64 }, u64 }, v97, !445
        v99 = load v98, !444
        v100 = call ptr_21(v99), !448
        v101 = ptr_to_int v91 to u64, !444
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !444
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !449
        v105 = load v104, !444
        v106 = call len_20(v105), !452
        v107 = asm(hash: v94, ptr: v100, bytes: v106) -> b256 hash, !454 {
            s256   hash ptr bytes, !455
        }
        ret b256 v107
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !458 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !459
        v1 = asm(size: v0) -> u64 hp, !466 {
            aloc   size, !162
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !468
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !469
        store v1 to v4, !470
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !471
        v7 = const u64 0, !472
        store v7 to v6, !473
        v8 = load v2, !474
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !476
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !477
        store v8 to v11, !478
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !477
        v14 = const u64 0, !479
        store v14 to v13, !480
        v15 = load v9, !477
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !481
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !481
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !482: { u64, u64 }) -> u64, !485 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !486
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1108 1117
!42 = (!4 !5 !41)
!43 = span !6 1126 1133
!44 = (!4 !5 !43)
!45 = span !6 1108 1134
!46 = fn_call_path_span !6 1118 1125
!47 = (!4 !5 !45 !46)
!48 = span !6 1148 1157
!49 = (!4 !5 !48)
!50 = span !6 1166 1173
!51 = (!4 !5 !50)
!52 = span !6 1148 1174
!53 = fn_call_path_span !6 1158 1165
!54 = (!4 !5 !52 !53)
!55 = span !6 805 809
!56 = span !6 811 816
!57 = span !6 799 968
!58 = fn_name_span !6 802 804
!59 = inline "never"
!60 = (!57 !58 !59)
!61 = span !6 218 232
!62 = span !6 889 891
!63 = span !6 842 962
!64 = span !6 907 926
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = (!70 !71 !77 !78)
!113 = (!70 !71 !77 !78 !82)
!114 = (!70 !71 !77 !78)
!115 = span !81 1657 1673
!116 = fn_call_path_span !81 1668 1671
!117 = (!70 !71 !77 !78 !115 !116)
!118 = span !81 1647 1709
!119 = (!70 !71 !77 !78 !118)
!120 = (!70 !71 !77 !78 !101)
!121 = (!70 !71 !77 !78 !101)
!122 = (!70 !71 !77 !78)
!123 = (!70 !71 !77 !78)
!124 = span !6 451 478
!125 = fn_call_path_span !6 470 476
!126 = span !100 4973 5075
!127 = (!70 !71 !124 !125 !126)
!128 = (!70 !71 !124 !125 !126)
!129 = span !100 4979 4983
!130 = (!70 !71 !124 !125 !129)
!131 = (!70 !71 !124 !125 !129)
!132 = (!70 !71 !124 !125)
!133 = span !100 4998 5037
!134 = fn_call_path_span !100 4998 5037
!135 = (!70 !71 !124 !125 !133 !134)
!136 = (!70 !71 !124 !125 !133)
!137 = (!70 !71 !124 !125 !129)
!138 = (!70 !71 !124 !125)
!139 = (!70 !71 !124 !125)
!140 = span !100 5009 5020
!141 = (!70 !71 !124 !125 !140)
!142 = (!70 !71 !124 !125 !140)
!143 = span !100 5025 5036
!144 = (!70 !71 !124 !125 !143)
!145 = (!70 !71 !124 !125)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!147 = span !146 28953 28955
!148 = span !6 435 479
!149 = fn_call_path_span !6 435 450
!150 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!151 = span !150 3133 3150
!152 = fn_call_path_span !150 3133 3144
!153 = span !146 28933 28956
!154 = fn_call_path_span !146 28933 28952
!155 = span !146 4157 4190
!156 = fn_call_path_span !146 4157 4180
!157 = span !146 863 884
!158 = fn_call_path_span !146 863 874
!159 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!160 = span !159 3315 3378
!161 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !157 !158 !160)
!162 = span !159 3342 3351
!163 = span !146 839 922
!164 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!165 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!166 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!167 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!168 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!169 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!170 = span !146 4133 4221
!171 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!172 = (!70 !71 !148 !149 !151 !152 !153 !154)
!173 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!174 = (!70 !71 !148 !149 !151 !152 !153 !154)
!175 = span !146 4209 4210
!176 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!177 = (!70 !71 !148 !149 !151 !152 !153 !154)
!178 = span !146 28917 28957
!179 = (!70 !71 !148 !149 !151 !152 !178)
!180 = (!70 !71 !148 !149 !151 !152 !178)
!181 = span !146 28966 28980
!182 = (!70 !71 !148 !149 !151 !152 !181)
!183 = (!70 !71 !148 !149 !151 !152 !181)
!184 = span !146 28978 28980
!185 = (!70 !71 !148 !149 !151 !152 !181)
!186 = span !146 29065 29077
!187 = (!70 !71 !148 !149 !151 !152 !186)
!188 = span !146 29092 29097
!189 = (!70 !71 !148 !149 !151 !152 !188)
!190 = span !146 2445 2458
!191 = (!70 !71 !148 !149 !151 !152 !190)
!192 = span !146 400 412
!193 = (!70 !71 !148 !149 !151 !152 !192)
!194 = (!70 !71 !148 !149 !151 !152)
!195 = span !146 29107 29109
!196 = span !146 29065 29110
!197 = fn_call_path_span !146 29078 29091
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!199 = span !198 5999 6076
!200 = (!70 !71 !148 !149 !151 !152 !196 !197 !199)
!201 = span !198 6050 6065
!202 = span !146 29121 29126
!203 = (!70 !71 !148 !149 !151 !152 !202)
!204 = (!70 !71 !148 !149 !151 !152)
!205 = span !150 3107 3161
!206 = (!70 !71 !148 !149 !205)
!207 = (!70 !71 !148 !149)
!208 = (!70 !71 !148 !149 !205)
!209 = (!70 !71 !148 !149)
!210 = (!70 !71 !73)
!211 = (!70 !71 !73)
!212 = (!70 !71)
!213 = span !6 576 708
!214 = span !6 618 668
!215 = fn_call_path_span !6 618 668
!216 = (!214 !215)
!217 = span !100 5062 5063
!218 = span !100 5055 5064
!219 = fn_call_path_span !100 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!70 !71 !124 !125 !218 !219 !221)
!223 = span !6 621 628
!224 = span !6 657 664
!225 = span !6 650 665
!226 = fn_call_path_span !6 650 656
!227 = (!225 !226)
!228 = span !6 636 666
!229 = fn_call_path_span !6 636 649
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!231 = span !230 2370 2383
!232 = (!228 !229 !231)
!233 = (!228 !229)
!234 = (!228 !229 !231)
!235 = span !6 681 698
!236 = fn_call_path_span !6 681 698
!237 = (!235 !236)
!238 = span !6 685 686
!239 = span !6 695 696
!240 = span !146 13782 13786
!241 = span !146 13771 13819
!242 = fn_name_span !146 13778 13781
!243 = (!241 !242)
!244 = span !146 2506 2514
!245 = span !146 15186 15190
!246 = span !146 15175 15233
!247 = fn_name_span !146 15182 15185
!248 = (!246 !247)
!249 = span !146 15213 15227
!250 = fn_call_path_span !146 15222 15225
!251 = (!249 !250)
!252 = span !146 989 993
!253 = span !146 978 1030
!254 = fn_name_span !146 985 988
!255 = (!253 !254)
!256 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!257 = span !256 9026 9027
!258 = span !256 9009 9138
!259 = fn_name_span !256 9016 9022
!260 = (!258 !259 !59)
!261 = span !256 9082 9095
!262 = fn_call_path_span !256 9082 9093
!263 = (!261 !262)
!264 = span !256 9065 9096
!265 = span !256 9108 9114
!266 = span !256 9101 9115
!267 = fn_call_path_span !256 9103 9107
!268 = (!266 !267)
!269 = span !150 524 536
!270 = (!266 !267 !269)
!271 = span !150 5123 5146
!272 = fn_call_path_span !150 5129 5134
!273 = span !256 142 154
!274 = (!266 !267 !271 !272 !273)
!275 = (!266 !267 !271 !272)
!276 = (!266 !267 !271 !272)
!277 = span !256 365 389
!278 = fn_call_path_span !256 376 382
!279 = (!266 !267 !271 !272 !277 !278)
!280 = span !146 18398 18409
!281 = fn_call_path_span !146 18404 18407
!282 = (!266 !267 !271 !272 !277 !278 !280 !281)
!283 = span !146 18435 18436
!284 = span !146 18422 18436
!285 = fn_call_path_span !146 18432 18434
!286 = (!266 !267 !271 !272 !277 !278 !284 !285)
!287 = (!266 !267 !271 !272 !277 !278 !284)
!288 = (!266 !267 !271 !272 !277 !278 !244)
!289 = (!266 !267 !271 !272 !277 !278)
!290 = span !146 18572 18573
!291 = span !146 18560 18573
!292 = fn_call_path_span !146 18569 18571
!293 = (!266 !267 !271 !272 !277 !278 !291 !292)
!294 = (!266 !267 !271 !272 !277 !278 !291)
!295 = (!266 !267 !271 !272 !277 !278)
!296 = span !146 18588 18600
!297 = (!266 !267 !271 !272 !277 !278 !296)
!298 = span !146 18614 18620
!299 = (!266 !267 !271 !272 !277 !278 !298)
!300 = (!266 !267 !271 !272 !277 !278 !244)
!301 = (!266 !267 !271 !272 !277 !278)
!302 = span !146 18657 18677
!303 = fn_call_path_span !146 18666 18667
!304 = (!266 !267 !271 !272 !277 !278 !302 !303)
!305 = (!266 !267 !271 !272 !277 !278 !244)
!306 = (!266 !267 !271 !272 !277 !278)
!307 = (!266 !267 !271 !272 !277 !278 !190)
!308 = (!266 !267 !271 !272 !277 !278)
!309 = span !146 18808 18827
!310 = fn_call_path_span !146 18817 18825
!311 = (!266 !267 !271 !272 !277 !278 !309 !310)
!312 = span !146 18808 18838
!313 = fn_call_path_span !146 18828 18829
!314 = (!266 !267 !271 !272 !277 !278 !312 !313)
!315 = (!266 !267 !271 !272 !277 !278 !312)
!316 = (!266 !267 !271 !272 !277 !278 !190)
!317 = (!266 !267 !271 !272 !277 !278)
!318 = span !146 18928 18942
!319 = fn_call_path_span !146 18937 18940
!320 = (!266 !267 !271 !272 !277 !278 !318 !319)
!321 = (!266 !267 !271 !272 !277 !278 !190)
!322 = (!266 !267 !271 !272 !277 !278)
!323 = span !146 18944 18963
!324 = fn_call_path_span !146 18953 18961
!325 = (!266 !267 !271 !272 !277 !278 !323 !324)
!326 = span !146 18914 18974
!327 = fn_call_path_span !146 18914 18927
!328 = span !159 4168 4185
!329 = fn_call_path_span !159 4178 4179
!330 = (!266 !267 !271 !272 !277 !278 !326 !327 !328 !329)
!331 = (!266 !267 !271 !272 !277 !278 !326 !327 !328)
!332 = span !159 4210 4232
!333 = fn_call_path_span !159 4210 4221
!334 = (!266 !267 !271 !272 !277 !278 !326 !327 !332 !333 !160)
!335 = span !159 4253 4254
!336 = span !159 4245 4254
!337 = fn_call_path_span !159 4251 4252
!338 = (!266 !267 !271 !272 !277 !278 !326 !327 !336 !337)
!339 = (!266 !267 !271 !272 !277 !278 !326 !327 !336)
!340 = span !159 4269 4302
!341 = fn_call_path_span !159 4273 4286
!342 = (!266 !267 !271 !272 !277 !278 !326 !327 !340 !341 !199)
!343 = (!266 !267 !271 !272 !277 !278 !326 !327)
!344 = (!266 !267 !271 !272 !277 !278 !326 !327)
!345 = span !146 18869 19015
!346 = fn_call_path_span !146 18869 18890
!347 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!348 = span !347 2362 2393
!349 = (!266 !267 !271 !272 !277 !278 !345 !346 !348)
!350 = (!266 !267 !271 !272 !277 !278 !345 !346 !348)
!351 = (!266 !267 !271 !272 !277 !278 !345 !346 !348)
!352 = (!266 !267 !271 !272 !277 !278 !345 !346 !348)
!353 = (!266 !267 !271 !272 !277 !278 !345 !346 !348)
!354 = (!266 !267 !271 !272 !277 !278 !345 !346)
!355 = span !347 2351 2394
!356 = fn_call_path_span !347 2351 2361
!357 = span !347 1248 1294
!358 = (!266 !267 !271 !272 !277 !278 !345 !346 !355 !356 !357)
!359 = span !146 18853 19016
!360 = (!266 !267 !271 !272 !277 !278 !359)
!361 = (!266 !267 !271 !272 !277 !278 !359)
!362 = span !146 19055 19064
!363 = (!266 !267 !271 !272 !277 !278 !362)
!364 = (!266 !267 !271 !272 !277 !278)
!365 = span !146 19040 19065
!366 = fn_call_path_span !146 19040 19054
!367 = span !146 2130 2153
!368 = fn_call_path_span !146 2136 2151
!369 = span !347 3959 3975
!370 = fn_call_path_span !347 3959 3969
!371 = span !347 1624 1675
!372 = (!266 !267 !271 !272 !277 !278 !365 !366 !367 !368 !369 !370 !371)
!373 = (!266 !267 !271 !272 !277 !278 !365 !366 !367 !368)
!374 = (!266 !267 !271 !272 !277 !278 !365 !366 !367 !368)
!375 = span !347 3976 3977
!376 = (!266 !267 !271 !272 !277 !278 !365 !366 !367 !368 !375)
!377 = (!266 !267 !271 !272 !277 !278 !365 !366 !367 !368)
!378 = span !146 2173 2189
!379 = fn_call_path_span !146 2173 2184
!380 = (!266 !267 !271 !272 !277 !278 !365 !366 !378 !379 !160)
!381 = span !146 2208 2209
!382 = span !146 2202 2209
!383 = fn_call_path_span !146 2206 2207
!384 = (!266 !267 !271 !272 !277 !278 !365 !366 !382 !383)
!385 = (!266 !267 !271 !272 !277 !278 !365 !366 !382)
!386 = span !146 2224 2235
!387 = fn_call_path_span !146 2230 2233
!388 = span !347 2911 2927
!389 = fn_call_path_span !347 2911 2921
!390 = (!266 !267 !271 !272 !277 !278 !365 !366 !386 !387 !388 !389 !371)
!391 = (!266 !267 !271 !272 !277 !278 !365 !366 !386 !387)
!392 = (!266 !267 !271 !272 !277 !278 !365 !366 !386 !387)
!393 = span !347 2928 2929
!394 = (!266 !267 !271 !272 !277 !278 !365 !366 !386 !387 !393)
!395 = (!266 !267 !271 !272 !277 !278 !365 !366 !386 !387)
!396 = span !146 2224 2259
!397 = fn_call_path_span !146 2236 2243
!398 = span !198 3447 3522
!399 = (!266 !267 !271 !272 !277 !278 !365 !366 !396 !397 !398)
!400 = span !198 3496 3511
!401 = (!266 !267 !271 !272 !277 !278 !365 !366)
!402 = span !146 2279 2296
!403 = (!266 !267 !271 !272 !277 !278 !365 !366 !402)
!404 = (!266 !267 !271 !272 !277 !278 !365 !366)
!405 = (!266 !267 !271 !272 !277 !278 !365 !366 !402)
!406 = (!266 !267 !271 !272 !277 !278 !365 !366)
!407 = (!266 !267 !271 !272 !277 !278 !365 !366 !402)
!408 = (!266 !267 !271 !272 !277 !278 !365 !366)
!409 = span !146 19029 19065
!410 = (!266 !267 !271 !272 !277 !278 !409)
!411 = (!266 !267 !271 !272 !277 !278 !409)
!412 = (!266 !267 !271 !272 !277 !278)
!413 = (!266 !267 !271 !272 !277 !278 !190)
!414 = (!266 !267 !271 !272 !277 !278)
!415 = span !146 19100 19114
!416 = fn_call_path_span !146 19109 19112
!417 = (!266 !267 !271 !272 !277 !278 !415 !416)
!418 = span !146 19100 19143
!419 = fn_call_path_span !146 19115 19130
!420 = span !198 6721 6825
!421 = (!266 !267 !271 !272 !277 !278 !418 !419 !420)
!422 = span !198 6771 6789
!423 = (!266 !267 !271 !272 !277 !278)
!424 = span !146 19153 19164
!425 = fn_call_path_span !146 19159 19162
!426 = (!266 !267 !271 !272 !277 !278 !424 !425)
!427 = span !146 19153 19198
!428 = fn_call_path_span !146 19165 19178
!429 = (!266 !267 !271 !272 !277 !278 !427 !428 !199)
!430 = span !146 19244 19263
!431 = (!266 !267 !271 !272 !277 !278 !430)
!432 = (!266 !267 !271 !272 !277 !278 !430)
!433 = (!266 !267 !271 !272 !277 !278)
!434 = span !256 9121 9127
!435 = span !256 9121 9136
!436 = fn_call_path_span !256 9128 9134
!437 = span !256 440 476
!438 = (!435 !436 !437)
!439 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!440 = span !439 7904 7970
!441 = (!435 !436 !437)
!442 = span !256 508 521
!443 = (!435 !436 !442)
!444 = (!435 !436)
!445 = (!435 !436 !273)
!446 = span !256 540 556
!447 = fn_call_path_span !256 551 554
!448 = (!435 !436 !446 !447)
!449 = (!435 !436 !273)
!450 = span !256 577 593
!451 = fn_call_path_span !256 588 591
!452 = (!435 !436 !450 !451)
!453 = span !256 485 672
!454 = (!435 !436 !453)
!455 = span !256 619 638
!456 = span !256 177 263
!457 = fn_name_span !256 184 187
!458 = (!456 !457)
!459 = span !146 570 571
!460 = span !256 234 246
!461 = fn_call_path_span !256 234 244
!462 = span !146 3079 3094
!463 = fn_call_path_span !146 3079 3092
!464 = span !146 558 572
!465 = fn_call_path_span !146 558 569
!466 = (!460 !461 !462 !463 !464 !465 !160)
!467 = span !146 534 603
!468 = (!460 !461 !462 !463 !467)
!469 = (!460 !461 !462 !463)
!470 = (!460 !461 !462 !463 !467)
!471 = (!460 !461 !462 !463)
!472 = span !146 591 592
!473 = (!460 !461 !462 !463 !467)
!474 = (!460 !461 !462 !463)
!475 = span !146 3055 3125
!476 = (!460 !461 !475)
!477 = (!460 !461)
!478 = (!460 !461 !475)
!479 = span !146 3113 3114
!480 = (!460 !461 !475)
!481 = span !256 208 257
!482 = span !146 1097 1101
!483 = span !146 1081 1134
!484 = fn_name_span !146 1088 1096
!485 = (!483 !484)
!486 = span !146 418 426

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr { [u8; 64] }, secp256k1, !42
        v23 = load v22, !35
        v24 = get_local ptr { { { u64, u64 }, u64 } }, message, !44
        v25 = load v24, !35
        v26 = call address_7(v23, v25), !47
        v27 = get_local ptr { [u8; 64] }, secp256k1, !49
        v28 = load v27, !35
        v29 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v30 = load v29, !35
        v31 = call address_7(v28, v30), !54
        v32 = const unit ()
        ret () v32
    }

    pub fn eq_6(self !55: { [u8; 64] }, other !56: { [u8; 64] }) -> bool, !60 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !61
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !61
        v8 = const u64 64, !62
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !63 {
            meq    result r2 r3 r4, !64
        }
        ret bool v9
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = ptr_to_int message to u64, !111
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !112
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !113
        v27 = load v26, !114
        v28 = call ptr_21(v27), !117
        v29 = asm(bits: v28) -> b256 bits, !119 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !120
        store v29 to v32, !121
        v33 = load v19, !122
        br recover_8_block0(v33), !123

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        store v34 to v35, !128
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !130
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !131
        v39 = load v38, !132
        v40 = const u64 1, !129
        v41 = cmp eq v39 v40, !135
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !136

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !137
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !138
        v46 = load v45, !139
        v47 = get_local ptr b256, inner_value, !141
        store v46 to v47, !142
        v48 = get_local ptr b256, inner_value, !144
        v49 = load v48, !145
        v50 = const u64 32, !147
        v51 = asm(size: v50) -> u64 hp, !161 {
            aloc   size, !162
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !164
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !165
        store v51 to v54, !166
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !167
        store v50 to v56, !168
        v57 = load v52, !169
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !171
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !172
        store v57 to v60, !173
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !174
        v63 = const u64 0, !175
        store v63 to v62, !176
        v64 = load v58, !177
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        store v64 to v65, !180
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !182
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !183
        v69 = const u64 32, !184
        store v69 to v68, !185
        v70 = ptr_to_int v49 to u64, !187
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !189
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !191
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !193
        v76 = load v75, !194
        v77 = const u64 32, !195
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !200 {
            mcp    dst src len, !201
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !203
        v80 = load v79, !204
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !206
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !207
        store v80 to v83, !208
        v84 = load v81, !209
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !210
        store v84 to v87, !211
        v88 = load v0, !212
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !213
        store v88 to v89, !213
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !70
        v93 = load v92
        v94 = const u64 0, !70
        v95 = cmp eq v93 v94, !216
        cbr v95, block0(), block1(), !214

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !217
        revert v96, !222

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !223
        store v101 to v102, !223
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !73
        v106 = const u64 0, !73
        store v106 to v105, !73
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !224
        v108 = load v107
        v109 = call sha256_24(v108), !227
        v110 = get_local ptr { b256 }, __anon_02, !232
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !233
        store v109 to v112, !234
        v113 = load v110, !233
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !73
        store v113 to v116, !73
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !70
        v121 = load v120
        v122 = const u64 1, !70
        v123 = cmp eq v121 v122, !237
        cbr v123, block2(), block3(), !235

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !238
        store v128 to v129, !238
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !73
        v133 = const u64 1, !73
        store v133 to v132, !73
        v134 = get_local ptr { u64 }, e, !239
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !73
        store v135 to v138, !73
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !213
        revert v140, !213

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !240: { { u64, u64 }, u64 }) -> u64, !243 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !244
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !245: { { u64, u64 }, u64 }) -> u64, !248 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !190
        v4 = load v3
        v5 = call ptr_22(v4), !251
        ret u64 v5
    }

    pub fn ptr_22(self !252: { u64, u64 }) -> u64, !255 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !192
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !257: { { { u64, u64 }, u64 } }) -> b256, !260 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !263
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !264
        store v0 to v1, !264
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !265
        v3 = ptr_to_int s to u64, !268
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !268
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !270
        v7 = load v6, !268
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !274
        v10 = ptr_to_int v7 to u64, !275
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !276
        v12 = load v11, !279
        v13 = call len_20(v12), !282
        v14 = const u64 0, !283
        v15 = cmp eq v13 v14, !286
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !287

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !288
        v18 = load v17, !289
        v19 = const u64 0, !290
        v20 = cmp eq v18 v19, !293
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !294

        hash_26_write_27_append_28_block3():
        v21 = load v11, !295
        store v21 to v9, !297
        br hash_26_write_27_block0(), !299

        hash_26_write_27_append_28_block4():
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !300
        v24 = load v23, !301
        v25 = add v24, v13, !304
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !305
        v28 = load v27, !306
        v29 = const u64 0
        v30 = get_elem_ptr v9, ptr { u64, u64 }, v29, !307
        v31 = load v30, !308
        v32 = call capacity_31(v31), !311
        v33 = cmp lt v32 v25, !314
        cbr v33, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !315

        hash_26_write_27_append_28_block6():
        v34 = const u64 0
        v35 = get_elem_ptr v9, ptr { u64, u64 }, v34, !316
        v36 = load v35, !317
        v37 = call ptr_22(v36), !320
        v38 = const u64 0
        v39 = get_elem_ptr v9, ptr { u64, u64 }, v38, !321
        v40 = load v39, !322
        v41 = call capacity_31(v40), !325
        v42 = cmp gt v25 v41, !330
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !331

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v25) -> u64 hp, !334 {
            aloc   size, !162
        }
        v44 = const u64 0, !335
        v45 = cmp gt v41 v44, !338
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !339

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v37, len: v41) -> (), !342 {
            mcp    dst src len, !201
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !343

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = get_local ptr { u64, u64 }, __anon_0, !348
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !349
        store v47 to v50, !350
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !351
        store v25 to v52, !352
        v53 = load v48, !353
        v54 = asm(ptr: v53) -> slice ptr, !357 {
        }
        v55 = get_local ptr slice, new_slice, !359
        store v54 to v55, !360
        v56 = get_local ptr slice, new_slice, !362
        v57 = load v56, !363
        v58 = asm(ptr: v57) -> { u64, u64 } ptr, !371 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_000, !372
        store v58 to v59, !373
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr u64, v60, !375
        v62 = load v61, !376
        v63 = asm(size: v62) -> u64 hp, !379 {
            aloc   size, !162
        }
        v64 = const u64 0, !380
        v65 = cmp gt v62 v64, !383
        cbr v65, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !384

        hash_26_write_27_append_28_from_37_block0():
        v66 = asm(ptr: v57) -> { u64, u64 } ptr, !389 {
        }
        v67 = get_local ptr { u64, u64 }, __anon_01, !390
        store v66 to v67, !391
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !393
        v70 = load v69, !394
        v71 = asm(dst: v63, src: v70, len: v62) -> (), !398 {
            mcp    dst src len, !399
        }
        br hash_26_write_27_append_28_from_37_block2(), !400

        hash_26_write_27_append_28_from_37_block2():
        v72 = get_local ptr { u64, u64 }, __anon_00, !402
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !403
        store v63 to v74, !404
        v75 = const u64 1
        v76 = get_elem_ptr v72, ptr u64, v75, !405
        store v62 to v76, !406
        v77 = load v72, !407
        v78 = const u64 0
        v79 = get_elem_ptr v9, ptr { u64, u64 }, v78, !409
        store v77 to v79, !410
        br hash_26_write_27_append_28_block8(), !411

        hash_26_write_27_append_28_block8():
        v80 = const u64 0
        v81 = get_elem_ptr v9, ptr { u64, u64 }, v80, !412
        v82 = load v81, !413
        v83 = call ptr_22(v82), !416
        v84 = asm(ptr: v83, offset: v28, new) -> u64 new, !420 {
            add    new ptr offset, !421
        }
        v85 = load v11, !422
        v86 = call ptr_21(v85), !425
        v87 = asm(dst: v84, src: v86, len: v13) -> (), !428 {
            mcp    dst src len, !201
        }
        v88 = const u64 1
        v89 = get_elem_ptr v9, ptr u64, v88, !430
        store v25 to v89, !431
        br hash_26_write_27_block0(), !432

        hash_26_write_27_block0():
        v90 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !433
        v91 = load v90
        v92 = get_local ptr b256, result_buffer, !437
        v93 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !439
        store v93 to v92, !440
        v94 = get_local ptr b256, result_buffer, !442
        v95 = ptr_to_int v91 to u64, !443
        v96 = int_to_ptr v95 to ptr { { { u64, u64 }, u64 } }, !443
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { { u64, u64 }, u64 }, v97, !444
        v99 = load v98, !443
        v100 = call ptr_21(v99), !447
        v101 = ptr_to_int v91 to u64, !443
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !443
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !448
        v105 = load v104, !443
        v106 = call len_20(v105), !451
        v107 = asm(hash: v94, ptr: v100, bytes: v106) -> b256 hash, !453 {
            s256   hash ptr bytes, !454
        }
        ret b256 v107
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !457 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !458
        v1 = asm(size: v0) -> u64 hp, !465 {
            aloc   size, !162
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !467
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !468
        store v1 to v4, !469
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !470
        v7 = const u64 0, !471
        store v7 to v6, !472
        v8 = load v2, !473
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !475
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !476
        store v8 to v11, !477
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !476
        v14 = const u64 0, !478
        store v14 to v13, !479
        v15 = load v9, !476
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !480
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !480
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !481: { u64, u64 }) -> u64, !484 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !485
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1108 1117
!42 = (!4 !5 !41)
!43 = span !6 1126 1133
!44 = (!4 !5 !43)
!45 = span !6 1108 1134
!46 = fn_call_path_span !6 1118 1125
!47 = (!4 !5 !45 !46)
!48 = span !6 1148 1157
!49 = (!4 !5 !48)
!50 = span !6 1166 1173
!51 = (!4 !5 !50)
!52 = span !6 1148 1174
!53 = fn_call_path_span !6 1158 1165
!54 = (!4 !5 !52 !53)
!55 = span !6 805 809
!56 = span !6 811 816
!57 = span !6 799 968
!58 = fn_name_span !6 802 804
!59 = inline "never"
!60 = (!57 !58 !59)
!61 = span !6 218 232
!62 = span !6 889 891
!63 = span !6 842 962
!64 = span !6 907 926
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = (!70 !71 !77 !78)
!113 = (!70 !71 !77 !78 !82)
!114 = (!70 !71 !77 !78)
!115 = span !81 1657 1673
!116 = fn_call_path_span !81 1668 1671
!117 = (!70 !71 !77 !78 !115 !116)
!118 = span !81 1647 1709
!119 = (!70 !71 !77 !78 !118)
!120 = (!70 !71 !77 !78 !101)
!121 = (!70 !71 !77 !78 !101)
!122 = (!70 !71 !77 !78)
!123 = (!70 !71 !77 !78)
!124 = span !6 451 478
!125 = fn_call_path_span !6 470 476
!126 = span !100 4973 5075
!127 = (!70 !71 !124 !125 !126)
!128 = (!70 !71 !124 !125 !126)
!129 = span !100 4979 4983
!130 = (!70 !71 !124 !125 !129)
!131 = (!70 !71 !124 !125 !129)
!132 = (!70 !71 !124 !125)
!133 = span !100 4998 5037
!134 = fn_call_path_span !100 4998 5037
!135 = (!70 !71 !124 !125 !133 !134)
!136 = (!70 !71 !124 !125 !133)
!137 = (!70 !71 !124 !125 !129)
!138 = (!70 !71 !124 !125)
!139 = (!70 !71 !124 !125)
!140 = span !100 5009 5020
!141 = (!70 !71 !124 !125 !140)
!142 = (!70 !71 !124 !125 !140)
!143 = span !100 5025 5036
!144 = (!70 !71 !124 !125 !143)
!145 = (!70 !71 !124 !125)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!147 = span !146 28953 28955
!148 = span !6 435 479
!149 = fn_call_path_span !6 435 450
!150 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!151 = span !150 3133 3150
!152 = fn_call_path_span !150 3133 3144
!153 = span !146 28933 28956
!154 = fn_call_path_span !146 28933 28952
!155 = span !146 4157 4190
!156 = fn_call_path_span !146 4157 4180
!157 = span !146 863 884
!158 = fn_call_path_span !146 863 874
!159 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!160 = span !159 3315 3378
!161 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !157 !158 !160)
!162 = span !159 3342 3351
!163 = span !146 839 922
!164 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!165 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!166 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!167 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!168 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!169 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!170 = span !146 4133 4221
!171 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!172 = (!70 !71 !148 !149 !151 !152 !153 !154)
!173 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!174 = (!70 !71 !148 !149 !151 !152 !153 !154)
!175 = span !146 4209 4210
!176 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!177 = (!70 !71 !148 !149 !151 !152 !153 !154)
!178 = span !146 28917 28957
!179 = (!70 !71 !148 !149 !151 !152 !178)
!180 = (!70 !71 !148 !149 !151 !152 !178)
!181 = span !146 28966 28980
!182 = (!70 !71 !148 !149 !151 !152 !181)
!183 = (!70 !71 !148 !149 !151 !152 !181)
!184 = span !146 28978 28980
!185 = (!70 !71 !148 !149 !151 !152 !181)
!186 = span !146 29065 29077
!187 = (!70 !71 !148 !149 !151 !152 !186)
!188 = span !146 29092 29097
!189 = (!70 !71 !148 !149 !151 !152 !188)
!190 = span !146 2445 2458
!191 = (!70 !71 !148 !149 !151 !152 !190)
!192 = span !146 400 412
!193 = (!70 !71 !148 !149 !151 !152 !192)
!194 = (!70 !71 !148 !149 !151 !152)
!195 = span !146 29107 29109
!196 = span !146 29065 29110
!197 = fn_call_path_span !146 29078 29091
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!199 = span !198 5999 6076
!200 = (!70 !71 !148 !149 !151 !152 !196 !197 !199)
!201 = span !198 6050 6065
!202 = span !146 29121 29126
!203 = (!70 !71 !148 !149 !151 !152 !202)
!204 = (!70 !71 !148 !149 !151 !152)
!205 = span !150 3107 3161
!206 = (!70 !71 !148 !149 !205)
!207 = (!70 !71 !148 !149)
!208 = (!70 !71 !148 !149 !205)
!209 = (!70 !71 !148 !149)
!210 = (!70 !71 !73)
!211 = (!70 !71 !73)
!212 = (!70 !71)
!213 = span !6 576 708
!214 = span !6 618 668
!215 = fn_call_path_span !6 618 668
!216 = (!214 !215)
!217 = span !100 5062 5063
!218 = span !100 5055 5064
!219 = fn_call_path_span !100 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!70 !71 !124 !125 !218 !219 !221)
!223 = span !6 621 628
!224 = span !6 657 664
!225 = span !6 650 665
!226 = fn_call_path_span !6 650 656
!227 = (!225 !226)
!228 = span !6 636 666
!229 = fn_call_path_span !6 636 649
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!231 = span !230 2370 2383
!232 = (!228 !229 !231)
!233 = (!228 !229)
!234 = (!228 !229 !231)
!235 = span !6 681 698
!236 = fn_call_path_span !6 681 698
!237 = (!235 !236)
!238 = span !6 685 686
!239 = span !6 695 696
!240 = span !146 13782 13786
!241 = span !146 13771 13819
!242 = fn_name_span !146 13778 13781
!243 = (!241 !242)
!244 = span !146 2506 2514
!245 = span !146 15186 15190
!246 = span !146 15175 15233
!247 = fn_name_span !146 15182 15185
!248 = (!246 !247)
!249 = span !146 15213 15227
!250 = fn_call_path_span !146 15222 15225
!251 = (!249 !250)
!252 = span !146 989 993
!253 = span !146 978 1030
!254 = fn_name_span !146 985 988
!255 = (!253 !254)
!256 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!257 = span !256 9026 9027
!258 = span !256 9009 9138
!259 = fn_name_span !256 9016 9022
!260 = (!258 !259 !59)
!261 = span !256 9082 9095
!262 = fn_call_path_span !256 9082 9093
!263 = (!261 !262)
!264 = span !256 9065 9096
!265 = span !256 9108 9114
!266 = span !256 9101 9115
!267 = fn_call_path_span !256 9103 9107
!268 = (!266 !267)
!269 = span !150 524 536
!270 = (!266 !267 !269)
!271 = span !150 5123 5146
!272 = fn_call_path_span !150 5129 5134
!273 = span !256 142 154
!274 = (!266 !267 !271 !272 !273)
!275 = (!266 !267 !271 !272)
!276 = (!266 !267 !271 !272)
!277 = span !256 365 389
!278 = fn_call_path_span !256 376 382
!279 = (!266 !267 !271 !272 !277 !278)
!280 = span !146 18398 18409
!281 = fn_call_path_span !146 18404 18407
!282 = (!266 !267 !271 !272 !277 !278 !280 !281)
!283 = span !146 18435 18436
!284 = span !146 18422 18436
!285 = fn_call_path_span !146 18432 18434
!286 = (!266 !267 !271 !272 !277 !278 !284 !285)
!287 = (!266 !267 !271 !272 !277 !278 !284)
!288 = (!266 !267 !271 !272 !277 !278 !244)
!289 = (!266 !267 !271 !272 !277 !278)
!290 = span !146 18572 18573
!291 = span !146 18560 18573
!292 = fn_call_path_span !146 18569 18571
!293 = (!266 !267 !271 !272 !277 !278 !291 !292)
!294 = (!266 !267 !271 !272 !277 !278 !291)
!295 = (!266 !267 !271 !272 !277 !278)
!296 = span !146 18588 18600
!297 = (!266 !267 !271 !272 !277 !278 !296)
!298 = span !146 18614 18620
!299 = (!266 !267 !271 !272 !277 !278 !298)
!300 = (!266 !267 !271 !272 !277 !278 !244)
!301 = (!266 !267 !271 !272 !277 !278)
!302 = span !146 18657 18677
!303 = fn_call_path_span !146 18666 18667
!304 = (!266 !267 !271 !272 !277 !278 !302 !303)
!305 = (!266 !267 !271 !272 !277 !278 !244)
!306 = (!266 !267 !271 !272 !277 !278)
!307 = (!266 !267 !271 !272 !277 !278 !190)
!308 = (!266 !267 !271 !272 !277 !278)
!309 = span !146 18808 18827
!310 = fn_call_path_span !146 18817 18825
!311 = (!266 !267 !271 !272 !277 !278 !309 !310)
!312 = span !146 18808 18838
!313 = fn_call_path_span !146 18828 18829
!314 = (!266 !267 !271 !272 !277 !278 !312 !313)
!315 = (!266 !267 !271 !272 !277 !278 !312)
!316 = (!266 !267 !271 !272 !277 !278 !190)
!317 = (!266 !267 !271 !272 !277 !278)
!318 = span !146 18928 18942
!319 = fn_call_path_span !146 18937 18940
!320 = (!266 !267 !271 !272 !277 !278 !318 !319)
!321 = (!266 !267 !271 !272 !277 !278 !190)
!322 = (!266 !267 !271 !272 !277 !278)
!323 = span !146 18944 18963
!324 = fn_call_path_span !146 18953 18961
!325 = (!266 !267 !271 !272 !277 !278 !323 !324)
!326 = span !146 18914 18974
!327 = fn_call_path_span !146 18914 18927
!328 = span !159 4168 4185
!329 = fn_call_path_span !159 4178 4179
!330 = (!266 !267 !271 !272 !277 !278 !326 !327 !328 !329)
!331 = (!266 !267 !271 !272 !277 !278 !326 !327 !328)
!332 = span !159 4210 4232
!333 = fn_call_path_span !159 4210 4221
!334 = (!266 !267 !271 !272 !277 !278 !326 !327 !332 !333 !160)
!335 = span !159 4253 4254
!336 = span !159 4245 4254
!337 = fn_call_path_span !159 4251 4252
!338 = (!266 !267 !271 !272 !277 !278 !326 !327 !336 !337)
!339 = (!266 !267 !271 !272 !277 !278 !326 !327 !336)
!340 = span !159 4269 4302
!341 = fn_call_path_span !159 4273 4286
!342 = (!266 !267 !271 !272 !277 !278 !326 !327 !340 !341 !199)
!343 = (!266 !267 !271 !272 !277 !278 !326 !327)
!344 = span !146 18869 19015
!345 = fn_call_path_span !146 18869 18890
!346 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!347 = span !346 2362 2393
!348 = (!266 !267 !271 !272 !277 !278 !344 !345 !347)
!349 = (!266 !267 !271 !272 !277 !278 !344 !345 !347)
!350 = (!266 !267 !271 !272 !277 !278 !344 !345 !347)
!351 = (!266 !267 !271 !272 !277 !278 !344 !345 !347)
!352 = (!266 !267 !271 !272 !277 !278 !344 !345 !347)
!353 = (!266 !267 !271 !272 !277 !278 !344 !345)
!354 = span !346 2351 2394
!355 = fn_call_path_span !346 2351 2361
!356 = span !346 1248 1294
!357 = (!266 !267 !271 !272 !277 !278 !344 !345 !354 !355 !356)
!358 = span !146 18853 19016
!359 = (!266 !267 !271 !272 !277 !278 !358)
!360 = (!266 !267 !271 !272 !277 !278 !358)
!361 = span !146 19055 19064
!362 = (!266 !267 !271 !272 !277 !278 !361)
!363 = (!266 !267 !271 !272 !277 !278)
!364 = span !146 19040 19065
!365 = fn_call_path_span !146 19040 19054
!366 = span !146 2130 2153
!367 = fn_call_path_span !146 2136 2151
!368 = span !346 3959 3975
!369 = fn_call_path_span !346 3959 3969
!370 = span !346 1624 1675
!371 = (!266 !267 !271 !272 !277 !278 !364 !365 !366 !367 !368 !369 !370)
!372 = (!266 !267 !271 !272 !277 !278 !364 !365 !366 !367)
!373 = (!266 !267 !271 !272 !277 !278 !364 !365 !366 !367)
!374 = span !346 3976 3977
!375 = (!266 !267 !271 !272 !277 !278 !364 !365 !366 !367 !374)
!376 = (!266 !267 !271 !272 !277 !278 !364 !365 !366 !367)
!377 = span !146 2173 2189
!378 = fn_call_path_span !146 2173 2184
!379 = (!266 !267 !271 !272 !277 !278 !364 !365 !377 !378 !160)
!380 = span !146 2208 2209
!381 = span !146 2202 2209
!382 = fn_call_path_span !146 2206 2207
!383 = (!266 !267 !271 !272 !277 !278 !364 !365 !381 !382)
!384 = (!266 !267 !271 !272 !277 !278 !364 !365 !381)
!385 = span !146 2224 2235
!386 = fn_call_path_span !146 2230 2233
!387 = span !346 2911 2927
!388 = fn_call_path_span !346 2911 2921
!389 = (!266 !267 !271 !272 !277 !278 !364 !365 !385 !386 !387 !388 !370)
!390 = (!266 !267 !271 !272 !277 !278 !364 !365 !385 !386)
!391 = (!266 !267 !271 !272 !277 !278 !364 !365 !385 !386)
!392 = span !346 2928 2929
!393 = (!266 !267 !271 !272 !277 !278 !364 !365 !385 !386 !392)
!394 = (!266 !267 !271 !272 !277 !278 !364 !365 !385 !386)
!395 = span !146 2224 2259
!396 = fn_call_path_span !146 2236 2243
!397 = span !198 3447 3522
!398 = (!266 !267 !271 !272 !277 !278 !364 !365 !395 !396 !397)
!399 = span !198 3496 3511
!400 = (!266 !267 !271 !272 !277 !278 !364 !365)
!401 = span !146 2279 2296
!402 = (!266 !267 !271 !272 !277 !278 !364 !365 !401)
!403 = (!266 !267 !271 !272 !277 !278 !364 !365)
!404 = (!266 !267 !271 !272 !277 !278 !364 !365 !401)
!405 = (!266 !267 !271 !272 !277 !278 !364 !365)
!406 = (!266 !267 !271 !272 !277 !278 !364 !365 !401)
!407 = (!266 !267 !271 !272 !277 !278 !364 !365)
!408 = span !146 19029 19065
!409 = (!266 !267 !271 !272 !277 !278 !408)
!410 = (!266 !267 !271 !272 !277 !278 !408)
!411 = (!266 !267 !271 !272 !277 !278)
!412 = (!266 !267 !271 !272 !277 !278 !190)
!413 = (!266 !267 !271 !272 !277 !278)
!414 = span !146 19100 19114
!415 = fn_call_path_span !146 19109 19112
!416 = (!266 !267 !271 !272 !277 !278 !414 !415)
!417 = span !146 19100 19143
!418 = fn_call_path_span !146 19115 19130
!419 = span !198 6721 6825
!420 = (!266 !267 !271 !272 !277 !278 !417 !418 !419)
!421 = span !198 6771 6789
!422 = (!266 !267 !271 !272 !277 !278)
!423 = span !146 19153 19164
!424 = fn_call_path_span !146 19159 19162
!425 = (!266 !267 !271 !272 !277 !278 !423 !424)
!426 = span !146 19153 19198
!427 = fn_call_path_span !146 19165 19178
!428 = (!266 !267 !271 !272 !277 !278 !426 !427 !199)
!429 = span !146 19244 19263
!430 = (!266 !267 !271 !272 !277 !278 !429)
!431 = (!266 !267 !271 !272 !277 !278 !429)
!432 = (!266 !267 !271 !272 !277 !278)
!433 = span !256 9121 9127
!434 = span !256 9121 9136
!435 = fn_call_path_span !256 9128 9134
!436 = span !256 440 476
!437 = (!434 !435 !436)
!438 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!439 = span !438 7904 7970
!440 = (!434 !435 !436)
!441 = span !256 508 521
!442 = (!434 !435 !441)
!443 = (!434 !435)
!444 = (!434 !435 !273)
!445 = span !256 540 556
!446 = fn_call_path_span !256 551 554
!447 = (!434 !435 !445 !446)
!448 = (!434 !435 !273)
!449 = span !256 577 593
!450 = fn_call_path_span !256 588 591
!451 = (!434 !435 !449 !450)
!452 = span !256 485 672
!453 = (!434 !435 !452)
!454 = span !256 619 638
!455 = span !256 177 263
!456 = fn_name_span !256 184 187
!457 = (!455 !456)
!458 = span !146 570 571
!459 = span !256 234 246
!460 = fn_call_path_span !256 234 244
!461 = span !146 3079 3094
!462 = fn_call_path_span !146 3079 3092
!463 = span !146 558 572
!464 = fn_call_path_span !146 558 569
!465 = (!459 !460 !461 !462 !463 !464 !160)
!466 = span !146 534 603
!467 = (!459 !460 !461 !462 !466)
!468 = (!459 !460 !461 !462)
!469 = (!459 !460 !461 !462 !466)
!470 = (!459 !460 !461 !462)
!471 = span !146 591 592
!472 = (!459 !460 !461 !462 !466)
!473 = (!459 !460 !461 !462)
!474 = span !146 3055 3125
!475 = (!459 !460 !474)
!476 = (!459 !460)
!477 = (!459 !460 !474)
!478 = span !146 3113 3114
!479 = (!459 !460 !474)
!480 = span !256 208 257
!481 = span !146 1097 1101
!482 = span !146 1081 1134
!483 = fn_name_span !146 1088 1096
!484 = (!482 !483)
!485 = span !146 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr { [u8; 64] }, secp256k1, !42
        v23 = load v22, !35
        v24 = get_local ptr { { { u64, u64 }, u64 } }, message, !44
        v25 = load v24, !35
        v26 = call address_7(v23, v25), !47
        v27 = get_local ptr { [u8; 64] }, secp256k1, !49
        v28 = load v27, !35
        v29 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v30 = load v29, !35
        v31 = call address_7(v28, v30), !54
        v32 = const unit ()
        ret () v32
    }

    pub fn eq_6(self !55: { [u8; 64] }, other !56: { [u8; 64] }) -> bool, !60 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !61
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !61
        v8 = const u64 64, !62
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !63 {
            meq    result r2 r3 r4, !64
        }
        ret bool v9
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = load v7, !111
        v24 = call ptr_21(v23), !114
        v25 = asm(bits: v24) -> b256 bits, !116 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v19, ptr b256, v26, v27, !117
        store v25 to v28, !118
        v29 = load v19, !119
        br recover_8_block0(v29), !120

        recover_8_block0(v30: { u64, ( () | b256 ) }):
        v31 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !124
        store v30 to v31, !125
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !128
        v35 = load v34, !129
        v36 = const u64 1, !126
        v37 = cmp eq v35 v36, !132
        cbr v37, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !133

        recover_8_unwrap_14_block0():
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !134
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v38, ptr b256, v39, v40, !135
        v42 = load v41, !136
        v43 = get_local ptr b256, inner_value, !138
        store v42 to v43, !139
        v44 = get_local ptr b256, inner_value, !141
        v45 = load v44, !142
        v46 = const u64 32, !144
        v47 = asm(size: v46) -> u64 hp, !158 {
            aloc   size, !159
        }
        v48 = get_local ptr { u64, u64 }, __anon_00000, !161
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !162
        store v47 to v50, !163
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !164
        store v46 to v52, !165
        v53 = load v48, !166
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !168
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !169
        store v53 to v56, !170
        v57 = const u64 1
        v58 = get_elem_ptr v54, ptr u64, v57, !171
        v59 = const u64 0, !172
        store v59 to v58, !173
        v60 = load v54, !174
        v61 = get_local ptr { { u64, u64 }, u64 }, bytes, !176
        store v60 to v61, !177
        v62 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !180
        v65 = const u64 32, !181
        store v65 to v64, !182
        v66 = ptr_to_int v45 to u64, !184
        v67 = get_local ptr { { u64, u64 }, u64 }, bytes, !186
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u64, u64 }, v68, !188
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !190
        v72 = load v71, !191
        v73 = const u64 32, !192
        v74 = asm(dst: v72, src: v66, len: v73) -> (), !197 {
            mcp    dst src len, !198
        }
        v75 = get_local ptr { { u64, u64 }, u64 }, bytes, !200
        v76 = load v75, !201
        v77 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !203
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr { { u64, u64 }, u64 }, v78, !204
        store v76 to v79, !205
        v80 = load v77, !206
        v81 = const u64 1
        v82 = const u64 0
        v83 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v81, v82, !207
        store v80 to v83, !208
        v84 = load v0, !209
        v85 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !210
        store v84 to v85, !210
        v86 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !70
        v89 = load v88
        v90 = const u64 0, !70
        v91 = cmp eq v89 v90, !213
        cbr v91, block0(), block1(), !211

        recover_8_unwrap_14_block1():
        v92 = const u64 0, !214
        revert v92, !219

        block0():
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v94 = const u64 1
        v95 = const u64 0
        v96 = get_elem_ptr v93, ptr { { { u64, u64 }, u64 } }, v94, v95
        v97 = load v96
        v98 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !220
        store v97 to v98, !220
        v99 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !73
        v102 = const u64 0, !73
        store v102 to v101, !73
        v103 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !221
        v104 = load v103
        v105 = call sha256_24(v104), !224
        v106 = get_local ptr { b256 }, __anon_02, !229
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr b256, v107, !230
        store v105 to v108, !231
        v109 = load v106, !230
        v110 = const u64 1
        v111 = const u64 0
        v112 = get_elem_ptr v99, ptr { b256 }, v110, v111, !73
        store v109 to v112, !73
        v113 = load v99
        br block5(v113)

        block1():
        v114 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr u64, v115, !70
        v117 = load v116
        v118 = const u64 1, !70
        v119 = cmp eq v117 v118, !234
        cbr v119, block2(), block3(), !232

        block2():
        v120 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v121 = const u64 1
        v122 = const u64 1
        v123 = get_elem_ptr v120, ptr { u64 }, v121, v122
        v124 = load v123
        v125 = get_local ptr { u64 }, e, !235
        store v124 to v125, !235
        v126 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !73
        v129 = const u64 1, !73
        store v129 to v128, !73
        v130 = get_local ptr { u64 }, e, !236
        v131 = load v130
        v132 = const u64 1
        v133 = const u64 1
        v134 = get_elem_ptr v126, ptr { u64 }, v132, v133, !73
        store v131 to v134, !73
        v135 = load v126
        br block5(v135)

        block3():
        v136 = const u64 14757395258967588866, !210
        revert v136, !210

        block5(v137: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v137
    }

    pub fn len_20(self !237: { { u64, u64 }, u64 }) -> u64, !240 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !242: { { u64, u64 }, u64 }) -> u64, !245 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !187
        v4 = load v3
        v5 = call ptr_22(v4), !248
        ret u64 v5
    }

    pub fn ptr_22(self !249: { u64, u64 }) -> u64, !252 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !189
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !254: { { { u64, u64 }, u64 } }) -> b256, !257 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !260
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !261
        store v0 to v1, !261
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !262
        v3 = ptr_to_int s to u64, !265
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !265
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !267
        v7 = load v6, !265
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !271
        v10 = ptr_to_int v7 to u64, !272
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !273
        v12 = load v11, !276
        v13 = call len_20(v12), !279
        v14 = const u64 0, !280
        v15 = cmp eq v13 v14, !283
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !284

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !285
        v18 = load v17, !286
        v19 = const u64 0, !287
        v20 = cmp eq v18 v19, !290
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !291

        hash_26_write_27_append_28_block3():
        v21 = load v11, !292
        store v21 to v9, !294
        br hash_26_write_27_block0(), !296

        hash_26_write_27_append_28_block4():
        v22 = load v17, !297
        v23 = add v22, v13, !300
        v24 = load v17, !301
        v25 = const u64 0
        v26 = get_elem_ptr v9, ptr { u64, u64 }, v25, !302
        v27 = load v26, !303
        v28 = call capacity_31(v27), !306
        v29 = cmp lt v28 v23, !309
        cbr v29, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !310

        hash_26_write_27_append_28_block6():
        v30 = load v26, !311
        v31 = call ptr_22(v30), !314
        v32 = load v26, !315
        v33 = call capacity_31(v32), !318
        v34 = cmp gt v23 v33, !323
        cbr v34, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v31), !324

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v35 = asm(size: v23) -> u64 hp, !327 {
            aloc   size, !159
        }
        v36 = const u64 0, !328
        v37 = cmp gt v33 v36, !331
        cbr v37, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !332

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v38 = asm(dst: v35, src: v31, len: v33) -> (), !335 {
            mcp    dst src len, !198
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !336

        hash_26_write_27_append_28_realloc_bytes_35_block5(v39: u64):
        v40 = get_local ptr { u64, u64 }, __anon_0, !341
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !342
        store v39 to v42, !343
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !344
        store v23 to v44, !345
        v45 = load v40, !346
        v46 = asm(ptr: v45) -> slice ptr, !350 {
        }
        v47 = get_local ptr slice, new_slice, !352
        store v46 to v47, !353
        v48 = get_local ptr slice, new_slice, !355
        v49 = load v48, !356
        v50 = asm(ptr: v49) -> { u64, u64 } ptr, !364 {
        }
        v51 = get_local ptr { u64, u64 }, __anon_000, !365
        store v50 to v51, !366
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr u64, v52, !368
        v54 = load v53, !369
        v55 = asm(size: v54) -> u64 hp, !372 {
            aloc   size, !159
        }
        v56 = const u64 0, !373
        v57 = cmp gt v54 v56, !376
        cbr v57, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !377

        hash_26_write_27_append_28_from_37_block0():
        v58 = asm(ptr: v49) -> { u64, u64 } ptr, !382 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_01, !383
        store v58 to v59, !384
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !386
        v62 = load v61, !387
        v63 = asm(dst: v55, src: v62, len: v54) -> (), !391 {
            mcp    dst src len, !392
        }
        br hash_26_write_27_append_28_from_37_block2(), !393

        hash_26_write_27_append_28_from_37_block2():
        v64 = get_local ptr { u64, u64 }, __anon_00, !395
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !396
        store v55 to v66, !397
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67, !398
        store v54 to v68, !399
        v69 = load v64, !400
        store v69 to v26, !402
        br hash_26_write_27_append_28_block8(), !403

        hash_26_write_27_append_28_block8():
        v70 = load v26, !404
        v71 = call ptr_22(v70), !407
        v72 = asm(ptr: v71, offset: v24, new) -> u64 new, !411 {
            add    new ptr offset, !412
        }
        v73 = load v11, !413
        v74 = call ptr_21(v73), !416
        v75 = asm(dst: v72, src: v74, len: v13) -> (), !419 {
            mcp    dst src len, !198
        }
        store v23 to v17, !421
        br hash_26_write_27_block0(), !422

        hash_26_write_27_block0():
        v76 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !423
        v77 = load v76
        v78 = get_local ptr b256, result_buffer, !427
        v79 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !429
        store v79 to v78, !430
        v80 = get_local ptr b256, result_buffer, !432
        v81 = ptr_to_int v77 to u64, !433
        v82 = int_to_ptr v81 to ptr { { { u64, u64 }, u64 } }, !433
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr { { u64, u64 }, u64 }, v83, !434
        v85 = load v84, !433
        v86 = call ptr_21(v85), !437
        v87 = load v84, !433
        v88 = call len_20(v87), !440
        v89 = asm(hash: v80, ptr: v86, bytes: v88) -> b256 hash, !442 {
            s256   hash ptr bytes, !443
        }
        ret b256 v89
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !446 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !447
        v1 = asm(size: v0) -> u64 hp, !454 {
            aloc   size, !159
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !456
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !457
        store v1 to v4, !458
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !459
        v7 = const u64 0, !460
        store v7 to v6, !461
        v8 = load v2, !462
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !464
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !465
        store v8 to v11, !466
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !465
        v14 = const u64 0, !467
        store v14 to v13, !468
        v15 = load v9, !465
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !469
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !469
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !470: { u64, u64 }) -> u64, !473 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !474
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1108 1117
!42 = (!4 !5 !41)
!43 = span !6 1126 1133
!44 = (!4 !5 !43)
!45 = span !6 1108 1134
!46 = fn_call_path_span !6 1118 1125
!47 = (!4 !5 !45 !46)
!48 = span !6 1148 1157
!49 = (!4 !5 !48)
!50 = span !6 1166 1173
!51 = (!4 !5 !50)
!52 = span !6 1148 1174
!53 = fn_call_path_span !6 1158 1165
!54 = (!4 !5 !52 !53)
!55 = span !6 805 809
!56 = span !6 811 816
!57 = span !6 799 968
!58 = fn_name_span !6 802 804
!59 = inline "never"
!60 = (!57 !58 !59)
!61 = span !6 218 232
!62 = span !6 889 891
!63 = span !6 842 962
!64 = span !6 907 926
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = span !81 1657 1673
!113 = fn_call_path_span !81 1668 1671
!114 = (!70 !71 !77 !78 !112 !113)
!115 = span !81 1647 1709
!116 = (!70 !71 !77 !78 !115)
!117 = (!70 !71 !77 !78 !101)
!118 = (!70 !71 !77 !78 !101)
!119 = (!70 !71 !77 !78)
!120 = (!70 !71 !77 !78)
!121 = span !6 451 478
!122 = fn_call_path_span !6 470 476
!123 = span !100 4973 5075
!124 = (!70 !71 !121 !122 !123)
!125 = (!70 !71 !121 !122 !123)
!126 = span !100 4979 4983
!127 = (!70 !71 !121 !122 !126)
!128 = (!70 !71 !121 !122 !126)
!129 = (!70 !71 !121 !122)
!130 = span !100 4998 5037
!131 = fn_call_path_span !100 4998 5037
!132 = (!70 !71 !121 !122 !130 !131)
!133 = (!70 !71 !121 !122 !130)
!134 = (!70 !71 !121 !122 !126)
!135 = (!70 !71 !121 !122)
!136 = (!70 !71 !121 !122)
!137 = span !100 5009 5020
!138 = (!70 !71 !121 !122 !137)
!139 = (!70 !71 !121 !122 !137)
!140 = span !100 5025 5036
!141 = (!70 !71 !121 !122 !140)
!142 = (!70 !71 !121 !122)
!143 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!144 = span !143 28953 28955
!145 = span !6 435 479
!146 = fn_call_path_span !6 435 450
!147 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!148 = span !147 3133 3150
!149 = fn_call_path_span !147 3133 3144
!150 = span !143 28933 28956
!151 = fn_call_path_span !143 28933 28952
!152 = span !143 4157 4190
!153 = fn_call_path_span !143 4157 4180
!154 = span !143 863 884
!155 = fn_call_path_span !143 863 874
!156 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!157 = span !156 3315 3378
!158 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !154 !155 !157)
!159 = span !156 3342 3351
!160 = span !143 839 922
!161 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!162 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!163 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!164 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!165 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!166 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!167 = span !143 4133 4221
!168 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!169 = (!70 !71 !145 !146 !148 !149 !150 !151)
!170 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!171 = (!70 !71 !145 !146 !148 !149 !150 !151)
!172 = span !143 4209 4210
!173 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!174 = (!70 !71 !145 !146 !148 !149 !150 !151)
!175 = span !143 28917 28957
!176 = (!70 !71 !145 !146 !148 !149 !175)
!177 = (!70 !71 !145 !146 !148 !149 !175)
!178 = span !143 28966 28980
!179 = (!70 !71 !145 !146 !148 !149 !178)
!180 = (!70 !71 !145 !146 !148 !149 !178)
!181 = span !143 28978 28980
!182 = (!70 !71 !145 !146 !148 !149 !178)
!183 = span !143 29065 29077
!184 = (!70 !71 !145 !146 !148 !149 !183)
!185 = span !143 29092 29097
!186 = (!70 !71 !145 !146 !148 !149 !185)
!187 = span !143 2445 2458
!188 = (!70 !71 !145 !146 !148 !149 !187)
!189 = span !143 400 412
!190 = (!70 !71 !145 !146 !148 !149 !189)
!191 = (!70 !71 !145 !146 !148 !149)
!192 = span !143 29107 29109
!193 = span !143 29065 29110
!194 = fn_call_path_span !143 29078 29091
!195 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!196 = span !195 5999 6076
!197 = (!70 !71 !145 !146 !148 !149 !193 !194 !196)
!198 = span !195 6050 6065
!199 = span !143 29121 29126
!200 = (!70 !71 !145 !146 !148 !149 !199)
!201 = (!70 !71 !145 !146 !148 !149)
!202 = span !147 3107 3161
!203 = (!70 !71 !145 !146 !202)
!204 = (!70 !71 !145 !146)
!205 = (!70 !71 !145 !146 !202)
!206 = (!70 !71 !145 !146)
!207 = (!70 !71 !73)
!208 = (!70 !71 !73)
!209 = (!70 !71)
!210 = span !6 576 708
!211 = span !6 618 668
!212 = fn_call_path_span !6 618 668
!213 = (!211 !212)
!214 = span !100 5062 5063
!215 = span !100 5055 5064
!216 = fn_call_path_span !100 5055 5061
!217 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!218 = span !217 757 771
!219 = (!70 !71 !121 !122 !215 !216 !218)
!220 = span !6 621 628
!221 = span !6 657 664
!222 = span !6 650 665
!223 = fn_call_path_span !6 650 656
!224 = (!222 !223)
!225 = span !6 636 666
!226 = fn_call_path_span !6 636 649
!227 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!228 = span !227 2370 2383
!229 = (!225 !226 !228)
!230 = (!225 !226)
!231 = (!225 !226 !228)
!232 = span !6 681 698
!233 = fn_call_path_span !6 681 698
!234 = (!232 !233)
!235 = span !6 685 686
!236 = span !6 695 696
!237 = span !143 13782 13786
!238 = span !143 13771 13819
!239 = fn_name_span !143 13778 13781
!240 = (!238 !239)
!241 = span !143 2506 2514
!242 = span !143 15186 15190
!243 = span !143 15175 15233
!244 = fn_name_span !143 15182 15185
!245 = (!243 !244)
!246 = span !143 15213 15227
!247 = fn_call_path_span !143 15222 15225
!248 = (!246 !247)
!249 = span !143 989 993
!250 = span !143 978 1030
!251 = fn_name_span !143 985 988
!252 = (!250 !251)
!253 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!254 = span !253 9026 9027
!255 = span !253 9009 9138
!256 = fn_name_span !253 9016 9022
!257 = (!255 !256 !59)
!258 = span !253 9082 9095
!259 = fn_call_path_span !253 9082 9093
!260 = (!258 !259)
!261 = span !253 9065 9096
!262 = span !253 9108 9114
!263 = span !253 9101 9115
!264 = fn_call_path_span !253 9103 9107
!265 = (!263 !264)
!266 = span !147 524 536
!267 = (!263 !264 !266)
!268 = span !147 5123 5146
!269 = fn_call_path_span !147 5129 5134
!270 = span !253 142 154
!271 = (!263 !264 !268 !269 !270)
!272 = (!263 !264 !268 !269)
!273 = (!263 !264 !268 !269)
!274 = span !253 365 389
!275 = fn_call_path_span !253 376 382
!276 = (!263 !264 !268 !269 !274 !275)
!277 = span !143 18398 18409
!278 = fn_call_path_span !143 18404 18407
!279 = (!263 !264 !268 !269 !274 !275 !277 !278)
!280 = span !143 18435 18436
!281 = span !143 18422 18436
!282 = fn_call_path_span !143 18432 18434
!283 = (!263 !264 !268 !269 !274 !275 !281 !282)
!284 = (!263 !264 !268 !269 !274 !275 !281)
!285 = (!263 !264 !268 !269 !274 !275 !241)
!286 = (!263 !264 !268 !269 !274 !275)
!287 = span !143 18572 18573
!288 = span !143 18560 18573
!289 = fn_call_path_span !143 18569 18571
!290 = (!263 !264 !268 !269 !274 !275 !288 !289)
!291 = (!263 !264 !268 !269 !274 !275 !288)
!292 = (!263 !264 !268 !269 !274 !275)
!293 = span !143 18588 18600
!294 = (!263 !264 !268 !269 !274 !275 !293)
!295 = span !143 18614 18620
!296 = (!263 !264 !268 !269 !274 !275 !295)
!297 = (!263 !264 !268 !269 !274 !275)
!298 = span !143 18657 18677
!299 = fn_call_path_span !143 18666 18667
!300 = (!263 !264 !268 !269 !274 !275 !298 !299)
!301 = (!263 !264 !268 !269 !274 !275)
!302 = (!263 !264 !268 !269 !274 !275 !187)
!303 = (!263 !264 !268 !269 !274 !275)
!304 = span !143 18808 18827
!305 = fn_call_path_span !143 18817 18825
!306 = (!263 !264 !268 !269 !274 !275 !304 !305)
!307 = span !143 18808 18838
!308 = fn_call_path_span !143 18828 18829
!309 = (!263 !264 !268 !269 !274 !275 !307 !308)
!310 = (!263 !264 !268 !269 !274 !275 !307)
!311 = (!263 !264 !268 !269 !274 !275)
!312 = span !143 18928 18942
!313 = fn_call_path_span !143 18937 18940
!314 = (!263 !264 !268 !269 !274 !275 !312 !313)
!315 = (!263 !264 !268 !269 !274 !275)
!316 = span !143 18944 18963
!317 = fn_call_path_span !143 18953 18961
!318 = (!263 !264 !268 !269 !274 !275 !316 !317)
!319 = span !143 18914 18974
!320 = fn_call_path_span !143 18914 18927
!321 = span !156 4168 4185
!322 = fn_call_path_span !156 4178 4179
!323 = (!263 !264 !268 !269 !274 !275 !319 !320 !321 !322)
!324 = (!263 !264 !268 !269 !274 !275 !319 !320 !321)
!325 = span !156 4210 4232
!326 = fn_call_path_span !156 4210 4221
!327 = (!263 !264 !268 !269 !274 !275 !319 !320 !325 !326 !157)
!328 = span !156 4253 4254
!329 = span !156 4245 4254
!330 = fn_call_path_span !156 4251 4252
!331 = (!263 !264 !268 !269 !274 !275 !319 !320 !329 !330)
!332 = (!263 !264 !268 !269 !274 !275 !319 !320 !329)
!333 = span !156 4269 4302
!334 = fn_call_path_span !156 4273 4286
!335 = (!263 !264 !268 !269 !274 !275 !319 !320 !333 !334 !196)
!336 = (!263 !264 !268 !269 !274 !275 !319 !320)
!337 = span !143 18869 19015
!338 = fn_call_path_span !143 18869 18890
!339 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!340 = span !339 2362 2393
!341 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!342 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!343 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!344 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!345 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!346 = (!263 !264 !268 !269 !274 !275 !337 !338)
!347 = span !339 2351 2394
!348 = fn_call_path_span !339 2351 2361
!349 = span !339 1248 1294
!350 = (!263 !264 !268 !269 !274 !275 !337 !338 !347 !348 !349)
!351 = span !143 18853 19016
!352 = (!263 !264 !268 !269 !274 !275 !351)
!353 = (!263 !264 !268 !269 !274 !275 !351)
!354 = span !143 19055 19064
!355 = (!263 !264 !268 !269 !274 !275 !354)
!356 = (!263 !264 !268 !269 !274 !275)
!357 = span !143 19040 19065
!358 = fn_call_path_span !143 19040 19054
!359 = span !143 2130 2153
!360 = fn_call_path_span !143 2136 2151
!361 = span !339 3959 3975
!362 = fn_call_path_span !339 3959 3969
!363 = span !339 1624 1675
!364 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360 !361 !362 !363)
!365 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360)
!366 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360)
!367 = span !339 3976 3977
!368 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360 !367)
!369 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360)
!370 = span !143 2173 2189
!371 = fn_call_path_span !143 2173 2184
!372 = (!263 !264 !268 !269 !274 !275 !357 !358 !370 !371 !157)
!373 = span !143 2208 2209
!374 = span !143 2202 2209
!375 = fn_call_path_span !143 2206 2207
!376 = (!263 !264 !268 !269 !274 !275 !357 !358 !374 !375)
!377 = (!263 !264 !268 !269 !274 !275 !357 !358 !374)
!378 = span !143 2224 2235
!379 = fn_call_path_span !143 2230 2233
!380 = span !339 2911 2927
!381 = fn_call_path_span !339 2911 2921
!382 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379 !380 !381 !363)
!383 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379)
!384 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379)
!385 = span !339 2928 2929
!386 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379 !385)
!387 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379)
!388 = span !143 2224 2259
!389 = fn_call_path_span !143 2236 2243
!390 = span !195 3447 3522
!391 = (!263 !264 !268 !269 !274 !275 !357 !358 !388 !389 !390)
!392 = span !195 3496 3511
!393 = (!263 !264 !268 !269 !274 !275 !357 !358)
!394 = span !143 2279 2296
!395 = (!263 !264 !268 !269 !274 !275 !357 !358 !394)
!396 = (!263 !264 !268 !269 !274 !275 !357 !358)
!397 = (!263 !264 !268 !269 !274 !275 !357 !358 !394)
!398 = (!263 !264 !268 !269 !274 !275 !357 !358)
!399 = (!263 !264 !268 !269 !274 !275 !357 !358 !394)
!400 = (!263 !264 !268 !269 !274 !275 !357 !358)
!401 = span !143 19029 19065
!402 = (!263 !264 !268 !269 !274 !275 !401)
!403 = (!263 !264 !268 !269 !274 !275)
!404 = (!263 !264 !268 !269 !274 !275)
!405 = span !143 19100 19114
!406 = fn_call_path_span !143 19109 19112
!407 = (!263 !264 !268 !269 !274 !275 !405 !406)
!408 = span !143 19100 19143
!409 = fn_call_path_span !143 19115 19130
!410 = span !195 6721 6825
!411 = (!263 !264 !268 !269 !274 !275 !408 !409 !410)
!412 = span !195 6771 6789
!413 = (!263 !264 !268 !269 !274 !275)
!414 = span !143 19153 19164
!415 = fn_call_path_span !143 19159 19162
!416 = (!263 !264 !268 !269 !274 !275 !414 !415)
!417 = span !143 19153 19198
!418 = fn_call_path_span !143 19165 19178
!419 = (!263 !264 !268 !269 !274 !275 !417 !418 !196)
!420 = span !143 19244 19263
!421 = (!263 !264 !268 !269 !274 !275 !420)
!422 = (!263 !264 !268 !269 !274 !275)
!423 = span !253 9121 9127
!424 = span !253 9121 9136
!425 = fn_call_path_span !253 9128 9134
!426 = span !253 440 476
!427 = (!424 !425 !426)
!428 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!429 = span !428 7904 7970
!430 = (!424 !425 !426)
!431 = span !253 508 521
!432 = (!424 !425 !431)
!433 = (!424 !425)
!434 = (!424 !425 !270)
!435 = span !253 540 556
!436 = fn_call_path_span !253 551 554
!437 = (!424 !425 !435 !436)
!438 = span !253 577 593
!439 = fn_call_path_span !253 588 591
!440 = (!424 !425 !438 !439)
!441 = span !253 485 672
!442 = (!424 !425 !441)
!443 = span !253 619 638
!444 = span !253 177 263
!445 = fn_name_span !253 184 187
!446 = (!444 !445)
!447 = span !143 570 571
!448 = span !253 234 246
!449 = fn_call_path_span !253 234 244
!450 = span !143 3079 3094
!451 = fn_call_path_span !143 3079 3092
!452 = span !143 558 572
!453 = fn_call_path_span !143 558 569
!454 = (!448 !449 !450 !451 !452 !453 !157)
!455 = span !143 534 603
!456 = (!448 !449 !450 !451 !455)
!457 = (!448 !449 !450 !451)
!458 = (!448 !449 !450 !451 !455)
!459 = (!448 !449 !450 !451)
!460 = span !143 591 592
!461 = (!448 !449 !450 !451 !455)
!462 = (!448 !449 !450 !451)
!463 = span !143 3055 3125
!464 = (!448 !449 !463)
!465 = (!448 !449)
!466 = (!448 !449 !463)
!467 = span !143 3113 3114
!468 = (!448 !449 !463)
!469 = span !253 208 257
!470 = span !143 1097 1101
!471 = span !143 1081 1134
!472 = fn_name_span !143 1088 1096
!473 = (!471 !472)
!474 = span !143 418 426

// IR: [const-demotion] Demotion of by-value constants to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = call eq_6(v18, v20), !40
        v22 = get_local ptr { [u8; 64] }, secp256k1, !42
        v23 = load v22, !35
        v24 = get_local ptr { { { u64, u64 }, u64 } }, message, !44
        v25 = load v24, !35
        v26 = call address_7(v23, v25), !47
        v27 = get_local ptr { [u8; 64] }, secp256k1, !49
        v28 = load v27, !35
        v29 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v30 = load v29, !35
        v31 = call address_7(v28, v30), !54
        v32 = const unit ()
        ret () v32
    }

    pub fn eq_6(self !55: { [u8; 64] }, other !56: { [u8; 64] }) -> bool, !60 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !61
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !61
        v8 = const u64 64, !62
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !63 {
            meq    result r2 r3 r4, !64
        }
        ret bool v9
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = load v7, !111
        v24 = call ptr_21(v23), !114
        v25 = asm(bits: v24) -> b256 bits, !116 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v19, ptr b256, v26, v27, !117
        store v25 to v28, !118
        v29 = load v19, !119
        br recover_8_block0(v29), !120

        recover_8_block0(v30: { u64, ( () | b256 ) }):
        v31 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !124
        store v30 to v31, !125
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !128
        v35 = load v34, !129
        v36 = const u64 1, !126
        v37 = cmp eq v35 v36, !132
        cbr v37, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !133

        recover_8_unwrap_14_block0():
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !134
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v38, ptr b256, v39, v40, !135
        v42 = load v41, !136
        v43 = get_local ptr b256, inner_value, !138
        store v42 to v43, !139
        v44 = get_local ptr b256, inner_value, !141
        v45 = load v44, !142
        v46 = const u64 32, !144
        v47 = asm(size: v46) -> u64 hp, !158 {
            aloc   size, !159
        }
        v48 = get_local ptr { u64, u64 }, __anon_00000, !161
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !162
        store v47 to v50, !163
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !164
        store v46 to v52, !165
        v53 = load v48, !166
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !168
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !169
        store v53 to v56, !170
        v57 = const u64 1
        v58 = get_elem_ptr v54, ptr u64, v57, !171
        v59 = const u64 0, !172
        store v59 to v58, !173
        v60 = load v54, !174
        v61 = get_local ptr { { u64, u64 }, u64 }, bytes, !176
        store v60 to v61, !177
        v62 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !180
        v65 = const u64 32, !181
        store v65 to v64, !182
        v66 = ptr_to_int v45 to u64, !184
        v67 = get_local ptr { { u64, u64 }, u64 }, bytes, !186
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u64, u64 }, v68, !188
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !190
        v72 = load v71, !191
        v73 = const u64 32, !192
        v74 = asm(dst: v72, src: v66, len: v73) -> (), !197 {
            mcp    dst src len, !198
        }
        v75 = get_local ptr { { u64, u64 }, u64 }, bytes, !200
        v76 = load v75, !201
        v77 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !203
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr { { u64, u64 }, u64 }, v78, !204
        store v76 to v79, !205
        v80 = load v77, !206
        v81 = const u64 1
        v82 = const u64 0
        v83 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v81, v82, !207
        store v80 to v83, !208
        v84 = load v0, !209
        v85 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !210
        store v84 to v85, !210
        v86 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !70
        v89 = load v88
        v90 = const u64 0, !70
        v91 = cmp eq v89 v90, !213
        cbr v91, block0(), block1(), !211

        recover_8_unwrap_14_block1():
        v92 = const u64 0, !214
        revert v92, !219

        block0():
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v94 = const u64 1
        v95 = const u64 0
        v96 = get_elem_ptr v93, ptr { { { u64, u64 }, u64 } }, v94, v95
        v97 = load v96
        v98 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !220
        store v97 to v98, !220
        v99 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !73
        v102 = const u64 0, !73
        store v102 to v101, !73
        v103 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !221
        v104 = load v103
        v105 = call sha256_24(v104), !224
        v106 = get_local ptr { b256 }, __anon_02, !229
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr b256, v107, !230
        store v105 to v108, !231
        v109 = load v106, !230
        v110 = const u64 1
        v111 = const u64 0
        v112 = get_elem_ptr v99, ptr { b256 }, v110, v111, !73
        store v109 to v112, !73
        v113 = load v99
        br block5(v113)

        block1():
        v114 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr u64, v115, !70
        v117 = load v116
        v118 = const u64 1, !70
        v119 = cmp eq v117 v118, !234
        cbr v119, block2(), block3(), !232

        block2():
        v120 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v121 = const u64 1
        v122 = const u64 1
        v123 = get_elem_ptr v120, ptr { u64 }, v121, v122
        v124 = load v123
        v125 = get_local ptr { u64 }, e, !235
        store v124 to v125, !235
        v126 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !73
        v129 = const u64 1, !73
        store v129 to v128, !73
        v130 = get_local ptr { u64 }, e, !236
        v131 = load v130
        v132 = const u64 1
        v133 = const u64 1
        v134 = get_elem_ptr v126, ptr { u64 }, v132, v133, !73
        store v131 to v134, !73
        v135 = load v126
        br block5(v135)

        block3():
        v136 = const u64 14757395258967588866, !210
        revert v136, !210

        block5(v137: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v137
    }

    pub fn len_20(self !237: { { u64, u64 }, u64 }) -> u64, !240 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !242: { { u64, u64 }, u64 }) -> u64, !245 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !187
        v4 = load v3
        v5 = call ptr_22(v4), !248
        ret u64 v5
    }

    pub fn ptr_22(self !249: { u64, u64 }) -> u64, !252 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !189
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !254: { { { u64, u64 }, u64 } }) -> b256, !257 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !260
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !261
        store v0 to v1, !261
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !262
        v3 = ptr_to_int s to u64, !265
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !265
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !267
        v7 = load v6, !265
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !271
        v10 = ptr_to_int v7 to u64, !272
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !273
        v12 = load v11, !276
        v13 = call len_20(v12), !279
        v14 = const u64 0, !280
        v15 = cmp eq v13 v14, !283
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !284

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !285
        v18 = load v17, !286
        v19 = const u64 0, !287
        v20 = cmp eq v18 v19, !290
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !291

        hash_26_write_27_append_28_block3():
        v21 = load v11, !292
        store v21 to v9, !294
        br hash_26_write_27_block0(), !296

        hash_26_write_27_append_28_block4():
        v22 = load v17, !297
        v23 = add v22, v13, !300
        v24 = load v17, !301
        v25 = const u64 0
        v26 = get_elem_ptr v9, ptr { u64, u64 }, v25, !302
        v27 = load v26, !303
        v28 = call capacity_31(v27), !306
        v29 = cmp lt v28 v23, !309
        cbr v29, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !310

        hash_26_write_27_append_28_block6():
        v30 = load v26, !311
        v31 = call ptr_22(v30), !314
        v32 = load v26, !315
        v33 = call capacity_31(v32), !318
        v34 = cmp gt v23 v33, !323
        cbr v34, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v31), !324

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v35 = asm(size: v23) -> u64 hp, !327 {
            aloc   size, !159
        }
        v36 = const u64 0, !328
        v37 = cmp gt v33 v36, !331
        cbr v37, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !332

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v38 = asm(dst: v35, src: v31, len: v33) -> (), !335 {
            mcp    dst src len, !198
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !336

        hash_26_write_27_append_28_realloc_bytes_35_block5(v39: u64):
        v40 = get_local ptr { u64, u64 }, __anon_0, !341
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !342
        store v39 to v42, !343
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !344
        store v23 to v44, !345
        v45 = load v40, !346
        v46 = asm(ptr: v45) -> slice ptr, !350 {
        }
        v47 = get_local ptr slice, new_slice, !352
        store v46 to v47, !353
        v48 = get_local ptr slice, new_slice, !355
        v49 = load v48, !356
        v50 = asm(ptr: v49) -> { u64, u64 } ptr, !364 {
        }
        v51 = get_local ptr { u64, u64 }, __anon_000, !365
        store v50 to v51, !366
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr u64, v52, !368
        v54 = load v53, !369
        v55 = asm(size: v54) -> u64 hp, !372 {
            aloc   size, !159
        }
        v56 = const u64 0, !373
        v57 = cmp gt v54 v56, !376
        cbr v57, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !377

        hash_26_write_27_append_28_from_37_block0():
        v58 = asm(ptr: v49) -> { u64, u64 } ptr, !382 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_01, !383
        store v58 to v59, !384
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !386
        v62 = load v61, !387
        v63 = asm(dst: v55, src: v62, len: v54) -> (), !391 {
            mcp    dst src len, !392
        }
        br hash_26_write_27_append_28_from_37_block2(), !393

        hash_26_write_27_append_28_from_37_block2():
        v64 = get_local ptr { u64, u64 }, __anon_00, !395
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !396
        store v55 to v66, !397
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67, !398
        store v54 to v68, !399
        v69 = load v64, !400
        store v69 to v26, !402
        br hash_26_write_27_append_28_block8(), !403

        hash_26_write_27_append_28_block8():
        v70 = load v26, !404
        v71 = call ptr_22(v70), !407
        v72 = asm(ptr: v71, offset: v24, new) -> u64 new, !411 {
            add    new ptr offset, !412
        }
        v73 = load v11, !413
        v74 = call ptr_21(v73), !416
        v75 = asm(dst: v72, src: v74, len: v13) -> (), !419 {
            mcp    dst src len, !198
        }
        store v23 to v17, !421
        br hash_26_write_27_block0(), !422

        hash_26_write_27_block0():
        v76 = get_local ptr b256, __const
        v77 = load v76
        v78 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !423
        v79 = load v78
        v80 = get_local ptr b256, result_buffer, !427
        store v77 to v80, !428
        v81 = get_local ptr b256, result_buffer, !430
        v82 = ptr_to_int v79 to u64, !431
        v83 = int_to_ptr v82 to ptr { { { u64, u64 }, u64 } }, !431
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr { { u64, u64 }, u64 }, v84, !432
        v86 = load v85, !431
        v87 = call ptr_21(v86), !435
        v88 = load v85, !431
        v89 = call len_20(v88), !438
        v90 = asm(hash: v81, ptr: v87, bytes: v89) -> b256 hash, !440 {
            s256   hash ptr bytes, !441
        }
        ret b256 v90
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !444 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !445
        v1 = asm(size: v0) -> u64 hp, !452 {
            aloc   size, !159
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !454
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !455
        store v1 to v4, !456
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !457
        v7 = const u64 0, !458
        store v7 to v6, !459
        v8 = load v2, !460
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !462
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !463
        store v8 to v11, !464
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !463
        v14 = const u64 0, !465
        store v14 to v13, !466
        v15 = load v9, !463
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !467
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !467
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !468: { u64, u64 }) -> u64, !471 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !472
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = span !6 1108 1117
!42 = (!4 !5 !41)
!43 = span !6 1126 1133
!44 = (!4 !5 !43)
!45 = span !6 1108 1134
!46 = fn_call_path_span !6 1118 1125
!47 = (!4 !5 !45 !46)
!48 = span !6 1148 1157
!49 = (!4 !5 !48)
!50 = span !6 1166 1173
!51 = (!4 !5 !50)
!52 = span !6 1148 1174
!53 = fn_call_path_span !6 1158 1165
!54 = (!4 !5 !52 !53)
!55 = span !6 805 809
!56 = span !6 811 816
!57 = span !6 799 968
!58 = fn_name_span !6 802 804
!59 = inline "never"
!60 = (!57 !58 !59)
!61 = span !6 218 232
!62 = span !6 889 891
!63 = span !6 842 962
!64 = span !6 907 926
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = span !81 1657 1673
!113 = fn_call_path_span !81 1668 1671
!114 = (!70 !71 !77 !78 !112 !113)
!115 = span !81 1647 1709
!116 = (!70 !71 !77 !78 !115)
!117 = (!70 !71 !77 !78 !101)
!118 = (!70 !71 !77 !78 !101)
!119 = (!70 !71 !77 !78)
!120 = (!70 !71 !77 !78)
!121 = span !6 451 478
!122 = fn_call_path_span !6 470 476
!123 = span !100 4973 5075
!124 = (!70 !71 !121 !122 !123)
!125 = (!70 !71 !121 !122 !123)
!126 = span !100 4979 4983
!127 = (!70 !71 !121 !122 !126)
!128 = (!70 !71 !121 !122 !126)
!129 = (!70 !71 !121 !122)
!130 = span !100 4998 5037
!131 = fn_call_path_span !100 4998 5037
!132 = (!70 !71 !121 !122 !130 !131)
!133 = (!70 !71 !121 !122 !130)
!134 = (!70 !71 !121 !122 !126)
!135 = (!70 !71 !121 !122)
!136 = (!70 !71 !121 !122)
!137 = span !100 5009 5020
!138 = (!70 !71 !121 !122 !137)
!139 = (!70 !71 !121 !122 !137)
!140 = span !100 5025 5036
!141 = (!70 !71 !121 !122 !140)
!142 = (!70 !71 !121 !122)
!143 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!144 = span !143 28953 28955
!145 = span !6 435 479
!146 = fn_call_path_span !6 435 450
!147 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!148 = span !147 3133 3150
!149 = fn_call_path_span !147 3133 3144
!150 = span !143 28933 28956
!151 = fn_call_path_span !143 28933 28952
!152 = span !143 4157 4190
!153 = fn_call_path_span !143 4157 4180
!154 = span !143 863 884
!155 = fn_call_path_span !143 863 874
!156 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!157 = span !156 3315 3378
!158 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !154 !155 !157)
!159 = span !156 3342 3351
!160 = span !143 839 922
!161 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!162 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!163 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!164 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!165 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!166 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!167 = span !143 4133 4221
!168 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!169 = (!70 !71 !145 !146 !148 !149 !150 !151)
!170 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!171 = (!70 !71 !145 !146 !148 !149 !150 !151)
!172 = span !143 4209 4210
!173 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!174 = (!70 !71 !145 !146 !148 !149 !150 !151)
!175 = span !143 28917 28957
!176 = (!70 !71 !145 !146 !148 !149 !175)
!177 = (!70 !71 !145 !146 !148 !149 !175)
!178 = span !143 28966 28980
!179 = (!70 !71 !145 !146 !148 !149 !178)
!180 = (!70 !71 !145 !146 !148 !149 !178)
!181 = span !143 28978 28980
!182 = (!70 !71 !145 !146 !148 !149 !178)
!183 = span !143 29065 29077
!184 = (!70 !71 !145 !146 !148 !149 !183)
!185 = span !143 29092 29097
!186 = (!70 !71 !145 !146 !148 !149 !185)
!187 = span !143 2445 2458
!188 = (!70 !71 !145 !146 !148 !149 !187)
!189 = span !143 400 412
!190 = (!70 !71 !145 !146 !148 !149 !189)
!191 = (!70 !71 !145 !146 !148 !149)
!192 = span !143 29107 29109
!193 = span !143 29065 29110
!194 = fn_call_path_span !143 29078 29091
!195 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!196 = span !195 5999 6076
!197 = (!70 !71 !145 !146 !148 !149 !193 !194 !196)
!198 = span !195 6050 6065
!199 = span !143 29121 29126
!200 = (!70 !71 !145 !146 !148 !149 !199)
!201 = (!70 !71 !145 !146 !148 !149)
!202 = span !147 3107 3161
!203 = (!70 !71 !145 !146 !202)
!204 = (!70 !71 !145 !146)
!205 = (!70 !71 !145 !146 !202)
!206 = (!70 !71 !145 !146)
!207 = (!70 !71 !73)
!208 = (!70 !71 !73)
!209 = (!70 !71)
!210 = span !6 576 708
!211 = span !6 618 668
!212 = fn_call_path_span !6 618 668
!213 = (!211 !212)
!214 = span !100 5062 5063
!215 = span !100 5055 5064
!216 = fn_call_path_span !100 5055 5061
!217 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!218 = span !217 757 771
!219 = (!70 !71 !121 !122 !215 !216 !218)
!220 = span !6 621 628
!221 = span !6 657 664
!222 = span !6 650 665
!223 = fn_call_path_span !6 650 656
!224 = (!222 !223)
!225 = span !6 636 666
!226 = fn_call_path_span !6 636 649
!227 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!228 = span !227 2370 2383
!229 = (!225 !226 !228)
!230 = (!225 !226)
!231 = (!225 !226 !228)
!232 = span !6 681 698
!233 = fn_call_path_span !6 681 698
!234 = (!232 !233)
!235 = span !6 685 686
!236 = span !6 695 696
!237 = span !143 13782 13786
!238 = span !143 13771 13819
!239 = fn_name_span !143 13778 13781
!240 = (!238 !239)
!241 = span !143 2506 2514
!242 = span !143 15186 15190
!243 = span !143 15175 15233
!244 = fn_name_span !143 15182 15185
!245 = (!243 !244)
!246 = span !143 15213 15227
!247 = fn_call_path_span !143 15222 15225
!248 = (!246 !247)
!249 = span !143 989 993
!250 = span !143 978 1030
!251 = fn_name_span !143 985 988
!252 = (!250 !251)
!253 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!254 = span !253 9026 9027
!255 = span !253 9009 9138
!256 = fn_name_span !253 9016 9022
!257 = (!255 !256 !59)
!258 = span !253 9082 9095
!259 = fn_call_path_span !253 9082 9093
!260 = (!258 !259)
!261 = span !253 9065 9096
!262 = span !253 9108 9114
!263 = span !253 9101 9115
!264 = fn_call_path_span !253 9103 9107
!265 = (!263 !264)
!266 = span !147 524 536
!267 = (!263 !264 !266)
!268 = span !147 5123 5146
!269 = fn_call_path_span !147 5129 5134
!270 = span !253 142 154
!271 = (!263 !264 !268 !269 !270)
!272 = (!263 !264 !268 !269)
!273 = (!263 !264 !268 !269)
!274 = span !253 365 389
!275 = fn_call_path_span !253 376 382
!276 = (!263 !264 !268 !269 !274 !275)
!277 = span !143 18398 18409
!278 = fn_call_path_span !143 18404 18407
!279 = (!263 !264 !268 !269 !274 !275 !277 !278)
!280 = span !143 18435 18436
!281 = span !143 18422 18436
!282 = fn_call_path_span !143 18432 18434
!283 = (!263 !264 !268 !269 !274 !275 !281 !282)
!284 = (!263 !264 !268 !269 !274 !275 !281)
!285 = (!263 !264 !268 !269 !274 !275 !241)
!286 = (!263 !264 !268 !269 !274 !275)
!287 = span !143 18572 18573
!288 = span !143 18560 18573
!289 = fn_call_path_span !143 18569 18571
!290 = (!263 !264 !268 !269 !274 !275 !288 !289)
!291 = (!263 !264 !268 !269 !274 !275 !288)
!292 = (!263 !264 !268 !269 !274 !275)
!293 = span !143 18588 18600
!294 = (!263 !264 !268 !269 !274 !275 !293)
!295 = span !143 18614 18620
!296 = (!263 !264 !268 !269 !274 !275 !295)
!297 = (!263 !264 !268 !269 !274 !275)
!298 = span !143 18657 18677
!299 = fn_call_path_span !143 18666 18667
!300 = (!263 !264 !268 !269 !274 !275 !298 !299)
!301 = (!263 !264 !268 !269 !274 !275)
!302 = (!263 !264 !268 !269 !274 !275 !187)
!303 = (!263 !264 !268 !269 !274 !275)
!304 = span !143 18808 18827
!305 = fn_call_path_span !143 18817 18825
!306 = (!263 !264 !268 !269 !274 !275 !304 !305)
!307 = span !143 18808 18838
!308 = fn_call_path_span !143 18828 18829
!309 = (!263 !264 !268 !269 !274 !275 !307 !308)
!310 = (!263 !264 !268 !269 !274 !275 !307)
!311 = (!263 !264 !268 !269 !274 !275)
!312 = span !143 18928 18942
!313 = fn_call_path_span !143 18937 18940
!314 = (!263 !264 !268 !269 !274 !275 !312 !313)
!315 = (!263 !264 !268 !269 !274 !275)
!316 = span !143 18944 18963
!317 = fn_call_path_span !143 18953 18961
!318 = (!263 !264 !268 !269 !274 !275 !316 !317)
!319 = span !143 18914 18974
!320 = fn_call_path_span !143 18914 18927
!321 = span !156 4168 4185
!322 = fn_call_path_span !156 4178 4179
!323 = (!263 !264 !268 !269 !274 !275 !319 !320 !321 !322)
!324 = (!263 !264 !268 !269 !274 !275 !319 !320 !321)
!325 = span !156 4210 4232
!326 = fn_call_path_span !156 4210 4221
!327 = (!263 !264 !268 !269 !274 !275 !319 !320 !325 !326 !157)
!328 = span !156 4253 4254
!329 = span !156 4245 4254
!330 = fn_call_path_span !156 4251 4252
!331 = (!263 !264 !268 !269 !274 !275 !319 !320 !329 !330)
!332 = (!263 !264 !268 !269 !274 !275 !319 !320 !329)
!333 = span !156 4269 4302
!334 = fn_call_path_span !156 4273 4286
!335 = (!263 !264 !268 !269 !274 !275 !319 !320 !333 !334 !196)
!336 = (!263 !264 !268 !269 !274 !275 !319 !320)
!337 = span !143 18869 19015
!338 = fn_call_path_span !143 18869 18890
!339 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!340 = span !339 2362 2393
!341 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!342 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!343 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!344 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!345 = (!263 !264 !268 !269 !274 !275 !337 !338 !340)
!346 = (!263 !264 !268 !269 !274 !275 !337 !338)
!347 = span !339 2351 2394
!348 = fn_call_path_span !339 2351 2361
!349 = span !339 1248 1294
!350 = (!263 !264 !268 !269 !274 !275 !337 !338 !347 !348 !349)
!351 = span !143 18853 19016
!352 = (!263 !264 !268 !269 !274 !275 !351)
!353 = (!263 !264 !268 !269 !274 !275 !351)
!354 = span !143 19055 19064
!355 = (!263 !264 !268 !269 !274 !275 !354)
!356 = (!263 !264 !268 !269 !274 !275)
!357 = span !143 19040 19065
!358 = fn_call_path_span !143 19040 19054
!359 = span !143 2130 2153
!360 = fn_call_path_span !143 2136 2151
!361 = span !339 3959 3975
!362 = fn_call_path_span !339 3959 3969
!363 = span !339 1624 1675
!364 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360 !361 !362 !363)
!365 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360)
!366 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360)
!367 = span !339 3976 3977
!368 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360 !367)
!369 = (!263 !264 !268 !269 !274 !275 !357 !358 !359 !360)
!370 = span !143 2173 2189
!371 = fn_call_path_span !143 2173 2184
!372 = (!263 !264 !268 !269 !274 !275 !357 !358 !370 !371 !157)
!373 = span !143 2208 2209
!374 = span !143 2202 2209
!375 = fn_call_path_span !143 2206 2207
!376 = (!263 !264 !268 !269 !274 !275 !357 !358 !374 !375)
!377 = (!263 !264 !268 !269 !274 !275 !357 !358 !374)
!378 = span !143 2224 2235
!379 = fn_call_path_span !143 2230 2233
!380 = span !339 2911 2927
!381 = fn_call_path_span !339 2911 2921
!382 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379 !380 !381 !363)
!383 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379)
!384 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379)
!385 = span !339 2928 2929
!386 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379 !385)
!387 = (!263 !264 !268 !269 !274 !275 !357 !358 !378 !379)
!388 = span !143 2224 2259
!389 = fn_call_path_span !143 2236 2243
!390 = span !195 3447 3522
!391 = (!263 !264 !268 !269 !274 !275 !357 !358 !388 !389 !390)
!392 = span !195 3496 3511
!393 = (!263 !264 !268 !269 !274 !275 !357 !358)
!394 = span !143 2279 2296
!395 = (!263 !264 !268 !269 !274 !275 !357 !358 !394)
!396 = (!263 !264 !268 !269 !274 !275 !357 !358)
!397 = (!263 !264 !268 !269 !274 !275 !357 !358 !394)
!398 = (!263 !264 !268 !269 !274 !275 !357 !358)
!399 = (!263 !264 !268 !269 !274 !275 !357 !358 !394)
!400 = (!263 !264 !268 !269 !274 !275 !357 !358)
!401 = span !143 19029 19065
!402 = (!263 !264 !268 !269 !274 !275 !401)
!403 = (!263 !264 !268 !269 !274 !275)
!404 = (!263 !264 !268 !269 !274 !275)
!405 = span !143 19100 19114
!406 = fn_call_path_span !143 19109 19112
!407 = (!263 !264 !268 !269 !274 !275 !405 !406)
!408 = span !143 19100 19143
!409 = fn_call_path_span !143 19115 19130
!410 = span !195 6721 6825
!411 = (!263 !264 !268 !269 !274 !275 !408 !409 !410)
!412 = span !195 6771 6789
!413 = (!263 !264 !268 !269 !274 !275)
!414 = span !143 19153 19164
!415 = fn_call_path_span !143 19159 19162
!416 = (!263 !264 !268 !269 !274 !275 !414 !415)
!417 = span !143 19153 19198
!418 = fn_call_path_span !143 19165 19178
!419 = (!263 !264 !268 !269 !274 !275 !417 !418 !196)
!420 = span !143 19244 19263
!421 = (!263 !264 !268 !269 !274 !275 !420)
!422 = (!263 !264 !268 !269 !274 !275)
!423 = span !253 9121 9127
!424 = span !253 9121 9136
!425 = fn_call_path_span !253 9128 9134
!426 = span !253 440 476
!427 = (!424 !425 !426)
!428 = (!424 !425 !426)
!429 = span !253 508 521
!430 = (!424 !425 !429)
!431 = (!424 !425)
!432 = (!424 !425 !270)
!433 = span !253 540 556
!434 = fn_call_path_span !253 551 554
!435 = (!424 !425 !433 !434)
!436 = span !253 577 593
!437 = fn_call_path_span !253 588 591
!438 = (!424 !425 !436 !437)
!439 = span !253 485 672
!440 = (!424 !425 !439)
!441 = span !253 619 638
!442 = span !253 177 263
!443 = fn_name_span !253 184 187
!444 = (!442 !443)
!445 = span !143 570 571
!446 = span !253 234 246
!447 = fn_call_path_span !253 234 244
!448 = span !143 3079 3094
!449 = fn_call_path_span !143 3079 3092
!450 = span !143 558 572
!451 = fn_call_path_span !143 558 569
!452 = (!446 !447 !448 !449 !450 !451 !157)
!453 = span !143 534 603
!454 = (!446 !447 !448 !449 !453)
!455 = (!446 !447 !448 !449)
!456 = (!446 !447 !448 !449 !453)
!457 = (!446 !447 !448 !449)
!458 = span !143 591 592
!459 = (!446 !447 !448 !449 !453)
!460 = (!446 !447 !448 !449)
!461 = span !143 3055 3125
!462 = (!446 !447 !461)
!463 = (!446 !447)
!464 = (!446 !447 !461)
!465 = span !143 3113 3114
!466 = (!446 !447 !461)
!467 = span !253 208 257
!468 = span !143 1097 1101
!469 = span !143 1081 1134
!470 = fn_name_span !143 1088 1096
!471 = (!469 !470)
!472 = span !143 418 426

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { [u8; 64] } __tmp_arg
        local { [u8; 64] } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { [u8; 64] } __tmp_arg3
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = get_local ptr { [u8; 64] }, __tmp_arg
        store v18 to v21
        v22 = get_local ptr { [u8; 64] }, __tmp_arg0
        store v20 to v22
        v23 = call eq_6(v21, v22)
        v24 = get_local ptr { [u8; 64] }, secp256k1, !39
        v25 = load v24, !35
        v26 = get_local ptr { { { u64, u64 }, u64 } }, message, !41
        v27 = load v26, !35
        v28 = get_local ptr { [u8; 64] }, __tmp_arg1
        store v25 to v28
        v29 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        store v27 to v29
        v30 = call address_7(v28, v29)
        v31 = get_local ptr { [u8; 64] }, secp256k1, !43
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !45
        v34 = load v33, !35
        v35 = get_local ptr { [u8; 64] }, __tmp_arg3
        store v32 to v35
        v36 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        store v34 to v36
        v37 = call address_7(v35, v36)
        v38 = const unit ()
        ret () v38
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !49 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = load self
        v1 = load other
        v2 = ptr_to_int v0 to u64
        v3 = int_to_ptr v2 to ptr { [u8; 64] }
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr [u8; 64], v4, !50
        v6 = ptr_to_int v1 to u64
        v7 = int_to_ptr v6 to ptr { [u8; 64] }
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr [u8; 64], v8, !50
        v10 = const u64 64, !51
        v11 = asm(result, r2: v5, r3: v9, r4: v10) -> bool result, !52 {
            meq    result r2 r3 r4, !53
        }
        ret bool v11
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !56 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !61
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !62
        v5 = const u64 0, !60
        store v5 to v4, !63
        v6 = ptr_to_int v1 to u64, !66
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !67
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !70
        v10 = load v9, !71
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v10 to v11
        v12 = call len_20(v11)
        v13 = const u64 32, !72
        v14 = cmp eq v12 v13, !78
        v15 = const bool false, !79
        v16 = cmp eq v14 v15, !82
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !83

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !86
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !87
        v20 = const u64 0, !85
        store v20 to v19, !88
        v21 = load v17, !89
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v21 to v22
        br recover_8_block0(v22), !91

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !92
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !93
        v26 = const u64 1, !85
        store v26 to v25, !94
        v27 = load v9, !95
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v27 to v28
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> b256 bits, !97 {
        }
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v23, ptr b256, v31, v32, !98
        store v30 to v33, !99
        v34 = load v23, !100
        v35 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v34 to v35
        br recover_8_block0(v35), !101

        recover_8_block0(v36: ptr { u64, ( () | b256 ) }):
        v37 = load v36
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !105
        store v37 to v38, !106
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !108
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !109
        v42 = load v41, !110
        v43 = const u64 1, !107
        v44 = cmp eq v42 v43, !113
        cbr v44, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !114

        recover_8_unwrap_14_block0():
        v45 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !115
        v46 = const u64 1
        v47 = const u64 1
        v48 = get_elem_ptr v45, ptr b256, v46, v47, !116
        v49 = load v48, !117
        v50 = get_local ptr b256, inner_value, !119
        store v49 to v50, !120
        v51 = get_local ptr b256, inner_value, !122
        v52 = load v51, !123
        v53 = const u64 32, !125
        v54 = asm(size: v53) -> u64 hp, !139 {
            aloc   size, !140
        }
        v55 = get_local ptr { u64, u64 }, __anon_00000, !142
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !143
        store v54 to v57, !144
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !145
        store v53 to v59, !146
        v60 = load v55, !147
        v61 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !149
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { u64, u64 }, v62, !150
        store v60 to v63, !151
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !152
        v66 = const u64 0, !153
        store v66 to v65, !154
        v67 = load v61, !155
        v68 = get_local ptr { { u64, u64 }, u64 }, bytes, !157
        store v67 to v68, !158
        v69 = get_local ptr { { u64, u64 }, u64 }, bytes, !160
        v70 = const u64 1
        v71 = get_elem_ptr v69, ptr u64, v70, !161
        v72 = const u64 32, !162
        store v72 to v71, !163
        v73 = ptr_to_int v52 to u64, !165
        v74 = get_local ptr { { u64, u64 }, u64 }, bytes, !167
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr { u64, u64 }, v75, !169
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !171
        v79 = load v78, !172
        v80 = const u64 32, !173
        v81 = asm(dst: v79, src: v73, len: v80) -> (), !178 {
            mcp    dst src len, !179
        }
        v82 = get_local ptr { { u64, u64 }, u64 }, bytes, !181
        v83 = load v82, !182
        v84 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !184
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { { u64, u64 }, u64 }, v85, !185
        store v83 to v86, !186
        v87 = load v84, !187
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v88, v89, !188
        store v87 to v90, !189
        v91 = load v2, !190
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !191
        store v91 to v92, !191
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !57
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !57
        v96 = load v95
        v97 = const u64 0, !57
        v98 = cmp eq v96 v97, !194
        cbr v98, block0(), block1(), !192

        recover_8_unwrap_14_block1():
        v99 = const u64 0, !195
        revert v99, !200

        block0():
        v100 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !57
        v101 = const u64 1
        v102 = const u64 0
        v103 = get_elem_ptr v100, ptr { { { u64, u64 }, u64 } }, v101, v102
        v104 = load v103
        v105 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !201
        store v104 to v105, !201
        v106 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !60
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !60
        v109 = const u64 0, !60
        store v109 to v108, !60
        v110 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !202
        v111 = load v110
        v112 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        store v111 to v112
        v113 = call sha256_24(v112)
        v114 = get_local ptr { b256 }, __anon_02, !207
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr b256, v115, !208
        store v113 to v116, !209
        v117 = load v114, !208
        v118 = const u64 1
        v119 = const u64 0
        v120 = get_elem_ptr v106, ptr { b256 }, v118, v119, !60
        store v117 to v120, !60
        v121 = load v106
        v122 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v121 to v122
        br block5(v122)

        block1():
        v123 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !57
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr u64, v124, !57
        v126 = load v125
        v127 = const u64 1, !57
        v128 = cmp eq v126 v127, !212
        cbr v128, block2(), block3(), !210

        block2():
        v129 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !57
        v130 = const u64 1
        v131 = const u64 1
        v132 = get_elem_ptr v129, ptr { u64 }, v130, v131
        v133 = load v132
        v134 = get_local ptr { u64 }, e, !213
        store v133 to v134, !213
        v135 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !60
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !60
        v138 = const u64 1, !60
        store v138 to v137, !60
        v139 = get_local ptr { u64 }, e, !214
        v140 = load v139
        v141 = const u64 1
        v142 = const u64 1
        v143 = get_elem_ptr v135, ptr { u64 }, v141, v142, !60
        store v140 to v143, !60
        v144 = load v135
        v145 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v144 to v145
        br block5(v145)

        block3():
        v146 = const u64 14757395258967588866, !191
        revert v146, !191

        block5(v147: ptr { u64, ( { b256 } | { u64 } ) }):
        v148 = load v147
        ret { u64, ( { b256 } | { u64 } ) } v148
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !217 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !218
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !221 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !168
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !224 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !170
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }) -> b256, !228 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }):
        v0 = load s
        v1 = call new_25(), !231
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !232
        store v1 to v2, !232
        v3 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !233
        v4 = ptr_to_int v0 to u64, !236
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !236
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !238
        v8 = load v7, !236
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr { { u64, u64 }, u64 }, v9, !242
        v11 = ptr_to_int v8 to u64, !243
        v12 = int_to_ptr v11 to ptr { { u64, u64 }, u64 }, !244
        v13 = load v12, !247
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v13 to v14
        v15 = call len_20(v14)
        v16 = const u64 0, !248
        v17 = cmp eq v15 v16, !251
        cbr v17, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !252

        hash_26_write_27_append_28_block1():
        v18 = const u64 1
        v19 = get_elem_ptr v10, ptr u64, v18, !253
        v20 = load v19, !254
        v21 = const u64 0, !255
        v22 = cmp eq v20 v21, !258
        cbr v22, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !259

        hash_26_write_27_append_28_block3():
        v23 = load v12, !260
        store v23 to v10, !262
        br hash_26_write_27_block0(), !264

        hash_26_write_27_append_28_block4():
        v24 = load v19, !265
        v25 = add v24, v15, !268
        v26 = load v19, !269
        v27 = const u64 0
        v28 = get_elem_ptr v10, ptr { u64, u64 }, v27, !270
        v29 = load v28, !271
        v30 = get_local ptr { u64, u64 }, __tmp_arg5
        store v29 to v30
        v31 = call capacity_31(v30)
        v32 = cmp lt v31 v25, !274
        cbr v32, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !275

        hash_26_write_27_append_28_block6():
        v33 = load v28, !276
        v34 = get_local ptr { u64, u64 }, __tmp_arg3
        store v33 to v34
        v35 = call ptr_22(v34)
        v36 = load v28, !277
        v37 = get_local ptr { u64, u64 }, __tmp_arg6
        store v36 to v37
        v38 = call capacity_31(v37)
        v39 = cmp gt v25 v38, !282
        cbr v39, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !283

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v40 = asm(size: v25) -> u64 hp, !286 {
            aloc   size, !140
        }
        v41 = const u64 0, !287
        v42 = cmp gt v38 v41, !290
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v40), !291

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v43 = asm(dst: v40, src: v35, len: v38) -> (), !294 {
            mcp    dst src len, !179
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v40), !295

        hash_26_write_27_append_28_realloc_bytes_35_block5(v44: u64):
        v45 = get_local ptr { u64, u64 }, __anon_0, !300
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !301
        store v44 to v47, !302
        v48 = const u64 1
        v49 = get_elem_ptr v45, ptr u64, v48, !303
        store v25 to v49, !304
        v50 = load v45, !305
        v51 = asm(ptr: v50) -> slice ptr, !309 {
        }
        v52 = get_local ptr slice, new_slice, !311
        store v51 to v52, !312
        v53 = get_local ptr slice, new_slice, !314
        v54 = load v53, !315
        v55 = asm(ptr: v54) -> { u64, u64 } ptr, !323 {
        }
        v56 = get_local ptr { u64, u64 }, __anon_000, !324
        store v55 to v56, !325
        v57 = const u64 1
        v58 = get_elem_ptr v56, ptr u64, v57, !327
        v59 = load v58, !328
        v60 = asm(size: v59) -> u64 hp, !331 {
            aloc   size, !140
        }
        v61 = const u64 0, !332
        v62 = cmp gt v59 v61, !335
        cbr v62, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !336

        hash_26_write_27_append_28_from_37_block0():
        v63 = asm(ptr: v54) -> { u64, u64 } ptr, !341 {
        }
        v64 = get_local ptr { u64, u64 }, __anon_01, !342
        store v63 to v64, !343
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !345
        v67 = load v66, !346
        v68 = asm(dst: v60, src: v67, len: v59) -> (), !350 {
            mcp    dst src len, !351
        }
        br hash_26_write_27_append_28_from_37_block2(), !352

        hash_26_write_27_append_28_from_37_block2():
        v69 = get_local ptr { u64, u64 }, __anon_00, !354
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !355
        store v60 to v71, !356
        v72 = const u64 1
        v73 = get_elem_ptr v69, ptr u64, v72, !357
        store v59 to v73, !358
        v74 = load v69, !359
        store v74 to v28, !361
        br hash_26_write_27_append_28_block8(), !362

        hash_26_write_27_append_28_block8():
        v75 = load v28, !363
        v76 = get_local ptr { u64, u64 }, __tmp_arg4
        store v75 to v76
        v77 = call ptr_22(v76)
        v78 = asm(ptr: v77, offset: v26, new) -> u64 new, !367 {
            add    new ptr offset, !368
        }
        v79 = load v12, !369
        v80 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v79 to v80
        v81 = call ptr_21(v80)
        v82 = asm(dst: v78, src: v81, len: v15) -> (), !372 {
            mcp    dst src len, !179
        }
        store v25 to v19, !374
        br hash_26_write_27_block0(), !375

        hash_26_write_27_block0():
        v83 = get_local ptr b256, __const
        v84 = load v83
        v85 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !376
        v86 = load v85
        v87 = get_local ptr b256, result_buffer, !380
        store v84 to v87, !381
        v88 = get_local ptr b256, result_buffer, !383
        v89 = ptr_to_int v86 to u64, !384
        v90 = int_to_ptr v89 to ptr { { { u64, u64 }, u64 } }, !384
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr { { u64, u64 }, u64 }, v91, !385
        v93 = load v92, !384
        v94 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        store v93 to v94
        v95 = call ptr_21(v94)
        v96 = load v92, !384
        v97 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v96 to v97
        v98 = call len_20(v97)
        v99 = asm(hash: v88, ptr: v95, bytes: v98) -> b256 hash, !387 {
            s256   hash ptr bytes, !388
        }
        ret b256 v99
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !391 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !392
        v1 = asm(size: v0) -> u64 hp, !399 {
            aloc   size, !140
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !401
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !402
        store v1 to v4, !403
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !404
        v7 = const u64 0, !405
        store v7 to v6, !406
        v8 = load v2, !407
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !409
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !410
        store v8 to v11, !411
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !410
        v14 = const u64 0, !412
        store v14 to v13, !413
        v15 = load v9, !410
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !414
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !414
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !417 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !418
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1108 1117
!39 = (!4 !5 !38)
!40 = span !6 1126 1133
!41 = (!4 !5 !40)
!42 = span !6 1148 1157
!43 = (!4 !5 !42)
!44 = span !6 1166 1173
!45 = (!4 !5 !44)
!46 = span !6 799 968
!47 = fn_name_span !6 802 804
!48 = inline "never"
!49 = (!46 !47 !48)
!50 = span !6 218 232
!51 = span !6 889 891
!52 = span !6 842 962
!53 = span !6 907 926
!54 = span !6 492 714
!55 = fn_name_span !6 499 506
!56 = (!54 !55)
!57 = span !6 582 603
!58 = fn_call_path_span !6 587 594
!59 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!60 = span !59 1815 1933
!61 = (!57 !58 !60)
!62 = (!57 !58 !60)
!63 = (!57 !58 !60)
!64 = span !6 451 469
!65 = fn_call_path_span !6 459 467
!66 = (!57 !58 !64 !65)
!67 = (!57 !58 !64 !65)
!68 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!69 = span !68 329 341
!70 = (!57 !58 !64 !65 !69)
!71 = (!57 !58 !64 !65)
!72 = span !68 1593 1595
!73 = span !68 1573 1595
!74 = fn_call_path_span !68 1590 1592
!75 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!76 = span !75 15515 15529
!77 = fn_call_path_span !75 15520 15522
!78 = (!57 !58 !64 !65 !73 !74 !76 !77)
!79 = span !75 12533 12538
!80 = span !75 15514 15536
!81 = fn_call_path_span !75 15531 15534
!82 = (!57 !58 !64 !65 !73 !74 !80 !81)
!83 = (!57 !58 !64 !65 !73)
!84 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!85 = span !84 2461 2560
!86 = (!57 !58 !64 !65 !85)
!87 = (!57 !58 !64 !65 !85)
!88 = (!57 !58 !64 !65 !85)
!89 = (!57 !58 !64 !65)
!90 = span !68 1610 1621
!91 = (!57 !58 !64 !65 !90)
!92 = (!57 !58 !64 !65 !85)
!93 = (!57 !58 !64 !65 !85)
!94 = (!57 !58 !64 !65 !85)
!95 = (!57 !58 !64 !65)
!96 = span !68 1647 1709
!97 = (!57 !58 !64 !65 !96)
!98 = (!57 !58 !64 !65 !85)
!99 = (!57 !58 !64 !65 !85)
!100 = (!57 !58 !64 !65)
!101 = (!57 !58 !64 !65)
!102 = span !6 451 478
!103 = fn_call_path_span !6 470 476
!104 = span !84 4973 5075
!105 = (!57 !58 !102 !103 !104)
!106 = (!57 !58 !102 !103 !104)
!107 = span !84 4979 4983
!108 = (!57 !58 !102 !103 !107)
!109 = (!57 !58 !102 !103 !107)
!110 = (!57 !58 !102 !103)
!111 = span !84 4998 5037
!112 = fn_call_path_span !84 4998 5037
!113 = (!57 !58 !102 !103 !111 !112)
!114 = (!57 !58 !102 !103 !111)
!115 = (!57 !58 !102 !103 !107)
!116 = (!57 !58 !102 !103)
!117 = (!57 !58 !102 !103)
!118 = span !84 5009 5020
!119 = (!57 !58 !102 !103 !118)
!120 = (!57 !58 !102 !103 !118)
!121 = span !84 5025 5036
!122 = (!57 !58 !102 !103 !121)
!123 = (!57 !58 !102 !103)
!124 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!125 = span !124 28953 28955
!126 = span !6 435 479
!127 = fn_call_path_span !6 435 450
!128 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!129 = span !128 3133 3150
!130 = fn_call_path_span !128 3133 3144
!131 = span !124 28933 28956
!132 = fn_call_path_span !124 28933 28952
!133 = span !124 4157 4190
!134 = fn_call_path_span !124 4157 4180
!135 = span !124 863 884
!136 = fn_call_path_span !124 863 874
!137 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!138 = span !137 3315 3378
!139 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134 !135 !136 !138)
!140 = span !137 3342 3351
!141 = span !124 839 922
!142 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134 !141)
!143 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134)
!144 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134 !141)
!145 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134)
!146 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134 !141)
!147 = (!57 !58 !126 !127 !129 !130 !131 !132 !133 !134)
!148 = span !124 4133 4221
!149 = (!57 !58 !126 !127 !129 !130 !131 !132 !148)
!150 = (!57 !58 !126 !127 !129 !130 !131 !132)
!151 = (!57 !58 !126 !127 !129 !130 !131 !132 !148)
!152 = (!57 !58 !126 !127 !129 !130 !131 !132)
!153 = span !124 4209 4210
!154 = (!57 !58 !126 !127 !129 !130 !131 !132 !148)
!155 = (!57 !58 !126 !127 !129 !130 !131 !132)
!156 = span !124 28917 28957
!157 = (!57 !58 !126 !127 !129 !130 !156)
!158 = (!57 !58 !126 !127 !129 !130 !156)
!159 = span !124 28966 28980
!160 = (!57 !58 !126 !127 !129 !130 !159)
!161 = (!57 !58 !126 !127 !129 !130 !159)
!162 = span !124 28978 28980
!163 = (!57 !58 !126 !127 !129 !130 !159)
!164 = span !124 29065 29077
!165 = (!57 !58 !126 !127 !129 !130 !164)
!166 = span !124 29092 29097
!167 = (!57 !58 !126 !127 !129 !130 !166)
!168 = span !124 2445 2458
!169 = (!57 !58 !126 !127 !129 !130 !168)
!170 = span !124 400 412
!171 = (!57 !58 !126 !127 !129 !130 !170)
!172 = (!57 !58 !126 !127 !129 !130)
!173 = span !124 29107 29109
!174 = span !124 29065 29110
!175 = fn_call_path_span !124 29078 29091
!176 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!177 = span !176 5999 6076
!178 = (!57 !58 !126 !127 !129 !130 !174 !175 !177)
!179 = span !176 6050 6065
!180 = span !124 29121 29126
!181 = (!57 !58 !126 !127 !129 !130 !180)
!182 = (!57 !58 !126 !127 !129 !130)
!183 = span !128 3107 3161
!184 = (!57 !58 !126 !127 !183)
!185 = (!57 !58 !126 !127)
!186 = (!57 !58 !126 !127 !183)
!187 = (!57 !58 !126 !127)
!188 = (!57 !58 !60)
!189 = (!57 !58 !60)
!190 = (!57 !58)
!191 = span !6 576 708
!192 = span !6 618 668
!193 = fn_call_path_span !6 618 668
!194 = (!192 !193)
!195 = span !84 5062 5063
!196 = span !84 5055 5064
!197 = fn_call_path_span !84 5055 5061
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!199 = span !198 757 771
!200 = (!57 !58 !102 !103 !196 !197 !199)
!201 = span !6 621 628
!202 = span !6 657 664
!203 = span !6 636 666
!204 = fn_call_path_span !6 636 649
!205 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!206 = span !205 2370 2383
!207 = (!203 !204 !206)
!208 = (!203 !204)
!209 = (!203 !204 !206)
!210 = span !6 681 698
!211 = fn_call_path_span !6 681 698
!212 = (!210 !211)
!213 = span !6 685 686
!214 = span !6 695 696
!215 = span !124 13771 13819
!216 = fn_name_span !124 13778 13781
!217 = (!215 !216)
!218 = span !124 2506 2514
!219 = span !124 15175 15233
!220 = fn_name_span !124 15182 15185
!221 = (!219 !220)
!222 = span !124 978 1030
!223 = fn_name_span !124 985 988
!224 = (!222 !223)
!225 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!226 = span !225 9009 9138
!227 = fn_name_span !225 9016 9022
!228 = (!226 !227 !48)
!229 = span !225 9082 9095
!230 = fn_call_path_span !225 9082 9093
!231 = (!229 !230)
!232 = span !225 9065 9096
!233 = span !225 9108 9114
!234 = span !225 9101 9115
!235 = fn_call_path_span !225 9103 9107
!236 = (!234 !235)
!237 = span !128 524 536
!238 = (!234 !235 !237)
!239 = span !128 5123 5146
!240 = fn_call_path_span !128 5129 5134
!241 = span !225 142 154
!242 = (!234 !235 !239 !240 !241)
!243 = (!234 !235 !239 !240)
!244 = (!234 !235 !239 !240)
!245 = span !225 365 389
!246 = fn_call_path_span !225 376 382
!247 = (!234 !235 !239 !240 !245 !246)
!248 = span !124 18435 18436
!249 = span !124 18422 18436
!250 = fn_call_path_span !124 18432 18434
!251 = (!234 !235 !239 !240 !245 !246 !249 !250)
!252 = (!234 !235 !239 !240 !245 !246 !249)
!253 = (!234 !235 !239 !240 !245 !246 !218)
!254 = (!234 !235 !239 !240 !245 !246)
!255 = span !124 18572 18573
!256 = span !124 18560 18573
!257 = fn_call_path_span !124 18569 18571
!258 = (!234 !235 !239 !240 !245 !246 !256 !257)
!259 = (!234 !235 !239 !240 !245 !246 !256)
!260 = (!234 !235 !239 !240 !245 !246)
!261 = span !124 18588 18600
!262 = (!234 !235 !239 !240 !245 !246 !261)
!263 = span !124 18614 18620
!264 = (!234 !235 !239 !240 !245 !246 !263)
!265 = (!234 !235 !239 !240 !245 !246)
!266 = span !124 18657 18677
!267 = fn_call_path_span !124 18666 18667
!268 = (!234 !235 !239 !240 !245 !246 !266 !267)
!269 = (!234 !235 !239 !240 !245 !246)
!270 = (!234 !235 !239 !240 !245 !246 !168)
!271 = (!234 !235 !239 !240 !245 !246)
!272 = span !124 18808 18838
!273 = fn_call_path_span !124 18828 18829
!274 = (!234 !235 !239 !240 !245 !246 !272 !273)
!275 = (!234 !235 !239 !240 !245 !246 !272)
!276 = (!234 !235 !239 !240 !245 !246)
!277 = (!234 !235 !239 !240 !245 !246)
!278 = span !124 18914 18974
!279 = fn_call_path_span !124 18914 18927
!280 = span !137 4168 4185
!281 = fn_call_path_span !137 4178 4179
!282 = (!234 !235 !239 !240 !245 !246 !278 !279 !280 !281)
!283 = (!234 !235 !239 !240 !245 !246 !278 !279 !280)
!284 = span !137 4210 4232
!285 = fn_call_path_span !137 4210 4221
!286 = (!234 !235 !239 !240 !245 !246 !278 !279 !284 !285 !138)
!287 = span !137 4253 4254
!288 = span !137 4245 4254
!289 = fn_call_path_span !137 4251 4252
!290 = (!234 !235 !239 !240 !245 !246 !278 !279 !288 !289)
!291 = (!234 !235 !239 !240 !245 !246 !278 !279 !288)
!292 = span !137 4269 4302
!293 = fn_call_path_span !137 4273 4286
!294 = (!234 !235 !239 !240 !245 !246 !278 !279 !292 !293 !177)
!295 = (!234 !235 !239 !240 !245 !246 !278 !279)
!296 = span !124 18869 19015
!297 = fn_call_path_span !124 18869 18890
!298 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!299 = span !298 2362 2393
!300 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!301 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!302 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!303 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!304 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!305 = (!234 !235 !239 !240 !245 !246 !296 !297)
!306 = span !298 2351 2394
!307 = fn_call_path_span !298 2351 2361
!308 = span !298 1248 1294
!309 = (!234 !235 !239 !240 !245 !246 !296 !297 !306 !307 !308)
!310 = span !124 18853 19016
!311 = (!234 !235 !239 !240 !245 !246 !310)
!312 = (!234 !235 !239 !240 !245 !246 !310)
!313 = span !124 19055 19064
!314 = (!234 !235 !239 !240 !245 !246 !313)
!315 = (!234 !235 !239 !240 !245 !246)
!316 = span !124 19040 19065
!317 = fn_call_path_span !124 19040 19054
!318 = span !124 2130 2153
!319 = fn_call_path_span !124 2136 2151
!320 = span !298 3959 3975
!321 = fn_call_path_span !298 3959 3969
!322 = span !298 1624 1675
!323 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319 !320 !321 !322)
!324 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319)
!325 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319)
!326 = span !298 3976 3977
!327 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319 !326)
!328 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319)
!329 = span !124 2173 2189
!330 = fn_call_path_span !124 2173 2184
!331 = (!234 !235 !239 !240 !245 !246 !316 !317 !329 !330 !138)
!332 = span !124 2208 2209
!333 = span !124 2202 2209
!334 = fn_call_path_span !124 2206 2207
!335 = (!234 !235 !239 !240 !245 !246 !316 !317 !333 !334)
!336 = (!234 !235 !239 !240 !245 !246 !316 !317 !333)
!337 = span !124 2224 2235
!338 = fn_call_path_span !124 2230 2233
!339 = span !298 2911 2927
!340 = fn_call_path_span !298 2911 2921
!341 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338 !339 !340 !322)
!342 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338)
!343 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338)
!344 = span !298 2928 2929
!345 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338 !344)
!346 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338)
!347 = span !124 2224 2259
!348 = fn_call_path_span !124 2236 2243
!349 = span !176 3447 3522
!350 = (!234 !235 !239 !240 !245 !246 !316 !317 !347 !348 !349)
!351 = span !176 3496 3511
!352 = (!234 !235 !239 !240 !245 !246 !316 !317)
!353 = span !124 2279 2296
!354 = (!234 !235 !239 !240 !245 !246 !316 !317 !353)
!355 = (!234 !235 !239 !240 !245 !246 !316 !317)
!356 = (!234 !235 !239 !240 !245 !246 !316 !317 !353)
!357 = (!234 !235 !239 !240 !245 !246 !316 !317)
!358 = (!234 !235 !239 !240 !245 !246 !316 !317 !353)
!359 = (!234 !235 !239 !240 !245 !246 !316 !317)
!360 = span !124 19029 19065
!361 = (!234 !235 !239 !240 !245 !246 !360)
!362 = (!234 !235 !239 !240 !245 !246)
!363 = (!234 !235 !239 !240 !245 !246)
!364 = span !124 19100 19143
!365 = fn_call_path_span !124 19115 19130
!366 = span !176 6721 6825
!367 = (!234 !235 !239 !240 !245 !246 !364 !365 !366)
!368 = span !176 6771 6789
!369 = (!234 !235 !239 !240 !245 !246)
!370 = span !124 19153 19198
!371 = fn_call_path_span !124 19165 19178
!372 = (!234 !235 !239 !240 !245 !246 !370 !371 !177)
!373 = span !124 19244 19263
!374 = (!234 !235 !239 !240 !245 !246 !373)
!375 = (!234 !235 !239 !240 !245 !246)
!376 = span !225 9121 9127
!377 = span !225 9121 9136
!378 = fn_call_path_span !225 9128 9134
!379 = span !225 440 476
!380 = (!377 !378 !379)
!381 = (!377 !378 !379)
!382 = span !225 508 521
!383 = (!377 !378 !382)
!384 = (!377 !378)
!385 = (!377 !378 !241)
!386 = span !225 485 672
!387 = (!377 !378 !386)
!388 = span !225 619 638
!389 = span !225 177 263
!390 = fn_name_span !225 184 187
!391 = (!389 !390)
!392 = span !124 570 571
!393 = span !225 234 246
!394 = fn_call_path_span !225 234 244
!395 = span !124 3079 3094
!396 = fn_call_path_span !124 3079 3092
!397 = span !124 558 572
!398 = fn_call_path_span !124 558 569
!399 = (!393 !394 !395 !396 !397 !398 !138)
!400 = span !124 534 603
!401 = (!393 !394 !395 !396 !400)
!402 = (!393 !394 !395 !396)
!403 = (!393 !394 !395 !396 !400)
!404 = (!393 !394 !395 !396)
!405 = span !124 591 592
!406 = (!393 !394 !395 !396 !400)
!407 = (!393 !394 !395 !396)
!408 = span !124 3055 3125
!409 = (!393 !394 !408)
!410 = (!393 !394)
!411 = (!393 !394 !408)
!412 = span !124 3113 3114
!413 = (!393 !394 !408)
!414 = span !225 208 257
!415 = span !124 1081 1134
!416 = fn_name_span !124 1088 1096
!417 = (!415 !416)
!418 = span !124 418 426

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { [u8; 64] } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { [u8; 64] } __tmp_arg3
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = load v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        store v2 to v3, !9
        v4 = get_local ptr [u8; 64], __anon_0, !13
        v5 = const u64 0
        br play_0_new_5_array_init_loop(v5), !14

        play_0_new_5_array_init_loop(v6: u64):
        v7 = get_elem_ptr v4, ptr u8, v6, !15
        v8 = const u8 0, !16
        store v8 to v7, !17
        v9 = const u64 1
        v10 = add v6, v9, !18
        v11 = const u64 64
        v12 = cmp lt v10 v11, !19
        cbr v12, play_0_new_5_array_init_loop(v10), play_0_new_5_array_init_exit(), !20

        play_0_new_5_array_init_exit():
        v13 = load v4, !21
        v14 = get_local ptr { [u8; 64] }, __anon_1, !23
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr [u8; 64], v15, !24
        store v13 to v16, !25
        v17 = load v14, !26
        v18 = get_local ptr { [u8; 64] }, secp256k1, !28
        store v17 to v18, !29
        v19 = get_local ptr { [u8; 64] }, secp256k1, !31
        v20 = load v19, !32
        v21 = get_local ptr { [u8; 64] }, secp256k1, !34
        v22 = load v21, !32
        v23 = get_local ptr { [u8; 64] }, __tmp_arg
        store v20 to v23
        v24 = get_local ptr { [u8; 64] }, __tmp_arg0
        store v22 to v24
        v25 = call eq_6(v23, v24)
        v26 = get_local ptr { [u8; 64] }, secp256k1, !36
        v27 = load v26, !32
        v28 = get_local ptr { { { u64, u64 }, u64 } }, message, !38
        v29 = load v28, !32
        v30 = get_local ptr { [u8; 64] }, __tmp_arg1
        store v27 to v30
        v31 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        store v29 to v31
        v32 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v33 = call address_7(v30, v31, v32)
        v34 = load v33
        v35 = get_local ptr { [u8; 64] }, secp256k1, !40
        v36 = load v35, !32
        v37 = get_local ptr { { { u64, u64 }, u64 } }, message, !42
        v38 = load v37, !32
        v39 = get_local ptr { [u8; 64] }, __tmp_arg3
        store v36 to v39
        v40 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        store v38 to v40
        v41 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v42 = call address_7(v39, v40, v41)
        v43 = load v42
        v44 = const unit ()
        ret () v44
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !46 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = load self
        v1 = load other
        v2 = ptr_to_int v0 to u64
        v3 = int_to_ptr v2 to ptr { [u8; 64] }
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr [u8; 64], v4, !47
        v6 = ptr_to_int v1 to u64
        v7 = int_to_ptr v6 to ptr { [u8; 64] }
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr [u8; 64], v8, !47
        v10 = const u64 64, !48
        v11 = asm(result, r2: v5, r3: v9, r4: v10) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        ret bool v11
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !53 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !58
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !59
        v5 = const u64 0, !57
        store v5 to v4, !60
        v6 = ptr_to_int v1 to u64, !63
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !64
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !67
        v10 = load v9, !68
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v10 to v11
        v12 = call len_20(v11)
        v13 = const u64 32, !69
        v14 = cmp eq v12 v13, !75
        v15 = const bool false, !76
        v16 = cmp eq v14 v15, !79
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !80

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !83
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !84
        v20 = const u64 0, !82
        store v20 to v19, !85
        v21 = load v17, !86
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v21 to v22
        br recover_8_block0(v22), !88

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !89
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !90
        v26 = const u64 1, !82
        store v26 to v25, !91
        v27 = load v9, !92
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v27 to v28
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> b256 bits, !94 {
        }
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v23, ptr b256, v31, v32, !95
        store v30 to v33, !96
        v34 = load v23, !97
        v35 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v34 to v35
        br recover_8_block0(v35), !98

        recover_8_block0(v36: ptr { u64, ( () | b256 ) }):
        v37 = load v36
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !102
        store v37 to v38, !103
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !105
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !106
        v42 = load v41, !107
        v43 = const u64 1, !104
        v44 = cmp eq v42 v43, !110
        cbr v44, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !111

        recover_8_unwrap_14_block0():
        v45 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !112
        v46 = const u64 1
        v47 = const u64 1
        v48 = get_elem_ptr v45, ptr b256, v46, v47, !113
        v49 = load v48, !114
        v50 = get_local ptr b256, inner_value, !116
        store v49 to v50, !117
        v51 = get_local ptr b256, inner_value, !119
        v52 = load v51, !120
        v53 = const u64 32, !122
        v54 = asm(size: v53) -> u64 hp, !136 {
            aloc   size, !137
        }
        v55 = get_local ptr { u64, u64 }, __anon_00000, !139
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !140
        store v54 to v57, !141
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !142
        store v53 to v59, !143
        v60 = load v55, !144
        v61 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !146
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { u64, u64 }, v62, !147
        store v60 to v63, !148
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !149
        v66 = const u64 0, !150
        store v66 to v65, !151
        v67 = load v61, !152
        v68 = get_local ptr { { u64, u64 }, u64 }, bytes, !154
        store v67 to v68, !155
        v69 = get_local ptr { { u64, u64 }, u64 }, bytes, !157
        v70 = const u64 1
        v71 = get_elem_ptr v69, ptr u64, v70, !158
        v72 = const u64 32, !159
        store v72 to v71, !160
        v73 = ptr_to_int v52 to u64, !162
        v74 = get_local ptr { { u64, u64 }, u64 }, bytes, !164
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr { u64, u64 }, v75, !166
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !168
        v79 = load v78, !169
        v80 = const u64 32, !170
        v81 = asm(dst: v79, src: v73, len: v80) -> (), !175 {
            mcp    dst src len, !176
        }
        v82 = get_local ptr { { u64, u64 }, u64 }, bytes, !178
        v83 = load v82, !179
        v84 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !181
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { { u64, u64 }, u64 }, v85, !182
        store v83 to v86, !183
        v87 = load v84, !184
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v88, v89, !185
        store v87 to v90, !186
        v91 = load v2, !187
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !188
        store v91 to v92, !188
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !54
        v96 = load v95
        v97 = const u64 0, !54
        v98 = cmp eq v96 v97, !191
        cbr v98, block0(), block1(), !189

        recover_8_unwrap_14_block1():
        v99 = const u64 0, !192
        revert v99, !197

        block0():
        v100 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v101 = const u64 1
        v102 = const u64 0
        v103 = get_elem_ptr v100, ptr { { { u64, u64 }, u64 } }, v101, v102
        v104 = load v103
        v105 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !198
        store v104 to v105, !198
        v106 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !57
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !57
        v109 = const u64 0, !57
        store v109 to v108, !57
        v110 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !199
        v111 = load v110
        v112 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        store v111 to v112
        v113 = get_local ptr b256, __ret_val
        v114 = call sha256_24(v112, v113)
        v115 = load v114
        v116 = get_local ptr { b256 }, __anon_02, !204
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr b256, v117, !205
        store v115 to v118, !206
        v119 = load v116, !205
        v120 = const u64 1
        v121 = const u64 0
        v122 = get_elem_ptr v106, ptr { b256 }, v120, v121, !57
        store v119 to v122, !57
        v123 = load v106
        v124 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v123 to v124
        br block5(v124)

        block1():
        v125 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126, !54
        v128 = load v127
        v129 = const u64 1, !54
        v130 = cmp eq v128 v129, !209
        cbr v130, block2(), block3(), !207

        block2():
        v131 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v132 = const u64 1
        v133 = const u64 1
        v134 = get_elem_ptr v131, ptr { u64 }, v132, v133
        v135 = load v134
        v136 = get_local ptr { u64 }, e, !210
        store v135 to v136, !210
        v137 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !57
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !57
        v140 = const u64 1, !57
        store v140 to v139, !57
        v141 = get_local ptr { u64 }, e, !211
        v142 = load v141
        v143 = const u64 1
        v144 = const u64 1
        v145 = get_elem_ptr v137, ptr { u64 }, v143, v144, !57
        store v142 to v145, !57
        v146 = load v137
        v147 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v146 to v147
        br block5(v147)

        block3():
        v148 = const u64 14757395258967588866, !188
        revert v148, !188

        block5(v149: ptr { u64, ( { b256 } | { u64 } ) }):
        v150 = load v149
        store v150 to __ret_value
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !214 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !215
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !218 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !165
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !221 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !167
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !225 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v2 = call new_25(v1)
        v3 = load v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !226
        store v3 to v4, !226
        v5 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !227
        v6 = ptr_to_int v0 to u64, !230
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !230
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !232
        v10 = load v9, !230
        v11 = const u64 0
        v12 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v11, !236
        v13 = ptr_to_int v10 to u64, !237
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }, !238
        v15 = load v14, !241
        v16 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v15 to v16
        v17 = call len_20(v16)
        v18 = const u64 0, !242
        v19 = cmp eq v17 v18, !245
        cbr v19, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !246

        hash_26_write_27_append_28_block1():
        v20 = const u64 1
        v21 = get_elem_ptr v12, ptr u64, v20, !247
        v22 = load v21, !248
        v23 = const u64 0, !249
        v24 = cmp eq v22 v23, !252
        cbr v24, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !253

        hash_26_write_27_append_28_block3():
        v25 = load v14, !254
        store v25 to v12, !256
        br hash_26_write_27_block0(), !258

        hash_26_write_27_append_28_block4():
        v26 = load v21, !259
        v27 = add v26, v17, !262
        v28 = load v21, !263
        v29 = const u64 0
        v30 = get_elem_ptr v12, ptr { u64, u64 }, v29, !264
        v31 = load v30, !265
        v32 = get_local ptr { u64, u64 }, __tmp_arg5
        store v31 to v32
        v33 = call capacity_31(v32)
        v34 = cmp lt v33 v27, !268
        cbr v34, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !269

        hash_26_write_27_append_28_block6():
        v35 = load v30, !270
        v36 = get_local ptr { u64, u64 }, __tmp_arg3
        store v35 to v36
        v37 = call ptr_22(v36)
        v38 = load v30, !271
        v39 = get_local ptr { u64, u64 }, __tmp_arg6
        store v38 to v39
        v40 = call capacity_31(v39)
        v41 = cmp gt v27 v40, !276
        cbr v41, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !277

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v42 = asm(size: v27) -> u64 hp, !280 {
            aloc   size, !137
        }
        v43 = const u64 0, !281
        v44 = cmp gt v40 v43, !284
        cbr v44, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !285

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v45 = asm(dst: v42, src: v37, len: v40) -> (), !288 {
            mcp    dst src len, !176
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !289

        hash_26_write_27_append_28_realloc_bytes_35_block5(v46: u64):
        v47 = get_local ptr { u64, u64 }, __anon_0, !294
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !295
        store v46 to v49, !296
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !297
        store v27 to v51, !298
        v52 = load v47, !299
        v53 = asm(ptr: v52) -> slice ptr, !303 {
        }
        v54 = get_local ptr slice, new_slice, !305
        store v53 to v54, !306
        v55 = get_local ptr slice, new_slice, !308
        v56 = load v55, !309
        v57 = asm(ptr: v56) -> { u64, u64 } ptr, !317 {
        }
        v58 = get_local ptr { u64, u64 }, __anon_000, !318
        store v57 to v58, !319
        v59 = const u64 1
        v60 = get_elem_ptr v58, ptr u64, v59, !321
        v61 = load v60, !322
        v62 = asm(size: v61) -> u64 hp, !325 {
            aloc   size, !137
        }
        v63 = const u64 0, !326
        v64 = cmp gt v61 v63, !329
        cbr v64, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !330

        hash_26_write_27_append_28_from_37_block0():
        v65 = asm(ptr: v56) -> { u64, u64 } ptr, !335 {
        }
        v66 = get_local ptr { u64, u64 }, __anon_01, !336
        store v65 to v66, !337
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67, !339
        v69 = load v68, !340
        v70 = asm(dst: v62, src: v69, len: v61) -> (), !344 {
            mcp    dst src len, !345
        }
        br hash_26_write_27_append_28_from_37_block2(), !346

        hash_26_write_27_append_28_from_37_block2():
        v71 = get_local ptr { u64, u64 }, __anon_00, !348
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !349
        store v62 to v73, !350
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr u64, v74, !351
        store v61 to v75, !352
        v76 = load v71, !353
        store v76 to v30, !355
        br hash_26_write_27_append_28_block8(), !356

        hash_26_write_27_append_28_block8():
        v77 = load v30, !357
        v78 = get_local ptr { u64, u64 }, __tmp_arg4
        store v77 to v78
        v79 = call ptr_22(v78)
        v80 = asm(ptr: v79, offset: v28, new) -> u64 new, !361 {
            add    new ptr offset, !362
        }
        v81 = load v14, !363
        v82 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v81 to v82
        v83 = call ptr_21(v82)
        v84 = asm(dst: v80, src: v83, len: v17) -> (), !366 {
            mcp    dst src len, !176
        }
        store v27 to v21, !368
        br hash_26_write_27_block0(), !369

        hash_26_write_27_block0():
        v85 = get_local ptr b256, __const
        v86 = load v85
        v87 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !370
        v88 = load v87
        v89 = get_local ptr b256, result_buffer, !374
        store v86 to v89, !375
        v90 = get_local ptr b256, result_buffer, !377
        v91 = ptr_to_int v88 to u64, !378
        v92 = int_to_ptr v91 to ptr { { { u64, u64 }, u64 } }, !378
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { { u64, u64 }, u64 }, v93, !379
        v95 = load v94, !378
        v96 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        store v95 to v96
        v97 = call ptr_21(v96)
        v98 = load v94, !378
        v99 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v98 to v99
        v100 = call len_20(v99)
        v101 = asm(hash: v90, ptr: v97, bytes: v100) -> b256 hash, !381 {
            s256   hash ptr bytes, !382
        }
        store v101 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !385 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !386
        v1 = asm(size: v0) -> u64 hp, !393 {
            aloc   size, !137
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !395
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !396
        store v1 to v4, !397
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !398
        v7 = const u64 0, !399
        store v7 to v6, !400
        v8 = load v2, !401
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !403
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !404
        store v8 to v11, !405
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !404
        v14 = const u64 0, !406
        store v14 to v13, !407
        v15 = load v9, !404
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !408
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !408
        v19 = load v16
        store v19 to __ret_value
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !411 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !412
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = (!4 !5 !7)
!10 = span !6 1042 1058
!11 = fn_call_path_span !6 1042 1056
!12 = span !6 314 323
!13 = (!4 !5 !10 !11 !12)
!14 = (!4 !5 !10 !11)
!15 = (!4 !5 !10 !11)
!16 = span !6 315 318
!17 = (!4 !5 !10 !11 !12)
!18 = (!4 !5 !10 !11)
!19 = (!4 !5 !10 !11)
!20 = (!4 !5 !10 !11)
!21 = (!4 !5 !10 !11)
!22 = span !6 289 334
!23 = (!4 !5 !10 !11 !22)
!24 = (!4 !5 !10 !11)
!25 = (!4 !5 !10 !11 !22)
!26 = (!4 !5 !10 !11)
!27 = span !6 1026 1059
!28 = (!4 !5 !27)
!29 = (!4 !5 !27)
!30 = span !6 1072 1081
!31 = (!4 !5 !30)
!32 = (!4 !5)
!33 = span !6 1085 1094
!34 = (!4 !5 !33)
!35 = span !6 1108 1117
!36 = (!4 !5 !35)
!37 = span !6 1126 1133
!38 = (!4 !5 !37)
!39 = span !6 1148 1157
!40 = (!4 !5 !39)
!41 = span !6 1166 1173
!42 = (!4 !5 !41)
!43 = span !6 799 968
!44 = fn_name_span !6 802 804
!45 = inline "never"
!46 = (!43 !44 !45)
!47 = span !6 218 232
!48 = span !6 889 891
!49 = span !6 842 962
!50 = span !6 907 926
!51 = span !6 492 714
!52 = fn_name_span !6 499 506
!53 = (!51 !52)
!54 = span !6 582 603
!55 = fn_call_path_span !6 587 594
!56 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!57 = span !56 1815 1933
!58 = (!54 !55 !57)
!59 = (!54 !55 !57)
!60 = (!54 !55 !57)
!61 = span !6 451 469
!62 = fn_call_path_span !6 459 467
!63 = (!54 !55 !61 !62)
!64 = (!54 !55 !61 !62)
!65 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!66 = span !65 329 341
!67 = (!54 !55 !61 !62 !66)
!68 = (!54 !55 !61 !62)
!69 = span !65 1593 1595
!70 = span !65 1573 1595
!71 = fn_call_path_span !65 1590 1592
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!73 = span !72 15515 15529
!74 = fn_call_path_span !72 15520 15522
!75 = (!54 !55 !61 !62 !70 !71 !73 !74)
!76 = span !72 12533 12538
!77 = span !72 15514 15536
!78 = fn_call_path_span !72 15531 15534
!79 = (!54 !55 !61 !62 !70 !71 !77 !78)
!80 = (!54 !55 !61 !62 !70)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!82 = span !81 2461 2560
!83 = (!54 !55 !61 !62 !82)
!84 = (!54 !55 !61 !62 !82)
!85 = (!54 !55 !61 !62 !82)
!86 = (!54 !55 !61 !62)
!87 = span !65 1610 1621
!88 = (!54 !55 !61 !62 !87)
!89 = (!54 !55 !61 !62 !82)
!90 = (!54 !55 !61 !62 !82)
!91 = (!54 !55 !61 !62 !82)
!92 = (!54 !55 !61 !62)
!93 = span !65 1647 1709
!94 = (!54 !55 !61 !62 !93)
!95 = (!54 !55 !61 !62 !82)
!96 = (!54 !55 !61 !62 !82)
!97 = (!54 !55 !61 !62)
!98 = (!54 !55 !61 !62)
!99 = span !6 451 478
!100 = fn_call_path_span !6 470 476
!101 = span !81 4973 5075
!102 = (!54 !55 !99 !100 !101)
!103 = (!54 !55 !99 !100 !101)
!104 = span !81 4979 4983
!105 = (!54 !55 !99 !100 !104)
!106 = (!54 !55 !99 !100 !104)
!107 = (!54 !55 !99 !100)
!108 = span !81 4998 5037
!109 = fn_call_path_span !81 4998 5037
!110 = (!54 !55 !99 !100 !108 !109)
!111 = (!54 !55 !99 !100 !108)
!112 = (!54 !55 !99 !100 !104)
!113 = (!54 !55 !99 !100)
!114 = (!54 !55 !99 !100)
!115 = span !81 5009 5020
!116 = (!54 !55 !99 !100 !115)
!117 = (!54 !55 !99 !100 !115)
!118 = span !81 5025 5036
!119 = (!54 !55 !99 !100 !118)
!120 = (!54 !55 !99 !100)
!121 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!122 = span !121 28953 28955
!123 = span !6 435 479
!124 = fn_call_path_span !6 435 450
!125 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!126 = span !125 3133 3150
!127 = fn_call_path_span !125 3133 3144
!128 = span !121 28933 28956
!129 = fn_call_path_span !121 28933 28952
!130 = span !121 4157 4190
!131 = fn_call_path_span !121 4157 4180
!132 = span !121 863 884
!133 = fn_call_path_span !121 863 874
!134 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!135 = span !134 3315 3378
!136 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131 !132 !133 !135)
!137 = span !134 3342 3351
!138 = span !121 839 922
!139 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131 !138)
!140 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131)
!141 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131 !138)
!142 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131)
!143 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131 !138)
!144 = (!54 !55 !123 !124 !126 !127 !128 !129 !130 !131)
!145 = span !121 4133 4221
!146 = (!54 !55 !123 !124 !126 !127 !128 !129 !145)
!147 = (!54 !55 !123 !124 !126 !127 !128 !129)
!148 = (!54 !55 !123 !124 !126 !127 !128 !129 !145)
!149 = (!54 !55 !123 !124 !126 !127 !128 !129)
!150 = span !121 4209 4210
!151 = (!54 !55 !123 !124 !126 !127 !128 !129 !145)
!152 = (!54 !55 !123 !124 !126 !127 !128 !129)
!153 = span !121 28917 28957
!154 = (!54 !55 !123 !124 !126 !127 !153)
!155 = (!54 !55 !123 !124 !126 !127 !153)
!156 = span !121 28966 28980
!157 = (!54 !55 !123 !124 !126 !127 !156)
!158 = (!54 !55 !123 !124 !126 !127 !156)
!159 = span !121 28978 28980
!160 = (!54 !55 !123 !124 !126 !127 !156)
!161 = span !121 29065 29077
!162 = (!54 !55 !123 !124 !126 !127 !161)
!163 = span !121 29092 29097
!164 = (!54 !55 !123 !124 !126 !127 !163)
!165 = span !121 2445 2458
!166 = (!54 !55 !123 !124 !126 !127 !165)
!167 = span !121 400 412
!168 = (!54 !55 !123 !124 !126 !127 !167)
!169 = (!54 !55 !123 !124 !126 !127)
!170 = span !121 29107 29109
!171 = span !121 29065 29110
!172 = fn_call_path_span !121 29078 29091
!173 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!174 = span !173 5999 6076
!175 = (!54 !55 !123 !124 !126 !127 !171 !172 !174)
!176 = span !173 6050 6065
!177 = span !121 29121 29126
!178 = (!54 !55 !123 !124 !126 !127 !177)
!179 = (!54 !55 !123 !124 !126 !127)
!180 = span !125 3107 3161
!181 = (!54 !55 !123 !124 !180)
!182 = (!54 !55 !123 !124)
!183 = (!54 !55 !123 !124 !180)
!184 = (!54 !55 !123 !124)
!185 = (!54 !55 !57)
!186 = (!54 !55 !57)
!187 = (!54 !55)
!188 = span !6 576 708
!189 = span !6 618 668
!190 = fn_call_path_span !6 618 668
!191 = (!189 !190)
!192 = span !81 5062 5063
!193 = span !81 5055 5064
!194 = fn_call_path_span !81 5055 5061
!195 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!196 = span !195 757 771
!197 = (!54 !55 !99 !100 !193 !194 !196)
!198 = span !6 621 628
!199 = span !6 657 664
!200 = span !6 636 666
!201 = fn_call_path_span !6 636 649
!202 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!203 = span !202 2370 2383
!204 = (!200 !201 !203)
!205 = (!200 !201)
!206 = (!200 !201 !203)
!207 = span !6 681 698
!208 = fn_call_path_span !6 681 698
!209 = (!207 !208)
!210 = span !6 685 686
!211 = span !6 695 696
!212 = span !121 13771 13819
!213 = fn_name_span !121 13778 13781
!214 = (!212 !213)
!215 = span !121 2506 2514
!216 = span !121 15175 15233
!217 = fn_name_span !121 15182 15185
!218 = (!216 !217)
!219 = span !121 978 1030
!220 = fn_name_span !121 985 988
!221 = (!219 !220)
!222 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!223 = span !222 9009 9138
!224 = fn_name_span !222 9016 9022
!225 = (!223 !224 !45)
!226 = span !222 9065 9096
!227 = span !222 9108 9114
!228 = span !222 9101 9115
!229 = fn_call_path_span !222 9103 9107
!230 = (!228 !229)
!231 = span !125 524 536
!232 = (!228 !229 !231)
!233 = span !125 5123 5146
!234 = fn_call_path_span !125 5129 5134
!235 = span !222 142 154
!236 = (!228 !229 !233 !234 !235)
!237 = (!228 !229 !233 !234)
!238 = (!228 !229 !233 !234)
!239 = span !222 365 389
!240 = fn_call_path_span !222 376 382
!241 = (!228 !229 !233 !234 !239 !240)
!242 = span !121 18435 18436
!243 = span !121 18422 18436
!244 = fn_call_path_span !121 18432 18434
!245 = (!228 !229 !233 !234 !239 !240 !243 !244)
!246 = (!228 !229 !233 !234 !239 !240 !243)
!247 = (!228 !229 !233 !234 !239 !240 !215)
!248 = (!228 !229 !233 !234 !239 !240)
!249 = span !121 18572 18573
!250 = span !121 18560 18573
!251 = fn_call_path_span !121 18569 18571
!252 = (!228 !229 !233 !234 !239 !240 !250 !251)
!253 = (!228 !229 !233 !234 !239 !240 !250)
!254 = (!228 !229 !233 !234 !239 !240)
!255 = span !121 18588 18600
!256 = (!228 !229 !233 !234 !239 !240 !255)
!257 = span !121 18614 18620
!258 = (!228 !229 !233 !234 !239 !240 !257)
!259 = (!228 !229 !233 !234 !239 !240)
!260 = span !121 18657 18677
!261 = fn_call_path_span !121 18666 18667
!262 = (!228 !229 !233 !234 !239 !240 !260 !261)
!263 = (!228 !229 !233 !234 !239 !240)
!264 = (!228 !229 !233 !234 !239 !240 !165)
!265 = (!228 !229 !233 !234 !239 !240)
!266 = span !121 18808 18838
!267 = fn_call_path_span !121 18828 18829
!268 = (!228 !229 !233 !234 !239 !240 !266 !267)
!269 = (!228 !229 !233 !234 !239 !240 !266)
!270 = (!228 !229 !233 !234 !239 !240)
!271 = (!228 !229 !233 !234 !239 !240)
!272 = span !121 18914 18974
!273 = fn_call_path_span !121 18914 18927
!274 = span !134 4168 4185
!275 = fn_call_path_span !134 4178 4179
!276 = (!228 !229 !233 !234 !239 !240 !272 !273 !274 !275)
!277 = (!228 !229 !233 !234 !239 !240 !272 !273 !274)
!278 = span !134 4210 4232
!279 = fn_call_path_span !134 4210 4221
!280 = (!228 !229 !233 !234 !239 !240 !272 !273 !278 !279 !135)
!281 = span !134 4253 4254
!282 = span !134 4245 4254
!283 = fn_call_path_span !134 4251 4252
!284 = (!228 !229 !233 !234 !239 !240 !272 !273 !282 !283)
!285 = (!228 !229 !233 !234 !239 !240 !272 !273 !282)
!286 = span !134 4269 4302
!287 = fn_call_path_span !134 4273 4286
!288 = (!228 !229 !233 !234 !239 !240 !272 !273 !286 !287 !174)
!289 = (!228 !229 !233 !234 !239 !240 !272 !273)
!290 = span !121 18869 19015
!291 = fn_call_path_span !121 18869 18890
!292 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!293 = span !292 2362 2393
!294 = (!228 !229 !233 !234 !239 !240 !290 !291 !293)
!295 = (!228 !229 !233 !234 !239 !240 !290 !291 !293)
!296 = (!228 !229 !233 !234 !239 !240 !290 !291 !293)
!297 = (!228 !229 !233 !234 !239 !240 !290 !291 !293)
!298 = (!228 !229 !233 !234 !239 !240 !290 !291 !293)
!299 = (!228 !229 !233 !234 !239 !240 !290 !291)
!300 = span !292 2351 2394
!301 = fn_call_path_span !292 2351 2361
!302 = span !292 1248 1294
!303 = (!228 !229 !233 !234 !239 !240 !290 !291 !300 !301 !302)
!304 = span !121 18853 19016
!305 = (!228 !229 !233 !234 !239 !240 !304)
!306 = (!228 !229 !233 !234 !239 !240 !304)
!307 = span !121 19055 19064
!308 = (!228 !229 !233 !234 !239 !240 !307)
!309 = (!228 !229 !233 !234 !239 !240)
!310 = span !121 19040 19065
!311 = fn_call_path_span !121 19040 19054
!312 = span !121 2130 2153
!313 = fn_call_path_span !121 2136 2151
!314 = span !292 3959 3975
!315 = fn_call_path_span !292 3959 3969
!316 = span !292 1624 1675
!317 = (!228 !229 !233 !234 !239 !240 !310 !311 !312 !313 !314 !315 !316)
!318 = (!228 !229 !233 !234 !239 !240 !310 !311 !312 !313)
!319 = (!228 !229 !233 !234 !239 !240 !310 !311 !312 !313)
!320 = span !292 3976 3977
!321 = (!228 !229 !233 !234 !239 !240 !310 !311 !312 !313 !320)
!322 = (!228 !229 !233 !234 !239 !240 !310 !311 !312 !313)
!323 = span !121 2173 2189
!324 = fn_call_path_span !121 2173 2184
!325 = (!228 !229 !233 !234 !239 !240 !310 !311 !323 !324 !135)
!326 = span !121 2208 2209
!327 = span !121 2202 2209
!328 = fn_call_path_span !121 2206 2207
!329 = (!228 !229 !233 !234 !239 !240 !310 !311 !327 !328)
!330 = (!228 !229 !233 !234 !239 !240 !310 !311 !327)
!331 = span !121 2224 2235
!332 = fn_call_path_span !121 2230 2233
!333 = span !292 2911 2927
!334 = fn_call_path_span !292 2911 2921
!335 = (!228 !229 !233 !234 !239 !240 !310 !311 !331 !332 !333 !334 !316)
!336 = (!228 !229 !233 !234 !239 !240 !310 !311 !331 !332)
!337 = (!228 !229 !233 !234 !239 !240 !310 !311 !331 !332)
!338 = span !292 2928 2929
!339 = (!228 !229 !233 !234 !239 !240 !310 !311 !331 !332 !338)
!340 = (!228 !229 !233 !234 !239 !240 !310 !311 !331 !332)
!341 = span !121 2224 2259
!342 = fn_call_path_span !121 2236 2243
!343 = span !173 3447 3522
!344 = (!228 !229 !233 !234 !239 !240 !310 !311 !341 !342 !343)
!345 = span !173 3496 3511
!346 = (!228 !229 !233 !234 !239 !240 !310 !311)
!347 = span !121 2279 2296
!348 = (!228 !229 !233 !234 !239 !240 !310 !311 !347)
!349 = (!228 !229 !233 !234 !239 !240 !310 !311)
!350 = (!228 !229 !233 !234 !239 !240 !310 !311 !347)
!351 = (!228 !229 !233 !234 !239 !240 !310 !311)
!352 = (!228 !229 !233 !234 !239 !240 !310 !311 !347)
!353 = (!228 !229 !233 !234 !239 !240 !310 !311)
!354 = span !121 19029 19065
!355 = (!228 !229 !233 !234 !239 !240 !354)
!356 = (!228 !229 !233 !234 !239 !240)
!357 = (!228 !229 !233 !234 !239 !240)
!358 = span !121 19100 19143
!359 = fn_call_path_span !121 19115 19130
!360 = span !173 6721 6825
!361 = (!228 !229 !233 !234 !239 !240 !358 !359 !360)
!362 = span !173 6771 6789
!363 = (!228 !229 !233 !234 !239 !240)
!364 = span !121 19153 19198
!365 = fn_call_path_span !121 19165 19178
!366 = (!228 !229 !233 !234 !239 !240 !364 !365 !174)
!367 = span !121 19244 19263
!368 = (!228 !229 !233 !234 !239 !240 !367)
!369 = (!228 !229 !233 !234 !239 !240)
!370 = span !222 9121 9127
!371 = span !222 9121 9136
!372 = fn_call_path_span !222 9128 9134
!373 = span !222 440 476
!374 = (!371 !372 !373)
!375 = (!371 !372 !373)
!376 = span !222 508 521
!377 = (!371 !372 !376)
!378 = (!371 !372)
!379 = (!371 !372 !235)
!380 = span !222 485 672
!381 = (!371 !372 !380)
!382 = span !222 619 638
!383 = span !222 177 263
!384 = fn_name_span !222 184 187
!385 = (!383 !384)
!386 = span !121 570 571
!387 = span !222 234 246
!388 = fn_call_path_span !222 234 244
!389 = span !121 3079 3094
!390 = fn_call_path_span !121 3079 3092
!391 = span !121 558 572
!392 = fn_call_path_span !121 558 569
!393 = (!387 !388 !389 !390 !391 !392 !135)
!394 = span !121 534 603
!395 = (!387 !388 !389 !390 !394)
!396 = (!387 !388 !389 !390)
!397 = (!387 !388 !389 !390 !394)
!398 = (!387 !388 !389 !390)
!399 = span !121 591 592
!400 = (!387 !388 !389 !390 !394)
!401 = (!387 !388 !389 !390)
!402 = span !121 3055 3125
!403 = (!387 !388 !402)
!404 = (!387 !388)
!405 = (!387 !388 !402)
!406 = span !121 3113 3114
!407 = (!387 !388 !402)
!408 = span !222 208 257
!409 = span !121 1081 1134
!410 = fn_name_span !121 1088 1096
!411 = (!409 !410)
!412 = span !121 418 426

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { [u8; 64] } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { [u8; 64] } __tmp_arg3
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = load v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        store v2 to v3, !9
        v4 = get_local ptr [u8; 64], __anon_0, !13
        v5 = const u64 0
        br play_0_new_5_array_init_loop(v5), !14

        play_0_new_5_array_init_loop(v6: u64):
        v7 = get_elem_ptr v4, ptr u8, v6, !15
        v8 = const u8 0, !16
        store v8 to v7, !17
        v9 = const u64 1
        v10 = add v6, v9, !18
        v11 = const u64 64
        v12 = cmp lt v10 v11, !19
        cbr v12, play_0_new_5_array_init_loop(v10), play_0_new_5_array_init_exit(), !20

        play_0_new_5_array_init_exit():
        v13 = load v4, !21
        v14 = get_local ptr { [u8; 64] }, __anon_1, !23
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr [u8; 64], v15, !24
        store v13 to v16, !25
        v17 = load v14, !26
        v18 = get_local ptr { [u8; 64] }, secp256k1, !28
        store v17 to v18, !29
        v19 = get_local ptr { [u8; 64] }, secp256k1, !31
        v20 = load v19, !32
        v21 = get_local ptr { [u8; 64] }, secp256k1, !34
        v22 = load v21, !32
        v23 = get_local ptr { [u8; 64] }, __tmp_arg
        store v20 to v23
        v24 = get_local ptr { [u8; 64] }, __tmp_arg0
        store v22 to v24
        v25 = call eq_6(v23, v24)
        v26 = get_local ptr { [u8; 64] }, secp256k1, !36
        v27 = load v26, !32
        v28 = get_local ptr { { { u64, u64 }, u64 } }, message, !38
        v29 = load v28, !32
        v30 = get_local ptr { [u8; 64] }, __tmp_arg1
        store v27 to v30
        v31 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        store v29 to v31
        v32 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v33 = call address_7(v30, v31, v32)
        v34 = load v33
        v35 = get_local ptr { [u8; 64] }, secp256k1, !40
        v36 = load v35, !32
        v37 = get_local ptr { { { u64, u64 }, u64 } }, message, !42
        v38 = load v37, !32
        v39 = get_local ptr { [u8; 64] }, __tmp_arg3
        store v36 to v39
        v40 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        store v38 to v40
        v41 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v42 = call address_7(v39, v40, v41)
        v43 = load v42
        v44 = const unit ()
        ret () v44
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !46 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = load self
        v1 = load other
        v2 = ptr_to_int self to u64
        v3 = int_to_ptr v2 to ptr { [u8; 64] }
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr [u8; 64], v4, !47
        v6 = ptr_to_int other to u64
        v7 = int_to_ptr v6 to ptr { [u8; 64] }
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr [u8; 64], v8, !47
        v10 = const u64 64, !48
        v11 = asm(result, r2: v5, r3: v9, r4: v10) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        ret bool v11
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !53 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !58
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !59
        v5 = const u64 0, !57
        store v5 to v4, !60
        v6 = ptr_to_int message to u64, !63
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !64
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !67
        v10 = load v9, !68
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v10 to v11
        v12 = call len_20(v11)
        v13 = const u64 32, !69
        v14 = cmp eq v12 v13, !75
        v15 = const bool false, !76
        v16 = cmp eq v14 v15, !79
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !80

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !83
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !84
        v20 = const u64 0, !82
        store v20 to v19, !85
        v21 = load v17, !86
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v21 to v22
        br recover_8_block0(v22), !88

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !89
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !90
        v26 = const u64 1, !82
        store v26 to v25, !91
        v27 = load v9, !92
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v27 to v28
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> ptr b256 bits {
        }
        v31 = load v30
        v32 = const u64 1
        v33 = const u64 1
        v34 = get_elem_ptr v23, ptr b256, v32, v33, !93
        store v31 to v34, !94
        v35 = load v23, !95
        v36 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v35 to v36
        br recover_8_block0(v36), !96

        recover_8_block0(v37: ptr { u64, ( () | b256 ) }):
        v38 = load v37
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !100
        store v38 to v39, !101
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !103
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !104
        v43 = load v42, !105
        v44 = const u64 1, !102
        v45 = cmp eq v43 v44, !108
        cbr v45, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !109

        recover_8_unwrap_14_block0():
        v46 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !110
        v47 = const u64 1
        v48 = const u64 1
        v49 = get_elem_ptr v46, ptr b256, v47, v48, !111
        v50 = load v49, !112
        v51 = get_local ptr b256, inner_value, !114
        store v50 to v51, !115
        v52 = get_local ptr b256, inner_value, !117
        v53 = load v52, !118
        v54 = const u64 32, !120
        v55 = asm(size: v54) -> u64 hp, !134 {
            aloc   size, !135
        }
        v56 = get_local ptr { u64, u64 }, __anon_00000, !137
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u64, v57, !138
        store v55 to v58, !139
        v59 = const u64 1
        v60 = get_elem_ptr v56, ptr u64, v59, !140
        store v54 to v60, !141
        v61 = load v56, !142
        v62 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !144
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr { u64, u64 }, v63, !145
        store v61 to v64, !146
        v65 = const u64 1
        v66 = get_elem_ptr v62, ptr u64, v65, !147
        v67 = const u64 0, !148
        store v67 to v66, !149
        v68 = load v62, !150
        v69 = get_local ptr { { u64, u64 }, u64 }, bytes, !152
        store v68 to v69, !153
        v70 = get_local ptr { { u64, u64 }, u64 }, bytes, !155
        v71 = const u64 1
        v72 = get_elem_ptr v70, ptr u64, v71, !156
        v73 = const u64 32, !157
        store v73 to v72, !158
        v74 = ptr_to_int v52 to u64, !160
        v75 = get_local ptr { { u64, u64 }, u64 }, bytes, !162
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr { u64, u64 }, v76, !164
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !166
        v80 = load v79, !167
        v81 = const u64 32, !168
        v82 = asm(dst: v80, src: v74, len: v81) -> (), !173 {
            mcp    dst src len, !174
        }
        v83 = get_local ptr { { u64, u64 }, u64 }, bytes, !176
        v84 = load v83, !177
        v85 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !179
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { { u64, u64 }, u64 }, v86, !180
        store v84 to v87, !181
        v88 = load v85, !182
        v89 = const u64 1
        v90 = const u64 0
        v91 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v89, v90, !183
        store v88 to v91, !184
        v92 = load v2, !185
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !186
        store v92 to v93, !186
        v94 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95, !54
        v97 = load v96
        v98 = const u64 0, !54
        v99 = cmp eq v97 v98, !189
        cbr v99, block0(), block1(), !187

        recover_8_unwrap_14_block1():
        v100 = const u64 0, !190
        revert v100, !195

        block0():
        v101 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v102 = const u64 1
        v103 = const u64 0
        v104 = get_elem_ptr v101, ptr { { { u64, u64 }, u64 } }, v102, v103
        v105 = load v104
        v106 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !196
        store v105 to v106, !196
        v107 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !57
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr u64, v108, !57
        v110 = const u64 0, !57
        store v110 to v109, !57
        v111 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !197
        v112 = load v111
        v113 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        store v112 to v113
        v114 = get_local ptr b256, __ret_val
        v115 = call sha256_24(v113, v114)
        v116 = load v115
        v117 = get_local ptr { b256 }, __anon_02, !202
        v118 = const u64 0
        v119 = get_elem_ptr v117, ptr b256, v118, !203
        store v116 to v119, !204
        v120 = load v117, !203
        v121 = const u64 1
        v122 = const u64 0
        v123 = get_elem_ptr v107, ptr { b256 }, v121, v122, !57
        store v120 to v123, !57
        v124 = load v107
        v125 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v124 to v125
        br block5(v125)

        block1():
        v126 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !54
        v129 = load v128
        v130 = const u64 1, !54
        v131 = cmp eq v129 v130, !207
        cbr v131, block2(), block3(), !205

        block2():
        v132 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !54
        v133 = const u64 1
        v134 = const u64 1
        v135 = get_elem_ptr v132, ptr { u64 }, v133, v134
        v136 = load v135
        v137 = get_local ptr { u64 }, e, !208
        store v136 to v137, !208
        v138 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !57
        v139 = const u64 0
        v140 = get_elem_ptr v138, ptr u64, v139, !57
        v141 = const u64 1, !57
        store v141 to v140, !57
        v142 = get_local ptr { u64 }, e, !209
        v143 = load v142
        v144 = const u64 1
        v145 = const u64 1
        v146 = get_elem_ptr v138, ptr { u64 }, v144, v145, !57
        store v143 to v146, !57
        v147 = load v138
        v148 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v147 to v148
        br block5(v148)

        block3():
        v149 = const u64 14757395258967588866, !186
        revert v149, !186

        block5(v150: ptr { u64, ( { b256 } | { u64 } ) }):
        v151 = load v150
        store v151 to __ret_value
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !212 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !213
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !216 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !163
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !219 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !165
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !223 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v2 = call new_25(v1)
        v3 = load v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !224
        store v3 to v4, !224
        v5 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !225
        v6 = ptr_to_int s to u64, !228
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !228
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !230
        v10 = load v9, !228
        v11 = const u64 0
        v12 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v11, !234
        v13 = ptr_to_int v9 to u64, !235
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }, !236
        v15 = load v14, !239
        v16 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v15 to v16
        v17 = call len_20(v16)
        v18 = const u64 0, !240
        v19 = cmp eq v17 v18, !243
        cbr v19, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !244

        hash_26_write_27_append_28_block1():
        v20 = const u64 1
        v21 = get_elem_ptr v12, ptr u64, v20, !245
        v22 = load v21, !246
        v23 = const u64 0, !247
        v24 = cmp eq v22 v23, !250
        cbr v24, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !251

        hash_26_write_27_append_28_block3():
        v25 = load v14, !252
        store v25 to v12, !254
        br hash_26_write_27_block0(), !256

        hash_26_write_27_append_28_block4():
        v26 = load v21, !257
        v27 = add v26, v17, !260
        v28 = load v21, !261
        v29 = const u64 0
        v30 = get_elem_ptr v12, ptr { u64, u64 }, v29, !262
        v31 = load v30, !263
        v32 = get_local ptr { u64, u64 }, __tmp_arg5
        store v31 to v32
        v33 = call capacity_31(v32)
        v34 = cmp lt v33 v27, !266
        cbr v34, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !267

        hash_26_write_27_append_28_block6():
        v35 = load v30, !268
        v36 = get_local ptr { u64, u64 }, __tmp_arg3
        store v35 to v36
        v37 = call ptr_22(v36)
        v38 = load v30, !269
        v39 = get_local ptr { u64, u64 }, __tmp_arg6
        store v38 to v39
        v40 = call capacity_31(v39)
        v41 = cmp gt v27 v40, !274
        cbr v41, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !275

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v42 = asm(size: v27) -> u64 hp, !278 {
            aloc   size, !135
        }
        v43 = const u64 0, !279
        v44 = cmp gt v40 v43, !282
        cbr v44, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !283

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v45 = asm(dst: v42, src: v37, len: v40) -> (), !286 {
            mcp    dst src len, !174
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !287

        hash_26_write_27_append_28_realloc_bytes_35_block5(v46: u64):
        v47 = get_local ptr { u64, u64 }, __anon_0, !292
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !293
        store v46 to v49, !294
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !295
        store v27 to v51, !296
        v52 = load v47, !297
        v53 = get_local ptr { u64, u64 }, __asm_arg
        store v52 to v53
        v54 = asm(ptr: v53) -> ptr slice ptr {
        }
        v55 = load v54
        v56 = get_local ptr slice, new_slice, !299
        store v55 to v56, !300
        v57 = get_local ptr slice, new_slice, !302
        v58 = load v57, !303
        v59 = get_local ptr slice, __asm_arg0
        store v58 to v59
        v60 = asm(ptr: v59) -> ptr { u64, u64 } ptr {
        }
        v61 = load v60
        v62 = get_local ptr { u64, u64 }, __anon_000, !308
        store v61 to v62, !309
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !311
        v65 = load v64, !312
        v66 = asm(size: v65) -> u64 hp, !315 {
            aloc   size, !135
        }
        v67 = const u64 0, !316
        v68 = cmp gt v65 v67, !319
        cbr v68, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !320

        hash_26_write_27_append_28_from_37_block0():
        v69 = get_local ptr slice, __asm_arg1
        store v58 to v69
        v70 = asm(ptr: v69) -> ptr { u64, u64 } ptr {
        }
        v71 = load v70
        v72 = get_local ptr { u64, u64 }, __anon_01, !323
        store v71 to v72, !324
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !326
        v75 = load v74, !327
        v76 = asm(dst: v66, src: v75, len: v65) -> (), !331 {
            mcp    dst src len, !332
        }
        br hash_26_write_27_append_28_from_37_block2(), !333

        hash_26_write_27_append_28_from_37_block2():
        v77 = get_local ptr { u64, u64 }, __anon_00, !335
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !336
        store v66 to v79, !337
        v80 = const u64 1
        v81 = get_elem_ptr v77, ptr u64, v80, !338
        store v65 to v81, !339
        v82 = load v77, !340
        store v82 to v30, !342
        br hash_26_write_27_append_28_block8(), !343

        hash_26_write_27_append_28_block8():
        v83 = load v30, !344
        v84 = get_local ptr { u64, u64 }, __tmp_arg4
        store v83 to v84
        v85 = call ptr_22(v84)
        v86 = asm(ptr: v85, offset: v28, new) -> u64 new, !348 {
            add    new ptr offset, !349
        }
        v87 = load v14, !350
        v88 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v87 to v88
        v89 = call ptr_21(v88)
        v90 = asm(dst: v86, src: v89, len: v17) -> (), !353 {
            mcp    dst src len, !174
        }
        store v27 to v21, !355
        br hash_26_write_27_block0(), !356

        hash_26_write_27_block0():
        v91 = get_local ptr b256, __const
        v92 = load v91
        v93 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !357
        v94 = load v93
        v95 = get_local ptr b256, result_buffer, !361
        store v92 to v95, !362
        v96 = get_local ptr b256, result_buffer, !364
        v97 = ptr_to_int v93 to u64, !365
        v98 = int_to_ptr v97 to ptr { { { u64, u64 }, u64 } }, !365
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr { { u64, u64 }, u64 }, v99, !366
        v101 = load v100, !365
        v102 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        store v101 to v102
        v103 = call ptr_21(v102)
        v104 = load v100, !365
        v105 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v104 to v105
        v106 = call len_20(v105)
        v107 = asm(hash: v96, ptr: v103, bytes: v106) -> ptr b256 hash {
            s256   hash ptr bytes, !367
        }
        v108 = load v107
        store v108 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !370 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !371
        v1 = asm(size: v0) -> u64 hp, !378 {
            aloc   size, !135
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !380
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !381
        store v1 to v4, !382
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !383
        v7 = const u64 0, !384
        store v7 to v6, !385
        v8 = load v2, !386
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !388
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !389
        store v8 to v11, !390
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !389
        v14 = const u64 0, !391
        store v14 to v13, !392
        v15 = load v9, !389
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !393
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !393
        v19 = load v16
        store v19 to __ret_value
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !396 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !397
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = (!4 !5 !7)
!10 = span !6 1042 1058
!11 = fn_call_path_span !6 1042 1056
!12 = span !6 314 323
!13 = (!4 !5 !10 !11 !12)
!14 = (!4 !5 !10 !11)
!15 = (!4 !5 !10 !11)
!16 = span !6 315 318
!17 = (!4 !5 !10 !11 !12)
!18 = (!4 !5 !10 !11)
!19 = (!4 !5 !10 !11)
!20 = (!4 !5 !10 !11)
!21 = (!4 !5 !10 !11)
!22 = span !6 289 334
!23 = (!4 !5 !10 !11 !22)
!24 = (!4 !5 !10 !11)
!25 = (!4 !5 !10 !11 !22)
!26 = (!4 !5 !10 !11)
!27 = span !6 1026 1059
!28 = (!4 !5 !27)
!29 = (!4 !5 !27)
!30 = span !6 1072 1081
!31 = (!4 !5 !30)
!32 = (!4 !5)
!33 = span !6 1085 1094
!34 = (!4 !5 !33)
!35 = span !6 1108 1117
!36 = (!4 !5 !35)
!37 = span !6 1126 1133
!38 = (!4 !5 !37)
!39 = span !6 1148 1157
!40 = (!4 !5 !39)
!41 = span !6 1166 1173
!42 = (!4 !5 !41)
!43 = span !6 799 968
!44 = fn_name_span !6 802 804
!45 = inline "never"
!46 = (!43 !44 !45)
!47 = span !6 218 232
!48 = span !6 889 891
!49 = span !6 842 962
!50 = span !6 907 926
!51 = span !6 492 714
!52 = fn_name_span !6 499 506
!53 = (!51 !52)
!54 = span !6 582 603
!55 = fn_call_path_span !6 587 594
!56 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!57 = span !56 1815 1933
!58 = (!54 !55 !57)
!59 = (!54 !55 !57)
!60 = (!54 !55 !57)
!61 = span !6 451 469
!62 = fn_call_path_span !6 459 467
!63 = (!54 !55 !61 !62)
!64 = (!54 !55 !61 !62)
!65 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!66 = span !65 329 341
!67 = (!54 !55 !61 !62 !66)
!68 = (!54 !55 !61 !62)
!69 = span !65 1593 1595
!70 = span !65 1573 1595
!71 = fn_call_path_span !65 1590 1592
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!73 = span !72 15515 15529
!74 = fn_call_path_span !72 15520 15522
!75 = (!54 !55 !61 !62 !70 !71 !73 !74)
!76 = span !72 12533 12538
!77 = span !72 15514 15536
!78 = fn_call_path_span !72 15531 15534
!79 = (!54 !55 !61 !62 !70 !71 !77 !78)
!80 = (!54 !55 !61 !62 !70)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!82 = span !81 2461 2560
!83 = (!54 !55 !61 !62 !82)
!84 = (!54 !55 !61 !62 !82)
!85 = (!54 !55 !61 !62 !82)
!86 = (!54 !55 !61 !62)
!87 = span !65 1610 1621
!88 = (!54 !55 !61 !62 !87)
!89 = (!54 !55 !61 !62 !82)
!90 = (!54 !55 !61 !62 !82)
!91 = (!54 !55 !61 !62 !82)
!92 = (!54 !55 !61 !62)
!93 = (!54 !55 !61 !62 !82)
!94 = (!54 !55 !61 !62 !82)
!95 = (!54 !55 !61 !62)
!96 = (!54 !55 !61 !62)
!97 = span !6 451 478
!98 = fn_call_path_span !6 470 476
!99 = span !81 4973 5075
!100 = (!54 !55 !97 !98 !99)
!101 = (!54 !55 !97 !98 !99)
!102 = span !81 4979 4983
!103 = (!54 !55 !97 !98 !102)
!104 = (!54 !55 !97 !98 !102)
!105 = (!54 !55 !97 !98)
!106 = span !81 4998 5037
!107 = fn_call_path_span !81 4998 5037
!108 = (!54 !55 !97 !98 !106 !107)
!109 = (!54 !55 !97 !98 !106)
!110 = (!54 !55 !97 !98 !102)
!111 = (!54 !55 !97 !98)
!112 = (!54 !55 !97 !98)
!113 = span !81 5009 5020
!114 = (!54 !55 !97 !98 !113)
!115 = (!54 !55 !97 !98 !113)
!116 = span !81 5025 5036
!117 = (!54 !55 !97 !98 !116)
!118 = (!54 !55 !97 !98)
!119 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!120 = span !119 28953 28955
!121 = span !6 435 479
!122 = fn_call_path_span !6 435 450
!123 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!124 = span !123 3133 3150
!125 = fn_call_path_span !123 3133 3144
!126 = span !119 28933 28956
!127 = fn_call_path_span !119 28933 28952
!128 = span !119 4157 4190
!129 = fn_call_path_span !119 4157 4180
!130 = span !119 863 884
!131 = fn_call_path_span !119 863 874
!132 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!133 = span !132 3315 3378
!134 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129 !130 !131 !133)
!135 = span !132 3342 3351
!136 = span !119 839 922
!137 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129 !136)
!138 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129)
!139 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129 !136)
!140 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129)
!141 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129 !136)
!142 = (!54 !55 !121 !122 !124 !125 !126 !127 !128 !129)
!143 = span !119 4133 4221
!144 = (!54 !55 !121 !122 !124 !125 !126 !127 !143)
!145 = (!54 !55 !121 !122 !124 !125 !126 !127)
!146 = (!54 !55 !121 !122 !124 !125 !126 !127 !143)
!147 = (!54 !55 !121 !122 !124 !125 !126 !127)
!148 = span !119 4209 4210
!149 = (!54 !55 !121 !122 !124 !125 !126 !127 !143)
!150 = (!54 !55 !121 !122 !124 !125 !126 !127)
!151 = span !119 28917 28957
!152 = (!54 !55 !121 !122 !124 !125 !151)
!153 = (!54 !55 !121 !122 !124 !125 !151)
!154 = span !119 28966 28980
!155 = (!54 !55 !121 !122 !124 !125 !154)
!156 = (!54 !55 !121 !122 !124 !125 !154)
!157 = span !119 28978 28980
!158 = (!54 !55 !121 !122 !124 !125 !154)
!159 = span !119 29065 29077
!160 = (!54 !55 !121 !122 !124 !125 !159)
!161 = span !119 29092 29097
!162 = (!54 !55 !121 !122 !124 !125 !161)
!163 = span !119 2445 2458
!164 = (!54 !55 !121 !122 !124 !125 !163)
!165 = span !119 400 412
!166 = (!54 !55 !121 !122 !124 !125 !165)
!167 = (!54 !55 !121 !122 !124 !125)
!168 = span !119 29107 29109
!169 = span !119 29065 29110
!170 = fn_call_path_span !119 29078 29091
!171 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!172 = span !171 5999 6076
!173 = (!54 !55 !121 !122 !124 !125 !169 !170 !172)
!174 = span !171 6050 6065
!175 = span !119 29121 29126
!176 = (!54 !55 !121 !122 !124 !125 !175)
!177 = (!54 !55 !121 !122 !124 !125)
!178 = span !123 3107 3161
!179 = (!54 !55 !121 !122 !178)
!180 = (!54 !55 !121 !122)
!181 = (!54 !55 !121 !122 !178)
!182 = (!54 !55 !121 !122)
!183 = (!54 !55 !57)
!184 = (!54 !55 !57)
!185 = (!54 !55)
!186 = span !6 576 708
!187 = span !6 618 668
!188 = fn_call_path_span !6 618 668
!189 = (!187 !188)
!190 = span !81 5062 5063
!191 = span !81 5055 5064
!192 = fn_call_path_span !81 5055 5061
!193 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!194 = span !193 757 771
!195 = (!54 !55 !97 !98 !191 !192 !194)
!196 = span !6 621 628
!197 = span !6 657 664
!198 = span !6 636 666
!199 = fn_call_path_span !6 636 649
!200 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!201 = span !200 2370 2383
!202 = (!198 !199 !201)
!203 = (!198 !199)
!204 = (!198 !199 !201)
!205 = span !6 681 698
!206 = fn_call_path_span !6 681 698
!207 = (!205 !206)
!208 = span !6 685 686
!209 = span !6 695 696
!210 = span !119 13771 13819
!211 = fn_name_span !119 13778 13781
!212 = (!210 !211)
!213 = span !119 2506 2514
!214 = span !119 15175 15233
!215 = fn_name_span !119 15182 15185
!216 = (!214 !215)
!217 = span !119 978 1030
!218 = fn_name_span !119 985 988
!219 = (!217 !218)
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!221 = span !220 9009 9138
!222 = fn_name_span !220 9016 9022
!223 = (!221 !222 !45)
!224 = span !220 9065 9096
!225 = span !220 9108 9114
!226 = span !220 9101 9115
!227 = fn_call_path_span !220 9103 9107
!228 = (!226 !227)
!229 = span !123 524 536
!230 = (!226 !227 !229)
!231 = span !123 5123 5146
!232 = fn_call_path_span !123 5129 5134
!233 = span !220 142 154
!234 = (!226 !227 !231 !232 !233)
!235 = (!226 !227 !231 !232)
!236 = (!226 !227 !231 !232)
!237 = span !220 365 389
!238 = fn_call_path_span !220 376 382
!239 = (!226 !227 !231 !232 !237 !238)
!240 = span !119 18435 18436
!241 = span !119 18422 18436
!242 = fn_call_path_span !119 18432 18434
!243 = (!226 !227 !231 !232 !237 !238 !241 !242)
!244 = (!226 !227 !231 !232 !237 !238 !241)
!245 = (!226 !227 !231 !232 !237 !238 !213)
!246 = (!226 !227 !231 !232 !237 !238)
!247 = span !119 18572 18573
!248 = span !119 18560 18573
!249 = fn_call_path_span !119 18569 18571
!250 = (!226 !227 !231 !232 !237 !238 !248 !249)
!251 = (!226 !227 !231 !232 !237 !238 !248)
!252 = (!226 !227 !231 !232 !237 !238)
!253 = span !119 18588 18600
!254 = (!226 !227 !231 !232 !237 !238 !253)
!255 = span !119 18614 18620
!256 = (!226 !227 !231 !232 !237 !238 !255)
!257 = (!226 !227 !231 !232 !237 !238)
!258 = span !119 18657 18677
!259 = fn_call_path_span !119 18666 18667
!260 = (!226 !227 !231 !232 !237 !238 !258 !259)
!261 = (!226 !227 !231 !232 !237 !238)
!262 = (!226 !227 !231 !232 !237 !238 !163)
!263 = (!226 !227 !231 !232 !237 !238)
!264 = span !119 18808 18838
!265 = fn_call_path_span !119 18828 18829
!266 = (!226 !227 !231 !232 !237 !238 !264 !265)
!267 = (!226 !227 !231 !232 !237 !238 !264)
!268 = (!226 !227 !231 !232 !237 !238)
!269 = (!226 !227 !231 !232 !237 !238)
!270 = span !119 18914 18974
!271 = fn_call_path_span !119 18914 18927
!272 = span !132 4168 4185
!273 = fn_call_path_span !132 4178 4179
!274 = (!226 !227 !231 !232 !237 !238 !270 !271 !272 !273)
!275 = (!226 !227 !231 !232 !237 !238 !270 !271 !272)
!276 = span !132 4210 4232
!277 = fn_call_path_span !132 4210 4221
!278 = (!226 !227 !231 !232 !237 !238 !270 !271 !276 !277 !133)
!279 = span !132 4253 4254
!280 = span !132 4245 4254
!281 = fn_call_path_span !132 4251 4252
!282 = (!226 !227 !231 !232 !237 !238 !270 !271 !280 !281)
!283 = (!226 !227 !231 !232 !237 !238 !270 !271 !280)
!284 = span !132 4269 4302
!285 = fn_call_path_span !132 4273 4286
!286 = (!226 !227 !231 !232 !237 !238 !270 !271 !284 !285 !172)
!287 = (!226 !227 !231 !232 !237 !238 !270 !271)
!288 = span !119 18869 19015
!289 = fn_call_path_span !119 18869 18890
!290 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!291 = span !290 2362 2393
!292 = (!226 !227 !231 !232 !237 !238 !288 !289 !291)
!293 = (!226 !227 !231 !232 !237 !238 !288 !289 !291)
!294 = (!226 !227 !231 !232 !237 !238 !288 !289 !291)
!295 = (!226 !227 !231 !232 !237 !238 !288 !289 !291)
!296 = (!226 !227 !231 !232 !237 !238 !288 !289 !291)
!297 = (!226 !227 !231 !232 !237 !238 !288 !289)
!298 = span !119 18853 19016
!299 = (!226 !227 !231 !232 !237 !238 !298)
!300 = (!226 !227 !231 !232 !237 !238 !298)
!301 = span !119 19055 19064
!302 = (!226 !227 !231 !232 !237 !238 !301)
!303 = (!226 !227 !231 !232 !237 !238)
!304 = span !119 19040 19065
!305 = fn_call_path_span !119 19040 19054
!306 = span !119 2130 2153
!307 = fn_call_path_span !119 2136 2151
!308 = (!226 !227 !231 !232 !237 !238 !304 !305 !306 !307)
!309 = (!226 !227 !231 !232 !237 !238 !304 !305 !306 !307)
!310 = span !290 3976 3977
!311 = (!226 !227 !231 !232 !237 !238 !304 !305 !306 !307 !310)
!312 = (!226 !227 !231 !232 !237 !238 !304 !305 !306 !307)
!313 = span !119 2173 2189
!314 = fn_call_path_span !119 2173 2184
!315 = (!226 !227 !231 !232 !237 !238 !304 !305 !313 !314 !133)
!316 = span !119 2208 2209
!317 = span !119 2202 2209
!318 = fn_call_path_span !119 2206 2207
!319 = (!226 !227 !231 !232 !237 !238 !304 !305 !317 !318)
!320 = (!226 !227 !231 !232 !237 !238 !304 !305 !317)
!321 = span !119 2224 2235
!322 = fn_call_path_span !119 2230 2233
!323 = (!226 !227 !231 !232 !237 !238 !304 !305 !321 !322)
!324 = (!226 !227 !231 !232 !237 !238 !304 !305 !321 !322)
!325 = span !290 2928 2929
!326 = (!226 !227 !231 !232 !237 !238 !304 !305 !321 !322 !325)
!327 = (!226 !227 !231 !232 !237 !238 !304 !305 !321 !322)
!328 = span !119 2224 2259
!329 = fn_call_path_span !119 2236 2243
!330 = span !171 3447 3522
!331 = (!226 !227 !231 !232 !237 !238 !304 !305 !328 !329 !330)
!332 = span !171 3496 3511
!333 = (!226 !227 !231 !232 !237 !238 !304 !305)
!334 = span !119 2279 2296
!335 = (!226 !227 !231 !232 !237 !238 !304 !305 !334)
!336 = (!226 !227 !231 !232 !237 !238 !304 !305)
!337 = (!226 !227 !231 !232 !237 !238 !304 !305 !334)
!338 = (!226 !227 !231 !232 !237 !238 !304 !305)
!339 = (!226 !227 !231 !232 !237 !238 !304 !305 !334)
!340 = (!226 !227 !231 !232 !237 !238 !304 !305)
!341 = span !119 19029 19065
!342 = (!226 !227 !231 !232 !237 !238 !341)
!343 = (!226 !227 !231 !232 !237 !238)
!344 = (!226 !227 !231 !232 !237 !238)
!345 = span !119 19100 19143
!346 = fn_call_path_span !119 19115 19130
!347 = span !171 6721 6825
!348 = (!226 !227 !231 !232 !237 !238 !345 !346 !347)
!349 = span !171 6771 6789
!350 = (!226 !227 !231 !232 !237 !238)
!351 = span !119 19153 19198
!352 = fn_call_path_span !119 19165 19178
!353 = (!226 !227 !231 !232 !237 !238 !351 !352 !172)
!354 = span !119 19244 19263
!355 = (!226 !227 !231 !232 !237 !238 !354)
!356 = (!226 !227 !231 !232 !237 !238)
!357 = span !220 9121 9127
!358 = span !220 9121 9136
!359 = fn_call_path_span !220 9128 9134
!360 = span !220 440 476
!361 = (!358 !359 !360)
!362 = (!358 !359 !360)
!363 = span !220 508 521
!364 = (!358 !359 !363)
!365 = (!358 !359)
!366 = (!358 !359 !233)
!367 = span !220 619 638
!368 = span !220 177 263
!369 = fn_name_span !220 184 187
!370 = (!368 !369)
!371 = span !119 570 571
!372 = span !220 234 246
!373 = fn_call_path_span !220 234 244
!374 = span !119 3079 3094
!375 = fn_call_path_span !119 3079 3092
!376 = span !119 558 572
!377 = fn_call_path_span !119 558 569
!378 = (!372 !373 !374 !375 !376 !377 !133)
!379 = span !119 534 603
!380 = (!372 !373 !374 !375 !379)
!381 = (!372 !373 !374 !375)
!382 = (!372 !373 !374 !375 !379)
!383 = (!372 !373 !374 !375)
!384 = span !119 591 592
!385 = (!372 !373 !374 !375 !379)
!386 = (!372 !373 !374 !375)
!387 = span !119 3055 3125
!388 = (!372 !373 !387)
!389 = (!372 !373)
!390 = (!372 !373 !387)
!391 = span !119 3113 3114
!392 = (!372 !373 !387)
!393 = span !220 208 257
!394 = span !119 1081 1134
!395 = fn_name_span !119 1088 1096
!396 = (!394 !395)
!397 = span !119 418 426

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { [u8; 64] } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { [u8; 64] } __tmp_arg3
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = load v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v3, v1
        v4 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        mem_copy_val v4, v3
        v5 = get_local ptr [u8; 64], __anon_0, !12
        v6 = const u64 0
        br play_0_new_5_array_init_loop(v6), !13

        play_0_new_5_array_init_loop(v7: u64):
        v8 = get_elem_ptr v5, ptr u8, v7, !14
        v9 = const u8 0, !15
        store v9 to v8, !16
        v10 = const u64 1
        v11 = add v7, v10, !17
        v12 = const u64 64
        v13 = cmp lt v11 v12, !18
        cbr v13, play_0_new_5_array_init_loop(v11), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v14 = load v5, !20
        v15 = get_local ptr { [u8; 64] }, __anon_1, !22
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr [u8; 64], v16, !23
        mem_copy_val v17, v5
        v18 = load v15, !24
        v19 = get_local ptr { [u8; 64] }, __anon_1, !26
        v20 = get_local ptr { [u8; 64] }, __anon_1, !28
        v21 = load v20, !29
        v22 = get_local ptr { [u8; 64] }, __anon_1, !31
        v23 = load v22, !29
        v24 = get_local ptr { [u8; 64] }, __anon_1
        v25 = get_local ptr { [u8; 64] }, __anon_1
        v26 = call eq_6(v24, v25)
        v27 = get_local ptr { [u8; 64] }, __anon_1, !33
        v28 = load v27, !29
        v29 = get_local ptr { { { u64, u64 }, u64 } }, message, !35
        v30 = load v29, !29
        v31 = get_local ptr { [u8; 64] }, __anon_1
        v32 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        mem_copy_val v32, v29
        v33 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v34 = call address_7(v31, v32, v33)
        v35 = load v34
        v36 = get_local ptr { [u8; 64] }, __anon_1, !37
        v37 = load v36, !29
        v38 = get_local ptr { { { u64, u64 }, u64 } }, message, !39
        v39 = load v38, !29
        v40 = get_local ptr { [u8; 64] }, __anon_1
        v41 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        mem_copy_val v41, v38
        v42 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v43 = call address_7(v40, v41, v42)
        v44 = load v43
        v45 = const unit ()
        ret () v45
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !43 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = load self
        v1 = load other
        v2 = ptr_to_int self to u64
        v3 = int_to_ptr v2 to ptr { [u8; 64] }
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr [u8; 64], v4, !44
        v6 = ptr_to_int other to u64
        v7 = int_to_ptr v6 to ptr { [u8; 64] }
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr [u8; 64], v8, !44
        v10 = const u64 64, !45
        v11 = asm(result, r2: v5, r3: v9, r4: v10) -> bool result, !46 {
            meq    result r2 r3 r4, !47
        }
        ret bool v11
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !50 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !55
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !56
        v5 = const u64 0, !54
        store v5 to v4, !57
        v6 = ptr_to_int message to u64, !60
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !61
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !64
        v10 = load v9, !65
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v11, v9
        v12 = call len_20(v11)
        v13 = const u64 32, !66
        v14 = cmp eq v12 v13, !72
        v15 = const bool false, !73
        v16 = cmp eq v14 v15, !76
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !77

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !80
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !81
        v20 = const u64 0, !79
        store v20 to v19, !82
        v21 = load v17, !83
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v22, v17
        br recover_8_block0(v22), !85

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !86
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !87
        v26 = const u64 1, !79
        store v26 to v25, !88
        v27 = load v9, !89
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v28, v9
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> ptr b256 bits {
        }
        v31 = load v30
        v32 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v32, v30
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v23, ptr b256, v33, v34, !90
        mem_copy_val v35, v32
        v36 = load v23, !91
        v37 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v37, v23
        br recover_8_block0(v37), !92

        recover_8_block0(v38: ptr { u64, ( () | b256 ) }):
        v39 = load v38
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !96
        mem_copy_val v40, v38
        v41 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !98
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !99
        v44 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v45 = get_elem_ptr v44, ptr u64, v42
        v46 = load v45, !100
        v47 = const u64 1, !97
        v48 = cmp eq v46 v47, !103
        cbr v48, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !104

        recover_8_unwrap_14_block0():
        v49 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !105
        v50 = const u64 1
        v51 = const u64 1
        v52 = get_elem_ptr v49, ptr b256, v50, v51, !106
        v53 = load v52, !107
        v54 = get_local ptr b256, inner_value, !109
        mem_copy_val v54, v52
        v55 = get_local ptr b256, inner_value, !111
        v56 = load v55, !112
        v57 = const u64 32, !114
        v58 = asm(size: v57) -> u64 hp, !128 {
            aloc   size, !129
        }
        v59 = get_local ptr { u64, u64 }, __anon_00000, !131
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !132
        store v58 to v61, !133
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !134
        store v57 to v63, !135
        v64 = load v59, !136
        v65 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !138
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr { u64, u64 }, v66, !139
        mem_copy_val v67, v59
        v68 = const u64 1
        v69 = get_elem_ptr v65, ptr u64, v68, !140
        v70 = const u64 0, !141
        store v70 to v69, !142
        v71 = load v65, !143
        v72 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        mem_copy_val v72, v65
        v73 = get_local ptr { { u64, u64 }, u64 }, bytes, !147
        v74 = const u64 1
        v75 = get_elem_ptr v73, ptr u64, v74, !148
        v76 = const u64 32, !149
        store v76 to v75, !150
        v77 = ptr_to_int v55 to u64, !152
        v78 = get_local ptr { { u64, u64 }, u64 }, bytes, !154
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr { u64, u64 }, v79, !156
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81, !158
        v83 = load v82, !159
        v84 = const u64 32, !160
        v85 = asm(dst: v83, src: v77, len: v84) -> (), !165 {
            mcp    dst src len, !166
        }
        v86 = get_local ptr { { u64, u64 }, u64 }, bytes, !168
        v87 = load v86, !169
        v88 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !171
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr { { u64, u64 }, u64 }, v89, !172
        mem_copy_val v90, v86
        v91 = load v88, !173
        v92 = const u64 1
        v93 = const u64 0
        v94 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v92, v93, !174
        mem_copy_val v94, v88
        v95 = load v2, !175
        v96 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !176
        mem_copy_val v96, v2
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !51
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr u64, v98, !51
        v100 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v101 = get_elem_ptr v100, ptr u64, v98
        v102 = load v101
        v103 = const u64 0, !51
        v104 = cmp eq v102 v103, !179
        cbr v104, block0(), block1(), !177

        recover_8_unwrap_14_block1():
        v105 = const u64 0, !180
        revert v105, !185

        block0():
        v106 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !51
        v107 = const u64 1
        v108 = const u64 0
        v109 = get_elem_ptr v106, ptr { { { u64, u64 }, u64 } }, v107, v108
        v110 = load v109
        v111 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !186
        mem_copy_val v111, v109
        v112 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !54
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr u64, v113, !54
        v115 = const u64 0, !54
        store v115 to v114, !54
        v116 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !187
        v117 = load v109
        v118 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v118, v109
        v119 = get_local ptr b256, __ret_val
        v120 = call sha256_24(v118, v119)
        v121 = load v120
        v122 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v122, v120
        v123 = get_local ptr { b256 }, __anon_02, !192
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr b256, v124, !193
        mem_copy_val v125, v122
        v126 = load v123, !193
        v127 = const u64 1
        v128 = const u64 0
        v129 = get_elem_ptr v112, ptr { b256 }, v127, v128, !54
        mem_copy_val v129, v123
        v130 = load v112
        v131 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v131, v112
        br block5(v131)

        block1():
        v132 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !51
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133, !51
        v135 = load v134
        v136 = const u64 1, !51
        v137 = cmp eq v135 v136, !196
        cbr v137, block2(), block3(), !194

        block2():
        v138 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !51
        v139 = const u64 1
        v140 = const u64 1
        v141 = get_elem_ptr v138, ptr { u64 }, v139, v140
        v142 = load v141
        v143 = get_local ptr { u64 }, e, !197
        mem_copy_val v143, v141
        v144 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !54
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr u64, v145, !54
        v147 = const u64 1, !54
        store v147 to v146, !54
        v148 = get_local ptr { u64 }, e, !198
        v149 = load v141
        v150 = const u64 1
        v151 = const u64 1
        v152 = get_elem_ptr v144, ptr { u64 }, v150, v151, !54
        mem_copy_val v152, v141
        v153 = load v144
        v154 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v154, v144
        br block5(v154)

        block3():
        v155 = const u64 14757395258967588866, !176
        revert v155, !176

        block5(v156: ptr { u64, ( { b256 } | { u64 } ) }):
        v157 = load v156
        mem_copy_val __ret_value, v156
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !201 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !202
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !205 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !155
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v6, v4
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !208 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !157
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !212 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local mut { u64, u64 } __aggr_memcpy_01
        local mut { u64, u64 } __aggr_memcpy_02
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v2 = call new_25(v1)
        v3 = load v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v4, v2
        v5 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !213
        mem_copy_val v5, v4
        v6 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !214
        v7 = ptr_to_int s to u64, !217
        v8 = int_to_ptr v7 to ptr { { { u64, u64 }, u64 } }, !217
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !219
        v11 = load v10, !217
        v12 = const u64 0
        v13 = get_elem_ptr v6, ptr { { u64, u64 }, u64 }, v12, !223
        v14 = ptr_to_int v10 to u64, !224
        v15 = int_to_ptr v14 to ptr { { u64, u64 }, u64 }, !225
        v16 = load v15, !228
        v17 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v17, v15
        v18 = call len_20(v17)
        v19 = const u64 0, !229
        v20 = cmp eq v18 v19, !232
        cbr v20, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !233

        hash_26_write_27_append_28_block1():
        v21 = const u64 1
        v22 = get_elem_ptr v13, ptr u64, v21, !234
        v23 = load v22, !235
        v24 = const u64 0, !236
        v25 = cmp eq v23 v24, !239
        cbr v25, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !240

        hash_26_write_27_append_28_block3():
        v26 = load v15, !241
        mem_copy_val v13, v15
        br hash_26_write_27_block0(), !243

        hash_26_write_27_append_28_block4():
        v27 = load v22, !244
        v28 = add v27, v18, !247
        v29 = load v22, !248
        v30 = const u64 0
        v31 = get_elem_ptr v13, ptr { u64, u64 }, v30, !249
        v32 = load v31, !250
        v33 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v33, v31
        v34 = call capacity_31(v33)
        v35 = cmp lt v34 v28, !253
        cbr v35, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !254

        hash_26_write_27_append_28_block6():
        v36 = load v31, !255
        v37 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v37, v31
        v38 = call ptr_22(v37)
        v39 = load v31, !256
        v40 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v40, v31
        v41 = call capacity_31(v40)
        v42 = cmp gt v28 v41, !261
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v38), !262

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v28) -> u64 hp, !265 {
            aloc   size, !129
        }
        v44 = const u64 0, !266
        v45 = cmp gt v41 v44, !269
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !270

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v38, len: v41) -> (), !273 {
            mcp    dst src len, !166
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !274

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = get_local ptr { u64, u64 }, __anon_0, !279
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !280
        store v47 to v50, !281
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !282
        store v28 to v52, !283
        v53 = load v48, !284
        v54 = get_local ptr { u64, u64 }, __asm_arg
        mem_copy_val v54, v48
        v55 = asm(ptr: v54) -> ptr slice ptr {
        }
        v56 = load v55
        v57 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v57, v55
        v58 = get_local ptr slice, new_slice, !286
        mem_copy_val v58, v57
        v59 = get_local ptr slice, new_slice, !288
        v60 = load v57, !289
        v61 = get_local ptr slice, __asm_arg0
        mem_copy_val v61, v57
        v62 = asm(ptr: v61) -> ptr { u64, u64 } ptr {
        }
        v63 = load v62
        v64 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        mem_copy_val v64, v62
        v65 = get_local ptr { u64, u64 }, __anon_000, !294
        mem_copy_val v65, v64
        v66 = const u64 1
        v67 = get_elem_ptr v65, ptr u64, v66, !296
        v68 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v69 = get_elem_ptr v68, ptr u64, v66
        v70 = load v69, !297
        v71 = asm(size: v70) -> u64 hp, !300 {
            aloc   size, !129
        }
        v72 = const u64 0, !301
        v73 = cmp gt v70 v72, !304
        cbr v73, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !305

        hash_26_write_27_append_28_from_37_block0():
        v74 = get_local ptr slice, __asm_arg1
        mem_copy_val v74, v59
        v75 = asm(ptr: v74) -> ptr { u64, u64 } ptr {
        }
        v76 = load v75
        v77 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        mem_copy_val v77, v75
        v78 = get_local ptr { u64, u64 }, __anon_01, !308
        mem_copy_val v78, v77
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr u64, v79, !310
        v81 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v82 = get_elem_ptr v81, ptr u64, v79
        v83 = load v82, !311
        v84 = asm(dst: v71, src: v83, len: v70) -> (), !315 {
            mcp    dst src len, !316
        }
        br hash_26_write_27_append_28_from_37_block2(), !317

        hash_26_write_27_append_28_from_37_block2():
        v85 = get_local ptr { u64, u64 }, __anon_00, !319
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !320
        store v71 to v87, !321
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr u64, v88, !322
        mem_copy_val v89, v67
        v90 = load v85, !323
        mem_copy_val v31, v85
        br hash_26_write_27_append_28_block8(), !324

        hash_26_write_27_append_28_block8():
        v91 = load v31, !325
        v92 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v92, v31
        v93 = call ptr_22(v92)
        v94 = asm(ptr: v93, offset: v29, new) -> u64 new, !329 {
            add    new ptr offset, !330
        }
        v95 = load v15, !331
        v96 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v96, v15
        v97 = call ptr_21(v96)
        v98 = asm(dst: v94, src: v97, len: v18) -> (), !334 {
            mcp    dst src len, !166
        }
        store v28 to v22, !336
        br hash_26_write_27_block0(), !337

        hash_26_write_27_block0():
        v99 = get_local ptr b256, __const
        v100 = load v99
        v101 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !338
        v102 = load v101
        v103 = get_local ptr b256, result_buffer, !342
        mem_copy_val v103, v99
        v104 = get_local ptr b256, result_buffer, !344
        v105 = ptr_to_int v101 to u64, !345
        v106 = int_to_ptr v105 to ptr { { { u64, u64 }, u64 } }, !345
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { { u64, u64 }, u64 }, v107, !346
        v109 = load v108, !345
        v110 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v110, v108
        v111 = call ptr_21(v110)
        v112 = load v108, !345
        v113 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v113, v108
        v114 = call len_20(v113)
        v115 = asm(hash: v104, ptr: v111, bytes: v114) -> ptr b256 hash {
            s256   hash ptr bytes, !347
        }
        v116 = load v115
        v117 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v117, v115
        mem_copy_val __ret_value, v117
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !350 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !351
        v1 = asm(size: v0) -> u64 hp, !358 {
            aloc   size, !129
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !360
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !361
        store v1 to v4, !362
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !363
        v7 = const u64 0, !364
        store v7 to v6, !365
        v8 = load v2, !366
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !368
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !369
        mem_copy_val v11, v2
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !369
        v14 = const u64 0, !370
        store v14 to v13, !371
        v15 = load v9, !369
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !372
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        mem_copy_val v18, v9
        v19 = load v16
        mem_copy_val __ret_value, v16
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !375 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !376
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = (!4 !5 !9 !10)
!21 = span !6 289 334
!22 = (!4 !5 !9 !10 !21)
!23 = (!4 !5 !9 !10)
!24 = (!4 !5 !9 !10)
!25 = span !6 1026 1059
!26 = (!4 !5 !25)
!27 = span !6 1072 1081
!28 = (!4 !5 !27)
!29 = (!4 !5)
!30 = span !6 1085 1094
!31 = (!4 !5 !30)
!32 = span !6 1108 1117
!33 = (!4 !5 !32)
!34 = span !6 1126 1133
!35 = (!4 !5 !34)
!36 = span !6 1148 1157
!37 = (!4 !5 !36)
!38 = span !6 1166 1173
!39 = (!4 !5 !38)
!40 = span !6 799 968
!41 = fn_name_span !6 802 804
!42 = inline "never"
!43 = (!40 !41 !42)
!44 = span !6 218 232
!45 = span !6 889 891
!46 = span !6 842 962
!47 = span !6 907 926
!48 = span !6 492 714
!49 = fn_name_span !6 499 506
!50 = (!48 !49)
!51 = span !6 582 603
!52 = fn_call_path_span !6 587 594
!53 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!54 = span !53 1815 1933
!55 = (!51 !52 !54)
!56 = (!51 !52 !54)
!57 = (!51 !52 !54)
!58 = span !6 451 469
!59 = fn_call_path_span !6 459 467
!60 = (!51 !52 !58 !59)
!61 = (!51 !52 !58 !59)
!62 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!63 = span !62 329 341
!64 = (!51 !52 !58 !59 !63)
!65 = (!51 !52 !58 !59)
!66 = span !62 1593 1595
!67 = span !62 1573 1595
!68 = fn_call_path_span !62 1590 1592
!69 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!70 = span !69 15515 15529
!71 = fn_call_path_span !69 15520 15522
!72 = (!51 !52 !58 !59 !67 !68 !70 !71)
!73 = span !69 12533 12538
!74 = span !69 15514 15536
!75 = fn_call_path_span !69 15531 15534
!76 = (!51 !52 !58 !59 !67 !68 !74 !75)
!77 = (!51 !52 !58 !59 !67)
!78 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!79 = span !78 2461 2560
!80 = (!51 !52 !58 !59 !79)
!81 = (!51 !52 !58 !59 !79)
!82 = (!51 !52 !58 !59 !79)
!83 = (!51 !52 !58 !59)
!84 = span !62 1610 1621
!85 = (!51 !52 !58 !59 !84)
!86 = (!51 !52 !58 !59 !79)
!87 = (!51 !52 !58 !59 !79)
!88 = (!51 !52 !58 !59 !79)
!89 = (!51 !52 !58 !59)
!90 = (!51 !52 !58 !59 !79)
!91 = (!51 !52 !58 !59)
!92 = (!51 !52 !58 !59)
!93 = span !6 451 478
!94 = fn_call_path_span !6 470 476
!95 = span !78 4973 5075
!96 = (!51 !52 !93 !94 !95)
!97 = span !78 4979 4983
!98 = (!51 !52 !93 !94 !97)
!99 = (!51 !52 !93 !94 !97)
!100 = (!51 !52 !93 !94)
!101 = span !78 4998 5037
!102 = fn_call_path_span !78 4998 5037
!103 = (!51 !52 !93 !94 !101 !102)
!104 = (!51 !52 !93 !94 !101)
!105 = (!51 !52 !93 !94 !97)
!106 = (!51 !52 !93 !94)
!107 = (!51 !52 !93 !94)
!108 = span !78 5009 5020
!109 = (!51 !52 !93 !94 !108)
!110 = span !78 5025 5036
!111 = (!51 !52 !93 !94 !110)
!112 = (!51 !52 !93 !94)
!113 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!114 = span !113 28953 28955
!115 = span !6 435 479
!116 = fn_call_path_span !6 435 450
!117 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!118 = span !117 3133 3150
!119 = fn_call_path_span !117 3133 3144
!120 = span !113 28933 28956
!121 = fn_call_path_span !113 28933 28952
!122 = span !113 4157 4190
!123 = fn_call_path_span !113 4157 4180
!124 = span !113 863 884
!125 = fn_call_path_span !113 863 874
!126 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!127 = span !126 3315 3378
!128 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123 !124 !125 !127)
!129 = span !126 3342 3351
!130 = span !113 839 922
!131 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123 !130)
!132 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123)
!133 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123 !130)
!134 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123)
!135 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123 !130)
!136 = (!51 !52 !115 !116 !118 !119 !120 !121 !122 !123)
!137 = span !113 4133 4221
!138 = (!51 !52 !115 !116 !118 !119 !120 !121 !137)
!139 = (!51 !52 !115 !116 !118 !119 !120 !121)
!140 = (!51 !52 !115 !116 !118 !119 !120 !121)
!141 = span !113 4209 4210
!142 = (!51 !52 !115 !116 !118 !119 !120 !121 !137)
!143 = (!51 !52 !115 !116 !118 !119 !120 !121)
!144 = span !113 28917 28957
!145 = (!51 !52 !115 !116 !118 !119 !144)
!146 = span !113 28966 28980
!147 = (!51 !52 !115 !116 !118 !119 !146)
!148 = (!51 !52 !115 !116 !118 !119 !146)
!149 = span !113 28978 28980
!150 = (!51 !52 !115 !116 !118 !119 !146)
!151 = span !113 29065 29077
!152 = (!51 !52 !115 !116 !118 !119 !151)
!153 = span !113 29092 29097
!154 = (!51 !52 !115 !116 !118 !119 !153)
!155 = span !113 2445 2458
!156 = (!51 !52 !115 !116 !118 !119 !155)
!157 = span !113 400 412
!158 = (!51 !52 !115 !116 !118 !119 !157)
!159 = (!51 !52 !115 !116 !118 !119)
!160 = span !113 29107 29109
!161 = span !113 29065 29110
!162 = fn_call_path_span !113 29078 29091
!163 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!164 = span !163 5999 6076
!165 = (!51 !52 !115 !116 !118 !119 !161 !162 !164)
!166 = span !163 6050 6065
!167 = span !113 29121 29126
!168 = (!51 !52 !115 !116 !118 !119 !167)
!169 = (!51 !52 !115 !116 !118 !119)
!170 = span !117 3107 3161
!171 = (!51 !52 !115 !116 !170)
!172 = (!51 !52 !115 !116)
!173 = (!51 !52 !115 !116)
!174 = (!51 !52 !54)
!175 = (!51 !52)
!176 = span !6 576 708
!177 = span !6 618 668
!178 = fn_call_path_span !6 618 668
!179 = (!177 !178)
!180 = span !78 5062 5063
!181 = span !78 5055 5064
!182 = fn_call_path_span !78 5055 5061
!183 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!184 = span !183 757 771
!185 = (!51 !52 !93 !94 !181 !182 !184)
!186 = span !6 621 628
!187 = span !6 657 664
!188 = span !6 636 666
!189 = fn_call_path_span !6 636 649
!190 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!191 = span !190 2370 2383
!192 = (!188 !189 !191)
!193 = (!188 !189)
!194 = span !6 681 698
!195 = fn_call_path_span !6 681 698
!196 = (!194 !195)
!197 = span !6 685 686
!198 = span !6 695 696
!199 = span !113 13771 13819
!200 = fn_name_span !113 13778 13781
!201 = (!199 !200)
!202 = span !113 2506 2514
!203 = span !113 15175 15233
!204 = fn_name_span !113 15182 15185
!205 = (!203 !204)
!206 = span !113 978 1030
!207 = fn_name_span !113 985 988
!208 = (!206 !207)
!209 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!210 = span !209 9009 9138
!211 = fn_name_span !209 9016 9022
!212 = (!210 !211 !42)
!213 = span !209 9065 9096
!214 = span !209 9108 9114
!215 = span !209 9101 9115
!216 = fn_call_path_span !209 9103 9107
!217 = (!215 !216)
!218 = span !117 524 536
!219 = (!215 !216 !218)
!220 = span !117 5123 5146
!221 = fn_call_path_span !117 5129 5134
!222 = span !209 142 154
!223 = (!215 !216 !220 !221 !222)
!224 = (!215 !216 !220 !221)
!225 = (!215 !216 !220 !221)
!226 = span !209 365 389
!227 = fn_call_path_span !209 376 382
!228 = (!215 !216 !220 !221 !226 !227)
!229 = span !113 18435 18436
!230 = span !113 18422 18436
!231 = fn_call_path_span !113 18432 18434
!232 = (!215 !216 !220 !221 !226 !227 !230 !231)
!233 = (!215 !216 !220 !221 !226 !227 !230)
!234 = (!215 !216 !220 !221 !226 !227 !202)
!235 = (!215 !216 !220 !221 !226 !227)
!236 = span !113 18572 18573
!237 = span !113 18560 18573
!238 = fn_call_path_span !113 18569 18571
!239 = (!215 !216 !220 !221 !226 !227 !237 !238)
!240 = (!215 !216 !220 !221 !226 !227 !237)
!241 = (!215 !216 !220 !221 !226 !227)
!242 = span !113 18614 18620
!243 = (!215 !216 !220 !221 !226 !227 !242)
!244 = (!215 !216 !220 !221 !226 !227)
!245 = span !113 18657 18677
!246 = fn_call_path_span !113 18666 18667
!247 = (!215 !216 !220 !221 !226 !227 !245 !246)
!248 = (!215 !216 !220 !221 !226 !227)
!249 = (!215 !216 !220 !221 !226 !227 !155)
!250 = (!215 !216 !220 !221 !226 !227)
!251 = span !113 18808 18838
!252 = fn_call_path_span !113 18828 18829
!253 = (!215 !216 !220 !221 !226 !227 !251 !252)
!254 = (!215 !216 !220 !221 !226 !227 !251)
!255 = (!215 !216 !220 !221 !226 !227)
!256 = (!215 !216 !220 !221 !226 !227)
!257 = span !113 18914 18974
!258 = fn_call_path_span !113 18914 18927
!259 = span !126 4168 4185
!260 = fn_call_path_span !126 4178 4179
!261 = (!215 !216 !220 !221 !226 !227 !257 !258 !259 !260)
!262 = (!215 !216 !220 !221 !226 !227 !257 !258 !259)
!263 = span !126 4210 4232
!264 = fn_call_path_span !126 4210 4221
!265 = (!215 !216 !220 !221 !226 !227 !257 !258 !263 !264 !127)
!266 = span !126 4253 4254
!267 = span !126 4245 4254
!268 = fn_call_path_span !126 4251 4252
!269 = (!215 !216 !220 !221 !226 !227 !257 !258 !267 !268)
!270 = (!215 !216 !220 !221 !226 !227 !257 !258 !267)
!271 = span !126 4269 4302
!272 = fn_call_path_span !126 4273 4286
!273 = (!215 !216 !220 !221 !226 !227 !257 !258 !271 !272 !164)
!274 = (!215 !216 !220 !221 !226 !227 !257 !258)
!275 = span !113 18869 19015
!276 = fn_call_path_span !113 18869 18890
!277 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!278 = span !277 2362 2393
!279 = (!215 !216 !220 !221 !226 !227 !275 !276 !278)
!280 = (!215 !216 !220 !221 !226 !227 !275 !276 !278)
!281 = (!215 !216 !220 !221 !226 !227 !275 !276 !278)
!282 = (!215 !216 !220 !221 !226 !227 !275 !276 !278)
!283 = (!215 !216 !220 !221 !226 !227 !275 !276 !278)
!284 = (!215 !216 !220 !221 !226 !227 !275 !276)
!285 = span !113 18853 19016
!286 = (!215 !216 !220 !221 !226 !227 !285)
!287 = span !113 19055 19064
!288 = (!215 !216 !220 !221 !226 !227 !287)
!289 = (!215 !216 !220 !221 !226 !227)
!290 = span !113 19040 19065
!291 = fn_call_path_span !113 19040 19054
!292 = span !113 2130 2153
!293 = fn_call_path_span !113 2136 2151
!294 = (!215 !216 !220 !221 !226 !227 !290 !291 !292 !293)
!295 = span !277 3976 3977
!296 = (!215 !216 !220 !221 !226 !227 !290 !291 !292 !293 !295)
!297 = (!215 !216 !220 !221 !226 !227 !290 !291 !292 !293)
!298 = span !113 2173 2189
!299 = fn_call_path_span !113 2173 2184
!300 = (!215 !216 !220 !221 !226 !227 !290 !291 !298 !299 !127)
!301 = span !113 2208 2209
!302 = span !113 2202 2209
!303 = fn_call_path_span !113 2206 2207
!304 = (!215 !216 !220 !221 !226 !227 !290 !291 !302 !303)
!305 = (!215 !216 !220 !221 !226 !227 !290 !291 !302)
!306 = span !113 2224 2235
!307 = fn_call_path_span !113 2230 2233
!308 = (!215 !216 !220 !221 !226 !227 !290 !291 !306 !307)
!309 = span !277 2928 2929
!310 = (!215 !216 !220 !221 !226 !227 !290 !291 !306 !307 !309)
!311 = (!215 !216 !220 !221 !226 !227 !290 !291 !306 !307)
!312 = span !113 2224 2259
!313 = fn_call_path_span !113 2236 2243
!314 = span !163 3447 3522
!315 = (!215 !216 !220 !221 !226 !227 !290 !291 !312 !313 !314)
!316 = span !163 3496 3511
!317 = (!215 !216 !220 !221 !226 !227 !290 !291)
!318 = span !113 2279 2296
!319 = (!215 !216 !220 !221 !226 !227 !290 !291 !318)
!320 = (!215 !216 !220 !221 !226 !227 !290 !291)
!321 = (!215 !216 !220 !221 !226 !227 !290 !291 !318)
!322 = (!215 !216 !220 !221 !226 !227 !290 !291)
!323 = (!215 !216 !220 !221 !226 !227 !290 !291)
!324 = (!215 !216 !220 !221 !226 !227)
!325 = (!215 !216 !220 !221 !226 !227)
!326 = span !113 19100 19143
!327 = fn_call_path_span !113 19115 19130
!328 = span !163 6721 6825
!329 = (!215 !216 !220 !221 !226 !227 !326 !327 !328)
!330 = span !163 6771 6789
!331 = (!215 !216 !220 !221 !226 !227)
!332 = span !113 19153 19198
!333 = fn_call_path_span !113 19165 19178
!334 = (!215 !216 !220 !221 !226 !227 !332 !333 !164)
!335 = span !113 19244 19263
!336 = (!215 !216 !220 !221 !226 !227 !335)
!337 = (!215 !216 !220 !221 !226 !227)
!338 = span !209 9121 9127
!339 = span !209 9121 9136
!340 = fn_call_path_span !209 9128 9134
!341 = span !209 440 476
!342 = (!339 !340 !341)
!343 = span !209 508 521
!344 = (!339 !340 !343)
!345 = (!339 !340)
!346 = (!339 !340 !222)
!347 = span !209 619 638
!348 = span !209 177 263
!349 = fn_name_span !209 184 187
!350 = (!348 !349)
!351 = span !113 570 571
!352 = span !209 234 246
!353 = fn_call_path_span !209 234 244
!354 = span !113 3079 3094
!355 = fn_call_path_span !113 3079 3092
!356 = span !113 558 572
!357 = fn_call_path_span !113 558 569
!358 = (!352 !353 !354 !355 !356 !357 !127)
!359 = span !113 534 603
!360 = (!352 !353 !354 !355 !359)
!361 = (!352 !353 !354 !355)
!362 = (!352 !353 !354 !355 !359)
!363 = (!352 !353 !354 !355)
!364 = span !113 591 592
!365 = (!352 !353 !354 !355 !359)
!366 = (!352 !353 !354 !355)
!367 = span !113 3055 3125
!368 = (!352 !353 !367)
!369 = (!352 !353)
!370 = span !113 3113 3114
!371 = (!352 !353 !367)
!372 = span !209 208 257
!373 = span !113 1081 1134
!374 = fn_name_span !113 1088 1096
!375 = (!373 !374)
!376 = span !113 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v2, v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        mem_copy_val v3, v2
        v4 = get_local ptr [u8; 64], __anon_0, !12
        v5 = const u64 0
        br play_0_new_5_array_init_loop(v5), !13

        play_0_new_5_array_init_loop(v6: u64):
        v7 = get_elem_ptr v4, ptr u8, v6, !14
        v8 = const u8 0, !15
        store v8 to v7, !16
        v9 = const u64 1
        v10 = add v6, v9, !17
        v11 = const u64 64
        v12 = cmp lt v10 v11, !18
        cbr v12, play_0_new_5_array_init_loop(v10), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v13 = get_local ptr { [u8; 64] }, __anon_1, !21
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr [u8; 64], v14, !22
        mem_copy_val v15, v4
        v16 = get_local ptr { [u8; 64] }, __anon_1
        v17 = get_local ptr { [u8; 64] }, __anon_1
        v18 = call eq_6(v16, v17)
        v19 = get_local ptr { { { u64, u64 }, u64 } }, message, !24
        v20 = get_local ptr { [u8; 64] }, __anon_1
        v21 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        mem_copy_val v21, v19
        v22 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v23 = call address_7(v20, v21, v22)
        v24 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v25 = get_local ptr { [u8; 64] }, __anon_1
        v26 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        mem_copy_val v26, v24
        v27 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v28 = call address_7(v25, v26, v27)
        v29 = const unit ()
        ret () v29
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !30 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !31
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !31
        v8 = const u64 64, !32
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !33 {
            meq    result r2 r3 r4, !34
        }
        ret bool v9
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !37 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !42
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !43
        v3 = const u64 0, !41
        store v3 to v2, !44
        v4 = ptr_to_int message to u64, !47
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !48
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !51
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !52
        v11 = cmp eq v9 v10, !58
        v12 = const bool false, !59
        v13 = cmp eq v11 v12, !62
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !63

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !66
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !67
        v17 = const u64 0, !65
        store v17 to v16, !68
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !70

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !71
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !72
        v22 = const u64 1, !65
        store v22 to v21, !73
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !74
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !75

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !79
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !80
        v37 = const u64 1, !81
        v38 = cmp eq v36 v37, !84
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !85

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !86
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !87
        v43 = get_local ptr b256, inner_value, !89
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !91
        v45 = const u64 32, !93
        v46 = asm(size: v45) -> u64 hp, !107 {
            aloc   size, !108
        }
        v47 = get_local ptr { u64, u64 }, __anon_00000, !110
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !111
        store v46 to v49, !112
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !113
        store v45 to v51, !114
        v52 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !116
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr { u64, u64 }, v53, !117
        mem_copy_val v54, v47
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !118
        v57 = const u64 0, !119
        store v57 to v56, !120
        v58 = get_local ptr { { u64, u64 }, u64 }, bytes, !122
        mem_copy_val v58, v52
        v59 = get_local ptr { { u64, u64 }, u64 }, bytes, !124
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr u64, v60, !125
        v62 = const u64 32, !126
        store v62 to v61, !127
        v63 = ptr_to_int v44 to u64, !129
        v64 = get_local ptr { { u64, u64 }, u64 }, bytes, !131
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr { u64, u64 }, v65, !133
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67, !135
        v69 = load v68, !136
        v70 = const u64 32, !137
        v71 = asm(dst: v69, src: v63, len: v70) -> (), !142 {
            mcp    dst src len, !143
        }
        v72 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        v73 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !147
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr { { u64, u64 }, u64 }, v74, !148
        mem_copy_val v75, v72
        v76 = const u64 1
        v77 = const u64 0
        v78 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v76, v77, !149
        mem_copy_val v78, v73
        v79 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !150
        mem_copy_val v79, v0
        v80 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81
        v83 = load v82
        v84 = const u64 0, !38
        v85 = cmp eq v83 v84, !153
        cbr v85, block0(), block1(), !151

        recover_8_unwrap_14_block1():
        v86 = const u64 0, !154
        revert v86, !159

        block0():
        v87 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v87, ptr { { { u64, u64 }, u64 } }, v88, v89
        v91 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !160
        mem_copy_val v91, v90
        v92 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !41
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !41
        v95 = const u64 0, !41
        store v95 to v94, !41
        v96 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v96, v90
        v97 = get_local ptr b256, __ret_val
        v98 = call sha256_24(v96, v97)
        v99 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v99, v98
        v100 = get_local ptr { b256 }, __anon_02, !165
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr b256, v101, !166
        mem_copy_val v102, v99
        v103 = const u64 1
        v104 = const u64 0
        v105 = get_elem_ptr v92, ptr { b256 }, v103, v104, !41
        mem_copy_val v105, v100
        v106 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v106, v92
        br block5(v106)

        block1():
        v107 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr u64, v108, !38
        v110 = load v109
        v111 = const u64 1, !38
        v112 = cmp eq v110 v111, !169
        cbr v112, block2(), block3(), !167

        block2():
        v113 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v114 = const u64 1
        v115 = const u64 1
        v116 = get_elem_ptr v113, ptr { u64 }, v114, v115
        v117 = get_local ptr { u64 }, e, !170
        mem_copy_val v117, v116
        v118 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !41
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !41
        v121 = const u64 1, !41
        store v121 to v120, !41
        v122 = const u64 1
        v123 = const u64 1
        v124 = get_elem_ptr v118, ptr { u64 }, v122, v123, !41
        mem_copy_val v124, v116
        v125 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v125, v118
        br block5(v125)

        block3():
        v126 = const u64 14757395258967588866, !150
        revert v126, !150

        block5(v127: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v127
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !173 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !174
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !177 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !132
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !180 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !134
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !184 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local mut { u64, u64 } __aggr_memcpy_01
        local mut { u64, u64 } __aggr_memcpy_02
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v2, v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !185
        mem_copy_val v3, v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !186
        v5 = ptr_to_int s to u64, !189
        v6 = int_to_ptr v5 to ptr { { { u64, u64 }, u64 } }, !189
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { { u64, u64 }, u64 }, v7, !191
        v9 = const u64 0
        v10 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v9, !195
        v11 = ptr_to_int v8 to u64, !196
        v12 = int_to_ptr v11 to ptr { { u64, u64 }, u64 }, !197
        v13 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v13, v12
        v14 = call len_20(v13)
        v15 = const u64 0, !198
        v16 = cmp eq v14 v15, !203
        cbr v16, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !204

        hash_26_write_27_append_28_block1():
        v17 = const u64 1
        v18 = get_elem_ptr v10, ptr u64, v17, !205
        v19 = load v18, !206
        v20 = const u64 0, !207
        v21 = cmp eq v19 v20, !210
        cbr v21, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !211

        hash_26_write_27_append_28_block3():
        mem_copy_val v10, v12
        br hash_26_write_27_block0(), !213

        hash_26_write_27_append_28_block4():
        v22 = load v18, !214
        v23 = add v22, v14, !217
        v24 = load v18, !218
        v25 = const u64 0
        v26 = get_elem_ptr v10, ptr { u64, u64 }, v25, !219
        v27 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v27, v26
        v28 = call capacity_31(v27)
        v29 = cmp lt v28 v23, !222
        cbr v29, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !223

        hash_26_write_27_append_28_block6():
        v30 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v30, v26
        v31 = call ptr_22(v30)
        v32 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v32, v26
        v33 = call capacity_31(v32)
        v34 = cmp gt v23 v33, !228
        cbr v34, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v31), !229

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v35 = asm(size: v23) -> u64 hp, !232 {
            aloc   size, !108
        }
        v36 = const u64 0, !233
        v37 = cmp gt v33 v36, !236
        cbr v37, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !237

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v38 = asm(dst: v35, src: v31, len: v33) -> (), !240 {
            mcp    dst src len, !143
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !241

        hash_26_write_27_append_28_realloc_bytes_35_block5(v39: u64):
        v40 = get_local ptr { u64, u64 }, __anon_0, !246
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !247
        store v39 to v42, !248
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !249
        store v23 to v44, !250
        v45 = get_local ptr { u64, u64 }, __asm_arg
        mem_copy_val v45, v40
        v46 = asm(ptr: v45) -> ptr slice ptr {
        }
        v47 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v47, v46
        v48 = get_local ptr slice, new_slice, !252
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !254
        v50 = get_local ptr slice, __asm_arg0
        mem_copy_val v50, v47
        v51 = asm(ptr: v50) -> ptr { u64, u64 } ptr {
        }
        v52 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        mem_copy_val v52, v51
        v53 = get_local ptr { u64, u64 }, __anon_000, !259
        mem_copy_val v53, v52
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr u64, v54, !261
        v56 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v57 = get_elem_ptr v56, ptr u64, v54
        v58 = load v57, !262
        v59 = asm(size: v58) -> u64 hp, !265 {
            aloc   size, !108
        }
        v60 = const u64 0, !266
        v61 = cmp gt v58 v60, !269
        cbr v61, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !270

        hash_26_write_27_append_28_from_37_block0():
        v62 = get_local ptr slice, __asm_arg1
        mem_copy_val v62, v49
        v63 = asm(ptr: v62) -> ptr { u64, u64 } ptr {
        }
        v64 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        mem_copy_val v64, v63
        v65 = get_local ptr { u64, u64 }, __anon_01, !273
        mem_copy_val v65, v64
        v66 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67
        v69 = load v68, !274
        v70 = asm(dst: v59, src: v69, len: v58) -> (), !278 {
            mcp    dst src len, !279
        }
        br hash_26_write_27_append_28_from_37_block2(), !280

        hash_26_write_27_append_28_from_37_block2():
        v71 = get_local ptr { u64, u64 }, __anon_00, !282
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !283
        store v59 to v73, !284
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr u64, v74, !285
        mem_copy_val v75, v55
        mem_copy_val v26, v71
        br hash_26_write_27_append_28_block8(), !286

        hash_26_write_27_append_28_block8():
        v76 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v76, v26
        v77 = call ptr_22(v76)
        v78 = asm(ptr: v77, offset: v24, new) -> u64 new, !290 {
            add    new ptr offset, !291
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v79, v12
        v80 = call ptr_21(v79)
        v81 = asm(dst: v78, src: v80, len: v14) -> (), !294 {
            mcp    dst src len, !143
        }
        store v23 to v18, !296
        br hash_26_write_27_block0(), !297

        hash_26_write_27_block0():
        v82 = get_local ptr b256, __const
        v83 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !298
        v84 = get_local ptr b256, result_buffer, !302
        mem_copy_val v84, v82
        v85 = get_local ptr b256, result_buffer, !304
        v86 = ptr_to_int v83 to u64, !305
        v87 = int_to_ptr v86 to ptr { { { u64, u64 }, u64 } }, !305
        v88 = const u64 0
        v89 = get_elem_ptr v87, ptr { { u64, u64 }, u64 }, v88, !306
        v90 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v90, v89
        v91 = call ptr_21(v90)
        v92 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v92, v89
        v93 = call len_20(v92)
        v94 = asm(hash: v85, ptr: v91, bytes: v93) -> ptr b256 hash {
            s256   hash ptr bytes, !307
        }
        v95 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v95, v94
        mem_copy_val __ret_value, v95
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !310 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !311
        v1 = asm(size: v0) -> u64 hp, !318 {
            aloc   size, !108
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !320
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !321
        store v1 to v4, !322
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !323
        v7 = const u64 0, !324
        store v7 to v6, !325
        v8 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !327
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !328
        mem_copy_val v10, v2
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !328
        v13 = const u64 0, !329
        store v13 to v12, !330
        v14 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !331
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { { u64, u64 }, u64 }, v15
        mem_copy_val v16, v8
        mem_copy_val __ret_value, v14
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !334 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !335
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = span !6 289 334
!21 = (!4 !5 !9 !10 !20)
!22 = (!4 !5 !9 !10)
!23 = span !6 1126 1133
!24 = (!4 !5 !23)
!25 = span !6 1166 1173
!26 = (!4 !5 !25)
!27 = span !6 799 968
!28 = fn_name_span !6 802 804
!29 = inline "never"
!30 = (!27 !28 !29)
!31 = span !6 218 232
!32 = span !6 889 891
!33 = span !6 842 962
!34 = span !6 907 926
!35 = span !6 492 714
!36 = fn_name_span !6 499 506
!37 = (!35 !36)
!38 = span !6 582 603
!39 = fn_call_path_span !6 587 594
!40 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!41 = span !40 1815 1933
!42 = (!38 !39 !41)
!43 = (!38 !39 !41)
!44 = (!38 !39 !41)
!45 = span !6 451 469
!46 = fn_call_path_span !6 459 467
!47 = (!38 !39 !45 !46)
!48 = (!38 !39 !45 !46)
!49 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!50 = span !49 329 341
!51 = (!38 !39 !45 !46 !50)
!52 = span !49 1593 1595
!53 = span !49 1573 1595
!54 = fn_call_path_span !49 1590 1592
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!56 = span !55 15515 15529
!57 = fn_call_path_span !55 15520 15522
!58 = (!38 !39 !45 !46 !53 !54 !56 !57)
!59 = span !55 12533 12538
!60 = span !55 15514 15536
!61 = fn_call_path_span !55 15531 15534
!62 = (!38 !39 !45 !46 !53 !54 !60 !61)
!63 = (!38 !39 !45 !46 !53)
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!65 = span !64 2461 2560
!66 = (!38 !39 !45 !46 !65)
!67 = (!38 !39 !45 !46 !65)
!68 = (!38 !39 !45 !46 !65)
!69 = span !49 1610 1621
!70 = (!38 !39 !45 !46 !69)
!71 = (!38 !39 !45 !46 !65)
!72 = (!38 !39 !45 !46 !65)
!73 = (!38 !39 !45 !46 !65)
!74 = (!38 !39 !45 !46 !65)
!75 = (!38 !39 !45 !46)
!76 = span !6 451 478
!77 = fn_call_path_span !6 470 476
!78 = span !64 4973 5075
!79 = (!38 !39 !76 !77 !78)
!80 = (!38 !39 !76 !77)
!81 = span !64 4979 4983
!82 = span !64 4998 5037
!83 = fn_call_path_span !64 4998 5037
!84 = (!38 !39 !76 !77 !82 !83)
!85 = (!38 !39 !76 !77 !82)
!86 = (!38 !39 !76 !77 !81)
!87 = (!38 !39 !76 !77)
!88 = span !64 5009 5020
!89 = (!38 !39 !76 !77 !88)
!90 = span !64 5025 5036
!91 = (!38 !39 !76 !77 !90)
!92 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!93 = span !92 28953 28955
!94 = span !6 435 479
!95 = fn_call_path_span !6 435 450
!96 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!97 = span !96 3133 3150
!98 = fn_call_path_span !96 3133 3144
!99 = span !92 28933 28956
!100 = fn_call_path_span !92 28933 28952
!101 = span !92 4157 4190
!102 = fn_call_path_span !92 4157 4180
!103 = span !92 863 884
!104 = fn_call_path_span !92 863 874
!105 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!106 = span !105 3315 3378
!107 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !103 !104 !106)
!108 = span !105 3342 3351
!109 = span !92 839 922
!110 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!111 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102)
!112 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!113 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102)
!114 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!115 = span !92 4133 4221
!116 = (!38 !39 !94 !95 !97 !98 !99 !100 !115)
!117 = (!38 !39 !94 !95 !97 !98 !99 !100)
!118 = (!38 !39 !94 !95 !97 !98 !99 !100)
!119 = span !92 4209 4210
!120 = (!38 !39 !94 !95 !97 !98 !99 !100 !115)
!121 = span !92 28917 28957
!122 = (!38 !39 !94 !95 !97 !98 !121)
!123 = span !92 28966 28980
!124 = (!38 !39 !94 !95 !97 !98 !123)
!125 = (!38 !39 !94 !95 !97 !98 !123)
!126 = span !92 28978 28980
!127 = (!38 !39 !94 !95 !97 !98 !123)
!128 = span !92 29065 29077
!129 = (!38 !39 !94 !95 !97 !98 !128)
!130 = span !92 29092 29097
!131 = (!38 !39 !94 !95 !97 !98 !130)
!132 = span !92 2445 2458
!133 = (!38 !39 !94 !95 !97 !98 !132)
!134 = span !92 400 412
!135 = (!38 !39 !94 !95 !97 !98 !134)
!136 = (!38 !39 !94 !95 !97 !98)
!137 = span !92 29107 29109
!138 = span !92 29065 29110
!139 = fn_call_path_span !92 29078 29091
!140 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!141 = span !140 5999 6076
!142 = (!38 !39 !94 !95 !97 !98 !138 !139 !141)
!143 = span !140 6050 6065
!144 = span !92 29121 29126
!145 = (!38 !39 !94 !95 !97 !98 !144)
!146 = span !96 3107 3161
!147 = (!38 !39 !94 !95 !146)
!148 = (!38 !39 !94 !95)
!149 = (!38 !39 !41)
!150 = span !6 576 708
!151 = span !6 618 668
!152 = fn_call_path_span !6 618 668
!153 = (!151 !152)
!154 = span !64 5062 5063
!155 = span !64 5055 5064
!156 = fn_call_path_span !64 5055 5061
!157 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!158 = span !157 757 771
!159 = (!38 !39 !76 !77 !155 !156 !158)
!160 = span !6 621 628
!161 = span !6 636 666
!162 = fn_call_path_span !6 636 649
!163 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!164 = span !163 2370 2383
!165 = (!161 !162 !164)
!166 = (!161 !162)
!167 = span !6 681 698
!168 = fn_call_path_span !6 681 698
!169 = (!167 !168)
!170 = span !6 685 686
!171 = span !92 13771 13819
!172 = fn_name_span !92 13778 13781
!173 = (!171 !172)
!174 = span !92 2506 2514
!175 = span !92 15175 15233
!176 = fn_name_span !92 15182 15185
!177 = (!175 !176)
!178 = span !92 978 1030
!179 = fn_name_span !92 985 988
!180 = (!178 !179)
!181 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!182 = span !181 9009 9138
!183 = fn_name_span !181 9016 9022
!184 = (!182 !183 !29)
!185 = span !181 9065 9096
!186 = span !181 9108 9114
!187 = span !181 9101 9115
!188 = fn_call_path_span !181 9103 9107
!189 = (!187 !188)
!190 = span !96 524 536
!191 = (!187 !188 !190)
!192 = span !96 5123 5146
!193 = fn_call_path_span !96 5129 5134
!194 = span !181 142 154
!195 = (!187 !188 !192 !193 !194)
!196 = (!187 !188 !192 !193)
!197 = (!187 !188 !192 !193)
!198 = span !92 18435 18436
!199 = span !181 365 389
!200 = fn_call_path_span !181 376 382
!201 = span !92 18422 18436
!202 = fn_call_path_span !92 18432 18434
!203 = (!187 !188 !192 !193 !199 !200 !201 !202)
!204 = (!187 !188 !192 !193 !199 !200 !201)
!205 = (!187 !188 !192 !193 !199 !200 !174)
!206 = (!187 !188 !192 !193 !199 !200)
!207 = span !92 18572 18573
!208 = span !92 18560 18573
!209 = fn_call_path_span !92 18569 18571
!210 = (!187 !188 !192 !193 !199 !200 !208 !209)
!211 = (!187 !188 !192 !193 !199 !200 !208)
!212 = span !92 18614 18620
!213 = (!187 !188 !192 !193 !199 !200 !212)
!214 = (!187 !188 !192 !193 !199 !200)
!215 = span !92 18657 18677
!216 = fn_call_path_span !92 18666 18667
!217 = (!187 !188 !192 !193 !199 !200 !215 !216)
!218 = (!187 !188 !192 !193 !199 !200)
!219 = (!187 !188 !192 !193 !199 !200 !132)
!220 = span !92 18808 18838
!221 = fn_call_path_span !92 18828 18829
!222 = (!187 !188 !192 !193 !199 !200 !220 !221)
!223 = (!187 !188 !192 !193 !199 !200 !220)
!224 = span !92 18914 18974
!225 = fn_call_path_span !92 18914 18927
!226 = span !105 4168 4185
!227 = fn_call_path_span !105 4178 4179
!228 = (!187 !188 !192 !193 !199 !200 !224 !225 !226 !227)
!229 = (!187 !188 !192 !193 !199 !200 !224 !225 !226)
!230 = span !105 4210 4232
!231 = fn_call_path_span !105 4210 4221
!232 = (!187 !188 !192 !193 !199 !200 !224 !225 !230 !231 !106)
!233 = span !105 4253 4254
!234 = span !105 4245 4254
!235 = fn_call_path_span !105 4251 4252
!236 = (!187 !188 !192 !193 !199 !200 !224 !225 !234 !235)
!237 = (!187 !188 !192 !193 !199 !200 !224 !225 !234)
!238 = span !105 4269 4302
!239 = fn_call_path_span !105 4273 4286
!240 = (!187 !188 !192 !193 !199 !200 !224 !225 !238 !239 !141)
!241 = (!187 !188 !192 !193 !199 !200 !224 !225)
!242 = span !92 18869 19015
!243 = fn_call_path_span !92 18869 18890
!244 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!245 = span !244 2362 2393
!246 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!247 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!248 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!249 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!250 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!251 = span !92 18853 19016
!252 = (!187 !188 !192 !193 !199 !200 !251)
!253 = span !92 19055 19064
!254 = (!187 !188 !192 !193 !199 !200 !253)
!255 = span !92 19040 19065
!256 = fn_call_path_span !92 19040 19054
!257 = span !92 2130 2153
!258 = fn_call_path_span !92 2136 2151
!259 = (!187 !188 !192 !193 !199 !200 !255 !256 !257 !258)
!260 = span !244 3976 3977
!261 = (!187 !188 !192 !193 !199 !200 !255 !256 !257 !258 !260)
!262 = (!187 !188 !192 !193 !199 !200 !255 !256 !257 !258)
!263 = span !92 2173 2189
!264 = fn_call_path_span !92 2173 2184
!265 = (!187 !188 !192 !193 !199 !200 !255 !256 !263 !264 !106)
!266 = span !92 2208 2209
!267 = span !92 2202 2209
!268 = fn_call_path_span !92 2206 2207
!269 = (!187 !188 !192 !193 !199 !200 !255 !256 !267 !268)
!270 = (!187 !188 !192 !193 !199 !200 !255 !256 !267)
!271 = span !92 2224 2235
!272 = fn_call_path_span !92 2230 2233
!273 = (!187 !188 !192 !193 !199 !200 !255 !256 !271 !272)
!274 = (!187 !188 !192 !193 !199 !200 !255 !256 !271 !272)
!275 = span !92 2224 2259
!276 = fn_call_path_span !92 2236 2243
!277 = span !140 3447 3522
!278 = (!187 !188 !192 !193 !199 !200 !255 !256 !275 !276 !277)
!279 = span !140 3496 3511
!280 = (!187 !188 !192 !193 !199 !200 !255 !256)
!281 = span !92 2279 2296
!282 = (!187 !188 !192 !193 !199 !200 !255 !256 !281)
!283 = (!187 !188 !192 !193 !199 !200 !255 !256)
!284 = (!187 !188 !192 !193 !199 !200 !255 !256 !281)
!285 = (!187 !188 !192 !193 !199 !200 !255 !256)
!286 = (!187 !188 !192 !193 !199 !200)
!287 = span !92 19100 19143
!288 = fn_call_path_span !92 19115 19130
!289 = span !140 6721 6825
!290 = (!187 !188 !192 !193 !199 !200 !287 !288 !289)
!291 = span !140 6771 6789
!292 = span !92 19153 19198
!293 = fn_call_path_span !92 19165 19178
!294 = (!187 !188 !192 !193 !199 !200 !292 !293 !141)
!295 = span !92 19244 19263
!296 = (!187 !188 !192 !193 !199 !200 !295)
!297 = (!187 !188 !192 !193 !199 !200)
!298 = span !181 9121 9127
!299 = span !181 9121 9136
!300 = fn_call_path_span !181 9128 9134
!301 = span !181 440 476
!302 = (!299 !300 !301)
!303 = span !181 508 521
!304 = (!299 !300 !303)
!305 = (!299 !300)
!306 = (!299 !300 !194)
!307 = span !181 619 638
!308 = span !181 177 263
!309 = fn_name_span !181 184 187
!310 = (!308 !309)
!311 = span !92 570 571
!312 = span !181 234 246
!313 = fn_call_path_span !181 234 244
!314 = span !92 3079 3094
!315 = fn_call_path_span !92 3079 3092
!316 = span !92 558 572
!317 = fn_call_path_span !92 558 569
!318 = (!312 !313 !314 !315 !316 !317 !106)
!319 = span !92 534 603
!320 = (!312 !313 !314 !315 !319)
!321 = (!312 !313 !314 !315)
!322 = (!312 !313 !314 !315 !319)
!323 = (!312 !313 !314 !315)
!324 = span !92 591 592
!325 = (!312 !313 !314 !315 !319)
!326 = span !92 3055 3125
!327 = (!312 !313 !326)
!328 = (!312 !313)
!329 = span !92 3113 3114
!330 = (!312 !313 !326)
!331 = span !181 208 257
!332 = span !92 1081 1134
!333 = fn_name_span !92 1088 1096
!334 = (!332 !333)
!335 = span !92 418 426

// IR: [sroa] Scalar replacement of aggregates
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local u64 __aggr_memcpy_00
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_08
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message
        local u64 message0
        local u64 message16
        local u64 message8

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_00
        store v7 to v17
        v18 = get_local ptr u64, __aggr_memcpy_08
        store v12 to v18
        v19 = get_local ptr u64, __aggr_memcpy_016
        store v16 to v19
        v20 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        v21 = get_local ptr u64, __aggr_memcpy_00
        v22 = load v21
        v23 = get_local ptr u64, __aggr_memcpy_08
        v24 = load v23
        v25 = get_local ptr u64, __aggr_memcpy_016
        v26 = load v25
        v27 = get_local ptr u64, message0
        store v22 to v27
        v28 = get_local ptr u64, message8
        store v24 to v28
        v29 = get_local ptr u64, message16
        store v26 to v29
        v30 = get_local ptr [u8; 64], __anon_0, !12
        v31 = const u64 0
        br play_0_new_5_array_init_loop(v31), !13

        play_0_new_5_array_init_loop(v32: u64):
        v33 = get_elem_ptr v30, ptr u8, v32, !14
        v34 = const u8 0, !15
        store v34 to v33, !16
        v35 = const u64 1
        v36 = add v32, v35, !17
        v37 = const u64 64
        v38 = cmp lt v36 v37, !18
        cbr v38, play_0_new_5_array_init_loop(v36), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v39 = get_local ptr { [u8; 64] }, __anon_1, !21
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr [u8; 64], v40, !22
        mem_copy_val v41, v30
        v42 = get_local ptr { [u8; 64] }, __anon_1
        v43 = get_local ptr { [u8; 64] }, __anon_1
        v44 = call eq_6(v42, v43)
        v45 = get_local ptr { { { u64, u64 }, u64 } }, message, !24
        v46 = get_local ptr { [u8; 64] }, __anon_1
        v47 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v48 = get_local ptr u64, message0
        v49 = load v48
        v50 = get_local ptr u64, message8
        v51 = load v50
        v52 = get_local ptr u64, message16
        v53 = load v52
        v54 = const u64 0
        v55 = const u64 0
        v56 = const u64 0
        v57 = get_elem_ptr v47, ptr u64, v54, v55, v56
        store v49 to v57
        v58 = const u64 0
        v59 = const u64 0
        v60 = const u64 1
        v61 = get_elem_ptr v47, ptr u64, v58, v59, v60
        store v51 to v61
        v62 = const u64 0
        v63 = const u64 1
        v64 = get_elem_ptr v47, ptr u64, v62, v63
        store v53 to v64
        v65 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v66 = call address_7(v46, v47, v65)
        v67 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v68 = get_local ptr { [u8; 64] }, __anon_1
        v69 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        v70 = get_local ptr u64, message0
        v71 = load v70
        v72 = get_local ptr u64, message8
        v73 = load v72
        v74 = get_local ptr u64, message16
        v75 = load v74
        v76 = const u64 0
        v77 = const u64 0
        v78 = const u64 0
        v79 = get_elem_ptr v69, ptr u64, v76, v77, v78
        store v71 to v79
        v80 = const u64 0
        v81 = const u64 0
        v82 = const u64 1
        v83 = get_elem_ptr v69, ptr u64, v80, v81, v82
        store v73 to v83
        v84 = const u64 0
        v85 = const u64 1
        v86 = get_elem_ptr v69, ptr u64, v84, v85
        store v75 to v86
        v87 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v88 = call address_7(v68, v69, v87)
        v89 = const unit ()
        ret () v89
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !30 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !31
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !31
        v8 = const u64 64, !32
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !33 {
            meq    result r2 r3 r4, !34
        }
        ret bool v9
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !37 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local u64 __anon_000000
        local u64 __anon_0000000
        local u64 __anon_000008
        local u64 __anon_000016
        local u64 __anon_00008
        local { { { u64, u64 }, u64 } } __anon_01
        local u64 __anon_010
        local u64 __anon_0116
        local u64 __anon_018
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local u64 bytes0
        local u64 bytes16
        local u64 bytes8
        local { u64 } e
        local u64 e0
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key
        local u64 pub_key0
        local u64 pub_key16
        local u64 pub_key8

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !42
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !43
        v3 = const u64 0, !41
        store v3 to v2, !44
        v4 = ptr_to_int message to u64, !47
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !48
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !51
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !52
        v11 = cmp eq v9 v10, !58
        v12 = const bool false, !59
        v13 = cmp eq v11 v12, !62
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !63

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !66
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !67
        v17 = const u64 0, !65
        store v17 to v16, !68
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !70

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !71
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !72
        v22 = const u64 1, !65
        store v22 to v21, !73
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !74
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !75

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !79
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !80
        v37 = const u64 1, !81
        v38 = cmp eq v36 v37, !84
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !85

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !86
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !87
        v43 = get_local ptr b256, inner_value, !89
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !91
        v45 = const u64 32, !93
        v46 = asm(size: v45) -> u64 hp, !107 {
            aloc   size, !108
        }
        v47 = get_local ptr { u64, u64 }, __anon_00000, !110
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !111
        v50 = get_local ptr u64, __anon_0000000
        store v46 to v50, !112
        v51 = const u64 1
        v52 = get_elem_ptr v47, ptr u64, v51, !113
        v53 = get_local ptr u64, __anon_000008
        store v45 to v53, !114
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !116
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !117
        v57 = get_local ptr u64, __anon_0000000
        v58 = load v57
        v59 = get_local ptr u64, __anon_000008
        v60 = load v59
        v61 = get_local ptr u64, __anon_000000
        store v58 to v61
        v62 = get_local ptr u64, __anon_00008
        store v60 to v62
        v63 = const u64 1
        v64 = get_elem_ptr v54, ptr u64, v63, !118
        v65 = get_local ptr u64, __anon_000016
        v66 = const u64 0, !119
        store v66 to v65, !120
        v67 = get_local ptr { { u64, u64 }, u64 }, bytes, !122
        v68 = get_local ptr u64, __anon_000000
        v69 = load v68
        v70 = get_local ptr u64, __anon_00008
        v71 = load v70
        v72 = get_local ptr u64, __anon_000016
        v73 = load v72
        v74 = get_local ptr u64, bytes0
        store v69 to v74
        v75 = get_local ptr u64, bytes8
        store v71 to v75
        v76 = get_local ptr u64, bytes16
        store v73 to v76
        v77 = get_local ptr { { u64, u64 }, u64 }, bytes, !124
        v78 = const u64 1
        v79 = get_elem_ptr v77, ptr u64, v78, !125
        v80 = get_local ptr u64, bytes16
        v81 = const u64 32, !126
        store v81 to v80, !127
        v82 = ptr_to_int v44 to u64, !129
        v83 = get_local ptr { { u64, u64 }, u64 }, bytes, !131
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr { u64, u64 }, v84, !133
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !135
        v88 = get_local ptr u64, bytes0
        v89 = load v88, !136
        v90 = const u64 32, !137
        v91 = asm(dst: v89, src: v82, len: v90) -> (), !142 {
            mcp    dst src len, !143
        }
        v92 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        v93 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !147
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr { { u64, u64 }, u64 }, v94, !148
        v96 = get_local ptr u64, bytes0
        v97 = load v96
        v98 = get_local ptr u64, bytes8
        v99 = load v98
        v100 = get_local ptr u64, bytes16
        v101 = load v100
        v102 = get_local ptr u64, __anon_010
        store v97 to v102
        v103 = get_local ptr u64, __anon_018
        store v99 to v103
        v104 = get_local ptr u64, __anon_0116
        store v101 to v104
        v105 = const u64 1
        v106 = const u64 0
        v107 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v105, v106, !149
        v108 = get_local ptr u64, __anon_010
        v109 = load v108
        v110 = get_local ptr u64, __anon_018
        v111 = load v110
        v112 = get_local ptr u64, __anon_0116
        v113 = load v112
        v114 = const u64 0
        v115 = const u64 0
        v116 = const u64 0
        v117 = get_elem_ptr v107, ptr u64, v114, v115, v116
        store v109 to v117
        v118 = const u64 0
        v119 = const u64 0
        v120 = const u64 1
        v121 = get_elem_ptr v107, ptr u64, v118, v119, v120
        store v111 to v121
        v122 = const u64 0
        v123 = const u64 1
        v124 = get_elem_ptr v107, ptr u64, v122, v123
        store v113 to v124
        v125 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !150
        mem_copy_val v125, v0
        v126 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127
        v129 = load v128
        v130 = const u64 0, !38
        v131 = cmp eq v129 v130, !153
        cbr v131, block0(), block1(), !151

        recover_8_unwrap_14_block1():
        v132 = const u64 0, !154
        revert v132, !159

        block0():
        v133 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v134 = const u64 1
        v135 = const u64 0
        v136 = get_elem_ptr v133, ptr { { { u64, u64 }, u64 } }, v134, v135
        v137 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !160
        v138 = const u64 0
        v139 = const u64 0
        v140 = const u64 0
        v141 = get_elem_ptr v136, ptr u64, v138, v139, v140
        v142 = load v141
        v143 = const u64 0
        v144 = const u64 0
        v145 = const u64 1
        v146 = get_elem_ptr v136, ptr u64, v143, v144, v145
        v147 = load v146
        v148 = const u64 0
        v149 = const u64 1
        v150 = get_elem_ptr v136, ptr u64, v148, v149
        v151 = load v150
        v152 = get_local ptr u64, pub_key0
        store v142 to v152
        v153 = get_local ptr u64, pub_key8
        store v147 to v153
        v154 = get_local ptr u64, pub_key16
        store v151 to v154
        v155 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !41
        v156 = const u64 0
        v157 = get_elem_ptr v155, ptr u64, v156, !41
        v158 = const u64 0, !41
        store v158 to v157, !41
        v159 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v159, v136
        v160 = get_local ptr b256, __ret_val
        v161 = call sha256_24(v159, v160)
        v162 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v162, v161
        v163 = get_local ptr { b256 }, __anon_02, !165
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr b256, v164, !166
        mem_copy_val v165, v162
        v166 = const u64 1
        v167 = const u64 0
        v168 = get_elem_ptr v155, ptr { b256 }, v166, v167, !41
        mem_copy_val v168, v163
        v169 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v169, v155
        br block5(v169)

        block1():
        v170 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !38
        v173 = load v172
        v174 = const u64 1, !38
        v175 = cmp eq v173 v174, !169
        cbr v175, block2(), block3(), !167

        block2():
        v176 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v177 = const u64 1
        v178 = const u64 1
        v179 = get_elem_ptr v176, ptr { u64 }, v177, v178
        v180 = get_local ptr { u64 }, e, !170
        v181 = const u64 0
        v182 = get_elem_ptr v179, ptr u64, v181
        v183 = load v182
        v184 = get_local ptr u64, e0
        store v183 to v184
        v185 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !41
        v186 = const u64 0
        v187 = get_elem_ptr v185, ptr u64, v186, !41
        v188 = const u64 1, !41
        store v188 to v187, !41
        v189 = const u64 1
        v190 = const u64 1
        v191 = get_elem_ptr v185, ptr { u64 }, v189, v190, !41
        mem_copy_val v191, v179
        v192 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v192, v185
        br block5(v192)

        block3():
        v193 = const u64 14757395258967588866, !150
        revert v193, !150

        block5(v194: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v194
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !173 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !174
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !177 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !132
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !180 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !134
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !184 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local u64 __aggr_memcpy_000
        local mut { u64, u64 } __aggr_memcpy_01
        local u64 __aggr_memcpy_010
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_018
        local mut { u64, u64 } __aggr_memcpy_02
        local u64 __aggr_memcpy_020
        local u64 __aggr_memcpy_028
        local mut b256 __aggr_memcpy_03
        local u64 __aggr_memcpy_08
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_008
        local { u64, u64 } __anon_01
        local u64 __anon_010
        local u64 __anon_018
        local u64 __anon_08
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_000
        store v7 to v17
        v18 = get_local ptr u64, __aggr_memcpy_08
        store v12 to v18
        v19 = get_local ptr u64, __aggr_memcpy_016
        store v16 to v19
        v20 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !185
        v21 = get_local ptr u64, __aggr_memcpy_000
        v22 = load v21
        v23 = get_local ptr u64, __aggr_memcpy_08
        v24 = load v23
        v25 = get_local ptr u64, __aggr_memcpy_016
        v26 = load v25
        v27 = const u64 0
        v28 = const u64 0
        v29 = const u64 0
        v30 = get_elem_ptr v20, ptr u64, v27, v28, v29
        store v22 to v30
        v31 = const u64 0
        v32 = const u64 0
        v33 = const u64 1
        v34 = get_elem_ptr v20, ptr u64, v31, v32, v33
        store v24 to v34
        v35 = const u64 0
        v36 = const u64 1
        v37 = get_elem_ptr v20, ptr u64, v35, v36
        store v26 to v37
        v38 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !186
        v39 = ptr_to_int s to u64, !189
        v40 = int_to_ptr v39 to ptr { { { u64, u64 }, u64 } }, !189
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr { { u64, u64 }, u64 }, v41, !191
        v43 = const u64 0
        v44 = get_elem_ptr v38, ptr { { u64, u64 }, u64 }, v43, !195
        v45 = ptr_to_int v42 to u64, !196
        v46 = int_to_ptr v45 to ptr { { u64, u64 }, u64 }, !197
        v47 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v47, v46
        v48 = call len_20(v47)
        v49 = const u64 0, !198
        v50 = cmp eq v48 v49, !203
        cbr v50, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !204

        hash_26_write_27_append_28_block1():
        v51 = const u64 1
        v52 = get_elem_ptr v44, ptr u64, v51, !205
        v53 = load v52, !206
        v54 = const u64 0, !207
        v55 = cmp eq v53 v54, !210
        cbr v55, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !211

        hash_26_write_27_append_28_block3():
        mem_copy_val v44, v46
        br hash_26_write_27_block0(), !213

        hash_26_write_27_append_28_block4():
        v56 = load v52, !214
        v57 = add v56, v48, !217
        v58 = load v52, !218
        v59 = const u64 0
        v60 = get_elem_ptr v44, ptr { u64, u64 }, v59, !219
        v61 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v61, v60
        v62 = call capacity_31(v61)
        v63 = cmp lt v62 v57, !222
        cbr v63, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !223

        hash_26_write_27_append_28_block6():
        v64 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v64, v60
        v65 = call ptr_22(v64)
        v66 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v66, v60
        v67 = call capacity_31(v66)
        v68 = cmp gt v57 v67, !228
        cbr v68, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v65), !229

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v69 = asm(size: v57) -> u64 hp, !232 {
            aloc   size, !108
        }
        v70 = const u64 0, !233
        v71 = cmp gt v67 v70, !236
        cbr v71, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v69), !237

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v72 = asm(dst: v69, src: v65, len: v67) -> (), !240 {
            mcp    dst src len, !143
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v69), !241

        hash_26_write_27_append_28_realloc_bytes_35_block5(v73: u64):
        v74 = get_local ptr { u64, u64 }, __anon_0, !246
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr u64, v75, !247
        v77 = get_local ptr u64, __anon_001
        store v73 to v77, !248
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr u64, v78, !249
        v80 = get_local ptr u64, __anon_08
        store v57 to v80, !250
        v81 = get_local ptr { u64, u64 }, __asm_arg
        v82 = get_local ptr u64, __anon_001
        v83 = load v82
        v84 = get_local ptr u64, __anon_08
        v85 = load v84
        v86 = const u64 0
        v87 = get_elem_ptr v81, ptr u64, v86
        store v83 to v87
        v88 = const u64 1
        v89 = get_elem_ptr v81, ptr u64, v88
        store v85 to v89
        v90 = asm(ptr: v81) -> ptr slice ptr {
        }
        v91 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v91, v90
        v92 = get_local ptr slice, new_slice, !252
        mem_copy_val v92, v91
        v93 = get_local ptr slice, new_slice, !254
        v94 = get_local ptr slice, __asm_arg0
        mem_copy_val v94, v91
        v95 = asm(ptr: v94) -> ptr { u64, u64 } ptr {
        }
        v96 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v97 = const u64 0
        v98 = get_elem_ptr v95, ptr u64, v97
        v99 = load v98
        v100 = const u64 1
        v101 = get_elem_ptr v95, ptr u64, v100
        v102 = load v101
        v103 = get_local ptr u64, __aggr_memcpy_010
        store v99 to v103
        v104 = get_local ptr u64, __aggr_memcpy_018
        store v102 to v104
        v105 = get_local ptr { u64, u64 }, __anon_000, !259
        v106 = get_local ptr u64, __aggr_memcpy_010
        v107 = load v106
        v108 = get_local ptr u64, __aggr_memcpy_018
        v109 = load v108
        v110 = get_local ptr u64, __anon_0000
        store v107 to v110
        v111 = get_local ptr u64, __anon_0008
        store v109 to v111
        v112 = const u64 1
        v113 = get_elem_ptr v105, ptr u64, v112, !261
        v114 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v115 = get_elem_ptr v114, ptr u64, v112
        v116 = get_local ptr u64, __aggr_memcpy_018
        v117 = load v116, !262
        v118 = asm(size: v117) -> u64 hp, !265 {
            aloc   size, !108
        }
        v119 = const u64 0, !266
        v120 = cmp gt v117 v119, !269
        cbr v120, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !270

        hash_26_write_27_append_28_from_37_block0():
        v121 = get_local ptr slice, __asm_arg1
        mem_copy_val v121, v93
        v122 = asm(ptr: v121) -> ptr { u64, u64 } ptr {
        }
        v123 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v124 = const u64 0
        v125 = get_elem_ptr v122, ptr u64, v124
        v126 = load v125
        v127 = const u64 1
        v128 = get_elem_ptr v122, ptr u64, v127
        v129 = load v128
        v130 = get_local ptr u64, __aggr_memcpy_020
        store v126 to v130
        v131 = get_local ptr u64, __aggr_memcpy_028
        store v129 to v131
        v132 = get_local ptr { u64, u64 }, __anon_01, !273
        v133 = get_local ptr u64, __aggr_memcpy_020
        v134 = load v133
        v135 = get_local ptr u64, __aggr_memcpy_028
        v136 = load v135
        v137 = get_local ptr u64, __anon_010
        store v134 to v137
        v138 = get_local ptr u64, __anon_018
        store v136 to v138
        v139 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr u64, v140
        v142 = get_local ptr u64, __aggr_memcpy_020
        v143 = load v142, !274
        v144 = asm(dst: v118, src: v143, len: v117) -> (), !278 {
            mcp    dst src len, !279
        }
        br hash_26_write_27_append_28_from_37_block2(), !280

        hash_26_write_27_append_28_from_37_block2():
        v145 = get_local ptr { u64, u64 }, __anon_00, !282
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr u64, v146, !283
        v148 = get_local ptr u64, __anon_0001
        store v118 to v148, !284
        v149 = const u64 1
        v150 = get_elem_ptr v145, ptr u64, v149, !285
        v151 = get_local ptr u64, __anon_0008
        v152 = load v151
        v153 = get_local ptr u64, __anon_008
        store v152 to v153
        v154 = get_local ptr u64, __anon_0001
        v155 = load v154
        v156 = get_local ptr u64, __anon_008
        v157 = load v156
        v158 = const u64 0
        v159 = get_elem_ptr v60, ptr u64, v158
        store v155 to v159
        v160 = const u64 1
        v161 = get_elem_ptr v60, ptr u64, v160
        store v157 to v161
        br hash_26_write_27_append_28_block8(), !286

        hash_26_write_27_append_28_block8():
        v162 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v162, v60
        v163 = call ptr_22(v162)
        v164 = asm(ptr: v163, offset: v58, new) -> u64 new, !290 {
            add    new ptr offset, !291
        }
        v165 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v165, v46
        v166 = call ptr_21(v165)
        v167 = asm(dst: v164, src: v166, len: v48) -> (), !294 {
            mcp    dst src len, !143
        }
        store v57 to v52, !296
        br hash_26_write_27_block0(), !297

        hash_26_write_27_block0():
        v168 = get_local ptr b256, __const
        v169 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !298
        v170 = get_local ptr b256, result_buffer, !302
        mem_copy_val v170, v168
        v171 = get_local ptr b256, result_buffer, !304
        v172 = ptr_to_int v169 to u64, !305
        v173 = int_to_ptr v172 to ptr { { { u64, u64 }, u64 } }, !305
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr { { u64, u64 }, u64 }, v174, !306
        v176 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v176, v175
        v177 = call ptr_21(v176)
        v178 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v178, v175
        v179 = call len_20(v178)
        v180 = asm(hash: v171, ptr: v177, bytes: v179) -> ptr b256 hash {
            s256   hash ptr bytes, !307
        }
        v181 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v181, v180
        mem_copy_val __ret_value, v181
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !310 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_0016
        local u64 __anon_008
        local u64 __anon_016
        local u64 __anon_08

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !311
        v1 = asm(size: v0) -> u64 hp, !318 {
            aloc   size, !108
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !320
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !321
        v5 = get_local ptr u64, __anon_0000
        store v1 to v5, !322
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6, !323
        v8 = get_local ptr u64, __anon_0008
        v9 = const u64 0, !324
        store v9 to v8, !325
        v10 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !327
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { u64, u64 }, v11, !328
        v13 = get_local ptr u64, __anon_0000
        v14 = load v13
        v15 = get_local ptr u64, __anon_0008
        v16 = load v15
        v17 = get_local ptr u64, __anon_0001
        store v14 to v17
        v18 = get_local ptr u64, __anon_008
        store v16 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v10, ptr u64, v19, !328
        v21 = get_local ptr u64, __anon_0016
        v22 = const u64 0, !329
        store v22 to v21, !330
        v23 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !331
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { { u64, u64 }, u64 }, v24
        v26 = get_local ptr u64, __anon_0001
        v27 = load v26
        v28 = get_local ptr u64, __anon_008
        v29 = load v28
        v30 = get_local ptr u64, __anon_0016
        v31 = load v30
        v32 = get_local ptr u64, __anon_001
        store v27 to v32
        v33 = get_local ptr u64, __anon_08
        store v29 to v33
        v34 = get_local ptr u64, __anon_016
        store v31 to v34
        v35 = get_local ptr u64, __anon_001
        v36 = load v35
        v37 = get_local ptr u64, __anon_08
        v38 = load v37
        v39 = get_local ptr u64, __anon_016
        v40 = load v39
        v41 = const u64 0
        v42 = const u64 0
        v43 = const u64 0
        v44 = get_elem_ptr __ret_value, ptr u64, v41, v42, v43
        store v36 to v44
        v45 = const u64 0
        v46 = const u64 0
        v47 = const u64 1
        v48 = get_elem_ptr __ret_value, ptr u64, v45, v46, v47
        store v38 to v48
        v49 = const u64 0
        v50 = const u64 1
        v51 = get_elem_ptr __ret_value, ptr u64, v49, v50
        store v40 to v51
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !334 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !335
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = span !6 289 334
!21 = (!4 !5 !9 !10 !20)
!22 = (!4 !5 !9 !10)
!23 = span !6 1126 1133
!24 = (!4 !5 !23)
!25 = span !6 1166 1173
!26 = (!4 !5 !25)
!27 = span !6 799 968
!28 = fn_name_span !6 802 804
!29 = inline "never"
!30 = (!27 !28 !29)
!31 = span !6 218 232
!32 = span !6 889 891
!33 = span !6 842 962
!34 = span !6 907 926
!35 = span !6 492 714
!36 = fn_name_span !6 499 506
!37 = (!35 !36)
!38 = span !6 582 603
!39 = fn_call_path_span !6 587 594
!40 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!41 = span !40 1815 1933
!42 = (!38 !39 !41)
!43 = (!38 !39 !41)
!44 = (!38 !39 !41)
!45 = span !6 451 469
!46 = fn_call_path_span !6 459 467
!47 = (!38 !39 !45 !46)
!48 = (!38 !39 !45 !46)
!49 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!50 = span !49 329 341
!51 = (!38 !39 !45 !46 !50)
!52 = span !49 1593 1595
!53 = span !49 1573 1595
!54 = fn_call_path_span !49 1590 1592
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!56 = span !55 15515 15529
!57 = fn_call_path_span !55 15520 15522
!58 = (!38 !39 !45 !46 !53 !54 !56 !57)
!59 = span !55 12533 12538
!60 = span !55 15514 15536
!61 = fn_call_path_span !55 15531 15534
!62 = (!38 !39 !45 !46 !53 !54 !60 !61)
!63 = (!38 !39 !45 !46 !53)
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!65 = span !64 2461 2560
!66 = (!38 !39 !45 !46 !65)
!67 = (!38 !39 !45 !46 !65)
!68 = (!38 !39 !45 !46 !65)
!69 = span !49 1610 1621
!70 = (!38 !39 !45 !46 !69)
!71 = (!38 !39 !45 !46 !65)
!72 = (!38 !39 !45 !46 !65)
!73 = (!38 !39 !45 !46 !65)
!74 = (!38 !39 !45 !46 !65)
!75 = (!38 !39 !45 !46)
!76 = span !6 451 478
!77 = fn_call_path_span !6 470 476
!78 = span !64 4973 5075
!79 = (!38 !39 !76 !77 !78)
!80 = (!38 !39 !76 !77)
!81 = span !64 4979 4983
!82 = span !64 4998 5037
!83 = fn_call_path_span !64 4998 5037
!84 = (!38 !39 !76 !77 !82 !83)
!85 = (!38 !39 !76 !77 !82)
!86 = (!38 !39 !76 !77 !81)
!87 = (!38 !39 !76 !77)
!88 = span !64 5009 5020
!89 = (!38 !39 !76 !77 !88)
!90 = span !64 5025 5036
!91 = (!38 !39 !76 !77 !90)
!92 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!93 = span !92 28953 28955
!94 = span !6 435 479
!95 = fn_call_path_span !6 435 450
!96 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!97 = span !96 3133 3150
!98 = fn_call_path_span !96 3133 3144
!99 = span !92 28933 28956
!100 = fn_call_path_span !92 28933 28952
!101 = span !92 4157 4190
!102 = fn_call_path_span !92 4157 4180
!103 = span !92 863 884
!104 = fn_call_path_span !92 863 874
!105 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!106 = span !105 3315 3378
!107 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !103 !104 !106)
!108 = span !105 3342 3351
!109 = span !92 839 922
!110 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!111 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102)
!112 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!113 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102)
!114 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!115 = span !92 4133 4221
!116 = (!38 !39 !94 !95 !97 !98 !99 !100 !115)
!117 = (!38 !39 !94 !95 !97 !98 !99 !100)
!118 = (!38 !39 !94 !95 !97 !98 !99 !100)
!119 = span !92 4209 4210
!120 = (!38 !39 !94 !95 !97 !98 !99 !100 !115)
!121 = span !92 28917 28957
!122 = (!38 !39 !94 !95 !97 !98 !121)
!123 = span !92 28966 28980
!124 = (!38 !39 !94 !95 !97 !98 !123)
!125 = (!38 !39 !94 !95 !97 !98 !123)
!126 = span !92 28978 28980
!127 = (!38 !39 !94 !95 !97 !98 !123)
!128 = span !92 29065 29077
!129 = (!38 !39 !94 !95 !97 !98 !128)
!130 = span !92 29092 29097
!131 = (!38 !39 !94 !95 !97 !98 !130)
!132 = span !92 2445 2458
!133 = (!38 !39 !94 !95 !97 !98 !132)
!134 = span !92 400 412
!135 = (!38 !39 !94 !95 !97 !98 !134)
!136 = (!38 !39 !94 !95 !97 !98)
!137 = span !92 29107 29109
!138 = span !92 29065 29110
!139 = fn_call_path_span !92 29078 29091
!140 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!141 = span !140 5999 6076
!142 = (!38 !39 !94 !95 !97 !98 !138 !139 !141)
!143 = span !140 6050 6065
!144 = span !92 29121 29126
!145 = (!38 !39 !94 !95 !97 !98 !144)
!146 = span !96 3107 3161
!147 = (!38 !39 !94 !95 !146)
!148 = (!38 !39 !94 !95)
!149 = (!38 !39 !41)
!150 = span !6 576 708
!151 = span !6 618 668
!152 = fn_call_path_span !6 618 668
!153 = (!151 !152)
!154 = span !64 5062 5063
!155 = span !64 5055 5064
!156 = fn_call_path_span !64 5055 5061
!157 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!158 = span !157 757 771
!159 = (!38 !39 !76 !77 !155 !156 !158)
!160 = span !6 621 628
!161 = span !6 636 666
!162 = fn_call_path_span !6 636 649
!163 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!164 = span !163 2370 2383
!165 = (!161 !162 !164)
!166 = (!161 !162)
!167 = span !6 681 698
!168 = fn_call_path_span !6 681 698
!169 = (!167 !168)
!170 = span !6 685 686
!171 = span !92 13771 13819
!172 = fn_name_span !92 13778 13781
!173 = (!171 !172)
!174 = span !92 2506 2514
!175 = span !92 15175 15233
!176 = fn_name_span !92 15182 15185
!177 = (!175 !176)
!178 = span !92 978 1030
!179 = fn_name_span !92 985 988
!180 = (!178 !179)
!181 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!182 = span !181 9009 9138
!183 = fn_name_span !181 9016 9022
!184 = (!182 !183 !29)
!185 = span !181 9065 9096
!186 = span !181 9108 9114
!187 = span !181 9101 9115
!188 = fn_call_path_span !181 9103 9107
!189 = (!187 !188)
!190 = span !96 524 536
!191 = (!187 !188 !190)
!192 = span !96 5123 5146
!193 = fn_call_path_span !96 5129 5134
!194 = span !181 142 154
!195 = (!187 !188 !192 !193 !194)
!196 = (!187 !188 !192 !193)
!197 = (!187 !188 !192 !193)
!198 = span !92 18435 18436
!199 = span !181 365 389
!200 = fn_call_path_span !181 376 382
!201 = span !92 18422 18436
!202 = fn_call_path_span !92 18432 18434
!203 = (!187 !188 !192 !193 !199 !200 !201 !202)
!204 = (!187 !188 !192 !193 !199 !200 !201)
!205 = (!187 !188 !192 !193 !199 !200 !174)
!206 = (!187 !188 !192 !193 !199 !200)
!207 = span !92 18572 18573
!208 = span !92 18560 18573
!209 = fn_call_path_span !92 18569 18571
!210 = (!187 !188 !192 !193 !199 !200 !208 !209)
!211 = (!187 !188 !192 !193 !199 !200 !208)
!212 = span !92 18614 18620
!213 = (!187 !188 !192 !193 !199 !200 !212)
!214 = (!187 !188 !192 !193 !199 !200)
!215 = span !92 18657 18677
!216 = fn_call_path_span !92 18666 18667
!217 = (!187 !188 !192 !193 !199 !200 !215 !216)
!218 = (!187 !188 !192 !193 !199 !200)
!219 = (!187 !188 !192 !193 !199 !200 !132)
!220 = span !92 18808 18838
!221 = fn_call_path_span !92 18828 18829
!222 = (!187 !188 !192 !193 !199 !200 !220 !221)
!223 = (!187 !188 !192 !193 !199 !200 !220)
!224 = span !92 18914 18974
!225 = fn_call_path_span !92 18914 18927
!226 = span !105 4168 4185
!227 = fn_call_path_span !105 4178 4179
!228 = (!187 !188 !192 !193 !199 !200 !224 !225 !226 !227)
!229 = (!187 !188 !192 !193 !199 !200 !224 !225 !226)
!230 = span !105 4210 4232
!231 = fn_call_path_span !105 4210 4221
!232 = (!187 !188 !192 !193 !199 !200 !224 !225 !230 !231 !106)
!233 = span !105 4253 4254
!234 = span !105 4245 4254
!235 = fn_call_path_span !105 4251 4252
!236 = (!187 !188 !192 !193 !199 !200 !224 !225 !234 !235)
!237 = (!187 !188 !192 !193 !199 !200 !224 !225 !234)
!238 = span !105 4269 4302
!239 = fn_call_path_span !105 4273 4286
!240 = (!187 !188 !192 !193 !199 !200 !224 !225 !238 !239 !141)
!241 = (!187 !188 !192 !193 !199 !200 !224 !225)
!242 = span !92 18869 19015
!243 = fn_call_path_span !92 18869 18890
!244 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!245 = span !244 2362 2393
!246 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!247 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!248 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!249 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!250 = (!187 !188 !192 !193 !199 !200 !242 !243 !245)
!251 = span !92 18853 19016
!252 = (!187 !188 !192 !193 !199 !200 !251)
!253 = span !92 19055 19064
!254 = (!187 !188 !192 !193 !199 !200 !253)
!255 = span !92 19040 19065
!256 = fn_call_path_span !92 19040 19054
!257 = span !92 2130 2153
!258 = fn_call_path_span !92 2136 2151
!259 = (!187 !188 !192 !193 !199 !200 !255 !256 !257 !258)
!260 = span !244 3976 3977
!261 = (!187 !188 !192 !193 !199 !200 !255 !256 !257 !258 !260)
!262 = (!187 !188 !192 !193 !199 !200 !255 !256 !257 !258)
!263 = span !92 2173 2189
!264 = fn_call_path_span !92 2173 2184
!265 = (!187 !188 !192 !193 !199 !200 !255 !256 !263 !264 !106)
!266 = span !92 2208 2209
!267 = span !92 2202 2209
!268 = fn_call_path_span !92 2206 2207
!269 = (!187 !188 !192 !193 !199 !200 !255 !256 !267 !268)
!270 = (!187 !188 !192 !193 !199 !200 !255 !256 !267)
!271 = span !92 2224 2235
!272 = fn_call_path_span !92 2230 2233
!273 = (!187 !188 !192 !193 !199 !200 !255 !256 !271 !272)
!274 = (!187 !188 !192 !193 !199 !200 !255 !256 !271 !272)
!275 = span !92 2224 2259
!276 = fn_call_path_span !92 2236 2243
!277 = span !140 3447 3522
!278 = (!187 !188 !192 !193 !199 !200 !255 !256 !275 !276 !277)
!279 = span !140 3496 3511
!280 = (!187 !188 !192 !193 !199 !200 !255 !256)
!281 = span !92 2279 2296
!282 = (!187 !188 !192 !193 !199 !200 !255 !256 !281)
!283 = (!187 !188 !192 !193 !199 !200 !255 !256)
!284 = (!187 !188 !192 !193 !199 !200 !255 !256 !281)
!285 = (!187 !188 !192 !193 !199 !200 !255 !256)
!286 = (!187 !188 !192 !193 !199 !200)
!287 = span !92 19100 19143
!288 = fn_call_path_span !92 19115 19130
!289 = span !140 6721 6825
!290 = (!187 !188 !192 !193 !199 !200 !287 !288 !289)
!291 = span !140 6771 6789
!292 = span !92 19153 19198
!293 = fn_call_path_span !92 19165 19178
!294 = (!187 !188 !192 !193 !199 !200 !292 !293 !141)
!295 = span !92 19244 19263
!296 = (!187 !188 !192 !193 !199 !200 !295)
!297 = (!187 !188 !192 !193 !199 !200)
!298 = span !181 9121 9127
!299 = span !181 9121 9136
!300 = fn_call_path_span !181 9128 9134
!301 = span !181 440 476
!302 = (!299 !300 !301)
!303 = span !181 508 521
!304 = (!299 !300 !303)
!305 = (!299 !300)
!306 = (!299 !300 !194)
!307 = span !181 619 638
!308 = span !181 177 263
!309 = fn_name_span !181 184 187
!310 = (!308 !309)
!311 = span !92 570 571
!312 = span !181 234 246
!313 = fn_call_path_span !181 234 244
!314 = span !92 3079 3094
!315 = fn_call_path_span !92 3079 3092
!316 = span !92 558 572
!317 = fn_call_path_span !92 558 569
!318 = (!312 !313 !314 !315 !316 !317 !106)
!319 = span !92 534 603
!320 = (!312 !313 !314 !315 !319)
!321 = (!312 !313 !314 !315)
!322 = (!312 !313 !314 !315 !319)
!323 = (!312 !313 !314 !315)
!324 = span !92 591 592
!325 = (!312 !313 !314 !315 !319)
!326 = span !92 3055 3125
!327 = (!312 !313 !326)
!328 = (!312 !313)
!329 = span !92 3113 3114
!330 = (!312 !313 !326)
!331 = span !181 208 257
!332 = span !92 1081 1134
!333 = fn_name_span !92 1088 1096
!334 = (!332 !333)
!335 = span !92 418 426

// IR: [mem2reg] Promotion of memory to SSA registers
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local u64 __aggr_memcpy_00
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_08
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } __tmp_arg4
        local { { { u64, u64 }, u64 } } message
        local u64 message0
        local u64 message16
        local u64 message8

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_00
        v18 = get_local ptr u64, __aggr_memcpy_08
        v19 = get_local ptr u64, __aggr_memcpy_016
        v20 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        v21 = get_local ptr u64, __aggr_memcpy_00
        v22 = get_local ptr u64, __aggr_memcpy_08
        v23 = get_local ptr u64, __aggr_memcpy_016
        v24 = get_local ptr u64, message0
        v25 = get_local ptr u64, message8
        v26 = get_local ptr u64, message16
        v27 = get_local ptr [u8; 64], __anon_0, !12
        v28 = const u64 0
        br play_0_new_5_array_init_loop(v28), !13

        play_0_new_5_array_init_loop(v29: u64):
        v30 = get_elem_ptr v27, ptr u8, v29, !14
        v31 = const u8 0, !15
        store v31 to v30, !16
        v32 = const u64 1
        v33 = add v29, v32, !17
        v34 = const u64 64
        v35 = cmp lt v33 v34, !18
        cbr v35, play_0_new_5_array_init_loop(v33), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v36 = get_local ptr { [u8; 64] }, __anon_1, !21
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr [u8; 64], v37, !22
        mem_copy_val v38, v27
        v39 = get_local ptr { [u8; 64] }, __anon_1
        v40 = get_local ptr { [u8; 64] }, __anon_1
        v41 = call eq_6(v39, v40)
        v42 = get_local ptr { { { u64, u64 }, u64 } }, message, !24
        v43 = get_local ptr { [u8; 64] }, __anon_1
        v44 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v45 = get_local ptr u64, message0
        v46 = get_local ptr u64, message8
        v47 = get_local ptr u64, message16
        v48 = const u64 0
        v49 = const u64 0
        v50 = const u64 0
        v51 = get_elem_ptr v44, ptr u64, v48, v49, v50
        store v7 to v51
        v52 = const u64 0
        v53 = const u64 0
        v54 = const u64 1
        v55 = get_elem_ptr v44, ptr u64, v52, v53, v54
        store v12 to v55
        v56 = const u64 0
        v57 = const u64 1
        v58 = get_elem_ptr v44, ptr u64, v56, v57
        store v16 to v58
        v59 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v60 = call address_7(v43, v44, v59)
        v61 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v62 = get_local ptr { [u8; 64] }, __anon_1
        v63 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        v64 = get_local ptr u64, message0
        v65 = get_local ptr u64, message8
        v66 = get_local ptr u64, message16
        v67 = const u64 0
        v68 = const u64 0
        v69 = const u64 0
        v70 = get_elem_ptr v63, ptr u64, v67, v68, v69
        store v7 to v70
        v71 = const u64 0
        v72 = const u64 0
        v73 = const u64 1
        v74 = get_elem_ptr v63, ptr u64, v71, v72, v73
        store v12 to v74
        v75 = const u64 0
        v76 = const u64 1
        v77 = get_elem_ptr v63, ptr u64, v75, v76
        store v16 to v77
        v78 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v79 = call address_7(v62, v63, v78)
        v80 = const unit ()
        ret () v80
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !30 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !31
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !31
        v8 = const u64 64, !32
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !33 {
            meq    result r2 r3 r4, !34
        }
        ret bool v9
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !37 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local u64 __anon_000000
        local u64 __anon_0000000
        local u64 __anon_000008
        local u64 __anon_000016
        local u64 __anon_00008
        local { { { u64, u64 }, u64 } } __anon_01
        local u64 __anon_010
        local u64 __anon_0116
        local u64 __anon_018
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local u64 bytes0
        local u64 bytes16
        local u64 bytes8
        local { u64 } e
        local u64 e0
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key
        local u64 pub_key0
        local u64 pub_key16
        local u64 pub_key8

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !42
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !43
        v3 = const u64 0, !41
        store v3 to v2, !44
        v4 = ptr_to_int message to u64, !47
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !48
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !51
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !52
        v11 = cmp eq v9 v10, !58
        v12 = const bool false, !59
        v13 = cmp eq v11 v12, !62
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !63

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !66
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !67
        v17 = const u64 0, !65
        store v17 to v16, !68
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !70

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !71
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !72
        v22 = const u64 1, !65
        store v22 to v21, !73
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !74
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !75

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !79
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !80
        v37 = const u64 1, !81
        v38 = cmp eq v36 v37, !84
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !85

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !86
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !87
        v43 = get_local ptr b256, inner_value, !89
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !91
        v45 = const u64 32, !93
        v46 = asm(size: v45) -> u64 hp, !107 {
            aloc   size, !108
        }
        v47 = get_local ptr { u64, u64 }, __anon_00000, !110
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !111
        v50 = get_local ptr u64, __anon_0000000
        v51 = const u64 1
        v52 = get_elem_ptr v47, ptr u64, v51, !112
        v53 = get_local ptr u64, __anon_000008
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !114
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !115
        v57 = get_local ptr u64, __anon_0000000
        v58 = get_local ptr u64, __anon_000008
        v59 = get_local ptr u64, __anon_000000
        v60 = get_local ptr u64, __anon_00008
        v61 = const u64 1
        v62 = get_elem_ptr v54, ptr u64, v61, !116
        v63 = get_local ptr u64, __anon_000016
        v64 = get_local ptr { { u64, u64 }, u64 }, bytes, !118
        v65 = get_local ptr u64, __anon_000000
        v66 = get_local ptr u64, __anon_00008
        v67 = get_local ptr u64, __anon_000016
        v68 = get_local ptr u64, bytes0
        v69 = get_local ptr u64, bytes8
        v70 = get_local ptr u64, bytes16
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !120
        v72 = const u64 1
        v73 = get_elem_ptr v71, ptr u64, v72, !121
        v74 = get_local ptr u64, bytes16
        v75 = ptr_to_int v44 to u64, !123
        v76 = get_local ptr { { u64, u64 }, u64 }, bytes, !125
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr { u64, u64 }, v77, !127
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr u64, v79, !129
        v81 = get_local ptr u64, bytes0
        v82 = const u64 32, !130
        v83 = asm(dst: v46, src: v75, len: v82) -> (), !135 {
            mcp    dst src len, !136
        }
        v84 = get_local ptr { { u64, u64 }, u64 }, bytes, !138
        v85 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !140
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { { u64, u64 }, u64 }, v86, !141
        v88 = get_local ptr u64, bytes0
        v89 = get_local ptr u64, bytes8
        v90 = get_local ptr u64, bytes16
        v91 = get_local ptr u64, __anon_010
        v92 = get_local ptr u64, __anon_018
        v93 = get_local ptr u64, __anon_0116
        v94 = const u64 1
        v95 = const u64 0
        v96 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v94, v95, !142
        v97 = get_local ptr u64, __anon_010
        v98 = get_local ptr u64, __anon_018
        v99 = get_local ptr u64, __anon_0116
        v100 = const u64 0
        v101 = const u64 0
        v102 = const u64 0
        v103 = get_elem_ptr v96, ptr u64, v100, v101, v102
        store v46 to v103
        v104 = const u64 0
        v105 = const u64 0
        v106 = const u64 1
        v107 = get_elem_ptr v96, ptr u64, v104, v105, v106
        store v45 to v107
        v108 = const u64 0
        v109 = const u64 1
        v110 = get_elem_ptr v96, ptr u64, v108, v109
        v111 = const u64 32, !143
        store v111 to v110
        v112 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !144
        mem_copy_val v112, v0
        v113 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u64, v114
        v116 = load v115
        v117 = const u64 0, !38
        v118 = cmp eq v116 v117, !147
        cbr v118, block0(), block1(), !145

        recover_8_unwrap_14_block1():
        v119 = const u64 0, !148
        revert v119, !153

        block0():
        v120 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v121 = const u64 1
        v122 = const u64 0
        v123 = get_elem_ptr v120, ptr { { { u64, u64 }, u64 } }, v121, v122
        v124 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !154
        v125 = const u64 0
        v126 = const u64 0
        v127 = const u64 0
        v128 = get_elem_ptr v123, ptr u64, v125, v126, v127
        v129 = load v128
        v130 = const u64 0
        v131 = const u64 0
        v132 = const u64 1
        v133 = get_elem_ptr v123, ptr u64, v130, v131, v132
        v134 = load v133
        v135 = const u64 0
        v136 = const u64 1
        v137 = get_elem_ptr v123, ptr u64, v135, v136
        v138 = load v137
        v139 = get_local ptr u64, pub_key0
        v140 = get_local ptr u64, pub_key8
        v141 = get_local ptr u64, pub_key16
        v142 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !41
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr u64, v143, !41
        v145 = const u64 0, !41
        store v145 to v144, !41
        v146 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v146, v123
        v147 = get_local ptr b256, __ret_val
        v148 = call sha256_24(v146, v147)
        v149 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v149, v148
        v150 = get_local ptr { b256 }, __anon_02, !159
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr b256, v151, !160
        mem_copy_val v152, v149
        v153 = const u64 1
        v154 = const u64 0
        v155 = get_elem_ptr v142, ptr { b256 }, v153, v154, !41
        mem_copy_val v155, v150
        v156 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v156, v142
        br block5(v156)

        block1():
        v157 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr u64, v158, !38
        v160 = load v159
        v161 = const u64 1, !38
        v162 = cmp eq v160 v161, !163
        cbr v162, block2(), block3(), !161

        block2():
        v163 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !38
        v164 = const u64 1
        v165 = const u64 1
        v166 = get_elem_ptr v163, ptr { u64 }, v164, v165
        v167 = get_local ptr { u64 }, e, !164
        v168 = const u64 0
        v169 = get_elem_ptr v166, ptr u64, v168
        v170 = load v169
        v171 = get_local ptr u64, e0
        v172 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !41
        v173 = const u64 0
        v174 = get_elem_ptr v172, ptr u64, v173, !41
        v175 = const u64 1, !41
        store v175 to v174, !41
        v176 = const u64 1
        v177 = const u64 1
        v178 = get_elem_ptr v172, ptr { u64 }, v176, v177, !41
        mem_copy_val v178, v166
        v179 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v179, v172
        br block5(v179)

        block3():
        v180 = const u64 14757395258967588866, !144
        revert v180, !144

        block5(v181: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v181
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !167 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !168
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !171 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !126
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !174 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !128
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !178 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local u64 __aggr_memcpy_000
        local mut { u64, u64 } __aggr_memcpy_01
        local u64 __aggr_memcpy_010
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_018
        local mut { u64, u64 } __aggr_memcpy_02
        local u64 __aggr_memcpy_020
        local u64 __aggr_memcpy_028
        local mut b256 __aggr_memcpy_03
        local u64 __aggr_memcpy_08
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_008
        local { u64, u64 } __anon_01
        local u64 __anon_010
        local u64 __anon_018
        local u64 __anon_08
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_000
        v18 = get_local ptr u64, __aggr_memcpy_08
        v19 = get_local ptr u64, __aggr_memcpy_016
        v20 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !179
        v21 = get_local ptr u64, __aggr_memcpy_000
        v22 = get_local ptr u64, __aggr_memcpy_08
        v23 = get_local ptr u64, __aggr_memcpy_016
        v24 = const u64 0
        v25 = const u64 0
        v26 = const u64 0
        v27 = get_elem_ptr v20, ptr u64, v24, v25, v26
        store v7 to v27
        v28 = const u64 0
        v29 = const u64 0
        v30 = const u64 1
        v31 = get_elem_ptr v20, ptr u64, v28, v29, v30
        store v12 to v31
        v32 = const u64 0
        v33 = const u64 1
        v34 = get_elem_ptr v20, ptr u64, v32, v33
        store v16 to v34
        v35 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !180
        v36 = ptr_to_int s to u64, !183
        v37 = int_to_ptr v36 to ptr { { { u64, u64 }, u64 } }, !183
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { { u64, u64 }, u64 }, v38, !185
        v40 = const u64 0
        v41 = get_elem_ptr v35, ptr { { u64, u64 }, u64 }, v40, !189
        v42 = ptr_to_int v39 to u64, !190
        v43 = int_to_ptr v42 to ptr { { u64, u64 }, u64 }, !191
        v44 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v44, v43
        v45 = call len_20(v44)
        v46 = const u64 0, !192
        v47 = cmp eq v45 v46, !197
        cbr v47, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !198

        hash_26_write_27_append_28_block1():
        v48 = const u64 1
        v49 = get_elem_ptr v41, ptr u64, v48, !199
        v50 = load v49, !200
        v51 = const u64 0, !201
        v52 = cmp eq v50 v51, !204
        cbr v52, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !205

        hash_26_write_27_append_28_block3():
        mem_copy_val v41, v43
        br hash_26_write_27_block0(), !207

        hash_26_write_27_append_28_block4():
        v53 = load v49, !208
        v54 = add v53, v45, !211
        v55 = load v49, !212
        v56 = const u64 0
        v57 = get_elem_ptr v41, ptr { u64, u64 }, v56, !213
        v58 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v58, v57
        v59 = call capacity_31(v58)
        v60 = cmp lt v59 v54, !216
        cbr v60, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !217

        hash_26_write_27_append_28_block6():
        v61 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v61, v57
        v62 = call ptr_22(v61)
        v63 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v63, v57
        v64 = call capacity_31(v63)
        v65 = cmp gt v54 v64, !222
        cbr v65, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v62), !223

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v66 = asm(size: v54) -> u64 hp, !226 {
            aloc   size, !108
        }
        v67 = const u64 0, !227
        v68 = cmp gt v64 v67, !230
        cbr v68, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v66), !231

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v69 = asm(dst: v66, src: v62, len: v64) -> (), !234 {
            mcp    dst src len, !136
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v66), !235

        hash_26_write_27_append_28_realloc_bytes_35_block5(v70: u64):
        v71 = get_local ptr { u64, u64 }, __anon_0, !240
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !241
        v74 = get_local ptr u64, __anon_001
        v75 = const u64 1
        v76 = get_elem_ptr v71, ptr u64, v75, !242
        v77 = get_local ptr u64, __anon_08
        v78 = get_local ptr { u64, u64 }, __asm_arg
        v79 = get_local ptr u64, __anon_001
        v80 = get_local ptr u64, __anon_08
        v81 = const u64 0
        v82 = get_elem_ptr v78, ptr u64, v81
        store v70 to v82
        v83 = const u64 1
        v84 = get_elem_ptr v78, ptr u64, v83
        store v54 to v84
        v85 = asm(ptr: v78) -> ptr slice ptr {
        }
        v86 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v86, v85
        v87 = get_local ptr slice, new_slice, !244
        mem_copy_val v87, v86
        v88 = get_local ptr slice, new_slice, !246
        v89 = get_local ptr slice, __asm_arg0
        mem_copy_val v89, v86
        v90 = asm(ptr: v89) -> ptr { u64, u64 } ptr {
        }
        v91 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v92 = const u64 0
        v93 = get_elem_ptr v90, ptr u64, v92
        v94 = load v93
        v95 = const u64 1
        v96 = get_elem_ptr v90, ptr u64, v95
        v97 = load v96
        v98 = get_local ptr u64, __aggr_memcpy_010
        v99 = get_local ptr u64, __aggr_memcpy_018
        v100 = get_local ptr { u64, u64 }, __anon_000, !251
        v101 = get_local ptr u64, __aggr_memcpy_010
        v102 = get_local ptr u64, __aggr_memcpy_018
        v103 = get_local ptr u64, __anon_0000
        v104 = get_local ptr u64, __anon_0008
        v105 = const u64 1
        v106 = get_elem_ptr v100, ptr u64, v105, !253
        v107 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v108 = get_elem_ptr v107, ptr u64, v105
        v109 = get_local ptr u64, __aggr_memcpy_018
        v110 = asm(size: v97) -> u64 hp, !256 {
            aloc   size, !108
        }
        v111 = const u64 0, !257
        v112 = cmp gt v97 v111, !260
        cbr v112, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !261

        hash_26_write_27_append_28_from_37_block0():
        v113 = get_local ptr slice, __asm_arg1
        mem_copy_val v113, v88
        v114 = asm(ptr: v113) -> ptr { u64, u64 } ptr {
        }
        v115 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v116 = const u64 0
        v117 = get_elem_ptr v114, ptr u64, v116
        v118 = load v117
        v119 = const u64 1
        v120 = get_elem_ptr v114, ptr u64, v119
        v121 = load v120
        v122 = get_local ptr u64, __aggr_memcpy_020
        v123 = get_local ptr u64, __aggr_memcpy_028
        v124 = get_local ptr { u64, u64 }, __anon_01, !264
        v125 = get_local ptr u64, __aggr_memcpy_020
        v126 = get_local ptr u64, __aggr_memcpy_028
        v127 = get_local ptr u64, __anon_010
        v128 = get_local ptr u64, __anon_018
        v129 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr u64, v130
        v132 = get_local ptr u64, __aggr_memcpy_020
        v133 = asm(dst: v110, src: v118, len: v97) -> (), !268 {
            mcp    dst src len, !269
        }
        br hash_26_write_27_append_28_from_37_block2(), !270

        hash_26_write_27_append_28_from_37_block2():
        v134 = get_local ptr { u64, u64 }, __anon_00, !272
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr u64, v135, !273
        v137 = get_local ptr u64, __anon_0001
        v138 = const u64 1
        v139 = get_elem_ptr v134, ptr u64, v138, !274
        v140 = get_local ptr u64, __anon_0008
        v141 = get_local ptr u64, __anon_008
        v142 = get_local ptr u64, __anon_0001
        v143 = get_local ptr u64, __anon_008
        v144 = const u64 0
        v145 = get_elem_ptr v57, ptr u64, v144
        store v110 to v145
        v146 = const u64 1
        v147 = get_elem_ptr v57, ptr u64, v146
        store v97 to v147
        br hash_26_write_27_append_28_block8(), !275

        hash_26_write_27_append_28_block8():
        v148 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v148, v57
        v149 = call ptr_22(v148)
        v150 = asm(ptr: v149, offset: v55, new) -> u64 new, !279 {
            add    new ptr offset, !280
        }
        v151 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v151, v43
        v152 = call ptr_21(v151)
        v153 = asm(dst: v150, src: v152, len: v45) -> (), !283 {
            mcp    dst src len, !136
        }
        store v54 to v49, !285
        br hash_26_write_27_block0(), !286

        hash_26_write_27_block0():
        v154 = get_local ptr b256, __const
        v155 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !287
        v156 = get_local ptr b256, result_buffer, !291
        mem_copy_val v156, v154
        v157 = get_local ptr b256, result_buffer, !293
        v158 = ptr_to_int v155 to u64, !294
        v159 = int_to_ptr v158 to ptr { { { u64, u64 }, u64 } }, !294
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr { { u64, u64 }, u64 }, v160, !295
        v162 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v162, v161
        v163 = call ptr_21(v162)
        v164 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v164, v161
        v165 = call len_20(v164)
        v166 = asm(hash: v157, ptr: v163, bytes: v165) -> ptr b256 hash {
            s256   hash ptr bytes, !296
        }
        v167 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v167, v166
        mem_copy_val __ret_value, v167
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !299 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_0016
        local u64 __anon_008
        local u64 __anon_016
        local u64 __anon_08

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !300
        v1 = asm(size: v0) -> u64 hp, !307 {
            aloc   size, !108
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !309
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !310
        v5 = get_local ptr u64, __anon_0000
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6, !311
        v8 = get_local ptr u64, __anon_0008
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !313
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !314
        v12 = get_local ptr u64, __anon_0000
        v13 = get_local ptr u64, __anon_0008
        v14 = get_local ptr u64, __anon_0001
        v15 = get_local ptr u64, __anon_008
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !314
        v18 = get_local ptr u64, __anon_0016
        v19 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !315
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { { u64, u64 }, u64 }, v20
        v22 = get_local ptr u64, __anon_0001
        v23 = get_local ptr u64, __anon_008
        v24 = get_local ptr u64, __anon_0016
        v25 = get_local ptr u64, __anon_001
        v26 = get_local ptr u64, __anon_08
        v27 = get_local ptr u64, __anon_016
        v28 = get_local ptr u64, __anon_001
        v29 = get_local ptr u64, __anon_08
        v30 = get_local ptr u64, __anon_016
        v31 = const u64 0
        v32 = const u64 0
        v33 = const u64 0
        v34 = get_elem_ptr __ret_value, ptr u64, v31, v32, v33
        store v1 to v34
        v35 = const u64 0
        v36 = const u64 0
        v37 = const u64 1
        v38 = get_elem_ptr __ret_value, ptr u64, v35, v36, v37
        v39 = const u64 0, !316
        store v39 to v38
        v40 = const u64 0
        v41 = const u64 1
        v42 = get_elem_ptr __ret_value, ptr u64, v40, v41
        v43 = const u64 0, !317
        store v43 to v42
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !320 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !321
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = span !6 289 334
!21 = (!4 !5 !9 !10 !20)
!22 = (!4 !5 !9 !10)
!23 = span !6 1126 1133
!24 = (!4 !5 !23)
!25 = span !6 1166 1173
!26 = (!4 !5 !25)
!27 = span !6 799 968
!28 = fn_name_span !6 802 804
!29 = inline "never"
!30 = (!27 !28 !29)
!31 = span !6 218 232
!32 = span !6 889 891
!33 = span !6 842 962
!34 = span !6 907 926
!35 = span !6 492 714
!36 = fn_name_span !6 499 506
!37 = (!35 !36)
!38 = span !6 582 603
!39 = fn_call_path_span !6 587 594
!40 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!41 = span !40 1815 1933
!42 = (!38 !39 !41)
!43 = (!38 !39 !41)
!44 = (!38 !39 !41)
!45 = span !6 451 469
!46 = fn_call_path_span !6 459 467
!47 = (!38 !39 !45 !46)
!48 = (!38 !39 !45 !46)
!49 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!50 = span !49 329 341
!51 = (!38 !39 !45 !46 !50)
!52 = span !49 1593 1595
!53 = span !49 1573 1595
!54 = fn_call_path_span !49 1590 1592
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!56 = span !55 15515 15529
!57 = fn_call_path_span !55 15520 15522
!58 = (!38 !39 !45 !46 !53 !54 !56 !57)
!59 = span !55 12533 12538
!60 = span !55 15514 15536
!61 = fn_call_path_span !55 15531 15534
!62 = (!38 !39 !45 !46 !53 !54 !60 !61)
!63 = (!38 !39 !45 !46 !53)
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!65 = span !64 2461 2560
!66 = (!38 !39 !45 !46 !65)
!67 = (!38 !39 !45 !46 !65)
!68 = (!38 !39 !45 !46 !65)
!69 = span !49 1610 1621
!70 = (!38 !39 !45 !46 !69)
!71 = (!38 !39 !45 !46 !65)
!72 = (!38 !39 !45 !46 !65)
!73 = (!38 !39 !45 !46 !65)
!74 = (!38 !39 !45 !46 !65)
!75 = (!38 !39 !45 !46)
!76 = span !6 451 478
!77 = fn_call_path_span !6 470 476
!78 = span !64 4973 5075
!79 = (!38 !39 !76 !77 !78)
!80 = (!38 !39 !76 !77)
!81 = span !64 4979 4983
!82 = span !64 4998 5037
!83 = fn_call_path_span !64 4998 5037
!84 = (!38 !39 !76 !77 !82 !83)
!85 = (!38 !39 !76 !77 !82)
!86 = (!38 !39 !76 !77 !81)
!87 = (!38 !39 !76 !77)
!88 = span !64 5009 5020
!89 = (!38 !39 !76 !77 !88)
!90 = span !64 5025 5036
!91 = (!38 !39 !76 !77 !90)
!92 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!93 = span !92 28953 28955
!94 = span !6 435 479
!95 = fn_call_path_span !6 435 450
!96 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!97 = span !96 3133 3150
!98 = fn_call_path_span !96 3133 3144
!99 = span !92 28933 28956
!100 = fn_call_path_span !92 28933 28952
!101 = span !92 4157 4190
!102 = fn_call_path_span !92 4157 4180
!103 = span !92 863 884
!104 = fn_call_path_span !92 863 874
!105 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!106 = span !105 3315 3378
!107 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !103 !104 !106)
!108 = span !105 3342 3351
!109 = span !92 839 922
!110 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102 !109)
!111 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102)
!112 = (!38 !39 !94 !95 !97 !98 !99 !100 !101 !102)
!113 = span !92 4133 4221
!114 = (!38 !39 !94 !95 !97 !98 !99 !100 !113)
!115 = (!38 !39 !94 !95 !97 !98 !99 !100)
!116 = (!38 !39 !94 !95 !97 !98 !99 !100)
!117 = span !92 28917 28957
!118 = (!38 !39 !94 !95 !97 !98 !117)
!119 = span !92 28966 28980
!120 = (!38 !39 !94 !95 !97 !98 !119)
!121 = (!38 !39 !94 !95 !97 !98 !119)
!122 = span !92 29065 29077
!123 = (!38 !39 !94 !95 !97 !98 !122)
!124 = span !92 29092 29097
!125 = (!38 !39 !94 !95 !97 !98 !124)
!126 = span !92 2445 2458
!127 = (!38 !39 !94 !95 !97 !98 !126)
!128 = span !92 400 412
!129 = (!38 !39 !94 !95 !97 !98 !128)
!130 = span !92 29107 29109
!131 = span !92 29065 29110
!132 = fn_call_path_span !92 29078 29091
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!134 = span !133 5999 6076
!135 = (!38 !39 !94 !95 !97 !98 !131 !132 !134)
!136 = span !133 6050 6065
!137 = span !92 29121 29126
!138 = (!38 !39 !94 !95 !97 !98 !137)
!139 = span !96 3107 3161
!140 = (!38 !39 !94 !95 !139)
!141 = (!38 !39 !94 !95)
!142 = (!38 !39 !41)
!143 = span !92 28978 28980
!144 = span !6 576 708
!145 = span !6 618 668
!146 = fn_call_path_span !6 618 668
!147 = (!145 !146)
!148 = span !64 5062 5063
!149 = span !64 5055 5064
!150 = fn_call_path_span !64 5055 5061
!151 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!152 = span !151 757 771
!153 = (!38 !39 !76 !77 !149 !150 !152)
!154 = span !6 621 628
!155 = span !6 636 666
!156 = fn_call_path_span !6 636 649
!157 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!158 = span !157 2370 2383
!159 = (!155 !156 !158)
!160 = (!155 !156)
!161 = span !6 681 698
!162 = fn_call_path_span !6 681 698
!163 = (!161 !162)
!164 = span !6 685 686
!165 = span !92 13771 13819
!166 = fn_name_span !92 13778 13781
!167 = (!165 !166)
!168 = span !92 2506 2514
!169 = span !92 15175 15233
!170 = fn_name_span !92 15182 15185
!171 = (!169 !170)
!172 = span !92 978 1030
!173 = fn_name_span !92 985 988
!174 = (!172 !173)
!175 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!176 = span !175 9009 9138
!177 = fn_name_span !175 9016 9022
!178 = (!176 !177 !29)
!179 = span !175 9065 9096
!180 = span !175 9108 9114
!181 = span !175 9101 9115
!182 = fn_call_path_span !175 9103 9107
!183 = (!181 !182)
!184 = span !96 524 536
!185 = (!181 !182 !184)
!186 = span !96 5123 5146
!187 = fn_call_path_span !96 5129 5134
!188 = span !175 142 154
!189 = (!181 !182 !186 !187 !188)
!190 = (!181 !182 !186 !187)
!191 = (!181 !182 !186 !187)
!192 = span !92 18435 18436
!193 = span !175 365 389
!194 = fn_call_path_span !175 376 382
!195 = span !92 18422 18436
!196 = fn_call_path_span !92 18432 18434
!197 = (!181 !182 !186 !187 !193 !194 !195 !196)
!198 = (!181 !182 !186 !187 !193 !194 !195)
!199 = (!181 !182 !186 !187 !193 !194 !168)
!200 = (!181 !182 !186 !187 !193 !194)
!201 = span !92 18572 18573
!202 = span !92 18560 18573
!203 = fn_call_path_span !92 18569 18571
!204 = (!181 !182 !186 !187 !193 !194 !202 !203)
!205 = (!181 !182 !186 !187 !193 !194 !202)
!206 = span !92 18614 18620
!207 = (!181 !182 !186 !187 !193 !194 !206)
!208 = (!181 !182 !186 !187 !193 !194)
!209 = span !92 18657 18677
!210 = fn_call_path_span !92 18666 18667
!211 = (!181 !182 !186 !187 !193 !194 !209 !210)
!212 = (!181 !182 !186 !187 !193 !194)
!213 = (!181 !182 !186 !187 !193 !194 !126)
!214 = span !92 18808 18838
!215 = fn_call_path_span !92 18828 18829
!216 = (!181 !182 !186 !187 !193 !194 !214 !215)
!217 = (!181 !182 !186 !187 !193 !194 !214)
!218 = span !92 18914 18974
!219 = fn_call_path_span !92 18914 18927
!220 = span !105 4168 4185
!221 = fn_call_path_span !105 4178 4179
!222 = (!181 !182 !186 !187 !193 !194 !218 !219 !220 !221)
!223 = (!181 !182 !186 !187 !193 !194 !218 !219 !220)
!224 = span !105 4210 4232
!225 = fn_call_path_span !105 4210 4221
!226 = (!181 !182 !186 !187 !193 !194 !218 !219 !224 !225 !106)
!227 = span !105 4253 4254
!228 = span !105 4245 4254
!229 = fn_call_path_span !105 4251 4252
!230 = (!181 !182 !186 !187 !193 !194 !218 !219 !228 !229)
!231 = (!181 !182 !186 !187 !193 !194 !218 !219 !228)
!232 = span !105 4269 4302
!233 = fn_call_path_span !105 4273 4286
!234 = (!181 !182 !186 !187 !193 !194 !218 !219 !232 !233 !134)
!235 = (!181 !182 !186 !187 !193 !194 !218 !219)
!236 = span !92 18869 19015
!237 = fn_call_path_span !92 18869 18890
!238 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!239 = span !238 2362 2393
!240 = (!181 !182 !186 !187 !193 !194 !236 !237 !239)
!241 = (!181 !182 !186 !187 !193 !194 !236 !237 !239)
!242 = (!181 !182 !186 !187 !193 !194 !236 !237 !239)
!243 = span !92 18853 19016
!244 = (!181 !182 !186 !187 !193 !194 !243)
!245 = span !92 19055 19064
!246 = (!181 !182 !186 !187 !193 !194 !245)
!247 = span !92 19040 19065
!248 = fn_call_path_span !92 19040 19054
!249 = span !92 2130 2153
!250 = fn_call_path_span !92 2136 2151
!251 = (!181 !182 !186 !187 !193 !194 !247 !248 !249 !250)
!252 = span !238 3976 3977
!253 = (!181 !182 !186 !187 !193 !194 !247 !248 !249 !250 !252)
!254 = span !92 2173 2189
!255 = fn_call_path_span !92 2173 2184
!256 = (!181 !182 !186 !187 !193 !194 !247 !248 !254 !255 !106)
!257 = span !92 2208 2209
!258 = span !92 2202 2209
!259 = fn_call_path_span !92 2206 2207
!260 = (!181 !182 !186 !187 !193 !194 !247 !248 !258 !259)
!261 = (!181 !182 !186 !187 !193 !194 !247 !248 !258)
!262 = span !92 2224 2235
!263 = fn_call_path_span !92 2230 2233
!264 = (!181 !182 !186 !187 !193 !194 !247 !248 !262 !263)
!265 = span !92 2224 2259
!266 = fn_call_path_span !92 2236 2243
!267 = span !133 3447 3522
!268 = (!181 !182 !186 !187 !193 !194 !247 !248 !265 !266 !267)
!269 = span !133 3496 3511
!270 = (!181 !182 !186 !187 !193 !194 !247 !248)
!271 = span !92 2279 2296
!272 = (!181 !182 !186 !187 !193 !194 !247 !248 !271)
!273 = (!181 !182 !186 !187 !193 !194 !247 !248)
!274 = (!181 !182 !186 !187 !193 !194 !247 !248)
!275 = (!181 !182 !186 !187 !193 !194)
!276 = span !92 19100 19143
!277 = fn_call_path_span !92 19115 19130
!278 = span !133 6721 6825
!279 = (!181 !182 !186 !187 !193 !194 !276 !277 !278)
!280 = span !133 6771 6789
!281 = span !92 19153 19198
!282 = fn_call_path_span !92 19165 19178
!283 = (!181 !182 !186 !187 !193 !194 !281 !282 !134)
!284 = span !92 19244 19263
!285 = (!181 !182 !186 !187 !193 !194 !284)
!286 = (!181 !182 !186 !187 !193 !194)
!287 = span !175 9121 9127
!288 = span !175 9121 9136
!289 = fn_call_path_span !175 9128 9134
!290 = span !175 440 476
!291 = (!288 !289 !290)
!292 = span !175 508 521
!293 = (!288 !289 !292)
!294 = (!288 !289)
!295 = (!288 !289 !188)
!296 = span !175 619 638
!297 = span !175 177 263
!298 = fn_name_span !175 184 187
!299 = (!297 !298)
!300 = span !92 570 571
!301 = span !175 234 246
!302 = fn_call_path_span !175 234 244
!303 = span !92 3079 3094
!304 = fn_call_path_span !92 3079 3092
!305 = span !92 558 572
!306 = fn_call_path_span !92 558 569
!307 = (!301 !302 !303 !304 !305 !306 !106)
!308 = span !92 534 603
!309 = (!301 !302 !303 !304 !308)
!310 = (!301 !302 !303 !304)
!311 = (!301 !302 !303 !304)
!312 = span !92 3055 3125
!313 = (!301 !302 !312)
!314 = (!301 !302)
!315 = span !175 208 257
!316 = span !92 591 592
!317 = span !92 3113 3114
!318 = span !92 1081 1134
!319 = fn_name_span !92 1088 1096
!320 = (!318 !319)
!321 = span !92 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } __tmp_arg4

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr [u8; 64], __anon_0, !10
        v17 = const u64 0
        br play_0_new_5_array_init_loop(v17), !11

        play_0_new_5_array_init_loop(v18: u64):
        v19 = get_elem_ptr v16, ptr u8, v18, !12
        v20 = const u8 0, !13
        store v20 to v19, !14
        v21 = const u64 1
        v22 = add v18, v21, !15
        v23 = const u64 64
        v24 = cmp lt v22 v23, !16
        cbr v24, play_0_new_5_array_init_loop(v22), play_0_new_5_array_init_exit(), !17

        play_0_new_5_array_init_exit():
        v25 = get_local ptr { [u8; 64] }, __anon_1, !19
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr [u8; 64], v26, !20
        mem_copy_val v27, v16
        v28 = get_local ptr { [u8; 64] }, __anon_1
        v29 = get_local ptr { [u8; 64] }, __anon_1
        v30 = call eq_6(v28, v29)
        v31 = get_local ptr { [u8; 64] }, __anon_1
        v32 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v33 = const u64 0
        v34 = const u64 0
        v35 = const u64 0
        v36 = get_elem_ptr v32, ptr u64, v33, v34, v35
        store v6 to v36
        v37 = const u64 0
        v38 = const u64 0
        v39 = const u64 1
        v40 = get_elem_ptr v32, ptr u64, v37, v38, v39
        store v11 to v40
        v41 = const u64 0
        v42 = const u64 1
        v43 = get_elem_ptr v32, ptr u64, v41, v42
        store v15 to v43
        v44 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v45 = call address_7(v31, v32, v44)
        v46 = get_local ptr { [u8; 64] }, __anon_1
        v47 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        v48 = const u64 0
        v49 = const u64 0
        v50 = const u64 0
        v51 = get_elem_ptr v47, ptr u64, v48, v49, v50
        store v6 to v51
        v52 = const u64 0
        v53 = const u64 0
        v54 = const u64 1
        v55 = get_elem_ptr v47, ptr u64, v52, v53, v54
        store v11 to v55
        v56 = const u64 0
        v57 = const u64 1
        v58 = get_elem_ptr v47, ptr u64, v56, v57
        store v15 to v58
        v59 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v60 = call address_7(v46, v47, v59)
        v61 = const unit ()
        ret () v61
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !24 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !25
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !25
        v8 = const u64 64, !26
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !27 {
            meq    result r2 r3 r4, !28
        }
        ret bool v9
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !31 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local b256 inner_value

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !36
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !37
        v3 = const u64 0, !35
        store v3 to v2, !38
        v4 = ptr_to_int message to u64, !41
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !42
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !45
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !46
        v11 = cmp eq v9 v10, !52
        v12 = const bool false, !53
        v13 = cmp eq v11 v12, !56
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !57

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !60
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !61
        v17 = const u64 0, !59
        store v17 to v16, !62
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !64

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !65
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !66
        v22 = const u64 1, !59
        store v22 to v21, !67
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !68
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !69

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !73
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !74
        v37 = const u64 1, !75
        v38 = cmp eq v36 v37, !78
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !79

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !80
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !81
        v43 = get_local ptr b256, inner_value, !83
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !85
        v45 = const u64 32, !87
        v46 = asm(size: v45) -> u64 hp, !101 {
            aloc   size, !102
        }
        v47 = ptr_to_int v44 to u64, !104
        v48 = const u64 32, !105
        v49 = asm(dst: v46, src: v47, len: v48) -> (), !110 {
            mcp    dst src len, !111
        }
        v50 = const u64 1
        v51 = const u64 0
        v52 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v50, v51, !112
        v53 = const u64 0
        v54 = const u64 0
        v55 = const u64 0
        v56 = get_elem_ptr v52, ptr u64, v53, v54, v55
        store v46 to v56
        v57 = const u64 0
        v58 = const u64 0
        v59 = const u64 1
        v60 = get_elem_ptr v52, ptr u64, v57, v58, v59
        store v45 to v60
        v61 = const u64 0
        v62 = const u64 1
        v63 = get_elem_ptr v52, ptr u64, v61, v62
        v64 = const u64 32, !113
        store v64 to v63
        v65 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !114
        mem_copy_val v65, v0
        v66 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67
        v69 = load v68
        v70 = const u64 0, !32
        v71 = cmp eq v69 v70, !117
        cbr v71, block0(), block1(), !115

        recover_8_unwrap_14_block1():
        v72 = const u64 0, !118
        revert v72, !123

        block0():
        v73 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !32
        v74 = const u64 1
        v75 = const u64 0
        v76 = get_elem_ptr v73, ptr { { { u64, u64 }, u64 } }, v74, v75
        v77 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !35
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !35
        v80 = const u64 0, !35
        store v80 to v79, !35
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v81, v76
        v82 = get_local ptr b256, __ret_val
        v83 = call sha256_24(v81, v82)
        v84 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v84, v83
        v85 = get_local ptr { b256 }, __anon_02, !128
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86, !129
        mem_copy_val v87, v84
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v77, ptr { b256 }, v88, v89, !35
        mem_copy_val v90, v85
        v91 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v91, v77
        br block5(v91)

        block1():
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !32
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !32
        v95 = load v94
        v96 = const u64 1, !32
        v97 = cmp eq v95 v96, !132
        cbr v97, block2(), block3(), !130

        block2():
        v98 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !32
        v99 = const u64 1
        v100 = const u64 1
        v101 = get_elem_ptr v98, ptr { u64 }, v99, v100
        v102 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !35
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !35
        v105 = const u64 1, !35
        store v105 to v104, !35
        v106 = const u64 1
        v107 = const u64 1
        v108 = get_elem_ptr v102, ptr { u64 }, v106, v107, !35
        mem_copy_val v108, v101
        v109 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v109, v102
        br block5(v109)

        block3():
        v110 = const u64 14757395258967588866, !114
        revert v110, !114

        block5(v111: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v111
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !135 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !136
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !139 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !140
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !143 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !144
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !148 {
        local mut slice __aggr_memcpy_00
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !149
        v17 = const u64 0
        v18 = const u64 0
        v19 = const u64 0
        v20 = get_elem_ptr v16, ptr u64, v17, v18, v19
        store v6 to v20
        v21 = const u64 0
        v22 = const u64 0
        v23 = const u64 1
        v24 = get_elem_ptr v16, ptr u64, v21, v22, v23
        store v11 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr v16, ptr u64, v25, v26
        store v15 to v27
        v28 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !150
        v29 = ptr_to_int s to u64, !153
        v30 = int_to_ptr v29 to ptr { { { u64, u64 }, u64 } }, !153
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr { { u64, u64 }, u64 }, v31, !155
        v33 = const u64 0
        v34 = get_elem_ptr v28, ptr { { u64, u64 }, u64 }, v33, !159
        v35 = ptr_to_int v32 to u64, !160
        v36 = int_to_ptr v35 to ptr { { u64, u64 }, u64 }, !161
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v37, v36
        v38 = call len_20(v37)
        v39 = const u64 0, !162
        v40 = cmp eq v38 v39, !167
        cbr v40, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !168

        hash_26_write_27_append_28_block1():
        v41 = const u64 1
        v42 = get_elem_ptr v34, ptr u64, v41, !169
        v43 = load v42, !170
        v44 = const u64 0, !171
        v45 = cmp eq v43 v44, !174
        cbr v45, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !175

        hash_26_write_27_append_28_block3():
        mem_copy_val v34, v36
        br hash_26_write_27_block0(), !177

        hash_26_write_27_append_28_block4():
        v46 = load v42, !178
        v47 = add v46, v38, !181
        v48 = load v42, !182
        v49 = const u64 0
        v50 = get_elem_ptr v34, ptr { u64, u64 }, v49, !183
        v51 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v51, v50
        v52 = call capacity_31(v51)
        v53 = cmp lt v52 v47, !186
        cbr v53, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !187

        hash_26_write_27_append_28_block6():
        v54 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v54, v50
        v55 = call ptr_22(v54)
        v56 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v56, v50
        v57 = call capacity_31(v56)
        v58 = cmp gt v47 v57, !192
        cbr v58, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v55), !193

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v59 = asm(size: v47) -> u64 hp, !196 {
            aloc   size, !102
        }
        v60 = const u64 0, !197
        v61 = cmp gt v57 v60, !200
        cbr v61, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !201

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v62 = asm(dst: v59, src: v55, len: v57) -> (), !204 {
            mcp    dst src len, !111
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !205

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr { u64, u64 }, __asm_arg
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65
        store v63 to v66
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67
        store v47 to v68
        v69 = asm(ptr: v64) -> ptr slice ptr {
        }
        v70 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v70, v69
        v71 = get_local ptr slice, new_slice, !207
        mem_copy_val v71, v70
        v72 = get_local ptr slice, new_slice, !209
        v73 = get_local ptr slice, __asm_arg0
        mem_copy_val v73, v70
        v74 = asm(ptr: v73) -> ptr { u64, u64 } ptr {
        }
        v75 = const u64 1
        v76 = get_elem_ptr v74, ptr u64, v75
        v77 = load v76
        v78 = asm(size: v77) -> u64 hp, !214 {
            aloc   size, !102
        }
        v79 = const u64 0, !215
        v80 = cmp gt v77 v79, !218
        cbr v80, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !219

        hash_26_write_27_append_28_from_37_block0():
        v81 = get_local ptr slice, __asm_arg1
        mem_copy_val v81, v72
        v82 = asm(ptr: v81) -> ptr { u64, u64 } ptr {
        }
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u64, v83
        v85 = load v84
        v86 = asm(dst: v78, src: v85, len: v77) -> (), !223 {
            mcp    dst src len, !224
        }
        br hash_26_write_27_append_28_from_37_block2(), !225

        hash_26_write_27_append_28_from_37_block2():
        v87 = const u64 0
        v88 = get_elem_ptr v50, ptr u64, v87
        store v78 to v88
        v89 = const u64 1
        v90 = get_elem_ptr v50, ptr u64, v89
        store v77 to v90
        br hash_26_write_27_append_28_block8(), !226

        hash_26_write_27_append_28_block8():
        v91 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v91, v50
        v92 = call ptr_22(v91)
        v93 = asm(ptr: v92, offset: v48, new) -> u64 new, !230 {
            add    new ptr offset, !231
        }
        v94 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v94, v36
        v95 = call ptr_21(v94)
        v96 = asm(dst: v93, src: v95, len: v38) -> (), !234 {
            mcp    dst src len, !111
        }
        store v47 to v42, !236
        br hash_26_write_27_block0(), !237

        hash_26_write_27_block0():
        v97 = get_local ptr b256, __const
        v98 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !238
        v99 = get_local ptr b256, result_buffer, !242
        mem_copy_val v99, v97
        v100 = get_local ptr b256, result_buffer, !244
        v101 = ptr_to_int v98 to u64, !245
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !245
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !246
        v105 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v105, v104
        v106 = call ptr_21(v105)
        v107 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v107, v104
        v108 = call len_20(v107)
        v109 = asm(hash: v100, ptr: v106, bytes: v108) -> ptr b256 hash {
            s256   hash ptr bytes, !247
        }
        v110 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v110, v109
        mem_copy_val __ret_value, v110
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !250 {
        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !251
        v1 = asm(size: v0) -> u64 hp, !258 {
            aloc   size, !102
        }
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr __ret_value, ptr u64, v2, v3, v4
        store v1 to v5
        v6 = const u64 0
        v7 = const u64 0
        v8 = const u64 1
        v9 = get_elem_ptr __ret_value, ptr u64, v6, v7, v8
        v10 = const u64 0, !259
        store v10 to v9
        v11 = const u64 0
        v12 = const u64 1
        v13 = get_elem_ptr __ret_value, ptr u64, v11, v12
        v14 = const u64 0, !260
        store v14 to v13
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !263 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !264
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1042 1058
!8 = fn_call_path_span !6 1042 1056
!9 = span !6 314 323
!10 = (!4 !5 !7 !8 !9)
!11 = (!4 !5 !7 !8)
!12 = (!4 !5 !7 !8)
!13 = span !6 315 318
!14 = (!4 !5 !7 !8 !9)
!15 = (!4 !5 !7 !8)
!16 = (!4 !5 !7 !8)
!17 = (!4 !5 !7 !8)
!18 = span !6 289 334
!19 = (!4 !5 !7 !8 !18)
!20 = (!4 !5 !7 !8)
!21 = span !6 799 968
!22 = fn_name_span !6 802 804
!23 = inline "never"
!24 = (!21 !22 !23)
!25 = span !6 218 232
!26 = span !6 889 891
!27 = span !6 842 962
!28 = span !6 907 926
!29 = span !6 492 714
!30 = fn_name_span !6 499 506
!31 = (!29 !30)
!32 = span !6 582 603
!33 = fn_call_path_span !6 587 594
!34 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!35 = span !34 1815 1933
!36 = (!32 !33 !35)
!37 = (!32 !33 !35)
!38 = (!32 !33 !35)
!39 = span !6 451 469
!40 = fn_call_path_span !6 459 467
!41 = (!32 !33 !39 !40)
!42 = (!32 !33 !39 !40)
!43 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!44 = span !43 329 341
!45 = (!32 !33 !39 !40 !44)
!46 = span !43 1593 1595
!47 = span !43 1573 1595
!48 = fn_call_path_span !43 1590 1592
!49 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!50 = span !49 15515 15529
!51 = fn_call_path_span !49 15520 15522
!52 = (!32 !33 !39 !40 !47 !48 !50 !51)
!53 = span !49 12533 12538
!54 = span !49 15514 15536
!55 = fn_call_path_span !49 15531 15534
!56 = (!32 !33 !39 !40 !47 !48 !54 !55)
!57 = (!32 !33 !39 !40 !47)
!58 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!59 = span !58 2461 2560
!60 = (!32 !33 !39 !40 !59)
!61 = (!32 !33 !39 !40 !59)
!62 = (!32 !33 !39 !40 !59)
!63 = span !43 1610 1621
!64 = (!32 !33 !39 !40 !63)
!65 = (!32 !33 !39 !40 !59)
!66 = (!32 !33 !39 !40 !59)
!67 = (!32 !33 !39 !40 !59)
!68 = (!32 !33 !39 !40 !59)
!69 = (!32 !33 !39 !40)
!70 = span !6 451 478
!71 = fn_call_path_span !6 470 476
!72 = span !58 4973 5075
!73 = (!32 !33 !70 !71 !72)
!74 = (!32 !33 !70 !71)
!75 = span !58 4979 4983
!76 = span !58 4998 5037
!77 = fn_call_path_span !58 4998 5037
!78 = (!32 !33 !70 !71 !76 !77)
!79 = (!32 !33 !70 !71 !76)
!80 = (!32 !33 !70 !71 !75)
!81 = (!32 !33 !70 !71)
!82 = span !58 5009 5020
!83 = (!32 !33 !70 !71 !82)
!84 = span !58 5025 5036
!85 = (!32 !33 !70 !71 !84)
!86 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!87 = span !86 28953 28955
!88 = span !6 435 479
!89 = fn_call_path_span !6 435 450
!90 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!91 = span !90 3133 3150
!92 = fn_call_path_span !90 3133 3144
!93 = span !86 28933 28956
!94 = fn_call_path_span !86 28933 28952
!95 = span !86 4157 4190
!96 = fn_call_path_span !86 4157 4180
!97 = span !86 863 884
!98 = fn_call_path_span !86 863 874
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!100 = span !99 3315 3378
!101 = (!32 !33 !88 !89 !91 !92 !93 !94 !95 !96 !97 !98 !100)
!102 = span !99 3342 3351
!103 = span !86 29065 29077
!104 = (!32 !33 !88 !89 !91 !92 !103)
!105 = span !86 29107 29109
!106 = span !86 29065 29110
!107 = fn_call_path_span !86 29078 29091
!108 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!109 = span !108 5999 6076
!110 = (!32 !33 !88 !89 !91 !92 !106 !107 !109)
!111 = span !108 6050 6065
!112 = (!32 !33 !35)
!113 = span !86 28978 28980
!114 = span !6 576 708
!115 = span !6 618 668
!116 = fn_call_path_span !6 618 668
!117 = (!115 !116)
!118 = span !58 5062 5063
!119 = span !58 5055 5064
!120 = fn_call_path_span !58 5055 5061
!121 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!122 = span !121 757 771
!123 = (!32 !33 !70 !71 !119 !120 !122)
!124 = span !6 636 666
!125 = fn_call_path_span !6 636 649
!126 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!127 = span !126 2370 2383
!128 = (!124 !125 !127)
!129 = (!124 !125)
!130 = span !6 681 698
!131 = fn_call_path_span !6 681 698
!132 = (!130 !131)
!133 = span !86 13771 13819
!134 = fn_name_span !86 13778 13781
!135 = (!133 !134)
!136 = span !86 2506 2514
!137 = span !86 15175 15233
!138 = fn_name_span !86 15182 15185
!139 = (!137 !138)
!140 = span !86 2445 2458
!141 = span !86 978 1030
!142 = fn_name_span !86 985 988
!143 = (!141 !142)
!144 = span !86 400 412
!145 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!146 = span !145 9009 9138
!147 = fn_name_span !145 9016 9022
!148 = (!146 !147 !23)
!149 = span !145 9065 9096
!150 = span !145 9108 9114
!151 = span !145 9101 9115
!152 = fn_call_path_span !145 9103 9107
!153 = (!151 !152)
!154 = span !90 524 536
!155 = (!151 !152 !154)
!156 = span !90 5123 5146
!157 = fn_call_path_span !90 5129 5134
!158 = span !145 142 154
!159 = (!151 !152 !156 !157 !158)
!160 = (!151 !152 !156 !157)
!161 = (!151 !152 !156 !157)
!162 = span !86 18435 18436
!163 = span !145 365 389
!164 = fn_call_path_span !145 376 382
!165 = span !86 18422 18436
!166 = fn_call_path_span !86 18432 18434
!167 = (!151 !152 !156 !157 !163 !164 !165 !166)
!168 = (!151 !152 !156 !157 !163 !164 !165)
!169 = (!151 !152 !156 !157 !163 !164 !136)
!170 = (!151 !152 !156 !157 !163 !164)
!171 = span !86 18572 18573
!172 = span !86 18560 18573
!173 = fn_call_path_span !86 18569 18571
!174 = (!151 !152 !156 !157 !163 !164 !172 !173)
!175 = (!151 !152 !156 !157 !163 !164 !172)
!176 = span !86 18614 18620
!177 = (!151 !152 !156 !157 !163 !164 !176)
!178 = (!151 !152 !156 !157 !163 !164)
!179 = span !86 18657 18677
!180 = fn_call_path_span !86 18666 18667
!181 = (!151 !152 !156 !157 !163 !164 !179 !180)
!182 = (!151 !152 !156 !157 !163 !164)
!183 = (!151 !152 !156 !157 !163 !164 !140)
!184 = span !86 18808 18838
!185 = fn_call_path_span !86 18828 18829
!186 = (!151 !152 !156 !157 !163 !164 !184 !185)
!187 = (!151 !152 !156 !157 !163 !164 !184)
!188 = span !86 18914 18974
!189 = fn_call_path_span !86 18914 18927
!190 = span !99 4168 4185
!191 = fn_call_path_span !99 4178 4179
!192 = (!151 !152 !156 !157 !163 !164 !188 !189 !190 !191)
!193 = (!151 !152 !156 !157 !163 !164 !188 !189 !190)
!194 = span !99 4210 4232
!195 = fn_call_path_span !99 4210 4221
!196 = (!151 !152 !156 !157 !163 !164 !188 !189 !194 !195 !100)
!197 = span !99 4253 4254
!198 = span !99 4245 4254
!199 = fn_call_path_span !99 4251 4252
!200 = (!151 !152 !156 !157 !163 !164 !188 !189 !198 !199)
!201 = (!151 !152 !156 !157 !163 !164 !188 !189 !198)
!202 = span !99 4269 4302
!203 = fn_call_path_span !99 4273 4286
!204 = (!151 !152 !156 !157 !163 !164 !188 !189 !202 !203 !109)
!205 = (!151 !152 !156 !157 !163 !164 !188 !189)
!206 = span !86 18853 19016
!207 = (!151 !152 !156 !157 !163 !164 !206)
!208 = span !86 19055 19064
!209 = (!151 !152 !156 !157 !163 !164 !208)
!210 = span !86 19040 19065
!211 = fn_call_path_span !86 19040 19054
!212 = span !86 2173 2189
!213 = fn_call_path_span !86 2173 2184
!214 = (!151 !152 !156 !157 !163 !164 !210 !211 !212 !213 !100)
!215 = span !86 2208 2209
!216 = span !86 2202 2209
!217 = fn_call_path_span !86 2206 2207
!218 = (!151 !152 !156 !157 !163 !164 !210 !211 !216 !217)
!219 = (!151 !152 !156 !157 !163 !164 !210 !211 !216)
!220 = span !86 2224 2259
!221 = fn_call_path_span !86 2236 2243
!222 = span !108 3447 3522
!223 = (!151 !152 !156 !157 !163 !164 !210 !211 !220 !221 !222)
!224 = span !108 3496 3511
!225 = (!151 !152 !156 !157 !163 !164 !210 !211)
!226 = (!151 !152 !156 !157 !163 !164)
!227 = span !86 19100 19143
!228 = fn_call_path_span !86 19115 19130
!229 = span !108 6721 6825
!230 = (!151 !152 !156 !157 !163 !164 !227 !228 !229)
!231 = span !108 6771 6789
!232 = span !86 19153 19198
!233 = fn_call_path_span !86 19165 19178
!234 = (!151 !152 !156 !157 !163 !164 !232 !233 !109)
!235 = span !86 19244 19263
!236 = (!151 !152 !156 !157 !163 !164 !235)
!237 = (!151 !152 !156 !157 !163 !164)
!238 = span !145 9121 9127
!239 = span !145 9121 9136
!240 = fn_call_path_span !145 9128 9134
!241 = span !145 440 476
!242 = (!239 !240 !241)
!243 = span !145 508 521
!244 = (!239 !240 !243)
!245 = (!239 !240)
!246 = (!239 !240 !158)
!247 = span !145 619 638
!248 = span !145 177 263
!249 = fn_name_span !145 184 187
!250 = (!248 !249)
!251 = span !86 570 571
!252 = span !145 234 246
!253 = fn_call_path_span !145 234 244
!254 = span !86 3079 3094
!255 = fn_call_path_span !86 3079 3092
!256 = span !86 558 572
!257 = fn_call_path_span !86 558 569
!258 = (!252 !253 !254 !255 !256 !257 !100)
!259 = span !86 591 592
!260 = span !86 3113 3114
!261 = span !86 1081 1134
!262 = fn_name_span !86 1088 1096
!263 = (!261 !262)
!264 = span !86 418 426

// IR: Final
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } __tmp_arg4

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr [u8; 64], __anon_0, !10
        v17 = const u64 0
        br play_0_new_5_array_init_loop(v17), !11

        play_0_new_5_array_init_loop(v18: u64):
        v19 = get_elem_ptr v16, ptr u8, v18, !12
        v20 = const u8 0, !13
        store v20 to v19, !14
        v21 = const u64 1
        v22 = add v18, v21, !15
        v23 = const u64 64
        v24 = cmp lt v22 v23, !16
        cbr v24, play_0_new_5_array_init_loop(v22), play_0_new_5_array_init_exit(), !17

        play_0_new_5_array_init_exit():
        v25 = get_local ptr { [u8; 64] }, __anon_1, !19
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr [u8; 64], v26, !20
        mem_copy_val v27, v16
        v28 = get_local ptr { [u8; 64] }, __anon_1
        v29 = get_local ptr { [u8; 64] }, __anon_1
        v30 = call eq_6(v28, v29)
        v31 = get_local ptr { [u8; 64] }, __anon_1
        v32 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v33 = const u64 0
        v34 = const u64 0
        v35 = const u64 0
        v36 = get_elem_ptr v32, ptr u64, v33, v34, v35
        store v6 to v36
        v37 = const u64 0
        v38 = const u64 0
        v39 = const u64 1
        v40 = get_elem_ptr v32, ptr u64, v37, v38, v39
        store v11 to v40
        v41 = const u64 0
        v42 = const u64 1
        v43 = get_elem_ptr v32, ptr u64, v41, v42
        store v15 to v43
        v44 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v45 = call address_7(v31, v32, v44)
        v46 = get_local ptr { [u8; 64] }, __anon_1
        v47 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg4
        v48 = const u64 0
        v49 = const u64 0
        v50 = const u64 0
        v51 = get_elem_ptr v47, ptr u64, v48, v49, v50
        store v6 to v51
        v52 = const u64 0
        v53 = const u64 0
        v54 = const u64 1
        v55 = get_elem_ptr v47, ptr u64, v52, v53, v54
        store v11 to v55
        v56 = const u64 0
        v57 = const u64 1
        v58 = get_elem_ptr v47, ptr u64, v56, v57
        store v15 to v58
        v59 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v60 = call address_7(v46, v47, v59)
        v61 = const unit ()
        ret () v61
    }

    pub fn eq_6(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }) -> bool, !24 {
        entry(self: ptr { [u8; 64] }, other: ptr { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !25
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !25
        v8 = const u64 64, !26
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !27 {
            meq    result r2 r3 r4, !28
        }
        ret bool v9
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !31 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local b256 inner_value

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !36
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !37
        v3 = const u64 0, !35
        store v3 to v2, !38
        v4 = ptr_to_int message to u64, !41
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !42
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !45
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !46
        v11 = cmp eq v9 v10, !52
        v12 = const bool false, !53
        v13 = cmp eq v11 v12, !56
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !57

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !60
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !61
        v17 = const u64 0, !59
        store v17 to v16, !62
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !64

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !65
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !66
        v22 = const u64 1, !59
        store v22 to v21, !67
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !68
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !69

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !73
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !74
        v37 = const u64 1, !75
        v38 = cmp eq v36 v37, !78
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !79

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !80
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !81
        v43 = get_local ptr b256, inner_value, !83
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !85
        v45 = const u64 32, !87
        v46 = asm(size: v45) -> u64 hp, !101 {
            aloc   size, !102
        }
        v47 = ptr_to_int v44 to u64, !104
        v48 = const u64 32, !105
        v49 = asm(dst: v46, src: v47, len: v48) -> (), !110 {
            mcp    dst src len, !111
        }
        v50 = const u64 1
        v51 = const u64 0
        v52 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v50, v51, !112
        v53 = const u64 0
        v54 = const u64 0
        v55 = const u64 0
        v56 = get_elem_ptr v52, ptr u64, v53, v54, v55
        store v46 to v56
        v57 = const u64 0
        v58 = const u64 0
        v59 = const u64 1
        v60 = get_elem_ptr v52, ptr u64, v57, v58, v59
        store v45 to v60
        v61 = const u64 0
        v62 = const u64 1
        v63 = get_elem_ptr v52, ptr u64, v61, v62
        v64 = const u64 32, !113
        store v64 to v63
        v65 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !114
        mem_copy_val v65, v0
        v66 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67
        v69 = load v68
        v70 = const u64 0, !32
        v71 = cmp eq v69 v70, !117
        cbr v71, block0(), block1(), !115

        recover_8_unwrap_14_block1():
        v72 = const u64 0, !118
        revert v72, !123

        block0():
        v73 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !32
        v74 = const u64 1
        v75 = const u64 0
        v76 = get_elem_ptr v73, ptr { { { u64, u64 }, u64 } }, v74, v75
        v77 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !35
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !35
        v80 = const u64 0, !35
        store v80 to v79, !35
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v81, v76
        v82 = get_local ptr b256, __ret_val
        v83 = call sha256_24(v81, v82)
        v84 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v84, v83
        v85 = get_local ptr { b256 }, __anon_02, !128
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86, !129
        mem_copy_val v87, v84
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v77, ptr { b256 }, v88, v89, !35
        mem_copy_val v90, v85
        v91 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v91, v77
        br block5(v91)

        block1():
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !32
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !32
        v95 = load v94
        v96 = const u64 1, !32
        v97 = cmp eq v95 v96, !132
        cbr v97, block2(), block3(), !130

        block2():
        v98 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !32
        v99 = const u64 1
        v100 = const u64 1
        v101 = get_elem_ptr v98, ptr { u64 }, v99, v100
        v102 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !35
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !35
        v105 = const u64 1, !35
        store v105 to v104, !35
        v106 = const u64 1
        v107 = const u64 1
        v108 = get_elem_ptr v102, ptr { u64 }, v106, v107, !35
        mem_copy_val v108, v101
        v109 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v109, v102
        br block5(v109)

        block3():
        v110 = const u64 14757395258967588866, !114
        revert v110, !114

        block5(v111: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v111
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !135 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !136
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !139 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !140
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !143 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !144
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !148 {
        local mut slice __aggr_memcpy_00
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !149
        v17 = const u64 0
        v18 = const u64 0
        v19 = const u64 0
        v20 = get_elem_ptr v16, ptr u64, v17, v18, v19
        store v6 to v20
        v21 = const u64 0
        v22 = const u64 0
        v23 = const u64 1
        v24 = get_elem_ptr v16, ptr u64, v21, v22, v23
        store v11 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr v16, ptr u64, v25, v26
        store v15 to v27
        v28 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !150
        v29 = ptr_to_int s to u64, !153
        v30 = int_to_ptr v29 to ptr { { { u64, u64 }, u64 } }, !153
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr { { u64, u64 }, u64 }, v31, !155
        v33 = const u64 0
        v34 = get_elem_ptr v28, ptr { { u64, u64 }, u64 }, v33, !159
        v35 = ptr_to_int v32 to u64, !160
        v36 = int_to_ptr v35 to ptr { { u64, u64 }, u64 }, !161
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v37, v36
        v38 = call len_20(v37)
        v39 = const u64 0, !162
        v40 = cmp eq v38 v39, !167
        cbr v40, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !168

        hash_26_write_27_append_28_block1():
        v41 = const u64 1
        v42 = get_elem_ptr v34, ptr u64, v41, !169
        v43 = load v42, !170
        v44 = const u64 0, !171
        v45 = cmp eq v43 v44, !174
        cbr v45, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !175

        hash_26_write_27_append_28_block3():
        mem_copy_val v34, v36
        br hash_26_write_27_block0(), !177

        hash_26_write_27_append_28_block4():
        v46 = load v42, !178
        v47 = add v46, v38, !181
        v48 = load v42, !182
        v49 = const u64 0
        v50 = get_elem_ptr v34, ptr { u64, u64 }, v49, !183
        v51 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v51, v50
        v52 = call capacity_31(v51)
        v53 = cmp lt v52 v47, !186
        cbr v53, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !187

        hash_26_write_27_append_28_block6():
        v54 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v54, v50
        v55 = call ptr_22(v54)
        v56 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v56, v50
        v57 = call capacity_31(v56)
        v58 = cmp gt v47 v57, !192
        cbr v58, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v55), !193

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v59 = asm(size: v47) -> u64 hp, !196 {
            aloc   size, !102
        }
        v60 = const u64 0, !197
        v61 = cmp gt v57 v60, !200
        cbr v61, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !201

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v62 = asm(dst: v59, src: v55, len: v57) -> (), !204 {
            mcp    dst src len, !111
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !205

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr { u64, u64 }, __asm_arg
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65
        store v63 to v66
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67
        store v47 to v68
        v69 = asm(ptr: v64) -> ptr slice ptr {
        }
        v70 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v70, v69
        v71 = get_local ptr slice, new_slice, !207
        mem_copy_val v71, v70
        v72 = get_local ptr slice, new_slice, !209
        v73 = get_local ptr slice, __asm_arg0
        mem_copy_val v73, v70
        v74 = asm(ptr: v73) -> ptr { u64, u64 } ptr {
        }
        v75 = const u64 1
        v76 = get_elem_ptr v74, ptr u64, v75
        v77 = load v76
        v78 = asm(size: v77) -> u64 hp, !214 {
            aloc   size, !102
        }
        v79 = const u64 0, !215
        v80 = cmp gt v77 v79, !218
        cbr v80, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !219

        hash_26_write_27_append_28_from_37_block0():
        v81 = get_local ptr slice, __asm_arg1
        mem_copy_val v81, v72
        v82 = asm(ptr: v81) -> ptr { u64, u64 } ptr {
        }
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u64, v83
        v85 = load v84
        v86 = asm(dst: v78, src: v85, len: v77) -> (), !223 {
            mcp    dst src len, !224
        }
        br hash_26_write_27_append_28_from_37_block2(), !225

        hash_26_write_27_append_28_from_37_block2():
        v87 = const u64 0
        v88 = get_elem_ptr v50, ptr u64, v87
        store v78 to v88
        v89 = const u64 1
        v90 = get_elem_ptr v50, ptr u64, v89
        store v77 to v90
        br hash_26_write_27_append_28_block8(), !226

        hash_26_write_27_append_28_block8():
        v91 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v91, v50
        v92 = call ptr_22(v91)
        v93 = asm(ptr: v92, offset: v48, new) -> u64 new, !230 {
            add    new ptr offset, !231
        }
        v94 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v94, v36
        v95 = call ptr_21(v94)
        v96 = asm(dst: v93, src: v95, len: v38) -> (), !234 {
            mcp    dst src len, !111
        }
        store v47 to v42, !236
        br hash_26_write_27_block0(), !237

        hash_26_write_27_block0():
        v97 = get_local ptr b256, __const
        v98 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !238
        v99 = get_local ptr b256, result_buffer, !242
        mem_copy_val v99, v97
        v100 = get_local ptr b256, result_buffer, !244
        v101 = ptr_to_int v98 to u64, !245
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !245
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !246
        v105 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v105, v104
        v106 = call ptr_21(v105)
        v107 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v107, v104
        v108 = call len_20(v107)
        v109 = asm(hash: v100, ptr: v106, bytes: v108) -> ptr b256 hash {
            s256   hash ptr bytes, !247
        }
        v110 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v110, v109
        mem_copy_val __ret_value, v110
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !250 {
        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !251
        v1 = asm(size: v0) -> u64 hp, !258 {
            aloc   size, !102
        }
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr __ret_value, ptr u64, v2, v3, v4
        store v1 to v5
        v6 = const u64 0
        v7 = const u64 0
        v8 = const u64 1
        v9 = get_elem_ptr __ret_value, ptr u64, v6, v7, v8
        v10 = const u64 0, !259
        store v10 to v9
        v11 = const u64 0
        v12 = const u64 1
        v13 = get_elem_ptr __ret_value, ptr u64, v11, v12
        v14 = const u64 0, !260
        store v14 to v13
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !263 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !264
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1042 1058
!8 = fn_call_path_span !6 1042 1056
!9 = span !6 314 323
!10 = (!4 !5 !7 !8 !9)
!11 = (!4 !5 !7 !8)
!12 = (!4 !5 !7 !8)
!13 = span !6 315 318
!14 = (!4 !5 !7 !8 !9)
!15 = (!4 !5 !7 !8)
!16 = (!4 !5 !7 !8)
!17 = (!4 !5 !7 !8)
!18 = span !6 289 334
!19 = (!4 !5 !7 !8 !18)
!20 = (!4 !5 !7 !8)
!21 = span !6 799 968
!22 = fn_name_span !6 802 804
!23 = inline "never"
!24 = (!21 !22 !23)
!25 = span !6 218 232
!26 = span !6 889 891
!27 = span !6 842 962
!28 = span !6 907 926
!29 = span !6 492 714
!30 = fn_name_span !6 499 506
!31 = (!29 !30)
!32 = span !6 582 603
!33 = fn_call_path_span !6 587 594
!34 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!35 = span !34 1815 1933
!36 = (!32 !33 !35)
!37 = (!32 !33 !35)
!38 = (!32 !33 !35)
!39 = span !6 451 469
!40 = fn_call_path_span !6 459 467
!41 = (!32 !33 !39 !40)
!42 = (!32 !33 !39 !40)
!43 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!44 = span !43 329 341
!45 = (!32 !33 !39 !40 !44)
!46 = span !43 1593 1595
!47 = span !43 1573 1595
!48 = fn_call_path_span !43 1590 1592
!49 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!50 = span !49 15515 15529
!51 = fn_call_path_span !49 15520 15522
!52 = (!32 !33 !39 !40 !47 !48 !50 !51)
!53 = span !49 12533 12538
!54 = span !49 15514 15536
!55 = fn_call_path_span !49 15531 15534
!56 = (!32 !33 !39 !40 !47 !48 !54 !55)
!57 = (!32 !33 !39 !40 !47)
!58 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!59 = span !58 2461 2560
!60 = (!32 !33 !39 !40 !59)
!61 = (!32 !33 !39 !40 !59)
!62 = (!32 !33 !39 !40 !59)
!63 = span !43 1610 1621
!64 = (!32 !33 !39 !40 !63)
!65 = (!32 !33 !39 !40 !59)
!66 = (!32 !33 !39 !40 !59)
!67 = (!32 !33 !39 !40 !59)
!68 = (!32 !33 !39 !40 !59)
!69 = (!32 !33 !39 !40)
!70 = span !6 451 478
!71 = fn_call_path_span !6 470 476
!72 = span !58 4973 5075
!73 = (!32 !33 !70 !71 !72)
!74 = (!32 !33 !70 !71)
!75 = span !58 4979 4983
!76 = span !58 4998 5037
!77 = fn_call_path_span !58 4998 5037
!78 = (!32 !33 !70 !71 !76 !77)
!79 = (!32 !33 !70 !71 !76)
!80 = (!32 !33 !70 !71 !75)
!81 = (!32 !33 !70 !71)
!82 = span !58 5009 5020
!83 = (!32 !33 !70 !71 !82)
!84 = span !58 5025 5036
!85 = (!32 !33 !70 !71 !84)
!86 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!87 = span !86 28953 28955
!88 = span !6 435 479
!89 = fn_call_path_span !6 435 450
!90 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!91 = span !90 3133 3150
!92 = fn_call_path_span !90 3133 3144
!93 = span !86 28933 28956
!94 = fn_call_path_span !86 28933 28952
!95 = span !86 4157 4190
!96 = fn_call_path_span !86 4157 4180
!97 = span !86 863 884
!98 = fn_call_path_span !86 863 874
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!100 = span !99 3315 3378
!101 = (!32 !33 !88 !89 !91 !92 !93 !94 !95 !96 !97 !98 !100)
!102 = span !99 3342 3351
!103 = span !86 29065 29077
!104 = (!32 !33 !88 !89 !91 !92 !103)
!105 = span !86 29107 29109
!106 = span !86 29065 29110
!107 = fn_call_path_span !86 29078 29091
!108 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!109 = span !108 5999 6076
!110 = (!32 !33 !88 !89 !91 !92 !106 !107 !109)
!111 = span !108 6050 6065
!112 = (!32 !33 !35)
!113 = span !86 28978 28980
!114 = span !6 576 708
!115 = span !6 618 668
!116 = fn_call_path_span !6 618 668
!117 = (!115 !116)
!118 = span !58 5062 5063
!119 = span !58 5055 5064
!120 = fn_call_path_span !58 5055 5061
!121 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!122 = span !121 757 771
!123 = (!32 !33 !70 !71 !119 !120 !122)
!124 = span !6 636 666
!125 = fn_call_path_span !6 636 649
!126 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!127 = span !126 2370 2383
!128 = (!124 !125 !127)
!129 = (!124 !125)
!130 = span !6 681 698
!131 = fn_call_path_span !6 681 698
!132 = (!130 !131)
!133 = span !86 13771 13819
!134 = fn_name_span !86 13778 13781
!135 = (!133 !134)
!136 = span !86 2506 2514
!137 = span !86 15175 15233
!138 = fn_name_span !86 15182 15185
!139 = (!137 !138)
!140 = span !86 2445 2458
!141 = span !86 978 1030
!142 = fn_name_span !86 985 988
!143 = (!141 !142)
!144 = span !86 400 412
!145 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!146 = span !145 9009 9138
!147 = fn_name_span !145 9016 9022
!148 = (!146 !147 !23)
!149 = span !145 9065 9096
!150 = span !145 9108 9114
!151 = span !145 9101 9115
!152 = fn_call_path_span !145 9103 9107
!153 = (!151 !152)
!154 = span !90 524 536
!155 = (!151 !152 !154)
!156 = span !90 5123 5146
!157 = fn_call_path_span !90 5129 5134
!158 = span !145 142 154
!159 = (!151 !152 !156 !157 !158)
!160 = (!151 !152 !156 !157)
!161 = (!151 !152 !156 !157)
!162 = span !86 18435 18436
!163 = span !145 365 389
!164 = fn_call_path_span !145 376 382
!165 = span !86 18422 18436
!166 = fn_call_path_span !86 18432 18434
!167 = (!151 !152 !156 !157 !163 !164 !165 !166)
!168 = (!151 !152 !156 !157 !163 !164 !165)
!169 = (!151 !152 !156 !157 !163 !164 !136)
!170 = (!151 !152 !156 !157 !163 !164)
!171 = span !86 18572 18573
!172 = span !86 18560 18573
!173 = fn_call_path_span !86 18569 18571
!174 = (!151 !152 !156 !157 !163 !164 !172 !173)
!175 = (!151 !152 !156 !157 !163 !164 !172)
!176 = span !86 18614 18620
!177 = (!151 !152 !156 !157 !163 !164 !176)
!178 = (!151 !152 !156 !157 !163 !164)
!179 = span !86 18657 18677
!180 = fn_call_path_span !86 18666 18667
!181 = (!151 !152 !156 !157 !163 !164 !179 !180)
!182 = (!151 !152 !156 !157 !163 !164)
!183 = (!151 !152 !156 !157 !163 !164 !140)
!184 = span !86 18808 18838
!185 = fn_call_path_span !86 18828 18829
!186 = (!151 !152 !156 !157 !163 !164 !184 !185)
!187 = (!151 !152 !156 !157 !163 !164 !184)
!188 = span !86 18914 18974
!189 = fn_call_path_span !86 18914 18927
!190 = span !99 4168 4185
!191 = fn_call_path_span !99 4178 4179
!192 = (!151 !152 !156 !157 !163 !164 !188 !189 !190 !191)
!193 = (!151 !152 !156 !157 !163 !164 !188 !189 !190)
!194 = span !99 4210 4232
!195 = fn_call_path_span !99 4210 4221
!196 = (!151 !152 !156 !157 !163 !164 !188 !189 !194 !195 !100)
!197 = span !99 4253 4254
!198 = span !99 4245 4254
!199 = fn_call_path_span !99 4251 4252
!200 = (!151 !152 !156 !157 !163 !164 !188 !189 !198 !199)
!201 = (!151 !152 !156 !157 !163 !164 !188 !189 !198)
!202 = span !99 4269 4302
!203 = fn_call_path_span !99 4273 4286
!204 = (!151 !152 !156 !157 !163 !164 !188 !189 !202 !203 !109)
!205 = (!151 !152 !156 !157 !163 !164 !188 !189)
!206 = span !86 18853 19016
!207 = (!151 !152 !156 !157 !163 !164 !206)
!208 = span !86 19055 19064
!209 = (!151 !152 !156 !157 !163 !164 !208)
!210 = span !86 19040 19065
!211 = fn_call_path_span !86 19040 19054
!212 = span !86 2173 2189
!213 = fn_call_path_span !86 2173 2184
!214 = (!151 !152 !156 !157 !163 !164 !210 !211 !212 !213 !100)
!215 = span !86 2208 2209
!216 = span !86 2202 2209
!217 = fn_call_path_span !86 2206 2207
!218 = (!151 !152 !156 !157 !163 !164 !210 !211 !216 !217)
!219 = (!151 !152 !156 !157 !163 !164 !210 !211 !216)
!220 = span !86 2224 2259
!221 = fn_call_path_span !86 2236 2243
!222 = span !108 3447 3522
!223 = (!151 !152 !156 !157 !163 !164 !210 !211 !220 !221 !222)
!224 = span !108 3496 3511
!225 = (!151 !152 !156 !157 !163 !164 !210 !211)
!226 = (!151 !152 !156 !157 !163 !164)
!227 = span !86 19100 19143
!228 = fn_call_path_span !86 19115 19130
!229 = span !108 6721 6825
!230 = (!151 !152 !156 !157 !163 !164 !227 !228 !229)
!231 = span !108 6771 6789
!232 = span !86 19153 19198
!233 = fn_call_path_span !86 19165 19178
!234 = (!151 !152 !156 !157 !163 !164 !232 !233 !109)
!235 = span !86 19244 19263
!236 = (!151 !152 !156 !157 !163 !164 !235)
!237 = (!151 !152 !156 !157 !163 !164)
!238 = span !145 9121 9127
!239 = span !145 9121 9136
!240 = fn_call_path_span !145 9128 9134
!241 = span !145 440 476
!242 = (!239 !240 !241)
!243 = span !145 508 521
!244 = (!239 !240 !243)
!245 = (!239 !240)
!246 = (!239 !240 !158)
!247 = span !145 619 638
!248 = span !145 177 263
!249 = fn_name_span !145 184 187
!250 = (!248 !249)
!251 = span !86 570 571
!252 = span !145 234 246
!253 = fn_call_path_span !145 234 244
!254 = span !86 3079 3094
!255 = fn_call_path_span !86 3079 3092
!256 = span !86 558 572
!257 = fn_call_path_span !86 558 569
!258 = (!252 !253 !254 !255 !256 !257 !100)
!259 = span !86 591 592
!260 = span !86 3113 3114
!261 = span !86 1081 1134
!262 = fn_name_span !86 1088 1096
!263 = (!261 !262)
!264 = span !86 418 426

    [1;32mFinished[0m release [optimized + fuel] target(s) [1.656 KB] in 1.07s
