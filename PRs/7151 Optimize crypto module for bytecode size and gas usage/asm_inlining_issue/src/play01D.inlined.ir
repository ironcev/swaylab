    [1;32mBuilding[0m /home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/
   [1;32mCompiling[0m library [1mstd[0m (/home/kebradalaonda/p/sway/sway-lib-std)
// IR: Initial
library {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
}

// IR: [globals-dce] Dead globals (functions and variables) elimination
library {
}

// IR: Final
library {
}

   [1;32mCompiling[0m script [1mplays[0m (/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue)
// IR: Initial
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        entry():
        v0 = call play_0(), !6
        v1 = const unit ()
        ret () v1
    }

    pub fn play_0() -> (), !10 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_1(), !13
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !14
        store v0 to v1, !14
        v2 = call new_5(), !17
        v3 = get_local ptr { [u8; 64] }, secp256k1, !18
        store v2 to v3, !18
        v4 = get_local ptr { [u8; 64] }, secp256k1, !19
        v5 = load v4
        v6 = get_local ptr { [u8; 64] }, secp256k1, !20
        v7 = load v6
        v8 = call eq_6(v5, v7), !23
        v9 = get_local ptr bool, _, !24
        store v8 to v9, !24
        v10 = get_local ptr { [u8; 64] }, secp256k1, !25
        v11 = load v10
        v12 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v13 = load v12
        v14 = call address_7(v11, v13), !29
        v15 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !30
        store v14 to v15, !30
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        v17 = load v16
        v18 = get_local ptr { { { u64, u64 }, u64 } }, message, !32
        v19 = load v18
        v20 = call address_7(v17, v19), !35
        v21 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !36
        store v20 to v21, !36
        v22 = const unit ()
        ret () v22
    }

    pub fn new_1() -> { { { u64, u64 }, u64 } }, !40 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !43
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !44
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !44
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !48 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_3(), !51
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !52
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !52
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !53
        store v6 to v5, !52
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_3() -> { u64, u64 }, !56 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !57
        v1 = call alloc_bytes_4(v0), !60
        v2 = get_local ptr { u64, u64 }, __anon_0, !61
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !61
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !62
        store v7 to v6, !61
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !64: u64) -> u64, !67 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !68 {
            aloc   size, !69
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !72 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !73
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !74
        store v4 to v3, !73
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !75
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !75
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !76: { [u8; 64] }, other !77: { [u8; 64] }) -> bool, !81 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !82
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !82
        v8 = const u64 64, !83
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !84 {
            meq    result r2 r3 r4, !85
        }
        ret bool v9
    }

    pub fn address_7(self !86: { [u8; 64] }, message !87: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !90 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64 } e
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = call recover_8(self, message), !93
        v1 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !94
        store v0 to v1, !94
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !91
        v5 = load v4
        v6 = const u64 0, !91
        v7 = call eq_15(v5, v6), !97
        cbr v7, block0(), block1(), !95

        block0():
        v8 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v9 = const u64 1
        v10 = const u64 0
        v11 = get_elem_ptr v8, ptr { { { u64, u64 }, u64 } }, v9, v10
        v12 = load v11
        v13 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !98
        store v12 to v13, !98
        v14 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !100
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !100
        v17 = const u64 0, !100
        store v17 to v16, !100
        v18 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !101
        v19 = load v18
        v20 = call sha256_24(v19), !104
        v21 = call from_23(v20), !107
        v22 = const u64 1
        v23 = const u64 0
        v24 = get_elem_ptr v14, ptr { b256 }, v22, v23, !100
        store v21 to v24, !100
        v25 = load v14
        br block5(v25)

        block1():
        v26 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !91
        v29 = load v28
        v30 = const u64 1, !91
        v31 = call eq_15(v29, v30), !110
        cbr v31, block2(), block3(), !108

        block2():
        v32 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v32, ptr { u64 }, v33, v34
        v36 = load v35
        v37 = get_local ptr { u64 }, e, !111
        store v36 to v37, !111
        v38 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !100
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !100
        v41 = const u64 1, !100
        store v41 to v40, !100
        v42 = get_local ptr { u64 }, e, !112
        v43 = load v42
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v38, ptr { u64 }, v44, v45, !100
        store v43 to v46, !100
        v47 = load v38
        br block4(v47)

        block3():
        v48 = const u64 14757395258967588866, !94
        revert v48, !94

        block4(v49: { u64, ( { b256 } | { u64 } ) }):
        br block5(v49)

        block5(v50: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v50
    }

    pub fn recover_8(self !113: { [u8; 64] }, message !114: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !117 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !100
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !100
        v3 = const u64 0, !100
        store v3 to v2, !100
        v4 = call try_into_17(message), !120
        v5 = call unwrap_14(v4), !123
        v6 = call from_9(v5), !126
        v7 = const u64 1
        v8 = const u64 0
        v9 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v7, v8, !100
        store v6 to v9, !100
        v10 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v10
    }

    pub fn from_9(bits !128: b256) -> { { { u64, u64 }, u64 } }, !131 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(bits: b256):
        v0 = call from_10(bits), !134
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !135
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !135
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn from_10(b !136: b256) -> { { u64, u64 }, u64 }, !139 {
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !140
        v1 = call with_capacity_11(v0), !143
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !144
        store v1 to v2, !144
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !145
        v6 = const u64 32, !146
        store v6 to v5, !145
        v7 = ptr_to_int b to u64, !147
        v8 = get_local ptr { { u64, u64 }, u64 }, bytes, !148
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !149
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !150
        v13 = load v12
        v14 = const u64 32, !151
        v15 = call copy_bytes_to_13(v7, v13, v14), !154
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !155
        v17 = load v16
        ret { { u64, u64 }, u64 } v17
    }

    pub fn with_capacity_11(capacity !156: u64) -> { { u64, u64 }, u64 }, !159 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_12(capacity), !162
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !163
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !163
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !164
        store v6 to v5, !163
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_12(capacity !165: u64) -> { u64, u64 }, !168 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_4(capacity), !171
        v1 = get_local ptr { u64, u64 }, __anon_0, !172
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !172
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !172
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !174: u64, dst !175: u64, count !176: u64) -> (), !179 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !180 {
            mcp    dst src len, !181
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !183: { u64, ( () | b256 ) }) -> b256, !186 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !187
        store self to v0, !187
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !188
        v4 = load v3
        v5 = const u64 1, !188
        v6 = call eq_15(v4, v5), !191
        cbr v6, block0(), block1(), !189

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !192
        store v11 to v12, !192
        v13 = get_local ptr b256, inner_value, !193
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !194
        v16 = call revert_16(v15), !197
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn eq_15(self !199: u64, other !200: u64) -> bool, !203 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !205: u64) -> never, !208 {
        entry(code: u64):
        revert code, !209
    }

    pub fn try_into_17(self !210: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !213 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !214
        v4 = load v3
        v5 = call len_20(v4), !217
        v6 = const u64 32, !218
        v7 = call neq_18(v5, v6), !221
        cbr v7, block0(), block1(), !219

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !222
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !222
        v11 = const u64 0, !222
        store v11 to v10, !222
        v12 = load v8
        ret { u64, ( () | b256 ) } v12, !223

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !222
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !222
        v18 = const u64 1, !222
        store v18 to v17, !222
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !214
        v23 = load v22
        v24 = call ptr_21(v23), !226
        v25 = asm(bits: v24) -> b256 bits, !227 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !222
        store v25 to v28, !222
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !228: u64, other !229: u64) -> bool, !232 {
        entry(self: u64, other: u64):
        v0 = call eq_15(self, other), !235
        v1 = call not_19(v0), !238
        ret bool v1
    }

    pub fn not_19(self !239: bool) -> bool, !242 {
        entry(self: bool):
        v0 = const bool false, !243
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !244: { { u64, u64 }, u64 }) -> u64, !247 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !248
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !249: { { u64, u64 }, u64 }) -> u64, !252 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !149
        v4 = load v3
        v5 = call ptr_22(v4), !255
        ret u64 v5
    }

    pub fn ptr_22(self !256: { u64, u64 }) -> u64, !259 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !150
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !261: b256) -> { b256 }, !264 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !265
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !265
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !267: { { { u64, u64 }, u64 } }) -> b256, !271 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !274
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !275
        store v0 to v1, !275
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !276
        v3 = call hash_26(s, v2), !279
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !280
        v5 = load v4
        v6 = call sha256_43(v5), !283
        ret b256 v6
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !286 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !289
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !290
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !290
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn hash_26(self !291: { { { u64, u64 }, u64 } }, state !292: ptr { { { u64, u64 }, u64 } }) -> (), !295 {
        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !296
        v4 = load v3
        v5 = call write_27(state, v4), !299
        v6 = const unit ()
        ret () v6
    }

    pub fn write_27(self !300: ptr { { { u64, u64 }, u64 } }, bytes !301: { { u64, u64 }, u64 }) -> (), !304 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !305
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !308
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !309: ptr { { u64, u64 }, u64 }, other !310: ptr { { u64, u64 }, u64 }) -> (), !313 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !316
        v2 = get_local ptr u64, other_len, !317
        store v1 to v2, !317
        v3 = get_local ptr u64, other_len, !318
        v4 = load v3
        v5 = const u64 0, !319
        v6 = call eq_15(v4, v5), !322
        cbr v6, block0(), block1(), !320

        block0():
        v7 = const unit (), !323
        ret () v7, !323

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !248
        v12 = load v11
        v13 = const u64 0, !324
        v14 = call eq_15(v12, v13), !327
        cbr v14, block3(), block4(), !325

        block3():
        v15 = load other
        store v15 to self, !328
        v16 = const unit (), !329
        ret () v16, !329

        block4():
        v17 = const unit ()
        br block5(v17)

        block5(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr self, ptr u64, v19, !248
        v21 = load v20
        v22 = get_local ptr u64, other_len, !330
        v23 = load v22
        v24 = call add_29(v21, v23), !333
        v25 = get_local ptr u64, both_len, !334
        store v24 to v25, !334
        v26 = const u64 1
        v27 = get_elem_ptr self, ptr u64, v26, !248
        v28 = load v27
        v29 = get_local ptr u64, other_start, !335
        store v28 to v29, !335
        v30 = const u64 0
        v31 = get_elem_ptr self, ptr { u64, u64 }, v30, !149
        v32 = load v31
        v33 = call capacity_31(v32), !338
        v34 = get_local ptr u64, both_len, !339
        v35 = load v34
        v36 = call lt_30(v33, v35), !342
        cbr v36, block6(), block7(), !340

        block6():
        v37 = const u64 0
        v38 = get_elem_ptr self, ptr { u64, u64 }, v37, !149
        v39 = load v38
        v40 = call ptr_22(v39), !345
        v41 = const u64 0
        v42 = get_elem_ptr self, ptr { u64, u64 }, v41, !149
        v43 = load v42
        v44 = call capacity_31(v43), !348
        v45 = get_local ptr u64, both_len, !349
        v46 = load v45
        v47 = call realloc_bytes_35(v40, v44, v46), !352
        v48 = get_local ptr u64, both_len, !353
        v49 = load v48
        v50 = call from_parts_32(v47, v49), !356
        v51 = get_local ptr slice, new_slice, !357
        store v50 to v51, !357
        v52 = get_local ptr slice, new_slice, !358
        v53 = load v52
        v54 = call from_37(v53), !361
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !362
        store v54 to v56, !362
        v57 = const unit ()
        br block8(v57)

        block7():
        v58 = const unit ()
        br block8(v58)

        block8(v59: ()):
        v60 = const u64 0
        v61 = get_elem_ptr self, ptr { u64, u64 }, v60, !149
        v62 = load v61
        v63 = call ptr_22(v62), !365
        v64 = get_local ptr u64, other_start, !366
        v65 = load v64
        v66 = call add_uint_offset_42(v63, v65), !369
        v67 = get_local ptr u64, new_ptr, !370
        store v66 to v67, !370
        v68 = load other
        v69 = call ptr_21(v68), !373
        v70 = get_local ptr u64, new_ptr, !374
        v71 = load v70
        v72 = get_local ptr u64, other_len, !375
        v73 = load v72
        v74 = call copy_bytes_to_13(v69, v71, v73), !378
        v75 = get_local ptr u64, both_len, !379
        v76 = load v75
        v77 = const u64 1
        v78 = get_elem_ptr self, ptr u64, v77, !380
        store v76 to v78, !380
        v79 = const unit ()
        ret () v79
    }

    pub fn add_29(self !381: u64, other !382: u64) -> u64, !385 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !386: u64, other !387: u64) -> bool, !390 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !391: { u64, u64 }) -> u64, !394 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !395
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !397: u64, count !398: u64) -> slice, !401 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !404
        v2 = get_local ptr { u64, u64 }, __anon_0, !405
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !405
        store ptr to v4, !405
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !405
        store v1 to v6, !405
        v7 = load v2
        v8 = call from_parts_33(v7), !408
        ret slice v8
    }

    fn from_parts_33(parts !409: { u64, u64 }) -> slice, !412 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !413 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !414: u64, other !415: u64) -> u64, !418 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !419: u64, count !420: u64, new_count !421: u64) -> u64, !424 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !427
        cbr v0, block0(), block4(), !425

        block0():
        v1 = call alloc_bytes_4(new_count), !430
        v2 = get_local ptr u64, new_ptr, !431
        store v1 to v2, !431
        v3 = const u64 0, !432
        v4 = call gt_36(count, v3), !435
        cbr v4, block1(), block2(), !433

        block1():
        v5 = get_local ptr u64, new_ptr, !436
        v6 = load v5
        v7 = call copy_bytes_to_13(ptr, v6, count), !439
        v8 = const unit ()
        br block3(v8)

        block2():
        v9 = const unit ()
        br block3(v9)

        block3(v10: ()):
        v11 = get_local ptr u64, new_ptr, !440
        v12 = load v11
        br block5(v12)

        block4():
        br block5(ptr)

        block5(v13: u64):
        ret u64 v13
    }

    pub fn gt_36(self !441: u64, other !442: u64) -> bool, !445 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !446: slice) -> { u64, u64 }, !449 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_38(slice), !452
        v1 = get_local ptr u64, cap, !453
        store v0 to v1, !453
        v2 = get_local ptr u64, cap, !454
        v3 = load v2
        v4 = call alloc_bytes_4(v3), !457
        v5 = get_local ptr u64, ptr, !458
        store v4 to v5, !458
        v6 = get_local ptr u64, cap, !459
        v7 = load v6
        v8 = const u64 0, !460
        v9 = call gt_36(v7, v8), !463
        cbr v9, block0(), block1(), !461

        block0():
        v10 = call ptr_41(slice), !466
        v11 = get_local ptr u64, ptr, !467
        v12 = load v11
        v13 = get_local ptr u64, cap, !468
        v14 = load v13
        v15 = call copy_to_40(v10, v12, v14), !471
        v16 = const unit ()
        br block2(v16)

        block1():
        v17 = const unit ()
        br block2(v17)

        block2(v18: ()):
        v19 = get_local ptr u64, ptr, !472
        v20 = load v19
        v21 = get_local ptr u64, cap, !473
        v22 = load v21
        v23 = get_local ptr { u64, u64 }, __anon_0, !474
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24
        store v20 to v25, !474
        v26 = const u64 1
        v27 = get_elem_ptr v23, ptr u64, v26
        store v22 to v27, !474
        v28 = load v23
        ret { u64, u64 } v28
    }

    pub fn number_of_bytes_38(self !475: slice) -> u64, !478 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !481
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !482
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !483: slice) -> { u64, u64 }, !486 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !487 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !488: u64, dst !489: u64, count !490: u64) -> (), !493 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !496
        v2 = get_local ptr u64, len, !497
        store v1 to v2, !497
        v3 = get_local ptr u64, len, !498
        v4 = load v3
        v5 = asm(dst: dst, src: self, len: v4) -> (), !499 {
            mcp    dst src len, !500
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn ptr_41(self !501: slice) -> u64, !504 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !507
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !508
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !509: u64, offset !510: u64) -> u64, !513 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !514 {
            add    new ptr offset, !515
        }
        ret u64 v0
    }

    pub fn sha256_43(self !516: { { { u64, u64 }, u64 } }) -> b256, !519 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_44(), !522
        v1 = get_local ptr b256, result_buffer, !523
        store v0 to v1, !523
        v2 = get_local ptr b256, result_buffer, !524
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !305
        v7 = load v6
        v8 = call ptr_21(v7), !527
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !305
        v13 = load v12
        v14 = call len_20(v13), !530
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !531 {
            s256   hash ptr bytes, !532
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !536 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !537
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = (!4 !5)
!7 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!8 = span !7 972 1177
!9 = fn_name_span !7 979 983
!10 = (!8 !9)
!11 = span !7 1006 1020
!12 = fn_call_path_span !7 1006 1018
!13 = (!11 !12)
!14 = span !7 992 1021
!15 = span !7 1042 1058
!16 = fn_call_path_span !7 1042 1056
!17 = (!15 !16)
!18 = span !7 1026 1059
!19 = span !7 1072 1081
!20 = span !7 1085 1094
!21 = span !7 1072 1094
!22 = fn_call_path_span !7 1082 1084
!23 = (!21 !22)
!24 = span !7 1064 1095
!25 = span !7 1108 1117
!26 = span !7 1126 1133
!27 = span !7 1108 1134
!28 = fn_call_path_span !7 1118 1125
!29 = (!27 !28)
!30 = span !7 1100 1135
!31 = span !7 1148 1157
!32 = span !7 1166 1173
!33 = span !7 1148 1174
!34 = fn_call_path_span !7 1158 1165
!35 = (!33 !34)
!36 = span !7 1140 1175
!37 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!38 = span !37 718 804
!39 = fn_name_span !37 725 728
!40 = (!38 !39)
!41 = span !37 775 787
!42 = fn_call_path_span !37 775 785
!43 = (!41 !42)
!44 = span !37 749 798
!45 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!46 = span !45 3024 3131
!47 = fn_name_span !45 3031 3034
!48 = (!46 !47)
!49 = span !45 3079 3094
!50 = fn_call_path_span !45 3079 3092
!51 = (!49 !50)
!52 = span !45 3055 3125
!53 = span !45 3113 3114
!54 = span !45 503 609
!55 = fn_name_span !45 510 513
!56 = (!54 !55)
!57 = span !45 570 571
!58 = span !45 558 572
!59 = fn_call_path_span !45 558 569
!60 = (!58 !59)
!61 = span !45 534 603
!62 = span !45 591 592
!63 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!64 = span !63 3286 3291
!65 = span !63 3267 3380
!66 = fn_name_span !63 3274 3285
!67 = (!65 !66)
!68 = span !63 3315 3378
!69 = span !63 3342 3351
!70 = span !7 258 340
!71 = fn_name_span !7 265 268
!72 = (!70 !71)
!73 = span !7 314 323
!74 = span !7 315 318
!75 = span !7 289 334
!76 = span !7 805 809
!77 = span !7 811 816
!78 = span !7 799 968
!79 = fn_name_span !7 802 804
!80 = inline "always"
!81 = (!78 !79 !80)
!82 = span !7 218 232
!83 = span !7 889 891
!84 = span !7 842 962
!85 = span !7 907 926
!86 = span !7 507 511
!87 = span !7 513 520
!88 = span !7 492 714
!89 = fn_name_span !7 499 506
!90 = (!88 !89)
!91 = span !7 582 603
!92 = fn_call_path_span !7 587 594
!93 = (!91 !92)
!94 = span !7 576 708
!95 = span !7 618 668
!96 = fn_call_path_span !7 618 668
!97 = (!95 !96)
!98 = span !7 621 628
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!100 = span !99 1815 1933
!101 = span !7 657 664
!102 = span !7 650 665
!103 = fn_call_path_span !7 650 656
!104 = (!102 !103)
!105 = span !7 636 666
!106 = fn_call_path_span !7 636 649
!107 = (!105 !106)
!108 = span !7 681 698
!109 = fn_call_path_span !7 681 698
!110 = (!108 !109)
!111 = span !7 685 686
!112 = span !7 695 696
!113 = span !7 361 365
!114 = span !7 367 374
!115 = span !7 346 486
!116 = fn_name_span !7 353 360
!117 = (!115 !116)
!118 = span !7 451 469
!119 = fn_call_path_span !7 459 467
!120 = (!118 !119)
!121 = span !7 451 478
!122 = fn_call_path_span !7 470 476
!123 = (!121 !122)
!124 = span !7 435 479
!125 = fn_call_path_span !7 435 450
!126 = (!124 !125)
!127 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!128 = span !127 3077 3081
!129 = span !127 3069 3167
!130 = fn_name_span !127 3072 3076
!131 = (!129 !130)
!132 = span !127 3133 3150
!133 = fn_call_path_span !127 3133 3144
!134 = (!132 !133)
!135 = span !127 3107 3161
!136 = span !45 28831 28832
!137 = span !45 28823 29132
!138 = fn_name_span !45 28826 28830
!139 = (!137 !138)
!140 = span !45 28953 28955
!141 = span !45 28933 28956
!142 = fn_call_path_span !45 28933 28952
!143 = (!141 !142)
!144 = span !45 28917 28957
!145 = span !45 28966 28980
!146 = span !45 28978 28980
!147 = span !45 29065 29077
!148 = span !45 29092 29097
!149 = span !45 2445 2458
!150 = span !45 400 412
!151 = span !45 29107 29109
!152 = span !45 29065 29110
!153 = fn_call_path_span !45 29078 29091
!154 = (!152 !153)
!155 = span !45 29121 29126
!156 = span !45 4100 4108
!157 = span !45 4079 4227
!158 = fn_name_span !45 4086 4099
!159 = (!157 !158)
!160 = span !45 4157 4190
!161 = fn_call_path_span !45 4157 4180
!162 = (!160 !161)
!163 = span !45 4133 4221
!164 = span !45 4209 4210
!165 = span !45 806 814
!166 = span !45 785 928
!167 = fn_name_span !45 792 805
!168 = (!166 !167)
!169 = span !45 863 884
!170 = fn_call_path_span !45 863 874
!171 = (!169 !170)
!172 = span !45 839 922
!173 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!174 = span !173 5960 5964
!175 = span !173 5966 5969
!176 = span !173 5977 5982
!177 = span !173 5939 6083
!178 = fn_name_span !173 5946 5959
!179 = (!177 !178)
!180 = span !173 5999 6076
!181 = span !173 6050 6065
!182 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!183 = span !182 4952 4956
!184 = span !182 4938 5081
!185 = fn_name_span !182 4945 4951
!186 = (!184 !185)
!187 = span !182 4973 5075
!188 = span !182 4979 4983
!189 = span !182 4998 5037
!190 = fn_call_path_span !182 4998 5037
!191 = (!189 !190)
!192 = span !182 5009 5020
!193 = span !182 5025 5036
!194 = span !182 5062 5063
!195 = span !182 5055 5064
!196 = fn_call_path_span !182 5055 5061
!197 = (!195 !196)
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!199 = span !198 16751 16755
!200 = span !198 16757 16762
!201 = span !198 16745 16811
!202 = fn_name_span !198 16748 16750
!203 = (!201 !202)
!204 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!205 = span !204 735 739
!206 = span !204 721 773
!207 = fn_name_span !204 728 734
!208 = (!206 !207)
!209 = span !204 757 771
!210 = span !37 1538 1542
!211 = span !37 1526 1716
!212 = fn_name_span !37 1529 1537
!213 = (!211 !212)
!214 = span !37 329 341
!215 = span !37 1573 1589
!216 = fn_call_path_span !37 1584 1587
!217 = (!215 !216)
!218 = span !37 1593 1595
!219 = span !37 1573 1595
!220 = fn_call_path_span !37 1590 1592
!221 = (!219 !220)
!222 = span !182 2461 2560
!223 = span !37 1610 1621
!224 = span !37 1657 1673
!225 = fn_call_path_span !37 1668 1671
!226 = (!224 !225)
!227 = span !37 1647 1709
!228 = span !198 15477 15481
!229 = span !198 15483 15488
!230 = span !198 15470 15542
!231 = fn_name_span !198 15473 15476
!232 = (!230 !231)
!233 = span !198 15515 15529
!234 = fn_call_path_span !198 15520 15522
!235 = (!233 !234)
!236 = span !198 15514 15536
!237 = fn_call_path_span !198 15531 15534
!238 = (!236 !237)
!239 = span !198 12498 12502
!240 = span !198 12491 12545
!241 = fn_name_span !198 12494 12497
!242 = (!240 !241)
!243 = span !198 12533 12538
!244 = span !45 13782 13786
!245 = span !45 13771 13819
!246 = fn_name_span !45 13778 13781
!247 = (!245 !246)
!248 = span !45 2506 2514
!249 = span !45 15186 15190
!250 = span !45 15175 15233
!251 = fn_name_span !45 15182 15185
!252 = (!250 !251)
!253 = span !45 15213 15227
!254 = fn_call_path_span !45 15222 15225
!255 = (!253 !254)
!256 = span !45 989 993
!257 = span !45 978 1030
!258 = fn_name_span !45 985 988
!259 = (!257 !258)
!260 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!261 = span !260 2340 2344
!262 = span !260 2332 2389
!263 = fn_name_span !260 2335 2339
!264 = (!262 !263)
!265 = span !260 2370 2383
!266 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!267 = span !266 9026 9027
!268 = span !266 9009 9138
!269 = fn_name_span !266 9016 9022
!270 = inline "never"
!271 = (!268 !269 !270)
!272 = span !266 9082 9095
!273 = fn_call_path_span !266 9082 9093
!274 = (!272 !273)
!275 = span !266 9065 9096
!276 = span !266 9108 9114
!277 = span !266 9101 9115
!278 = fn_call_path_span !266 9103 9107
!279 = (!277 !278)
!280 = span !266 9121 9127
!281 = span !266 9121 9136
!282 = fn_call_path_span !266 9128 9134
!283 = (!281 !282)
!284 = span !266 177 263
!285 = fn_name_span !266 184 187
!286 = (!284 !285)
!287 = span !266 234 246
!288 = fn_call_path_span !266 234 244
!289 = (!287 !288)
!290 = span !266 208 257
!291 = span !127 5084 5088
!292 = span !127 5098 5103
!293 = span !127 5076 5153
!294 = fn_name_span !127 5079 5083
!295 = (!293 !294)
!296 = span !127 524 536
!297 = span !127 5123 5146
!298 = fn_call_path_span !127 5129 5134
!299 = (!297 !298)
!300 = span !266 335 339
!301 = span !266 341 346
!302 = span !266 314 396
!303 = fn_name_span !266 321 326
!304 = (!302 !303)
!305 = span !266 142 154
!306 = span !266 365 389
!307 = fn_call_path_span !266 376 382
!308 = (!306 !307)
!309 = span !45 18345 18349
!310 = span !45 18359 18364
!311 = span !45 18323 19270
!312 = fn_name_span !45 18330 18336
!313 = (!311 !312)
!314 = span !45 18398 18409
!315 = fn_call_path_span !45 18404 18407
!316 = (!314 !315)
!317 = span !45 18382 18410
!318 = span !45 18422 18431
!319 = span !45 18435 18436
!320 = span !45 18422 18436
!321 = fn_call_path_span !45 18432 18434
!322 = (!320 !321)
!323 = span !45 18451 18457
!324 = span !45 18572 18573
!325 = span !45 18560 18573
!326 = fn_call_path_span !45 18569 18571
!327 = (!325 !326)
!328 = span !45 18588 18600
!329 = span !45 18614 18620
!330 = span !45 18668 18677
!331 = span !45 18657 18677
!332 = fn_call_path_span !45 18666 18667
!333 = (!331 !332)
!334 = span !45 18642 18678
!335 = span !45 18687 18714
!336 = span !45 18808 18827
!337 = fn_call_path_span !45 18817 18825
!338 = (!336 !337)
!339 = span !45 18830 18838
!340 = span !45 18808 18838
!341 = fn_call_path_span !45 18828 18829
!342 = (!340 !341)
!343 = span !45 18928 18942
!344 = fn_call_path_span !45 18937 18940
!345 = (!343 !344)
!346 = span !45 18944 18963
!347 = fn_call_path_span !45 18953 18961
!348 = (!346 !347)
!349 = span !45 18965 18973
!350 = span !45 18914 18974
!351 = fn_call_path_span !45 18914 18927
!352 = (!350 !351)
!353 = span !45 18992 19000
!354 = span !45 18869 19015
!355 = fn_call_path_span !45 18869 18890
!356 = (!354 !355)
!357 = span !45 18853 19016
!358 = span !45 19055 19064
!359 = span !45 19040 19065
!360 = fn_call_path_span !45 19040 19054
!361 = (!359 !360)
!362 = span !45 19029 19065
!363 = span !45 19100 19114
!364 = fn_call_path_span !45 19109 19112
!365 = (!363 !364)
!366 = span !45 19131 19142
!367 = span !45 19100 19143
!368 = fn_call_path_span !45 19115 19130
!369 = (!367 !368)
!370 = span !45 19086 19144
!371 = span !45 19153 19164
!372 = fn_call_path_span !45 19159 19162
!373 = (!371 !372)
!374 = span !45 19179 19186
!375 = span !45 19188 19197
!376 = span !45 19153 19198
!377 = fn_call_path_span !45 19165 19178
!378 = (!376 !377)
!379 = span !45 19255 19263
!380 = span !45 19244 19263
!381 = span !198 1239 1243
!382 = span !198 1245 1250
!383 = span !198 1232 1300
!384 = fn_name_span !198 1235 1238
!385 = (!383 !384)
!386 = span !198 20651 20655
!387 = span !198 20657 20662
!388 = span !198 20645 20711
!389 = fn_name_span !198 20648 20650
!390 = (!388 !389)
!391 = span !45 1097 1101
!392 = span !45 1081 1134
!393 = fn_name_span !45 1088 1096
!394 = (!392 !393)
!395 = span !45 418 426
!396 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!397 = span !396 2307 2310
!398 = span !396 2321 2326
!399 = span !396 2286 2400
!400 = fn_name_span !396 2293 2303
!401 = (!399 !400)
!402 = span !396 2368 2392
!403 = fn_call_path_span !396 2374 2375
!404 = (!402 !403)
!405 = span !396 2362 2393
!406 = span !396 2351 2394
!407 = fn_call_path_span !396 2351 2361
!408 = (!406 !407)
!409 = span !396 1206 1211
!410 = span !396 1192 1296
!411 = fn_name_span !396 1195 1205
!412 = (!410 !411)
!413 = span !396 1248 1294
!414 = span !198 6993 6997
!415 = span !198 6999 7004
!416 = span !198 6981 7054
!417 = fn_name_span !198 6984 6992
!418 = (!416 !417)
!419 = span !63 4106 4109
!420 = span !63 4120 4125
!421 = span !63 4132 4141
!422 = span !63 4085 4362
!423 = fn_name_span !63 4092 4105
!424 = (!422 !423)
!425 = span !63 4168 4185
!426 = fn_call_path_span !63 4178 4179
!427 = (!425 !426)
!428 = span !63 4210 4232
!429 = fn_call_path_span !63 4210 4221
!430 = (!428 !429)
!431 = span !63 4196 4233
!432 = span !63 4253 4254
!433 = span !63 4245 4254
!434 = fn_call_path_span !63 4251 4252
!435 = (!433 !434)
!436 = span !63 4287 4294
!437 = span !63 4269 4302
!438 = fn_call_path_span !63 4273 4286
!439 = (!437 !438)
!440 = span !63 4322 4329
!441 = span !198 20580 20584
!442 = span !198 20586 20591
!443 = span !198 20574 20640
!444 = fn_name_span !198 20577 20579
!445 = (!443 !444)
!446 = span !45 2084 2089
!447 = span !45 2076 2302
!448 = fn_name_span !45 2079 2083
!449 = (!447 !448)
!450 = span !45 2130 2153
!451 = fn_call_path_span !45 2136 2151
!452 = (!450 !451)
!453 = span !45 2120 2154
!454 = span !45 2185 2188
!455 = span !45 2173 2189
!456 = fn_call_path_span !45 2173 2184
!457 = (!455 !456)
!458 = span !45 2163 2190
!459 = span !45 2202 2205
!460 = span !45 2208 2209
!461 = span !45 2202 2209
!462 = fn_call_path_span !45 2206 2207
!463 = (!461 !462)
!464 = span !45 2224 2235
!465 = fn_call_path_span !45 2230 2233
!466 = (!464 !465)
!467 = span !45 2250 2253
!468 = span !45 2255 2258
!469 = span !45 2224 2259
!470 = fn_call_path_span !45 2236 2243
!471 = (!469 !470)
!472 = span !45 2286 2289
!473 = span !45 2291 2294
!474 = span !45 2279 2296
!475 = span !396 3936 3940
!476 = span !396 3913 3983
!477 = fn_name_span !396 3920 3935
!478 = (!476 !477)
!479 = span !396 3959 3975
!480 = fn_call_path_span !396 3959 3969
!481 = (!479 !480)
!482 = span !396 3976 3977
!483 = span !396 1582 1587
!484 = span !396 1568 1677
!485 = fn_name_span !396 1571 1581
!486 = (!484 !485)
!487 = span !396 1624 1675
!488 = span !173 3364 3368
!489 = span !173 3370 3373
!490 = span !173 3381 3386
!491 = span !173 3346 3529
!492 = fn_name_span !173 3353 3360
!493 = (!491 !492)
!494 = span !173 3413 3437
!495 = fn_call_path_span !173 3419 3420
!496 = (!494 !495)
!497 = span !173 3403 3438
!498 = span !173 3477 3480
!499 = span !173 3447 3522
!500 = span !173 3496 3511
!501 = span !396 2884 2888
!502 = span !396 2873 2935
!503 = fn_name_span !396 2880 2883
!504 = (!502 !503)
!505 = span !396 2911 2927
!506 = fn_call_path_span !396 2911 2921
!507 = (!505 !506)
!508 = span !396 2928 2929
!509 = span !173 6684 6688
!510 = span !173 6690 6696
!511 = span !173 6661 6831
!512 = fn_name_span !173 6668 6683
!513 = (!511 !512)
!514 = span !173 6721 6825
!515 = span !173 6771 6789
!516 = span !266 416 420
!517 = span !266 402 678
!518 = fn_name_span !266 409 415
!519 = (!517 !518)
!520 = span !266 464 475
!521 = fn_call_path_span !266 464 473
!522 = (!520 !521)
!523 = span !266 440 476
!524 = span !266 508 521
!525 = span !266 540 556
!526 = fn_call_path_span !266 551 554
!527 = (!525 !526)
!528 = span !266 577 593
!529 = fn_call_path_span !266 588 591
!530 = (!528 !529)
!531 = span !266 485 672
!532 = span !266 619 638
!533 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!534 = span !533 7873 7976
!535 = fn_name_span !533 7880 7883
!536 = (!534 !535)
!537 = span !533 7904 7970

// IR: [mem2reg] Promotion of memory to SSA registers
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        entry():
        v0 = call play_0(), !6
        v1 = const unit ()
        ret () v1
    }

    pub fn play_0() -> (), !10 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_1(), !13
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !14
        store v0 to v1, !14
        v2 = call new_5(), !17
        v3 = get_local ptr { [u8; 64] }, secp256k1, !18
        store v2 to v3, !18
        v4 = get_local ptr { [u8; 64] }, secp256k1, !19
        v5 = load v4
        v6 = get_local ptr { [u8; 64] }, secp256k1, !20
        v7 = load v6
        v8 = call eq_6(v5, v7), !23
        v9 = get_local ptr bool, _, !24
        v10 = get_local ptr { [u8; 64] }, secp256k1, !25
        v11 = load v10
        v12 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v13 = load v12
        v14 = call address_7(v11, v13), !29
        v15 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !30
        store v14 to v15, !30
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        v17 = load v16
        v18 = get_local ptr { { { u64, u64 }, u64 } }, message, !32
        v19 = load v18
        v20 = call address_7(v17, v19), !35
        v21 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !36
        store v20 to v21, !36
        v22 = const unit ()
        ret () v22
    }

    pub fn new_1() -> { { { u64, u64 }, u64 } }, !40 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !43
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !44
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !44
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !48 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_3(), !51
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !52
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !52
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !53
        store v6 to v5, !52
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_3() -> { u64, u64 }, !56 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !57
        v1 = call alloc_bytes_4(v0), !60
        v2 = get_local ptr { u64, u64 }, __anon_0, !61
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !61
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !62
        store v7 to v6, !61
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !64: u64) -> u64, !67 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !68 {
            aloc   size, !69
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !72 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !73
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !74
        store v4 to v3, !73
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !75
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !75
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !76: { [u8; 64] }, other !77: { [u8; 64] }) -> bool, !81 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !82
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !82
        v8 = const u64 64, !83
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !84 {
            meq    result r2 r3 r4, !85
        }
        ret bool v9
    }

    pub fn address_7(self !86: { [u8; 64] }, message !87: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !90 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64 } e
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = call recover_8(self, message), !93
        v1 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !94
        store v0 to v1, !94
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !91
        v5 = load v4
        v6 = const u64 0, !91
        v7 = call eq_15(v5, v6), !97
        cbr v7, block0(), block1(), !95

        block0():
        v8 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v9 = const u64 1
        v10 = const u64 0
        v11 = get_elem_ptr v8, ptr { { { u64, u64 }, u64 } }, v9, v10
        v12 = load v11
        v13 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !98
        store v12 to v13, !98
        v14 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !100
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !100
        v17 = const u64 0, !100
        store v17 to v16, !100
        v18 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !101
        v19 = load v18
        v20 = call sha256_24(v19), !104
        v21 = call from_23(v20), !107
        v22 = const u64 1
        v23 = const u64 0
        v24 = get_elem_ptr v14, ptr { b256 }, v22, v23, !100
        store v21 to v24, !100
        v25 = load v14
        br block5(v25)

        block1():
        v26 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !91
        v29 = load v28
        v30 = const u64 1, !91
        v31 = call eq_15(v29, v30), !110
        cbr v31, block2(), block3(), !108

        block2():
        v32 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !91
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v32, ptr { u64 }, v33, v34
        v36 = load v35
        v37 = get_local ptr { u64 }, e, !111
        store v36 to v37, !111
        v38 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !100
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !100
        v41 = const u64 1, !100
        store v41 to v40, !100
        v42 = get_local ptr { u64 }, e, !112
        v43 = load v42
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v38, ptr { u64 }, v44, v45, !100
        store v43 to v46, !100
        v47 = load v38
        br block4(v47)

        block3():
        v48 = const u64 14757395258967588866, !94
        revert v48, !94

        block4(v49: { u64, ( { b256 } | { u64 } ) }):
        br block5(v49)

        block5(v50: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v50
    }

    pub fn recover_8(self !113: { [u8; 64] }, message !114: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !117 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !100
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !100
        v3 = const u64 0, !100
        store v3 to v2, !100
        v4 = call try_into_17(message), !120
        v5 = call unwrap_14(v4), !123
        v6 = call from_9(v5), !126
        v7 = const u64 1
        v8 = const u64 0
        v9 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v7, v8, !100
        store v6 to v9, !100
        v10 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v10
    }

    pub fn from_9(bits !128: b256) -> { { { u64, u64 }, u64 } }, !131 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(bits: b256):
        v0 = call from_10(bits), !134
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !135
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !135
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn from_10(b !136: b256) -> { { u64, u64 }, u64 }, !139 {
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !140
        v1 = call with_capacity_11(v0), !143
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !144
        store v1 to v2, !144
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !145
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !145
        v6 = const u64 32, !146
        store v6 to v5, !145
        v7 = ptr_to_int b to u64, !147
        v8 = get_local ptr { { u64, u64 }, u64 }, bytes, !148
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !149
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !150
        v13 = load v12
        v14 = const u64 32, !151
        v15 = call copy_bytes_to_13(v7, v13, v14), !154
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !155
        v17 = load v16
        ret { { u64, u64 }, u64 } v17
    }

    pub fn with_capacity_11(capacity !156: u64) -> { { u64, u64 }, u64 }, !159 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_12(capacity), !162
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !163
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !163
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !164
        store v6 to v5, !163
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_12(capacity !165: u64) -> { u64, u64 }, !168 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_4(capacity), !171
        v1 = get_local ptr { u64, u64 }, __anon_0, !172
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !172
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !172
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !174: u64, dst !175: u64, count !176: u64) -> (), !179 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !180 {
            mcp    dst src len, !181
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !183: { u64, ( () | b256 ) }) -> b256, !186 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !187
        store self to v0, !187
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !188
        v4 = load v3
        v5 = const u64 1, !188
        v6 = call eq_15(v4, v5), !191
        cbr v6, block0(), block1(), !189

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !192
        store v11 to v12, !192
        v13 = get_local ptr b256, inner_value, !193
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !194
        v16 = call revert_16(v15), !197
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn eq_15(self !199: u64, other !200: u64) -> bool, !203 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !205: u64) -> never, !208 {
        entry(code: u64):
        revert code, !209
    }

    pub fn try_into_17(self !210: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !213 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !214
        v4 = load v3
        v5 = call len_20(v4), !217
        v6 = const u64 32, !218
        v7 = call neq_18(v5, v6), !221
        cbr v7, block0(), block1(), !219

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !222
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !222
        v11 = const u64 0, !222
        store v11 to v10, !222
        v12 = load v8
        ret { u64, ( () | b256 ) } v12, !223

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !222
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !222
        v18 = const u64 1, !222
        store v18 to v17, !222
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !214
        v23 = load v22
        v24 = call ptr_21(v23), !226
        v25 = asm(bits: v24) -> b256 bits, !227 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !222
        store v25 to v28, !222
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !228: u64, other !229: u64) -> bool, !232 {
        entry(self: u64, other: u64):
        v0 = call eq_15(self, other), !235
        v1 = call not_19(v0), !238
        ret bool v1
    }

    pub fn not_19(self !239: bool) -> bool, !242 {
        entry(self: bool):
        v0 = const bool false, !243
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !244: { { u64, u64 }, u64 }) -> u64, !247 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !248
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !249: { { u64, u64 }, u64 }) -> u64, !252 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !149
        v4 = load v3
        v5 = call ptr_22(v4), !255
        ret u64 v5
    }

    pub fn ptr_22(self !256: { u64, u64 }) -> u64, !259 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !150
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !261: b256) -> { b256 }, !264 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !265
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !265
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !267: { { { u64, u64 }, u64 } }) -> b256, !271 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !274
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !275
        store v0 to v1, !275
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !276
        v3 = call hash_26(s, v2), !279
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !280
        v5 = load v4
        v6 = call sha256_43(v5), !283
        ret b256 v6
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !286 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !289
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !290
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !290
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn hash_26(self !291: { { { u64, u64 }, u64 } }, state !292: ptr { { { u64, u64 }, u64 } }) -> (), !295 {
        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !296
        v4 = load v3
        v5 = call write_27(state, v4), !299
        v6 = const unit ()
        ret () v6
    }

    pub fn write_27(self !300: ptr { { { u64, u64 }, u64 } }, bytes !301: { { u64, u64 }, u64 }) -> (), !304 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !305
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !308
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !309: ptr { { u64, u64 }, u64 }, other !310: ptr { { u64, u64 }, u64 }) -> (), !313 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !316
        v2 = get_local ptr u64, other_len, !317
        v3 = get_local ptr u64, other_len, !318
        v4 = const u64 0, !319
        v5 = call eq_15(v1, v4), !322
        cbr v5, block0(), block1(), !320

        block0():
        v6 = const unit (), !323
        ret () v6, !323

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !248
        v11 = load v10
        v12 = const u64 0, !324
        v13 = call eq_15(v11, v12), !327
        cbr v13, block3(), block4(), !325

        block3():
        v14 = load other
        store v14 to self, !328
        v15 = const unit (), !329
        ret () v15, !329

        block4():
        v16 = const unit ()
        br block5(v16)

        block5(v17: ()):
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !248
        v20 = load v19
        v21 = get_local ptr u64, other_len, !330
        v22 = call add_29(v20, v1), !333
        v23 = get_local ptr u64, both_len, !334
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !248
        v26 = load v25
        v27 = get_local ptr u64, other_start, !335
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr { u64, u64 }, v28, !149
        v30 = load v29
        v31 = call capacity_31(v30), !338
        v32 = get_local ptr u64, both_len, !339
        v33 = call lt_30(v31, v22), !342
        cbr v33, block6(), block7(), !340

        block6():
        v34 = const u64 0
        v35 = get_elem_ptr self, ptr { u64, u64 }, v34, !149
        v36 = load v35
        v37 = call ptr_22(v36), !345
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !149
        v40 = load v39
        v41 = call capacity_31(v40), !348
        v42 = get_local ptr u64, both_len, !349
        v43 = call realloc_bytes_35(v37, v41, v22), !352
        v44 = get_local ptr u64, both_len, !353
        v45 = call from_parts_32(v43, v22), !356
        v46 = get_local ptr slice, new_slice, !357
        store v45 to v46, !357
        v47 = get_local ptr slice, new_slice, !358
        v48 = load v47
        v49 = call from_37(v48), !361
        v50 = const u64 0
        v51 = get_elem_ptr self, ptr { u64, u64 }, v50, !362
        store v49 to v51, !362
        v52 = const unit ()
        br block8(v52)

        block7():
        v53 = const unit ()
        br block8(v53)

        block8(v54: ()):
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !149
        v57 = load v56
        v58 = call ptr_22(v57), !365
        v59 = get_local ptr u64, other_start, !366
        v60 = call add_uint_offset_42(v58, v26), !369
        v61 = get_local ptr u64, new_ptr, !370
        v62 = load other
        v63 = call ptr_21(v62), !373
        v64 = get_local ptr u64, new_ptr, !374
        v65 = get_local ptr u64, other_len, !375
        v66 = call copy_bytes_to_13(v63, v60, v1), !378
        v67 = get_local ptr u64, both_len, !379
        v68 = const u64 1
        v69 = get_elem_ptr self, ptr u64, v68, !380
        store v22 to v69, !380
        v70 = const unit ()
        ret () v70
    }

    pub fn add_29(self !381: u64, other !382: u64) -> u64, !385 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !386: u64, other !387: u64) -> bool, !390 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !391: { u64, u64 }) -> u64, !394 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !395
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !397: u64, count !398: u64) -> slice, !401 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !404
        v2 = get_local ptr { u64, u64 }, __anon_0, !405
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !405
        store ptr to v4, !405
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !405
        store v1 to v6, !405
        v7 = load v2
        v8 = call from_parts_33(v7), !408
        ret slice v8
    }

    fn from_parts_33(parts !409: { u64, u64 }) -> slice, !412 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !413 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !414: u64, other !415: u64) -> u64, !418 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !419: u64, count !420: u64, new_count !421: u64) -> u64, !424 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !427
        cbr v0, block0(), block4(), !425

        block0():
        v1 = call alloc_bytes_4(new_count), !430
        v2 = get_local ptr u64, new_ptr, !431
        v3 = const u64 0, !432
        v4 = call gt_36(count, v3), !435
        cbr v4, block1(), block2(), !433

        block1():
        v5 = get_local ptr u64, new_ptr, !436
        v6 = call copy_bytes_to_13(ptr, v1, count), !439
        v7 = const unit ()
        br block3(v7)

        block2():
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !440
        br block5(v1)

        block4():
        br block5(ptr)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !441: u64, other !442: u64) -> bool, !445 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !446: slice) -> { u64, u64 }, !449 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_38(slice), !452
        v1 = get_local ptr u64, cap, !453
        v2 = get_local ptr u64, cap, !454
        v3 = call alloc_bytes_4(v0), !457
        v4 = get_local ptr u64, ptr, !458
        v5 = get_local ptr u64, cap, !459
        v6 = const u64 0, !460
        v7 = call gt_36(v0, v6), !463
        cbr v7, block0(), block1(), !461

        block0():
        v8 = call ptr_41(slice), !466
        v9 = get_local ptr u64, ptr, !467
        v10 = get_local ptr u64, cap, !468
        v11 = call copy_to_40(v8, v3, v0), !471
        v12 = const unit ()
        br block2(v12)

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr u64, ptr, !472
        v16 = get_local ptr u64, cap, !473
        v17 = get_local ptr { u64, u64 }, __anon_0, !474
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v3 to v19, !474
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20
        store v0 to v21, !474
        v22 = load v17
        ret { u64, u64 } v22
    }

    pub fn number_of_bytes_38(self !475: slice) -> u64, !478 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !481
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !482
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !483: slice) -> { u64, u64 }, !486 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !487 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !488: u64, dst !489: u64, count !490: u64) -> (), !493 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !496
        v2 = get_local ptr u64, len, !497
        v3 = get_local ptr u64, len, !498
        v4 = asm(dst: dst, src: self, len: v1) -> (), !499 {
            mcp    dst src len, !500
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn ptr_41(self !501: slice) -> u64, !504 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !507
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !508
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !509: u64, offset !510: u64) -> u64, !513 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !514 {
            add    new ptr offset, !515
        }
        ret u64 v0
    }

    pub fn sha256_43(self !516: { { { u64, u64 }, u64 } }) -> b256, !519 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_44(), !522
        v1 = get_local ptr b256, result_buffer, !523
        store v0 to v1, !523
        v2 = get_local ptr b256, result_buffer, !524
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !305
        v7 = load v6
        v8 = call ptr_21(v7), !527
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !305
        v13 = load v12
        v14 = call len_20(v13), !530
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !531 {
            s256   hash ptr bytes, !532
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !536 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !537
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = (!4 !5)
!7 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!8 = span !7 972 1177
!9 = fn_name_span !7 979 983
!10 = (!8 !9)
!11 = span !7 1006 1020
!12 = fn_call_path_span !7 1006 1018
!13 = (!11 !12)
!14 = span !7 992 1021
!15 = span !7 1042 1058
!16 = fn_call_path_span !7 1042 1056
!17 = (!15 !16)
!18 = span !7 1026 1059
!19 = span !7 1072 1081
!20 = span !7 1085 1094
!21 = span !7 1072 1094
!22 = fn_call_path_span !7 1082 1084
!23 = (!21 !22)
!24 = span !7 1064 1095
!25 = span !7 1108 1117
!26 = span !7 1126 1133
!27 = span !7 1108 1134
!28 = fn_call_path_span !7 1118 1125
!29 = (!27 !28)
!30 = span !7 1100 1135
!31 = span !7 1148 1157
!32 = span !7 1166 1173
!33 = span !7 1148 1174
!34 = fn_call_path_span !7 1158 1165
!35 = (!33 !34)
!36 = span !7 1140 1175
!37 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!38 = span !37 718 804
!39 = fn_name_span !37 725 728
!40 = (!38 !39)
!41 = span !37 775 787
!42 = fn_call_path_span !37 775 785
!43 = (!41 !42)
!44 = span !37 749 798
!45 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!46 = span !45 3024 3131
!47 = fn_name_span !45 3031 3034
!48 = (!46 !47)
!49 = span !45 3079 3094
!50 = fn_call_path_span !45 3079 3092
!51 = (!49 !50)
!52 = span !45 3055 3125
!53 = span !45 3113 3114
!54 = span !45 503 609
!55 = fn_name_span !45 510 513
!56 = (!54 !55)
!57 = span !45 570 571
!58 = span !45 558 572
!59 = fn_call_path_span !45 558 569
!60 = (!58 !59)
!61 = span !45 534 603
!62 = span !45 591 592
!63 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!64 = span !63 3286 3291
!65 = span !63 3267 3380
!66 = fn_name_span !63 3274 3285
!67 = (!65 !66)
!68 = span !63 3315 3378
!69 = span !63 3342 3351
!70 = span !7 258 340
!71 = fn_name_span !7 265 268
!72 = (!70 !71)
!73 = span !7 314 323
!74 = span !7 315 318
!75 = span !7 289 334
!76 = span !7 805 809
!77 = span !7 811 816
!78 = span !7 799 968
!79 = fn_name_span !7 802 804
!80 = inline "always"
!81 = (!78 !79 !80)
!82 = span !7 218 232
!83 = span !7 889 891
!84 = span !7 842 962
!85 = span !7 907 926
!86 = span !7 507 511
!87 = span !7 513 520
!88 = span !7 492 714
!89 = fn_name_span !7 499 506
!90 = (!88 !89)
!91 = span !7 582 603
!92 = fn_call_path_span !7 587 594
!93 = (!91 !92)
!94 = span !7 576 708
!95 = span !7 618 668
!96 = fn_call_path_span !7 618 668
!97 = (!95 !96)
!98 = span !7 621 628
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!100 = span !99 1815 1933
!101 = span !7 657 664
!102 = span !7 650 665
!103 = fn_call_path_span !7 650 656
!104 = (!102 !103)
!105 = span !7 636 666
!106 = fn_call_path_span !7 636 649
!107 = (!105 !106)
!108 = span !7 681 698
!109 = fn_call_path_span !7 681 698
!110 = (!108 !109)
!111 = span !7 685 686
!112 = span !7 695 696
!113 = span !7 361 365
!114 = span !7 367 374
!115 = span !7 346 486
!116 = fn_name_span !7 353 360
!117 = (!115 !116)
!118 = span !7 451 469
!119 = fn_call_path_span !7 459 467
!120 = (!118 !119)
!121 = span !7 451 478
!122 = fn_call_path_span !7 470 476
!123 = (!121 !122)
!124 = span !7 435 479
!125 = fn_call_path_span !7 435 450
!126 = (!124 !125)
!127 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!128 = span !127 3077 3081
!129 = span !127 3069 3167
!130 = fn_name_span !127 3072 3076
!131 = (!129 !130)
!132 = span !127 3133 3150
!133 = fn_call_path_span !127 3133 3144
!134 = (!132 !133)
!135 = span !127 3107 3161
!136 = span !45 28831 28832
!137 = span !45 28823 29132
!138 = fn_name_span !45 28826 28830
!139 = (!137 !138)
!140 = span !45 28953 28955
!141 = span !45 28933 28956
!142 = fn_call_path_span !45 28933 28952
!143 = (!141 !142)
!144 = span !45 28917 28957
!145 = span !45 28966 28980
!146 = span !45 28978 28980
!147 = span !45 29065 29077
!148 = span !45 29092 29097
!149 = span !45 2445 2458
!150 = span !45 400 412
!151 = span !45 29107 29109
!152 = span !45 29065 29110
!153 = fn_call_path_span !45 29078 29091
!154 = (!152 !153)
!155 = span !45 29121 29126
!156 = span !45 4100 4108
!157 = span !45 4079 4227
!158 = fn_name_span !45 4086 4099
!159 = (!157 !158)
!160 = span !45 4157 4190
!161 = fn_call_path_span !45 4157 4180
!162 = (!160 !161)
!163 = span !45 4133 4221
!164 = span !45 4209 4210
!165 = span !45 806 814
!166 = span !45 785 928
!167 = fn_name_span !45 792 805
!168 = (!166 !167)
!169 = span !45 863 884
!170 = fn_call_path_span !45 863 874
!171 = (!169 !170)
!172 = span !45 839 922
!173 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!174 = span !173 5960 5964
!175 = span !173 5966 5969
!176 = span !173 5977 5982
!177 = span !173 5939 6083
!178 = fn_name_span !173 5946 5959
!179 = (!177 !178)
!180 = span !173 5999 6076
!181 = span !173 6050 6065
!182 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!183 = span !182 4952 4956
!184 = span !182 4938 5081
!185 = fn_name_span !182 4945 4951
!186 = (!184 !185)
!187 = span !182 4973 5075
!188 = span !182 4979 4983
!189 = span !182 4998 5037
!190 = fn_call_path_span !182 4998 5037
!191 = (!189 !190)
!192 = span !182 5009 5020
!193 = span !182 5025 5036
!194 = span !182 5062 5063
!195 = span !182 5055 5064
!196 = fn_call_path_span !182 5055 5061
!197 = (!195 !196)
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!199 = span !198 16751 16755
!200 = span !198 16757 16762
!201 = span !198 16745 16811
!202 = fn_name_span !198 16748 16750
!203 = (!201 !202)
!204 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!205 = span !204 735 739
!206 = span !204 721 773
!207 = fn_name_span !204 728 734
!208 = (!206 !207)
!209 = span !204 757 771
!210 = span !37 1538 1542
!211 = span !37 1526 1716
!212 = fn_name_span !37 1529 1537
!213 = (!211 !212)
!214 = span !37 329 341
!215 = span !37 1573 1589
!216 = fn_call_path_span !37 1584 1587
!217 = (!215 !216)
!218 = span !37 1593 1595
!219 = span !37 1573 1595
!220 = fn_call_path_span !37 1590 1592
!221 = (!219 !220)
!222 = span !182 2461 2560
!223 = span !37 1610 1621
!224 = span !37 1657 1673
!225 = fn_call_path_span !37 1668 1671
!226 = (!224 !225)
!227 = span !37 1647 1709
!228 = span !198 15477 15481
!229 = span !198 15483 15488
!230 = span !198 15470 15542
!231 = fn_name_span !198 15473 15476
!232 = (!230 !231)
!233 = span !198 15515 15529
!234 = fn_call_path_span !198 15520 15522
!235 = (!233 !234)
!236 = span !198 15514 15536
!237 = fn_call_path_span !198 15531 15534
!238 = (!236 !237)
!239 = span !198 12498 12502
!240 = span !198 12491 12545
!241 = fn_name_span !198 12494 12497
!242 = (!240 !241)
!243 = span !198 12533 12538
!244 = span !45 13782 13786
!245 = span !45 13771 13819
!246 = fn_name_span !45 13778 13781
!247 = (!245 !246)
!248 = span !45 2506 2514
!249 = span !45 15186 15190
!250 = span !45 15175 15233
!251 = fn_name_span !45 15182 15185
!252 = (!250 !251)
!253 = span !45 15213 15227
!254 = fn_call_path_span !45 15222 15225
!255 = (!253 !254)
!256 = span !45 989 993
!257 = span !45 978 1030
!258 = fn_name_span !45 985 988
!259 = (!257 !258)
!260 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!261 = span !260 2340 2344
!262 = span !260 2332 2389
!263 = fn_name_span !260 2335 2339
!264 = (!262 !263)
!265 = span !260 2370 2383
!266 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!267 = span !266 9026 9027
!268 = span !266 9009 9138
!269 = fn_name_span !266 9016 9022
!270 = inline "never"
!271 = (!268 !269 !270)
!272 = span !266 9082 9095
!273 = fn_call_path_span !266 9082 9093
!274 = (!272 !273)
!275 = span !266 9065 9096
!276 = span !266 9108 9114
!277 = span !266 9101 9115
!278 = fn_call_path_span !266 9103 9107
!279 = (!277 !278)
!280 = span !266 9121 9127
!281 = span !266 9121 9136
!282 = fn_call_path_span !266 9128 9134
!283 = (!281 !282)
!284 = span !266 177 263
!285 = fn_name_span !266 184 187
!286 = (!284 !285)
!287 = span !266 234 246
!288 = fn_call_path_span !266 234 244
!289 = (!287 !288)
!290 = span !266 208 257
!291 = span !127 5084 5088
!292 = span !127 5098 5103
!293 = span !127 5076 5153
!294 = fn_name_span !127 5079 5083
!295 = (!293 !294)
!296 = span !127 524 536
!297 = span !127 5123 5146
!298 = fn_call_path_span !127 5129 5134
!299 = (!297 !298)
!300 = span !266 335 339
!301 = span !266 341 346
!302 = span !266 314 396
!303 = fn_name_span !266 321 326
!304 = (!302 !303)
!305 = span !266 142 154
!306 = span !266 365 389
!307 = fn_call_path_span !266 376 382
!308 = (!306 !307)
!309 = span !45 18345 18349
!310 = span !45 18359 18364
!311 = span !45 18323 19270
!312 = fn_name_span !45 18330 18336
!313 = (!311 !312)
!314 = span !45 18398 18409
!315 = fn_call_path_span !45 18404 18407
!316 = (!314 !315)
!317 = span !45 18382 18410
!318 = span !45 18422 18431
!319 = span !45 18435 18436
!320 = span !45 18422 18436
!321 = fn_call_path_span !45 18432 18434
!322 = (!320 !321)
!323 = span !45 18451 18457
!324 = span !45 18572 18573
!325 = span !45 18560 18573
!326 = fn_call_path_span !45 18569 18571
!327 = (!325 !326)
!328 = span !45 18588 18600
!329 = span !45 18614 18620
!330 = span !45 18668 18677
!331 = span !45 18657 18677
!332 = fn_call_path_span !45 18666 18667
!333 = (!331 !332)
!334 = span !45 18642 18678
!335 = span !45 18687 18714
!336 = span !45 18808 18827
!337 = fn_call_path_span !45 18817 18825
!338 = (!336 !337)
!339 = span !45 18830 18838
!340 = span !45 18808 18838
!341 = fn_call_path_span !45 18828 18829
!342 = (!340 !341)
!343 = span !45 18928 18942
!344 = fn_call_path_span !45 18937 18940
!345 = (!343 !344)
!346 = span !45 18944 18963
!347 = fn_call_path_span !45 18953 18961
!348 = (!346 !347)
!349 = span !45 18965 18973
!350 = span !45 18914 18974
!351 = fn_call_path_span !45 18914 18927
!352 = (!350 !351)
!353 = span !45 18992 19000
!354 = span !45 18869 19015
!355 = fn_call_path_span !45 18869 18890
!356 = (!354 !355)
!357 = span !45 18853 19016
!358 = span !45 19055 19064
!359 = span !45 19040 19065
!360 = fn_call_path_span !45 19040 19054
!361 = (!359 !360)
!362 = span !45 19029 19065
!363 = span !45 19100 19114
!364 = fn_call_path_span !45 19109 19112
!365 = (!363 !364)
!366 = span !45 19131 19142
!367 = span !45 19100 19143
!368 = fn_call_path_span !45 19115 19130
!369 = (!367 !368)
!370 = span !45 19086 19144
!371 = span !45 19153 19164
!372 = fn_call_path_span !45 19159 19162
!373 = (!371 !372)
!374 = span !45 19179 19186
!375 = span !45 19188 19197
!376 = span !45 19153 19198
!377 = fn_call_path_span !45 19165 19178
!378 = (!376 !377)
!379 = span !45 19255 19263
!380 = span !45 19244 19263
!381 = span !198 1239 1243
!382 = span !198 1245 1250
!383 = span !198 1232 1300
!384 = fn_name_span !198 1235 1238
!385 = (!383 !384)
!386 = span !198 20651 20655
!387 = span !198 20657 20662
!388 = span !198 20645 20711
!389 = fn_name_span !198 20648 20650
!390 = (!388 !389)
!391 = span !45 1097 1101
!392 = span !45 1081 1134
!393 = fn_name_span !45 1088 1096
!394 = (!392 !393)
!395 = span !45 418 426
!396 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!397 = span !396 2307 2310
!398 = span !396 2321 2326
!399 = span !396 2286 2400
!400 = fn_name_span !396 2293 2303
!401 = (!399 !400)
!402 = span !396 2368 2392
!403 = fn_call_path_span !396 2374 2375
!404 = (!402 !403)
!405 = span !396 2362 2393
!406 = span !396 2351 2394
!407 = fn_call_path_span !396 2351 2361
!408 = (!406 !407)
!409 = span !396 1206 1211
!410 = span !396 1192 1296
!411 = fn_name_span !396 1195 1205
!412 = (!410 !411)
!413 = span !396 1248 1294
!414 = span !198 6993 6997
!415 = span !198 6999 7004
!416 = span !198 6981 7054
!417 = fn_name_span !198 6984 6992
!418 = (!416 !417)
!419 = span !63 4106 4109
!420 = span !63 4120 4125
!421 = span !63 4132 4141
!422 = span !63 4085 4362
!423 = fn_name_span !63 4092 4105
!424 = (!422 !423)
!425 = span !63 4168 4185
!426 = fn_call_path_span !63 4178 4179
!427 = (!425 !426)
!428 = span !63 4210 4232
!429 = fn_call_path_span !63 4210 4221
!430 = (!428 !429)
!431 = span !63 4196 4233
!432 = span !63 4253 4254
!433 = span !63 4245 4254
!434 = fn_call_path_span !63 4251 4252
!435 = (!433 !434)
!436 = span !63 4287 4294
!437 = span !63 4269 4302
!438 = fn_call_path_span !63 4273 4286
!439 = (!437 !438)
!440 = span !63 4322 4329
!441 = span !198 20580 20584
!442 = span !198 20586 20591
!443 = span !198 20574 20640
!444 = fn_name_span !198 20577 20579
!445 = (!443 !444)
!446 = span !45 2084 2089
!447 = span !45 2076 2302
!448 = fn_name_span !45 2079 2083
!449 = (!447 !448)
!450 = span !45 2130 2153
!451 = fn_call_path_span !45 2136 2151
!452 = (!450 !451)
!453 = span !45 2120 2154
!454 = span !45 2185 2188
!455 = span !45 2173 2189
!456 = fn_call_path_span !45 2173 2184
!457 = (!455 !456)
!458 = span !45 2163 2190
!459 = span !45 2202 2205
!460 = span !45 2208 2209
!461 = span !45 2202 2209
!462 = fn_call_path_span !45 2206 2207
!463 = (!461 !462)
!464 = span !45 2224 2235
!465 = fn_call_path_span !45 2230 2233
!466 = (!464 !465)
!467 = span !45 2250 2253
!468 = span !45 2255 2258
!469 = span !45 2224 2259
!470 = fn_call_path_span !45 2236 2243
!471 = (!469 !470)
!472 = span !45 2286 2289
!473 = span !45 2291 2294
!474 = span !45 2279 2296
!475 = span !396 3936 3940
!476 = span !396 3913 3983
!477 = fn_name_span !396 3920 3935
!478 = (!476 !477)
!479 = span !396 3959 3975
!480 = fn_call_path_span !396 3959 3969
!481 = (!479 !480)
!482 = span !396 3976 3977
!483 = span !396 1582 1587
!484 = span !396 1568 1677
!485 = fn_name_span !396 1571 1581
!486 = (!484 !485)
!487 = span !396 1624 1675
!488 = span !173 3364 3368
!489 = span !173 3370 3373
!490 = span !173 3381 3386
!491 = span !173 3346 3529
!492 = fn_name_span !173 3353 3360
!493 = (!491 !492)
!494 = span !173 3413 3437
!495 = fn_call_path_span !173 3419 3420
!496 = (!494 !495)
!497 = span !173 3403 3438
!498 = span !173 3477 3480
!499 = span !173 3447 3522
!500 = span !173 3496 3511
!501 = span !396 2884 2888
!502 = span !396 2873 2935
!503 = fn_name_span !396 2880 2883
!504 = (!502 !503)
!505 = span !396 2911 2927
!506 = fn_call_path_span !396 2911 2921
!507 = (!505 !506)
!508 = span !396 2928 2929
!509 = span !173 6684 6688
!510 = span !173 6690 6696
!511 = span !173 6661 6831
!512 = fn_name_span !173 6668 6683
!513 = (!511 !512)
!514 = span !173 6721 6825
!515 = span !173 6771 6789
!516 = span !266 416 420
!517 = span !266 402 678
!518 = fn_name_span !266 409 415
!519 = (!517 !518)
!520 = span !266 464 475
!521 = fn_call_path_span !266 464 473
!522 = (!520 !521)
!523 = span !266 440 476
!524 = span !266 508 521
!525 = span !266 540 556
!526 = fn_call_path_span !266 551 554
!527 = (!525 !526)
!528 = span !266 577 593
!529 = fn_call_path_span !266 588 591
!530 = (!528 !529)
!531 = span !266 485 672
!532 = span !266 619 638
!533 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!534 = span !533 7873 7976
!535 = fn_name_span !533 7880 7883
!536 = (!534 !535)
!537 = span !533 7904 7970

// IR: [fn-dedup-release] Function deduplication with metadata ignored
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        entry():
        v0 = call play_0(), !6
        v1 = const unit ()
        ret () v1
    }

    pub fn play_0() -> (), !10 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !13
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !14
        store v0 to v1, !14
        v2 = call new_5(), !17
        v3 = get_local ptr { [u8; 64] }, secp256k1, !18
        store v2 to v3, !18
        v4 = get_local ptr { [u8; 64] }, secp256k1, !19
        v5 = load v4
        v6 = get_local ptr { [u8; 64] }, secp256k1, !20
        v7 = load v6
        v8 = call eq_6(v5, v7), !23
        v9 = get_local ptr bool, _, !24
        v10 = get_local ptr { [u8; 64] }, secp256k1, !25
        v11 = load v10
        v12 = get_local ptr { { { u64, u64 }, u64 } }, message, !26
        v13 = load v12
        v14 = call address_7(v11, v13), !29
        v15 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !30
        store v14 to v15, !30
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        v17 = load v16
        v18 = get_local ptr { { { u64, u64 }, u64 } }, message, !32
        v19 = load v18
        v20 = call address_7(v17, v19), !35
        v21 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !36
        store v20 to v21, !36
        v22 = const unit ()
        ret () v22
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !40 {
        local { { u64, u64 }, u64 } __anon_0

        entry():
        v0 = call new_3(), !43
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !44
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !44
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !45
        store v6 to v5, !44
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn new_3() -> { u64, u64 }, !48 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !49
        v1 = call alloc_bytes_4(v0), !52
        v2 = get_local ptr { u64, u64 }, __anon_0, !53
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !53
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !54
        store v7 to v6, !53
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !56: u64) -> u64, !59 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !60 {
            aloc   size, !61
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !64 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !65
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !66
        store v4 to v3, !65
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !67
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !67
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !68: { [u8; 64] }, other !69: { [u8; 64] }) -> bool, !73 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !74
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !74
        v8 = const u64 64, !75
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !76 {
            meq    result r2 r3 r4, !77
        }
        ret bool v9
    }

    pub fn address_7(self !78: { [u8; 64] }, message !79: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !82 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64 } e
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = call recover_8(self, message), !85
        v1 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !86
        store v0 to v1, !86
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !83
        v5 = load v4
        v6 = const u64 0, !83
        v7 = call eq_15(v5, v6), !89
        cbr v7, block0(), block1(), !87

        block0():
        v8 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v9 = const u64 1
        v10 = const u64 0
        v11 = get_elem_ptr v8, ptr { { { u64, u64 }, u64 } }, v9, v10
        v12 = load v11
        v13 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !90
        store v12 to v13, !90
        v14 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !92
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !92
        v17 = const u64 0, !92
        store v17 to v16, !92
        v18 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !93
        v19 = load v18
        v20 = call sha256_24(v19), !96
        v21 = call from_23(v20), !99
        v22 = const u64 1
        v23 = const u64 0
        v24 = get_elem_ptr v14, ptr { b256 }, v22, v23, !92
        store v21 to v24, !92
        v25 = load v14
        br block5(v25)

        block1():
        v26 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !83
        v29 = load v28
        v30 = const u64 1, !83
        v31 = call eq_15(v29, v30), !102
        cbr v31, block2(), block3(), !100

        block2():
        v32 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !83
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v32, ptr { u64 }, v33, v34
        v36 = load v35
        v37 = get_local ptr { u64 }, e, !103
        store v36 to v37, !103
        v38 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !92
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39, !92
        v41 = const u64 1, !92
        store v41 to v40, !92
        v42 = get_local ptr { u64 }, e, !104
        v43 = load v42
        v44 = const u64 1
        v45 = const u64 1
        v46 = get_elem_ptr v38, ptr { u64 }, v44, v45, !92
        store v43 to v46, !92
        v47 = load v38
        br block4(v47)

        block3():
        v48 = const u64 14757395258967588866, !86
        revert v48, !86

        block4(v49: { u64, ( { b256 } | { u64 } ) }):
        br block5(v49)

        block5(v50: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v50
    }

    pub fn recover_8(self !105: { [u8; 64] }, message !106: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !109 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !92
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !92
        v3 = const u64 0, !92
        store v3 to v2, !92
        v4 = call try_into_17(message), !112
        v5 = call unwrap_14(v4), !115
        v6 = call from_9(v5), !118
        v7 = const u64 1
        v8 = const u64 0
        v9 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v7, v8, !92
        store v6 to v9, !92
        v10 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v10
    }

    pub fn from_9(bits !120: b256) -> { { { u64, u64 }, u64 } }, !123 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry(bits: b256):
        v0 = call from_10(bits), !126
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !127
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !127
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn from_10(b !128: b256) -> { { u64, u64 }, u64 }, !131 {
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !132
        v1 = call with_capacity_11(v0), !135
        v2 = get_local ptr { { u64, u64 }, u64 }, bytes, !136
        store v1 to v2, !136
        v3 = get_local ptr { { u64, u64 }, u64 }, bytes, !137
        v4 = const u64 1
        v5 = get_elem_ptr v3, ptr u64, v4, !137
        v6 = const u64 32, !138
        store v6 to v5, !137
        v7 = ptr_to_int b to u64, !139
        v8 = get_local ptr { { u64, u64 }, u64 }, bytes, !140
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !141
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !142
        v13 = load v12
        v14 = const u64 32, !143
        v15 = call copy_bytes_to_13(v7, v13, v14), !146
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !147
        v17 = load v16
        ret { { u64, u64 }, u64 } v17
    }

    pub fn with_capacity_11(capacity !148: u64) -> { { u64, u64 }, u64 }, !151 {
        local { { u64, u64 }, u64 } __anon_0

        entry(capacity: u64):
        v0 = call with_capacity_12(capacity), !154
        v1 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !155
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2
        store v0 to v3, !155
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        v6 = const u64 0, !156
        store v6 to v5, !155
        v7 = load v1
        ret { { u64, u64 }, u64 } v7
    }

    pub fn with_capacity_12(capacity !157: u64) -> { u64, u64 }, !160 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = call alloc_bytes_4(capacity), !163
        v1 = get_local ptr { u64, u64 }, __anon_0, !164
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !164
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !164
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !166: u64, dst !167: u64, count !168: u64) -> (), !171 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !172 {
            mcp    dst src len, !173
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !175: { u64, ( () | b256 ) }) -> b256, !178 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !179
        store self to v0, !179
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !180
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !180
        v4 = load v3
        v5 = const u64 1, !180
        v6 = call eq_15(v4, v5), !183
        cbr v6, block0(), block1(), !181

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !180
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !184
        store v11 to v12, !184
        v13 = get_local ptr b256, inner_value, !185
        v14 = load v13
        br block2(v14)

        block1():
        v15 = const u64 0, !186
        v16 = call revert_16(v15), !189
        br block2(v16)

        block2(v17: b256):
        ret b256 v17
    }

    pub fn eq_15(self !191: u64, other !192: u64) -> bool, !195 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !197: u64) -> never, !200 {
        entry(code: u64):
        revert code, !201
    }

    pub fn try_into_17(self !203: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !206 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !207
        v4 = load v3
        v5 = call len_20(v4), !210
        v6 = const u64 32, !211
        v7 = call neq_18(v5, v6), !214
        cbr v7, block0(), block1(), !212

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !215
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr u64, v9, !215
        v11 = const u64 0, !215
        store v11 to v10, !215
        v12 = load v8
        ret { u64, ( () | b256 ) } v12, !216

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !215
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !215
        v18 = const u64 1, !215
        store v18 to v17, !215
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !207
        v23 = load v22
        v24 = call ptr_21(v23), !219
        v25 = asm(bits: v24) -> b256 bits, !220 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !215
        store v25 to v28, !215
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !221: u64, other !222: u64) -> bool, !225 {
        entry(self: u64, other: u64):
        v0 = call eq_15(self, other), !228
        v1 = call not_19(v0), !231
        ret bool v1
    }

    pub fn not_19(self !232: bool) -> bool, !235 {
        entry(self: bool):
        v0 = const bool false, !236
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !237: { { u64, u64 }, u64 }) -> u64, !240 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !242: { { u64, u64 }, u64 }) -> u64, !245 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !141
        v4 = load v3
        v5 = call ptr_22(v4), !248
        ret u64 v5
    }

    pub fn ptr_22(self !249: { u64, u64 }) -> u64, !252 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !142
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !254: b256) -> { b256 }, !257 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !258
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !258
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !260: { { { u64, u64 }, u64 } }) -> b256, !264 {
        local mut { { { u64, u64 }, u64 } } hasher

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !267
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !268
        store v0 to v1, !268
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !269
        v3 = call hash_26(s, v2), !272
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !273
        v5 = load v4
        v6 = call sha256_43(v5), !276
        ret b256 v6
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !279 {
        local { { { u64, u64 }, u64 } } __anon_0

        entry():
        v0 = call new_2(), !282
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !283
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2
        store v0 to v3, !283
        v4 = load v1
        ret { { { u64, u64 }, u64 } } v4
    }

    pub fn hash_26(self !284: { { { u64, u64 }, u64 } }, state !285: ptr { { { u64, u64 }, u64 } }) -> (), !288 {
        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !289
        v4 = load v3
        v5 = call write_27(state, v4), !292
        v6 = const unit ()
        ret () v6
    }

    pub fn write_27(self !293: ptr { { { u64, u64 }, u64 } }, bytes !294: { { u64, u64 }, u64 }) -> (), !297 {
        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !298
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = call append_28(v1, v3), !301
        v5 = const unit ()
        ret () v5
    }

    pub fn append_28(self !302: ptr { { u64, u64 }, u64 }, other !303: ptr { { u64, u64 }, u64 }) -> (), !306 {
        local u64 both_len
        local u64 new_ptr
        local slice new_slice
        local u64 other_len
        local u64 other_start

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !309
        v2 = get_local ptr u64, other_len, !310
        v3 = get_local ptr u64, other_len, !311
        v4 = const u64 0, !312
        v5 = call eq_15(v1, v4), !315
        cbr v5, block0(), block1(), !313

        block0():
        v6 = const unit (), !316
        ret () v6, !316

        block1():
        v7 = const unit ()
        br block2(v7)

        block2(v8: ()):
        v9 = const u64 1
        v10 = get_elem_ptr self, ptr u64, v9, !241
        v11 = load v10
        v12 = const u64 0, !317
        v13 = call eq_15(v11, v12), !320
        cbr v13, block3(), block4(), !318

        block3():
        v14 = load other
        store v14 to self, !321
        v15 = const unit (), !322
        ret () v15, !322

        block4():
        v16 = const unit ()
        br block5(v16)

        block5(v17: ()):
        v18 = const u64 1
        v19 = get_elem_ptr self, ptr u64, v18, !241
        v20 = load v19
        v21 = get_local ptr u64, other_len, !323
        v22 = call add_29(v20, v1), !326
        v23 = get_local ptr u64, both_len, !327
        v24 = const u64 1
        v25 = get_elem_ptr self, ptr u64, v24, !241
        v26 = load v25
        v27 = get_local ptr u64, other_start, !328
        v28 = const u64 0
        v29 = get_elem_ptr self, ptr { u64, u64 }, v28, !141
        v30 = load v29
        v31 = call capacity_31(v30), !331
        v32 = get_local ptr u64, both_len, !332
        v33 = call lt_30(v31, v22), !335
        cbr v33, block6(), block7(), !333

        block6():
        v34 = const u64 0
        v35 = get_elem_ptr self, ptr { u64, u64 }, v34, !141
        v36 = load v35
        v37 = call ptr_22(v36), !338
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !141
        v40 = load v39
        v41 = call capacity_31(v40), !341
        v42 = get_local ptr u64, both_len, !342
        v43 = call realloc_bytes_35(v37, v41, v22), !345
        v44 = get_local ptr u64, both_len, !346
        v45 = call from_parts_32(v43, v22), !349
        v46 = get_local ptr slice, new_slice, !350
        store v45 to v46, !350
        v47 = get_local ptr slice, new_slice, !351
        v48 = load v47
        v49 = call from_37(v48), !354
        v50 = const u64 0
        v51 = get_elem_ptr self, ptr { u64, u64 }, v50, !355
        store v49 to v51, !355
        v52 = const unit ()
        br block8(v52)

        block7():
        v53 = const unit ()
        br block8(v53)

        block8(v54: ()):
        v55 = const u64 0
        v56 = get_elem_ptr self, ptr { u64, u64 }, v55, !141
        v57 = load v56
        v58 = call ptr_22(v57), !358
        v59 = get_local ptr u64, other_start, !359
        v60 = call add_uint_offset_42(v58, v26), !362
        v61 = get_local ptr u64, new_ptr, !363
        v62 = load other
        v63 = call ptr_21(v62), !366
        v64 = get_local ptr u64, new_ptr, !367
        v65 = get_local ptr u64, other_len, !368
        v66 = call copy_bytes_to_13(v63, v60, v1), !371
        v67 = get_local ptr u64, both_len, !372
        v68 = const u64 1
        v69 = get_elem_ptr self, ptr u64, v68, !373
        store v22 to v69, !373
        v70 = const unit ()
        ret () v70
    }

    pub fn add_29(self !374: u64, other !375: u64) -> u64, !378 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !379: u64, other !380: u64) -> bool, !383 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !384: { u64, u64 }) -> u64, !387 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !388
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !390: u64, count !391: u64) -> slice, !394 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !397
        v2 = get_local ptr { u64, u64 }, __anon_0, !398
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !398
        store ptr to v4, !398
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !398
        store v1 to v6, !398
        v7 = load v2
        v8 = call from_parts_33(v7), !401
        ret slice v8
    }

    fn from_parts_33(parts !402: { u64, u64 }) -> slice, !405 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !406 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !407: u64, other !408: u64) -> u64, !411 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !412: u64, count !413: u64, new_count !414: u64) -> u64, !417 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = call gt_36(new_count, count), !420
        cbr v0, block0(), block4(), !418

        block0():
        v1 = call alloc_bytes_4(new_count), !423
        v2 = get_local ptr u64, new_ptr, !424
        v3 = const u64 0, !425
        v4 = call gt_36(count, v3), !428
        cbr v4, block1(), block2(), !426

        block1():
        v5 = get_local ptr u64, new_ptr, !429
        v6 = call copy_bytes_to_13(ptr, v1, count), !432
        v7 = const unit ()
        br block3(v7)

        block2():
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !433
        br block5(v1)

        block4():
        br block5(ptr)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !434: u64, other !435: u64) -> bool, !438 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !439: slice) -> { u64, u64 }, !442 {
        local { u64, u64 } __anon_0
        local u64 cap
        local u64 ptr

        entry(slice: slice):
        v0 = call number_of_bytes_38(slice), !445
        v1 = get_local ptr u64, cap, !446
        v2 = get_local ptr u64, cap, !447
        v3 = call alloc_bytes_4(v0), !450
        v4 = get_local ptr u64, ptr, !451
        v5 = get_local ptr u64, cap, !452
        v6 = const u64 0, !453
        v7 = call gt_36(v0, v6), !456
        cbr v7, block0(), block1(), !454

        block0():
        v8 = call ptr_41(slice), !459
        v9 = get_local ptr u64, ptr, !460
        v10 = get_local ptr u64, cap, !461
        v11 = call copy_to_40(v8, v3, v0), !464
        v12 = const unit ()
        br block2(v12)

        block1():
        v13 = const unit ()
        br block2(v13)

        block2(v14: ()):
        v15 = get_local ptr u64, ptr, !465
        v16 = get_local ptr u64, cap, !466
        v17 = get_local ptr { u64, u64 }, __anon_0, !467
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18
        store v3 to v19, !467
        v20 = const u64 1
        v21 = get_elem_ptr v17, ptr u64, v20
        store v0 to v21, !467
        v22 = load v17
        ret { u64, u64 } v22
    }

    pub fn number_of_bytes_38(self !468: slice) -> u64, !471 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !474
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !475
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !476: slice) -> { u64, u64 }, !479 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !480 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !481: u64, dst !482: u64, count !483: u64) -> (), !486 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = call multiply_34(count, v0), !489
        v2 = get_local ptr u64, len, !490
        v3 = get_local ptr u64, len, !491
        v4 = asm(dst: dst, src: self, len: v1) -> (), !492 {
            mcp    dst src len, !493
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn ptr_41(self !494: slice) -> u64, !497 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = call into_parts_39(self), !500
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !501
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !502: u64, offset !503: u64) -> u64, !506 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !507 {
            add    new ptr offset, !508
        }
        ret u64 v0
    }

    pub fn sha256_43(self !509: { { { u64, u64 }, u64 } }) -> b256, !512 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = call min_44(), !515
        v1 = get_local ptr b256, result_buffer, !516
        store v0 to v1, !516
        v2 = get_local ptr b256, result_buffer, !517
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !298
        v7 = load v6
        v8 = call ptr_21(v7), !520
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !298
        v13 = load v12
        v14 = call len_20(v13), !523
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !524 {
            s256   hash ptr bytes, !525
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !529 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !530
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = (!4 !5)
!7 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!8 = span !7 972 1177
!9 = fn_name_span !7 979 983
!10 = (!8 !9)
!11 = span !7 1006 1020
!12 = fn_call_path_span !7 1006 1018
!13 = (!11 !12)
!14 = span !7 992 1021
!15 = span !7 1042 1058
!16 = fn_call_path_span !7 1042 1056
!17 = (!15 !16)
!18 = span !7 1026 1059
!19 = span !7 1072 1081
!20 = span !7 1085 1094
!21 = span !7 1072 1094
!22 = fn_call_path_span !7 1082 1084
!23 = (!21 !22)
!24 = span !7 1064 1095
!25 = span !7 1108 1117
!26 = span !7 1126 1133
!27 = span !7 1108 1134
!28 = fn_call_path_span !7 1118 1125
!29 = (!27 !28)
!30 = span !7 1100 1135
!31 = span !7 1148 1157
!32 = span !7 1166 1173
!33 = span !7 1148 1174
!34 = fn_call_path_span !7 1158 1165
!35 = (!33 !34)
!36 = span !7 1140 1175
!37 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!38 = span !37 3024 3131
!39 = fn_name_span !37 3031 3034
!40 = (!38 !39)
!41 = span !37 3079 3094
!42 = fn_call_path_span !37 3079 3092
!43 = (!41 !42)
!44 = span !37 3055 3125
!45 = span !37 3113 3114
!46 = span !37 503 609
!47 = fn_name_span !37 510 513
!48 = (!46 !47)
!49 = span !37 570 571
!50 = span !37 558 572
!51 = fn_call_path_span !37 558 569
!52 = (!50 !51)
!53 = span !37 534 603
!54 = span !37 591 592
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!56 = span !55 3286 3291
!57 = span !55 3267 3380
!58 = fn_name_span !55 3274 3285
!59 = (!57 !58)
!60 = span !55 3315 3378
!61 = span !55 3342 3351
!62 = span !7 258 340
!63 = fn_name_span !7 265 268
!64 = (!62 !63)
!65 = span !7 314 323
!66 = span !7 315 318
!67 = span !7 289 334
!68 = span !7 805 809
!69 = span !7 811 816
!70 = span !7 799 968
!71 = fn_name_span !7 802 804
!72 = inline "always"
!73 = (!70 !71 !72)
!74 = span !7 218 232
!75 = span !7 889 891
!76 = span !7 842 962
!77 = span !7 907 926
!78 = span !7 507 511
!79 = span !7 513 520
!80 = span !7 492 714
!81 = fn_name_span !7 499 506
!82 = (!80 !81)
!83 = span !7 582 603
!84 = fn_call_path_span !7 587 594
!85 = (!83 !84)
!86 = span !7 576 708
!87 = span !7 618 668
!88 = fn_call_path_span !7 618 668
!89 = (!87 !88)
!90 = span !7 621 628
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!92 = span !91 1815 1933
!93 = span !7 657 664
!94 = span !7 650 665
!95 = fn_call_path_span !7 650 656
!96 = (!94 !95)
!97 = span !7 636 666
!98 = fn_call_path_span !7 636 649
!99 = (!97 !98)
!100 = span !7 681 698
!101 = fn_call_path_span !7 681 698
!102 = (!100 !101)
!103 = span !7 685 686
!104 = span !7 695 696
!105 = span !7 361 365
!106 = span !7 367 374
!107 = span !7 346 486
!108 = fn_name_span !7 353 360
!109 = (!107 !108)
!110 = span !7 451 469
!111 = fn_call_path_span !7 459 467
!112 = (!110 !111)
!113 = span !7 451 478
!114 = fn_call_path_span !7 470 476
!115 = (!113 !114)
!116 = span !7 435 479
!117 = fn_call_path_span !7 435 450
!118 = (!116 !117)
!119 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!120 = span !119 3077 3081
!121 = span !119 3069 3167
!122 = fn_name_span !119 3072 3076
!123 = (!121 !122)
!124 = span !119 3133 3150
!125 = fn_call_path_span !119 3133 3144
!126 = (!124 !125)
!127 = span !119 3107 3161
!128 = span !37 28831 28832
!129 = span !37 28823 29132
!130 = fn_name_span !37 28826 28830
!131 = (!129 !130)
!132 = span !37 28953 28955
!133 = span !37 28933 28956
!134 = fn_call_path_span !37 28933 28952
!135 = (!133 !134)
!136 = span !37 28917 28957
!137 = span !37 28966 28980
!138 = span !37 28978 28980
!139 = span !37 29065 29077
!140 = span !37 29092 29097
!141 = span !37 2445 2458
!142 = span !37 400 412
!143 = span !37 29107 29109
!144 = span !37 29065 29110
!145 = fn_call_path_span !37 29078 29091
!146 = (!144 !145)
!147 = span !37 29121 29126
!148 = span !37 4100 4108
!149 = span !37 4079 4227
!150 = fn_name_span !37 4086 4099
!151 = (!149 !150)
!152 = span !37 4157 4190
!153 = fn_call_path_span !37 4157 4180
!154 = (!152 !153)
!155 = span !37 4133 4221
!156 = span !37 4209 4210
!157 = span !37 806 814
!158 = span !37 785 928
!159 = fn_name_span !37 792 805
!160 = (!158 !159)
!161 = span !37 863 884
!162 = fn_call_path_span !37 863 874
!163 = (!161 !162)
!164 = span !37 839 922
!165 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!166 = span !165 5960 5964
!167 = span !165 5966 5969
!168 = span !165 5977 5982
!169 = span !165 5939 6083
!170 = fn_name_span !165 5946 5959
!171 = (!169 !170)
!172 = span !165 5999 6076
!173 = span !165 6050 6065
!174 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!175 = span !174 4952 4956
!176 = span !174 4938 5081
!177 = fn_name_span !174 4945 4951
!178 = (!176 !177)
!179 = span !174 4973 5075
!180 = span !174 4979 4983
!181 = span !174 4998 5037
!182 = fn_call_path_span !174 4998 5037
!183 = (!181 !182)
!184 = span !174 5009 5020
!185 = span !174 5025 5036
!186 = span !174 5062 5063
!187 = span !174 5055 5064
!188 = fn_call_path_span !174 5055 5061
!189 = (!187 !188)
!190 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!191 = span !190 16751 16755
!192 = span !190 16757 16762
!193 = span !190 16745 16811
!194 = fn_name_span !190 16748 16750
!195 = (!193 !194)
!196 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!197 = span !196 735 739
!198 = span !196 721 773
!199 = fn_name_span !196 728 734
!200 = (!198 !199)
!201 = span !196 757 771
!202 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!203 = span !202 1538 1542
!204 = span !202 1526 1716
!205 = fn_name_span !202 1529 1537
!206 = (!204 !205)
!207 = span !202 329 341
!208 = span !202 1573 1589
!209 = fn_call_path_span !202 1584 1587
!210 = (!208 !209)
!211 = span !202 1593 1595
!212 = span !202 1573 1595
!213 = fn_call_path_span !202 1590 1592
!214 = (!212 !213)
!215 = span !174 2461 2560
!216 = span !202 1610 1621
!217 = span !202 1657 1673
!218 = fn_call_path_span !202 1668 1671
!219 = (!217 !218)
!220 = span !202 1647 1709
!221 = span !190 15477 15481
!222 = span !190 15483 15488
!223 = span !190 15470 15542
!224 = fn_name_span !190 15473 15476
!225 = (!223 !224)
!226 = span !190 15515 15529
!227 = fn_call_path_span !190 15520 15522
!228 = (!226 !227)
!229 = span !190 15514 15536
!230 = fn_call_path_span !190 15531 15534
!231 = (!229 !230)
!232 = span !190 12498 12502
!233 = span !190 12491 12545
!234 = fn_name_span !190 12494 12497
!235 = (!233 !234)
!236 = span !190 12533 12538
!237 = span !37 13782 13786
!238 = span !37 13771 13819
!239 = fn_name_span !37 13778 13781
!240 = (!238 !239)
!241 = span !37 2506 2514
!242 = span !37 15186 15190
!243 = span !37 15175 15233
!244 = fn_name_span !37 15182 15185
!245 = (!243 !244)
!246 = span !37 15213 15227
!247 = fn_call_path_span !37 15222 15225
!248 = (!246 !247)
!249 = span !37 989 993
!250 = span !37 978 1030
!251 = fn_name_span !37 985 988
!252 = (!250 !251)
!253 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!254 = span !253 2340 2344
!255 = span !253 2332 2389
!256 = fn_name_span !253 2335 2339
!257 = (!255 !256)
!258 = span !253 2370 2383
!259 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!260 = span !259 9026 9027
!261 = span !259 9009 9138
!262 = fn_name_span !259 9016 9022
!263 = inline "never"
!264 = (!261 !262 !263)
!265 = span !259 9082 9095
!266 = fn_call_path_span !259 9082 9093
!267 = (!265 !266)
!268 = span !259 9065 9096
!269 = span !259 9108 9114
!270 = span !259 9101 9115
!271 = fn_call_path_span !259 9103 9107
!272 = (!270 !271)
!273 = span !259 9121 9127
!274 = span !259 9121 9136
!275 = fn_call_path_span !259 9128 9134
!276 = (!274 !275)
!277 = span !259 177 263
!278 = fn_name_span !259 184 187
!279 = (!277 !278)
!280 = span !259 234 246
!281 = fn_call_path_span !259 234 244
!282 = (!280 !281)
!283 = span !259 208 257
!284 = span !119 5084 5088
!285 = span !119 5098 5103
!286 = span !119 5076 5153
!287 = fn_name_span !119 5079 5083
!288 = (!286 !287)
!289 = span !119 524 536
!290 = span !119 5123 5146
!291 = fn_call_path_span !119 5129 5134
!292 = (!290 !291)
!293 = span !259 335 339
!294 = span !259 341 346
!295 = span !259 314 396
!296 = fn_name_span !259 321 326
!297 = (!295 !296)
!298 = span !259 142 154
!299 = span !259 365 389
!300 = fn_call_path_span !259 376 382
!301 = (!299 !300)
!302 = span !37 18345 18349
!303 = span !37 18359 18364
!304 = span !37 18323 19270
!305 = fn_name_span !37 18330 18336
!306 = (!304 !305)
!307 = span !37 18398 18409
!308 = fn_call_path_span !37 18404 18407
!309 = (!307 !308)
!310 = span !37 18382 18410
!311 = span !37 18422 18431
!312 = span !37 18435 18436
!313 = span !37 18422 18436
!314 = fn_call_path_span !37 18432 18434
!315 = (!313 !314)
!316 = span !37 18451 18457
!317 = span !37 18572 18573
!318 = span !37 18560 18573
!319 = fn_call_path_span !37 18569 18571
!320 = (!318 !319)
!321 = span !37 18588 18600
!322 = span !37 18614 18620
!323 = span !37 18668 18677
!324 = span !37 18657 18677
!325 = fn_call_path_span !37 18666 18667
!326 = (!324 !325)
!327 = span !37 18642 18678
!328 = span !37 18687 18714
!329 = span !37 18808 18827
!330 = fn_call_path_span !37 18817 18825
!331 = (!329 !330)
!332 = span !37 18830 18838
!333 = span !37 18808 18838
!334 = fn_call_path_span !37 18828 18829
!335 = (!333 !334)
!336 = span !37 18928 18942
!337 = fn_call_path_span !37 18937 18940
!338 = (!336 !337)
!339 = span !37 18944 18963
!340 = fn_call_path_span !37 18953 18961
!341 = (!339 !340)
!342 = span !37 18965 18973
!343 = span !37 18914 18974
!344 = fn_call_path_span !37 18914 18927
!345 = (!343 !344)
!346 = span !37 18992 19000
!347 = span !37 18869 19015
!348 = fn_call_path_span !37 18869 18890
!349 = (!347 !348)
!350 = span !37 18853 19016
!351 = span !37 19055 19064
!352 = span !37 19040 19065
!353 = fn_call_path_span !37 19040 19054
!354 = (!352 !353)
!355 = span !37 19029 19065
!356 = span !37 19100 19114
!357 = fn_call_path_span !37 19109 19112
!358 = (!356 !357)
!359 = span !37 19131 19142
!360 = span !37 19100 19143
!361 = fn_call_path_span !37 19115 19130
!362 = (!360 !361)
!363 = span !37 19086 19144
!364 = span !37 19153 19164
!365 = fn_call_path_span !37 19159 19162
!366 = (!364 !365)
!367 = span !37 19179 19186
!368 = span !37 19188 19197
!369 = span !37 19153 19198
!370 = fn_call_path_span !37 19165 19178
!371 = (!369 !370)
!372 = span !37 19255 19263
!373 = span !37 19244 19263
!374 = span !190 1239 1243
!375 = span !190 1245 1250
!376 = span !190 1232 1300
!377 = fn_name_span !190 1235 1238
!378 = (!376 !377)
!379 = span !190 20651 20655
!380 = span !190 20657 20662
!381 = span !190 20645 20711
!382 = fn_name_span !190 20648 20650
!383 = (!381 !382)
!384 = span !37 1097 1101
!385 = span !37 1081 1134
!386 = fn_name_span !37 1088 1096
!387 = (!385 !386)
!388 = span !37 418 426
!389 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!390 = span !389 2307 2310
!391 = span !389 2321 2326
!392 = span !389 2286 2400
!393 = fn_name_span !389 2293 2303
!394 = (!392 !393)
!395 = span !389 2368 2392
!396 = fn_call_path_span !389 2374 2375
!397 = (!395 !396)
!398 = span !389 2362 2393
!399 = span !389 2351 2394
!400 = fn_call_path_span !389 2351 2361
!401 = (!399 !400)
!402 = span !389 1206 1211
!403 = span !389 1192 1296
!404 = fn_name_span !389 1195 1205
!405 = (!403 !404)
!406 = span !389 1248 1294
!407 = span !190 6993 6997
!408 = span !190 6999 7004
!409 = span !190 6981 7054
!410 = fn_name_span !190 6984 6992
!411 = (!409 !410)
!412 = span !55 4106 4109
!413 = span !55 4120 4125
!414 = span !55 4132 4141
!415 = span !55 4085 4362
!416 = fn_name_span !55 4092 4105
!417 = (!415 !416)
!418 = span !55 4168 4185
!419 = fn_call_path_span !55 4178 4179
!420 = (!418 !419)
!421 = span !55 4210 4232
!422 = fn_call_path_span !55 4210 4221
!423 = (!421 !422)
!424 = span !55 4196 4233
!425 = span !55 4253 4254
!426 = span !55 4245 4254
!427 = fn_call_path_span !55 4251 4252
!428 = (!426 !427)
!429 = span !55 4287 4294
!430 = span !55 4269 4302
!431 = fn_call_path_span !55 4273 4286
!432 = (!430 !431)
!433 = span !55 4322 4329
!434 = span !190 20580 20584
!435 = span !190 20586 20591
!436 = span !190 20574 20640
!437 = fn_name_span !190 20577 20579
!438 = (!436 !437)
!439 = span !37 2084 2089
!440 = span !37 2076 2302
!441 = fn_name_span !37 2079 2083
!442 = (!440 !441)
!443 = span !37 2130 2153
!444 = fn_call_path_span !37 2136 2151
!445 = (!443 !444)
!446 = span !37 2120 2154
!447 = span !37 2185 2188
!448 = span !37 2173 2189
!449 = fn_call_path_span !37 2173 2184
!450 = (!448 !449)
!451 = span !37 2163 2190
!452 = span !37 2202 2205
!453 = span !37 2208 2209
!454 = span !37 2202 2209
!455 = fn_call_path_span !37 2206 2207
!456 = (!454 !455)
!457 = span !37 2224 2235
!458 = fn_call_path_span !37 2230 2233
!459 = (!457 !458)
!460 = span !37 2250 2253
!461 = span !37 2255 2258
!462 = span !37 2224 2259
!463 = fn_call_path_span !37 2236 2243
!464 = (!462 !463)
!465 = span !37 2286 2289
!466 = span !37 2291 2294
!467 = span !37 2279 2296
!468 = span !389 3936 3940
!469 = span !389 3913 3983
!470 = fn_name_span !389 3920 3935
!471 = (!469 !470)
!472 = span !389 3959 3975
!473 = fn_call_path_span !389 3959 3969
!474 = (!472 !473)
!475 = span !389 3976 3977
!476 = span !389 1582 1587
!477 = span !389 1568 1677
!478 = fn_name_span !389 1571 1581
!479 = (!477 !478)
!480 = span !389 1624 1675
!481 = span !165 3364 3368
!482 = span !165 3370 3373
!483 = span !165 3381 3386
!484 = span !165 3346 3529
!485 = fn_name_span !165 3353 3360
!486 = (!484 !485)
!487 = span !165 3413 3437
!488 = fn_call_path_span !165 3419 3420
!489 = (!487 !488)
!490 = span !165 3403 3438
!491 = span !165 3477 3480
!492 = span !165 3447 3522
!493 = span !165 3496 3511
!494 = span !389 2884 2888
!495 = span !389 2873 2935
!496 = fn_name_span !389 2880 2883
!497 = (!495 !496)
!498 = span !389 2911 2927
!499 = fn_call_path_span !389 2911 2921
!500 = (!498 !499)
!501 = span !389 2928 2929
!502 = span !165 6684 6688
!503 = span !165 6690 6696
!504 = span !165 6661 6831
!505 = fn_name_span !165 6668 6683
!506 = (!504 !505)
!507 = span !165 6721 6825
!508 = span !165 6771 6789
!509 = span !259 416 420
!510 = span !259 402 678
!511 = fn_name_span !259 409 415
!512 = (!510 !511)
!513 = span !259 464 475
!514 = fn_call_path_span !259 464 473
!515 = (!513 !514)
!516 = span !259 440 476
!517 = span !259 508 521
!518 = span !259 540 556
!519 = fn_call_path_span !259 551 554
!520 = (!518 !519)
!521 = span !259 577 593
!522 = fn_call_path_span !259 588 591
!523 = (!521 !522)
!524 = span !259 485 672
!525 = span !259 619 638
!526 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!527 = span !526 7873 7976
!528 = fn_name_span !526 7880 7883
!529 = (!527 !528)
!530 = span !526 7904 7970

// IR: [inline] Function inlining
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        br play_0_block0(v15), !30

        play_0_block0(v16: { [u8; 64] }):
        v17 = get_local ptr { [u8; 64] }, secp256k1, !32
        store v16 to v17, !33
        v18 = get_local ptr { [u8; 64] }, secp256k1, !35
        v19 = load v18, !36
        v20 = get_local ptr { [u8; 64] }, secp256k1, !38
        v21 = load v20, !36
        v22 = ptr_to_int v19 to u64, !41
        v23 = int_to_ptr v22 to ptr { [u8; 64] }, !42
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr [u8; 64], v24, !44
        v26 = ptr_to_int v21 to u64, !45
        v27 = int_to_ptr v26 to ptr { [u8; 64] }, !46
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr [u8; 64], v28, !47
        v30 = const u64 64, !48
        v31 = asm(result, r2: v25, r3: v29, r4: v30) -> bool result, !50 {
            meq    result r2 r3 r4, !51
        }
        br play_0_block1(v31), !52

        play_0_block1(v32: bool):
        v33 = get_local ptr bool, _, !54
        v34 = get_local ptr { [u8; 64] }, secp256k1, !56
        v35 = load v34, !36
        v36 = get_local ptr { { { u64, u64 }, u64 } }, message, !58
        v37 = load v36, !36
        v38 = call address_7(v35, v37), !61
        v39 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !63
        store v38 to v39, !64
        v40 = get_local ptr { [u8; 64] }, secp256k1, !66
        v41 = load v40, !36
        v42 = get_local ptr { { { u64, u64 }, u64 } }, message, !68
        v43 = load v42, !36
        v44 = call address_7(v41, v43), !71
        v45 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !73
        store v44 to v45, !74
        v46 = const unit ()
        br block0(v46), !36

        block0(v47: ()):
        v48 = const unit ()
        ret () v48
    }

    pub fn play_0() -> (), !77 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !78
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !10
        store v0 to v1, !10
        v2 = get_local ptr [u8; 64], __anon_0, !79
        v3 = const u64 0
        br new_5_array_init_loop(v3), !80

        new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !80
        v6 = const u8 0, !19
        store v6 to v5, !81
        v7 = const u64 1
        v8 = add v4, v7, !80
        v9 = const u64 64
        v10 = cmp lt v8 v9, !80
        cbr v10, new_5_array_init_loop(v8), new_5_array_init_exit(), !80

        new_5_array_init_exit():
        v11 = load v2, !80
        v12 = get_local ptr { [u8; 64] }, __anon_1, !82
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !80
        store v11 to v14, !83
        v15 = load v12, !80
        br block0(v15), !80

        block0(v16: { [u8; 64] }):
        v17 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v16 to v17, !31
        v18 = get_local ptr { [u8; 64] }, secp256k1, !34
        v19 = load v18
        v20 = get_local ptr { [u8; 64] }, secp256k1, !37
        v21 = load v20
        v22 = ptr_to_int v19 to u64, !84
        v23 = int_to_ptr v22 to ptr { [u8; 64] }, !84
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr [u8; 64], v24, !85
        v26 = ptr_to_int v21 to u64, !84
        v27 = int_to_ptr v26 to ptr { [u8; 64] }, !84
        v28 = const u64 0
        v29 = get_elem_ptr v27, ptr [u8; 64], v28, !86
        v30 = const u64 64, !48
        v31 = asm(result, r2: v25, r3: v29, r4: v30) -> bool result, !87 {
            meq    result r2 r3 r4, !51
        }
        br block1(v31), !84

        block1(v32: bool):
        v33 = get_local ptr bool, _, !53
        v34 = get_local ptr { [u8; 64] }, secp256k1, !55
        v35 = load v34
        v36 = get_local ptr { { { u64, u64 }, u64 } }, message, !57
        v37 = load v36
        v38 = call address_7(v35, v37), !88
        v39 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !62
        store v38 to v39, !62
        v40 = get_local ptr { [u8; 64] }, secp256k1, !65
        v41 = load v40
        v42 = get_local ptr { { { u64, u64 }, u64 } }, message, !67
        v43 = load v42
        v44 = call address_7(v41, v43), !89
        v45 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !72
        store v44 to v45, !72
        v46 = const unit ()
        ret () v46
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !93 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry():
        v0 = const u64 0, !94
        v1 = asm(size: v0) -> u64 hp, !101 {
            aloc   size, !102
        }
        br new_3_block0(v1), !103

        new_3_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_00, !105
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !106
        store v2 to v5, !107
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !106
        v8 = const u64 0, !108
        store v8 to v7, !109
        v9 = load v3, !106
        br block0(v9), !106

        block0(v10: { u64, u64 }):
        v11 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !110
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { u64, u64 }, v12
        store v10 to v13, !110
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14
        v16 = const u64 0, !111
        store v16 to v15, !110
        v17 = load v11
        ret { { u64, u64 }, u64 } v17
    }

    pub fn new_3() -> { u64, u64 }, !114 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !94
        v1 = asm(size: v0) -> u64 hp, !115 {
            aloc   size, !102
        }
        br block0(v1), !116

        block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_0, !104
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4
        store v2 to v5, !104
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6
        v8 = const u64 0, !108
        store v8 to v7, !104
        v9 = load v3
        ret { u64, u64 } v9
    }

    pub fn alloc_bytes_4(count !117: u64) -> u64, !120 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !100 {
            aloc   size, !102
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !123 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !15
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !19
        store v4 to v3, !15
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !25
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !25
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !124: { [u8; 64] }, other !125: { [u8; 64] }) -> bool, !129 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !43
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !43
        v8 = const u64 64, !48
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !49 {
            meq    result r2 r3 r4, !51
        }
        ret bool v9
    }

    pub fn address_7(self !130: { [u8; 64] }, message !131: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !134 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !139
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !140
        v3 = const u64 0, !138
        store v3 to v2, !141
        v4 = ptr_to_int message to u64, !144
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !145
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !148
        v8 = load v7, !149
        v9 = call len_20(v8), !152
        v10 = const u64 32, !153
        v11 = cmp eq v9 v10, !159
        br recover_8_try_into_17_neq_18_block0(v11), !160

        recover_8_try_into_17_neq_18_block0(v12: bool):
        v13 = const bool false, !161
        v14 = cmp eq v12 v13, !164
        br recover_8_try_into_17_neq_18_block1(v14), !165

        recover_8_try_into_17_neq_18_block1(v15: bool):
        br recover_8_try_into_17_block3(v15), !166

        recover_8_try_into_17_block3(v16: bool):
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !167

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !170
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !171
        v20 = const u64 0, !169
        store v20 to v19, !172
        v21 = load v17, !173
        br recover_8_block0(v21), !175

        recover_8_try_into_17_block1():
        v22 = const unit ()
        br recover_8_try_into_17_block2(v22), !176

        recover_8_try_into_17_block2(v23: ()):
        v24 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !177
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !178
        v27 = const u64 1, !169
        store v27 to v26, !179
        v28 = ptr_to_int message to u64, !180
        v29 = int_to_ptr v28 to ptr { { { u64, u64 }, u64 } }, !181
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { { u64, u64 }, u64 }, v30, !182
        v32 = load v31, !183
        v33 = call ptr_21(v32), !186
        v34 = asm(bits: v33) -> b256 bits, !188 {
        }
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v24, ptr b256, v35, v36, !189
        store v34 to v37, !190
        v38 = load v24, !191
        br recover_8_block0(v38), !192

        recover_8_block0(v39: { u64, ( () | b256 ) }):
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !196
        store v39 to v40, !197
        v41 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !199
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !200
        v44 = load v43, !201
        v45 = const u64 1, !198
        v46 = cmp eq v44 v45, !204
        br recover_8_unwrap_14_block3(v46), !205

        recover_8_unwrap_14_block3(v47: bool):
        cbr v47, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !206

        recover_8_unwrap_14_block0():
        v48 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !207
        v49 = const u64 1
        v50 = const u64 1
        v51 = get_elem_ptr v48, ptr b256, v49, v50, !208
        v52 = load v51, !209
        v53 = get_local ptr b256, inner_value, !211
        store v52 to v53, !212
        v54 = get_local ptr b256, inner_value, !214
        v55 = load v54, !215
        br recover_8_unwrap_14_block2(v55), !216

        recover_8_unwrap_14_block1():
        v56 = const u64 0, !217
        revert v56, !222

        recover_8_unwrap_14_block4(v57: never):
        br recover_8_unwrap_14_block2(v57), !223

        recover_8_unwrap_14_block2(v58: b256):
        br recover_8_block1(v58), !224

        recover_8_block1(v59: b256):
        v60 = const u64 32, !225
        v61 = asm(size: v60) -> u64 hp, !237 {
            aloc   size, !102
        }
        br recover_8_from_9_from_10_with_capacity_11_with_capacity_12_block0(v61), !238

        recover_8_from_9_from_10_with_capacity_11_with_capacity_12_block0(v62: u64):
        v63 = get_local ptr { u64, u64 }, __anon_00000, !240
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !241
        store v62 to v65, !242
        v66 = const u64 1
        v67 = get_elem_ptr v63, ptr u64, v66, !243
        store v60 to v67, !244
        v68 = load v63, !245
        br recover_8_from_9_from_10_with_capacity_11_block0(v68), !246

        recover_8_from_9_from_10_with_capacity_11_block0(v69: { u64, u64 }):
        v70 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !248
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr { u64, u64 }, v71, !249
        store v69 to v72, !250
        v73 = const u64 1
        v74 = get_elem_ptr v70, ptr u64, v73, !251
        v75 = const u64 0, !252
        store v75 to v74, !253
        v76 = load v70, !254
        br recover_8_from_9_from_10_block0(v76), !255

        recover_8_from_9_from_10_block0(v77: { { u64, u64 }, u64 }):
        v78 = get_local ptr { { u64, u64 }, u64 }, bytes, !257
        store v77 to v78, !258
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !260
        v80 = const u64 1
        v81 = get_elem_ptr v79, ptr u64, v80, !261
        v82 = const u64 32, !262
        store v82 to v81, !263
        v83 = ptr_to_int v59 to u64, !265
        v84 = get_local ptr { { u64, u64 }, u64 }, bytes, !267
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { u64, u64 }, v85, !269
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !271
        v89 = load v88, !272
        v90 = const u64 32, !273
        v91 = asm(dst: v89, src: v83, len: v90) -> (), !278 {
            mcp    dst src len, !279
        }
        v92 = const unit ()
        br recover_8_from_9_from_10_block1(v92), !280

        recover_8_from_9_from_10_block1(v93: ()):
        v94 = get_local ptr { { u64, u64 }, u64 }, bytes, !282
        v95 = load v94, !283
        br recover_8_from_9_block0(v95), !284

        recover_8_from_9_block0(v96: { { u64, u64 }, u64 }):
        v97 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !286
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr { { u64, u64 }, u64 }, v98, !287
        store v96 to v99, !288
        v100 = load v97, !289
        br recover_8_block2(v100), !290

        recover_8_block2(v101: { { { u64, u64 }, u64 } }):
        v102 = const u64 1
        v103 = const u64 0
        v104 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v102, v103, !291
        store v101 to v104, !292
        v105 = load v0, !293
        br block6(v105), !293

        block6(v106: { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }):
        v107 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !294
        store v106 to v107, !294
        v108 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !135
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u64, v109, !135
        v111 = load v110
        v112 = const u64 0, !135
        v113 = cmp eq v111 v112, !297
        br block7(v113), !297

        block7(v114: bool):
        cbr v114, block0(), block1(), !295

        block0():
        v115 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !135
        v116 = const u64 1
        v117 = const u64 0
        v118 = get_elem_ptr v115, ptr { { { u64, u64 }, u64 } }, v116, v117
        v119 = load v118
        v120 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !298
        store v119 to v120, !298
        v121 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !138
        v122 = const u64 0
        v123 = get_elem_ptr v121, ptr u64, v122, !138
        v124 = const u64 0, !138
        store v124 to v123, !138
        v125 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !299
        v126 = load v125
        v127 = call sha256_24(v126), !302
        v128 = get_local ptr { b256 }, __anon_02, !307
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr b256, v129, !308
        store v127 to v130, !309
        v131 = load v128, !308
        br block8(v131), !308

        block8(v132: { b256 }):
        v133 = const u64 1
        v134 = const u64 0
        v135 = get_elem_ptr v121, ptr { b256 }, v133, v134, !138
        store v132 to v135, !138
        v136 = load v121
        br block5(v136)

        block1():
        v137 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !135
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !135
        v140 = load v139
        v141 = const u64 1, !135
        v142 = cmp eq v140 v141, !312
        br block9(v142), !312

        block9(v143: bool):
        cbr v143, block2(), block3(), !310

        block2():
        v144 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !135
        v145 = const u64 1
        v146 = const u64 1
        v147 = get_elem_ptr v144, ptr { u64 }, v145, v146
        v148 = load v147
        v149 = get_local ptr { u64 }, e, !313
        store v148 to v149, !313
        v150 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !138
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr u64, v151, !138
        v153 = const u64 1, !138
        store v153 to v152, !138
        v154 = get_local ptr { u64 }, e, !314
        v155 = load v154
        v156 = const u64 1
        v157 = const u64 1
        v158 = get_elem_ptr v150, ptr { u64 }, v156, v157, !138
        store v155 to v158, !138
        v159 = load v150
        br block4(v159)

        block3():
        v160 = const u64 14757395258967588866, !294
        revert v160, !294

        block4(v161: { u64, ( { b256 } | { u64 } ) }):
        br block5(v161)

        block5(v162: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v162
    }

    pub fn recover_8(self !315: { [u8; 64] }, message !316: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !319 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0
        local { u64, ( () | b256 ) } __anon_00
        local { { u64, u64 }, u64 } __anon_000
        local { u64, u64 } __anon_0000
        local { { { u64, u64 }, u64 } } __anon_01
        local { u64, ( () | b256 ) } __anon_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local b256 inner_value

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !138
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !138
        v3 = const u64 0, !138
        store v3 to v2, !138
        v4 = ptr_to_int message to u64, !320
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !320
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !321
        v8 = load v7, !320
        v9 = call len_20(v8), !322
        v10 = const u64 32, !153
        v11 = cmp eq v9 v10, !323
        br try_into_17_neq_18_block0(v11), !324

        try_into_17_neq_18_block0(v12: bool):
        v13 = const bool false, !161
        v14 = cmp eq v12 v13, !325
        br try_into_17_neq_18_block1(v14), !326

        try_into_17_neq_18_block1(v15: bool):
        br try_into_17_block3(v15), !327

        try_into_17_block3(v16: bool):
        cbr v16, try_into_17_block0(), try_into_17_block1(), !328

        try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_00, !329
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !330
        v20 = const u64 0, !169
        store v20 to v19, !331
        v21 = load v17, !320
        br block0(v21), !332

        try_into_17_block1():
        v22 = const unit ()
        br try_into_17_block2(v22), !320

        try_into_17_block2(v23: ()):
        v24 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !333
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr u64, v25, !334
        v27 = const u64 1, !169
        store v27 to v26, !335
        v28 = ptr_to_int message to u64, !320
        v29 = int_to_ptr v28 to ptr { { { u64, u64 }, u64 } }, !320
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr { { u64, u64 }, u64 }, v30, !336
        v32 = load v31, !320
        v33 = call ptr_21(v32), !337
        v34 = asm(bits: v33) -> b256 bits, !338 {
        }
        v35 = const u64 1
        v36 = const u64 1
        v37 = get_elem_ptr v24, ptr b256, v35, v36, !339
        store v34 to v37, !340
        v38 = load v24, !320
        br block0(v38), !320

        block0(v39: { u64, ( () | b256 ) }):
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !341
        store v39 to v40, !342
        v41 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !343
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !344
        v44 = load v43, !345
        v45 = const u64 1, !198
        v46 = cmp eq v44 v45, !346
        br unwrap_14_block3(v46), !347

        unwrap_14_block3(v47: bool):
        cbr v47, unwrap_14_block0(), unwrap_14_block1(), !348

        unwrap_14_block0():
        v48 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !349
        v49 = const u64 1
        v50 = const u64 1
        v51 = get_elem_ptr v48, ptr b256, v49, v50, !345
        v52 = load v51, !345
        v53 = get_local ptr b256, inner_value, !350
        store v52 to v53, !351
        v54 = get_local ptr b256, inner_value, !352
        v55 = load v54, !345
        br unwrap_14_block2(v55), !345

        unwrap_14_block1():
        v56 = const u64 0, !217
        revert v56, !353

        unwrap_14_block4(v57: never):
        br unwrap_14_block2(v57), !345

        unwrap_14_block2(v58: b256):
        br block1(v58), !345

        block1(v59: b256):
        v60 = const u64 32, !225
        v61 = asm(size: v60) -> u64 hp, !354 {
            aloc   size, !102
        }
        br from_9_from_10_with_capacity_11_with_capacity_12_block0(v61), !355

        from_9_from_10_with_capacity_11_with_capacity_12_block0(v62: u64):
        v63 = get_local ptr { u64, u64 }, __anon_0000, !356
        v64 = const u64 0
        v65 = get_elem_ptr v63, ptr u64, v64, !357
        store v62 to v65, !358
        v66 = const u64 1
        v67 = get_elem_ptr v63, ptr u64, v66, !359
        store v60 to v67, !360
        v68 = load v63, !361
        br from_9_from_10_with_capacity_11_block0(v68), !362

        from_9_from_10_with_capacity_11_block0(v69: { u64, u64 }):
        v70 = get_local ptr { { u64, u64 }, u64 }, __anon_000, !363
        v71 = const u64 0
        v72 = get_elem_ptr v70, ptr { u64, u64 }, v71, !364
        store v69 to v72, !365
        v73 = const u64 1
        v74 = get_elem_ptr v70, ptr u64, v73, !366
        v75 = const u64 0, !252
        store v75 to v74, !367
        v76 = load v70, !368
        br from_9_from_10_block0(v76), !369

        from_9_from_10_block0(v77: { { u64, u64 }, u64 }):
        v78 = get_local ptr { { u64, u64 }, u64 }, bytes, !370
        store v77 to v78, !371
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !372
        v80 = const u64 1
        v81 = get_elem_ptr v79, ptr u64, v80, !373
        v82 = const u64 32, !262
        store v82 to v81, !374
        v83 = ptr_to_int v59 to u64, !375
        v84 = get_local ptr { { u64, u64 }, u64 }, bytes, !376
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { u64, u64 }, v85, !377
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !378
        v89 = load v88, !379
        v90 = const u64 32, !273
        v91 = asm(dst: v89, src: v83, len: v90) -> (), !380 {
            mcp    dst src len, !279
        }
        v92 = const unit ()
        br from_9_from_10_block1(v92), !381

        from_9_from_10_block1(v93: ()):
        v94 = get_local ptr { { u64, u64 }, u64 }, bytes, !382
        v95 = load v94, !383
        br from_9_block0(v95), !384

        from_9_block0(v96: { { u64, u64 }, u64 }):
        v97 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !385
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr { { u64, u64 }, u64 }, v98, !386
        store v96 to v99, !387
        v100 = load v97, !386
        br block2(v100), !386

        block2(v101: { { { u64, u64 }, u64 } }):
        v102 = const u64 1
        v103 = const u64 0
        v104 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v102, v103, !138
        store v101 to v104, !138
        v105 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v105
    }

    pub fn from_9(bits !388: b256) -> { { { u64, u64 }, u64 } }, !391 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local mut { { u64, u64 }, u64 } bytes

        entry(bits: b256):
        v0 = const u64 32, !225
        v1 = asm(size: v0) -> u64 hp, !392 {
            aloc   size, !102
        }
        br from_10_with_capacity_11_with_capacity_12_block0(v1), !393

        from_10_with_capacity_11_with_capacity_12_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_000, !394
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !395
        store v2 to v5, !396
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !397
        store v0 to v7, !398
        v8 = load v3, !399
        br from_10_with_capacity_11_block0(v8), !400

        from_10_with_capacity_11_block0(v9: { u64, u64 }):
        v10 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !401
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { u64, u64 }, v11, !402
        store v9 to v12, !403
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13, !404
        v15 = const u64 0, !252
        store v15 to v14, !405
        v16 = load v10, !406
        br from_10_block0(v16), !407

        from_10_block0(v17: { { u64, u64 }, u64 }):
        v18 = get_local ptr { { u64, u64 }, u64 }, bytes, !408
        store v17 to v18, !409
        v19 = get_local ptr { { u64, u64 }, u64 }, bytes, !410
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr u64, v20, !411
        v22 = const u64 32, !262
        store v22 to v21, !412
        v23 = ptr_to_int bits to u64, !413
        v24 = get_local ptr { { u64, u64 }, u64 }, bytes, !414
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, u64 }, v25, !415
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !416
        v29 = load v28, !417
        v30 = const u64 32, !273
        v31 = asm(dst: v29, src: v23, len: v30) -> (), !418 {
            mcp    dst src len, !279
        }
        v32 = const unit ()
        br from_10_block1(v32), !419

        from_10_block1(v33: ()):
        v34 = get_local ptr { { u64, u64 }, u64 }, bytes, !420
        v35 = load v34, !417
        br block0(v35), !417

        block0(v36: { { u64, u64 }, u64 }):
        v37 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !285
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { { u64, u64 }, u64 }, v38
        store v36 to v39, !285
        v40 = load v37
        ret { { { u64, u64 }, u64 } } v40
    }

    pub fn from_10(b !421: b256) -> { { u64, u64 }, u64 }, !424 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !225
        v1 = asm(size: v0) -> u64 hp, !425 {
            aloc   size, !102
        }
        br with_capacity_11_with_capacity_12_block0(v1), !426

        with_capacity_11_with_capacity_12_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_00, !427
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !428
        store v2 to v5, !429
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !430
        store v0 to v7, !431
        v8 = load v3, !432
        br with_capacity_11_block0(v8), !433

        with_capacity_11_block0(v9: { u64, u64 }):
        v10 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !434
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { u64, u64 }, v11, !435
        store v9 to v12, !436
        v13 = const u64 1
        v14 = get_elem_ptr v10, ptr u64, v13, !435
        v15 = const u64 0, !252
        store v15 to v14, !437
        v16 = load v10, !435
        br block0(v16), !435

        block0(v17: { { u64, u64 }, u64 }):
        v18 = get_local ptr { { u64, u64 }, u64 }, bytes, !256
        store v17 to v18, !256
        v19 = get_local ptr { { u64, u64 }, u64 }, bytes, !259
        v20 = const u64 1
        v21 = get_elem_ptr v19, ptr u64, v20, !259
        v22 = const u64 32, !262
        store v22 to v21, !259
        v23 = ptr_to_int b to u64, !264
        v24 = get_local ptr { { u64, u64 }, u64 }, bytes, !266
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { u64, u64 }, v25, !268
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr u64, v27, !270
        v29 = load v28
        v30 = const u64 32, !273
        v31 = asm(dst: v29, src: v23, len: v30) -> (), !438 {
            mcp    dst src len, !279
        }
        v32 = const unit ()
        br block1(v32), !439

        block1(v33: ()):
        v34 = get_local ptr { { u64, u64 }, u64 }, bytes, !281
        v35 = load v34
        ret { { u64, u64 }, u64 } v35
    }

    pub fn with_capacity_11(capacity !440: u64) -> { { u64, u64 }, u64 }, !443 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !444 {
            aloc   size, !102
        }
        br with_capacity_12_block0(v0), !445

        with_capacity_12_block0(v1: u64):
        v2 = get_local ptr { u64, u64 }, __anon_00, !446
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !447
        store v1 to v4, !448
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !447
        store capacity to v6, !449
        v7 = load v2, !447
        br block0(v7), !447

        block0(v8: { u64, u64 }):
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !247
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10
        store v8 to v11, !247
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 0, !252
        store v14 to v13, !247
        v15 = load v9
        ret { { u64, u64 }, u64 } v15
    }

    pub fn with_capacity_12(capacity !450: u64) -> { u64, u64 }, !453 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !454 {
            aloc   size, !102
        }
        br block0(v0), !455

        block0(v1: u64):
        v2 = get_local ptr { u64, u64 }, __anon_0, !239
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !239
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        store capacity to v6, !239
        v7 = load v2
        ret { u64, u64 } v7
    }

    pub fn copy_bytes_to_13(self !456: u64, dst !457: u64, count !458: u64) -> (), !461 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !277 {
            mcp    dst src len, !279
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !462: { u64, ( () | b256 ) }) -> b256, !465 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !195
        store self to v0, !195
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !198
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !198
        v4 = load v3
        v5 = const u64 1, !198
        v6 = cmp eq v4 v5, !466
        br block3(v6), !466

        block3(v7: bool):
        cbr v7, block0(), block1(), !202

        block0():
        v8 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !198
        v9 = const u64 1
        v10 = const u64 1
        v11 = get_elem_ptr v8, ptr b256, v9, v10
        v12 = load v11
        v13 = get_local ptr b256, inner_value, !210
        store v12 to v13, !210
        v14 = get_local ptr b256, inner_value, !213
        v15 = load v14
        br block2(v15)

        block1():
        v16 = const u64 0, !217
        revert v16, !467

        block4(v17: never):
        br block2(v17)

        block2(v18: b256):
        ret b256 v18
    }

    pub fn eq_15(self !468: u64, other !469: u64) -> bool, !472 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !473: u64) -> never, !476 {
        entry(code: u64):
        revert code, !221
    }

    pub fn try_into_17(self !477: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !480 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !147
        v4 = load v3
        v5 = call len_20(v4), !481
        v6 = const u64 32, !153
        v7 = cmp eq v5 v6, !482
        br neq_18_block0(v7), !483

        neq_18_block0(v8: bool):
        v9 = const bool false, !161
        v10 = cmp eq v8 v9, !484
        br neq_18_block1(v10), !485

        neq_18_block1(v11: bool):
        br block3(v11), !486

        block3(v12: bool):
        cbr v12, block0(), block1(), !154

        block0():
        v13 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !169
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr u64, v14, !169
        v16 = const u64 0, !169
        store v16 to v15, !169
        v17 = load v13
        ret { u64, ( () | b256 ) } v17, !174

        block1():
        v18 = const unit ()
        br block2(v18)

        block2(v19: ()):
        v20 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !169
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr u64, v21, !169
        v23 = const u64 1, !169
        store v23 to v22, !169
        v24 = ptr_to_int self to u64
        v25 = int_to_ptr v24 to ptr { { { u64, u64 }, u64 } }
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr { { u64, u64 }, u64 }, v26, !147
        v28 = load v27
        v29 = call ptr_21(v28), !487
        v30 = asm(bits: v29) -> b256 bits, !187 {
        }
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v20, ptr b256, v31, v32, !169
        store v30 to v33, !169
        v34 = load v20
        ret { u64, ( () | b256 ) } v34
    }

    pub fn neq_18(self !488: u64, other !489: u64) -> bool, !492 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other, !493
        br block0(v0), !493

        block0(v1: bool):
        v2 = const bool false, !161
        v3 = cmp eq v1 v2, !494
        br block1(v3), !494

        block1(v4: bool):
        ret bool v4
    }

    pub fn not_19(self !495: bool) -> bool, !498 {
        entry(self: bool):
        v0 = const bool false, !161
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !499: { { u64, u64 }, u64 }) -> u64, !502 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !503
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !504: { { u64, u64 }, u64 }) -> u64, !507 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !268
        v4 = load v3
        v5 = call ptr_22(v4), !510
        ret u64 v5
    }

    pub fn ptr_22(self !511: { u64, u64 }) -> u64, !514 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !270
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !515: b256) -> { b256 }, !518 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !306
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !306
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !520: { { { u64, u64 }, u64 } }) -> b256, !524 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local mut { { { u64, u64 }, u64 } } hasher
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !527
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !528
        store v0 to v1, !528
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !529
        v3 = ptr_to_int s to u64, !532
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !532
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !534
        v7 = load v6, !532
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !538
        v10 = ptr_to_int v7 to u64, !539
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !540
        v12 = load v11, !543
        v13 = call len_20(v12), !546
        v14 = get_local ptr u64, other_len, !548
        v15 = get_local ptr u64, other_len, !550
        v16 = const u64 0, !551
        v17 = cmp eq v13 v16, !554
        br hash_26_write_27_append_28_block9(v17), !555

        hash_26_write_27_append_28_block9(v18: bool):
        cbr v18, hash_26_write_27_append_28_block0(), hash_26_write_27_append_28_block1(), !556

        hash_26_write_27_append_28_block0():
        v19 = const unit (), !557
        br hash_26_write_27_block0(v19), !558

        hash_26_write_27_append_28_block1():
        v20 = const unit ()
        br hash_26_write_27_append_28_block2(v20), !559

        hash_26_write_27_append_28_block2(v21: ()):
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !560
        v24 = load v23, !561
        v25 = const u64 0, !562
        v26 = cmp eq v24 v25, !565
        br hash_26_write_27_append_28_block10(v26), !566

        hash_26_write_27_append_28_block10(v27: bool):
        cbr v27, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !567

        hash_26_write_27_append_28_block3():
        v28 = load v11, !568
        store v28 to v9, !570
        v29 = const unit (), !571
        br hash_26_write_27_block0(v29), !572

        hash_26_write_27_append_28_block4():
        v30 = const unit ()
        br hash_26_write_27_append_28_block5(v30), !573

        hash_26_write_27_append_28_block5(v31: ()):
        v32 = const u64 1
        v33 = get_elem_ptr v9, ptr u64, v32, !574
        v34 = load v33, !575
        v35 = get_local ptr u64, other_len, !577
        v36 = add v34, v13, !580
        br hash_26_write_27_append_28_block11(v36), !581

        hash_26_write_27_append_28_block11(v37: u64):
        v38 = get_local ptr u64, both_len, !583
        v39 = const u64 1
        v40 = get_elem_ptr v9, ptr u64, v39, !584
        v41 = load v40, !585
        v42 = get_local ptr u64, other_start, !587
        v43 = const u64 0
        v44 = get_elem_ptr v9, ptr { u64, u64 }, v43, !588
        v45 = load v44, !589
        v46 = call capacity_31(v45), !592
        v47 = get_local ptr u64, both_len, !594
        v48 = cmp lt v46 v37, !597
        br hash_26_write_27_append_28_block12(v48), !598

        hash_26_write_27_append_28_block12(v49: bool):
        cbr v49, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block7(), !599

        hash_26_write_27_append_28_block6():
        v50 = const u64 0
        v51 = get_elem_ptr v9, ptr { u64, u64 }, v50, !600
        v52 = load v51, !601
        v53 = call ptr_22(v52), !604
        v54 = const u64 0
        v55 = get_elem_ptr v9, ptr { u64, u64 }, v54, !605
        v56 = load v55, !606
        v57 = call capacity_31(v56), !609
        v58 = get_local ptr u64, both_len, !611
        v59 = cmp gt v37 v57, !616
        br hash_26_write_27_append_28_realloc_bytes_35_block6(v59), !617

        hash_26_write_27_append_28_realloc_bytes_35_block6(v60: bool):
        cbr v60, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block4(), !618

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v61 = asm(size: v37) -> u64 hp, !621 {
            aloc   size, !102
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block7(v61), !622

        hash_26_write_27_append_28_realloc_bytes_35_block7(v62: u64):
        v63 = get_local ptr u64, new_ptr0, !624
        v64 = const u64 0, !625
        v65 = cmp gt v57 v64, !628
        br hash_26_write_27_append_28_realloc_bytes_35_block8(v65), !629

        hash_26_write_27_append_28_realloc_bytes_35_block8(v66: bool):
        cbr v66, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block2(), !630

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v67 = get_local ptr u64, new_ptr0, !632
        v68 = asm(dst: v62, src: v53, len: v57) -> (), !635 {
            mcp    dst src len, !279
        }
        v69 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block9(v69), !636

        hash_26_write_27_append_28_realloc_bytes_35_block9(v70: ()):
        v71 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v71), !637

        hash_26_write_27_append_28_realloc_bytes_35_block2():
        v72 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v72), !638

        hash_26_write_27_append_28_realloc_bytes_35_block3(v73: ()):
        v74 = get_local ptr u64, new_ptr0, !640
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v62), !641

        hash_26_write_27_append_28_realloc_bytes_35_block4():
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v53), !642

        hash_26_write_27_append_28_realloc_bytes_35_block5(v75: u64):
        br hash_26_write_27_append_28_block13(v75), !643

        hash_26_write_27_append_28_block13(v76: u64):
        v77 = get_local ptr u64, both_len, !645
        v78 = const u64 1
        v79 = mul v37, v78, !651
        br hash_26_write_27_append_28_from_parts_32_block0(v79), !652

        hash_26_write_27_append_28_from_parts_32_block0(v80: u64):
        v81 = get_local ptr { u64, u64 }, __anon_0, !654
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr u64, v82, !655
        store v76 to v83, !656
        v84 = const u64 1
        v85 = get_elem_ptr v81, ptr u64, v84, !657
        store v80 to v85, !658
        v86 = load v81, !659
        v87 = asm(ptr: v86) -> slice ptr, !663 {
        }
        br hash_26_write_27_append_28_from_parts_32_block1(v87), !664

        hash_26_write_27_append_28_from_parts_32_block1(v88: slice):
        br hash_26_write_27_append_28_block14(v88), !665

        hash_26_write_27_append_28_block14(v89: slice):
        v90 = get_local ptr slice, new_slice, !667
        store v89 to v90, !668
        v91 = get_local ptr slice, new_slice, !670
        v92 = load v91, !671
        v93 = asm(ptr: v92) -> { u64, u64 } ptr, !679 {
        }
        br hash_26_write_27_append_28_from_37_number_of_bytes_38_block0(v93), !680

        hash_26_write_27_append_28_from_37_number_of_bytes_38_block0(v94: { u64, u64 }):
        v95 = get_local ptr { u64, u64 }, __anon_000, !681
        store v94 to v95, !682
        v96 = const u64 1
        v97 = get_elem_ptr v95, ptr u64, v96, !684
        v98 = load v97, !685
        br hash_26_write_27_append_28_from_37_block3(v98), !686

        hash_26_write_27_append_28_from_37_block3(v99: u64):
        v100 = get_local ptr u64, cap, !688
        v101 = get_local ptr u64, cap, !690
        v102 = asm(size: v99) -> u64 hp, !693 {
            aloc   size, !102
        }
        br hash_26_write_27_append_28_from_37_block4(v102), !694

        hash_26_write_27_append_28_from_37_block4(v103: u64):
        v104 = get_local ptr u64, ptr, !696
        v105 = get_local ptr u64, cap, !698
        v106 = const u64 0, !699
        v107 = cmp gt v99 v106, !702
        br hash_26_write_27_append_28_from_37_block5(v107), !703

        hash_26_write_27_append_28_from_37_block5(v108: bool):
        cbr v108, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block1(), !704

        hash_26_write_27_append_28_from_37_block0():
        v109 = asm(ptr: v92) -> { u64, u64 } ptr, !709 {
        }
        br hash_26_write_27_append_28_from_37_ptr_41_block0(v109), !710

        hash_26_write_27_append_28_from_37_ptr_41_block0(v110: { u64, u64 }):
        v111 = get_local ptr { u64, u64 }, __anon_01, !711
        store v110 to v111, !712
        v112 = const u64 0
        v113 = get_elem_ptr v111, ptr u64, v112, !714
        v114 = load v113, !715
        br hash_26_write_27_append_28_from_37_block6(v114), !716

        hash_26_write_27_append_28_from_37_block6(v115: u64):
        v116 = get_local ptr u64, ptr, !718
        v117 = get_local ptr u64, cap, !720
        v118 = const u64 1
        v119 = mul v99, v118, !725
        br hash_26_write_27_append_28_from_37_copy_to_40_block0(v119), !726

        hash_26_write_27_append_28_from_37_copy_to_40_block0(v120: u64):
        v121 = get_local ptr u64, len, !728
        v122 = get_local ptr u64, len, !730
        v123 = asm(dst: v103, src: v115, len: v120) -> (), !732 {
            mcp    dst src len, !733
        }
        v124 = const unit ()
        br hash_26_write_27_append_28_from_37_block7(v124), !734

        hash_26_write_27_append_28_from_37_block7(v125: ()):
        v126 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v126), !735

        hash_26_write_27_append_28_from_37_block1():
        v127 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v127), !736

        hash_26_write_27_append_28_from_37_block2(v128: ()):
        v129 = get_local ptr u64, ptr, !738
        v130 = get_local ptr u64, cap, !740
        v131 = get_local ptr { u64, u64 }, __anon_00, !742
        v132 = const u64 0
        v133 = get_elem_ptr v131, ptr u64, v132, !743
        store v103 to v133, !744
        v134 = const u64 1
        v135 = get_elem_ptr v131, ptr u64, v134, !745
        store v99 to v135, !746
        v136 = load v131, !747
        br hash_26_write_27_append_28_block15(v136), !748

        hash_26_write_27_append_28_block15(v137: { u64, u64 }):
        v138 = const u64 0
        v139 = get_elem_ptr v9, ptr { u64, u64 }, v138, !750
        store v137 to v139, !751
        v140 = const unit ()
        br hash_26_write_27_append_28_block8(v140), !752

        hash_26_write_27_append_28_block7():
        v141 = const unit ()
        br hash_26_write_27_append_28_block8(v141), !753

        hash_26_write_27_append_28_block8(v142: ()):
        v143 = const u64 0
        v144 = get_elem_ptr v9, ptr { u64, u64 }, v143, !754
        v145 = load v144, !755
        v146 = call ptr_22(v145), !758
        v147 = get_local ptr u64, other_start, !760
        v148 = asm(ptr: v146, offset: v41, new) -> u64 new, !764 {
            add    new ptr offset, !765
        }
        br hash_26_write_27_append_28_block16(v148), !766

        hash_26_write_27_append_28_block16(v149: u64):
        v150 = get_local ptr u64, new_ptr, !768
        v151 = load v11, !769
        v152 = call ptr_21(v151), !772
        v153 = get_local ptr u64, new_ptr, !774
        v154 = get_local ptr u64, other_len, !776
        v155 = asm(dst: v149, src: v152, len: v13) -> (), !779 {
            mcp    dst src len, !279
        }
        br hash_26_write_27_append_28_block17(v69), !780

        hash_26_write_27_append_28_block17(v156: ()):
        v157 = get_local ptr u64, both_len, !782
        v158 = const u64 1
        v159 = get_elem_ptr v9, ptr u64, v158, !784
        store v37 to v159, !785
        v160 = const unit ()
        br hash_26_write_27_block0(v160), !786

        hash_26_write_27_block0(v161: ()):
        v162 = const unit ()
        br hash_26_block0(v162), !787

        hash_26_block0(v163: ()):
        v164 = const unit ()
        br block0(v164), !532

        block0(v165: ()):
        v166 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !788
        v167 = load v166
        v168 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !790
        br sha256_43_block0(v168), !795

        sha256_43_block0(v169: b256):
        v170 = get_local ptr b256, result_buffer, !797
        store v169 to v170, !798
        v171 = get_local ptr b256, result_buffer, !800
        v172 = ptr_to_int v167 to u64, !801
        v173 = int_to_ptr v172 to ptr { { { u64, u64 }, u64 } }, !801
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr { { u64, u64 }, u64 }, v174, !802
        v176 = load v175, !801
        v177 = call ptr_21(v176), !805
        v178 = ptr_to_int v167 to u64, !801
        v179 = int_to_ptr v178 to ptr { { { u64, u64 }, u64 } }, !801
        v180 = const u64 0
        v181 = get_elem_ptr v179, ptr { { u64, u64 }, u64 }, v180, !806
        v182 = load v181, !801
        v183 = call len_20(v182), !809
        v184 = asm(hash: v171, ptr: v177, bytes: v183) -> b256 hash, !811 {
            s256   hash ptr bytes, !812
        }
        br block1(v184), !801

        block1(v185: b256):
        ret b256 v185
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !815 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !94
        v1 = asm(size: v0) -> u64 hp, !818 {
            aloc   size, !102
        }
        br new_2_new_3_block0(v1), !819

        new_2_new_3_block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_000, !820
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !821
        store v2 to v5, !822
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !823
        v8 = const u64 0, !108
        store v8 to v7, !824
        v9 = load v3, !825
        br new_2_block0(v9), !826

        new_2_block0(v10: { u64, u64 }):
        v11 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !827
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { u64, u64 }, v12, !828
        store v10 to v13, !829
        v14 = const u64 1
        v15 = get_elem_ptr v11, ptr u64, v14, !828
        v16 = const u64 0, !111
        store v16 to v15, !830
        v17 = load v11, !828
        br block0(v17), !828

        block0(v18: { { u64, u64 }, u64 }):
        v19 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !831
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { { u64, u64 }, u64 }, v20
        store v18 to v21, !831
        v22 = load v19
        ret { { { u64, u64 }, u64 } } v22
    }

    pub fn hash_26(self !832: { { { u64, u64 }, u64 } }, state !833: ptr { { { u64, u64 }, u64 } }) -> (), !836 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !533
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr state, ptr { { u64, u64 }, u64 }, v5, !837
        v7 = ptr_to_int v4 to u64, !838
        v8 = int_to_ptr v7 to ptr { { u64, u64 }, u64 }, !838
        v9 = load v8, !839
        v10 = call len_20(v9), !840
        v11 = get_local ptr u64, other_len, !841
        v12 = get_local ptr u64, other_len, !842
        v13 = const u64 0, !551
        v14 = cmp eq v10 v13, !843
        br write_27_append_28_block9(v14), !844

        write_27_append_28_block9(v15: bool):
        cbr v15, write_27_append_28_block0(), write_27_append_28_block1(), !845

        write_27_append_28_block0():
        v16 = const unit (), !557
        br write_27_block0(v16), !846

        write_27_append_28_block1():
        v17 = const unit ()
        br write_27_append_28_block2(v17), !847

        write_27_append_28_block2(v18: ()):
        v19 = const u64 1
        v20 = get_elem_ptr v6, ptr u64, v19, !848
        v21 = load v20, !849
        v22 = const u64 0, !562
        v23 = cmp eq v21 v22, !850
        br write_27_append_28_block10(v23), !851

        write_27_append_28_block10(v24: bool):
        cbr v24, write_27_append_28_block3(), write_27_append_28_block4(), !852

        write_27_append_28_block3():
        v25 = load v8, !853
        store v25 to v6, !854
        v26 = const unit (), !571
        br write_27_block0(v26), !855

        write_27_append_28_block4():
        v27 = const unit ()
        br write_27_append_28_block5(v27), !856

        write_27_append_28_block5(v28: ()):
        v29 = const u64 1
        v30 = get_elem_ptr v6, ptr u64, v29, !857
        v31 = load v30, !858
        v32 = get_local ptr u64, other_len, !859
        v33 = add v31, v10, !860
        br write_27_append_28_block11(v33), !861

        write_27_append_28_block11(v34: u64):
        v35 = get_local ptr u64, both_len, !862
        v36 = const u64 1
        v37 = get_elem_ptr v6, ptr u64, v36, !863
        v38 = load v37, !864
        v39 = get_local ptr u64, other_start, !865
        v40 = const u64 0
        v41 = get_elem_ptr v6, ptr { u64, u64 }, v40, !866
        v42 = load v41, !867
        v43 = call capacity_31(v42), !868
        v44 = get_local ptr u64, both_len, !869
        v45 = cmp lt v43 v34, !870
        br write_27_append_28_block12(v45), !871

        write_27_append_28_block12(v46: bool):
        cbr v46, write_27_append_28_block6(), write_27_append_28_block7(), !872

        write_27_append_28_block6():
        v47 = const u64 0
        v48 = get_elem_ptr v6, ptr { u64, u64 }, v47, !873
        v49 = load v48, !874
        v50 = call ptr_22(v49), !875
        v51 = const u64 0
        v52 = get_elem_ptr v6, ptr { u64, u64 }, v51, !876
        v53 = load v52, !877
        v54 = call capacity_31(v53), !878
        v55 = get_local ptr u64, both_len, !879
        v56 = cmp gt v34 v54, !880
        br write_27_append_28_realloc_bytes_35_block6(v56), !881

        write_27_append_28_realloc_bytes_35_block6(v57: bool):
        cbr v57, write_27_append_28_realloc_bytes_35_block0(), write_27_append_28_realloc_bytes_35_block4(), !882

        write_27_append_28_realloc_bytes_35_block0():
        v58 = asm(size: v34) -> u64 hp, !883 {
            aloc   size, !102
        }
        br write_27_append_28_realloc_bytes_35_block7(v58), !884

        write_27_append_28_realloc_bytes_35_block7(v59: u64):
        v60 = get_local ptr u64, new_ptr0, !885
        v61 = const u64 0, !625
        v62 = cmp gt v54 v61, !886
        br write_27_append_28_realloc_bytes_35_block8(v62), !887

        write_27_append_28_realloc_bytes_35_block8(v63: bool):
        cbr v63, write_27_append_28_realloc_bytes_35_block1(), write_27_append_28_realloc_bytes_35_block2(), !888

        write_27_append_28_realloc_bytes_35_block1():
        v64 = get_local ptr u64, new_ptr0, !889
        v65 = asm(dst: v59, src: v50, len: v54) -> (), !890 {
            mcp    dst src len, !279
        }
        v66 = const unit ()
        br write_27_append_28_realloc_bytes_35_block9(v66), !891

        write_27_append_28_realloc_bytes_35_block9(v67: ()):
        v68 = const unit ()
        br write_27_append_28_realloc_bytes_35_block3(v68), !892

        write_27_append_28_realloc_bytes_35_block2():
        v69 = const unit ()
        br write_27_append_28_realloc_bytes_35_block3(v69), !893

        write_27_append_28_realloc_bytes_35_block3(v70: ()):
        v71 = get_local ptr u64, new_ptr0, !894
        br write_27_append_28_realloc_bytes_35_block5(v59), !895

        write_27_append_28_realloc_bytes_35_block4():
        br write_27_append_28_realloc_bytes_35_block5(v50), !896

        write_27_append_28_realloc_bytes_35_block5(v72: u64):
        br write_27_append_28_block13(v72), !897

        write_27_append_28_block13(v73: u64):
        v74 = get_local ptr u64, both_len, !898
        v75 = const u64 1
        v76 = mul v34, v75, !899
        br write_27_append_28_from_parts_32_block0(v76), !900

        write_27_append_28_from_parts_32_block0(v77: u64):
        v78 = get_local ptr { u64, u64 }, __anon_0, !901
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr u64, v79, !902
        store v73 to v80, !903
        v81 = const u64 1
        v82 = get_elem_ptr v78, ptr u64, v81, !904
        store v77 to v82, !905
        v83 = load v78, !906
        v84 = asm(ptr: v83) -> slice ptr, !907 {
        }
        br write_27_append_28_from_parts_32_block1(v84), !908

        write_27_append_28_from_parts_32_block1(v85: slice):
        br write_27_append_28_block14(v85), !909

        write_27_append_28_block14(v86: slice):
        v87 = get_local ptr slice, new_slice, !910
        store v86 to v87, !911
        v88 = get_local ptr slice, new_slice, !912
        v89 = load v88, !913
        v90 = asm(ptr: v89) -> { u64, u64 } ptr, !914 {
        }
        br write_27_append_28_from_37_number_of_bytes_38_block0(v90), !915

        write_27_append_28_from_37_number_of_bytes_38_block0(v91: { u64, u64 }):
        v92 = get_local ptr { u64, u64 }, __anon_000, !916
        store v91 to v92, !917
        v93 = const u64 1
        v94 = get_elem_ptr v92, ptr u64, v93, !918
        v95 = load v94, !919
        br write_27_append_28_from_37_block3(v95), !920

        write_27_append_28_from_37_block3(v96: u64):
        v97 = get_local ptr u64, cap, !921
        v98 = get_local ptr u64, cap, !922
        v99 = asm(size: v96) -> u64 hp, !923 {
            aloc   size, !102
        }
        br write_27_append_28_from_37_block4(v99), !924

        write_27_append_28_from_37_block4(v100: u64):
        v101 = get_local ptr u64, ptr, !925
        v102 = get_local ptr u64, cap, !926
        v103 = const u64 0, !699
        v104 = cmp gt v96 v103, !927
        br write_27_append_28_from_37_block5(v104), !928

        write_27_append_28_from_37_block5(v105: bool):
        cbr v105, write_27_append_28_from_37_block0(), write_27_append_28_from_37_block1(), !929

        write_27_append_28_from_37_block0():
        v106 = asm(ptr: v89) -> { u64, u64 } ptr, !930 {
        }
        br write_27_append_28_from_37_ptr_41_block0(v106), !931

        write_27_append_28_from_37_ptr_41_block0(v107: { u64, u64 }):
        v108 = get_local ptr { u64, u64 }, __anon_01, !932
        store v107 to v108, !933
        v109 = const u64 0
        v110 = get_elem_ptr v108, ptr u64, v109, !934
        v111 = load v110, !935
        br write_27_append_28_from_37_block6(v111), !936

        write_27_append_28_from_37_block6(v112: u64):
        v113 = get_local ptr u64, ptr, !937
        v114 = get_local ptr u64, cap, !938
        v115 = const u64 1
        v116 = mul v96, v115, !939
        br write_27_append_28_from_37_copy_to_40_block0(v116), !940

        write_27_append_28_from_37_copy_to_40_block0(v117: u64):
        v118 = get_local ptr u64, len, !941
        v119 = get_local ptr u64, len, !942
        v120 = asm(dst: v100, src: v112, len: v117) -> (), !943 {
            mcp    dst src len, !733
        }
        v121 = const unit ()
        br write_27_append_28_from_37_block7(v121), !944

        write_27_append_28_from_37_block7(v122: ()):
        v123 = const unit ()
        br write_27_append_28_from_37_block2(v123), !945

        write_27_append_28_from_37_block1():
        v124 = const unit ()
        br write_27_append_28_from_37_block2(v124), !946

        write_27_append_28_from_37_block2(v125: ()):
        v126 = get_local ptr u64, ptr, !947
        v127 = get_local ptr u64, cap, !948
        v128 = get_local ptr { u64, u64 }, __anon_00, !949
        v129 = const u64 0
        v130 = get_elem_ptr v128, ptr u64, v129, !950
        store v100 to v130, !951
        v131 = const u64 1
        v132 = get_elem_ptr v128, ptr u64, v131, !952
        store v96 to v132, !953
        v133 = load v128, !954
        br write_27_append_28_block15(v133), !955

        write_27_append_28_block15(v134: { u64, u64 }):
        v135 = const u64 0
        v136 = get_elem_ptr v6, ptr { u64, u64 }, v135, !956
        store v134 to v136, !957
        v137 = const unit ()
        br write_27_append_28_block8(v137), !958

        write_27_append_28_block7():
        v138 = const unit ()
        br write_27_append_28_block8(v138), !959

        write_27_append_28_block8(v139: ()):
        v140 = const u64 0
        v141 = get_elem_ptr v6, ptr { u64, u64 }, v140, !960
        v142 = load v141, !961
        v143 = call ptr_22(v142), !962
        v144 = get_local ptr u64, other_start, !963
        v145 = asm(ptr: v143, offset: v38, new) -> u64 new, !964 {
            add    new ptr offset, !765
        }
        br write_27_append_28_block16(v145), !965

        write_27_append_28_block16(v146: u64):
        v147 = get_local ptr u64, new_ptr, !966
        v148 = load v8, !967
        v149 = call ptr_21(v148), !968
        v150 = get_local ptr u64, new_ptr, !969
        v151 = get_local ptr u64, other_len, !970
        v152 = asm(dst: v146, src: v149, len: v10) -> (), !971 {
            mcp    dst src len, !279
        }
        br write_27_append_28_block17(v66), !972

        write_27_append_28_block17(v153: ()):
        v154 = get_local ptr u64, both_len, !973
        v155 = const u64 1
        v156 = get_elem_ptr v6, ptr u64, v155, !974
        store v34 to v156, !975
        v157 = const unit ()
        br write_27_block0(v157), !976

        write_27_block0(v158: ()):
        v159 = const unit ()
        br block0(v159), !838

        block0(v160: ()):
        v161 = const unit ()
        ret () v161
    }

    pub fn write_27(self !977: ptr { { { u64, u64 }, u64 } }, bytes !978: { { u64, u64 }, u64 }) -> (), !981 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !537
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !982
        v5 = call len_20(v4), !983
        v6 = get_local ptr u64, other_len, !984
        v7 = get_local ptr u64, other_len, !985
        v8 = const u64 0, !551
        v9 = cmp eq v5 v8, !986
        br append_28_block9(v9), !987

        append_28_block9(v10: bool):
        cbr v10, append_28_block0(), append_28_block1(), !988

        append_28_block0():
        v11 = const unit (), !557
        br block0(v11), !989

        append_28_block1():
        v12 = const unit ()
        br append_28_block2(v12), !982

        append_28_block2(v13: ()):
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v14, !990
        v16 = load v15, !982
        v17 = const u64 0, !562
        v18 = cmp eq v16 v17, !991
        br append_28_block10(v18), !992

        append_28_block10(v19: bool):
        cbr v19, append_28_block3(), append_28_block4(), !993

        append_28_block3():
        v20 = load v3, !982
        store v20 to v1, !994
        v21 = const unit (), !571
        br block0(v21), !995

        append_28_block4():
        v22 = const unit ()
        br append_28_block5(v22), !982

        append_28_block5(v23: ()):
        v24 = const u64 1
        v25 = get_elem_ptr v1, ptr u64, v24, !996
        v26 = load v25, !982
        v27 = get_local ptr u64, other_len, !997
        v28 = add v26, v5, !998
        br append_28_block11(v28), !999

        append_28_block11(v29: u64):
        v30 = get_local ptr u64, both_len, !1000
        v31 = const u64 1
        v32 = get_elem_ptr v1, ptr u64, v31, !1001
        v33 = load v32, !982
        v34 = get_local ptr u64, other_start, !1002
        v35 = const u64 0
        v36 = get_elem_ptr v1, ptr { u64, u64 }, v35, !1003
        v37 = load v36, !982
        v38 = call capacity_31(v37), !1004
        v39 = get_local ptr u64, both_len, !1005
        v40 = cmp lt v38 v29, !1006
        br append_28_block12(v40), !1007

        append_28_block12(v41: bool):
        cbr v41, append_28_block6(), append_28_block7(), !1008

        append_28_block6():
        v42 = const u64 0
        v43 = get_elem_ptr v1, ptr { u64, u64 }, v42, !1009
        v44 = load v43, !982
        v45 = call ptr_22(v44), !1010
        v46 = const u64 0
        v47 = get_elem_ptr v1, ptr { u64, u64 }, v46, !1011
        v48 = load v47, !982
        v49 = call capacity_31(v48), !1012
        v50 = get_local ptr u64, both_len, !1013
        v51 = cmp gt v29 v49, !1014
        br append_28_realloc_bytes_35_block6(v51), !1015

        append_28_realloc_bytes_35_block6(v52: bool):
        cbr v52, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block4(), !1016

        append_28_realloc_bytes_35_block0():
        v53 = asm(size: v29) -> u64 hp, !1017 {
            aloc   size, !102
        }
        br append_28_realloc_bytes_35_block7(v53), !1018

        append_28_realloc_bytes_35_block7(v54: u64):
        v55 = get_local ptr u64, new_ptr0, !1019
        v56 = const u64 0, !625
        v57 = cmp gt v49 v56, !1020
        br append_28_realloc_bytes_35_block8(v57), !1021

        append_28_realloc_bytes_35_block8(v58: bool):
        cbr v58, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block2(), !1022

        append_28_realloc_bytes_35_block1():
        v59 = get_local ptr u64, new_ptr0, !1023
        v60 = asm(dst: v54, src: v45, len: v49) -> (), !1024 {
            mcp    dst src len, !279
        }
        v61 = const unit ()
        br append_28_realloc_bytes_35_block9(v61), !1025

        append_28_realloc_bytes_35_block9(v62: ()):
        v63 = const unit ()
        br append_28_realloc_bytes_35_block3(v63), !1026

        append_28_realloc_bytes_35_block2():
        v64 = const unit ()
        br append_28_realloc_bytes_35_block3(v64), !1027

        append_28_realloc_bytes_35_block3(v65: ()):
        v66 = get_local ptr u64, new_ptr0, !1028
        br append_28_realloc_bytes_35_block5(v54), !1029

        append_28_realloc_bytes_35_block4():
        br append_28_realloc_bytes_35_block5(v45), !1030

        append_28_realloc_bytes_35_block5(v67: u64):
        br append_28_block13(v67), !1031

        append_28_block13(v68: u64):
        v69 = get_local ptr u64, both_len, !1032
        v70 = const u64 1
        v71 = mul v29, v70, !1033
        br append_28_from_parts_32_block0(v71), !1034

        append_28_from_parts_32_block0(v72: u64):
        v73 = get_local ptr { u64, u64 }, __anon_0, !1035
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !1036
        store v68 to v75, !1037
        v76 = const u64 1
        v77 = get_elem_ptr v73, ptr u64, v76, !1038
        store v72 to v77, !1039
        v78 = load v73, !1040
        v79 = asm(ptr: v78) -> slice ptr, !1041 {
        }
        br append_28_from_parts_32_block1(v79), !1042

        append_28_from_parts_32_block1(v80: slice):
        br append_28_block14(v80), !1043

        append_28_block14(v81: slice):
        v82 = get_local ptr slice, new_slice, !1044
        store v81 to v82, !1045
        v83 = get_local ptr slice, new_slice, !1046
        v84 = load v83, !982
        v85 = asm(ptr: v84) -> { u64, u64 } ptr, !1047 {
        }
        br append_28_from_37_number_of_bytes_38_block0(v85), !1048

        append_28_from_37_number_of_bytes_38_block0(v86: { u64, u64 }):
        v87 = get_local ptr { u64, u64 }, __anon_000, !1049
        store v86 to v87, !1050
        v88 = const u64 1
        v89 = get_elem_ptr v87, ptr u64, v88, !1051
        v90 = load v89, !1052
        br append_28_from_37_block3(v90), !1053

        append_28_from_37_block3(v91: u64):
        v92 = get_local ptr u64, cap, !1054
        v93 = get_local ptr u64, cap, !1055
        v94 = asm(size: v91) -> u64 hp, !1056 {
            aloc   size, !102
        }
        br append_28_from_37_block4(v94), !1057

        append_28_from_37_block4(v95: u64):
        v96 = get_local ptr u64, ptr, !1058
        v97 = get_local ptr u64, cap, !1059
        v98 = const u64 0, !699
        v99 = cmp gt v91 v98, !1060
        br append_28_from_37_block5(v99), !1061

        append_28_from_37_block5(v100: bool):
        cbr v100, append_28_from_37_block0(), append_28_from_37_block1(), !1062

        append_28_from_37_block0():
        v101 = asm(ptr: v84) -> { u64, u64 } ptr, !1063 {
        }
        br append_28_from_37_ptr_41_block0(v101), !1064

        append_28_from_37_ptr_41_block0(v102: { u64, u64 }):
        v103 = get_local ptr { u64, u64 }, __anon_01, !1065
        store v102 to v103, !1066
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !1067
        v106 = load v105, !1068
        br append_28_from_37_block6(v106), !1069

        append_28_from_37_block6(v107: u64):
        v108 = get_local ptr u64, ptr, !1070
        v109 = get_local ptr u64, cap, !1071
        v110 = const u64 1
        v111 = mul v91, v110, !1072
        br append_28_from_37_copy_to_40_block0(v111), !1073

        append_28_from_37_copy_to_40_block0(v112: u64):
        v113 = get_local ptr u64, len, !1074
        v114 = get_local ptr u64, len, !1075
        v115 = asm(dst: v95, src: v107, len: v112) -> (), !1076 {
            mcp    dst src len, !733
        }
        v116 = const unit ()
        br append_28_from_37_block7(v116), !1077

        append_28_from_37_block7(v117: ()):
        v118 = const unit ()
        br append_28_from_37_block2(v118), !1078

        append_28_from_37_block1():
        v119 = const unit ()
        br append_28_from_37_block2(v119), !1079

        append_28_from_37_block2(v120: ()):
        v121 = get_local ptr u64, ptr, !1080
        v122 = get_local ptr u64, cap, !1081
        v123 = get_local ptr { u64, u64 }, __anon_00, !1082
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr u64, v124, !1083
        store v95 to v125, !1084
        v126 = const u64 1
        v127 = get_elem_ptr v123, ptr u64, v126, !1085
        store v91 to v127, !1086
        v128 = load v123, !1087
        br append_28_block15(v128), !1088

        append_28_block15(v129: { u64, u64 }):
        v130 = const u64 0
        v131 = get_elem_ptr v1, ptr { u64, u64 }, v130, !1089
        store v129 to v131, !1090
        v132 = const unit ()
        br append_28_block8(v132), !982

        append_28_block7():
        v133 = const unit ()
        br append_28_block8(v133), !982

        append_28_block8(v134: ()):
        v135 = const u64 0
        v136 = get_elem_ptr v1, ptr { u64, u64 }, v135, !1091
        v137 = load v136, !982
        v138 = call ptr_22(v137), !1092
        v139 = get_local ptr u64, other_start, !1093
        v140 = asm(ptr: v138, offset: v33, new) -> u64 new, !1094 {
            add    new ptr offset, !765
        }
        br append_28_block16(v140), !1095

        append_28_block16(v141: u64):
        v142 = get_local ptr u64, new_ptr, !1096
        v143 = load v3, !982
        v144 = call ptr_21(v143), !1097
        v145 = get_local ptr u64, new_ptr, !1098
        v146 = get_local ptr u64, other_len, !1099
        v147 = asm(dst: v141, src: v144, len: v5) -> (), !1100 {
            mcp    dst src len, !279
        }
        br append_28_block17(v61), !1101

        append_28_block17(v148: ()):
        v149 = get_local ptr u64, both_len, !1102
        v150 = const u64 1
        v151 = get_elem_ptr v1, ptr u64, v150, !1103
        store v29 to v151, !1104
        v152 = const unit ()
        br block0(v152), !982

        block0(v153: ()):
        v154 = const unit ()
        ret () v154
    }

    pub fn append_28(self !1105: ptr { { u64, u64 }, u64 }, other !1106: ptr { { u64, u64 }, u64 }) -> (), !1109 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !1110
        v2 = get_local ptr u64, other_len, !547
        v3 = get_local ptr u64, other_len, !549
        v4 = const u64 0, !551
        v5 = cmp eq v1 v4, !1111
        br block9(v5), !1111

        block9(v6: bool):
        cbr v6, block0(), block1(), !552

        block0():
        v7 = const unit (), !557
        ret () v7, !557

        block1():
        v8 = const unit ()
        br block2(v8)

        block2(v9: ()):
        v10 = const u64 1
        v11 = get_elem_ptr self, ptr u64, v10, !503
        v12 = load v11
        v13 = const u64 0, !562
        v14 = cmp eq v12 v13, !1112
        br block10(v14), !1112

        block10(v15: bool):
        cbr v15, block3(), block4(), !563

        block3():
        v16 = load other
        store v16 to self, !569
        v17 = const unit (), !571
        ret () v17, !571

        block4():
        v18 = const unit ()
        br block5(v18)

        block5(v19: ()):
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !503
        v22 = load v21
        v23 = get_local ptr u64, other_len, !576
        v24 = add v22, v1, !1113
        br block11(v24), !1113

        block11(v25: u64):
        v26 = get_local ptr u64, both_len, !582
        v27 = const u64 1
        v28 = get_elem_ptr self, ptr u64, v27, !503
        v29 = load v28
        v30 = get_local ptr u64, other_start, !586
        v31 = const u64 0
        v32 = get_elem_ptr self, ptr { u64, u64 }, v31, !268
        v33 = load v32
        v34 = call capacity_31(v33), !1114
        v35 = get_local ptr u64, both_len, !593
        v36 = cmp lt v34 v25, !1115
        br block12(v36), !1115

        block12(v37: bool):
        cbr v37, block6(), block7(), !595

        block6():
        v38 = const u64 0
        v39 = get_elem_ptr self, ptr { u64, u64 }, v38, !268
        v40 = load v39
        v41 = call ptr_22(v40), !1116
        v42 = const u64 0
        v43 = get_elem_ptr self, ptr { u64, u64 }, v42, !268
        v44 = load v43
        v45 = call capacity_31(v44), !1117
        v46 = get_local ptr u64, both_len, !610
        v47 = cmp gt v25 v45, !1118
        br realloc_bytes_35_block6(v47), !1119

        realloc_bytes_35_block6(v48: bool):
        cbr v48, realloc_bytes_35_block0(), realloc_bytes_35_block4(), !1120

        realloc_bytes_35_block0():
        v49 = asm(size: v25) -> u64 hp, !1121 {
            aloc   size, !102
        }
        br realloc_bytes_35_block7(v49), !1122

        realloc_bytes_35_block7(v50: u64):
        v51 = get_local ptr u64, new_ptr0, !1123
        v52 = const u64 0, !625
        v53 = cmp gt v45 v52, !1124
        br realloc_bytes_35_block8(v53), !1125

        realloc_bytes_35_block8(v54: bool):
        cbr v54, realloc_bytes_35_block1(), realloc_bytes_35_block2(), !1126

        realloc_bytes_35_block1():
        v55 = get_local ptr u64, new_ptr0, !1127
        v56 = asm(dst: v50, src: v41, len: v45) -> (), !1128 {
            mcp    dst src len, !279
        }
        v57 = const unit ()
        br realloc_bytes_35_block9(v57), !1129

        realloc_bytes_35_block9(v58: ()):
        v59 = const unit ()
        br realloc_bytes_35_block3(v59), !1130

        realloc_bytes_35_block2():
        v60 = const unit ()
        br realloc_bytes_35_block3(v60), !1130

        realloc_bytes_35_block3(v61: ()):
        v62 = get_local ptr u64, new_ptr0, !1131
        br realloc_bytes_35_block5(v50), !1130

        realloc_bytes_35_block4():
        br realloc_bytes_35_block5(v41), !1130

        realloc_bytes_35_block5(v63: u64):
        br block13(v63), !1130

        block13(v64: u64):
        v65 = get_local ptr u64, both_len, !644
        v66 = const u64 1
        v67 = mul v25, v66, !1132
        br from_parts_32_block0(v67), !1133

        from_parts_32_block0(v68: u64):
        v69 = get_local ptr { u64, u64 }, __anon_0, !1134
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !1135
        store v64 to v71, !1136
        v72 = const u64 1
        v73 = get_elem_ptr v69, ptr u64, v72, !1137
        store v68 to v73, !1138
        v74 = load v69, !1139
        v75 = asm(ptr: v74) -> slice ptr, !1140 {
        }
        br from_parts_32_block1(v75), !1141

        from_parts_32_block1(v76: slice):
        br block14(v76), !1139

        block14(v77: slice):
        v78 = get_local ptr slice, new_slice, !666
        store v77 to v78, !666
        v79 = get_local ptr slice, new_slice, !669
        v80 = load v79
        v81 = asm(ptr: v80) -> { u64, u64 } ptr, !1142 {
        }
        br from_37_number_of_bytes_38_block0(v81), !1143

        from_37_number_of_bytes_38_block0(v82: { u64, u64 }):
        v83 = get_local ptr { u64, u64 }, __anon_000, !1144
        store v82 to v83, !1145
        v84 = const u64 1
        v85 = get_elem_ptr v83, ptr u64, v84, !1146
        v86 = load v85, !1147
        br from_37_block3(v86), !1148

        from_37_block3(v87: u64):
        v88 = get_local ptr u64, cap, !1149
        v89 = get_local ptr u64, cap, !1150
        v90 = asm(size: v87) -> u64 hp, !1151 {
            aloc   size, !102
        }
        br from_37_block4(v90), !1152

        from_37_block4(v91: u64):
        v92 = get_local ptr u64, ptr, !1153
        v93 = get_local ptr u64, cap, !1154
        v94 = const u64 0, !699
        v95 = cmp gt v87 v94, !1155
        br from_37_block5(v95), !1156

        from_37_block5(v96: bool):
        cbr v96, from_37_block0(), from_37_block1(), !1157

        from_37_block0():
        v97 = asm(ptr: v80) -> { u64, u64 } ptr, !1158 {
        }
        br from_37_ptr_41_block0(v97), !1159

        from_37_ptr_41_block0(v98: { u64, u64 }):
        v99 = get_local ptr { u64, u64 }, __anon_01, !1160
        store v98 to v99, !1161
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !1162
        v102 = load v101, !1163
        br from_37_block6(v102), !1164

        from_37_block6(v103: u64):
        v104 = get_local ptr u64, ptr, !1165
        v105 = get_local ptr u64, cap, !1166
        v106 = const u64 1
        v107 = mul v87, v106, !1167
        br from_37_copy_to_40_block0(v107), !1168

        from_37_copy_to_40_block0(v108: u64):
        v109 = get_local ptr u64, len, !1169
        v110 = get_local ptr u64, len, !1170
        v111 = asm(dst: v91, src: v103, len: v108) -> (), !1171 {
            mcp    dst src len, !733
        }
        v112 = const unit ()
        br from_37_block7(v112), !1172

        from_37_block7(v113: ()):
        v114 = const unit ()
        br from_37_block2(v114), !1173

        from_37_block1():
        v115 = const unit ()
        br from_37_block2(v115), !1173

        from_37_block2(v116: ()):
        v117 = get_local ptr u64, ptr, !1174
        v118 = get_local ptr u64, cap, !1175
        v119 = get_local ptr { u64, u64 }, __anon_00, !1176
        v120 = const u64 0
        v121 = get_elem_ptr v119, ptr u64, v120, !1173
        store v91 to v121, !1177
        v122 = const u64 1
        v123 = get_elem_ptr v119, ptr u64, v122, !1173
        store v87 to v123, !1178
        v124 = load v119, !1173
        br block15(v124), !1173

        block15(v125: { u64, u64 }):
        v126 = const u64 0
        v127 = get_elem_ptr self, ptr { u64, u64 }, v126, !749
        store v125 to v127, !749
        v128 = const unit ()
        br block8(v128)

        block7():
        v129 = const unit ()
        br block8(v129)

        block8(v130: ()):
        v131 = const u64 0
        v132 = get_elem_ptr self, ptr { u64, u64 }, v131, !268
        v133 = load v132
        v134 = call ptr_22(v133), !1179
        v135 = get_local ptr u64, other_start, !759
        v136 = asm(ptr: v134, offset: v29, new) -> u64 new, !1180 {
            add    new ptr offset, !765
        }
        br block16(v136), !1181

        block16(v137: u64):
        v138 = get_local ptr u64, new_ptr, !767
        v139 = load other
        v140 = call ptr_21(v139), !1182
        v141 = get_local ptr u64, new_ptr, !773
        v142 = get_local ptr u64, other_len, !775
        v143 = asm(dst: v137, src: v140, len: v1) -> (), !1183 {
            mcp    dst src len, !279
        }
        br block17(v57), !1184

        block17(v144: ()):
        v145 = get_local ptr u64, both_len, !781
        v146 = const u64 1
        v147 = get_elem_ptr self, ptr u64, v146, !783
        store v25 to v147, !783
        v148 = const unit ()
        ret () v148
    }

    pub fn add_29(self !1185: u64, other !1186: u64) -> u64, !1189 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !1190: u64, other !1191: u64) -> bool, !1194 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !1195: { u64, u64 }) -> u64, !1198 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1199
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !1200: u64, count !1201: u64) -> slice, !1204 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1205
        br block0(v1), !1205

        block0(v2: u64):
        v3 = get_local ptr { u64, u64 }, __anon_0, !653
        v4 = const u64 0
        v5 = get_elem_ptr v3, ptr u64, v4, !653
        store ptr to v5, !653
        v6 = const u64 1
        v7 = get_elem_ptr v3, ptr u64, v6, !653
        store v2 to v7, !653
        v8 = load v3
        v9 = asm(ptr: v8) -> slice ptr, !1206 {
        }
        br block1(v9), !1207

        block1(v10: slice):
        ret slice v10
    }

    fn from_parts_33(parts !1208: { u64, u64 }) -> slice, !1211 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !662 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !1212: u64, other !1213: u64) -> u64, !1216 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !1217: u64, count !1218: u64, new_count !1219: u64) -> u64, !1222 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = cmp gt new_count count, !1223
        br block6(v0), !1223

        block6(v1: bool):
        cbr v1, block0(), block4(), !614

        block0():
        v2 = asm(size: new_count) -> u64 hp, !1224 {
            aloc   size, !102
        }
        br block7(v2), !1225

        block7(v3: u64):
        v4 = get_local ptr u64, new_ptr, !623
        v5 = const u64 0, !625
        v6 = cmp gt count v5, !1226
        br block8(v6), !1226

        block8(v7: bool):
        cbr v7, block1(), block2(), !626

        block1():
        v8 = get_local ptr u64, new_ptr, !631
        v9 = asm(dst: v3, src: ptr, len: count) -> (), !1227 {
            mcp    dst src len, !279
        }
        v10 = const unit ()
        br block9(v10), !1228

        block9(v11: ()):
        v12 = const unit ()
        br block3(v12)

        block2():
        v13 = const unit ()
        br block3(v13)

        block3(v14: ()):
        v15 = get_local ptr u64, new_ptr, !639
        br block5(v3)

        block4():
        br block5(ptr)

        block5(v16: u64):
        ret u64 v16
    }

    pub fn gt_36(self !1229: u64, other !1230: u64) -> bool, !1233 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !1234: slice) -> { u64, u64 }, !1237 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_01
        local u64 cap
        local u64 len
        local u64 ptr

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !1238 {
        }
        br number_of_bytes_38_block0(v0), !1239

        number_of_bytes_38_block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_00, !1240
        store v1 to v2, !1240
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !1241
        v5 = load v4, !1240
        br block3(v5), !1240

        block3(v6: u64):
        v7 = get_local ptr u64, cap, !687
        v8 = get_local ptr u64, cap, !689
        v9 = asm(size: v6) -> u64 hp, !1242 {
            aloc   size, !102
        }
        br block4(v9), !1243

        block4(v10: u64):
        v11 = get_local ptr u64, ptr, !695
        v12 = get_local ptr u64, cap, !697
        v13 = const u64 0, !699
        v14 = cmp gt v6 v13, !1244
        br block5(v14), !1244

        block5(v15: bool):
        cbr v15, block0(), block1(), !700

        block0():
        v16 = asm(ptr: slice) -> { u64, u64 } ptr, !1245 {
        }
        br ptr_41_block0(v16), !1246

        ptr_41_block0(v17: { u64, u64 }):
        v18 = get_local ptr { u64, u64 }, __anon_01, !1247
        store v17 to v18, !1247
        v19 = const u64 0
        v20 = get_elem_ptr v18, ptr u64, v19, !1248
        v21 = load v20, !1247
        br block6(v21), !1247

        block6(v22: u64):
        v23 = get_local ptr u64, ptr, !717
        v24 = get_local ptr u64, cap, !719
        v25 = const u64 1
        v26 = mul v6, v25, !1249
        br copy_to_40_block0(v26), !1250

        copy_to_40_block0(v27: u64):
        v28 = get_local ptr u64, len, !1251
        v29 = get_local ptr u64, len, !1252
        v30 = asm(dst: v10, src: v22, len: v27) -> (), !1253 {
            mcp    dst src len, !733
        }
        v31 = const unit ()
        br block7(v31), !1254

        block7(v32: ()):
        v33 = const unit ()
        br block2(v33)

        block1():
        v34 = const unit ()
        br block2(v34)

        block2(v35: ()):
        v36 = get_local ptr u64, ptr, !737
        v37 = get_local ptr u64, cap, !739
        v38 = get_local ptr { u64, u64 }, __anon_0, !741
        v39 = const u64 0
        v40 = get_elem_ptr v38, ptr u64, v39
        store v10 to v40, !741
        v41 = const u64 1
        v42 = get_elem_ptr v38, ptr u64, v41
        store v6 to v42, !741
        v43 = load v38
        ret { u64, u64 } v43
    }

    pub fn number_of_bytes_38(self !1255: slice) -> u64, !1258 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1259 {
        }
        br block0(v0), !1260

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !683
        v5 = load v4
        ret u64 v5
    }

    fn into_parts_39(slice !1261: slice) -> { u64, u64 }, !1264 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !678 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !1265: u64, dst !1266: u64, count !1267: u64) -> (), !1270 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1271
        br block0(v1), !1271

        block0(v2: u64):
        v3 = get_local ptr u64, len, !727
        v4 = get_local ptr u64, len, !729
        v5 = asm(dst: dst, src: self, len: v2) -> (), !731 {
            mcp    dst src len, !733
        }
        v6 = const unit ()
        ret () v6
    }

    pub fn ptr_41(self !1272: slice) -> u64, !1275 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1276 {
        }
        br block0(v0), !1277

        block0(v1: { u64, u64 }):
        v2 = get_local ptr { u64, u64 }, __anon_0
        store v1 to v2
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !713
        v5 = load v4
        ret u64 v5
    }

    pub fn add_uint_offset_42(self !1278: u64, offset !1279: u64) -> u64, !1282 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !763 {
            add    new ptr offset, !765
        }
        ret u64 v0
    }

    pub fn sha256_43(self !1283: { { { u64, u64 }, u64 } }) -> b256, !1286 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !790
        br block0(v0), !1287

        block0(v1: b256):
        v2 = get_local ptr b256, result_buffer, !796
        store v1 to v2, !796
        v3 = get_local ptr b256, result_buffer, !799
        v4 = ptr_to_int self to u64
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !537
        v8 = load v7
        v9 = call ptr_21(v8), !1288
        v10 = ptr_to_int self to u64
        v11 = int_to_ptr v10 to ptr { { { u64, u64 }, u64 } }
        v12 = const u64 0
        v13 = get_elem_ptr v11, ptr { { u64, u64 }, u64 }, v12, !537
        v14 = load v13
        v15 = call len_20(v14), !1289
        v16 = asm(hash: v3, ptr: v9, bytes: v15) -> b256 hash, !810 {
            s256   hash ptr bytes, !812
        }
        ret b256 v16
    }

    pub fn min_44() -> b256, !1292 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !790
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = (!4 !5 !13 !14)
!31 = span !6 1026 1059
!32 = (!4 !5 !31)
!33 = (!4 !5 !31)
!34 = span !6 1072 1081
!35 = (!4 !5 !34)
!36 = (!4 !5)
!37 = span !6 1085 1094
!38 = (!4 !5 !37)
!39 = span !6 1072 1094
!40 = fn_call_path_span !6 1082 1084
!41 = (!4 !5 !39 !40)
!42 = (!4 !5 !39 !40)
!43 = span !6 218 232
!44 = (!4 !5 !39 !40 !43)
!45 = (!4 !5 !39 !40)
!46 = (!4 !5 !39 !40)
!47 = (!4 !5 !39 !40 !43)
!48 = span !6 889 891
!49 = span !6 842 962
!50 = (!4 !5 !39 !40 !49)
!51 = span !6 907 926
!52 = (!4 !5 !39 !40)
!53 = span !6 1064 1095
!54 = (!4 !5 !53)
!55 = span !6 1108 1117
!56 = (!4 !5 !55)
!57 = span !6 1126 1133
!58 = (!4 !5 !57)
!59 = span !6 1108 1134
!60 = fn_call_path_span !6 1118 1125
!61 = (!4 !5 !59 !60)
!62 = span !6 1100 1135
!63 = (!4 !5 !62)
!64 = (!4 !5 !62)
!65 = span !6 1148 1157
!66 = (!4 !5 !65)
!67 = span !6 1166 1173
!68 = (!4 !5 !67)
!69 = span !6 1148 1174
!70 = fn_call_path_span !6 1158 1165
!71 = (!4 !5 !69 !70)
!72 = span !6 1140 1175
!73 = (!4 !5 !72)
!74 = (!4 !5 !72)
!75 = span !6 972 1177
!76 = fn_name_span !6 979 983
!77 = (!75 !76)
!78 = (!7 !8)
!79 = (!13 !14 !15)
!80 = (!13 !14)
!81 = (!13 !14 !15)
!82 = (!13 !14 !25)
!83 = (!13 !14 !25)
!84 = (!39 !40)
!85 = (!39 !40 !43)
!86 = (!39 !40 !43)
!87 = (!39 !40 !49)
!88 = (!59 !60)
!89 = (!69 !70)
!90 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!91 = span !90 3024 3131
!92 = fn_name_span !90 3031 3034
!93 = (!91 !92)
!94 = span !90 570 571
!95 = span !90 3079 3094
!96 = fn_call_path_span !90 3079 3092
!97 = span !90 558 572
!98 = fn_call_path_span !90 558 569
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!100 = span !99 3315 3378
!101 = (!95 !96 !97 !98 !100)
!102 = span !99 3342 3351
!103 = (!95 !96 !97 !98)
!104 = span !90 534 603
!105 = (!95 !96 !104)
!106 = (!95 !96)
!107 = (!95 !96 !104)
!108 = span !90 591 592
!109 = (!95 !96 !104)
!110 = span !90 3055 3125
!111 = span !90 3113 3114
!112 = span !90 503 609
!113 = fn_name_span !90 510 513
!114 = (!112 !113)
!115 = (!97 !98 !100)
!116 = (!97 !98)
!117 = span !99 3286 3291
!118 = span !99 3267 3380
!119 = fn_name_span !99 3274 3285
!120 = (!118 !119)
!121 = span !6 258 340
!122 = fn_name_span !6 265 268
!123 = (!121 !122)
!124 = span !6 805 809
!125 = span !6 811 816
!126 = span !6 799 968
!127 = fn_name_span !6 802 804
!128 = inline "always"
!129 = (!126 !127 !128)
!130 = span !6 507 511
!131 = span !6 513 520
!132 = span !6 492 714
!133 = fn_name_span !6 499 506
!134 = (!132 !133)
!135 = span !6 582 603
!136 = fn_call_path_span !6 587 594
!137 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!138 = span !137 1815 1933
!139 = (!135 !136 !138)
!140 = (!135 !136 !138)
!141 = (!135 !136 !138)
!142 = span !6 451 469
!143 = fn_call_path_span !6 459 467
!144 = (!135 !136 !142 !143)
!145 = (!135 !136 !142 !143)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!147 = span !146 329 341
!148 = (!135 !136 !142 !143 !147)
!149 = (!135 !136 !142 !143)
!150 = span !146 1573 1589
!151 = fn_call_path_span !146 1584 1587
!152 = (!135 !136 !142 !143 !150 !151)
!153 = span !146 1593 1595
!154 = span !146 1573 1595
!155 = fn_call_path_span !146 1590 1592
!156 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!157 = span !156 15515 15529
!158 = fn_call_path_span !156 15520 15522
!159 = (!135 !136 !142 !143 !154 !155 !157 !158)
!160 = (!135 !136 !142 !143 !154 !155 !157 !158)
!161 = span !156 12533 12538
!162 = span !156 15514 15536
!163 = fn_call_path_span !156 15531 15534
!164 = (!135 !136 !142 !143 !154 !155 !162 !163)
!165 = (!135 !136 !142 !143 !154 !155 !162 !163)
!166 = (!135 !136 !142 !143 !154 !155)
!167 = (!135 !136 !142 !143 !154)
!168 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!169 = span !168 2461 2560
!170 = (!135 !136 !142 !143 !169)
!171 = (!135 !136 !142 !143 !169)
!172 = (!135 !136 !142 !143 !169)
!173 = (!135 !136 !142 !143)
!174 = span !146 1610 1621
!175 = (!135 !136 !142 !143 !174)
!176 = (!135 !136 !142 !143)
!177 = (!135 !136 !142 !143 !169)
!178 = (!135 !136 !142 !143 !169)
!179 = (!135 !136 !142 !143 !169)
!180 = (!135 !136 !142 !143)
!181 = (!135 !136 !142 !143)
!182 = (!135 !136 !142 !143 !147)
!183 = (!135 !136 !142 !143)
!184 = span !146 1657 1673
!185 = fn_call_path_span !146 1668 1671
!186 = (!135 !136 !142 !143 !184 !185)
!187 = span !146 1647 1709
!188 = (!135 !136 !142 !143 !187)
!189 = (!135 !136 !142 !143 !169)
!190 = (!135 !136 !142 !143 !169)
!191 = (!135 !136 !142 !143)
!192 = (!135 !136 !142 !143)
!193 = span !6 451 478
!194 = fn_call_path_span !6 470 476
!195 = span !168 4973 5075
!196 = (!135 !136 !193 !194 !195)
!197 = (!135 !136 !193 !194 !195)
!198 = span !168 4979 4983
!199 = (!135 !136 !193 !194 !198)
!200 = (!135 !136 !193 !194 !198)
!201 = (!135 !136 !193 !194)
!202 = span !168 4998 5037
!203 = fn_call_path_span !168 4998 5037
!204 = (!135 !136 !193 !194 !202 !203)
!205 = (!135 !136 !193 !194 !202 !203)
!206 = (!135 !136 !193 !194 !202)
!207 = (!135 !136 !193 !194 !198)
!208 = (!135 !136 !193 !194)
!209 = (!135 !136 !193 !194)
!210 = span !168 5009 5020
!211 = (!135 !136 !193 !194 !210)
!212 = (!135 !136 !193 !194 !210)
!213 = span !168 5025 5036
!214 = (!135 !136 !193 !194 !213)
!215 = (!135 !136 !193 !194)
!216 = (!135 !136 !193 !194)
!217 = span !168 5062 5063
!218 = span !168 5055 5064
!219 = fn_call_path_span !168 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!135 !136 !193 !194 !218 !219 !221)
!223 = (!135 !136 !193 !194)
!224 = (!135 !136 !193 !194)
!225 = span !90 28953 28955
!226 = span !6 435 479
!227 = fn_call_path_span !6 435 450
!228 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!229 = span !228 3133 3150
!230 = fn_call_path_span !228 3133 3144
!231 = span !90 28933 28956
!232 = fn_call_path_span !90 28933 28952
!233 = span !90 4157 4190
!234 = fn_call_path_span !90 4157 4180
!235 = span !90 863 884
!236 = fn_call_path_span !90 863 874
!237 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234 !235 !236 !100)
!238 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234 !235 !236)
!239 = span !90 839 922
!240 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234 !239)
!241 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234)
!242 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234 !239)
!243 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234)
!244 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234 !239)
!245 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234)
!246 = (!135 !136 !226 !227 !229 !230 !231 !232 !233 !234)
!247 = span !90 4133 4221
!248 = (!135 !136 !226 !227 !229 !230 !231 !232 !247)
!249 = (!135 !136 !226 !227 !229 !230 !231 !232)
!250 = (!135 !136 !226 !227 !229 !230 !231 !232 !247)
!251 = (!135 !136 !226 !227 !229 !230 !231 !232)
!252 = span !90 4209 4210
!253 = (!135 !136 !226 !227 !229 !230 !231 !232 !247)
!254 = (!135 !136 !226 !227 !229 !230 !231 !232)
!255 = (!135 !136 !226 !227 !229 !230 !231 !232)
!256 = span !90 28917 28957
!257 = (!135 !136 !226 !227 !229 !230 !256)
!258 = (!135 !136 !226 !227 !229 !230 !256)
!259 = span !90 28966 28980
!260 = (!135 !136 !226 !227 !229 !230 !259)
!261 = (!135 !136 !226 !227 !229 !230 !259)
!262 = span !90 28978 28980
!263 = (!135 !136 !226 !227 !229 !230 !259)
!264 = span !90 29065 29077
!265 = (!135 !136 !226 !227 !229 !230 !264)
!266 = span !90 29092 29097
!267 = (!135 !136 !226 !227 !229 !230 !266)
!268 = span !90 2445 2458
!269 = (!135 !136 !226 !227 !229 !230 !268)
!270 = span !90 400 412
!271 = (!135 !136 !226 !227 !229 !230 !270)
!272 = (!135 !136 !226 !227 !229 !230)
!273 = span !90 29107 29109
!274 = span !90 29065 29110
!275 = fn_call_path_span !90 29078 29091
!276 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!277 = span !276 5999 6076
!278 = (!135 !136 !226 !227 !229 !230 !274 !275 !277)
!279 = span !276 6050 6065
!280 = (!135 !136 !226 !227 !229 !230 !274 !275)
!281 = span !90 29121 29126
!282 = (!135 !136 !226 !227 !229 !230 !281)
!283 = (!135 !136 !226 !227 !229 !230)
!284 = (!135 !136 !226 !227 !229 !230)
!285 = span !228 3107 3161
!286 = (!135 !136 !226 !227 !285)
!287 = (!135 !136 !226 !227)
!288 = (!135 !136 !226 !227 !285)
!289 = (!135 !136 !226 !227)
!290 = (!135 !136 !226 !227)
!291 = (!135 !136 !138)
!292 = (!135 !136 !138)
!293 = (!135 !136)
!294 = span !6 576 708
!295 = span !6 618 668
!296 = fn_call_path_span !6 618 668
!297 = (!295 !296)
!298 = span !6 621 628
!299 = span !6 657 664
!300 = span !6 650 665
!301 = fn_call_path_span !6 650 656
!302 = (!300 !301)
!303 = span !6 636 666
!304 = fn_call_path_span !6 636 649
!305 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!306 = span !305 2370 2383
!307 = (!303 !304 !306)
!308 = (!303 !304)
!309 = (!303 !304 !306)
!310 = span !6 681 698
!311 = fn_call_path_span !6 681 698
!312 = (!310 !311)
!313 = span !6 685 686
!314 = span !6 695 696
!315 = span !6 361 365
!316 = span !6 367 374
!317 = span !6 346 486
!318 = fn_name_span !6 353 360
!319 = (!317 !318)
!320 = (!142 !143)
!321 = (!142 !143 !147)
!322 = (!142 !143 !150 !151)
!323 = (!142 !143 !154 !155 !157 !158)
!324 = (!142 !143 !154 !155 !157 !158)
!325 = (!142 !143 !154 !155 !162 !163)
!326 = (!142 !143 !154 !155 !162 !163)
!327 = (!142 !143 !154 !155)
!328 = (!142 !143 !154)
!329 = (!142 !143 !169)
!330 = (!142 !143 !169)
!331 = (!142 !143 !169)
!332 = (!142 !143 !174)
!333 = (!142 !143 !169)
!334 = (!142 !143 !169)
!335 = (!142 !143 !169)
!336 = (!142 !143 !147)
!337 = (!142 !143 !184 !185)
!338 = (!142 !143 !187)
!339 = (!142 !143 !169)
!340 = (!142 !143 !169)
!341 = (!193 !194 !195)
!342 = (!193 !194 !195)
!343 = (!193 !194 !198)
!344 = (!193 !194 !198)
!345 = (!193 !194)
!346 = (!193 !194 !202 !203)
!347 = (!193 !194 !202 !203)
!348 = (!193 !194 !202)
!349 = (!193 !194 !198)
!350 = (!193 !194 !210)
!351 = (!193 !194 !210)
!352 = (!193 !194 !213)
!353 = (!193 !194 !218 !219 !221)
!354 = (!226 !227 !229 !230 !231 !232 !233 !234 !235 !236 !100)
!355 = (!226 !227 !229 !230 !231 !232 !233 !234 !235 !236)
!356 = (!226 !227 !229 !230 !231 !232 !233 !234 !239)
!357 = (!226 !227 !229 !230 !231 !232 !233 !234)
!358 = (!226 !227 !229 !230 !231 !232 !233 !234 !239)
!359 = (!226 !227 !229 !230 !231 !232 !233 !234)
!360 = (!226 !227 !229 !230 !231 !232 !233 !234 !239)
!361 = (!226 !227 !229 !230 !231 !232 !233 !234)
!362 = (!226 !227 !229 !230 !231 !232 !233 !234)
!363 = (!226 !227 !229 !230 !231 !232 !247)
!364 = (!226 !227 !229 !230 !231 !232)
!365 = (!226 !227 !229 !230 !231 !232 !247)
!366 = (!226 !227 !229 !230 !231 !232)
!367 = (!226 !227 !229 !230 !231 !232 !247)
!368 = (!226 !227 !229 !230 !231 !232)
!369 = (!226 !227 !229 !230 !231 !232)
!370 = (!226 !227 !229 !230 !256)
!371 = (!226 !227 !229 !230 !256)
!372 = (!226 !227 !229 !230 !259)
!373 = (!226 !227 !229 !230 !259)
!374 = (!226 !227 !229 !230 !259)
!375 = (!226 !227 !229 !230 !264)
!376 = (!226 !227 !229 !230 !266)
!377 = (!226 !227 !229 !230 !268)
!378 = (!226 !227 !229 !230 !270)
!379 = (!226 !227 !229 !230)
!380 = (!226 !227 !229 !230 !274 !275 !277)
!381 = (!226 !227 !229 !230 !274 !275)
!382 = (!226 !227 !229 !230 !281)
!383 = (!226 !227 !229 !230)
!384 = (!226 !227 !229 !230)
!385 = (!226 !227 !285)
!386 = (!226 !227)
!387 = (!226 !227 !285)
!388 = span !228 3077 3081
!389 = span !228 3069 3167
!390 = fn_name_span !228 3072 3076
!391 = (!389 !390)
!392 = (!229 !230 !231 !232 !233 !234 !235 !236 !100)
!393 = (!229 !230 !231 !232 !233 !234 !235 !236)
!394 = (!229 !230 !231 !232 !233 !234 !239)
!395 = (!229 !230 !231 !232 !233 !234)
!396 = (!229 !230 !231 !232 !233 !234 !239)
!397 = (!229 !230 !231 !232 !233 !234)
!398 = (!229 !230 !231 !232 !233 !234 !239)
!399 = (!229 !230 !231 !232 !233 !234)
!400 = (!229 !230 !231 !232 !233 !234)
!401 = (!229 !230 !231 !232 !247)
!402 = (!229 !230 !231 !232)
!403 = (!229 !230 !231 !232 !247)
!404 = (!229 !230 !231 !232)
!405 = (!229 !230 !231 !232 !247)
!406 = (!229 !230 !231 !232)
!407 = (!229 !230 !231 !232)
!408 = (!229 !230 !256)
!409 = (!229 !230 !256)
!410 = (!229 !230 !259)
!411 = (!229 !230 !259)
!412 = (!229 !230 !259)
!413 = (!229 !230 !264)
!414 = (!229 !230 !266)
!415 = (!229 !230 !268)
!416 = (!229 !230 !270)
!417 = (!229 !230)
!418 = (!229 !230 !274 !275 !277)
!419 = (!229 !230 !274 !275)
!420 = (!229 !230 !281)
!421 = span !90 28831 28832
!422 = span !90 28823 29132
!423 = fn_name_span !90 28826 28830
!424 = (!422 !423)
!425 = (!231 !232 !233 !234 !235 !236 !100)
!426 = (!231 !232 !233 !234 !235 !236)
!427 = (!231 !232 !233 !234 !239)
!428 = (!231 !232 !233 !234)
!429 = (!231 !232 !233 !234 !239)
!430 = (!231 !232 !233 !234)
!431 = (!231 !232 !233 !234 !239)
!432 = (!231 !232 !233 !234)
!433 = (!231 !232 !233 !234)
!434 = (!231 !232 !247)
!435 = (!231 !232)
!436 = (!231 !232 !247)
!437 = (!231 !232 !247)
!438 = (!274 !275 !277)
!439 = (!274 !275)
!440 = span !90 4100 4108
!441 = span !90 4079 4227
!442 = fn_name_span !90 4086 4099
!443 = (!441 !442)
!444 = (!233 !234 !235 !236 !100)
!445 = (!233 !234 !235 !236)
!446 = (!233 !234 !239)
!447 = (!233 !234)
!448 = (!233 !234 !239)
!449 = (!233 !234 !239)
!450 = span !90 806 814
!451 = span !90 785 928
!452 = fn_name_span !90 792 805
!453 = (!451 !452)
!454 = (!235 !236 !100)
!455 = (!235 !236)
!456 = span !276 5960 5964
!457 = span !276 5966 5969
!458 = span !276 5977 5982
!459 = span !276 5939 6083
!460 = fn_name_span !276 5946 5959
!461 = (!459 !460)
!462 = span !168 4952 4956
!463 = span !168 4938 5081
!464 = fn_name_span !168 4945 4951
!465 = (!463 !464)
!466 = (!202 !203)
!467 = (!218 !219 !221)
!468 = span !156 16751 16755
!469 = span !156 16757 16762
!470 = span !156 16745 16811
!471 = fn_name_span !156 16748 16750
!472 = (!470 !471)
!473 = span !220 735 739
!474 = span !220 721 773
!475 = fn_name_span !220 728 734
!476 = (!474 !475)
!477 = span !146 1538 1542
!478 = span !146 1526 1716
!479 = fn_name_span !146 1529 1537
!480 = (!478 !479)
!481 = (!150 !151)
!482 = (!154 !155 !157 !158)
!483 = (!154 !155 !157 !158)
!484 = (!154 !155 !162 !163)
!485 = (!154 !155 !162 !163)
!486 = (!154 !155)
!487 = (!184 !185)
!488 = span !156 15477 15481
!489 = span !156 15483 15488
!490 = span !156 15470 15542
!491 = fn_name_span !156 15473 15476
!492 = (!490 !491)
!493 = (!157 !158)
!494 = (!162 !163)
!495 = span !156 12498 12502
!496 = span !156 12491 12545
!497 = fn_name_span !156 12494 12497
!498 = (!496 !497)
!499 = span !90 13782 13786
!500 = span !90 13771 13819
!501 = fn_name_span !90 13778 13781
!502 = (!500 !501)
!503 = span !90 2506 2514
!504 = span !90 15186 15190
!505 = span !90 15175 15233
!506 = fn_name_span !90 15182 15185
!507 = (!505 !506)
!508 = span !90 15213 15227
!509 = fn_call_path_span !90 15222 15225
!510 = (!508 !509)
!511 = span !90 989 993
!512 = span !90 978 1030
!513 = fn_name_span !90 985 988
!514 = (!512 !513)
!515 = span !305 2340 2344
!516 = span !305 2332 2389
!517 = fn_name_span !305 2335 2339
!518 = (!516 !517)
!519 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!520 = span !519 9026 9027
!521 = span !519 9009 9138
!522 = fn_name_span !519 9016 9022
!523 = inline "never"
!524 = (!521 !522 !523)
!525 = span !519 9082 9095
!526 = fn_call_path_span !519 9082 9093
!527 = (!525 !526)
!528 = span !519 9065 9096
!529 = span !519 9108 9114
!530 = span !519 9101 9115
!531 = fn_call_path_span !519 9103 9107
!532 = (!530 !531)
!533 = span !228 524 536
!534 = (!530 !531 !533)
!535 = span !228 5123 5146
!536 = fn_call_path_span !228 5129 5134
!537 = span !519 142 154
!538 = (!530 !531 !535 !536 !537)
!539 = (!530 !531 !535 !536)
!540 = (!530 !531 !535 !536)
!541 = span !519 365 389
!542 = fn_call_path_span !519 376 382
!543 = (!530 !531 !535 !536 !541 !542)
!544 = span !90 18398 18409
!545 = fn_call_path_span !90 18404 18407
!546 = (!530 !531 !535 !536 !541 !542 !544 !545)
!547 = span !90 18382 18410
!548 = (!530 !531 !535 !536 !541 !542 !547)
!549 = span !90 18422 18431
!550 = (!530 !531 !535 !536 !541 !542 !549)
!551 = span !90 18435 18436
!552 = span !90 18422 18436
!553 = fn_call_path_span !90 18432 18434
!554 = (!530 !531 !535 !536 !541 !542 !552 !553)
!555 = (!530 !531 !535 !536 !541 !542 !552 !553)
!556 = (!530 !531 !535 !536 !541 !542 !552)
!557 = span !90 18451 18457
!558 = (!530 !531 !535 !536 !541 !542 !557)
!559 = (!530 !531 !535 !536 !541 !542)
!560 = (!530 !531 !535 !536 !541 !542 !503)
!561 = (!530 !531 !535 !536 !541 !542)
!562 = span !90 18572 18573
!563 = span !90 18560 18573
!564 = fn_call_path_span !90 18569 18571
!565 = (!530 !531 !535 !536 !541 !542 !563 !564)
!566 = (!530 !531 !535 !536 !541 !542 !563 !564)
!567 = (!530 !531 !535 !536 !541 !542 !563)
!568 = (!530 !531 !535 !536 !541 !542)
!569 = span !90 18588 18600
!570 = (!530 !531 !535 !536 !541 !542 !569)
!571 = span !90 18614 18620
!572 = (!530 !531 !535 !536 !541 !542 !571)
!573 = (!530 !531 !535 !536 !541 !542)
!574 = (!530 !531 !535 !536 !541 !542 !503)
!575 = (!530 !531 !535 !536 !541 !542)
!576 = span !90 18668 18677
!577 = (!530 !531 !535 !536 !541 !542 !576)
!578 = span !90 18657 18677
!579 = fn_call_path_span !90 18666 18667
!580 = (!530 !531 !535 !536 !541 !542 !578 !579)
!581 = (!530 !531 !535 !536 !541 !542 !578 !579)
!582 = span !90 18642 18678
!583 = (!530 !531 !535 !536 !541 !542 !582)
!584 = (!530 !531 !535 !536 !541 !542 !503)
!585 = (!530 !531 !535 !536 !541 !542)
!586 = span !90 18687 18714
!587 = (!530 !531 !535 !536 !541 !542 !586)
!588 = (!530 !531 !535 !536 !541 !542 !268)
!589 = (!530 !531 !535 !536 !541 !542)
!590 = span !90 18808 18827
!591 = fn_call_path_span !90 18817 18825
!592 = (!530 !531 !535 !536 !541 !542 !590 !591)
!593 = span !90 18830 18838
!594 = (!530 !531 !535 !536 !541 !542 !593)
!595 = span !90 18808 18838
!596 = fn_call_path_span !90 18828 18829
!597 = (!530 !531 !535 !536 !541 !542 !595 !596)
!598 = (!530 !531 !535 !536 !541 !542 !595 !596)
!599 = (!530 !531 !535 !536 !541 !542 !595)
!600 = (!530 !531 !535 !536 !541 !542 !268)
!601 = (!530 !531 !535 !536 !541 !542)
!602 = span !90 18928 18942
!603 = fn_call_path_span !90 18937 18940
!604 = (!530 !531 !535 !536 !541 !542 !602 !603)
!605 = (!530 !531 !535 !536 !541 !542 !268)
!606 = (!530 !531 !535 !536 !541 !542)
!607 = span !90 18944 18963
!608 = fn_call_path_span !90 18953 18961
!609 = (!530 !531 !535 !536 !541 !542 !607 !608)
!610 = span !90 18965 18973
!611 = (!530 !531 !535 !536 !541 !542 !610)
!612 = span !90 18914 18974
!613 = fn_call_path_span !90 18914 18927
!614 = span !99 4168 4185
!615 = fn_call_path_span !99 4178 4179
!616 = (!530 !531 !535 !536 !541 !542 !612 !613 !614 !615)
!617 = (!530 !531 !535 !536 !541 !542 !612 !613 !614 !615)
!618 = (!530 !531 !535 !536 !541 !542 !612 !613 !614)
!619 = span !99 4210 4232
!620 = fn_call_path_span !99 4210 4221
!621 = (!530 !531 !535 !536 !541 !542 !612 !613 !619 !620 !100)
!622 = (!530 !531 !535 !536 !541 !542 !612 !613 !619 !620)
!623 = span !99 4196 4233
!624 = (!530 !531 !535 !536 !541 !542 !612 !613 !623)
!625 = span !99 4253 4254
!626 = span !99 4245 4254
!627 = fn_call_path_span !99 4251 4252
!628 = (!530 !531 !535 !536 !541 !542 !612 !613 !626 !627)
!629 = (!530 !531 !535 !536 !541 !542 !612 !613 !626 !627)
!630 = (!530 !531 !535 !536 !541 !542 !612 !613 !626)
!631 = span !99 4287 4294
!632 = (!530 !531 !535 !536 !541 !542 !612 !613 !631)
!633 = span !99 4269 4302
!634 = fn_call_path_span !99 4273 4286
!635 = (!530 !531 !535 !536 !541 !542 !612 !613 !633 !634 !277)
!636 = (!530 !531 !535 !536 !541 !542 !612 !613 !633 !634)
!637 = (!530 !531 !535 !536 !541 !542 !612 !613)
!638 = (!530 !531 !535 !536 !541 !542 !612 !613)
!639 = span !99 4322 4329
!640 = (!530 !531 !535 !536 !541 !542 !612 !613 !639)
!641 = (!530 !531 !535 !536 !541 !542 !612 !613)
!642 = (!530 !531 !535 !536 !541 !542 !612 !613)
!643 = (!530 !531 !535 !536 !541 !542 !612 !613)
!644 = span !90 18992 19000
!645 = (!530 !531 !535 !536 !541 !542 !644)
!646 = span !90 18869 19015
!647 = fn_call_path_span !90 18869 18890
!648 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!649 = span !648 2368 2392
!650 = fn_call_path_span !648 2374 2375
!651 = (!530 !531 !535 !536 !541 !542 !646 !647 !649 !650)
!652 = (!530 !531 !535 !536 !541 !542 !646 !647 !649 !650)
!653 = span !648 2362 2393
!654 = (!530 !531 !535 !536 !541 !542 !646 !647 !653)
!655 = (!530 !531 !535 !536 !541 !542 !646 !647 !653)
!656 = (!530 !531 !535 !536 !541 !542 !646 !647 !653)
!657 = (!530 !531 !535 !536 !541 !542 !646 !647 !653)
!658 = (!530 !531 !535 !536 !541 !542 !646 !647 !653)
!659 = (!530 !531 !535 !536 !541 !542 !646 !647)
!660 = span !648 2351 2394
!661 = fn_call_path_span !648 2351 2361
!662 = span !648 1248 1294
!663 = (!530 !531 !535 !536 !541 !542 !646 !647 !660 !661 !662)
!664 = (!530 !531 !535 !536 !541 !542 !646 !647 !660 !661)
!665 = (!530 !531 !535 !536 !541 !542 !646 !647)
!666 = span !90 18853 19016
!667 = (!530 !531 !535 !536 !541 !542 !666)
!668 = (!530 !531 !535 !536 !541 !542 !666)
!669 = span !90 19055 19064
!670 = (!530 !531 !535 !536 !541 !542 !669)
!671 = (!530 !531 !535 !536 !541 !542)
!672 = span !90 19040 19065
!673 = fn_call_path_span !90 19040 19054
!674 = span !90 2130 2153
!675 = fn_call_path_span !90 2136 2151
!676 = span !648 3959 3975
!677 = fn_call_path_span !648 3959 3969
!678 = span !648 1624 1675
!679 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675 !676 !677 !678)
!680 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675 !676 !677)
!681 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675)
!682 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675)
!683 = span !648 3976 3977
!684 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675 !683)
!685 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675)
!686 = (!530 !531 !535 !536 !541 !542 !672 !673 !674 !675)
!687 = span !90 2120 2154
!688 = (!530 !531 !535 !536 !541 !542 !672 !673 !687)
!689 = span !90 2185 2188
!690 = (!530 !531 !535 !536 !541 !542 !672 !673 !689)
!691 = span !90 2173 2189
!692 = fn_call_path_span !90 2173 2184
!693 = (!530 !531 !535 !536 !541 !542 !672 !673 !691 !692 !100)
!694 = (!530 !531 !535 !536 !541 !542 !672 !673 !691 !692)
!695 = span !90 2163 2190
!696 = (!530 !531 !535 !536 !541 !542 !672 !673 !695)
!697 = span !90 2202 2205
!698 = (!530 !531 !535 !536 !541 !542 !672 !673 !697)
!699 = span !90 2208 2209
!700 = span !90 2202 2209
!701 = fn_call_path_span !90 2206 2207
!702 = (!530 !531 !535 !536 !541 !542 !672 !673 !700 !701)
!703 = (!530 !531 !535 !536 !541 !542 !672 !673 !700 !701)
!704 = (!530 !531 !535 !536 !541 !542 !672 !673 !700)
!705 = span !90 2224 2235
!706 = fn_call_path_span !90 2230 2233
!707 = span !648 2911 2927
!708 = fn_call_path_span !648 2911 2921
!709 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706 !707 !708 !678)
!710 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706 !707 !708)
!711 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706)
!712 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706)
!713 = span !648 2928 2929
!714 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706 !713)
!715 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706)
!716 = (!530 !531 !535 !536 !541 !542 !672 !673 !705 !706)
!717 = span !90 2250 2253
!718 = (!530 !531 !535 !536 !541 !542 !672 !673 !717)
!719 = span !90 2255 2258
!720 = (!530 !531 !535 !536 !541 !542 !672 !673 !719)
!721 = span !90 2224 2259
!722 = fn_call_path_span !90 2236 2243
!723 = span !276 3413 3437
!724 = fn_call_path_span !276 3419 3420
!725 = (!530 !531 !535 !536 !541 !542 !672 !673 !721 !722 !723 !724)
!726 = (!530 !531 !535 !536 !541 !542 !672 !673 !721 !722 !723 !724)
!727 = span !276 3403 3438
!728 = (!530 !531 !535 !536 !541 !542 !672 !673 !721 !722 !727)
!729 = span !276 3477 3480
!730 = (!530 !531 !535 !536 !541 !542 !672 !673 !721 !722 !729)
!731 = span !276 3447 3522
!732 = (!530 !531 !535 !536 !541 !542 !672 !673 !721 !722 !731)
!733 = span !276 3496 3511
!734 = (!530 !531 !535 !536 !541 !542 !672 !673 !721 !722)
!735 = (!530 !531 !535 !536 !541 !542 !672 !673)
!736 = (!530 !531 !535 !536 !541 !542 !672 !673)
!737 = span !90 2286 2289
!738 = (!530 !531 !535 !536 !541 !542 !672 !673 !737)
!739 = span !90 2291 2294
!740 = (!530 !531 !535 !536 !541 !542 !672 !673 !739)
!741 = span !90 2279 2296
!742 = (!530 !531 !535 !536 !541 !542 !672 !673 !741)
!743 = (!530 !531 !535 !536 !541 !542 !672 !673)
!744 = (!530 !531 !535 !536 !541 !542 !672 !673 !741)
!745 = (!530 !531 !535 !536 !541 !542 !672 !673)
!746 = (!530 !531 !535 !536 !541 !542 !672 !673 !741)
!747 = (!530 !531 !535 !536 !541 !542 !672 !673)
!748 = (!530 !531 !535 !536 !541 !542 !672 !673)
!749 = span !90 19029 19065
!750 = (!530 !531 !535 !536 !541 !542 !749)
!751 = (!530 !531 !535 !536 !541 !542 !749)
!752 = (!530 !531 !535 !536 !541 !542)
!753 = (!530 !531 !535 !536 !541 !542)
!754 = (!530 !531 !535 !536 !541 !542 !268)
!755 = (!530 !531 !535 !536 !541 !542)
!756 = span !90 19100 19114
!757 = fn_call_path_span !90 19109 19112
!758 = (!530 !531 !535 !536 !541 !542 !756 !757)
!759 = span !90 19131 19142
!760 = (!530 !531 !535 !536 !541 !542 !759)
!761 = span !90 19100 19143
!762 = fn_call_path_span !90 19115 19130
!763 = span !276 6721 6825
!764 = (!530 !531 !535 !536 !541 !542 !761 !762 !763)
!765 = span !276 6771 6789
!766 = (!530 !531 !535 !536 !541 !542 !761 !762)
!767 = span !90 19086 19144
!768 = (!530 !531 !535 !536 !541 !542 !767)
!769 = (!530 !531 !535 !536 !541 !542)
!770 = span !90 19153 19164
!771 = fn_call_path_span !90 19159 19162
!772 = (!530 !531 !535 !536 !541 !542 !770 !771)
!773 = span !90 19179 19186
!774 = (!530 !531 !535 !536 !541 !542 !773)
!775 = span !90 19188 19197
!776 = (!530 !531 !535 !536 !541 !542 !775)
!777 = span !90 19153 19198
!778 = fn_call_path_span !90 19165 19178
!779 = (!530 !531 !535 !536 !541 !542 !777 !778 !277)
!780 = (!530 !531 !535 !536 !541 !542 !777 !778)
!781 = span !90 19255 19263
!782 = (!530 !531 !535 !536 !541 !542 !781)
!783 = span !90 19244 19263
!784 = (!530 !531 !535 !536 !541 !542 !783)
!785 = (!530 !531 !535 !536 !541 !542 !783)
!786 = (!530 !531 !535 !536 !541 !542)
!787 = (!530 !531 !535 !536)
!788 = span !519 9121 9127
!789 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!790 = span !789 7904 7970
!791 = span !519 9121 9136
!792 = fn_call_path_span !519 9128 9134
!793 = span !519 464 475
!794 = fn_call_path_span !519 464 473
!795 = (!791 !792 !793 !794)
!796 = span !519 440 476
!797 = (!791 !792 !796)
!798 = (!791 !792 !796)
!799 = span !519 508 521
!800 = (!791 !792 !799)
!801 = (!791 !792)
!802 = (!791 !792 !537)
!803 = span !519 540 556
!804 = fn_call_path_span !519 551 554
!805 = (!791 !792 !803 !804)
!806 = (!791 !792 !537)
!807 = span !519 577 593
!808 = fn_call_path_span !519 588 591
!809 = (!791 !792 !807 !808)
!810 = span !519 485 672
!811 = (!791 !792 !810)
!812 = span !519 619 638
!813 = span !519 177 263
!814 = fn_name_span !519 184 187
!815 = (!813 !814)
!816 = span !519 234 246
!817 = fn_call_path_span !519 234 244
!818 = (!816 !817 !95 !96 !97 !98 !100)
!819 = (!816 !817 !95 !96 !97 !98)
!820 = (!816 !817 !95 !96 !104)
!821 = (!816 !817 !95 !96)
!822 = (!816 !817 !95 !96 !104)
!823 = (!816 !817 !95 !96)
!824 = (!816 !817 !95 !96 !104)
!825 = (!816 !817 !95 !96)
!826 = (!816 !817 !95 !96)
!827 = (!816 !817 !110)
!828 = (!816 !817)
!829 = (!816 !817 !110)
!830 = (!816 !817 !110)
!831 = span !519 208 257
!832 = span !228 5084 5088
!833 = span !228 5098 5103
!834 = span !228 5076 5153
!835 = fn_name_span !228 5079 5083
!836 = (!834 !835)
!837 = (!535 !536 !537)
!838 = (!535 !536)
!839 = (!535 !536 !541 !542)
!840 = (!535 !536 !541 !542 !544 !545)
!841 = (!535 !536 !541 !542 !547)
!842 = (!535 !536 !541 !542 !549)
!843 = (!535 !536 !541 !542 !552 !553)
!844 = (!535 !536 !541 !542 !552 !553)
!845 = (!535 !536 !541 !542 !552)
!846 = (!535 !536 !541 !542 !557)
!847 = (!535 !536 !541 !542)
!848 = (!535 !536 !541 !542 !503)
!849 = (!535 !536 !541 !542)
!850 = (!535 !536 !541 !542 !563 !564)
!851 = (!535 !536 !541 !542 !563 !564)
!852 = (!535 !536 !541 !542 !563)
!853 = (!535 !536 !541 !542)
!854 = (!535 !536 !541 !542 !569)
!855 = (!535 !536 !541 !542 !571)
!856 = (!535 !536 !541 !542)
!857 = (!535 !536 !541 !542 !503)
!858 = (!535 !536 !541 !542)
!859 = (!535 !536 !541 !542 !576)
!860 = (!535 !536 !541 !542 !578 !579)
!861 = (!535 !536 !541 !542 !578 !579)
!862 = (!535 !536 !541 !542 !582)
!863 = (!535 !536 !541 !542 !503)
!864 = (!535 !536 !541 !542)
!865 = (!535 !536 !541 !542 !586)
!866 = (!535 !536 !541 !542 !268)
!867 = (!535 !536 !541 !542)
!868 = (!535 !536 !541 !542 !590 !591)
!869 = (!535 !536 !541 !542 !593)
!870 = (!535 !536 !541 !542 !595 !596)
!871 = (!535 !536 !541 !542 !595 !596)
!872 = (!535 !536 !541 !542 !595)
!873 = (!535 !536 !541 !542 !268)
!874 = (!535 !536 !541 !542)
!875 = (!535 !536 !541 !542 !602 !603)
!876 = (!535 !536 !541 !542 !268)
!877 = (!535 !536 !541 !542)
!878 = (!535 !536 !541 !542 !607 !608)
!879 = (!535 !536 !541 !542 !610)
!880 = (!535 !536 !541 !542 !612 !613 !614 !615)
!881 = (!535 !536 !541 !542 !612 !613 !614 !615)
!882 = (!535 !536 !541 !542 !612 !613 !614)
!883 = (!535 !536 !541 !542 !612 !613 !619 !620 !100)
!884 = (!535 !536 !541 !542 !612 !613 !619 !620)
!885 = (!535 !536 !541 !542 !612 !613 !623)
!886 = (!535 !536 !541 !542 !612 !613 !626 !627)
!887 = (!535 !536 !541 !542 !612 !613 !626 !627)
!888 = (!535 !536 !541 !542 !612 !613 !626)
!889 = (!535 !536 !541 !542 !612 !613 !631)
!890 = (!535 !536 !541 !542 !612 !613 !633 !634 !277)
!891 = (!535 !536 !541 !542 !612 !613 !633 !634)
!892 = (!535 !536 !541 !542 !612 !613)
!893 = (!535 !536 !541 !542 !612 !613)
!894 = (!535 !536 !541 !542 !612 !613 !639)
!895 = (!535 !536 !541 !542 !612 !613)
!896 = (!535 !536 !541 !542 !612 !613)
!897 = (!535 !536 !541 !542 !612 !613)
!898 = (!535 !536 !541 !542 !644)
!899 = (!535 !536 !541 !542 !646 !647 !649 !650)
!900 = (!535 !536 !541 !542 !646 !647 !649 !650)
!901 = (!535 !536 !541 !542 !646 !647 !653)
!902 = (!535 !536 !541 !542 !646 !647 !653)
!903 = (!535 !536 !541 !542 !646 !647 !653)
!904 = (!535 !536 !541 !542 !646 !647 !653)
!905 = (!535 !536 !541 !542 !646 !647 !653)
!906 = (!535 !536 !541 !542 !646 !647)
!907 = (!535 !536 !541 !542 !646 !647 !660 !661 !662)
!908 = (!535 !536 !541 !542 !646 !647 !660 !661)
!909 = (!535 !536 !541 !542 !646 !647)
!910 = (!535 !536 !541 !542 !666)
!911 = (!535 !536 !541 !542 !666)
!912 = (!535 !536 !541 !542 !669)
!913 = (!535 !536 !541 !542)
!914 = (!535 !536 !541 !542 !672 !673 !674 !675 !676 !677 !678)
!915 = (!535 !536 !541 !542 !672 !673 !674 !675 !676 !677)
!916 = (!535 !536 !541 !542 !672 !673 !674 !675)
!917 = (!535 !536 !541 !542 !672 !673 !674 !675)
!918 = (!535 !536 !541 !542 !672 !673 !674 !675 !683)
!919 = (!535 !536 !541 !542 !672 !673 !674 !675)
!920 = (!535 !536 !541 !542 !672 !673 !674 !675)
!921 = (!535 !536 !541 !542 !672 !673 !687)
!922 = (!535 !536 !541 !542 !672 !673 !689)
!923 = (!535 !536 !541 !542 !672 !673 !691 !692 !100)
!924 = (!535 !536 !541 !542 !672 !673 !691 !692)
!925 = (!535 !536 !541 !542 !672 !673 !695)
!926 = (!535 !536 !541 !542 !672 !673 !697)
!927 = (!535 !536 !541 !542 !672 !673 !700 !701)
!928 = (!535 !536 !541 !542 !672 !673 !700 !701)
!929 = (!535 !536 !541 !542 !672 !673 !700)
!930 = (!535 !536 !541 !542 !672 !673 !705 !706 !707 !708 !678)
!931 = (!535 !536 !541 !542 !672 !673 !705 !706 !707 !708)
!932 = (!535 !536 !541 !542 !672 !673 !705 !706)
!933 = (!535 !536 !541 !542 !672 !673 !705 !706)
!934 = (!535 !536 !541 !542 !672 !673 !705 !706 !713)
!935 = (!535 !536 !541 !542 !672 !673 !705 !706)
!936 = (!535 !536 !541 !542 !672 !673 !705 !706)
!937 = (!535 !536 !541 !542 !672 !673 !717)
!938 = (!535 !536 !541 !542 !672 !673 !719)
!939 = (!535 !536 !541 !542 !672 !673 !721 !722 !723 !724)
!940 = (!535 !536 !541 !542 !672 !673 !721 !722 !723 !724)
!941 = (!535 !536 !541 !542 !672 !673 !721 !722 !727)
!942 = (!535 !536 !541 !542 !672 !673 !721 !722 !729)
!943 = (!535 !536 !541 !542 !672 !673 !721 !722 !731)
!944 = (!535 !536 !541 !542 !672 !673 !721 !722)
!945 = (!535 !536 !541 !542 !672 !673)
!946 = (!535 !536 !541 !542 !672 !673)
!947 = (!535 !536 !541 !542 !672 !673 !737)
!948 = (!535 !536 !541 !542 !672 !673 !739)
!949 = (!535 !536 !541 !542 !672 !673 !741)
!950 = (!535 !536 !541 !542 !672 !673)
!951 = (!535 !536 !541 !542 !672 !673 !741)
!952 = (!535 !536 !541 !542 !672 !673)
!953 = (!535 !536 !541 !542 !672 !673 !741)
!954 = (!535 !536 !541 !542 !672 !673)
!955 = (!535 !536 !541 !542 !672 !673)
!956 = (!535 !536 !541 !542 !749)
!957 = (!535 !536 !541 !542 !749)
!958 = (!535 !536 !541 !542)
!959 = (!535 !536 !541 !542)
!960 = (!535 !536 !541 !542 !268)
!961 = (!535 !536 !541 !542)
!962 = (!535 !536 !541 !542 !756 !757)
!963 = (!535 !536 !541 !542 !759)
!964 = (!535 !536 !541 !542 !761 !762 !763)
!965 = (!535 !536 !541 !542 !761 !762)
!966 = (!535 !536 !541 !542 !767)
!967 = (!535 !536 !541 !542)
!968 = (!535 !536 !541 !542 !770 !771)
!969 = (!535 !536 !541 !542 !773)
!970 = (!535 !536 !541 !542 !775)
!971 = (!535 !536 !541 !542 !777 !778 !277)
!972 = (!535 !536 !541 !542 !777 !778)
!973 = (!535 !536 !541 !542 !781)
!974 = (!535 !536 !541 !542 !783)
!975 = (!535 !536 !541 !542 !783)
!976 = (!535 !536 !541 !542)
!977 = span !519 335 339
!978 = span !519 341 346
!979 = span !519 314 396
!980 = fn_name_span !519 321 326
!981 = (!979 !980)
!982 = (!541 !542)
!983 = (!541 !542 !544 !545)
!984 = (!541 !542 !547)
!985 = (!541 !542 !549)
!986 = (!541 !542 !552 !553)
!987 = (!541 !542 !552 !553)
!988 = (!541 !542 !552)
!989 = (!541 !542 !557)
!990 = (!541 !542 !503)
!991 = (!541 !542 !563 !564)
!992 = (!541 !542 !563 !564)
!993 = (!541 !542 !563)
!994 = (!541 !542 !569)
!995 = (!541 !542 !571)
!996 = (!541 !542 !503)
!997 = (!541 !542 !576)
!998 = (!541 !542 !578 !579)
!999 = (!541 !542 !578 !579)
!1000 = (!541 !542 !582)
!1001 = (!541 !542 !503)
!1002 = (!541 !542 !586)
!1003 = (!541 !542 !268)
!1004 = (!541 !542 !590 !591)
!1005 = (!541 !542 !593)
!1006 = (!541 !542 !595 !596)
!1007 = (!541 !542 !595 !596)
!1008 = (!541 !542 !595)
!1009 = (!541 !542 !268)
!1010 = (!541 !542 !602 !603)
!1011 = (!541 !542 !268)
!1012 = (!541 !542 !607 !608)
!1013 = (!541 !542 !610)
!1014 = (!541 !542 !612 !613 !614 !615)
!1015 = (!541 !542 !612 !613 !614 !615)
!1016 = (!541 !542 !612 !613 !614)
!1017 = (!541 !542 !612 !613 !619 !620 !100)
!1018 = (!541 !542 !612 !613 !619 !620)
!1019 = (!541 !542 !612 !613 !623)
!1020 = (!541 !542 !612 !613 !626 !627)
!1021 = (!541 !542 !612 !613 !626 !627)
!1022 = (!541 !542 !612 !613 !626)
!1023 = (!541 !542 !612 !613 !631)
!1024 = (!541 !542 !612 !613 !633 !634 !277)
!1025 = (!541 !542 !612 !613 !633 !634)
!1026 = (!541 !542 !612 !613)
!1027 = (!541 !542 !612 !613)
!1028 = (!541 !542 !612 !613 !639)
!1029 = (!541 !542 !612 !613)
!1030 = (!541 !542 !612 !613)
!1031 = (!541 !542 !612 !613)
!1032 = (!541 !542 !644)
!1033 = (!541 !542 !646 !647 !649 !650)
!1034 = (!541 !542 !646 !647 !649 !650)
!1035 = (!541 !542 !646 !647 !653)
!1036 = (!541 !542 !646 !647 !653)
!1037 = (!541 !542 !646 !647 !653)
!1038 = (!541 !542 !646 !647 !653)
!1039 = (!541 !542 !646 !647 !653)
!1040 = (!541 !542 !646 !647)
!1041 = (!541 !542 !646 !647 !660 !661 !662)
!1042 = (!541 !542 !646 !647 !660 !661)
!1043 = (!541 !542 !646 !647)
!1044 = (!541 !542 !666)
!1045 = (!541 !542 !666)
!1046 = (!541 !542 !669)
!1047 = (!541 !542 !672 !673 !674 !675 !676 !677 !678)
!1048 = (!541 !542 !672 !673 !674 !675 !676 !677)
!1049 = (!541 !542 !672 !673 !674 !675)
!1050 = (!541 !542 !672 !673 !674 !675)
!1051 = (!541 !542 !672 !673 !674 !675 !683)
!1052 = (!541 !542 !672 !673 !674 !675)
!1053 = (!541 !542 !672 !673 !674 !675)
!1054 = (!541 !542 !672 !673 !687)
!1055 = (!541 !542 !672 !673 !689)
!1056 = (!541 !542 !672 !673 !691 !692 !100)
!1057 = (!541 !542 !672 !673 !691 !692)
!1058 = (!541 !542 !672 !673 !695)
!1059 = (!541 !542 !672 !673 !697)
!1060 = (!541 !542 !672 !673 !700 !701)
!1061 = (!541 !542 !672 !673 !700 !701)
!1062 = (!541 !542 !672 !673 !700)
!1063 = (!541 !542 !672 !673 !705 !706 !707 !708 !678)
!1064 = (!541 !542 !672 !673 !705 !706 !707 !708)
!1065 = (!541 !542 !672 !673 !705 !706)
!1066 = (!541 !542 !672 !673 !705 !706)
!1067 = (!541 !542 !672 !673 !705 !706 !713)
!1068 = (!541 !542 !672 !673 !705 !706)
!1069 = (!541 !542 !672 !673 !705 !706)
!1070 = (!541 !542 !672 !673 !717)
!1071 = (!541 !542 !672 !673 !719)
!1072 = (!541 !542 !672 !673 !721 !722 !723 !724)
!1073 = (!541 !542 !672 !673 !721 !722 !723 !724)
!1074 = (!541 !542 !672 !673 !721 !722 !727)
!1075 = (!541 !542 !672 !673 !721 !722 !729)
!1076 = (!541 !542 !672 !673 !721 !722 !731)
!1077 = (!541 !542 !672 !673 !721 !722)
!1078 = (!541 !542 !672 !673)
!1079 = (!541 !542 !672 !673)
!1080 = (!541 !542 !672 !673 !737)
!1081 = (!541 !542 !672 !673 !739)
!1082 = (!541 !542 !672 !673 !741)
!1083 = (!541 !542 !672 !673)
!1084 = (!541 !542 !672 !673 !741)
!1085 = (!541 !542 !672 !673)
!1086 = (!541 !542 !672 !673 !741)
!1087 = (!541 !542 !672 !673)
!1088 = (!541 !542 !672 !673)
!1089 = (!541 !542 !749)
!1090 = (!541 !542 !749)
!1091 = (!541 !542 !268)
!1092 = (!541 !542 !756 !757)
!1093 = (!541 !542 !759)
!1094 = (!541 !542 !761 !762 !763)
!1095 = (!541 !542 !761 !762)
!1096 = (!541 !542 !767)
!1097 = (!541 !542 !770 !771)
!1098 = (!541 !542 !773)
!1099 = (!541 !542 !775)
!1100 = (!541 !542 !777 !778 !277)
!1101 = (!541 !542 !777 !778)
!1102 = (!541 !542 !781)
!1103 = (!541 !542 !783)
!1104 = (!541 !542 !783)
!1105 = span !90 18345 18349
!1106 = span !90 18359 18364
!1107 = span !90 18323 19270
!1108 = fn_name_span !90 18330 18336
!1109 = (!1107 !1108)
!1110 = (!544 !545)
!1111 = (!552 !553)
!1112 = (!563 !564)
!1113 = (!578 !579)
!1114 = (!590 !591)
!1115 = (!595 !596)
!1116 = (!602 !603)
!1117 = (!607 !608)
!1118 = (!612 !613 !614 !615)
!1119 = (!612 !613 !614 !615)
!1120 = (!612 !613 !614)
!1121 = (!612 !613 !619 !620 !100)
!1122 = (!612 !613 !619 !620)
!1123 = (!612 !613 !623)
!1124 = (!612 !613 !626 !627)
!1125 = (!612 !613 !626 !627)
!1126 = (!612 !613 !626)
!1127 = (!612 !613 !631)
!1128 = (!612 !613 !633 !634 !277)
!1129 = (!612 !613 !633 !634)
!1130 = (!612 !613)
!1131 = (!612 !613 !639)
!1132 = (!646 !647 !649 !650)
!1133 = (!646 !647 !649 !650)
!1134 = (!646 !647 !653)
!1135 = (!646 !647 !653)
!1136 = (!646 !647 !653)
!1137 = (!646 !647 !653)
!1138 = (!646 !647 !653)
!1139 = (!646 !647)
!1140 = (!646 !647 !660 !661 !662)
!1141 = (!646 !647 !660 !661)
!1142 = (!672 !673 !674 !675 !676 !677 !678)
!1143 = (!672 !673 !674 !675 !676 !677)
!1144 = (!672 !673 !674 !675)
!1145 = (!672 !673 !674 !675)
!1146 = (!672 !673 !674 !675 !683)
!1147 = (!672 !673 !674 !675)
!1148 = (!672 !673 !674 !675)
!1149 = (!672 !673 !687)
!1150 = (!672 !673 !689)
!1151 = (!672 !673 !691 !692 !100)
!1152 = (!672 !673 !691 !692)
!1153 = (!672 !673 !695)
!1154 = (!672 !673 !697)
!1155 = (!672 !673 !700 !701)
!1156 = (!672 !673 !700 !701)
!1157 = (!672 !673 !700)
!1158 = (!672 !673 !705 !706 !707 !708 !678)
!1159 = (!672 !673 !705 !706 !707 !708)
!1160 = (!672 !673 !705 !706)
!1161 = (!672 !673 !705 !706)
!1162 = (!672 !673 !705 !706 !713)
!1163 = (!672 !673 !705 !706)
!1164 = (!672 !673 !705 !706)
!1165 = (!672 !673 !717)
!1166 = (!672 !673 !719)
!1167 = (!672 !673 !721 !722 !723 !724)
!1168 = (!672 !673 !721 !722 !723 !724)
!1169 = (!672 !673 !721 !722 !727)
!1170 = (!672 !673 !721 !722 !729)
!1171 = (!672 !673 !721 !722 !731)
!1172 = (!672 !673 !721 !722)
!1173 = (!672 !673)
!1174 = (!672 !673 !737)
!1175 = (!672 !673 !739)
!1176 = (!672 !673 !741)
!1177 = (!672 !673 !741)
!1178 = (!672 !673 !741)
!1179 = (!756 !757)
!1180 = (!761 !762 !763)
!1181 = (!761 !762)
!1182 = (!770 !771)
!1183 = (!777 !778 !277)
!1184 = (!777 !778)
!1185 = span !156 1239 1243
!1186 = span !156 1245 1250
!1187 = span !156 1232 1300
!1188 = fn_name_span !156 1235 1238
!1189 = (!1187 !1188)
!1190 = span !156 20651 20655
!1191 = span !156 20657 20662
!1192 = span !156 20645 20711
!1193 = fn_name_span !156 20648 20650
!1194 = (!1192 !1193)
!1195 = span !90 1097 1101
!1196 = span !90 1081 1134
!1197 = fn_name_span !90 1088 1096
!1198 = (!1196 !1197)
!1199 = span !90 418 426
!1200 = span !648 2307 2310
!1201 = span !648 2321 2326
!1202 = span !648 2286 2400
!1203 = fn_name_span !648 2293 2303
!1204 = (!1202 !1203)
!1205 = (!649 !650)
!1206 = (!660 !661 !662)
!1207 = (!660 !661)
!1208 = span !648 1206 1211
!1209 = span !648 1192 1296
!1210 = fn_name_span !648 1195 1205
!1211 = (!1209 !1210)
!1212 = span !156 6993 6997
!1213 = span !156 6999 7004
!1214 = span !156 6981 7054
!1215 = fn_name_span !156 6984 6992
!1216 = (!1214 !1215)
!1217 = span !99 4106 4109
!1218 = span !99 4120 4125
!1219 = span !99 4132 4141
!1220 = span !99 4085 4362
!1221 = fn_name_span !99 4092 4105
!1222 = (!1220 !1221)
!1223 = (!614 !615)
!1224 = (!619 !620 !100)
!1225 = (!619 !620)
!1226 = (!626 !627)
!1227 = (!633 !634 !277)
!1228 = (!633 !634)
!1229 = span !156 20580 20584
!1230 = span !156 20586 20591
!1231 = span !156 20574 20640
!1232 = fn_name_span !156 20577 20579
!1233 = (!1231 !1232)
!1234 = span !90 2084 2089
!1235 = span !90 2076 2302
!1236 = fn_name_span !90 2079 2083
!1237 = (!1235 !1236)
!1238 = (!674 !675 !676 !677 !678)
!1239 = (!674 !675 !676 !677)
!1240 = (!674 !675)
!1241 = (!674 !675 !683)
!1242 = (!691 !692 !100)
!1243 = (!691 !692)
!1244 = (!700 !701)
!1245 = (!705 !706 !707 !708 !678)
!1246 = (!705 !706 !707 !708)
!1247 = (!705 !706)
!1248 = (!705 !706 !713)
!1249 = (!721 !722 !723 !724)
!1250 = (!721 !722 !723 !724)
!1251 = (!721 !722 !727)
!1252 = (!721 !722 !729)
!1253 = (!721 !722 !731)
!1254 = (!721 !722)
!1255 = span !648 3936 3940
!1256 = span !648 3913 3983
!1257 = fn_name_span !648 3920 3935
!1258 = (!1256 !1257)
!1259 = (!676 !677 !678)
!1260 = (!676 !677)
!1261 = span !648 1582 1587
!1262 = span !648 1568 1677
!1263 = fn_name_span !648 1571 1581
!1264 = (!1262 !1263)
!1265 = span !276 3364 3368
!1266 = span !276 3370 3373
!1267 = span !276 3381 3386
!1268 = span !276 3346 3529
!1269 = fn_name_span !276 3353 3360
!1270 = (!1268 !1269)
!1271 = (!723 !724)
!1272 = span !648 2884 2888
!1273 = span !648 2873 2935
!1274 = fn_name_span !648 2880 2883
!1275 = (!1273 !1274)
!1276 = (!707 !708 !678)
!1277 = (!707 !708)
!1278 = span !276 6684 6688
!1279 = span !276 6690 6696
!1280 = span !276 6661 6831
!1281 = fn_name_span !276 6668 6683
!1282 = (!1280 !1281)
!1283 = span !519 416 420
!1284 = span !519 402 678
!1285 = fn_name_span !519 409 415
!1286 = (!1284 !1285)
!1287 = (!793 !794)
!1288 = (!803 !804)
!1289 = (!807 !808)
!1290 = span !789 7873 7976
!1291 = fn_name_span !789 7880 7883
!1292 = (!1290 !1291)

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    global std::call_frames::FIRST_PARAMETER_OFFSET : u64 = const u64 73

    global std::call_frames::PREV_FRAME_POINTER_OFFSET : u64 = const u64 6

    global std::call_frames::SAVED_REGISTERS_OFFSET : u64 = const u64 8

    global std::call_frames::SECOND_PARAMETER_OFFSET : u64 = const u64 74

    global std::constants::DEFAULT_SUB_ID : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_B256 : b256 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::constants::ZERO_U256 : u256 = const u256 0x0000000000000000000000000000000000000000000000000000000000000000

    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    global std::error_signals::FAILED_ASSERT_NE_SIGNAL : u64 = const u64 18446744073709486085

    global std::error_signals::FAILED_ASSERT_SIGNAL : u64 = const u64 18446744073709486084

    global std::error_signals::FAILED_REQUIRE_SIGNAL : u64 = const u64 18446744073709486080

    global std::error_signals::FAILED_TRANSFER_TO_ADDRESS_SIGNAL : u64 = const u64 18446744073709486081

    global std::error_signals::REVERT_WITH_LOG_SIGNAL : u64 = const u64 18446744073709486086

    global std::flags::F_UNSAFEMATH_DISABLE_MASK : u64 = const u64 1

    global std::flags::F_UNSAFEMATH_ENABLE_MASK : u64 = const u64 18446744073709551614

    global std::flags::F_WRAPPING_DISABLE_MASK : u64 = const u64 2

    global std::flags::F_WRAPPING_ENABLE_MASK : u64 = const u64 18446744073709551613

    global std::inputs::GTF_INPUT_COIN_AMOUNT : u64 = const u64 516

    global std::inputs::GTF_INPUT_COIN_ASSET_ID : u64 = const u64 517

    global std::inputs::GTF_INPUT_COIN_OWNER : u64 = const u64 515

    global std::inputs::GTF_INPUT_COIN_PREDICATE : u64 = const u64 523

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA : u64 = const u64 524

    global std::inputs::GTF_INPUT_COIN_PREDICATE_DATA_LENGTH : u64 = const u64 522

    global std::inputs::GTF_INPUT_COIN_PREDICATE_LENGTH : u64 = const u64 521

    global std::inputs::GTF_INPUT_COIN_WITNESS_INDEX : u64 = const u64 519

    global std::inputs::GTF_INPUT_MESSAGE_AMOUNT : u64 = const u64 578

    global std::inputs::GTF_INPUT_MESSAGE_DATA : u64 = const u64 584

    global std::inputs::GTF_INPUT_MESSAGE_DATA_LENGTH : u64 = const u64 581

    global std::inputs::GTF_INPUT_MESSAGE_NONCE : u64 = const u64 579

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE : u64 = const u64 585

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA : u64 = const u64 586

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_DATA_LENGTH : u64 = const u64 583

    global std::inputs::GTF_INPUT_MESSAGE_PREDICATE_LENGTH : u64 = const u64 582

    global std::inputs::GTF_INPUT_MESSAGE_RECIPIENT : u64 = const u64 577

    global std::inputs::GTF_INPUT_MESSAGE_SENDER : u64 = const u64 576

    global std::inputs::GTF_INPUT_MESSAGE_WITNESS_INDEX : u64 = const u64 580

    global std::inputs::GTF_INPUT_TYPE : u64 = const u64 512

    global std::inputs::INPUT_TYPE_COIN : u8 = const u8 0

    global std::inputs::INPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::inputs::INPUT_TYPE_MESSAGE : u8 = const u8 2

    global std::ops::MAX_U16_U64 : u64 = const u64 65535

    global std::ops::MAX_U32_U64 : u64 = const u64 4294967295

    global std::outputs::GTF_OUTPUT_COIN_AMOUNT : u64 = const u64 770

    global std::outputs::GTF_OUTPUT_COIN_ASSET_ID : u64 = const u64 771

    global std::outputs::GTF_OUTPUT_COIN_TO : u64 = const u64 769

    global std::outputs::GTF_OUTPUT_TYPE : u64 = const u64 768

    global std::outputs::OUTPUT_TYPE_CHANGE : u8 = const u8 2

    global std::outputs::OUTPUT_TYPE_COIN : u8 = const u8 0

    global std::outputs::OUTPUT_TYPE_CONTRACT : u8 = const u8 1

    global std::outputs::OUTPUT_TYPE_CONTRACT_CREATED : u8 = const u8 4

    global std::outputs::OUTPUT_TYPE_VARIABLE : u8 = const u8 3

    global std::outputs::OUTPUT_VARIABLE_ASSET_ID_OFFSET : u64 = const u64 48

    global std::outputs::OUTPUT_VARIABLE_TO_OFFSET : u64 = const u64 8

    global std::storage::storage_map::STORAGE_MAP_DOMAIN : u8 = const u8 1

    global std::tx::GTF_CREATE_INPUTS_COUNT : u64 = const u64 259

    global std::tx::GTF_CREATE_INPUT_AT_INDEX : u64 = const u64 264

    global std::tx::GTF_CREATE_OUTPUTS_COUNT : u64 = const u64 260

    global std::tx::GTF_CREATE_OUTPUT_AT_INDEX : u64 = const u64 265

    global std::tx::GTF_CREATE_WITNESSES_COUNT : u64 = const u64 261

    global std::tx::GTF_CREATE_WITNESS_AT_INDEX : u64 = const u64 266

    global std::tx::GTF_POLICY_MATURITY : u64 = const u64 1283

    global std::tx::GTF_POLICY_MAX_FEE : u64 = const u64 1284

    global std::tx::GTF_POLICY_TIP : u64 = const u64 1281

    global std::tx::GTF_POLICY_TYPES : u64 = const u64 1280

    global std::tx::GTF_POLICY_WITNESS_LIMIT : u64 = const u64 1282

    global std::tx::GTF_SCRIPT_GAS_LIMIT : u64 = const u64 2

    global std::tx::GTF_SCRIPT_INPUTS_COUNT : u64 = const u64 5

    global std::tx::GTF_SCRIPT_INPUT_AT_INDEX : u64 = const u64 11

    global std::tx::GTF_SCRIPT_OUTPUTS_COUNT : u64 = const u64 6

    global std::tx::GTF_SCRIPT_OUTPUT_AT_INDEX : u64 = const u64 12

    global std::tx::GTF_SCRIPT_SCRIPT : u64 = const u64 9

    global std::tx::GTF_SCRIPT_SCRIPT_DATA : u64 = const u64 10

    global std::tx::GTF_SCRIPT_SCRIPT_DATA_LENGTH : u64 = const u64 4

    global std::tx::GTF_SCRIPT_SCRIPT_LENGTH : u64 = const u64 3

    global std::tx::GTF_SCRIPT_WITNESSES_COUNT : u64 = const u64 7

    global std::tx::GTF_SCRIPT_WITNESS_AT_INDEX : u64 = const u64 13

    global std::tx::GTF_TX_LENGTH : u64 = const u64 14

    global std::tx::GTF_TYPE : u64 = const u64 1

    global std::tx::GTF_WITNESS_DATA : u64 = const u64 1025

    global std::tx::GTF_WITNESS_DATA_LENGTH : u64 = const u64 1024

    global std::tx::MATURITY_POLICY : u64 = const u64 4

    global std::tx::MAX_FEE_POLICY : u64 = const u64 8

    global std::tx::TIP_POLICY : u64 = const u64 1

    global std::tx::TX_ID_OFFSET : u64 = const u64 0

    global std::tx::TX_TYPE_BLOB : u8 = const u8 5

    global std::tx::TX_TYPE_CREATE : u8 = const u8 1

    global std::tx::TX_TYPE_MINT : u8 = const u8 2

    global std::tx::TX_TYPE_SCRIPT : u8 = const u8 0

    global std::tx::TX_TYPE_UPGRADE : u8 = const u8 3

    global std::tx::TX_TYPE_UPLOAD : u8 = const u8 4

    global std::tx::WITNESS_LIMIT_POLICY : u64 = const u64 2
    entry fn main() -> (), !3 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr bool, _, !52
        v32 = get_local ptr { [u8; 64] }, secp256k1, !54
        v33 = load v32, !35
        v34 = get_local ptr { { { u64, u64 }, u64 } }, message, !56
        v35 = load v34, !35
        v36 = call address_7(v33, v35), !59
        v37 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !61
        store v36 to v37, !62
        v38 = get_local ptr { [u8; 64] }, secp256k1, !64
        v39 = load v38, !35
        v40 = get_local ptr { { { u64, u64 }, u64 } }, message, !66
        v41 = load v40, !35
        v42 = call address_7(v39, v41), !69
        v43 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !71
        store v42 to v43, !72
        v44 = const unit ()
        ret () v44
    }

    pub fn play_0() -> (), !75 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !76
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !10
        store v0 to v1, !10
        v2 = get_local ptr [u8; 64], __anon_0, !77
        v3 = const u64 0
        br new_5_array_init_loop(v3), !78

        new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !78
        v6 = const u8 0, !19
        store v6 to v5, !79
        v7 = const u64 1
        v8 = add v4, v7, !78
        v9 = const u64 64
        v10 = cmp lt v8 v9, !78
        cbr v10, new_5_array_init_loop(v8), new_5_array_init_exit(), !78

        new_5_array_init_exit():
        v11 = load v2, !78
        v12 = get_local ptr { [u8; 64] }, __anon_1, !80
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !78
        store v11 to v14, !81
        v15 = load v12, !78
        v16 = get_local ptr { [u8; 64] }, secp256k1, !30
        store v15 to v16, !30
        v17 = get_local ptr { [u8; 64] }, secp256k1, !33
        v18 = load v17
        v19 = get_local ptr { [u8; 64] }, secp256k1, !36
        v20 = load v19
        v21 = ptr_to_int v18 to u64, !82
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !82
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !83
        v25 = ptr_to_int v20 to u64, !82
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !82
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !84
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !85 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr bool, _, !51
        v32 = get_local ptr { [u8; 64] }, secp256k1, !53
        v33 = load v32
        v34 = get_local ptr { { { u64, u64 }, u64 } }, message, !55
        v35 = load v34
        v36 = call address_7(v33, v35), !86
        v37 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !60
        store v36 to v37, !60
        v38 = get_local ptr { [u8; 64] }, secp256k1, !63
        v39 = load v38
        v40 = get_local ptr { { { u64, u64 }, u64 } }, message, !65
        v41 = load v40
        v42 = call address_7(v39, v41), !87
        v43 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !70
        store v42 to v43, !70
        v44 = const unit ()
        ret () v44
    }

    pub fn new_2() -> { { u64, u64 }, u64 }, !91 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry():
        v0 = const u64 0, !92
        v1 = asm(size: v0) -> u64 hp, !99 {
            aloc   size, !100
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !102
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !103
        store v1 to v4, !104
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !103
        v7 = const u64 0, !105
        store v7 to v6, !106
        v8 = load v2, !103
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !107
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10
        store v8 to v11, !107
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12
        v14 = const u64 0, !108
        store v14 to v13, !107
        v15 = load v9
        ret { { u64, u64 }, u64 } v15
    }

    pub fn new_3() -> { u64, u64 }, !111 {
        local { u64, u64 } __anon_0

        entry():
        v0 = const u64 0, !92
        v1 = asm(size: v0) -> u64 hp, !112 {
            aloc   size, !100
        }
        v2 = get_local ptr { u64, u64 }, __anon_0, !101
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3
        store v1 to v4, !101
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5
        v7 = const u64 0, !105
        store v7 to v6, !101
        v8 = load v2
        ret { u64, u64 } v8
    }

    pub fn alloc_bytes_4(count !113: u64) -> u64, !116 {
        entry(count: u64):
        v0 = asm(size: count) -> u64 hp, !98 {
            aloc   size, !100
        }
        ret u64 v0
    }

    pub fn new_5() -> { [u8; 64] }, !119 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1

        entry():
        v0 = get_local ptr [u8; 64], __anon_0, !15
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, ptr u8, v2
        v4 = const u8 0, !19
        store v4 to v3, !15
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 64
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        v9 = load v0
        v10 = get_local ptr { [u8; 64] }, __anon_1, !25
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr [u8; 64], v11
        store v9 to v12, !25
        v13 = load v10
        ret { [u8; 64] } v13
    }

    pub fn eq_6(self !120: { [u8; 64] }, other !121: { [u8; 64] }) -> bool, !125 {
        entry(self: { [u8; 64] }, other: { [u8; 64] }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { [u8; 64] }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr [u8; 64], v2, !42
        v4 = ptr_to_int other to u64
        v5 = int_to_ptr v4 to ptr { [u8; 64] }
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr [u8; 64], v6, !42
        v8 = const u64 64, !47
        v9 = asm(result, r2: v3, r3: v7, r4: v8) -> bool result, !48 {
            meq    result r2 r3 r4, !50
        }
        ret bool v9
    }

    pub fn address_7(self !126: { [u8; 64] }, message !127: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !130 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !135
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !136
        v3 = const u64 0, !134
        store v3 to v2, !137
        v4 = ptr_to_int message to u64, !140
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !141
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !144
        v8 = load v7, !145
        v9 = call len_20(v8), !148
        v10 = const u64 32, !149
        v11 = cmp eq v9 v10, !155
        v12 = const bool false, !156
        v13 = cmp eq v11 v12, !159
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !160

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !163
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !164
        v17 = const u64 0, !162
        store v17 to v16, !165
        v18 = load v14, !166
        br recover_8_block0(v18), !168

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !169
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !170
        v22 = const u64 1, !162
        store v22 to v21, !171
        v23 = ptr_to_int message to u64, !172
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !173
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !174
        v27 = load v26, !175
        v28 = call ptr_21(v27), !178
        v29 = asm(bits: v28) -> b256 bits, !180 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !181
        store v29 to v32, !182
        v33 = load v19, !183
        br recover_8_block0(v33), !184

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !188
        store v34 to v35, !189
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !191
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !192
        v39 = load v38, !193
        v40 = const u64 1, !190
        v41 = cmp eq v39 v40, !196
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !197

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !198
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !199
        v46 = load v45, !200
        v47 = get_local ptr b256, inner_value, !202
        store v46 to v47, !203
        v48 = get_local ptr b256, inner_value, !205
        v49 = load v48, !206
        v50 = const u64 32, !207
        v51 = asm(size: v50) -> u64 hp, !219 {
            aloc   size, !100
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !221
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !222
        store v51 to v54, !223
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !224
        store v50 to v56, !225
        v57 = load v52, !226
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !228
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !229
        store v57 to v60, !230
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !231
        v63 = const u64 0, !232
        store v63 to v62, !233
        v64 = load v58, !234
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !236
        store v64 to v65, !237
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !239
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !240
        v69 = const u64 32, !241
        store v69 to v68, !242
        v70 = ptr_to_int v49 to u64, !244
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !246
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !248
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !250
        v76 = load v75, !251
        v77 = const u64 32, !252
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !257 {
            mcp    dst src len, !258
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !260
        v80 = load v79, !261
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !263
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !264
        store v80 to v83, !265
        v84 = load v81, !266
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !267
        store v84 to v87, !268
        v88 = load v0, !269
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !270
        store v88 to v89, !270
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !131
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !131
        v93 = load v92
        v94 = const u64 0, !131
        v95 = cmp eq v93 v94, !273
        cbr v95, block0(), block1(), !271

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !274
        revert v96, !279

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !131
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !280
        store v101 to v102, !280
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !134
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !134
        v106 = const u64 0, !134
        store v106 to v105, !134
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !281
        v108 = load v107
        v109 = call sha256_24(v108), !284
        v110 = get_local ptr { b256 }, __anon_02, !289
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !290
        store v109 to v112, !291
        v113 = load v110, !290
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !134
        store v113 to v116, !134
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !131
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !131
        v121 = load v120
        v122 = const u64 1, !131
        v123 = cmp eq v121 v122, !294
        cbr v123, block2(), block3(), !292

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !131
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !295
        store v128 to v129, !295
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !134
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !134
        v133 = const u64 1, !134
        store v133 to v132, !134
        v134 = get_local ptr { u64 }, e, !296
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !134
        store v135 to v138, !134
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !270
        revert v140, !270

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn recover_8(self !297: { [u8; 64] }, message !298: { { { u64, u64 }, u64 } }) -> { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, !301 {
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_0
        local { u64, ( () | b256 ) } __anon_00
        local { { u64, u64 }, u64 } __anon_000
        local { u64, u64 } __anon_0000
        local { { { u64, u64 }, u64 } } __anon_01
        local { u64, ( () | b256 ) } __anon_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local b256 inner_value

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_0, !134
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !134
        v3 = const u64 0, !134
        store v3 to v2, !134
        v4 = ptr_to_int message to u64, !302
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !302
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !303
        v8 = load v7, !302
        v9 = call len_20(v8), !304
        v10 = const u64 32, !149
        v11 = cmp eq v9 v10, !305
        v12 = const bool false, !156
        v13 = cmp eq v11 v12, !306
        cbr v13, try_into_17_block0(), try_into_17_block1(), !307

        try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_00, !308
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !309
        v17 = const u64 0, !162
        store v17 to v16, !310
        v18 = load v14, !302
        br block0(v18), !311

        try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !312
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !313
        v22 = const u64 1, !162
        store v22 to v21, !314
        v23 = ptr_to_int message to u64, !302
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !302
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !315
        v27 = load v26, !302
        v28 = call ptr_21(v27), !316
        v29 = asm(bits: v28) -> b256 bits, !317 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !318
        store v29 to v32, !319
        v33 = load v19, !302
        br block0(v33), !302

        block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !320
        store v34 to v35, !321
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !322
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !323
        v39 = load v38, !324
        v40 = const u64 1, !190
        v41 = cmp eq v39 v40, !325
        cbr v41, unwrap_14_block0(), unwrap_14_block1(), !326

        unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !327
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !324
        v46 = load v45, !324
        v47 = get_local ptr b256, inner_value, !328
        store v46 to v47, !329
        v48 = get_local ptr b256, inner_value, !330
        v49 = load v48, !324
        v50 = const u64 32, !207
        v51 = asm(size: v50) -> u64 hp, !331 {
            aloc   size, !100
        }
        v52 = get_local ptr { u64, u64 }, __anon_0000, !332
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !333
        store v51 to v54, !334
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !335
        store v50 to v56, !336
        v57 = load v52, !337
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_000, !338
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !339
        store v57 to v60, !340
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !341
        v63 = const u64 0, !232
        store v63 to v62, !342
        v64 = load v58, !343
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !344
        store v64 to v65, !345
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !346
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !347
        v69 = const u64 32, !241
        store v69 to v68, !348
        v70 = ptr_to_int v49 to u64, !349
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !350
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !351
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !352
        v76 = load v75, !353
        v77 = const u64 32, !252
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !354 {
            mcp    dst src len, !258
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !355
        v80 = load v79, !356
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !357
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !358
        store v80 to v83, !359
        v84 = load v81, !358
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !134
        store v84 to v87, !134
        v88 = load v0
        ret { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } v88

        unwrap_14_block1():
        v89 = const u64 0, !274
        revert v89, !360
    }

    pub fn from_9(bits !361: b256) -> { { { u64, u64 }, u64 } }, !364 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local mut { { u64, u64 }, u64 } bytes

        entry(bits: b256):
        v0 = const u64 32, !207
        v1 = asm(size: v0) -> u64 hp, !365 {
            aloc   size, !100
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !366
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !367
        store v1 to v4, !368
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !369
        store v0 to v6, !370
        v7 = load v2, !371
        v8 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !372
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !373
        store v7 to v10, !374
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !375
        v13 = const u64 0, !232
        store v13 to v12, !376
        v14 = load v8, !377
        v15 = get_local ptr { { u64, u64 }, u64 }, bytes, !378
        store v14 to v15, !379
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !380
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !381
        v19 = const u64 32, !241
        store v19 to v18, !382
        v20 = ptr_to_int bits to u64, !383
        v21 = get_local ptr { { u64, u64 }, u64 }, bytes, !384
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64, u64 }, v22, !385
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !386
        v26 = load v25, !387
        v27 = const u64 32, !252
        v28 = asm(dst: v26, src: v20, len: v27) -> (), !388 {
            mcp    dst src len, !258
        }
        v29 = get_local ptr { { u64, u64 }, u64 }, bytes, !389
        v30 = load v29, !387
        v31 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !262
        v32 = const u64 0
        v33 = get_elem_ptr v31, ptr { { u64, u64 }, u64 }, v32
        store v30 to v33, !262
        v34 = load v31
        ret { { { u64, u64 }, u64 } } v34
    }

    pub fn from_10(b !390: b256) -> { { u64, u64 }, u64 }, !393 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00
        local mut { { u64, u64 }, u64 } bytes

        entry(b: b256):
        v0 = const u64 32, !207
        v1 = asm(size: v0) -> u64 hp, !394 {
            aloc   size, !100
        }
        v2 = get_local ptr { u64, u64 }, __anon_00, !395
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !396
        store v1 to v4, !397
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !398
        store v0 to v6, !399
        v7 = load v2, !400
        v8 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !401
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !402
        store v7 to v10, !403
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !402
        v13 = const u64 0, !232
        store v13 to v12, !404
        v14 = load v8, !402
        v15 = get_local ptr { { u64, u64 }, u64 }, bytes, !235
        store v14 to v15, !235
        v16 = get_local ptr { { u64, u64 }, u64 }, bytes, !238
        v17 = const u64 1
        v18 = get_elem_ptr v16, ptr u64, v17, !238
        v19 = const u64 32, !241
        store v19 to v18, !238
        v20 = ptr_to_int b to u64, !243
        v21 = get_local ptr { { u64, u64 }, u64 }, bytes, !245
        v22 = const u64 0
        v23 = get_elem_ptr v21, ptr { u64, u64 }, v22, !247
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !249
        v26 = load v25
        v27 = const u64 32, !252
        v28 = asm(dst: v26, src: v20, len: v27) -> (), !405 {
            mcp    dst src len, !258
        }
        v29 = get_local ptr { { u64, u64 }, u64 }, bytes, !259
        v30 = load v29
        ret { { u64, u64 }, u64 } v30
    }

    pub fn with_capacity_11(capacity !406: u64) -> { { u64, u64 }, u64 }, !409 {
        local { { u64, u64 }, u64 } __anon_0
        local { u64, u64 } __anon_00

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !410 {
            aloc   size, !100
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !411
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !412
        store v0 to v3, !413
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4, !412
        store capacity to v5, !414
        v6 = load v1, !412
        v7 = get_local ptr { { u64, u64 }, u64 }, __anon_0, !227
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { u64, u64 }, v8
        store v6 to v9, !227
        v10 = const u64 1
        v11 = get_elem_ptr v7, ptr u64, v10
        v12 = const u64 0, !232
        store v12 to v11, !227
        v13 = load v7
        ret { { u64, u64 }, u64 } v13
    }

    pub fn with_capacity_12(capacity !415: u64) -> { u64, u64 }, !418 {
        local { u64, u64 } __anon_0

        entry(capacity: u64):
        v0 = asm(size: capacity) -> u64 hp, !419 {
            aloc   size, !100
        }
        v1 = get_local ptr { u64, u64 }, __anon_0, !220
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2
        store v0 to v3, !220
        v4 = const u64 1
        v5 = get_elem_ptr v1, ptr u64, v4
        store capacity to v5, !220
        v6 = load v1
        ret { u64, u64 } v6
    }

    pub fn copy_bytes_to_13(self !420: u64, dst !421: u64, count !422: u64) -> (), !425 {
        entry(self: u64, dst: u64, count: u64):
        v0 = asm(dst: dst, src: self, len: count) -> (), !256 {
            mcp    dst src len, !258
        }
        v1 = const unit ()
        ret () v1
    }

    pub fn unwrap_14(self !426: { u64, ( () | b256 ) }) -> b256, !429 {
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 inner_value

        entry(self: { u64, ( () | b256 ) }):
        v0 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !187
        store self to v0, !187
        v1 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !190
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !190
        v4 = load v3
        v5 = const u64 1, !190
        v6 = cmp eq v4 v5, !430
        cbr v6, block0(), block1(), !194

        block0():
        v7 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !190
        v8 = const u64 1
        v9 = const u64 1
        v10 = get_elem_ptr v7, ptr b256, v8, v9
        v11 = load v10
        v12 = get_local ptr b256, inner_value, !201
        store v11 to v12, !201
        v13 = get_local ptr b256, inner_value, !204
        v14 = load v13
        ret b256 v14

        block1():
        v15 = const u64 0, !274
        revert v15, !431
    }

    pub fn eq_15(self !432: u64, other !433: u64) -> bool, !436 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other
        ret bool v0
    }

    pub fn revert_16(code !437: u64) -> never, !440 {
        entry(code: u64):
        revert code, !278
    }

    pub fn try_into_17(self !441: { { { u64, u64 }, u64 } }) -> { u64, ( () | b256 ) }, !444 {
        local { u64, ( () | b256 ) } __anon_0
        local { u64, ( () | b256 ) } __anon_1

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !143
        v4 = load v3
        v5 = call len_20(v4), !445
        v6 = const u64 32, !149
        v7 = cmp eq v5 v6, !446
        v8 = const bool false, !156
        v9 = cmp eq v7 v8, !447
        cbr v9, block0(), block1(), !150

        block0():
        v10 = get_local ptr { u64, ( () | b256 ) }, __anon_0, !162
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr u64, v11, !162
        v13 = const u64 0, !162
        store v13 to v12, !162
        v14 = load v10
        ret { u64, ( () | b256 ) } v14, !167

        block1():
        v15 = get_local ptr { u64, ( () | b256 ) }, __anon_1, !162
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr u64, v16, !162
        v18 = const u64 1, !162
        store v18 to v17, !162
        v19 = ptr_to_int self to u64
        v20 = int_to_ptr v19 to ptr { { { u64, u64 }, u64 } }
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr { { u64, u64 }, u64 }, v21, !143
        v23 = load v22
        v24 = call ptr_21(v23), !448
        v25 = asm(bits: v24) -> b256 bits, !179 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v15, ptr b256, v26, v27, !162
        store v25 to v28, !162
        v29 = load v15
        ret { u64, ( () | b256 ) } v29
    }

    pub fn neq_18(self !449: u64, other !450: u64) -> bool, !453 {
        entry(self: u64, other: u64):
        v0 = cmp eq self other, !454
        v1 = const bool false, !156
        v2 = cmp eq v0 v1, !455
        ret bool v2
    }

    pub fn not_19(self !456: bool) -> bool, !459 {
        entry(self: bool):
        v0 = const bool false, !156
        v1 = cmp eq self v0
        ret bool v1
    }

    pub fn len_20(self !460: { { u64, u64 }, u64 }) -> u64, !463 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !464
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !465: { { u64, u64 }, u64 }) -> u64, !468 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !247
        v4 = load v3
        v5 = call ptr_22(v4), !471
        ret u64 v5
    }

    pub fn ptr_22(self !472: { u64, u64 }) -> u64, !475 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !249
        v4 = load v3
        ret u64 v4
    }

    pub fn from_23(bits !476: b256) -> { b256 }, !479 {
        local { b256 } __anon_0

        entry(bits: b256):
        v0 = get_local ptr { b256 }, __anon_0, !288
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr b256, v1
        store bits to v2, !288
        v3 = load v0
        ret { b256 } v3
    }

    pub fn sha256_24(s !481: { { { u64, u64 }, u64 } }) -> b256, !485 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local mut { { { u64, u64 }, u64 } } hasher
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !488
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !489
        store v0 to v1, !489
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !490
        v3 = ptr_to_int s to u64, !493
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !493
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !495
        v7 = load v6, !493
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !499
        v10 = ptr_to_int v7 to u64, !500
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !501
        v12 = load v11, !504
        v13 = call len_20(v12), !507
        v14 = get_local ptr u64, other_len, !509
        v15 = get_local ptr u64, other_len, !511
        v16 = const u64 0, !512
        v17 = cmp eq v13 v16, !515
        v18 = const unit (), !516
        cbr v17, hash_26_write_27_block0(v18), hash_26_write_27_append_28_block1(), !517

        hash_26_write_27_append_28_block1():
        v19 = const u64 1
        v20 = get_elem_ptr v9, ptr u64, v19, !518
        v21 = load v20, !519
        v22 = const u64 0, !520
        v23 = cmp eq v21 v22, !523
        cbr v23, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !524

        hash_26_write_27_append_28_block3():
        v24 = load v11, !525
        store v24 to v9, !527
        v25 = const unit (), !528
        br hash_26_write_27_block0(v25), !529

        hash_26_write_27_append_28_block4():
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !530
        v28 = load v27, !531
        v29 = get_local ptr u64, other_len, !533
        v30 = add v28, v13, !536
        v31 = get_local ptr u64, both_len, !538
        v32 = const u64 1
        v33 = get_elem_ptr v9, ptr u64, v32, !539
        v34 = load v33, !540
        v35 = get_local ptr u64, other_start, !542
        v36 = const u64 0
        v37 = get_elem_ptr v9, ptr { u64, u64 }, v36, !543
        v38 = load v37, !544
        v39 = call capacity_31(v38), !547
        v40 = get_local ptr u64, both_len, !549
        v41 = cmp lt v39 v30, !552
        v42 = const unit ()
        cbr v41, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(v42), !553

        hash_26_write_27_append_28_block6():
        v43 = const u64 0
        v44 = get_elem_ptr v9, ptr { u64, u64 }, v43, !554
        v45 = load v44, !555
        v46 = call ptr_22(v45), !558
        v47 = const u64 0
        v48 = get_elem_ptr v9, ptr { u64, u64 }, v47, !559
        v49 = load v48, !560
        v50 = call capacity_31(v49), !563
        v51 = get_local ptr u64, both_len, !565
        v52 = cmp gt v30 v50, !570
        cbr v52, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v46), !571

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v53 = asm(size: v30) -> u64 hp, !574 {
            aloc   size, !100
        }
        v54 = get_local ptr u64, new_ptr0, !576
        v55 = const u64 0, !577
        v56 = cmp gt v50 v55, !580
        v57 = const unit ()
        cbr v56, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(v57), !581

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v58 = get_local ptr u64, new_ptr0, !583
        v59 = asm(dst: v53, src: v46, len: v50) -> (), !586 {
            mcp    dst src len, !258
        }
        v60 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v60), !587

        hash_26_write_27_append_28_realloc_bytes_35_block3(v61: ()):
        v62 = get_local ptr u64, new_ptr0, !589
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v53), !590

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr u64, both_len, !592
        v65 = const u64 1
        v66 = mul v30, v65, !598
        v67 = get_local ptr { u64, u64 }, __anon_0, !600
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !601
        store v63 to v69, !602
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr u64, v70, !603
        store v66 to v71, !604
        v72 = load v67, !605
        v73 = asm(ptr: v72) -> slice ptr, !609 {
        }
        v74 = get_local ptr slice, new_slice, !611
        store v73 to v74, !612
        v75 = get_local ptr slice, new_slice, !614
        v76 = load v75, !615
        v77 = asm(ptr: v76) -> { u64, u64 } ptr, !623 {
        }
        v78 = get_local ptr { u64, u64 }, __anon_000, !624
        store v77 to v78, !625
        v79 = const u64 1
        v80 = get_elem_ptr v78, ptr u64, v79, !627
        v81 = load v80, !628
        v82 = get_local ptr u64, cap, !630
        v83 = get_local ptr u64, cap, !632
        v84 = asm(size: v81) -> u64 hp, !635 {
            aloc   size, !100
        }
        v85 = get_local ptr u64, ptr, !637
        v86 = get_local ptr u64, cap, !639
        v87 = const u64 0, !640
        v88 = cmp gt v81 v87, !643
        v89 = const unit ()
        cbr v88, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(v89), !644

        hash_26_write_27_append_28_from_37_block0():
        v90 = asm(ptr: v76) -> { u64, u64 } ptr, !649 {
        }
        v91 = get_local ptr { u64, u64 }, __anon_01, !650
        store v90 to v91, !651
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !653
        v94 = load v93, !654
        v95 = get_local ptr u64, ptr, !656
        v96 = get_local ptr u64, cap, !658
        v97 = const u64 1
        v98 = mul v81, v97, !663
        v99 = get_local ptr u64, len, !665
        v100 = get_local ptr u64, len, !667
        v101 = asm(dst: v84, src: v94, len: v98) -> (), !669 {
            mcp    dst src len, !670
        }
        v102 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v102), !671

        hash_26_write_27_append_28_from_37_block2(v103: ()):
        v104 = get_local ptr u64, ptr, !673
        v105 = get_local ptr u64, cap, !675
        v106 = get_local ptr { u64, u64 }, __anon_00, !677
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !678
        store v84 to v108, !679
        v109 = const u64 1
        v110 = get_elem_ptr v106, ptr u64, v109, !680
        store v81 to v110, !681
        v111 = load v106, !682
        v112 = const u64 0
        v113 = get_elem_ptr v9, ptr { u64, u64 }, v112, !684
        store v111 to v113, !685
        v114 = const unit ()
        br hash_26_write_27_append_28_block8(v114), !686

        hash_26_write_27_append_28_block8(v115: ()):
        v116 = const u64 0
        v117 = get_elem_ptr v9, ptr { u64, u64 }, v116, !687
        v118 = load v117, !688
        v119 = call ptr_22(v118), !691
        v120 = get_local ptr u64, other_start, !693
        v121 = asm(ptr: v119, offset: v34, new) -> u64 new, !697 {
            add    new ptr offset, !698
        }
        v122 = get_local ptr u64, new_ptr, !700
        v123 = load v11, !701
        v124 = call ptr_21(v123), !704
        v125 = get_local ptr u64, new_ptr, !706
        v126 = get_local ptr u64, other_len, !708
        v127 = asm(dst: v121, src: v124, len: v13) -> (), !711 {
            mcp    dst src len, !258
        }
        v128 = get_local ptr u64, both_len, !713
        v129 = const u64 1
        v130 = get_elem_ptr v9, ptr u64, v129, !715
        store v30 to v130, !716
        v131 = const unit ()
        br hash_26_write_27_block0(v131), !717

        hash_26_write_27_block0(v132: ()):
        v133 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !718
        v134 = load v133
        v135 = get_local ptr b256, result_buffer, !722
        v136 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !724
        store v136 to v135, !725
        v137 = get_local ptr b256, result_buffer, !727
        v138 = ptr_to_int v134 to u64, !728
        v139 = int_to_ptr v138 to ptr { { { u64, u64 }, u64 } }, !728
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr { { u64, u64 }, u64 }, v140, !729
        v142 = load v141, !728
        v143 = call ptr_21(v142), !732
        v144 = ptr_to_int v134 to u64, !728
        v145 = int_to_ptr v144 to ptr { { { u64, u64 }, u64 } }, !728
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr { { u64, u64 }, u64 }, v146, !733
        v148 = load v147, !728
        v149 = call len_20(v148), !736
        v150 = asm(hash: v137, ptr: v143, bytes: v149) -> b256 hash, !738 {
            s256   hash ptr bytes, !739
        }
        ret b256 v150
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !742 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !92
        v1 = asm(size: v0) -> u64 hp, !745 {
            aloc   size, !100
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !746
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !747
        store v1 to v4, !748
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !749
        v7 = const u64 0, !105
        store v7 to v6, !750
        v8 = load v2, !751
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !752
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !753
        store v8 to v11, !754
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !753
        v14 = const u64 0, !108
        store v14 to v13, !755
        v15 = load v9, !753
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !756
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !756
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn hash_26(self !757: { { { u64, u64 }, u64 } }, state !758: ptr { { { u64, u64 }, u64 } }) -> (), !761 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: { { { u64, u64 }, u64 } }, state: ptr { { { u64, u64 }, u64 } }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { { u64, u64 }, u64 } }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { { u64, u64 }, u64 }, v2, !494
        v4 = load v3
        v5 = const u64 0
        v6 = get_elem_ptr state, ptr { { u64, u64 }, u64 }, v5, !762
        v7 = ptr_to_int v4 to u64, !763
        v8 = int_to_ptr v7 to ptr { { u64, u64 }, u64 }, !763
        v9 = load v8, !764
        v10 = call len_20(v9), !765
        v11 = get_local ptr u64, other_len, !766
        v12 = get_local ptr u64, other_len, !767
        v13 = const u64 0, !512
        v14 = cmp eq v10 v13, !768
        v15 = const unit (), !516
        cbr v14, write_27_block0(v15), write_27_append_28_block1(), !769

        write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v6, ptr u64, v16, !770
        v18 = load v17, !771
        v19 = const u64 0, !520
        v20 = cmp eq v18 v19, !772
        cbr v20, write_27_append_28_block3(), write_27_append_28_block4(), !773

        write_27_append_28_block3():
        v21 = load v8, !774
        store v21 to v6, !775
        v22 = const unit (), !528
        br write_27_block0(v22), !776

        write_27_append_28_block4():
        v23 = const u64 1
        v24 = get_elem_ptr v6, ptr u64, v23, !777
        v25 = load v24, !778
        v26 = get_local ptr u64, other_len, !779
        v27 = add v25, v10, !780
        v28 = get_local ptr u64, both_len, !781
        v29 = const u64 1
        v30 = get_elem_ptr v6, ptr u64, v29, !782
        v31 = load v30, !783
        v32 = get_local ptr u64, other_start, !784
        v33 = const u64 0
        v34 = get_elem_ptr v6, ptr { u64, u64 }, v33, !785
        v35 = load v34, !786
        v36 = call capacity_31(v35), !787
        v37 = get_local ptr u64, both_len, !788
        v38 = cmp lt v36 v27, !789
        v39 = const unit ()
        cbr v38, write_27_append_28_block6(), write_27_append_28_block8(v39), !790

        write_27_append_28_block6():
        v40 = const u64 0
        v41 = get_elem_ptr v6, ptr { u64, u64 }, v40, !791
        v42 = load v41, !792
        v43 = call ptr_22(v42), !793
        v44 = const u64 0
        v45 = get_elem_ptr v6, ptr { u64, u64 }, v44, !794
        v46 = load v45, !795
        v47 = call capacity_31(v46), !796
        v48 = get_local ptr u64, both_len, !797
        v49 = cmp gt v27 v47, !798
        cbr v49, write_27_append_28_realloc_bytes_35_block0(), write_27_append_28_realloc_bytes_35_block5(v43), !799

        write_27_append_28_realloc_bytes_35_block0():
        v50 = asm(size: v27) -> u64 hp, !800 {
            aloc   size, !100
        }
        v51 = get_local ptr u64, new_ptr0, !801
        v52 = const u64 0, !577
        v53 = cmp gt v47 v52, !802
        v54 = const unit ()
        cbr v53, write_27_append_28_realloc_bytes_35_block1(), write_27_append_28_realloc_bytes_35_block3(v54), !803

        write_27_append_28_realloc_bytes_35_block1():
        v55 = get_local ptr u64, new_ptr0, !804
        v56 = asm(dst: v50, src: v43, len: v47) -> (), !805 {
            mcp    dst src len, !258
        }
        v57 = const unit ()
        br write_27_append_28_realloc_bytes_35_block3(v57), !806

        write_27_append_28_realloc_bytes_35_block3(v58: ()):
        v59 = get_local ptr u64, new_ptr0, !807
        br write_27_append_28_realloc_bytes_35_block5(v50), !808

        write_27_append_28_realloc_bytes_35_block5(v60: u64):
        v61 = get_local ptr u64, both_len, !809
        v62 = const u64 1
        v63 = mul v27, v62, !810
        v64 = get_local ptr { u64, u64 }, __anon_0, !811
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !812
        store v60 to v66, !813
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67, !814
        store v63 to v68, !815
        v69 = load v64, !816
        v70 = asm(ptr: v69) -> slice ptr, !817 {
        }
        v71 = get_local ptr slice, new_slice, !818
        store v70 to v71, !819
        v72 = get_local ptr slice, new_slice, !820
        v73 = load v72, !821
        v74 = asm(ptr: v73) -> { u64, u64 } ptr, !822 {
        }
        v75 = get_local ptr { u64, u64 }, __anon_000, !823
        store v74 to v75, !824
        v76 = const u64 1
        v77 = get_elem_ptr v75, ptr u64, v76, !825
        v78 = load v77, !826
        v79 = get_local ptr u64, cap, !827
        v80 = get_local ptr u64, cap, !828
        v81 = asm(size: v78) -> u64 hp, !829 {
            aloc   size, !100
        }
        v82 = get_local ptr u64, ptr, !830
        v83 = get_local ptr u64, cap, !831
        v84 = const u64 0, !640
        v85 = cmp gt v78 v84, !832
        v86 = const unit ()
        cbr v85, write_27_append_28_from_37_block0(), write_27_append_28_from_37_block2(v86), !833

        write_27_append_28_from_37_block0():
        v87 = asm(ptr: v73) -> { u64, u64 } ptr, !834 {
        }
        v88 = get_local ptr { u64, u64 }, __anon_01, !835
        store v87 to v88, !836
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr u64, v89, !837
        v91 = load v90, !838
        v92 = get_local ptr u64, ptr, !839
        v93 = get_local ptr u64, cap, !840
        v94 = const u64 1
        v95 = mul v78, v94, !841
        v96 = get_local ptr u64, len, !842
        v97 = get_local ptr u64, len, !843
        v98 = asm(dst: v81, src: v91, len: v95) -> (), !844 {
            mcp    dst src len, !670
        }
        v99 = const unit ()
        br write_27_append_28_from_37_block2(v99), !845

        write_27_append_28_from_37_block2(v100: ()):
        v101 = get_local ptr u64, ptr, !846
        v102 = get_local ptr u64, cap, !847
        v103 = get_local ptr { u64, u64 }, __anon_00, !848
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !849
        store v81 to v105, !850
        v106 = const u64 1
        v107 = get_elem_ptr v103, ptr u64, v106, !851
        store v78 to v107, !852
        v108 = load v103, !853
        v109 = const u64 0
        v110 = get_elem_ptr v6, ptr { u64, u64 }, v109, !854
        store v108 to v110, !855
        v111 = const unit ()
        br write_27_append_28_block8(v111), !856

        write_27_append_28_block8(v112: ()):
        v113 = const u64 0
        v114 = get_elem_ptr v6, ptr { u64, u64 }, v113, !857
        v115 = load v114, !858
        v116 = call ptr_22(v115), !859
        v117 = get_local ptr u64, other_start, !860
        v118 = asm(ptr: v116, offset: v31, new) -> u64 new, !861 {
            add    new ptr offset, !698
        }
        v119 = get_local ptr u64, new_ptr, !862
        v120 = load v8, !863
        v121 = call ptr_21(v120), !864
        v122 = get_local ptr u64, new_ptr, !865
        v123 = get_local ptr u64, other_len, !866
        v124 = asm(dst: v118, src: v121, len: v10) -> (), !867 {
            mcp    dst src len, !258
        }
        v125 = get_local ptr u64, both_len, !868
        v126 = const u64 1
        v127 = get_elem_ptr v6, ptr u64, v126, !869
        store v27 to v127, !870
        v128 = const unit ()
        br write_27_block0(v128), !871

        write_27_block0(v129: ()):
        v130 = const unit ()
        ret () v130
    }

    pub fn write_27(self !872: ptr { { { u64, u64 }, u64 } }, bytes !873: { { u64, u64 }, u64 }) -> (), !876 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { { u64, u64 }, u64 } }, bytes: { { u64, u64 }, u64 }):
        v0 = const u64 0
        v1 = get_elem_ptr self, ptr { { u64, u64 }, u64 }, v0, !498
        v2 = ptr_to_int bytes to u64
        v3 = int_to_ptr v2 to ptr { { u64, u64 }, u64 }
        v4 = load v3, !877
        v5 = call len_20(v4), !878
        v6 = get_local ptr u64, other_len, !879
        v7 = get_local ptr u64, other_len, !880
        v8 = const u64 0, !512
        v9 = cmp eq v5 v8, !881
        v10 = const unit (), !516
        cbr v9, block0(v10), append_28_block1(), !882

        append_28_block1():
        v11 = const u64 1
        v12 = get_elem_ptr v1, ptr u64, v11, !883
        v13 = load v12, !877
        v14 = const u64 0, !520
        v15 = cmp eq v13 v14, !884
        cbr v15, append_28_block3(), append_28_block4(), !885

        append_28_block3():
        v16 = load v3, !877
        store v16 to v1, !886
        v17 = const unit (), !528
        br block0(v17), !887

        append_28_block4():
        v18 = const u64 1
        v19 = get_elem_ptr v1, ptr u64, v18, !888
        v20 = load v19, !877
        v21 = get_local ptr u64, other_len, !889
        v22 = add v20, v5, !890
        v23 = get_local ptr u64, both_len, !891
        v24 = const u64 1
        v25 = get_elem_ptr v1, ptr u64, v24, !892
        v26 = load v25, !877
        v27 = get_local ptr u64, other_start, !893
        v28 = const u64 0
        v29 = get_elem_ptr v1, ptr { u64, u64 }, v28, !894
        v30 = load v29, !877
        v31 = call capacity_31(v30), !895
        v32 = get_local ptr u64, both_len, !896
        v33 = cmp lt v31 v22, !897
        v34 = const unit ()
        cbr v33, append_28_block6(), append_28_block8(v34), !898

        append_28_block6():
        v35 = const u64 0
        v36 = get_elem_ptr v1, ptr { u64, u64 }, v35, !899
        v37 = load v36, !877
        v38 = call ptr_22(v37), !900
        v39 = const u64 0
        v40 = get_elem_ptr v1, ptr { u64, u64 }, v39, !901
        v41 = load v40, !877
        v42 = call capacity_31(v41), !902
        v43 = get_local ptr u64, both_len, !903
        v44 = cmp gt v22 v42, !904
        cbr v44, append_28_realloc_bytes_35_block0(), append_28_realloc_bytes_35_block5(v38), !905

        append_28_realloc_bytes_35_block0():
        v45 = asm(size: v22) -> u64 hp, !906 {
            aloc   size, !100
        }
        v46 = get_local ptr u64, new_ptr0, !907
        v47 = const u64 0, !577
        v48 = cmp gt v42 v47, !908
        v49 = const unit ()
        cbr v48, append_28_realloc_bytes_35_block1(), append_28_realloc_bytes_35_block3(v49), !909

        append_28_realloc_bytes_35_block1():
        v50 = get_local ptr u64, new_ptr0, !910
        v51 = asm(dst: v45, src: v38, len: v42) -> (), !911 {
            mcp    dst src len, !258
        }
        v52 = const unit ()
        br append_28_realloc_bytes_35_block3(v52), !912

        append_28_realloc_bytes_35_block3(v53: ()):
        v54 = get_local ptr u64, new_ptr0, !913
        br append_28_realloc_bytes_35_block5(v45), !914

        append_28_realloc_bytes_35_block5(v55: u64):
        v56 = get_local ptr u64, both_len, !915
        v57 = const u64 1
        v58 = mul v22, v57, !916
        v59 = get_local ptr { u64, u64 }, __anon_0, !917
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !918
        store v55 to v61, !919
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !920
        store v58 to v63, !921
        v64 = load v59, !922
        v65 = asm(ptr: v64) -> slice ptr, !923 {
        }
        v66 = get_local ptr slice, new_slice, !924
        store v65 to v66, !925
        v67 = get_local ptr slice, new_slice, !926
        v68 = load v67, !877
        v69 = asm(ptr: v68) -> { u64, u64 } ptr, !927 {
        }
        v70 = get_local ptr { u64, u64 }, __anon_000, !928
        store v69 to v70, !929
        v71 = const u64 1
        v72 = get_elem_ptr v70, ptr u64, v71, !930
        v73 = load v72, !931
        v74 = get_local ptr u64, cap, !932
        v75 = get_local ptr u64, cap, !933
        v76 = asm(size: v73) -> u64 hp, !934 {
            aloc   size, !100
        }
        v77 = get_local ptr u64, ptr, !935
        v78 = get_local ptr u64, cap, !936
        v79 = const u64 0, !640
        v80 = cmp gt v73 v79, !937
        v81 = const unit ()
        cbr v80, append_28_from_37_block0(), append_28_from_37_block2(v81), !938

        append_28_from_37_block0():
        v82 = asm(ptr: v68) -> { u64, u64 } ptr, !939 {
        }
        v83 = get_local ptr { u64, u64 }, __anon_01, !940
        store v82 to v83, !941
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr u64, v84, !942
        v86 = load v85, !943
        v87 = get_local ptr u64, ptr, !944
        v88 = get_local ptr u64, cap, !945
        v89 = const u64 1
        v90 = mul v73, v89, !946
        v91 = get_local ptr u64, len, !947
        v92 = get_local ptr u64, len, !948
        v93 = asm(dst: v76, src: v86, len: v90) -> (), !949 {
            mcp    dst src len, !670
        }
        v94 = const unit ()
        br append_28_from_37_block2(v94), !950

        append_28_from_37_block2(v95: ()):
        v96 = get_local ptr u64, ptr, !951
        v97 = get_local ptr u64, cap, !952
        v98 = get_local ptr { u64, u64 }, __anon_00, !953
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr u64, v99, !954
        store v76 to v100, !955
        v101 = const u64 1
        v102 = get_elem_ptr v98, ptr u64, v101, !956
        store v73 to v102, !957
        v103 = load v98, !958
        v104 = const u64 0
        v105 = get_elem_ptr v1, ptr { u64, u64 }, v104, !959
        store v103 to v105, !960
        v106 = const unit ()
        br append_28_block8(v106), !877

        append_28_block8(v107: ()):
        v108 = const u64 0
        v109 = get_elem_ptr v1, ptr { u64, u64 }, v108, !961
        v110 = load v109, !877
        v111 = call ptr_22(v110), !962
        v112 = get_local ptr u64, other_start, !963
        v113 = asm(ptr: v111, offset: v26, new) -> u64 new, !964 {
            add    new ptr offset, !698
        }
        v114 = get_local ptr u64, new_ptr, !965
        v115 = load v3, !877
        v116 = call ptr_21(v115), !966
        v117 = get_local ptr u64, new_ptr, !967
        v118 = get_local ptr u64, other_len, !968
        v119 = asm(dst: v113, src: v116, len: v5) -> (), !969 {
            mcp    dst src len, !258
        }
        v120 = get_local ptr u64, both_len, !970
        v121 = const u64 1
        v122 = get_elem_ptr v1, ptr u64, v121, !971
        store v22 to v122, !972
        v123 = const unit ()
        br block0(v123), !877

        block0(v124: ()):
        v125 = const unit ()
        ret () v125
    }

    pub fn append_28(self !973: ptr { { u64, u64 }, u64 }, other !974: ptr { { u64, u64 }, u64 }) -> (), !977 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr

        entry(self: ptr { { u64, u64 }, u64 }, other: ptr { { u64, u64 }, u64 }):
        v0 = load other
        v1 = call len_20(v0), !978
        v2 = get_local ptr u64, other_len, !508
        v3 = get_local ptr u64, other_len, !510
        v4 = const u64 0, !512
        v5 = cmp eq v1 v4, !979
        cbr v5, block0(), block1(), !513

        block0():
        v6 = const unit (), !516
        ret () v6, !516

        block1():
        v7 = const u64 1
        v8 = get_elem_ptr self, ptr u64, v7, !464
        v9 = load v8
        v10 = const u64 0, !520
        v11 = cmp eq v9 v10, !980
        cbr v11, block3(), block4(), !521

        block3():
        v12 = load other
        store v12 to self, !526
        v13 = const unit (), !528
        ret () v13, !528

        block4():
        v14 = const u64 1
        v15 = get_elem_ptr self, ptr u64, v14, !464
        v16 = load v15
        v17 = get_local ptr u64, other_len, !532
        v18 = add v16, v1, !981
        v19 = get_local ptr u64, both_len, !537
        v20 = const u64 1
        v21 = get_elem_ptr self, ptr u64, v20, !464
        v22 = load v21
        v23 = get_local ptr u64, other_start, !541
        v24 = const u64 0
        v25 = get_elem_ptr self, ptr { u64, u64 }, v24, !247
        v26 = load v25
        v27 = call capacity_31(v26), !982
        v28 = get_local ptr u64, both_len, !548
        v29 = cmp lt v27 v18, !983
        v30 = const unit ()
        cbr v29, block6(), block8(v30), !550

        block6():
        v31 = const u64 0
        v32 = get_elem_ptr self, ptr { u64, u64 }, v31, !247
        v33 = load v32
        v34 = call ptr_22(v33), !984
        v35 = const u64 0
        v36 = get_elem_ptr self, ptr { u64, u64 }, v35, !247
        v37 = load v36
        v38 = call capacity_31(v37), !985
        v39 = get_local ptr u64, both_len, !564
        v40 = cmp gt v18 v38, !986
        cbr v40, realloc_bytes_35_block0(), realloc_bytes_35_block5(v34), !987

        realloc_bytes_35_block0():
        v41 = asm(size: v18) -> u64 hp, !988 {
            aloc   size, !100
        }
        v42 = get_local ptr u64, new_ptr0, !989
        v43 = const u64 0, !577
        v44 = cmp gt v38 v43, !990
        v45 = const unit ()
        cbr v44, realloc_bytes_35_block1(), realloc_bytes_35_block3(v45), !991

        realloc_bytes_35_block1():
        v46 = get_local ptr u64, new_ptr0, !992
        v47 = asm(dst: v41, src: v34, len: v38) -> (), !993 {
            mcp    dst src len, !258
        }
        v48 = const unit ()
        br realloc_bytes_35_block3(v48), !994

        realloc_bytes_35_block3(v49: ()):
        v50 = get_local ptr u64, new_ptr0, !995
        br realloc_bytes_35_block5(v41), !994

        realloc_bytes_35_block5(v51: u64):
        v52 = get_local ptr u64, both_len, !591
        v53 = const u64 1
        v54 = mul v18, v53, !996
        v55 = get_local ptr { u64, u64 }, __anon_0, !997
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !998
        store v51 to v57, !999
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !1000
        store v54 to v59, !1001
        v60 = load v55, !1002
        v61 = asm(ptr: v60) -> slice ptr, !1003 {
        }
        v62 = get_local ptr slice, new_slice, !610
        store v61 to v62, !610
        v63 = get_local ptr slice, new_slice, !613
        v64 = load v63
        v65 = asm(ptr: v64) -> { u64, u64 } ptr, !1004 {
        }
        v66 = get_local ptr { u64, u64 }, __anon_000, !1005
        store v65 to v66, !1006
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !1007
        v69 = load v68, !1008
        v70 = get_local ptr u64, cap, !1009
        v71 = get_local ptr u64, cap, !1010
        v72 = asm(size: v69) -> u64 hp, !1011 {
            aloc   size, !100
        }
        v73 = get_local ptr u64, ptr, !1012
        v74 = get_local ptr u64, cap, !1013
        v75 = const u64 0, !640
        v76 = cmp gt v69 v75, !1014
        v77 = const unit ()
        cbr v76, from_37_block0(), from_37_block2(v77), !1015

        from_37_block0():
        v78 = asm(ptr: v64) -> { u64, u64 } ptr, !1016 {
        }
        v79 = get_local ptr { u64, u64 }, __anon_01, !1017
        store v78 to v79, !1018
        v80 = const u64 0
        v81 = get_elem_ptr v79, ptr u64, v80, !1019
        v82 = load v81, !1020
        v83 = get_local ptr u64, ptr, !1021
        v84 = get_local ptr u64, cap, !1022
        v85 = const u64 1
        v86 = mul v69, v85, !1023
        v87 = get_local ptr u64, len, !1024
        v88 = get_local ptr u64, len, !1025
        v89 = asm(dst: v72, src: v82, len: v86) -> (), !1026 {
            mcp    dst src len, !670
        }
        v90 = const unit ()
        br from_37_block2(v90), !1027

        from_37_block2(v91: ()):
        v92 = get_local ptr u64, ptr, !1028
        v93 = get_local ptr u64, cap, !1029
        v94 = get_local ptr { u64, u64 }, __anon_00, !1030
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95, !1027
        store v72 to v96, !1031
        v97 = const u64 1
        v98 = get_elem_ptr v94, ptr u64, v97, !1027
        store v69 to v98, !1032
        v99 = load v94, !1027
        v100 = const u64 0
        v101 = get_elem_ptr self, ptr { u64, u64 }, v100, !683
        store v99 to v101, !683
        v102 = const unit ()
        br block8(v102)

        block8(v103: ()):
        v104 = const u64 0
        v105 = get_elem_ptr self, ptr { u64, u64 }, v104, !247
        v106 = load v105
        v107 = call ptr_22(v106), !1033
        v108 = get_local ptr u64, other_start, !692
        v109 = asm(ptr: v107, offset: v22, new) -> u64 new, !1034 {
            add    new ptr offset, !698
        }
        v110 = get_local ptr u64, new_ptr, !699
        v111 = load other
        v112 = call ptr_21(v111), !1035
        v113 = get_local ptr u64, new_ptr, !705
        v114 = get_local ptr u64, other_len, !707
        v115 = asm(dst: v109, src: v112, len: v1) -> (), !1036 {
            mcp    dst src len, !258
        }
        v116 = get_local ptr u64, both_len, !712
        v117 = const u64 1
        v118 = get_elem_ptr self, ptr u64, v117, !714
        store v18 to v118, !714
        v119 = const unit ()
        ret () v119
    }

    pub fn add_29(self !1037: u64, other !1038: u64) -> u64, !1041 {
        entry(self: u64, other: u64):
        v0 = add self, other
        ret u64 v0
    }

    pub fn lt_30(self !1042: u64, other !1043: u64) -> bool, !1046 {
        entry(self: u64, other: u64):
        v0 = cmp lt self other
        ret bool v0
    }

    pub fn capacity_31(self !1047: { u64, u64 }) -> u64, !1050 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1051
        v4 = load v3
        ret u64 v4
    }

    pub fn from_parts_32(ptr !1052: u64, count !1053: u64) -> slice, !1056 {
        local { u64, u64 } __anon_0

        entry(ptr: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1057
        v2 = get_local ptr { u64, u64 }, __anon_0, !599
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !599
        store ptr to v4, !599
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !599
        store v1 to v6, !599
        v7 = load v2
        v8 = asm(ptr: v7) -> slice ptr, !1058 {
        }
        ret slice v8
    }

    fn from_parts_33(parts !1059: { u64, u64 }) -> slice, !1062 {
        entry(parts: { u64, u64 }):
        v0 = asm(ptr: parts) -> slice ptr, !608 {
        }
        ret slice v0
    }

    pub fn multiply_34(self !1063: u64, other !1064: u64) -> u64, !1067 {
        entry(self: u64, other: u64):
        v0 = mul self, other
        ret u64 v0
    }

    pub fn realloc_bytes_35(ptr !1068: u64, count !1069: u64, new_count !1070: u64) -> u64, !1073 {
        local u64 new_ptr

        entry(ptr: u64, count: u64, new_count: u64):
        v0 = cmp gt new_count count, !1074
        cbr v0, block0(), block5(ptr), !568

        block0():
        v1 = asm(size: new_count) -> u64 hp, !1075 {
            aloc   size, !100
        }
        v2 = get_local ptr u64, new_ptr, !575
        v3 = const u64 0, !577
        v4 = cmp gt count v3, !1076
        v5 = const unit ()
        cbr v4, block1(), block3(v5), !578

        block1():
        v6 = get_local ptr u64, new_ptr, !582
        v7 = asm(dst: v1, src: ptr, len: count) -> (), !1077 {
            mcp    dst src len, !258
        }
        v8 = const unit ()
        br block3(v8)

        block3(v9: ()):
        v10 = get_local ptr u64, new_ptr, !588
        br block5(v1)

        block5(v11: u64):
        ret u64 v11
    }

    pub fn gt_36(self !1078: u64, other !1079: u64) -> bool, !1082 {
        entry(self: u64, other: u64):
        v0 = cmp gt self other
        ret bool v0
    }

    pub fn from_37(slice !1083: slice) -> { u64, u64 }, !1086 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_01
        local u64 cap
        local u64 len
        local u64 ptr

        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !1087 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_00, !1088
        store v0 to v1, !1088
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !1089
        v4 = load v3, !1088
        v5 = get_local ptr u64, cap, !629
        v6 = get_local ptr u64, cap, !631
        v7 = asm(size: v4) -> u64 hp, !1090 {
            aloc   size, !100
        }
        v8 = get_local ptr u64, ptr, !636
        v9 = get_local ptr u64, cap, !638
        v10 = const u64 0, !640
        v11 = cmp gt v4 v10, !1091
        v12 = const unit ()
        cbr v11, block0(), block2(v12), !641

        block0():
        v13 = asm(ptr: slice) -> { u64, u64 } ptr, !1092 {
        }
        v14 = get_local ptr { u64, u64 }, __anon_01, !1093
        store v13 to v14, !1093
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !1094
        v17 = load v16, !1093
        v18 = get_local ptr u64, ptr, !655
        v19 = get_local ptr u64, cap, !657
        v20 = const u64 1
        v21 = mul v4, v20, !1095
        v22 = get_local ptr u64, len, !1096
        v23 = get_local ptr u64, len, !1097
        v24 = asm(dst: v7, src: v17, len: v21) -> (), !1098 {
            mcp    dst src len, !670
        }
        v25 = const unit ()
        br block2(v25)

        block2(v26: ()):
        v27 = get_local ptr u64, ptr, !672
        v28 = get_local ptr u64, cap, !674
        v29 = get_local ptr { u64, u64 }, __anon_0, !676
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr u64, v30
        store v7 to v31, !676
        v32 = const u64 1
        v33 = get_elem_ptr v29, ptr u64, v32
        store v4 to v33, !676
        v34 = load v29
        ret { u64, u64 } v34
    }

    pub fn number_of_bytes_38(self !1099: slice) -> u64, !1102 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1103 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !626
        v4 = load v3
        ret u64 v4
    }

    fn into_parts_39(slice !1104: slice) -> { u64, u64 }, !1107 {
        entry(slice: slice):
        v0 = asm(ptr: slice) -> { u64, u64 } ptr, !622 {
        }
        ret { u64, u64 } v0
    }

    pub fn copy_to_40(self !1108: u64, dst !1109: u64, count !1110: u64) -> (), !1113 {
        local u64 len

        entry(self: u64, dst: u64, count: u64):
        v0 = const u64 1
        v1 = mul count, v0, !1114
        v2 = get_local ptr u64, len, !664
        v3 = get_local ptr u64, len, !666
        v4 = asm(dst: dst, src: self, len: v1) -> (), !668 {
            mcp    dst src len, !670
        }
        v5 = const unit ()
        ret () v5
    }

    pub fn ptr_41(self !1115: slice) -> u64, !1118 {
        local { u64, u64 } __anon_0

        entry(self: slice):
        v0 = asm(ptr: self) -> { u64, u64 } ptr, !1119 {
        }
        v1 = get_local ptr { u64, u64 }, __anon_0
        store v0 to v1
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !652
        v4 = load v3
        ret u64 v4
    }

    pub fn add_uint_offset_42(self !1120: u64, offset !1121: u64) -> u64, !1124 {
        entry(self: u64, offset: u64):
        v0 = asm(ptr: self, offset: offset, new) -> u64 new, !696 {
            add    new ptr offset, !698
        }
        ret u64 v0
    }

    pub fn sha256_43(self !1125: { { { u64, u64 }, u64 } }) -> b256, !1128 {
        local mut b256 result_buffer

        entry(self: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr b256, result_buffer, !721
        v1 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !724
        store v1 to v0, !721
        v2 = get_local ptr b256, result_buffer, !726
        v3 = ptr_to_int self to u64
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !498
        v7 = load v6
        v8 = call ptr_21(v7), !1129
        v9 = ptr_to_int self to u64
        v10 = int_to_ptr v9 to ptr { { { u64, u64 }, u64 } }
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { { u64, u64 }, u64 }, v11, !498
        v13 = load v12
        v14 = call len_20(v13), !1130
        v15 = asm(hash: v2, ptr: v8, bytes: v14) -> b256 hash, !737 {
            s256   hash ptr bytes, !739
        }
        ret b256 v15
    }

    pub fn min_44() -> b256, !1133 {
        entry():
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !724
        ret b256 v0
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1064 1095
!52 = (!4 !5 !51)
!53 = span !6 1108 1117
!54 = (!4 !5 !53)
!55 = span !6 1126 1133
!56 = (!4 !5 !55)
!57 = span !6 1108 1134
!58 = fn_call_path_span !6 1118 1125
!59 = (!4 !5 !57 !58)
!60 = span !6 1100 1135
!61 = (!4 !5 !60)
!62 = (!4 !5 !60)
!63 = span !6 1148 1157
!64 = (!4 !5 !63)
!65 = span !6 1166 1173
!66 = (!4 !5 !65)
!67 = span !6 1148 1174
!68 = fn_call_path_span !6 1158 1165
!69 = (!4 !5 !67 !68)
!70 = span !6 1140 1175
!71 = (!4 !5 !70)
!72 = (!4 !5 !70)
!73 = span !6 972 1177
!74 = fn_name_span !6 979 983
!75 = (!73 !74)
!76 = (!7 !8)
!77 = (!13 !14 !15)
!78 = (!13 !14)
!79 = (!13 !14 !15)
!80 = (!13 !14 !25)
!81 = (!13 !14 !25)
!82 = (!38 !39)
!83 = (!38 !39 !42)
!84 = (!38 !39 !42)
!85 = (!38 !39 !48)
!86 = (!57 !58)
!87 = (!67 !68)
!88 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!89 = span !88 3024 3131
!90 = fn_name_span !88 3031 3034
!91 = (!89 !90)
!92 = span !88 570 571
!93 = span !88 3079 3094
!94 = fn_call_path_span !88 3079 3092
!95 = span !88 558 572
!96 = fn_call_path_span !88 558 569
!97 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!98 = span !97 3315 3378
!99 = (!93 !94 !95 !96 !98)
!100 = span !97 3342 3351
!101 = span !88 534 603
!102 = (!93 !94 !101)
!103 = (!93 !94)
!104 = (!93 !94 !101)
!105 = span !88 591 592
!106 = (!93 !94 !101)
!107 = span !88 3055 3125
!108 = span !88 3113 3114
!109 = span !88 503 609
!110 = fn_name_span !88 510 513
!111 = (!109 !110)
!112 = (!95 !96 !98)
!113 = span !97 3286 3291
!114 = span !97 3267 3380
!115 = fn_name_span !97 3274 3285
!116 = (!114 !115)
!117 = span !6 258 340
!118 = fn_name_span !6 265 268
!119 = (!117 !118)
!120 = span !6 805 809
!121 = span !6 811 816
!122 = span !6 799 968
!123 = fn_name_span !6 802 804
!124 = inline "always"
!125 = (!122 !123 !124)
!126 = span !6 507 511
!127 = span !6 513 520
!128 = span !6 492 714
!129 = fn_name_span !6 499 506
!130 = (!128 !129)
!131 = span !6 582 603
!132 = fn_call_path_span !6 587 594
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!134 = span !133 1815 1933
!135 = (!131 !132 !134)
!136 = (!131 !132 !134)
!137 = (!131 !132 !134)
!138 = span !6 451 469
!139 = fn_call_path_span !6 459 467
!140 = (!131 !132 !138 !139)
!141 = (!131 !132 !138 !139)
!142 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!143 = span !142 329 341
!144 = (!131 !132 !138 !139 !143)
!145 = (!131 !132 !138 !139)
!146 = span !142 1573 1589
!147 = fn_call_path_span !142 1584 1587
!148 = (!131 !132 !138 !139 !146 !147)
!149 = span !142 1593 1595
!150 = span !142 1573 1595
!151 = fn_call_path_span !142 1590 1592
!152 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!153 = span !152 15515 15529
!154 = fn_call_path_span !152 15520 15522
!155 = (!131 !132 !138 !139 !150 !151 !153 !154)
!156 = span !152 12533 12538
!157 = span !152 15514 15536
!158 = fn_call_path_span !152 15531 15534
!159 = (!131 !132 !138 !139 !150 !151 !157 !158)
!160 = (!131 !132 !138 !139 !150)
!161 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!162 = span !161 2461 2560
!163 = (!131 !132 !138 !139 !162)
!164 = (!131 !132 !138 !139 !162)
!165 = (!131 !132 !138 !139 !162)
!166 = (!131 !132 !138 !139)
!167 = span !142 1610 1621
!168 = (!131 !132 !138 !139 !167)
!169 = (!131 !132 !138 !139 !162)
!170 = (!131 !132 !138 !139 !162)
!171 = (!131 !132 !138 !139 !162)
!172 = (!131 !132 !138 !139)
!173 = (!131 !132 !138 !139)
!174 = (!131 !132 !138 !139 !143)
!175 = (!131 !132 !138 !139)
!176 = span !142 1657 1673
!177 = fn_call_path_span !142 1668 1671
!178 = (!131 !132 !138 !139 !176 !177)
!179 = span !142 1647 1709
!180 = (!131 !132 !138 !139 !179)
!181 = (!131 !132 !138 !139 !162)
!182 = (!131 !132 !138 !139 !162)
!183 = (!131 !132 !138 !139)
!184 = (!131 !132 !138 !139)
!185 = span !6 451 478
!186 = fn_call_path_span !6 470 476
!187 = span !161 4973 5075
!188 = (!131 !132 !185 !186 !187)
!189 = (!131 !132 !185 !186 !187)
!190 = span !161 4979 4983
!191 = (!131 !132 !185 !186 !190)
!192 = (!131 !132 !185 !186 !190)
!193 = (!131 !132 !185 !186)
!194 = span !161 4998 5037
!195 = fn_call_path_span !161 4998 5037
!196 = (!131 !132 !185 !186 !194 !195)
!197 = (!131 !132 !185 !186 !194)
!198 = (!131 !132 !185 !186 !190)
!199 = (!131 !132 !185 !186)
!200 = (!131 !132 !185 !186)
!201 = span !161 5009 5020
!202 = (!131 !132 !185 !186 !201)
!203 = (!131 !132 !185 !186 !201)
!204 = span !161 5025 5036
!205 = (!131 !132 !185 !186 !204)
!206 = (!131 !132 !185 !186)
!207 = span !88 28953 28955
!208 = span !6 435 479
!209 = fn_call_path_span !6 435 450
!210 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!211 = span !210 3133 3150
!212 = fn_call_path_span !210 3133 3144
!213 = span !88 28933 28956
!214 = fn_call_path_span !88 28933 28952
!215 = span !88 4157 4190
!216 = fn_call_path_span !88 4157 4180
!217 = span !88 863 884
!218 = fn_call_path_span !88 863 874
!219 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216 !217 !218 !98)
!220 = span !88 839 922
!221 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216 !220)
!222 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216)
!223 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216 !220)
!224 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216)
!225 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216 !220)
!226 = (!131 !132 !208 !209 !211 !212 !213 !214 !215 !216)
!227 = span !88 4133 4221
!228 = (!131 !132 !208 !209 !211 !212 !213 !214 !227)
!229 = (!131 !132 !208 !209 !211 !212 !213 !214)
!230 = (!131 !132 !208 !209 !211 !212 !213 !214 !227)
!231 = (!131 !132 !208 !209 !211 !212 !213 !214)
!232 = span !88 4209 4210
!233 = (!131 !132 !208 !209 !211 !212 !213 !214 !227)
!234 = (!131 !132 !208 !209 !211 !212 !213 !214)
!235 = span !88 28917 28957
!236 = (!131 !132 !208 !209 !211 !212 !235)
!237 = (!131 !132 !208 !209 !211 !212 !235)
!238 = span !88 28966 28980
!239 = (!131 !132 !208 !209 !211 !212 !238)
!240 = (!131 !132 !208 !209 !211 !212 !238)
!241 = span !88 28978 28980
!242 = (!131 !132 !208 !209 !211 !212 !238)
!243 = span !88 29065 29077
!244 = (!131 !132 !208 !209 !211 !212 !243)
!245 = span !88 29092 29097
!246 = (!131 !132 !208 !209 !211 !212 !245)
!247 = span !88 2445 2458
!248 = (!131 !132 !208 !209 !211 !212 !247)
!249 = span !88 400 412
!250 = (!131 !132 !208 !209 !211 !212 !249)
!251 = (!131 !132 !208 !209 !211 !212)
!252 = span !88 29107 29109
!253 = span !88 29065 29110
!254 = fn_call_path_span !88 29078 29091
!255 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!256 = span !255 5999 6076
!257 = (!131 !132 !208 !209 !211 !212 !253 !254 !256)
!258 = span !255 6050 6065
!259 = span !88 29121 29126
!260 = (!131 !132 !208 !209 !211 !212 !259)
!261 = (!131 !132 !208 !209 !211 !212)
!262 = span !210 3107 3161
!263 = (!131 !132 !208 !209 !262)
!264 = (!131 !132 !208 !209)
!265 = (!131 !132 !208 !209 !262)
!266 = (!131 !132 !208 !209)
!267 = (!131 !132 !134)
!268 = (!131 !132 !134)
!269 = (!131 !132)
!270 = span !6 576 708
!271 = span !6 618 668
!272 = fn_call_path_span !6 618 668
!273 = (!271 !272)
!274 = span !161 5062 5063
!275 = span !161 5055 5064
!276 = fn_call_path_span !161 5055 5061
!277 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!278 = span !277 757 771
!279 = (!131 !132 !185 !186 !275 !276 !278)
!280 = span !6 621 628
!281 = span !6 657 664
!282 = span !6 650 665
!283 = fn_call_path_span !6 650 656
!284 = (!282 !283)
!285 = span !6 636 666
!286 = fn_call_path_span !6 636 649
!287 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!288 = span !287 2370 2383
!289 = (!285 !286 !288)
!290 = (!285 !286)
!291 = (!285 !286 !288)
!292 = span !6 681 698
!293 = fn_call_path_span !6 681 698
!294 = (!292 !293)
!295 = span !6 685 686
!296 = span !6 695 696
!297 = span !6 361 365
!298 = span !6 367 374
!299 = span !6 346 486
!300 = fn_name_span !6 353 360
!301 = (!299 !300)
!302 = (!138 !139)
!303 = (!138 !139 !143)
!304 = (!138 !139 !146 !147)
!305 = (!138 !139 !150 !151 !153 !154)
!306 = (!138 !139 !150 !151 !157 !158)
!307 = (!138 !139 !150)
!308 = (!138 !139 !162)
!309 = (!138 !139 !162)
!310 = (!138 !139 !162)
!311 = (!138 !139 !167)
!312 = (!138 !139 !162)
!313 = (!138 !139 !162)
!314 = (!138 !139 !162)
!315 = (!138 !139 !143)
!316 = (!138 !139 !176 !177)
!317 = (!138 !139 !179)
!318 = (!138 !139 !162)
!319 = (!138 !139 !162)
!320 = (!185 !186 !187)
!321 = (!185 !186 !187)
!322 = (!185 !186 !190)
!323 = (!185 !186 !190)
!324 = (!185 !186)
!325 = (!185 !186 !194 !195)
!326 = (!185 !186 !194)
!327 = (!185 !186 !190)
!328 = (!185 !186 !201)
!329 = (!185 !186 !201)
!330 = (!185 !186 !204)
!331 = (!208 !209 !211 !212 !213 !214 !215 !216 !217 !218 !98)
!332 = (!208 !209 !211 !212 !213 !214 !215 !216 !220)
!333 = (!208 !209 !211 !212 !213 !214 !215 !216)
!334 = (!208 !209 !211 !212 !213 !214 !215 !216 !220)
!335 = (!208 !209 !211 !212 !213 !214 !215 !216)
!336 = (!208 !209 !211 !212 !213 !214 !215 !216 !220)
!337 = (!208 !209 !211 !212 !213 !214 !215 !216)
!338 = (!208 !209 !211 !212 !213 !214 !227)
!339 = (!208 !209 !211 !212 !213 !214)
!340 = (!208 !209 !211 !212 !213 !214 !227)
!341 = (!208 !209 !211 !212 !213 !214)
!342 = (!208 !209 !211 !212 !213 !214 !227)
!343 = (!208 !209 !211 !212 !213 !214)
!344 = (!208 !209 !211 !212 !235)
!345 = (!208 !209 !211 !212 !235)
!346 = (!208 !209 !211 !212 !238)
!347 = (!208 !209 !211 !212 !238)
!348 = (!208 !209 !211 !212 !238)
!349 = (!208 !209 !211 !212 !243)
!350 = (!208 !209 !211 !212 !245)
!351 = (!208 !209 !211 !212 !247)
!352 = (!208 !209 !211 !212 !249)
!353 = (!208 !209 !211 !212)
!354 = (!208 !209 !211 !212 !253 !254 !256)
!355 = (!208 !209 !211 !212 !259)
!356 = (!208 !209 !211 !212)
!357 = (!208 !209 !262)
!358 = (!208 !209)
!359 = (!208 !209 !262)
!360 = (!185 !186 !275 !276 !278)
!361 = span !210 3077 3081
!362 = span !210 3069 3167
!363 = fn_name_span !210 3072 3076
!364 = (!362 !363)
!365 = (!211 !212 !213 !214 !215 !216 !217 !218 !98)
!366 = (!211 !212 !213 !214 !215 !216 !220)
!367 = (!211 !212 !213 !214 !215 !216)
!368 = (!211 !212 !213 !214 !215 !216 !220)
!369 = (!211 !212 !213 !214 !215 !216)
!370 = (!211 !212 !213 !214 !215 !216 !220)
!371 = (!211 !212 !213 !214 !215 !216)
!372 = (!211 !212 !213 !214 !227)
!373 = (!211 !212 !213 !214)
!374 = (!211 !212 !213 !214 !227)
!375 = (!211 !212 !213 !214)
!376 = (!211 !212 !213 !214 !227)
!377 = (!211 !212 !213 !214)
!378 = (!211 !212 !235)
!379 = (!211 !212 !235)
!380 = (!211 !212 !238)
!381 = (!211 !212 !238)
!382 = (!211 !212 !238)
!383 = (!211 !212 !243)
!384 = (!211 !212 !245)
!385 = (!211 !212 !247)
!386 = (!211 !212 !249)
!387 = (!211 !212)
!388 = (!211 !212 !253 !254 !256)
!389 = (!211 !212 !259)
!390 = span !88 28831 28832
!391 = span !88 28823 29132
!392 = fn_name_span !88 28826 28830
!393 = (!391 !392)
!394 = (!213 !214 !215 !216 !217 !218 !98)
!395 = (!213 !214 !215 !216 !220)
!396 = (!213 !214 !215 !216)
!397 = (!213 !214 !215 !216 !220)
!398 = (!213 !214 !215 !216)
!399 = (!213 !214 !215 !216 !220)
!400 = (!213 !214 !215 !216)
!401 = (!213 !214 !227)
!402 = (!213 !214)
!403 = (!213 !214 !227)
!404 = (!213 !214 !227)
!405 = (!253 !254 !256)
!406 = span !88 4100 4108
!407 = span !88 4079 4227
!408 = fn_name_span !88 4086 4099
!409 = (!407 !408)
!410 = (!215 !216 !217 !218 !98)
!411 = (!215 !216 !220)
!412 = (!215 !216)
!413 = (!215 !216 !220)
!414 = (!215 !216 !220)
!415 = span !88 806 814
!416 = span !88 785 928
!417 = fn_name_span !88 792 805
!418 = (!416 !417)
!419 = (!217 !218 !98)
!420 = span !255 5960 5964
!421 = span !255 5966 5969
!422 = span !255 5977 5982
!423 = span !255 5939 6083
!424 = fn_name_span !255 5946 5959
!425 = (!423 !424)
!426 = span !161 4952 4956
!427 = span !161 4938 5081
!428 = fn_name_span !161 4945 4951
!429 = (!427 !428)
!430 = (!194 !195)
!431 = (!275 !276 !278)
!432 = span !152 16751 16755
!433 = span !152 16757 16762
!434 = span !152 16745 16811
!435 = fn_name_span !152 16748 16750
!436 = (!434 !435)
!437 = span !277 735 739
!438 = span !277 721 773
!439 = fn_name_span !277 728 734
!440 = (!438 !439)
!441 = span !142 1538 1542
!442 = span !142 1526 1716
!443 = fn_name_span !142 1529 1537
!444 = (!442 !443)
!445 = (!146 !147)
!446 = (!150 !151 !153 !154)
!447 = (!150 !151 !157 !158)
!448 = (!176 !177)
!449 = span !152 15477 15481
!450 = span !152 15483 15488
!451 = span !152 15470 15542
!452 = fn_name_span !152 15473 15476
!453 = (!451 !452)
!454 = (!153 !154)
!455 = (!157 !158)
!456 = span !152 12498 12502
!457 = span !152 12491 12545
!458 = fn_name_span !152 12494 12497
!459 = (!457 !458)
!460 = span !88 13782 13786
!461 = span !88 13771 13819
!462 = fn_name_span !88 13778 13781
!463 = (!461 !462)
!464 = span !88 2506 2514
!465 = span !88 15186 15190
!466 = span !88 15175 15233
!467 = fn_name_span !88 15182 15185
!468 = (!466 !467)
!469 = span !88 15213 15227
!470 = fn_call_path_span !88 15222 15225
!471 = (!469 !470)
!472 = span !88 989 993
!473 = span !88 978 1030
!474 = fn_name_span !88 985 988
!475 = (!473 !474)
!476 = span !287 2340 2344
!477 = span !287 2332 2389
!478 = fn_name_span !287 2335 2339
!479 = (!477 !478)
!480 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!481 = span !480 9026 9027
!482 = span !480 9009 9138
!483 = fn_name_span !480 9016 9022
!484 = inline "never"
!485 = (!482 !483 !484)
!486 = span !480 9082 9095
!487 = fn_call_path_span !480 9082 9093
!488 = (!486 !487)
!489 = span !480 9065 9096
!490 = span !480 9108 9114
!491 = span !480 9101 9115
!492 = fn_call_path_span !480 9103 9107
!493 = (!491 !492)
!494 = span !210 524 536
!495 = (!491 !492 !494)
!496 = span !210 5123 5146
!497 = fn_call_path_span !210 5129 5134
!498 = span !480 142 154
!499 = (!491 !492 !496 !497 !498)
!500 = (!491 !492 !496 !497)
!501 = (!491 !492 !496 !497)
!502 = span !480 365 389
!503 = fn_call_path_span !480 376 382
!504 = (!491 !492 !496 !497 !502 !503)
!505 = span !88 18398 18409
!506 = fn_call_path_span !88 18404 18407
!507 = (!491 !492 !496 !497 !502 !503 !505 !506)
!508 = span !88 18382 18410
!509 = (!491 !492 !496 !497 !502 !503 !508)
!510 = span !88 18422 18431
!511 = (!491 !492 !496 !497 !502 !503 !510)
!512 = span !88 18435 18436
!513 = span !88 18422 18436
!514 = fn_call_path_span !88 18432 18434
!515 = (!491 !492 !496 !497 !502 !503 !513 !514)
!516 = span !88 18451 18457
!517 = (!491 !492 !496 !497 !502 !503 !513)
!518 = (!491 !492 !496 !497 !502 !503 !464)
!519 = (!491 !492 !496 !497 !502 !503)
!520 = span !88 18572 18573
!521 = span !88 18560 18573
!522 = fn_call_path_span !88 18569 18571
!523 = (!491 !492 !496 !497 !502 !503 !521 !522)
!524 = (!491 !492 !496 !497 !502 !503 !521)
!525 = (!491 !492 !496 !497 !502 !503)
!526 = span !88 18588 18600
!527 = (!491 !492 !496 !497 !502 !503 !526)
!528 = span !88 18614 18620
!529 = (!491 !492 !496 !497 !502 !503 !528)
!530 = (!491 !492 !496 !497 !502 !503 !464)
!531 = (!491 !492 !496 !497 !502 !503)
!532 = span !88 18668 18677
!533 = (!491 !492 !496 !497 !502 !503 !532)
!534 = span !88 18657 18677
!535 = fn_call_path_span !88 18666 18667
!536 = (!491 !492 !496 !497 !502 !503 !534 !535)
!537 = span !88 18642 18678
!538 = (!491 !492 !496 !497 !502 !503 !537)
!539 = (!491 !492 !496 !497 !502 !503 !464)
!540 = (!491 !492 !496 !497 !502 !503)
!541 = span !88 18687 18714
!542 = (!491 !492 !496 !497 !502 !503 !541)
!543 = (!491 !492 !496 !497 !502 !503 !247)
!544 = (!491 !492 !496 !497 !502 !503)
!545 = span !88 18808 18827
!546 = fn_call_path_span !88 18817 18825
!547 = (!491 !492 !496 !497 !502 !503 !545 !546)
!548 = span !88 18830 18838
!549 = (!491 !492 !496 !497 !502 !503 !548)
!550 = span !88 18808 18838
!551 = fn_call_path_span !88 18828 18829
!552 = (!491 !492 !496 !497 !502 !503 !550 !551)
!553 = (!491 !492 !496 !497 !502 !503 !550)
!554 = (!491 !492 !496 !497 !502 !503 !247)
!555 = (!491 !492 !496 !497 !502 !503)
!556 = span !88 18928 18942
!557 = fn_call_path_span !88 18937 18940
!558 = (!491 !492 !496 !497 !502 !503 !556 !557)
!559 = (!491 !492 !496 !497 !502 !503 !247)
!560 = (!491 !492 !496 !497 !502 !503)
!561 = span !88 18944 18963
!562 = fn_call_path_span !88 18953 18961
!563 = (!491 !492 !496 !497 !502 !503 !561 !562)
!564 = span !88 18965 18973
!565 = (!491 !492 !496 !497 !502 !503 !564)
!566 = span !88 18914 18974
!567 = fn_call_path_span !88 18914 18927
!568 = span !97 4168 4185
!569 = fn_call_path_span !97 4178 4179
!570 = (!491 !492 !496 !497 !502 !503 !566 !567 !568 !569)
!571 = (!491 !492 !496 !497 !502 !503 !566 !567 !568)
!572 = span !97 4210 4232
!573 = fn_call_path_span !97 4210 4221
!574 = (!491 !492 !496 !497 !502 !503 !566 !567 !572 !573 !98)
!575 = span !97 4196 4233
!576 = (!491 !492 !496 !497 !502 !503 !566 !567 !575)
!577 = span !97 4253 4254
!578 = span !97 4245 4254
!579 = fn_call_path_span !97 4251 4252
!580 = (!491 !492 !496 !497 !502 !503 !566 !567 !578 !579)
!581 = (!491 !492 !496 !497 !502 !503 !566 !567 !578)
!582 = span !97 4287 4294
!583 = (!491 !492 !496 !497 !502 !503 !566 !567 !582)
!584 = span !97 4269 4302
!585 = fn_call_path_span !97 4273 4286
!586 = (!491 !492 !496 !497 !502 !503 !566 !567 !584 !585 !256)
!587 = (!491 !492 !496 !497 !502 !503 !566 !567)
!588 = span !97 4322 4329
!589 = (!491 !492 !496 !497 !502 !503 !566 !567 !588)
!590 = (!491 !492 !496 !497 !502 !503 !566 !567)
!591 = span !88 18992 19000
!592 = (!491 !492 !496 !497 !502 !503 !591)
!593 = span !88 18869 19015
!594 = fn_call_path_span !88 18869 18890
!595 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!596 = span !595 2368 2392
!597 = fn_call_path_span !595 2374 2375
!598 = (!491 !492 !496 !497 !502 !503 !593 !594 !596 !597)
!599 = span !595 2362 2393
!600 = (!491 !492 !496 !497 !502 !503 !593 !594 !599)
!601 = (!491 !492 !496 !497 !502 !503 !593 !594 !599)
!602 = (!491 !492 !496 !497 !502 !503 !593 !594 !599)
!603 = (!491 !492 !496 !497 !502 !503 !593 !594 !599)
!604 = (!491 !492 !496 !497 !502 !503 !593 !594 !599)
!605 = (!491 !492 !496 !497 !502 !503 !593 !594)
!606 = span !595 2351 2394
!607 = fn_call_path_span !595 2351 2361
!608 = span !595 1248 1294
!609 = (!491 !492 !496 !497 !502 !503 !593 !594 !606 !607 !608)
!610 = span !88 18853 19016
!611 = (!491 !492 !496 !497 !502 !503 !610)
!612 = (!491 !492 !496 !497 !502 !503 !610)
!613 = span !88 19055 19064
!614 = (!491 !492 !496 !497 !502 !503 !613)
!615 = (!491 !492 !496 !497 !502 !503)
!616 = span !88 19040 19065
!617 = fn_call_path_span !88 19040 19054
!618 = span !88 2130 2153
!619 = fn_call_path_span !88 2136 2151
!620 = span !595 3959 3975
!621 = fn_call_path_span !595 3959 3969
!622 = span !595 1624 1675
!623 = (!491 !492 !496 !497 !502 !503 !616 !617 !618 !619 !620 !621 !622)
!624 = (!491 !492 !496 !497 !502 !503 !616 !617 !618 !619)
!625 = (!491 !492 !496 !497 !502 !503 !616 !617 !618 !619)
!626 = span !595 3976 3977
!627 = (!491 !492 !496 !497 !502 !503 !616 !617 !618 !619 !626)
!628 = (!491 !492 !496 !497 !502 !503 !616 !617 !618 !619)
!629 = span !88 2120 2154
!630 = (!491 !492 !496 !497 !502 !503 !616 !617 !629)
!631 = span !88 2185 2188
!632 = (!491 !492 !496 !497 !502 !503 !616 !617 !631)
!633 = span !88 2173 2189
!634 = fn_call_path_span !88 2173 2184
!635 = (!491 !492 !496 !497 !502 !503 !616 !617 !633 !634 !98)
!636 = span !88 2163 2190
!637 = (!491 !492 !496 !497 !502 !503 !616 !617 !636)
!638 = span !88 2202 2205
!639 = (!491 !492 !496 !497 !502 !503 !616 !617 !638)
!640 = span !88 2208 2209
!641 = span !88 2202 2209
!642 = fn_call_path_span !88 2206 2207
!643 = (!491 !492 !496 !497 !502 !503 !616 !617 !641 !642)
!644 = (!491 !492 !496 !497 !502 !503 !616 !617 !641)
!645 = span !88 2224 2235
!646 = fn_call_path_span !88 2230 2233
!647 = span !595 2911 2927
!648 = fn_call_path_span !595 2911 2921
!649 = (!491 !492 !496 !497 !502 !503 !616 !617 !645 !646 !647 !648 !622)
!650 = (!491 !492 !496 !497 !502 !503 !616 !617 !645 !646)
!651 = (!491 !492 !496 !497 !502 !503 !616 !617 !645 !646)
!652 = span !595 2928 2929
!653 = (!491 !492 !496 !497 !502 !503 !616 !617 !645 !646 !652)
!654 = (!491 !492 !496 !497 !502 !503 !616 !617 !645 !646)
!655 = span !88 2250 2253
!656 = (!491 !492 !496 !497 !502 !503 !616 !617 !655)
!657 = span !88 2255 2258
!658 = (!491 !492 !496 !497 !502 !503 !616 !617 !657)
!659 = span !88 2224 2259
!660 = fn_call_path_span !88 2236 2243
!661 = span !255 3413 3437
!662 = fn_call_path_span !255 3419 3420
!663 = (!491 !492 !496 !497 !502 !503 !616 !617 !659 !660 !661 !662)
!664 = span !255 3403 3438
!665 = (!491 !492 !496 !497 !502 !503 !616 !617 !659 !660 !664)
!666 = span !255 3477 3480
!667 = (!491 !492 !496 !497 !502 !503 !616 !617 !659 !660 !666)
!668 = span !255 3447 3522
!669 = (!491 !492 !496 !497 !502 !503 !616 !617 !659 !660 !668)
!670 = span !255 3496 3511
!671 = (!491 !492 !496 !497 !502 !503 !616 !617)
!672 = span !88 2286 2289
!673 = (!491 !492 !496 !497 !502 !503 !616 !617 !672)
!674 = span !88 2291 2294
!675 = (!491 !492 !496 !497 !502 !503 !616 !617 !674)
!676 = span !88 2279 2296
!677 = (!491 !492 !496 !497 !502 !503 !616 !617 !676)
!678 = (!491 !492 !496 !497 !502 !503 !616 !617)
!679 = (!491 !492 !496 !497 !502 !503 !616 !617 !676)
!680 = (!491 !492 !496 !497 !502 !503 !616 !617)
!681 = (!491 !492 !496 !497 !502 !503 !616 !617 !676)
!682 = (!491 !492 !496 !497 !502 !503 !616 !617)
!683 = span !88 19029 19065
!684 = (!491 !492 !496 !497 !502 !503 !683)
!685 = (!491 !492 !496 !497 !502 !503 !683)
!686 = (!491 !492 !496 !497 !502 !503)
!687 = (!491 !492 !496 !497 !502 !503 !247)
!688 = (!491 !492 !496 !497 !502 !503)
!689 = span !88 19100 19114
!690 = fn_call_path_span !88 19109 19112
!691 = (!491 !492 !496 !497 !502 !503 !689 !690)
!692 = span !88 19131 19142
!693 = (!491 !492 !496 !497 !502 !503 !692)
!694 = span !88 19100 19143
!695 = fn_call_path_span !88 19115 19130
!696 = span !255 6721 6825
!697 = (!491 !492 !496 !497 !502 !503 !694 !695 !696)
!698 = span !255 6771 6789
!699 = span !88 19086 19144
!700 = (!491 !492 !496 !497 !502 !503 !699)
!701 = (!491 !492 !496 !497 !502 !503)
!702 = span !88 19153 19164
!703 = fn_call_path_span !88 19159 19162
!704 = (!491 !492 !496 !497 !502 !503 !702 !703)
!705 = span !88 19179 19186
!706 = (!491 !492 !496 !497 !502 !503 !705)
!707 = span !88 19188 19197
!708 = (!491 !492 !496 !497 !502 !503 !707)
!709 = span !88 19153 19198
!710 = fn_call_path_span !88 19165 19178
!711 = (!491 !492 !496 !497 !502 !503 !709 !710 !256)
!712 = span !88 19255 19263
!713 = (!491 !492 !496 !497 !502 !503 !712)
!714 = span !88 19244 19263
!715 = (!491 !492 !496 !497 !502 !503 !714)
!716 = (!491 !492 !496 !497 !502 !503 !714)
!717 = (!491 !492 !496 !497 !502 !503)
!718 = span !480 9121 9127
!719 = span !480 9121 9136
!720 = fn_call_path_span !480 9128 9134
!721 = span !480 440 476
!722 = (!719 !720 !721)
!723 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!724 = span !723 7904 7970
!725 = (!719 !720 !721)
!726 = span !480 508 521
!727 = (!719 !720 !726)
!728 = (!719 !720)
!729 = (!719 !720 !498)
!730 = span !480 540 556
!731 = fn_call_path_span !480 551 554
!732 = (!719 !720 !730 !731)
!733 = (!719 !720 !498)
!734 = span !480 577 593
!735 = fn_call_path_span !480 588 591
!736 = (!719 !720 !734 !735)
!737 = span !480 485 672
!738 = (!719 !720 !737)
!739 = span !480 619 638
!740 = span !480 177 263
!741 = fn_name_span !480 184 187
!742 = (!740 !741)
!743 = span !480 234 246
!744 = fn_call_path_span !480 234 244
!745 = (!743 !744 !93 !94 !95 !96 !98)
!746 = (!743 !744 !93 !94 !101)
!747 = (!743 !744 !93 !94)
!748 = (!743 !744 !93 !94 !101)
!749 = (!743 !744 !93 !94)
!750 = (!743 !744 !93 !94 !101)
!751 = (!743 !744 !93 !94)
!752 = (!743 !744 !107)
!753 = (!743 !744)
!754 = (!743 !744 !107)
!755 = (!743 !744 !107)
!756 = span !480 208 257
!757 = span !210 5084 5088
!758 = span !210 5098 5103
!759 = span !210 5076 5153
!760 = fn_name_span !210 5079 5083
!761 = (!759 !760)
!762 = (!496 !497 !498)
!763 = (!496 !497)
!764 = (!496 !497 !502 !503)
!765 = (!496 !497 !502 !503 !505 !506)
!766 = (!496 !497 !502 !503 !508)
!767 = (!496 !497 !502 !503 !510)
!768 = (!496 !497 !502 !503 !513 !514)
!769 = (!496 !497 !502 !503 !513)
!770 = (!496 !497 !502 !503 !464)
!771 = (!496 !497 !502 !503)
!772 = (!496 !497 !502 !503 !521 !522)
!773 = (!496 !497 !502 !503 !521)
!774 = (!496 !497 !502 !503)
!775 = (!496 !497 !502 !503 !526)
!776 = (!496 !497 !502 !503 !528)
!777 = (!496 !497 !502 !503 !464)
!778 = (!496 !497 !502 !503)
!779 = (!496 !497 !502 !503 !532)
!780 = (!496 !497 !502 !503 !534 !535)
!781 = (!496 !497 !502 !503 !537)
!782 = (!496 !497 !502 !503 !464)
!783 = (!496 !497 !502 !503)
!784 = (!496 !497 !502 !503 !541)
!785 = (!496 !497 !502 !503 !247)
!786 = (!496 !497 !502 !503)
!787 = (!496 !497 !502 !503 !545 !546)
!788 = (!496 !497 !502 !503 !548)
!789 = (!496 !497 !502 !503 !550 !551)
!790 = (!496 !497 !502 !503 !550)
!791 = (!496 !497 !502 !503 !247)
!792 = (!496 !497 !502 !503)
!793 = (!496 !497 !502 !503 !556 !557)
!794 = (!496 !497 !502 !503 !247)
!795 = (!496 !497 !502 !503)
!796 = (!496 !497 !502 !503 !561 !562)
!797 = (!496 !497 !502 !503 !564)
!798 = (!496 !497 !502 !503 !566 !567 !568 !569)
!799 = (!496 !497 !502 !503 !566 !567 !568)
!800 = (!496 !497 !502 !503 !566 !567 !572 !573 !98)
!801 = (!496 !497 !502 !503 !566 !567 !575)
!802 = (!496 !497 !502 !503 !566 !567 !578 !579)
!803 = (!496 !497 !502 !503 !566 !567 !578)
!804 = (!496 !497 !502 !503 !566 !567 !582)
!805 = (!496 !497 !502 !503 !566 !567 !584 !585 !256)
!806 = (!496 !497 !502 !503 !566 !567)
!807 = (!496 !497 !502 !503 !566 !567 !588)
!808 = (!496 !497 !502 !503 !566 !567)
!809 = (!496 !497 !502 !503 !591)
!810 = (!496 !497 !502 !503 !593 !594 !596 !597)
!811 = (!496 !497 !502 !503 !593 !594 !599)
!812 = (!496 !497 !502 !503 !593 !594 !599)
!813 = (!496 !497 !502 !503 !593 !594 !599)
!814 = (!496 !497 !502 !503 !593 !594 !599)
!815 = (!496 !497 !502 !503 !593 !594 !599)
!816 = (!496 !497 !502 !503 !593 !594)
!817 = (!496 !497 !502 !503 !593 !594 !606 !607 !608)
!818 = (!496 !497 !502 !503 !610)
!819 = (!496 !497 !502 !503 !610)
!820 = (!496 !497 !502 !503 !613)
!821 = (!496 !497 !502 !503)
!822 = (!496 !497 !502 !503 !616 !617 !618 !619 !620 !621 !622)
!823 = (!496 !497 !502 !503 !616 !617 !618 !619)
!824 = (!496 !497 !502 !503 !616 !617 !618 !619)
!825 = (!496 !497 !502 !503 !616 !617 !618 !619 !626)
!826 = (!496 !497 !502 !503 !616 !617 !618 !619)
!827 = (!496 !497 !502 !503 !616 !617 !629)
!828 = (!496 !497 !502 !503 !616 !617 !631)
!829 = (!496 !497 !502 !503 !616 !617 !633 !634 !98)
!830 = (!496 !497 !502 !503 !616 !617 !636)
!831 = (!496 !497 !502 !503 !616 !617 !638)
!832 = (!496 !497 !502 !503 !616 !617 !641 !642)
!833 = (!496 !497 !502 !503 !616 !617 !641)
!834 = (!496 !497 !502 !503 !616 !617 !645 !646 !647 !648 !622)
!835 = (!496 !497 !502 !503 !616 !617 !645 !646)
!836 = (!496 !497 !502 !503 !616 !617 !645 !646)
!837 = (!496 !497 !502 !503 !616 !617 !645 !646 !652)
!838 = (!496 !497 !502 !503 !616 !617 !645 !646)
!839 = (!496 !497 !502 !503 !616 !617 !655)
!840 = (!496 !497 !502 !503 !616 !617 !657)
!841 = (!496 !497 !502 !503 !616 !617 !659 !660 !661 !662)
!842 = (!496 !497 !502 !503 !616 !617 !659 !660 !664)
!843 = (!496 !497 !502 !503 !616 !617 !659 !660 !666)
!844 = (!496 !497 !502 !503 !616 !617 !659 !660 !668)
!845 = (!496 !497 !502 !503 !616 !617)
!846 = (!496 !497 !502 !503 !616 !617 !672)
!847 = (!496 !497 !502 !503 !616 !617 !674)
!848 = (!496 !497 !502 !503 !616 !617 !676)
!849 = (!496 !497 !502 !503 !616 !617)
!850 = (!496 !497 !502 !503 !616 !617 !676)
!851 = (!496 !497 !502 !503 !616 !617)
!852 = (!496 !497 !502 !503 !616 !617 !676)
!853 = (!496 !497 !502 !503 !616 !617)
!854 = (!496 !497 !502 !503 !683)
!855 = (!496 !497 !502 !503 !683)
!856 = (!496 !497 !502 !503)
!857 = (!496 !497 !502 !503 !247)
!858 = (!496 !497 !502 !503)
!859 = (!496 !497 !502 !503 !689 !690)
!860 = (!496 !497 !502 !503 !692)
!861 = (!496 !497 !502 !503 !694 !695 !696)
!862 = (!496 !497 !502 !503 !699)
!863 = (!496 !497 !502 !503)
!864 = (!496 !497 !502 !503 !702 !703)
!865 = (!496 !497 !502 !503 !705)
!866 = (!496 !497 !502 !503 !707)
!867 = (!496 !497 !502 !503 !709 !710 !256)
!868 = (!496 !497 !502 !503 !712)
!869 = (!496 !497 !502 !503 !714)
!870 = (!496 !497 !502 !503 !714)
!871 = (!496 !497 !502 !503)
!872 = span !480 335 339
!873 = span !480 341 346
!874 = span !480 314 396
!875 = fn_name_span !480 321 326
!876 = (!874 !875)
!877 = (!502 !503)
!878 = (!502 !503 !505 !506)
!879 = (!502 !503 !508)
!880 = (!502 !503 !510)
!881 = (!502 !503 !513 !514)
!882 = (!502 !503 !513)
!883 = (!502 !503 !464)
!884 = (!502 !503 !521 !522)
!885 = (!502 !503 !521)
!886 = (!502 !503 !526)
!887 = (!502 !503 !528)
!888 = (!502 !503 !464)
!889 = (!502 !503 !532)
!890 = (!502 !503 !534 !535)
!891 = (!502 !503 !537)
!892 = (!502 !503 !464)
!893 = (!502 !503 !541)
!894 = (!502 !503 !247)
!895 = (!502 !503 !545 !546)
!896 = (!502 !503 !548)
!897 = (!502 !503 !550 !551)
!898 = (!502 !503 !550)
!899 = (!502 !503 !247)
!900 = (!502 !503 !556 !557)
!901 = (!502 !503 !247)
!902 = (!502 !503 !561 !562)
!903 = (!502 !503 !564)
!904 = (!502 !503 !566 !567 !568 !569)
!905 = (!502 !503 !566 !567 !568)
!906 = (!502 !503 !566 !567 !572 !573 !98)
!907 = (!502 !503 !566 !567 !575)
!908 = (!502 !503 !566 !567 !578 !579)
!909 = (!502 !503 !566 !567 !578)
!910 = (!502 !503 !566 !567 !582)
!911 = (!502 !503 !566 !567 !584 !585 !256)
!912 = (!502 !503 !566 !567)
!913 = (!502 !503 !566 !567 !588)
!914 = (!502 !503 !566 !567)
!915 = (!502 !503 !591)
!916 = (!502 !503 !593 !594 !596 !597)
!917 = (!502 !503 !593 !594 !599)
!918 = (!502 !503 !593 !594 !599)
!919 = (!502 !503 !593 !594 !599)
!920 = (!502 !503 !593 !594 !599)
!921 = (!502 !503 !593 !594 !599)
!922 = (!502 !503 !593 !594)
!923 = (!502 !503 !593 !594 !606 !607 !608)
!924 = (!502 !503 !610)
!925 = (!502 !503 !610)
!926 = (!502 !503 !613)
!927 = (!502 !503 !616 !617 !618 !619 !620 !621 !622)
!928 = (!502 !503 !616 !617 !618 !619)
!929 = (!502 !503 !616 !617 !618 !619)
!930 = (!502 !503 !616 !617 !618 !619 !626)
!931 = (!502 !503 !616 !617 !618 !619)
!932 = (!502 !503 !616 !617 !629)
!933 = (!502 !503 !616 !617 !631)
!934 = (!502 !503 !616 !617 !633 !634 !98)
!935 = (!502 !503 !616 !617 !636)
!936 = (!502 !503 !616 !617 !638)
!937 = (!502 !503 !616 !617 !641 !642)
!938 = (!502 !503 !616 !617 !641)
!939 = (!502 !503 !616 !617 !645 !646 !647 !648 !622)
!940 = (!502 !503 !616 !617 !645 !646)
!941 = (!502 !503 !616 !617 !645 !646)
!942 = (!502 !503 !616 !617 !645 !646 !652)
!943 = (!502 !503 !616 !617 !645 !646)
!944 = (!502 !503 !616 !617 !655)
!945 = (!502 !503 !616 !617 !657)
!946 = (!502 !503 !616 !617 !659 !660 !661 !662)
!947 = (!502 !503 !616 !617 !659 !660 !664)
!948 = (!502 !503 !616 !617 !659 !660 !666)
!949 = (!502 !503 !616 !617 !659 !660 !668)
!950 = (!502 !503 !616 !617)
!951 = (!502 !503 !616 !617 !672)
!952 = (!502 !503 !616 !617 !674)
!953 = (!502 !503 !616 !617 !676)
!954 = (!502 !503 !616 !617)
!955 = (!502 !503 !616 !617 !676)
!956 = (!502 !503 !616 !617)
!957 = (!502 !503 !616 !617 !676)
!958 = (!502 !503 !616 !617)
!959 = (!502 !503 !683)
!960 = (!502 !503 !683)
!961 = (!502 !503 !247)
!962 = (!502 !503 !689 !690)
!963 = (!502 !503 !692)
!964 = (!502 !503 !694 !695 !696)
!965 = (!502 !503 !699)
!966 = (!502 !503 !702 !703)
!967 = (!502 !503 !705)
!968 = (!502 !503 !707)
!969 = (!502 !503 !709 !710 !256)
!970 = (!502 !503 !712)
!971 = (!502 !503 !714)
!972 = (!502 !503 !714)
!973 = span !88 18345 18349
!974 = span !88 18359 18364
!975 = span !88 18323 19270
!976 = fn_name_span !88 18330 18336
!977 = (!975 !976)
!978 = (!505 !506)
!979 = (!513 !514)
!980 = (!521 !522)
!981 = (!534 !535)
!982 = (!545 !546)
!983 = (!550 !551)
!984 = (!556 !557)
!985 = (!561 !562)
!986 = (!566 !567 !568 !569)
!987 = (!566 !567 !568)
!988 = (!566 !567 !572 !573 !98)
!989 = (!566 !567 !575)
!990 = (!566 !567 !578 !579)
!991 = (!566 !567 !578)
!992 = (!566 !567 !582)
!993 = (!566 !567 !584 !585 !256)
!994 = (!566 !567)
!995 = (!566 !567 !588)
!996 = (!593 !594 !596 !597)
!997 = (!593 !594 !599)
!998 = (!593 !594 !599)
!999 = (!593 !594 !599)
!1000 = (!593 !594 !599)
!1001 = (!593 !594 !599)
!1002 = (!593 !594)
!1003 = (!593 !594 !606 !607 !608)
!1004 = (!616 !617 !618 !619 !620 !621 !622)
!1005 = (!616 !617 !618 !619)
!1006 = (!616 !617 !618 !619)
!1007 = (!616 !617 !618 !619 !626)
!1008 = (!616 !617 !618 !619)
!1009 = (!616 !617 !629)
!1010 = (!616 !617 !631)
!1011 = (!616 !617 !633 !634 !98)
!1012 = (!616 !617 !636)
!1013 = (!616 !617 !638)
!1014 = (!616 !617 !641 !642)
!1015 = (!616 !617 !641)
!1016 = (!616 !617 !645 !646 !647 !648 !622)
!1017 = (!616 !617 !645 !646)
!1018 = (!616 !617 !645 !646)
!1019 = (!616 !617 !645 !646 !652)
!1020 = (!616 !617 !645 !646)
!1021 = (!616 !617 !655)
!1022 = (!616 !617 !657)
!1023 = (!616 !617 !659 !660 !661 !662)
!1024 = (!616 !617 !659 !660 !664)
!1025 = (!616 !617 !659 !660 !666)
!1026 = (!616 !617 !659 !660 !668)
!1027 = (!616 !617)
!1028 = (!616 !617 !672)
!1029 = (!616 !617 !674)
!1030 = (!616 !617 !676)
!1031 = (!616 !617 !676)
!1032 = (!616 !617 !676)
!1033 = (!689 !690)
!1034 = (!694 !695 !696)
!1035 = (!702 !703)
!1036 = (!709 !710 !256)
!1037 = span !152 1239 1243
!1038 = span !152 1245 1250
!1039 = span !152 1232 1300
!1040 = fn_name_span !152 1235 1238
!1041 = (!1039 !1040)
!1042 = span !152 20651 20655
!1043 = span !152 20657 20662
!1044 = span !152 20645 20711
!1045 = fn_name_span !152 20648 20650
!1046 = (!1044 !1045)
!1047 = span !88 1097 1101
!1048 = span !88 1081 1134
!1049 = fn_name_span !88 1088 1096
!1050 = (!1048 !1049)
!1051 = span !88 418 426
!1052 = span !595 2307 2310
!1053 = span !595 2321 2326
!1054 = span !595 2286 2400
!1055 = fn_name_span !595 2293 2303
!1056 = (!1054 !1055)
!1057 = (!596 !597)
!1058 = (!606 !607 !608)
!1059 = span !595 1206 1211
!1060 = span !595 1192 1296
!1061 = fn_name_span !595 1195 1205
!1062 = (!1060 !1061)
!1063 = span !152 6993 6997
!1064 = span !152 6999 7004
!1065 = span !152 6981 7054
!1066 = fn_name_span !152 6984 6992
!1067 = (!1065 !1066)
!1068 = span !97 4106 4109
!1069 = span !97 4120 4125
!1070 = span !97 4132 4141
!1071 = span !97 4085 4362
!1072 = fn_name_span !97 4092 4105
!1073 = (!1071 !1072)
!1074 = (!568 !569)
!1075 = (!572 !573 !98)
!1076 = (!578 !579)
!1077 = (!584 !585 !256)
!1078 = span !152 20580 20584
!1079 = span !152 20586 20591
!1080 = span !152 20574 20640
!1081 = fn_name_span !152 20577 20579
!1082 = (!1080 !1081)
!1083 = span !88 2084 2089
!1084 = span !88 2076 2302
!1085 = fn_name_span !88 2079 2083
!1086 = (!1084 !1085)
!1087 = (!618 !619 !620 !621 !622)
!1088 = (!618 !619)
!1089 = (!618 !619 !626)
!1090 = (!633 !634 !98)
!1091 = (!641 !642)
!1092 = (!645 !646 !647 !648 !622)
!1093 = (!645 !646)
!1094 = (!645 !646 !652)
!1095 = (!659 !660 !661 !662)
!1096 = (!659 !660 !664)
!1097 = (!659 !660 !666)
!1098 = (!659 !660 !668)
!1099 = span !595 3936 3940
!1100 = span !595 3913 3983
!1101 = fn_name_span !595 3920 3935
!1102 = (!1100 !1101)
!1103 = (!620 !621 !622)
!1104 = span !595 1582 1587
!1105 = span !595 1568 1677
!1106 = fn_name_span !595 1571 1581
!1107 = (!1105 !1106)
!1108 = span !255 3364 3368
!1109 = span !255 3370 3373
!1110 = span !255 3381 3386
!1111 = span !255 3346 3529
!1112 = fn_name_span !255 3353 3360
!1113 = (!1111 !1112)
!1114 = (!661 !662)
!1115 = span !595 2884 2888
!1116 = span !595 2873 2935
!1117 = fn_name_span !595 2880 2883
!1118 = (!1116 !1117)
!1119 = (!647 !648 !622)
!1120 = span !255 6684 6688
!1121 = span !255 6690 6696
!1122 = span !255 6661 6831
!1123 = fn_name_span !255 6668 6683
!1124 = (!1122 !1123)
!1125 = span !480 416 420
!1126 = span !480 402 678
!1127 = fn_name_span !480 409 415
!1128 = (!1126 !1127)
!1129 = (!730 !731)
!1130 = (!734 !735)
!1131 = span !723 7873 7976
!1132 = fn_name_span !723 7880 7883
!1133 = (!1131 !1132)

// IR: [globals-dce] Dead globals (functions and variables) elimination
script {
    entry fn main() -> (), !3 {
        local bool _
        local { u64, ( { b256 } | { u64 } ) } __
        local { u64, ( { b256 } | { u64 } ) } ___
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr bool, _, !52
        v32 = get_local ptr { [u8; 64] }, secp256k1, !54
        v33 = load v32, !35
        v34 = get_local ptr { { { u64, u64 }, u64 } }, message, !56
        v35 = load v34, !35
        v36 = call address_7(v33, v35), !59
        v37 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __, !61
        store v36 to v37, !62
        v38 = get_local ptr { [u8; 64] }, secp256k1, !64
        v39 = load v38, !35
        v40 = get_local ptr { { { u64, u64 }, u64 } }, message, !66
        v41 = load v40, !35
        v42 = call address_7(v39, v41), !69
        v43 = get_local ptr { u64, ( { b256 } | { u64 } ) }, ___, !71
        store v42 to v43, !72
        v44 = const unit ()
        ret () v44
    }

    pub fn address_7(self !73: { [u8; 64] }, message !74: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !77 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !82
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !83
        v3 = const u64 0, !81
        store v3 to v2, !84
        v4 = ptr_to_int message to u64, !87
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !88
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !91
        v8 = load v7, !92
        v9 = call len_20(v8), !95
        v10 = const u64 32, !96
        v11 = cmp eq v9 v10, !102
        v12 = const bool false, !103
        v13 = cmp eq v11 v12, !106
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !107

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !110
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !111
        v17 = const u64 0, !109
        store v17 to v16, !112
        v18 = load v14, !113
        br recover_8_block0(v18), !115

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !116
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !117
        v22 = const u64 1, !109
        store v22 to v21, !118
        v23 = ptr_to_int message to u64, !119
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !120
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !121
        v27 = load v26, !122
        v28 = call ptr_21(v27), !125
        v29 = asm(bits: v28) -> b256 bits, !127 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !128
        store v29 to v32, !129
        v33 = load v19, !130
        br recover_8_block0(v33), !131

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !135
        store v34 to v35, !136
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !138
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !139
        v39 = load v38, !140
        v40 = const u64 1, !137
        v41 = cmp eq v39 v40, !143
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !144

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !145
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !146
        v46 = load v45, !147
        v47 = get_local ptr b256, inner_value, !149
        store v46 to v47, !150
        v48 = get_local ptr b256, inner_value, !152
        v49 = load v48, !153
        v50 = const u64 32, !155
        v51 = asm(size: v50) -> u64 hp, !169 {
            aloc   size, !170
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !172
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !173
        store v51 to v54, !174
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !175
        store v50 to v56, !176
        v57 = load v52, !177
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !179
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !180
        store v57 to v60, !181
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !182
        v63 = const u64 0, !183
        store v63 to v62, !184
        v64 = load v58, !185
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !187
        store v64 to v65, !188
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !190
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !191
        v69 = const u64 32, !192
        store v69 to v68, !193
        v70 = ptr_to_int v49 to u64, !195
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !197
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !199
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !201
        v76 = load v75, !202
        v77 = const u64 32, !203
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !208 {
            mcp    dst src len, !209
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !211
        v80 = load v79, !212
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !214
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !215
        store v80 to v83, !216
        v84 = load v81, !217
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !218
        store v84 to v87, !219
        v88 = load v0, !220
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !221
        store v88 to v89, !221
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !78
        v93 = load v92
        v94 = const u64 0, !78
        v95 = cmp eq v93 v94, !224
        cbr v95, block0(), block1(), !222

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !225
        revert v96, !230

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !231
        store v101 to v102, !231
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !81
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !81
        v106 = const u64 0, !81
        store v106 to v105, !81
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !232
        v108 = load v107
        v109 = call sha256_24(v108), !235
        v110 = get_local ptr { b256 }, __anon_02, !240
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !241
        store v109 to v112, !242
        v113 = load v110, !241
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !81
        store v113 to v116, !81
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !78
        v121 = load v120
        v122 = const u64 1, !78
        v123 = cmp eq v121 v122, !245
        cbr v123, block2(), block3(), !243

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !78
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !246
        store v128 to v129, !246
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !81
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !81
        v133 = const u64 1, !81
        store v133 to v132, !81
        v134 = get_local ptr { u64 }, e, !247
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !81
        store v135 to v138, !81
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !221
        revert v140, !221

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !248: { { u64, u64 }, u64 }) -> u64, !251 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !252
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !253: { { u64, u64 }, u64 }) -> u64, !256 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !198
        v4 = load v3
        v5 = call ptr_22(v4), !259
        ret u64 v5
    }

    pub fn ptr_22(self !260: { u64, u64 }) -> u64, !263 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !200
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !265: { { { u64, u64 }, u64 } }) -> b256, !269 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local u64 both_len
        local u64 cap
        local mut { { { u64, u64 }, u64 } } hasher
        local u64 len
        local u64 new_ptr
        local u64 new_ptr0
        local slice new_slice
        local u64 other_len
        local u64 other_start
        local u64 ptr
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !272
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !273
        store v0 to v1, !273
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !274
        v3 = ptr_to_int s to u64, !277
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !277
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !279
        v7 = load v6, !277
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !283
        v10 = ptr_to_int v7 to u64, !284
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !285
        v12 = load v11, !288
        v13 = call len_20(v12), !291
        v14 = get_local ptr u64, other_len, !293
        v15 = get_local ptr u64, other_len, !295
        v16 = const u64 0, !296
        v17 = cmp eq v13 v16, !299
        v18 = const unit (), !300
        cbr v17, hash_26_write_27_block0(v18), hash_26_write_27_append_28_block1(), !301

        hash_26_write_27_append_28_block1():
        v19 = const u64 1
        v20 = get_elem_ptr v9, ptr u64, v19, !302
        v21 = load v20, !303
        v22 = const u64 0, !304
        v23 = cmp eq v21 v22, !307
        cbr v23, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !308

        hash_26_write_27_append_28_block3():
        v24 = load v11, !309
        store v24 to v9, !311
        v25 = const unit (), !312
        br hash_26_write_27_block0(v25), !313

        hash_26_write_27_append_28_block4():
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !314
        v28 = load v27, !315
        v29 = get_local ptr u64, other_len, !317
        v30 = add v28, v13, !320
        v31 = get_local ptr u64, both_len, !322
        v32 = const u64 1
        v33 = get_elem_ptr v9, ptr u64, v32, !323
        v34 = load v33, !324
        v35 = get_local ptr u64, other_start, !326
        v36 = const u64 0
        v37 = get_elem_ptr v9, ptr { u64, u64 }, v36, !327
        v38 = load v37, !328
        v39 = call capacity_31(v38), !331
        v40 = get_local ptr u64, both_len, !333
        v41 = cmp lt v39 v30, !336
        v42 = const unit ()
        cbr v41, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(v42), !337

        hash_26_write_27_append_28_block6():
        v43 = const u64 0
        v44 = get_elem_ptr v9, ptr { u64, u64 }, v43, !338
        v45 = load v44, !339
        v46 = call ptr_22(v45), !342
        v47 = const u64 0
        v48 = get_elem_ptr v9, ptr { u64, u64 }, v47, !343
        v49 = load v48, !344
        v50 = call capacity_31(v49), !347
        v51 = get_local ptr u64, both_len, !349
        v52 = cmp gt v30 v50, !354
        cbr v52, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v46), !355

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v53 = asm(size: v30) -> u64 hp, !358 {
            aloc   size, !170
        }
        v54 = get_local ptr u64, new_ptr0, !360
        v55 = const u64 0, !361
        v56 = cmp gt v50 v55, !364
        v57 = const unit ()
        cbr v56, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(v57), !365

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v58 = get_local ptr u64, new_ptr0, !367
        v59 = asm(dst: v53, src: v46, len: v50) -> (), !370 {
            mcp    dst src len, !209
        }
        v60 = const unit ()
        br hash_26_write_27_append_28_realloc_bytes_35_block3(v60), !371

        hash_26_write_27_append_28_realloc_bytes_35_block3(v61: ()):
        v62 = get_local ptr u64, new_ptr0, !373
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v53), !374

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr u64, both_len, !376
        v65 = const u64 1
        v66 = mul v30, v65, !382
        v67 = get_local ptr { u64, u64 }, __anon_0, !384
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !385
        store v63 to v69, !386
        v70 = const u64 1
        v71 = get_elem_ptr v67, ptr u64, v70, !387
        store v66 to v71, !388
        v72 = load v67, !389
        v73 = asm(ptr: v72) -> slice ptr, !393 {
        }
        v74 = get_local ptr slice, new_slice, !395
        store v73 to v74, !396
        v75 = get_local ptr slice, new_slice, !398
        v76 = load v75, !399
        v77 = asm(ptr: v76) -> { u64, u64 } ptr, !407 {
        }
        v78 = get_local ptr { u64, u64 }, __anon_000, !408
        store v77 to v78, !409
        v79 = const u64 1
        v80 = get_elem_ptr v78, ptr u64, v79, !411
        v81 = load v80, !412
        v82 = get_local ptr u64, cap, !414
        v83 = get_local ptr u64, cap, !416
        v84 = asm(size: v81) -> u64 hp, !419 {
            aloc   size, !170
        }
        v85 = get_local ptr u64, ptr, !421
        v86 = get_local ptr u64, cap, !423
        v87 = const u64 0, !424
        v88 = cmp gt v81 v87, !427
        v89 = const unit ()
        cbr v88, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(v89), !428

        hash_26_write_27_append_28_from_37_block0():
        v90 = asm(ptr: v76) -> { u64, u64 } ptr, !433 {
        }
        v91 = get_local ptr { u64, u64 }, __anon_01, !434
        store v90 to v91, !435
        v92 = const u64 0
        v93 = get_elem_ptr v91, ptr u64, v92, !437
        v94 = load v93, !438
        v95 = get_local ptr u64, ptr, !440
        v96 = get_local ptr u64, cap, !442
        v97 = const u64 1
        v98 = mul v81, v97, !447
        v99 = get_local ptr u64, len, !449
        v100 = get_local ptr u64, len, !451
        v101 = asm(dst: v84, src: v94, len: v98) -> (), !453 {
            mcp    dst src len, !454
        }
        v102 = const unit ()
        br hash_26_write_27_append_28_from_37_block2(v102), !455

        hash_26_write_27_append_28_from_37_block2(v103: ()):
        v104 = get_local ptr u64, ptr, !457
        v105 = get_local ptr u64, cap, !459
        v106 = get_local ptr { u64, u64 }, __anon_00, !461
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !462
        store v84 to v108, !463
        v109 = const u64 1
        v110 = get_elem_ptr v106, ptr u64, v109, !464
        store v81 to v110, !465
        v111 = load v106, !466
        v112 = const u64 0
        v113 = get_elem_ptr v9, ptr { u64, u64 }, v112, !468
        store v111 to v113, !469
        v114 = const unit ()
        br hash_26_write_27_append_28_block8(v114), !470

        hash_26_write_27_append_28_block8(v115: ()):
        v116 = const u64 0
        v117 = get_elem_ptr v9, ptr { u64, u64 }, v116, !471
        v118 = load v117, !472
        v119 = call ptr_22(v118), !475
        v120 = get_local ptr u64, other_start, !477
        v121 = asm(ptr: v119, offset: v34, new) -> u64 new, !481 {
            add    new ptr offset, !482
        }
        v122 = get_local ptr u64, new_ptr, !484
        v123 = load v11, !485
        v124 = call ptr_21(v123), !488
        v125 = get_local ptr u64, new_ptr, !490
        v126 = get_local ptr u64, other_len, !492
        v127 = asm(dst: v121, src: v124, len: v13) -> (), !495 {
            mcp    dst src len, !209
        }
        v128 = get_local ptr u64, both_len, !497
        v129 = const u64 1
        v130 = get_elem_ptr v9, ptr u64, v129, !499
        store v30 to v130, !500
        v131 = const unit ()
        br hash_26_write_27_block0(v131), !501

        hash_26_write_27_block0(v132: ()):
        v133 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !502
        v134 = load v133
        v135 = get_local ptr b256, result_buffer, !506
        v136 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !508
        store v136 to v135, !509
        v137 = get_local ptr b256, result_buffer, !511
        v138 = ptr_to_int v134 to u64, !512
        v139 = int_to_ptr v138 to ptr { { { u64, u64 }, u64 } }, !512
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr { { u64, u64 }, u64 }, v140, !513
        v142 = load v141, !512
        v143 = call ptr_21(v142), !516
        v144 = ptr_to_int v134 to u64, !512
        v145 = int_to_ptr v144 to ptr { { { u64, u64 }, u64 } }, !512
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr { { u64, u64 }, u64 }, v146, !517
        v148 = load v147, !512
        v149 = call len_20(v148), !520
        v150 = asm(hash: v137, ptr: v143, bytes: v149) -> b256 hash, !522 {
            s256   hash ptr bytes, !523
        }
        ret b256 v150
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !526 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !527
        v1 = asm(size: v0) -> u64 hp, !534 {
            aloc   size, !170
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !536
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !537
        store v1 to v4, !538
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !539
        v7 = const u64 0, !540
        store v7 to v6, !541
        v8 = load v2, !542
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !544
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !545
        store v8 to v11, !546
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !545
        v14 = const u64 0, !547
        store v14 to v13, !548
        v15 = load v9, !545
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !549
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !549
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !550: { u64, u64 }) -> u64, !553 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !554
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1064 1095
!52 = (!4 !5 !51)
!53 = span !6 1108 1117
!54 = (!4 !5 !53)
!55 = span !6 1126 1133
!56 = (!4 !5 !55)
!57 = span !6 1108 1134
!58 = fn_call_path_span !6 1118 1125
!59 = (!4 !5 !57 !58)
!60 = span !6 1100 1135
!61 = (!4 !5 !60)
!62 = (!4 !5 !60)
!63 = span !6 1148 1157
!64 = (!4 !5 !63)
!65 = span !6 1166 1173
!66 = (!4 !5 !65)
!67 = span !6 1148 1174
!68 = fn_call_path_span !6 1158 1165
!69 = (!4 !5 !67 !68)
!70 = span !6 1140 1175
!71 = (!4 !5 !70)
!72 = (!4 !5 !70)
!73 = span !6 507 511
!74 = span !6 513 520
!75 = span !6 492 714
!76 = fn_name_span !6 499 506
!77 = (!75 !76)
!78 = span !6 582 603
!79 = fn_call_path_span !6 587 594
!80 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!81 = span !80 1815 1933
!82 = (!78 !79 !81)
!83 = (!78 !79 !81)
!84 = (!78 !79 !81)
!85 = span !6 451 469
!86 = fn_call_path_span !6 459 467
!87 = (!78 !79 !85 !86)
!88 = (!78 !79 !85 !86)
!89 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!90 = span !89 329 341
!91 = (!78 !79 !85 !86 !90)
!92 = (!78 !79 !85 !86)
!93 = span !89 1573 1589
!94 = fn_call_path_span !89 1584 1587
!95 = (!78 !79 !85 !86 !93 !94)
!96 = span !89 1593 1595
!97 = span !89 1573 1595
!98 = fn_call_path_span !89 1590 1592
!99 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!100 = span !99 15515 15529
!101 = fn_call_path_span !99 15520 15522
!102 = (!78 !79 !85 !86 !97 !98 !100 !101)
!103 = span !99 12533 12538
!104 = span !99 15514 15536
!105 = fn_call_path_span !99 15531 15534
!106 = (!78 !79 !85 !86 !97 !98 !104 !105)
!107 = (!78 !79 !85 !86 !97)
!108 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!109 = span !108 2461 2560
!110 = (!78 !79 !85 !86 !109)
!111 = (!78 !79 !85 !86 !109)
!112 = (!78 !79 !85 !86 !109)
!113 = (!78 !79 !85 !86)
!114 = span !89 1610 1621
!115 = (!78 !79 !85 !86 !114)
!116 = (!78 !79 !85 !86 !109)
!117 = (!78 !79 !85 !86 !109)
!118 = (!78 !79 !85 !86 !109)
!119 = (!78 !79 !85 !86)
!120 = (!78 !79 !85 !86)
!121 = (!78 !79 !85 !86 !90)
!122 = (!78 !79 !85 !86)
!123 = span !89 1657 1673
!124 = fn_call_path_span !89 1668 1671
!125 = (!78 !79 !85 !86 !123 !124)
!126 = span !89 1647 1709
!127 = (!78 !79 !85 !86 !126)
!128 = (!78 !79 !85 !86 !109)
!129 = (!78 !79 !85 !86 !109)
!130 = (!78 !79 !85 !86)
!131 = (!78 !79 !85 !86)
!132 = span !6 451 478
!133 = fn_call_path_span !6 470 476
!134 = span !108 4973 5075
!135 = (!78 !79 !132 !133 !134)
!136 = (!78 !79 !132 !133 !134)
!137 = span !108 4979 4983
!138 = (!78 !79 !132 !133 !137)
!139 = (!78 !79 !132 !133 !137)
!140 = (!78 !79 !132 !133)
!141 = span !108 4998 5037
!142 = fn_call_path_span !108 4998 5037
!143 = (!78 !79 !132 !133 !141 !142)
!144 = (!78 !79 !132 !133 !141)
!145 = (!78 !79 !132 !133 !137)
!146 = (!78 !79 !132 !133)
!147 = (!78 !79 !132 !133)
!148 = span !108 5009 5020
!149 = (!78 !79 !132 !133 !148)
!150 = (!78 !79 !132 !133 !148)
!151 = span !108 5025 5036
!152 = (!78 !79 !132 !133 !151)
!153 = (!78 !79 !132 !133)
!154 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!155 = span !154 28953 28955
!156 = span !6 435 479
!157 = fn_call_path_span !6 435 450
!158 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!159 = span !158 3133 3150
!160 = fn_call_path_span !158 3133 3144
!161 = span !154 28933 28956
!162 = fn_call_path_span !154 28933 28952
!163 = span !154 4157 4190
!164 = fn_call_path_span !154 4157 4180
!165 = span !154 863 884
!166 = fn_call_path_span !154 863 874
!167 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!168 = span !167 3315 3378
!169 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !165 !166 !168)
!170 = span !167 3342 3351
!171 = span !154 839 922
!172 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !171)
!173 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164)
!174 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !171)
!175 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164)
!176 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164 !171)
!177 = (!78 !79 !156 !157 !159 !160 !161 !162 !163 !164)
!178 = span !154 4133 4221
!179 = (!78 !79 !156 !157 !159 !160 !161 !162 !178)
!180 = (!78 !79 !156 !157 !159 !160 !161 !162)
!181 = (!78 !79 !156 !157 !159 !160 !161 !162 !178)
!182 = (!78 !79 !156 !157 !159 !160 !161 !162)
!183 = span !154 4209 4210
!184 = (!78 !79 !156 !157 !159 !160 !161 !162 !178)
!185 = (!78 !79 !156 !157 !159 !160 !161 !162)
!186 = span !154 28917 28957
!187 = (!78 !79 !156 !157 !159 !160 !186)
!188 = (!78 !79 !156 !157 !159 !160 !186)
!189 = span !154 28966 28980
!190 = (!78 !79 !156 !157 !159 !160 !189)
!191 = (!78 !79 !156 !157 !159 !160 !189)
!192 = span !154 28978 28980
!193 = (!78 !79 !156 !157 !159 !160 !189)
!194 = span !154 29065 29077
!195 = (!78 !79 !156 !157 !159 !160 !194)
!196 = span !154 29092 29097
!197 = (!78 !79 !156 !157 !159 !160 !196)
!198 = span !154 2445 2458
!199 = (!78 !79 !156 !157 !159 !160 !198)
!200 = span !154 400 412
!201 = (!78 !79 !156 !157 !159 !160 !200)
!202 = (!78 !79 !156 !157 !159 !160)
!203 = span !154 29107 29109
!204 = span !154 29065 29110
!205 = fn_call_path_span !154 29078 29091
!206 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!207 = span !206 5999 6076
!208 = (!78 !79 !156 !157 !159 !160 !204 !205 !207)
!209 = span !206 6050 6065
!210 = span !154 29121 29126
!211 = (!78 !79 !156 !157 !159 !160 !210)
!212 = (!78 !79 !156 !157 !159 !160)
!213 = span !158 3107 3161
!214 = (!78 !79 !156 !157 !213)
!215 = (!78 !79 !156 !157)
!216 = (!78 !79 !156 !157 !213)
!217 = (!78 !79 !156 !157)
!218 = (!78 !79 !81)
!219 = (!78 !79 !81)
!220 = (!78 !79)
!221 = span !6 576 708
!222 = span !6 618 668
!223 = fn_call_path_span !6 618 668
!224 = (!222 !223)
!225 = span !108 5062 5063
!226 = span !108 5055 5064
!227 = fn_call_path_span !108 5055 5061
!228 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!229 = span !228 757 771
!230 = (!78 !79 !132 !133 !226 !227 !229)
!231 = span !6 621 628
!232 = span !6 657 664
!233 = span !6 650 665
!234 = fn_call_path_span !6 650 656
!235 = (!233 !234)
!236 = span !6 636 666
!237 = fn_call_path_span !6 636 649
!238 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!239 = span !238 2370 2383
!240 = (!236 !237 !239)
!241 = (!236 !237)
!242 = (!236 !237 !239)
!243 = span !6 681 698
!244 = fn_call_path_span !6 681 698
!245 = (!243 !244)
!246 = span !6 685 686
!247 = span !6 695 696
!248 = span !154 13782 13786
!249 = span !154 13771 13819
!250 = fn_name_span !154 13778 13781
!251 = (!249 !250)
!252 = span !154 2506 2514
!253 = span !154 15186 15190
!254 = span !154 15175 15233
!255 = fn_name_span !154 15182 15185
!256 = (!254 !255)
!257 = span !154 15213 15227
!258 = fn_call_path_span !154 15222 15225
!259 = (!257 !258)
!260 = span !154 989 993
!261 = span !154 978 1030
!262 = fn_name_span !154 985 988
!263 = (!261 !262)
!264 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!265 = span !264 9026 9027
!266 = span !264 9009 9138
!267 = fn_name_span !264 9016 9022
!268 = inline "never"
!269 = (!266 !267 !268)
!270 = span !264 9082 9095
!271 = fn_call_path_span !264 9082 9093
!272 = (!270 !271)
!273 = span !264 9065 9096
!274 = span !264 9108 9114
!275 = span !264 9101 9115
!276 = fn_call_path_span !264 9103 9107
!277 = (!275 !276)
!278 = span !158 524 536
!279 = (!275 !276 !278)
!280 = span !158 5123 5146
!281 = fn_call_path_span !158 5129 5134
!282 = span !264 142 154
!283 = (!275 !276 !280 !281 !282)
!284 = (!275 !276 !280 !281)
!285 = (!275 !276 !280 !281)
!286 = span !264 365 389
!287 = fn_call_path_span !264 376 382
!288 = (!275 !276 !280 !281 !286 !287)
!289 = span !154 18398 18409
!290 = fn_call_path_span !154 18404 18407
!291 = (!275 !276 !280 !281 !286 !287 !289 !290)
!292 = span !154 18382 18410
!293 = (!275 !276 !280 !281 !286 !287 !292)
!294 = span !154 18422 18431
!295 = (!275 !276 !280 !281 !286 !287 !294)
!296 = span !154 18435 18436
!297 = span !154 18422 18436
!298 = fn_call_path_span !154 18432 18434
!299 = (!275 !276 !280 !281 !286 !287 !297 !298)
!300 = span !154 18451 18457
!301 = (!275 !276 !280 !281 !286 !287 !297)
!302 = (!275 !276 !280 !281 !286 !287 !252)
!303 = (!275 !276 !280 !281 !286 !287)
!304 = span !154 18572 18573
!305 = span !154 18560 18573
!306 = fn_call_path_span !154 18569 18571
!307 = (!275 !276 !280 !281 !286 !287 !305 !306)
!308 = (!275 !276 !280 !281 !286 !287 !305)
!309 = (!275 !276 !280 !281 !286 !287)
!310 = span !154 18588 18600
!311 = (!275 !276 !280 !281 !286 !287 !310)
!312 = span !154 18614 18620
!313 = (!275 !276 !280 !281 !286 !287 !312)
!314 = (!275 !276 !280 !281 !286 !287 !252)
!315 = (!275 !276 !280 !281 !286 !287)
!316 = span !154 18668 18677
!317 = (!275 !276 !280 !281 !286 !287 !316)
!318 = span !154 18657 18677
!319 = fn_call_path_span !154 18666 18667
!320 = (!275 !276 !280 !281 !286 !287 !318 !319)
!321 = span !154 18642 18678
!322 = (!275 !276 !280 !281 !286 !287 !321)
!323 = (!275 !276 !280 !281 !286 !287 !252)
!324 = (!275 !276 !280 !281 !286 !287)
!325 = span !154 18687 18714
!326 = (!275 !276 !280 !281 !286 !287 !325)
!327 = (!275 !276 !280 !281 !286 !287 !198)
!328 = (!275 !276 !280 !281 !286 !287)
!329 = span !154 18808 18827
!330 = fn_call_path_span !154 18817 18825
!331 = (!275 !276 !280 !281 !286 !287 !329 !330)
!332 = span !154 18830 18838
!333 = (!275 !276 !280 !281 !286 !287 !332)
!334 = span !154 18808 18838
!335 = fn_call_path_span !154 18828 18829
!336 = (!275 !276 !280 !281 !286 !287 !334 !335)
!337 = (!275 !276 !280 !281 !286 !287 !334)
!338 = (!275 !276 !280 !281 !286 !287 !198)
!339 = (!275 !276 !280 !281 !286 !287)
!340 = span !154 18928 18942
!341 = fn_call_path_span !154 18937 18940
!342 = (!275 !276 !280 !281 !286 !287 !340 !341)
!343 = (!275 !276 !280 !281 !286 !287 !198)
!344 = (!275 !276 !280 !281 !286 !287)
!345 = span !154 18944 18963
!346 = fn_call_path_span !154 18953 18961
!347 = (!275 !276 !280 !281 !286 !287 !345 !346)
!348 = span !154 18965 18973
!349 = (!275 !276 !280 !281 !286 !287 !348)
!350 = span !154 18914 18974
!351 = fn_call_path_span !154 18914 18927
!352 = span !167 4168 4185
!353 = fn_call_path_span !167 4178 4179
!354 = (!275 !276 !280 !281 !286 !287 !350 !351 !352 !353)
!355 = (!275 !276 !280 !281 !286 !287 !350 !351 !352)
!356 = span !167 4210 4232
!357 = fn_call_path_span !167 4210 4221
!358 = (!275 !276 !280 !281 !286 !287 !350 !351 !356 !357 !168)
!359 = span !167 4196 4233
!360 = (!275 !276 !280 !281 !286 !287 !350 !351 !359)
!361 = span !167 4253 4254
!362 = span !167 4245 4254
!363 = fn_call_path_span !167 4251 4252
!364 = (!275 !276 !280 !281 !286 !287 !350 !351 !362 !363)
!365 = (!275 !276 !280 !281 !286 !287 !350 !351 !362)
!366 = span !167 4287 4294
!367 = (!275 !276 !280 !281 !286 !287 !350 !351 !366)
!368 = span !167 4269 4302
!369 = fn_call_path_span !167 4273 4286
!370 = (!275 !276 !280 !281 !286 !287 !350 !351 !368 !369 !207)
!371 = (!275 !276 !280 !281 !286 !287 !350 !351)
!372 = span !167 4322 4329
!373 = (!275 !276 !280 !281 !286 !287 !350 !351 !372)
!374 = (!275 !276 !280 !281 !286 !287 !350 !351)
!375 = span !154 18992 19000
!376 = (!275 !276 !280 !281 !286 !287 !375)
!377 = span !154 18869 19015
!378 = fn_call_path_span !154 18869 18890
!379 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!380 = span !379 2368 2392
!381 = fn_call_path_span !379 2374 2375
!382 = (!275 !276 !280 !281 !286 !287 !377 !378 !380 !381)
!383 = span !379 2362 2393
!384 = (!275 !276 !280 !281 !286 !287 !377 !378 !383)
!385 = (!275 !276 !280 !281 !286 !287 !377 !378 !383)
!386 = (!275 !276 !280 !281 !286 !287 !377 !378 !383)
!387 = (!275 !276 !280 !281 !286 !287 !377 !378 !383)
!388 = (!275 !276 !280 !281 !286 !287 !377 !378 !383)
!389 = (!275 !276 !280 !281 !286 !287 !377 !378)
!390 = span !379 2351 2394
!391 = fn_call_path_span !379 2351 2361
!392 = span !379 1248 1294
!393 = (!275 !276 !280 !281 !286 !287 !377 !378 !390 !391 !392)
!394 = span !154 18853 19016
!395 = (!275 !276 !280 !281 !286 !287 !394)
!396 = (!275 !276 !280 !281 !286 !287 !394)
!397 = span !154 19055 19064
!398 = (!275 !276 !280 !281 !286 !287 !397)
!399 = (!275 !276 !280 !281 !286 !287)
!400 = span !154 19040 19065
!401 = fn_call_path_span !154 19040 19054
!402 = span !154 2130 2153
!403 = fn_call_path_span !154 2136 2151
!404 = span !379 3959 3975
!405 = fn_call_path_span !379 3959 3969
!406 = span !379 1624 1675
!407 = (!275 !276 !280 !281 !286 !287 !400 !401 !402 !403 !404 !405 !406)
!408 = (!275 !276 !280 !281 !286 !287 !400 !401 !402 !403)
!409 = (!275 !276 !280 !281 !286 !287 !400 !401 !402 !403)
!410 = span !379 3976 3977
!411 = (!275 !276 !280 !281 !286 !287 !400 !401 !402 !403 !410)
!412 = (!275 !276 !280 !281 !286 !287 !400 !401 !402 !403)
!413 = span !154 2120 2154
!414 = (!275 !276 !280 !281 !286 !287 !400 !401 !413)
!415 = span !154 2185 2188
!416 = (!275 !276 !280 !281 !286 !287 !400 !401 !415)
!417 = span !154 2173 2189
!418 = fn_call_path_span !154 2173 2184
!419 = (!275 !276 !280 !281 !286 !287 !400 !401 !417 !418 !168)
!420 = span !154 2163 2190
!421 = (!275 !276 !280 !281 !286 !287 !400 !401 !420)
!422 = span !154 2202 2205
!423 = (!275 !276 !280 !281 !286 !287 !400 !401 !422)
!424 = span !154 2208 2209
!425 = span !154 2202 2209
!426 = fn_call_path_span !154 2206 2207
!427 = (!275 !276 !280 !281 !286 !287 !400 !401 !425 !426)
!428 = (!275 !276 !280 !281 !286 !287 !400 !401 !425)
!429 = span !154 2224 2235
!430 = fn_call_path_span !154 2230 2233
!431 = span !379 2911 2927
!432 = fn_call_path_span !379 2911 2921
!433 = (!275 !276 !280 !281 !286 !287 !400 !401 !429 !430 !431 !432 !406)
!434 = (!275 !276 !280 !281 !286 !287 !400 !401 !429 !430)
!435 = (!275 !276 !280 !281 !286 !287 !400 !401 !429 !430)
!436 = span !379 2928 2929
!437 = (!275 !276 !280 !281 !286 !287 !400 !401 !429 !430 !436)
!438 = (!275 !276 !280 !281 !286 !287 !400 !401 !429 !430)
!439 = span !154 2250 2253
!440 = (!275 !276 !280 !281 !286 !287 !400 !401 !439)
!441 = span !154 2255 2258
!442 = (!275 !276 !280 !281 !286 !287 !400 !401 !441)
!443 = span !154 2224 2259
!444 = fn_call_path_span !154 2236 2243
!445 = span !206 3413 3437
!446 = fn_call_path_span !206 3419 3420
!447 = (!275 !276 !280 !281 !286 !287 !400 !401 !443 !444 !445 !446)
!448 = span !206 3403 3438
!449 = (!275 !276 !280 !281 !286 !287 !400 !401 !443 !444 !448)
!450 = span !206 3477 3480
!451 = (!275 !276 !280 !281 !286 !287 !400 !401 !443 !444 !450)
!452 = span !206 3447 3522
!453 = (!275 !276 !280 !281 !286 !287 !400 !401 !443 !444 !452)
!454 = span !206 3496 3511
!455 = (!275 !276 !280 !281 !286 !287 !400 !401)
!456 = span !154 2286 2289
!457 = (!275 !276 !280 !281 !286 !287 !400 !401 !456)
!458 = span !154 2291 2294
!459 = (!275 !276 !280 !281 !286 !287 !400 !401 !458)
!460 = span !154 2279 2296
!461 = (!275 !276 !280 !281 !286 !287 !400 !401 !460)
!462 = (!275 !276 !280 !281 !286 !287 !400 !401)
!463 = (!275 !276 !280 !281 !286 !287 !400 !401 !460)
!464 = (!275 !276 !280 !281 !286 !287 !400 !401)
!465 = (!275 !276 !280 !281 !286 !287 !400 !401 !460)
!466 = (!275 !276 !280 !281 !286 !287 !400 !401)
!467 = span !154 19029 19065
!468 = (!275 !276 !280 !281 !286 !287 !467)
!469 = (!275 !276 !280 !281 !286 !287 !467)
!470 = (!275 !276 !280 !281 !286 !287)
!471 = (!275 !276 !280 !281 !286 !287 !198)
!472 = (!275 !276 !280 !281 !286 !287)
!473 = span !154 19100 19114
!474 = fn_call_path_span !154 19109 19112
!475 = (!275 !276 !280 !281 !286 !287 !473 !474)
!476 = span !154 19131 19142
!477 = (!275 !276 !280 !281 !286 !287 !476)
!478 = span !154 19100 19143
!479 = fn_call_path_span !154 19115 19130
!480 = span !206 6721 6825
!481 = (!275 !276 !280 !281 !286 !287 !478 !479 !480)
!482 = span !206 6771 6789
!483 = span !154 19086 19144
!484 = (!275 !276 !280 !281 !286 !287 !483)
!485 = (!275 !276 !280 !281 !286 !287)
!486 = span !154 19153 19164
!487 = fn_call_path_span !154 19159 19162
!488 = (!275 !276 !280 !281 !286 !287 !486 !487)
!489 = span !154 19179 19186
!490 = (!275 !276 !280 !281 !286 !287 !489)
!491 = span !154 19188 19197
!492 = (!275 !276 !280 !281 !286 !287 !491)
!493 = span !154 19153 19198
!494 = fn_call_path_span !154 19165 19178
!495 = (!275 !276 !280 !281 !286 !287 !493 !494 !207)
!496 = span !154 19255 19263
!497 = (!275 !276 !280 !281 !286 !287 !496)
!498 = span !154 19244 19263
!499 = (!275 !276 !280 !281 !286 !287 !498)
!500 = (!275 !276 !280 !281 !286 !287 !498)
!501 = (!275 !276 !280 !281 !286 !287)
!502 = span !264 9121 9127
!503 = span !264 9121 9136
!504 = fn_call_path_span !264 9128 9134
!505 = span !264 440 476
!506 = (!503 !504 !505)
!507 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!508 = span !507 7904 7970
!509 = (!503 !504 !505)
!510 = span !264 508 521
!511 = (!503 !504 !510)
!512 = (!503 !504)
!513 = (!503 !504 !282)
!514 = span !264 540 556
!515 = fn_call_path_span !264 551 554
!516 = (!503 !504 !514 !515)
!517 = (!503 !504 !282)
!518 = span !264 577 593
!519 = fn_call_path_span !264 588 591
!520 = (!503 !504 !518 !519)
!521 = span !264 485 672
!522 = (!503 !504 !521)
!523 = span !264 619 638
!524 = span !264 177 263
!525 = fn_name_span !264 184 187
!526 = (!524 !525)
!527 = span !154 570 571
!528 = span !264 234 246
!529 = fn_call_path_span !264 234 244
!530 = span !154 3079 3094
!531 = fn_call_path_span !154 3079 3092
!532 = span !154 558 572
!533 = fn_call_path_span !154 558 569
!534 = (!528 !529 !530 !531 !532 !533 !168)
!535 = span !154 534 603
!536 = (!528 !529 !530 !531 !535)
!537 = (!528 !529 !530 !531)
!538 = (!528 !529 !530 !531 !535)
!539 = (!528 !529 !530 !531)
!540 = span !154 591 592
!541 = (!528 !529 !530 !531 !535)
!542 = (!528 !529 !530 !531)
!543 = span !154 3055 3125
!544 = (!528 !529 !543)
!545 = (!528 !529)
!546 = (!528 !529 !543)
!547 = span !154 3113 3114
!548 = (!528 !529 !543)
!549 = span !264 208 257
!550 = span !154 1097 1101
!551 = span !154 1081 1134
!552 = fn_name_span !154 1088 1096
!553 = (!551 !552)
!554 = span !154 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr { [u8; 64] }, secp256k1, !52
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !54
        v34 = load v33, !35
        v35 = call address_7(v32, v34), !57
        v36 = get_local ptr { [u8; 64] }, secp256k1, !59
        v37 = load v36, !35
        v38 = get_local ptr { { { u64, u64 }, u64 } }, message, !61
        v39 = load v38, !35
        v40 = call address_7(v37, v39), !64
        v41 = const unit ()
        ret () v41
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = ptr_to_int message to u64, !111
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !112
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !113
        v27 = load v26, !114
        v28 = call ptr_21(v27), !117
        v29 = asm(bits: v28) -> b256 bits, !119 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !120
        store v29 to v32, !121
        v33 = load v19, !122
        br recover_8_block0(v33), !123

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        store v34 to v35, !128
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !130
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !131
        v39 = load v38, !132
        v40 = const u64 1, !129
        v41 = cmp eq v39 v40, !135
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !136

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !137
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !138
        v46 = load v45, !139
        v47 = get_local ptr b256, inner_value, !141
        store v46 to v47, !142
        v48 = get_local ptr b256, inner_value, !144
        v49 = load v48, !145
        v50 = const u64 32, !147
        v51 = asm(size: v50) -> u64 hp, !161 {
            aloc   size, !162
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !164
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !165
        store v51 to v54, !166
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !167
        store v50 to v56, !168
        v57 = load v52, !169
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !171
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !172
        store v57 to v60, !173
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !174
        v63 = const u64 0, !175
        store v63 to v62, !176
        v64 = load v58, !177
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        store v64 to v65, !180
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !182
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !183
        v69 = const u64 32, !184
        store v69 to v68, !185
        v70 = ptr_to_int v49 to u64, !187
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !189
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !191
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !193
        v76 = load v75, !194
        v77 = const u64 32, !195
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !200 {
            mcp    dst src len, !201
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !203
        v80 = load v79, !204
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !206
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !207
        store v80 to v83, !208
        v84 = load v81, !209
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !210
        store v84 to v87, !211
        v88 = load v0, !212
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !213
        store v88 to v89, !213
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !70
        v93 = load v92
        v94 = const u64 0, !70
        v95 = cmp eq v93 v94, !216
        cbr v95, block0(), block1(), !214

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !217
        revert v96, !222

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !223
        store v101 to v102, !223
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !73
        v106 = const u64 0, !73
        store v106 to v105, !73
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !224
        v108 = load v107
        v109 = call sha256_24(v108), !227
        v110 = get_local ptr { b256 }, __anon_02, !232
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !233
        store v109 to v112, !234
        v113 = load v110, !233
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !73
        store v113 to v116, !73
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !70
        v121 = load v120
        v122 = const u64 1, !70
        v123 = cmp eq v121 v122, !237
        cbr v123, block2(), block3(), !235

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !238
        store v128 to v129, !238
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !73
        v133 = const u64 1, !73
        store v133 to v132, !73
        v134 = get_local ptr { u64 }, e, !239
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !73
        store v135 to v138, !73
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !213
        revert v140, !213

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !240: { { u64, u64 }, u64 }) -> u64, !243 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !244
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !245: { { u64, u64 }, u64 }) -> u64, !248 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !190
        v4 = load v3
        v5 = call ptr_22(v4), !251
        ret u64 v5
    }

    pub fn ptr_22(self !252: { u64, u64 }) -> u64, !255 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !192
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !257: { { { u64, u64 }, u64 } }) -> b256, !261 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !264
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !265
        store v0 to v1, !265
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !266
        v3 = ptr_to_int s to u64, !269
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !269
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !271
        v7 = load v6, !269
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !275
        v10 = ptr_to_int v7 to u64, !276
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !277
        v12 = load v11, !280
        v13 = call len_20(v12), !283
        v14 = const u64 0, !284
        v15 = cmp eq v13 v14, !287
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !288

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !289
        v18 = load v17, !290
        v19 = const u64 0, !291
        v20 = cmp eq v18 v19, !294
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !295

        hash_26_write_27_append_28_block3():
        v21 = load v11, !296
        store v21 to v9, !298
        br hash_26_write_27_block0(), !300

        hash_26_write_27_append_28_block4():
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !301
        v24 = load v23, !302
        v25 = add v24, v13, !305
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !306
        v28 = load v27, !307
        v29 = const u64 0
        v30 = get_elem_ptr v9, ptr { u64, u64 }, v29, !308
        v31 = load v30, !309
        v32 = call capacity_31(v31), !312
        v33 = cmp lt v32 v25, !315
        cbr v33, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !316

        hash_26_write_27_append_28_block6():
        v34 = const u64 0
        v35 = get_elem_ptr v9, ptr { u64, u64 }, v34, !317
        v36 = load v35, !318
        v37 = call ptr_22(v36), !321
        v38 = const u64 0
        v39 = get_elem_ptr v9, ptr { u64, u64 }, v38, !322
        v40 = load v39, !323
        v41 = call capacity_31(v40), !326
        v42 = cmp gt v25 v41, !331
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !332

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v25) -> u64 hp, !335 {
            aloc   size, !162
        }
        v44 = const u64 0, !336
        v45 = cmp gt v41 v44, !339
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(), !340

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v37, len: v41) -> (), !343 {
            mcp    dst src len, !201
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block3(), !344

        hash_26_write_27_append_28_realloc_bytes_35_block3():
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !345

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = const u64 1
        v49 = mul v25, v48, !351
        v50 = get_local ptr { u64, u64 }, __anon_0, !353
        v51 = const u64 0
        v52 = get_elem_ptr v50, ptr u64, v51, !354
        store v47 to v52, !355
        v53 = const u64 1
        v54 = get_elem_ptr v50, ptr u64, v53, !356
        store v49 to v54, !357
        v55 = load v50, !358
        v56 = asm(ptr: v55) -> slice ptr, !362 {
        }
        v57 = get_local ptr slice, new_slice, !364
        store v56 to v57, !365
        v58 = get_local ptr slice, new_slice, !367
        v59 = load v58, !368
        v60 = asm(ptr: v59) -> { u64, u64 } ptr, !376 {
        }
        v61 = get_local ptr { u64, u64 }, __anon_000, !377
        store v60 to v61, !378
        v62 = const u64 1
        v63 = get_elem_ptr v61, ptr u64, v62, !380
        v64 = load v63, !381
        v65 = asm(size: v64) -> u64 hp, !384 {
            aloc   size, !162
        }
        v66 = const u64 0, !385
        v67 = cmp gt v64 v66, !388
        cbr v67, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !389

        hash_26_write_27_append_28_from_37_block0():
        v68 = asm(ptr: v59) -> { u64, u64 } ptr, !394 {
        }
        v69 = get_local ptr { u64, u64 }, __anon_01, !395
        store v68 to v69, !396
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !398
        v72 = load v71, !399
        v73 = const u64 1
        v74 = mul v64, v73, !404
        v75 = asm(dst: v65, src: v72, len: v74) -> (), !406 {
            mcp    dst src len, !407
        }
        br hash_26_write_27_append_28_from_37_block2(), !408

        hash_26_write_27_append_28_from_37_block2():
        v76 = get_local ptr { u64, u64 }, __anon_00, !410
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !411
        store v65 to v78, !412
        v79 = const u64 1
        v80 = get_elem_ptr v76, ptr u64, v79, !413
        store v64 to v80, !414
        v81 = load v76, !415
        v82 = const u64 0
        v83 = get_elem_ptr v9, ptr { u64, u64 }, v82, !417
        store v81 to v83, !418
        br hash_26_write_27_append_28_block8(), !419

        hash_26_write_27_append_28_block8():
        v84 = const u64 0
        v85 = get_elem_ptr v9, ptr { u64, u64 }, v84, !420
        v86 = load v85, !421
        v87 = call ptr_22(v86), !424
        v88 = asm(ptr: v87, offset: v28, new) -> u64 new, !428 {
            add    new ptr offset, !429
        }
        v89 = load v11, !430
        v90 = call ptr_21(v89), !433
        v91 = asm(dst: v88, src: v90, len: v13) -> (), !436 {
            mcp    dst src len, !201
        }
        v92 = const u64 1
        v93 = get_elem_ptr v9, ptr u64, v92, !438
        store v25 to v93, !439
        br hash_26_write_27_block0(), !440

        hash_26_write_27_block0():
        v94 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !441
        v95 = load v94
        v96 = get_local ptr b256, result_buffer, !445
        v97 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !447
        store v97 to v96, !448
        v98 = get_local ptr b256, result_buffer, !450
        v99 = ptr_to_int v95 to u64, !451
        v100 = int_to_ptr v99 to ptr { { { u64, u64 }, u64 } }, !451
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr { { u64, u64 }, u64 }, v101, !452
        v103 = load v102, !451
        v104 = call ptr_21(v103), !455
        v105 = ptr_to_int v95 to u64, !451
        v106 = int_to_ptr v105 to ptr { { { u64, u64 }, u64 } }, !451
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { { u64, u64 }, u64 }, v107, !456
        v109 = load v108, !451
        v110 = call len_20(v109), !459
        v111 = asm(hash: v98, ptr: v104, bytes: v110) -> b256 hash, !461 {
            s256   hash ptr bytes, !462
        }
        ret b256 v111
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !465 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !466
        v1 = asm(size: v0) -> u64 hp, !473 {
            aloc   size, !162
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !475
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !476
        store v1 to v4, !477
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !478
        v7 = const u64 0, !479
        store v7 to v6, !480
        v8 = load v2, !481
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !483
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !484
        store v8 to v11, !485
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !484
        v14 = const u64 0, !486
        store v14 to v13, !487
        v15 = load v9, !484
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !488
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !488
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !489: { u64, u64 }) -> u64, !492 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !493
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1108 1117
!52 = (!4 !5 !51)
!53 = span !6 1126 1133
!54 = (!4 !5 !53)
!55 = span !6 1108 1134
!56 = fn_call_path_span !6 1118 1125
!57 = (!4 !5 !55 !56)
!58 = span !6 1148 1157
!59 = (!4 !5 !58)
!60 = span !6 1166 1173
!61 = (!4 !5 !60)
!62 = span !6 1148 1174
!63 = fn_call_path_span !6 1158 1165
!64 = (!4 !5 !62 !63)
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = (!70 !71 !77 !78)
!113 = (!70 !71 !77 !78 !82)
!114 = (!70 !71 !77 !78)
!115 = span !81 1657 1673
!116 = fn_call_path_span !81 1668 1671
!117 = (!70 !71 !77 !78 !115 !116)
!118 = span !81 1647 1709
!119 = (!70 !71 !77 !78 !118)
!120 = (!70 !71 !77 !78 !101)
!121 = (!70 !71 !77 !78 !101)
!122 = (!70 !71 !77 !78)
!123 = (!70 !71 !77 !78)
!124 = span !6 451 478
!125 = fn_call_path_span !6 470 476
!126 = span !100 4973 5075
!127 = (!70 !71 !124 !125 !126)
!128 = (!70 !71 !124 !125 !126)
!129 = span !100 4979 4983
!130 = (!70 !71 !124 !125 !129)
!131 = (!70 !71 !124 !125 !129)
!132 = (!70 !71 !124 !125)
!133 = span !100 4998 5037
!134 = fn_call_path_span !100 4998 5037
!135 = (!70 !71 !124 !125 !133 !134)
!136 = (!70 !71 !124 !125 !133)
!137 = (!70 !71 !124 !125 !129)
!138 = (!70 !71 !124 !125)
!139 = (!70 !71 !124 !125)
!140 = span !100 5009 5020
!141 = (!70 !71 !124 !125 !140)
!142 = (!70 !71 !124 !125 !140)
!143 = span !100 5025 5036
!144 = (!70 !71 !124 !125 !143)
!145 = (!70 !71 !124 !125)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!147 = span !146 28953 28955
!148 = span !6 435 479
!149 = fn_call_path_span !6 435 450
!150 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!151 = span !150 3133 3150
!152 = fn_call_path_span !150 3133 3144
!153 = span !146 28933 28956
!154 = fn_call_path_span !146 28933 28952
!155 = span !146 4157 4190
!156 = fn_call_path_span !146 4157 4180
!157 = span !146 863 884
!158 = fn_call_path_span !146 863 874
!159 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!160 = span !159 3315 3378
!161 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !157 !158 !160)
!162 = span !159 3342 3351
!163 = span !146 839 922
!164 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!165 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!166 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!167 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!168 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!169 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!170 = span !146 4133 4221
!171 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!172 = (!70 !71 !148 !149 !151 !152 !153 !154)
!173 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!174 = (!70 !71 !148 !149 !151 !152 !153 !154)
!175 = span !146 4209 4210
!176 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!177 = (!70 !71 !148 !149 !151 !152 !153 !154)
!178 = span !146 28917 28957
!179 = (!70 !71 !148 !149 !151 !152 !178)
!180 = (!70 !71 !148 !149 !151 !152 !178)
!181 = span !146 28966 28980
!182 = (!70 !71 !148 !149 !151 !152 !181)
!183 = (!70 !71 !148 !149 !151 !152 !181)
!184 = span !146 28978 28980
!185 = (!70 !71 !148 !149 !151 !152 !181)
!186 = span !146 29065 29077
!187 = (!70 !71 !148 !149 !151 !152 !186)
!188 = span !146 29092 29097
!189 = (!70 !71 !148 !149 !151 !152 !188)
!190 = span !146 2445 2458
!191 = (!70 !71 !148 !149 !151 !152 !190)
!192 = span !146 400 412
!193 = (!70 !71 !148 !149 !151 !152 !192)
!194 = (!70 !71 !148 !149 !151 !152)
!195 = span !146 29107 29109
!196 = span !146 29065 29110
!197 = fn_call_path_span !146 29078 29091
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!199 = span !198 5999 6076
!200 = (!70 !71 !148 !149 !151 !152 !196 !197 !199)
!201 = span !198 6050 6065
!202 = span !146 29121 29126
!203 = (!70 !71 !148 !149 !151 !152 !202)
!204 = (!70 !71 !148 !149 !151 !152)
!205 = span !150 3107 3161
!206 = (!70 !71 !148 !149 !205)
!207 = (!70 !71 !148 !149)
!208 = (!70 !71 !148 !149 !205)
!209 = (!70 !71 !148 !149)
!210 = (!70 !71 !73)
!211 = (!70 !71 !73)
!212 = (!70 !71)
!213 = span !6 576 708
!214 = span !6 618 668
!215 = fn_call_path_span !6 618 668
!216 = (!214 !215)
!217 = span !100 5062 5063
!218 = span !100 5055 5064
!219 = fn_call_path_span !100 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!70 !71 !124 !125 !218 !219 !221)
!223 = span !6 621 628
!224 = span !6 657 664
!225 = span !6 650 665
!226 = fn_call_path_span !6 650 656
!227 = (!225 !226)
!228 = span !6 636 666
!229 = fn_call_path_span !6 636 649
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!231 = span !230 2370 2383
!232 = (!228 !229 !231)
!233 = (!228 !229)
!234 = (!228 !229 !231)
!235 = span !6 681 698
!236 = fn_call_path_span !6 681 698
!237 = (!235 !236)
!238 = span !6 685 686
!239 = span !6 695 696
!240 = span !146 13782 13786
!241 = span !146 13771 13819
!242 = fn_name_span !146 13778 13781
!243 = (!241 !242)
!244 = span !146 2506 2514
!245 = span !146 15186 15190
!246 = span !146 15175 15233
!247 = fn_name_span !146 15182 15185
!248 = (!246 !247)
!249 = span !146 15213 15227
!250 = fn_call_path_span !146 15222 15225
!251 = (!249 !250)
!252 = span !146 989 993
!253 = span !146 978 1030
!254 = fn_name_span !146 985 988
!255 = (!253 !254)
!256 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!257 = span !256 9026 9027
!258 = span !256 9009 9138
!259 = fn_name_span !256 9016 9022
!260 = inline "never"
!261 = (!258 !259 !260)
!262 = span !256 9082 9095
!263 = fn_call_path_span !256 9082 9093
!264 = (!262 !263)
!265 = span !256 9065 9096
!266 = span !256 9108 9114
!267 = span !256 9101 9115
!268 = fn_call_path_span !256 9103 9107
!269 = (!267 !268)
!270 = span !150 524 536
!271 = (!267 !268 !270)
!272 = span !150 5123 5146
!273 = fn_call_path_span !150 5129 5134
!274 = span !256 142 154
!275 = (!267 !268 !272 !273 !274)
!276 = (!267 !268 !272 !273)
!277 = (!267 !268 !272 !273)
!278 = span !256 365 389
!279 = fn_call_path_span !256 376 382
!280 = (!267 !268 !272 !273 !278 !279)
!281 = span !146 18398 18409
!282 = fn_call_path_span !146 18404 18407
!283 = (!267 !268 !272 !273 !278 !279 !281 !282)
!284 = span !146 18435 18436
!285 = span !146 18422 18436
!286 = fn_call_path_span !146 18432 18434
!287 = (!267 !268 !272 !273 !278 !279 !285 !286)
!288 = (!267 !268 !272 !273 !278 !279 !285)
!289 = (!267 !268 !272 !273 !278 !279 !244)
!290 = (!267 !268 !272 !273 !278 !279)
!291 = span !146 18572 18573
!292 = span !146 18560 18573
!293 = fn_call_path_span !146 18569 18571
!294 = (!267 !268 !272 !273 !278 !279 !292 !293)
!295 = (!267 !268 !272 !273 !278 !279 !292)
!296 = (!267 !268 !272 !273 !278 !279)
!297 = span !146 18588 18600
!298 = (!267 !268 !272 !273 !278 !279 !297)
!299 = span !146 18614 18620
!300 = (!267 !268 !272 !273 !278 !279 !299)
!301 = (!267 !268 !272 !273 !278 !279 !244)
!302 = (!267 !268 !272 !273 !278 !279)
!303 = span !146 18657 18677
!304 = fn_call_path_span !146 18666 18667
!305 = (!267 !268 !272 !273 !278 !279 !303 !304)
!306 = (!267 !268 !272 !273 !278 !279 !244)
!307 = (!267 !268 !272 !273 !278 !279)
!308 = (!267 !268 !272 !273 !278 !279 !190)
!309 = (!267 !268 !272 !273 !278 !279)
!310 = span !146 18808 18827
!311 = fn_call_path_span !146 18817 18825
!312 = (!267 !268 !272 !273 !278 !279 !310 !311)
!313 = span !146 18808 18838
!314 = fn_call_path_span !146 18828 18829
!315 = (!267 !268 !272 !273 !278 !279 !313 !314)
!316 = (!267 !268 !272 !273 !278 !279 !313)
!317 = (!267 !268 !272 !273 !278 !279 !190)
!318 = (!267 !268 !272 !273 !278 !279)
!319 = span !146 18928 18942
!320 = fn_call_path_span !146 18937 18940
!321 = (!267 !268 !272 !273 !278 !279 !319 !320)
!322 = (!267 !268 !272 !273 !278 !279 !190)
!323 = (!267 !268 !272 !273 !278 !279)
!324 = span !146 18944 18963
!325 = fn_call_path_span !146 18953 18961
!326 = (!267 !268 !272 !273 !278 !279 !324 !325)
!327 = span !146 18914 18974
!328 = fn_call_path_span !146 18914 18927
!329 = span !159 4168 4185
!330 = fn_call_path_span !159 4178 4179
!331 = (!267 !268 !272 !273 !278 !279 !327 !328 !329 !330)
!332 = (!267 !268 !272 !273 !278 !279 !327 !328 !329)
!333 = span !159 4210 4232
!334 = fn_call_path_span !159 4210 4221
!335 = (!267 !268 !272 !273 !278 !279 !327 !328 !333 !334 !160)
!336 = span !159 4253 4254
!337 = span !159 4245 4254
!338 = fn_call_path_span !159 4251 4252
!339 = (!267 !268 !272 !273 !278 !279 !327 !328 !337 !338)
!340 = (!267 !268 !272 !273 !278 !279 !327 !328 !337)
!341 = span !159 4269 4302
!342 = fn_call_path_span !159 4273 4286
!343 = (!267 !268 !272 !273 !278 !279 !327 !328 !341 !342 !199)
!344 = (!267 !268 !272 !273 !278 !279 !327 !328)
!345 = (!267 !268 !272 !273 !278 !279 !327 !328)
!346 = span !146 18869 19015
!347 = fn_call_path_span !146 18869 18890
!348 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!349 = span !348 2368 2392
!350 = fn_call_path_span !348 2374 2375
!351 = (!267 !268 !272 !273 !278 !279 !346 !347 !349 !350)
!352 = span !348 2362 2393
!353 = (!267 !268 !272 !273 !278 !279 !346 !347 !352)
!354 = (!267 !268 !272 !273 !278 !279 !346 !347 !352)
!355 = (!267 !268 !272 !273 !278 !279 !346 !347 !352)
!356 = (!267 !268 !272 !273 !278 !279 !346 !347 !352)
!357 = (!267 !268 !272 !273 !278 !279 !346 !347 !352)
!358 = (!267 !268 !272 !273 !278 !279 !346 !347)
!359 = span !348 2351 2394
!360 = fn_call_path_span !348 2351 2361
!361 = span !348 1248 1294
!362 = (!267 !268 !272 !273 !278 !279 !346 !347 !359 !360 !361)
!363 = span !146 18853 19016
!364 = (!267 !268 !272 !273 !278 !279 !363)
!365 = (!267 !268 !272 !273 !278 !279 !363)
!366 = span !146 19055 19064
!367 = (!267 !268 !272 !273 !278 !279 !366)
!368 = (!267 !268 !272 !273 !278 !279)
!369 = span !146 19040 19065
!370 = fn_call_path_span !146 19040 19054
!371 = span !146 2130 2153
!372 = fn_call_path_span !146 2136 2151
!373 = span !348 3959 3975
!374 = fn_call_path_span !348 3959 3969
!375 = span !348 1624 1675
!376 = (!267 !268 !272 !273 !278 !279 !369 !370 !371 !372 !373 !374 !375)
!377 = (!267 !268 !272 !273 !278 !279 !369 !370 !371 !372)
!378 = (!267 !268 !272 !273 !278 !279 !369 !370 !371 !372)
!379 = span !348 3976 3977
!380 = (!267 !268 !272 !273 !278 !279 !369 !370 !371 !372 !379)
!381 = (!267 !268 !272 !273 !278 !279 !369 !370 !371 !372)
!382 = span !146 2173 2189
!383 = fn_call_path_span !146 2173 2184
!384 = (!267 !268 !272 !273 !278 !279 !369 !370 !382 !383 !160)
!385 = span !146 2208 2209
!386 = span !146 2202 2209
!387 = fn_call_path_span !146 2206 2207
!388 = (!267 !268 !272 !273 !278 !279 !369 !370 !386 !387)
!389 = (!267 !268 !272 !273 !278 !279 !369 !370 !386)
!390 = span !146 2224 2235
!391 = fn_call_path_span !146 2230 2233
!392 = span !348 2911 2927
!393 = fn_call_path_span !348 2911 2921
!394 = (!267 !268 !272 !273 !278 !279 !369 !370 !390 !391 !392 !393 !375)
!395 = (!267 !268 !272 !273 !278 !279 !369 !370 !390 !391)
!396 = (!267 !268 !272 !273 !278 !279 !369 !370 !390 !391)
!397 = span !348 2928 2929
!398 = (!267 !268 !272 !273 !278 !279 !369 !370 !390 !391 !397)
!399 = (!267 !268 !272 !273 !278 !279 !369 !370 !390 !391)
!400 = span !146 2224 2259
!401 = fn_call_path_span !146 2236 2243
!402 = span !198 3413 3437
!403 = fn_call_path_span !198 3419 3420
!404 = (!267 !268 !272 !273 !278 !279 !369 !370 !400 !401 !402 !403)
!405 = span !198 3447 3522
!406 = (!267 !268 !272 !273 !278 !279 !369 !370 !400 !401 !405)
!407 = span !198 3496 3511
!408 = (!267 !268 !272 !273 !278 !279 !369 !370)
!409 = span !146 2279 2296
!410 = (!267 !268 !272 !273 !278 !279 !369 !370 !409)
!411 = (!267 !268 !272 !273 !278 !279 !369 !370)
!412 = (!267 !268 !272 !273 !278 !279 !369 !370 !409)
!413 = (!267 !268 !272 !273 !278 !279 !369 !370)
!414 = (!267 !268 !272 !273 !278 !279 !369 !370 !409)
!415 = (!267 !268 !272 !273 !278 !279 !369 !370)
!416 = span !146 19029 19065
!417 = (!267 !268 !272 !273 !278 !279 !416)
!418 = (!267 !268 !272 !273 !278 !279 !416)
!419 = (!267 !268 !272 !273 !278 !279)
!420 = (!267 !268 !272 !273 !278 !279 !190)
!421 = (!267 !268 !272 !273 !278 !279)
!422 = span !146 19100 19114
!423 = fn_call_path_span !146 19109 19112
!424 = (!267 !268 !272 !273 !278 !279 !422 !423)
!425 = span !146 19100 19143
!426 = fn_call_path_span !146 19115 19130
!427 = span !198 6721 6825
!428 = (!267 !268 !272 !273 !278 !279 !425 !426 !427)
!429 = span !198 6771 6789
!430 = (!267 !268 !272 !273 !278 !279)
!431 = span !146 19153 19164
!432 = fn_call_path_span !146 19159 19162
!433 = (!267 !268 !272 !273 !278 !279 !431 !432)
!434 = span !146 19153 19198
!435 = fn_call_path_span !146 19165 19178
!436 = (!267 !268 !272 !273 !278 !279 !434 !435 !199)
!437 = span !146 19244 19263
!438 = (!267 !268 !272 !273 !278 !279 !437)
!439 = (!267 !268 !272 !273 !278 !279 !437)
!440 = (!267 !268 !272 !273 !278 !279)
!441 = span !256 9121 9127
!442 = span !256 9121 9136
!443 = fn_call_path_span !256 9128 9134
!444 = span !256 440 476
!445 = (!442 !443 !444)
!446 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!447 = span !446 7904 7970
!448 = (!442 !443 !444)
!449 = span !256 508 521
!450 = (!442 !443 !449)
!451 = (!442 !443)
!452 = (!442 !443 !274)
!453 = span !256 540 556
!454 = fn_call_path_span !256 551 554
!455 = (!442 !443 !453 !454)
!456 = (!442 !443 !274)
!457 = span !256 577 593
!458 = fn_call_path_span !256 588 591
!459 = (!442 !443 !457 !458)
!460 = span !256 485 672
!461 = (!442 !443 !460)
!462 = span !256 619 638
!463 = span !256 177 263
!464 = fn_name_span !256 184 187
!465 = (!463 !464)
!466 = span !146 570 571
!467 = span !256 234 246
!468 = fn_call_path_span !256 234 244
!469 = span !146 3079 3094
!470 = fn_call_path_span !146 3079 3092
!471 = span !146 558 572
!472 = fn_call_path_span !146 558 569
!473 = (!467 !468 !469 !470 !471 !472 !160)
!474 = span !146 534 603
!475 = (!467 !468 !469 !470 !474)
!476 = (!467 !468 !469 !470)
!477 = (!467 !468 !469 !470 !474)
!478 = (!467 !468 !469 !470)
!479 = span !146 591 592
!480 = (!467 !468 !469 !470 !474)
!481 = (!467 !468 !469 !470)
!482 = span !146 3055 3125
!483 = (!467 !468 !482)
!484 = (!467 !468)
!485 = (!467 !468 !482)
!486 = span !146 3113 3114
!487 = (!467 !468 !482)
!488 = span !256 208 257
!489 = span !146 1097 1101
!490 = span !146 1081 1134
!491 = fn_name_span !146 1088 1096
!492 = (!490 !491)
!493 = span !146 418 426

// IR: [const-folding] Constant folding
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr { [u8; 64] }, secp256k1, !52
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !54
        v34 = load v33, !35
        v35 = call address_7(v32, v34), !57
        v36 = get_local ptr { [u8; 64] }, secp256k1, !59
        v37 = load v36, !35
        v38 = get_local ptr { { { u64, u64 }, u64 } }, message, !61
        v39 = load v38, !35
        v40 = call address_7(v37, v39), !64
        v41 = const unit ()
        ret () v41
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = ptr_to_int message to u64, !111
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !112
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !113
        v27 = load v26, !114
        v28 = call ptr_21(v27), !117
        v29 = asm(bits: v28) -> b256 bits, !119 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !120
        store v29 to v32, !121
        v33 = load v19, !122
        br recover_8_block0(v33), !123

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        store v34 to v35, !128
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !130
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !131
        v39 = load v38, !132
        v40 = const u64 1, !129
        v41 = cmp eq v39 v40, !135
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !136

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !137
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !138
        v46 = load v45, !139
        v47 = get_local ptr b256, inner_value, !141
        store v46 to v47, !142
        v48 = get_local ptr b256, inner_value, !144
        v49 = load v48, !145
        v50 = const u64 32, !147
        v51 = asm(size: v50) -> u64 hp, !161 {
            aloc   size, !162
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !164
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !165
        store v51 to v54, !166
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !167
        store v50 to v56, !168
        v57 = load v52, !169
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !171
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !172
        store v57 to v60, !173
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !174
        v63 = const u64 0, !175
        store v63 to v62, !176
        v64 = load v58, !177
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        store v64 to v65, !180
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !182
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !183
        v69 = const u64 32, !184
        store v69 to v68, !185
        v70 = ptr_to_int v49 to u64, !187
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !189
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !191
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !193
        v76 = load v75, !194
        v77 = const u64 32, !195
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !200 {
            mcp    dst src len, !201
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !203
        v80 = load v79, !204
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !206
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !207
        store v80 to v83, !208
        v84 = load v81, !209
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !210
        store v84 to v87, !211
        v88 = load v0, !212
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !213
        store v88 to v89, !213
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !70
        v93 = load v92
        v94 = const u64 0, !70
        v95 = cmp eq v93 v94, !216
        cbr v95, block0(), block1(), !214

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !217
        revert v96, !222

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !223
        store v101 to v102, !223
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !73
        v106 = const u64 0, !73
        store v106 to v105, !73
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !224
        v108 = load v107
        v109 = call sha256_24(v108), !227
        v110 = get_local ptr { b256 }, __anon_02, !232
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !233
        store v109 to v112, !234
        v113 = load v110, !233
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !73
        store v113 to v116, !73
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !70
        v121 = load v120
        v122 = const u64 1, !70
        v123 = cmp eq v121 v122, !237
        cbr v123, block2(), block3(), !235

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !238
        store v128 to v129, !238
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !73
        v133 = const u64 1, !73
        store v133 to v132, !73
        v134 = get_local ptr { u64 }, e, !239
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !73
        store v135 to v138, !73
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !213
        revert v140, !213

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !240: { { u64, u64 }, u64 }) -> u64, !243 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !244
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !245: { { u64, u64 }, u64 }) -> u64, !248 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !190
        v4 = load v3
        v5 = call ptr_22(v4), !251
        ret u64 v5
    }

    pub fn ptr_22(self !252: { u64, u64 }) -> u64, !255 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !192
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !257: { { { u64, u64 }, u64 } }) -> b256, !261 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !264
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !265
        store v0 to v1, !265
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !266
        v3 = ptr_to_int s to u64, !269
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !269
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !271
        v7 = load v6, !269
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !275
        v10 = ptr_to_int v7 to u64, !276
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !277
        v12 = load v11, !280
        v13 = call len_20(v12), !283
        v14 = const u64 0, !284
        v15 = cmp eq v13 v14, !287
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !288

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !289
        v18 = load v17, !290
        v19 = const u64 0, !291
        v20 = cmp eq v18 v19, !294
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !295

        hash_26_write_27_append_28_block3():
        v21 = load v11, !296
        store v21 to v9, !298
        br hash_26_write_27_block0(), !300

        hash_26_write_27_append_28_block4():
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !301
        v24 = load v23, !302
        v25 = add v24, v13, !305
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !306
        v28 = load v27, !307
        v29 = const u64 0
        v30 = get_elem_ptr v9, ptr { u64, u64 }, v29, !308
        v31 = load v30, !309
        v32 = call capacity_31(v31), !312
        v33 = cmp lt v32 v25, !315
        cbr v33, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !316

        hash_26_write_27_append_28_block6():
        v34 = const u64 0
        v35 = get_elem_ptr v9, ptr { u64, u64 }, v34, !317
        v36 = load v35, !318
        v37 = call ptr_22(v36), !321
        v38 = const u64 0
        v39 = get_elem_ptr v9, ptr { u64, u64 }, v38, !322
        v40 = load v39, !323
        v41 = call capacity_31(v40), !326
        v42 = cmp gt v25 v41, !331
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !332

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v25) -> u64 hp, !335 {
            aloc   size, !162
        }
        v44 = const u64 0, !336
        v45 = cmp gt v41 v44, !339
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block3(), !340

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v37, len: v41) -> (), !343 {
            mcp    dst src len, !201
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block3(), !344

        hash_26_write_27_append_28_realloc_bytes_35_block3():
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !345

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = get_local ptr { u64, u64 }, __anon_0, !350
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !351
        store v47 to v50, !352
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !353
        store v25 to v52, !354
        v53 = load v48, !355
        v54 = asm(ptr: v53) -> slice ptr, !359 {
        }
        v55 = get_local ptr slice, new_slice, !361
        store v54 to v55, !362
        v56 = get_local ptr slice, new_slice, !364
        v57 = load v56, !365
        v58 = asm(ptr: v57) -> { u64, u64 } ptr, !373 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_000, !374
        store v58 to v59, !375
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr u64, v60, !377
        v62 = load v61, !378
        v63 = asm(size: v62) -> u64 hp, !381 {
            aloc   size, !162
        }
        v64 = const u64 0, !382
        v65 = cmp gt v62 v64, !385
        cbr v65, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !386

        hash_26_write_27_append_28_from_37_block0():
        v66 = asm(ptr: v57) -> { u64, u64 } ptr, !391 {
        }
        v67 = get_local ptr { u64, u64 }, __anon_01, !392
        store v66 to v67, !393
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !395
        v70 = load v69, !396
        v71 = asm(dst: v63, src: v70, len: v62) -> (), !400 {
            mcp    dst src len, !401
        }
        br hash_26_write_27_append_28_from_37_block2(), !402

        hash_26_write_27_append_28_from_37_block2():
        v72 = get_local ptr { u64, u64 }, __anon_00, !404
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !405
        store v63 to v74, !406
        v75 = const u64 1
        v76 = get_elem_ptr v72, ptr u64, v75, !407
        store v62 to v76, !408
        v77 = load v72, !409
        v78 = const u64 0
        v79 = get_elem_ptr v9, ptr { u64, u64 }, v78, !411
        store v77 to v79, !412
        br hash_26_write_27_append_28_block8(), !413

        hash_26_write_27_append_28_block8():
        v80 = const u64 0
        v81 = get_elem_ptr v9, ptr { u64, u64 }, v80, !414
        v82 = load v81, !415
        v83 = call ptr_22(v82), !418
        v84 = asm(ptr: v83, offset: v28, new) -> u64 new, !422 {
            add    new ptr offset, !423
        }
        v85 = load v11, !424
        v86 = call ptr_21(v85), !427
        v87 = asm(dst: v84, src: v86, len: v13) -> (), !430 {
            mcp    dst src len, !201
        }
        v88 = const u64 1
        v89 = get_elem_ptr v9, ptr u64, v88, !432
        store v25 to v89, !433
        br hash_26_write_27_block0(), !434

        hash_26_write_27_block0():
        v90 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !435
        v91 = load v90
        v92 = get_local ptr b256, result_buffer, !439
        v93 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !441
        store v93 to v92, !442
        v94 = get_local ptr b256, result_buffer, !444
        v95 = ptr_to_int v91 to u64, !445
        v96 = int_to_ptr v95 to ptr { { { u64, u64 }, u64 } }, !445
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { { u64, u64 }, u64 }, v97, !446
        v99 = load v98, !445
        v100 = call ptr_21(v99), !449
        v101 = ptr_to_int v91 to u64, !445
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !445
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !450
        v105 = load v104, !445
        v106 = call len_20(v105), !453
        v107 = asm(hash: v94, ptr: v100, bytes: v106) -> b256 hash, !455 {
            s256   hash ptr bytes, !456
        }
        ret b256 v107
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !459 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !460
        v1 = asm(size: v0) -> u64 hp, !467 {
            aloc   size, !162
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !469
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !470
        store v1 to v4, !471
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !472
        v7 = const u64 0, !473
        store v7 to v6, !474
        v8 = load v2, !475
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !477
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !478
        store v8 to v11, !479
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !478
        v14 = const u64 0, !480
        store v14 to v13, !481
        v15 = load v9, !478
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !482
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !482
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !483: { u64, u64 }) -> u64, !486 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !487
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1108 1117
!52 = (!4 !5 !51)
!53 = span !6 1126 1133
!54 = (!4 !5 !53)
!55 = span !6 1108 1134
!56 = fn_call_path_span !6 1118 1125
!57 = (!4 !5 !55 !56)
!58 = span !6 1148 1157
!59 = (!4 !5 !58)
!60 = span !6 1166 1173
!61 = (!4 !5 !60)
!62 = span !6 1148 1174
!63 = fn_call_path_span !6 1158 1165
!64 = (!4 !5 !62 !63)
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = (!70 !71 !77 !78)
!113 = (!70 !71 !77 !78 !82)
!114 = (!70 !71 !77 !78)
!115 = span !81 1657 1673
!116 = fn_call_path_span !81 1668 1671
!117 = (!70 !71 !77 !78 !115 !116)
!118 = span !81 1647 1709
!119 = (!70 !71 !77 !78 !118)
!120 = (!70 !71 !77 !78 !101)
!121 = (!70 !71 !77 !78 !101)
!122 = (!70 !71 !77 !78)
!123 = (!70 !71 !77 !78)
!124 = span !6 451 478
!125 = fn_call_path_span !6 470 476
!126 = span !100 4973 5075
!127 = (!70 !71 !124 !125 !126)
!128 = (!70 !71 !124 !125 !126)
!129 = span !100 4979 4983
!130 = (!70 !71 !124 !125 !129)
!131 = (!70 !71 !124 !125 !129)
!132 = (!70 !71 !124 !125)
!133 = span !100 4998 5037
!134 = fn_call_path_span !100 4998 5037
!135 = (!70 !71 !124 !125 !133 !134)
!136 = (!70 !71 !124 !125 !133)
!137 = (!70 !71 !124 !125 !129)
!138 = (!70 !71 !124 !125)
!139 = (!70 !71 !124 !125)
!140 = span !100 5009 5020
!141 = (!70 !71 !124 !125 !140)
!142 = (!70 !71 !124 !125 !140)
!143 = span !100 5025 5036
!144 = (!70 !71 !124 !125 !143)
!145 = (!70 !71 !124 !125)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!147 = span !146 28953 28955
!148 = span !6 435 479
!149 = fn_call_path_span !6 435 450
!150 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!151 = span !150 3133 3150
!152 = fn_call_path_span !150 3133 3144
!153 = span !146 28933 28956
!154 = fn_call_path_span !146 28933 28952
!155 = span !146 4157 4190
!156 = fn_call_path_span !146 4157 4180
!157 = span !146 863 884
!158 = fn_call_path_span !146 863 874
!159 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!160 = span !159 3315 3378
!161 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !157 !158 !160)
!162 = span !159 3342 3351
!163 = span !146 839 922
!164 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!165 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!166 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!167 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!168 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!169 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!170 = span !146 4133 4221
!171 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!172 = (!70 !71 !148 !149 !151 !152 !153 !154)
!173 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!174 = (!70 !71 !148 !149 !151 !152 !153 !154)
!175 = span !146 4209 4210
!176 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!177 = (!70 !71 !148 !149 !151 !152 !153 !154)
!178 = span !146 28917 28957
!179 = (!70 !71 !148 !149 !151 !152 !178)
!180 = (!70 !71 !148 !149 !151 !152 !178)
!181 = span !146 28966 28980
!182 = (!70 !71 !148 !149 !151 !152 !181)
!183 = (!70 !71 !148 !149 !151 !152 !181)
!184 = span !146 28978 28980
!185 = (!70 !71 !148 !149 !151 !152 !181)
!186 = span !146 29065 29077
!187 = (!70 !71 !148 !149 !151 !152 !186)
!188 = span !146 29092 29097
!189 = (!70 !71 !148 !149 !151 !152 !188)
!190 = span !146 2445 2458
!191 = (!70 !71 !148 !149 !151 !152 !190)
!192 = span !146 400 412
!193 = (!70 !71 !148 !149 !151 !152 !192)
!194 = (!70 !71 !148 !149 !151 !152)
!195 = span !146 29107 29109
!196 = span !146 29065 29110
!197 = fn_call_path_span !146 29078 29091
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!199 = span !198 5999 6076
!200 = (!70 !71 !148 !149 !151 !152 !196 !197 !199)
!201 = span !198 6050 6065
!202 = span !146 29121 29126
!203 = (!70 !71 !148 !149 !151 !152 !202)
!204 = (!70 !71 !148 !149 !151 !152)
!205 = span !150 3107 3161
!206 = (!70 !71 !148 !149 !205)
!207 = (!70 !71 !148 !149)
!208 = (!70 !71 !148 !149 !205)
!209 = (!70 !71 !148 !149)
!210 = (!70 !71 !73)
!211 = (!70 !71 !73)
!212 = (!70 !71)
!213 = span !6 576 708
!214 = span !6 618 668
!215 = fn_call_path_span !6 618 668
!216 = (!214 !215)
!217 = span !100 5062 5063
!218 = span !100 5055 5064
!219 = fn_call_path_span !100 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!70 !71 !124 !125 !218 !219 !221)
!223 = span !6 621 628
!224 = span !6 657 664
!225 = span !6 650 665
!226 = fn_call_path_span !6 650 656
!227 = (!225 !226)
!228 = span !6 636 666
!229 = fn_call_path_span !6 636 649
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!231 = span !230 2370 2383
!232 = (!228 !229 !231)
!233 = (!228 !229)
!234 = (!228 !229 !231)
!235 = span !6 681 698
!236 = fn_call_path_span !6 681 698
!237 = (!235 !236)
!238 = span !6 685 686
!239 = span !6 695 696
!240 = span !146 13782 13786
!241 = span !146 13771 13819
!242 = fn_name_span !146 13778 13781
!243 = (!241 !242)
!244 = span !146 2506 2514
!245 = span !146 15186 15190
!246 = span !146 15175 15233
!247 = fn_name_span !146 15182 15185
!248 = (!246 !247)
!249 = span !146 15213 15227
!250 = fn_call_path_span !146 15222 15225
!251 = (!249 !250)
!252 = span !146 989 993
!253 = span !146 978 1030
!254 = fn_name_span !146 985 988
!255 = (!253 !254)
!256 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!257 = span !256 9026 9027
!258 = span !256 9009 9138
!259 = fn_name_span !256 9016 9022
!260 = inline "never"
!261 = (!258 !259 !260)
!262 = span !256 9082 9095
!263 = fn_call_path_span !256 9082 9093
!264 = (!262 !263)
!265 = span !256 9065 9096
!266 = span !256 9108 9114
!267 = span !256 9101 9115
!268 = fn_call_path_span !256 9103 9107
!269 = (!267 !268)
!270 = span !150 524 536
!271 = (!267 !268 !270)
!272 = span !150 5123 5146
!273 = fn_call_path_span !150 5129 5134
!274 = span !256 142 154
!275 = (!267 !268 !272 !273 !274)
!276 = (!267 !268 !272 !273)
!277 = (!267 !268 !272 !273)
!278 = span !256 365 389
!279 = fn_call_path_span !256 376 382
!280 = (!267 !268 !272 !273 !278 !279)
!281 = span !146 18398 18409
!282 = fn_call_path_span !146 18404 18407
!283 = (!267 !268 !272 !273 !278 !279 !281 !282)
!284 = span !146 18435 18436
!285 = span !146 18422 18436
!286 = fn_call_path_span !146 18432 18434
!287 = (!267 !268 !272 !273 !278 !279 !285 !286)
!288 = (!267 !268 !272 !273 !278 !279 !285)
!289 = (!267 !268 !272 !273 !278 !279 !244)
!290 = (!267 !268 !272 !273 !278 !279)
!291 = span !146 18572 18573
!292 = span !146 18560 18573
!293 = fn_call_path_span !146 18569 18571
!294 = (!267 !268 !272 !273 !278 !279 !292 !293)
!295 = (!267 !268 !272 !273 !278 !279 !292)
!296 = (!267 !268 !272 !273 !278 !279)
!297 = span !146 18588 18600
!298 = (!267 !268 !272 !273 !278 !279 !297)
!299 = span !146 18614 18620
!300 = (!267 !268 !272 !273 !278 !279 !299)
!301 = (!267 !268 !272 !273 !278 !279 !244)
!302 = (!267 !268 !272 !273 !278 !279)
!303 = span !146 18657 18677
!304 = fn_call_path_span !146 18666 18667
!305 = (!267 !268 !272 !273 !278 !279 !303 !304)
!306 = (!267 !268 !272 !273 !278 !279 !244)
!307 = (!267 !268 !272 !273 !278 !279)
!308 = (!267 !268 !272 !273 !278 !279 !190)
!309 = (!267 !268 !272 !273 !278 !279)
!310 = span !146 18808 18827
!311 = fn_call_path_span !146 18817 18825
!312 = (!267 !268 !272 !273 !278 !279 !310 !311)
!313 = span !146 18808 18838
!314 = fn_call_path_span !146 18828 18829
!315 = (!267 !268 !272 !273 !278 !279 !313 !314)
!316 = (!267 !268 !272 !273 !278 !279 !313)
!317 = (!267 !268 !272 !273 !278 !279 !190)
!318 = (!267 !268 !272 !273 !278 !279)
!319 = span !146 18928 18942
!320 = fn_call_path_span !146 18937 18940
!321 = (!267 !268 !272 !273 !278 !279 !319 !320)
!322 = (!267 !268 !272 !273 !278 !279 !190)
!323 = (!267 !268 !272 !273 !278 !279)
!324 = span !146 18944 18963
!325 = fn_call_path_span !146 18953 18961
!326 = (!267 !268 !272 !273 !278 !279 !324 !325)
!327 = span !146 18914 18974
!328 = fn_call_path_span !146 18914 18927
!329 = span !159 4168 4185
!330 = fn_call_path_span !159 4178 4179
!331 = (!267 !268 !272 !273 !278 !279 !327 !328 !329 !330)
!332 = (!267 !268 !272 !273 !278 !279 !327 !328 !329)
!333 = span !159 4210 4232
!334 = fn_call_path_span !159 4210 4221
!335 = (!267 !268 !272 !273 !278 !279 !327 !328 !333 !334 !160)
!336 = span !159 4253 4254
!337 = span !159 4245 4254
!338 = fn_call_path_span !159 4251 4252
!339 = (!267 !268 !272 !273 !278 !279 !327 !328 !337 !338)
!340 = (!267 !268 !272 !273 !278 !279 !327 !328 !337)
!341 = span !159 4269 4302
!342 = fn_call_path_span !159 4273 4286
!343 = (!267 !268 !272 !273 !278 !279 !327 !328 !341 !342 !199)
!344 = (!267 !268 !272 !273 !278 !279 !327 !328)
!345 = (!267 !268 !272 !273 !278 !279 !327 !328)
!346 = span !146 18869 19015
!347 = fn_call_path_span !146 18869 18890
!348 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!349 = span !348 2362 2393
!350 = (!267 !268 !272 !273 !278 !279 !346 !347 !349)
!351 = (!267 !268 !272 !273 !278 !279 !346 !347 !349)
!352 = (!267 !268 !272 !273 !278 !279 !346 !347 !349)
!353 = (!267 !268 !272 !273 !278 !279 !346 !347 !349)
!354 = (!267 !268 !272 !273 !278 !279 !346 !347 !349)
!355 = (!267 !268 !272 !273 !278 !279 !346 !347)
!356 = span !348 2351 2394
!357 = fn_call_path_span !348 2351 2361
!358 = span !348 1248 1294
!359 = (!267 !268 !272 !273 !278 !279 !346 !347 !356 !357 !358)
!360 = span !146 18853 19016
!361 = (!267 !268 !272 !273 !278 !279 !360)
!362 = (!267 !268 !272 !273 !278 !279 !360)
!363 = span !146 19055 19064
!364 = (!267 !268 !272 !273 !278 !279 !363)
!365 = (!267 !268 !272 !273 !278 !279)
!366 = span !146 19040 19065
!367 = fn_call_path_span !146 19040 19054
!368 = span !146 2130 2153
!369 = fn_call_path_span !146 2136 2151
!370 = span !348 3959 3975
!371 = fn_call_path_span !348 3959 3969
!372 = span !348 1624 1675
!373 = (!267 !268 !272 !273 !278 !279 !366 !367 !368 !369 !370 !371 !372)
!374 = (!267 !268 !272 !273 !278 !279 !366 !367 !368 !369)
!375 = (!267 !268 !272 !273 !278 !279 !366 !367 !368 !369)
!376 = span !348 3976 3977
!377 = (!267 !268 !272 !273 !278 !279 !366 !367 !368 !369 !376)
!378 = (!267 !268 !272 !273 !278 !279 !366 !367 !368 !369)
!379 = span !146 2173 2189
!380 = fn_call_path_span !146 2173 2184
!381 = (!267 !268 !272 !273 !278 !279 !366 !367 !379 !380 !160)
!382 = span !146 2208 2209
!383 = span !146 2202 2209
!384 = fn_call_path_span !146 2206 2207
!385 = (!267 !268 !272 !273 !278 !279 !366 !367 !383 !384)
!386 = (!267 !268 !272 !273 !278 !279 !366 !367 !383)
!387 = span !146 2224 2235
!388 = fn_call_path_span !146 2230 2233
!389 = span !348 2911 2927
!390 = fn_call_path_span !348 2911 2921
!391 = (!267 !268 !272 !273 !278 !279 !366 !367 !387 !388 !389 !390 !372)
!392 = (!267 !268 !272 !273 !278 !279 !366 !367 !387 !388)
!393 = (!267 !268 !272 !273 !278 !279 !366 !367 !387 !388)
!394 = span !348 2928 2929
!395 = (!267 !268 !272 !273 !278 !279 !366 !367 !387 !388 !394)
!396 = (!267 !268 !272 !273 !278 !279 !366 !367 !387 !388)
!397 = span !146 2224 2259
!398 = fn_call_path_span !146 2236 2243
!399 = span !198 3447 3522
!400 = (!267 !268 !272 !273 !278 !279 !366 !367 !397 !398 !399)
!401 = span !198 3496 3511
!402 = (!267 !268 !272 !273 !278 !279 !366 !367)
!403 = span !146 2279 2296
!404 = (!267 !268 !272 !273 !278 !279 !366 !367 !403)
!405 = (!267 !268 !272 !273 !278 !279 !366 !367)
!406 = (!267 !268 !272 !273 !278 !279 !366 !367 !403)
!407 = (!267 !268 !272 !273 !278 !279 !366 !367)
!408 = (!267 !268 !272 !273 !278 !279 !366 !367 !403)
!409 = (!267 !268 !272 !273 !278 !279 !366 !367)
!410 = span !146 19029 19065
!411 = (!267 !268 !272 !273 !278 !279 !410)
!412 = (!267 !268 !272 !273 !278 !279 !410)
!413 = (!267 !268 !272 !273 !278 !279)
!414 = (!267 !268 !272 !273 !278 !279 !190)
!415 = (!267 !268 !272 !273 !278 !279)
!416 = span !146 19100 19114
!417 = fn_call_path_span !146 19109 19112
!418 = (!267 !268 !272 !273 !278 !279 !416 !417)
!419 = span !146 19100 19143
!420 = fn_call_path_span !146 19115 19130
!421 = span !198 6721 6825
!422 = (!267 !268 !272 !273 !278 !279 !419 !420 !421)
!423 = span !198 6771 6789
!424 = (!267 !268 !272 !273 !278 !279)
!425 = span !146 19153 19164
!426 = fn_call_path_span !146 19159 19162
!427 = (!267 !268 !272 !273 !278 !279 !425 !426)
!428 = span !146 19153 19198
!429 = fn_call_path_span !146 19165 19178
!430 = (!267 !268 !272 !273 !278 !279 !428 !429 !199)
!431 = span !146 19244 19263
!432 = (!267 !268 !272 !273 !278 !279 !431)
!433 = (!267 !268 !272 !273 !278 !279 !431)
!434 = (!267 !268 !272 !273 !278 !279)
!435 = span !256 9121 9127
!436 = span !256 9121 9136
!437 = fn_call_path_span !256 9128 9134
!438 = span !256 440 476
!439 = (!436 !437 !438)
!440 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!441 = span !440 7904 7970
!442 = (!436 !437 !438)
!443 = span !256 508 521
!444 = (!436 !437 !443)
!445 = (!436 !437)
!446 = (!436 !437 !274)
!447 = span !256 540 556
!448 = fn_call_path_span !256 551 554
!449 = (!436 !437 !447 !448)
!450 = (!436 !437 !274)
!451 = span !256 577 593
!452 = fn_call_path_span !256 588 591
!453 = (!436 !437 !451 !452)
!454 = span !256 485 672
!455 = (!436 !437 !454)
!456 = span !256 619 638
!457 = span !256 177 263
!458 = fn_name_span !256 184 187
!459 = (!457 !458)
!460 = span !146 570 571
!461 = span !256 234 246
!462 = fn_call_path_span !256 234 244
!463 = span !146 3079 3094
!464 = fn_call_path_span !146 3079 3092
!465 = span !146 558 572
!466 = fn_call_path_span !146 558 569
!467 = (!461 !462 !463 !464 !465 !466 !160)
!468 = span !146 534 603
!469 = (!461 !462 !463 !464 !468)
!470 = (!461 !462 !463 !464)
!471 = (!461 !462 !463 !464 !468)
!472 = (!461 !462 !463 !464)
!473 = span !146 591 592
!474 = (!461 !462 !463 !464 !468)
!475 = (!461 !462 !463 !464)
!476 = span !146 3055 3125
!477 = (!461 !462 !476)
!478 = (!461 !462)
!479 = (!461 !462 !476)
!480 = span !146 3113 3114
!481 = (!461 !462 !476)
!482 = span !256 208 257
!483 = span !146 1097 1101
!484 = span !146 1081 1134
!485 = fn_name_span !146 1088 1096
!486 = (!484 !485)
!487 = span !146 418 426

// IR: [simplify-cfg] Simplify the control flow graph (CFG)
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr { [u8; 64] }, secp256k1, !52
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !54
        v34 = load v33, !35
        v35 = call address_7(v32, v34), !57
        v36 = get_local ptr { [u8; 64] }, secp256k1, !59
        v37 = load v36, !35
        v38 = get_local ptr { { { u64, u64 }, u64 } }, message, !61
        v39 = load v38, !35
        v40 = call address_7(v37, v39), !64
        v41 = const unit ()
        ret () v41
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = ptr_to_int message to u64, !111
        v24 = int_to_ptr v23 to ptr { { { u64, u64 }, u64 } }, !112
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr { { u64, u64 }, u64 }, v25, !113
        v27 = load v26, !114
        v28 = call ptr_21(v27), !117
        v29 = asm(bits: v28) -> b256 bits, !119 {
        }
        v30 = const u64 1
        v31 = const u64 1
        v32 = get_elem_ptr v19, ptr b256, v30, v31, !120
        store v29 to v32, !121
        v33 = load v19, !122
        br recover_8_block0(v33), !123

        recover_8_block0(v34: { u64, ( () | b256 ) }):
        v35 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        store v34 to v35, !128
        v36 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !130
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr u64, v37, !131
        v39 = load v38, !132
        v40 = const u64 1, !129
        v41 = cmp eq v39 v40, !135
        cbr v41, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !136

        recover_8_unwrap_14_block0():
        v42 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !137
        v43 = const u64 1
        v44 = const u64 1
        v45 = get_elem_ptr v42, ptr b256, v43, v44, !138
        v46 = load v45, !139
        v47 = get_local ptr b256, inner_value, !141
        store v46 to v47, !142
        v48 = get_local ptr b256, inner_value, !144
        v49 = load v48, !145
        v50 = const u64 32, !147
        v51 = asm(size: v50) -> u64 hp, !161 {
            aloc   size, !162
        }
        v52 = get_local ptr { u64, u64 }, __anon_00000, !164
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr u64, v53, !165
        store v51 to v54, !166
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !167
        store v50 to v56, !168
        v57 = load v52, !169
        v58 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !171
        v59 = const u64 0
        v60 = get_elem_ptr v58, ptr { u64, u64 }, v59, !172
        store v57 to v60, !173
        v61 = const u64 1
        v62 = get_elem_ptr v58, ptr u64, v61, !174
        v63 = const u64 0, !175
        store v63 to v62, !176
        v64 = load v58, !177
        v65 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        store v64 to v65, !180
        v66 = get_local ptr { { u64, u64 }, u64 }, bytes, !182
        v67 = const u64 1
        v68 = get_elem_ptr v66, ptr u64, v67, !183
        v69 = const u64 32, !184
        store v69 to v68, !185
        v70 = ptr_to_int v49 to u64, !187
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !189
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr { u64, u64 }, v72, !191
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr u64, v74, !193
        v76 = load v75, !194
        v77 = const u64 32, !195
        v78 = asm(dst: v76, src: v70, len: v77) -> (), !200 {
            mcp    dst src len, !201
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, bytes, !203
        v80 = load v79, !204
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !206
        v82 = const u64 0
        v83 = get_elem_ptr v81, ptr { { u64, u64 }, u64 }, v82, !207
        store v80 to v83, !208
        v84 = load v81, !209
        v85 = const u64 1
        v86 = const u64 0
        v87 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v85, v86, !210
        store v84 to v87, !211
        v88 = load v0, !212
        v89 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !213
        store v88 to v89, !213
        v90 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr u64, v91, !70
        v93 = load v92
        v94 = const u64 0, !70
        v95 = cmp eq v93 v94, !216
        cbr v95, block0(), block1(), !214

        recover_8_unwrap_14_block1():
        v96 = const u64 0, !217
        revert v96, !222

        block0():
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v98 = const u64 1
        v99 = const u64 0
        v100 = get_elem_ptr v97, ptr { { { u64, u64 }, u64 } }, v98, v99
        v101 = load v100
        v102 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !223
        store v101 to v102, !223
        v103 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v104 = const u64 0
        v105 = get_elem_ptr v103, ptr u64, v104, !73
        v106 = const u64 0, !73
        store v106 to v105, !73
        v107 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !224
        v108 = load v107
        v109 = call sha256_24(v108), !227
        v110 = get_local ptr { b256 }, __anon_02, !232
        v111 = const u64 0
        v112 = get_elem_ptr v110, ptr b256, v111, !233
        store v109 to v112, !234
        v113 = load v110, !233
        v114 = const u64 1
        v115 = const u64 0
        v116 = get_elem_ptr v103, ptr { b256 }, v114, v115, !73
        store v113 to v116, !73
        v117 = load v103
        br block5(v117)

        block1():
        v118 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !70
        v121 = load v120
        v122 = const u64 1, !70
        v123 = cmp eq v121 v122, !237
        cbr v123, block2(), block3(), !235

        block2():
        v124 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v125 = const u64 1
        v126 = const u64 1
        v127 = get_elem_ptr v124, ptr { u64 }, v125, v126
        v128 = load v127
        v129 = get_local ptr { u64 }, e, !238
        store v128 to v129, !238
        v130 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v131 = const u64 0
        v132 = get_elem_ptr v130, ptr u64, v131, !73
        v133 = const u64 1, !73
        store v133 to v132, !73
        v134 = get_local ptr { u64 }, e, !239
        v135 = load v134
        v136 = const u64 1
        v137 = const u64 1
        v138 = get_elem_ptr v130, ptr { u64 }, v136, v137, !73
        store v135 to v138, !73
        v139 = load v130
        br block5(v139)

        block3():
        v140 = const u64 14757395258967588866, !213
        revert v140, !213

        block5(v141: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v141
    }

    pub fn len_20(self !240: { { u64, u64 }, u64 }) -> u64, !243 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !244
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !245: { { u64, u64 }, u64 }) -> u64, !248 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !190
        v4 = load v3
        v5 = call ptr_22(v4), !251
        ret u64 v5
    }

    pub fn ptr_22(self !252: { u64, u64 }) -> u64, !255 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !192
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !257: { { { u64, u64 }, u64 } }) -> b256, !261 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !264
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !265
        store v0 to v1, !265
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !266
        v3 = ptr_to_int s to u64, !269
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !269
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !271
        v7 = load v6, !269
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !275
        v10 = ptr_to_int v7 to u64, !276
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !277
        v12 = load v11, !280
        v13 = call len_20(v12), !283
        v14 = const u64 0, !284
        v15 = cmp eq v13 v14, !287
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !288

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !289
        v18 = load v17, !290
        v19 = const u64 0, !291
        v20 = cmp eq v18 v19, !294
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !295

        hash_26_write_27_append_28_block3():
        v21 = load v11, !296
        store v21 to v9, !298
        br hash_26_write_27_block0(), !300

        hash_26_write_27_append_28_block4():
        v22 = const u64 1
        v23 = get_elem_ptr v9, ptr u64, v22, !301
        v24 = load v23, !302
        v25 = add v24, v13, !305
        v26 = const u64 1
        v27 = get_elem_ptr v9, ptr u64, v26, !306
        v28 = load v27, !307
        v29 = const u64 0
        v30 = get_elem_ptr v9, ptr { u64, u64 }, v29, !308
        v31 = load v30, !309
        v32 = call capacity_31(v31), !312
        v33 = cmp lt v32 v25, !315
        cbr v33, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !316

        hash_26_write_27_append_28_block6():
        v34 = const u64 0
        v35 = get_elem_ptr v9, ptr { u64, u64 }, v34, !317
        v36 = load v35, !318
        v37 = call ptr_22(v36), !321
        v38 = const u64 0
        v39 = get_elem_ptr v9, ptr { u64, u64 }, v38, !322
        v40 = load v39, !323
        v41 = call capacity_31(v40), !326
        v42 = cmp gt v25 v41, !331
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !332

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v25) -> u64 hp, !335 {
            aloc   size, !162
        }
        v44 = const u64 0, !336
        v45 = cmp gt v41 v44, !339
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !340

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v37, len: v41) -> (), !343 {
            mcp    dst src len, !201
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !344

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = get_local ptr { u64, u64 }, __anon_0, !349
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !350
        store v47 to v50, !351
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !352
        store v25 to v52, !353
        v53 = load v48, !354
        v54 = asm(ptr: v53) -> slice ptr, !358 {
        }
        v55 = get_local ptr slice, new_slice, !360
        store v54 to v55, !361
        v56 = get_local ptr slice, new_slice, !363
        v57 = load v56, !364
        v58 = asm(ptr: v57) -> { u64, u64 } ptr, !372 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_000, !373
        store v58 to v59, !374
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr u64, v60, !376
        v62 = load v61, !377
        v63 = asm(size: v62) -> u64 hp, !380 {
            aloc   size, !162
        }
        v64 = const u64 0, !381
        v65 = cmp gt v62 v64, !384
        cbr v65, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !385

        hash_26_write_27_append_28_from_37_block0():
        v66 = asm(ptr: v57) -> { u64, u64 } ptr, !390 {
        }
        v67 = get_local ptr { u64, u64 }, __anon_01, !391
        store v66 to v67, !392
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr u64, v68, !394
        v70 = load v69, !395
        v71 = asm(dst: v63, src: v70, len: v62) -> (), !399 {
            mcp    dst src len, !400
        }
        br hash_26_write_27_append_28_from_37_block2(), !401

        hash_26_write_27_append_28_from_37_block2():
        v72 = get_local ptr { u64, u64 }, __anon_00, !403
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !404
        store v63 to v74, !405
        v75 = const u64 1
        v76 = get_elem_ptr v72, ptr u64, v75, !406
        store v62 to v76, !407
        v77 = load v72, !408
        v78 = const u64 0
        v79 = get_elem_ptr v9, ptr { u64, u64 }, v78, !410
        store v77 to v79, !411
        br hash_26_write_27_append_28_block8(), !412

        hash_26_write_27_append_28_block8():
        v80 = const u64 0
        v81 = get_elem_ptr v9, ptr { u64, u64 }, v80, !413
        v82 = load v81, !414
        v83 = call ptr_22(v82), !417
        v84 = asm(ptr: v83, offset: v28, new) -> u64 new, !421 {
            add    new ptr offset, !422
        }
        v85 = load v11, !423
        v86 = call ptr_21(v85), !426
        v87 = asm(dst: v84, src: v86, len: v13) -> (), !429 {
            mcp    dst src len, !201
        }
        v88 = const u64 1
        v89 = get_elem_ptr v9, ptr u64, v88, !431
        store v25 to v89, !432
        br hash_26_write_27_block0(), !433

        hash_26_write_27_block0():
        v90 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !434
        v91 = load v90
        v92 = get_local ptr b256, result_buffer, !438
        v93 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !440
        store v93 to v92, !441
        v94 = get_local ptr b256, result_buffer, !443
        v95 = ptr_to_int v91 to u64, !444
        v96 = int_to_ptr v95 to ptr { { { u64, u64 }, u64 } }, !444
        v97 = const u64 0
        v98 = get_elem_ptr v96, ptr { { u64, u64 }, u64 }, v97, !445
        v99 = load v98, !444
        v100 = call ptr_21(v99), !448
        v101 = ptr_to_int v91 to u64, !444
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !444
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !449
        v105 = load v104, !444
        v106 = call len_20(v105), !452
        v107 = asm(hash: v94, ptr: v100, bytes: v106) -> b256 hash, !454 {
            s256   hash ptr bytes, !455
        }
        ret b256 v107
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !458 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !459
        v1 = asm(size: v0) -> u64 hp, !466 {
            aloc   size, !162
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !468
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !469
        store v1 to v4, !470
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !471
        v7 = const u64 0, !472
        store v7 to v6, !473
        v8 = load v2, !474
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !476
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !477
        store v8 to v11, !478
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !477
        v14 = const u64 0, !479
        store v14 to v13, !480
        v15 = load v9, !477
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !481
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !481
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !482: { u64, u64 }) -> u64, !485 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !486
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1108 1117
!52 = (!4 !5 !51)
!53 = span !6 1126 1133
!54 = (!4 !5 !53)
!55 = span !6 1108 1134
!56 = fn_call_path_span !6 1118 1125
!57 = (!4 !5 !55 !56)
!58 = span !6 1148 1157
!59 = (!4 !5 !58)
!60 = span !6 1166 1173
!61 = (!4 !5 !60)
!62 = span !6 1148 1174
!63 = fn_call_path_span !6 1158 1165
!64 = (!4 !5 !62 !63)
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = (!70 !71 !77 !78)
!113 = (!70 !71 !77 !78 !82)
!114 = (!70 !71 !77 !78)
!115 = span !81 1657 1673
!116 = fn_call_path_span !81 1668 1671
!117 = (!70 !71 !77 !78 !115 !116)
!118 = span !81 1647 1709
!119 = (!70 !71 !77 !78 !118)
!120 = (!70 !71 !77 !78 !101)
!121 = (!70 !71 !77 !78 !101)
!122 = (!70 !71 !77 !78)
!123 = (!70 !71 !77 !78)
!124 = span !6 451 478
!125 = fn_call_path_span !6 470 476
!126 = span !100 4973 5075
!127 = (!70 !71 !124 !125 !126)
!128 = (!70 !71 !124 !125 !126)
!129 = span !100 4979 4983
!130 = (!70 !71 !124 !125 !129)
!131 = (!70 !71 !124 !125 !129)
!132 = (!70 !71 !124 !125)
!133 = span !100 4998 5037
!134 = fn_call_path_span !100 4998 5037
!135 = (!70 !71 !124 !125 !133 !134)
!136 = (!70 !71 !124 !125 !133)
!137 = (!70 !71 !124 !125 !129)
!138 = (!70 !71 !124 !125)
!139 = (!70 !71 !124 !125)
!140 = span !100 5009 5020
!141 = (!70 !71 !124 !125 !140)
!142 = (!70 !71 !124 !125 !140)
!143 = span !100 5025 5036
!144 = (!70 !71 !124 !125 !143)
!145 = (!70 !71 !124 !125)
!146 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!147 = span !146 28953 28955
!148 = span !6 435 479
!149 = fn_call_path_span !6 435 450
!150 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!151 = span !150 3133 3150
!152 = fn_call_path_span !150 3133 3144
!153 = span !146 28933 28956
!154 = fn_call_path_span !146 28933 28952
!155 = span !146 4157 4190
!156 = fn_call_path_span !146 4157 4180
!157 = span !146 863 884
!158 = fn_call_path_span !146 863 874
!159 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!160 = span !159 3315 3378
!161 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !157 !158 !160)
!162 = span !159 3342 3351
!163 = span !146 839 922
!164 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!165 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!166 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!167 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!168 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156 !163)
!169 = (!70 !71 !148 !149 !151 !152 !153 !154 !155 !156)
!170 = span !146 4133 4221
!171 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!172 = (!70 !71 !148 !149 !151 !152 !153 !154)
!173 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!174 = (!70 !71 !148 !149 !151 !152 !153 !154)
!175 = span !146 4209 4210
!176 = (!70 !71 !148 !149 !151 !152 !153 !154 !170)
!177 = (!70 !71 !148 !149 !151 !152 !153 !154)
!178 = span !146 28917 28957
!179 = (!70 !71 !148 !149 !151 !152 !178)
!180 = (!70 !71 !148 !149 !151 !152 !178)
!181 = span !146 28966 28980
!182 = (!70 !71 !148 !149 !151 !152 !181)
!183 = (!70 !71 !148 !149 !151 !152 !181)
!184 = span !146 28978 28980
!185 = (!70 !71 !148 !149 !151 !152 !181)
!186 = span !146 29065 29077
!187 = (!70 !71 !148 !149 !151 !152 !186)
!188 = span !146 29092 29097
!189 = (!70 !71 !148 !149 !151 !152 !188)
!190 = span !146 2445 2458
!191 = (!70 !71 !148 !149 !151 !152 !190)
!192 = span !146 400 412
!193 = (!70 !71 !148 !149 !151 !152 !192)
!194 = (!70 !71 !148 !149 !151 !152)
!195 = span !146 29107 29109
!196 = span !146 29065 29110
!197 = fn_call_path_span !146 29078 29091
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!199 = span !198 5999 6076
!200 = (!70 !71 !148 !149 !151 !152 !196 !197 !199)
!201 = span !198 6050 6065
!202 = span !146 29121 29126
!203 = (!70 !71 !148 !149 !151 !152 !202)
!204 = (!70 !71 !148 !149 !151 !152)
!205 = span !150 3107 3161
!206 = (!70 !71 !148 !149 !205)
!207 = (!70 !71 !148 !149)
!208 = (!70 !71 !148 !149 !205)
!209 = (!70 !71 !148 !149)
!210 = (!70 !71 !73)
!211 = (!70 !71 !73)
!212 = (!70 !71)
!213 = span !6 576 708
!214 = span !6 618 668
!215 = fn_call_path_span !6 618 668
!216 = (!214 !215)
!217 = span !100 5062 5063
!218 = span !100 5055 5064
!219 = fn_call_path_span !100 5055 5061
!220 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!221 = span !220 757 771
!222 = (!70 !71 !124 !125 !218 !219 !221)
!223 = span !6 621 628
!224 = span !6 657 664
!225 = span !6 650 665
!226 = fn_call_path_span !6 650 656
!227 = (!225 !226)
!228 = span !6 636 666
!229 = fn_call_path_span !6 636 649
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!231 = span !230 2370 2383
!232 = (!228 !229 !231)
!233 = (!228 !229)
!234 = (!228 !229 !231)
!235 = span !6 681 698
!236 = fn_call_path_span !6 681 698
!237 = (!235 !236)
!238 = span !6 685 686
!239 = span !6 695 696
!240 = span !146 13782 13786
!241 = span !146 13771 13819
!242 = fn_name_span !146 13778 13781
!243 = (!241 !242)
!244 = span !146 2506 2514
!245 = span !146 15186 15190
!246 = span !146 15175 15233
!247 = fn_name_span !146 15182 15185
!248 = (!246 !247)
!249 = span !146 15213 15227
!250 = fn_call_path_span !146 15222 15225
!251 = (!249 !250)
!252 = span !146 989 993
!253 = span !146 978 1030
!254 = fn_name_span !146 985 988
!255 = (!253 !254)
!256 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!257 = span !256 9026 9027
!258 = span !256 9009 9138
!259 = fn_name_span !256 9016 9022
!260 = inline "never"
!261 = (!258 !259 !260)
!262 = span !256 9082 9095
!263 = fn_call_path_span !256 9082 9093
!264 = (!262 !263)
!265 = span !256 9065 9096
!266 = span !256 9108 9114
!267 = span !256 9101 9115
!268 = fn_call_path_span !256 9103 9107
!269 = (!267 !268)
!270 = span !150 524 536
!271 = (!267 !268 !270)
!272 = span !150 5123 5146
!273 = fn_call_path_span !150 5129 5134
!274 = span !256 142 154
!275 = (!267 !268 !272 !273 !274)
!276 = (!267 !268 !272 !273)
!277 = (!267 !268 !272 !273)
!278 = span !256 365 389
!279 = fn_call_path_span !256 376 382
!280 = (!267 !268 !272 !273 !278 !279)
!281 = span !146 18398 18409
!282 = fn_call_path_span !146 18404 18407
!283 = (!267 !268 !272 !273 !278 !279 !281 !282)
!284 = span !146 18435 18436
!285 = span !146 18422 18436
!286 = fn_call_path_span !146 18432 18434
!287 = (!267 !268 !272 !273 !278 !279 !285 !286)
!288 = (!267 !268 !272 !273 !278 !279 !285)
!289 = (!267 !268 !272 !273 !278 !279 !244)
!290 = (!267 !268 !272 !273 !278 !279)
!291 = span !146 18572 18573
!292 = span !146 18560 18573
!293 = fn_call_path_span !146 18569 18571
!294 = (!267 !268 !272 !273 !278 !279 !292 !293)
!295 = (!267 !268 !272 !273 !278 !279 !292)
!296 = (!267 !268 !272 !273 !278 !279)
!297 = span !146 18588 18600
!298 = (!267 !268 !272 !273 !278 !279 !297)
!299 = span !146 18614 18620
!300 = (!267 !268 !272 !273 !278 !279 !299)
!301 = (!267 !268 !272 !273 !278 !279 !244)
!302 = (!267 !268 !272 !273 !278 !279)
!303 = span !146 18657 18677
!304 = fn_call_path_span !146 18666 18667
!305 = (!267 !268 !272 !273 !278 !279 !303 !304)
!306 = (!267 !268 !272 !273 !278 !279 !244)
!307 = (!267 !268 !272 !273 !278 !279)
!308 = (!267 !268 !272 !273 !278 !279 !190)
!309 = (!267 !268 !272 !273 !278 !279)
!310 = span !146 18808 18827
!311 = fn_call_path_span !146 18817 18825
!312 = (!267 !268 !272 !273 !278 !279 !310 !311)
!313 = span !146 18808 18838
!314 = fn_call_path_span !146 18828 18829
!315 = (!267 !268 !272 !273 !278 !279 !313 !314)
!316 = (!267 !268 !272 !273 !278 !279 !313)
!317 = (!267 !268 !272 !273 !278 !279 !190)
!318 = (!267 !268 !272 !273 !278 !279)
!319 = span !146 18928 18942
!320 = fn_call_path_span !146 18937 18940
!321 = (!267 !268 !272 !273 !278 !279 !319 !320)
!322 = (!267 !268 !272 !273 !278 !279 !190)
!323 = (!267 !268 !272 !273 !278 !279)
!324 = span !146 18944 18963
!325 = fn_call_path_span !146 18953 18961
!326 = (!267 !268 !272 !273 !278 !279 !324 !325)
!327 = span !146 18914 18974
!328 = fn_call_path_span !146 18914 18927
!329 = span !159 4168 4185
!330 = fn_call_path_span !159 4178 4179
!331 = (!267 !268 !272 !273 !278 !279 !327 !328 !329 !330)
!332 = (!267 !268 !272 !273 !278 !279 !327 !328 !329)
!333 = span !159 4210 4232
!334 = fn_call_path_span !159 4210 4221
!335 = (!267 !268 !272 !273 !278 !279 !327 !328 !333 !334 !160)
!336 = span !159 4253 4254
!337 = span !159 4245 4254
!338 = fn_call_path_span !159 4251 4252
!339 = (!267 !268 !272 !273 !278 !279 !327 !328 !337 !338)
!340 = (!267 !268 !272 !273 !278 !279 !327 !328 !337)
!341 = span !159 4269 4302
!342 = fn_call_path_span !159 4273 4286
!343 = (!267 !268 !272 !273 !278 !279 !327 !328 !341 !342 !199)
!344 = (!267 !268 !272 !273 !278 !279 !327 !328)
!345 = span !146 18869 19015
!346 = fn_call_path_span !146 18869 18890
!347 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!348 = span !347 2362 2393
!349 = (!267 !268 !272 !273 !278 !279 !345 !346 !348)
!350 = (!267 !268 !272 !273 !278 !279 !345 !346 !348)
!351 = (!267 !268 !272 !273 !278 !279 !345 !346 !348)
!352 = (!267 !268 !272 !273 !278 !279 !345 !346 !348)
!353 = (!267 !268 !272 !273 !278 !279 !345 !346 !348)
!354 = (!267 !268 !272 !273 !278 !279 !345 !346)
!355 = span !347 2351 2394
!356 = fn_call_path_span !347 2351 2361
!357 = span !347 1248 1294
!358 = (!267 !268 !272 !273 !278 !279 !345 !346 !355 !356 !357)
!359 = span !146 18853 19016
!360 = (!267 !268 !272 !273 !278 !279 !359)
!361 = (!267 !268 !272 !273 !278 !279 !359)
!362 = span !146 19055 19064
!363 = (!267 !268 !272 !273 !278 !279 !362)
!364 = (!267 !268 !272 !273 !278 !279)
!365 = span !146 19040 19065
!366 = fn_call_path_span !146 19040 19054
!367 = span !146 2130 2153
!368 = fn_call_path_span !146 2136 2151
!369 = span !347 3959 3975
!370 = fn_call_path_span !347 3959 3969
!371 = span !347 1624 1675
!372 = (!267 !268 !272 !273 !278 !279 !365 !366 !367 !368 !369 !370 !371)
!373 = (!267 !268 !272 !273 !278 !279 !365 !366 !367 !368)
!374 = (!267 !268 !272 !273 !278 !279 !365 !366 !367 !368)
!375 = span !347 3976 3977
!376 = (!267 !268 !272 !273 !278 !279 !365 !366 !367 !368 !375)
!377 = (!267 !268 !272 !273 !278 !279 !365 !366 !367 !368)
!378 = span !146 2173 2189
!379 = fn_call_path_span !146 2173 2184
!380 = (!267 !268 !272 !273 !278 !279 !365 !366 !378 !379 !160)
!381 = span !146 2208 2209
!382 = span !146 2202 2209
!383 = fn_call_path_span !146 2206 2207
!384 = (!267 !268 !272 !273 !278 !279 !365 !366 !382 !383)
!385 = (!267 !268 !272 !273 !278 !279 !365 !366 !382)
!386 = span !146 2224 2235
!387 = fn_call_path_span !146 2230 2233
!388 = span !347 2911 2927
!389 = fn_call_path_span !347 2911 2921
!390 = (!267 !268 !272 !273 !278 !279 !365 !366 !386 !387 !388 !389 !371)
!391 = (!267 !268 !272 !273 !278 !279 !365 !366 !386 !387)
!392 = (!267 !268 !272 !273 !278 !279 !365 !366 !386 !387)
!393 = span !347 2928 2929
!394 = (!267 !268 !272 !273 !278 !279 !365 !366 !386 !387 !393)
!395 = (!267 !268 !272 !273 !278 !279 !365 !366 !386 !387)
!396 = span !146 2224 2259
!397 = fn_call_path_span !146 2236 2243
!398 = span !198 3447 3522
!399 = (!267 !268 !272 !273 !278 !279 !365 !366 !396 !397 !398)
!400 = span !198 3496 3511
!401 = (!267 !268 !272 !273 !278 !279 !365 !366)
!402 = span !146 2279 2296
!403 = (!267 !268 !272 !273 !278 !279 !365 !366 !402)
!404 = (!267 !268 !272 !273 !278 !279 !365 !366)
!405 = (!267 !268 !272 !273 !278 !279 !365 !366 !402)
!406 = (!267 !268 !272 !273 !278 !279 !365 !366)
!407 = (!267 !268 !272 !273 !278 !279 !365 !366 !402)
!408 = (!267 !268 !272 !273 !278 !279 !365 !366)
!409 = span !146 19029 19065
!410 = (!267 !268 !272 !273 !278 !279 !409)
!411 = (!267 !268 !272 !273 !278 !279 !409)
!412 = (!267 !268 !272 !273 !278 !279)
!413 = (!267 !268 !272 !273 !278 !279 !190)
!414 = (!267 !268 !272 !273 !278 !279)
!415 = span !146 19100 19114
!416 = fn_call_path_span !146 19109 19112
!417 = (!267 !268 !272 !273 !278 !279 !415 !416)
!418 = span !146 19100 19143
!419 = fn_call_path_span !146 19115 19130
!420 = span !198 6721 6825
!421 = (!267 !268 !272 !273 !278 !279 !418 !419 !420)
!422 = span !198 6771 6789
!423 = (!267 !268 !272 !273 !278 !279)
!424 = span !146 19153 19164
!425 = fn_call_path_span !146 19159 19162
!426 = (!267 !268 !272 !273 !278 !279 !424 !425)
!427 = span !146 19153 19198
!428 = fn_call_path_span !146 19165 19178
!429 = (!267 !268 !272 !273 !278 !279 !427 !428 !199)
!430 = span !146 19244 19263
!431 = (!267 !268 !272 !273 !278 !279 !430)
!432 = (!267 !268 !272 !273 !278 !279 !430)
!433 = (!267 !268 !272 !273 !278 !279)
!434 = span !256 9121 9127
!435 = span !256 9121 9136
!436 = fn_call_path_span !256 9128 9134
!437 = span !256 440 476
!438 = (!435 !436 !437)
!439 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!440 = span !439 7904 7970
!441 = (!435 !436 !437)
!442 = span !256 508 521
!443 = (!435 !436 !442)
!444 = (!435 !436)
!445 = (!435 !436 !274)
!446 = span !256 540 556
!447 = fn_call_path_span !256 551 554
!448 = (!435 !436 !446 !447)
!449 = (!435 !436 !274)
!450 = span !256 577 593
!451 = fn_call_path_span !256 588 591
!452 = (!435 !436 !450 !451)
!453 = span !256 485 672
!454 = (!435 !436 !453)
!455 = span !256 619 638
!456 = span !256 177 263
!457 = fn_name_span !256 184 187
!458 = (!456 !457)
!459 = span !146 570 571
!460 = span !256 234 246
!461 = fn_call_path_span !256 234 244
!462 = span !146 3079 3094
!463 = fn_call_path_span !146 3079 3092
!464 = span !146 558 572
!465 = fn_call_path_span !146 558 569
!466 = (!460 !461 !462 !463 !464 !465 !160)
!467 = span !146 534 603
!468 = (!460 !461 !462 !463 !467)
!469 = (!460 !461 !462 !463)
!470 = (!460 !461 !462 !463 !467)
!471 = (!460 !461 !462 !463)
!472 = span !146 591 592
!473 = (!460 !461 !462 !463 !467)
!474 = (!460 !461 !462 !463)
!475 = span !146 3055 3125
!476 = (!460 !461 !475)
!477 = (!460 !461)
!478 = (!460 !461 !475)
!479 = span !146 3113 3114
!480 = (!460 !461 !475)
!481 = span !256 208 257
!482 = span !146 1097 1101
!483 = span !146 1081 1134
!484 = fn_name_span !146 1088 1096
!485 = (!483 !484)
!486 = span !146 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr { [u8; 64] }, secp256k1, !52
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !54
        v34 = load v33, !35
        v35 = call address_7(v32, v34), !57
        v36 = get_local ptr { [u8; 64] }, secp256k1, !59
        v37 = load v36, !35
        v38 = get_local ptr { { { u64, u64 }, u64 } }, message, !61
        v39 = load v38, !35
        v40 = call address_7(v37, v39), !64
        v41 = const unit ()
        ret () v41
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = load v7, !111
        v24 = call ptr_21(v23), !114
        v25 = asm(bits: v24) -> b256 bits, !116 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v19, ptr b256, v26, v27, !117
        store v25 to v28, !118
        v29 = load v19, !119
        br recover_8_block0(v29), !120

        recover_8_block0(v30: { u64, ( () | b256 ) }):
        v31 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !124
        store v30 to v31, !125
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !128
        v35 = load v34, !129
        v36 = const u64 1, !126
        v37 = cmp eq v35 v36, !132
        cbr v37, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !133

        recover_8_unwrap_14_block0():
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !134
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v38, ptr b256, v39, v40, !135
        v42 = load v41, !136
        v43 = get_local ptr b256, inner_value, !138
        store v42 to v43, !139
        v44 = get_local ptr b256, inner_value, !141
        v45 = load v44, !142
        v46 = const u64 32, !144
        v47 = asm(size: v46) -> u64 hp, !158 {
            aloc   size, !159
        }
        v48 = get_local ptr { u64, u64 }, __anon_00000, !161
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !162
        store v47 to v50, !163
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !164
        store v46 to v52, !165
        v53 = load v48, !166
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !168
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !169
        store v53 to v56, !170
        v57 = const u64 1
        v58 = get_elem_ptr v54, ptr u64, v57, !171
        v59 = const u64 0, !172
        store v59 to v58, !173
        v60 = load v54, !174
        v61 = get_local ptr { { u64, u64 }, u64 }, bytes, !176
        store v60 to v61, !177
        v62 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !180
        v65 = const u64 32, !181
        store v65 to v64, !182
        v66 = ptr_to_int v45 to u64, !184
        v67 = get_local ptr { { u64, u64 }, u64 }, bytes, !186
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u64, u64 }, v68, !188
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !190
        v72 = load v71, !191
        v73 = const u64 32, !192
        v74 = asm(dst: v72, src: v66, len: v73) -> (), !197 {
            mcp    dst src len, !198
        }
        v75 = get_local ptr { { u64, u64 }, u64 }, bytes, !200
        v76 = load v75, !201
        v77 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !203
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr { { u64, u64 }, u64 }, v78, !204
        store v76 to v79, !205
        v80 = load v77, !206
        v81 = const u64 1
        v82 = const u64 0
        v83 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v81, v82, !207
        store v80 to v83, !208
        v84 = load v0, !209
        v85 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !210
        store v84 to v85, !210
        v86 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !70
        v89 = load v88
        v90 = const u64 0, !70
        v91 = cmp eq v89 v90, !213
        cbr v91, block0(), block1(), !211

        recover_8_unwrap_14_block1():
        v92 = const u64 0, !214
        revert v92, !219

        block0():
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v94 = const u64 1
        v95 = const u64 0
        v96 = get_elem_ptr v93, ptr { { { u64, u64 }, u64 } }, v94, v95
        v97 = load v96
        v98 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !220
        store v97 to v98, !220
        v99 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !73
        v102 = const u64 0, !73
        store v102 to v101, !73
        v103 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !221
        v104 = load v103
        v105 = call sha256_24(v104), !224
        v106 = get_local ptr { b256 }, __anon_02, !229
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr b256, v107, !230
        store v105 to v108, !231
        v109 = load v106, !230
        v110 = const u64 1
        v111 = const u64 0
        v112 = get_elem_ptr v99, ptr { b256 }, v110, v111, !73
        store v109 to v112, !73
        v113 = load v99
        br block5(v113)

        block1():
        v114 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr u64, v115, !70
        v117 = load v116
        v118 = const u64 1, !70
        v119 = cmp eq v117 v118, !234
        cbr v119, block2(), block3(), !232

        block2():
        v120 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v121 = const u64 1
        v122 = const u64 1
        v123 = get_elem_ptr v120, ptr { u64 }, v121, v122
        v124 = load v123
        v125 = get_local ptr { u64 }, e, !235
        store v124 to v125, !235
        v126 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !73
        v129 = const u64 1, !73
        store v129 to v128, !73
        v130 = get_local ptr { u64 }, e, !236
        v131 = load v130
        v132 = const u64 1
        v133 = const u64 1
        v134 = get_elem_ptr v126, ptr { u64 }, v132, v133, !73
        store v131 to v134, !73
        v135 = load v126
        br block5(v135)

        block3():
        v136 = const u64 14757395258967588866, !210
        revert v136, !210

        block5(v137: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v137
    }

    pub fn len_20(self !237: { { u64, u64 }, u64 }) -> u64, !240 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !242: { { u64, u64 }, u64 }) -> u64, !245 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !187
        v4 = load v3
        v5 = call ptr_22(v4), !248
        ret u64 v5
    }

    pub fn ptr_22(self !249: { u64, u64 }) -> u64, !252 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !189
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !254: { { { u64, u64 }, u64 } }) -> b256, !258 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !261
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !262
        store v0 to v1, !262
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !263
        v3 = ptr_to_int s to u64, !266
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !266
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !268
        v7 = load v6, !266
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !272
        v10 = ptr_to_int v7 to u64, !273
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !274
        v12 = load v11, !277
        v13 = call len_20(v12), !280
        v14 = const u64 0, !281
        v15 = cmp eq v13 v14, !284
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !285

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !286
        v18 = load v17, !287
        v19 = const u64 0, !288
        v20 = cmp eq v18 v19, !291
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !292

        hash_26_write_27_append_28_block3():
        v21 = load v11, !293
        store v21 to v9, !295
        br hash_26_write_27_block0(), !297

        hash_26_write_27_append_28_block4():
        v22 = load v17, !298
        v23 = add v22, v13, !301
        v24 = load v17, !302
        v25 = const u64 0
        v26 = get_elem_ptr v9, ptr { u64, u64 }, v25, !303
        v27 = load v26, !304
        v28 = call capacity_31(v27), !307
        v29 = cmp lt v28 v23, !310
        cbr v29, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !311

        hash_26_write_27_append_28_block6():
        v30 = load v26, !312
        v31 = call ptr_22(v30), !315
        v32 = load v26, !316
        v33 = call capacity_31(v32), !319
        v34 = cmp gt v23 v33, !324
        cbr v34, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v31), !325

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v35 = asm(size: v23) -> u64 hp, !328 {
            aloc   size, !159
        }
        v36 = const u64 0, !329
        v37 = cmp gt v33 v36, !332
        cbr v37, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !333

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v38 = asm(dst: v35, src: v31, len: v33) -> (), !336 {
            mcp    dst src len, !198
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !337

        hash_26_write_27_append_28_realloc_bytes_35_block5(v39: u64):
        v40 = get_local ptr { u64, u64 }, __anon_0, !342
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !343
        store v39 to v42, !344
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !345
        store v23 to v44, !346
        v45 = load v40, !347
        v46 = asm(ptr: v45) -> slice ptr, !351 {
        }
        v47 = get_local ptr slice, new_slice, !353
        store v46 to v47, !354
        v48 = get_local ptr slice, new_slice, !356
        v49 = load v48, !357
        v50 = asm(ptr: v49) -> { u64, u64 } ptr, !365 {
        }
        v51 = get_local ptr { u64, u64 }, __anon_000, !366
        store v50 to v51, !367
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr u64, v52, !369
        v54 = load v53, !370
        v55 = asm(size: v54) -> u64 hp, !373 {
            aloc   size, !159
        }
        v56 = const u64 0, !374
        v57 = cmp gt v54 v56, !377
        cbr v57, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !378

        hash_26_write_27_append_28_from_37_block0():
        v58 = asm(ptr: v49) -> { u64, u64 } ptr, !383 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_01, !384
        store v58 to v59, !385
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !387
        v62 = load v61, !388
        v63 = asm(dst: v55, src: v62, len: v54) -> (), !392 {
            mcp    dst src len, !393
        }
        br hash_26_write_27_append_28_from_37_block2(), !394

        hash_26_write_27_append_28_from_37_block2():
        v64 = get_local ptr { u64, u64 }, __anon_00, !396
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !397
        store v55 to v66, !398
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67, !399
        store v54 to v68, !400
        v69 = load v64, !401
        store v69 to v26, !403
        br hash_26_write_27_append_28_block8(), !404

        hash_26_write_27_append_28_block8():
        v70 = load v26, !405
        v71 = call ptr_22(v70), !408
        v72 = asm(ptr: v71, offset: v24, new) -> u64 new, !412 {
            add    new ptr offset, !413
        }
        v73 = load v11, !414
        v74 = call ptr_21(v73), !417
        v75 = asm(dst: v72, src: v74, len: v13) -> (), !420 {
            mcp    dst src len, !198
        }
        store v23 to v17, !422
        br hash_26_write_27_block0(), !423

        hash_26_write_27_block0():
        v76 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !424
        v77 = load v76
        v78 = get_local ptr b256, result_buffer, !428
        v79 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000, !430
        store v79 to v78, !431
        v80 = get_local ptr b256, result_buffer, !433
        v81 = ptr_to_int v77 to u64, !434
        v82 = int_to_ptr v81 to ptr { { { u64, u64 }, u64 } }, !434
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr { { u64, u64 }, u64 }, v83, !435
        v85 = load v84, !434
        v86 = call ptr_21(v85), !438
        v87 = load v84, !434
        v88 = call len_20(v87), !441
        v89 = asm(hash: v80, ptr: v86, bytes: v88) -> b256 hash, !443 {
            s256   hash ptr bytes, !444
        }
        ret b256 v89
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !447 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !448
        v1 = asm(size: v0) -> u64 hp, !455 {
            aloc   size, !159
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !457
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !458
        store v1 to v4, !459
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !460
        v7 = const u64 0, !461
        store v7 to v6, !462
        v8 = load v2, !463
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !465
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !466
        store v8 to v11, !467
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !466
        v14 = const u64 0, !468
        store v14 to v13, !469
        v15 = load v9, !466
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !470
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !470
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !471: { u64, u64 }) -> u64, !474 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !475
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1108 1117
!52 = (!4 !5 !51)
!53 = span !6 1126 1133
!54 = (!4 !5 !53)
!55 = span !6 1108 1134
!56 = fn_call_path_span !6 1118 1125
!57 = (!4 !5 !55 !56)
!58 = span !6 1148 1157
!59 = (!4 !5 !58)
!60 = span !6 1166 1173
!61 = (!4 !5 !60)
!62 = span !6 1148 1174
!63 = fn_call_path_span !6 1158 1165
!64 = (!4 !5 !62 !63)
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = span !81 1657 1673
!113 = fn_call_path_span !81 1668 1671
!114 = (!70 !71 !77 !78 !112 !113)
!115 = span !81 1647 1709
!116 = (!70 !71 !77 !78 !115)
!117 = (!70 !71 !77 !78 !101)
!118 = (!70 !71 !77 !78 !101)
!119 = (!70 !71 !77 !78)
!120 = (!70 !71 !77 !78)
!121 = span !6 451 478
!122 = fn_call_path_span !6 470 476
!123 = span !100 4973 5075
!124 = (!70 !71 !121 !122 !123)
!125 = (!70 !71 !121 !122 !123)
!126 = span !100 4979 4983
!127 = (!70 !71 !121 !122 !126)
!128 = (!70 !71 !121 !122 !126)
!129 = (!70 !71 !121 !122)
!130 = span !100 4998 5037
!131 = fn_call_path_span !100 4998 5037
!132 = (!70 !71 !121 !122 !130 !131)
!133 = (!70 !71 !121 !122 !130)
!134 = (!70 !71 !121 !122 !126)
!135 = (!70 !71 !121 !122)
!136 = (!70 !71 !121 !122)
!137 = span !100 5009 5020
!138 = (!70 !71 !121 !122 !137)
!139 = (!70 !71 !121 !122 !137)
!140 = span !100 5025 5036
!141 = (!70 !71 !121 !122 !140)
!142 = (!70 !71 !121 !122)
!143 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!144 = span !143 28953 28955
!145 = span !6 435 479
!146 = fn_call_path_span !6 435 450
!147 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!148 = span !147 3133 3150
!149 = fn_call_path_span !147 3133 3144
!150 = span !143 28933 28956
!151 = fn_call_path_span !143 28933 28952
!152 = span !143 4157 4190
!153 = fn_call_path_span !143 4157 4180
!154 = span !143 863 884
!155 = fn_call_path_span !143 863 874
!156 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!157 = span !156 3315 3378
!158 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !154 !155 !157)
!159 = span !156 3342 3351
!160 = span !143 839 922
!161 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!162 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!163 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!164 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!165 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!166 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!167 = span !143 4133 4221
!168 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!169 = (!70 !71 !145 !146 !148 !149 !150 !151)
!170 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!171 = (!70 !71 !145 !146 !148 !149 !150 !151)
!172 = span !143 4209 4210
!173 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!174 = (!70 !71 !145 !146 !148 !149 !150 !151)
!175 = span !143 28917 28957
!176 = (!70 !71 !145 !146 !148 !149 !175)
!177 = (!70 !71 !145 !146 !148 !149 !175)
!178 = span !143 28966 28980
!179 = (!70 !71 !145 !146 !148 !149 !178)
!180 = (!70 !71 !145 !146 !148 !149 !178)
!181 = span !143 28978 28980
!182 = (!70 !71 !145 !146 !148 !149 !178)
!183 = span !143 29065 29077
!184 = (!70 !71 !145 !146 !148 !149 !183)
!185 = span !143 29092 29097
!186 = (!70 !71 !145 !146 !148 !149 !185)
!187 = span !143 2445 2458
!188 = (!70 !71 !145 !146 !148 !149 !187)
!189 = span !143 400 412
!190 = (!70 !71 !145 !146 !148 !149 !189)
!191 = (!70 !71 !145 !146 !148 !149)
!192 = span !143 29107 29109
!193 = span !143 29065 29110
!194 = fn_call_path_span !143 29078 29091
!195 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!196 = span !195 5999 6076
!197 = (!70 !71 !145 !146 !148 !149 !193 !194 !196)
!198 = span !195 6050 6065
!199 = span !143 29121 29126
!200 = (!70 !71 !145 !146 !148 !149 !199)
!201 = (!70 !71 !145 !146 !148 !149)
!202 = span !147 3107 3161
!203 = (!70 !71 !145 !146 !202)
!204 = (!70 !71 !145 !146)
!205 = (!70 !71 !145 !146 !202)
!206 = (!70 !71 !145 !146)
!207 = (!70 !71 !73)
!208 = (!70 !71 !73)
!209 = (!70 !71)
!210 = span !6 576 708
!211 = span !6 618 668
!212 = fn_call_path_span !6 618 668
!213 = (!211 !212)
!214 = span !100 5062 5063
!215 = span !100 5055 5064
!216 = fn_call_path_span !100 5055 5061
!217 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!218 = span !217 757 771
!219 = (!70 !71 !121 !122 !215 !216 !218)
!220 = span !6 621 628
!221 = span !6 657 664
!222 = span !6 650 665
!223 = fn_call_path_span !6 650 656
!224 = (!222 !223)
!225 = span !6 636 666
!226 = fn_call_path_span !6 636 649
!227 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!228 = span !227 2370 2383
!229 = (!225 !226 !228)
!230 = (!225 !226)
!231 = (!225 !226 !228)
!232 = span !6 681 698
!233 = fn_call_path_span !6 681 698
!234 = (!232 !233)
!235 = span !6 685 686
!236 = span !6 695 696
!237 = span !143 13782 13786
!238 = span !143 13771 13819
!239 = fn_name_span !143 13778 13781
!240 = (!238 !239)
!241 = span !143 2506 2514
!242 = span !143 15186 15190
!243 = span !143 15175 15233
!244 = fn_name_span !143 15182 15185
!245 = (!243 !244)
!246 = span !143 15213 15227
!247 = fn_call_path_span !143 15222 15225
!248 = (!246 !247)
!249 = span !143 989 993
!250 = span !143 978 1030
!251 = fn_name_span !143 985 988
!252 = (!250 !251)
!253 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!254 = span !253 9026 9027
!255 = span !253 9009 9138
!256 = fn_name_span !253 9016 9022
!257 = inline "never"
!258 = (!255 !256 !257)
!259 = span !253 9082 9095
!260 = fn_call_path_span !253 9082 9093
!261 = (!259 !260)
!262 = span !253 9065 9096
!263 = span !253 9108 9114
!264 = span !253 9101 9115
!265 = fn_call_path_span !253 9103 9107
!266 = (!264 !265)
!267 = span !147 524 536
!268 = (!264 !265 !267)
!269 = span !147 5123 5146
!270 = fn_call_path_span !147 5129 5134
!271 = span !253 142 154
!272 = (!264 !265 !269 !270 !271)
!273 = (!264 !265 !269 !270)
!274 = (!264 !265 !269 !270)
!275 = span !253 365 389
!276 = fn_call_path_span !253 376 382
!277 = (!264 !265 !269 !270 !275 !276)
!278 = span !143 18398 18409
!279 = fn_call_path_span !143 18404 18407
!280 = (!264 !265 !269 !270 !275 !276 !278 !279)
!281 = span !143 18435 18436
!282 = span !143 18422 18436
!283 = fn_call_path_span !143 18432 18434
!284 = (!264 !265 !269 !270 !275 !276 !282 !283)
!285 = (!264 !265 !269 !270 !275 !276 !282)
!286 = (!264 !265 !269 !270 !275 !276 !241)
!287 = (!264 !265 !269 !270 !275 !276)
!288 = span !143 18572 18573
!289 = span !143 18560 18573
!290 = fn_call_path_span !143 18569 18571
!291 = (!264 !265 !269 !270 !275 !276 !289 !290)
!292 = (!264 !265 !269 !270 !275 !276 !289)
!293 = (!264 !265 !269 !270 !275 !276)
!294 = span !143 18588 18600
!295 = (!264 !265 !269 !270 !275 !276 !294)
!296 = span !143 18614 18620
!297 = (!264 !265 !269 !270 !275 !276 !296)
!298 = (!264 !265 !269 !270 !275 !276)
!299 = span !143 18657 18677
!300 = fn_call_path_span !143 18666 18667
!301 = (!264 !265 !269 !270 !275 !276 !299 !300)
!302 = (!264 !265 !269 !270 !275 !276)
!303 = (!264 !265 !269 !270 !275 !276 !187)
!304 = (!264 !265 !269 !270 !275 !276)
!305 = span !143 18808 18827
!306 = fn_call_path_span !143 18817 18825
!307 = (!264 !265 !269 !270 !275 !276 !305 !306)
!308 = span !143 18808 18838
!309 = fn_call_path_span !143 18828 18829
!310 = (!264 !265 !269 !270 !275 !276 !308 !309)
!311 = (!264 !265 !269 !270 !275 !276 !308)
!312 = (!264 !265 !269 !270 !275 !276)
!313 = span !143 18928 18942
!314 = fn_call_path_span !143 18937 18940
!315 = (!264 !265 !269 !270 !275 !276 !313 !314)
!316 = (!264 !265 !269 !270 !275 !276)
!317 = span !143 18944 18963
!318 = fn_call_path_span !143 18953 18961
!319 = (!264 !265 !269 !270 !275 !276 !317 !318)
!320 = span !143 18914 18974
!321 = fn_call_path_span !143 18914 18927
!322 = span !156 4168 4185
!323 = fn_call_path_span !156 4178 4179
!324 = (!264 !265 !269 !270 !275 !276 !320 !321 !322 !323)
!325 = (!264 !265 !269 !270 !275 !276 !320 !321 !322)
!326 = span !156 4210 4232
!327 = fn_call_path_span !156 4210 4221
!328 = (!264 !265 !269 !270 !275 !276 !320 !321 !326 !327 !157)
!329 = span !156 4253 4254
!330 = span !156 4245 4254
!331 = fn_call_path_span !156 4251 4252
!332 = (!264 !265 !269 !270 !275 !276 !320 !321 !330 !331)
!333 = (!264 !265 !269 !270 !275 !276 !320 !321 !330)
!334 = span !156 4269 4302
!335 = fn_call_path_span !156 4273 4286
!336 = (!264 !265 !269 !270 !275 !276 !320 !321 !334 !335 !196)
!337 = (!264 !265 !269 !270 !275 !276 !320 !321)
!338 = span !143 18869 19015
!339 = fn_call_path_span !143 18869 18890
!340 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!341 = span !340 2362 2393
!342 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!343 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!344 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!345 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!346 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!347 = (!264 !265 !269 !270 !275 !276 !338 !339)
!348 = span !340 2351 2394
!349 = fn_call_path_span !340 2351 2361
!350 = span !340 1248 1294
!351 = (!264 !265 !269 !270 !275 !276 !338 !339 !348 !349 !350)
!352 = span !143 18853 19016
!353 = (!264 !265 !269 !270 !275 !276 !352)
!354 = (!264 !265 !269 !270 !275 !276 !352)
!355 = span !143 19055 19064
!356 = (!264 !265 !269 !270 !275 !276 !355)
!357 = (!264 !265 !269 !270 !275 !276)
!358 = span !143 19040 19065
!359 = fn_call_path_span !143 19040 19054
!360 = span !143 2130 2153
!361 = fn_call_path_span !143 2136 2151
!362 = span !340 3959 3975
!363 = fn_call_path_span !340 3959 3969
!364 = span !340 1624 1675
!365 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361 !362 !363 !364)
!366 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361)
!367 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361)
!368 = span !340 3976 3977
!369 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361 !368)
!370 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361)
!371 = span !143 2173 2189
!372 = fn_call_path_span !143 2173 2184
!373 = (!264 !265 !269 !270 !275 !276 !358 !359 !371 !372 !157)
!374 = span !143 2208 2209
!375 = span !143 2202 2209
!376 = fn_call_path_span !143 2206 2207
!377 = (!264 !265 !269 !270 !275 !276 !358 !359 !375 !376)
!378 = (!264 !265 !269 !270 !275 !276 !358 !359 !375)
!379 = span !143 2224 2235
!380 = fn_call_path_span !143 2230 2233
!381 = span !340 2911 2927
!382 = fn_call_path_span !340 2911 2921
!383 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380 !381 !382 !364)
!384 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380)
!385 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380)
!386 = span !340 2928 2929
!387 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380 !386)
!388 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380)
!389 = span !143 2224 2259
!390 = fn_call_path_span !143 2236 2243
!391 = span !195 3447 3522
!392 = (!264 !265 !269 !270 !275 !276 !358 !359 !389 !390 !391)
!393 = span !195 3496 3511
!394 = (!264 !265 !269 !270 !275 !276 !358 !359)
!395 = span !143 2279 2296
!396 = (!264 !265 !269 !270 !275 !276 !358 !359 !395)
!397 = (!264 !265 !269 !270 !275 !276 !358 !359)
!398 = (!264 !265 !269 !270 !275 !276 !358 !359 !395)
!399 = (!264 !265 !269 !270 !275 !276 !358 !359)
!400 = (!264 !265 !269 !270 !275 !276 !358 !359 !395)
!401 = (!264 !265 !269 !270 !275 !276 !358 !359)
!402 = span !143 19029 19065
!403 = (!264 !265 !269 !270 !275 !276 !402)
!404 = (!264 !265 !269 !270 !275 !276)
!405 = (!264 !265 !269 !270 !275 !276)
!406 = span !143 19100 19114
!407 = fn_call_path_span !143 19109 19112
!408 = (!264 !265 !269 !270 !275 !276 !406 !407)
!409 = span !143 19100 19143
!410 = fn_call_path_span !143 19115 19130
!411 = span !195 6721 6825
!412 = (!264 !265 !269 !270 !275 !276 !409 !410 !411)
!413 = span !195 6771 6789
!414 = (!264 !265 !269 !270 !275 !276)
!415 = span !143 19153 19164
!416 = fn_call_path_span !143 19159 19162
!417 = (!264 !265 !269 !270 !275 !276 !415 !416)
!418 = span !143 19153 19198
!419 = fn_call_path_span !143 19165 19178
!420 = (!264 !265 !269 !270 !275 !276 !418 !419 !196)
!421 = span !143 19244 19263
!422 = (!264 !265 !269 !270 !275 !276 !421)
!423 = (!264 !265 !269 !270 !275 !276)
!424 = span !253 9121 9127
!425 = span !253 9121 9136
!426 = fn_call_path_span !253 9128 9134
!427 = span !253 440 476
!428 = (!425 !426 !427)
!429 = "/home/kebradalaonda/p/sway/sway-lib-std/src/primitives.sw"
!430 = span !429 7904 7970
!431 = (!425 !426 !427)
!432 = span !253 508 521
!433 = (!425 !426 !432)
!434 = (!425 !426)
!435 = (!425 !426 !271)
!436 = span !253 540 556
!437 = fn_call_path_span !253 551 554
!438 = (!425 !426 !436 !437)
!439 = span !253 577 593
!440 = fn_call_path_span !253 588 591
!441 = (!425 !426 !439 !440)
!442 = span !253 485 672
!443 = (!425 !426 !442)
!444 = span !253 619 638
!445 = span !253 177 263
!446 = fn_name_span !253 184 187
!447 = (!445 !446)
!448 = span !143 570 571
!449 = span !253 234 246
!450 = fn_call_path_span !253 234 244
!451 = span !143 3079 3094
!452 = fn_call_path_span !143 3079 3092
!453 = span !143 558 572
!454 = fn_call_path_span !143 558 569
!455 = (!449 !450 !451 !452 !453 !454 !157)
!456 = span !143 534 603
!457 = (!449 !450 !451 !452 !456)
!458 = (!449 !450 !451 !452)
!459 = (!449 !450 !451 !452 !456)
!460 = (!449 !450 !451 !452)
!461 = span !143 591 592
!462 = (!449 !450 !451 !452 !456)
!463 = (!449 !450 !451 !452)
!464 = span !143 3055 3125
!465 = (!449 !450 !464)
!466 = (!449 !450)
!467 = (!449 !450 !464)
!468 = span !143 3113 3114
!469 = (!449 !450 !464)
!470 = span !253 208 257
!471 = span !143 1097 1101
!472 = span !143 1081 1134
!473 = fn_name_span !143 1088 1096
!474 = (!472 !473)
!475 = span !143 418 426

// IR: [const-demotion] Demotion of by-value constants to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr { [u8; 64] }, secp256k1, !52
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !54
        v34 = load v33, !35
        v35 = call address_7(v32, v34), !57
        v36 = get_local ptr { [u8; 64] }, secp256k1, !59
        v37 = load v36, !35
        v38 = get_local ptr { { { u64, u64 }, u64 } }, message, !61
        v39 = load v38, !35
        v40 = call address_7(v37, v39), !64
        v41 = const unit ()
        ret () v41
    }

    pub fn address_7(self !65: { [u8; 64] }, message !66: { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !69 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: { [u8; 64] }, message: { { { u64, u64 }, u64 } }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !74
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !75
        v3 = const u64 0, !73
        store v3 to v2, !76
        v4 = ptr_to_int message to u64, !79
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !80
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !83
        v8 = load v7, !84
        v9 = call len_20(v8), !87
        v10 = const u64 32, !88
        v11 = cmp eq v9 v10, !94
        v12 = const bool false, !95
        v13 = cmp eq v11 v12, !98
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !99

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !102
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !103
        v17 = const u64 0, !101
        store v17 to v16, !104
        v18 = load v14, !105
        br recover_8_block0(v18), !107

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !108
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !109
        v22 = const u64 1, !101
        store v22 to v21, !110
        v23 = load v7, !111
        v24 = call ptr_21(v23), !114
        v25 = asm(bits: v24) -> b256 bits, !116 {
        }
        v26 = const u64 1
        v27 = const u64 1
        v28 = get_elem_ptr v19, ptr b256, v26, v27, !117
        store v25 to v28, !118
        v29 = load v19, !119
        br recover_8_block0(v29), !120

        recover_8_block0(v30: { u64, ( () | b256 ) }):
        v31 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !124
        store v30 to v31, !125
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !127
        v33 = const u64 0
        v34 = get_elem_ptr v32, ptr u64, v33, !128
        v35 = load v34, !129
        v36 = const u64 1, !126
        v37 = cmp eq v35 v36, !132
        cbr v37, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !133

        recover_8_unwrap_14_block0():
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !134
        v39 = const u64 1
        v40 = const u64 1
        v41 = get_elem_ptr v38, ptr b256, v39, v40, !135
        v42 = load v41, !136
        v43 = get_local ptr b256, inner_value, !138
        store v42 to v43, !139
        v44 = get_local ptr b256, inner_value, !141
        v45 = load v44, !142
        v46 = const u64 32, !144
        v47 = asm(size: v46) -> u64 hp, !158 {
            aloc   size, !159
        }
        v48 = get_local ptr { u64, u64 }, __anon_00000, !161
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !162
        store v47 to v50, !163
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !164
        store v46 to v52, !165
        v53 = load v48, !166
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !168
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !169
        store v53 to v56, !170
        v57 = const u64 1
        v58 = get_elem_ptr v54, ptr u64, v57, !171
        v59 = const u64 0, !172
        store v59 to v58, !173
        v60 = load v54, !174
        v61 = get_local ptr { { u64, u64 }, u64 }, bytes, !176
        store v60 to v61, !177
        v62 = get_local ptr { { u64, u64 }, u64 }, bytes, !179
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !180
        v65 = const u64 32, !181
        store v65 to v64, !182
        v66 = ptr_to_int v45 to u64, !184
        v67 = get_local ptr { { u64, u64 }, u64 }, bytes, !186
        v68 = const u64 0
        v69 = get_elem_ptr v67, ptr { u64, u64 }, v68, !188
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !190
        v72 = load v71, !191
        v73 = const u64 32, !192
        v74 = asm(dst: v72, src: v66, len: v73) -> (), !197 {
            mcp    dst src len, !198
        }
        v75 = get_local ptr { { u64, u64 }, u64 }, bytes, !200
        v76 = load v75, !201
        v77 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !203
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr { { u64, u64 }, u64 }, v78, !204
        store v76 to v79, !205
        v80 = load v77, !206
        v81 = const u64 1
        v82 = const u64 0
        v83 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v81, v82, !207
        store v80 to v83, !208
        v84 = load v0, !209
        v85 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !210
        store v84 to v85, !210
        v86 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v87 = const u64 0
        v88 = get_elem_ptr v86, ptr u64, v87, !70
        v89 = load v88
        v90 = const u64 0, !70
        v91 = cmp eq v89 v90, !213
        cbr v91, block0(), block1(), !211

        recover_8_unwrap_14_block1():
        v92 = const u64 0, !214
        revert v92, !219

        block0():
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v94 = const u64 1
        v95 = const u64 0
        v96 = get_elem_ptr v93, ptr { { { u64, u64 }, u64 } }, v94, v95
        v97 = load v96
        v98 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !220
        store v97 to v98, !220
        v99 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !73
        v100 = const u64 0
        v101 = get_elem_ptr v99, ptr u64, v100, !73
        v102 = const u64 0, !73
        store v102 to v101, !73
        v103 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !221
        v104 = load v103
        v105 = call sha256_24(v104), !224
        v106 = get_local ptr { b256 }, __anon_02, !229
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr b256, v107, !230
        store v105 to v108, !231
        v109 = load v106, !230
        v110 = const u64 1
        v111 = const u64 0
        v112 = get_elem_ptr v99, ptr { b256 }, v110, v111, !73
        store v109 to v112, !73
        v113 = load v99
        br block5(v113)

        block1():
        v114 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr u64, v115, !70
        v117 = load v116
        v118 = const u64 1, !70
        v119 = cmp eq v117 v118, !234
        cbr v119, block2(), block3(), !232

        block2():
        v120 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !70
        v121 = const u64 1
        v122 = const u64 1
        v123 = get_elem_ptr v120, ptr { u64 }, v121, v122
        v124 = load v123
        v125 = get_local ptr { u64 }, e, !235
        store v124 to v125, !235
        v126 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !73
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !73
        v129 = const u64 1, !73
        store v129 to v128, !73
        v130 = get_local ptr { u64 }, e, !236
        v131 = load v130
        v132 = const u64 1
        v133 = const u64 1
        v134 = get_elem_ptr v126, ptr { u64 }, v132, v133, !73
        store v131 to v134, !73
        v135 = load v126
        br block5(v135)

        block3():
        v136 = const u64 14757395258967588866, !210
        revert v136, !210

        block5(v137: { u64, ( { b256 } | { u64 } ) }):
        ret { u64, ( { b256 } | { u64 } ) } v137
    }

    pub fn len_20(self !237: { { u64, u64 }, u64 }) -> u64, !240 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !241
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self !242: { { u64, u64 }, u64 }) -> u64, !245 {
        entry(self: { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !187
        v4 = load v3
        v5 = call ptr_22(v4), !248
        ret u64 v5
    }

    pub fn ptr_22(self !249: { u64, u64 }) -> u64, !252 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !189
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s !254: { { { u64, u64 }, u64 } }) -> b256, !258 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: { { { u64, u64 }, u64 } }):
        v0 = call new_25(), !261
        v1 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !262
        store v0 to v1, !262
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !263
        v3 = ptr_to_int s to u64, !266
        v4 = int_to_ptr v3 to ptr { { { u64, u64 }, u64 } }, !266
        v5 = const u64 0
        v6 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v5, !268
        v7 = load v6, !266
        v8 = const u64 0
        v9 = get_elem_ptr v2, ptr { { u64, u64 }, u64 }, v8, !272
        v10 = ptr_to_int v7 to u64, !273
        v11 = int_to_ptr v10 to ptr { { u64, u64 }, u64 }, !274
        v12 = load v11, !277
        v13 = call len_20(v12), !280
        v14 = const u64 0, !281
        v15 = cmp eq v13 v14, !284
        cbr v15, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !285

        hash_26_write_27_append_28_block1():
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !286
        v18 = load v17, !287
        v19 = const u64 0, !288
        v20 = cmp eq v18 v19, !291
        cbr v20, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !292

        hash_26_write_27_append_28_block3():
        v21 = load v11, !293
        store v21 to v9, !295
        br hash_26_write_27_block0(), !297

        hash_26_write_27_append_28_block4():
        v22 = load v17, !298
        v23 = add v22, v13, !301
        v24 = load v17, !302
        v25 = const u64 0
        v26 = get_elem_ptr v9, ptr { u64, u64 }, v25, !303
        v27 = load v26, !304
        v28 = call capacity_31(v27), !307
        v29 = cmp lt v28 v23, !310
        cbr v29, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !311

        hash_26_write_27_append_28_block6():
        v30 = load v26, !312
        v31 = call ptr_22(v30), !315
        v32 = load v26, !316
        v33 = call capacity_31(v32), !319
        v34 = cmp gt v23 v33, !324
        cbr v34, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v31), !325

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v35 = asm(size: v23) -> u64 hp, !328 {
            aloc   size, !159
        }
        v36 = const u64 0, !329
        v37 = cmp gt v33 v36, !332
        cbr v37, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !333

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v38 = asm(dst: v35, src: v31, len: v33) -> (), !336 {
            mcp    dst src len, !198
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !337

        hash_26_write_27_append_28_realloc_bytes_35_block5(v39: u64):
        v40 = get_local ptr { u64, u64 }, __anon_0, !342
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !343
        store v39 to v42, !344
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !345
        store v23 to v44, !346
        v45 = load v40, !347
        v46 = asm(ptr: v45) -> slice ptr, !351 {
        }
        v47 = get_local ptr slice, new_slice, !353
        store v46 to v47, !354
        v48 = get_local ptr slice, new_slice, !356
        v49 = load v48, !357
        v50 = asm(ptr: v49) -> { u64, u64 } ptr, !365 {
        }
        v51 = get_local ptr { u64, u64 }, __anon_000, !366
        store v50 to v51, !367
        v52 = const u64 1
        v53 = get_elem_ptr v51, ptr u64, v52, !369
        v54 = load v53, !370
        v55 = asm(size: v54) -> u64 hp, !373 {
            aloc   size, !159
        }
        v56 = const u64 0, !374
        v57 = cmp gt v54 v56, !377
        cbr v57, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !378

        hash_26_write_27_append_28_from_37_block0():
        v58 = asm(ptr: v49) -> { u64, u64 } ptr, !383 {
        }
        v59 = get_local ptr { u64, u64 }, __anon_01, !384
        store v58 to v59, !385
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !387
        v62 = load v61, !388
        v63 = asm(dst: v55, src: v62, len: v54) -> (), !392 {
            mcp    dst src len, !393
        }
        br hash_26_write_27_append_28_from_37_block2(), !394

        hash_26_write_27_append_28_from_37_block2():
        v64 = get_local ptr { u64, u64 }, __anon_00, !396
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !397
        store v55 to v66, !398
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67, !399
        store v54 to v68, !400
        v69 = load v64, !401
        store v69 to v26, !403
        br hash_26_write_27_append_28_block8(), !404

        hash_26_write_27_append_28_block8():
        v70 = load v26, !405
        v71 = call ptr_22(v70), !408
        v72 = asm(ptr: v71, offset: v24, new) -> u64 new, !412 {
            add    new ptr offset, !413
        }
        v73 = load v11, !414
        v74 = call ptr_21(v73), !417
        v75 = asm(dst: v72, src: v74, len: v13) -> (), !420 {
            mcp    dst src len, !198
        }
        store v23 to v17, !422
        br hash_26_write_27_block0(), !423

        hash_26_write_27_block0():
        v76 = get_local ptr b256, __const
        v77 = load v76
        v78 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !424
        v79 = load v78
        v80 = get_local ptr b256, result_buffer, !428
        store v77 to v80, !429
        v81 = get_local ptr b256, result_buffer, !431
        v82 = ptr_to_int v79 to u64, !432
        v83 = int_to_ptr v82 to ptr { { { u64, u64 }, u64 } }, !432
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr { { u64, u64 }, u64 }, v84, !433
        v86 = load v85, !432
        v87 = call ptr_21(v86), !436
        v88 = load v85, !432
        v89 = call len_20(v88), !439
        v90 = asm(hash: v81, ptr: v87, bytes: v89) -> b256 hash, !441 {
            s256   hash ptr bytes, !442
        }
        ret b256 v90
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !445 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !446
        v1 = asm(size: v0) -> u64 hp, !453 {
            aloc   size, !159
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !455
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !456
        store v1 to v4, !457
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !458
        v7 = const u64 0, !459
        store v7 to v6, !460
        v8 = load v2, !461
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !463
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !464
        store v8 to v11, !465
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !464
        v14 = const u64 0, !466
        store v14 to v13, !467
        v15 = load v9, !464
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !468
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !468
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self !469: { u64, u64 }) -> u64, !472 {
        entry(self: { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !473
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1108 1117
!52 = (!4 !5 !51)
!53 = span !6 1126 1133
!54 = (!4 !5 !53)
!55 = span !6 1108 1134
!56 = fn_call_path_span !6 1118 1125
!57 = (!4 !5 !55 !56)
!58 = span !6 1148 1157
!59 = (!4 !5 !58)
!60 = span !6 1166 1173
!61 = (!4 !5 !60)
!62 = span !6 1148 1174
!63 = fn_call_path_span !6 1158 1165
!64 = (!4 !5 !62 !63)
!65 = span !6 507 511
!66 = span !6 513 520
!67 = span !6 492 714
!68 = fn_name_span !6 499 506
!69 = (!67 !68)
!70 = span !6 582 603
!71 = fn_call_path_span !6 587 594
!72 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!73 = span !72 1815 1933
!74 = (!70 !71 !73)
!75 = (!70 !71 !73)
!76 = (!70 !71 !73)
!77 = span !6 451 469
!78 = fn_call_path_span !6 459 467
!79 = (!70 !71 !77 !78)
!80 = (!70 !71 !77 !78)
!81 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!82 = span !81 329 341
!83 = (!70 !71 !77 !78 !82)
!84 = (!70 !71 !77 !78)
!85 = span !81 1573 1589
!86 = fn_call_path_span !81 1584 1587
!87 = (!70 !71 !77 !78 !85 !86)
!88 = span !81 1593 1595
!89 = span !81 1573 1595
!90 = fn_call_path_span !81 1590 1592
!91 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!92 = span !91 15515 15529
!93 = fn_call_path_span !91 15520 15522
!94 = (!70 !71 !77 !78 !89 !90 !92 !93)
!95 = span !91 12533 12538
!96 = span !91 15514 15536
!97 = fn_call_path_span !91 15531 15534
!98 = (!70 !71 !77 !78 !89 !90 !96 !97)
!99 = (!70 !71 !77 !78 !89)
!100 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!101 = span !100 2461 2560
!102 = (!70 !71 !77 !78 !101)
!103 = (!70 !71 !77 !78 !101)
!104 = (!70 !71 !77 !78 !101)
!105 = (!70 !71 !77 !78)
!106 = span !81 1610 1621
!107 = (!70 !71 !77 !78 !106)
!108 = (!70 !71 !77 !78 !101)
!109 = (!70 !71 !77 !78 !101)
!110 = (!70 !71 !77 !78 !101)
!111 = (!70 !71 !77 !78)
!112 = span !81 1657 1673
!113 = fn_call_path_span !81 1668 1671
!114 = (!70 !71 !77 !78 !112 !113)
!115 = span !81 1647 1709
!116 = (!70 !71 !77 !78 !115)
!117 = (!70 !71 !77 !78 !101)
!118 = (!70 !71 !77 !78 !101)
!119 = (!70 !71 !77 !78)
!120 = (!70 !71 !77 !78)
!121 = span !6 451 478
!122 = fn_call_path_span !6 470 476
!123 = span !100 4973 5075
!124 = (!70 !71 !121 !122 !123)
!125 = (!70 !71 !121 !122 !123)
!126 = span !100 4979 4983
!127 = (!70 !71 !121 !122 !126)
!128 = (!70 !71 !121 !122 !126)
!129 = (!70 !71 !121 !122)
!130 = span !100 4998 5037
!131 = fn_call_path_span !100 4998 5037
!132 = (!70 !71 !121 !122 !130 !131)
!133 = (!70 !71 !121 !122 !130)
!134 = (!70 !71 !121 !122 !126)
!135 = (!70 !71 !121 !122)
!136 = (!70 !71 !121 !122)
!137 = span !100 5009 5020
!138 = (!70 !71 !121 !122 !137)
!139 = (!70 !71 !121 !122 !137)
!140 = span !100 5025 5036
!141 = (!70 !71 !121 !122 !140)
!142 = (!70 !71 !121 !122)
!143 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!144 = span !143 28953 28955
!145 = span !6 435 479
!146 = fn_call_path_span !6 435 450
!147 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!148 = span !147 3133 3150
!149 = fn_call_path_span !147 3133 3144
!150 = span !143 28933 28956
!151 = fn_call_path_span !143 28933 28952
!152 = span !143 4157 4190
!153 = fn_call_path_span !143 4157 4180
!154 = span !143 863 884
!155 = fn_call_path_span !143 863 874
!156 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!157 = span !156 3315 3378
!158 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !154 !155 !157)
!159 = span !156 3342 3351
!160 = span !143 839 922
!161 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!162 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!163 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!164 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!165 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153 !160)
!166 = (!70 !71 !145 !146 !148 !149 !150 !151 !152 !153)
!167 = span !143 4133 4221
!168 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!169 = (!70 !71 !145 !146 !148 !149 !150 !151)
!170 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!171 = (!70 !71 !145 !146 !148 !149 !150 !151)
!172 = span !143 4209 4210
!173 = (!70 !71 !145 !146 !148 !149 !150 !151 !167)
!174 = (!70 !71 !145 !146 !148 !149 !150 !151)
!175 = span !143 28917 28957
!176 = (!70 !71 !145 !146 !148 !149 !175)
!177 = (!70 !71 !145 !146 !148 !149 !175)
!178 = span !143 28966 28980
!179 = (!70 !71 !145 !146 !148 !149 !178)
!180 = (!70 !71 !145 !146 !148 !149 !178)
!181 = span !143 28978 28980
!182 = (!70 !71 !145 !146 !148 !149 !178)
!183 = span !143 29065 29077
!184 = (!70 !71 !145 !146 !148 !149 !183)
!185 = span !143 29092 29097
!186 = (!70 !71 !145 !146 !148 !149 !185)
!187 = span !143 2445 2458
!188 = (!70 !71 !145 !146 !148 !149 !187)
!189 = span !143 400 412
!190 = (!70 !71 !145 !146 !148 !149 !189)
!191 = (!70 !71 !145 !146 !148 !149)
!192 = span !143 29107 29109
!193 = span !143 29065 29110
!194 = fn_call_path_span !143 29078 29091
!195 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!196 = span !195 5999 6076
!197 = (!70 !71 !145 !146 !148 !149 !193 !194 !196)
!198 = span !195 6050 6065
!199 = span !143 29121 29126
!200 = (!70 !71 !145 !146 !148 !149 !199)
!201 = (!70 !71 !145 !146 !148 !149)
!202 = span !147 3107 3161
!203 = (!70 !71 !145 !146 !202)
!204 = (!70 !71 !145 !146)
!205 = (!70 !71 !145 !146 !202)
!206 = (!70 !71 !145 !146)
!207 = (!70 !71 !73)
!208 = (!70 !71 !73)
!209 = (!70 !71)
!210 = span !6 576 708
!211 = span !6 618 668
!212 = fn_call_path_span !6 618 668
!213 = (!211 !212)
!214 = span !100 5062 5063
!215 = span !100 5055 5064
!216 = fn_call_path_span !100 5055 5061
!217 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!218 = span !217 757 771
!219 = (!70 !71 !121 !122 !215 !216 !218)
!220 = span !6 621 628
!221 = span !6 657 664
!222 = span !6 650 665
!223 = fn_call_path_span !6 650 656
!224 = (!222 !223)
!225 = span !6 636 666
!226 = fn_call_path_span !6 636 649
!227 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!228 = span !227 2370 2383
!229 = (!225 !226 !228)
!230 = (!225 !226)
!231 = (!225 !226 !228)
!232 = span !6 681 698
!233 = fn_call_path_span !6 681 698
!234 = (!232 !233)
!235 = span !6 685 686
!236 = span !6 695 696
!237 = span !143 13782 13786
!238 = span !143 13771 13819
!239 = fn_name_span !143 13778 13781
!240 = (!238 !239)
!241 = span !143 2506 2514
!242 = span !143 15186 15190
!243 = span !143 15175 15233
!244 = fn_name_span !143 15182 15185
!245 = (!243 !244)
!246 = span !143 15213 15227
!247 = fn_call_path_span !143 15222 15225
!248 = (!246 !247)
!249 = span !143 989 993
!250 = span !143 978 1030
!251 = fn_name_span !143 985 988
!252 = (!250 !251)
!253 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!254 = span !253 9026 9027
!255 = span !253 9009 9138
!256 = fn_name_span !253 9016 9022
!257 = inline "never"
!258 = (!255 !256 !257)
!259 = span !253 9082 9095
!260 = fn_call_path_span !253 9082 9093
!261 = (!259 !260)
!262 = span !253 9065 9096
!263 = span !253 9108 9114
!264 = span !253 9101 9115
!265 = fn_call_path_span !253 9103 9107
!266 = (!264 !265)
!267 = span !147 524 536
!268 = (!264 !265 !267)
!269 = span !147 5123 5146
!270 = fn_call_path_span !147 5129 5134
!271 = span !253 142 154
!272 = (!264 !265 !269 !270 !271)
!273 = (!264 !265 !269 !270)
!274 = (!264 !265 !269 !270)
!275 = span !253 365 389
!276 = fn_call_path_span !253 376 382
!277 = (!264 !265 !269 !270 !275 !276)
!278 = span !143 18398 18409
!279 = fn_call_path_span !143 18404 18407
!280 = (!264 !265 !269 !270 !275 !276 !278 !279)
!281 = span !143 18435 18436
!282 = span !143 18422 18436
!283 = fn_call_path_span !143 18432 18434
!284 = (!264 !265 !269 !270 !275 !276 !282 !283)
!285 = (!264 !265 !269 !270 !275 !276 !282)
!286 = (!264 !265 !269 !270 !275 !276 !241)
!287 = (!264 !265 !269 !270 !275 !276)
!288 = span !143 18572 18573
!289 = span !143 18560 18573
!290 = fn_call_path_span !143 18569 18571
!291 = (!264 !265 !269 !270 !275 !276 !289 !290)
!292 = (!264 !265 !269 !270 !275 !276 !289)
!293 = (!264 !265 !269 !270 !275 !276)
!294 = span !143 18588 18600
!295 = (!264 !265 !269 !270 !275 !276 !294)
!296 = span !143 18614 18620
!297 = (!264 !265 !269 !270 !275 !276 !296)
!298 = (!264 !265 !269 !270 !275 !276)
!299 = span !143 18657 18677
!300 = fn_call_path_span !143 18666 18667
!301 = (!264 !265 !269 !270 !275 !276 !299 !300)
!302 = (!264 !265 !269 !270 !275 !276)
!303 = (!264 !265 !269 !270 !275 !276 !187)
!304 = (!264 !265 !269 !270 !275 !276)
!305 = span !143 18808 18827
!306 = fn_call_path_span !143 18817 18825
!307 = (!264 !265 !269 !270 !275 !276 !305 !306)
!308 = span !143 18808 18838
!309 = fn_call_path_span !143 18828 18829
!310 = (!264 !265 !269 !270 !275 !276 !308 !309)
!311 = (!264 !265 !269 !270 !275 !276 !308)
!312 = (!264 !265 !269 !270 !275 !276)
!313 = span !143 18928 18942
!314 = fn_call_path_span !143 18937 18940
!315 = (!264 !265 !269 !270 !275 !276 !313 !314)
!316 = (!264 !265 !269 !270 !275 !276)
!317 = span !143 18944 18963
!318 = fn_call_path_span !143 18953 18961
!319 = (!264 !265 !269 !270 !275 !276 !317 !318)
!320 = span !143 18914 18974
!321 = fn_call_path_span !143 18914 18927
!322 = span !156 4168 4185
!323 = fn_call_path_span !156 4178 4179
!324 = (!264 !265 !269 !270 !275 !276 !320 !321 !322 !323)
!325 = (!264 !265 !269 !270 !275 !276 !320 !321 !322)
!326 = span !156 4210 4232
!327 = fn_call_path_span !156 4210 4221
!328 = (!264 !265 !269 !270 !275 !276 !320 !321 !326 !327 !157)
!329 = span !156 4253 4254
!330 = span !156 4245 4254
!331 = fn_call_path_span !156 4251 4252
!332 = (!264 !265 !269 !270 !275 !276 !320 !321 !330 !331)
!333 = (!264 !265 !269 !270 !275 !276 !320 !321 !330)
!334 = span !156 4269 4302
!335 = fn_call_path_span !156 4273 4286
!336 = (!264 !265 !269 !270 !275 !276 !320 !321 !334 !335 !196)
!337 = (!264 !265 !269 !270 !275 !276 !320 !321)
!338 = span !143 18869 19015
!339 = fn_call_path_span !143 18869 18890
!340 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!341 = span !340 2362 2393
!342 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!343 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!344 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!345 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!346 = (!264 !265 !269 !270 !275 !276 !338 !339 !341)
!347 = (!264 !265 !269 !270 !275 !276 !338 !339)
!348 = span !340 2351 2394
!349 = fn_call_path_span !340 2351 2361
!350 = span !340 1248 1294
!351 = (!264 !265 !269 !270 !275 !276 !338 !339 !348 !349 !350)
!352 = span !143 18853 19016
!353 = (!264 !265 !269 !270 !275 !276 !352)
!354 = (!264 !265 !269 !270 !275 !276 !352)
!355 = span !143 19055 19064
!356 = (!264 !265 !269 !270 !275 !276 !355)
!357 = (!264 !265 !269 !270 !275 !276)
!358 = span !143 19040 19065
!359 = fn_call_path_span !143 19040 19054
!360 = span !143 2130 2153
!361 = fn_call_path_span !143 2136 2151
!362 = span !340 3959 3975
!363 = fn_call_path_span !340 3959 3969
!364 = span !340 1624 1675
!365 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361 !362 !363 !364)
!366 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361)
!367 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361)
!368 = span !340 3976 3977
!369 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361 !368)
!370 = (!264 !265 !269 !270 !275 !276 !358 !359 !360 !361)
!371 = span !143 2173 2189
!372 = fn_call_path_span !143 2173 2184
!373 = (!264 !265 !269 !270 !275 !276 !358 !359 !371 !372 !157)
!374 = span !143 2208 2209
!375 = span !143 2202 2209
!376 = fn_call_path_span !143 2206 2207
!377 = (!264 !265 !269 !270 !275 !276 !358 !359 !375 !376)
!378 = (!264 !265 !269 !270 !275 !276 !358 !359 !375)
!379 = span !143 2224 2235
!380 = fn_call_path_span !143 2230 2233
!381 = span !340 2911 2927
!382 = fn_call_path_span !340 2911 2921
!383 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380 !381 !382 !364)
!384 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380)
!385 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380)
!386 = span !340 2928 2929
!387 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380 !386)
!388 = (!264 !265 !269 !270 !275 !276 !358 !359 !379 !380)
!389 = span !143 2224 2259
!390 = fn_call_path_span !143 2236 2243
!391 = span !195 3447 3522
!392 = (!264 !265 !269 !270 !275 !276 !358 !359 !389 !390 !391)
!393 = span !195 3496 3511
!394 = (!264 !265 !269 !270 !275 !276 !358 !359)
!395 = span !143 2279 2296
!396 = (!264 !265 !269 !270 !275 !276 !358 !359 !395)
!397 = (!264 !265 !269 !270 !275 !276 !358 !359)
!398 = (!264 !265 !269 !270 !275 !276 !358 !359 !395)
!399 = (!264 !265 !269 !270 !275 !276 !358 !359)
!400 = (!264 !265 !269 !270 !275 !276 !358 !359 !395)
!401 = (!264 !265 !269 !270 !275 !276 !358 !359)
!402 = span !143 19029 19065
!403 = (!264 !265 !269 !270 !275 !276 !402)
!404 = (!264 !265 !269 !270 !275 !276)
!405 = (!264 !265 !269 !270 !275 !276)
!406 = span !143 19100 19114
!407 = fn_call_path_span !143 19109 19112
!408 = (!264 !265 !269 !270 !275 !276 !406 !407)
!409 = span !143 19100 19143
!410 = fn_call_path_span !143 19115 19130
!411 = span !195 6721 6825
!412 = (!264 !265 !269 !270 !275 !276 !409 !410 !411)
!413 = span !195 6771 6789
!414 = (!264 !265 !269 !270 !275 !276)
!415 = span !143 19153 19164
!416 = fn_call_path_span !143 19159 19162
!417 = (!264 !265 !269 !270 !275 !276 !415 !416)
!418 = span !143 19153 19198
!419 = fn_call_path_span !143 19165 19178
!420 = (!264 !265 !269 !270 !275 !276 !418 !419 !196)
!421 = span !143 19244 19263
!422 = (!264 !265 !269 !270 !275 !276 !421)
!423 = (!264 !265 !269 !270 !275 !276)
!424 = span !253 9121 9127
!425 = span !253 9121 9136
!426 = fn_call_path_span !253 9128 9134
!427 = span !253 440 476
!428 = (!425 !426 !427)
!429 = (!425 !426 !427)
!430 = span !253 508 521
!431 = (!425 !426 !430)
!432 = (!425 !426)
!433 = (!425 !426 !271)
!434 = span !253 540 556
!435 = fn_call_path_span !253 551 554
!436 = (!425 !426 !434 !435)
!437 = span !253 577 593
!438 = fn_call_path_span !253 588 591
!439 = (!425 !426 !437 !438)
!440 = span !253 485 672
!441 = (!425 !426 !440)
!442 = span !253 619 638
!443 = span !253 177 263
!444 = fn_name_span !253 184 187
!445 = (!443 !444)
!446 = span !143 570 571
!447 = span !253 234 246
!448 = fn_call_path_span !253 234 244
!449 = span !143 3079 3094
!450 = fn_call_path_span !143 3079 3092
!451 = span !143 558 572
!452 = fn_call_path_span !143 558 569
!453 = (!447 !448 !449 !450 !451 !452 !157)
!454 = span !143 534 603
!455 = (!447 !448 !449 !450 !454)
!456 = (!447 !448 !449 !450)
!457 = (!447 !448 !449 !450 !454)
!458 = (!447 !448 !449 !450)
!459 = span !143 591 592
!460 = (!447 !448 !449 !450 !454)
!461 = (!447 !448 !449 !450)
!462 = span !143 3055 3125
!463 = (!447 !448 !462)
!464 = (!447 !448)
!465 = (!447 !448 !462)
!466 = span !143 3113 3114
!467 = (!447 !448 !462)
!468 = span !253 208 257
!469 = span !143 1097 1101
!470 = span !143 1081 1134
!471 = fn_name_span !143 1088 1096
!472 = (!470 !471)
!473 = span !143 418 426

// IR: [arg-demotion] Demotion of by-value function arguments to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = call new_25(), !9
        v1 = get_local ptr { { { u64, u64 }, u64 } }, message, !11
        store v0 to v1, !12
        v2 = get_local ptr [u8; 64], __anon_0, !16
        v3 = const u64 0
        br play_0_new_5_array_init_loop(v3), !17

        play_0_new_5_array_init_loop(v4: u64):
        v5 = get_elem_ptr v2, ptr u8, v4, !18
        v6 = const u8 0, !19
        store v6 to v5, !20
        v7 = const u64 1
        v8 = add v4, v7, !21
        v9 = const u64 64
        v10 = cmp lt v8 v9, !22
        cbr v10, play_0_new_5_array_init_loop(v8), play_0_new_5_array_init_exit(), !23

        play_0_new_5_array_init_exit():
        v11 = load v2, !24
        v12 = get_local ptr { [u8; 64] }, __anon_1, !26
        v13 = const u64 0
        v14 = get_elem_ptr v12, ptr [u8; 64], v13, !27
        store v11 to v14, !28
        v15 = load v12, !29
        v16 = get_local ptr { [u8; 64] }, secp256k1, !31
        store v15 to v16, !32
        v17 = get_local ptr { [u8; 64] }, secp256k1, !34
        v18 = load v17, !35
        v19 = get_local ptr { [u8; 64] }, secp256k1, !37
        v20 = load v19, !35
        v21 = ptr_to_int v18 to u64, !40
        v22 = int_to_ptr v21 to ptr { [u8; 64] }, !41
        v23 = const u64 0
        v24 = get_elem_ptr v22, ptr [u8; 64], v23, !43
        v25 = ptr_to_int v20 to u64, !44
        v26 = int_to_ptr v25 to ptr { [u8; 64] }, !45
        v27 = const u64 0
        v28 = get_elem_ptr v26, ptr [u8; 64], v27, !46
        v29 = const u64 64, !47
        v30 = asm(result, r2: v24, r3: v28, r4: v29) -> bool result, !49 {
            meq    result r2 r3 r4, !50
        }
        v31 = get_local ptr { [u8; 64] }, secp256k1, !52
        v32 = load v31, !35
        v33 = get_local ptr { { { u64, u64 }, u64 } }, message, !54
        v34 = load v33, !35
        v35 = get_local ptr { [u8; 64] }, __tmp_arg
        store v32 to v35
        v36 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        store v34 to v36
        v37 = call address_7(v35, v36)
        v38 = get_local ptr { [u8; 64] }, secp256k1, !56
        v39 = load v38, !35
        v40 = get_local ptr { { { u64, u64 }, u64 } }, message, !58
        v41 = load v40, !35
        v42 = get_local ptr { [u8; 64] }, __tmp_arg1
        store v39 to v42
        v43 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        store v41 to v43
        v44 = call address_7(v42, v43)
        v45 = const unit ()
        ret () v45
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }) -> { u64, ( { b256 } | { u64 } ) }, !61 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !66
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !67
        v5 = const u64 0, !65
        store v5 to v4, !68
        v6 = ptr_to_int v1 to u64, !71
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !72
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !75
        v10 = load v9, !76
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v10 to v11
        v12 = call len_20(v11)
        v13 = const u64 32, !77
        v14 = cmp eq v12 v13, !83
        v15 = const bool false, !84
        v16 = cmp eq v14 v15, !87
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !88

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !91
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !92
        v20 = const u64 0, !90
        store v20 to v19, !93
        v21 = load v17, !94
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v21 to v22
        br recover_8_block0(v22), !96

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !97
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !98
        v26 = const u64 1, !90
        store v26 to v25, !99
        v27 = load v9, !100
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v27 to v28
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> b256 bits, !102 {
        }
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v23, ptr b256, v31, v32, !103
        store v30 to v33, !104
        v34 = load v23, !105
        v35 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v34 to v35
        br recover_8_block0(v35), !106

        recover_8_block0(v36: ptr { u64, ( () | b256 ) }):
        v37 = load v36
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !110
        store v37 to v38, !111
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !113
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !114
        v42 = load v41, !115
        v43 = const u64 1, !112
        v44 = cmp eq v42 v43, !118
        cbr v44, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !119

        recover_8_unwrap_14_block0():
        v45 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !120
        v46 = const u64 1
        v47 = const u64 1
        v48 = get_elem_ptr v45, ptr b256, v46, v47, !121
        v49 = load v48, !122
        v50 = get_local ptr b256, inner_value, !124
        store v49 to v50, !125
        v51 = get_local ptr b256, inner_value, !127
        v52 = load v51, !128
        v53 = const u64 32, !130
        v54 = asm(size: v53) -> u64 hp, !144 {
            aloc   size, !145
        }
        v55 = get_local ptr { u64, u64 }, __anon_00000, !147
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !148
        store v54 to v57, !149
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !150
        store v53 to v59, !151
        v60 = load v55, !152
        v61 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !154
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { u64, u64 }, v62, !155
        store v60 to v63, !156
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !157
        v66 = const u64 0, !158
        store v66 to v65, !159
        v67 = load v61, !160
        v68 = get_local ptr { { u64, u64 }, u64 }, bytes, !162
        store v67 to v68, !163
        v69 = get_local ptr { { u64, u64 }, u64 }, bytes, !165
        v70 = const u64 1
        v71 = get_elem_ptr v69, ptr u64, v70, !166
        v72 = const u64 32, !167
        store v72 to v71, !168
        v73 = ptr_to_int v52 to u64, !170
        v74 = get_local ptr { { u64, u64 }, u64 }, bytes, !172
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr { u64, u64 }, v75, !174
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !176
        v79 = load v78, !177
        v80 = const u64 32, !178
        v81 = asm(dst: v79, src: v73, len: v80) -> (), !183 {
            mcp    dst src len, !184
        }
        v82 = get_local ptr { { u64, u64 }, u64 }, bytes, !186
        v83 = load v82, !187
        v84 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !189
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { { u64, u64 }, u64 }, v85, !190
        store v83 to v86, !191
        v87 = load v84, !192
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v88, v89, !193
        store v87 to v90, !194
        v91 = load v2, !195
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !196
        store v91 to v92, !196
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !62
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !62
        v96 = load v95
        v97 = const u64 0, !62
        v98 = cmp eq v96 v97, !199
        cbr v98, block0(), block1(), !197

        recover_8_unwrap_14_block1():
        v99 = const u64 0, !200
        revert v99, !205

        block0():
        v100 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !62
        v101 = const u64 1
        v102 = const u64 0
        v103 = get_elem_ptr v100, ptr { { { u64, u64 }, u64 } }, v101, v102
        v104 = load v103
        v105 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !206
        store v104 to v105, !206
        v106 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !65
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !65
        v109 = const u64 0, !65
        store v109 to v108, !65
        v110 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !207
        v111 = load v110
        v112 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        store v111 to v112
        v113 = call sha256_24(v112)
        v114 = get_local ptr { b256 }, __anon_02, !212
        v115 = const u64 0
        v116 = get_elem_ptr v114, ptr b256, v115, !213
        store v113 to v116, !214
        v117 = load v114, !213
        v118 = const u64 1
        v119 = const u64 0
        v120 = get_elem_ptr v106, ptr { b256 }, v118, v119, !65
        store v117 to v120, !65
        v121 = load v106
        v122 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v121 to v122
        br block5(v122)

        block1():
        v123 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !62
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr u64, v124, !62
        v126 = load v125
        v127 = const u64 1, !62
        v128 = cmp eq v126 v127, !217
        cbr v128, block2(), block3(), !215

        block2():
        v129 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !62
        v130 = const u64 1
        v131 = const u64 1
        v132 = get_elem_ptr v129, ptr { u64 }, v130, v131
        v133 = load v132
        v134 = get_local ptr { u64 }, e, !218
        store v133 to v134, !218
        v135 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !65
        v136 = const u64 0
        v137 = get_elem_ptr v135, ptr u64, v136, !65
        v138 = const u64 1, !65
        store v138 to v137, !65
        v139 = get_local ptr { u64 }, e, !219
        v140 = load v139
        v141 = const u64 1
        v142 = const u64 1
        v143 = get_elem_ptr v135, ptr { u64 }, v141, v142, !65
        store v140 to v143, !65
        v144 = load v135
        v145 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v144 to v145
        br block5(v145)

        block3():
        v146 = const u64 14757395258967588866, !196
        revert v146, !196

        block5(v147: ptr { u64, ( { b256 } | { u64 } ) }):
        v148 = load v147
        ret { u64, ( { b256 } | { u64 } ) } v148
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !222 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !223
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !226 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !173
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !229 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !175
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }) -> b256, !234 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }):
        v0 = load s
        v1 = call new_25(), !237
        v2 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !238
        store v1 to v2, !238
        v3 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !239
        v4 = ptr_to_int v0 to u64, !242
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !242
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !244
        v8 = load v7, !242
        v9 = const u64 0
        v10 = get_elem_ptr v3, ptr { { u64, u64 }, u64 }, v9, !248
        v11 = ptr_to_int v8 to u64, !249
        v12 = int_to_ptr v11 to ptr { { u64, u64 }, u64 }, !250
        v13 = load v12, !253
        v14 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v13 to v14
        v15 = call len_20(v14)
        v16 = const u64 0, !254
        v17 = cmp eq v15 v16, !257
        cbr v17, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !258

        hash_26_write_27_append_28_block1():
        v18 = const u64 1
        v19 = get_elem_ptr v10, ptr u64, v18, !259
        v20 = load v19, !260
        v21 = const u64 0, !261
        v22 = cmp eq v20 v21, !264
        cbr v22, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !265

        hash_26_write_27_append_28_block3():
        v23 = load v12, !266
        store v23 to v10, !268
        br hash_26_write_27_block0(), !270

        hash_26_write_27_append_28_block4():
        v24 = load v19, !271
        v25 = add v24, v15, !274
        v26 = load v19, !275
        v27 = const u64 0
        v28 = get_elem_ptr v10, ptr { u64, u64 }, v27, !276
        v29 = load v28, !277
        v30 = get_local ptr { u64, u64 }, __tmp_arg5
        store v29 to v30
        v31 = call capacity_31(v30)
        v32 = cmp lt v31 v25, !280
        cbr v32, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !281

        hash_26_write_27_append_28_block6():
        v33 = load v28, !282
        v34 = get_local ptr { u64, u64 }, __tmp_arg3
        store v33 to v34
        v35 = call ptr_22(v34)
        v36 = load v28, !283
        v37 = get_local ptr { u64, u64 }, __tmp_arg6
        store v36 to v37
        v38 = call capacity_31(v37)
        v39 = cmp gt v25 v38, !288
        cbr v39, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !289

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v40 = asm(size: v25) -> u64 hp, !292 {
            aloc   size, !145
        }
        v41 = const u64 0, !293
        v42 = cmp gt v38 v41, !296
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v40), !297

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v43 = asm(dst: v40, src: v35, len: v38) -> (), !300 {
            mcp    dst src len, !184
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v40), !301

        hash_26_write_27_append_28_realloc_bytes_35_block5(v44: u64):
        v45 = get_local ptr { u64, u64 }, __anon_0, !306
        v46 = const u64 0
        v47 = get_elem_ptr v45, ptr u64, v46, !307
        store v44 to v47, !308
        v48 = const u64 1
        v49 = get_elem_ptr v45, ptr u64, v48, !309
        store v25 to v49, !310
        v50 = load v45, !311
        v51 = asm(ptr: v50) -> slice ptr, !315 {
        }
        v52 = get_local ptr slice, new_slice, !317
        store v51 to v52, !318
        v53 = get_local ptr slice, new_slice, !320
        v54 = load v53, !321
        v55 = asm(ptr: v54) -> { u64, u64 } ptr, !329 {
        }
        v56 = get_local ptr { u64, u64 }, __anon_000, !330
        store v55 to v56, !331
        v57 = const u64 1
        v58 = get_elem_ptr v56, ptr u64, v57, !333
        v59 = load v58, !334
        v60 = asm(size: v59) -> u64 hp, !337 {
            aloc   size, !145
        }
        v61 = const u64 0, !338
        v62 = cmp gt v59 v61, !341
        cbr v62, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !342

        hash_26_write_27_append_28_from_37_block0():
        v63 = asm(ptr: v54) -> { u64, u64 } ptr, !347 {
        }
        v64 = get_local ptr { u64, u64 }, __anon_01, !348
        store v63 to v64, !349
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65, !351
        v67 = load v66, !352
        v68 = asm(dst: v60, src: v67, len: v59) -> (), !356 {
            mcp    dst src len, !357
        }
        br hash_26_write_27_append_28_from_37_block2(), !358

        hash_26_write_27_append_28_from_37_block2():
        v69 = get_local ptr { u64, u64 }, __anon_00, !360
        v70 = const u64 0
        v71 = get_elem_ptr v69, ptr u64, v70, !361
        store v60 to v71, !362
        v72 = const u64 1
        v73 = get_elem_ptr v69, ptr u64, v72, !363
        store v59 to v73, !364
        v74 = load v69, !365
        store v74 to v28, !367
        br hash_26_write_27_append_28_block8(), !368

        hash_26_write_27_append_28_block8():
        v75 = load v28, !369
        v76 = get_local ptr { u64, u64 }, __tmp_arg4
        store v75 to v76
        v77 = call ptr_22(v76)
        v78 = asm(ptr: v77, offset: v26, new) -> u64 new, !373 {
            add    new ptr offset, !374
        }
        v79 = load v12, !375
        v80 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v79 to v80
        v81 = call ptr_21(v80)
        v82 = asm(dst: v78, src: v81, len: v15) -> (), !378 {
            mcp    dst src len, !184
        }
        store v25 to v19, !380
        br hash_26_write_27_block0(), !381

        hash_26_write_27_block0():
        v83 = get_local ptr b256, __const
        v84 = load v83
        v85 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !382
        v86 = load v85
        v87 = get_local ptr b256, result_buffer, !386
        store v84 to v87, !387
        v88 = get_local ptr b256, result_buffer, !389
        v89 = ptr_to_int v86 to u64, !390
        v90 = int_to_ptr v89 to ptr { { { u64, u64 }, u64 } }, !390
        v91 = const u64 0
        v92 = get_elem_ptr v90, ptr { { u64, u64 }, u64 }, v91, !391
        v93 = load v92, !390
        v94 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        store v93 to v94
        v95 = call ptr_21(v94)
        v96 = load v92, !390
        v97 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v96 to v97
        v98 = call len_20(v97)
        v99 = asm(hash: v88, ptr: v95, bytes: v98) -> b256 hash, !393 {
            s256   hash ptr bytes, !394
        }
        ret b256 v99
    }

    pub fn new_25() -> { { { u64, u64 }, u64 } }, !397 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry():
        v0 = const u64 0, !398
        v1 = asm(size: v0) -> u64 hp, !405 {
            aloc   size, !145
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !407
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !408
        store v1 to v4, !409
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !410
        v7 = const u64 0, !411
        store v7 to v6, !412
        v8 = load v2, !413
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !415
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !416
        store v8 to v11, !417
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !416
        v14 = const u64 0, !418
        store v14 to v13, !419
        v15 = load v9, !416
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !420
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !420
        v19 = load v16
        ret { { { u64, u64 }, u64 } } v19
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !423 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !424
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1006 1020
!8 = fn_call_path_span !6 1006 1018
!9 = (!4 !5 !7 !8)
!10 = span !6 992 1021
!11 = (!4 !5 !10)
!12 = (!4 !5 !10)
!13 = span !6 1042 1058
!14 = fn_call_path_span !6 1042 1056
!15 = span !6 314 323
!16 = (!4 !5 !13 !14 !15)
!17 = (!4 !5 !13 !14)
!18 = (!4 !5 !13 !14)
!19 = span !6 315 318
!20 = (!4 !5 !13 !14 !15)
!21 = (!4 !5 !13 !14)
!22 = (!4 !5 !13 !14)
!23 = (!4 !5 !13 !14)
!24 = (!4 !5 !13 !14)
!25 = span !6 289 334
!26 = (!4 !5 !13 !14 !25)
!27 = (!4 !5 !13 !14)
!28 = (!4 !5 !13 !14 !25)
!29 = (!4 !5 !13 !14)
!30 = span !6 1026 1059
!31 = (!4 !5 !30)
!32 = (!4 !5 !30)
!33 = span !6 1072 1081
!34 = (!4 !5 !33)
!35 = (!4 !5)
!36 = span !6 1085 1094
!37 = (!4 !5 !36)
!38 = span !6 1072 1094
!39 = fn_call_path_span !6 1082 1084
!40 = (!4 !5 !38 !39)
!41 = (!4 !5 !38 !39)
!42 = span !6 218 232
!43 = (!4 !5 !38 !39 !42)
!44 = (!4 !5 !38 !39)
!45 = (!4 !5 !38 !39)
!46 = (!4 !5 !38 !39 !42)
!47 = span !6 889 891
!48 = span !6 842 962
!49 = (!4 !5 !38 !39 !48)
!50 = span !6 907 926
!51 = span !6 1108 1117
!52 = (!4 !5 !51)
!53 = span !6 1126 1133
!54 = (!4 !5 !53)
!55 = span !6 1148 1157
!56 = (!4 !5 !55)
!57 = span !6 1166 1173
!58 = (!4 !5 !57)
!59 = span !6 492 714
!60 = fn_name_span !6 499 506
!61 = (!59 !60)
!62 = span !6 582 603
!63 = fn_call_path_span !6 587 594
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!65 = span !64 1815 1933
!66 = (!62 !63 !65)
!67 = (!62 !63 !65)
!68 = (!62 !63 !65)
!69 = span !6 451 469
!70 = fn_call_path_span !6 459 467
!71 = (!62 !63 !69 !70)
!72 = (!62 !63 !69 !70)
!73 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!74 = span !73 329 341
!75 = (!62 !63 !69 !70 !74)
!76 = (!62 !63 !69 !70)
!77 = span !73 1593 1595
!78 = span !73 1573 1595
!79 = fn_call_path_span !73 1590 1592
!80 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!81 = span !80 15515 15529
!82 = fn_call_path_span !80 15520 15522
!83 = (!62 !63 !69 !70 !78 !79 !81 !82)
!84 = span !80 12533 12538
!85 = span !80 15514 15536
!86 = fn_call_path_span !80 15531 15534
!87 = (!62 !63 !69 !70 !78 !79 !85 !86)
!88 = (!62 !63 !69 !70 !78)
!89 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!90 = span !89 2461 2560
!91 = (!62 !63 !69 !70 !90)
!92 = (!62 !63 !69 !70 !90)
!93 = (!62 !63 !69 !70 !90)
!94 = (!62 !63 !69 !70)
!95 = span !73 1610 1621
!96 = (!62 !63 !69 !70 !95)
!97 = (!62 !63 !69 !70 !90)
!98 = (!62 !63 !69 !70 !90)
!99 = (!62 !63 !69 !70 !90)
!100 = (!62 !63 !69 !70)
!101 = span !73 1647 1709
!102 = (!62 !63 !69 !70 !101)
!103 = (!62 !63 !69 !70 !90)
!104 = (!62 !63 !69 !70 !90)
!105 = (!62 !63 !69 !70)
!106 = (!62 !63 !69 !70)
!107 = span !6 451 478
!108 = fn_call_path_span !6 470 476
!109 = span !89 4973 5075
!110 = (!62 !63 !107 !108 !109)
!111 = (!62 !63 !107 !108 !109)
!112 = span !89 4979 4983
!113 = (!62 !63 !107 !108 !112)
!114 = (!62 !63 !107 !108 !112)
!115 = (!62 !63 !107 !108)
!116 = span !89 4998 5037
!117 = fn_call_path_span !89 4998 5037
!118 = (!62 !63 !107 !108 !116 !117)
!119 = (!62 !63 !107 !108 !116)
!120 = (!62 !63 !107 !108 !112)
!121 = (!62 !63 !107 !108)
!122 = (!62 !63 !107 !108)
!123 = span !89 5009 5020
!124 = (!62 !63 !107 !108 !123)
!125 = (!62 !63 !107 !108 !123)
!126 = span !89 5025 5036
!127 = (!62 !63 !107 !108 !126)
!128 = (!62 !63 !107 !108)
!129 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!130 = span !129 28953 28955
!131 = span !6 435 479
!132 = fn_call_path_span !6 435 450
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!134 = span !133 3133 3150
!135 = fn_call_path_span !133 3133 3144
!136 = span !129 28933 28956
!137 = fn_call_path_span !129 28933 28952
!138 = span !129 4157 4190
!139 = fn_call_path_span !129 4157 4180
!140 = span !129 863 884
!141 = fn_call_path_span !129 863 874
!142 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!143 = span !142 3315 3378
!144 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139 !140 !141 !143)
!145 = span !142 3342 3351
!146 = span !129 839 922
!147 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139 !146)
!148 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139)
!149 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139 !146)
!150 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139)
!151 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139 !146)
!152 = (!62 !63 !131 !132 !134 !135 !136 !137 !138 !139)
!153 = span !129 4133 4221
!154 = (!62 !63 !131 !132 !134 !135 !136 !137 !153)
!155 = (!62 !63 !131 !132 !134 !135 !136 !137)
!156 = (!62 !63 !131 !132 !134 !135 !136 !137 !153)
!157 = (!62 !63 !131 !132 !134 !135 !136 !137)
!158 = span !129 4209 4210
!159 = (!62 !63 !131 !132 !134 !135 !136 !137 !153)
!160 = (!62 !63 !131 !132 !134 !135 !136 !137)
!161 = span !129 28917 28957
!162 = (!62 !63 !131 !132 !134 !135 !161)
!163 = (!62 !63 !131 !132 !134 !135 !161)
!164 = span !129 28966 28980
!165 = (!62 !63 !131 !132 !134 !135 !164)
!166 = (!62 !63 !131 !132 !134 !135 !164)
!167 = span !129 28978 28980
!168 = (!62 !63 !131 !132 !134 !135 !164)
!169 = span !129 29065 29077
!170 = (!62 !63 !131 !132 !134 !135 !169)
!171 = span !129 29092 29097
!172 = (!62 !63 !131 !132 !134 !135 !171)
!173 = span !129 2445 2458
!174 = (!62 !63 !131 !132 !134 !135 !173)
!175 = span !129 400 412
!176 = (!62 !63 !131 !132 !134 !135 !175)
!177 = (!62 !63 !131 !132 !134 !135)
!178 = span !129 29107 29109
!179 = span !129 29065 29110
!180 = fn_call_path_span !129 29078 29091
!181 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!182 = span !181 5999 6076
!183 = (!62 !63 !131 !132 !134 !135 !179 !180 !182)
!184 = span !181 6050 6065
!185 = span !129 29121 29126
!186 = (!62 !63 !131 !132 !134 !135 !185)
!187 = (!62 !63 !131 !132 !134 !135)
!188 = span !133 3107 3161
!189 = (!62 !63 !131 !132 !188)
!190 = (!62 !63 !131 !132)
!191 = (!62 !63 !131 !132 !188)
!192 = (!62 !63 !131 !132)
!193 = (!62 !63 !65)
!194 = (!62 !63 !65)
!195 = (!62 !63)
!196 = span !6 576 708
!197 = span !6 618 668
!198 = fn_call_path_span !6 618 668
!199 = (!197 !198)
!200 = span !89 5062 5063
!201 = span !89 5055 5064
!202 = fn_call_path_span !89 5055 5061
!203 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!204 = span !203 757 771
!205 = (!62 !63 !107 !108 !201 !202 !204)
!206 = span !6 621 628
!207 = span !6 657 664
!208 = span !6 636 666
!209 = fn_call_path_span !6 636 649
!210 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!211 = span !210 2370 2383
!212 = (!208 !209 !211)
!213 = (!208 !209)
!214 = (!208 !209 !211)
!215 = span !6 681 698
!216 = fn_call_path_span !6 681 698
!217 = (!215 !216)
!218 = span !6 685 686
!219 = span !6 695 696
!220 = span !129 13771 13819
!221 = fn_name_span !129 13778 13781
!222 = (!220 !221)
!223 = span !129 2506 2514
!224 = span !129 15175 15233
!225 = fn_name_span !129 15182 15185
!226 = (!224 !225)
!227 = span !129 978 1030
!228 = fn_name_span !129 985 988
!229 = (!227 !228)
!230 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!231 = span !230 9009 9138
!232 = fn_name_span !230 9016 9022
!233 = inline "never"
!234 = (!231 !232 !233)
!235 = span !230 9082 9095
!236 = fn_call_path_span !230 9082 9093
!237 = (!235 !236)
!238 = span !230 9065 9096
!239 = span !230 9108 9114
!240 = span !230 9101 9115
!241 = fn_call_path_span !230 9103 9107
!242 = (!240 !241)
!243 = span !133 524 536
!244 = (!240 !241 !243)
!245 = span !133 5123 5146
!246 = fn_call_path_span !133 5129 5134
!247 = span !230 142 154
!248 = (!240 !241 !245 !246 !247)
!249 = (!240 !241 !245 !246)
!250 = (!240 !241 !245 !246)
!251 = span !230 365 389
!252 = fn_call_path_span !230 376 382
!253 = (!240 !241 !245 !246 !251 !252)
!254 = span !129 18435 18436
!255 = span !129 18422 18436
!256 = fn_call_path_span !129 18432 18434
!257 = (!240 !241 !245 !246 !251 !252 !255 !256)
!258 = (!240 !241 !245 !246 !251 !252 !255)
!259 = (!240 !241 !245 !246 !251 !252 !223)
!260 = (!240 !241 !245 !246 !251 !252)
!261 = span !129 18572 18573
!262 = span !129 18560 18573
!263 = fn_call_path_span !129 18569 18571
!264 = (!240 !241 !245 !246 !251 !252 !262 !263)
!265 = (!240 !241 !245 !246 !251 !252 !262)
!266 = (!240 !241 !245 !246 !251 !252)
!267 = span !129 18588 18600
!268 = (!240 !241 !245 !246 !251 !252 !267)
!269 = span !129 18614 18620
!270 = (!240 !241 !245 !246 !251 !252 !269)
!271 = (!240 !241 !245 !246 !251 !252)
!272 = span !129 18657 18677
!273 = fn_call_path_span !129 18666 18667
!274 = (!240 !241 !245 !246 !251 !252 !272 !273)
!275 = (!240 !241 !245 !246 !251 !252)
!276 = (!240 !241 !245 !246 !251 !252 !173)
!277 = (!240 !241 !245 !246 !251 !252)
!278 = span !129 18808 18838
!279 = fn_call_path_span !129 18828 18829
!280 = (!240 !241 !245 !246 !251 !252 !278 !279)
!281 = (!240 !241 !245 !246 !251 !252 !278)
!282 = (!240 !241 !245 !246 !251 !252)
!283 = (!240 !241 !245 !246 !251 !252)
!284 = span !129 18914 18974
!285 = fn_call_path_span !129 18914 18927
!286 = span !142 4168 4185
!287 = fn_call_path_span !142 4178 4179
!288 = (!240 !241 !245 !246 !251 !252 !284 !285 !286 !287)
!289 = (!240 !241 !245 !246 !251 !252 !284 !285 !286)
!290 = span !142 4210 4232
!291 = fn_call_path_span !142 4210 4221
!292 = (!240 !241 !245 !246 !251 !252 !284 !285 !290 !291 !143)
!293 = span !142 4253 4254
!294 = span !142 4245 4254
!295 = fn_call_path_span !142 4251 4252
!296 = (!240 !241 !245 !246 !251 !252 !284 !285 !294 !295)
!297 = (!240 !241 !245 !246 !251 !252 !284 !285 !294)
!298 = span !142 4269 4302
!299 = fn_call_path_span !142 4273 4286
!300 = (!240 !241 !245 !246 !251 !252 !284 !285 !298 !299 !182)
!301 = (!240 !241 !245 !246 !251 !252 !284 !285)
!302 = span !129 18869 19015
!303 = fn_call_path_span !129 18869 18890
!304 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!305 = span !304 2362 2393
!306 = (!240 !241 !245 !246 !251 !252 !302 !303 !305)
!307 = (!240 !241 !245 !246 !251 !252 !302 !303 !305)
!308 = (!240 !241 !245 !246 !251 !252 !302 !303 !305)
!309 = (!240 !241 !245 !246 !251 !252 !302 !303 !305)
!310 = (!240 !241 !245 !246 !251 !252 !302 !303 !305)
!311 = (!240 !241 !245 !246 !251 !252 !302 !303)
!312 = span !304 2351 2394
!313 = fn_call_path_span !304 2351 2361
!314 = span !304 1248 1294
!315 = (!240 !241 !245 !246 !251 !252 !302 !303 !312 !313 !314)
!316 = span !129 18853 19016
!317 = (!240 !241 !245 !246 !251 !252 !316)
!318 = (!240 !241 !245 !246 !251 !252 !316)
!319 = span !129 19055 19064
!320 = (!240 !241 !245 !246 !251 !252 !319)
!321 = (!240 !241 !245 !246 !251 !252)
!322 = span !129 19040 19065
!323 = fn_call_path_span !129 19040 19054
!324 = span !129 2130 2153
!325 = fn_call_path_span !129 2136 2151
!326 = span !304 3959 3975
!327 = fn_call_path_span !304 3959 3969
!328 = span !304 1624 1675
!329 = (!240 !241 !245 !246 !251 !252 !322 !323 !324 !325 !326 !327 !328)
!330 = (!240 !241 !245 !246 !251 !252 !322 !323 !324 !325)
!331 = (!240 !241 !245 !246 !251 !252 !322 !323 !324 !325)
!332 = span !304 3976 3977
!333 = (!240 !241 !245 !246 !251 !252 !322 !323 !324 !325 !332)
!334 = (!240 !241 !245 !246 !251 !252 !322 !323 !324 !325)
!335 = span !129 2173 2189
!336 = fn_call_path_span !129 2173 2184
!337 = (!240 !241 !245 !246 !251 !252 !322 !323 !335 !336 !143)
!338 = span !129 2208 2209
!339 = span !129 2202 2209
!340 = fn_call_path_span !129 2206 2207
!341 = (!240 !241 !245 !246 !251 !252 !322 !323 !339 !340)
!342 = (!240 !241 !245 !246 !251 !252 !322 !323 !339)
!343 = span !129 2224 2235
!344 = fn_call_path_span !129 2230 2233
!345 = span !304 2911 2927
!346 = fn_call_path_span !304 2911 2921
!347 = (!240 !241 !245 !246 !251 !252 !322 !323 !343 !344 !345 !346 !328)
!348 = (!240 !241 !245 !246 !251 !252 !322 !323 !343 !344)
!349 = (!240 !241 !245 !246 !251 !252 !322 !323 !343 !344)
!350 = span !304 2928 2929
!351 = (!240 !241 !245 !246 !251 !252 !322 !323 !343 !344 !350)
!352 = (!240 !241 !245 !246 !251 !252 !322 !323 !343 !344)
!353 = span !129 2224 2259
!354 = fn_call_path_span !129 2236 2243
!355 = span !181 3447 3522
!356 = (!240 !241 !245 !246 !251 !252 !322 !323 !353 !354 !355)
!357 = span !181 3496 3511
!358 = (!240 !241 !245 !246 !251 !252 !322 !323)
!359 = span !129 2279 2296
!360 = (!240 !241 !245 !246 !251 !252 !322 !323 !359)
!361 = (!240 !241 !245 !246 !251 !252 !322 !323)
!362 = (!240 !241 !245 !246 !251 !252 !322 !323 !359)
!363 = (!240 !241 !245 !246 !251 !252 !322 !323)
!364 = (!240 !241 !245 !246 !251 !252 !322 !323 !359)
!365 = (!240 !241 !245 !246 !251 !252 !322 !323)
!366 = span !129 19029 19065
!367 = (!240 !241 !245 !246 !251 !252 !366)
!368 = (!240 !241 !245 !246 !251 !252)
!369 = (!240 !241 !245 !246 !251 !252)
!370 = span !129 19100 19143
!371 = fn_call_path_span !129 19115 19130
!372 = span !181 6721 6825
!373 = (!240 !241 !245 !246 !251 !252 !370 !371 !372)
!374 = span !181 6771 6789
!375 = (!240 !241 !245 !246 !251 !252)
!376 = span !129 19153 19198
!377 = fn_call_path_span !129 19165 19178
!378 = (!240 !241 !245 !246 !251 !252 !376 !377 !182)
!379 = span !129 19244 19263
!380 = (!240 !241 !245 !246 !251 !252 !379)
!381 = (!240 !241 !245 !246 !251 !252)
!382 = span !230 9121 9127
!383 = span !230 9121 9136
!384 = fn_call_path_span !230 9128 9134
!385 = span !230 440 476
!386 = (!383 !384 !385)
!387 = (!383 !384 !385)
!388 = span !230 508 521
!389 = (!383 !384 !388)
!390 = (!383 !384)
!391 = (!383 !384 !247)
!392 = span !230 485 672
!393 = (!383 !384 !392)
!394 = span !230 619 638
!395 = span !230 177 263
!396 = fn_name_span !230 184 187
!397 = (!395 !396)
!398 = span !129 570 571
!399 = span !230 234 246
!400 = fn_call_path_span !230 234 244
!401 = span !129 3079 3094
!402 = fn_call_path_span !129 3079 3092
!403 = span !129 558 572
!404 = fn_call_path_span !129 558 569
!405 = (!399 !400 !401 !402 !403 !404 !143)
!406 = span !129 534 603
!407 = (!399 !400 !401 !402 !406)
!408 = (!399 !400 !401 !402)
!409 = (!399 !400 !401 !402 !406)
!410 = (!399 !400 !401 !402)
!411 = span !129 591 592
!412 = (!399 !400 !401 !402 !406)
!413 = (!399 !400 !401 !402)
!414 = span !129 3055 3125
!415 = (!399 !400 !414)
!416 = (!399 !400)
!417 = (!399 !400 !414)
!418 = span !129 3113 3114
!419 = (!399 !400 !414)
!420 = span !230 208 257
!421 = span !129 1081 1134
!422 = fn_name_span !129 1088 1096
!423 = (!421 !422)
!424 = span !129 418 426

// IR: [ret-demotion] Demotion of by-value function return values to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = load v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        store v2 to v3, !9
        v4 = get_local ptr [u8; 64], __anon_0, !13
        v5 = const u64 0
        br play_0_new_5_array_init_loop(v5), !14

        play_0_new_5_array_init_loop(v6: u64):
        v7 = get_elem_ptr v4, ptr u8, v6, !15
        v8 = const u8 0, !16
        store v8 to v7, !17
        v9 = const u64 1
        v10 = add v6, v9, !18
        v11 = const u64 64
        v12 = cmp lt v10 v11, !19
        cbr v12, play_0_new_5_array_init_loop(v10), play_0_new_5_array_init_exit(), !20

        play_0_new_5_array_init_exit():
        v13 = load v4, !21
        v14 = get_local ptr { [u8; 64] }, __anon_1, !23
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr [u8; 64], v15, !24
        store v13 to v16, !25
        v17 = load v14, !26
        v18 = get_local ptr { [u8; 64] }, secp256k1, !28
        store v17 to v18, !29
        v19 = get_local ptr { [u8; 64] }, secp256k1, !31
        v20 = load v19, !32
        v21 = get_local ptr { [u8; 64] }, secp256k1, !34
        v22 = load v21, !32
        v23 = ptr_to_int v20 to u64, !37
        v24 = int_to_ptr v23 to ptr { [u8; 64] }, !38
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr [u8; 64], v25, !40
        v27 = ptr_to_int v22 to u64, !41
        v28 = int_to_ptr v27 to ptr { [u8; 64] }, !42
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr [u8; 64], v29, !43
        v31 = const u64 64, !44
        v32 = asm(result, r2: v26, r3: v30, r4: v31) -> bool result, !46 {
            meq    result r2 r3 r4, !47
        }
        v33 = get_local ptr { [u8; 64] }, secp256k1, !49
        v34 = load v33, !32
        v35 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v36 = load v35, !32
        v37 = get_local ptr { [u8; 64] }, __tmp_arg
        store v34 to v37
        v38 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        store v36 to v38
        v39 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v40 = call address_7(v37, v38, v39)
        v41 = load v40
        v42 = get_local ptr { [u8; 64] }, secp256k1, !53
        v43 = load v42, !32
        v44 = get_local ptr { { { u64, u64 }, u64 } }, message, !55
        v45 = load v44, !32
        v46 = get_local ptr { [u8; 64] }, __tmp_arg1
        store v43 to v46
        v47 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        store v45 to v47
        v48 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v49 = call address_7(v46, v47, v48)
        v50 = load v49
        v51 = const unit ()
        ret () v51
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !58 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !63
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !64
        v5 = const u64 0, !62
        store v5 to v4, !65
        v6 = ptr_to_int v1 to u64, !68
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !69
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !72
        v10 = load v9, !73
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v10 to v11
        v12 = call len_20(v11)
        v13 = const u64 32, !74
        v14 = cmp eq v12 v13, !80
        v15 = const bool false, !81
        v16 = cmp eq v14 v15, !84
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !85

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !88
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !89
        v20 = const u64 0, !87
        store v20 to v19, !90
        v21 = load v17, !91
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v21 to v22
        br recover_8_block0(v22), !93

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !94
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !95
        v26 = const u64 1, !87
        store v26 to v25, !96
        v27 = load v9, !97
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v27 to v28
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> b256 bits, !99 {
        }
        v31 = const u64 1
        v32 = const u64 1
        v33 = get_elem_ptr v23, ptr b256, v31, v32, !100
        store v30 to v33, !101
        v34 = load v23, !102
        v35 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v34 to v35
        br recover_8_block0(v35), !103

        recover_8_block0(v36: ptr { u64, ( () | b256 ) }):
        v37 = load v36
        v38 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !107
        store v37 to v38, !108
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !110
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr u64, v40, !111
        v42 = load v41, !112
        v43 = const u64 1, !109
        v44 = cmp eq v42 v43, !115
        cbr v44, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !116

        recover_8_unwrap_14_block0():
        v45 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !117
        v46 = const u64 1
        v47 = const u64 1
        v48 = get_elem_ptr v45, ptr b256, v46, v47, !118
        v49 = load v48, !119
        v50 = get_local ptr b256, inner_value, !121
        store v49 to v50, !122
        v51 = get_local ptr b256, inner_value, !124
        v52 = load v51, !125
        v53 = const u64 32, !127
        v54 = asm(size: v53) -> u64 hp, !141 {
            aloc   size, !142
        }
        v55 = get_local ptr { u64, u64 }, __anon_00000, !144
        v56 = const u64 0
        v57 = get_elem_ptr v55, ptr u64, v56, !145
        store v54 to v57, !146
        v58 = const u64 1
        v59 = get_elem_ptr v55, ptr u64, v58, !147
        store v53 to v59, !148
        v60 = load v55, !149
        v61 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !151
        v62 = const u64 0
        v63 = get_elem_ptr v61, ptr { u64, u64 }, v62, !152
        store v60 to v63, !153
        v64 = const u64 1
        v65 = get_elem_ptr v61, ptr u64, v64, !154
        v66 = const u64 0, !155
        store v66 to v65, !156
        v67 = load v61, !157
        v68 = get_local ptr { { u64, u64 }, u64 }, bytes, !159
        store v67 to v68, !160
        v69 = get_local ptr { { u64, u64 }, u64 }, bytes, !162
        v70 = const u64 1
        v71 = get_elem_ptr v69, ptr u64, v70, !163
        v72 = const u64 32, !164
        store v72 to v71, !165
        v73 = ptr_to_int v52 to u64, !167
        v74 = get_local ptr { { u64, u64 }, u64 }, bytes, !169
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr { u64, u64 }, v75, !171
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr u64, v77, !173
        v79 = load v78, !174
        v80 = const u64 32, !175
        v81 = asm(dst: v79, src: v73, len: v80) -> (), !180 {
            mcp    dst src len, !181
        }
        v82 = get_local ptr { { u64, u64 }, u64 }, bytes, !183
        v83 = load v82, !184
        v84 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !186
        v85 = const u64 0
        v86 = get_elem_ptr v84, ptr { { u64, u64 }, u64 }, v85, !187
        store v83 to v86, !188
        v87 = load v84, !189
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v88, v89, !190
        store v87 to v90, !191
        v91 = load v2, !192
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !193
        store v91 to v92, !193
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr u64, v94, !59
        v96 = load v95
        v97 = const u64 0, !59
        v98 = cmp eq v96 v97, !196
        cbr v98, block0(), block1(), !194

        recover_8_unwrap_14_block1():
        v99 = const u64 0, !197
        revert v99, !202

        block0():
        v100 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v101 = const u64 1
        v102 = const u64 0
        v103 = get_elem_ptr v100, ptr { { { u64, u64 }, u64 } }, v101, v102
        v104 = load v103
        v105 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !203
        store v104 to v105, !203
        v106 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !62
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr u64, v107, !62
        v109 = const u64 0, !62
        store v109 to v108, !62
        v110 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !204
        v111 = load v110
        v112 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        store v111 to v112
        v113 = get_local ptr b256, __ret_val
        v114 = call sha256_24(v112, v113)
        v115 = load v114
        v116 = get_local ptr { b256 }, __anon_02, !209
        v117 = const u64 0
        v118 = get_elem_ptr v116, ptr b256, v117, !210
        store v115 to v118, !211
        v119 = load v116, !210
        v120 = const u64 1
        v121 = const u64 0
        v122 = get_elem_ptr v106, ptr { b256 }, v120, v121, !62
        store v119 to v122, !62
        v123 = load v106
        v124 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v123 to v124
        br block5(v124)

        block1():
        v125 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v126 = const u64 0
        v127 = get_elem_ptr v125, ptr u64, v126, !59
        v128 = load v127
        v129 = const u64 1, !59
        v130 = cmp eq v128 v129, !214
        cbr v130, block2(), block3(), !212

        block2():
        v131 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v132 = const u64 1
        v133 = const u64 1
        v134 = get_elem_ptr v131, ptr { u64 }, v132, v133
        v135 = load v134
        v136 = get_local ptr { u64 }, e, !215
        store v135 to v136, !215
        v137 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !62
        v138 = const u64 0
        v139 = get_elem_ptr v137, ptr u64, v138, !62
        v140 = const u64 1, !62
        store v140 to v139, !62
        v141 = get_local ptr { u64 }, e, !216
        v142 = load v141
        v143 = const u64 1
        v144 = const u64 1
        v145 = get_elem_ptr v137, ptr { u64 }, v143, v144, !62
        store v142 to v145, !62
        v146 = load v137
        v147 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v146 to v147
        br block5(v147)

        block3():
        v148 = const u64 14757395258967588866, !193
        revert v148, !193

        block5(v149: ptr { u64, ( { b256 } | { u64 } ) }):
        v150 = load v149
        store v150 to __ret_value
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !219 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !220
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !223 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !170
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !226 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !172
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !231 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v2 = call new_25(v1)
        v3 = load v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !232
        store v3 to v4, !232
        v5 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !233
        v6 = ptr_to_int v0 to u64, !236
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !236
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !238
        v10 = load v9, !236
        v11 = const u64 0
        v12 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v11, !242
        v13 = ptr_to_int v10 to u64, !243
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }, !244
        v15 = load v14, !247
        v16 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v15 to v16
        v17 = call len_20(v16)
        v18 = const u64 0, !248
        v19 = cmp eq v17 v18, !251
        cbr v19, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !252

        hash_26_write_27_append_28_block1():
        v20 = const u64 1
        v21 = get_elem_ptr v12, ptr u64, v20, !253
        v22 = load v21, !254
        v23 = const u64 0, !255
        v24 = cmp eq v22 v23, !258
        cbr v24, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !259

        hash_26_write_27_append_28_block3():
        v25 = load v14, !260
        store v25 to v12, !262
        br hash_26_write_27_block0(), !264

        hash_26_write_27_append_28_block4():
        v26 = load v21, !265
        v27 = add v26, v17, !268
        v28 = load v21, !269
        v29 = const u64 0
        v30 = get_elem_ptr v12, ptr { u64, u64 }, v29, !270
        v31 = load v30, !271
        v32 = get_local ptr { u64, u64 }, __tmp_arg5
        store v31 to v32
        v33 = call capacity_31(v32)
        v34 = cmp lt v33 v27, !274
        cbr v34, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !275

        hash_26_write_27_append_28_block6():
        v35 = load v30, !276
        v36 = get_local ptr { u64, u64 }, __tmp_arg3
        store v35 to v36
        v37 = call ptr_22(v36)
        v38 = load v30, !277
        v39 = get_local ptr { u64, u64 }, __tmp_arg6
        store v38 to v39
        v40 = call capacity_31(v39)
        v41 = cmp gt v27 v40, !282
        cbr v41, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !283

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v42 = asm(size: v27) -> u64 hp, !286 {
            aloc   size, !142
        }
        v43 = const u64 0, !287
        v44 = cmp gt v40 v43, !290
        cbr v44, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !291

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v45 = asm(dst: v42, src: v37, len: v40) -> (), !294 {
            mcp    dst src len, !181
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !295

        hash_26_write_27_append_28_realloc_bytes_35_block5(v46: u64):
        v47 = get_local ptr { u64, u64 }, __anon_0, !300
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !301
        store v46 to v49, !302
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !303
        store v27 to v51, !304
        v52 = load v47, !305
        v53 = asm(ptr: v52) -> slice ptr, !309 {
        }
        v54 = get_local ptr slice, new_slice, !311
        store v53 to v54, !312
        v55 = get_local ptr slice, new_slice, !314
        v56 = load v55, !315
        v57 = asm(ptr: v56) -> { u64, u64 } ptr, !323 {
        }
        v58 = get_local ptr { u64, u64 }, __anon_000, !324
        store v57 to v58, !325
        v59 = const u64 1
        v60 = get_elem_ptr v58, ptr u64, v59, !327
        v61 = load v60, !328
        v62 = asm(size: v61) -> u64 hp, !331 {
            aloc   size, !142
        }
        v63 = const u64 0, !332
        v64 = cmp gt v61 v63, !335
        cbr v64, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !336

        hash_26_write_27_append_28_from_37_block0():
        v65 = asm(ptr: v56) -> { u64, u64 } ptr, !341 {
        }
        v66 = get_local ptr { u64, u64 }, __anon_01, !342
        store v65 to v66, !343
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67, !345
        v69 = load v68, !346
        v70 = asm(dst: v62, src: v69, len: v61) -> (), !350 {
            mcp    dst src len, !351
        }
        br hash_26_write_27_append_28_from_37_block2(), !352

        hash_26_write_27_append_28_from_37_block2():
        v71 = get_local ptr { u64, u64 }, __anon_00, !354
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !355
        store v62 to v73, !356
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr u64, v74, !357
        store v61 to v75, !358
        v76 = load v71, !359
        store v76 to v30, !361
        br hash_26_write_27_append_28_block8(), !362

        hash_26_write_27_append_28_block8():
        v77 = load v30, !363
        v78 = get_local ptr { u64, u64 }, __tmp_arg4
        store v77 to v78
        v79 = call ptr_22(v78)
        v80 = asm(ptr: v79, offset: v28, new) -> u64 new, !367 {
            add    new ptr offset, !368
        }
        v81 = load v14, !369
        v82 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v81 to v82
        v83 = call ptr_21(v82)
        v84 = asm(dst: v80, src: v83, len: v17) -> (), !372 {
            mcp    dst src len, !181
        }
        store v27 to v21, !374
        br hash_26_write_27_block0(), !375

        hash_26_write_27_block0():
        v85 = get_local ptr b256, __const
        v86 = load v85
        v87 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !376
        v88 = load v87
        v89 = get_local ptr b256, result_buffer, !380
        store v86 to v89, !381
        v90 = get_local ptr b256, result_buffer, !383
        v91 = ptr_to_int v88 to u64, !384
        v92 = int_to_ptr v91 to ptr { { { u64, u64 }, u64 } }, !384
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr { { u64, u64 }, u64 }, v93, !385
        v95 = load v94, !384
        v96 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        store v95 to v96
        v97 = call ptr_21(v96)
        v98 = load v94, !384
        v99 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v98 to v99
        v100 = call len_20(v99)
        v101 = asm(hash: v90, ptr: v97, bytes: v100) -> b256 hash, !387 {
            s256   hash ptr bytes, !388
        }
        store v101 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !391 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !392
        v1 = asm(size: v0) -> u64 hp, !399 {
            aloc   size, !142
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !401
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !402
        store v1 to v4, !403
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !404
        v7 = const u64 0, !405
        store v7 to v6, !406
        v8 = load v2, !407
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !409
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !410
        store v8 to v11, !411
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !410
        v14 = const u64 0, !412
        store v14 to v13, !413
        v15 = load v9, !410
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !414
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !414
        v19 = load v16
        store v19 to __ret_value
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !417 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int v0 to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !418
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = (!4 !5 !7)
!10 = span !6 1042 1058
!11 = fn_call_path_span !6 1042 1056
!12 = span !6 314 323
!13 = (!4 !5 !10 !11 !12)
!14 = (!4 !5 !10 !11)
!15 = (!4 !5 !10 !11)
!16 = span !6 315 318
!17 = (!4 !5 !10 !11 !12)
!18 = (!4 !5 !10 !11)
!19 = (!4 !5 !10 !11)
!20 = (!4 !5 !10 !11)
!21 = (!4 !5 !10 !11)
!22 = span !6 289 334
!23 = (!4 !5 !10 !11 !22)
!24 = (!4 !5 !10 !11)
!25 = (!4 !5 !10 !11 !22)
!26 = (!4 !5 !10 !11)
!27 = span !6 1026 1059
!28 = (!4 !5 !27)
!29 = (!4 !5 !27)
!30 = span !6 1072 1081
!31 = (!4 !5 !30)
!32 = (!4 !5)
!33 = span !6 1085 1094
!34 = (!4 !5 !33)
!35 = span !6 1072 1094
!36 = fn_call_path_span !6 1082 1084
!37 = (!4 !5 !35 !36)
!38 = (!4 !5 !35 !36)
!39 = span !6 218 232
!40 = (!4 !5 !35 !36 !39)
!41 = (!4 !5 !35 !36)
!42 = (!4 !5 !35 !36)
!43 = (!4 !5 !35 !36 !39)
!44 = span !6 889 891
!45 = span !6 842 962
!46 = (!4 !5 !35 !36 !45)
!47 = span !6 907 926
!48 = span !6 1108 1117
!49 = (!4 !5 !48)
!50 = span !6 1126 1133
!51 = (!4 !5 !50)
!52 = span !6 1148 1157
!53 = (!4 !5 !52)
!54 = span !6 1166 1173
!55 = (!4 !5 !54)
!56 = span !6 492 714
!57 = fn_name_span !6 499 506
!58 = (!56 !57)
!59 = span !6 582 603
!60 = fn_call_path_span !6 587 594
!61 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!62 = span !61 1815 1933
!63 = (!59 !60 !62)
!64 = (!59 !60 !62)
!65 = (!59 !60 !62)
!66 = span !6 451 469
!67 = fn_call_path_span !6 459 467
!68 = (!59 !60 !66 !67)
!69 = (!59 !60 !66 !67)
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!71 = span !70 329 341
!72 = (!59 !60 !66 !67 !71)
!73 = (!59 !60 !66 !67)
!74 = span !70 1593 1595
!75 = span !70 1573 1595
!76 = fn_call_path_span !70 1590 1592
!77 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!78 = span !77 15515 15529
!79 = fn_call_path_span !77 15520 15522
!80 = (!59 !60 !66 !67 !75 !76 !78 !79)
!81 = span !77 12533 12538
!82 = span !77 15514 15536
!83 = fn_call_path_span !77 15531 15534
!84 = (!59 !60 !66 !67 !75 !76 !82 !83)
!85 = (!59 !60 !66 !67 !75)
!86 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!87 = span !86 2461 2560
!88 = (!59 !60 !66 !67 !87)
!89 = (!59 !60 !66 !67 !87)
!90 = (!59 !60 !66 !67 !87)
!91 = (!59 !60 !66 !67)
!92 = span !70 1610 1621
!93 = (!59 !60 !66 !67 !92)
!94 = (!59 !60 !66 !67 !87)
!95 = (!59 !60 !66 !67 !87)
!96 = (!59 !60 !66 !67 !87)
!97 = (!59 !60 !66 !67)
!98 = span !70 1647 1709
!99 = (!59 !60 !66 !67 !98)
!100 = (!59 !60 !66 !67 !87)
!101 = (!59 !60 !66 !67 !87)
!102 = (!59 !60 !66 !67)
!103 = (!59 !60 !66 !67)
!104 = span !6 451 478
!105 = fn_call_path_span !6 470 476
!106 = span !86 4973 5075
!107 = (!59 !60 !104 !105 !106)
!108 = (!59 !60 !104 !105 !106)
!109 = span !86 4979 4983
!110 = (!59 !60 !104 !105 !109)
!111 = (!59 !60 !104 !105 !109)
!112 = (!59 !60 !104 !105)
!113 = span !86 4998 5037
!114 = fn_call_path_span !86 4998 5037
!115 = (!59 !60 !104 !105 !113 !114)
!116 = (!59 !60 !104 !105 !113)
!117 = (!59 !60 !104 !105 !109)
!118 = (!59 !60 !104 !105)
!119 = (!59 !60 !104 !105)
!120 = span !86 5009 5020
!121 = (!59 !60 !104 !105 !120)
!122 = (!59 !60 !104 !105 !120)
!123 = span !86 5025 5036
!124 = (!59 !60 !104 !105 !123)
!125 = (!59 !60 !104 !105)
!126 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!127 = span !126 28953 28955
!128 = span !6 435 479
!129 = fn_call_path_span !6 435 450
!130 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!131 = span !130 3133 3150
!132 = fn_call_path_span !130 3133 3144
!133 = span !126 28933 28956
!134 = fn_call_path_span !126 28933 28952
!135 = span !126 4157 4190
!136 = fn_call_path_span !126 4157 4180
!137 = span !126 863 884
!138 = fn_call_path_span !126 863 874
!139 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!140 = span !139 3315 3378
!141 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136 !137 !138 !140)
!142 = span !139 3342 3351
!143 = span !126 839 922
!144 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136 !143)
!145 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136)
!146 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136 !143)
!147 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136)
!148 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136 !143)
!149 = (!59 !60 !128 !129 !131 !132 !133 !134 !135 !136)
!150 = span !126 4133 4221
!151 = (!59 !60 !128 !129 !131 !132 !133 !134 !150)
!152 = (!59 !60 !128 !129 !131 !132 !133 !134)
!153 = (!59 !60 !128 !129 !131 !132 !133 !134 !150)
!154 = (!59 !60 !128 !129 !131 !132 !133 !134)
!155 = span !126 4209 4210
!156 = (!59 !60 !128 !129 !131 !132 !133 !134 !150)
!157 = (!59 !60 !128 !129 !131 !132 !133 !134)
!158 = span !126 28917 28957
!159 = (!59 !60 !128 !129 !131 !132 !158)
!160 = (!59 !60 !128 !129 !131 !132 !158)
!161 = span !126 28966 28980
!162 = (!59 !60 !128 !129 !131 !132 !161)
!163 = (!59 !60 !128 !129 !131 !132 !161)
!164 = span !126 28978 28980
!165 = (!59 !60 !128 !129 !131 !132 !161)
!166 = span !126 29065 29077
!167 = (!59 !60 !128 !129 !131 !132 !166)
!168 = span !126 29092 29097
!169 = (!59 !60 !128 !129 !131 !132 !168)
!170 = span !126 2445 2458
!171 = (!59 !60 !128 !129 !131 !132 !170)
!172 = span !126 400 412
!173 = (!59 !60 !128 !129 !131 !132 !172)
!174 = (!59 !60 !128 !129 !131 !132)
!175 = span !126 29107 29109
!176 = span !126 29065 29110
!177 = fn_call_path_span !126 29078 29091
!178 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!179 = span !178 5999 6076
!180 = (!59 !60 !128 !129 !131 !132 !176 !177 !179)
!181 = span !178 6050 6065
!182 = span !126 29121 29126
!183 = (!59 !60 !128 !129 !131 !132 !182)
!184 = (!59 !60 !128 !129 !131 !132)
!185 = span !130 3107 3161
!186 = (!59 !60 !128 !129 !185)
!187 = (!59 !60 !128 !129)
!188 = (!59 !60 !128 !129 !185)
!189 = (!59 !60 !128 !129)
!190 = (!59 !60 !62)
!191 = (!59 !60 !62)
!192 = (!59 !60)
!193 = span !6 576 708
!194 = span !6 618 668
!195 = fn_call_path_span !6 618 668
!196 = (!194 !195)
!197 = span !86 5062 5063
!198 = span !86 5055 5064
!199 = fn_call_path_span !86 5055 5061
!200 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!201 = span !200 757 771
!202 = (!59 !60 !104 !105 !198 !199 !201)
!203 = span !6 621 628
!204 = span !6 657 664
!205 = span !6 636 666
!206 = fn_call_path_span !6 636 649
!207 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!208 = span !207 2370 2383
!209 = (!205 !206 !208)
!210 = (!205 !206)
!211 = (!205 !206 !208)
!212 = span !6 681 698
!213 = fn_call_path_span !6 681 698
!214 = (!212 !213)
!215 = span !6 685 686
!216 = span !6 695 696
!217 = span !126 13771 13819
!218 = fn_name_span !126 13778 13781
!219 = (!217 !218)
!220 = span !126 2506 2514
!221 = span !126 15175 15233
!222 = fn_name_span !126 15182 15185
!223 = (!221 !222)
!224 = span !126 978 1030
!225 = fn_name_span !126 985 988
!226 = (!224 !225)
!227 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!228 = span !227 9009 9138
!229 = fn_name_span !227 9016 9022
!230 = inline "never"
!231 = (!228 !229 !230)
!232 = span !227 9065 9096
!233 = span !227 9108 9114
!234 = span !227 9101 9115
!235 = fn_call_path_span !227 9103 9107
!236 = (!234 !235)
!237 = span !130 524 536
!238 = (!234 !235 !237)
!239 = span !130 5123 5146
!240 = fn_call_path_span !130 5129 5134
!241 = span !227 142 154
!242 = (!234 !235 !239 !240 !241)
!243 = (!234 !235 !239 !240)
!244 = (!234 !235 !239 !240)
!245 = span !227 365 389
!246 = fn_call_path_span !227 376 382
!247 = (!234 !235 !239 !240 !245 !246)
!248 = span !126 18435 18436
!249 = span !126 18422 18436
!250 = fn_call_path_span !126 18432 18434
!251 = (!234 !235 !239 !240 !245 !246 !249 !250)
!252 = (!234 !235 !239 !240 !245 !246 !249)
!253 = (!234 !235 !239 !240 !245 !246 !220)
!254 = (!234 !235 !239 !240 !245 !246)
!255 = span !126 18572 18573
!256 = span !126 18560 18573
!257 = fn_call_path_span !126 18569 18571
!258 = (!234 !235 !239 !240 !245 !246 !256 !257)
!259 = (!234 !235 !239 !240 !245 !246 !256)
!260 = (!234 !235 !239 !240 !245 !246)
!261 = span !126 18588 18600
!262 = (!234 !235 !239 !240 !245 !246 !261)
!263 = span !126 18614 18620
!264 = (!234 !235 !239 !240 !245 !246 !263)
!265 = (!234 !235 !239 !240 !245 !246)
!266 = span !126 18657 18677
!267 = fn_call_path_span !126 18666 18667
!268 = (!234 !235 !239 !240 !245 !246 !266 !267)
!269 = (!234 !235 !239 !240 !245 !246)
!270 = (!234 !235 !239 !240 !245 !246 !170)
!271 = (!234 !235 !239 !240 !245 !246)
!272 = span !126 18808 18838
!273 = fn_call_path_span !126 18828 18829
!274 = (!234 !235 !239 !240 !245 !246 !272 !273)
!275 = (!234 !235 !239 !240 !245 !246 !272)
!276 = (!234 !235 !239 !240 !245 !246)
!277 = (!234 !235 !239 !240 !245 !246)
!278 = span !126 18914 18974
!279 = fn_call_path_span !126 18914 18927
!280 = span !139 4168 4185
!281 = fn_call_path_span !139 4178 4179
!282 = (!234 !235 !239 !240 !245 !246 !278 !279 !280 !281)
!283 = (!234 !235 !239 !240 !245 !246 !278 !279 !280)
!284 = span !139 4210 4232
!285 = fn_call_path_span !139 4210 4221
!286 = (!234 !235 !239 !240 !245 !246 !278 !279 !284 !285 !140)
!287 = span !139 4253 4254
!288 = span !139 4245 4254
!289 = fn_call_path_span !139 4251 4252
!290 = (!234 !235 !239 !240 !245 !246 !278 !279 !288 !289)
!291 = (!234 !235 !239 !240 !245 !246 !278 !279 !288)
!292 = span !139 4269 4302
!293 = fn_call_path_span !139 4273 4286
!294 = (!234 !235 !239 !240 !245 !246 !278 !279 !292 !293 !179)
!295 = (!234 !235 !239 !240 !245 !246 !278 !279)
!296 = span !126 18869 19015
!297 = fn_call_path_span !126 18869 18890
!298 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!299 = span !298 2362 2393
!300 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!301 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!302 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!303 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!304 = (!234 !235 !239 !240 !245 !246 !296 !297 !299)
!305 = (!234 !235 !239 !240 !245 !246 !296 !297)
!306 = span !298 2351 2394
!307 = fn_call_path_span !298 2351 2361
!308 = span !298 1248 1294
!309 = (!234 !235 !239 !240 !245 !246 !296 !297 !306 !307 !308)
!310 = span !126 18853 19016
!311 = (!234 !235 !239 !240 !245 !246 !310)
!312 = (!234 !235 !239 !240 !245 !246 !310)
!313 = span !126 19055 19064
!314 = (!234 !235 !239 !240 !245 !246 !313)
!315 = (!234 !235 !239 !240 !245 !246)
!316 = span !126 19040 19065
!317 = fn_call_path_span !126 19040 19054
!318 = span !126 2130 2153
!319 = fn_call_path_span !126 2136 2151
!320 = span !298 3959 3975
!321 = fn_call_path_span !298 3959 3969
!322 = span !298 1624 1675
!323 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319 !320 !321 !322)
!324 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319)
!325 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319)
!326 = span !298 3976 3977
!327 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319 !326)
!328 = (!234 !235 !239 !240 !245 !246 !316 !317 !318 !319)
!329 = span !126 2173 2189
!330 = fn_call_path_span !126 2173 2184
!331 = (!234 !235 !239 !240 !245 !246 !316 !317 !329 !330 !140)
!332 = span !126 2208 2209
!333 = span !126 2202 2209
!334 = fn_call_path_span !126 2206 2207
!335 = (!234 !235 !239 !240 !245 !246 !316 !317 !333 !334)
!336 = (!234 !235 !239 !240 !245 !246 !316 !317 !333)
!337 = span !126 2224 2235
!338 = fn_call_path_span !126 2230 2233
!339 = span !298 2911 2927
!340 = fn_call_path_span !298 2911 2921
!341 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338 !339 !340 !322)
!342 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338)
!343 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338)
!344 = span !298 2928 2929
!345 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338 !344)
!346 = (!234 !235 !239 !240 !245 !246 !316 !317 !337 !338)
!347 = span !126 2224 2259
!348 = fn_call_path_span !126 2236 2243
!349 = span !178 3447 3522
!350 = (!234 !235 !239 !240 !245 !246 !316 !317 !347 !348 !349)
!351 = span !178 3496 3511
!352 = (!234 !235 !239 !240 !245 !246 !316 !317)
!353 = span !126 2279 2296
!354 = (!234 !235 !239 !240 !245 !246 !316 !317 !353)
!355 = (!234 !235 !239 !240 !245 !246 !316 !317)
!356 = (!234 !235 !239 !240 !245 !246 !316 !317 !353)
!357 = (!234 !235 !239 !240 !245 !246 !316 !317)
!358 = (!234 !235 !239 !240 !245 !246 !316 !317 !353)
!359 = (!234 !235 !239 !240 !245 !246 !316 !317)
!360 = span !126 19029 19065
!361 = (!234 !235 !239 !240 !245 !246 !360)
!362 = (!234 !235 !239 !240 !245 !246)
!363 = (!234 !235 !239 !240 !245 !246)
!364 = span !126 19100 19143
!365 = fn_call_path_span !126 19115 19130
!366 = span !178 6721 6825
!367 = (!234 !235 !239 !240 !245 !246 !364 !365 !366)
!368 = span !178 6771 6789
!369 = (!234 !235 !239 !240 !245 !246)
!370 = span !126 19153 19198
!371 = fn_call_path_span !126 19165 19178
!372 = (!234 !235 !239 !240 !245 !246 !370 !371 !179)
!373 = span !126 19244 19263
!374 = (!234 !235 !239 !240 !245 !246 !373)
!375 = (!234 !235 !239 !240 !245 !246)
!376 = span !227 9121 9127
!377 = span !227 9121 9136
!378 = fn_call_path_span !227 9128 9134
!379 = span !227 440 476
!380 = (!377 !378 !379)
!381 = (!377 !378 !379)
!382 = span !227 508 521
!383 = (!377 !378 !382)
!384 = (!377 !378)
!385 = (!377 !378 !241)
!386 = span !227 485 672
!387 = (!377 !378 !386)
!388 = span !227 619 638
!389 = span !227 177 263
!390 = fn_name_span !227 184 187
!391 = (!389 !390)
!392 = span !126 570 571
!393 = span !227 234 246
!394 = fn_call_path_span !227 234 244
!395 = span !126 3079 3094
!396 = fn_call_path_span !126 3079 3092
!397 = span !126 558 572
!398 = fn_call_path_span !126 558 569
!399 = (!393 !394 !395 !396 !397 !398 !140)
!400 = span !126 534 603
!401 = (!393 !394 !395 !396 !400)
!402 = (!393 !394 !395 !396)
!403 = (!393 !394 !395 !396 !400)
!404 = (!393 !394 !395 !396)
!405 = span !126 591 592
!406 = (!393 !394 !395 !396 !400)
!407 = (!393 !394 !395 !396)
!408 = span !126 3055 3125
!409 = (!393 !394 !408)
!410 = (!393 !394)
!411 = (!393 !394 !408)
!412 = span !126 3113 3114
!413 = (!393 !394 !408)
!414 = span !227 208 257
!415 = span !126 1081 1134
!416 = fn_name_span !126 1088 1096
!417 = (!415 !416)
!418 = span !126 418 426

// IR: [misc-demotion] Miscellaneous by-value demotions to by-reference
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = load v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        store v2 to v3, !9
        v4 = get_local ptr [u8; 64], __anon_0, !13
        v5 = const u64 0
        br play_0_new_5_array_init_loop(v5), !14

        play_0_new_5_array_init_loop(v6: u64):
        v7 = get_elem_ptr v4, ptr u8, v6, !15
        v8 = const u8 0, !16
        store v8 to v7, !17
        v9 = const u64 1
        v10 = add v6, v9, !18
        v11 = const u64 64
        v12 = cmp lt v10 v11, !19
        cbr v12, play_0_new_5_array_init_loop(v10), play_0_new_5_array_init_exit(), !20

        play_0_new_5_array_init_exit():
        v13 = load v4, !21
        v14 = get_local ptr { [u8; 64] }, __anon_1, !23
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr [u8; 64], v15, !24
        store v13 to v16, !25
        v17 = load v14, !26
        v18 = get_local ptr { [u8; 64] }, secp256k1, !28
        store v17 to v18, !29
        v19 = get_local ptr { [u8; 64] }, secp256k1, !31
        v20 = load v19, !32
        v21 = get_local ptr { [u8; 64] }, secp256k1, !34
        v22 = load v21, !32
        v23 = ptr_to_int v19 to u64, !37
        v24 = int_to_ptr v23 to ptr { [u8; 64] }, !38
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr [u8; 64], v25, !40
        v27 = ptr_to_int v21 to u64, !41
        v28 = int_to_ptr v27 to ptr { [u8; 64] }, !42
        v29 = const u64 0
        v30 = get_elem_ptr v28, ptr [u8; 64], v29, !43
        v31 = const u64 64, !44
        v32 = asm(result, r2: v26, r3: v30, r4: v31) -> bool result, !46 {
            meq    result r2 r3 r4, !47
        }
        v33 = get_local ptr { [u8; 64] }, secp256k1, !49
        v34 = load v33, !32
        v35 = get_local ptr { { { u64, u64 }, u64 } }, message, !51
        v36 = load v35, !32
        v37 = get_local ptr { [u8; 64] }, __tmp_arg
        store v34 to v37
        v38 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        store v36 to v38
        v39 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v40 = call address_7(v37, v38, v39)
        v41 = load v40
        v42 = get_local ptr { [u8; 64] }, secp256k1, !53
        v43 = load v42, !32
        v44 = get_local ptr { { { u64, u64 }, u64 } }, message, !55
        v45 = load v44, !32
        v46 = get_local ptr { [u8; 64] }, __tmp_arg1
        store v43 to v46
        v47 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        store v45 to v47
        v48 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v49 = call address_7(v46, v47, v48)
        v50 = load v49
        v51 = const unit ()
        ret () v51
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !58 {
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !63
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !64
        v5 = const u64 0, !62
        store v5 to v4, !65
        v6 = ptr_to_int message to u64, !68
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !69
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !72
        v10 = load v9, !73
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v10 to v11
        v12 = call len_20(v11)
        v13 = const u64 32, !74
        v14 = cmp eq v12 v13, !80
        v15 = const bool false, !81
        v16 = cmp eq v14 v15, !84
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !85

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !88
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !89
        v20 = const u64 0, !87
        store v20 to v19, !90
        v21 = load v17, !91
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v21 to v22
        br recover_8_block0(v22), !93

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !94
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !95
        v26 = const u64 1, !87
        store v26 to v25, !96
        v27 = load v9, !97
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v27 to v28
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> ptr b256 bits {
        }
        v31 = load v30
        v32 = const u64 1
        v33 = const u64 1
        v34 = get_elem_ptr v23, ptr b256, v32, v33, !98
        store v31 to v34, !99
        v35 = load v23, !100
        v36 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        store v35 to v36
        br recover_8_block0(v36), !101

        recover_8_block0(v37: ptr { u64, ( () | b256 ) }):
        v38 = load v37
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !105
        store v38 to v39, !106
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !108
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !109
        v43 = load v42, !110
        v44 = const u64 1, !107
        v45 = cmp eq v43 v44, !113
        cbr v45, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !114

        recover_8_unwrap_14_block0():
        v46 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !115
        v47 = const u64 1
        v48 = const u64 1
        v49 = get_elem_ptr v46, ptr b256, v47, v48, !116
        v50 = load v49, !117
        v51 = get_local ptr b256, inner_value, !119
        store v50 to v51, !120
        v52 = get_local ptr b256, inner_value, !122
        v53 = load v52, !123
        v54 = const u64 32, !125
        v55 = asm(size: v54) -> u64 hp, !139 {
            aloc   size, !140
        }
        v56 = get_local ptr { u64, u64 }, __anon_00000, !142
        v57 = const u64 0
        v58 = get_elem_ptr v56, ptr u64, v57, !143
        store v55 to v58, !144
        v59 = const u64 1
        v60 = get_elem_ptr v56, ptr u64, v59, !145
        store v54 to v60, !146
        v61 = load v56, !147
        v62 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !149
        v63 = const u64 0
        v64 = get_elem_ptr v62, ptr { u64, u64 }, v63, !150
        store v61 to v64, !151
        v65 = const u64 1
        v66 = get_elem_ptr v62, ptr u64, v65, !152
        v67 = const u64 0, !153
        store v67 to v66, !154
        v68 = load v62, !155
        v69 = get_local ptr { { u64, u64 }, u64 }, bytes, !157
        store v68 to v69, !158
        v70 = get_local ptr { { u64, u64 }, u64 }, bytes, !160
        v71 = const u64 1
        v72 = get_elem_ptr v70, ptr u64, v71, !161
        v73 = const u64 32, !162
        store v73 to v72, !163
        v74 = ptr_to_int v52 to u64, !165
        v75 = get_local ptr { { u64, u64 }, u64 }, bytes, !167
        v76 = const u64 0
        v77 = get_elem_ptr v75, ptr { u64, u64 }, v76, !169
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !171
        v80 = load v79, !172
        v81 = const u64 32, !173
        v82 = asm(dst: v80, src: v74, len: v81) -> (), !178 {
            mcp    dst src len, !179
        }
        v83 = get_local ptr { { u64, u64 }, u64 }, bytes, !181
        v84 = load v83, !182
        v85 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !184
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { { u64, u64 }, u64 }, v86, !185
        store v84 to v87, !186
        v88 = load v85, !187
        v89 = const u64 1
        v90 = const u64 0
        v91 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v89, v90, !188
        store v88 to v91, !189
        v92 = load v2, !190
        v93 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !191
        store v92 to v93, !191
        v94 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v95 = const u64 0
        v96 = get_elem_ptr v94, ptr u64, v95, !59
        v97 = load v96
        v98 = const u64 0, !59
        v99 = cmp eq v97 v98, !194
        cbr v99, block0(), block1(), !192

        recover_8_unwrap_14_block1():
        v100 = const u64 0, !195
        revert v100, !200

        block0():
        v101 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v102 = const u64 1
        v103 = const u64 0
        v104 = get_elem_ptr v101, ptr { { { u64, u64 }, u64 } }, v102, v103
        v105 = load v104
        v106 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !201
        store v105 to v106, !201
        v107 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !62
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr u64, v108, !62
        v110 = const u64 0, !62
        store v110 to v109, !62
        v111 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !202
        v112 = load v111
        v113 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        store v112 to v113
        v114 = get_local ptr b256, __ret_val
        v115 = call sha256_24(v113, v114)
        v116 = load v115
        v117 = get_local ptr { b256 }, __anon_02, !207
        v118 = const u64 0
        v119 = get_elem_ptr v117, ptr b256, v118, !208
        store v116 to v119, !209
        v120 = load v117, !208
        v121 = const u64 1
        v122 = const u64 0
        v123 = get_elem_ptr v107, ptr { b256 }, v121, v122, !62
        store v120 to v123, !62
        v124 = load v107
        v125 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v124 to v125
        br block5(v125)

        block1():
        v126 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127, !59
        v129 = load v128
        v130 = const u64 1, !59
        v131 = cmp eq v129 v130, !212
        cbr v131, block2(), block3(), !210

        block2():
        v132 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !59
        v133 = const u64 1
        v134 = const u64 1
        v135 = get_elem_ptr v132, ptr { u64 }, v133, v134
        v136 = load v135
        v137 = get_local ptr { u64 }, e, !213
        store v136 to v137, !213
        v138 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !62
        v139 = const u64 0
        v140 = get_elem_ptr v138, ptr u64, v139, !62
        v141 = const u64 1, !62
        store v141 to v140, !62
        v142 = get_local ptr { u64 }, e, !214
        v143 = load v142
        v144 = const u64 1
        v145 = const u64 1
        v146 = get_elem_ptr v138, ptr { u64 }, v144, v145, !62
        store v143 to v146, !62
        v147 = load v138
        v148 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        store v147 to v148
        br block5(v148)

        block3():
        v149 = const u64 14757395258967588866, !191
        revert v149, !191

        block5(v150: ptr { u64, ( { b256 } | { u64 } ) }):
        v151 = load v150
        store v151 to __ret_value
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !217 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !218
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !221 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !168
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        store v5 to v6
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !224 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !170
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !229 {
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v2 = call new_25(v1)
        v3 = load v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !230
        store v3 to v4, !230
        v5 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !231
        v6 = ptr_to_int s to u64, !234
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !234
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !236
        v10 = load v9, !234
        v11 = const u64 0
        v12 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v11, !240
        v13 = ptr_to_int v9 to u64, !241
        v14 = int_to_ptr v13 to ptr { { u64, u64 }, u64 }, !242
        v15 = load v14, !245
        v16 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        store v15 to v16
        v17 = call len_20(v16)
        v18 = const u64 0, !246
        v19 = cmp eq v17 v18, !249
        cbr v19, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !250

        hash_26_write_27_append_28_block1():
        v20 = const u64 1
        v21 = get_elem_ptr v12, ptr u64, v20, !251
        v22 = load v21, !252
        v23 = const u64 0, !253
        v24 = cmp eq v22 v23, !256
        cbr v24, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !257

        hash_26_write_27_append_28_block3():
        v25 = load v14, !258
        store v25 to v12, !260
        br hash_26_write_27_block0(), !262

        hash_26_write_27_append_28_block4():
        v26 = load v21, !263
        v27 = add v26, v17, !266
        v28 = load v21, !267
        v29 = const u64 0
        v30 = get_elem_ptr v12, ptr { u64, u64 }, v29, !268
        v31 = load v30, !269
        v32 = get_local ptr { u64, u64 }, __tmp_arg5
        store v31 to v32
        v33 = call capacity_31(v32)
        v34 = cmp lt v33 v27, !272
        cbr v34, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !273

        hash_26_write_27_append_28_block6():
        v35 = load v30, !274
        v36 = get_local ptr { u64, u64 }, __tmp_arg3
        store v35 to v36
        v37 = call ptr_22(v36)
        v38 = load v30, !275
        v39 = get_local ptr { u64, u64 }, __tmp_arg6
        store v38 to v39
        v40 = call capacity_31(v39)
        v41 = cmp gt v27 v40, !280
        cbr v41, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v37), !281

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v42 = asm(size: v27) -> u64 hp, !284 {
            aloc   size, !140
        }
        v43 = const u64 0, !285
        v44 = cmp gt v40 v43, !288
        cbr v44, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !289

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v45 = asm(dst: v42, src: v37, len: v40) -> (), !292 {
            mcp    dst src len, !179
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v42), !293

        hash_26_write_27_append_28_realloc_bytes_35_block5(v46: u64):
        v47 = get_local ptr { u64, u64 }, __anon_0, !298
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !299
        store v46 to v49, !300
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !301
        store v27 to v51, !302
        v52 = load v47, !303
        v53 = get_local ptr { u64, u64 }, __asm_arg
        store v52 to v53
        v54 = asm(ptr: v53) -> ptr slice ptr {
        }
        v55 = load v54
        v56 = get_local ptr slice, new_slice, !305
        store v55 to v56, !306
        v57 = get_local ptr slice, new_slice, !308
        v58 = load v57, !309
        v59 = get_local ptr slice, __asm_arg0
        store v58 to v59
        v60 = asm(ptr: v59) -> ptr { u64, u64 } ptr {
        }
        v61 = load v60
        v62 = get_local ptr { u64, u64 }, __anon_000, !314
        store v61 to v62, !315
        v63 = const u64 1
        v64 = get_elem_ptr v62, ptr u64, v63, !317
        v65 = load v64, !318
        v66 = asm(size: v65) -> u64 hp, !321 {
            aloc   size, !140
        }
        v67 = const u64 0, !322
        v68 = cmp gt v65 v67, !325
        cbr v68, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !326

        hash_26_write_27_append_28_from_37_block0():
        v69 = get_local ptr slice, __asm_arg1
        store v58 to v69
        v70 = asm(ptr: v69) -> ptr { u64, u64 } ptr {
        }
        v71 = load v70
        v72 = get_local ptr { u64, u64 }, __anon_01, !329
        store v71 to v72, !330
        v73 = const u64 0
        v74 = get_elem_ptr v72, ptr u64, v73, !332
        v75 = load v74, !333
        v76 = asm(dst: v66, src: v75, len: v65) -> (), !337 {
            mcp    dst src len, !338
        }
        br hash_26_write_27_append_28_from_37_block2(), !339

        hash_26_write_27_append_28_from_37_block2():
        v77 = get_local ptr { u64, u64 }, __anon_00, !341
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !342
        store v66 to v79, !343
        v80 = const u64 1
        v81 = get_elem_ptr v77, ptr u64, v80, !344
        store v65 to v81, !345
        v82 = load v77, !346
        store v82 to v30, !348
        br hash_26_write_27_append_28_block8(), !349

        hash_26_write_27_append_28_block8():
        v83 = load v30, !350
        v84 = get_local ptr { u64, u64 }, __tmp_arg4
        store v83 to v84
        v85 = call ptr_22(v84)
        v86 = asm(ptr: v85, offset: v28, new) -> u64 new, !354 {
            add    new ptr offset, !355
        }
        v87 = load v14, !356
        v88 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        store v87 to v88
        v89 = call ptr_21(v88)
        v90 = asm(dst: v86, src: v89, len: v17) -> (), !359 {
            mcp    dst src len, !179
        }
        store v27 to v21, !361
        br hash_26_write_27_block0(), !362

        hash_26_write_27_block0():
        v91 = get_local ptr b256, __const
        v92 = load v91
        v93 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !363
        v94 = load v93
        v95 = get_local ptr b256, result_buffer, !367
        store v92 to v95, !368
        v96 = get_local ptr b256, result_buffer, !370
        v97 = ptr_to_int v93 to u64, !371
        v98 = int_to_ptr v97 to ptr { { { u64, u64 }, u64 } }, !371
        v99 = const u64 0
        v100 = get_elem_ptr v98, ptr { { u64, u64 }, u64 }, v99, !372
        v101 = load v100, !371
        v102 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        store v101 to v102
        v103 = call ptr_21(v102)
        v104 = load v100, !371
        v105 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        store v104 to v105
        v106 = call len_20(v105)
        v107 = asm(hash: v96, ptr: v103, bytes: v106) -> ptr b256 hash {
            s256   hash ptr bytes, !373
        }
        v108 = load v107
        store v108 to __ret_value
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !376 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !377
        v1 = asm(size: v0) -> u64 hp, !384 {
            aloc   size, !140
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !386
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !387
        store v1 to v4, !388
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !389
        v7 = const u64 0, !390
        store v7 to v6, !391
        v8 = load v2, !392
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !394
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !395
        store v8 to v11, !396
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !395
        v14 = const u64 0, !397
        store v14 to v13, !398
        v15 = load v9, !395
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !399
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        store v15 to v18, !399
        v19 = load v16
        store v19 to __ret_value
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !402 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !403
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = (!4 !5 !7)
!10 = span !6 1042 1058
!11 = fn_call_path_span !6 1042 1056
!12 = span !6 314 323
!13 = (!4 !5 !10 !11 !12)
!14 = (!4 !5 !10 !11)
!15 = (!4 !5 !10 !11)
!16 = span !6 315 318
!17 = (!4 !5 !10 !11 !12)
!18 = (!4 !5 !10 !11)
!19 = (!4 !5 !10 !11)
!20 = (!4 !5 !10 !11)
!21 = (!4 !5 !10 !11)
!22 = span !6 289 334
!23 = (!4 !5 !10 !11 !22)
!24 = (!4 !5 !10 !11)
!25 = (!4 !5 !10 !11 !22)
!26 = (!4 !5 !10 !11)
!27 = span !6 1026 1059
!28 = (!4 !5 !27)
!29 = (!4 !5 !27)
!30 = span !6 1072 1081
!31 = (!4 !5 !30)
!32 = (!4 !5)
!33 = span !6 1085 1094
!34 = (!4 !5 !33)
!35 = span !6 1072 1094
!36 = fn_call_path_span !6 1082 1084
!37 = (!4 !5 !35 !36)
!38 = (!4 !5 !35 !36)
!39 = span !6 218 232
!40 = (!4 !5 !35 !36 !39)
!41 = (!4 !5 !35 !36)
!42 = (!4 !5 !35 !36)
!43 = (!4 !5 !35 !36 !39)
!44 = span !6 889 891
!45 = span !6 842 962
!46 = (!4 !5 !35 !36 !45)
!47 = span !6 907 926
!48 = span !6 1108 1117
!49 = (!4 !5 !48)
!50 = span !6 1126 1133
!51 = (!4 !5 !50)
!52 = span !6 1148 1157
!53 = (!4 !5 !52)
!54 = span !6 1166 1173
!55 = (!4 !5 !54)
!56 = span !6 492 714
!57 = fn_name_span !6 499 506
!58 = (!56 !57)
!59 = span !6 582 603
!60 = fn_call_path_span !6 587 594
!61 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!62 = span !61 1815 1933
!63 = (!59 !60 !62)
!64 = (!59 !60 !62)
!65 = (!59 !60 !62)
!66 = span !6 451 469
!67 = fn_call_path_span !6 459 467
!68 = (!59 !60 !66 !67)
!69 = (!59 !60 !66 !67)
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!71 = span !70 329 341
!72 = (!59 !60 !66 !67 !71)
!73 = (!59 !60 !66 !67)
!74 = span !70 1593 1595
!75 = span !70 1573 1595
!76 = fn_call_path_span !70 1590 1592
!77 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!78 = span !77 15515 15529
!79 = fn_call_path_span !77 15520 15522
!80 = (!59 !60 !66 !67 !75 !76 !78 !79)
!81 = span !77 12533 12538
!82 = span !77 15514 15536
!83 = fn_call_path_span !77 15531 15534
!84 = (!59 !60 !66 !67 !75 !76 !82 !83)
!85 = (!59 !60 !66 !67 !75)
!86 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!87 = span !86 2461 2560
!88 = (!59 !60 !66 !67 !87)
!89 = (!59 !60 !66 !67 !87)
!90 = (!59 !60 !66 !67 !87)
!91 = (!59 !60 !66 !67)
!92 = span !70 1610 1621
!93 = (!59 !60 !66 !67 !92)
!94 = (!59 !60 !66 !67 !87)
!95 = (!59 !60 !66 !67 !87)
!96 = (!59 !60 !66 !67 !87)
!97 = (!59 !60 !66 !67)
!98 = (!59 !60 !66 !67 !87)
!99 = (!59 !60 !66 !67 !87)
!100 = (!59 !60 !66 !67)
!101 = (!59 !60 !66 !67)
!102 = span !6 451 478
!103 = fn_call_path_span !6 470 476
!104 = span !86 4973 5075
!105 = (!59 !60 !102 !103 !104)
!106 = (!59 !60 !102 !103 !104)
!107 = span !86 4979 4983
!108 = (!59 !60 !102 !103 !107)
!109 = (!59 !60 !102 !103 !107)
!110 = (!59 !60 !102 !103)
!111 = span !86 4998 5037
!112 = fn_call_path_span !86 4998 5037
!113 = (!59 !60 !102 !103 !111 !112)
!114 = (!59 !60 !102 !103 !111)
!115 = (!59 !60 !102 !103 !107)
!116 = (!59 !60 !102 !103)
!117 = (!59 !60 !102 !103)
!118 = span !86 5009 5020
!119 = (!59 !60 !102 !103 !118)
!120 = (!59 !60 !102 !103 !118)
!121 = span !86 5025 5036
!122 = (!59 !60 !102 !103 !121)
!123 = (!59 !60 !102 !103)
!124 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!125 = span !124 28953 28955
!126 = span !6 435 479
!127 = fn_call_path_span !6 435 450
!128 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!129 = span !128 3133 3150
!130 = fn_call_path_span !128 3133 3144
!131 = span !124 28933 28956
!132 = fn_call_path_span !124 28933 28952
!133 = span !124 4157 4190
!134 = fn_call_path_span !124 4157 4180
!135 = span !124 863 884
!136 = fn_call_path_span !124 863 874
!137 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!138 = span !137 3315 3378
!139 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134 !135 !136 !138)
!140 = span !137 3342 3351
!141 = span !124 839 922
!142 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134 !141)
!143 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134)
!144 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134 !141)
!145 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134)
!146 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134 !141)
!147 = (!59 !60 !126 !127 !129 !130 !131 !132 !133 !134)
!148 = span !124 4133 4221
!149 = (!59 !60 !126 !127 !129 !130 !131 !132 !148)
!150 = (!59 !60 !126 !127 !129 !130 !131 !132)
!151 = (!59 !60 !126 !127 !129 !130 !131 !132 !148)
!152 = (!59 !60 !126 !127 !129 !130 !131 !132)
!153 = span !124 4209 4210
!154 = (!59 !60 !126 !127 !129 !130 !131 !132 !148)
!155 = (!59 !60 !126 !127 !129 !130 !131 !132)
!156 = span !124 28917 28957
!157 = (!59 !60 !126 !127 !129 !130 !156)
!158 = (!59 !60 !126 !127 !129 !130 !156)
!159 = span !124 28966 28980
!160 = (!59 !60 !126 !127 !129 !130 !159)
!161 = (!59 !60 !126 !127 !129 !130 !159)
!162 = span !124 28978 28980
!163 = (!59 !60 !126 !127 !129 !130 !159)
!164 = span !124 29065 29077
!165 = (!59 !60 !126 !127 !129 !130 !164)
!166 = span !124 29092 29097
!167 = (!59 !60 !126 !127 !129 !130 !166)
!168 = span !124 2445 2458
!169 = (!59 !60 !126 !127 !129 !130 !168)
!170 = span !124 400 412
!171 = (!59 !60 !126 !127 !129 !130 !170)
!172 = (!59 !60 !126 !127 !129 !130)
!173 = span !124 29107 29109
!174 = span !124 29065 29110
!175 = fn_call_path_span !124 29078 29091
!176 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!177 = span !176 5999 6076
!178 = (!59 !60 !126 !127 !129 !130 !174 !175 !177)
!179 = span !176 6050 6065
!180 = span !124 29121 29126
!181 = (!59 !60 !126 !127 !129 !130 !180)
!182 = (!59 !60 !126 !127 !129 !130)
!183 = span !128 3107 3161
!184 = (!59 !60 !126 !127 !183)
!185 = (!59 !60 !126 !127)
!186 = (!59 !60 !126 !127 !183)
!187 = (!59 !60 !126 !127)
!188 = (!59 !60 !62)
!189 = (!59 !60 !62)
!190 = (!59 !60)
!191 = span !6 576 708
!192 = span !6 618 668
!193 = fn_call_path_span !6 618 668
!194 = (!192 !193)
!195 = span !86 5062 5063
!196 = span !86 5055 5064
!197 = fn_call_path_span !86 5055 5061
!198 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!199 = span !198 757 771
!200 = (!59 !60 !102 !103 !196 !197 !199)
!201 = span !6 621 628
!202 = span !6 657 664
!203 = span !6 636 666
!204 = fn_call_path_span !6 636 649
!205 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!206 = span !205 2370 2383
!207 = (!203 !204 !206)
!208 = (!203 !204)
!209 = (!203 !204 !206)
!210 = span !6 681 698
!211 = fn_call_path_span !6 681 698
!212 = (!210 !211)
!213 = span !6 685 686
!214 = span !6 695 696
!215 = span !124 13771 13819
!216 = fn_name_span !124 13778 13781
!217 = (!215 !216)
!218 = span !124 2506 2514
!219 = span !124 15175 15233
!220 = fn_name_span !124 15182 15185
!221 = (!219 !220)
!222 = span !124 978 1030
!223 = fn_name_span !124 985 988
!224 = (!222 !223)
!225 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!226 = span !225 9009 9138
!227 = fn_name_span !225 9016 9022
!228 = inline "never"
!229 = (!226 !227 !228)
!230 = span !225 9065 9096
!231 = span !225 9108 9114
!232 = span !225 9101 9115
!233 = fn_call_path_span !225 9103 9107
!234 = (!232 !233)
!235 = span !128 524 536
!236 = (!232 !233 !235)
!237 = span !128 5123 5146
!238 = fn_call_path_span !128 5129 5134
!239 = span !225 142 154
!240 = (!232 !233 !237 !238 !239)
!241 = (!232 !233 !237 !238)
!242 = (!232 !233 !237 !238)
!243 = span !225 365 389
!244 = fn_call_path_span !225 376 382
!245 = (!232 !233 !237 !238 !243 !244)
!246 = span !124 18435 18436
!247 = span !124 18422 18436
!248 = fn_call_path_span !124 18432 18434
!249 = (!232 !233 !237 !238 !243 !244 !247 !248)
!250 = (!232 !233 !237 !238 !243 !244 !247)
!251 = (!232 !233 !237 !238 !243 !244 !218)
!252 = (!232 !233 !237 !238 !243 !244)
!253 = span !124 18572 18573
!254 = span !124 18560 18573
!255 = fn_call_path_span !124 18569 18571
!256 = (!232 !233 !237 !238 !243 !244 !254 !255)
!257 = (!232 !233 !237 !238 !243 !244 !254)
!258 = (!232 !233 !237 !238 !243 !244)
!259 = span !124 18588 18600
!260 = (!232 !233 !237 !238 !243 !244 !259)
!261 = span !124 18614 18620
!262 = (!232 !233 !237 !238 !243 !244 !261)
!263 = (!232 !233 !237 !238 !243 !244)
!264 = span !124 18657 18677
!265 = fn_call_path_span !124 18666 18667
!266 = (!232 !233 !237 !238 !243 !244 !264 !265)
!267 = (!232 !233 !237 !238 !243 !244)
!268 = (!232 !233 !237 !238 !243 !244 !168)
!269 = (!232 !233 !237 !238 !243 !244)
!270 = span !124 18808 18838
!271 = fn_call_path_span !124 18828 18829
!272 = (!232 !233 !237 !238 !243 !244 !270 !271)
!273 = (!232 !233 !237 !238 !243 !244 !270)
!274 = (!232 !233 !237 !238 !243 !244)
!275 = (!232 !233 !237 !238 !243 !244)
!276 = span !124 18914 18974
!277 = fn_call_path_span !124 18914 18927
!278 = span !137 4168 4185
!279 = fn_call_path_span !137 4178 4179
!280 = (!232 !233 !237 !238 !243 !244 !276 !277 !278 !279)
!281 = (!232 !233 !237 !238 !243 !244 !276 !277 !278)
!282 = span !137 4210 4232
!283 = fn_call_path_span !137 4210 4221
!284 = (!232 !233 !237 !238 !243 !244 !276 !277 !282 !283 !138)
!285 = span !137 4253 4254
!286 = span !137 4245 4254
!287 = fn_call_path_span !137 4251 4252
!288 = (!232 !233 !237 !238 !243 !244 !276 !277 !286 !287)
!289 = (!232 !233 !237 !238 !243 !244 !276 !277 !286)
!290 = span !137 4269 4302
!291 = fn_call_path_span !137 4273 4286
!292 = (!232 !233 !237 !238 !243 !244 !276 !277 !290 !291 !177)
!293 = (!232 !233 !237 !238 !243 !244 !276 !277)
!294 = span !124 18869 19015
!295 = fn_call_path_span !124 18869 18890
!296 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!297 = span !296 2362 2393
!298 = (!232 !233 !237 !238 !243 !244 !294 !295 !297)
!299 = (!232 !233 !237 !238 !243 !244 !294 !295 !297)
!300 = (!232 !233 !237 !238 !243 !244 !294 !295 !297)
!301 = (!232 !233 !237 !238 !243 !244 !294 !295 !297)
!302 = (!232 !233 !237 !238 !243 !244 !294 !295 !297)
!303 = (!232 !233 !237 !238 !243 !244 !294 !295)
!304 = span !124 18853 19016
!305 = (!232 !233 !237 !238 !243 !244 !304)
!306 = (!232 !233 !237 !238 !243 !244 !304)
!307 = span !124 19055 19064
!308 = (!232 !233 !237 !238 !243 !244 !307)
!309 = (!232 !233 !237 !238 !243 !244)
!310 = span !124 19040 19065
!311 = fn_call_path_span !124 19040 19054
!312 = span !124 2130 2153
!313 = fn_call_path_span !124 2136 2151
!314 = (!232 !233 !237 !238 !243 !244 !310 !311 !312 !313)
!315 = (!232 !233 !237 !238 !243 !244 !310 !311 !312 !313)
!316 = span !296 3976 3977
!317 = (!232 !233 !237 !238 !243 !244 !310 !311 !312 !313 !316)
!318 = (!232 !233 !237 !238 !243 !244 !310 !311 !312 !313)
!319 = span !124 2173 2189
!320 = fn_call_path_span !124 2173 2184
!321 = (!232 !233 !237 !238 !243 !244 !310 !311 !319 !320 !138)
!322 = span !124 2208 2209
!323 = span !124 2202 2209
!324 = fn_call_path_span !124 2206 2207
!325 = (!232 !233 !237 !238 !243 !244 !310 !311 !323 !324)
!326 = (!232 !233 !237 !238 !243 !244 !310 !311 !323)
!327 = span !124 2224 2235
!328 = fn_call_path_span !124 2230 2233
!329 = (!232 !233 !237 !238 !243 !244 !310 !311 !327 !328)
!330 = (!232 !233 !237 !238 !243 !244 !310 !311 !327 !328)
!331 = span !296 2928 2929
!332 = (!232 !233 !237 !238 !243 !244 !310 !311 !327 !328 !331)
!333 = (!232 !233 !237 !238 !243 !244 !310 !311 !327 !328)
!334 = span !124 2224 2259
!335 = fn_call_path_span !124 2236 2243
!336 = span !176 3447 3522
!337 = (!232 !233 !237 !238 !243 !244 !310 !311 !334 !335 !336)
!338 = span !176 3496 3511
!339 = (!232 !233 !237 !238 !243 !244 !310 !311)
!340 = span !124 2279 2296
!341 = (!232 !233 !237 !238 !243 !244 !310 !311 !340)
!342 = (!232 !233 !237 !238 !243 !244 !310 !311)
!343 = (!232 !233 !237 !238 !243 !244 !310 !311 !340)
!344 = (!232 !233 !237 !238 !243 !244 !310 !311)
!345 = (!232 !233 !237 !238 !243 !244 !310 !311 !340)
!346 = (!232 !233 !237 !238 !243 !244 !310 !311)
!347 = span !124 19029 19065
!348 = (!232 !233 !237 !238 !243 !244 !347)
!349 = (!232 !233 !237 !238 !243 !244)
!350 = (!232 !233 !237 !238 !243 !244)
!351 = span !124 19100 19143
!352 = fn_call_path_span !124 19115 19130
!353 = span !176 6721 6825
!354 = (!232 !233 !237 !238 !243 !244 !351 !352 !353)
!355 = span !176 6771 6789
!356 = (!232 !233 !237 !238 !243 !244)
!357 = span !124 19153 19198
!358 = fn_call_path_span !124 19165 19178
!359 = (!232 !233 !237 !238 !243 !244 !357 !358 !177)
!360 = span !124 19244 19263
!361 = (!232 !233 !237 !238 !243 !244 !360)
!362 = (!232 !233 !237 !238 !243 !244)
!363 = span !225 9121 9127
!364 = span !225 9121 9136
!365 = fn_call_path_span !225 9128 9134
!366 = span !225 440 476
!367 = (!364 !365 !366)
!368 = (!364 !365 !366)
!369 = span !225 508 521
!370 = (!364 !365 !369)
!371 = (!364 !365)
!372 = (!364 !365 !239)
!373 = span !225 619 638
!374 = span !225 177 263
!375 = fn_name_span !225 184 187
!376 = (!374 !375)
!377 = span !124 570 571
!378 = span !225 234 246
!379 = fn_call_path_span !225 234 244
!380 = span !124 3079 3094
!381 = fn_call_path_span !124 3079 3092
!382 = span !124 558 572
!383 = fn_call_path_span !124 558 569
!384 = (!378 !379 !380 !381 !382 !383 !138)
!385 = span !124 534 603
!386 = (!378 !379 !380 !381 !385)
!387 = (!378 !379 !380 !381)
!388 = (!378 !379 !380 !381 !385)
!389 = (!378 !379 !380 !381)
!390 = span !124 591 592
!391 = (!378 !379 !380 !381 !385)
!392 = (!378 !379 !380 !381)
!393 = span !124 3055 3125
!394 = (!378 !379 !393)
!395 = (!378 !379)
!396 = (!378 !379 !393)
!397 = span !124 3113 3114
!398 = (!378 !379 !393)
!399 = span !225 208 257
!400 = span !124 1081 1134
!401 = fn_name_span !124 1088 1096
!402 = (!400 !401)
!403 = span !124 418 426

// IR: [memcpyopt] Optimizations related to MemCopy instructions
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = load v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v3, v1
        v4 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        mem_copy_val v4, v3
        v5 = get_local ptr [u8; 64], __anon_0, !12
        v6 = const u64 0
        br play_0_new_5_array_init_loop(v6), !13

        play_0_new_5_array_init_loop(v7: u64):
        v8 = get_elem_ptr v5, ptr u8, v7, !14
        v9 = const u8 0, !15
        store v9 to v8, !16
        v10 = const u64 1
        v11 = add v7, v10, !17
        v12 = const u64 64
        v13 = cmp lt v11 v12, !18
        cbr v13, play_0_new_5_array_init_loop(v11), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v14 = load v5, !20
        v15 = get_local ptr { [u8; 64] }, __anon_1, !22
        v16 = const u64 0
        v17 = get_elem_ptr v15, ptr [u8; 64], v16, !23
        mem_copy_val v17, v5
        v18 = load v15, !24
        v19 = get_local ptr { [u8; 64] }, secp256k1, !26
        mem_copy_val v19, v15
        v20 = get_local ptr { [u8; 64] }, secp256k1, !28
        v21 = load v20, !29
        v22 = get_local ptr { [u8; 64] }, secp256k1, !31
        v23 = load v22, !29
        v24 = ptr_to_int v20 to u64, !34
        v25 = int_to_ptr v24 to ptr { [u8; 64] }, !35
        v26 = const u64 0
        v27 = get_elem_ptr v25, ptr [u8; 64], v26, !37
        v28 = ptr_to_int v22 to u64, !38
        v29 = int_to_ptr v28 to ptr { [u8; 64] }, !39
        v30 = const u64 0
        v31 = get_elem_ptr v29, ptr [u8; 64], v30, !40
        v32 = const u64 64, !41
        v33 = asm(result, r2: v27, r3: v31, r4: v32) -> bool result, !43 {
            meq    result r2 r3 r4, !44
        }
        v34 = get_local ptr { [u8; 64] }, secp256k1, !46
        v35 = load v34, !29
        v36 = get_local ptr { { { u64, u64 }, u64 } }, message, !48
        v37 = load v36, !29
        v38 = get_local ptr { [u8; 64] }, __tmp_arg
        mem_copy_val v38, v34
        v39 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        mem_copy_val v39, v36
        v40 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v41 = call address_7(v38, v39, v40)
        v42 = load v41
        v43 = get_local ptr { [u8; 64] }, secp256k1, !50
        v44 = load v43, !29
        v45 = get_local ptr { { { u64, u64 }, u64 } }, message, !52
        v46 = load v45, !29
        v47 = get_local ptr { [u8; 64] }, __tmp_arg1
        mem_copy_val v47, v43
        v48 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        mem_copy_val v48, v45
        v49 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v50 = call address_7(v47, v48, v49)
        v51 = load v50
        v52 = const unit ()
        ret () v52
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !55 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = load self
        v1 = load message
        v2 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !60
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !61
        v5 = const u64 0, !59
        store v5 to v4, !62
        v6 = ptr_to_int message to u64, !65
        v7 = int_to_ptr v6 to ptr { { { u64, u64 }, u64 } }, !66
        v8 = const u64 0
        v9 = get_elem_ptr v7, ptr { { u64, u64 }, u64 }, v8, !69
        v10 = load v9, !70
        v11 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v11, v9
        v12 = call len_20(v11)
        v13 = const u64 32, !71
        v14 = cmp eq v12 v13, !77
        v15 = const bool false, !78
        v16 = cmp eq v14 v15, !81
        cbr v16, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !82

        recover_8_try_into_17_block0():
        v17 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !85
        v18 = const u64 0
        v19 = get_elem_ptr v17, ptr u64, v18, !86
        v20 = const u64 0, !84
        store v20 to v19, !87
        v21 = load v17, !88
        v22 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v22, v17
        br recover_8_block0(v22), !90

        recover_8_try_into_17_block1():
        v23 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !91
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr u64, v24, !92
        v26 = const u64 1, !84
        store v26 to v25, !93
        v27 = load v9, !94
        v28 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v28, v9
        v29 = call ptr_21(v28)
        v30 = asm(bits: v29) -> ptr b256 bits {
        }
        v31 = load v30
        v32 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v32, v30
        v33 = const u64 1
        v34 = const u64 1
        v35 = get_elem_ptr v23, ptr b256, v33, v34, !95
        mem_copy_val v35, v32
        v36 = load v23, !96
        v37 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v37, v23
        br recover_8_block0(v37), !97

        recover_8_block0(v38: ptr { u64, ( () | b256 ) }):
        v39 = load v38
        v40 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !101
        mem_copy_val v40, v38
        v41 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !103
        v42 = const u64 0
        v43 = get_elem_ptr v41, ptr u64, v42, !104
        v44 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v45 = get_elem_ptr v44, ptr u64, v42
        v46 = load v45, !105
        v47 = const u64 1, !102
        v48 = cmp eq v46 v47, !108
        cbr v48, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !109

        recover_8_unwrap_14_block0():
        v49 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !110
        v50 = const u64 1
        v51 = const u64 1
        v52 = get_elem_ptr v49, ptr b256, v50, v51, !111
        v53 = load v52, !112
        v54 = get_local ptr b256, inner_value, !114
        mem_copy_val v54, v52
        v55 = get_local ptr b256, inner_value, !116
        v56 = load v55, !117
        v57 = const u64 32, !119
        v58 = asm(size: v57) -> u64 hp, !133 {
            aloc   size, !134
        }
        v59 = get_local ptr { u64, u64 }, __anon_00000, !136
        v60 = const u64 0
        v61 = get_elem_ptr v59, ptr u64, v60, !137
        store v58 to v61, !138
        v62 = const u64 1
        v63 = get_elem_ptr v59, ptr u64, v62, !139
        store v57 to v63, !140
        v64 = load v59, !141
        v65 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !143
        v66 = const u64 0
        v67 = get_elem_ptr v65, ptr { u64, u64 }, v66, !144
        mem_copy_val v67, v59
        v68 = const u64 1
        v69 = get_elem_ptr v65, ptr u64, v68, !145
        v70 = const u64 0, !146
        store v70 to v69, !147
        v71 = load v65, !148
        v72 = get_local ptr { { u64, u64 }, u64 }, bytes, !150
        mem_copy_val v72, v65
        v73 = get_local ptr { { u64, u64 }, u64 }, bytes, !152
        v74 = const u64 1
        v75 = get_elem_ptr v73, ptr u64, v74, !153
        v76 = const u64 32, !154
        store v76 to v75, !155
        v77 = ptr_to_int v55 to u64, !157
        v78 = get_local ptr { { u64, u64 }, u64 }, bytes, !159
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr { u64, u64 }, v79, !161
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81, !163
        v83 = load v82, !164
        v84 = const u64 32, !165
        v85 = asm(dst: v83, src: v77, len: v84) -> (), !170 {
            mcp    dst src len, !171
        }
        v86 = get_local ptr { { u64, u64 }, u64 }, bytes, !173
        v87 = load v86, !174
        v88 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !176
        v89 = const u64 0
        v90 = get_elem_ptr v88, ptr { { u64, u64 }, u64 }, v89, !177
        mem_copy_val v90, v86
        v91 = load v88, !178
        v92 = const u64 1
        v93 = const u64 0
        v94 = get_elem_ptr v2, ptr { { { u64, u64 }, u64 } }, v92, v93, !179
        mem_copy_val v94, v88
        v95 = load v2, !180
        v96 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !181
        mem_copy_val v96, v2
        v97 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !56
        v98 = const u64 0
        v99 = get_elem_ptr v97, ptr u64, v98, !56
        v100 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v101 = get_elem_ptr v100, ptr u64, v98
        v102 = load v101
        v103 = const u64 0, !56
        v104 = cmp eq v102 v103, !184
        cbr v104, block0(), block1(), !182

        recover_8_unwrap_14_block1():
        v105 = const u64 0, !185
        revert v105, !190

        block0():
        v106 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !56
        v107 = const u64 1
        v108 = const u64 0
        v109 = get_elem_ptr v106, ptr { { { u64, u64 }, u64 } }, v107, v108
        v110 = load v109
        v111 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !191
        mem_copy_val v111, v109
        v112 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !59
        v113 = const u64 0
        v114 = get_elem_ptr v112, ptr u64, v113, !59
        v115 = const u64 0, !59
        store v115 to v114, !59
        v116 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !192
        v117 = load v109
        v118 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v118, v109
        v119 = get_local ptr b256, __ret_val
        v120 = call sha256_24(v118, v119)
        v121 = load v120
        v122 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v122, v120
        v123 = get_local ptr { b256 }, __anon_02, !197
        v124 = const u64 0
        v125 = get_elem_ptr v123, ptr b256, v124, !198
        mem_copy_val v125, v122
        v126 = load v123, !198
        v127 = const u64 1
        v128 = const u64 0
        v129 = get_elem_ptr v112, ptr { b256 }, v127, v128, !59
        mem_copy_val v129, v123
        v130 = load v112
        v131 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v131, v112
        br block5(v131)

        block1():
        v132 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !56
        v133 = const u64 0
        v134 = get_elem_ptr v132, ptr u64, v133, !56
        v135 = load v134
        v136 = const u64 1, !56
        v137 = cmp eq v135 v136, !201
        cbr v137, block2(), block3(), !199

        block2():
        v138 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !56
        v139 = const u64 1
        v140 = const u64 1
        v141 = get_elem_ptr v138, ptr { u64 }, v139, v140
        v142 = load v141
        v143 = get_local ptr { u64 }, e, !202
        mem_copy_val v143, v141
        v144 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !59
        v145 = const u64 0
        v146 = get_elem_ptr v144, ptr u64, v145, !59
        v147 = const u64 1, !59
        store v147 to v146, !59
        v148 = get_local ptr { u64 }, e, !203
        v149 = load v141
        v150 = const u64 1
        v151 = const u64 1
        v152 = get_elem_ptr v144, ptr { u64 }, v150, v151, !59
        mem_copy_val v152, v141
        v153 = load v144
        v154 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v154, v144
        br block5(v154)

        block3():
        v155 = const u64 14757395258967588866, !181
        revert v155, !181

        block5(v156: ptr { u64, ( { b256 } | { u64 } ) }):
        v157 = load v156
        mem_copy_val __ret_value, v156
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !206 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !207
        v5 = load v4
        ret u64 v5
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !210 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { { u64, u64 }, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr { u64, u64 }, v3, !160
        v5 = load v4
        v6 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v6, v4
        v7 = call ptr_22(v6)
        ret u64 v7
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !213 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !162
        v5 = load v4
        ret u64 v5
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !218 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local mut { u64, u64 } __aggr_memcpy_01
        local mut { u64, u64 } __aggr_memcpy_02
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = load s
        v1 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v2 = call new_25(v1)
        v3 = load v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v4, v2
        v5 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !219
        mem_copy_val v5, v4
        v6 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !220
        v7 = ptr_to_int s to u64, !223
        v8 = int_to_ptr v7 to ptr { { { u64, u64 }, u64 } }, !223
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { { u64, u64 }, u64 }, v9, !225
        v11 = load v10, !223
        v12 = const u64 0
        v13 = get_elem_ptr v6, ptr { { u64, u64 }, u64 }, v12, !229
        v14 = ptr_to_int v10 to u64, !230
        v15 = int_to_ptr v14 to ptr { { u64, u64 }, u64 }, !231
        v16 = load v15, !234
        v17 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v17, v15
        v18 = call len_20(v17)
        v19 = const u64 0, !235
        v20 = cmp eq v18 v19, !238
        cbr v20, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !239

        hash_26_write_27_append_28_block1():
        v21 = const u64 1
        v22 = get_elem_ptr v13, ptr u64, v21, !240
        v23 = load v22, !241
        v24 = const u64 0, !242
        v25 = cmp eq v23 v24, !245
        cbr v25, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !246

        hash_26_write_27_append_28_block3():
        v26 = load v15, !247
        mem_copy_val v13, v15
        br hash_26_write_27_block0(), !249

        hash_26_write_27_append_28_block4():
        v27 = load v22, !250
        v28 = add v27, v18, !253
        v29 = load v22, !254
        v30 = const u64 0
        v31 = get_elem_ptr v13, ptr { u64, u64 }, v30, !255
        v32 = load v31, !256
        v33 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v33, v31
        v34 = call capacity_31(v33)
        v35 = cmp lt v34 v28, !259
        cbr v35, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !260

        hash_26_write_27_append_28_block6():
        v36 = load v31, !261
        v37 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v37, v31
        v38 = call ptr_22(v37)
        v39 = load v31, !262
        v40 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v40, v31
        v41 = call capacity_31(v40)
        v42 = cmp gt v28 v41, !267
        cbr v42, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v38), !268

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v43 = asm(size: v28) -> u64 hp, !271 {
            aloc   size, !134
        }
        v44 = const u64 0, !272
        v45 = cmp gt v41 v44, !275
        cbr v45, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !276

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v46 = asm(dst: v43, src: v38, len: v41) -> (), !279 {
            mcp    dst src len, !171
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v43), !280

        hash_26_write_27_append_28_realloc_bytes_35_block5(v47: u64):
        v48 = get_local ptr { u64, u64 }, __anon_0, !285
        v49 = const u64 0
        v50 = get_elem_ptr v48, ptr u64, v49, !286
        store v47 to v50, !287
        v51 = const u64 1
        v52 = get_elem_ptr v48, ptr u64, v51, !288
        store v28 to v52, !289
        v53 = load v48, !290
        v54 = get_local ptr { u64, u64 }, __asm_arg
        mem_copy_val v54, v48
        v55 = asm(ptr: v54) -> ptr slice ptr {
        }
        v56 = load v55
        v57 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v57, v55
        v58 = get_local ptr slice, new_slice, !292
        mem_copy_val v58, v57
        v59 = get_local ptr slice, new_slice, !294
        v60 = load v57, !295
        v61 = get_local ptr slice, __asm_arg0
        mem_copy_val v61, v57
        v62 = asm(ptr: v61) -> ptr { u64, u64 } ptr {
        }
        v63 = load v62
        v64 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        mem_copy_val v64, v62
        v65 = get_local ptr { u64, u64 }, __anon_000, !300
        mem_copy_val v65, v64
        v66 = const u64 1
        v67 = get_elem_ptr v65, ptr u64, v66, !302
        v68 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v69 = get_elem_ptr v68, ptr u64, v66
        v70 = load v69, !303
        v71 = asm(size: v70) -> u64 hp, !306 {
            aloc   size, !134
        }
        v72 = const u64 0, !307
        v73 = cmp gt v70 v72, !310
        cbr v73, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !311

        hash_26_write_27_append_28_from_37_block0():
        v74 = get_local ptr slice, __asm_arg1
        mem_copy_val v74, v59
        v75 = asm(ptr: v74) -> ptr { u64, u64 } ptr {
        }
        v76 = load v75
        v77 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        mem_copy_val v77, v75
        v78 = get_local ptr { u64, u64 }, __anon_01, !314
        mem_copy_val v78, v77
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr u64, v79, !316
        v81 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v82 = get_elem_ptr v81, ptr u64, v79
        v83 = load v82, !317
        v84 = asm(dst: v71, src: v83, len: v70) -> (), !321 {
            mcp    dst src len, !322
        }
        br hash_26_write_27_append_28_from_37_block2(), !323

        hash_26_write_27_append_28_from_37_block2():
        v85 = get_local ptr { u64, u64 }, __anon_00, !325
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !326
        store v71 to v87, !327
        v88 = const u64 1
        v89 = get_elem_ptr v85, ptr u64, v88, !328
        mem_copy_val v89, v67
        v90 = load v85, !329
        mem_copy_val v31, v85
        br hash_26_write_27_append_28_block8(), !330

        hash_26_write_27_append_28_block8():
        v91 = load v31, !331
        v92 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v92, v31
        v93 = call ptr_22(v92)
        v94 = asm(ptr: v93, offset: v29, new) -> u64 new, !335 {
            add    new ptr offset, !336
        }
        v95 = load v15, !337
        v96 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v96, v15
        v97 = call ptr_21(v96)
        v98 = asm(dst: v94, src: v97, len: v18) -> (), !340 {
            mcp    dst src len, !171
        }
        store v28 to v22, !342
        br hash_26_write_27_block0(), !343

        hash_26_write_27_block0():
        v99 = get_local ptr b256, __const
        v100 = load v99
        v101 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !344
        v102 = load v101
        v103 = get_local ptr b256, result_buffer, !348
        mem_copy_val v103, v99
        v104 = get_local ptr b256, result_buffer, !350
        v105 = ptr_to_int v101 to u64, !351
        v106 = int_to_ptr v105 to ptr { { { u64, u64 }, u64 } }, !351
        v107 = const u64 0
        v108 = get_elem_ptr v106, ptr { { u64, u64 }, u64 }, v107, !352
        v109 = load v108, !351
        v110 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v110, v108
        v111 = call ptr_21(v110)
        v112 = load v108, !351
        v113 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v113, v108
        v114 = call len_20(v113)
        v115 = asm(hash: v104, ptr: v111, bytes: v114) -> ptr b256 hash {
            s256   hash ptr bytes, !353
        }
        v116 = load v115
        v117 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v117, v115
        mem_copy_val __ret_value, v117
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !356 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !357
        v1 = asm(size: v0) -> u64 hp, !364 {
            aloc   size, !134
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !366
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !367
        store v1 to v4, !368
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !369
        v7 = const u64 0, !370
        store v7 to v6, !371
        v8 = load v2, !372
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !374
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !375
        mem_copy_val v11, v2
        v12 = const u64 1
        v13 = get_elem_ptr v9, ptr u64, v12, !375
        v14 = const u64 0, !376
        store v14 to v13, !377
        v15 = load v9, !375
        v16 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !378
        v17 = const u64 0
        v18 = get_elem_ptr v16, ptr { { u64, u64 }, u64 }, v17
        mem_copy_val v18, v9
        v19 = load v16
        mem_copy_val __ret_value, v16
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !381 {
        entry(self: ptr { u64, u64 }):
        v0 = load self
        v1 = ptr_to_int self to u64
        v2 = int_to_ptr v1 to ptr { u64, u64 }
        v3 = const u64 1
        v4 = get_elem_ptr v2, ptr u64, v3, !382
        v5 = load v4
        ret u64 v5
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = (!4 !5 !9 !10)
!21 = span !6 289 334
!22 = (!4 !5 !9 !10 !21)
!23 = (!4 !5 !9 !10)
!24 = (!4 !5 !9 !10)
!25 = span !6 1026 1059
!26 = (!4 !5 !25)
!27 = span !6 1072 1081
!28 = (!4 !5 !27)
!29 = (!4 !5)
!30 = span !6 1085 1094
!31 = (!4 !5 !30)
!32 = span !6 1072 1094
!33 = fn_call_path_span !6 1082 1084
!34 = (!4 !5 !32 !33)
!35 = (!4 !5 !32 !33)
!36 = span !6 218 232
!37 = (!4 !5 !32 !33 !36)
!38 = (!4 !5 !32 !33)
!39 = (!4 !5 !32 !33)
!40 = (!4 !5 !32 !33 !36)
!41 = span !6 889 891
!42 = span !6 842 962
!43 = (!4 !5 !32 !33 !42)
!44 = span !6 907 926
!45 = span !6 1108 1117
!46 = (!4 !5 !45)
!47 = span !6 1126 1133
!48 = (!4 !5 !47)
!49 = span !6 1148 1157
!50 = (!4 !5 !49)
!51 = span !6 1166 1173
!52 = (!4 !5 !51)
!53 = span !6 492 714
!54 = fn_name_span !6 499 506
!55 = (!53 !54)
!56 = span !6 582 603
!57 = fn_call_path_span !6 587 594
!58 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!59 = span !58 1815 1933
!60 = (!56 !57 !59)
!61 = (!56 !57 !59)
!62 = (!56 !57 !59)
!63 = span !6 451 469
!64 = fn_call_path_span !6 459 467
!65 = (!56 !57 !63 !64)
!66 = (!56 !57 !63 !64)
!67 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!68 = span !67 329 341
!69 = (!56 !57 !63 !64 !68)
!70 = (!56 !57 !63 !64)
!71 = span !67 1593 1595
!72 = span !67 1573 1595
!73 = fn_call_path_span !67 1590 1592
!74 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!75 = span !74 15515 15529
!76 = fn_call_path_span !74 15520 15522
!77 = (!56 !57 !63 !64 !72 !73 !75 !76)
!78 = span !74 12533 12538
!79 = span !74 15514 15536
!80 = fn_call_path_span !74 15531 15534
!81 = (!56 !57 !63 !64 !72 !73 !79 !80)
!82 = (!56 !57 !63 !64 !72)
!83 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!84 = span !83 2461 2560
!85 = (!56 !57 !63 !64 !84)
!86 = (!56 !57 !63 !64 !84)
!87 = (!56 !57 !63 !64 !84)
!88 = (!56 !57 !63 !64)
!89 = span !67 1610 1621
!90 = (!56 !57 !63 !64 !89)
!91 = (!56 !57 !63 !64 !84)
!92 = (!56 !57 !63 !64 !84)
!93 = (!56 !57 !63 !64 !84)
!94 = (!56 !57 !63 !64)
!95 = (!56 !57 !63 !64 !84)
!96 = (!56 !57 !63 !64)
!97 = (!56 !57 !63 !64)
!98 = span !6 451 478
!99 = fn_call_path_span !6 470 476
!100 = span !83 4973 5075
!101 = (!56 !57 !98 !99 !100)
!102 = span !83 4979 4983
!103 = (!56 !57 !98 !99 !102)
!104 = (!56 !57 !98 !99 !102)
!105 = (!56 !57 !98 !99)
!106 = span !83 4998 5037
!107 = fn_call_path_span !83 4998 5037
!108 = (!56 !57 !98 !99 !106 !107)
!109 = (!56 !57 !98 !99 !106)
!110 = (!56 !57 !98 !99 !102)
!111 = (!56 !57 !98 !99)
!112 = (!56 !57 !98 !99)
!113 = span !83 5009 5020
!114 = (!56 !57 !98 !99 !113)
!115 = span !83 5025 5036
!116 = (!56 !57 !98 !99 !115)
!117 = (!56 !57 !98 !99)
!118 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!119 = span !118 28953 28955
!120 = span !6 435 479
!121 = fn_call_path_span !6 435 450
!122 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!123 = span !122 3133 3150
!124 = fn_call_path_span !122 3133 3144
!125 = span !118 28933 28956
!126 = fn_call_path_span !118 28933 28952
!127 = span !118 4157 4190
!128 = fn_call_path_span !118 4157 4180
!129 = span !118 863 884
!130 = fn_call_path_span !118 863 874
!131 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!132 = span !131 3315 3378
!133 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128 !129 !130 !132)
!134 = span !131 3342 3351
!135 = span !118 839 922
!136 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128 !135)
!137 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128)
!138 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128 !135)
!139 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128)
!140 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128 !135)
!141 = (!56 !57 !120 !121 !123 !124 !125 !126 !127 !128)
!142 = span !118 4133 4221
!143 = (!56 !57 !120 !121 !123 !124 !125 !126 !142)
!144 = (!56 !57 !120 !121 !123 !124 !125 !126)
!145 = (!56 !57 !120 !121 !123 !124 !125 !126)
!146 = span !118 4209 4210
!147 = (!56 !57 !120 !121 !123 !124 !125 !126 !142)
!148 = (!56 !57 !120 !121 !123 !124 !125 !126)
!149 = span !118 28917 28957
!150 = (!56 !57 !120 !121 !123 !124 !149)
!151 = span !118 28966 28980
!152 = (!56 !57 !120 !121 !123 !124 !151)
!153 = (!56 !57 !120 !121 !123 !124 !151)
!154 = span !118 28978 28980
!155 = (!56 !57 !120 !121 !123 !124 !151)
!156 = span !118 29065 29077
!157 = (!56 !57 !120 !121 !123 !124 !156)
!158 = span !118 29092 29097
!159 = (!56 !57 !120 !121 !123 !124 !158)
!160 = span !118 2445 2458
!161 = (!56 !57 !120 !121 !123 !124 !160)
!162 = span !118 400 412
!163 = (!56 !57 !120 !121 !123 !124 !162)
!164 = (!56 !57 !120 !121 !123 !124)
!165 = span !118 29107 29109
!166 = span !118 29065 29110
!167 = fn_call_path_span !118 29078 29091
!168 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!169 = span !168 5999 6076
!170 = (!56 !57 !120 !121 !123 !124 !166 !167 !169)
!171 = span !168 6050 6065
!172 = span !118 29121 29126
!173 = (!56 !57 !120 !121 !123 !124 !172)
!174 = (!56 !57 !120 !121 !123 !124)
!175 = span !122 3107 3161
!176 = (!56 !57 !120 !121 !175)
!177 = (!56 !57 !120 !121)
!178 = (!56 !57 !120 !121)
!179 = (!56 !57 !59)
!180 = (!56 !57)
!181 = span !6 576 708
!182 = span !6 618 668
!183 = fn_call_path_span !6 618 668
!184 = (!182 !183)
!185 = span !83 5062 5063
!186 = span !83 5055 5064
!187 = fn_call_path_span !83 5055 5061
!188 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!189 = span !188 757 771
!190 = (!56 !57 !98 !99 !186 !187 !189)
!191 = span !6 621 628
!192 = span !6 657 664
!193 = span !6 636 666
!194 = fn_call_path_span !6 636 649
!195 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!196 = span !195 2370 2383
!197 = (!193 !194 !196)
!198 = (!193 !194)
!199 = span !6 681 698
!200 = fn_call_path_span !6 681 698
!201 = (!199 !200)
!202 = span !6 685 686
!203 = span !6 695 696
!204 = span !118 13771 13819
!205 = fn_name_span !118 13778 13781
!206 = (!204 !205)
!207 = span !118 2506 2514
!208 = span !118 15175 15233
!209 = fn_name_span !118 15182 15185
!210 = (!208 !209)
!211 = span !118 978 1030
!212 = fn_name_span !118 985 988
!213 = (!211 !212)
!214 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!215 = span !214 9009 9138
!216 = fn_name_span !214 9016 9022
!217 = inline "never"
!218 = (!215 !216 !217)
!219 = span !214 9065 9096
!220 = span !214 9108 9114
!221 = span !214 9101 9115
!222 = fn_call_path_span !214 9103 9107
!223 = (!221 !222)
!224 = span !122 524 536
!225 = (!221 !222 !224)
!226 = span !122 5123 5146
!227 = fn_call_path_span !122 5129 5134
!228 = span !214 142 154
!229 = (!221 !222 !226 !227 !228)
!230 = (!221 !222 !226 !227)
!231 = (!221 !222 !226 !227)
!232 = span !214 365 389
!233 = fn_call_path_span !214 376 382
!234 = (!221 !222 !226 !227 !232 !233)
!235 = span !118 18435 18436
!236 = span !118 18422 18436
!237 = fn_call_path_span !118 18432 18434
!238 = (!221 !222 !226 !227 !232 !233 !236 !237)
!239 = (!221 !222 !226 !227 !232 !233 !236)
!240 = (!221 !222 !226 !227 !232 !233 !207)
!241 = (!221 !222 !226 !227 !232 !233)
!242 = span !118 18572 18573
!243 = span !118 18560 18573
!244 = fn_call_path_span !118 18569 18571
!245 = (!221 !222 !226 !227 !232 !233 !243 !244)
!246 = (!221 !222 !226 !227 !232 !233 !243)
!247 = (!221 !222 !226 !227 !232 !233)
!248 = span !118 18614 18620
!249 = (!221 !222 !226 !227 !232 !233 !248)
!250 = (!221 !222 !226 !227 !232 !233)
!251 = span !118 18657 18677
!252 = fn_call_path_span !118 18666 18667
!253 = (!221 !222 !226 !227 !232 !233 !251 !252)
!254 = (!221 !222 !226 !227 !232 !233)
!255 = (!221 !222 !226 !227 !232 !233 !160)
!256 = (!221 !222 !226 !227 !232 !233)
!257 = span !118 18808 18838
!258 = fn_call_path_span !118 18828 18829
!259 = (!221 !222 !226 !227 !232 !233 !257 !258)
!260 = (!221 !222 !226 !227 !232 !233 !257)
!261 = (!221 !222 !226 !227 !232 !233)
!262 = (!221 !222 !226 !227 !232 !233)
!263 = span !118 18914 18974
!264 = fn_call_path_span !118 18914 18927
!265 = span !131 4168 4185
!266 = fn_call_path_span !131 4178 4179
!267 = (!221 !222 !226 !227 !232 !233 !263 !264 !265 !266)
!268 = (!221 !222 !226 !227 !232 !233 !263 !264 !265)
!269 = span !131 4210 4232
!270 = fn_call_path_span !131 4210 4221
!271 = (!221 !222 !226 !227 !232 !233 !263 !264 !269 !270 !132)
!272 = span !131 4253 4254
!273 = span !131 4245 4254
!274 = fn_call_path_span !131 4251 4252
!275 = (!221 !222 !226 !227 !232 !233 !263 !264 !273 !274)
!276 = (!221 !222 !226 !227 !232 !233 !263 !264 !273)
!277 = span !131 4269 4302
!278 = fn_call_path_span !131 4273 4286
!279 = (!221 !222 !226 !227 !232 !233 !263 !264 !277 !278 !169)
!280 = (!221 !222 !226 !227 !232 !233 !263 !264)
!281 = span !118 18869 19015
!282 = fn_call_path_span !118 18869 18890
!283 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!284 = span !283 2362 2393
!285 = (!221 !222 !226 !227 !232 !233 !281 !282 !284)
!286 = (!221 !222 !226 !227 !232 !233 !281 !282 !284)
!287 = (!221 !222 !226 !227 !232 !233 !281 !282 !284)
!288 = (!221 !222 !226 !227 !232 !233 !281 !282 !284)
!289 = (!221 !222 !226 !227 !232 !233 !281 !282 !284)
!290 = (!221 !222 !226 !227 !232 !233 !281 !282)
!291 = span !118 18853 19016
!292 = (!221 !222 !226 !227 !232 !233 !291)
!293 = span !118 19055 19064
!294 = (!221 !222 !226 !227 !232 !233 !293)
!295 = (!221 !222 !226 !227 !232 !233)
!296 = span !118 19040 19065
!297 = fn_call_path_span !118 19040 19054
!298 = span !118 2130 2153
!299 = fn_call_path_span !118 2136 2151
!300 = (!221 !222 !226 !227 !232 !233 !296 !297 !298 !299)
!301 = span !283 3976 3977
!302 = (!221 !222 !226 !227 !232 !233 !296 !297 !298 !299 !301)
!303 = (!221 !222 !226 !227 !232 !233 !296 !297 !298 !299)
!304 = span !118 2173 2189
!305 = fn_call_path_span !118 2173 2184
!306 = (!221 !222 !226 !227 !232 !233 !296 !297 !304 !305 !132)
!307 = span !118 2208 2209
!308 = span !118 2202 2209
!309 = fn_call_path_span !118 2206 2207
!310 = (!221 !222 !226 !227 !232 !233 !296 !297 !308 !309)
!311 = (!221 !222 !226 !227 !232 !233 !296 !297 !308)
!312 = span !118 2224 2235
!313 = fn_call_path_span !118 2230 2233
!314 = (!221 !222 !226 !227 !232 !233 !296 !297 !312 !313)
!315 = span !283 2928 2929
!316 = (!221 !222 !226 !227 !232 !233 !296 !297 !312 !313 !315)
!317 = (!221 !222 !226 !227 !232 !233 !296 !297 !312 !313)
!318 = span !118 2224 2259
!319 = fn_call_path_span !118 2236 2243
!320 = span !168 3447 3522
!321 = (!221 !222 !226 !227 !232 !233 !296 !297 !318 !319 !320)
!322 = span !168 3496 3511
!323 = (!221 !222 !226 !227 !232 !233 !296 !297)
!324 = span !118 2279 2296
!325 = (!221 !222 !226 !227 !232 !233 !296 !297 !324)
!326 = (!221 !222 !226 !227 !232 !233 !296 !297)
!327 = (!221 !222 !226 !227 !232 !233 !296 !297 !324)
!328 = (!221 !222 !226 !227 !232 !233 !296 !297)
!329 = (!221 !222 !226 !227 !232 !233 !296 !297)
!330 = (!221 !222 !226 !227 !232 !233)
!331 = (!221 !222 !226 !227 !232 !233)
!332 = span !118 19100 19143
!333 = fn_call_path_span !118 19115 19130
!334 = span !168 6721 6825
!335 = (!221 !222 !226 !227 !232 !233 !332 !333 !334)
!336 = span !168 6771 6789
!337 = (!221 !222 !226 !227 !232 !233)
!338 = span !118 19153 19198
!339 = fn_call_path_span !118 19165 19178
!340 = (!221 !222 !226 !227 !232 !233 !338 !339 !169)
!341 = span !118 19244 19263
!342 = (!221 !222 !226 !227 !232 !233 !341)
!343 = (!221 !222 !226 !227 !232 !233)
!344 = span !214 9121 9127
!345 = span !214 9121 9136
!346 = fn_call_path_span !214 9128 9134
!347 = span !214 440 476
!348 = (!345 !346 !347)
!349 = span !214 508 521
!350 = (!345 !346 !349)
!351 = (!345 !346)
!352 = (!345 !346 !228)
!353 = span !214 619 638
!354 = span !214 177 263
!355 = fn_name_span !214 184 187
!356 = (!354 !355)
!357 = span !118 570 571
!358 = span !214 234 246
!359 = fn_call_path_span !214 234 244
!360 = span !118 3079 3094
!361 = fn_call_path_span !118 3079 3092
!362 = span !118 558 572
!363 = fn_call_path_span !118 558 569
!364 = (!358 !359 !360 !361 !362 !363 !132)
!365 = span !118 534 603
!366 = (!358 !359 !360 !361 !365)
!367 = (!358 !359 !360 !361)
!368 = (!358 !359 !360 !361 !365)
!369 = (!358 !359 !360 !361)
!370 = span !118 591 592
!371 = (!358 !359 !360 !361 !365)
!372 = (!358 !359 !360 !361)
!373 = span !118 3055 3125
!374 = (!358 !359 !373)
!375 = (!358 !359)
!376 = span !118 3113 3114
!377 = (!358 !359 !373)
!378 = span !214 208 257
!379 = span !118 1081 1134
!380 = fn_name_span !118 1088 1096
!381 = (!379 !380)
!382 = span !118 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v2, v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        mem_copy_val v3, v2
        v4 = get_local ptr [u8; 64], __anon_0, !12
        v5 = const u64 0
        br play_0_new_5_array_init_loop(v5), !13

        play_0_new_5_array_init_loop(v6: u64):
        v7 = get_elem_ptr v4, ptr u8, v6, !14
        v8 = const u8 0, !15
        store v8 to v7, !16
        v9 = const u64 1
        v10 = add v6, v9, !17
        v11 = const u64 64
        v12 = cmp lt v10 v11, !18
        cbr v12, play_0_new_5_array_init_loop(v10), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v13 = get_local ptr { [u8; 64] }, __anon_1, !21
        v14 = const u64 0
        v15 = get_elem_ptr v13, ptr [u8; 64], v14, !22
        mem_copy_val v15, v4
        v16 = get_local ptr { [u8; 64] }, secp256k1, !24
        mem_copy_val v16, v13
        v17 = get_local ptr { [u8; 64] }, secp256k1, !26
        v18 = get_local ptr { [u8; 64] }, secp256k1, !28
        v19 = ptr_to_int v17 to u64, !31
        v20 = int_to_ptr v19 to ptr { [u8; 64] }, !32
        v21 = const u64 0
        v22 = get_elem_ptr v20, ptr [u8; 64], v21, !34
        v23 = ptr_to_int v18 to u64, !35
        v24 = int_to_ptr v23 to ptr { [u8; 64] }, !36
        v25 = const u64 0
        v26 = get_elem_ptr v24, ptr [u8; 64], v25, !37
        v27 = const u64 64, !38
        v28 = asm(result, r2: v22, r3: v26, r4: v27) -> bool result, !40 {
            meq    result r2 r3 r4, !41
        }
        v29 = get_local ptr { [u8; 64] }, secp256k1, !43
        v30 = get_local ptr { { { u64, u64 }, u64 } }, message, !45
        v31 = get_local ptr { [u8; 64] }, __tmp_arg
        mem_copy_val v31, v29
        v32 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        mem_copy_val v32, v30
        v33 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v34 = call address_7(v31, v32, v33)
        v35 = get_local ptr { [u8; 64] }, secp256k1, !47
        v36 = get_local ptr { { { u64, u64 }, u64 } }, message, !49
        v37 = get_local ptr { [u8; 64] }, __tmp_arg1
        mem_copy_val v37, v35
        v38 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        mem_copy_val v38, v36
        v39 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v40 = call address_7(v37, v38, v39)
        v41 = const unit ()
        ret () v41
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !52 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local { { { u64, u64 }, u64 } } __anon_01
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local { u64 } e
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !57
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !58
        v3 = const u64 0, !56
        store v3 to v2, !59
        v4 = ptr_to_int message to u64, !62
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !63
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !66
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !67
        v11 = cmp eq v9 v10, !73
        v12 = const bool false, !74
        v13 = cmp eq v11 v12, !77
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !78

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !81
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !82
        v17 = const u64 0, !80
        store v17 to v16, !83
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !85

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !86
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !87
        v22 = const u64 1, !80
        store v22 to v21, !88
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !89
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !90

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !94
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !95
        v37 = const u64 1, !96
        v38 = cmp eq v36 v37, !99
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !100

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !101
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !102
        v43 = get_local ptr b256, inner_value, !104
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !106
        v45 = const u64 32, !108
        v46 = asm(size: v45) -> u64 hp, !122 {
            aloc   size, !123
        }
        v47 = get_local ptr { u64, u64 }, __anon_00000, !125
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !126
        store v46 to v49, !127
        v50 = const u64 1
        v51 = get_elem_ptr v47, ptr u64, v50, !128
        store v45 to v51, !129
        v52 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !131
        v53 = const u64 0
        v54 = get_elem_ptr v52, ptr { u64, u64 }, v53, !132
        mem_copy_val v54, v47
        v55 = const u64 1
        v56 = get_elem_ptr v52, ptr u64, v55, !133
        v57 = const u64 0, !134
        store v57 to v56, !135
        v58 = get_local ptr { { u64, u64 }, u64 }, bytes, !137
        mem_copy_val v58, v52
        v59 = get_local ptr { { u64, u64 }, u64 }, bytes, !139
        v60 = const u64 1
        v61 = get_elem_ptr v59, ptr u64, v60, !140
        v62 = const u64 32, !141
        store v62 to v61, !142
        v63 = ptr_to_int v44 to u64, !144
        v64 = get_local ptr { { u64, u64 }, u64 }, bytes, !146
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr { u64, u64 }, v65, !148
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67, !150
        v69 = load v68, !151
        v70 = const u64 32, !152
        v71 = asm(dst: v69, src: v63, len: v70) -> (), !157 {
            mcp    dst src len, !158
        }
        v72 = get_local ptr { { u64, u64 }, u64 }, bytes, !160
        v73 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !162
        v74 = const u64 0
        v75 = get_elem_ptr v73, ptr { { u64, u64 }, u64 }, v74, !163
        mem_copy_val v75, v72
        v76 = const u64 1
        v77 = const u64 0
        v78 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v76, v77, !164
        mem_copy_val v78, v73
        v79 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !165
        mem_copy_val v79, v0
        v80 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v81 = const u64 0
        v82 = get_elem_ptr v80, ptr u64, v81
        v83 = load v82
        v84 = const u64 0, !53
        v85 = cmp eq v83 v84, !168
        cbr v85, block0(), block1(), !166

        recover_8_unwrap_14_block1():
        v86 = const u64 0, !169
        revert v86, !174

        block0():
        v87 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v87, ptr { { { u64, u64 }, u64 } }, v88, v89
        v91 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !175
        mem_copy_val v91, v90
        v92 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !56
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !56
        v95 = const u64 0, !56
        store v95 to v94, !56
        v96 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v96, v90
        v97 = get_local ptr b256, __ret_val
        v98 = call sha256_24(v96, v97)
        v99 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v99, v98
        v100 = get_local ptr { b256 }, __anon_02, !180
        v101 = const u64 0
        v102 = get_elem_ptr v100, ptr b256, v101, !181
        mem_copy_val v102, v99
        v103 = const u64 1
        v104 = const u64 0
        v105 = get_elem_ptr v92, ptr { b256 }, v103, v104, !56
        mem_copy_val v105, v100
        v106 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v106, v92
        br block5(v106)

        block1():
        v107 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v108 = const u64 0
        v109 = get_elem_ptr v107, ptr u64, v108, !53
        v110 = load v109
        v111 = const u64 1, !53
        v112 = cmp eq v110 v111, !184
        cbr v112, block2(), block3(), !182

        block2():
        v113 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v114 = const u64 1
        v115 = const u64 1
        v116 = get_elem_ptr v113, ptr { u64 }, v114, v115
        v117 = get_local ptr { u64 }, e, !185
        mem_copy_val v117, v116
        v118 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !56
        v119 = const u64 0
        v120 = get_elem_ptr v118, ptr u64, v119, !56
        v121 = const u64 1, !56
        store v121 to v120, !56
        v122 = const u64 1
        v123 = const u64 1
        v124 = get_elem_ptr v118, ptr { u64 }, v122, v123, !56
        mem_copy_val v124, v116
        v125 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v125, v118
        br block5(v125)

        block3():
        v126 = const u64 14757395258967588866, !165
        revert v126, !165

        block5(v127: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v127
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !188 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !189
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !192 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !147
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !195 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !149
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !200 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local mut { u64, u64 } __aggr_memcpy_01
        local mut { u64, u64 } __aggr_memcpy_02
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local { u64, u64 } __anon_01
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        mem_copy_val v2, v1
        v3 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !201
        mem_copy_val v3, v2
        v4 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !202
        v5 = ptr_to_int s to u64, !205
        v6 = int_to_ptr v5 to ptr { { { u64, u64 }, u64 } }, !205
        v7 = const u64 0
        v8 = get_elem_ptr v6, ptr { { u64, u64 }, u64 }, v7, !207
        v9 = const u64 0
        v10 = get_elem_ptr v4, ptr { { u64, u64 }, u64 }, v9, !211
        v11 = ptr_to_int v8 to u64, !212
        v12 = int_to_ptr v11 to ptr { { u64, u64 }, u64 }, !213
        v13 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v13, v12
        v14 = call len_20(v13)
        v15 = const u64 0, !214
        v16 = cmp eq v14 v15, !219
        cbr v16, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !220

        hash_26_write_27_append_28_block1():
        v17 = const u64 1
        v18 = get_elem_ptr v10, ptr u64, v17, !221
        v19 = load v18, !222
        v20 = const u64 0, !223
        v21 = cmp eq v19 v20, !226
        cbr v21, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !227

        hash_26_write_27_append_28_block3():
        mem_copy_val v10, v12
        br hash_26_write_27_block0(), !229

        hash_26_write_27_append_28_block4():
        v22 = load v18, !230
        v23 = add v22, v14, !233
        v24 = load v18, !234
        v25 = const u64 0
        v26 = get_elem_ptr v10, ptr { u64, u64 }, v25, !235
        v27 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v27, v26
        v28 = call capacity_31(v27)
        v29 = cmp lt v28 v23, !238
        cbr v29, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !239

        hash_26_write_27_append_28_block6():
        v30 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v30, v26
        v31 = call ptr_22(v30)
        v32 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v32, v26
        v33 = call capacity_31(v32)
        v34 = cmp gt v23 v33, !244
        cbr v34, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v31), !245

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v35 = asm(size: v23) -> u64 hp, !248 {
            aloc   size, !123
        }
        v36 = const u64 0, !249
        v37 = cmp gt v33 v36, !252
        cbr v37, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !253

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v38 = asm(dst: v35, src: v31, len: v33) -> (), !256 {
            mcp    dst src len, !158
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v35), !257

        hash_26_write_27_append_28_realloc_bytes_35_block5(v39: u64):
        v40 = get_local ptr { u64, u64 }, __anon_0, !262
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr u64, v41, !263
        store v39 to v42, !264
        v43 = const u64 1
        v44 = get_elem_ptr v40, ptr u64, v43, !265
        store v23 to v44, !266
        v45 = get_local ptr { u64, u64 }, __asm_arg
        mem_copy_val v45, v40
        v46 = asm(ptr: v45) -> ptr slice ptr {
        }
        v47 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v47, v46
        v48 = get_local ptr slice, new_slice, !268
        mem_copy_val v48, v47
        v49 = get_local ptr slice, new_slice, !270
        v50 = get_local ptr slice, __asm_arg0
        mem_copy_val v50, v47
        v51 = asm(ptr: v50) -> ptr { u64, u64 } ptr {
        }
        v52 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        mem_copy_val v52, v51
        v53 = get_local ptr { u64, u64 }, __anon_000, !275
        mem_copy_val v53, v52
        v54 = const u64 1
        v55 = get_elem_ptr v53, ptr u64, v54, !277
        v56 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v57 = get_elem_ptr v56, ptr u64, v54
        v58 = load v57, !278
        v59 = asm(size: v58) -> u64 hp, !281 {
            aloc   size, !123
        }
        v60 = const u64 0, !282
        v61 = cmp gt v58 v60, !285
        cbr v61, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !286

        hash_26_write_27_append_28_from_37_block0():
        v62 = get_local ptr slice, __asm_arg1
        mem_copy_val v62, v49
        v63 = asm(ptr: v62) -> ptr { u64, u64 } ptr {
        }
        v64 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        mem_copy_val v64, v63
        v65 = get_local ptr { u64, u64 }, __anon_01, !289
        mem_copy_val v65, v64
        v66 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67
        v69 = load v68, !290
        v70 = asm(dst: v59, src: v69, len: v58) -> (), !294 {
            mcp    dst src len, !295
        }
        br hash_26_write_27_append_28_from_37_block2(), !296

        hash_26_write_27_append_28_from_37_block2():
        v71 = get_local ptr { u64, u64 }, __anon_00, !298
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !299
        store v59 to v73, !300
        v74 = const u64 1
        v75 = get_elem_ptr v71, ptr u64, v74, !301
        mem_copy_val v75, v55
        mem_copy_val v26, v71
        br hash_26_write_27_append_28_block8(), !302

        hash_26_write_27_append_28_block8():
        v76 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v76, v26
        v77 = call ptr_22(v76)
        v78 = asm(ptr: v77, offset: v24, new) -> u64 new, !306 {
            add    new ptr offset, !307
        }
        v79 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v79, v12
        v80 = call ptr_21(v79)
        v81 = asm(dst: v78, src: v80, len: v14) -> (), !310 {
            mcp    dst src len, !158
        }
        store v23 to v18, !312
        br hash_26_write_27_block0(), !313

        hash_26_write_27_block0():
        v82 = get_local ptr b256, __const
        v83 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !314
        v84 = get_local ptr b256, result_buffer, !318
        mem_copy_val v84, v82
        v85 = get_local ptr b256, result_buffer, !320
        v86 = ptr_to_int v83 to u64, !321
        v87 = int_to_ptr v86 to ptr { { { u64, u64 }, u64 } }, !321
        v88 = const u64 0
        v89 = get_elem_ptr v87, ptr { { u64, u64 }, u64 }, v88, !322
        v90 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v90, v89
        v91 = call ptr_21(v90)
        v92 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v92, v89
        v93 = call len_20(v92)
        v94 = asm(hash: v85, ptr: v91, bytes: v93) -> ptr b256 hash {
            s256   hash ptr bytes, !323
        }
        v95 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v95, v94
        mem_copy_val __ret_value, v95
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !326 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !327
        v1 = asm(size: v0) -> u64 hp, !334 {
            aloc   size, !123
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !336
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !337
        store v1 to v4, !338
        v5 = const u64 1
        v6 = get_elem_ptr v2, ptr u64, v5, !339
        v7 = const u64 0, !340
        store v7 to v6, !341
        v8 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !343
        v9 = const u64 0
        v10 = get_elem_ptr v8, ptr { u64, u64 }, v9, !344
        mem_copy_val v10, v2
        v11 = const u64 1
        v12 = get_elem_ptr v8, ptr u64, v11, !344
        v13 = const u64 0, !345
        store v13 to v12, !346
        v14 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !347
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr { { u64, u64 }, u64 }, v15
        mem_copy_val v16, v8
        mem_copy_val __ret_value, v14
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !350 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !351
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = span !6 289 334
!21 = (!4 !5 !9 !10 !20)
!22 = (!4 !5 !9 !10)
!23 = span !6 1026 1059
!24 = (!4 !5 !23)
!25 = span !6 1072 1081
!26 = (!4 !5 !25)
!27 = span !6 1085 1094
!28 = (!4 !5 !27)
!29 = span !6 1072 1094
!30 = fn_call_path_span !6 1082 1084
!31 = (!4 !5 !29 !30)
!32 = (!4 !5 !29 !30)
!33 = span !6 218 232
!34 = (!4 !5 !29 !30 !33)
!35 = (!4 !5 !29 !30)
!36 = (!4 !5 !29 !30)
!37 = (!4 !5 !29 !30 !33)
!38 = span !6 889 891
!39 = span !6 842 962
!40 = (!4 !5 !29 !30 !39)
!41 = span !6 907 926
!42 = span !6 1108 1117
!43 = (!4 !5 !42)
!44 = span !6 1126 1133
!45 = (!4 !5 !44)
!46 = span !6 1148 1157
!47 = (!4 !5 !46)
!48 = span !6 1166 1173
!49 = (!4 !5 !48)
!50 = span !6 492 714
!51 = fn_name_span !6 499 506
!52 = (!50 !51)
!53 = span !6 582 603
!54 = fn_call_path_span !6 587 594
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!56 = span !55 1815 1933
!57 = (!53 !54 !56)
!58 = (!53 !54 !56)
!59 = (!53 !54 !56)
!60 = span !6 451 469
!61 = fn_call_path_span !6 459 467
!62 = (!53 !54 !60 !61)
!63 = (!53 !54 !60 !61)
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!65 = span !64 329 341
!66 = (!53 !54 !60 !61 !65)
!67 = span !64 1593 1595
!68 = span !64 1573 1595
!69 = fn_call_path_span !64 1590 1592
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!71 = span !70 15515 15529
!72 = fn_call_path_span !70 15520 15522
!73 = (!53 !54 !60 !61 !68 !69 !71 !72)
!74 = span !70 12533 12538
!75 = span !70 15514 15536
!76 = fn_call_path_span !70 15531 15534
!77 = (!53 !54 !60 !61 !68 !69 !75 !76)
!78 = (!53 !54 !60 !61 !68)
!79 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!80 = span !79 2461 2560
!81 = (!53 !54 !60 !61 !80)
!82 = (!53 !54 !60 !61 !80)
!83 = (!53 !54 !60 !61 !80)
!84 = span !64 1610 1621
!85 = (!53 !54 !60 !61 !84)
!86 = (!53 !54 !60 !61 !80)
!87 = (!53 !54 !60 !61 !80)
!88 = (!53 !54 !60 !61 !80)
!89 = (!53 !54 !60 !61 !80)
!90 = (!53 !54 !60 !61)
!91 = span !6 451 478
!92 = fn_call_path_span !6 470 476
!93 = span !79 4973 5075
!94 = (!53 !54 !91 !92 !93)
!95 = (!53 !54 !91 !92)
!96 = span !79 4979 4983
!97 = span !79 4998 5037
!98 = fn_call_path_span !79 4998 5037
!99 = (!53 !54 !91 !92 !97 !98)
!100 = (!53 !54 !91 !92 !97)
!101 = (!53 !54 !91 !92 !96)
!102 = (!53 !54 !91 !92)
!103 = span !79 5009 5020
!104 = (!53 !54 !91 !92 !103)
!105 = span !79 5025 5036
!106 = (!53 !54 !91 !92 !105)
!107 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!108 = span !107 28953 28955
!109 = span !6 435 479
!110 = fn_call_path_span !6 435 450
!111 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!112 = span !111 3133 3150
!113 = fn_call_path_span !111 3133 3144
!114 = span !107 28933 28956
!115 = fn_call_path_span !107 28933 28952
!116 = span !107 4157 4190
!117 = fn_call_path_span !107 4157 4180
!118 = span !107 863 884
!119 = fn_call_path_span !107 863 874
!120 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!121 = span !120 3315 3378
!122 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !118 !119 !121)
!123 = span !120 3342 3351
!124 = span !107 839 922
!125 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!126 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117)
!127 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!128 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117)
!129 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!130 = span !107 4133 4221
!131 = (!53 !54 !109 !110 !112 !113 !114 !115 !130)
!132 = (!53 !54 !109 !110 !112 !113 !114 !115)
!133 = (!53 !54 !109 !110 !112 !113 !114 !115)
!134 = span !107 4209 4210
!135 = (!53 !54 !109 !110 !112 !113 !114 !115 !130)
!136 = span !107 28917 28957
!137 = (!53 !54 !109 !110 !112 !113 !136)
!138 = span !107 28966 28980
!139 = (!53 !54 !109 !110 !112 !113 !138)
!140 = (!53 !54 !109 !110 !112 !113 !138)
!141 = span !107 28978 28980
!142 = (!53 !54 !109 !110 !112 !113 !138)
!143 = span !107 29065 29077
!144 = (!53 !54 !109 !110 !112 !113 !143)
!145 = span !107 29092 29097
!146 = (!53 !54 !109 !110 !112 !113 !145)
!147 = span !107 2445 2458
!148 = (!53 !54 !109 !110 !112 !113 !147)
!149 = span !107 400 412
!150 = (!53 !54 !109 !110 !112 !113 !149)
!151 = (!53 !54 !109 !110 !112 !113)
!152 = span !107 29107 29109
!153 = span !107 29065 29110
!154 = fn_call_path_span !107 29078 29091
!155 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!156 = span !155 5999 6076
!157 = (!53 !54 !109 !110 !112 !113 !153 !154 !156)
!158 = span !155 6050 6065
!159 = span !107 29121 29126
!160 = (!53 !54 !109 !110 !112 !113 !159)
!161 = span !111 3107 3161
!162 = (!53 !54 !109 !110 !161)
!163 = (!53 !54 !109 !110)
!164 = (!53 !54 !56)
!165 = span !6 576 708
!166 = span !6 618 668
!167 = fn_call_path_span !6 618 668
!168 = (!166 !167)
!169 = span !79 5062 5063
!170 = span !79 5055 5064
!171 = fn_call_path_span !79 5055 5061
!172 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!173 = span !172 757 771
!174 = (!53 !54 !91 !92 !170 !171 !173)
!175 = span !6 621 628
!176 = span !6 636 666
!177 = fn_call_path_span !6 636 649
!178 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!179 = span !178 2370 2383
!180 = (!176 !177 !179)
!181 = (!176 !177)
!182 = span !6 681 698
!183 = fn_call_path_span !6 681 698
!184 = (!182 !183)
!185 = span !6 685 686
!186 = span !107 13771 13819
!187 = fn_name_span !107 13778 13781
!188 = (!186 !187)
!189 = span !107 2506 2514
!190 = span !107 15175 15233
!191 = fn_name_span !107 15182 15185
!192 = (!190 !191)
!193 = span !107 978 1030
!194 = fn_name_span !107 985 988
!195 = (!193 !194)
!196 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!197 = span !196 9009 9138
!198 = fn_name_span !196 9016 9022
!199 = inline "never"
!200 = (!197 !198 !199)
!201 = span !196 9065 9096
!202 = span !196 9108 9114
!203 = span !196 9101 9115
!204 = fn_call_path_span !196 9103 9107
!205 = (!203 !204)
!206 = span !111 524 536
!207 = (!203 !204 !206)
!208 = span !111 5123 5146
!209 = fn_call_path_span !111 5129 5134
!210 = span !196 142 154
!211 = (!203 !204 !208 !209 !210)
!212 = (!203 !204 !208 !209)
!213 = (!203 !204 !208 !209)
!214 = span !107 18435 18436
!215 = span !196 365 389
!216 = fn_call_path_span !196 376 382
!217 = span !107 18422 18436
!218 = fn_call_path_span !107 18432 18434
!219 = (!203 !204 !208 !209 !215 !216 !217 !218)
!220 = (!203 !204 !208 !209 !215 !216 !217)
!221 = (!203 !204 !208 !209 !215 !216 !189)
!222 = (!203 !204 !208 !209 !215 !216)
!223 = span !107 18572 18573
!224 = span !107 18560 18573
!225 = fn_call_path_span !107 18569 18571
!226 = (!203 !204 !208 !209 !215 !216 !224 !225)
!227 = (!203 !204 !208 !209 !215 !216 !224)
!228 = span !107 18614 18620
!229 = (!203 !204 !208 !209 !215 !216 !228)
!230 = (!203 !204 !208 !209 !215 !216)
!231 = span !107 18657 18677
!232 = fn_call_path_span !107 18666 18667
!233 = (!203 !204 !208 !209 !215 !216 !231 !232)
!234 = (!203 !204 !208 !209 !215 !216)
!235 = (!203 !204 !208 !209 !215 !216 !147)
!236 = span !107 18808 18838
!237 = fn_call_path_span !107 18828 18829
!238 = (!203 !204 !208 !209 !215 !216 !236 !237)
!239 = (!203 !204 !208 !209 !215 !216 !236)
!240 = span !107 18914 18974
!241 = fn_call_path_span !107 18914 18927
!242 = span !120 4168 4185
!243 = fn_call_path_span !120 4178 4179
!244 = (!203 !204 !208 !209 !215 !216 !240 !241 !242 !243)
!245 = (!203 !204 !208 !209 !215 !216 !240 !241 !242)
!246 = span !120 4210 4232
!247 = fn_call_path_span !120 4210 4221
!248 = (!203 !204 !208 !209 !215 !216 !240 !241 !246 !247 !121)
!249 = span !120 4253 4254
!250 = span !120 4245 4254
!251 = fn_call_path_span !120 4251 4252
!252 = (!203 !204 !208 !209 !215 !216 !240 !241 !250 !251)
!253 = (!203 !204 !208 !209 !215 !216 !240 !241 !250)
!254 = span !120 4269 4302
!255 = fn_call_path_span !120 4273 4286
!256 = (!203 !204 !208 !209 !215 !216 !240 !241 !254 !255 !156)
!257 = (!203 !204 !208 !209 !215 !216 !240 !241)
!258 = span !107 18869 19015
!259 = fn_call_path_span !107 18869 18890
!260 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!261 = span !260 2362 2393
!262 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!263 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!264 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!265 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!266 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!267 = span !107 18853 19016
!268 = (!203 !204 !208 !209 !215 !216 !267)
!269 = span !107 19055 19064
!270 = (!203 !204 !208 !209 !215 !216 !269)
!271 = span !107 19040 19065
!272 = fn_call_path_span !107 19040 19054
!273 = span !107 2130 2153
!274 = fn_call_path_span !107 2136 2151
!275 = (!203 !204 !208 !209 !215 !216 !271 !272 !273 !274)
!276 = span !260 3976 3977
!277 = (!203 !204 !208 !209 !215 !216 !271 !272 !273 !274 !276)
!278 = (!203 !204 !208 !209 !215 !216 !271 !272 !273 !274)
!279 = span !107 2173 2189
!280 = fn_call_path_span !107 2173 2184
!281 = (!203 !204 !208 !209 !215 !216 !271 !272 !279 !280 !121)
!282 = span !107 2208 2209
!283 = span !107 2202 2209
!284 = fn_call_path_span !107 2206 2207
!285 = (!203 !204 !208 !209 !215 !216 !271 !272 !283 !284)
!286 = (!203 !204 !208 !209 !215 !216 !271 !272 !283)
!287 = span !107 2224 2235
!288 = fn_call_path_span !107 2230 2233
!289 = (!203 !204 !208 !209 !215 !216 !271 !272 !287 !288)
!290 = (!203 !204 !208 !209 !215 !216 !271 !272 !287 !288)
!291 = span !107 2224 2259
!292 = fn_call_path_span !107 2236 2243
!293 = span !155 3447 3522
!294 = (!203 !204 !208 !209 !215 !216 !271 !272 !291 !292 !293)
!295 = span !155 3496 3511
!296 = (!203 !204 !208 !209 !215 !216 !271 !272)
!297 = span !107 2279 2296
!298 = (!203 !204 !208 !209 !215 !216 !271 !272 !297)
!299 = (!203 !204 !208 !209 !215 !216 !271 !272)
!300 = (!203 !204 !208 !209 !215 !216 !271 !272 !297)
!301 = (!203 !204 !208 !209 !215 !216 !271 !272)
!302 = (!203 !204 !208 !209 !215 !216)
!303 = span !107 19100 19143
!304 = fn_call_path_span !107 19115 19130
!305 = span !155 6721 6825
!306 = (!203 !204 !208 !209 !215 !216 !303 !304 !305)
!307 = span !155 6771 6789
!308 = span !107 19153 19198
!309 = fn_call_path_span !107 19165 19178
!310 = (!203 !204 !208 !209 !215 !216 !308 !309 !156)
!311 = span !107 19244 19263
!312 = (!203 !204 !208 !209 !215 !216 !311)
!313 = (!203 !204 !208 !209 !215 !216)
!314 = span !196 9121 9127
!315 = span !196 9121 9136
!316 = fn_call_path_span !196 9128 9134
!317 = span !196 440 476
!318 = (!315 !316 !317)
!319 = span !196 508 521
!320 = (!315 !316 !319)
!321 = (!315 !316)
!322 = (!315 !316 !210)
!323 = span !196 619 638
!324 = span !196 177 263
!325 = fn_name_span !196 184 187
!326 = (!324 !325)
!327 = span !107 570 571
!328 = span !196 234 246
!329 = fn_call_path_span !196 234 244
!330 = span !107 3079 3094
!331 = fn_call_path_span !107 3079 3092
!332 = span !107 558 572
!333 = fn_call_path_span !107 558 569
!334 = (!328 !329 !330 !331 !332 !333 !121)
!335 = span !107 534 603
!336 = (!328 !329 !330 !331 !335)
!337 = (!328 !329 !330 !331)
!338 = (!328 !329 !330 !331 !335)
!339 = (!328 !329 !330 !331)
!340 = span !107 591 592
!341 = (!328 !329 !330 !331 !335)
!342 = span !107 3055 3125
!343 = (!328 !329 !342)
!344 = (!328 !329)
!345 = span !107 3113 3114
!346 = (!328 !329 !342)
!347 = span !196 208 257
!348 = span !107 1081 1134
!349 = fn_name_span !107 1088 1096
!350 = (!348 !349)
!351 = span !107 418 426

// IR: [sroa] Scalar replacement of aggregates
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local u64 __aggr_memcpy_00
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_08
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local u8 __anon_10
        local u8 __anon_11
        local u8 __anon_110
        local u8 __anon_111
        local u8 __anon_112
        local u8 __anon_113
        local u8 __anon_114
        local u8 __anon_115
        local u8 __anon_116
        local u8 __anon_117
        local u8 __anon_118
        local u8 __anon_119
        local u8 __anon_12
        local u8 __anon_120
        local u8 __anon_121
        local u8 __anon_122
        local u8 __anon_123
        local u8 __anon_124
        local u8 __anon_125
        local u8 __anon_126
        local u8 __anon_127
        local u8 __anon_128
        local u8 __anon_129
        local u8 __anon_13
        local u8 __anon_130
        local u8 __anon_131
        local u8 __anon_132
        local u8 __anon_133
        local u8 __anon_134
        local u8 __anon_135
        local u8 __anon_136
        local u8 __anon_137
        local u8 __anon_138
        local u8 __anon_139
        local u8 __anon_14
        local u8 __anon_140
        local u8 __anon_141
        local u8 __anon_142
        local u8 __anon_143
        local u8 __anon_144
        local u8 __anon_145
        local u8 __anon_146
        local u8 __anon_147
        local u8 __anon_148
        local u8 __anon_149
        local u8 __anon_15
        local u8 __anon_150
        local u8 __anon_151
        local u8 __anon_152
        local u8 __anon_153
        local u8 __anon_154
        local u8 __anon_155
        local u8 __anon_156
        local u8 __anon_157
        local u8 __anon_158
        local u8 __anon_159
        local u8 __anon_16
        local u8 __anon_160
        local u8 __anon_161
        local u8 __anon_162
        local u8 __anon_163
        local u8 __anon_17
        local u8 __anon_18
        local u8 __anon_19
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local u64 message0
        local u64 message16
        local u64 message8
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_00
        store v7 to v17
        v18 = get_local ptr u64, __aggr_memcpy_08
        store v12 to v18
        v19 = get_local ptr u64, __aggr_memcpy_016
        store v16 to v19
        v20 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        v21 = get_local ptr u64, __aggr_memcpy_00
        v22 = load v21
        v23 = get_local ptr u64, __aggr_memcpy_08
        v24 = load v23
        v25 = get_local ptr u64, __aggr_memcpy_016
        v26 = load v25
        v27 = get_local ptr u64, message0
        store v22 to v27
        v28 = get_local ptr u64, message8
        store v24 to v28
        v29 = get_local ptr u64, message16
        store v26 to v29
        v30 = get_local ptr [u8; 64], __anon_0, !12
        v31 = const u64 0
        br play_0_new_5_array_init_loop(v31), !13

        play_0_new_5_array_init_loop(v32: u64):
        v33 = get_elem_ptr v30, ptr u8, v32, !14
        v34 = const u8 0, !15
        store v34 to v33, !16
        v35 = const u64 1
        v36 = add v32, v35, !17
        v37 = const u64 64
        v38 = cmp lt v36 v37, !18
        cbr v38, play_0_new_5_array_init_loop(v36), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v39 = get_local ptr { [u8; 64] }, __anon_1, !21
        v40 = const u64 0
        v41 = get_elem_ptr v39, ptr [u8; 64], v40, !22
        v42 = const u64 0
        v43 = get_elem_ptr v30, ptr u8, v42
        v44 = load v43
        v45 = const u64 1
        v46 = get_elem_ptr v30, ptr u8, v45
        v47 = load v46
        v48 = const u64 2
        v49 = get_elem_ptr v30, ptr u8, v48
        v50 = load v49
        v51 = const u64 3
        v52 = get_elem_ptr v30, ptr u8, v51
        v53 = load v52
        v54 = const u64 4
        v55 = get_elem_ptr v30, ptr u8, v54
        v56 = load v55
        v57 = const u64 5
        v58 = get_elem_ptr v30, ptr u8, v57
        v59 = load v58
        v60 = const u64 6
        v61 = get_elem_ptr v30, ptr u8, v60
        v62 = load v61
        v63 = const u64 7
        v64 = get_elem_ptr v30, ptr u8, v63
        v65 = load v64
        v66 = const u64 8
        v67 = get_elem_ptr v30, ptr u8, v66
        v68 = load v67
        v69 = const u64 9
        v70 = get_elem_ptr v30, ptr u8, v69
        v71 = load v70
        v72 = const u64 10
        v73 = get_elem_ptr v30, ptr u8, v72
        v74 = load v73
        v75 = const u64 11
        v76 = get_elem_ptr v30, ptr u8, v75
        v77 = load v76
        v78 = const u64 12
        v79 = get_elem_ptr v30, ptr u8, v78
        v80 = load v79
        v81 = const u64 13
        v82 = get_elem_ptr v30, ptr u8, v81
        v83 = load v82
        v84 = const u64 14
        v85 = get_elem_ptr v30, ptr u8, v84
        v86 = load v85
        v87 = const u64 15
        v88 = get_elem_ptr v30, ptr u8, v87
        v89 = load v88
        v90 = const u64 16
        v91 = get_elem_ptr v30, ptr u8, v90
        v92 = load v91
        v93 = const u64 17
        v94 = get_elem_ptr v30, ptr u8, v93
        v95 = load v94
        v96 = const u64 18
        v97 = get_elem_ptr v30, ptr u8, v96
        v98 = load v97
        v99 = const u64 19
        v100 = get_elem_ptr v30, ptr u8, v99
        v101 = load v100
        v102 = const u64 20
        v103 = get_elem_ptr v30, ptr u8, v102
        v104 = load v103
        v105 = const u64 21
        v106 = get_elem_ptr v30, ptr u8, v105
        v107 = load v106
        v108 = const u64 22
        v109 = get_elem_ptr v30, ptr u8, v108
        v110 = load v109
        v111 = const u64 23
        v112 = get_elem_ptr v30, ptr u8, v111
        v113 = load v112
        v114 = const u64 24
        v115 = get_elem_ptr v30, ptr u8, v114
        v116 = load v115
        v117 = const u64 25
        v118 = get_elem_ptr v30, ptr u8, v117
        v119 = load v118
        v120 = const u64 26
        v121 = get_elem_ptr v30, ptr u8, v120
        v122 = load v121
        v123 = const u64 27
        v124 = get_elem_ptr v30, ptr u8, v123
        v125 = load v124
        v126 = const u64 28
        v127 = get_elem_ptr v30, ptr u8, v126
        v128 = load v127
        v129 = const u64 29
        v130 = get_elem_ptr v30, ptr u8, v129
        v131 = load v130
        v132 = const u64 30
        v133 = get_elem_ptr v30, ptr u8, v132
        v134 = load v133
        v135 = const u64 31
        v136 = get_elem_ptr v30, ptr u8, v135
        v137 = load v136
        v138 = const u64 32
        v139 = get_elem_ptr v30, ptr u8, v138
        v140 = load v139
        v141 = const u64 33
        v142 = get_elem_ptr v30, ptr u8, v141
        v143 = load v142
        v144 = const u64 34
        v145 = get_elem_ptr v30, ptr u8, v144
        v146 = load v145
        v147 = const u64 35
        v148 = get_elem_ptr v30, ptr u8, v147
        v149 = load v148
        v150 = const u64 36
        v151 = get_elem_ptr v30, ptr u8, v150
        v152 = load v151
        v153 = const u64 37
        v154 = get_elem_ptr v30, ptr u8, v153
        v155 = load v154
        v156 = const u64 38
        v157 = get_elem_ptr v30, ptr u8, v156
        v158 = load v157
        v159 = const u64 39
        v160 = get_elem_ptr v30, ptr u8, v159
        v161 = load v160
        v162 = const u64 40
        v163 = get_elem_ptr v30, ptr u8, v162
        v164 = load v163
        v165 = const u64 41
        v166 = get_elem_ptr v30, ptr u8, v165
        v167 = load v166
        v168 = const u64 42
        v169 = get_elem_ptr v30, ptr u8, v168
        v170 = load v169
        v171 = const u64 43
        v172 = get_elem_ptr v30, ptr u8, v171
        v173 = load v172
        v174 = const u64 44
        v175 = get_elem_ptr v30, ptr u8, v174
        v176 = load v175
        v177 = const u64 45
        v178 = get_elem_ptr v30, ptr u8, v177
        v179 = load v178
        v180 = const u64 46
        v181 = get_elem_ptr v30, ptr u8, v180
        v182 = load v181
        v183 = const u64 47
        v184 = get_elem_ptr v30, ptr u8, v183
        v185 = load v184
        v186 = const u64 48
        v187 = get_elem_ptr v30, ptr u8, v186
        v188 = load v187
        v189 = const u64 49
        v190 = get_elem_ptr v30, ptr u8, v189
        v191 = load v190
        v192 = const u64 50
        v193 = get_elem_ptr v30, ptr u8, v192
        v194 = load v193
        v195 = const u64 51
        v196 = get_elem_ptr v30, ptr u8, v195
        v197 = load v196
        v198 = const u64 52
        v199 = get_elem_ptr v30, ptr u8, v198
        v200 = load v199
        v201 = const u64 53
        v202 = get_elem_ptr v30, ptr u8, v201
        v203 = load v202
        v204 = const u64 54
        v205 = get_elem_ptr v30, ptr u8, v204
        v206 = load v205
        v207 = const u64 55
        v208 = get_elem_ptr v30, ptr u8, v207
        v209 = load v208
        v210 = const u64 56
        v211 = get_elem_ptr v30, ptr u8, v210
        v212 = load v211
        v213 = const u64 57
        v214 = get_elem_ptr v30, ptr u8, v213
        v215 = load v214
        v216 = const u64 58
        v217 = get_elem_ptr v30, ptr u8, v216
        v218 = load v217
        v219 = const u64 59
        v220 = get_elem_ptr v30, ptr u8, v219
        v221 = load v220
        v222 = const u64 60
        v223 = get_elem_ptr v30, ptr u8, v222
        v224 = load v223
        v225 = const u64 61
        v226 = get_elem_ptr v30, ptr u8, v225
        v227 = load v226
        v228 = const u64 62
        v229 = get_elem_ptr v30, ptr u8, v228
        v230 = load v229
        v231 = const u64 63
        v232 = get_elem_ptr v30, ptr u8, v231
        v233 = load v232
        v234 = get_local ptr u8, __anon_10
        store v44 to v234
        v235 = get_local ptr u8, __anon_11
        store v47 to v235
        v236 = get_local ptr u8, __anon_12
        store v50 to v236
        v237 = get_local ptr u8, __anon_13
        store v53 to v237
        v238 = get_local ptr u8, __anon_14
        store v56 to v238
        v239 = get_local ptr u8, __anon_15
        store v59 to v239
        v240 = get_local ptr u8, __anon_16
        store v62 to v240
        v241 = get_local ptr u8, __anon_17
        store v65 to v241
        v242 = get_local ptr u8, __anon_18
        store v68 to v242
        v243 = get_local ptr u8, __anon_19
        store v71 to v243
        v244 = get_local ptr u8, __anon_110
        store v74 to v244
        v245 = get_local ptr u8, __anon_111
        store v77 to v245
        v246 = get_local ptr u8, __anon_112
        store v80 to v246
        v247 = get_local ptr u8, __anon_113
        store v83 to v247
        v248 = get_local ptr u8, __anon_114
        store v86 to v248
        v249 = get_local ptr u8, __anon_115
        store v89 to v249
        v250 = get_local ptr u8, __anon_116
        store v92 to v250
        v251 = get_local ptr u8, __anon_117
        store v95 to v251
        v252 = get_local ptr u8, __anon_118
        store v98 to v252
        v253 = get_local ptr u8, __anon_119
        store v101 to v253
        v254 = get_local ptr u8, __anon_120
        store v104 to v254
        v255 = get_local ptr u8, __anon_121
        store v107 to v255
        v256 = get_local ptr u8, __anon_122
        store v110 to v256
        v257 = get_local ptr u8, __anon_123
        store v113 to v257
        v258 = get_local ptr u8, __anon_124
        store v116 to v258
        v259 = get_local ptr u8, __anon_125
        store v119 to v259
        v260 = get_local ptr u8, __anon_126
        store v122 to v260
        v261 = get_local ptr u8, __anon_127
        store v125 to v261
        v262 = get_local ptr u8, __anon_128
        store v128 to v262
        v263 = get_local ptr u8, __anon_129
        store v131 to v263
        v264 = get_local ptr u8, __anon_130
        store v134 to v264
        v265 = get_local ptr u8, __anon_131
        store v137 to v265
        v266 = get_local ptr u8, __anon_132
        store v140 to v266
        v267 = get_local ptr u8, __anon_133
        store v143 to v267
        v268 = get_local ptr u8, __anon_134
        store v146 to v268
        v269 = get_local ptr u8, __anon_135
        store v149 to v269
        v270 = get_local ptr u8, __anon_136
        store v152 to v270
        v271 = get_local ptr u8, __anon_137
        store v155 to v271
        v272 = get_local ptr u8, __anon_138
        store v158 to v272
        v273 = get_local ptr u8, __anon_139
        store v161 to v273
        v274 = get_local ptr u8, __anon_140
        store v164 to v274
        v275 = get_local ptr u8, __anon_141
        store v167 to v275
        v276 = get_local ptr u8, __anon_142
        store v170 to v276
        v277 = get_local ptr u8, __anon_143
        store v173 to v277
        v278 = get_local ptr u8, __anon_144
        store v176 to v278
        v279 = get_local ptr u8, __anon_145
        store v179 to v279
        v280 = get_local ptr u8, __anon_146
        store v182 to v280
        v281 = get_local ptr u8, __anon_147
        store v185 to v281
        v282 = get_local ptr u8, __anon_148
        store v188 to v282
        v283 = get_local ptr u8, __anon_149
        store v191 to v283
        v284 = get_local ptr u8, __anon_150
        store v194 to v284
        v285 = get_local ptr u8, __anon_151
        store v197 to v285
        v286 = get_local ptr u8, __anon_152
        store v200 to v286
        v287 = get_local ptr u8, __anon_153
        store v203 to v287
        v288 = get_local ptr u8, __anon_154
        store v206 to v288
        v289 = get_local ptr u8, __anon_155
        store v209 to v289
        v290 = get_local ptr u8, __anon_156
        store v212 to v290
        v291 = get_local ptr u8, __anon_157
        store v215 to v291
        v292 = get_local ptr u8, __anon_158
        store v218 to v292
        v293 = get_local ptr u8, __anon_159
        store v221 to v293
        v294 = get_local ptr u8, __anon_160
        store v224 to v294
        v295 = get_local ptr u8, __anon_161
        store v227 to v295
        v296 = get_local ptr u8, __anon_162
        store v230 to v296
        v297 = get_local ptr u8, __anon_163
        store v233 to v297
        v298 = get_local ptr { [u8; 64] }, secp256k1, !24
        v299 = get_local ptr u8, __anon_10
        v300 = load v299
        v301 = get_local ptr u8, __anon_11
        v302 = load v301
        v303 = get_local ptr u8, __anon_12
        v304 = load v303
        v305 = get_local ptr u8, __anon_13
        v306 = load v305
        v307 = get_local ptr u8, __anon_14
        v308 = load v307
        v309 = get_local ptr u8, __anon_15
        v310 = load v309
        v311 = get_local ptr u8, __anon_16
        v312 = load v311
        v313 = get_local ptr u8, __anon_17
        v314 = load v313
        v315 = get_local ptr u8, __anon_18
        v316 = load v315
        v317 = get_local ptr u8, __anon_19
        v318 = load v317
        v319 = get_local ptr u8, __anon_110
        v320 = load v319
        v321 = get_local ptr u8, __anon_111
        v322 = load v321
        v323 = get_local ptr u8, __anon_112
        v324 = load v323
        v325 = get_local ptr u8, __anon_113
        v326 = load v325
        v327 = get_local ptr u8, __anon_114
        v328 = load v327
        v329 = get_local ptr u8, __anon_115
        v330 = load v329
        v331 = get_local ptr u8, __anon_116
        v332 = load v331
        v333 = get_local ptr u8, __anon_117
        v334 = load v333
        v335 = get_local ptr u8, __anon_118
        v336 = load v335
        v337 = get_local ptr u8, __anon_119
        v338 = load v337
        v339 = get_local ptr u8, __anon_120
        v340 = load v339
        v341 = get_local ptr u8, __anon_121
        v342 = load v341
        v343 = get_local ptr u8, __anon_122
        v344 = load v343
        v345 = get_local ptr u8, __anon_123
        v346 = load v345
        v347 = get_local ptr u8, __anon_124
        v348 = load v347
        v349 = get_local ptr u8, __anon_125
        v350 = load v349
        v351 = get_local ptr u8, __anon_126
        v352 = load v351
        v353 = get_local ptr u8, __anon_127
        v354 = load v353
        v355 = get_local ptr u8, __anon_128
        v356 = load v355
        v357 = get_local ptr u8, __anon_129
        v358 = load v357
        v359 = get_local ptr u8, __anon_130
        v360 = load v359
        v361 = get_local ptr u8, __anon_131
        v362 = load v361
        v363 = get_local ptr u8, __anon_132
        v364 = load v363
        v365 = get_local ptr u8, __anon_133
        v366 = load v365
        v367 = get_local ptr u8, __anon_134
        v368 = load v367
        v369 = get_local ptr u8, __anon_135
        v370 = load v369
        v371 = get_local ptr u8, __anon_136
        v372 = load v371
        v373 = get_local ptr u8, __anon_137
        v374 = load v373
        v375 = get_local ptr u8, __anon_138
        v376 = load v375
        v377 = get_local ptr u8, __anon_139
        v378 = load v377
        v379 = get_local ptr u8, __anon_140
        v380 = load v379
        v381 = get_local ptr u8, __anon_141
        v382 = load v381
        v383 = get_local ptr u8, __anon_142
        v384 = load v383
        v385 = get_local ptr u8, __anon_143
        v386 = load v385
        v387 = get_local ptr u8, __anon_144
        v388 = load v387
        v389 = get_local ptr u8, __anon_145
        v390 = load v389
        v391 = get_local ptr u8, __anon_146
        v392 = load v391
        v393 = get_local ptr u8, __anon_147
        v394 = load v393
        v395 = get_local ptr u8, __anon_148
        v396 = load v395
        v397 = get_local ptr u8, __anon_149
        v398 = load v397
        v399 = get_local ptr u8, __anon_150
        v400 = load v399
        v401 = get_local ptr u8, __anon_151
        v402 = load v401
        v403 = get_local ptr u8, __anon_152
        v404 = load v403
        v405 = get_local ptr u8, __anon_153
        v406 = load v405
        v407 = get_local ptr u8, __anon_154
        v408 = load v407
        v409 = get_local ptr u8, __anon_155
        v410 = load v409
        v411 = get_local ptr u8, __anon_156
        v412 = load v411
        v413 = get_local ptr u8, __anon_157
        v414 = load v413
        v415 = get_local ptr u8, __anon_158
        v416 = load v415
        v417 = get_local ptr u8, __anon_159
        v418 = load v417
        v419 = get_local ptr u8, __anon_160
        v420 = load v419
        v421 = get_local ptr u8, __anon_161
        v422 = load v421
        v423 = get_local ptr u8, __anon_162
        v424 = load v423
        v425 = get_local ptr u8, __anon_163
        v426 = load v425
        v427 = const u64 0
        v428 = const u64 0
        v429 = get_elem_ptr v298, ptr u8, v427, v428
        store v300 to v429
        v430 = const u64 0
        v431 = const u64 1
        v432 = get_elem_ptr v298, ptr u8, v430, v431
        store v302 to v432
        v433 = const u64 0
        v434 = const u64 2
        v435 = get_elem_ptr v298, ptr u8, v433, v434
        store v304 to v435
        v436 = const u64 0
        v437 = const u64 3
        v438 = get_elem_ptr v298, ptr u8, v436, v437
        store v306 to v438
        v439 = const u64 0
        v440 = const u64 4
        v441 = get_elem_ptr v298, ptr u8, v439, v440
        store v308 to v441
        v442 = const u64 0
        v443 = const u64 5
        v444 = get_elem_ptr v298, ptr u8, v442, v443
        store v310 to v444
        v445 = const u64 0
        v446 = const u64 6
        v447 = get_elem_ptr v298, ptr u8, v445, v446
        store v312 to v447
        v448 = const u64 0
        v449 = const u64 7
        v450 = get_elem_ptr v298, ptr u8, v448, v449
        store v314 to v450
        v451 = const u64 0
        v452 = const u64 8
        v453 = get_elem_ptr v298, ptr u8, v451, v452
        store v316 to v453
        v454 = const u64 0
        v455 = const u64 9
        v456 = get_elem_ptr v298, ptr u8, v454, v455
        store v318 to v456
        v457 = const u64 0
        v458 = const u64 10
        v459 = get_elem_ptr v298, ptr u8, v457, v458
        store v320 to v459
        v460 = const u64 0
        v461 = const u64 11
        v462 = get_elem_ptr v298, ptr u8, v460, v461
        store v322 to v462
        v463 = const u64 0
        v464 = const u64 12
        v465 = get_elem_ptr v298, ptr u8, v463, v464
        store v324 to v465
        v466 = const u64 0
        v467 = const u64 13
        v468 = get_elem_ptr v298, ptr u8, v466, v467
        store v326 to v468
        v469 = const u64 0
        v470 = const u64 14
        v471 = get_elem_ptr v298, ptr u8, v469, v470
        store v328 to v471
        v472 = const u64 0
        v473 = const u64 15
        v474 = get_elem_ptr v298, ptr u8, v472, v473
        store v330 to v474
        v475 = const u64 0
        v476 = const u64 16
        v477 = get_elem_ptr v298, ptr u8, v475, v476
        store v332 to v477
        v478 = const u64 0
        v479 = const u64 17
        v480 = get_elem_ptr v298, ptr u8, v478, v479
        store v334 to v480
        v481 = const u64 0
        v482 = const u64 18
        v483 = get_elem_ptr v298, ptr u8, v481, v482
        store v336 to v483
        v484 = const u64 0
        v485 = const u64 19
        v486 = get_elem_ptr v298, ptr u8, v484, v485
        store v338 to v486
        v487 = const u64 0
        v488 = const u64 20
        v489 = get_elem_ptr v298, ptr u8, v487, v488
        store v340 to v489
        v490 = const u64 0
        v491 = const u64 21
        v492 = get_elem_ptr v298, ptr u8, v490, v491
        store v342 to v492
        v493 = const u64 0
        v494 = const u64 22
        v495 = get_elem_ptr v298, ptr u8, v493, v494
        store v344 to v495
        v496 = const u64 0
        v497 = const u64 23
        v498 = get_elem_ptr v298, ptr u8, v496, v497
        store v346 to v498
        v499 = const u64 0
        v500 = const u64 24
        v501 = get_elem_ptr v298, ptr u8, v499, v500
        store v348 to v501
        v502 = const u64 0
        v503 = const u64 25
        v504 = get_elem_ptr v298, ptr u8, v502, v503
        store v350 to v504
        v505 = const u64 0
        v506 = const u64 26
        v507 = get_elem_ptr v298, ptr u8, v505, v506
        store v352 to v507
        v508 = const u64 0
        v509 = const u64 27
        v510 = get_elem_ptr v298, ptr u8, v508, v509
        store v354 to v510
        v511 = const u64 0
        v512 = const u64 28
        v513 = get_elem_ptr v298, ptr u8, v511, v512
        store v356 to v513
        v514 = const u64 0
        v515 = const u64 29
        v516 = get_elem_ptr v298, ptr u8, v514, v515
        store v358 to v516
        v517 = const u64 0
        v518 = const u64 30
        v519 = get_elem_ptr v298, ptr u8, v517, v518
        store v360 to v519
        v520 = const u64 0
        v521 = const u64 31
        v522 = get_elem_ptr v298, ptr u8, v520, v521
        store v362 to v522
        v523 = const u64 0
        v524 = const u64 32
        v525 = get_elem_ptr v298, ptr u8, v523, v524
        store v364 to v525
        v526 = const u64 0
        v527 = const u64 33
        v528 = get_elem_ptr v298, ptr u8, v526, v527
        store v366 to v528
        v529 = const u64 0
        v530 = const u64 34
        v531 = get_elem_ptr v298, ptr u8, v529, v530
        store v368 to v531
        v532 = const u64 0
        v533 = const u64 35
        v534 = get_elem_ptr v298, ptr u8, v532, v533
        store v370 to v534
        v535 = const u64 0
        v536 = const u64 36
        v537 = get_elem_ptr v298, ptr u8, v535, v536
        store v372 to v537
        v538 = const u64 0
        v539 = const u64 37
        v540 = get_elem_ptr v298, ptr u8, v538, v539
        store v374 to v540
        v541 = const u64 0
        v542 = const u64 38
        v543 = get_elem_ptr v298, ptr u8, v541, v542
        store v376 to v543
        v544 = const u64 0
        v545 = const u64 39
        v546 = get_elem_ptr v298, ptr u8, v544, v545
        store v378 to v546
        v547 = const u64 0
        v548 = const u64 40
        v549 = get_elem_ptr v298, ptr u8, v547, v548
        store v380 to v549
        v550 = const u64 0
        v551 = const u64 41
        v552 = get_elem_ptr v298, ptr u8, v550, v551
        store v382 to v552
        v553 = const u64 0
        v554 = const u64 42
        v555 = get_elem_ptr v298, ptr u8, v553, v554
        store v384 to v555
        v556 = const u64 0
        v557 = const u64 43
        v558 = get_elem_ptr v298, ptr u8, v556, v557
        store v386 to v558
        v559 = const u64 0
        v560 = const u64 44
        v561 = get_elem_ptr v298, ptr u8, v559, v560
        store v388 to v561
        v562 = const u64 0
        v563 = const u64 45
        v564 = get_elem_ptr v298, ptr u8, v562, v563
        store v390 to v564
        v565 = const u64 0
        v566 = const u64 46
        v567 = get_elem_ptr v298, ptr u8, v565, v566
        store v392 to v567
        v568 = const u64 0
        v569 = const u64 47
        v570 = get_elem_ptr v298, ptr u8, v568, v569
        store v394 to v570
        v571 = const u64 0
        v572 = const u64 48
        v573 = get_elem_ptr v298, ptr u8, v571, v572
        store v396 to v573
        v574 = const u64 0
        v575 = const u64 49
        v576 = get_elem_ptr v298, ptr u8, v574, v575
        store v398 to v576
        v577 = const u64 0
        v578 = const u64 50
        v579 = get_elem_ptr v298, ptr u8, v577, v578
        store v400 to v579
        v580 = const u64 0
        v581 = const u64 51
        v582 = get_elem_ptr v298, ptr u8, v580, v581
        store v402 to v582
        v583 = const u64 0
        v584 = const u64 52
        v585 = get_elem_ptr v298, ptr u8, v583, v584
        store v404 to v585
        v586 = const u64 0
        v587 = const u64 53
        v588 = get_elem_ptr v298, ptr u8, v586, v587
        store v406 to v588
        v589 = const u64 0
        v590 = const u64 54
        v591 = get_elem_ptr v298, ptr u8, v589, v590
        store v408 to v591
        v592 = const u64 0
        v593 = const u64 55
        v594 = get_elem_ptr v298, ptr u8, v592, v593
        store v410 to v594
        v595 = const u64 0
        v596 = const u64 56
        v597 = get_elem_ptr v298, ptr u8, v595, v596
        store v412 to v597
        v598 = const u64 0
        v599 = const u64 57
        v600 = get_elem_ptr v298, ptr u8, v598, v599
        store v414 to v600
        v601 = const u64 0
        v602 = const u64 58
        v603 = get_elem_ptr v298, ptr u8, v601, v602
        store v416 to v603
        v604 = const u64 0
        v605 = const u64 59
        v606 = get_elem_ptr v298, ptr u8, v604, v605
        store v418 to v606
        v607 = const u64 0
        v608 = const u64 60
        v609 = get_elem_ptr v298, ptr u8, v607, v608
        store v420 to v609
        v610 = const u64 0
        v611 = const u64 61
        v612 = get_elem_ptr v298, ptr u8, v610, v611
        store v422 to v612
        v613 = const u64 0
        v614 = const u64 62
        v615 = get_elem_ptr v298, ptr u8, v613, v614
        store v424 to v615
        v616 = const u64 0
        v617 = const u64 63
        v618 = get_elem_ptr v298, ptr u8, v616, v617
        store v426 to v618
        v619 = get_local ptr { [u8; 64] }, secp256k1, !26
        v620 = get_local ptr { [u8; 64] }, secp256k1, !28
        v621 = ptr_to_int v619 to u64, !31
        v622 = int_to_ptr v621 to ptr { [u8; 64] }, !32
        v623 = const u64 0
        v624 = get_elem_ptr v622, ptr [u8; 64], v623, !34
        v625 = ptr_to_int v620 to u64, !35
        v626 = int_to_ptr v625 to ptr { [u8; 64] }, !36
        v627 = const u64 0
        v628 = get_elem_ptr v626, ptr [u8; 64], v627, !37
        v629 = const u64 64, !38
        v630 = asm(result, r2: v624, r3: v628, r4: v629) -> bool result, !40 {
            meq    result r2 r3 r4, !41
        }
        v631 = get_local ptr { [u8; 64] }, secp256k1, !43
        v632 = get_local ptr { { { u64, u64 }, u64 } }, message, !45
        v633 = get_local ptr { [u8; 64] }, __tmp_arg
        mem_copy_val v633, v631
        v634 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        v635 = get_local ptr u64, message0
        v636 = load v635
        v637 = get_local ptr u64, message8
        v638 = load v637
        v639 = get_local ptr u64, message16
        v640 = load v639
        v641 = const u64 0
        v642 = const u64 0
        v643 = const u64 0
        v644 = get_elem_ptr v634, ptr u64, v641, v642, v643
        store v636 to v644
        v645 = const u64 0
        v646 = const u64 0
        v647 = const u64 1
        v648 = get_elem_ptr v634, ptr u64, v645, v646, v647
        store v638 to v648
        v649 = const u64 0
        v650 = const u64 1
        v651 = get_elem_ptr v634, ptr u64, v649, v650
        store v640 to v651
        v652 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v653 = call address_7(v633, v634, v652)
        v654 = get_local ptr { [u8; 64] }, secp256k1, !47
        v655 = get_local ptr { { { u64, u64 }, u64 } }, message, !49
        v656 = get_local ptr { [u8; 64] }, __tmp_arg1
        mem_copy_val v656, v654
        v657 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v658 = get_local ptr u64, message0
        v659 = load v658
        v660 = get_local ptr u64, message8
        v661 = load v660
        v662 = get_local ptr u64, message16
        v663 = load v662
        v664 = const u64 0
        v665 = const u64 0
        v666 = const u64 0
        v667 = get_elem_ptr v657, ptr u64, v664, v665, v666
        store v659 to v667
        v668 = const u64 0
        v669 = const u64 0
        v670 = const u64 1
        v671 = get_elem_ptr v657, ptr u64, v668, v669, v670
        store v661 to v671
        v672 = const u64 0
        v673 = const u64 1
        v674 = get_elem_ptr v657, ptr u64, v672, v673
        store v663 to v674
        v675 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v676 = call address_7(v656, v657, v675)
        v677 = const unit ()
        ret () v677
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !52 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local u64 __anon_000000
        local u64 __anon_0000000
        local u64 __anon_000008
        local u64 __anon_000016
        local u64 __anon_00008
        local { { { u64, u64 }, u64 } } __anon_01
        local u64 __anon_010
        local u64 __anon_0116
        local u64 __anon_018
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local u64 bytes0
        local u64 bytes16
        local u64 bytes8
        local { u64 } e
        local u64 e0
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key
        local u64 pub_key0
        local u64 pub_key16
        local u64 pub_key8

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !57
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !58
        v3 = const u64 0, !56
        store v3 to v2, !59
        v4 = ptr_to_int message to u64, !62
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !63
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !66
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !67
        v11 = cmp eq v9 v10, !73
        v12 = const bool false, !74
        v13 = cmp eq v11 v12, !77
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !78

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !81
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !82
        v17 = const u64 0, !80
        store v17 to v16, !83
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !85

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !86
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !87
        v22 = const u64 1, !80
        store v22 to v21, !88
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !89
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !90

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !94
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !95
        v37 = const u64 1, !96
        v38 = cmp eq v36 v37, !99
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !100

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !101
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !102
        v43 = get_local ptr b256, inner_value, !104
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !106
        v45 = const u64 32, !108
        v46 = asm(size: v45) -> u64 hp, !122 {
            aloc   size, !123
        }
        v47 = get_local ptr { u64, u64 }, __anon_00000, !125
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !126
        v50 = get_local ptr u64, __anon_0000000
        store v46 to v50, !127
        v51 = const u64 1
        v52 = get_elem_ptr v47, ptr u64, v51, !128
        v53 = get_local ptr u64, __anon_000008
        store v45 to v53, !129
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !131
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !132
        v57 = get_local ptr u64, __anon_0000000
        v58 = load v57
        v59 = get_local ptr u64, __anon_000008
        v60 = load v59
        v61 = get_local ptr u64, __anon_000000
        store v58 to v61
        v62 = get_local ptr u64, __anon_00008
        store v60 to v62
        v63 = const u64 1
        v64 = get_elem_ptr v54, ptr u64, v63, !133
        v65 = get_local ptr u64, __anon_000016
        v66 = const u64 0, !134
        store v66 to v65, !135
        v67 = get_local ptr { { u64, u64 }, u64 }, bytes, !137
        v68 = get_local ptr u64, __anon_000000
        v69 = load v68
        v70 = get_local ptr u64, __anon_00008
        v71 = load v70
        v72 = get_local ptr u64, __anon_000016
        v73 = load v72
        v74 = get_local ptr u64, bytes0
        store v69 to v74
        v75 = get_local ptr u64, bytes8
        store v71 to v75
        v76 = get_local ptr u64, bytes16
        store v73 to v76
        v77 = get_local ptr { { u64, u64 }, u64 }, bytes, !139
        v78 = const u64 1
        v79 = get_elem_ptr v77, ptr u64, v78, !140
        v80 = get_local ptr u64, bytes16
        v81 = const u64 32, !141
        store v81 to v80, !142
        v82 = ptr_to_int v44 to u64, !144
        v83 = get_local ptr { { u64, u64 }, u64 }, bytes, !146
        v84 = const u64 0
        v85 = get_elem_ptr v83, ptr { u64, u64 }, v84, !148
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr u64, v86, !150
        v88 = get_local ptr u64, bytes0
        v89 = load v88, !151
        v90 = const u64 32, !152
        v91 = asm(dst: v89, src: v82, len: v90) -> (), !157 {
            mcp    dst src len, !158
        }
        v92 = get_local ptr { { u64, u64 }, u64 }, bytes, !160
        v93 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !162
        v94 = const u64 0
        v95 = get_elem_ptr v93, ptr { { u64, u64 }, u64 }, v94, !163
        v96 = get_local ptr u64, bytes0
        v97 = load v96
        v98 = get_local ptr u64, bytes8
        v99 = load v98
        v100 = get_local ptr u64, bytes16
        v101 = load v100
        v102 = get_local ptr u64, __anon_010
        store v97 to v102
        v103 = get_local ptr u64, __anon_018
        store v99 to v103
        v104 = get_local ptr u64, __anon_0116
        store v101 to v104
        v105 = const u64 1
        v106 = const u64 0
        v107 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v105, v106, !164
        v108 = get_local ptr u64, __anon_010
        v109 = load v108
        v110 = get_local ptr u64, __anon_018
        v111 = load v110
        v112 = get_local ptr u64, __anon_0116
        v113 = load v112
        v114 = const u64 0
        v115 = const u64 0
        v116 = const u64 0
        v117 = get_elem_ptr v107, ptr u64, v114, v115, v116
        store v109 to v117
        v118 = const u64 0
        v119 = const u64 0
        v120 = const u64 1
        v121 = get_elem_ptr v107, ptr u64, v118, v119, v120
        store v111 to v121
        v122 = const u64 0
        v123 = const u64 1
        v124 = get_elem_ptr v107, ptr u64, v122, v123
        store v113 to v124
        v125 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !165
        mem_copy_val v125, v0
        v126 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v127 = const u64 0
        v128 = get_elem_ptr v126, ptr u64, v127
        v129 = load v128
        v130 = const u64 0, !53
        v131 = cmp eq v129 v130, !168
        cbr v131, block0(), block1(), !166

        recover_8_unwrap_14_block1():
        v132 = const u64 0, !169
        revert v132, !174

        block0():
        v133 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v134 = const u64 1
        v135 = const u64 0
        v136 = get_elem_ptr v133, ptr { { { u64, u64 }, u64 } }, v134, v135
        v137 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !175
        v138 = const u64 0
        v139 = const u64 0
        v140 = const u64 0
        v141 = get_elem_ptr v136, ptr u64, v138, v139, v140
        v142 = load v141
        v143 = const u64 0
        v144 = const u64 0
        v145 = const u64 1
        v146 = get_elem_ptr v136, ptr u64, v143, v144, v145
        v147 = load v146
        v148 = const u64 0
        v149 = const u64 1
        v150 = get_elem_ptr v136, ptr u64, v148, v149
        v151 = load v150
        v152 = get_local ptr u64, pub_key0
        store v142 to v152
        v153 = get_local ptr u64, pub_key8
        store v147 to v153
        v154 = get_local ptr u64, pub_key16
        store v151 to v154
        v155 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !56
        v156 = const u64 0
        v157 = get_elem_ptr v155, ptr u64, v156, !56
        v158 = const u64 0, !56
        store v158 to v157, !56
        v159 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v159, v136
        v160 = get_local ptr b256, __ret_val
        v161 = call sha256_24(v159, v160)
        v162 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v162, v161
        v163 = get_local ptr { b256 }, __anon_02, !180
        v164 = const u64 0
        v165 = get_elem_ptr v163, ptr b256, v164, !181
        mem_copy_val v165, v162
        v166 = const u64 1
        v167 = const u64 0
        v168 = get_elem_ptr v155, ptr { b256 }, v166, v167, !56
        mem_copy_val v168, v163
        v169 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v169, v155
        br block5(v169)

        block1():
        v170 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v171 = const u64 0
        v172 = get_elem_ptr v170, ptr u64, v171, !53
        v173 = load v172
        v174 = const u64 1, !53
        v175 = cmp eq v173 v174, !184
        cbr v175, block2(), block3(), !182

        block2():
        v176 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v177 = const u64 1
        v178 = const u64 1
        v179 = get_elem_ptr v176, ptr { u64 }, v177, v178
        v180 = get_local ptr { u64 }, e, !185
        v181 = const u64 0
        v182 = get_elem_ptr v179, ptr u64, v181
        v183 = load v182
        v184 = get_local ptr u64, e0
        store v183 to v184
        v185 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !56
        v186 = const u64 0
        v187 = get_elem_ptr v185, ptr u64, v186, !56
        v188 = const u64 1, !56
        store v188 to v187, !56
        v189 = const u64 1
        v190 = const u64 1
        v191 = get_elem_ptr v185, ptr { u64 }, v189, v190, !56
        mem_copy_val v191, v179
        v192 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v192, v185
        br block5(v192)

        block3():
        v193 = const u64 14757395258967588866, !165
        revert v193, !165

        block5(v194: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v194
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !188 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !189
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !192 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !147
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !195 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !149
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !200 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local u64 __aggr_memcpy_000
        local mut { u64, u64 } __aggr_memcpy_01
        local u64 __aggr_memcpy_010
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_018
        local mut { u64, u64 } __aggr_memcpy_02
        local u64 __aggr_memcpy_020
        local u64 __aggr_memcpy_028
        local mut b256 __aggr_memcpy_03
        local u64 __aggr_memcpy_08
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_008
        local { u64, u64 } __anon_01
        local u64 __anon_010
        local u64 __anon_018
        local u64 __anon_08
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_000
        store v7 to v17
        v18 = get_local ptr u64, __aggr_memcpy_08
        store v12 to v18
        v19 = get_local ptr u64, __aggr_memcpy_016
        store v16 to v19
        v20 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !201
        v21 = get_local ptr u64, __aggr_memcpy_000
        v22 = load v21
        v23 = get_local ptr u64, __aggr_memcpy_08
        v24 = load v23
        v25 = get_local ptr u64, __aggr_memcpy_016
        v26 = load v25
        v27 = const u64 0
        v28 = const u64 0
        v29 = const u64 0
        v30 = get_elem_ptr v20, ptr u64, v27, v28, v29
        store v22 to v30
        v31 = const u64 0
        v32 = const u64 0
        v33 = const u64 1
        v34 = get_elem_ptr v20, ptr u64, v31, v32, v33
        store v24 to v34
        v35 = const u64 0
        v36 = const u64 1
        v37 = get_elem_ptr v20, ptr u64, v35, v36
        store v26 to v37
        v38 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !202
        v39 = ptr_to_int s to u64, !205
        v40 = int_to_ptr v39 to ptr { { { u64, u64 }, u64 } }, !205
        v41 = const u64 0
        v42 = get_elem_ptr v40, ptr { { u64, u64 }, u64 }, v41, !207
        v43 = const u64 0
        v44 = get_elem_ptr v38, ptr { { u64, u64 }, u64 }, v43, !211
        v45 = ptr_to_int v42 to u64, !212
        v46 = int_to_ptr v45 to ptr { { u64, u64 }, u64 }, !213
        v47 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v47, v46
        v48 = call len_20(v47)
        v49 = const u64 0, !214
        v50 = cmp eq v48 v49, !219
        cbr v50, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !220

        hash_26_write_27_append_28_block1():
        v51 = const u64 1
        v52 = get_elem_ptr v44, ptr u64, v51, !221
        v53 = load v52, !222
        v54 = const u64 0, !223
        v55 = cmp eq v53 v54, !226
        cbr v55, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !227

        hash_26_write_27_append_28_block3():
        mem_copy_val v44, v46
        br hash_26_write_27_block0(), !229

        hash_26_write_27_append_28_block4():
        v56 = load v52, !230
        v57 = add v56, v48, !233
        v58 = load v52, !234
        v59 = const u64 0
        v60 = get_elem_ptr v44, ptr { u64, u64 }, v59, !235
        v61 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v61, v60
        v62 = call capacity_31(v61)
        v63 = cmp lt v62 v57, !238
        cbr v63, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !239

        hash_26_write_27_append_28_block6():
        v64 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v64, v60
        v65 = call ptr_22(v64)
        v66 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v66, v60
        v67 = call capacity_31(v66)
        v68 = cmp gt v57 v67, !244
        cbr v68, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v65), !245

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v69 = asm(size: v57) -> u64 hp, !248 {
            aloc   size, !123
        }
        v70 = const u64 0, !249
        v71 = cmp gt v67 v70, !252
        cbr v71, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v69), !253

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v72 = asm(dst: v69, src: v65, len: v67) -> (), !256 {
            mcp    dst src len, !158
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v69), !257

        hash_26_write_27_append_28_realloc_bytes_35_block5(v73: u64):
        v74 = get_local ptr { u64, u64 }, __anon_0, !262
        v75 = const u64 0
        v76 = get_elem_ptr v74, ptr u64, v75, !263
        v77 = get_local ptr u64, __anon_001
        store v73 to v77, !264
        v78 = const u64 1
        v79 = get_elem_ptr v74, ptr u64, v78, !265
        v80 = get_local ptr u64, __anon_08
        store v57 to v80, !266
        v81 = get_local ptr { u64, u64 }, __asm_arg
        v82 = get_local ptr u64, __anon_001
        v83 = load v82
        v84 = get_local ptr u64, __anon_08
        v85 = load v84
        v86 = const u64 0
        v87 = get_elem_ptr v81, ptr u64, v86
        store v83 to v87
        v88 = const u64 1
        v89 = get_elem_ptr v81, ptr u64, v88
        store v85 to v89
        v90 = asm(ptr: v81) -> ptr slice ptr {
        }
        v91 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v91, v90
        v92 = get_local ptr slice, new_slice, !268
        mem_copy_val v92, v91
        v93 = get_local ptr slice, new_slice, !270
        v94 = get_local ptr slice, __asm_arg0
        mem_copy_val v94, v91
        v95 = asm(ptr: v94) -> ptr { u64, u64 } ptr {
        }
        v96 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v97 = const u64 0
        v98 = get_elem_ptr v95, ptr u64, v97
        v99 = load v98
        v100 = const u64 1
        v101 = get_elem_ptr v95, ptr u64, v100
        v102 = load v101
        v103 = get_local ptr u64, __aggr_memcpy_010
        store v99 to v103
        v104 = get_local ptr u64, __aggr_memcpy_018
        store v102 to v104
        v105 = get_local ptr { u64, u64 }, __anon_000, !275
        v106 = get_local ptr u64, __aggr_memcpy_010
        v107 = load v106
        v108 = get_local ptr u64, __aggr_memcpy_018
        v109 = load v108
        v110 = get_local ptr u64, __anon_0000
        store v107 to v110
        v111 = get_local ptr u64, __anon_0008
        store v109 to v111
        v112 = const u64 1
        v113 = get_elem_ptr v105, ptr u64, v112, !277
        v114 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v115 = get_elem_ptr v114, ptr u64, v112
        v116 = get_local ptr u64, __aggr_memcpy_018
        v117 = load v116, !278
        v118 = asm(size: v117) -> u64 hp, !281 {
            aloc   size, !123
        }
        v119 = const u64 0, !282
        v120 = cmp gt v117 v119, !285
        cbr v120, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !286

        hash_26_write_27_append_28_from_37_block0():
        v121 = get_local ptr slice, __asm_arg1
        mem_copy_val v121, v93
        v122 = asm(ptr: v121) -> ptr { u64, u64 } ptr {
        }
        v123 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v124 = const u64 0
        v125 = get_elem_ptr v122, ptr u64, v124
        v126 = load v125
        v127 = const u64 1
        v128 = get_elem_ptr v122, ptr u64, v127
        v129 = load v128
        v130 = get_local ptr u64, __aggr_memcpy_020
        store v126 to v130
        v131 = get_local ptr u64, __aggr_memcpy_028
        store v129 to v131
        v132 = get_local ptr { u64, u64 }, __anon_01, !289
        v133 = get_local ptr u64, __aggr_memcpy_020
        v134 = load v133
        v135 = get_local ptr u64, __aggr_memcpy_028
        v136 = load v135
        v137 = get_local ptr u64, __anon_010
        store v134 to v137
        v138 = get_local ptr u64, __anon_018
        store v136 to v138
        v139 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v140 = const u64 0
        v141 = get_elem_ptr v139, ptr u64, v140
        v142 = get_local ptr u64, __aggr_memcpy_020
        v143 = load v142, !290
        v144 = asm(dst: v118, src: v143, len: v117) -> (), !294 {
            mcp    dst src len, !295
        }
        br hash_26_write_27_append_28_from_37_block2(), !296

        hash_26_write_27_append_28_from_37_block2():
        v145 = get_local ptr { u64, u64 }, __anon_00, !298
        v146 = const u64 0
        v147 = get_elem_ptr v145, ptr u64, v146, !299
        v148 = get_local ptr u64, __anon_0001
        store v118 to v148, !300
        v149 = const u64 1
        v150 = get_elem_ptr v145, ptr u64, v149, !301
        v151 = get_local ptr u64, __anon_0008
        v152 = load v151
        v153 = get_local ptr u64, __anon_008
        store v152 to v153
        v154 = get_local ptr u64, __anon_0001
        v155 = load v154
        v156 = get_local ptr u64, __anon_008
        v157 = load v156
        v158 = const u64 0
        v159 = get_elem_ptr v60, ptr u64, v158
        store v155 to v159
        v160 = const u64 1
        v161 = get_elem_ptr v60, ptr u64, v160
        store v157 to v161
        br hash_26_write_27_append_28_block8(), !302

        hash_26_write_27_append_28_block8():
        v162 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v162, v60
        v163 = call ptr_22(v162)
        v164 = asm(ptr: v163, offset: v58, new) -> u64 new, !306 {
            add    new ptr offset, !307
        }
        v165 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v165, v46
        v166 = call ptr_21(v165)
        v167 = asm(dst: v164, src: v166, len: v48) -> (), !310 {
            mcp    dst src len, !158
        }
        store v57 to v52, !312
        br hash_26_write_27_block0(), !313

        hash_26_write_27_block0():
        v168 = get_local ptr b256, __const
        v169 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !314
        v170 = get_local ptr b256, result_buffer, !318
        mem_copy_val v170, v168
        v171 = get_local ptr b256, result_buffer, !320
        v172 = ptr_to_int v169 to u64, !321
        v173 = int_to_ptr v172 to ptr { { { u64, u64 }, u64 } }, !321
        v174 = const u64 0
        v175 = get_elem_ptr v173, ptr { { u64, u64 }, u64 }, v174, !322
        v176 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v176, v175
        v177 = call ptr_21(v176)
        v178 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v178, v175
        v179 = call len_20(v178)
        v180 = asm(hash: v171, ptr: v177, bytes: v179) -> ptr b256 hash {
            s256   hash ptr bytes, !323
        }
        v181 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v181, v180
        mem_copy_val __ret_value, v181
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !326 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_0016
        local u64 __anon_008
        local u64 __anon_016
        local u64 __anon_08

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !327
        v1 = asm(size: v0) -> u64 hp, !334 {
            aloc   size, !123
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !336
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !337
        v5 = get_local ptr u64, __anon_0000
        store v1 to v5, !338
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6, !339
        v8 = get_local ptr u64, __anon_0008
        v9 = const u64 0, !340
        store v9 to v8, !341
        v10 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !343
        v11 = const u64 0
        v12 = get_elem_ptr v10, ptr { u64, u64 }, v11, !344
        v13 = get_local ptr u64, __anon_0000
        v14 = load v13
        v15 = get_local ptr u64, __anon_0008
        v16 = load v15
        v17 = get_local ptr u64, __anon_0001
        store v14 to v17
        v18 = get_local ptr u64, __anon_008
        store v16 to v18
        v19 = const u64 1
        v20 = get_elem_ptr v10, ptr u64, v19, !344
        v21 = get_local ptr u64, __anon_0016
        v22 = const u64 0, !345
        store v22 to v21, !346
        v23 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !347
        v24 = const u64 0
        v25 = get_elem_ptr v23, ptr { { u64, u64 }, u64 }, v24
        v26 = get_local ptr u64, __anon_0001
        v27 = load v26
        v28 = get_local ptr u64, __anon_008
        v29 = load v28
        v30 = get_local ptr u64, __anon_0016
        v31 = load v30
        v32 = get_local ptr u64, __anon_001
        store v27 to v32
        v33 = get_local ptr u64, __anon_08
        store v29 to v33
        v34 = get_local ptr u64, __anon_016
        store v31 to v34
        v35 = get_local ptr u64, __anon_001
        v36 = load v35
        v37 = get_local ptr u64, __anon_08
        v38 = load v37
        v39 = get_local ptr u64, __anon_016
        v40 = load v39
        v41 = const u64 0
        v42 = const u64 0
        v43 = const u64 0
        v44 = get_elem_ptr __ret_value, ptr u64, v41, v42, v43
        store v36 to v44
        v45 = const u64 0
        v46 = const u64 0
        v47 = const u64 1
        v48 = get_elem_ptr __ret_value, ptr u64, v45, v46, v47
        store v38 to v48
        v49 = const u64 0
        v50 = const u64 1
        v51 = get_elem_ptr __ret_value, ptr u64, v49, v50
        store v40 to v51
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !350 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !351
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = span !6 289 334
!21 = (!4 !5 !9 !10 !20)
!22 = (!4 !5 !9 !10)
!23 = span !6 1026 1059
!24 = (!4 !5 !23)
!25 = span !6 1072 1081
!26 = (!4 !5 !25)
!27 = span !6 1085 1094
!28 = (!4 !5 !27)
!29 = span !6 1072 1094
!30 = fn_call_path_span !6 1082 1084
!31 = (!4 !5 !29 !30)
!32 = (!4 !5 !29 !30)
!33 = span !6 218 232
!34 = (!4 !5 !29 !30 !33)
!35 = (!4 !5 !29 !30)
!36 = (!4 !5 !29 !30)
!37 = (!4 !5 !29 !30 !33)
!38 = span !6 889 891
!39 = span !6 842 962
!40 = (!4 !5 !29 !30 !39)
!41 = span !6 907 926
!42 = span !6 1108 1117
!43 = (!4 !5 !42)
!44 = span !6 1126 1133
!45 = (!4 !5 !44)
!46 = span !6 1148 1157
!47 = (!4 !5 !46)
!48 = span !6 1166 1173
!49 = (!4 !5 !48)
!50 = span !6 492 714
!51 = fn_name_span !6 499 506
!52 = (!50 !51)
!53 = span !6 582 603
!54 = fn_call_path_span !6 587 594
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!56 = span !55 1815 1933
!57 = (!53 !54 !56)
!58 = (!53 !54 !56)
!59 = (!53 !54 !56)
!60 = span !6 451 469
!61 = fn_call_path_span !6 459 467
!62 = (!53 !54 !60 !61)
!63 = (!53 !54 !60 !61)
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!65 = span !64 329 341
!66 = (!53 !54 !60 !61 !65)
!67 = span !64 1593 1595
!68 = span !64 1573 1595
!69 = fn_call_path_span !64 1590 1592
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!71 = span !70 15515 15529
!72 = fn_call_path_span !70 15520 15522
!73 = (!53 !54 !60 !61 !68 !69 !71 !72)
!74 = span !70 12533 12538
!75 = span !70 15514 15536
!76 = fn_call_path_span !70 15531 15534
!77 = (!53 !54 !60 !61 !68 !69 !75 !76)
!78 = (!53 !54 !60 !61 !68)
!79 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!80 = span !79 2461 2560
!81 = (!53 !54 !60 !61 !80)
!82 = (!53 !54 !60 !61 !80)
!83 = (!53 !54 !60 !61 !80)
!84 = span !64 1610 1621
!85 = (!53 !54 !60 !61 !84)
!86 = (!53 !54 !60 !61 !80)
!87 = (!53 !54 !60 !61 !80)
!88 = (!53 !54 !60 !61 !80)
!89 = (!53 !54 !60 !61 !80)
!90 = (!53 !54 !60 !61)
!91 = span !6 451 478
!92 = fn_call_path_span !6 470 476
!93 = span !79 4973 5075
!94 = (!53 !54 !91 !92 !93)
!95 = (!53 !54 !91 !92)
!96 = span !79 4979 4983
!97 = span !79 4998 5037
!98 = fn_call_path_span !79 4998 5037
!99 = (!53 !54 !91 !92 !97 !98)
!100 = (!53 !54 !91 !92 !97)
!101 = (!53 !54 !91 !92 !96)
!102 = (!53 !54 !91 !92)
!103 = span !79 5009 5020
!104 = (!53 !54 !91 !92 !103)
!105 = span !79 5025 5036
!106 = (!53 !54 !91 !92 !105)
!107 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!108 = span !107 28953 28955
!109 = span !6 435 479
!110 = fn_call_path_span !6 435 450
!111 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!112 = span !111 3133 3150
!113 = fn_call_path_span !111 3133 3144
!114 = span !107 28933 28956
!115 = fn_call_path_span !107 28933 28952
!116 = span !107 4157 4190
!117 = fn_call_path_span !107 4157 4180
!118 = span !107 863 884
!119 = fn_call_path_span !107 863 874
!120 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!121 = span !120 3315 3378
!122 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !118 !119 !121)
!123 = span !120 3342 3351
!124 = span !107 839 922
!125 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!126 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117)
!127 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!128 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117)
!129 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!130 = span !107 4133 4221
!131 = (!53 !54 !109 !110 !112 !113 !114 !115 !130)
!132 = (!53 !54 !109 !110 !112 !113 !114 !115)
!133 = (!53 !54 !109 !110 !112 !113 !114 !115)
!134 = span !107 4209 4210
!135 = (!53 !54 !109 !110 !112 !113 !114 !115 !130)
!136 = span !107 28917 28957
!137 = (!53 !54 !109 !110 !112 !113 !136)
!138 = span !107 28966 28980
!139 = (!53 !54 !109 !110 !112 !113 !138)
!140 = (!53 !54 !109 !110 !112 !113 !138)
!141 = span !107 28978 28980
!142 = (!53 !54 !109 !110 !112 !113 !138)
!143 = span !107 29065 29077
!144 = (!53 !54 !109 !110 !112 !113 !143)
!145 = span !107 29092 29097
!146 = (!53 !54 !109 !110 !112 !113 !145)
!147 = span !107 2445 2458
!148 = (!53 !54 !109 !110 !112 !113 !147)
!149 = span !107 400 412
!150 = (!53 !54 !109 !110 !112 !113 !149)
!151 = (!53 !54 !109 !110 !112 !113)
!152 = span !107 29107 29109
!153 = span !107 29065 29110
!154 = fn_call_path_span !107 29078 29091
!155 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!156 = span !155 5999 6076
!157 = (!53 !54 !109 !110 !112 !113 !153 !154 !156)
!158 = span !155 6050 6065
!159 = span !107 29121 29126
!160 = (!53 !54 !109 !110 !112 !113 !159)
!161 = span !111 3107 3161
!162 = (!53 !54 !109 !110 !161)
!163 = (!53 !54 !109 !110)
!164 = (!53 !54 !56)
!165 = span !6 576 708
!166 = span !6 618 668
!167 = fn_call_path_span !6 618 668
!168 = (!166 !167)
!169 = span !79 5062 5063
!170 = span !79 5055 5064
!171 = fn_call_path_span !79 5055 5061
!172 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!173 = span !172 757 771
!174 = (!53 !54 !91 !92 !170 !171 !173)
!175 = span !6 621 628
!176 = span !6 636 666
!177 = fn_call_path_span !6 636 649
!178 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!179 = span !178 2370 2383
!180 = (!176 !177 !179)
!181 = (!176 !177)
!182 = span !6 681 698
!183 = fn_call_path_span !6 681 698
!184 = (!182 !183)
!185 = span !6 685 686
!186 = span !107 13771 13819
!187 = fn_name_span !107 13778 13781
!188 = (!186 !187)
!189 = span !107 2506 2514
!190 = span !107 15175 15233
!191 = fn_name_span !107 15182 15185
!192 = (!190 !191)
!193 = span !107 978 1030
!194 = fn_name_span !107 985 988
!195 = (!193 !194)
!196 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!197 = span !196 9009 9138
!198 = fn_name_span !196 9016 9022
!199 = inline "never"
!200 = (!197 !198 !199)
!201 = span !196 9065 9096
!202 = span !196 9108 9114
!203 = span !196 9101 9115
!204 = fn_call_path_span !196 9103 9107
!205 = (!203 !204)
!206 = span !111 524 536
!207 = (!203 !204 !206)
!208 = span !111 5123 5146
!209 = fn_call_path_span !111 5129 5134
!210 = span !196 142 154
!211 = (!203 !204 !208 !209 !210)
!212 = (!203 !204 !208 !209)
!213 = (!203 !204 !208 !209)
!214 = span !107 18435 18436
!215 = span !196 365 389
!216 = fn_call_path_span !196 376 382
!217 = span !107 18422 18436
!218 = fn_call_path_span !107 18432 18434
!219 = (!203 !204 !208 !209 !215 !216 !217 !218)
!220 = (!203 !204 !208 !209 !215 !216 !217)
!221 = (!203 !204 !208 !209 !215 !216 !189)
!222 = (!203 !204 !208 !209 !215 !216)
!223 = span !107 18572 18573
!224 = span !107 18560 18573
!225 = fn_call_path_span !107 18569 18571
!226 = (!203 !204 !208 !209 !215 !216 !224 !225)
!227 = (!203 !204 !208 !209 !215 !216 !224)
!228 = span !107 18614 18620
!229 = (!203 !204 !208 !209 !215 !216 !228)
!230 = (!203 !204 !208 !209 !215 !216)
!231 = span !107 18657 18677
!232 = fn_call_path_span !107 18666 18667
!233 = (!203 !204 !208 !209 !215 !216 !231 !232)
!234 = (!203 !204 !208 !209 !215 !216)
!235 = (!203 !204 !208 !209 !215 !216 !147)
!236 = span !107 18808 18838
!237 = fn_call_path_span !107 18828 18829
!238 = (!203 !204 !208 !209 !215 !216 !236 !237)
!239 = (!203 !204 !208 !209 !215 !216 !236)
!240 = span !107 18914 18974
!241 = fn_call_path_span !107 18914 18927
!242 = span !120 4168 4185
!243 = fn_call_path_span !120 4178 4179
!244 = (!203 !204 !208 !209 !215 !216 !240 !241 !242 !243)
!245 = (!203 !204 !208 !209 !215 !216 !240 !241 !242)
!246 = span !120 4210 4232
!247 = fn_call_path_span !120 4210 4221
!248 = (!203 !204 !208 !209 !215 !216 !240 !241 !246 !247 !121)
!249 = span !120 4253 4254
!250 = span !120 4245 4254
!251 = fn_call_path_span !120 4251 4252
!252 = (!203 !204 !208 !209 !215 !216 !240 !241 !250 !251)
!253 = (!203 !204 !208 !209 !215 !216 !240 !241 !250)
!254 = span !120 4269 4302
!255 = fn_call_path_span !120 4273 4286
!256 = (!203 !204 !208 !209 !215 !216 !240 !241 !254 !255 !156)
!257 = (!203 !204 !208 !209 !215 !216 !240 !241)
!258 = span !107 18869 19015
!259 = fn_call_path_span !107 18869 18890
!260 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!261 = span !260 2362 2393
!262 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!263 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!264 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!265 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!266 = (!203 !204 !208 !209 !215 !216 !258 !259 !261)
!267 = span !107 18853 19016
!268 = (!203 !204 !208 !209 !215 !216 !267)
!269 = span !107 19055 19064
!270 = (!203 !204 !208 !209 !215 !216 !269)
!271 = span !107 19040 19065
!272 = fn_call_path_span !107 19040 19054
!273 = span !107 2130 2153
!274 = fn_call_path_span !107 2136 2151
!275 = (!203 !204 !208 !209 !215 !216 !271 !272 !273 !274)
!276 = span !260 3976 3977
!277 = (!203 !204 !208 !209 !215 !216 !271 !272 !273 !274 !276)
!278 = (!203 !204 !208 !209 !215 !216 !271 !272 !273 !274)
!279 = span !107 2173 2189
!280 = fn_call_path_span !107 2173 2184
!281 = (!203 !204 !208 !209 !215 !216 !271 !272 !279 !280 !121)
!282 = span !107 2208 2209
!283 = span !107 2202 2209
!284 = fn_call_path_span !107 2206 2207
!285 = (!203 !204 !208 !209 !215 !216 !271 !272 !283 !284)
!286 = (!203 !204 !208 !209 !215 !216 !271 !272 !283)
!287 = span !107 2224 2235
!288 = fn_call_path_span !107 2230 2233
!289 = (!203 !204 !208 !209 !215 !216 !271 !272 !287 !288)
!290 = (!203 !204 !208 !209 !215 !216 !271 !272 !287 !288)
!291 = span !107 2224 2259
!292 = fn_call_path_span !107 2236 2243
!293 = span !155 3447 3522
!294 = (!203 !204 !208 !209 !215 !216 !271 !272 !291 !292 !293)
!295 = span !155 3496 3511
!296 = (!203 !204 !208 !209 !215 !216 !271 !272)
!297 = span !107 2279 2296
!298 = (!203 !204 !208 !209 !215 !216 !271 !272 !297)
!299 = (!203 !204 !208 !209 !215 !216 !271 !272)
!300 = (!203 !204 !208 !209 !215 !216 !271 !272 !297)
!301 = (!203 !204 !208 !209 !215 !216 !271 !272)
!302 = (!203 !204 !208 !209 !215 !216)
!303 = span !107 19100 19143
!304 = fn_call_path_span !107 19115 19130
!305 = span !155 6721 6825
!306 = (!203 !204 !208 !209 !215 !216 !303 !304 !305)
!307 = span !155 6771 6789
!308 = span !107 19153 19198
!309 = fn_call_path_span !107 19165 19178
!310 = (!203 !204 !208 !209 !215 !216 !308 !309 !156)
!311 = span !107 19244 19263
!312 = (!203 !204 !208 !209 !215 !216 !311)
!313 = (!203 !204 !208 !209 !215 !216)
!314 = span !196 9121 9127
!315 = span !196 9121 9136
!316 = fn_call_path_span !196 9128 9134
!317 = span !196 440 476
!318 = (!315 !316 !317)
!319 = span !196 508 521
!320 = (!315 !316 !319)
!321 = (!315 !316)
!322 = (!315 !316 !210)
!323 = span !196 619 638
!324 = span !196 177 263
!325 = fn_name_span !196 184 187
!326 = (!324 !325)
!327 = span !107 570 571
!328 = span !196 234 246
!329 = fn_call_path_span !196 234 244
!330 = span !107 3079 3094
!331 = fn_call_path_span !107 3079 3092
!332 = span !107 558 572
!333 = fn_call_path_span !107 558 569
!334 = (!328 !329 !330 !331 !332 !333 !121)
!335 = span !107 534 603
!336 = (!328 !329 !330 !331 !335)
!337 = (!328 !329 !330 !331)
!338 = (!328 !329 !330 !331 !335)
!339 = (!328 !329 !330 !331)
!340 = span !107 591 592
!341 = (!328 !329 !330 !331 !335)
!342 = span !107 3055 3125
!343 = (!328 !329 !342)
!344 = (!328 !329)
!345 = span !107 3113 3114
!346 = (!328 !329 !342)
!347 = span !196 208 257
!348 = span !107 1081 1134
!349 = fn_name_span !107 1088 1096
!350 = (!348 !349)
!351 = span !107 418 426

// IR: [mem2reg] Promotion of memory to SSA registers
script {
    entry fn main() -> (), !3 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local u64 __aggr_memcpy_00
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_08
        local [u8; 64] __anon_0
        local { [u8; 64] } __anon_1
        local u8 __anon_10
        local u8 __anon_11
        local u8 __anon_110
        local u8 __anon_111
        local u8 __anon_112
        local u8 __anon_113
        local u8 __anon_114
        local u8 __anon_115
        local u8 __anon_116
        local u8 __anon_117
        local u8 __anon_118
        local u8 __anon_119
        local u8 __anon_12
        local u8 __anon_120
        local u8 __anon_121
        local u8 __anon_122
        local u8 __anon_123
        local u8 __anon_124
        local u8 __anon_125
        local u8 __anon_126
        local u8 __anon_127
        local u8 __anon_128
        local u8 __anon_129
        local u8 __anon_13
        local u8 __anon_130
        local u8 __anon_131
        local u8 __anon_132
        local u8 __anon_133
        local u8 __anon_134
        local u8 __anon_135
        local u8 __anon_136
        local u8 __anon_137
        local u8 __anon_138
        local u8 __anon_139
        local u8 __anon_14
        local u8 __anon_140
        local u8 __anon_141
        local u8 __anon_142
        local u8 __anon_143
        local u8 __anon_144
        local u8 __anon_145
        local u8 __anon_146
        local u8 __anon_147
        local u8 __anon_148
        local u8 __anon_149
        local u8 __anon_15
        local u8 __anon_150
        local u8 __anon_151
        local u8 __anon_152
        local u8 __anon_153
        local u8 __anon_154
        local u8 __anon_155
        local u8 __anon_156
        local u8 __anon_157
        local u8 __anon_158
        local u8 __anon_159
        local u8 __anon_16
        local u8 __anon_160
        local u8 __anon_161
        local u8 __anon_162
        local u8 __anon_163
        local u8 __anon_17
        local u8 __anon_18
        local u8 __anon_19
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { { { u64, u64 }, u64 } } message
        local u64 message0
        local u64 message16
        local u64 message8
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_00
        v18 = get_local ptr u64, __aggr_memcpy_08
        v19 = get_local ptr u64, __aggr_memcpy_016
        v20 = get_local ptr { { { u64, u64 }, u64 } }, message, !8
        v21 = get_local ptr u64, __aggr_memcpy_00
        v22 = get_local ptr u64, __aggr_memcpy_08
        v23 = get_local ptr u64, __aggr_memcpy_016
        v24 = get_local ptr u64, message0
        v25 = get_local ptr u64, message8
        v26 = get_local ptr u64, message16
        v27 = get_local ptr [u8; 64], __anon_0, !12
        v28 = const u64 0
        br play_0_new_5_array_init_loop(v28), !13

        play_0_new_5_array_init_loop(v29: u64):
        v30 = get_elem_ptr v27, ptr u8, v29, !14
        v31 = const u8 0, !15
        store v31 to v30, !16
        v32 = const u64 1
        v33 = add v29, v32, !17
        v34 = const u64 64
        v35 = cmp lt v33 v34, !18
        cbr v35, play_0_new_5_array_init_loop(v33), play_0_new_5_array_init_exit(), !19

        play_0_new_5_array_init_exit():
        v36 = get_local ptr { [u8; 64] }, __anon_1, !21
        v37 = const u64 0
        v38 = get_elem_ptr v36, ptr [u8; 64], v37, !22
        v39 = const u64 0
        v40 = get_elem_ptr v27, ptr u8, v39
        v41 = load v40
        v42 = const u64 1
        v43 = get_elem_ptr v27, ptr u8, v42
        v44 = load v43
        v45 = const u64 2
        v46 = get_elem_ptr v27, ptr u8, v45
        v47 = load v46
        v48 = const u64 3
        v49 = get_elem_ptr v27, ptr u8, v48
        v50 = load v49
        v51 = const u64 4
        v52 = get_elem_ptr v27, ptr u8, v51
        v53 = load v52
        v54 = const u64 5
        v55 = get_elem_ptr v27, ptr u8, v54
        v56 = load v55
        v57 = const u64 6
        v58 = get_elem_ptr v27, ptr u8, v57
        v59 = load v58
        v60 = const u64 7
        v61 = get_elem_ptr v27, ptr u8, v60
        v62 = load v61
        v63 = const u64 8
        v64 = get_elem_ptr v27, ptr u8, v63
        v65 = load v64
        v66 = const u64 9
        v67 = get_elem_ptr v27, ptr u8, v66
        v68 = load v67
        v69 = const u64 10
        v70 = get_elem_ptr v27, ptr u8, v69
        v71 = load v70
        v72 = const u64 11
        v73 = get_elem_ptr v27, ptr u8, v72
        v74 = load v73
        v75 = const u64 12
        v76 = get_elem_ptr v27, ptr u8, v75
        v77 = load v76
        v78 = const u64 13
        v79 = get_elem_ptr v27, ptr u8, v78
        v80 = load v79
        v81 = const u64 14
        v82 = get_elem_ptr v27, ptr u8, v81
        v83 = load v82
        v84 = const u64 15
        v85 = get_elem_ptr v27, ptr u8, v84
        v86 = load v85
        v87 = const u64 16
        v88 = get_elem_ptr v27, ptr u8, v87
        v89 = load v88
        v90 = const u64 17
        v91 = get_elem_ptr v27, ptr u8, v90
        v92 = load v91
        v93 = const u64 18
        v94 = get_elem_ptr v27, ptr u8, v93
        v95 = load v94
        v96 = const u64 19
        v97 = get_elem_ptr v27, ptr u8, v96
        v98 = load v97
        v99 = const u64 20
        v100 = get_elem_ptr v27, ptr u8, v99
        v101 = load v100
        v102 = const u64 21
        v103 = get_elem_ptr v27, ptr u8, v102
        v104 = load v103
        v105 = const u64 22
        v106 = get_elem_ptr v27, ptr u8, v105
        v107 = load v106
        v108 = const u64 23
        v109 = get_elem_ptr v27, ptr u8, v108
        v110 = load v109
        v111 = const u64 24
        v112 = get_elem_ptr v27, ptr u8, v111
        v113 = load v112
        v114 = const u64 25
        v115 = get_elem_ptr v27, ptr u8, v114
        v116 = load v115
        v117 = const u64 26
        v118 = get_elem_ptr v27, ptr u8, v117
        v119 = load v118
        v120 = const u64 27
        v121 = get_elem_ptr v27, ptr u8, v120
        v122 = load v121
        v123 = const u64 28
        v124 = get_elem_ptr v27, ptr u8, v123
        v125 = load v124
        v126 = const u64 29
        v127 = get_elem_ptr v27, ptr u8, v126
        v128 = load v127
        v129 = const u64 30
        v130 = get_elem_ptr v27, ptr u8, v129
        v131 = load v130
        v132 = const u64 31
        v133 = get_elem_ptr v27, ptr u8, v132
        v134 = load v133
        v135 = const u64 32
        v136 = get_elem_ptr v27, ptr u8, v135
        v137 = load v136
        v138 = const u64 33
        v139 = get_elem_ptr v27, ptr u8, v138
        v140 = load v139
        v141 = const u64 34
        v142 = get_elem_ptr v27, ptr u8, v141
        v143 = load v142
        v144 = const u64 35
        v145 = get_elem_ptr v27, ptr u8, v144
        v146 = load v145
        v147 = const u64 36
        v148 = get_elem_ptr v27, ptr u8, v147
        v149 = load v148
        v150 = const u64 37
        v151 = get_elem_ptr v27, ptr u8, v150
        v152 = load v151
        v153 = const u64 38
        v154 = get_elem_ptr v27, ptr u8, v153
        v155 = load v154
        v156 = const u64 39
        v157 = get_elem_ptr v27, ptr u8, v156
        v158 = load v157
        v159 = const u64 40
        v160 = get_elem_ptr v27, ptr u8, v159
        v161 = load v160
        v162 = const u64 41
        v163 = get_elem_ptr v27, ptr u8, v162
        v164 = load v163
        v165 = const u64 42
        v166 = get_elem_ptr v27, ptr u8, v165
        v167 = load v166
        v168 = const u64 43
        v169 = get_elem_ptr v27, ptr u8, v168
        v170 = load v169
        v171 = const u64 44
        v172 = get_elem_ptr v27, ptr u8, v171
        v173 = load v172
        v174 = const u64 45
        v175 = get_elem_ptr v27, ptr u8, v174
        v176 = load v175
        v177 = const u64 46
        v178 = get_elem_ptr v27, ptr u8, v177
        v179 = load v178
        v180 = const u64 47
        v181 = get_elem_ptr v27, ptr u8, v180
        v182 = load v181
        v183 = const u64 48
        v184 = get_elem_ptr v27, ptr u8, v183
        v185 = load v184
        v186 = const u64 49
        v187 = get_elem_ptr v27, ptr u8, v186
        v188 = load v187
        v189 = const u64 50
        v190 = get_elem_ptr v27, ptr u8, v189
        v191 = load v190
        v192 = const u64 51
        v193 = get_elem_ptr v27, ptr u8, v192
        v194 = load v193
        v195 = const u64 52
        v196 = get_elem_ptr v27, ptr u8, v195
        v197 = load v196
        v198 = const u64 53
        v199 = get_elem_ptr v27, ptr u8, v198
        v200 = load v199
        v201 = const u64 54
        v202 = get_elem_ptr v27, ptr u8, v201
        v203 = load v202
        v204 = const u64 55
        v205 = get_elem_ptr v27, ptr u8, v204
        v206 = load v205
        v207 = const u64 56
        v208 = get_elem_ptr v27, ptr u8, v207
        v209 = load v208
        v210 = const u64 57
        v211 = get_elem_ptr v27, ptr u8, v210
        v212 = load v211
        v213 = const u64 58
        v214 = get_elem_ptr v27, ptr u8, v213
        v215 = load v214
        v216 = const u64 59
        v217 = get_elem_ptr v27, ptr u8, v216
        v218 = load v217
        v219 = const u64 60
        v220 = get_elem_ptr v27, ptr u8, v219
        v221 = load v220
        v222 = const u64 61
        v223 = get_elem_ptr v27, ptr u8, v222
        v224 = load v223
        v225 = const u64 62
        v226 = get_elem_ptr v27, ptr u8, v225
        v227 = load v226
        v228 = const u64 63
        v229 = get_elem_ptr v27, ptr u8, v228
        v230 = load v229
        v231 = get_local ptr u8, __anon_10
        v232 = get_local ptr u8, __anon_11
        v233 = get_local ptr u8, __anon_12
        v234 = get_local ptr u8, __anon_13
        v235 = get_local ptr u8, __anon_14
        v236 = get_local ptr u8, __anon_15
        v237 = get_local ptr u8, __anon_16
        v238 = get_local ptr u8, __anon_17
        v239 = get_local ptr u8, __anon_18
        v240 = get_local ptr u8, __anon_19
        v241 = get_local ptr u8, __anon_110
        v242 = get_local ptr u8, __anon_111
        v243 = get_local ptr u8, __anon_112
        v244 = get_local ptr u8, __anon_113
        v245 = get_local ptr u8, __anon_114
        v246 = get_local ptr u8, __anon_115
        v247 = get_local ptr u8, __anon_116
        v248 = get_local ptr u8, __anon_117
        v249 = get_local ptr u8, __anon_118
        v250 = get_local ptr u8, __anon_119
        v251 = get_local ptr u8, __anon_120
        v252 = get_local ptr u8, __anon_121
        v253 = get_local ptr u8, __anon_122
        v254 = get_local ptr u8, __anon_123
        v255 = get_local ptr u8, __anon_124
        v256 = get_local ptr u8, __anon_125
        v257 = get_local ptr u8, __anon_126
        v258 = get_local ptr u8, __anon_127
        v259 = get_local ptr u8, __anon_128
        v260 = get_local ptr u8, __anon_129
        v261 = get_local ptr u8, __anon_130
        v262 = get_local ptr u8, __anon_131
        v263 = get_local ptr u8, __anon_132
        v264 = get_local ptr u8, __anon_133
        v265 = get_local ptr u8, __anon_134
        v266 = get_local ptr u8, __anon_135
        v267 = get_local ptr u8, __anon_136
        v268 = get_local ptr u8, __anon_137
        v269 = get_local ptr u8, __anon_138
        v270 = get_local ptr u8, __anon_139
        v271 = get_local ptr u8, __anon_140
        v272 = get_local ptr u8, __anon_141
        v273 = get_local ptr u8, __anon_142
        v274 = get_local ptr u8, __anon_143
        v275 = get_local ptr u8, __anon_144
        v276 = get_local ptr u8, __anon_145
        v277 = get_local ptr u8, __anon_146
        v278 = get_local ptr u8, __anon_147
        v279 = get_local ptr u8, __anon_148
        v280 = get_local ptr u8, __anon_149
        v281 = get_local ptr u8, __anon_150
        v282 = get_local ptr u8, __anon_151
        v283 = get_local ptr u8, __anon_152
        v284 = get_local ptr u8, __anon_153
        v285 = get_local ptr u8, __anon_154
        v286 = get_local ptr u8, __anon_155
        v287 = get_local ptr u8, __anon_156
        v288 = get_local ptr u8, __anon_157
        v289 = get_local ptr u8, __anon_158
        v290 = get_local ptr u8, __anon_159
        v291 = get_local ptr u8, __anon_160
        v292 = get_local ptr u8, __anon_161
        v293 = get_local ptr u8, __anon_162
        v294 = get_local ptr u8, __anon_163
        v295 = get_local ptr { [u8; 64] }, secp256k1, !24
        v296 = get_local ptr u8, __anon_10
        v297 = get_local ptr u8, __anon_11
        v298 = get_local ptr u8, __anon_12
        v299 = get_local ptr u8, __anon_13
        v300 = get_local ptr u8, __anon_14
        v301 = get_local ptr u8, __anon_15
        v302 = get_local ptr u8, __anon_16
        v303 = get_local ptr u8, __anon_17
        v304 = get_local ptr u8, __anon_18
        v305 = get_local ptr u8, __anon_19
        v306 = get_local ptr u8, __anon_110
        v307 = get_local ptr u8, __anon_111
        v308 = get_local ptr u8, __anon_112
        v309 = get_local ptr u8, __anon_113
        v310 = get_local ptr u8, __anon_114
        v311 = get_local ptr u8, __anon_115
        v312 = get_local ptr u8, __anon_116
        v313 = get_local ptr u8, __anon_117
        v314 = get_local ptr u8, __anon_118
        v315 = get_local ptr u8, __anon_119
        v316 = get_local ptr u8, __anon_120
        v317 = get_local ptr u8, __anon_121
        v318 = get_local ptr u8, __anon_122
        v319 = get_local ptr u8, __anon_123
        v320 = get_local ptr u8, __anon_124
        v321 = get_local ptr u8, __anon_125
        v322 = get_local ptr u8, __anon_126
        v323 = get_local ptr u8, __anon_127
        v324 = get_local ptr u8, __anon_128
        v325 = get_local ptr u8, __anon_129
        v326 = get_local ptr u8, __anon_130
        v327 = get_local ptr u8, __anon_131
        v328 = get_local ptr u8, __anon_132
        v329 = get_local ptr u8, __anon_133
        v330 = get_local ptr u8, __anon_134
        v331 = get_local ptr u8, __anon_135
        v332 = get_local ptr u8, __anon_136
        v333 = get_local ptr u8, __anon_137
        v334 = get_local ptr u8, __anon_138
        v335 = get_local ptr u8, __anon_139
        v336 = get_local ptr u8, __anon_140
        v337 = get_local ptr u8, __anon_141
        v338 = get_local ptr u8, __anon_142
        v339 = get_local ptr u8, __anon_143
        v340 = get_local ptr u8, __anon_144
        v341 = get_local ptr u8, __anon_145
        v342 = get_local ptr u8, __anon_146
        v343 = get_local ptr u8, __anon_147
        v344 = get_local ptr u8, __anon_148
        v345 = get_local ptr u8, __anon_149
        v346 = get_local ptr u8, __anon_150
        v347 = get_local ptr u8, __anon_151
        v348 = get_local ptr u8, __anon_152
        v349 = get_local ptr u8, __anon_153
        v350 = get_local ptr u8, __anon_154
        v351 = get_local ptr u8, __anon_155
        v352 = get_local ptr u8, __anon_156
        v353 = get_local ptr u8, __anon_157
        v354 = get_local ptr u8, __anon_158
        v355 = get_local ptr u8, __anon_159
        v356 = get_local ptr u8, __anon_160
        v357 = get_local ptr u8, __anon_161
        v358 = get_local ptr u8, __anon_162
        v359 = get_local ptr u8, __anon_163
        v360 = const u64 0
        v361 = const u64 0
        v362 = get_elem_ptr v295, ptr u8, v360, v361
        store v41 to v362
        v363 = const u64 0
        v364 = const u64 1
        v365 = get_elem_ptr v295, ptr u8, v363, v364
        store v44 to v365
        v366 = const u64 0
        v367 = const u64 2
        v368 = get_elem_ptr v295, ptr u8, v366, v367
        store v47 to v368
        v369 = const u64 0
        v370 = const u64 3
        v371 = get_elem_ptr v295, ptr u8, v369, v370
        store v50 to v371
        v372 = const u64 0
        v373 = const u64 4
        v374 = get_elem_ptr v295, ptr u8, v372, v373
        store v53 to v374
        v375 = const u64 0
        v376 = const u64 5
        v377 = get_elem_ptr v295, ptr u8, v375, v376
        store v56 to v377
        v378 = const u64 0
        v379 = const u64 6
        v380 = get_elem_ptr v295, ptr u8, v378, v379
        store v59 to v380
        v381 = const u64 0
        v382 = const u64 7
        v383 = get_elem_ptr v295, ptr u8, v381, v382
        store v62 to v383
        v384 = const u64 0
        v385 = const u64 8
        v386 = get_elem_ptr v295, ptr u8, v384, v385
        store v65 to v386
        v387 = const u64 0
        v388 = const u64 9
        v389 = get_elem_ptr v295, ptr u8, v387, v388
        store v68 to v389
        v390 = const u64 0
        v391 = const u64 10
        v392 = get_elem_ptr v295, ptr u8, v390, v391
        store v71 to v392
        v393 = const u64 0
        v394 = const u64 11
        v395 = get_elem_ptr v295, ptr u8, v393, v394
        store v74 to v395
        v396 = const u64 0
        v397 = const u64 12
        v398 = get_elem_ptr v295, ptr u8, v396, v397
        store v77 to v398
        v399 = const u64 0
        v400 = const u64 13
        v401 = get_elem_ptr v295, ptr u8, v399, v400
        store v80 to v401
        v402 = const u64 0
        v403 = const u64 14
        v404 = get_elem_ptr v295, ptr u8, v402, v403
        store v83 to v404
        v405 = const u64 0
        v406 = const u64 15
        v407 = get_elem_ptr v295, ptr u8, v405, v406
        store v86 to v407
        v408 = const u64 0
        v409 = const u64 16
        v410 = get_elem_ptr v295, ptr u8, v408, v409
        store v89 to v410
        v411 = const u64 0
        v412 = const u64 17
        v413 = get_elem_ptr v295, ptr u8, v411, v412
        store v92 to v413
        v414 = const u64 0
        v415 = const u64 18
        v416 = get_elem_ptr v295, ptr u8, v414, v415
        store v95 to v416
        v417 = const u64 0
        v418 = const u64 19
        v419 = get_elem_ptr v295, ptr u8, v417, v418
        store v98 to v419
        v420 = const u64 0
        v421 = const u64 20
        v422 = get_elem_ptr v295, ptr u8, v420, v421
        store v101 to v422
        v423 = const u64 0
        v424 = const u64 21
        v425 = get_elem_ptr v295, ptr u8, v423, v424
        store v104 to v425
        v426 = const u64 0
        v427 = const u64 22
        v428 = get_elem_ptr v295, ptr u8, v426, v427
        store v107 to v428
        v429 = const u64 0
        v430 = const u64 23
        v431 = get_elem_ptr v295, ptr u8, v429, v430
        store v110 to v431
        v432 = const u64 0
        v433 = const u64 24
        v434 = get_elem_ptr v295, ptr u8, v432, v433
        store v113 to v434
        v435 = const u64 0
        v436 = const u64 25
        v437 = get_elem_ptr v295, ptr u8, v435, v436
        store v116 to v437
        v438 = const u64 0
        v439 = const u64 26
        v440 = get_elem_ptr v295, ptr u8, v438, v439
        store v119 to v440
        v441 = const u64 0
        v442 = const u64 27
        v443 = get_elem_ptr v295, ptr u8, v441, v442
        store v122 to v443
        v444 = const u64 0
        v445 = const u64 28
        v446 = get_elem_ptr v295, ptr u8, v444, v445
        store v125 to v446
        v447 = const u64 0
        v448 = const u64 29
        v449 = get_elem_ptr v295, ptr u8, v447, v448
        store v128 to v449
        v450 = const u64 0
        v451 = const u64 30
        v452 = get_elem_ptr v295, ptr u8, v450, v451
        store v131 to v452
        v453 = const u64 0
        v454 = const u64 31
        v455 = get_elem_ptr v295, ptr u8, v453, v454
        store v134 to v455
        v456 = const u64 0
        v457 = const u64 32
        v458 = get_elem_ptr v295, ptr u8, v456, v457
        store v137 to v458
        v459 = const u64 0
        v460 = const u64 33
        v461 = get_elem_ptr v295, ptr u8, v459, v460
        store v140 to v461
        v462 = const u64 0
        v463 = const u64 34
        v464 = get_elem_ptr v295, ptr u8, v462, v463
        store v143 to v464
        v465 = const u64 0
        v466 = const u64 35
        v467 = get_elem_ptr v295, ptr u8, v465, v466
        store v146 to v467
        v468 = const u64 0
        v469 = const u64 36
        v470 = get_elem_ptr v295, ptr u8, v468, v469
        store v149 to v470
        v471 = const u64 0
        v472 = const u64 37
        v473 = get_elem_ptr v295, ptr u8, v471, v472
        store v152 to v473
        v474 = const u64 0
        v475 = const u64 38
        v476 = get_elem_ptr v295, ptr u8, v474, v475
        store v155 to v476
        v477 = const u64 0
        v478 = const u64 39
        v479 = get_elem_ptr v295, ptr u8, v477, v478
        store v158 to v479
        v480 = const u64 0
        v481 = const u64 40
        v482 = get_elem_ptr v295, ptr u8, v480, v481
        store v161 to v482
        v483 = const u64 0
        v484 = const u64 41
        v485 = get_elem_ptr v295, ptr u8, v483, v484
        store v164 to v485
        v486 = const u64 0
        v487 = const u64 42
        v488 = get_elem_ptr v295, ptr u8, v486, v487
        store v167 to v488
        v489 = const u64 0
        v490 = const u64 43
        v491 = get_elem_ptr v295, ptr u8, v489, v490
        store v170 to v491
        v492 = const u64 0
        v493 = const u64 44
        v494 = get_elem_ptr v295, ptr u8, v492, v493
        store v173 to v494
        v495 = const u64 0
        v496 = const u64 45
        v497 = get_elem_ptr v295, ptr u8, v495, v496
        store v176 to v497
        v498 = const u64 0
        v499 = const u64 46
        v500 = get_elem_ptr v295, ptr u8, v498, v499
        store v179 to v500
        v501 = const u64 0
        v502 = const u64 47
        v503 = get_elem_ptr v295, ptr u8, v501, v502
        store v182 to v503
        v504 = const u64 0
        v505 = const u64 48
        v506 = get_elem_ptr v295, ptr u8, v504, v505
        store v185 to v506
        v507 = const u64 0
        v508 = const u64 49
        v509 = get_elem_ptr v295, ptr u8, v507, v508
        store v188 to v509
        v510 = const u64 0
        v511 = const u64 50
        v512 = get_elem_ptr v295, ptr u8, v510, v511
        store v191 to v512
        v513 = const u64 0
        v514 = const u64 51
        v515 = get_elem_ptr v295, ptr u8, v513, v514
        store v194 to v515
        v516 = const u64 0
        v517 = const u64 52
        v518 = get_elem_ptr v295, ptr u8, v516, v517
        store v197 to v518
        v519 = const u64 0
        v520 = const u64 53
        v521 = get_elem_ptr v295, ptr u8, v519, v520
        store v200 to v521
        v522 = const u64 0
        v523 = const u64 54
        v524 = get_elem_ptr v295, ptr u8, v522, v523
        store v203 to v524
        v525 = const u64 0
        v526 = const u64 55
        v527 = get_elem_ptr v295, ptr u8, v525, v526
        store v206 to v527
        v528 = const u64 0
        v529 = const u64 56
        v530 = get_elem_ptr v295, ptr u8, v528, v529
        store v209 to v530
        v531 = const u64 0
        v532 = const u64 57
        v533 = get_elem_ptr v295, ptr u8, v531, v532
        store v212 to v533
        v534 = const u64 0
        v535 = const u64 58
        v536 = get_elem_ptr v295, ptr u8, v534, v535
        store v215 to v536
        v537 = const u64 0
        v538 = const u64 59
        v539 = get_elem_ptr v295, ptr u8, v537, v538
        store v218 to v539
        v540 = const u64 0
        v541 = const u64 60
        v542 = get_elem_ptr v295, ptr u8, v540, v541
        store v221 to v542
        v543 = const u64 0
        v544 = const u64 61
        v545 = get_elem_ptr v295, ptr u8, v543, v544
        store v224 to v545
        v546 = const u64 0
        v547 = const u64 62
        v548 = get_elem_ptr v295, ptr u8, v546, v547
        store v227 to v548
        v549 = const u64 0
        v550 = const u64 63
        v551 = get_elem_ptr v295, ptr u8, v549, v550
        store v230 to v551
        v552 = get_local ptr { [u8; 64] }, secp256k1, !26
        v553 = get_local ptr { [u8; 64] }, secp256k1, !28
        v554 = ptr_to_int v552 to u64, !31
        v555 = int_to_ptr v554 to ptr { [u8; 64] }, !32
        v556 = const u64 0
        v557 = get_elem_ptr v555, ptr [u8; 64], v556, !34
        v558 = ptr_to_int v553 to u64, !35
        v559 = int_to_ptr v558 to ptr { [u8; 64] }, !36
        v560 = const u64 0
        v561 = get_elem_ptr v559, ptr [u8; 64], v560, !37
        v562 = const u64 64, !38
        v563 = asm(result, r2: v557, r3: v561, r4: v562) -> bool result, !40 {
            meq    result r2 r3 r4, !41
        }
        v564 = get_local ptr { [u8; 64] }, secp256k1, !43
        v565 = get_local ptr { { { u64, u64 }, u64 } }, message, !45
        v566 = get_local ptr { [u8; 64] }, __tmp_arg
        mem_copy_val v566, v564
        v567 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        v568 = get_local ptr u64, message0
        v569 = get_local ptr u64, message8
        v570 = get_local ptr u64, message16
        v571 = const u64 0
        v572 = const u64 0
        v573 = const u64 0
        v574 = get_elem_ptr v567, ptr u64, v571, v572, v573
        store v7 to v574
        v575 = const u64 0
        v576 = const u64 0
        v577 = const u64 1
        v578 = get_elem_ptr v567, ptr u64, v575, v576, v577
        store v12 to v578
        v579 = const u64 0
        v580 = const u64 1
        v581 = get_elem_ptr v567, ptr u64, v579, v580
        store v16 to v581
        v582 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v583 = call address_7(v566, v567, v582)
        v584 = get_local ptr { [u8; 64] }, secp256k1, !47
        v585 = get_local ptr { { { u64, u64 }, u64 } }, message, !49
        v586 = get_local ptr { [u8; 64] }, __tmp_arg1
        mem_copy_val v586, v584
        v587 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v588 = get_local ptr u64, message0
        v589 = get_local ptr u64, message8
        v590 = get_local ptr u64, message16
        v591 = const u64 0
        v592 = const u64 0
        v593 = const u64 0
        v594 = get_elem_ptr v587, ptr u64, v591, v592, v593
        store v7 to v594
        v595 = const u64 0
        v596 = const u64 0
        v597 = const u64 1
        v598 = get_elem_ptr v587, ptr u64, v595, v596, v597
        store v12 to v598
        v599 = const u64 0
        v600 = const u64 1
        v601 = get_elem_ptr v587, ptr u64, v599, v600
        store v16 to v601
        v602 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v603 = call address_7(v586, v587, v602)
        v604 = const unit ()
        ret () v604
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !52 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { { u64, u64 }, u64 } __anon_0000
        local { u64, u64 } __anon_00000
        local u64 __anon_000000
        local u64 __anon_0000000
        local u64 __anon_000008
        local u64 __anon_000016
        local u64 __anon_00008
        local { { { u64, u64 }, u64 } } __anon_01
        local u64 __anon_010
        local u64 __anon_0116
        local u64 __anon_018
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local mut { { u64, u64 }, u64 } bytes
        local u64 bytes0
        local u64 bytes16
        local u64 bytes8
        local { u64 } e
        local u64 e0
        local b256 inner_value
        local { { { u64, u64 }, u64 } } pub_key
        local u64 pub_key0
        local u64 pub_key16
        local u64 pub_key8

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !57
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !58
        v3 = const u64 0, !56
        store v3 to v2, !59
        v4 = ptr_to_int message to u64, !62
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !63
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !66
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !67
        v11 = cmp eq v9 v10, !73
        v12 = const bool false, !74
        v13 = cmp eq v11 v12, !77
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !78

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !81
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !82
        v17 = const u64 0, !80
        store v17 to v16, !83
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !85

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !86
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !87
        v22 = const u64 1, !80
        store v22 to v21, !88
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !89
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !90

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !94
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !95
        v37 = const u64 1, !96
        v38 = cmp eq v36 v37, !99
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !100

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !101
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !102
        v43 = get_local ptr b256, inner_value, !104
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !106
        v45 = const u64 32, !108
        v46 = asm(size: v45) -> u64 hp, !122 {
            aloc   size, !123
        }
        v47 = get_local ptr { u64, u64 }, __anon_00000, !125
        v48 = const u64 0
        v49 = get_elem_ptr v47, ptr u64, v48, !126
        v50 = get_local ptr u64, __anon_0000000
        v51 = const u64 1
        v52 = get_elem_ptr v47, ptr u64, v51, !127
        v53 = get_local ptr u64, __anon_000008
        v54 = get_local ptr { { u64, u64 }, u64 }, __anon_0000, !129
        v55 = const u64 0
        v56 = get_elem_ptr v54, ptr { u64, u64 }, v55, !130
        v57 = get_local ptr u64, __anon_0000000
        v58 = get_local ptr u64, __anon_000008
        v59 = get_local ptr u64, __anon_000000
        v60 = get_local ptr u64, __anon_00008
        v61 = const u64 1
        v62 = get_elem_ptr v54, ptr u64, v61, !131
        v63 = get_local ptr u64, __anon_000016
        v64 = get_local ptr { { u64, u64 }, u64 }, bytes, !133
        v65 = get_local ptr u64, __anon_000000
        v66 = get_local ptr u64, __anon_00008
        v67 = get_local ptr u64, __anon_000016
        v68 = get_local ptr u64, bytes0
        v69 = get_local ptr u64, bytes8
        v70 = get_local ptr u64, bytes16
        v71 = get_local ptr { { u64, u64 }, u64 }, bytes, !135
        v72 = const u64 1
        v73 = get_elem_ptr v71, ptr u64, v72, !136
        v74 = get_local ptr u64, bytes16
        v75 = ptr_to_int v44 to u64, !138
        v76 = get_local ptr { { u64, u64 }, u64 }, bytes, !140
        v77 = const u64 0
        v78 = get_elem_ptr v76, ptr { u64, u64 }, v77, !142
        v79 = const u64 0
        v80 = get_elem_ptr v78, ptr u64, v79, !144
        v81 = get_local ptr u64, bytes0
        v82 = const u64 32, !145
        v83 = asm(dst: v46, src: v75, len: v82) -> (), !150 {
            mcp    dst src len, !151
        }
        v84 = get_local ptr { { u64, u64 }, u64 }, bytes, !153
        v85 = get_local ptr { { { u64, u64 }, u64 } }, __anon_01, !155
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr { { u64, u64 }, u64 }, v86, !156
        v88 = get_local ptr u64, bytes0
        v89 = get_local ptr u64, bytes8
        v90 = get_local ptr u64, bytes16
        v91 = get_local ptr u64, __anon_010
        v92 = get_local ptr u64, __anon_018
        v93 = get_local ptr u64, __anon_0116
        v94 = const u64 1
        v95 = const u64 0
        v96 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v94, v95, !157
        v97 = get_local ptr u64, __anon_010
        v98 = get_local ptr u64, __anon_018
        v99 = get_local ptr u64, __anon_0116
        v100 = const u64 0
        v101 = const u64 0
        v102 = const u64 0
        v103 = get_elem_ptr v96, ptr u64, v100, v101, v102
        store v46 to v103
        v104 = const u64 0
        v105 = const u64 0
        v106 = const u64 1
        v107 = get_elem_ptr v96, ptr u64, v104, v105, v106
        store v45 to v107
        v108 = const u64 0
        v109 = const u64 1
        v110 = get_elem_ptr v96, ptr u64, v108, v109
        v111 = const u64 32, !158
        store v111 to v110
        v112 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !159
        mem_copy_val v112, v0
        v113 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v114 = const u64 0
        v115 = get_elem_ptr v113, ptr u64, v114
        v116 = load v115
        v117 = const u64 0, !53
        v118 = cmp eq v116 v117, !162
        cbr v118, block0(), block1(), !160

        recover_8_unwrap_14_block1():
        v119 = const u64 0, !163
        revert v119, !168

        block0():
        v120 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v121 = const u64 1
        v122 = const u64 0
        v123 = get_elem_ptr v120, ptr { { { u64, u64 }, u64 } }, v121, v122
        v124 = get_local ptr { { { u64, u64 }, u64 } }, pub_key, !169
        v125 = const u64 0
        v126 = const u64 0
        v127 = const u64 0
        v128 = get_elem_ptr v123, ptr u64, v125, v126, v127
        v129 = load v128
        v130 = const u64 0
        v131 = const u64 0
        v132 = const u64 1
        v133 = get_elem_ptr v123, ptr u64, v130, v131, v132
        v134 = load v133
        v135 = const u64 0
        v136 = const u64 1
        v137 = get_elem_ptr v123, ptr u64, v135, v136
        v138 = load v137
        v139 = get_local ptr u64, pub_key0
        v140 = get_local ptr u64, pub_key8
        v141 = get_local ptr u64, pub_key16
        v142 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !56
        v143 = const u64 0
        v144 = get_elem_ptr v142, ptr u64, v143, !56
        v145 = const u64 0, !56
        store v145 to v144, !56
        v146 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v146, v123
        v147 = get_local ptr b256, __ret_val
        v148 = call sha256_24(v146, v147)
        v149 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v149, v148
        v150 = get_local ptr { b256 }, __anon_02, !174
        v151 = const u64 0
        v152 = get_elem_ptr v150, ptr b256, v151, !175
        mem_copy_val v152, v149
        v153 = const u64 1
        v154 = const u64 0
        v155 = get_elem_ptr v142, ptr { b256 }, v153, v154, !56
        mem_copy_val v155, v150
        v156 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v156, v142
        br block5(v156)

        block1():
        v157 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v158 = const u64 0
        v159 = get_elem_ptr v157, ptr u64, v158, !53
        v160 = load v159
        v161 = const u64 1, !53
        v162 = cmp eq v160 v161, !178
        cbr v162, block2(), block3(), !176

        block2():
        v163 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !53
        v164 = const u64 1
        v165 = const u64 1
        v166 = get_elem_ptr v163, ptr { u64 }, v164, v165
        v167 = get_local ptr { u64 }, e, !179
        v168 = const u64 0
        v169 = get_elem_ptr v166, ptr u64, v168
        v170 = load v169
        v171 = get_local ptr u64, e0
        v172 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !56
        v173 = const u64 0
        v174 = get_elem_ptr v172, ptr u64, v173, !56
        v175 = const u64 1, !56
        store v175 to v174, !56
        v176 = const u64 1
        v177 = const u64 1
        v178 = get_elem_ptr v172, ptr { u64 }, v176, v177, !56
        mem_copy_val v178, v166
        v179 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v179, v172
        br block5(v179)

        block3():
        v180 = const u64 14757395258967588866, !159
        revert v180, !159

        block5(v181: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v181
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !182 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !183
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !186 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !141
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !189 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !143
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !194 {
        local mut { { { u64, u64 }, u64 } } __aggr_memcpy_0
        local mut slice __aggr_memcpy_00
        local u64 __aggr_memcpy_000
        local mut { u64, u64 } __aggr_memcpy_01
        local u64 __aggr_memcpy_010
        local u64 __aggr_memcpy_016
        local u64 __aggr_memcpy_018
        local mut { u64, u64 } __aggr_memcpy_02
        local u64 __aggr_memcpy_020
        local u64 __aggr_memcpy_028
        local mut b256 __aggr_memcpy_03
        local u64 __aggr_memcpy_08
        local { u64, u64 } __anon_0
        local { u64, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_008
        local { u64, u64 } __anon_01
        local u64 __anon_010
        local u64 __anon_018
        local u64 __anon_08
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = get_local ptr { { { u64, u64 }, u64 } }, __aggr_memcpy_0
        v3 = const u64 0
        v4 = const u64 0
        v5 = const u64 0
        v6 = get_elem_ptr v1, ptr u64, v3, v4, v5
        v7 = load v6
        v8 = const u64 0
        v9 = const u64 0
        v10 = const u64 1
        v11 = get_elem_ptr v1, ptr u64, v8, v9, v10
        v12 = load v11
        v13 = const u64 0
        v14 = const u64 1
        v15 = get_elem_ptr v1, ptr u64, v13, v14
        v16 = load v15
        v17 = get_local ptr u64, __aggr_memcpy_000
        v18 = get_local ptr u64, __aggr_memcpy_08
        v19 = get_local ptr u64, __aggr_memcpy_016
        v20 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !195
        v21 = get_local ptr u64, __aggr_memcpy_000
        v22 = get_local ptr u64, __aggr_memcpy_08
        v23 = get_local ptr u64, __aggr_memcpy_016
        v24 = const u64 0
        v25 = const u64 0
        v26 = const u64 0
        v27 = get_elem_ptr v20, ptr u64, v24, v25, v26
        store v7 to v27
        v28 = const u64 0
        v29 = const u64 0
        v30 = const u64 1
        v31 = get_elem_ptr v20, ptr u64, v28, v29, v30
        store v12 to v31
        v32 = const u64 0
        v33 = const u64 1
        v34 = get_elem_ptr v20, ptr u64, v32, v33
        store v16 to v34
        v35 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !196
        v36 = ptr_to_int s to u64, !199
        v37 = int_to_ptr v36 to ptr { { { u64, u64 }, u64 } }, !199
        v38 = const u64 0
        v39 = get_elem_ptr v37, ptr { { u64, u64 }, u64 }, v38, !201
        v40 = const u64 0
        v41 = get_elem_ptr v35, ptr { { u64, u64 }, u64 }, v40, !205
        v42 = ptr_to_int v39 to u64, !206
        v43 = int_to_ptr v42 to ptr { { u64, u64 }, u64 }, !207
        v44 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v44, v43
        v45 = call len_20(v44)
        v46 = const u64 0, !208
        v47 = cmp eq v45 v46, !213
        cbr v47, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !214

        hash_26_write_27_append_28_block1():
        v48 = const u64 1
        v49 = get_elem_ptr v41, ptr u64, v48, !215
        v50 = load v49, !216
        v51 = const u64 0, !217
        v52 = cmp eq v50 v51, !220
        cbr v52, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !221

        hash_26_write_27_append_28_block3():
        mem_copy_val v41, v43
        br hash_26_write_27_block0(), !223

        hash_26_write_27_append_28_block4():
        v53 = load v49, !224
        v54 = add v53, v45, !227
        v55 = load v49, !228
        v56 = const u64 0
        v57 = get_elem_ptr v41, ptr { u64, u64 }, v56, !229
        v58 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v58, v57
        v59 = call capacity_31(v58)
        v60 = cmp lt v59 v54, !232
        cbr v60, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !233

        hash_26_write_27_append_28_block6():
        v61 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v61, v57
        v62 = call ptr_22(v61)
        v63 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v63, v57
        v64 = call capacity_31(v63)
        v65 = cmp gt v54 v64, !238
        cbr v65, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v62), !239

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v66 = asm(size: v54) -> u64 hp, !242 {
            aloc   size, !123
        }
        v67 = const u64 0, !243
        v68 = cmp gt v64 v67, !246
        cbr v68, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v66), !247

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v69 = asm(dst: v66, src: v62, len: v64) -> (), !250 {
            mcp    dst src len, !151
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v66), !251

        hash_26_write_27_append_28_realloc_bytes_35_block5(v70: u64):
        v71 = get_local ptr { u64, u64 }, __anon_0, !256
        v72 = const u64 0
        v73 = get_elem_ptr v71, ptr u64, v72, !257
        v74 = get_local ptr u64, __anon_001
        v75 = const u64 1
        v76 = get_elem_ptr v71, ptr u64, v75, !258
        v77 = get_local ptr u64, __anon_08
        v78 = get_local ptr { u64, u64 }, __asm_arg
        v79 = get_local ptr u64, __anon_001
        v80 = get_local ptr u64, __anon_08
        v81 = const u64 0
        v82 = get_elem_ptr v78, ptr u64, v81
        store v70 to v82
        v83 = const u64 1
        v84 = get_elem_ptr v78, ptr u64, v83
        store v54 to v84
        v85 = asm(ptr: v78) -> ptr slice ptr {
        }
        v86 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v86, v85
        v87 = get_local ptr slice, new_slice, !260
        mem_copy_val v87, v86
        v88 = get_local ptr slice, new_slice, !262
        v89 = get_local ptr slice, __asm_arg0
        mem_copy_val v89, v86
        v90 = asm(ptr: v89) -> ptr { u64, u64 } ptr {
        }
        v91 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v92 = const u64 0
        v93 = get_elem_ptr v90, ptr u64, v92
        v94 = load v93
        v95 = const u64 1
        v96 = get_elem_ptr v90, ptr u64, v95
        v97 = load v96
        v98 = get_local ptr u64, __aggr_memcpy_010
        v99 = get_local ptr u64, __aggr_memcpy_018
        v100 = get_local ptr { u64, u64 }, __anon_000, !267
        v101 = get_local ptr u64, __aggr_memcpy_010
        v102 = get_local ptr u64, __aggr_memcpy_018
        v103 = get_local ptr u64, __anon_0000
        v104 = get_local ptr u64, __anon_0008
        v105 = const u64 1
        v106 = get_elem_ptr v100, ptr u64, v105, !269
        v107 = get_local ptr { u64, u64 }, __aggr_memcpy_01
        v108 = get_elem_ptr v107, ptr u64, v105
        v109 = get_local ptr u64, __aggr_memcpy_018
        v110 = asm(size: v97) -> u64 hp, !272 {
            aloc   size, !123
        }
        v111 = const u64 0, !273
        v112 = cmp gt v97 v111, !276
        cbr v112, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !277

        hash_26_write_27_append_28_from_37_block0():
        v113 = get_local ptr slice, __asm_arg1
        mem_copy_val v113, v88
        v114 = asm(ptr: v113) -> ptr { u64, u64 } ptr {
        }
        v115 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v116 = const u64 0
        v117 = get_elem_ptr v114, ptr u64, v116
        v118 = load v117
        v119 = const u64 1
        v120 = get_elem_ptr v114, ptr u64, v119
        v121 = load v120
        v122 = get_local ptr u64, __aggr_memcpy_020
        v123 = get_local ptr u64, __aggr_memcpy_028
        v124 = get_local ptr { u64, u64 }, __anon_01, !280
        v125 = get_local ptr u64, __aggr_memcpy_020
        v126 = get_local ptr u64, __aggr_memcpy_028
        v127 = get_local ptr u64, __anon_010
        v128 = get_local ptr u64, __anon_018
        v129 = get_local ptr { u64, u64 }, __aggr_memcpy_02
        v130 = const u64 0
        v131 = get_elem_ptr v129, ptr u64, v130
        v132 = get_local ptr u64, __aggr_memcpy_020
        v133 = asm(dst: v110, src: v118, len: v97) -> (), !284 {
            mcp    dst src len, !285
        }
        br hash_26_write_27_append_28_from_37_block2(), !286

        hash_26_write_27_append_28_from_37_block2():
        v134 = get_local ptr { u64, u64 }, __anon_00, !288
        v135 = const u64 0
        v136 = get_elem_ptr v134, ptr u64, v135, !289
        v137 = get_local ptr u64, __anon_0001
        v138 = const u64 1
        v139 = get_elem_ptr v134, ptr u64, v138, !290
        v140 = get_local ptr u64, __anon_0008
        v141 = get_local ptr u64, __anon_008
        v142 = get_local ptr u64, __anon_0001
        v143 = get_local ptr u64, __anon_008
        v144 = const u64 0
        v145 = get_elem_ptr v57, ptr u64, v144
        store v110 to v145
        v146 = const u64 1
        v147 = get_elem_ptr v57, ptr u64, v146
        store v97 to v147
        br hash_26_write_27_append_28_block8(), !291

        hash_26_write_27_append_28_block8():
        v148 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v148, v57
        v149 = call ptr_22(v148)
        v150 = asm(ptr: v149, offset: v55, new) -> u64 new, !295 {
            add    new ptr offset, !296
        }
        v151 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v151, v43
        v152 = call ptr_21(v151)
        v153 = asm(dst: v150, src: v152, len: v45) -> (), !299 {
            mcp    dst src len, !151
        }
        store v54 to v49, !301
        br hash_26_write_27_block0(), !302

        hash_26_write_27_block0():
        v154 = get_local ptr b256, __const
        v155 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !303
        v156 = get_local ptr b256, result_buffer, !307
        mem_copy_val v156, v154
        v157 = get_local ptr b256, result_buffer, !309
        v158 = ptr_to_int v155 to u64, !310
        v159 = int_to_ptr v158 to ptr { { { u64, u64 }, u64 } }, !310
        v160 = const u64 0
        v161 = get_elem_ptr v159, ptr { { u64, u64 }, u64 }, v160, !311
        v162 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v162, v161
        v163 = call ptr_21(v162)
        v164 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v164, v161
        v165 = call len_20(v164)
        v166 = asm(hash: v157, ptr: v163, bytes: v165) -> ptr b256 hash {
            s256   hash ptr bytes, !312
        }
        v167 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v167, v166
        mem_copy_val __ret_value, v167
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !315 {
        local { { { u64, u64 }, u64 } } __anon_0
        local { { u64, u64 }, u64 } __anon_00
        local { u64, u64 } __anon_000
        local u64 __anon_0000
        local u64 __anon_0001
        local u64 __anon_0008
        local u64 __anon_001
        local u64 __anon_0016
        local u64 __anon_008
        local u64 __anon_016
        local u64 __anon_08

        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !316
        v1 = asm(size: v0) -> u64 hp, !323 {
            aloc   size, !123
        }
        v2 = get_local ptr { u64, u64 }, __anon_000, !325
        v3 = const u64 0
        v4 = get_elem_ptr v2, ptr u64, v3, !326
        v5 = get_local ptr u64, __anon_0000
        v6 = const u64 1
        v7 = get_elem_ptr v2, ptr u64, v6, !327
        v8 = get_local ptr u64, __anon_0008
        v9 = get_local ptr { { u64, u64 }, u64 }, __anon_00, !329
        v10 = const u64 0
        v11 = get_elem_ptr v9, ptr { u64, u64 }, v10, !330
        v12 = get_local ptr u64, __anon_0000
        v13 = get_local ptr u64, __anon_0008
        v14 = get_local ptr u64, __anon_0001
        v15 = get_local ptr u64, __anon_008
        v16 = const u64 1
        v17 = get_elem_ptr v9, ptr u64, v16, !330
        v18 = get_local ptr u64, __anon_0016
        v19 = get_local ptr { { { u64, u64 }, u64 } }, __anon_0, !331
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr { { u64, u64 }, u64 }, v20
        v22 = get_local ptr u64, __anon_0001
        v23 = get_local ptr u64, __anon_008
        v24 = get_local ptr u64, __anon_0016
        v25 = get_local ptr u64, __anon_001
        v26 = get_local ptr u64, __anon_08
        v27 = get_local ptr u64, __anon_016
        v28 = get_local ptr u64, __anon_001
        v29 = get_local ptr u64, __anon_08
        v30 = get_local ptr u64, __anon_016
        v31 = const u64 0
        v32 = const u64 0
        v33 = const u64 0
        v34 = get_elem_ptr __ret_value, ptr u64, v31, v32, v33
        store v1 to v34
        v35 = const u64 0
        v36 = const u64 0
        v37 = const u64 1
        v38 = get_elem_ptr __ret_value, ptr u64, v35, v36, v37
        v39 = const u64 0, !332
        store v39 to v38
        v40 = const u64 0
        v41 = const u64 1
        v42 = get_elem_ptr __ret_value, ptr u64, v40, v41
        v43 = const u64 0, !333
        store v43 to v42
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !336 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !337
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 992 1021
!8 = (!4 !5 !7)
!9 = span !6 1042 1058
!10 = fn_call_path_span !6 1042 1056
!11 = span !6 314 323
!12 = (!4 !5 !9 !10 !11)
!13 = (!4 !5 !9 !10)
!14 = (!4 !5 !9 !10)
!15 = span !6 315 318
!16 = (!4 !5 !9 !10 !11)
!17 = (!4 !5 !9 !10)
!18 = (!4 !5 !9 !10)
!19 = (!4 !5 !9 !10)
!20 = span !6 289 334
!21 = (!4 !5 !9 !10 !20)
!22 = (!4 !5 !9 !10)
!23 = span !6 1026 1059
!24 = (!4 !5 !23)
!25 = span !6 1072 1081
!26 = (!4 !5 !25)
!27 = span !6 1085 1094
!28 = (!4 !5 !27)
!29 = span !6 1072 1094
!30 = fn_call_path_span !6 1082 1084
!31 = (!4 !5 !29 !30)
!32 = (!4 !5 !29 !30)
!33 = span !6 218 232
!34 = (!4 !5 !29 !30 !33)
!35 = (!4 !5 !29 !30)
!36 = (!4 !5 !29 !30)
!37 = (!4 !5 !29 !30 !33)
!38 = span !6 889 891
!39 = span !6 842 962
!40 = (!4 !5 !29 !30 !39)
!41 = span !6 907 926
!42 = span !6 1108 1117
!43 = (!4 !5 !42)
!44 = span !6 1126 1133
!45 = (!4 !5 !44)
!46 = span !6 1148 1157
!47 = (!4 !5 !46)
!48 = span !6 1166 1173
!49 = (!4 !5 !48)
!50 = span !6 492 714
!51 = fn_name_span !6 499 506
!52 = (!50 !51)
!53 = span !6 582 603
!54 = fn_call_path_span !6 587 594
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!56 = span !55 1815 1933
!57 = (!53 !54 !56)
!58 = (!53 !54 !56)
!59 = (!53 !54 !56)
!60 = span !6 451 469
!61 = fn_call_path_span !6 459 467
!62 = (!53 !54 !60 !61)
!63 = (!53 !54 !60 !61)
!64 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!65 = span !64 329 341
!66 = (!53 !54 !60 !61 !65)
!67 = span !64 1593 1595
!68 = span !64 1573 1595
!69 = fn_call_path_span !64 1590 1592
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!71 = span !70 15515 15529
!72 = fn_call_path_span !70 15520 15522
!73 = (!53 !54 !60 !61 !68 !69 !71 !72)
!74 = span !70 12533 12538
!75 = span !70 15514 15536
!76 = fn_call_path_span !70 15531 15534
!77 = (!53 !54 !60 !61 !68 !69 !75 !76)
!78 = (!53 !54 !60 !61 !68)
!79 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!80 = span !79 2461 2560
!81 = (!53 !54 !60 !61 !80)
!82 = (!53 !54 !60 !61 !80)
!83 = (!53 !54 !60 !61 !80)
!84 = span !64 1610 1621
!85 = (!53 !54 !60 !61 !84)
!86 = (!53 !54 !60 !61 !80)
!87 = (!53 !54 !60 !61 !80)
!88 = (!53 !54 !60 !61 !80)
!89 = (!53 !54 !60 !61 !80)
!90 = (!53 !54 !60 !61)
!91 = span !6 451 478
!92 = fn_call_path_span !6 470 476
!93 = span !79 4973 5075
!94 = (!53 !54 !91 !92 !93)
!95 = (!53 !54 !91 !92)
!96 = span !79 4979 4983
!97 = span !79 4998 5037
!98 = fn_call_path_span !79 4998 5037
!99 = (!53 !54 !91 !92 !97 !98)
!100 = (!53 !54 !91 !92 !97)
!101 = (!53 !54 !91 !92 !96)
!102 = (!53 !54 !91 !92)
!103 = span !79 5009 5020
!104 = (!53 !54 !91 !92 !103)
!105 = span !79 5025 5036
!106 = (!53 !54 !91 !92 !105)
!107 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!108 = span !107 28953 28955
!109 = span !6 435 479
!110 = fn_call_path_span !6 435 450
!111 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!112 = span !111 3133 3150
!113 = fn_call_path_span !111 3133 3144
!114 = span !107 28933 28956
!115 = fn_call_path_span !107 28933 28952
!116 = span !107 4157 4190
!117 = fn_call_path_span !107 4157 4180
!118 = span !107 863 884
!119 = fn_call_path_span !107 863 874
!120 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!121 = span !120 3315 3378
!122 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !118 !119 !121)
!123 = span !120 3342 3351
!124 = span !107 839 922
!125 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117 !124)
!126 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117)
!127 = (!53 !54 !109 !110 !112 !113 !114 !115 !116 !117)
!128 = span !107 4133 4221
!129 = (!53 !54 !109 !110 !112 !113 !114 !115 !128)
!130 = (!53 !54 !109 !110 !112 !113 !114 !115)
!131 = (!53 !54 !109 !110 !112 !113 !114 !115)
!132 = span !107 28917 28957
!133 = (!53 !54 !109 !110 !112 !113 !132)
!134 = span !107 28966 28980
!135 = (!53 !54 !109 !110 !112 !113 !134)
!136 = (!53 !54 !109 !110 !112 !113 !134)
!137 = span !107 29065 29077
!138 = (!53 !54 !109 !110 !112 !113 !137)
!139 = span !107 29092 29097
!140 = (!53 !54 !109 !110 !112 !113 !139)
!141 = span !107 2445 2458
!142 = (!53 !54 !109 !110 !112 !113 !141)
!143 = span !107 400 412
!144 = (!53 !54 !109 !110 !112 !113 !143)
!145 = span !107 29107 29109
!146 = span !107 29065 29110
!147 = fn_call_path_span !107 29078 29091
!148 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!149 = span !148 5999 6076
!150 = (!53 !54 !109 !110 !112 !113 !146 !147 !149)
!151 = span !148 6050 6065
!152 = span !107 29121 29126
!153 = (!53 !54 !109 !110 !112 !113 !152)
!154 = span !111 3107 3161
!155 = (!53 !54 !109 !110 !154)
!156 = (!53 !54 !109 !110)
!157 = (!53 !54 !56)
!158 = span !107 28978 28980
!159 = span !6 576 708
!160 = span !6 618 668
!161 = fn_call_path_span !6 618 668
!162 = (!160 !161)
!163 = span !79 5062 5063
!164 = span !79 5055 5064
!165 = fn_call_path_span !79 5055 5061
!166 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!167 = span !166 757 771
!168 = (!53 !54 !91 !92 !164 !165 !167)
!169 = span !6 621 628
!170 = span !6 636 666
!171 = fn_call_path_span !6 636 649
!172 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!173 = span !172 2370 2383
!174 = (!170 !171 !173)
!175 = (!170 !171)
!176 = span !6 681 698
!177 = fn_call_path_span !6 681 698
!178 = (!176 !177)
!179 = span !6 685 686
!180 = span !107 13771 13819
!181 = fn_name_span !107 13778 13781
!182 = (!180 !181)
!183 = span !107 2506 2514
!184 = span !107 15175 15233
!185 = fn_name_span !107 15182 15185
!186 = (!184 !185)
!187 = span !107 978 1030
!188 = fn_name_span !107 985 988
!189 = (!187 !188)
!190 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!191 = span !190 9009 9138
!192 = fn_name_span !190 9016 9022
!193 = inline "never"
!194 = (!191 !192 !193)
!195 = span !190 9065 9096
!196 = span !190 9108 9114
!197 = span !190 9101 9115
!198 = fn_call_path_span !190 9103 9107
!199 = (!197 !198)
!200 = span !111 524 536
!201 = (!197 !198 !200)
!202 = span !111 5123 5146
!203 = fn_call_path_span !111 5129 5134
!204 = span !190 142 154
!205 = (!197 !198 !202 !203 !204)
!206 = (!197 !198 !202 !203)
!207 = (!197 !198 !202 !203)
!208 = span !107 18435 18436
!209 = span !190 365 389
!210 = fn_call_path_span !190 376 382
!211 = span !107 18422 18436
!212 = fn_call_path_span !107 18432 18434
!213 = (!197 !198 !202 !203 !209 !210 !211 !212)
!214 = (!197 !198 !202 !203 !209 !210 !211)
!215 = (!197 !198 !202 !203 !209 !210 !183)
!216 = (!197 !198 !202 !203 !209 !210)
!217 = span !107 18572 18573
!218 = span !107 18560 18573
!219 = fn_call_path_span !107 18569 18571
!220 = (!197 !198 !202 !203 !209 !210 !218 !219)
!221 = (!197 !198 !202 !203 !209 !210 !218)
!222 = span !107 18614 18620
!223 = (!197 !198 !202 !203 !209 !210 !222)
!224 = (!197 !198 !202 !203 !209 !210)
!225 = span !107 18657 18677
!226 = fn_call_path_span !107 18666 18667
!227 = (!197 !198 !202 !203 !209 !210 !225 !226)
!228 = (!197 !198 !202 !203 !209 !210)
!229 = (!197 !198 !202 !203 !209 !210 !141)
!230 = span !107 18808 18838
!231 = fn_call_path_span !107 18828 18829
!232 = (!197 !198 !202 !203 !209 !210 !230 !231)
!233 = (!197 !198 !202 !203 !209 !210 !230)
!234 = span !107 18914 18974
!235 = fn_call_path_span !107 18914 18927
!236 = span !120 4168 4185
!237 = fn_call_path_span !120 4178 4179
!238 = (!197 !198 !202 !203 !209 !210 !234 !235 !236 !237)
!239 = (!197 !198 !202 !203 !209 !210 !234 !235 !236)
!240 = span !120 4210 4232
!241 = fn_call_path_span !120 4210 4221
!242 = (!197 !198 !202 !203 !209 !210 !234 !235 !240 !241 !121)
!243 = span !120 4253 4254
!244 = span !120 4245 4254
!245 = fn_call_path_span !120 4251 4252
!246 = (!197 !198 !202 !203 !209 !210 !234 !235 !244 !245)
!247 = (!197 !198 !202 !203 !209 !210 !234 !235 !244)
!248 = span !120 4269 4302
!249 = fn_call_path_span !120 4273 4286
!250 = (!197 !198 !202 !203 !209 !210 !234 !235 !248 !249 !149)
!251 = (!197 !198 !202 !203 !209 !210 !234 !235)
!252 = span !107 18869 19015
!253 = fn_call_path_span !107 18869 18890
!254 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_slice.sw"
!255 = span !254 2362 2393
!256 = (!197 !198 !202 !203 !209 !210 !252 !253 !255)
!257 = (!197 !198 !202 !203 !209 !210 !252 !253 !255)
!258 = (!197 !198 !202 !203 !209 !210 !252 !253 !255)
!259 = span !107 18853 19016
!260 = (!197 !198 !202 !203 !209 !210 !259)
!261 = span !107 19055 19064
!262 = (!197 !198 !202 !203 !209 !210 !261)
!263 = span !107 19040 19065
!264 = fn_call_path_span !107 19040 19054
!265 = span !107 2130 2153
!266 = fn_call_path_span !107 2136 2151
!267 = (!197 !198 !202 !203 !209 !210 !263 !264 !265 !266)
!268 = span !254 3976 3977
!269 = (!197 !198 !202 !203 !209 !210 !263 !264 !265 !266 !268)
!270 = span !107 2173 2189
!271 = fn_call_path_span !107 2173 2184
!272 = (!197 !198 !202 !203 !209 !210 !263 !264 !270 !271 !121)
!273 = span !107 2208 2209
!274 = span !107 2202 2209
!275 = fn_call_path_span !107 2206 2207
!276 = (!197 !198 !202 !203 !209 !210 !263 !264 !274 !275)
!277 = (!197 !198 !202 !203 !209 !210 !263 !264 !274)
!278 = span !107 2224 2235
!279 = fn_call_path_span !107 2230 2233
!280 = (!197 !198 !202 !203 !209 !210 !263 !264 !278 !279)
!281 = span !107 2224 2259
!282 = fn_call_path_span !107 2236 2243
!283 = span !148 3447 3522
!284 = (!197 !198 !202 !203 !209 !210 !263 !264 !281 !282 !283)
!285 = span !148 3496 3511
!286 = (!197 !198 !202 !203 !209 !210 !263 !264)
!287 = span !107 2279 2296
!288 = (!197 !198 !202 !203 !209 !210 !263 !264 !287)
!289 = (!197 !198 !202 !203 !209 !210 !263 !264)
!290 = (!197 !198 !202 !203 !209 !210 !263 !264)
!291 = (!197 !198 !202 !203 !209 !210)
!292 = span !107 19100 19143
!293 = fn_call_path_span !107 19115 19130
!294 = span !148 6721 6825
!295 = (!197 !198 !202 !203 !209 !210 !292 !293 !294)
!296 = span !148 6771 6789
!297 = span !107 19153 19198
!298 = fn_call_path_span !107 19165 19178
!299 = (!197 !198 !202 !203 !209 !210 !297 !298 !149)
!300 = span !107 19244 19263
!301 = (!197 !198 !202 !203 !209 !210 !300)
!302 = (!197 !198 !202 !203 !209 !210)
!303 = span !190 9121 9127
!304 = span !190 9121 9136
!305 = fn_call_path_span !190 9128 9134
!306 = span !190 440 476
!307 = (!304 !305 !306)
!308 = span !190 508 521
!309 = (!304 !305 !308)
!310 = (!304 !305)
!311 = (!304 !305 !204)
!312 = span !190 619 638
!313 = span !190 177 263
!314 = fn_name_span !190 184 187
!315 = (!313 !314)
!316 = span !107 570 571
!317 = span !190 234 246
!318 = fn_call_path_span !190 234 244
!319 = span !107 3079 3094
!320 = fn_call_path_span !107 3079 3092
!321 = span !107 558 572
!322 = fn_call_path_span !107 558 569
!323 = (!317 !318 !319 !320 !321 !322 !121)
!324 = span !107 534 603
!325 = (!317 !318 !319 !320 !324)
!326 = (!317 !318 !319 !320)
!327 = (!317 !318 !319 !320)
!328 = span !107 3055 3125
!329 = (!317 !318 !328)
!330 = (!317 !318)
!331 = span !190 208 257
!332 = span !107 591 592
!333 = span !107 3113 3114
!334 = span !107 1081 1134
!335 = fn_name_span !107 1088 1096
!336 = (!334 !335)
!337 = span !107 418 426

// IR: [dce] Dead code elimination
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr [u8; 64], __anon_0, !10
        v17 = const u64 0
        br play_0_new_5_array_init_loop(v17), !11

        play_0_new_5_array_init_loop(v18: u64):
        v19 = get_elem_ptr v16, ptr u8, v18, !12
        v20 = const u8 0, !13
        store v20 to v19, !14
        v21 = const u64 1
        v22 = add v18, v21, !15
        v23 = const u64 64
        v24 = cmp lt v22 v23, !16
        cbr v24, play_0_new_5_array_init_loop(v22), play_0_new_5_array_init_exit(), !17

        play_0_new_5_array_init_exit():
        v25 = const u64 0
        v26 = get_elem_ptr v16, ptr u8, v25
        v27 = load v26
        v28 = const u64 1
        v29 = get_elem_ptr v16, ptr u8, v28
        v30 = load v29
        v31 = const u64 2
        v32 = get_elem_ptr v16, ptr u8, v31
        v33 = load v32
        v34 = const u64 3
        v35 = get_elem_ptr v16, ptr u8, v34
        v36 = load v35
        v37 = const u64 4
        v38 = get_elem_ptr v16, ptr u8, v37
        v39 = load v38
        v40 = const u64 5
        v41 = get_elem_ptr v16, ptr u8, v40
        v42 = load v41
        v43 = const u64 6
        v44 = get_elem_ptr v16, ptr u8, v43
        v45 = load v44
        v46 = const u64 7
        v47 = get_elem_ptr v16, ptr u8, v46
        v48 = load v47
        v49 = const u64 8
        v50 = get_elem_ptr v16, ptr u8, v49
        v51 = load v50
        v52 = const u64 9
        v53 = get_elem_ptr v16, ptr u8, v52
        v54 = load v53
        v55 = const u64 10
        v56 = get_elem_ptr v16, ptr u8, v55
        v57 = load v56
        v58 = const u64 11
        v59 = get_elem_ptr v16, ptr u8, v58
        v60 = load v59
        v61 = const u64 12
        v62 = get_elem_ptr v16, ptr u8, v61
        v63 = load v62
        v64 = const u64 13
        v65 = get_elem_ptr v16, ptr u8, v64
        v66 = load v65
        v67 = const u64 14
        v68 = get_elem_ptr v16, ptr u8, v67
        v69 = load v68
        v70 = const u64 15
        v71 = get_elem_ptr v16, ptr u8, v70
        v72 = load v71
        v73 = const u64 16
        v74 = get_elem_ptr v16, ptr u8, v73
        v75 = load v74
        v76 = const u64 17
        v77 = get_elem_ptr v16, ptr u8, v76
        v78 = load v77
        v79 = const u64 18
        v80 = get_elem_ptr v16, ptr u8, v79
        v81 = load v80
        v82 = const u64 19
        v83 = get_elem_ptr v16, ptr u8, v82
        v84 = load v83
        v85 = const u64 20
        v86 = get_elem_ptr v16, ptr u8, v85
        v87 = load v86
        v88 = const u64 21
        v89 = get_elem_ptr v16, ptr u8, v88
        v90 = load v89
        v91 = const u64 22
        v92 = get_elem_ptr v16, ptr u8, v91
        v93 = load v92
        v94 = const u64 23
        v95 = get_elem_ptr v16, ptr u8, v94
        v96 = load v95
        v97 = const u64 24
        v98 = get_elem_ptr v16, ptr u8, v97
        v99 = load v98
        v100 = const u64 25
        v101 = get_elem_ptr v16, ptr u8, v100
        v102 = load v101
        v103 = const u64 26
        v104 = get_elem_ptr v16, ptr u8, v103
        v105 = load v104
        v106 = const u64 27
        v107 = get_elem_ptr v16, ptr u8, v106
        v108 = load v107
        v109 = const u64 28
        v110 = get_elem_ptr v16, ptr u8, v109
        v111 = load v110
        v112 = const u64 29
        v113 = get_elem_ptr v16, ptr u8, v112
        v114 = load v113
        v115 = const u64 30
        v116 = get_elem_ptr v16, ptr u8, v115
        v117 = load v116
        v118 = const u64 31
        v119 = get_elem_ptr v16, ptr u8, v118
        v120 = load v119
        v121 = const u64 32
        v122 = get_elem_ptr v16, ptr u8, v121
        v123 = load v122
        v124 = const u64 33
        v125 = get_elem_ptr v16, ptr u8, v124
        v126 = load v125
        v127 = const u64 34
        v128 = get_elem_ptr v16, ptr u8, v127
        v129 = load v128
        v130 = const u64 35
        v131 = get_elem_ptr v16, ptr u8, v130
        v132 = load v131
        v133 = const u64 36
        v134 = get_elem_ptr v16, ptr u8, v133
        v135 = load v134
        v136 = const u64 37
        v137 = get_elem_ptr v16, ptr u8, v136
        v138 = load v137
        v139 = const u64 38
        v140 = get_elem_ptr v16, ptr u8, v139
        v141 = load v140
        v142 = const u64 39
        v143 = get_elem_ptr v16, ptr u8, v142
        v144 = load v143
        v145 = const u64 40
        v146 = get_elem_ptr v16, ptr u8, v145
        v147 = load v146
        v148 = const u64 41
        v149 = get_elem_ptr v16, ptr u8, v148
        v150 = load v149
        v151 = const u64 42
        v152 = get_elem_ptr v16, ptr u8, v151
        v153 = load v152
        v154 = const u64 43
        v155 = get_elem_ptr v16, ptr u8, v154
        v156 = load v155
        v157 = const u64 44
        v158 = get_elem_ptr v16, ptr u8, v157
        v159 = load v158
        v160 = const u64 45
        v161 = get_elem_ptr v16, ptr u8, v160
        v162 = load v161
        v163 = const u64 46
        v164 = get_elem_ptr v16, ptr u8, v163
        v165 = load v164
        v166 = const u64 47
        v167 = get_elem_ptr v16, ptr u8, v166
        v168 = load v167
        v169 = const u64 48
        v170 = get_elem_ptr v16, ptr u8, v169
        v171 = load v170
        v172 = const u64 49
        v173 = get_elem_ptr v16, ptr u8, v172
        v174 = load v173
        v175 = const u64 50
        v176 = get_elem_ptr v16, ptr u8, v175
        v177 = load v176
        v178 = const u64 51
        v179 = get_elem_ptr v16, ptr u8, v178
        v180 = load v179
        v181 = const u64 52
        v182 = get_elem_ptr v16, ptr u8, v181
        v183 = load v182
        v184 = const u64 53
        v185 = get_elem_ptr v16, ptr u8, v184
        v186 = load v185
        v187 = const u64 54
        v188 = get_elem_ptr v16, ptr u8, v187
        v189 = load v188
        v190 = const u64 55
        v191 = get_elem_ptr v16, ptr u8, v190
        v192 = load v191
        v193 = const u64 56
        v194 = get_elem_ptr v16, ptr u8, v193
        v195 = load v194
        v196 = const u64 57
        v197 = get_elem_ptr v16, ptr u8, v196
        v198 = load v197
        v199 = const u64 58
        v200 = get_elem_ptr v16, ptr u8, v199
        v201 = load v200
        v202 = const u64 59
        v203 = get_elem_ptr v16, ptr u8, v202
        v204 = load v203
        v205 = const u64 60
        v206 = get_elem_ptr v16, ptr u8, v205
        v207 = load v206
        v208 = const u64 61
        v209 = get_elem_ptr v16, ptr u8, v208
        v210 = load v209
        v211 = const u64 62
        v212 = get_elem_ptr v16, ptr u8, v211
        v213 = load v212
        v214 = const u64 63
        v215 = get_elem_ptr v16, ptr u8, v214
        v216 = load v215
        v217 = get_local ptr { [u8; 64] }, secp256k1, !19
        v218 = const u64 0
        v219 = const u64 0
        v220 = get_elem_ptr v217, ptr u8, v218, v219
        store v27 to v220
        v221 = const u64 0
        v222 = const u64 1
        v223 = get_elem_ptr v217, ptr u8, v221, v222
        store v30 to v223
        v224 = const u64 0
        v225 = const u64 2
        v226 = get_elem_ptr v217, ptr u8, v224, v225
        store v33 to v226
        v227 = const u64 0
        v228 = const u64 3
        v229 = get_elem_ptr v217, ptr u8, v227, v228
        store v36 to v229
        v230 = const u64 0
        v231 = const u64 4
        v232 = get_elem_ptr v217, ptr u8, v230, v231
        store v39 to v232
        v233 = const u64 0
        v234 = const u64 5
        v235 = get_elem_ptr v217, ptr u8, v233, v234
        store v42 to v235
        v236 = const u64 0
        v237 = const u64 6
        v238 = get_elem_ptr v217, ptr u8, v236, v237
        store v45 to v238
        v239 = const u64 0
        v240 = const u64 7
        v241 = get_elem_ptr v217, ptr u8, v239, v240
        store v48 to v241
        v242 = const u64 0
        v243 = const u64 8
        v244 = get_elem_ptr v217, ptr u8, v242, v243
        store v51 to v244
        v245 = const u64 0
        v246 = const u64 9
        v247 = get_elem_ptr v217, ptr u8, v245, v246
        store v54 to v247
        v248 = const u64 0
        v249 = const u64 10
        v250 = get_elem_ptr v217, ptr u8, v248, v249
        store v57 to v250
        v251 = const u64 0
        v252 = const u64 11
        v253 = get_elem_ptr v217, ptr u8, v251, v252
        store v60 to v253
        v254 = const u64 0
        v255 = const u64 12
        v256 = get_elem_ptr v217, ptr u8, v254, v255
        store v63 to v256
        v257 = const u64 0
        v258 = const u64 13
        v259 = get_elem_ptr v217, ptr u8, v257, v258
        store v66 to v259
        v260 = const u64 0
        v261 = const u64 14
        v262 = get_elem_ptr v217, ptr u8, v260, v261
        store v69 to v262
        v263 = const u64 0
        v264 = const u64 15
        v265 = get_elem_ptr v217, ptr u8, v263, v264
        store v72 to v265
        v266 = const u64 0
        v267 = const u64 16
        v268 = get_elem_ptr v217, ptr u8, v266, v267
        store v75 to v268
        v269 = const u64 0
        v270 = const u64 17
        v271 = get_elem_ptr v217, ptr u8, v269, v270
        store v78 to v271
        v272 = const u64 0
        v273 = const u64 18
        v274 = get_elem_ptr v217, ptr u8, v272, v273
        store v81 to v274
        v275 = const u64 0
        v276 = const u64 19
        v277 = get_elem_ptr v217, ptr u8, v275, v276
        store v84 to v277
        v278 = const u64 0
        v279 = const u64 20
        v280 = get_elem_ptr v217, ptr u8, v278, v279
        store v87 to v280
        v281 = const u64 0
        v282 = const u64 21
        v283 = get_elem_ptr v217, ptr u8, v281, v282
        store v90 to v283
        v284 = const u64 0
        v285 = const u64 22
        v286 = get_elem_ptr v217, ptr u8, v284, v285
        store v93 to v286
        v287 = const u64 0
        v288 = const u64 23
        v289 = get_elem_ptr v217, ptr u8, v287, v288
        store v96 to v289
        v290 = const u64 0
        v291 = const u64 24
        v292 = get_elem_ptr v217, ptr u8, v290, v291
        store v99 to v292
        v293 = const u64 0
        v294 = const u64 25
        v295 = get_elem_ptr v217, ptr u8, v293, v294
        store v102 to v295
        v296 = const u64 0
        v297 = const u64 26
        v298 = get_elem_ptr v217, ptr u8, v296, v297
        store v105 to v298
        v299 = const u64 0
        v300 = const u64 27
        v301 = get_elem_ptr v217, ptr u8, v299, v300
        store v108 to v301
        v302 = const u64 0
        v303 = const u64 28
        v304 = get_elem_ptr v217, ptr u8, v302, v303
        store v111 to v304
        v305 = const u64 0
        v306 = const u64 29
        v307 = get_elem_ptr v217, ptr u8, v305, v306
        store v114 to v307
        v308 = const u64 0
        v309 = const u64 30
        v310 = get_elem_ptr v217, ptr u8, v308, v309
        store v117 to v310
        v311 = const u64 0
        v312 = const u64 31
        v313 = get_elem_ptr v217, ptr u8, v311, v312
        store v120 to v313
        v314 = const u64 0
        v315 = const u64 32
        v316 = get_elem_ptr v217, ptr u8, v314, v315
        store v123 to v316
        v317 = const u64 0
        v318 = const u64 33
        v319 = get_elem_ptr v217, ptr u8, v317, v318
        store v126 to v319
        v320 = const u64 0
        v321 = const u64 34
        v322 = get_elem_ptr v217, ptr u8, v320, v321
        store v129 to v322
        v323 = const u64 0
        v324 = const u64 35
        v325 = get_elem_ptr v217, ptr u8, v323, v324
        store v132 to v325
        v326 = const u64 0
        v327 = const u64 36
        v328 = get_elem_ptr v217, ptr u8, v326, v327
        store v135 to v328
        v329 = const u64 0
        v330 = const u64 37
        v331 = get_elem_ptr v217, ptr u8, v329, v330
        store v138 to v331
        v332 = const u64 0
        v333 = const u64 38
        v334 = get_elem_ptr v217, ptr u8, v332, v333
        store v141 to v334
        v335 = const u64 0
        v336 = const u64 39
        v337 = get_elem_ptr v217, ptr u8, v335, v336
        store v144 to v337
        v338 = const u64 0
        v339 = const u64 40
        v340 = get_elem_ptr v217, ptr u8, v338, v339
        store v147 to v340
        v341 = const u64 0
        v342 = const u64 41
        v343 = get_elem_ptr v217, ptr u8, v341, v342
        store v150 to v343
        v344 = const u64 0
        v345 = const u64 42
        v346 = get_elem_ptr v217, ptr u8, v344, v345
        store v153 to v346
        v347 = const u64 0
        v348 = const u64 43
        v349 = get_elem_ptr v217, ptr u8, v347, v348
        store v156 to v349
        v350 = const u64 0
        v351 = const u64 44
        v352 = get_elem_ptr v217, ptr u8, v350, v351
        store v159 to v352
        v353 = const u64 0
        v354 = const u64 45
        v355 = get_elem_ptr v217, ptr u8, v353, v354
        store v162 to v355
        v356 = const u64 0
        v357 = const u64 46
        v358 = get_elem_ptr v217, ptr u8, v356, v357
        store v165 to v358
        v359 = const u64 0
        v360 = const u64 47
        v361 = get_elem_ptr v217, ptr u8, v359, v360
        store v168 to v361
        v362 = const u64 0
        v363 = const u64 48
        v364 = get_elem_ptr v217, ptr u8, v362, v363
        store v171 to v364
        v365 = const u64 0
        v366 = const u64 49
        v367 = get_elem_ptr v217, ptr u8, v365, v366
        store v174 to v367
        v368 = const u64 0
        v369 = const u64 50
        v370 = get_elem_ptr v217, ptr u8, v368, v369
        store v177 to v370
        v371 = const u64 0
        v372 = const u64 51
        v373 = get_elem_ptr v217, ptr u8, v371, v372
        store v180 to v373
        v374 = const u64 0
        v375 = const u64 52
        v376 = get_elem_ptr v217, ptr u8, v374, v375
        store v183 to v376
        v377 = const u64 0
        v378 = const u64 53
        v379 = get_elem_ptr v217, ptr u8, v377, v378
        store v186 to v379
        v380 = const u64 0
        v381 = const u64 54
        v382 = get_elem_ptr v217, ptr u8, v380, v381
        store v189 to v382
        v383 = const u64 0
        v384 = const u64 55
        v385 = get_elem_ptr v217, ptr u8, v383, v384
        store v192 to v385
        v386 = const u64 0
        v387 = const u64 56
        v388 = get_elem_ptr v217, ptr u8, v386, v387
        store v195 to v388
        v389 = const u64 0
        v390 = const u64 57
        v391 = get_elem_ptr v217, ptr u8, v389, v390
        store v198 to v391
        v392 = const u64 0
        v393 = const u64 58
        v394 = get_elem_ptr v217, ptr u8, v392, v393
        store v201 to v394
        v395 = const u64 0
        v396 = const u64 59
        v397 = get_elem_ptr v217, ptr u8, v395, v396
        store v204 to v397
        v398 = const u64 0
        v399 = const u64 60
        v400 = get_elem_ptr v217, ptr u8, v398, v399
        store v207 to v400
        v401 = const u64 0
        v402 = const u64 61
        v403 = get_elem_ptr v217, ptr u8, v401, v402
        store v210 to v403
        v404 = const u64 0
        v405 = const u64 62
        v406 = get_elem_ptr v217, ptr u8, v404, v405
        store v213 to v406
        v407 = const u64 0
        v408 = const u64 63
        v409 = get_elem_ptr v217, ptr u8, v407, v408
        store v216 to v409
        v410 = get_local ptr { [u8; 64] }, secp256k1, !21
        v411 = get_local ptr { [u8; 64] }, secp256k1, !23
        v412 = ptr_to_int v410 to u64, !26
        v413 = int_to_ptr v412 to ptr { [u8; 64] }, !27
        v414 = const u64 0
        v415 = get_elem_ptr v413, ptr [u8; 64], v414, !29
        v416 = ptr_to_int v411 to u64, !30
        v417 = int_to_ptr v416 to ptr { [u8; 64] }, !31
        v418 = const u64 0
        v419 = get_elem_ptr v417, ptr [u8; 64], v418, !32
        v420 = const u64 64, !33
        v421 = asm(result, r2: v415, r3: v419, r4: v420) -> bool result, !35 {
            meq    result r2 r3 r4, !36
        }
        v422 = get_local ptr { [u8; 64] }, secp256k1, !38
        v423 = get_local ptr { [u8; 64] }, __tmp_arg
        mem_copy_val v423, v422
        v424 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        v425 = const u64 0
        v426 = const u64 0
        v427 = const u64 0
        v428 = get_elem_ptr v424, ptr u64, v425, v426, v427
        store v6 to v428
        v429 = const u64 0
        v430 = const u64 0
        v431 = const u64 1
        v432 = get_elem_ptr v424, ptr u64, v429, v430, v431
        store v11 to v432
        v433 = const u64 0
        v434 = const u64 1
        v435 = get_elem_ptr v424, ptr u64, v433, v434
        store v15 to v435
        v436 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v437 = call address_7(v423, v424, v436)
        v438 = get_local ptr { [u8; 64] }, secp256k1, !40
        v439 = get_local ptr { [u8; 64] }, __tmp_arg1
        mem_copy_val v439, v438
        v440 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v441 = const u64 0
        v442 = const u64 0
        v443 = const u64 0
        v444 = get_elem_ptr v440, ptr u64, v441, v442, v443
        store v6 to v444
        v445 = const u64 0
        v446 = const u64 0
        v447 = const u64 1
        v448 = get_elem_ptr v440, ptr u64, v445, v446, v447
        store v11 to v448
        v449 = const u64 0
        v450 = const u64 1
        v451 = get_elem_ptr v440, ptr u64, v449, v450
        store v15 to v451
        v452 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v453 = call address_7(v439, v440, v452)
        v454 = const unit ()
        ret () v454
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !43 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local b256 inner_value

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !48
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !49
        v3 = const u64 0, !47
        store v3 to v2, !50
        v4 = ptr_to_int message to u64, !53
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !54
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !57
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !58
        v11 = cmp eq v9 v10, !64
        v12 = const bool false, !65
        v13 = cmp eq v11 v12, !68
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !69

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !72
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !73
        v17 = const u64 0, !71
        store v17 to v16, !74
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !76

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !77
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !78
        v22 = const u64 1, !71
        store v22 to v21, !79
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !80
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !81

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !85
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !86
        v37 = const u64 1, !87
        v38 = cmp eq v36 v37, !90
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !91

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !92
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !93
        v43 = get_local ptr b256, inner_value, !95
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !97
        v45 = const u64 32, !99
        v46 = asm(size: v45) -> u64 hp, !113 {
            aloc   size, !114
        }
        v47 = ptr_to_int v44 to u64, !116
        v48 = const u64 32, !117
        v49 = asm(dst: v46, src: v47, len: v48) -> (), !122 {
            mcp    dst src len, !123
        }
        v50 = const u64 1
        v51 = const u64 0
        v52 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v50, v51, !124
        v53 = const u64 0
        v54 = const u64 0
        v55 = const u64 0
        v56 = get_elem_ptr v52, ptr u64, v53, v54, v55
        store v46 to v56
        v57 = const u64 0
        v58 = const u64 0
        v59 = const u64 1
        v60 = get_elem_ptr v52, ptr u64, v57, v58, v59
        store v45 to v60
        v61 = const u64 0
        v62 = const u64 1
        v63 = get_elem_ptr v52, ptr u64, v61, v62
        v64 = const u64 32, !125
        store v64 to v63
        v65 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !126
        mem_copy_val v65, v0
        v66 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67
        v69 = load v68
        v70 = const u64 0, !44
        v71 = cmp eq v69 v70, !129
        cbr v71, block0(), block1(), !127

        recover_8_unwrap_14_block1():
        v72 = const u64 0, !130
        revert v72, !135

        block0():
        v73 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !44
        v74 = const u64 1
        v75 = const u64 0
        v76 = get_elem_ptr v73, ptr { { { u64, u64 }, u64 } }, v74, v75
        v77 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !47
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !47
        v80 = const u64 0, !47
        store v80 to v79, !47
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v81, v76
        v82 = get_local ptr b256, __ret_val
        v83 = call sha256_24(v81, v82)
        v84 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v84, v83
        v85 = get_local ptr { b256 }, __anon_02, !140
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86, !141
        mem_copy_val v87, v84
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v77, ptr { b256 }, v88, v89, !47
        mem_copy_val v90, v85
        v91 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v91, v77
        br block5(v91)

        block1():
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !44
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !44
        v95 = load v94
        v96 = const u64 1, !44
        v97 = cmp eq v95 v96, !144
        cbr v97, block2(), block3(), !142

        block2():
        v98 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !44
        v99 = const u64 1
        v100 = const u64 1
        v101 = get_elem_ptr v98, ptr { u64 }, v99, v100
        v102 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !47
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !47
        v105 = const u64 1, !47
        store v105 to v104, !47
        v106 = const u64 1
        v107 = const u64 1
        v108 = get_elem_ptr v102, ptr { u64 }, v106, v107, !47
        mem_copy_val v108, v101
        v109 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v109, v102
        br block5(v109)

        block3():
        v110 = const u64 14757395258967588866, !126
        revert v110, !126

        block5(v111: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v111
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !147 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !148
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !151 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !152
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !155 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !156
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !161 {
        local mut slice __aggr_memcpy_00
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !162
        v17 = const u64 0
        v18 = const u64 0
        v19 = const u64 0
        v20 = get_elem_ptr v16, ptr u64, v17, v18, v19
        store v6 to v20
        v21 = const u64 0
        v22 = const u64 0
        v23 = const u64 1
        v24 = get_elem_ptr v16, ptr u64, v21, v22, v23
        store v11 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr v16, ptr u64, v25, v26
        store v15 to v27
        v28 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !163
        v29 = ptr_to_int s to u64, !166
        v30 = int_to_ptr v29 to ptr { { { u64, u64 }, u64 } }, !166
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr { { u64, u64 }, u64 }, v31, !168
        v33 = const u64 0
        v34 = get_elem_ptr v28, ptr { { u64, u64 }, u64 }, v33, !172
        v35 = ptr_to_int v32 to u64, !173
        v36 = int_to_ptr v35 to ptr { { u64, u64 }, u64 }, !174
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v37, v36
        v38 = call len_20(v37)
        v39 = const u64 0, !175
        v40 = cmp eq v38 v39, !180
        cbr v40, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !181

        hash_26_write_27_append_28_block1():
        v41 = const u64 1
        v42 = get_elem_ptr v34, ptr u64, v41, !182
        v43 = load v42, !183
        v44 = const u64 0, !184
        v45 = cmp eq v43 v44, !187
        cbr v45, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !188

        hash_26_write_27_append_28_block3():
        mem_copy_val v34, v36
        br hash_26_write_27_block0(), !190

        hash_26_write_27_append_28_block4():
        v46 = load v42, !191
        v47 = add v46, v38, !194
        v48 = load v42, !195
        v49 = const u64 0
        v50 = get_elem_ptr v34, ptr { u64, u64 }, v49, !196
        v51 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v51, v50
        v52 = call capacity_31(v51)
        v53 = cmp lt v52 v47, !199
        cbr v53, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !200

        hash_26_write_27_append_28_block6():
        v54 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v54, v50
        v55 = call ptr_22(v54)
        v56 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v56, v50
        v57 = call capacity_31(v56)
        v58 = cmp gt v47 v57, !205
        cbr v58, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v55), !206

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v59 = asm(size: v47) -> u64 hp, !209 {
            aloc   size, !114
        }
        v60 = const u64 0, !210
        v61 = cmp gt v57 v60, !213
        cbr v61, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !214

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v62 = asm(dst: v59, src: v55, len: v57) -> (), !217 {
            mcp    dst src len, !123
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !218

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr { u64, u64 }, __asm_arg
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65
        store v63 to v66
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67
        store v47 to v68
        v69 = asm(ptr: v64) -> ptr slice ptr {
        }
        v70 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v70, v69
        v71 = get_local ptr slice, new_slice, !220
        mem_copy_val v71, v70
        v72 = get_local ptr slice, new_slice, !222
        v73 = get_local ptr slice, __asm_arg0
        mem_copy_val v73, v70
        v74 = asm(ptr: v73) -> ptr { u64, u64 } ptr {
        }
        v75 = const u64 1
        v76 = get_elem_ptr v74, ptr u64, v75
        v77 = load v76
        v78 = asm(size: v77) -> u64 hp, !227 {
            aloc   size, !114
        }
        v79 = const u64 0, !228
        v80 = cmp gt v77 v79, !231
        cbr v80, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !232

        hash_26_write_27_append_28_from_37_block0():
        v81 = get_local ptr slice, __asm_arg1
        mem_copy_val v81, v72
        v82 = asm(ptr: v81) -> ptr { u64, u64 } ptr {
        }
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u64, v83
        v85 = load v84
        v86 = asm(dst: v78, src: v85, len: v77) -> (), !236 {
            mcp    dst src len, !237
        }
        br hash_26_write_27_append_28_from_37_block2(), !238

        hash_26_write_27_append_28_from_37_block2():
        v87 = const u64 0
        v88 = get_elem_ptr v50, ptr u64, v87
        store v78 to v88
        v89 = const u64 1
        v90 = get_elem_ptr v50, ptr u64, v89
        store v77 to v90
        br hash_26_write_27_append_28_block8(), !239

        hash_26_write_27_append_28_block8():
        v91 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v91, v50
        v92 = call ptr_22(v91)
        v93 = asm(ptr: v92, offset: v48, new) -> u64 new, !243 {
            add    new ptr offset, !244
        }
        v94 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v94, v36
        v95 = call ptr_21(v94)
        v96 = asm(dst: v93, src: v95, len: v38) -> (), !247 {
            mcp    dst src len, !123
        }
        store v47 to v42, !249
        br hash_26_write_27_block0(), !250

        hash_26_write_27_block0():
        v97 = get_local ptr b256, __const
        v98 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !251
        v99 = get_local ptr b256, result_buffer, !255
        mem_copy_val v99, v97
        v100 = get_local ptr b256, result_buffer, !257
        v101 = ptr_to_int v98 to u64, !258
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !258
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !259
        v105 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v105, v104
        v106 = call ptr_21(v105)
        v107 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v107, v104
        v108 = call len_20(v107)
        v109 = asm(hash: v100, ptr: v106, bytes: v108) -> ptr b256 hash {
            s256   hash ptr bytes, !260
        }
        v110 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v110, v109
        mem_copy_val __ret_value, v110
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !263 {
        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !264
        v1 = asm(size: v0) -> u64 hp, !271 {
            aloc   size, !114
        }
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr __ret_value, ptr u64, v2, v3, v4
        store v1 to v5
        v6 = const u64 0
        v7 = const u64 0
        v8 = const u64 1
        v9 = get_elem_ptr __ret_value, ptr u64, v6, v7, v8
        v10 = const u64 0, !272
        store v10 to v9
        v11 = const u64 0
        v12 = const u64 1
        v13 = get_elem_ptr __ret_value, ptr u64, v11, v12
        v14 = const u64 0, !273
        store v14 to v13
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !276 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !277
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1042 1058
!8 = fn_call_path_span !6 1042 1056
!9 = span !6 314 323
!10 = (!4 !5 !7 !8 !9)
!11 = (!4 !5 !7 !8)
!12 = (!4 !5 !7 !8)
!13 = span !6 315 318
!14 = (!4 !5 !7 !8 !9)
!15 = (!4 !5 !7 !8)
!16 = (!4 !5 !7 !8)
!17 = (!4 !5 !7 !8)
!18 = span !6 1026 1059
!19 = (!4 !5 !18)
!20 = span !6 1072 1081
!21 = (!4 !5 !20)
!22 = span !6 1085 1094
!23 = (!4 !5 !22)
!24 = span !6 1072 1094
!25 = fn_call_path_span !6 1082 1084
!26 = (!4 !5 !24 !25)
!27 = (!4 !5 !24 !25)
!28 = span !6 218 232
!29 = (!4 !5 !24 !25 !28)
!30 = (!4 !5 !24 !25)
!31 = (!4 !5 !24 !25)
!32 = (!4 !5 !24 !25 !28)
!33 = span !6 889 891
!34 = span !6 842 962
!35 = (!4 !5 !24 !25 !34)
!36 = span !6 907 926
!37 = span !6 1108 1117
!38 = (!4 !5 !37)
!39 = span !6 1148 1157
!40 = (!4 !5 !39)
!41 = span !6 492 714
!42 = fn_name_span !6 499 506
!43 = (!41 !42)
!44 = span !6 582 603
!45 = fn_call_path_span !6 587 594
!46 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!47 = span !46 1815 1933
!48 = (!44 !45 !47)
!49 = (!44 !45 !47)
!50 = (!44 !45 !47)
!51 = span !6 451 469
!52 = fn_call_path_span !6 459 467
!53 = (!44 !45 !51 !52)
!54 = (!44 !45 !51 !52)
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!56 = span !55 329 341
!57 = (!44 !45 !51 !52 !56)
!58 = span !55 1593 1595
!59 = span !55 1573 1595
!60 = fn_call_path_span !55 1590 1592
!61 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!62 = span !61 15515 15529
!63 = fn_call_path_span !61 15520 15522
!64 = (!44 !45 !51 !52 !59 !60 !62 !63)
!65 = span !61 12533 12538
!66 = span !61 15514 15536
!67 = fn_call_path_span !61 15531 15534
!68 = (!44 !45 !51 !52 !59 !60 !66 !67)
!69 = (!44 !45 !51 !52 !59)
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!71 = span !70 2461 2560
!72 = (!44 !45 !51 !52 !71)
!73 = (!44 !45 !51 !52 !71)
!74 = (!44 !45 !51 !52 !71)
!75 = span !55 1610 1621
!76 = (!44 !45 !51 !52 !75)
!77 = (!44 !45 !51 !52 !71)
!78 = (!44 !45 !51 !52 !71)
!79 = (!44 !45 !51 !52 !71)
!80 = (!44 !45 !51 !52 !71)
!81 = (!44 !45 !51 !52)
!82 = span !6 451 478
!83 = fn_call_path_span !6 470 476
!84 = span !70 4973 5075
!85 = (!44 !45 !82 !83 !84)
!86 = (!44 !45 !82 !83)
!87 = span !70 4979 4983
!88 = span !70 4998 5037
!89 = fn_call_path_span !70 4998 5037
!90 = (!44 !45 !82 !83 !88 !89)
!91 = (!44 !45 !82 !83 !88)
!92 = (!44 !45 !82 !83 !87)
!93 = (!44 !45 !82 !83)
!94 = span !70 5009 5020
!95 = (!44 !45 !82 !83 !94)
!96 = span !70 5025 5036
!97 = (!44 !45 !82 !83 !96)
!98 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!99 = span !98 28953 28955
!100 = span !6 435 479
!101 = fn_call_path_span !6 435 450
!102 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!103 = span !102 3133 3150
!104 = fn_call_path_span !102 3133 3144
!105 = span !98 28933 28956
!106 = fn_call_path_span !98 28933 28952
!107 = span !98 4157 4190
!108 = fn_call_path_span !98 4157 4180
!109 = span !98 863 884
!110 = fn_call_path_span !98 863 874
!111 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!112 = span !111 3315 3378
!113 = (!44 !45 !100 !101 !103 !104 !105 !106 !107 !108 !109 !110 !112)
!114 = span !111 3342 3351
!115 = span !98 29065 29077
!116 = (!44 !45 !100 !101 !103 !104 !115)
!117 = span !98 29107 29109
!118 = span !98 29065 29110
!119 = fn_call_path_span !98 29078 29091
!120 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!121 = span !120 5999 6076
!122 = (!44 !45 !100 !101 !103 !104 !118 !119 !121)
!123 = span !120 6050 6065
!124 = (!44 !45 !47)
!125 = span !98 28978 28980
!126 = span !6 576 708
!127 = span !6 618 668
!128 = fn_call_path_span !6 618 668
!129 = (!127 !128)
!130 = span !70 5062 5063
!131 = span !70 5055 5064
!132 = fn_call_path_span !70 5055 5061
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!134 = span !133 757 771
!135 = (!44 !45 !82 !83 !131 !132 !134)
!136 = span !6 636 666
!137 = fn_call_path_span !6 636 649
!138 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!139 = span !138 2370 2383
!140 = (!136 !137 !139)
!141 = (!136 !137)
!142 = span !6 681 698
!143 = fn_call_path_span !6 681 698
!144 = (!142 !143)
!145 = span !98 13771 13819
!146 = fn_name_span !98 13778 13781
!147 = (!145 !146)
!148 = span !98 2506 2514
!149 = span !98 15175 15233
!150 = fn_name_span !98 15182 15185
!151 = (!149 !150)
!152 = span !98 2445 2458
!153 = span !98 978 1030
!154 = fn_name_span !98 985 988
!155 = (!153 !154)
!156 = span !98 400 412
!157 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!158 = span !157 9009 9138
!159 = fn_name_span !157 9016 9022
!160 = inline "never"
!161 = (!158 !159 !160)
!162 = span !157 9065 9096
!163 = span !157 9108 9114
!164 = span !157 9101 9115
!165 = fn_call_path_span !157 9103 9107
!166 = (!164 !165)
!167 = span !102 524 536
!168 = (!164 !165 !167)
!169 = span !102 5123 5146
!170 = fn_call_path_span !102 5129 5134
!171 = span !157 142 154
!172 = (!164 !165 !169 !170 !171)
!173 = (!164 !165 !169 !170)
!174 = (!164 !165 !169 !170)
!175 = span !98 18435 18436
!176 = span !157 365 389
!177 = fn_call_path_span !157 376 382
!178 = span !98 18422 18436
!179 = fn_call_path_span !98 18432 18434
!180 = (!164 !165 !169 !170 !176 !177 !178 !179)
!181 = (!164 !165 !169 !170 !176 !177 !178)
!182 = (!164 !165 !169 !170 !176 !177 !148)
!183 = (!164 !165 !169 !170 !176 !177)
!184 = span !98 18572 18573
!185 = span !98 18560 18573
!186 = fn_call_path_span !98 18569 18571
!187 = (!164 !165 !169 !170 !176 !177 !185 !186)
!188 = (!164 !165 !169 !170 !176 !177 !185)
!189 = span !98 18614 18620
!190 = (!164 !165 !169 !170 !176 !177 !189)
!191 = (!164 !165 !169 !170 !176 !177)
!192 = span !98 18657 18677
!193 = fn_call_path_span !98 18666 18667
!194 = (!164 !165 !169 !170 !176 !177 !192 !193)
!195 = (!164 !165 !169 !170 !176 !177)
!196 = (!164 !165 !169 !170 !176 !177 !152)
!197 = span !98 18808 18838
!198 = fn_call_path_span !98 18828 18829
!199 = (!164 !165 !169 !170 !176 !177 !197 !198)
!200 = (!164 !165 !169 !170 !176 !177 !197)
!201 = span !98 18914 18974
!202 = fn_call_path_span !98 18914 18927
!203 = span !111 4168 4185
!204 = fn_call_path_span !111 4178 4179
!205 = (!164 !165 !169 !170 !176 !177 !201 !202 !203 !204)
!206 = (!164 !165 !169 !170 !176 !177 !201 !202 !203)
!207 = span !111 4210 4232
!208 = fn_call_path_span !111 4210 4221
!209 = (!164 !165 !169 !170 !176 !177 !201 !202 !207 !208 !112)
!210 = span !111 4253 4254
!211 = span !111 4245 4254
!212 = fn_call_path_span !111 4251 4252
!213 = (!164 !165 !169 !170 !176 !177 !201 !202 !211 !212)
!214 = (!164 !165 !169 !170 !176 !177 !201 !202 !211)
!215 = span !111 4269 4302
!216 = fn_call_path_span !111 4273 4286
!217 = (!164 !165 !169 !170 !176 !177 !201 !202 !215 !216 !121)
!218 = (!164 !165 !169 !170 !176 !177 !201 !202)
!219 = span !98 18853 19016
!220 = (!164 !165 !169 !170 !176 !177 !219)
!221 = span !98 19055 19064
!222 = (!164 !165 !169 !170 !176 !177 !221)
!223 = span !98 19040 19065
!224 = fn_call_path_span !98 19040 19054
!225 = span !98 2173 2189
!226 = fn_call_path_span !98 2173 2184
!227 = (!164 !165 !169 !170 !176 !177 !223 !224 !225 !226 !112)
!228 = span !98 2208 2209
!229 = span !98 2202 2209
!230 = fn_call_path_span !98 2206 2207
!231 = (!164 !165 !169 !170 !176 !177 !223 !224 !229 !230)
!232 = (!164 !165 !169 !170 !176 !177 !223 !224 !229)
!233 = span !98 2224 2259
!234 = fn_call_path_span !98 2236 2243
!235 = span !120 3447 3522
!236 = (!164 !165 !169 !170 !176 !177 !223 !224 !233 !234 !235)
!237 = span !120 3496 3511
!238 = (!164 !165 !169 !170 !176 !177 !223 !224)
!239 = (!164 !165 !169 !170 !176 !177)
!240 = span !98 19100 19143
!241 = fn_call_path_span !98 19115 19130
!242 = span !120 6721 6825
!243 = (!164 !165 !169 !170 !176 !177 !240 !241 !242)
!244 = span !120 6771 6789
!245 = span !98 19153 19198
!246 = fn_call_path_span !98 19165 19178
!247 = (!164 !165 !169 !170 !176 !177 !245 !246 !121)
!248 = span !98 19244 19263
!249 = (!164 !165 !169 !170 !176 !177 !248)
!250 = (!164 !165 !169 !170 !176 !177)
!251 = span !157 9121 9127
!252 = span !157 9121 9136
!253 = fn_call_path_span !157 9128 9134
!254 = span !157 440 476
!255 = (!252 !253 !254)
!256 = span !157 508 521
!257 = (!252 !253 !256)
!258 = (!252 !253)
!259 = (!252 !253 !171)
!260 = span !157 619 638
!261 = span !157 177 263
!262 = fn_name_span !157 184 187
!263 = (!261 !262)
!264 = span !98 570 571
!265 = span !157 234 246
!266 = fn_call_path_span !157 234 244
!267 = span !98 3079 3094
!268 = fn_call_path_span !98 3079 3092
!269 = span !98 558 572
!270 = fn_call_path_span !98 558 569
!271 = (!265 !266 !267 !268 !269 !270 !112)
!272 = span !98 591 592
!273 = span !98 3113 3114
!274 = span !98 1081 1134
!275 = fn_name_span !98 1088 1096
!276 = (!274 !275)
!277 = span !98 418 426

// IR: Final
script {
    entry fn main() -> (), !3 {
        local [u8; 64] __anon_0
        local { u64, ( { b256 } | { u64 } ) } __ret_val
        local { u64, ( { b256 } | { u64 } ) } __ret_val0
        local { { { u64, u64 }, u64 } } __ret_val1
        local { [u8; 64] } __tmp_arg
        local { { { u64, u64 }, u64 } } __tmp_arg0
        local { [u8; 64] } __tmp_arg1
        local { { { u64, u64 }, u64 } } __tmp_arg2
        local { [u8; 64] } secp256k1

        entry():
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val1
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr [u8; 64], __anon_0, !10
        v17 = const u64 0
        br play_0_new_5_array_init_loop(v17), !11

        play_0_new_5_array_init_loop(v18: u64):
        v19 = get_elem_ptr v16, ptr u8, v18, !12
        v20 = const u8 0, !13
        store v20 to v19, !14
        v21 = const u64 1
        v22 = add v18, v21, !15
        v23 = const u64 64
        v24 = cmp lt v22 v23, !16
        cbr v24, play_0_new_5_array_init_loop(v22), play_0_new_5_array_init_exit(), !17

        play_0_new_5_array_init_exit():
        v25 = const u64 0
        v26 = get_elem_ptr v16, ptr u8, v25
        v27 = load v26
        v28 = const u64 1
        v29 = get_elem_ptr v16, ptr u8, v28
        v30 = load v29
        v31 = const u64 2
        v32 = get_elem_ptr v16, ptr u8, v31
        v33 = load v32
        v34 = const u64 3
        v35 = get_elem_ptr v16, ptr u8, v34
        v36 = load v35
        v37 = const u64 4
        v38 = get_elem_ptr v16, ptr u8, v37
        v39 = load v38
        v40 = const u64 5
        v41 = get_elem_ptr v16, ptr u8, v40
        v42 = load v41
        v43 = const u64 6
        v44 = get_elem_ptr v16, ptr u8, v43
        v45 = load v44
        v46 = const u64 7
        v47 = get_elem_ptr v16, ptr u8, v46
        v48 = load v47
        v49 = const u64 8
        v50 = get_elem_ptr v16, ptr u8, v49
        v51 = load v50
        v52 = const u64 9
        v53 = get_elem_ptr v16, ptr u8, v52
        v54 = load v53
        v55 = const u64 10
        v56 = get_elem_ptr v16, ptr u8, v55
        v57 = load v56
        v58 = const u64 11
        v59 = get_elem_ptr v16, ptr u8, v58
        v60 = load v59
        v61 = const u64 12
        v62 = get_elem_ptr v16, ptr u8, v61
        v63 = load v62
        v64 = const u64 13
        v65 = get_elem_ptr v16, ptr u8, v64
        v66 = load v65
        v67 = const u64 14
        v68 = get_elem_ptr v16, ptr u8, v67
        v69 = load v68
        v70 = const u64 15
        v71 = get_elem_ptr v16, ptr u8, v70
        v72 = load v71
        v73 = const u64 16
        v74 = get_elem_ptr v16, ptr u8, v73
        v75 = load v74
        v76 = const u64 17
        v77 = get_elem_ptr v16, ptr u8, v76
        v78 = load v77
        v79 = const u64 18
        v80 = get_elem_ptr v16, ptr u8, v79
        v81 = load v80
        v82 = const u64 19
        v83 = get_elem_ptr v16, ptr u8, v82
        v84 = load v83
        v85 = const u64 20
        v86 = get_elem_ptr v16, ptr u8, v85
        v87 = load v86
        v88 = const u64 21
        v89 = get_elem_ptr v16, ptr u8, v88
        v90 = load v89
        v91 = const u64 22
        v92 = get_elem_ptr v16, ptr u8, v91
        v93 = load v92
        v94 = const u64 23
        v95 = get_elem_ptr v16, ptr u8, v94
        v96 = load v95
        v97 = const u64 24
        v98 = get_elem_ptr v16, ptr u8, v97
        v99 = load v98
        v100 = const u64 25
        v101 = get_elem_ptr v16, ptr u8, v100
        v102 = load v101
        v103 = const u64 26
        v104 = get_elem_ptr v16, ptr u8, v103
        v105 = load v104
        v106 = const u64 27
        v107 = get_elem_ptr v16, ptr u8, v106
        v108 = load v107
        v109 = const u64 28
        v110 = get_elem_ptr v16, ptr u8, v109
        v111 = load v110
        v112 = const u64 29
        v113 = get_elem_ptr v16, ptr u8, v112
        v114 = load v113
        v115 = const u64 30
        v116 = get_elem_ptr v16, ptr u8, v115
        v117 = load v116
        v118 = const u64 31
        v119 = get_elem_ptr v16, ptr u8, v118
        v120 = load v119
        v121 = const u64 32
        v122 = get_elem_ptr v16, ptr u8, v121
        v123 = load v122
        v124 = const u64 33
        v125 = get_elem_ptr v16, ptr u8, v124
        v126 = load v125
        v127 = const u64 34
        v128 = get_elem_ptr v16, ptr u8, v127
        v129 = load v128
        v130 = const u64 35
        v131 = get_elem_ptr v16, ptr u8, v130
        v132 = load v131
        v133 = const u64 36
        v134 = get_elem_ptr v16, ptr u8, v133
        v135 = load v134
        v136 = const u64 37
        v137 = get_elem_ptr v16, ptr u8, v136
        v138 = load v137
        v139 = const u64 38
        v140 = get_elem_ptr v16, ptr u8, v139
        v141 = load v140
        v142 = const u64 39
        v143 = get_elem_ptr v16, ptr u8, v142
        v144 = load v143
        v145 = const u64 40
        v146 = get_elem_ptr v16, ptr u8, v145
        v147 = load v146
        v148 = const u64 41
        v149 = get_elem_ptr v16, ptr u8, v148
        v150 = load v149
        v151 = const u64 42
        v152 = get_elem_ptr v16, ptr u8, v151
        v153 = load v152
        v154 = const u64 43
        v155 = get_elem_ptr v16, ptr u8, v154
        v156 = load v155
        v157 = const u64 44
        v158 = get_elem_ptr v16, ptr u8, v157
        v159 = load v158
        v160 = const u64 45
        v161 = get_elem_ptr v16, ptr u8, v160
        v162 = load v161
        v163 = const u64 46
        v164 = get_elem_ptr v16, ptr u8, v163
        v165 = load v164
        v166 = const u64 47
        v167 = get_elem_ptr v16, ptr u8, v166
        v168 = load v167
        v169 = const u64 48
        v170 = get_elem_ptr v16, ptr u8, v169
        v171 = load v170
        v172 = const u64 49
        v173 = get_elem_ptr v16, ptr u8, v172
        v174 = load v173
        v175 = const u64 50
        v176 = get_elem_ptr v16, ptr u8, v175
        v177 = load v176
        v178 = const u64 51
        v179 = get_elem_ptr v16, ptr u8, v178
        v180 = load v179
        v181 = const u64 52
        v182 = get_elem_ptr v16, ptr u8, v181
        v183 = load v182
        v184 = const u64 53
        v185 = get_elem_ptr v16, ptr u8, v184
        v186 = load v185
        v187 = const u64 54
        v188 = get_elem_ptr v16, ptr u8, v187
        v189 = load v188
        v190 = const u64 55
        v191 = get_elem_ptr v16, ptr u8, v190
        v192 = load v191
        v193 = const u64 56
        v194 = get_elem_ptr v16, ptr u8, v193
        v195 = load v194
        v196 = const u64 57
        v197 = get_elem_ptr v16, ptr u8, v196
        v198 = load v197
        v199 = const u64 58
        v200 = get_elem_ptr v16, ptr u8, v199
        v201 = load v200
        v202 = const u64 59
        v203 = get_elem_ptr v16, ptr u8, v202
        v204 = load v203
        v205 = const u64 60
        v206 = get_elem_ptr v16, ptr u8, v205
        v207 = load v206
        v208 = const u64 61
        v209 = get_elem_ptr v16, ptr u8, v208
        v210 = load v209
        v211 = const u64 62
        v212 = get_elem_ptr v16, ptr u8, v211
        v213 = load v212
        v214 = const u64 63
        v215 = get_elem_ptr v16, ptr u8, v214
        v216 = load v215
        v217 = get_local ptr { [u8; 64] }, secp256k1, !19
        v218 = const u64 0
        v219 = const u64 0
        v220 = get_elem_ptr v217, ptr u8, v218, v219
        store v27 to v220
        v221 = const u64 0
        v222 = const u64 1
        v223 = get_elem_ptr v217, ptr u8, v221, v222
        store v30 to v223
        v224 = const u64 0
        v225 = const u64 2
        v226 = get_elem_ptr v217, ptr u8, v224, v225
        store v33 to v226
        v227 = const u64 0
        v228 = const u64 3
        v229 = get_elem_ptr v217, ptr u8, v227, v228
        store v36 to v229
        v230 = const u64 0
        v231 = const u64 4
        v232 = get_elem_ptr v217, ptr u8, v230, v231
        store v39 to v232
        v233 = const u64 0
        v234 = const u64 5
        v235 = get_elem_ptr v217, ptr u8, v233, v234
        store v42 to v235
        v236 = const u64 0
        v237 = const u64 6
        v238 = get_elem_ptr v217, ptr u8, v236, v237
        store v45 to v238
        v239 = const u64 0
        v240 = const u64 7
        v241 = get_elem_ptr v217, ptr u8, v239, v240
        store v48 to v241
        v242 = const u64 0
        v243 = const u64 8
        v244 = get_elem_ptr v217, ptr u8, v242, v243
        store v51 to v244
        v245 = const u64 0
        v246 = const u64 9
        v247 = get_elem_ptr v217, ptr u8, v245, v246
        store v54 to v247
        v248 = const u64 0
        v249 = const u64 10
        v250 = get_elem_ptr v217, ptr u8, v248, v249
        store v57 to v250
        v251 = const u64 0
        v252 = const u64 11
        v253 = get_elem_ptr v217, ptr u8, v251, v252
        store v60 to v253
        v254 = const u64 0
        v255 = const u64 12
        v256 = get_elem_ptr v217, ptr u8, v254, v255
        store v63 to v256
        v257 = const u64 0
        v258 = const u64 13
        v259 = get_elem_ptr v217, ptr u8, v257, v258
        store v66 to v259
        v260 = const u64 0
        v261 = const u64 14
        v262 = get_elem_ptr v217, ptr u8, v260, v261
        store v69 to v262
        v263 = const u64 0
        v264 = const u64 15
        v265 = get_elem_ptr v217, ptr u8, v263, v264
        store v72 to v265
        v266 = const u64 0
        v267 = const u64 16
        v268 = get_elem_ptr v217, ptr u8, v266, v267
        store v75 to v268
        v269 = const u64 0
        v270 = const u64 17
        v271 = get_elem_ptr v217, ptr u8, v269, v270
        store v78 to v271
        v272 = const u64 0
        v273 = const u64 18
        v274 = get_elem_ptr v217, ptr u8, v272, v273
        store v81 to v274
        v275 = const u64 0
        v276 = const u64 19
        v277 = get_elem_ptr v217, ptr u8, v275, v276
        store v84 to v277
        v278 = const u64 0
        v279 = const u64 20
        v280 = get_elem_ptr v217, ptr u8, v278, v279
        store v87 to v280
        v281 = const u64 0
        v282 = const u64 21
        v283 = get_elem_ptr v217, ptr u8, v281, v282
        store v90 to v283
        v284 = const u64 0
        v285 = const u64 22
        v286 = get_elem_ptr v217, ptr u8, v284, v285
        store v93 to v286
        v287 = const u64 0
        v288 = const u64 23
        v289 = get_elem_ptr v217, ptr u8, v287, v288
        store v96 to v289
        v290 = const u64 0
        v291 = const u64 24
        v292 = get_elem_ptr v217, ptr u8, v290, v291
        store v99 to v292
        v293 = const u64 0
        v294 = const u64 25
        v295 = get_elem_ptr v217, ptr u8, v293, v294
        store v102 to v295
        v296 = const u64 0
        v297 = const u64 26
        v298 = get_elem_ptr v217, ptr u8, v296, v297
        store v105 to v298
        v299 = const u64 0
        v300 = const u64 27
        v301 = get_elem_ptr v217, ptr u8, v299, v300
        store v108 to v301
        v302 = const u64 0
        v303 = const u64 28
        v304 = get_elem_ptr v217, ptr u8, v302, v303
        store v111 to v304
        v305 = const u64 0
        v306 = const u64 29
        v307 = get_elem_ptr v217, ptr u8, v305, v306
        store v114 to v307
        v308 = const u64 0
        v309 = const u64 30
        v310 = get_elem_ptr v217, ptr u8, v308, v309
        store v117 to v310
        v311 = const u64 0
        v312 = const u64 31
        v313 = get_elem_ptr v217, ptr u8, v311, v312
        store v120 to v313
        v314 = const u64 0
        v315 = const u64 32
        v316 = get_elem_ptr v217, ptr u8, v314, v315
        store v123 to v316
        v317 = const u64 0
        v318 = const u64 33
        v319 = get_elem_ptr v217, ptr u8, v317, v318
        store v126 to v319
        v320 = const u64 0
        v321 = const u64 34
        v322 = get_elem_ptr v217, ptr u8, v320, v321
        store v129 to v322
        v323 = const u64 0
        v324 = const u64 35
        v325 = get_elem_ptr v217, ptr u8, v323, v324
        store v132 to v325
        v326 = const u64 0
        v327 = const u64 36
        v328 = get_elem_ptr v217, ptr u8, v326, v327
        store v135 to v328
        v329 = const u64 0
        v330 = const u64 37
        v331 = get_elem_ptr v217, ptr u8, v329, v330
        store v138 to v331
        v332 = const u64 0
        v333 = const u64 38
        v334 = get_elem_ptr v217, ptr u8, v332, v333
        store v141 to v334
        v335 = const u64 0
        v336 = const u64 39
        v337 = get_elem_ptr v217, ptr u8, v335, v336
        store v144 to v337
        v338 = const u64 0
        v339 = const u64 40
        v340 = get_elem_ptr v217, ptr u8, v338, v339
        store v147 to v340
        v341 = const u64 0
        v342 = const u64 41
        v343 = get_elem_ptr v217, ptr u8, v341, v342
        store v150 to v343
        v344 = const u64 0
        v345 = const u64 42
        v346 = get_elem_ptr v217, ptr u8, v344, v345
        store v153 to v346
        v347 = const u64 0
        v348 = const u64 43
        v349 = get_elem_ptr v217, ptr u8, v347, v348
        store v156 to v349
        v350 = const u64 0
        v351 = const u64 44
        v352 = get_elem_ptr v217, ptr u8, v350, v351
        store v159 to v352
        v353 = const u64 0
        v354 = const u64 45
        v355 = get_elem_ptr v217, ptr u8, v353, v354
        store v162 to v355
        v356 = const u64 0
        v357 = const u64 46
        v358 = get_elem_ptr v217, ptr u8, v356, v357
        store v165 to v358
        v359 = const u64 0
        v360 = const u64 47
        v361 = get_elem_ptr v217, ptr u8, v359, v360
        store v168 to v361
        v362 = const u64 0
        v363 = const u64 48
        v364 = get_elem_ptr v217, ptr u8, v362, v363
        store v171 to v364
        v365 = const u64 0
        v366 = const u64 49
        v367 = get_elem_ptr v217, ptr u8, v365, v366
        store v174 to v367
        v368 = const u64 0
        v369 = const u64 50
        v370 = get_elem_ptr v217, ptr u8, v368, v369
        store v177 to v370
        v371 = const u64 0
        v372 = const u64 51
        v373 = get_elem_ptr v217, ptr u8, v371, v372
        store v180 to v373
        v374 = const u64 0
        v375 = const u64 52
        v376 = get_elem_ptr v217, ptr u8, v374, v375
        store v183 to v376
        v377 = const u64 0
        v378 = const u64 53
        v379 = get_elem_ptr v217, ptr u8, v377, v378
        store v186 to v379
        v380 = const u64 0
        v381 = const u64 54
        v382 = get_elem_ptr v217, ptr u8, v380, v381
        store v189 to v382
        v383 = const u64 0
        v384 = const u64 55
        v385 = get_elem_ptr v217, ptr u8, v383, v384
        store v192 to v385
        v386 = const u64 0
        v387 = const u64 56
        v388 = get_elem_ptr v217, ptr u8, v386, v387
        store v195 to v388
        v389 = const u64 0
        v390 = const u64 57
        v391 = get_elem_ptr v217, ptr u8, v389, v390
        store v198 to v391
        v392 = const u64 0
        v393 = const u64 58
        v394 = get_elem_ptr v217, ptr u8, v392, v393
        store v201 to v394
        v395 = const u64 0
        v396 = const u64 59
        v397 = get_elem_ptr v217, ptr u8, v395, v396
        store v204 to v397
        v398 = const u64 0
        v399 = const u64 60
        v400 = get_elem_ptr v217, ptr u8, v398, v399
        store v207 to v400
        v401 = const u64 0
        v402 = const u64 61
        v403 = get_elem_ptr v217, ptr u8, v401, v402
        store v210 to v403
        v404 = const u64 0
        v405 = const u64 62
        v406 = get_elem_ptr v217, ptr u8, v404, v405
        store v213 to v406
        v407 = const u64 0
        v408 = const u64 63
        v409 = get_elem_ptr v217, ptr u8, v407, v408
        store v216 to v409
        v410 = get_local ptr { [u8; 64] }, secp256k1, !21
        v411 = get_local ptr { [u8; 64] }, secp256k1, !23
        v412 = ptr_to_int v410 to u64, !26
        v413 = int_to_ptr v412 to ptr { [u8; 64] }, !27
        v414 = const u64 0
        v415 = get_elem_ptr v413, ptr [u8; 64], v414, !29
        v416 = ptr_to_int v411 to u64, !30
        v417 = int_to_ptr v416 to ptr { [u8; 64] }, !31
        v418 = const u64 0
        v419 = get_elem_ptr v417, ptr [u8; 64], v418, !32
        v420 = const u64 64, !33
        v421 = asm(result, r2: v415, r3: v419, r4: v420) -> bool result, !35 {
            meq    result r2 r3 r4, !36
        }
        v422 = get_local ptr { [u8; 64] }, secp256k1, !38
        v423 = get_local ptr { [u8; 64] }, __tmp_arg
        mem_copy_val v423, v422
        v424 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg0
        v425 = const u64 0
        v426 = const u64 0
        v427 = const u64 0
        v428 = get_elem_ptr v424, ptr u64, v425, v426, v427
        store v6 to v428
        v429 = const u64 0
        v430 = const u64 0
        v431 = const u64 1
        v432 = get_elem_ptr v424, ptr u64, v429, v430, v431
        store v11 to v432
        v433 = const u64 0
        v434 = const u64 1
        v435 = get_elem_ptr v424, ptr u64, v433, v434
        store v15 to v435
        v436 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val
        v437 = call address_7(v423, v424, v436)
        v438 = get_local ptr { [u8; 64] }, secp256k1, !40
        v439 = get_local ptr { [u8; 64] }, __tmp_arg1
        mem_copy_val v439, v438
        v440 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg2
        v441 = const u64 0
        v442 = const u64 0
        v443 = const u64 0
        v444 = get_elem_ptr v440, ptr u64, v441, v442, v443
        store v6 to v444
        v445 = const u64 0
        v446 = const u64 0
        v447 = const u64 1
        v448 = get_elem_ptr v440, ptr u64, v445, v446, v447
        store v11 to v448
        v449 = const u64 0
        v450 = const u64 1
        v451 = get_elem_ptr v440, ptr u64, v449, v450
        store v15 to v451
        v452 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __ret_val0
        v453 = call address_7(v439, v440, v452)
        v454 = const unit ()
        ret () v454
    }

    pub fn address_7(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }) -> ptr { u64, ( { b256 } | { u64 } ) }, !43 {
        local mut b256 __aggr_memcpy_0
        local mut b256 __aggr_memcpy_00
        local { u64, ( { b256 } | { u64 } ) } __anon_0
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __anon_00
        local { u64, ( () | b256 ) } __anon_000
        local { b256 } __anon_02
        local { u64, ( { b256 } | { u64 } ) } __anon_1
        local { u64, ( () | b256 ) } __anon_10
        local { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) } __matched_value_1
        local { u64, ( () | b256 ) } __matched_value_4
        local b256 __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { { u64, u64 }, u64 } } __tmp_arg1
        local { u64, ( () | b256 ) } __tmp_block_arg
        local { u64, ( { b256 } | { u64 } ) } __tmp_block_arg0
        local b256 inner_value

        entry(self: ptr { [u8; 64] }, message: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr { u64, ( { b256 } | { u64 } ) }):
        v0 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00, !48
        v1 = const u64 0
        v2 = get_elem_ptr v0, ptr u64, v1, !49
        v3 = const u64 0, !47
        store v3 to v2, !50
        v4 = ptr_to_int message to u64, !53
        v5 = int_to_ptr v4 to ptr { { { u64, u64 }, u64 } }, !54
        v6 = const u64 0
        v7 = get_elem_ptr v5, ptr { { u64, u64 }, u64 }, v6, !57
        v8 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v8, v7
        v9 = call len_20(v8)
        v10 = const u64 32, !58
        v11 = cmp eq v9 v10, !64
        v12 = const bool false, !65
        v13 = cmp eq v11 v12, !68
        cbr v13, recover_8_try_into_17_block0(), recover_8_try_into_17_block1(), !69

        recover_8_try_into_17_block0():
        v14 = get_local ptr { u64, ( () | b256 ) }, __anon_000, !72
        v15 = const u64 0
        v16 = get_elem_ptr v14, ptr u64, v15, !73
        v17 = const u64 0, !71
        store v17 to v16, !74
        v18 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v18, v14
        br recover_8_block0(v18), !76

        recover_8_try_into_17_block1():
        v19 = get_local ptr { u64, ( () | b256 ) }, __anon_10, !77
        v20 = const u64 0
        v21 = get_elem_ptr v19, ptr u64, v20, !78
        v22 = const u64 1, !71
        store v22 to v21, !79
        v23 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v23, v7
        v24 = call ptr_21(v23)
        v25 = asm(bits: v24) -> ptr b256 bits {
        }
        v26 = get_local ptr b256, __aggr_memcpy_0
        mem_copy_val v26, v25
        v27 = const u64 1
        v28 = const u64 1
        v29 = get_elem_ptr v19, ptr b256, v27, v28, !80
        mem_copy_val v29, v26
        v30 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        mem_copy_val v30, v19
        br recover_8_block0(v30), !81

        recover_8_block0(v31: ptr { u64, ( () | b256 ) }):
        v32 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !85
        mem_copy_val v32, v31
        v33 = get_local ptr { u64, ( () | b256 ) }, __tmp_block_arg
        v34 = const u64 0
        v35 = get_elem_ptr v33, ptr u64, v34
        v36 = load v35, !86
        v37 = const u64 1, !87
        v38 = cmp eq v36 v37, !90
        cbr v38, recover_8_unwrap_14_block0(), recover_8_unwrap_14_block1(), !91

        recover_8_unwrap_14_block0():
        v39 = get_local ptr { u64, ( () | b256 ) }, __matched_value_4, !92
        v40 = const u64 1
        v41 = const u64 1
        v42 = get_elem_ptr v39, ptr b256, v40, v41, !93
        v43 = get_local ptr b256, inner_value, !95
        mem_copy_val v43, v42
        v44 = get_local ptr b256, inner_value, !97
        v45 = const u64 32, !99
        v46 = asm(size: v45) -> u64 hp, !113 {
            aloc   size, !114
        }
        v47 = ptr_to_int v44 to u64, !116
        v48 = const u64 32, !117
        v49 = asm(dst: v46, src: v47, len: v48) -> (), !122 {
            mcp    dst src len, !123
        }
        v50 = const u64 1
        v51 = const u64 0
        v52 = get_elem_ptr v0, ptr { { { u64, u64 }, u64 } }, v50, v51, !124
        v53 = const u64 0
        v54 = const u64 0
        v55 = const u64 0
        v56 = get_elem_ptr v52, ptr u64, v53, v54, v55
        store v46 to v56
        v57 = const u64 0
        v58 = const u64 0
        v59 = const u64 1
        v60 = get_elem_ptr v52, ptr u64, v57, v58, v59
        store v45 to v60
        v61 = const u64 0
        v62 = const u64 1
        v63 = get_elem_ptr v52, ptr u64, v61, v62
        v64 = const u64 32, !125
        store v64 to v63
        v65 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !126
        mem_copy_val v65, v0
        v66 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __anon_00
        v67 = const u64 0
        v68 = get_elem_ptr v66, ptr u64, v67
        v69 = load v68
        v70 = const u64 0, !44
        v71 = cmp eq v69 v70, !129
        cbr v71, block0(), block1(), !127

        recover_8_unwrap_14_block1():
        v72 = const u64 0, !130
        revert v72, !135

        block0():
        v73 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !44
        v74 = const u64 1
        v75 = const u64 0
        v76 = get_elem_ptr v73, ptr { { { u64, u64 }, u64 } }, v74, v75
        v77 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_0, !47
        v78 = const u64 0
        v79 = get_elem_ptr v77, ptr u64, v78, !47
        v80 = const u64 0, !47
        store v80 to v79, !47
        v81 = get_local ptr { { { u64, u64 }, u64 } }, __tmp_arg1
        mem_copy_val v81, v76
        v82 = get_local ptr b256, __ret_val
        v83 = call sha256_24(v81, v82)
        v84 = get_local ptr b256, __aggr_memcpy_00
        mem_copy_val v84, v83
        v85 = get_local ptr { b256 }, __anon_02, !140
        v86 = const u64 0
        v87 = get_elem_ptr v85, ptr b256, v86, !141
        mem_copy_val v87, v84
        v88 = const u64 1
        v89 = const u64 0
        v90 = get_elem_ptr v77, ptr { b256 }, v88, v89, !47
        mem_copy_val v90, v85
        v91 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v91, v77
        br block5(v91)

        block1():
        v92 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !44
        v93 = const u64 0
        v94 = get_elem_ptr v92, ptr u64, v93, !44
        v95 = load v94
        v96 = const u64 1, !44
        v97 = cmp eq v95 v96, !144
        cbr v97, block2(), block3(), !142

        block2():
        v98 = get_local ptr { u64, ( { { { u64, u64 }, u64 } } | { u64 } ) }, __matched_value_1, !44
        v99 = const u64 1
        v100 = const u64 1
        v101 = get_elem_ptr v98, ptr { u64 }, v99, v100
        v102 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __anon_1, !47
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr u64, v103, !47
        v105 = const u64 1, !47
        store v105 to v104, !47
        v106 = const u64 1
        v107 = const u64 1
        v108 = get_elem_ptr v102, ptr { u64 }, v106, v107, !47
        mem_copy_val v108, v101
        v109 = get_local ptr { u64, ( { b256 } | { u64 } ) }, __tmp_block_arg0
        mem_copy_val v109, v102
        br block5(v109)

        block3():
        v110 = const u64 14757395258967588866, !126
        revert v110, !126

        block5(v111: ptr { u64, ( { b256 } | { u64 } ) }):
        mem_copy_val __ret_value, v111
        ret ptr { u64, ( { b256 } | { u64 } ) } __ret_value
    }

    pub fn len_20(self: ptr { { u64, u64 }, u64 }) -> u64, !147 {
        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !148
        v4 = load v3
        ret u64 v4
    }

    pub fn ptr_21(self: ptr { { u64, u64 }, u64 }) -> u64, !151 {
        local { u64, u64 } __tmp_arg

        entry(self: ptr { { u64, u64 }, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { { u64, u64 }, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr { u64, u64 }, v2, !152
        v4 = get_local ptr { u64, u64 }, __tmp_arg
        mem_copy_val v4, v3
        v5 = call ptr_22(v4)
        ret u64 v5
    }

    pub fn ptr_22(self: ptr { u64, u64 }) -> u64, !155 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 0
        v3 = get_elem_ptr v1, ptr u64, v2, !156
        v4 = load v3
        ret u64 v4
    }

    pub fn sha256_24(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256) -> ptr b256, !161 {
        local mut slice __aggr_memcpy_00
        local mut b256 __aggr_memcpy_03
        local { u64, u64 } __asm_arg
        local slice __asm_arg0
        local slice __asm_arg1
        local b256 __const = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        local { { { u64, u64 }, u64 } } __ret_val
        local { { u64, u64 }, u64 } __tmp_arg
        local { { u64, u64 }, u64 } __tmp_arg0
        local { { u64, u64 }, u64 } __tmp_arg1
        local { { u64, u64 }, u64 } __tmp_arg2
        local { u64, u64 } __tmp_arg3
        local { u64, u64 } __tmp_arg4
        local { u64, u64 } __tmp_arg5
        local { u64, u64 } __tmp_arg6
        local mut { { { u64, u64 }, u64 } } hasher
        local slice new_slice
        local mut b256 result_buffer

        entry(s: ptr { { { u64, u64 }, u64 } }, __ret_value: ptr b256):
        v0 = get_local ptr { { { u64, u64 }, u64 } }, __ret_val
        v1 = call new_25(v0)
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr v1, ptr u64, v2, v3, v4
        v6 = load v5
        v7 = const u64 0
        v8 = const u64 0
        v9 = const u64 1
        v10 = get_elem_ptr v1, ptr u64, v7, v8, v9
        v11 = load v10
        v12 = const u64 0
        v13 = const u64 1
        v14 = get_elem_ptr v1, ptr u64, v12, v13
        v15 = load v14
        v16 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !162
        v17 = const u64 0
        v18 = const u64 0
        v19 = const u64 0
        v20 = get_elem_ptr v16, ptr u64, v17, v18, v19
        store v6 to v20
        v21 = const u64 0
        v22 = const u64 0
        v23 = const u64 1
        v24 = get_elem_ptr v16, ptr u64, v21, v22, v23
        store v11 to v24
        v25 = const u64 0
        v26 = const u64 1
        v27 = get_elem_ptr v16, ptr u64, v25, v26
        store v15 to v27
        v28 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !163
        v29 = ptr_to_int s to u64, !166
        v30 = int_to_ptr v29 to ptr { { { u64, u64 }, u64 } }, !166
        v31 = const u64 0
        v32 = get_elem_ptr v30, ptr { { u64, u64 }, u64 }, v31, !168
        v33 = const u64 0
        v34 = get_elem_ptr v28, ptr { { u64, u64 }, u64 }, v33, !172
        v35 = ptr_to_int v32 to u64, !173
        v36 = int_to_ptr v35 to ptr { { u64, u64 }, u64 }, !174
        v37 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg
        mem_copy_val v37, v36
        v38 = call len_20(v37)
        v39 = const u64 0, !175
        v40 = cmp eq v38 v39, !180
        cbr v40, hash_26_write_27_block0(), hash_26_write_27_append_28_block1(), !181

        hash_26_write_27_append_28_block1():
        v41 = const u64 1
        v42 = get_elem_ptr v34, ptr u64, v41, !182
        v43 = load v42, !183
        v44 = const u64 0, !184
        v45 = cmp eq v43 v44, !187
        cbr v45, hash_26_write_27_append_28_block3(), hash_26_write_27_append_28_block4(), !188

        hash_26_write_27_append_28_block3():
        mem_copy_val v34, v36
        br hash_26_write_27_block0(), !190

        hash_26_write_27_append_28_block4():
        v46 = load v42, !191
        v47 = add v46, v38, !194
        v48 = load v42, !195
        v49 = const u64 0
        v50 = get_elem_ptr v34, ptr { u64, u64 }, v49, !196
        v51 = get_local ptr { u64, u64 }, __tmp_arg5
        mem_copy_val v51, v50
        v52 = call capacity_31(v51)
        v53 = cmp lt v52 v47, !199
        cbr v53, hash_26_write_27_append_28_block6(), hash_26_write_27_append_28_block8(), !200

        hash_26_write_27_append_28_block6():
        v54 = get_local ptr { u64, u64 }, __tmp_arg3
        mem_copy_val v54, v50
        v55 = call ptr_22(v54)
        v56 = get_local ptr { u64, u64 }, __tmp_arg6
        mem_copy_val v56, v50
        v57 = call capacity_31(v56)
        v58 = cmp gt v47 v57, !205
        cbr v58, hash_26_write_27_append_28_realloc_bytes_35_block0(), hash_26_write_27_append_28_realloc_bytes_35_block5(v55), !206

        hash_26_write_27_append_28_realloc_bytes_35_block0():
        v59 = asm(size: v47) -> u64 hp, !209 {
            aloc   size, !114
        }
        v60 = const u64 0, !210
        v61 = cmp gt v57 v60, !213
        cbr v61, hash_26_write_27_append_28_realloc_bytes_35_block1(), hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !214

        hash_26_write_27_append_28_realloc_bytes_35_block1():
        v62 = asm(dst: v59, src: v55, len: v57) -> (), !217 {
            mcp    dst src len, !123
        }
        br hash_26_write_27_append_28_realloc_bytes_35_block5(v59), !218

        hash_26_write_27_append_28_realloc_bytes_35_block5(v63: u64):
        v64 = get_local ptr { u64, u64 }, __asm_arg
        v65 = const u64 0
        v66 = get_elem_ptr v64, ptr u64, v65
        store v63 to v66
        v67 = const u64 1
        v68 = get_elem_ptr v64, ptr u64, v67
        store v47 to v68
        v69 = asm(ptr: v64) -> ptr slice ptr {
        }
        v70 = get_local ptr slice, __aggr_memcpy_00
        mem_copy_val v70, v69
        v71 = get_local ptr slice, new_slice, !220
        mem_copy_val v71, v70
        v72 = get_local ptr slice, new_slice, !222
        v73 = get_local ptr slice, __asm_arg0
        mem_copy_val v73, v70
        v74 = asm(ptr: v73) -> ptr { u64, u64 } ptr {
        }
        v75 = const u64 1
        v76 = get_elem_ptr v74, ptr u64, v75
        v77 = load v76
        v78 = asm(size: v77) -> u64 hp, !227 {
            aloc   size, !114
        }
        v79 = const u64 0, !228
        v80 = cmp gt v77 v79, !231
        cbr v80, hash_26_write_27_append_28_from_37_block0(), hash_26_write_27_append_28_from_37_block2(), !232

        hash_26_write_27_append_28_from_37_block0():
        v81 = get_local ptr slice, __asm_arg1
        mem_copy_val v81, v72
        v82 = asm(ptr: v81) -> ptr { u64, u64 } ptr {
        }
        v83 = const u64 0
        v84 = get_elem_ptr v82, ptr u64, v83
        v85 = load v84
        v86 = asm(dst: v78, src: v85, len: v77) -> (), !236 {
            mcp    dst src len, !237
        }
        br hash_26_write_27_append_28_from_37_block2(), !238

        hash_26_write_27_append_28_from_37_block2():
        v87 = const u64 0
        v88 = get_elem_ptr v50, ptr u64, v87
        store v78 to v88
        v89 = const u64 1
        v90 = get_elem_ptr v50, ptr u64, v89
        store v77 to v90
        br hash_26_write_27_append_28_block8(), !239

        hash_26_write_27_append_28_block8():
        v91 = get_local ptr { u64, u64 }, __tmp_arg4
        mem_copy_val v91, v50
        v92 = call ptr_22(v91)
        v93 = asm(ptr: v92, offset: v48, new) -> u64 new, !243 {
            add    new ptr offset, !244
        }
        v94 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg1
        mem_copy_val v94, v36
        v95 = call ptr_21(v94)
        v96 = asm(dst: v93, src: v95, len: v38) -> (), !247 {
            mcp    dst src len, !123
        }
        store v47 to v42, !249
        br hash_26_write_27_block0(), !250

        hash_26_write_27_block0():
        v97 = get_local ptr b256, __const
        v98 = get_local ptr { { { u64, u64 }, u64 } }, hasher, !251
        v99 = get_local ptr b256, result_buffer, !255
        mem_copy_val v99, v97
        v100 = get_local ptr b256, result_buffer, !257
        v101 = ptr_to_int v98 to u64, !258
        v102 = int_to_ptr v101 to ptr { { { u64, u64 }, u64 } }, !258
        v103 = const u64 0
        v104 = get_elem_ptr v102, ptr { { u64, u64 }, u64 }, v103, !259
        v105 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg2
        mem_copy_val v105, v104
        v106 = call ptr_21(v105)
        v107 = get_local ptr { { u64, u64 }, u64 }, __tmp_arg0
        mem_copy_val v107, v104
        v108 = call len_20(v107)
        v109 = asm(hash: v100, ptr: v106, bytes: v108) -> ptr b256 hash {
            s256   hash ptr bytes, !260
        }
        v110 = get_local ptr b256, __aggr_memcpy_03
        mem_copy_val v110, v109
        mem_copy_val __ret_value, v110
        ret ptr b256 __ret_value
    }

    pub fn new_25(__ret_value: ptr { { { u64, u64 }, u64 } }) -> ptr { { { u64, u64 }, u64 } }, !263 {
        entry(__ret_value: ptr { { { u64, u64 }, u64 } }):
        v0 = const u64 0, !264
        v1 = asm(size: v0) -> u64 hp, !271 {
            aloc   size, !114
        }
        v2 = const u64 0
        v3 = const u64 0
        v4 = const u64 0
        v5 = get_elem_ptr __ret_value, ptr u64, v2, v3, v4
        store v1 to v5
        v6 = const u64 0
        v7 = const u64 0
        v8 = const u64 1
        v9 = get_elem_ptr __ret_value, ptr u64, v6, v7, v8
        v10 = const u64 0, !272
        store v10 to v9
        v11 = const u64 0
        v12 = const u64 1
        v13 = get_elem_ptr __ret_value, ptr u64, v11, v12
        v14 = const u64 0, !273
        store v14 to v13
        ret ptr { { { u64, u64 }, u64 } } __ret_value
    }

    pub fn capacity_31(self: ptr { u64, u64 }) -> u64, !276 {
        entry(self: ptr { u64, u64 }):
        v0 = ptr_to_int self to u64
        v1 = int_to_ptr v0 to ptr { u64, u64 }
        v2 = const u64 1
        v3 = get_elem_ptr v1, ptr u64, v2, !277
        v4 = load v3
        ret u64 v4
    }
}

!0 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/main.sw"
!1 = span !0 62 176
!2 = fn_name_span !0 65 69
!3 = (!1 !2)
!4 = span !0 156 173
!5 = fn_call_path_span !0 158 171
!6 = "/home/kebradalaonda/p/swaylab/PRs/temp optimize/asm_inlining_issue/src/play01D.sw"
!7 = span !6 1042 1058
!8 = fn_call_path_span !6 1042 1056
!9 = span !6 314 323
!10 = (!4 !5 !7 !8 !9)
!11 = (!4 !5 !7 !8)
!12 = (!4 !5 !7 !8)
!13 = span !6 315 318
!14 = (!4 !5 !7 !8 !9)
!15 = (!4 !5 !7 !8)
!16 = (!4 !5 !7 !8)
!17 = (!4 !5 !7 !8)
!18 = span !6 1026 1059
!19 = (!4 !5 !18)
!20 = span !6 1072 1081
!21 = (!4 !5 !20)
!22 = span !6 1085 1094
!23 = (!4 !5 !22)
!24 = span !6 1072 1094
!25 = fn_call_path_span !6 1082 1084
!26 = (!4 !5 !24 !25)
!27 = (!4 !5 !24 !25)
!28 = span !6 218 232
!29 = (!4 !5 !24 !25 !28)
!30 = (!4 !5 !24 !25)
!31 = (!4 !5 !24 !25)
!32 = (!4 !5 !24 !25 !28)
!33 = span !6 889 891
!34 = span !6 842 962
!35 = (!4 !5 !24 !25 !34)
!36 = span !6 907 926
!37 = span !6 1108 1117
!38 = (!4 !5 !37)
!39 = span !6 1148 1157
!40 = (!4 !5 !39)
!41 = span !6 492 714
!42 = fn_name_span !6 499 506
!43 = (!41 !42)
!44 = span !6 582 603
!45 = fn_call_path_span !6 587 594
!46 = "/home/kebradalaonda/p/sway/sway-lib-std/src/result.sw"
!47 = span !46 1815 1933
!48 = (!44 !45 !47)
!49 = (!44 !45 !47)
!50 = (!44 !45 !47)
!51 = span !6 451 469
!52 = fn_call_path_span !6 459 467
!53 = (!44 !45 !51 !52)
!54 = (!44 !45 !51 !52)
!55 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/message.sw"
!56 = span !55 329 341
!57 = (!44 !45 !51 !52 !56)
!58 = span !55 1593 1595
!59 = span !55 1573 1595
!60 = fn_call_path_span !55 1590 1592
!61 = "/home/kebradalaonda/p/sway/sway-lib-std/src/ops.sw"
!62 = span !61 15515 15529
!63 = fn_call_path_span !61 15520 15522
!64 = (!44 !45 !51 !52 !59 !60 !62 !63)
!65 = span !61 12533 12538
!66 = span !61 15514 15536
!67 = fn_call_path_span !61 15531 15534
!68 = (!44 !45 !51 !52 !59 !60 !66 !67)
!69 = (!44 !45 !51 !52 !59)
!70 = "/home/kebradalaonda/p/sway/sway-lib-std/src/option.sw"
!71 = span !70 2461 2560
!72 = (!44 !45 !51 !52 !71)
!73 = (!44 !45 !51 !52 !71)
!74 = (!44 !45 !51 !52 !71)
!75 = span !55 1610 1621
!76 = (!44 !45 !51 !52 !75)
!77 = (!44 !45 !51 !52 !71)
!78 = (!44 !45 !51 !52 !71)
!79 = (!44 !45 !51 !52 !71)
!80 = (!44 !45 !51 !52 !71)
!81 = (!44 !45 !51 !52)
!82 = span !6 451 478
!83 = fn_call_path_span !6 470 476
!84 = span !70 4973 5075
!85 = (!44 !45 !82 !83 !84)
!86 = (!44 !45 !82 !83)
!87 = span !70 4979 4983
!88 = span !70 4998 5037
!89 = fn_call_path_span !70 4998 5037
!90 = (!44 !45 !82 !83 !88 !89)
!91 = (!44 !45 !82 !83 !88)
!92 = (!44 !45 !82 !83 !87)
!93 = (!44 !45 !82 !83)
!94 = span !70 5009 5020
!95 = (!44 !45 !82 !83 !94)
!96 = span !70 5025 5036
!97 = (!44 !45 !82 !83 !96)
!98 = "/home/kebradalaonda/p/sway/sway-lib-std/src/bytes.sw"
!99 = span !98 28953 28955
!100 = span !6 435 479
!101 = fn_call_path_span !6 435 450
!102 = "/home/kebradalaonda/p/sway/sway-lib-std/src/crypto/public_key.sw"
!103 = span !102 3133 3150
!104 = fn_call_path_span !102 3133 3144
!105 = span !98 28933 28956
!106 = fn_call_path_span !98 28933 28952
!107 = span !98 4157 4190
!108 = fn_call_path_span !98 4157 4180
!109 = span !98 863 884
!110 = fn_call_path_span !98 863 874
!111 = "/home/kebradalaonda/p/sway/sway-lib-std/src/alloc.sw"
!112 = span !111 3315 3378
!113 = (!44 !45 !100 !101 !103 !104 !105 !106 !107 !108 !109 !110 !112)
!114 = span !111 3342 3351
!115 = span !98 29065 29077
!116 = (!44 !45 !100 !101 !103 !104 !115)
!117 = span !98 29107 29109
!118 = span !98 29065 29110
!119 = fn_call_path_span !98 29078 29091
!120 = "/home/kebradalaonda/p/sway/sway-lib-std/src/raw_ptr.sw"
!121 = span !120 5999 6076
!122 = (!44 !45 !100 !101 !103 !104 !118 !119 !121)
!123 = span !120 6050 6065
!124 = (!44 !45 !47)
!125 = span !98 28978 28980
!126 = span !6 576 708
!127 = span !6 618 668
!128 = fn_call_path_span !6 618 668
!129 = (!127 !128)
!130 = span !70 5062 5063
!131 = span !70 5055 5064
!132 = fn_call_path_span !70 5055 5061
!133 = "/home/kebradalaonda/p/sway/sway-lib-std/src/revert.sw"
!134 = span !133 757 771
!135 = (!44 !45 !82 !83 !131 !132 !134)
!136 = span !6 636 666
!137 = fn_call_path_span !6 636 649
!138 = "/home/kebradalaonda/p/sway/sway-lib-std/src/address.sw"
!139 = span !138 2370 2383
!140 = (!136 !137 !139)
!141 = (!136 !137)
!142 = span !6 681 698
!143 = fn_call_path_span !6 681 698
!144 = (!142 !143)
!145 = span !98 13771 13819
!146 = fn_name_span !98 13778 13781
!147 = (!145 !146)
!148 = span !98 2506 2514
!149 = span !98 15175 15233
!150 = fn_name_span !98 15182 15185
!151 = (!149 !150)
!152 = span !98 2445 2458
!153 = span !98 978 1030
!154 = fn_name_span !98 985 988
!155 = (!153 !154)
!156 = span !98 400 412
!157 = "/home/kebradalaonda/p/sway/sway-lib-std/src/hash.sw"
!158 = span !157 9009 9138
!159 = fn_name_span !157 9016 9022
!160 = inline "never"
!161 = (!158 !159 !160)
!162 = span !157 9065 9096
!163 = span !157 9108 9114
!164 = span !157 9101 9115
!165 = fn_call_path_span !157 9103 9107
!166 = (!164 !165)
!167 = span !102 524 536
!168 = (!164 !165 !167)
!169 = span !102 5123 5146
!170 = fn_call_path_span !102 5129 5134
!171 = span !157 142 154
!172 = (!164 !165 !169 !170 !171)
!173 = (!164 !165 !169 !170)
!174 = (!164 !165 !169 !170)
!175 = span !98 18435 18436
!176 = span !157 365 389
!177 = fn_call_path_span !157 376 382
!178 = span !98 18422 18436
!179 = fn_call_path_span !98 18432 18434
!180 = (!164 !165 !169 !170 !176 !177 !178 !179)
!181 = (!164 !165 !169 !170 !176 !177 !178)
!182 = (!164 !165 !169 !170 !176 !177 !148)
!183 = (!164 !165 !169 !170 !176 !177)
!184 = span !98 18572 18573
!185 = span !98 18560 18573
!186 = fn_call_path_span !98 18569 18571
!187 = (!164 !165 !169 !170 !176 !177 !185 !186)
!188 = (!164 !165 !169 !170 !176 !177 !185)
!189 = span !98 18614 18620
!190 = (!164 !165 !169 !170 !176 !177 !189)
!191 = (!164 !165 !169 !170 !176 !177)
!192 = span !98 18657 18677
!193 = fn_call_path_span !98 18666 18667
!194 = (!164 !165 !169 !170 !176 !177 !192 !193)
!195 = (!164 !165 !169 !170 !176 !177)
!196 = (!164 !165 !169 !170 !176 !177 !152)
!197 = span !98 18808 18838
!198 = fn_call_path_span !98 18828 18829
!199 = (!164 !165 !169 !170 !176 !177 !197 !198)
!200 = (!164 !165 !169 !170 !176 !177 !197)
!201 = span !98 18914 18974
!202 = fn_call_path_span !98 18914 18927
!203 = span !111 4168 4185
!204 = fn_call_path_span !111 4178 4179
!205 = (!164 !165 !169 !170 !176 !177 !201 !202 !203 !204)
!206 = (!164 !165 !169 !170 !176 !177 !201 !202 !203)
!207 = span !111 4210 4232
!208 = fn_call_path_span !111 4210 4221
!209 = (!164 !165 !169 !170 !176 !177 !201 !202 !207 !208 !112)
!210 = span !111 4253 4254
!211 = span !111 4245 4254
!212 = fn_call_path_span !111 4251 4252
!213 = (!164 !165 !169 !170 !176 !177 !201 !202 !211 !212)
!214 = (!164 !165 !169 !170 !176 !177 !201 !202 !211)
!215 = span !111 4269 4302
!216 = fn_call_path_span !111 4273 4286
!217 = (!164 !165 !169 !170 !176 !177 !201 !202 !215 !216 !121)
!218 = (!164 !165 !169 !170 !176 !177 !201 !202)
!219 = span !98 18853 19016
!220 = (!164 !165 !169 !170 !176 !177 !219)
!221 = span !98 19055 19064
!222 = (!164 !165 !169 !170 !176 !177 !221)
!223 = span !98 19040 19065
!224 = fn_call_path_span !98 19040 19054
!225 = span !98 2173 2189
!226 = fn_call_path_span !98 2173 2184
!227 = (!164 !165 !169 !170 !176 !177 !223 !224 !225 !226 !112)
!228 = span !98 2208 2209
!229 = span !98 2202 2209
!230 = fn_call_path_span !98 2206 2207
!231 = (!164 !165 !169 !170 !176 !177 !223 !224 !229 !230)
!232 = (!164 !165 !169 !170 !176 !177 !223 !224 !229)
!233 = span !98 2224 2259
!234 = fn_call_path_span !98 2236 2243
!235 = span !120 3447 3522
!236 = (!164 !165 !169 !170 !176 !177 !223 !224 !233 !234 !235)
!237 = span !120 3496 3511
!238 = (!164 !165 !169 !170 !176 !177 !223 !224)
!239 = (!164 !165 !169 !170 !176 !177)
!240 = span !98 19100 19143
!241 = fn_call_path_span !98 19115 19130
!242 = span !120 6721 6825
!243 = (!164 !165 !169 !170 !176 !177 !240 !241 !242)
!244 = span !120 6771 6789
!245 = span !98 19153 19198
!246 = fn_call_path_span !98 19165 19178
!247 = (!164 !165 !169 !170 !176 !177 !245 !246 !121)
!248 = span !98 19244 19263
!249 = (!164 !165 !169 !170 !176 !177 !248)
!250 = (!164 !165 !169 !170 !176 !177)
!251 = span !157 9121 9127
!252 = span !157 9121 9136
!253 = fn_call_path_span !157 9128 9134
!254 = span !157 440 476
!255 = (!252 !253 !254)
!256 = span !157 508 521
!257 = (!252 !253 !256)
!258 = (!252 !253)
!259 = (!252 !253 !171)
!260 = span !157 619 638
!261 = span !157 177 263
!262 = fn_name_span !157 184 187
!263 = (!261 !262)
!264 = span !98 570 571
!265 = span !157 234 246
!266 = fn_call_path_span !157 234 244
!267 = span !98 3079 3094
!268 = fn_call_path_span !98 3079 3092
!269 = span !98 558 572
!270 = fn_call_path_span !98 558 569
!271 = (!265 !266 !267 !268 !269 !270 !112)
!272 = span !98 591 592
!273 = span !98 3113 3114
!274 = span !98 1081 1134
!275 = fn_name_span !98 1088 1096
!276 = (!274 !275)
!277 = span !98 418 426

    [1;32mFinished[0m release [optimized + fuel] target(s) [4.952 KB] in 1.10s
