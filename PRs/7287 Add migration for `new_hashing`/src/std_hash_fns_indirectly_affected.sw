library;

use std::hash::*;
use std::hash::sha256 as sha256_alias;
use std::hash::keccak256 as keccak256_alias;

use std::string::*;

use ::indirectly_affected_types::*;

pub fn play() -> u64 {
    let _ = sha256(StructA::new());
    let _ = sha256(StructB::new());
    let _ = sha256(StructC::new());
    let _ = sha256(StructARec::new());
    let _ = sha256(StructBRec::new());
    let _ = sha256(StructCRec::new());
    let _ = sha256(EnumA::new());
    let _ = sha256(EnumB::new());
    let _ = sha256(EnumC::new());
    let _ = sha256(EnumARec::new());
    let _ = sha256(EnumBRec::new());
    let _ = sha256(EnumCRec::new());
    let _ = sha256(("affected", ));
    let _ = sha256((0u8, [1, 2, 3]));
    let _ = sha256((0u8, 0u8, Vec::<u8>::new()));
    let _ = sha256((StructA::new(), ));
    let _ = sha256((0u8, StructB::new()));
    let _ = sha256((0u8, 0u8, StructC::new()));
    let _ = sha256((EnumARec::new(), ));
    let _ = sha256((0u8, EnumBRec::new()));
    let _ = sha256((0u8, 0u8, EnumCRec::new()));
    let _ = sha256(String::new());
    let _ = std::hash::sha256("affected");
    let _ = std::hash::sha256("affected".as_raw_slice());
    let _ = std::hash::sha256(__to_str_array("affected"));
    let _ = std::hash::sha256([1u8, 2u8, 3u8]);
    let _ = std::hash::sha256(StructA::new());
    let _ = std::hash::sha256(StructB::new());
    let _ = std::hash::sha256(StructC::new());
    let _ = std::hash::sha256(StructARec::new());
    let _ = std::hash::sha256(StructBRec::new());
    let _ = std::hash::sha256(StructCRec::new());
    let _ = std::hash::sha256(EnumA::new());
    let _ = std::hash::sha256(EnumB::new());
    let _ = std::hash::sha256(EnumC::new());
    let _ = std::hash::sha256(EnumARec::new());
    let _ = std::hash::sha256(EnumBRec::new());
    let _ = std::hash::sha256(EnumCRec::new());
    let _ = std::hash::sha256(("affected", ));
    let _ = std::hash::sha256((0u8, [1, 2, 3]));
    let _ = std::hash::sha256((0u8, 0u8, Vec::<u8>::new()));
    let _ = std::hash::sha256((StructA::new(), ));
    let _ = std::hash::sha256((0u8, StructB::new()));
    let _ = std::hash::sha256((0u8, 0u8, StructC::new()));
    let _ = std::hash::sha256((EnumARec::new(), ));
    let _ = std::hash::sha256((0u8, EnumBRec::new()));
    let _ = std::hash::sha256((0u8, 0u8, EnumCRec::new()));
    let _ = std::hash::sha256(String::new());

    let _ = sha256_alias("affected");
    let _ = sha256_alias("affected".as_raw_slice());
    let _ = sha256_alias(__to_str_array("affected"));
    let _ = sha256_alias([1u8, 2u8, 3u8]);
    let _ = sha256_alias([1u8, 2u8, 3u8]);
    let _ = sha256_alias(StructA::new());
    let _ = sha256_alias(StructB::new());
    let _ = sha256_alias(StructC::new());
    let _ = sha256_alias(StructARec::new());
    let _ = sha256_alias(StructBRec::new());
    let _ = sha256_alias(StructCRec::new());
    let _ = sha256_alias(EnumA::new());
    let _ = sha256_alias(EnumB::new());
    let _ = sha256_alias(EnumC::new());
    let _ = sha256_alias(EnumARec::new());
    let _ = sha256_alias(EnumBRec::new());
    let _ = sha256_alias(EnumCRec::new());
    let _ = sha256_alias(("affected", ));
    let _ = sha256_alias((0u8, [1, 2, 3]));
    let _ = sha256_alias((0u8, 0u8, Vec::<u8>::new()));
    let _ = sha256_alias((StructA::new(), ));
    let _ = sha256_alias((0u8, StructB::new()));
    let _ = sha256_alias((0u8, 0u8, StructC::new()));
    let _ = sha256_alias((EnumARec::new(), ));
    let _ = sha256_alias((0u8, EnumBRec::new()));
    let _ = sha256_alias((0u8, 0u8, EnumCRec::new()));
    let _ = sha256_alias(String::new());

    let _ = keccak256("affected");
    let _ = keccak256("affected".as_raw_slice());
    let _ = keccak256(__to_str_array("affected"));
    let _ = keccak256([1u8, 2u8, 3u8]);
    let _ = keccak256(StructA::new());
    let _ = keccak256(StructB::new());
    let _ = keccak256(StructC::new());
    let _ = keccak256(StructARec::new());
    let _ = keccak256(StructBRec::new());
    let _ = keccak256(StructCRec::new());
    let _ = keccak256(EnumA::new());
    let _ = keccak256(EnumB::new());
    let _ = keccak256(EnumC::new());
    let _ = keccak256(EnumARec::new());
    let _ = keccak256(EnumBRec::new());
    let _ = keccak256(EnumCRec::new());
    let _ = keccak256(("affected", ));
    let _ = keccak256((0u8, [1, 2, 3]));
    let _ = keccak256((0u8, 0u8, Vec::<u8>::new()));
    let _ = keccak256((StructA::new(), ));
    let _ = keccak256((0u8, StructB::new()));
    let _ = keccak256((0u8, 0u8, StructC::new()));
    let _ = keccak256((EnumARec::new(), ));
    let _ = keccak256((0u8, EnumBRec::new()));
    let _ = keccak256((0u8, 0u8, EnumCRec::new()));
    let _ = keccak256(String::new());
    let _ = std::hash::keccak256("affected");
    let _ = std::hash::keccak256("affected".as_raw_slice());
    let _ = std::hash::keccak256(__to_str_array("affected"));
    let _ = std::hash::keccak256([1u8, 2u8, 3u8]);
    let _ = std::hash::keccak256(StructA::new());
    let _ = std::hash::keccak256(StructB::new());
    let _ = std::hash::keccak256(StructC::new());
    let _ = std::hash::keccak256(StructARec::new());
    let _ = std::hash::keccak256(StructBRec::new());
    let _ = std::hash::keccak256(StructCRec::new());
    let _ = std::hash::keccak256(EnumA::new());
    let _ = std::hash::keccak256(EnumB::new());
    let _ = std::hash::keccak256(EnumC::new());
    let _ = std::hash::keccak256(EnumARec::new());
    let _ = std::hash::keccak256(EnumBRec::new());
    let _ = std::hash::keccak256(EnumCRec::new());
    let _ = std::hash::keccak256(("affected", ));
    let _ = std::hash::keccak256((0u8, [1, 2, 3]));
    let _ = std::hash::keccak256((0u8, 0u8, Vec::<u8>::new()));
    let _ = std::hash::keccak256((StructA::new(), ));
    let _ = std::hash::keccak256((0u8, StructB::new()));
    let _ = std::hash::keccak256((0u8, 0u8, StructC::new()));
    let _ = std::hash::keccak256((EnumARec::new(), ));
    let _ = std::hash::keccak256((0u8, EnumBRec::new()));
    let _ = std::hash::keccak256((0u8, 0u8, EnumCRec::new()));
    let _ = std::hash::keccak256(String::new());

    let _ = keccak256_alias("affected");
    let _ = keccak256_alias("affected".as_raw_slice());
    let _ = keccak256_alias(__to_str_array("affected"));
    let _ = keccak256_alias([1u8, 2u8, 3u8]);
    let _ = keccak256_alias(StructA::new());
    let _ = keccak256_alias(StructB::new());
    let _ = keccak256_alias(StructC::new());
    let _ = keccak256_alias(StructARec::new());
    let _ = keccak256_alias(StructBRec::new());
    let _ = keccak256_alias(StructCRec::new());
    let _ = keccak256_alias(EnumA::new());
    let _ = keccak256_alias(EnumB::new());
    let _ = keccak256_alias(EnumC::new());
    let _ = keccak256_alias(EnumARec::new());
    let _ = keccak256_alias(EnumBRec::new());
    let _ = keccak256_alias(EnumCRec::new());
    let _ = keccak256_alias(("affected", ));
    let _ = keccak256_alias((0u8, [1, 2, 3]));
    let _ = keccak256_alias((0u8, 0u8, Vec::<u8>::new()));
    let _ = keccak256_alias((StructA::new(), ));
    let _ = keccak256_alias((0u8, StructB::new()));
    let _ = keccak256_alias((0u8, 0u8, StructC::new()));
    let _ = keccak256_alias((EnumARec::new(), ));
    let _ = keccak256_alias((0u8, EnumBRec::new()));
    let _ = keccak256_alias((0u8, 0u8, EnumCRec::new()));
    let _ = keccak256_alias(String::new());

    42
}